{"sha": "185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NWI5YWNiNjY0Mzg4OTQ1OTZmM2M0MGQyYWU0YzZmN2RlZWI4YWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-25T02:04:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-25T02:04:55Z"}, "message": "Auto merge of #62961 - Centril:rollup-kydeswa, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #61727 (Add binary dependencies to dep-info files)\n - #62736 (Polonius: fix some cases of `killed` fact generation, and most of the `ui` test suite)\n - #62758 (ci: Install clang on Windows through tarballs)\n - #62784 (Add riscv32i-unknown-none-elf target)\n - #62814 (add support for hexagon-unknown-linux-musl)\n - #62827 (Don't link mcjit/interpreter LLVM components)\n - #62901 (cleanup: Remove `extern crate serialize as rustc_serialize`s)\n - #62903 (Support SDKROOT env var on iOS)\n - #62906 (Require a value for configure --debuginfo-level)\n\nFailed merges:\n\n - #62910 (cleanup: Remove lint annotations in specific crates that are already enforced by rustbuild)\n\nr? @ghost", "tree": {"sha": "a032ed1d213b8f195cee010fb1d43d6623bb2f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a032ed1d213b8f195cee010fb1d43d6623bb2f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "html_url": "https://github.com/rust-lang/rust/commit/185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f19f7ff128a3b01eeab3f87f04cce22883f006", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f19f7ff128a3b01eeab3f87f04cce22883f006", "html_url": "https://github.com/rust-lang/rust/commit/03f19f7ff128a3b01eeab3f87f04cce22883f006"}, {"sha": "0340d72bf5bd8a740d46dee7325b69565b96af52", "url": "https://api.github.com/repos/rust-lang/rust/commits/0340d72bf5bd8a740d46dee7325b69565b96af52", "html_url": "https://github.com/rust-lang/rust/commit/0340d72bf5bd8a740d46dee7325b69565b96af52"}], "stats": {"total": 1427, "additions": 1198, "deletions": 229}, "files": [{"sha": "45ec767e0b875469c800631dea493be81760689e", "filename": ".azure-pipelines/steps/install-clang.yml", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/.azure-pipelines%2Fsteps%2Finstall-clang.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fsteps%2Finstall-clang.yml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -26,12 +26,18 @@ steps:\n #\n # Original downloaded here came from\n # http://releases.llvm.org/7.0.0/LLVM-7.0.0-win64.exe\n-- script: |\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf %TEMP%\\LLVM-7.0.0-win64.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/LLVM-7.0.0-win64.exe\"\n-    set CLANG_DIR=%CD%\\citools\\clang-rust\n-    %TEMP%\\LLVM-7.0.0-win64.exe /S /NCRC /D=%CLANG_DIR%\n-    set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=%CLANG_DIR%\\bin\\clang-cl.exe\n-    echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n+# That installer was run through `wine` on Linux and then the resulting\n+# installation directory (found in `$HOME/.wine/drive_c/Program Files/LLVM`) was\n+# packaged up into a tarball. We've had issues otherwise that the installer will\n+# randomly hang, provide not a lot of useful information, pollute global state,\n+# etc. In general the tarball is just more confined and easier to deal with when\n+# working with various CI environments.\n+- bash: |\n+    set -e\n+    mkdir -p citools\n+    cd citools\n+    curl -f https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/LLVM-7.0.0-win64.tar.gz | tar xzf -\n+    echo \"##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]$RUST_CONFIGURE_ARGS --set llvm.clang-cl=`pwd`/clang-rust/bin/clang-cl.exe\"\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n   displayName: Install clang (Windows)\n "}, {"sha": "907983d43ade720db21490799e1d7ece17c288f5", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -76,11 +76,11 @@ def v(*args):\n o(\"llvm-assertions\", \"llvm.assertions\", \"build LLVM with assertions\")\n o(\"debug-assertions\", \"rust.debug-assertions\", \"build with debugging assertions\")\n o(\"llvm-release-debuginfo\", \"llvm.release-debuginfo\", \"build LLVM with debugger metadata\")\n-o(\"debuginfo-level\", \"rust.debuginfo-level\", \"debuginfo level for Rust code\")\n-o(\"debuginfo-level-rustc\", \"rust.debuginfo-level-rustc\", \"debuginfo level for the compiler\")\n-o(\"debuginfo-level-std\", \"rust.debuginfo-level-std\", \"debuginfo level for the standard library\")\n-o(\"debuginfo-level-tools\", \"rust.debuginfo-level-tools\", \"debuginfo level for the tools\")\n-o(\"debuginfo-level-tests\", \"rust.debuginfo-level-tests\", \"debuginfo level for the test suites run with compiletest\")\n+v(\"debuginfo-level\", \"rust.debuginfo-level\", \"debuginfo level for Rust code\")\n+v(\"debuginfo-level-rustc\", \"rust.debuginfo-level-rustc\", \"debuginfo level for the compiler\")\n+v(\"debuginfo-level-std\", \"rust.debuginfo-level-std\", \"debuginfo level for the standard library\")\n+v(\"debuginfo-level-tools\", \"rust.debuginfo-level-tools\", \"debuginfo level for the tools\")\n+v(\"debuginfo-level-tests\", \"rust.debuginfo-level-tests\", \"debuginfo level for the test suites run with compiletest\")\n v(\"save-toolstates\", \"rust.save-toolstates\", \"save build and test status of external tools into this file\")\n \n v(\"prefix\", \"install.prefix\", \"set installation prefix\")"}, {"sha": "2a81de75a69b902d0eaecff08dcc3e97bdc1c55b", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -112,6 +112,7 @@ ENV TARGETS=$TARGETS,thumbv7em-none-eabihf\n ENV TARGETS=$TARGETS,thumbv8m.base-none-eabi\n ENV TARGETS=$TARGETS,thumbv8m.main-none-eabi\n ENV TARGETS=$TARGETS,thumbv8m.main-none-eabihf\n+ENV TARGETS=$TARGETS,riscv32i-unknown-none-elf\n ENV TARGETS=$TARGETS,riscv32imc-unknown-none-elf\n ENV TARGETS=$TARGETS,riscv32imac-unknown-none-elf\n ENV TARGETS=$TARGETS,riscv64imac-unknown-none-elf"}, {"sha": "f1eb417cdf98236b76c3bd02bc89f53eb4b070f8", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -50,7 +50,7 @@ if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.remap-debuginfo\"\n-  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.debuginfo-level-std=1\"\n+  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --debuginfo-level-std=1\"\n \n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\""}, {"sha": "2b3bad8894e60f6ef03fdb7819e72a3a793fdb61", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -120,6 +120,7 @@\n #![feature(cmpxchg16b_target_feature)]\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n+#![feature(hexagon_target_feature)]\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]"}, {"sha": "236ed15050571e63877944c994afc788b1627f56", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -126,6 +126,9 @@ const UNWIND_DATA_REG: (i32, i32) = (6, 7); // R6, R7\n #[cfg(target_arch = \"sparc64\")]\n const UNWIND_DATA_REG: (i32, i32) = (24, 25); // I0, I1\n \n+#[cfg(target_arch = \"hexagon\")]\n+const UNWIND_DATA_REG: (i32, i32) = (0, 1); // R0, R1\n+\n // The following code is based on GCC's C and C++ personality routines.  For reference, see:\n // https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_personality.cc\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c"}, {"sha": "0222a3dde7ab977e656d83a50685e891f663bd62", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -27,7 +27,7 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\""}, {"sha": "f3edb5f8621176fb016d86c625e08b351a9df4be", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,7 +1,6 @@\n use crate::ty::{self, TyCtxt};\n use crate::hir::map::definitions::FIRST_FREE_DEF_INDEX;\n use rustc_data_structures::indexed_vec::Idx;\n-use serialize;\n use std::fmt;\n use std::u32;\n \n@@ -93,8 +92,8 @@ impl fmt::Display for CrateNum {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for CrateNum {}\n-impl serialize::UseSpecializedDecodable for CrateNum {}\n+impl rustc_serialize::UseSpecializedEncodable for CrateNum {}\n+impl rustc_serialize::UseSpecializedDecodable for CrateNum {}\n \n newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n@@ -134,8 +133,8 @@ impl DefIndex {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for DefIndex {}\n-impl serialize::UseSpecializedDecodable for DefIndex {}\n+impl rustc_serialize::UseSpecializedEncodable for DefIndex {}\n+impl rustc_serialize::UseSpecializedDecodable for DefIndex {}\n \n /// A `DefId` identifies a particular *definition*, by combining a crate\n /// index and a def index.\n@@ -186,8 +185,8 @@ impl DefId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for DefId {}\n-impl serialize::UseSpecializedDecodable for DefId {}\n+impl rustc_serialize::UseSpecializedEncodable for DefId {}\n+impl rustc_serialize::UseSpecializedDecodable for DefId {}\n \n /// A LocalDefId is equivalent to a DefId with `krate == LOCAL_CRATE`. Since\n /// we encode this information in the type, we can ensure at compile time that\n@@ -220,5 +219,5 @@ impl fmt::Debug for LocalDefId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for LocalDefId {}\n-impl serialize::UseSpecializedDecodable for LocalDefId {}\n+impl rustc_serialize::UseSpecializedEncodable for LocalDefId {}\n+impl rustc_serialize::UseSpecializedDecodable for LocalDefId {}"}, {"sha": "3708a905a4b03c72b082eeb34a58a1520ab28172", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -34,7 +34,7 @@ use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_macros::HashStable;\n \n-use serialize::{self, Encoder, Encodable, Decoder, Decodable};\n+use rustc_serialize::{self, Encoder, Encodable, Decoder, Decodable};\n use std::collections::{BTreeSet, BTreeMap};\n use std::fmt;\n use smallvec::SmallVec;\n@@ -92,7 +92,7 @@ impl HirId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for HirId {\n+impl rustc_serialize::UseSpecializedEncodable for HirId {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         let HirId {\n             owner,\n@@ -104,7 +104,7 @@ impl serialize::UseSpecializedEncodable for HirId {\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for HirId {\n+impl rustc_serialize::UseSpecializedDecodable for HirId {\n     fn default_decode<D: Decoder>(d: &mut D) -> Result<HirId, D::Error> {\n         let owner = DefIndex::decode(d)?;\n         let local_id = ItemLocalId::decode(d)?;"}, {"sha": "1976b4c9e54ffde84e92a495482b7f679e8ca6fa", "filename": "src/librustc/hir/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fhir%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fhir%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fptr.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -7,7 +7,7 @@ use std::iter::FromIterator;\n use std::ops::Deref;\n use std::{slice, vec};\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};"}, {"sha": "6840611d4be79282e3f352a792ffca8ae2fe19a1", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -27,7 +27,7 @@ use crate::infer::region_constraints::MemberConstraint;\n use crate::mir::interpret::ConstValue;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_macros::HashStable;\n-use serialize::UseSpecializedDecodable;\n+use rustc_serialize::UseSpecializedDecodable;\n use smallvec::SmallVec;\n use std::ops::Index;\n use syntax::source_map::Span;"}, {"sha": "c7d4fa3aec65461f14c0e5b86f238cd14affcb09", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -75,16 +75,8 @@ extern crate getopts;\n extern crate libc;\n #[macro_use] extern crate rustc_macros;\n #[macro_use] extern crate rustc_data_structures;\n-\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-\n-// FIXME: This import is used by deriving `RustcDecodable` and `RustcEncodable`. Removing this\n-// results in a bunch of \"failed to resolve\" errors. Hopefully, the compiler moves to serde or\n-// something, and we can get rid of this.\n-#[allow(rust_2018_idioms)]\n-extern crate serialize as rustc_serialize;\n-\n #[macro_use] extern crate smallvec;\n \n // Use the test crate here so we depend on getopts through it. This allow tools to link to both"}, {"sha": "859bc86d3a07d160b970dacfb39335e5b29224ea", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -23,7 +23,7 @@ use crate::lint::{LintArray, Level, Lint, LintId, LintPass, LintBuffer};\n use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::middle::privacy::AccessLevels;\n-use crate::rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n+use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use crate::session::{config, early_error, Session};\n use crate::ty::{self, print::Printer, subst::Kind, TyCtxt, Ty};\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};"}, {"sha": "3d33e249536c70dcfb3efcb8f328149242efae24", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,27 +1,25 @@\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::{RwLock, MappedReadGuard, ReadGuard};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n-                                           StableHasherResult};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n+use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n use crate::ich::StableHashingContext;\n use crate::mir::{Body, BasicBlock};\n \n-use crate::rustc_serialize as serialize;\n-\n #[derive(Clone, Debug)]\n pub struct Cache {\n     predecessors: RwLock<Option<IndexVec<BasicBlock, Vec<BasicBlock>>>>\n }\n \n \n-impl serialize::Encodable for Cache {\n-    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        serialize::Encodable::encode(&(), s)\n+impl rustc_serialize::Encodable for Cache {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        Encodable::encode(&(), s)\n     }\n }\n \n-impl serialize::Decodable for Cache {\n-    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        serialize::Decodable::decode(d).map(|_v: ()| Self::new())\n+impl rustc_serialize::Decodable for Cache {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        Decodable::decode(d).map(|_v: ()| Self::new())\n     }\n }\n "}, {"sha": "51b2d0272a59713c89ae2b6db91e6d0af73f2f92", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -113,7 +113,7 @@ impl<Tag> Allocation<Tag> {\n     }\n }\n \n-impl<'tcx> ::serialize::UseSpecializedDecodable for &'tcx Allocation {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Allocation {}\n \n /// Byte accessors\n impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {"}, {"sha": "121b6ac0ac88c66f7350fa3578acf16118ddf94a", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -27,7 +27,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::{self, TyCtxt, Instance, subst::UnpackedKind};\n use crate::ty::layout::{self, Size};\n use std::io;\n-use crate::rustc_serialize::{Encoder, Decodable, Encodable};\n+use rustc_serialize::{Encoder, Decodable, Encodable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{Lock as Mutex, HashMapExt};\n use rustc_data_structures::tiny_list::TinyList;\n@@ -51,8 +51,8 @@ pub struct GlobalId<'tcx> {\n #[derive(Copy, Clone, Eq, Hash, Ord, PartialEq, PartialOrd, Debug)]\n pub struct AllocId(pub u64);\n \n-impl crate::rustc_serialize::UseSpecializedEncodable for AllocId {}\n-impl crate::rustc_serialize::UseSpecializedDecodable for AllocId {}\n+impl rustc_serialize::UseSpecializedEncodable for AllocId {}\n+impl rustc_serialize::UseSpecializedDecodable for AllocId {}\n \n #[derive(RustcDecodable, RustcEncodable)]\n enum AllocDiscriminant {"}, {"sha": "50f16858c0486835a750f9534b0c271c85dd8689", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -9,7 +9,6 @@ use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n use crate::mir::interpret::{ConstValue, PanicMessage, Scalar};\n use crate::mir::visit::MirVisitable;\n-use crate::rustc_serialize as serialize;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::layout::VariantIdx;\n@@ -28,6 +27,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::sync::MappedReadGuard;\n use rustc_macros::HashStable;\n+use rustc_serialize::{Encodable, Decodable};\n use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n@@ -463,8 +463,8 @@ impl<T> ClearCrossCrate<T> {\n     }\n }\n \n-impl<T: serialize::Encodable> serialize::UseSpecializedEncodable for ClearCrossCrate<T> {}\n-impl<T: serialize::Decodable> serialize::UseSpecializedDecodable for ClearCrossCrate<T> {}\n+impl<T: Encodable> rustc_serialize::UseSpecializedEncodable for ClearCrossCrate<T> {}\n+impl<T: Decodable> rustc_serialize::UseSpecializedDecodable for ClearCrossCrate<T> {}\n \n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo."}, {"sha": "9a8429733d1034b374a67d98d9ec461ae47a6cfe", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1468,6 +1468,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names\"),\n+    binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n+        \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "c88ca132184b267095676b3afc21fa0665fea1f6", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -545,6 +545,9 @@ impl Session {\n     pub fn print_llvm_passes(&self) -> bool {\n         self.opts.debugging_opts.print_llvm_passes\n     }\n+    pub fn binary_dep_depinfo(&self) -> bool {\n+        self.opts.debugging_opts.binary_dep_depinfo\n+    }\n \n     /// Gets the features enabled for the current compilation session.\n     /// DO NOT USE THIS METHOD if there is a TyCtxt available, as it circumvents"}, {"sha": "e3c6eca02d55404cf6a7714bff868e9be07ca24c", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -10,7 +10,7 @@ use crate::arena::ArenaAllocatable;\n use crate::hir::def_id::{DefId, CrateNum};\n use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use rustc_data_structures::fx::FxHashMap;\n-use crate::rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n+use rustc_serialize::{Decodable, Decoder, Encoder, Encodable, opaque};\n use std::hash::Hash;\n use std::intrinsics;\n use crate::ty::{self, Ty, TyCtxt};\n@@ -333,7 +333,7 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty::codec::*;\n             use $crate::ty::subst::SubstsRef;\n             use $crate::hir::def_id::{CrateNum};\n-            use crate::rustc_serialize::{Decoder, SpecializedDecoder};\n+            use rustc_serialize::{Decoder, SpecializedDecoder};\n             use std::borrow::Cow;\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {"}, {"sha": "44897c8e9037693b64708bac5cd28316ad4cc739", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -32,7 +32,7 @@ use crate::util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n use crate::session::DataTypeKind;\n \n-use serialize::{self, Encodable, Encoder};\n+use rustc_serialize::{self, Encodable, Encoder};\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n use std::fmt;\n@@ -588,8 +588,8 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::TyS<'tcx> {\n \n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n-impl<'tcx> serialize::UseSpecializedEncodable for Ty<'tcx> {}\n-impl<'tcx> serialize::UseSpecializedDecodable for Ty<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedEncodable for Ty<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for Ty<'tcx> {}\n \n pub type CanonicalTy<'tcx> = Canonical<'tcx, Ty<'tcx>>;\n \n@@ -708,7 +708,7 @@ impl<'a, T> IntoIterator for &'a List<T> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx List<Ty<'tcx>> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx List<Ty<'tcx>> {}\n \n impl<T> List<T> {\n     #[inline(always)]\n@@ -1009,8 +1009,8 @@ pub struct GenericPredicates<'tcx> {\n     pub predicates: Vec<(Predicate<'tcx>, Span)>,\n }\n \n-impl<'tcx> serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n-impl<'tcx> serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n \n impl<'tcx> GenericPredicates<'tcx> {\n     pub fn instantiate(\n@@ -1985,13 +1985,13 @@ impl Hash for AdtDef {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedEncodable for &'tcx AdtDef {\n+impl<'tcx> rustc_serialize::UseSpecializedEncodable for &'tcx AdtDef {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         self.did.encode(s)\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx AdtDef {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx AdtDef {}\n \n \n impl<'a> HashStable<StableHashingContext<'a>> for AdtDef {"}, {"sha": "211a28fe9315ffc1d6bb10dae32c1cd8b42f7a95", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -5,7 +5,7 @@ use crate::hir::map::definitions::DefPathHash;\n use crate::ich::{CachingSourceMapView, Fingerprint};\n use crate::mir::{self, interpret};\n use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n-use crate::rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable, UseSpecializedEncodable};\n use crate::session::{CrateDisambiguator, Session};"}, {"sha": "49a0fd827fbd89679577efa612a16164f0cb5a68", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -26,7 +26,6 @@ use rustc_target::spec::abi;\n use syntax::ast::{self, Ident};\n use syntax::symbol::{kw, InternedString};\n \n-use serialize;\n use self::InferTy::*;\n use self::TyKind::*;\n \n@@ -640,7 +639,7 @@ impl<'tcx> Binder<ExistentialPredicate<'tcx>> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx List<ExistentialPredicate<'tcx>> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx List<ExistentialPredicate<'tcx>> {}\n \n impl<'tcx> List<ExistentialPredicate<'tcx>> {\n     /// Returns the \"principal def id\" of this set of existential predicates.\n@@ -1324,7 +1323,7 @@ pub enum RegionKind {\n     ReClosureBound(RegionVid),\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for Region<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for Region<'tcx> {}\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, PartialOrd, Ord)]\n pub struct EarlyBoundRegion {\n@@ -2333,7 +2332,7 @@ impl<'tcx> Const<'tcx> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n \n /// An inference variable for a const, for use in const generics.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd,"}, {"sha": "ea829da783e9b488bc4f79f98fd0d1bb40b7afc2", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -6,7 +6,7 @@ use crate::ty::{self, Lift, List, Ty, TyCtxt, InferConst, ParamConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::mir::interpret::ConstValue;\n \n-use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n+use rustc_serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n use rustc_macros::HashStable;\n@@ -399,7 +399,7 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for SubstsRef<'tcx> {}\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for SubstsRef<'tcx> {}\n \n ///////////////////////////////////////////////////////////////////////////\n // Public trait `Subst`"}, {"sha": "541d3d98b79bda83cbc591d2273b8f48a32b6a81", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -174,7 +174,7 @@ const X86_WHITELIST: &[(&str, Option<Symbol>)] = &[\n \n const HEXAGON_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"hvx\", Some(sym::hexagon_target_feature)),\n-    (\"hvx-double\", Some(sym::hexagon_target_feature)),\n+    (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n ];\n \n const POWERPC_WHITELIST: &[(&str, Option<Symbol>)] = &["}, {"sha": "90d7320987c957613689ca5681edc3968bc1ab4b", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -20,7 +20,7 @@ jobserver = \"0.1.11\"\n parking_lot = \"0.7\"\n tempfile = \"3.0.5\"\n \n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "882963f9174ece77a76ddbc2c5b1250ca04d20ce", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -16,7 +16,7 @@ use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n                              LinkerPluginLto, Lto};\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n-use serialize::{json, Encoder};\n+use rustc_serialize::{json, Encoder};\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it."}, {"sha": "2a9e81a788e52fad48c3d9a107283cffd17240b6", "filename": "src/librustc_codegen_ssa/back/wasm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_codegen_ssa%2Fback%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_codegen_ssa%2Fback%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwasm.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -2,7 +2,7 @@ use std::fs;\n use std::path::Path;\n use std::str;\n \n-use serialize::leb128;\n+use rustc_serialize::leb128;\n \n // https://webassembly.github.io/spec/core/binary/modules.html#binary-importsec\n const WASM_CUSTOM_SECTION_ID: u8 = 0;"}, {"sha": "288676ce3ff6780b213fd1ba0ceb920d09133962", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -15,7 +15,7 @@ indexmap = \"1\"\n log = \"0.4\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n lazy_static = \"1\"\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n graphviz = { path = \"../libgraphviz\" }\n cfg-if = \"0.1.2\"\n crossbeam-utils = { version = \"0.6.5\", features = [\"nightly\"] }"}, {"sha": "c8012bb9424615bd0974fd9a35b8e7097958d8e8", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,7 +1,6 @@\n use crate::stable_hasher;\n use std::mem;\n-use serialize;\n-use serialize::opaque::{EncodeResult, Encoder, Decoder};\n+use rustc_serialize::opaque::{EncodeResult, Encoder, Decoder};\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy)]\n pub struct Fingerprint(u64, u64);\n@@ -85,17 +84,17 @@ impl stable_hasher::StableHasherResult for Fingerprint {\n \n impl_stable_hash_via_hash!(Fingerprint);\n \n-impl serialize::UseSpecializedEncodable for Fingerprint { }\n+impl rustc_serialize::UseSpecializedEncodable for Fingerprint { }\n \n-impl serialize::UseSpecializedDecodable for Fingerprint { }\n+impl rustc_serialize::UseSpecializedDecodable for Fingerprint { }\n \n-impl serialize::SpecializedEncoder<Fingerprint> for serialize::opaque::Encoder {\n+impl rustc_serialize::SpecializedEncoder<Fingerprint> for Encoder {\n     fn specialized_encode(&mut self, f: &Fingerprint) -> Result<(), Self::Error> {\n         f.encode_opaque(self)\n     }\n }\n \n-impl<'a> serialize::SpecializedDecoder<Fingerprint> for serialize::opaque::Decoder<'a> {\n+impl<'a> rustc_serialize::SpecializedDecoder<Fingerprint> for Decoder<'a> {\n     fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n         Fingerprint::decode_opaque(self)\n     }"}, {"sha": "6f40d059be27f60fa9d54f1b5bf328f50d1af7c3", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,3 +1,5 @@\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n+\n use std::fmt::Debug;\n use std::iter::{self, FromIterator};\n use std::slice;\n@@ -8,8 +10,6 @@ use std::hash::Hash;\n use std::vec;\n use std::u32;\n \n-use rustc_serialize as serialize;\n-\n /// Represents some newtyped `usize` wrapper.\n ///\n /// Purpose: avoid mixing indexes for different bitvector domains.\n@@ -398,17 +398,9 @@ macro_rules! newtype_index {\n     );\n \n     (@decodable $type:ident) => (\n-        impl $type {\n-            fn __decodable__impl__hack() {\n-                mod __more_hacks_because__self_doesnt_work_in_functions {\n-                    extern crate serialize;\n-                    use self::serialize::{Decodable, Decoder};\n-                    impl Decodable for super::$type {\n-                        fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-                            d.read_u32().map(Self::from)\n-                        }\n-                    }\n-                }\n+        impl ::rustc_serialize::Decodable for $type {\n+            fn decode<D: ::rustc_serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+                d.read_u32().map(Self::from)\n             }\n         }\n     );\n@@ -521,15 +513,15 @@ pub struct IndexVec<I: Idx, T> {\n // not the phantom data.\n unsafe impl<I: Idx, T> Send for IndexVec<I, T> where T: Send {}\n \n-impl<I: Idx, T: serialize::Encodable> serialize::Encodable for IndexVec<I, T> {\n-    fn encode<S: serialize::Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        serialize::Encodable::encode(&self.raw, s)\n+impl<I: Idx, T: Encodable> Encodable for IndexVec<I, T> {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        Encodable::encode(&self.raw, s)\n     }\n }\n \n-impl<I: Idx, T: serialize::Decodable> serialize::Decodable for IndexVec<I, T> {\n-    fn decode<D: serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        serialize::Decodable::decode(d).map(|v| {\n+impl<I: Idx, T: Decodable> Decodable for IndexVec<I, T> {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        Decodable::decode(d).map(|v| {\n             IndexVec { raw: v, _marker: PhantomData }\n         })\n     }"}, {"sha": "3047119029abc6834e8c1dc9aab42bdec2adf517", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -31,8 +31,6 @@\n \n #[macro_use]\n extern crate log;\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n #[cfg(unix)]\n extern crate libc;\n #[macro_use]"}, {"sha": "3123c182b0f4cb8058511d7ad54870be2a997224", "filename": "src/librustc_data_structures/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_data_structures%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsvh.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -7,7 +7,7 @@\n \n use std::fmt;\n use std::hash::{Hash, Hasher};\n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n use crate::stable_hasher;\n "}, {"sha": "3162af5086d8020d7979dea3b87d79dc29d62bcc", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -34,7 +34,7 @@ rustc_traits = { path = \"../librustc_traits\" }\n rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n rustc_interface = { path = \"../librustc_interface\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax_ext = { path = \"../libsyntax_ext\" }"}, {"sha": "c139be07aa1d384011fcf523de1c71d9a9896d25", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -46,7 +46,7 @@ use rustc_interface::interface;\n use rustc_interface::util::get_codegen_sysroot;\n use rustc_data_structures::sync::SeqCst;\n \n-use serialize::json::ToJson;\n+use rustc_serialize::json::ToJson;\n \n use std::borrow::Cow;\n use std::cmp::max;"}, {"sha": "5a192e472aa85a50eb281586748cd628d5c359b5", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -11,7 +11,7 @@ doctest = false\n \n [dependencies]\n log = \"0.4\"\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n unicode-width = \"0.1.4\""}, {"sha": "0a6c02c0ca68f66d5e495fcbd795d61cc15829b3", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -12,9 +12,6 @@\n #![deny(rust_2018_idioms)]\n #![deny(unused_lifetimes)]\n \n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n pub use emitter::ColorConfig;\n \n use Level::*;"}, {"sha": "a931ad3b66e21949228c27a2fd89a28a02a6bd9d", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -15,7 +15,7 @@ log = \"0.4\"\n rand = \"0.6\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }"}, {"sha": "55aba7caa9d42e46e99540e54f84d110ddb03b0d", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -12,9 +12,6 @@\n #![deny(unused_lifetimes)]\n \n #[macro_use] extern crate rustc;\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n #[macro_use] extern crate log;\n \n mod assert_dep_graph;"}, {"sha": "a90254e7e185f514d80187a73bb9845260cb342d", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -16,7 +16,7 @@ smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc = { path = \"../librustc\" }\n rustc_allocator = { path = \"../librustc_allocator\" }\n rustc_ast_borrowck = { path = \"../librustc_ast_borrowck\" }"}, {"sha": "b334971353ca321682518b26dac4560906a43fe0", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -9,6 +9,7 @@ use rustc::hir::lowering::lower_crate;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n+use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, AllArenas, Resolutions, TyCtxt, GlobalCtxt};\n use rustc::ty::steal::Steal;\n@@ -51,7 +52,7 @@ use syntax::feature_gate::AttributeType;\n use syntax_pos::{FileName, edition::Edition, hygiene};\n use syntax_ext;\n \n-use serialize::json;\n+use rustc_serialize::json;\n use tempfile::Builder as TempFileBuilder;\n \n use std::any::Any;\n@@ -657,7 +658,8 @@ fn escape_dep_filename(filename: &FileName) -> String {\n     filename.to_string().replace(\" \", \"\\\\ \")\n }\n \n-fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &[PathBuf]) {\n+fn write_out_deps(compiler: &Compiler, outputs: &OutputFilenames, out_filenames: &[PathBuf]) {\n+    let sess = &compiler.sess;\n     // Write out dependency rules to the dep-info file if requested\n     if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n         return;\n@@ -667,13 +669,30 @@ fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &[Pa\n     let result = (|| -> io::Result<()> {\n         // Build a list of files used to compile the output and\n         // write Makefile-compatible dependency rules\n-        let files: Vec<String> = sess.source_map()\n+        let mut files: Vec<String> = sess.source_map()\n             .files()\n             .iter()\n             .filter(|fmap| fmap.is_real_file())\n             .filter(|fmap| !fmap.is_imported())\n             .map(|fmap| escape_dep_filename(&fmap.name))\n             .collect();\n+\n+        if sess.binary_dep_depinfo() {\n+            for cnum in compiler.cstore.crates_untracked() {\n+                let metadata = compiler.cstore.crate_data_as_rc_any(cnum);\n+                let metadata = metadata.downcast_ref::<cstore::CrateMetadata>().unwrap();\n+                if let Some((path, _)) = &metadata.source.dylib {\n+                    files.push(escape_dep_filename(&FileName::Real(path.clone())));\n+                }\n+                if let Some((path, _)) = &metadata.source.rlib {\n+                    files.push(escape_dep_filename(&FileName::Real(path.clone())));\n+                }\n+                if let Some((path, _)) = &metadata.source.rmeta {\n+                    files.push(escape_dep_filename(&FileName::Real(path.clone())));\n+                }\n+            }\n+        }\n+\n         let mut file = fs::File::create(&deps_filename)?;\n         for path in out_filenames {\n             writeln!(file, \"{}: {}\\n\", path.display(), files.join(\" \"))?;\n@@ -750,7 +769,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    write_out_deps(sess, &outputs, &output_paths);\n+    write_out_deps(compiler, &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;"}, {"sha": "9b79dc6350ca67c086ebaf9a2e531a991a5efd21", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -15,7 +15,7 @@ use rustc::ty::steal::Steal;\n use rustc::dep_graph::DepGraph;\n use rustc_passes::hir_stats;\n use rustc_plugin::registry::Registry;\n-use serialize::json;\n+use rustc_serialize::json;\n use std::cell::{Ref, RefMut, RefCell};\n use std::ops::Deref;\n use std::rc::Rc;"}, {"sha": "3def2d8232f63e2bbc1496bfc32b165380187462", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -71,7 +71,8 @@ fn main() {\n \n     let mut optional_components =\n         vec![\"x86\", \"arm\", \"aarch64\", \"amdgpu\", \"mips\", \"powerpc\",\n-             \"systemz\", \"jsbackend\", \"webassembly\", \"msp430\", \"sparc\", \"nvptx\"];\n+             \"systemz\", \"jsbackend\", \"webassembly\", \"msp430\", \"sparc\", \"nvptx\",\n+             \"hexagon\"];\n \n     let mut version_cmd = Command::new(&llvm_config);\n     version_cmd.arg(\"--version\");\n@@ -82,27 +83,19 @@ fn main() {\n         if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n             (major, minor)\n         } else {\n-            (3, 9)\n+            (6, 0)\n         };\n \n-    if major > 3 {\n-        optional_components.push(\"hexagon\");\n-    }\n-\n     if major > 6 {\n         optional_components.push(\"riscv\");\n     }\n \n-    // FIXME: surely we don't need all these components, right? Stuff like mcjit\n-    //        or interpreter the compiler itself never uses.\n     let required_components = &[\"ipo\",\n                                 \"bitreader\",\n                                 \"bitwriter\",\n                                 \"linker\",\n                                 \"asmparser\",\n-                                \"mcjit\",\n                                 \"lto\",\n-                                \"interpreter\",\n                                 \"instrumentation\"];\n \n     let components = output(Command::new(&llvm_config).arg(\"--components\"));"}, {"sha": "a9f054d5e8be80a32e02c194ddc4d03d27afe643", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -18,7 +18,7 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n stable_deref_trait = \"1.0.0\"\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }"}, {"sha": "b0fe06039f4e28da0b78f3026109ca83e0de9906", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -18,8 +18,6 @@\n #![deny(unused_lifetimes)]\n \n extern crate libc;\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n extern crate proc_macro;\n \n #[macro_use]"}, {"sha": "b7dd1d03e44ae5a107285c6572a554505fe05a96", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -13,7 +13,6 @@ use rustc::ty::{self, Ty, ReprOptions};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc_data_structures::svh::Svh;\n \n-use rustc_serialize as serialize;\n use syntax::{ast, attr};\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n@@ -85,8 +84,8 @@ impl<T> Clone for Lazy<T> {\n     }\n }\n \n-impl<T> serialize::UseSpecializedEncodable for Lazy<T> {}\n-impl<T> serialize::UseSpecializedDecodable for Lazy<T> {}\n+impl<T> rustc_serialize::UseSpecializedEncodable for Lazy<T> {}\n+impl<T> rustc_serialize::UseSpecializedDecodable for Lazy<T> {}\n \n /// A sequence of type T referred to by its absolute position\n /// in the metadata and length, and which can be decoded lazily.\n@@ -133,8 +132,8 @@ impl<T> Clone for LazySeq<T> {\n     }\n }\n \n-impl<T> serialize::UseSpecializedEncodable for LazySeq<T> {}\n-impl<T> serialize::UseSpecializedDecodable for LazySeq<T> {}\n+impl<T> rustc_serialize::UseSpecializedEncodable for LazySeq<T> {}\n+impl<T> rustc_serialize::UseSpecializedDecodable for LazySeq<T> {}\n \n /// Encoding / decoding state for `Lazy` and `LazySeq`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]"}, {"sha": "21008c737289f68a3ed842f73debab69b6e18bd5", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -20,7 +20,7 @@ rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n byteorder = { version = \"1.1\", features = [\"i128\"] }"}, {"sha": "95c3299693b68eabbf5ffa4e96bf2427f11b4158", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 120, "deletions": 17, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -3,12 +3,15 @@ use crate::borrow_check::location::LocationTable;\n use crate::borrow_check::nll::ToRegionVid;\n use crate::borrow_check::nll::facts::AllFacts;\n use crate::borrow_check::nll::region_infer::values::LivenessValues;\n+use crate::borrow_check::places_conflict;\n use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n-use rustc::mir::{BasicBlock, BasicBlockData, Location, Body, Place, PlaceBase, Rvalue};\n-use rustc::mir::{SourceInfo, Statement, Terminator};\n-use rustc::mir::UserTypeProjection;\n+use rustc::mir::{\n+    BasicBlock, BasicBlockData, Body, Local, Location, Place, PlaceBase, Projection,\n+    ProjectionElem, Rvalue, SourceInfo, Statement, StatementKind, Terminator, TerminatorKind,\n+    UserTypeProjection,\n+};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n@@ -27,6 +30,7 @@ pub(super) fn generate_constraints<'cx, 'tcx>(\n         liveness_constraints,\n         location_table,\n         all_facts,\n+        body,\n     };\n \n     for (bb, data) in body.basic_blocks().iter_enumerated() {\n@@ -41,6 +45,7 @@ struct ConstraintGeneration<'cg, 'cx, 'tcx> {\n     location_table: &'cg LocationTable,\n     liveness_constraints: &'cg mut LivenessValues<RegionVid>,\n     borrow_set: &'cg BorrowSet<'tcx>,\n+    body: &'cg Body<'tcx>,\n }\n \n impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n@@ -114,6 +119,17 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n                 self.location_table\n                     .start_index(location.successor_within_block()),\n             ));\n+\n+            // If there are borrows on this now dead local, we need to record them as `killed`.\n+            if let StatementKind::StorageDead(ref local) = statement.kind {\n+                record_killed_borrows_for_local(\n+                    all_facts,\n+                    self.borrow_set,\n+                    self.location_table,\n+                    local,\n+                    location,\n+                );\n+            }\n         }\n \n         self.super_statement(statement, location);\n@@ -127,20 +143,7 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n     ) {\n         // When we see `X = ...`, then kill borrows of\n         // `(*X).foo` and so forth.\n-        if let Some(all_facts) = self.all_facts {\n-            if let Place {\n-                base: PlaceBase::Local(temp),\n-                projection: None,\n-            } = place {\n-                if let Some(borrow_indices) = self.borrow_set.local_map.get(temp) {\n-                    all_facts.killed.reserve(borrow_indices.len());\n-                    for &borrow_index in borrow_indices {\n-                        let location_index = self.location_table.mid_index(location);\n-                        all_facts.killed.push((borrow_index, location_index));\n-                    }\n-                }\n-            }\n-        }\n+        self.record_killed_borrows_for_place(place, location);\n \n         self.super_assign(place, rvalue, location);\n     }\n@@ -167,6 +170,14 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n             }\n         }\n \n+        // A `Call` terminator's return value can be a local which has borrows,\n+        // so we need to record those as `killed` as well.\n+        if let TerminatorKind::Call { ref destination, .. } = terminator.kind {\n+            if let Some((place, _)) = destination {\n+                self.record_killed_borrows_for_place(place, location);\n+            }\n+        }\n+\n         self.super_terminator(terminator, location);\n     }\n \n@@ -201,4 +212,96 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n                 self.liveness_constraints.add_element(vid, location);\n             });\n     }\n+\n+    /// When recording facts for Polonius, records the borrows on the specified place\n+    /// as `killed`. For example, when assigning to a local, or on a call's return destination.\n+    fn record_killed_borrows_for_place(&mut self, place: &Place<'tcx>, location: Location) {\n+        if let Some(all_facts) = self.all_facts {\n+            // Depending on the `Place` we're killing:\n+            // - if it's a local, or a single deref of a local,\n+            //   we kill all the borrows on the local.\n+            // - if it's a deeper projection, we have to filter which\n+            //   of the borrows are killed: the ones whose `borrowed_place`\n+            //   conflicts with the `place`.\n+            match place {\n+                Place {\n+                    base: PlaceBase::Local(local),\n+                    projection: None,\n+                } |\n+                Place {\n+                    base: PlaceBase::Local(local),\n+                    projection: Some(box Projection {\n+                        base: None,\n+                        elem: ProjectionElem::Deref,\n+                    }),\n+                } => {\n+                    debug!(\n+                        \"Recording `killed` facts for borrows of local={:?} at location={:?}\",\n+                        local, location\n+                    );\n+\n+                    record_killed_borrows_for_local(\n+                        all_facts,\n+                        self.borrow_set,\n+                        self.location_table,\n+                        local,\n+                        location,\n+                    );\n+                }\n+\n+                Place {\n+                    base: PlaceBase::Static(_),\n+                    ..\n+                } => {\n+                    // Ignore kills of static or static mut variables.\n+                }\n+\n+                Place {\n+                    base: PlaceBase::Local(local),\n+                    projection: Some(_),\n+                } => {\n+                    // Kill conflicting borrows of the innermost local.\n+                    debug!(\n+                        \"Recording `killed` facts for borrows of \\\n+                            innermost projected local={:?} at location={:?}\",\n+                        local, location\n+                    );\n+\n+                    if let Some(borrow_indices) = self.borrow_set.local_map.get(local) {\n+                        for &borrow_index in borrow_indices {\n+                            let places_conflict = places_conflict::places_conflict(\n+                                self.infcx.tcx,\n+                                self.body,\n+                                &self.borrow_set.borrows[borrow_index].borrowed_place,\n+                                place,\n+                                places_conflict::PlaceConflictBias::NoOverlap,\n+                            );\n+\n+                            if places_conflict {\n+                                let location_index = self.location_table.mid_index(location);\n+                                all_facts.killed.push((borrow_index, location_index));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// When recording facts for Polonius, records the borrows on the specified local as `killed`.\n+fn record_killed_borrows_for_local(\n+    all_facts: &mut AllFacts,\n+    borrow_set: &BorrowSet<'_>,\n+    location_table: &LocationTable,\n+    local: &Local,\n+    location: Location,\n+) {\n+    if let Some(borrow_indices) = borrow_set.local_map.get(local) {\n+        all_facts.killed.reserve(borrow_indices.len());\n+        for &borrow_index in borrow_indices {\n+            let location_index = location_table.mid_index(location);\n+            all_facts.killed.push((borrow_index, location_index));\n+        }\n+    }\n }"}, {"sha": "964f04d79b960723fd3bb0cf0ab5897c17510125", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -30,13 +30,9 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![deny(unused_lifetimes)]\n \n #[macro_use] extern crate log;\n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n #[macro_use] extern crate rustc_data_structures;\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-#[macro_use]\n-extern crate syntax;\n+#[macro_use] extern crate syntax;\n \n mod error_codes;\n "}, {"sha": "cab1e0e01371d73c8a3ddc4d8e3deb37d20ae1ee", "filename": "src/librustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -12,5 +12,5 @@ path = \"lib.rs\"\n bitflags = \"1.0\"\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "a14bc66cc3833318585a34c29dd550cc76a3d9a8", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -18,8 +18,5 @@\n \n #[macro_use] extern crate log;\n \n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n pub mod abi;\n pub mod spec;"}, {"sha": "f46ad06ba436a6c9f1e8971bba61bd8194b60b9f", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,4 +1,6 @@\n+use std::env;\n use std::io;\n+use std::path::Path;\n use std::process::Command;\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n \n@@ -27,6 +29,18 @@ impl Arch {\n }\n \n pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n+    // Following what clang does\n+    // (https://github.com/llvm/llvm-project/blob/\n+    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n+    // to allow the SDK path to be set. (For clang, xcrun sets\n+    // SDKROOT; for rustc, the user or build system can set it, or we\n+    // can fall back to checking for xcrun on PATH.)\n+    if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n+        let sdkroot_path = Path::new(&sdkroot);\n+        if sdkroot_path.is_absolute() && sdkroot_path != Path::new(\"/\") && sdkroot_path.exists() {\n+            return Ok(sdkroot);\n+        }\n+    }\n     let res = Command::new(\"xcrun\")\n                       .arg(\"--show-sdk-path\")\n                       .arg(\"-sdk\")"}, {"sha": "1d3b13d488366b1fb116f455441aa3200c1097e1", "filename": "src/librustc_target/spec/hexagon_unknown_linux_musl.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,36 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult, LinkArgs};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::linux_musl_base::opts();\n+    base.cpu = \"hexagonv60\".to_string();\n+    base.max_atomic_width = Some(32);\n+        // FIXME: HVX length defaults are per-CPU\n+    base.features = \"-small-data,+hvx-length128b\".to_string();\n+\n+    base.crt_static_default = false;\n+    base.atomic_cas = true;\n+    base.has_rpath = true;\n+    base.linker_is_gnu = false;\n+    base.dynamic_linking = true;\n+    base.executables = true;\n+\n+    base.pre_link_args = LinkArgs::new();\n+    base.post_link_args = LinkArgs::new();\n+\n+    Ok(Target {\n+        llvm_target: \"hexagon-unknown-linux-musl\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: concat!(\"e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32\",\n+                     \":32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32\",\n+                     \":32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048\",\n+                     \":2048:2048\").to_string(),\n+        arch: \"hexagon\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"musl\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "34b580acbd5c0b09c146e39677dfd014f4b4164c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -34,7 +34,7 @@\n //! the target's settings, though `target-feature` and `link-args` will *add*\n //! to the list specified by the target, rather than replace.\n \n-use serialize::json::{Json, ToJson};\n+use rustc_serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n use std::default::Default;\n use std::{fmt, io};\n@@ -306,7 +306,7 @@ macro_rules! supported_targets {\n \n         #[cfg(test)]\n         mod test_json_encode_decode {\n-            use serialize::json::ToJson;\n+            use rustc_serialize::json::ToJson;\n             use super::Target;\n             $(use super::$module;)+\n \n@@ -368,6 +368,7 @@ supported_targets! {\n     (\"i586-unknown-linux-musl\", i586_unknown_linux_musl),\n     (\"mips-unknown-linux-musl\", mips_unknown_linux_musl),\n     (\"mipsel-unknown-linux-musl\", mipsel_unknown_linux_musl),\n+    (\"hexagon-unknown-linux-musl\", hexagon_unknown_linux_musl),\n \n     (\"mips-unknown-linux-uclibc\", mips_unknown_linux_uclibc),\n     (\"mipsel-unknown-linux-uclibc\", mipsel_unknown_linux_uclibc),\n@@ -464,6 +465,7 @@ supported_targets! {\n     (\"aarch64-unknown-hermit\", aarch64_unknown_hermit),\n     (\"x86_64-unknown-hermit\", x86_64_unknown_hermit),\n \n+    (\"riscv32i-unknown-none-elf\", riscv32i_unknown_none_elf),\n     (\"riscv32imc-unknown-none-elf\", riscv32imc_unknown_none_elf),\n     (\"riscv32imac-unknown-none-elf\", riscv32imac_unknown_none_elf),\n     (\"riscv64imac-unknown-none-elf\", riscv64imac_unknown_none_elf),\n@@ -1198,7 +1200,7 @@ impl Target {\n     pub fn search(target_triple: &TargetTriple) -> Result<Target, String> {\n         use std::env;\n         use std::fs;\n-        use serialize::json;\n+        use rustc_serialize::json;\n \n         fn load_file(path: &Path) -> Result<Target, String> {\n             let contents = fs::read(path).map_err(|e| e.to_string())?;"}, {"sha": "314778408f7e5d8513ad6d741e7e1268cdd0f747", "filename": "src/librustc_target/spec/riscv32i_unknown_none_elf.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,32 @@\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy,\n+           Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".to_string(),\n+        llvm_target: \"riscv32\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"riscv32\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+\n+        options: TargetOptions {\n+            linker: Some(\"rust-lld\".to_string()),\n+            cpu: \"generic-rv32\".to_string(),\n+            max_atomic_width: None,\n+            atomic_cas: false,\n+            features: String::new(),\n+            executables: true,\n+            panic_strategy: PanicStrategy::Abort,\n+            relocation_model: \"static\".to_string(),\n+            emit_debug_gdb_scripts: false,\n+            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            eliminate_frame_pointer: false,\n+            .. Default::default()\n+        },\n+    })\n+}"}, {"sha": "3fb6bda679bc1173522da11c328c8acb5465a9ff", "filename": "src/libserialize/tests/json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibserialize%2Ftests%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibserialize%2Ftests%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fjson.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,4 +1,3 @@\n-#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize;\n \n use rustc_serialize::{Encodable, Decodable};"}, {"sha": "fff6fc69e78428301107b5c101cf70b6d0f47ff3", "filename": "src/libserialize/tests/opaque.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibserialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibserialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fopaque.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,4 +1,3 @@\n-#[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize;\n \n use rustc_serialize::{Encodable, Decodable};"}, {"sha": "1f5de25b65c909bde60b9518160d739be13ef66d", "filename": "src/libstd/env.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -975,6 +975,11 @@ mod arch {\n     pub const ARCH: &str = \"wasm32\";\n }\n \n+#[cfg(target_arch = \"hexagon\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"hexagon\";\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "21e1cf8a22b4b18d36999995433f0f91b6a327bc", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -147,6 +147,62 @@ mod arch {\n     }\n }\n \n+#[cfg(target_arch = \"hexagon\")]\n+mod arch {\n+    use crate::os::raw::{c_long, c_int, c_longlong, culonglong};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = c_longlong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = c_long;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = c_ulonglong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = c_uint;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = c_longlong;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = c_long;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: ::dev_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: ::c_ulonglong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: ::c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: ::c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: ::c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: ::c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: ::c_ulonglong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad1: ::c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: ::c_longlong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: ::blksize_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad2: ::c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: ::blkcnt_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: ::time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: ::c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: ::time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: ::c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: ::time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: ::c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad3: [::c_int;2],\n+    }\n+}\n+\n #[cfg(any(target_arch = \"mips64\",\n           target_arch = \"s390x\",\n           target_arch = \"sparc64\"))]"}, {"sha": "cf8be393a4049560ce14b19cb82c17b5a1cc0593", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -11,6 +11,7 @@\n #[doc(include = \"os/raw/char.md\")]\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n+                                       target_arch = \"hexagon\",\n                                        target_arch = \"powerpc\",\n                                        target_arch = \"powerpc64\",\n                                        target_arch = \"s390x\")),\n@@ -34,6 +35,7 @@\n #[doc(include = \"os/raw/char.md\")]\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n+                                           target_arch = \"hexagon\",\n                                            target_arch = \"powerpc\",\n                                            target_arch = \"powerpc64\",\n                                            target_arch = \"s390x\")),"}, {"sha": "1cfc7ed17f2e4e1804a1b5c9370eca2f908aaed4", "filename": "src/libstd/sys_common/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibstd%2Fsys_common%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibstd%2Fsys_common%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Falloc.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -12,7 +12,8 @@ use crate::ptr;\n               target_arch = \"powerpc\",\n               target_arch = \"powerpc64\",\n               target_arch = \"asmjs\",\n-              target_arch = \"wasm32\")))]\n+              target_arch = \"wasm32\",\n+              target_arch = \"hexagon\")))]\n pub const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\","}, {"sha": "d4a9acc1569b40eb67b4f76b2a98a9382f1ded8b", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -11,7 +11,7 @@ doctest = false\n \n [dependencies]\n bitflags = \"1.0\"\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n scoped-tls = \"1.0\"\n lazy_static = \"1.0.0\""}, {"sha": "dbfad3ef7f4def966752958c786a5d91eabd0177", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -22,7 +22,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n-use serialize::{self, Decoder, Encoder};\n+use rustc_serialize::{self, Decoder, Encoder};\n use std::fmt;\n \n pub use rustc_target::abi::FloatTy;\n@@ -266,13 +266,13 @@ impl fmt::Display for NodeId {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for NodeId {\n+impl rustc_serialize::UseSpecializedEncodable for NodeId {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_u32(self.as_u32())\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for NodeId {\n+impl rustc_serialize::UseSpecializedDecodable for NodeId {\n     fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n         d.read_u32().map(NodeId::from_u32)\n     }\n@@ -2414,12 +2414,11 @@ impl ForeignItemKind {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use serialize;\n \n     // Are ASTs encodable?\n     #[test]\n     fn check_asts_encodable() {\n-        fn assert_encodable<T: serialize::Encodable>() {}\n+        fn assert_encodable<T: rustc_serialize::Encodable>() {}\n         assert_encodable::<Crate>();\n     }\n }"}, {"sha": "0507a322a5fb240581a8acc09bf7ae3189500f0c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -24,9 +24,6 @@\n \n #![recursion_limit=\"256\"]\n \n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n-\n pub use errors;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::bit_set::GrowableBitSet;"}, {"sha": "b5eb8ca94c07a7fc2a8c4404ed332c1376c73999", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -31,7 +31,7 @@ use std::iter::FromIterator;\n use std::ops::{Deref, DerefMut};\n use std::{slice, vec};\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};"}, {"sha": "34e68944926df66bf90e15b6e99f2a0f1977d2e0", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -23,7 +23,7 @@ use syntax_pos::{BytePos, ExpnId, Span, DUMMY_SP};\n #[cfg(target_arch = \"x86_64\")]\n use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n-use serialize::{Decoder, Decodable, Encoder, Encodable};\n+use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use smallvec::{SmallVec, smallvec};\n \n use std::borrow::Cow;"}, {"sha": "bc13d2a1611323a6574659387e2445ddbe15f1c7", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-serialize = { path = \"../libserialize\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n arena = { path = \"../libarena\" }"}, {"sha": "a96e5ef2323eeb28f3620a2647e0fb546957e7b5", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -30,7 +30,7 @@ use crate::{Span, DUMMY_SP};\n use crate::edition::Edition;\n use crate::symbol::{kw, Symbol};\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::fmt;"}, {"sha": "e5f0892b37be8dcdd726d10a9fadcb461e2deb0e", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -19,10 +19,7 @@\n #![feature(specialization)]\n #![feature(step_trait)]\n \n-use serialize::{Encodable, Decodable, Encoder, Decoder};\n-\n-#[allow(unused_extern_crates)]\n-extern crate serialize as rustc_serialize; // used by deriving\n+use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub mod edition;\n use edition::Edition;\n@@ -594,7 +591,7 @@ impl Default for Span {\n     }\n }\n \n-impl serialize::UseSpecializedEncodable for Span {\n+impl rustc_serialize::UseSpecializedEncodable for Span {\n     fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         let span = self.data();\n         s.emit_struct(\"Span\", 2, |s| {\n@@ -609,7 +606,7 @@ impl serialize::UseSpecializedEncodable for Span {\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for Span {\n+impl rustc_serialize::UseSpecializedDecodable for Span {\n     fn default_decode<D: Decoder>(d: &mut D) -> Result<Span, D::Error> {\n         d.read_struct(\"Span\", 2, |d| {\n             let lo = d.read_struct_field(\"lo\", 0, Decodable::decode)?;"}, {"sha": "308f7d5d4e3fbf5c8b34b0557679e861bbc96f8d", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::newtype_index;\n use rustc_macros::symbols;\n-use serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::fmt;"}, {"sha": "aacbfc547d472115a878e9b02e4d88a1cd6a0efc", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -56,6 +56,9 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(target_os = \"emscripten\")]\n pub const unwinder_private_data_size: usize = 20;\n \n+#[cfg(all(target_arch = \"hexagon\", target_os = \"linux\"))]\n+pub const unwinder_private_data_size: usize = 35;\n+\n #[repr(C)]\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,"}, {"sha": "0cda3465dc0930dff71451bed2873465884ea93f", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -26,8 +26,6 @@\n using namespace llvm;\n using namespace llvm::legacy;\n \n-extern cl::opt<bool> EnableARMEHABI;\n-\n typedef struct LLVMOpaquePass *LLVMPassRef;\n typedef struct LLVMOpaqueTargetMachine *LLVMTargetMachineRef;\n "}, {"sha": "c3f0d174d4b411cbed5c8323fd29611dc35e3e06", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,15 +1,11 @@\n #include \"llvm-c/BitReader.h\"\n #include \"llvm-c/Core.h\"\n-#include \"llvm-c/ExecutionEngine.h\"\n #include \"llvm-c/Object.h\"\n #include \"llvm/ADT/ArrayRef.h\"\n #include \"llvm/ADT/DenseSet.h\"\n #include \"llvm/ADT/Triple.h\"\n #include \"llvm/Analysis/Lint.h\"\n #include \"llvm/Analysis/Passes.h\"\n-#include \"llvm/ExecutionEngine/ExecutionEngine.h\"\n-#include \"llvm/ExecutionEngine/Interpreter.h\"\n-#include \"llvm/ExecutionEngine/MCJIT.h\"\n #include \"llvm/IR/IRBuilder.h\"\n #include \"llvm/IR/InlineAsm.h\"\n #include \"llvm/IR/LLVMContext.h\""}, {"sha": "89af8764557ff58e29428659c9e67dcc989b80d9", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.polonius.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,16 @@\n+error[E0597]: `books` does not live long enough\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:11:17\n+   |\n+LL |     Box::new(|| books.push(4))\n+   |     ------------^^^^^---------\n+   |     |        |  |\n+   |     |        |  borrowed value does not live long enough\n+   |     |        value captured here\n+   |     borrow later used here\n+LL |\n+LL | }\n+   | - `books` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d97883ad47a509f1c1cb51f015adbebfc682960f", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n warning[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/borrowck-migrate-to-nll.rs:25:18\n+  --> $DIR/borrowck-migrate-to-nll.rs:26:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             ---"}, {"sha": "a64df9df25948058b9ca092475cc918e779bfd1c", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -10,6 +10,7 @@\n // just ignore it instead:\n \n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n // revisions: zflag edition\n //[zflag]compile-flags: -Z borrowck=migrate"}, {"sha": "d97883ad47a509f1c1cb51f015adbebfc682960f", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n warning[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/borrowck-migrate-to-nll.rs:25:18\n+  --> $DIR/borrowck-migrate-to-nll.rs:26:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             ---"}, {"sha": "c1564cf07e68aa9f629855975a15f3448c4011a1", "filename": "src/test/ui/borrowck/issue-45983.migrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/issue-45983.rs:19:27\n+  --> $DIR/issue-45983.rs:20:27\n    |\n LL |     let x = None;\n    |         - borrowed data cannot be stored into here..."}, {"sha": "dff0b4cebace96e6291a9dc4706f987a400a16a9", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/issue-45983.rs:19:18\n+  --> $DIR/issue-45983.rs:20:18\n    |\n LL |     let x = None;\n    |         - `x` is declared here, outside of the closure body\n@@ -9,7 +9,7 @@ LL |     give_any(|y| x = Some(y));\n    |               `y` is a reference that is only valid in the closure body\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-45983.rs:19:18\n+  --> $DIR/issue-45983.rs:20:18\n    |\n LL |     let x = None;\n    |         - help: consider changing this to be mutable: `mut x`"}, {"sha": "3cd282077424b711c18bac66a3c96ecce90f836b", "filename": "src/test/ui/borrowck/issue-45983.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -7,6 +7,7 @@\n // revisions, don't worry about the --compare-mode=nll on this test.\n \n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n //[nll]compile-flags: -Z borrowck=mir\n "}, {"sha": "a5b2e8762746c70deb6b760cf67cd9ce62b558d5", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.polonius.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,59 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:5:21\n+   |\n+LL |     let ref mut x = 1234543;\n+   |                     ^^^^^^^ creates a temporary which is freed while still in use\n+LL |     x\n+   |     - borrow later used here\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:10:25\n+   |\n+LL |     let (ref mut x, ) = (1234543, );\n+   |                         ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     x\n+   |     - borrow later used here\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:5\n+   |\n+LL |       match 1234543 {\n+   |       ^     ------- temporary value created here\n+   |  _____|\n+   | |\n+LL | |         ref mut x => x\n+LL | |     }\n+   | |_____^ returns a value referencing data owned by the current function\n+\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:21:5\n+   |\n+LL |       match (123443,) {\n+   |       ^     --------- temporary value created here\n+   |  _____|\n+   | |\n+LL | |         (ref mut x,) => x,\n+LL | |     }\n+   | |_____^ returns a value referencing data owned by the current function\n+\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:27:5\n+   |\n+LL |     &mut 1234543\n+   |     ^^^^^-------\n+   |     |    |\n+   |     |    temporary value created here\n+   |     returns a reference to data owned by the current function\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0515, E0716.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "88e9ced03ddde60f57628a61d5e431e8f02698a1", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2015.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -11,7 +11,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:28:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^\n@@ -21,7 +21,7 @@ LL |     v.extend(&v);\n    |     mutable borrow occurs here\n \n warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:39:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here"}, {"sha": "88e9ced03ddde60f57628a61d5e431e8f02698a1", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -11,7 +11,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:28:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^\n@@ -21,7 +21,7 @@ LL |     v.extend(&v);\n    |     mutable borrow occurs here\n \n warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:39:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here"}, {"sha": "52017394e898e901a5e7602ba02874ef1ea828c7", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2015.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:28:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^\n@@ -20,7 +20,7 @@ LL |     v.extend(&v);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:39:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here"}, {"sha": "52017394e898e901a5e7602ba02874ef1ea828c7", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:28:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^\n@@ -20,7 +20,7 @@ LL |     v.extend(&v);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:39:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here"}, {"sha": "14f687c23780c080eb1685c9ff47f435b210840d", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -3,6 +3,7 @@\n // everyone else.\n \n //ignore-compare-mode-nll\n+//ignore-compare-mode-polonius\n \n //revisions: migrate2015 migrate2018 nll2015 nll2018\n "}, {"sha": "7b246426a23334c8e6fbf0b74bf38ed56bc7f0bc", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.polonius.stderr", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,148 @@\n+error[E0503]: cannot use `self.cx` because it was mutably borrowed\n+  --> $DIR/two-phase-surprise-no-conflict.rs:21:23\n+   |\n+LL |         let _mut_borrow = &mut *self;\n+   |                           ---------- borrow of `*self` occurs here\n+LL |         let _access = self.cx;\n+   |                       ^^^^^^^ use of borrowed `*self`\n+LL |\n+LL |         _mut_borrow;\n+   |         ----------- borrow later used here\n+\n+error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:57:17\n+   |\n+LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n+   |                 ^^^^^---------^^-----------^^^^^^^^^^^^^^^^^\n+   |                 |    |          |\n+   |                 |    |          immutable borrow occurs here\n+   |                 |    immutable borrow later used by call\n+   |                 mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:119:51\n+   |\n+LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n+   |     --- ---------------                           ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:122:54\n+   |\n+LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:125:53\n+   |\n+LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:128:44\n+   |\n+LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:138:5\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |   |                                        |\n+   |     |   |                                        immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:141:5\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |   |                                       |\n+   |     |   |                                       immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:144:5\n+   |\n+LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n+   |     ^^^^------------^^^^^^^^^^^^^^^^^^^-------------^^\n+   |     |   |                              |\n+   |     |   |                              immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:154:5\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |   |                                            |\n+   |     |   |                                            first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:154:54\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:158:5\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |   |                                           |\n+   |     |   |                                           first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:158:53\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:162:5\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     ^^^^------------^^^^^^^^^^^^^^^^^^^^^^^-----------------^^\n+   |     |   |                                  |\n+   |     |   |                                  first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:162:44\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error: aborting due to 15 previous errors\n+\n+Some errors have detailed explanations: E0499, E0502, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "cf41bd7bdb1ebb3b1502fa9a6c9bd3a2f2b609b2", "filename": "src/test/ui/consts/promote_const_let.polonius.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,29 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/promote_const_let.rs:4:9\n+   |\n+LL |     let x: &'static u32 = {\n+   |         - borrow later stored here\n+LL |         let y = 42;\n+LL |         &y\n+   |         ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - `y` dropped here while still borrowed\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote_const_let.rs:6:28\n+   |\n+LL |       let x: &'static u32 = &{\n+   |  ____________------------____^\n+   | |            |\n+   | |            type annotation requires that borrow lasts for `'static`\n+LL | |         let y = 42;\n+LL | |         y\n+LL | |     };\n+   | |_____^ creates a temporary which is freed while still in use\n+LL |   }\n+   |   - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "dbcb0fcebb73df995c9593808ede5da417c4f40c", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.polonius.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,74 @@\n+error[E0597]: `o2` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:111:13\n+   |\n+LL |     o1.set0(&o2);\n+   |             ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | `o2` dropped here while still borrowed\n+   | borrow might be used here, when `o2` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n+\n+error[E0597]: `o3` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:112:13\n+   |\n+LL |     o1.set1(&o3);\n+   |             ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | `o3` dropped here while still borrowed\n+   | borrow might be used here, when `o3` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n+\n+error[E0597]: `o2` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:113:13\n+   |\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+...\n+LL |     o2.set0(&o2);\n+   |             ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `o2` dropped here while still borrowed\n+\n+error[E0597]: `o3` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:114:13\n+   |\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n+...\n+LL |     o2.set1(&o3);\n+   |             ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `o3` dropped here while still borrowed\n+\n+error[E0597]: `o1` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:115:13\n+   |\n+LL |     o3.set0(&o1);\n+   |             ^^^ borrowed value does not live long enough\n+LL |     o3.set1(&o2);\n+LL | }\n+   | -\n+   | |\n+   | `o1` dropped here while still borrowed\n+   | borrow might be used here, when `o1` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n+\n+error[E0597]: `o2` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:116:13\n+   |\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+...\n+LL |     o3.set1(&o2);\n+   |             ^^^ borrowed value does not live long enough\n+LL | }\n+   | - `o2` dropped here while still borrowed\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "47b48b399c25c7cbabde881a468e9fcc5d3c2c8d", "filename": "src/test/ui/emit-artifact-notifications.polonius.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications.polonius/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "8ec752409ab00483c89e3dbaee6b3a94bf7eff27", "filename": "src/test/ui/feature-gates/feature-gate-nll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -3,6 +3,7 @@\n \n // Don't use compare-mode=nll, since that turns on NLL.\n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n #![feature(rustc_attrs)]\n "}, {"sha": "e5b28bbfa2477227e48f633e6fe153a27ce36e81", "filename": "src/test/ui/feature-gates/feature-gate-nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n warning[E0502]: cannot borrow `*x.1` as immutable because it is also borrowed as mutable\n-  --> $DIR/feature-gate-nll.rs:14:13\n+  --> $DIR/feature-gate-nll.rs:15:13\n    |\n LL |     let m = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -14,7 +14,7 @@ LL |     m;\n    = note: for more information, try `rustc --explain E0729`\n \n error: compilation successful\n-  --> $DIR/feature-gate-nll.rs:10:1\n+  --> $DIR/feature-gate-nll.rs:11:1\n    |\n LL | / fn main() {\n LL | |     let mut x = (33, &0);"}, {"sha": "530bf368f676e41476eb9948e91e939a268c5e97", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.polonius.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,20 @@\n+error[E0597]: `b` does not live long enough\n+  --> $DIR/ref-escapes-but-not-over-yield.rs:11:13\n+   |\n+LL |       let mut b = move || {\n+   |  _________________-\n+LL | |         yield();\n+LL | |         let b = 5;\n+LL | |         a = &b;\n+   | |             ^^ borrowed value does not live long enough\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |     `b` dropped here while still borrowed\n+   | |_____... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n+   |       a temporary with access to the borrow is created here ...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "e7deca7644b0e2d40f371a494bcc48a1187f32fa", "filename": "src/test/ui/hrtb/issue-30786.migrate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,11 +1,11 @@\n error: implementation of `Stream` is not general enough\n-  --> $DIR/issue-30786.rs:107:22\n+  --> $DIR/issue-30786.rs:108:22\n    |\n LL |     let map = source.map(|x: &_| x);\n    |                      ^^^\n    |\n-   = note: `Stream` would have to be implemented for the type `&'0 mut Map<Repeat, [closure@$DIR/issue-30786.rs:107:26: 107:35]>`, for any lifetime `'0`\n-   = note: but `Stream` is actually implemented for the type `&'1 mut Map<Repeat, [closure@$DIR/issue-30786.rs:107:26: 107:35]>`, for some specific lifetime `'1`\n+   = note: `Stream` would have to be implemented for the type `&'0 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for any lifetime `'0`\n+   = note: but `Stream` is actually implemented for the type `&'1 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "8614d86d93ac3436eb3c5d649cd378931081447e", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,11 +1,11 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:111:18\n+  --> $DIR/issue-30786.rs:112:18\n    |\n LL |     let filter = map.filter(|x: &_| true);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:113:17\n+  --> $DIR/issue-30786.rs:114:17\n    |\n LL |     let count = filter.count(); // Assert that we still have a valid stream.\n    |                 ^^^^^^^^^^^^^^"}, {"sha": "b9920a1950498d3416be579c9c5a3b70574f7674", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -12,6 +12,7 @@\n // revisions, don't worry about the --compare-mode=nll on this test.\n \n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n //[nll]compile-flags: -Z borrowck=mir\n "}, {"sha": "2e99572d018281ab1174e744c756be8c131e856b", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:51:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:52:5\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n    |              -- lifetime `'a` defined here\n@@ -14,7 +14,7 @@ LL | }\n    = note: for more information, try `rustc --explain E0729`\n \n warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n@@ -29,7 +29,7 @@ LL | }\n    = note: for more information, try `rustc --explain E0729`\n \n warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here\n@@ -44,7 +44,7 @@ LL | }\n    = note: for more information, try `rustc --explain E0729`\n \n error: compilation successful\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:80:1\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:81:1\n    |\n LL | / fn main() {\n LL | |     let mut x = 1;"}, {"sha": "45b22511d27d641c0a8c189434b0f37a2ff8784d", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:51:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:52:5\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n    |              -- lifetime `'a` defined here\n@@ -10,7 +10,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n@@ -21,7 +21,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here"}, {"sha": "9f261884f3d2d43568c836ce6c3327e1c32947ee", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -7,6 +7,7 @@\n \n // revisions: nll migrate\n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n // This test is going to pass in the migrate revision, because the AST-borrowck\n // accepted this code in the past (see notes below). So we use `#[rustc_error]`"}, {"sha": "2df6d5d61fc46d975283d7b334bdb2e1d38a7989", "filename": "src/test/ui/nll/get_default.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,15 @@\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:32:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 map.set(String::new()); // Both AST and MIR error here\n+   |                 ^^^ mutable borrow occurs here\n+LL |\n+LL |                 return v;\n+   |                        - immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "0a4c20d15159f251dbf09eda16e318153833b13b", "filename": "src/test/ui/nll/issue-46589.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,3 +1,9 @@\n+// This tests passes in Polonius mode, so is skipped in the automated compare-mode.\n+// We will manually check it passes in Polonius tests, as we can't have a test here\n+// which conditionally passes depending on a test revision/compile-flags.\n+\n+// ignore-compare-mode-polonius\n+\n struct Foo;\n \n impl Foo {"}, {"sha": "82cd364eeffd0c42d1c39428ae83a7343b020295", "filename": "src/test/ui/nll/issue-46589.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `**other` as mutable more than once at a time\n-  --> $DIR/issue-46589.rs:17:21\n+  --> $DIR/issue-46589.rs:23:21\n    |\n LL |         *other = match (*other).get_self() {\n    |                        -------- first mutable borrow occurs here"}, {"sha": "eb8442b31d7c73b323076b65fee62c112f77bfa5", "filename": "src/test/ui/nll/loan_ends_mid_block_pair.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `data.0` because it is borrowed\n+  --> $DIR/loan_ends_mid_block_pair.rs:12:5\n+   |\n+LL |     let c = &mut data.0;\n+   |             ----------- borrow of `data.0` occurs here\n+LL |     capitalize(c);\n+LL |     data.0 = 'e';\n+   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+...\n+LL |     capitalize(c);\n+   |                - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "a80c62d19d5a6b34824fe11c7419fa0730748c02", "filename": "src/test/ui/nll/polonius/assignment-kills-loans.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,88 @@\n+#![allow(dead_code)]\n+\n+// This tests the various kinds of assignments there are. Polonius used to generate `killed`\n+// facts only on simple assigments, but not projections, incorrectly causing errors to be emitted\n+// for code accepted by NLL. They are all variations from example code in the NLL RFC.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct List<T> {\n+    value: T,\n+    next: Option<Box<List<T>>>,\n+}\n+\n+// Assignment to a local: the `list` assignment should clear the existing\n+// borrows of `list.value` and `list.next`\n+fn assignment_to_local<T>(mut list: &mut List<T>) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.value);\n+        if let Some(n) = list.next.as_mut() {\n+            list = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a deref projection: the `*list` assignment should clear the existing\n+// borrows of `list.value` and `list.next`\n+fn assignment_to_deref_projection<T>(mut list: Box<&mut List<T>>) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.value);\n+        if let Some(n) = list.next.as_mut() {\n+            *list = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a field projection: the `list.0` assignment should clear the existing\n+// borrows of `list.0.value` and `list.0.next`\n+fn assignment_to_field_projection<T>(mut list: (&mut List<T>,)) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.0.value);\n+        if let Some(n) = list.0.next.as_mut() {\n+            list.0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a deref field projection: the `*list.0` assignment should clear the existing\n+// borrows of `list.0.value` and `list.0.next`\n+fn assignment_to_deref_field_projection<T>(mut list: (Box<&mut List<T>>,)) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.0.value);\n+        if let Some(n) = list.0.next.as_mut() {\n+            *list.0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Similar to `assignment_to_deref_field_projection` but through a longer projection chain\n+fn assignment_through_projection_chain<T>(\n+    mut list: (((((Box<&mut List<T>>,),),),),),\n+) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut ((((list.0).0).0).0).0.value);\n+        if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+            *((((list.0).0).0).0).0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "c0ba1b983fc35ebff2668d270a370a46a9db6b8e", "filename": "src/test/ui/nll/polonius/assignment-to-differing-field.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,50 @@\n+#![allow(dead_code)]\n+\n+// Compared to `assignment-kills-loans.rs`, we check here\n+// that we do not kill too many borrows. Assignments to the `.1`\n+// field projections should leave the borrows on `.0` intact.\n+\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct List<T> {\n+    value: T,\n+    next: Option<Box<List<T>>>,\n+}\n+\n+\n+fn assignment_to_field_projection<'a, T>(\n+    mut list: (&'a mut List<T>, &'a mut List<T>),\n+) -> Vec<&'a mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut (list.0).value);\n+        //~^ ERROR cannot borrow `list.0.value` as mutable\n+\n+        if let Some(n) = (list.0).next.as_mut() {\n+        //~^ ERROR cannot borrow `list.0.next` as mutable\n+            list.1 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn assignment_through_projection_chain<'a, T>(\n+    mut list: (((((Box<&'a mut List<T>>, Box<&'a mut List<T>>),),),),),\n+) -> Vec<&'a mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut ((((list.0).0).0).0).0.value);\n+        //~^ ERROR cannot borrow `list.0.0.0.0.0.value` as mutable\n+\n+        if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+        //~^ ERROR cannot borrow `list.0.0.0.0.0.next` as mutable\n+            *((((list.0).0).0).0).1 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "07ca021b53bce5b8ebadc036173f2139c8b17206", "filename": "src/test/ui/nll/polonius/assignment-to-differing-field.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,51 @@\n+error[E0499]: cannot borrow `list.0.value` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:21:21\n+   |\n+LL | fn assignment_to_field_projection<'a, T>(\n+   |                                   -- lifetime `'a` defined here\n+...\n+LL |         result.push(&mut (list.0).value);\n+   |                     ^^^^^^^^^^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n+...\n+LL |             return result;\n+   |                    ------ returning this value requires that `list.0.value` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.next` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:24:26\n+   |\n+LL | fn assignment_to_field_projection<'a, T>(\n+   |                                   -- lifetime `'a` defined here\n+...\n+LL |         if let Some(n) = (list.0).next.as_mut() {\n+   |                          ^^^^^^^^^^^^^---------\n+   |                          |\n+   |                          mutable borrow starts here in previous iteration of loop\n+   |                          argument requires that `list.0.next` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.0.0.0.0.value` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:38:21\n+   |\n+LL | fn assignment_through_projection_chain<'a, T>(\n+   |                                        -- lifetime `'a` defined here\n+...\n+LL |         result.push(&mut ((((list.0).0).0).0).0.value);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n+...\n+LL |             return result;\n+   |                    ------ returning this value requires that `list.0.0.0.0.0.value` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.0.0.0.0.next` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:41:26\n+   |\n+LL | fn assignment_through_projection_chain<'a, T>(\n+   |                                        -- lifetime `'a` defined here\n+...\n+LL |         if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^---------\n+   |                          |\n+   |                          mutable borrow starts here in previous iteration of loop\n+   |                          argument requires that `list.0.0.0.0.0.next` is borrowed for `'a`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "57dc140110246bd6f184c05215d56f3ecfc6331f", "filename": "src/test/ui/nll/polonius/call-kills-loans.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcall-kills-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcall-kills-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcall-kills-loans.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,24 @@\n+// `Call` terminators can write to a local which has existing loans\n+// and those need to be killed like a regular assignment to a local.\n+// This is a simplified version of issue 47680, is correctly accepted\n+// by NLL but was incorrectly rejected by Polonius because of these\n+// missing `killed` facts.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct Thing;\n+\n+impl Thing {\n+    fn next(&mut self) -> &mut Self { unimplemented!() }\n+}\n+\n+fn main() {\n+    let mut temp = &mut Thing;\n+\n+    loop {\n+        let v = temp.next();\n+        temp = v; // accepted by NLL, was incorrectly rejected by Polonius\n+    }\n+}"}, {"sha": "b5792587ff0ec625e2bfb26255be0734087b9b1f", "filename": "src/test/ui/nll/polonius/issue-46589.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,32 @@\n+// This test is a copy of `ui/nll/issue-46589.rs` which fails in NLL but succeeds in Polonius.\n+// As we can't have a test here which conditionally passes depending on a test\n+// revision/compile-flags. We ensure here that it passes in Polonius mode.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn get_self(&mut self) -> Option<&mut Self> {\n+        Some(self)\n+    }\n+\n+    fn new_self(&mut self) -> &mut Self {\n+        self\n+    }\n+\n+    fn trigger_bug(&mut self) {\n+        let other = &mut (&mut *self);\n+\n+        *other = match (*other).get_self() {\n+            Some(s) => s,\n+            None => (*other).new_self()\n+        };\n+\n+        let c = other;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bea5e4559988e7efe5246562117147418de3f488", "filename": "src/test/ui/nll/polonius/polonius-smoke-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "previous_filename": "src/test/ui/nll/polonius-smoke-test.rs"}, {"sha": "dbc5b7a019a697359eff2bf4149378b3fbf147ff", "filename": "src/test/ui/nll/polonius/polonius-smoke-test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "previous_filename": "src/test/ui/nll/polonius-smoke-test.stderr"}, {"sha": "ff801cbf9f35dafb94ecb12db535c0d4d5466613", "filename": "src/test/ui/nll/polonius/storagedead-kills-loans.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fstoragedead-kills-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fstoragedead-kills-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fstoragedead-kills-loans.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,29 @@\n+// Whenever a `StorageDead` MIR statement destroys a value `x`,\n+// we should kill all loans of `x`. This is extracted from `rand 0.4.6`,\n+// is correctly accepted by NLL but was incorrectly rejected by\n+// Polonius because of these missing `killed` facts.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+use std::{io, mem};\n+use std::io::Read;\n+\n+#[allow(dead_code)]\n+fn fill(r: &mut dyn Read, mut buf: &mut [u8]) -> io::Result<()> {\n+    while buf.len() > 0 {\n+        match r.read(buf).unwrap() {\n+            0 => return Err(io::Error::new(io::ErrorKind::Other,\n+                                           \"end of file reached\")),\n+            n => buf = &mut mem::replace(&mut buf, &mut [])[n..],\n+            // ^- Polonius had multiple errors on the previous line (where NLL has none)\n+            // as it didn't know `buf` was killed here, and would\n+            // incorrectly reject both the borrow expression, and the assignment.\n+        }\n+    }\n+    Ok(())\n+}\n+\n+fn main() {\n+}"}, {"sha": "8e3cf59cffb44392efef77e735cec8d45d4b0892", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,15 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/return-ref-mut-issue-46557.rs:4:21\n+   |\n+LL |     let ref mut x = 1234543;\n+   |                     ^^^^^^^ creates a temporary which is freed while still in use\n+LL |     x\n+   |     - borrow later used here\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "a1a1b8c63dac38cfc04ff8162cc2f536d560c84e", "filename": "src/test/ui/save-analysis/emit-notifications.polonius.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,2 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/save-analysis/emit-notifications.polonius/save-analysis/libemit_notifications.json\",\"emit\":\"save-analysis\"}\n+{\"artifact\":\"$TEST_BUILD_DIR/save-analysis/emit-notifications.polonius/libemit_notifications.rlib\",\"emit\":\"link\"}"}, {"sha": "4b906f75149af30ca900d06094f67c4190775ccc", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.polonius.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -0,0 +1,60 @@\n+error[E0597]: `factorial` does not live long enough\n+  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:15:17\n+   |\n+LL |     let f = |x: u32| -> u32 {\n+   |             --------------- value captured here\n+LL |         let g = factorial.as_ref().unwrap();\n+   |                 ^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | `factorial` dropped here while still borrowed\n+   | borrow might be used here, when `factorial` is dropped and runs the destructor for type `std::option::Option<std::boxed::Box<dyn std::ops::Fn(u32) -> u32>>`\n+\n+error[E0506]: cannot assign to `factorial` because it is borrowed\n+  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:20:5\n+   |\n+LL |     let f = |x: u32| -> u32 {\n+   |             --------------- borrow of `factorial` occurs here\n+LL |         let g = factorial.as_ref().unwrap();\n+   |                 --------- borrow occurs due to use in closure\n+...\n+LL |     factorial = Some(Box::new(f));\n+   |     ^^^^^^^^^\n+   |     |\n+   |     assignment to borrowed `factorial` occurs here\n+   |     borrow later used here\n+\n+error[E0597]: `factorial` does not live long enough\n+  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:28:17\n+   |\n+LL |     let f = |x: u32| -> u32 {\n+   |             --------------- value captured here\n+LL |         let g = factorial.as_ref().unwrap();\n+   |                 ^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | `factorial` dropped here while still borrowed\n+   | borrow might be used here, when `factorial` is dropped and runs the destructor for type `std::option::Option<std::boxed::Box<dyn std::ops::Fn(u32) -> u32>>`\n+\n+error[E0506]: cannot assign to `factorial` because it is borrowed\n+  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:33:5\n+   |\n+LL |     let f = |x: u32| -> u32 {\n+   |             --------------- borrow of `factorial` occurs here\n+LL |         let g = factorial.as_ref().unwrap();\n+   |                 --------- borrow occurs due to use in closure\n+...\n+LL |     factorial = Some(Box::new(f));\n+   |     ^^^^^^^^^\n+   |     |\n+   |     assignment to borrowed `factorial` occurs here\n+   |     borrow later used here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0506, E0597.\n+For more information about an error, try `rustc --explain E0506`."}, {"sha": "20176557bcbebecf6b9af3e59968649f0df71551", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185b9acb66438894596f3c40d2ae4c6f7deeb8ab/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=185b9acb66438894596f3c40d2ae4c6f7deeb8ab", "patch": "@@ -92,6 +92,7 @@ static TARGETS: &[&str] = &[\n     \"powerpc-unknown-linux-gnu\",\n     \"powerpc64-unknown-linux-gnu\",\n     \"powerpc64le-unknown-linux-gnu\",\n+    \"riscv32i-unknown-none-elf\",\n     \"riscv32imc-unknown-none-elf\",\n     \"riscv32imac-unknown-none-elf\",\n     \"riscv64imac-unknown-none-elf\","}]}