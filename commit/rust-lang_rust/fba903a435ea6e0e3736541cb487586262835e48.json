{"sha": "fba903a435ea6e0e3736541cb487586262835e48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTkwM2E0MzVlYTZlMGUzNzM2NTQxY2I0ODc1ODYyNjI4MzVlNDg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-05T18:03:22Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-30T13:01:13Z"}, "message": "Make the fields of RangeInclusive private.\n\nAdded new()/start()/end() methods to RangeInclusive.\n\nChanged the lowering of `..=` to use RangeInclusive::new().", "tree": {"sha": "6ce260eae5de518e942966cae3bb7f5371479153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ce260eae5de518e942966cae3bb7f5371479153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba903a435ea6e0e3736541cb487586262835e48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrnE5oACgkQ/vbIBR0O\nATwBLw/+Omq1uLasHxpIHi63bmi/eCJSAWgmjoZadd3QYi4LAJ4yw074rR80INf2\nVLO8VVWyqsN/rnG30cDUIQ2yCGANf7zZeUC6vkMsjLRI6B3EbNWUzPipGOUvWplt\nTtj4NU9EOslAgisNaP6pUOQOiAheXygf8hgFRqGHSZZKT8ilTx3SKLNDt6PQ9Hba\nZQT8/dNSOO/1av2RTU5IzvZatvL0K/fDZRv9fCjwQyNxVac+6PIBtzjSTUMlXabf\nmNVhGkQD2lw1g41DJkvYINgE+EoKeh+2r700gUq43+U/IrAwXSiQjB7PEHJEW5eB\n4bFAqsXvTSuGR5/pyOmL6MOHn8uEhBm6qDYj3kRuIwS7uSZKWbZYGtUozKLdwmn+\ntBm728YiEI0vXa4U3osbdqV7gbUkyO7pP0DGtIPPnoIItZd4d1X8C+xJcWrqWqyl\nACQABTbKliU27GUZ6FHgyZmAu8Z8kDkTHYHVBxXAj/847iErmD9sgMJhfXwOAbcn\nlIVM9CDBuQ8jydbdfsG9c65s0EGUfAyeF5xQyJmBeEZP0Rdr7PUiHEs4bssNz/yB\n3p32KNoAJV52AnDQZOzePXe+IkSZWCjrSoX4YR+qryD4b3WM3gifjc1nPgiejuqV\nXkG9duYCFgIRtQfC5oy9VRlyYKOF7jkD+iige01EcrtS3b6nWL4=\n=T+97\n-----END PGP SIGNATURE-----", "payload": "tree 6ce260eae5de518e942966cae3bb7f5371479153\nparent 64e6dda0bce96da47e52f7f3e278d05f7a09473c\nauthor kennytm <kennytm@gmail.com> 1522951402 +0800\ncommitter kennytm <kennytm@gmail.com> 1525093273 +0800\n\nMake the fields of RangeInclusive private.\n\nAdded new()/start()/end() methods to RangeInclusive.\n\nChanged the lowering of `..=` to use RangeInclusive::new().\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba903a435ea6e0e3736541cb487586262835e48", "html_url": "https://github.com/rust-lang/rust/commit/fba903a435ea6e0e3736541cb487586262835e48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba903a435ea6e0e3736541cb487586262835e48/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64e6dda0bce96da47e52f7f3e278d05f7a09473c", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e6dda0bce96da47e52f7f3e278d05f7a09473c", "html_url": "https://github.com/rust-lang/rust/commit/64e6dda0bce96da47e52f7f3e278d05f7a09473c"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "c94fe2a2f837d750e67842e9297ee546e02dcf85", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba903a435ea6e0e3736541cb487586262835e48/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba903a435ea6e0e3736541cb487586262835e48/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=fba903a435ea6e0e3736541cb487586262835e48", "patch": "@@ -122,7 +122,7 @@\n #![feature(on_unimplemented)]\n #![feature(exact_chunks)]\n #![feature(pointer_methods)]\n-#![feature(inclusive_range_fields)]\n+#![feature(inclusive_range_methods)]\n #![cfg_attr(stage0, feature(generic_param_attrs))]\n \n #![cfg_attr(not(test), feature(fn_traits, i128))]"}, {"sha": "1c8ff316e55aab6fdaf4aae5ff8872ad835c9f5d", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba903a435ea6e0e3736541cb487586262835e48/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba903a435ea6e0e3736541cb487586262835e48/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=fba903a435ea6e0e3736541cb487586262835e48", "patch": "@@ -25,7 +25,7 @@\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(exact_chunks)]\n-#![feature(inclusive_range_fields)]\n+#![feature(inclusive_range_methods)]\n \n extern crate alloc_system;\n extern crate core;"}, {"sha": "c1bd1ef2d1dc6cf7af16693c3642475571480adb", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fba903a435ea6e0e3736541cb487586262835e48/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba903a435ea6e0e3736541cb487586262835e48/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=fba903a435ea6e0e3736541cb487586262835e48", "patch": "@@ -320,7 +320,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// ```\n /// #![feature(inclusive_range_fields)]\n ///\n-/// assert_eq!((3..=5), std::ops::RangeInclusive { start: 3, end: 5 });\n+/// assert_eq!((3..=5), std::ops::RangeInclusive::new(3, 5));\n /// assert_eq!(3 + 4 + 5, (3..=5).sum());\n ///\n /// let arr = [0, 1, 2, 3];\n@@ -331,14 +331,72 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n+    // FIXME: The current representation follows RFC 1980,\n+    // but it is known that LLVM is not able to optimize loops following that RFC.\n+    // Consider adding an extra `bool` field to indicate emptiness of the range.\n+    // See #45222 for performance test cases.\n+    #[cfg(not(stage0))]\n+    pub(crate) start: Idx,\n+    #[cfg(not(stage0))]\n+    pub(crate) end: Idx,\n     /// The lower bound of the range (inclusive).\n+    #[cfg(stage0)]\n     #[unstable(feature = \"inclusive_range_fields\", issue = \"49022\")]\n     pub start: Idx,\n     /// The upper bound of the range (inclusive).\n+    #[cfg(stage0)]\n     #[unstable(feature = \"inclusive_range_fields\", issue = \"49022\")]\n     pub end: Idx,\n }\n \n+impl<Idx> RangeInclusive<Idx> {\n+    /// Creates a new inclusive range. Equivalent to writing `start..=end`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inclusive_range_methods)]\n+    /// use std::ops::RangeInclusive;\n+    ///\n+    /// assert_eq!(3..=5, RangeInclusive::new(3, 5));\n+    /// ```\n+    #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n+    #[inline]\n+    pub fn new(start: Idx, end: Idx) -> Self {\n+        Self { start, end }\n+    }\n+\n+    /// Returns the lower bound of the range (inclusive).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inclusive_range_methods)]\n+    ///\n+    /// assert_eq!((3..=5).start(), &3);\n+    /// ```\n+    #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n+    #[inline]\n+    pub fn start(&self) -> &Idx {\n+        &self.start\n+    }\n+\n+    /// Returns the upper bound of the range (inclusive).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(inclusive_range_methods)]\n+    ///\n+    /// assert_eq!((3..=5).end(), &5);\n+    /// ```\n+    #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n+    #[inline]\n+    pub fn end(&self) -> &Idx {\n+        &self.end\n+    }\n+}\n+\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "f6750c590b33ab97303f7f5b3231bbd7caa334df", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba903a435ea6e0e3736541cb487586262835e48/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba903a435ea6e0e3736541cb487586262835e48/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=fba903a435ea6e0e3736541cb487586262835e48", "patch": "@@ -44,7 +44,7 @@\n #![feature(exact_chunks)]\n #![cfg_attr(stage0, feature(atomic_nand))]\n #![feature(reverse_bits)]\n-#![feature(inclusive_range_fields)]\n+#![feature(inclusive_range_methods)]\n #![feature(iterator_find_map)]\n \n extern crate core;"}, {"sha": "196f7879980e8446d24b090e3b91eaaccc4d5b8c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fba903a435ea6e0e3736541cb487586262835e48/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba903a435ea6e0e3736541cb487586262835e48/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=fba903a435ea6e0e3736541cb487586262835e48", "patch": "@@ -3119,6 +3119,20 @@ impl<'a> LoweringContext<'a> {\n             ExprKind::Index(ref el, ref er) => {\n                 hir::ExprIndex(P(self.lower_expr(el)), P(self.lower_expr(er)))\n             }\n+            // Desugar `<start>..=<end>` to `std::ops::RangeInclusive::new(<start>, <end>)`\n+            ExprKind::Range(Some(ref e1), Some(ref e2), RangeLimits::Closed) => {\n+                // FIXME: Use head_sp directly after RangeInclusive::new() is stabilized in stage0.\n+                let span = self.allow_internal_unstable(CompilerDesugaringKind::DotFill, e.span);\n+                let id = self.lower_node_id(e.id);\n+                let e1 = self.lower_expr(e1);\n+                let e2 = self.lower_expr(e2);\n+                let ty_path = P(self.std_path(span, &[\"ops\", \"RangeInclusive\"], false));\n+                let ty = self.ty_path(id, span, hir::QPath::Resolved(None, ty_path));\n+                let new_seg = P(hir::PathSegment::from_name(Symbol::intern(\"new\")));\n+                let new_path = hir::QPath::TypeRelative(ty, new_seg);\n+                let new = P(self.expr(span, hir::ExprPath(new_path), ThinVec::new()));\n+                hir::ExprCall(new, hir_vec![e1, e2])\n+            }\n             ExprKind::Range(ref e1, ref e2, lims) => {\n                 use syntax::ast::RangeLimits::*;\n \n@@ -3128,7 +3142,7 @@ impl<'a> LoweringContext<'a> {\n                     (&None, &Some(..), HalfOpen) => \"RangeTo\",\n                     (&Some(..), &Some(..), HalfOpen) => \"Range\",\n                     (&None, &Some(..), Closed) => \"RangeToInclusive\",\n-                    (&Some(..), &Some(..), Closed) => \"RangeInclusive\",\n+                    (&Some(..), &Some(..), Closed) => unreachable!(),\n                     (_, &None, Closed) => self.diagnostic()\n                         .span_fatal(e.span, \"inclusive range with no end\")\n                         .raise(),"}, {"sha": "9259fef279f1a6290c370ce984af0409cb5b42d9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fba903a435ea6e0e3736541cb487586262835e48/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba903a435ea6e0e3736541cb487586262835e48/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=fba903a435ea6e0e3736541cb487586262835e48", "patch": "@@ -29,7 +29,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(optin_builtin_traits)]\n-#![feature(inclusive_range_fields)]\n+#![feature(inclusive_range_methods)]\n \n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;"}]}