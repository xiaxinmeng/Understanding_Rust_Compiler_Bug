{"sha": "82838f5eda6ee98cebb9574ceef36544f1a45a4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODM4ZjVlZGE2ZWU5OGNlYmI5NTc0Y2VlZjM2NTQ0ZjFhNDVhNGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-01T08:43:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-01T08:44:16Z"}, "message": "Cleanup", "tree": {"sha": "ea222792e746478465f8e1aeae71674da945526c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea222792e746478465f8e1aeae71674da945526c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82838f5eda6ee98cebb9574ceef36544f1a45a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82838f5eda6ee98cebb9574ceef36544f1a45a4d", "html_url": "https://github.com/rust-lang/rust/commit/82838f5eda6ee98cebb9574ceef36544f1a45a4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82838f5eda6ee98cebb9574ceef36544f1a45a4d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977b688144fb997fdf5dd5bdb587e4f357d853f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/977b688144fb997fdf5dd5bdb587e4f357d853f2", "html_url": "https://github.com/rust-lang/rust/commit/977b688144fb997fdf5dd5bdb587e4f357d853f2"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "3a92b36e2f3b8156c9bc46dcd175b5b3deb4977b", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/82838f5eda6ee98cebb9574ceef36544f1a45a4d/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82838f5eda6ee98cebb9574ceef36544f1a45a4d/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=82838f5eda6ee98cebb9574ceef36544f1a45a4d", "patch": "@@ -29,20 +29,33 @@ fn update_expect() -> bool {\n #[macro_export]\n macro_rules! expect {\n     [[$lit:literal]] => {$crate::Expect {\n-        file: file!(),\n-        line: line!(),\n-        column: column!(),\n+        position: $crate::Position {\n+            file: file!(),\n+            line: line!(),\n+            column: column!(),\n+        },\n         data: $lit,\n     }};\n     [[]] => { $crate::expect![[\"\"]] };\n }\n \n #[derive(Debug)]\n pub struct Expect {\n+    pub position: Position,\n+    pub data: &'static str,\n+}\n+\n+#[derive(Debug)]\n+pub struct Position {\n     pub file: &'static str,\n     pub line: u32,\n     pub column: u32,\n-    pub data: &'static str,\n+}\n+\n+impl fmt::Display for Position {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}:{}:{}\", self.file, self.line, self.column)\n+    }\n }\n \n impl Expect {\n@@ -69,7 +82,7 @@ impl Expect {\n         let mut target_line = None;\n         let mut line_start = 0;\n         for (i, line) in lines_with_ends(file).enumerate() {\n-            if i == self.line as usize - 1 {\n+            if i == self.position.line as usize - 1 {\n                 let pat = \"expect![[\";\n                 let offset = line.find(pat).unwrap();\n                 let literal_start = line_start + offset + pat.len();\n@@ -98,12 +111,9 @@ impl Runtime {\n     fn fail(expect: &Expect, expected: &str, actual: &str) {\n         let mut rt = RT.lock().unwrap_or_else(|poisoned| poisoned.into_inner());\n         if update_expect() {\n-            println!(\n-                \"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}:{}:{}\",\n-                expect.file, expect.line, expect.column\n-            );\n+            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.position);\n             rt.per_file\n-                .entry(expect.file)\n+                .entry(expect.position.file)\n                 .or_insert_with(|| FileRuntime::new(expect))\n                 .update(expect, actual);\n             return;\n@@ -116,7 +126,7 @@ impl Runtime {\n         println!(\n             \"\\n\n \\x1b[1m\\x1b[91merror\\x1b[97m: expect test failed\\x1b[0m\n-   \\x1b[1m\\x1b[34m-->\\x1b[0m {}:{}:{}\n+   \\x1b[1m\\x1b[34m-->\\x1b[0m {}\n {}\n \\x1b[1mExpect\\x1b[0m:\n ----\n@@ -133,7 +143,7 @@ impl Runtime {\n {}\n ----\n \",\n-            expect.file, expect.line, expect.column, help, expected, actual, diff\n+            expect.position, help, expected, actual, diff\n         );\n         // Use resume_unwind instead of panic!() to prevent a backtrace, which is unnecessary noise.\n         panic::resume_unwind(Box::new(()));\n@@ -148,7 +158,7 @@ struct FileRuntime {\n \n impl FileRuntime {\n     fn new(expect: &Expect) -> FileRuntime {\n-        let path = workspace_root().join(expect.file);\n+        let path = workspace_root().join(expect.position.file);\n         let original_text = fs::read_to_string(&path).unwrap();\n         let patchwork = Patchwork::new(original_text.clone());\n         FileRuntime { path, original_text, patchwork }"}]}