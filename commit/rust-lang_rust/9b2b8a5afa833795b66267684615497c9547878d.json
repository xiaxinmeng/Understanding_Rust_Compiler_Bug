{"sha": "9b2b8a5afa833795b66267684615497c9547878d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMmI4YTVhZmE4MzM3OTViNjYyNjc2ODQ2MTU0OTdjOTU0Nzg3OGQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-17T19:51:01Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-05-19T22:48:26Z"}, "message": "Break tokens before checking if they are 'probably equal'\n\nFixes #68489\n\nWhen checking two `TokenStreams` to see if they are 'probably equal',\nwe ignore the `IsJoint` information associated with each `TokenTree`.\nHowever, the `IsJoint` information determines whether adjacent tokens\nwill be 'glued' (if possible) when construction the `TokenStream` - e.g.\n`[Gt Gt]` can be 'glued' to `BinOp(Shr)`.\n\nSince we are ignoring the `IsJoint` information, 'glued' and 'unglued'\ntokens are equivalent for determining if two `TokenStreams` are\n'probably equal'. Therefore, we need to 'unglue' all tokens in the\nstream to avoid false negatives (which cause us to throw out the cached\ntokens, losing span information).", "tree": {"sha": "3d79d1be9d91867d25a3653d7197ecaba2bf47b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d79d1be9d91867d25a3653d7197ecaba2bf47b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2b8a5afa833795b66267684615497c9547878d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7EYjoACgkQtAh+UQ6Y\nsWQCFg/+Ng9NhSHcQGxqYvG+/QwrSt1WoO7N/L6lhmzYASpw54UyzElo+QqtEusm\neRUcp2ETp8RIduZLn6/8Fl6tdrsjJYqnHNbCXH2XsswaA0hLRRGbPS1w1CFt5iWs\n/pz2ydNkebQU6x3QsKRnvzxpt9aaEtuews4fVf4hA7X7Tibm2CorHvEyNcz9fwqS\nd+xWEoOoUVLLE+wgzwsoQ/LXu0CLctttUjo7pksVhx4sWzVskVDKBiVQFm7i2GUt\nqhCqcoEpxqeIl15XLGSo5xyhWF+FRC9jvaPaZ5zuDG1IEzEhnaX/nTT0rcN/gEh2\nj895P2pYk/K7pJSAvO9kTsxzs1CVAj3dRF1iRc5FpdyOWC/70vhFo3n5uxesbwvb\nxaNmPNsZuxiaKgj/s9JxJT6F9Zb45X8czP/6C7iqTwNIHXuDdX4MnwOcdOp9UjZw\nS1nfCvbbseAudTCTJkseUAqNB45Su5Iu5CXq04dXsXM75jk/4vLZP0ayRwM1PZ8w\n1dPRoa7wlgVFe1I9EVDsBKM/bADq417ehn4bLAL01NUXLPP65ehMo5QFHW91S6ZE\n7oJH6bRq0MBNsQnZY787prv2ossw/c/AAcTJojf0XReLuJDaLLZcBirjxnf8Ejra\nyHImAB6mFXj9gQvCDn+iOLH8FAZSCxWkrU2Cb10/BbjPxWuNi3I=\n=g46L\n-----END PGP SIGNATURE-----", "payload": "tree 3d79d1be9d91867d25a3653d7197ecaba2bf47b6\nparent 3a7dfda40a3e798bf086bd58cc7e5e09deb808b5\nauthor Aaron Hill <aa1ronham@gmail.com> 1589745061 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1589928506 -0400\n\nBreak tokens before checking if they are 'probably equal'\n\nFixes #68489\n\nWhen checking two `TokenStreams` to see if they are 'probably equal',\nwe ignore the `IsJoint` information associated with each `TokenTree`.\nHowever, the `IsJoint` information determines whether adjacent tokens\nwill be 'glued' (if possible) when construction the `TokenStream` - e.g.\n`[Gt Gt]` can be 'glued' to `BinOp(Shr)`.\n\nSince we are ignoring the `IsJoint` information, 'glued' and 'unglued'\ntokens are equivalent for determining if two `TokenStreams` are\n'probably equal'. Therefore, we need to 'unglue' all tokens in the\nstream to avoid false negatives (which cause us to throw out the cached\ntokens, losing span information).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2b8a5afa833795b66267684615497c9547878d", "html_url": "https://github.com/rust-lang/rust/commit/9b2b8a5afa833795b66267684615497c9547878d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2b8a5afa833795b66267684615497c9547878d/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "html_url": "https://github.com/rust-lang/rust/commit/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "38483360c066437b28410ef0a5cf6022d5af2ebe", "filename": "src/librustc_ast/tokenstream.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9b2b8a5afa833795b66267684615497c9547878d/src%2Flibrustc_ast%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2b8a5afa833795b66267684615497c9547878d/src%2Flibrustc_ast%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftokenstream.rs?ref=9b2b8a5afa833795b66267684615497c9547878d", "patch": "@@ -338,8 +338,38 @@ impl TokenStream {\n             true\n         }\n \n-        let mut t1 = self.trees().filter(semantic_tree);\n-        let mut t2 = other.trees().filter(semantic_tree);\n+        // When comparing two `TokenStream`s, we ignore the `IsJoint` information.\n+        //\n+        // However, `rustc_parse::lexer::tokentrees::TokenStreamBuilder` will\n+        // use `Token.glue` on adjacent tokens with the proper `IsJoint`.\n+        // Since we are ignoreing `IsJoint`, a 'glued' token (e.g. `BinOp(Shr)`)\n+        // and its 'split'/'unglued' compoenents (e.g. `Gt, Gt`) are equivalent\n+        // when determining if two `TokenStream`s are 'probably equal'.\n+        //\n+        // Therefore, we use `break_two_token_op` to convert all tokens\n+        // to the 'unglued' form (if it exists). This ensures that two\n+        // `TokenStream`s which differ only in how their tokens are glued\n+        // will be considered 'probably equal', which allows us to keep spans.\n+        //\n+        // This is important when the original `TokenStream` contained\n+        // extra spaces (e.g. `f :: < Vec < _ > > ( ) ;'). These extra spaces\n+        // will be omitted when we pretty-print, which can cause the original\n+        // and reparsed `TokenStream`s to differ in the assignment of `IsJoint`,\n+        // leading to some tokens being 'glued' together in one stream but not\n+        // the other. See #68489 for more details.\n+        fn break_tokens(tree: TokenTree) -> impl Iterator<Item = TokenTree> {\n+            if let TokenTree::Token(token) = &tree {\n+                if let Some((first, second)) = token.kind.break_two_token_op() {\n+                    return SmallVec::from_buf([TokenTree::Token(Token::new(first, DUMMY_SP)), TokenTree::Token(Token::new(second, DUMMY_SP))]).into_iter()\n+                }\n+            }\n+            let mut vec = SmallVec::<[_; 2]>::new();\n+            vec.push(tree);\n+            vec.into_iter()\n+        }\n+\n+        let mut t1 = self.trees().filter(semantic_tree).flat_map(break_tokens);\n+        let mut t2 = other.trees().filter(semantic_tree).flat_map(break_tokens);\n         for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n             if !t1.probably_equal_for_proc_macro(&t2) {\n                 return false;"}, {"sha": "a255955f38da069429b9fc058e5032fd330cbd65", "filename": "src/test/ui/proc-macro/turbo-proc-macro.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b2b8a5afa833795b66267684615497c9547878d/src%2Ftest%2Fui%2Fproc-macro%2Fturbo-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2b8a5afa833795b66267684615497c9547878d/src%2Ftest%2Fui%2Fproc-macro%2Fturbo-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fturbo-proc-macro.rs?ref=9b2b8a5afa833795b66267684615497c9547878d", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:test-macros.rs\n+\n+extern crate test_macros;\n+\n+#[test_macros::recollect_attr]\n+fn repro() {\n+    f :: < Vec < _ > > ( ) ; //~ ERROR cannot find\n+}\n+fn main() {}"}, {"sha": "85c93b9345c370623fe65132d1736ea99b1dcd1f", "filename": "src/test/ui/proc-macro/turbo-proc-macro.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b2b8a5afa833795b66267684615497c9547878d/src%2Ftest%2Fui%2Fproc-macro%2Fturbo-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b2b8a5afa833795b66267684615497c9547878d/src%2Ftest%2Fui%2Fproc-macro%2Fturbo-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fturbo-proc-macro.stderr?ref=9b2b8a5afa833795b66267684615497c9547878d", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find function `f` in this scope\n+  --> $DIR/turbo-proc-macro.rs:7:5\n+   |\n+LL |     f :: < Vec < _ > > ( ) ;\n+   |     ^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}