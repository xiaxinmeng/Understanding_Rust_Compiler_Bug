{"sha": "dbc8a1c25a79fa5ce1f1343b0d9c2ede161eb467", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYzhhMWMyNWE3OWZhNWNlMWYxMzQzYjBkOWMyZWRlMTYxZWI0Njc=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-06-08T23:23:19Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-06-09T15:02:14Z"}, "message": "Change the linkchecker self-tests to validate more output.", "tree": {"sha": "f3b55e01a2a775ceaff1d6373b34af4f04fcda9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3b55e01a2a775ceaff1d6373b34af4f04fcda9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbc8a1c25a79fa5ce1f1343b0d9c2ede161eb467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc8a1c25a79fa5ce1f1343b0d9c2ede161eb467", "html_url": "https://github.com/rust-lang/rust/commit/dbc8a1c25a79fa5ce1f1343b0d9c2ede161eb467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbc8a1c25a79fa5ce1f1343b0d9c2ede161eb467/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd053216341cd3843b8f12da791f533e4480b8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd053216341cd3843b8f12da791f533e4480b8d", "html_url": "https://github.com/rust-lang/rust/commit/bbd053216341cd3843b8f12da791f533e4480b8d"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "531c323a9bcb652820bf7936149fe1fb69a92e2a", "filename": "src/tools/linkchecker/tests/checks.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dbc8a1c25a79fa5ce1f1343b0d9c2ede161eb467/src%2Ftools%2Flinkchecker%2Ftests%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc8a1c25a79fa5ce1f1343b0d9c2ede161eb467/src%2Ftools%2Flinkchecker%2Ftests%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Ftests%2Fchecks.rs?ref=dbc8a1c25a79fa5ce1f1343b0d9c2ede161eb467", "patch": "@@ -15,7 +15,7 @@ fn run(dirname: &str) -> (ExitStatus, String, String) {\n fn broken_test(dirname: &str, expected: &str) {\n     let (status, stdout, stderr) = run(dirname);\n     assert!(!status.success());\n-    if !stdout.contains(expected) {\n+    if !contains(expected, &stdout) {\n         panic!(\n             \"stdout did not contain expected text: {}\\n\\\n             --- stdout:\\n\\\n@@ -27,6 +27,25 @@ fn broken_test(dirname: &str, expected: &str) {\n     }\n }\n \n+fn contains(expected: &str, actual: &str) -> bool {\n+    // Normalize for Windows paths.\n+    let actual = actual.replace('\\\\', \"/\");\n+    actual.lines().any(|mut line| {\n+        for (i, part) in expected.split(\"[..]\").enumerate() {\n+            match line.find(part) {\n+                Some(j) => {\n+                    if i == 0 && j != 0 {\n+                        return false;\n+                    }\n+                    line = &line[j + part.len()..];\n+                }\n+                None => return false,\n+            }\n+        }\n+        line.is_empty() || expected.ends_with(\"[..]\")\n+    })\n+}\n+\n fn valid_test(dirname: &str) {\n     let (status, stdout, stderr) = run(dirname);\n     if !status.success() {\n@@ -48,30 +67,46 @@ fn valid() {\n \n #[test]\n fn basic_broken() {\n-    broken_test(\"basic_broken\", \"bar.html\");\n+    broken_test(\"basic_broken\", \"foo.html:3: broken link - `bar.html`\");\n }\n \n #[test]\n fn broken_fragment_local() {\n-    broken_test(\"broken_fragment_local\", \"#somefrag\");\n+    broken_test(\n+        \"broken_fragment_local\",\n+        \"foo.html:3: broken link fragment `#somefrag` pointing to `foo.html`\",\n+    );\n }\n \n #[test]\n fn broken_fragment_remote() {\n-    broken_test(\"broken_fragment_remote/inner\", \"#somefrag\");\n+    broken_test(\n+        \"broken_fragment_remote/inner\",\n+        \"foo.html:3: broken link fragment `#somefrag` pointing to `foo.html`\",\n+    );\n }\n \n #[test]\n fn broken_redir() {\n-    broken_test(\"broken_redir\", \"sometarget\");\n+    broken_test(\n+        \"broken_redir\",\n+        \"foo.html:3: broken redirect from `redir-bad.html` to `sometarget`\",\n+    );\n }\n \n #[test]\n fn directory_link() {\n-    broken_test(\"directory_link\", \"somedir\");\n+    broken_test(\n+        \"directory_link\",\n+        \"foo.html:3: directory link to `somedir` (directory links should use index.html instead)\",\n+    );\n }\n \n #[test]\n fn redirect_loop() {\n-    broken_test(\"redirect_loop\", \"redir-bad.html\");\n+    broken_test(\n+        \"redirect_loop\",\n+        \"foo.html:3: redirect from `redir-bad.html` to `[..]redirect_loop/redir-bad.html` \\\n+         which is also a redirect (not supported)\",\n+    );\n }"}]}