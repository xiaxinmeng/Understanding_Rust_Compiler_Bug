{"sha": "4686cf201804c999fbc24fa3a3245e9c4dc4afe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ODZjZjIwMTgwNGM5OTlmYmMyNGZhM2EzMjQ1ZTljNGRjNGFmZTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-01T17:24:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:16:14Z"}, "message": "core: Bring char/finally test style up to date", "tree": {"sha": "80cc184be48d9b1468ff025081be9eb1c7c3bc32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80cc184be48d9b1468ff025081be9eb1c7c3bc32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4686cf201804c999fbc24fa3a3245e9c4dc4afe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4686cf201804c999fbc24fa3a3245e9c4dc4afe1", "html_url": "https://github.com/rust-lang/rust/commit/4686cf201804c999fbc24fa3a3245e9c4dc4afe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4686cf201804c999fbc24fa3a3245e9c4dc4afe1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9447c5d955b7e575451002810a9c3d652022ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9447c5d955b7e575451002810a9c3d652022ff9", "html_url": "https://github.com/rust-lang/rust/commit/c9447c5d955b7e575451002810a9c3d652022ff9"}], "stats": {"total": 398, "additions": 202, "deletions": 196}, "files": [{"sha": "9c00b6babc1e93da451ac20ba4ddbbf8d63ed58e", "filename": "src/libcore/char.rs", "status": "modified", "additions": 157, "deletions": 154, "changes": 311, "blob_url": "https://github.com/rust-lang/rust/blob/4686cf201804c999fbc24fa3a3245e9c4dc4afe1/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4686cf201804c999fbc24fa3a3245e9c4dc4afe1/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=4686cf201804c999fbc24fa3a3245e9c4dc4afe1", "patch": "@@ -680,175 +680,178 @@ impl Default for char {\n     fn default() -> char { '\\x00' }\n }\n \n-#[test]\n-fn test_is_lowercase() {\n-    assert!('a'.is_lowercase());\n-    assert!('\u00f6'.is_lowercase());\n-    assert!('\u00df'.is_lowercase());\n-    assert!(!'\u00dc'.is_lowercase());\n-    assert!(!'P'.is_lowercase());\n-}\n-\n-#[test]\n-fn test_is_uppercase() {\n-    assert!(!'h'.is_uppercase());\n-    assert!(!'\u00e4'.is_uppercase());\n-    assert!(!'\u00df'.is_uppercase());\n-    assert!('\u00d6'.is_uppercase());\n-    assert!('T'.is_uppercase());\n-}\n+#[cfg(test)]\n+mod test {\n+    #[test]\n+    fn test_is_lowercase() {\n+        assert!('a'.is_lowercase());\n+        assert!('\u00f6'.is_lowercase());\n+        assert!('\u00df'.is_lowercase());\n+        assert!(!'\u00dc'.is_lowercase());\n+        assert!(!'P'.is_lowercase());\n+    }\n \n-#[test]\n-fn test_is_whitespace() {\n-    assert!(' '.is_whitespace());\n-    assert!('\\u2007'.is_whitespace());\n-    assert!('\\t'.is_whitespace());\n-    assert!('\\n'.is_whitespace());\n-    assert!(!'a'.is_whitespace());\n-    assert!(!'_'.is_whitespace());\n-    assert!(!'\\u0000'.is_whitespace());\n-}\n+    #[test]\n+    fn test_is_uppercase() {\n+        assert!(!'h'.is_uppercase());\n+        assert!(!'\u00e4'.is_uppercase());\n+        assert!(!'\u00df'.is_uppercase());\n+        assert!('\u00d6'.is_uppercase());\n+        assert!('T'.is_uppercase());\n+    }\n \n-#[test]\n-fn test_to_digit() {\n-    assert_eq!('0'.to_digit(10u), Some(0u));\n-    assert_eq!('1'.to_digit(2u), Some(1u));\n-    assert_eq!('2'.to_digit(3u), Some(2u));\n-    assert_eq!('9'.to_digit(10u), Some(9u));\n-    assert_eq!('a'.to_digit(16u), Some(10u));\n-    assert_eq!('A'.to_digit(16u), Some(10u));\n-    assert_eq!('b'.to_digit(16u), Some(11u));\n-    assert_eq!('B'.to_digit(16u), Some(11u));\n-    assert_eq!('z'.to_digit(36u), Some(35u));\n-    assert_eq!('Z'.to_digit(36u), Some(35u));\n-    assert_eq!(' '.to_digit(10u), None);\n-    assert_eq!('$'.to_digit(36u), None);\n-}\n+    #[test]\n+    fn test_is_whitespace() {\n+        assert!(' '.is_whitespace());\n+        assert!('\\u2007'.is_whitespace());\n+        assert!('\\t'.is_whitespace());\n+        assert!('\\n'.is_whitespace());\n+        assert!(!'a'.is_whitespace());\n+        assert!(!'_'.is_whitespace());\n+        assert!(!'\\u0000'.is_whitespace());\n+    }\n \n-#[test]\n-fn test_to_lowercase() {\n-    assert_eq!('A'.to_lowercase(), 'a');\n-    assert_eq!('\u00d6'.to_lowercase(), '\u00f6');\n-    assert_eq!('\u00df'.to_lowercase(), '\u00df');\n-    assert_eq!('\u00dc'.to_lowercase(), '\u00fc');\n-    assert_eq!('\ud83d\udca9'.to_lowercase(), '\ud83d\udca9');\n-    assert_eq!('\u03a3'.to_lowercase(), '\u03c3');\n-    assert_eq!('\u03a4'.to_lowercase(), '\u03c4');\n-    assert_eq!('\u0399'.to_lowercase(), '\u03b9');\n-    assert_eq!('\u0393'.to_lowercase(), '\u03b3');\n-    assert_eq!('\u039c'.to_lowercase(), '\u03bc');\n-    assert_eq!('\u0391'.to_lowercase(), '\u03b1');\n-    assert_eq!('\u03a3'.to_lowercase(), '\u03c3');\n-}\n+    #[test]\n+    fn test_to_digit() {\n+        assert_eq!('0'.to_digit(10u), Some(0u));\n+        assert_eq!('1'.to_digit(2u), Some(1u));\n+        assert_eq!('2'.to_digit(3u), Some(2u));\n+        assert_eq!('9'.to_digit(10u), Some(9u));\n+        assert_eq!('a'.to_digit(16u), Some(10u));\n+        assert_eq!('A'.to_digit(16u), Some(10u));\n+        assert_eq!('b'.to_digit(16u), Some(11u));\n+        assert_eq!('B'.to_digit(16u), Some(11u));\n+        assert_eq!('z'.to_digit(36u), Some(35u));\n+        assert_eq!('Z'.to_digit(36u), Some(35u));\n+        assert_eq!(' '.to_digit(10u), None);\n+        assert_eq!('$'.to_digit(36u), None);\n+    }\n \n-#[test]\n-fn test_to_uppercase() {\n-    assert_eq!('a'.to_uppercase(), 'A');\n-    assert_eq!('\u00f6'.to_uppercase(), '\u00d6');\n-    assert_eq!('\u00df'.to_uppercase(), '\u00df'); // not \u1e9e: Latin capital letter sharp s\n-    assert_eq!('\u00fc'.to_uppercase(), '\u00dc');\n-    assert_eq!('\ud83d\udca9'.to_uppercase(), '\ud83d\udca9');\n-\n-    assert_eq!('\u03c3'.to_uppercase(), '\u03a3');\n-    assert_eq!('\u03c4'.to_uppercase(), '\u03a4');\n-    assert_eq!('\u03b9'.to_uppercase(), '\u0399');\n-    assert_eq!('\u03b3'.to_uppercase(), '\u0393');\n-    assert_eq!('\u03bc'.to_uppercase(), '\u039c');\n-    assert_eq!('\u03b1'.to_uppercase(), '\u0391');\n-    assert_eq!('\u03c2'.to_uppercase(), '\u03a3');\n-}\n+    #[test]\n+    fn test_to_lowercase() {\n+        assert_eq!('A'.to_lowercase(), 'a');\n+        assert_eq!('\u00d6'.to_lowercase(), '\u00f6');\n+        assert_eq!('\u00df'.to_lowercase(), '\u00df');\n+        assert_eq!('\u00dc'.to_lowercase(), '\u00fc');\n+        assert_eq!('\ud83d\udca9'.to_lowercase(), '\ud83d\udca9');\n+        assert_eq!('\u03a3'.to_lowercase(), '\u03c3');\n+        assert_eq!('\u03a4'.to_lowercase(), '\u03c4');\n+        assert_eq!('\u0399'.to_lowercase(), '\u03b9');\n+        assert_eq!('\u0393'.to_lowercase(), '\u03b3');\n+        assert_eq!('\u039c'.to_lowercase(), '\u03bc');\n+        assert_eq!('\u0391'.to_lowercase(), '\u03b1');\n+        assert_eq!('\u03a3'.to_lowercase(), '\u03c3');\n+    }\n \n-#[test]\n-fn test_is_control() {\n-    assert!('\\u0000'.is_control());\n-    assert!('\\u0003'.is_control());\n-    assert!('\\u0006'.is_control());\n-    assert!('\\u0009'.is_control());\n-    assert!('\\u007f'.is_control());\n-    assert!('\\u0092'.is_control());\n-    assert!(!'\\u0020'.is_control());\n-    assert!(!'\\u0055'.is_control());\n-    assert!(!'\\u0068'.is_control());\n-}\n+    #[test]\n+    fn test_to_uppercase() {\n+        assert_eq!('a'.to_uppercase(), 'A');\n+        assert_eq!('\u00f6'.to_uppercase(), '\u00d6');\n+        assert_eq!('\u00df'.to_uppercase(), '\u00df'); // not \u1e9e: Latin capital letter sharp s\n+        assert_eq!('\u00fc'.to_uppercase(), '\u00dc');\n+        assert_eq!('\ud83d\udca9'.to_uppercase(), '\ud83d\udca9');\n+\n+        assert_eq!('\u03c3'.to_uppercase(), '\u03a3');\n+        assert_eq!('\u03c4'.to_uppercase(), '\u03a4');\n+        assert_eq!('\u03b9'.to_uppercase(), '\u0399');\n+        assert_eq!('\u03b3'.to_uppercase(), '\u0393');\n+        assert_eq!('\u03bc'.to_uppercase(), '\u039c');\n+        assert_eq!('\u03b1'.to_uppercase(), '\u0391');\n+        assert_eq!('\u03c2'.to_uppercase(), '\u03a3');\n+    }\n \n-#[test]\n-fn test_is_digit() {\n-   assert!('2'.is_digit());\n-   assert!('7'.is_digit());\n-   assert!(!'c'.is_digit());\n-   assert!(!'i'.is_digit());\n-   assert!(!'z'.is_digit());\n-   assert!(!'Q'.is_digit());\n-}\n+    #[test]\n+    fn test_is_control() {\n+        assert!('\\u0000'.is_control());\n+        assert!('\\u0003'.is_control());\n+        assert!('\\u0006'.is_control());\n+        assert!('\\u0009'.is_control());\n+        assert!('\\u007f'.is_control());\n+        assert!('\\u0092'.is_control());\n+        assert!(!'\\u0020'.is_control());\n+        assert!(!'\\u0055'.is_control());\n+        assert!(!'\\u0068'.is_control());\n+    }\n \n-#[test]\n-fn test_escape_default() {\n-    fn string(c: char) -> ~str {\n-        let mut result = StrBuf::new();\n-        escape_default(c, |c| { result.push_char(c); });\n-        return result.into_owned();\n+    #[test]\n+    fn test_is_digit() {\n+       assert!('2'.is_digit());\n+       assert!('7'.is_digit());\n+       assert!(!'c'.is_digit());\n+       assert!(!'i'.is_digit());\n+       assert!(!'z'.is_digit());\n+       assert!(!'Q'.is_digit());\n     }\n-    assert_eq!(string('\\n'), \"\\\\n\".to_owned());\n-    assert_eq!(string('\\r'), \"\\\\r\".to_owned());\n-    assert_eq!(string('\\''), \"\\\\'\".to_owned());\n-    assert_eq!(string('\"'), \"\\\\\\\"\".to_owned());\n-    assert_eq!(string(' '), \" \".to_owned());\n-    assert_eq!(string('a'), \"a\".to_owned());\n-    assert_eq!(string('~'), \"~\".to_owned());\n-    assert_eq!(string('\\x00'), \"\\\\x00\".to_owned());\n-    assert_eq!(string('\\x1f'), \"\\\\x1f\".to_owned());\n-    assert_eq!(string('\\x7f'), \"\\\\x7f\".to_owned());\n-    assert_eq!(string('\\xff'), \"\\\\xff\".to_owned());\n-    assert_eq!(string('\\u011b'), \"\\\\u011b\".to_owned());\n-    assert_eq!(string('\\U0001d4b6'), \"\\\\U0001d4b6\".to_owned());\n-}\n \n-#[test]\n-fn test_escape_unicode() {\n-    fn string(c: char) -> ~str {\n-        let mut result = StrBuf::new();\n-        escape_unicode(c, |c| { result.push_char(c); });\n-        return result.into_owned();\n+    #[test]\n+    fn test_escape_default() {\n+        fn string(c: char) -> ~str {\n+            let mut result = StrBuf::new();\n+            escape_default(c, |c| { result.push_char(c); });\n+            return result.into_owned();\n+        }\n+        assert_eq!(string('\\n'), \"\\\\n\".to_owned());\n+        assert_eq!(string('\\r'), \"\\\\r\".to_owned());\n+        assert_eq!(string('\\''), \"\\\\'\".to_owned());\n+        assert_eq!(string('\"'), \"\\\\\\\"\".to_owned());\n+        assert_eq!(string(' '), \" \".to_owned());\n+        assert_eq!(string('a'), \"a\".to_owned());\n+        assert_eq!(string('~'), \"~\".to_owned());\n+        assert_eq!(string('\\x00'), \"\\\\x00\".to_owned());\n+        assert_eq!(string('\\x1f'), \"\\\\x1f\".to_owned());\n+        assert_eq!(string('\\x7f'), \"\\\\x7f\".to_owned());\n+        assert_eq!(string('\\xff'), \"\\\\xff\".to_owned());\n+        assert_eq!(string('\\u011b'), \"\\\\u011b\".to_owned());\n+        assert_eq!(string('\\U0001d4b6'), \"\\\\U0001d4b6\".to_owned());\n     }\n-    assert_eq!(string('\\x00'), \"\\\\x00\".to_owned());\n-    assert_eq!(string('\\n'), \"\\\\x0a\".to_owned());\n-    assert_eq!(string(' '), \"\\\\x20\".to_owned());\n-    assert_eq!(string('a'), \"\\\\x61\".to_owned());\n-    assert_eq!(string('\\u011b'), \"\\\\u011b\".to_owned());\n-    assert_eq!(string('\\U0001d4b6'), \"\\\\U0001d4b6\".to_owned());\n-}\n \n-#[test]\n-fn test_to_str() {\n-    use to_str::ToStr;\n-    let s = 't'.to_str();\n-    assert_eq!(s, \"t\".to_owned());\n-}\n+    #[test]\n+    fn test_escape_unicode() {\n+        fn string(c: char) -> ~str {\n+            let mut result = StrBuf::new();\n+            escape_unicode(c, |c| { result.push_char(c); });\n+            return result.into_owned();\n+        }\n+        assert_eq!(string('\\x00'), \"\\\\x00\".to_owned());\n+        assert_eq!(string('\\n'), \"\\\\x0a\".to_owned());\n+        assert_eq!(string(' '), \"\\\\x20\".to_owned());\n+        assert_eq!(string('a'), \"\\\\x61\".to_owned());\n+        assert_eq!(string('\\u011b'), \"\\\\u011b\".to_owned());\n+        assert_eq!(string('\\U0001d4b6'), \"\\\\U0001d4b6\".to_owned());\n+    }\n \n-#[test]\n-fn test_encode_utf8() {\n-    fn check(input: char, expect: &[u8]) {\n-        let mut buf = [0u8, ..4];\n-        let n = input.encode_utf8(buf /* as mut slice! */);\n-        assert_eq!(buf.slice_to(n), expect);\n+    #[test]\n+    fn test_to_str() {\n+        use to_str::ToStr;\n+        let s = 't'.to_str();\n+        assert_eq!(s, \"t\".to_owned());\n     }\n \n-    check('x', [0x78]);\n-    check('\\u00e9', [0xc3, 0xa9]);\n-    check('\\ua66e', [0xea, 0x99, 0xae]);\n-    check('\\U0001f4a9', [0xf0, 0x9f, 0x92, 0xa9]);\n-}\n+    #[test]\n+    fn test_encode_utf8() {\n+        fn check(input: char, expect: &[u8]) {\n+            let mut buf = [0u8, ..4];\n+            let n = input.encode_utf8(buf /* as mut slice! */);\n+            assert_eq!(buf.slice_to(n), expect);\n+        }\n \n-#[test]\n-fn test_encode_utf16() {\n-    fn check(input: char, expect: &[u16]) {\n-        let mut buf = [0u16, ..2];\n-        let n = input.encode_utf16(buf /* as mut slice! */);\n-        assert_eq!(buf.slice_to(n), expect);\n+        check('x', [0x78]);\n+        check('\\u00e9', [0xc3, 0xa9]);\n+        check('\\ua66e', [0xea, 0x99, 0xae]);\n+        check('\\U0001f4a9', [0xf0, 0x9f, 0x92, 0xa9]);\n     }\n \n-    check('x', [0x0078]);\n-    check('\\u00e9', [0x00e9]);\n-    check('\\ua66e', [0xa66e]);\n-    check('\\U0001f4a9', [0xd83d, 0xdca9]);\n+    #[test]\n+    fn test_encode_utf16() {\n+        fn check(input: char, expect: &[u16]) {\n+            let mut buf = [0u16, ..2];\n+            let n = input.encode_utf16(buf /* as mut slice! */);\n+            assert_eq!(buf.slice_to(n), expect);\n+        }\n+\n+        check('x', [0x0078]);\n+        check('\\u00e9', [0x00e9]);\n+        check('\\ua66e', [0xa66e]);\n+        check('\\U0001f4a9', [0xd83d, 0xdca9]);\n+    }\n }"}, {"sha": "ff167f20fffabda2e1e8f600e63a1ce69b1c365b", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 45, "deletions": 42, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4686cf201804c999fbc24fa3a3245e9c4dc4afe1/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4686cf201804c999fbc24fa3a3245e9c4dc4afe1/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=4686cf201804c999fbc24fa3a3245e9c4dc4afe1", "patch": "@@ -117,49 +117,52 @@ impl<'a,A> Drop for Finallyalizer<'a,A> {\n     }\n }\n \n-#[test]\n-fn test_success() {\n-    let mut i = 0;\n-    try_finally(\n-        &mut i, (),\n-        |i, ()| {\n-            *i = 10;\n-        },\n-        |i| {\n-            assert!(!failing());\n-            assert_eq!(*i, 10);\n-            *i = 20;\n-        });\n-    assert_eq!(i, 20);\n-}\n+#[cfg(test)]\n+mod test {\n+    #[test]\n+    fn test_success() {\n+        let mut i = 0;\n+        try_finally(\n+            &mut i, (),\n+            |i, ()| {\n+                *i = 10;\n+            },\n+            |i| {\n+                assert!(!failing());\n+                assert_eq!(*i, 10);\n+                *i = 20;\n+            });\n+        assert_eq!(i, 20);\n+    }\n \n-#[test]\n-#[should_fail]\n-fn test_fail() {\n-    let mut i = 0;\n-    try_finally(\n-        &mut i, (),\n-        |i, ()| {\n-            *i = 10;\n-            fail!();\n-        },\n-        |i| {\n-            assert!(failing());\n-            assert_eq!(*i, 10);\n-        })\n-}\n+    #[test]\n+    #[should_fail]\n+    fn test_fail() {\n+        let mut i = 0;\n+        try_finally(\n+            &mut i, (),\n+            |i, ()| {\n+                *i = 10;\n+                fail!();\n+            },\n+            |i| {\n+                assert!(failing());\n+                assert_eq!(*i, 10);\n+            })\n+    }\n \n-#[test]\n-fn test_retval() {\n-    let mut closure: || -> int = || 10;\n-    let i = closure.finally(|| { });\n-    assert_eq!(i, 10);\n-}\n+    #[test]\n+    fn test_retval() {\n+        let mut closure: || -> int = || 10;\n+        let i = closure.finally(|| { });\n+        assert_eq!(i, 10);\n+    }\n \n-#[test]\n-fn test_compact() {\n-    fn do_some_fallible_work() {}\n-    fn but_always_run_this_function() { }\n-    let mut f = do_some_fallible_work;\n-    f.finally(but_always_run_this_function);\n+    #[test]\n+    fn test_compact() {\n+        fn do_some_fallible_work() {}\n+        fn but_always_run_this_function() { }\n+        let mut f = do_some_fallible_work;\n+        f.finally(but_always_run_this_function);\n+    }\n }"}]}