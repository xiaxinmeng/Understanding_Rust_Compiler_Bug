{"sha": "568ae3aee7be10d4439486686cad186b3df2446e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OGFlM2FlZTdiZTEwZDQ0Mzk0ODY2ODZjYWQxODZiM2RmMjQ0NmU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-25T13:33:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-25T13:33:56Z"}, "message": "Rollup merge of #82087 - estebank:abolish-ice, r=oli-obk\n\nFix ICE caused by suggestion with no code substitutions\n\nChange suggestion logic to filter and checking _before_ creating\nspecific resolution suggestion.\n\nAssert earlier that suggestions contain code substitions to make it\neasier in the future to debug invalid uses. If we find this becomes too\nnoisy in the wild, we can always make the emitter resilient to these\ncases and remove the assertions.\n\nFix #78651.", "tree": {"sha": "d1588d12ef0c774a8bb0e0d0aacc5e3a2c505443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1588d12ef0c774a8bb0e0d0aacc5e3a2c505443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/568ae3aee7be10d4439486686cad186b3df2446e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgN6dECRBK7hj4Ov3rIwAAdHIIAJ/djkZmYVEuTcoXRXnVnKOc\n1HJP1Ebg2wnAtxs4fqh4VGH9t4BebEt3AYQCRtymN75qAbGdPyszi9hBcx4M6BXS\nkOZaK16selbtwvVhkqrlgp/bcer8GEEOxZ7bhA/q5mXMGE+isljm0QkJkjhheBLe\nEgBZfM1a2HO3ATROpqZ1LIESNIh/gXNQRSe2pJD1mZJkPm8V/TrSnYhCu7PUFipg\nYl46JAxoFUHcGqkfK1bip6mBfba27/Z0DXvueLRWqrALw6L7pdDT6SMbotWkCIWh\nuqDU7avKyQyFiyXRmYhLVZ6tPUUXZQd1jq/ZgobebGuIkE2yPMLj7J1HhsHB9ew=\n=JqEq\n-----END PGP SIGNATURE-----\n", "payload": "tree d1588d12ef0c774a8bb0e0d0aacc5e3a2c505443\nparent f891af9de529f7df8d094e130dd6f35fe07b4d78\nparent 04c2454b1ecdf8e8611f291708ef38937288a250\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614260036 +0100\ncommitter GitHub <noreply@github.com> 1614260036 +0100\n\nRollup merge of #82087 - estebank:abolish-ice, r=oli-obk\n\nFix ICE caused by suggestion with no code substitutions\n\nChange suggestion logic to filter and checking _before_ creating\nspecific resolution suggestion.\n\nAssert earlier that suggestions contain code substitions to make it\neasier in the future to debug invalid uses. If we find this becomes too\nnoisy in the wild, we can always make the emitter resilient to these\ncases and remove the assertions.\n\nFix #78651.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/568ae3aee7be10d4439486686cad186b3df2446e", "html_url": "https://github.com/rust-lang/rust/commit/568ae3aee7be10d4439486686cad186b3df2446e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/568ae3aee7be10d4439486686cad186b3df2446e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f891af9de529f7df8d094e130dd6f35fe07b4d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/f891af9de529f7df8d094e130dd6f35fe07b4d78", "html_url": "https://github.com/rust-lang/rust/commit/f891af9de529f7df8d094e130dd6f35fe07b4d78"}, {"sha": "04c2454b1ecdf8e8611f291708ef38937288a250", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c2454b1ecdf8e8611f291708ef38937288a250", "html_url": "https://github.com/rust-lang/rust/commit/04c2454b1ecdf8e8611f291708ef38937288a250"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "ce5b130dd97fee2e8ce820bc97f069b56d9bd2fb", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/568ae3aee7be10d4439486686cad186b3df2446e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568ae3aee7be10d4439486686cad186b3df2446e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=568ae3aee7be10d4439486686cad186b3df2446e", "patch": "@@ -295,6 +295,7 @@ impl Diagnostic {\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self {\n+        assert!(!suggestion.is_empty());\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: suggestion\n@@ -318,6 +319,10 @@ impl Diagnostic {\n         suggestions: Vec<Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self {\n+        assert!(!suggestions.is_empty());\n+        for s in &suggestions {\n+            assert!(!s.is_empty());\n+        }\n         self.suggestions.push(CodeSuggestion {\n             substitutions: suggestions\n                 .into_iter()\n@@ -348,6 +353,7 @@ impl Diagnostic {\n         suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n     ) -> &mut Self {\n+        assert!(!suggestion.is_empty());\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: suggestion"}, {"sha": "d60f929cb8f3f131ff5f08da6ebb242a06dc9ab6", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/568ae3aee7be10d4439486686cad186b3df2446e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568ae3aee7be10d4439486686cad186b3df2446e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=568ae3aee7be10d4439486686cad186b3df2446e", "patch": "@@ -319,9 +319,13 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             .collect::<Vec<_>>();\n         let crate_def_id = DefId::local(CRATE_DEF_INDEX);\n         if candidates.is_empty() && is_expected(Res::Def(DefKind::Enum, crate_def_id)) {\n-            let enum_candidates =\n-                self.r.lookup_import_candidates(ident, ns, &self.parent_scope, is_enum_variant);\n-\n+            let mut enum_candidates: Vec<_> = self\n+                .r\n+                .lookup_import_candidates(ident, ns, &self.parent_scope, is_enum_variant)\n+                .into_iter()\n+                .map(|suggestion| import_candidate_to_enum_paths(&suggestion))\n+                .filter(|(_, enum_ty_path)| enum_ty_path != \"std::prelude::v1\")\n+                .collect();\n             if !enum_candidates.is_empty() {\n                 if let (PathSource::Type, Some(span)) =\n                     (source, self.diagnostic_metadata.current_type_ascription.last())\n@@ -340,10 +344,6 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     }\n                 }\n \n-                let mut enum_candidates = enum_candidates\n-                    .iter()\n-                    .map(|suggestion| import_candidate_to_enum_paths(&suggestion))\n-                    .collect::<Vec<_>>();\n                 enum_candidates.sort();\n \n                 // Contextualize for E0412 \"cannot find type\", but don't belabor the point\n@@ -363,19 +363,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 err.span_suggestions(\n                     span,\n                     &msg,\n-                    enum_candidates\n-                        .into_iter()\n-                        .map(|(_variant_path, enum_ty_path)| enum_ty_path)\n-                        // Variants re-exported in prelude doesn't mean `prelude::v1` is the\n-                        // type name!\n-                        // FIXME: is there a more principled way to do this that\n-                        // would work for other re-exports?\n-                        .filter(|enum_ty_path| enum_ty_path != \"std::prelude::v1\")\n-                        // Also write `Option` rather than `std::prelude::v1::Option`.\n-                        .map(|enum_ty_path| {\n-                            // FIXME #56861: DRY-er prelude filtering.\n-                            enum_ty_path.trim_start_matches(\"std::prelude::v1::\").to_owned()\n-                        }),\n+                    enum_candidates.into_iter().map(|(_variant_path, enum_ty_path)| enum_ty_path),\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "a25be862a5dafb9ef43cbdd3b649352c42cf58c1", "filename": "src/test/ui/suggestions/do-not-attempt-to-add-suggestions-with-no-changes.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/568ae3aee7be10d4439486686cad186b3df2446e/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/568ae3aee7be10d4439486686cad186b3df2446e/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.rs?ref=568ae3aee7be10d4439486686cad186b3df2446e", "patch": "@@ -0,0 +1,5 @@\n+use std::result;\n+impl result { //~ ERROR expected type, found module `result`\n+    fn into_future() -> Err {} //~ ERROR expected type, found variant `Err`\n+}\n+fn main() {}"}, {"sha": "59ccb29e0901a88e7e8340fdcc478f9a2d09b189", "filename": "src/test/ui/suggestions/do-not-attempt-to-add-suggestions-with-no-changes.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/568ae3aee7be10d4439486686cad186b3df2446e/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/568ae3aee7be10d4439486686cad186b3df2446e/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdo-not-attempt-to-add-suggestions-with-no-changes.stderr?ref=568ae3aee7be10d4439486686cad186b3df2446e", "patch": "@@ -0,0 +1,20 @@\n+error[E0573]: expected type, found module `result`\n+  --> $DIR/do-not-attempt-to-add-suggestions-with-no-changes.rs:2:6\n+   |\n+LL | impl result {\n+   |      ^^^^^^ help: an enum with a similar name exists: `Result`\n+   | \n+  ::: $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL | pub enum Result<T, E> {\n+   | --------------------- similarly named enum `Result` defined here\n+\n+error[E0573]: expected type, found variant `Err`\n+  --> $DIR/do-not-attempt-to-add-suggestions-with-no-changes.rs:3:25\n+   |\n+LL |     fn into_future() -> Err {}\n+   |                         ^^^ not a type\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0573`."}]}