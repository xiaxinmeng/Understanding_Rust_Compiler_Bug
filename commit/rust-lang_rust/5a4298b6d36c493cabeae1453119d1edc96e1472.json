{"sha": "5a4298b6d36c493cabeae1453119d1edc96e1472", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNDI5OGI2ZDM2YzQ5M2NhYmVhZTE0NTMxMTlkMWVkYzk2ZTE0NzI=", "commit": {"author": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T22:52:20Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T22:53:51Z"}, "message": "Don't use `process::exit` as it is an `unreachable` on wasm32", "tree": {"sha": "f449645de5015d8203cb9b528bb82f27433fc814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f449645de5015d8203cb9b528bb82f27433fc814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4298b6d36c493cabeae1453119d1edc96e1472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4298b6d36c493cabeae1453119d1edc96e1472", "html_url": "https://github.com/rust-lang/rust/commit/5a4298b6d36c493cabeae1453119d1edc96e1472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4298b6d36c493cabeae1453119d1edc96e1472/comments", "author": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689", "html_url": "https://github.com/rust-lang/rust/commit/2cdd1c4df36db6a3d26d2a48afdf715e7fb6d689"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "680821d6d681eb46523c8f7f3f7a8f2274beceaa", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a4298b6d36c493cabeae1453119d1edc96e1472/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4298b6d36c493cabeae1453119d1edc96e1472/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=5a4298b6d36c493cabeae1453119d1edc96e1472", "patch": "@@ -552,10 +552,7 @@ fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n                        rust_main: ValueRef,\n                        rust_main_def_id: DefId,\n                        use_start_lang_item: bool) {\n-        // The libstd lang_start function does not return anything, while user defined lang start\n-        // returns a isize\n-        let start_output_ty = if use_start_lang_item { Type::void(ccx) } else { Type::c_int(ccx) };\n-        let llfty = Type::func(&[Type::c_int(ccx), Type::i8p(ccx).ptr_to()], &start_output_ty);\n+        let llfty = Type::func(&[Type::c_int(ccx), Type::i8p(ccx).ptr_to()], &Type::c_int(ccx));\n \n         let main_ret_ty = ccx.tcx().fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -600,12 +597,7 @@ fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n         };\n \n         let result = bld.call(start_fn, &args, None);\n-\n-        if use_start_lang_item {\n-            bld.ret_void();\n-        } else {\n-            bld.ret(bld.intcast(result, Type::c_int(ccx), true));\n-        }\n+        bld.ret(bld.intcast(result, Type::c_int(ccx), true));\n     }\n }\n "}, {"sha": "e2c1bba50c4091458fc9e01461c1d21907a44384", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a4298b6d36c493cabeae1453119d1edc96e1472/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4298b6d36c493cabeae1453119d1edc96e1472/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=5a4298b6d36c493cabeae1453119d1edc96e1472", "patch": "@@ -30,19 +30,18 @@ pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n // the real work.\n #[cfg(not(any(test, stage0)))]\n fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n-                       argc: isize, argv: *const *const u8) -> ! {\n+                       argc: isize, argv: *const *const u8) -> isize {\n     use panic;\n     use sys;\n     use sys_common;\n     use sys_common::thread_info;\n     use thread::Thread;\n-    use process;\n     #[cfg(not(feature = \"backtrace\"))]\n     use mem;\n \n     sys::init();\n \n-    process::exit(unsafe {\n+    unsafe {\n         let main_guard = sys::thread::guard::init();\n         sys::stack_overflow::init();\n \n@@ -65,14 +64,14 @@ fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n         let exit_code = panic::catch_unwind(move || main());\n \n         sys_common::cleanup();\n-        exit_code.unwrap_or(101)\n-    });\n+        exit_code.unwrap_or(101) as isize\n+    }\n }\n \n #[cfg(not(any(test, stage0)))]\n #[lang = \"start\"]\n fn lang_start<T: ::termination::Termination + 'static>\n-    (main: fn() -> T, argc: isize, argv: *const *const u8) -> !\n+    (main: fn() -> T, argc: isize, argv: *const *const u8) -> isize\n {\n     lang_start_internal(&move || main().report(), argc, argv)\n }"}]}