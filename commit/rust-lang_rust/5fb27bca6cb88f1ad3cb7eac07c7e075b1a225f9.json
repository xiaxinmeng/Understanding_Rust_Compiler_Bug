{"sha": "5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYjI3YmNhNmNiODhmMWFkM2NiN2VhYzA3YzdlMDc1YjFhMjI1Zjk=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-20T00:39:54Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-21T11:06:21Z"}, "message": "Check for const_unstable before printing `const`", "tree": {"sha": "884051f73fa8f33d3a90ef30de23e85d2d683c64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884051f73fa8f33d3a90ef30de23e85d2d683c64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDQcq0ACgkQZSV3NIU3\nbZIMdBAAonJpMwJmOcEKKzuqrazjA7XuG6Q+7ey79p5RBwRGaeL8nBUPhk/sl+Jc\nesMm/BeiJFWGphiu7O2MChASdqHZkAVF9OTLyIY2tW0KvmeCOG5cosMv/ItlocEl\njd9tzUFK98ZYJSlnk1J9gfOH+b8VaVnSoNr9/2lOGmXLlTL/oCtfKd0VD6A416Y0\n1UItx++xMz/O2l7jwdlVIdOFsmNy/QLLzGl+iR5HI441wsUbcLaEchwaCpIhUFck\nYipRByl3gVgjTZYPttW5fwBBafpOJukZ8609xOtfnG7URjTXmGpjGzIwPJUrGPdt\njiNWAq3qVLt7bEJgDf9aju9ci0orB2TZt5qxRDF1V0HFZcRcU62sGSmKR9t8hE7p\nOThC7f/7E1MTjtW+pcAUtos+V/DR7N/CcdNlMQ1A0qFU33nuJenAj4cqBrVNbXXv\nXyT3vUSKppr2Cjgtyh3tKumtDZbdOgf9cFzkBMlCkdozE9gcSw4oAXd1HfMRv/Yo\nEZVVreNm+W1BKVeiprfTIAG/+Lel6C7PP6QSR+wQ3/BzVCae4/1mhJ2sRJeb5riw\noi6bkaWJt53No0N7Rsss7z0b8ev3NykdcaTlwkmNUeH/DNz75mG1xL8+jBcFDlv1\nfhaIOul1FxSURO5F/MHSi6yjKISyvswN2e5zPj39Tll3Sktei68=\n=7PY0\n-----END PGP SIGNATURE-----", "payload": "tree 884051f73fa8f33d3a90ef30de23e85d2d683c64\nparent 9c495b30efd1ccbe34bf3a877df0a7a55f6444f9\nauthor Deadbeef <ent3rm4n@gmail.com> 1624149594 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1624273581 +0800\n\nCheck for const_unstable before printing `const`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9", "html_url": "https://github.com/rust-lang/rust/commit/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c495b30efd1ccbe34bf3a877df0a7a55f6444f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c495b30efd1ccbe34bf3a877df0a7a55f6444f9", "html_url": "https://github.com/rust-lang/rust/commit/9c495b30efd1ccbe34bf3a877df0a7a55f6444f9"}], "stats": {"total": 109, "additions": 65, "deletions": 44}, "files": [{"sha": "488d5a583943d6f7f4ff5b9c27f5d4a8b2f9d08d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9", "patch": "@@ -9,6 +9,7 @@ use std::cell::Cell;\n use std::fmt;\n use std::iter;\n \n+use rustc_attr::{ConstStability, StabilityLevel};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -1253,15 +1254,6 @@ impl PrintWithSpace for hir::Unsafety {\n     }\n }\n \n-impl PrintWithSpace for hir::Constness {\n-    fn print_with_space(&self) -> &str {\n-        match self {\n-            hir::Constness::Const => \"const \",\n-            hir::Constness::NotConst => \"\",\n-        }\n-    }\n-}\n-\n impl PrintWithSpace for hir::IsAsync {\n     fn print_with_space(&self) -> &str {\n         match self {\n@@ -1280,6 +1272,22 @@ impl PrintWithSpace for hir::Mutability {\n     }\n }\n \n+crate fn print_constness_with_space(\n+    c: &hir::Constness,\n+    s: Option<&ConstStability>,\n+) -> &'static str {\n+    match (c, s) {\n+        // const stable or no stability attribute\n+        (\n+            hir::Constness::Const,\n+            Some(ConstStability { level: StabilityLevel::Stable { .. }, .. }),\n+        )\n+        | (hir::Constness::Const, None) => \"const \",\n+        // const unstable or not const\n+        (hir::Constness::Const, _) | (hir::Constness::NotConst, _) => \"\",\n+    }\n+}\n+\n impl clean::Import {\n     crate fn print<'a, 'tcx: 'a>(\n         &'a self,"}, {"sha": "03b607c2d2cb7d0de904835384511ac366db84e7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9", "patch": "@@ -61,8 +61,8 @@ use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n-    href, print_abi_with_space, print_default_space, print_generic_bounds, print_where_clause,\n-    Buffer, PrintWithSpace,\n+    href, print_abi_with_space, print_constness_with_space, print_default_space,\n+    print_generic_bounds, print_where_clause, Buffer, PrintWithSpace,\n };\n use crate::html::markdown::{Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n@@ -833,16 +833,17 @@ fn render_stability_since_raw(\n     let ver = ver.filter(|inner| !inner.is_empty());\n \n     match (ver, const_stability) {\n+        // stable and const stable\n         (Some(v), Some(ConstStability { level: StabilityLevel::Stable { since }, .. }))\n             if Some(since.as_str()).as_deref() != containing_const_ver =>\n         {\n             write!(\n                 w,\n                 \"<span class=\\\"since\\\" title=\\\"Stable since Rust version {0}, const since {1}\\\">{0} (const: {1})</span>\",\n-                v,\n-                since.as_str()\n+                v, since\n             );\n         }\n+        // stable and const unstable\n         (\n             Some(v),\n             Some(ConstStability { level: StabilityLevel::Unstable { issue, .. }, feature, .. }),\n@@ -863,6 +864,7 @@ fn render_stability_since_raw(\n             }\n             write!(w, \")</span>\");\n         }\n+        // stable\n         (Some(v), _) if ver != containing_ver => {\n             write!(\n                 w,\n@@ -910,11 +912,13 @@ fn render_assoc_item(\n             }\n         };\n         let vis = meth.visibility.print_with_space(meth.def_id, cx).to_string();\n-        let constness = header.constness.print_with_space();\n+        let constness =\n+            print_constness_with_space(&header.constness, meth.const_stability(cx.tcx()));\n         let asyncness = header.asyncness.print_with_space();\n         let unsafety = header.unsafety.print_with_space();\n         let defaultness = print_default_space(meth.is_default());\n         let abi = print_abi_with_space(header.abi).to_string();\n+\n         // NOTE: `{:#}` does not print HTML formatting, `{}` does. So `g.print` can't be reused between the length calculation and `write!`.\n         let generics_len = format!(\"{:#}\", g.print(cx)).len();\n         let mut header_len = \"fn \".len()\n@@ -939,15 +943,15 @@ fn render_assoc_item(\n         w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n         write!(\n             w,\n-            \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n+            \"{indent}{vis}{constness}{asyncness}{unsafety}{defaultness}{abi}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{notable_traits}{where_clause}\",\n-            indent_str,\n-            vis,\n-            constness,\n-            asyncness,\n-            unsafety,\n-            defaultness,\n-            abi,\n+            indent = indent_str,\n+            vis = vis,\n+            constness = constness,\n+            asyncness = asyncness,\n+            unsafety = unsafety,\n+            defaultness = defaultness,\n+            abi = abi,\n             href = href,\n             name = name,\n             generics = g.print(cx),"}, {"sha": "0174bfec32d7ea01abf6bf97b7cd602e83580016", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9", "patch": "@@ -22,7 +22,9 @@ use crate::clean::{self, GetDefId};\n use crate::formats::item_type::ItemType;\n use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n-use crate::html::format::{print_abi_with_space, print_where_clause, Buffer, PrintWithSpace};\n+use crate::html::format::{\n+    print_abi_with_space, print_constness_with_space, print_where_clause, Buffer, PrintWithSpace,\n+};\n use crate::html::highlight;\n use crate::html::layout::Page;\n use crate::html::markdown::MarkdownSummaryLine;\n@@ -430,29 +432,36 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n }\n \n fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::Function) {\n-    let header_len = format!(\n-        \"{}{}{}{}{:#}fn {}{:#}\",\n-        it.visibility.print_with_space(it.def_id, cx),\n-        f.header.constness.print_with_space(),\n-        f.header.asyncness.print_with_space(),\n-        f.header.unsafety.print_with_space(),\n-        print_abi_with_space(f.header.abi),\n-        it.name.as_ref().unwrap(),\n-        f.generics.print(cx),\n-    )\n-    .len();\n+    let vis = it.visibility.print_with_space(it.def_id, cx).to_string();\n+    let constness = print_constness_with_space(&f.header.constness, it.const_stability(cx.tcx()));\n+    let asyncness = f.header.asyncness.print_with_space();\n+    let unsafety = f.header.unsafety.print_with_space();\n+    let abi = print_abi_with_space(f.header.abi).to_string();\n+    let name = it.name.as_ref().unwrap();\n+\n+    let generics_len = format!(\"{:#}\", f.generics.print(cx)).len();\n+    let header_len = \"fn \".len()\n+        + vis.len()\n+        + constness.len()\n+        + asyncness.len()\n+        + unsafety.len()\n+        + abi.len()\n+        + name.as_str().len()\n+        + generics_len;\n+\n     w.write_str(\"<pre class=\\\"rust fn\\\">\");\n     render_attributes_in_pre(w, it, \"\");\n+    w.reserve(header_len);\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n          {name}{generics}{decl}{notable_traits}{where_clause}</pre>\",\n-        vis = it.visibility.print_with_space(it.def_id, cx),\n-        constness = f.header.constness.print_with_space(),\n-        asyncness = f.header.asyncness.print_with_space(),\n-        unsafety = f.header.unsafety.print_with_space(),\n-        abi = print_abi_with_space(f.header.abi),\n-        name = it.name.as_ref().unwrap(),\n+        vis = vis,\n+        constness = constness,\n+        asyncness = asyncness,\n+        unsafety = unsafety,\n+        abi = abi,\n+        name = name,\n         generics = f.generics.print(cx),\n         where_clause = print_where_clause(&f.generics, cx, 0, true),\n         decl = f.decl.full_print(header_len, 0, f.header.asyncness, cx),"}, {"sha": "fd7ff1c11c01c8eff95d6a9e0e73e934dc69a2d7", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=5fb27bca6cb88f1ad3cb7eac07c7e075b1a225f9", "patch": "@@ -7,11 +7,11 @@\n #![feature(foo, foo2)]\n #![feature(staged_api)]\n \n-// @has 'foo/fn.foo.html' '//pre' 'pub unsafe fn foo() -> u32'\n+// @has 'foo/fn.foo.html' '//pre' 'pub fn foo() -> u32'\n // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n-pub const unsafe fn foo() -> u32 { 42 }\n+pub const fn foo() -> u32 { 42 }\n \n // @has 'foo/fn.foo2.html' '//pre' 'pub const fn foo2() -> u32'\n #[unstable(feature = \"humans\", issue = \"none\")]\n@@ -39,11 +39,11 @@ pub const unsafe fn bar_not_gated() -> u32 { 42 }\n pub struct Foo;\n \n impl Foo {\n-    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/code' 'pub unsafe fn gated() -> u32'\n+    // @has 'foo/struct.Foo.html' '//div[@id=\"method.gated\"]/code' 'pub fn gated() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: unstable)'\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n-    pub const unsafe fn gated() -> u32 { 42 }\n+    pub const fn gated() -> u32 { 42 }\n \n     // @has 'foo/struct.Foo.html' '//div[@id=\"method.stable_impl\"]/code' 'pub const fn stable_impl() -> u32'\n     // @has - '//span[@class=\"since\"]' '1.0.0 (const: 1.2.0)'"}]}