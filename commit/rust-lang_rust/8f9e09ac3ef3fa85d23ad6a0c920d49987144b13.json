{"sha": "8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "node_id": "C_kwDOAAsO6NoAKDhmOWUwOWFjM2VmM2ZhODVkMjNhZDZhMGM5MjBkNDk5ODcxNDRiMTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-07T07:01:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-07T07:01:57Z"}, "message": "Auto merge of #108735 - clubby789:borrowck-unstable, r=Nilstrieb\n\nRemove `allow(potential_query_instability)` from `borrowck`\n\ncc #84447\n\nReplace uses of `FxHash*` with `FxIndex*`. One `#[allow]` for a HashMap in an external crate but the output is sorted afterwards.", "tree": {"sha": "fde59fecdc2b64772ff4cca39bc4732893ba3ec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fde59fecdc2b64772ff4cca39bc4732893ba3ec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "html_url": "https://github.com/rust-lang/rust/commit/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8824994ccd7efcc00ad03dee0c69d66c4161eea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8824994ccd7efcc00ad03dee0c69d66c4161eea7", "html_url": "https://github.com/rust-lang/rust/commit/8824994ccd7efcc00ad03dee0c69d66c4161eea7"}, {"sha": "3eeb3fd05afcc7aa70626017955baf2176993c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeb3fd05afcc7aa70626017955baf2176993c10", "html_url": "https://github.com/rust-lang/rust/commit/3eeb3fd05afcc7aa70626017955baf2176993c10"}], "stats": {"total": 127, "additions": 66, "deletions": 61}, "files": [{"sha": "fa0552e012de1f430a87c060a13a0136ca217f79", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -4,7 +4,7 @@ use crate::nll::ToRegionVid;\n use crate::path_utils::allow_two_phase_borrow;\n use crate::place_ext::PlaceExt;\n use crate::BorrowIndex;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor};\n@@ -26,10 +26,10 @@ pub struct BorrowSet<'tcx> {\n     /// NOTE: a given location may activate more than one borrow in the future\n     /// when more general two-phase borrow support is introduced, but for now we\n     /// only need to store one borrow index.\n-    pub activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n+    pub activation_map: FxIndexMap<Location, Vec<BorrowIndex>>,\n \n     /// Map from local to all the borrows on that local.\n-    pub local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n+    pub local_map: FxIndexMap<mir::Local, FxIndexSet<BorrowIndex>>,\n \n     pub(crate) locals_state_at_exit: LocalsStateAtExit,\n }\n@@ -175,8 +175,8 @@ struct GatherBorrows<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     location_map: FxIndexMap<Location, BorrowData<'tcx>>,\n-    activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n-    local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n+    activation_map: FxIndexMap<Location, Vec<BorrowIndex>>,\n+    local_map: FxIndexMap<mir::Local, FxIndexSet<BorrowIndex>>,\n \n     /// When we encounter a 2-phase borrow statement, it will always\n     /// be assigning into a temporary TEMP:\n@@ -186,7 +186,7 @@ struct GatherBorrows<'a, 'tcx> {\n     /// We add TEMP into this map with `b`, where `b` is the index of\n     /// the borrow. When we find a later use of this activation, we\n     /// remove from the map (and add to the \"tombstone\" set below).\n-    pending_activations: FxHashMap<mir::Local, BorrowIndex>,\n+    pending_activations: FxIndexMap<mir::Local, BorrowIndex>,\n \n     locals_state_at_exit: LocalsStateAtExit,\n }"}, {"sha": "d2574aa58c289e9b7f2ebf744c6ff546f22ab8d8", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -1,6 +1,6 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::{self, BasicBlock, Body, Location, Place};\n use rustc_middle::ty::RegionVid;\n@@ -124,7 +124,7 @@ pub struct Borrows<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n \n     borrow_set: &'a BorrowSet<'tcx>,\n-    borrows_out_of_scope_at_location: FxHashMap<Location, Vec<BorrowIndex>>,\n+    borrows_out_of_scope_at_location: FxIndexMap<Location, Vec<BorrowIndex>>,\n }\n \n struct StackEntry {\n@@ -138,7 +138,7 @@ struct OutOfScopePrecomputer<'a, 'tcx> {\n     visit_stack: Vec<StackEntry>,\n     body: &'a Body<'tcx>,\n     regioncx: &'a RegionInferenceContext<'tcx>,\n-    borrows_out_of_scope_at_location: FxHashMap<Location, Vec<BorrowIndex>>,\n+    borrows_out_of_scope_at_location: FxIndexMap<Location, Vec<BorrowIndex>>,\n }\n \n impl<'a, 'tcx> OutOfScopePrecomputer<'a, 'tcx> {\n@@ -148,7 +148,7 @@ impl<'a, 'tcx> OutOfScopePrecomputer<'a, 'tcx> {\n             visit_stack: vec![],\n             body,\n             regioncx,\n-            borrows_out_of_scope_at_location: FxHashMap::default(),\n+            borrows_out_of_scope_at_location: FxIndexMap::default(),\n         }\n     }\n }"}, {"sha": "f43b611f54eda471bad2f8dac848f5b00fd5ca58", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use rustc_const_eval::util::CallKind;\n use rustc_data_structures::captures::Captures;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{\n     struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n@@ -173,7 +173,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             let mut is_loop_move = false;\n             let mut in_pattern = false;\n-            let mut seen_spans = FxHashSet::default();\n+            let mut seen_spans = FxIndexSet::default();\n \n             for move_site in &move_site_vec {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n@@ -2223,8 +2223,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n-        let mut visited = FxHashSet::default();\n-        let mut move_locations = FxHashSet::default();\n+        let mut visited = FxIndexSet::default();\n+        let mut move_locations = FxIndexSet::default();\n         let mut reinits = vec![];\n         let mut result = vec![];\n \n@@ -2351,7 +2351,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let reinits_reachable = reinits\n             .into_iter()\n             .filter(|reinit| {\n-                let mut visited = FxHashSet::default();\n+                let mut visited = FxIndexSet::default();\n                 let mut stack = vec![*reinit];\n                 while let Some(location) = stack.pop() {\n                     if !visited.insert(location) {"}, {"sha": "fd1fda2ee4bd2deb3236c373e584083bf053aed2", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     nll::ToRegionVid,\n     region_infer::{Cause, RegionInferenceContext},\n };\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_middle::mir::visit::{MirVisitable, PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n@@ -37,7 +37,7 @@ struct UseFinder<'cx, 'tcx> {\n impl<'cx, 'tcx> UseFinder<'cx, 'tcx> {\n     fn find(&mut self) -> Option<Cause> {\n         let mut queue = VecDeque::new();\n-        let mut visited = FxHashSet::default();\n+        let mut visited = FxIndexSet::default();\n \n         queue.push_back(self.start_point);\n         while let Some(p) = queue.pop_front() {"}, {"sha": "d5ece57437e0b7cde8eaf4f7e4c8dfd57dcc9c68", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -1,7 +1,7 @@\n //! Contains utilities for generating suggestions for borrowck errors related to unsatisfied\n //! outlives constraints.\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n use rustc_middle::ty::RegionVid;\n use smallvec::SmallVec;\n@@ -87,7 +87,7 @@ impl OutlivesSuggestionBuilder {\n \n         // Keep track of variables that we have already suggested unifying so that we don't print\n         // out silly duplicate messages.\n-        let mut unified_already = FxHashSet::default();\n+        let mut unified_already = FxIndexSet::default();\n \n         for (fr, outlived) in &self.constraints_to_add {\n             let Some(fr_name) = self.region_vid_to_name(mbcx, *fr) else {"}, {"sha": "0fc3240c56004e6a8d9c8f3e6910ed9da881bcb5", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -1,6 +1,5 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n-#![allow(rustc::potential_query_instability)]\n #![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(let_chains)]\n@@ -18,7 +17,7 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate tracing;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticMessage, SubdiagnosticMessage};\n@@ -404,7 +403,7 @@ fn do_mir_borrowck<'tcx>(\n     // Note that this set is expected to be small - only upvars from closures\n     // would have a chance of erroneously adding non-user-defined mutable vars\n     // to the set.\n-    let temporary_used_locals: FxHashSet<Local> = mbcx\n+    let temporary_used_locals: FxIndexSet<Local> = mbcx\n         .used_mut\n         .iter()\n         .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())\n@@ -491,7 +490,7 @@ pub struct BodyWithBorrowckFacts<'tcx> {\n \n pub struct BorrowckInferCtxt<'cx, 'tcx> {\n     pub(crate) infcx: &'cx InferCtxt<'tcx>,\n-    pub(crate) reg_var_to_origin: RefCell<FxHashMap<ty::RegionVid, RegionCtxt>>,\n+    pub(crate) reg_var_to_origin: RefCell<FxIndexMap<ty::RegionVid, RegionCtxt>>,\n }\n \n impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n@@ -588,25 +587,25 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n     /// borrow errors that is handled by the `reservation_error_reported` field as the inclusion\n     /// of the `Span` type (while required to mute some errors) stops the muting of the reservation\n     /// errors.\n-    access_place_error_reported: FxHashSet<(Place<'tcx>, Span)>,\n+    access_place_error_reported: FxIndexSet<(Place<'tcx>, Span)>,\n     /// This field keeps track of when borrow conflict errors are reported\n     /// for reservations, so that we don't report seemingly duplicate\n     /// errors for corresponding activations.\n     //\n     // FIXME: ideally this would be a set of `BorrowIndex`, not `Place`s,\n     // but it is currently inconvenient to track down the `BorrowIndex`\n     // at the time we detect and report a reservation error.\n-    reservation_error_reported: FxHashSet<Place<'tcx>>,\n+    reservation_error_reported: FxIndexSet<Place<'tcx>>,\n     /// This fields keeps track of the `Span`s that we have\n     /// used to report extra information for `FnSelfUse`, to avoid\n     /// unnecessarily verbose errors.\n-    fn_self_span_reported: FxHashSet<Span>,\n+    fn_self_span_reported: FxIndexSet<Span>,\n     /// This field keeps track of errors reported in the checking of uninitialized variables,\n     /// so that we don't report seemingly duplicate errors.\n-    uninitialized_error_reported: FxHashSet<PlaceRef<'tcx>>,\n+    uninitialized_error_reported: FxIndexSet<PlaceRef<'tcx>>,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n     /// Used for the warning issued by an unused mutable local variable.\n-    used_mut: FxHashSet<Local>,\n+    used_mut: FxIndexSet<Local>,\n     /// If the function we're checking is a closure, then we'll need to report back the list of\n     /// mutable upvars that have been used. This field keeps track of them.\n     used_mut_upvars: SmallVec<[Field; 8]>,\n@@ -628,7 +627,7 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// Record the region names generated for each region in the given\n     /// MIR def so that we can reuse them later in help/error messages.\n-    region_names: RefCell<FxHashMap<RegionVid, RegionName>>,\n+    region_names: RefCell<FxIndexMap<RegionVid, RegionName>>,\n \n     /// The counter for generating new region names.\n     next_region_name: RefCell<usize>,\n@@ -2329,7 +2328,7 @@ mod error {\n         /// same primary span come out in a consistent order.\n         buffered_move_errors:\n             BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorGuaranteed>)>,\n-        buffered_mut_errors: FxHashMap<Span, (DiagnosticBuilder<'tcx, ErrorGuaranteed>, usize)>,\n+        buffered_mut_errors: FxIndexMap<Span, (DiagnosticBuilder<'tcx, ErrorGuaranteed>, usize)>,\n         /// Diagnostics to be reported buffer.\n         buffered: Vec<Diagnostic>,\n         /// Set to Some if we emit an error during borrowck"}, {"sha": "b6c5d4245d7b48933b855aea9970310c293e8c88", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -1,7 +1,7 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_data_structures::captures::Captures;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::MemberConstraint;\n use rustc_middle::ty::{self, Ty};\n@@ -18,7 +18,7 @@ where\n {\n     /// Stores the first \"member\" constraint for a given `R0`. This is an\n     /// index into the `constraints` vector below.\n-    first_constraints: FxHashMap<R, NllMemberConstraintIndex>,\n+    first_constraints: FxIndexMap<R, NllMemberConstraintIndex>,\n \n     /// Stores the data about each `R0 member of [R1..Rn]` constraint.\n     /// These are organized into a linked list, so each constraint\n@@ -132,7 +132,7 @@ where\n \n         let MemberConstraintSet { first_constraints, mut constraints, choice_regions } = self;\n \n-        let mut first_constraints2 = FxHashMap::default();\n+        let mut first_constraints2 = FxIndexMap::default();\n         first_constraints2.reserve(first_constraints.len());\n \n         for (r1, start1) in first_constraints {"}, {"sha": "905d8c42b28bca007d2886eb46c602924f947d66", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -3,7 +3,7 @@ use std::rc::Rc;\n \n use rustc_data_structures::binary_search_util;\n use rustc_data_structures::frozen::Frozen;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::CRATE_DEF_ID;\n@@ -88,7 +88,7 @@ pub struct RegionInferenceContext<'tcx> {\n     member_constraints_applied: Vec<AppliedMemberConstraint>,\n \n     /// Map universe indexes to information on why we created it.\n-    universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n+    universe_causes: FxIndexMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n \n     /// Contains the minimum universe of any variable within the same\n     /// SCC. We will ensure that no SCC contains values that are not\n@@ -263,7 +263,7 @@ fn sccs_info<'cx, 'tcx>(\n     debug!(debug_str);\n \n     let num_components = sccs.scc_data().ranges().len();\n-    let mut components = vec![FxHashSet::default(); num_components];\n+    let mut components = vec![FxIndexSet::default(); num_components];\n \n     for (reg_var_idx, scc_idx) in sccs.scc_indices().iter().enumerate() {\n         let reg_var = ty::RegionVid::from_usize(reg_var_idx);\n@@ -295,9 +295,9 @@ fn sccs_info<'cx, 'tcx>(\n \n             (ConstraintSccIndex::from_usize(scc_idx), repr)\n         })\n-        .collect::<FxHashMap<_, _>>();\n+        .collect::<FxIndexMap<_, _>>();\n \n-    let mut scc_node_to_edges = FxHashMap::default();\n+    let mut scc_node_to_edges = FxIndexMap::default();\n     for (scc_idx, repr) in components_representatives.iter() {\n         let edges_range = sccs.scc_data().ranges()[*scc_idx].clone();\n         let edges = &sccs.scc_data().all_successors()[edges_range];\n@@ -325,7 +325,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n         outlives_constraints: OutlivesConstraintSet<'tcx>,\n         member_constraints_in: MemberConstraintSet<'tcx, RegionVid>,\n-        universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n+        universe_causes: FxIndexMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n         type_tests: Vec<TypeTest<'tcx>>,\n         liveness_constraints: LivenessValues<RegionVid>,\n         elements: &Rc<RegionValueElements>,\n@@ -522,6 +522,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// outlives `'a` and hence contains R0 and R1.\n     fn init_free_and_bound_regions(&mut self) {\n         // Update the names (if any)\n+        // This iterator has unstable order but we collect it all into an IndexVec\n         for (external_name, variable) in self.universal_regions.named_universal_regions() {\n             debug!(\n                 \"init_universal_regions: region {:?} has external name {:?}\",\n@@ -918,7 +919,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Sometimes we register equivalent type-tests that would\n         // result in basically the exact same error being reported to\n         // the user. Avoid that.\n-        let mut deduplicate_errors = FxHashSet::default();\n+        let mut deduplicate_errors = FxIndexSet::default();\n \n         for type_test in &self.type_tests {\n             debug!(\"check_type_test: {:?}\", type_test);\n@@ -1504,6 +1505,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // the outlives suggestions or the debug output from `#[rustc_regions]` would be\n         // duplicated. The polonius subset errors are deduplicated here, while keeping the\n         // CFG-location ordering.\n+        // We can iterate the HashMap here because the result is sorted afterwards.\n+        #[allow(rustc::potential_query_instability)]\n         let mut subset_errors: Vec<_> = polonius_output\n             .subset_errors\n             .iter()"}, {"sha": "ec4b2e9d3e44693443bb34d59e405b941832b157", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::LocalDefId;\n@@ -65,7 +65,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> VecMap<LocalDefId, OpaqueHiddenType<'tcx>> {\n         let mut result: VecMap<LocalDefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n \n-        let member_constraints: FxHashMap<_, _> = self\n+        let member_constraints: FxIndexMap<_, _> = self\n             .member_constraints\n             .all_indices()\n             .map(|ci| (self.member_constraints[ci].key, ci))\n@@ -364,7 +364,7 @@ fn check_opaque_type_parameter_valid(\n         OpaqueTyOrigin::TyAlias => {}\n     }\n     let opaque_generics = tcx.generics_of(opaque_type_key.def_id);\n-    let mut seen_params: FxHashMap<_, Vec<_>> = FxHashMap::default();\n+    let mut seen_params: FxIndexMap<_, Vec<_>> = FxIndexMap::default();\n     for (i, arg) in opaque_type_key.substs.iter().enumerate() {\n         let arg_is_param = match arg.unpack() {\n             GenericArgKind::Type(ty) => matches!(ty.kind(), ty::Param(_)),"}, {"sha": "23a59c12865b141ca6e1b4486366059d2f748b11", "filename": "compiler/rustc_borrowck/src/region_infer/reverse_sccs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -3,7 +3,7 @@\n use crate::constraints::ConstraintSccIndex;\n use crate::RegionInferenceContext;\n use itertools::Itertools;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::graph::vec_graph::VecGraph;\n use rustc_data_structures::graph::WithSuccessors;\n use rustc_middle::ty::RegionVid;\n@@ -14,7 +14,7 @@ pub(crate) struct ReverseSccGraph {\n     graph: VecGraph<ConstraintSccIndex>,\n     /// For each SCC, the range of `universal_regions` that use that SCC as\n     /// their value.\n-    scc_regions: FxHashMap<ConstraintSccIndex, Range<usize>>,\n+    scc_regions: FxIndexMap<ConstraintSccIndex, Range<usize>>,\n     /// All of the universal regions, in grouped so that `scc_regions` can\n     /// index into here.\n     universal_regions: Vec<RegionVid>,\n@@ -26,7 +26,7 @@ impl ReverseSccGraph {\n         &'a self,\n         scc0: ConstraintSccIndex,\n     ) -> impl Iterator<Item = RegionVid> + 'a {\n-        let mut duplicates = FxHashSet::default();\n+        let mut duplicates = FxIndexSet::default();\n         self.graph\n             .depth_first_search(scc0)\n             .flat_map(move |scc1| {\n@@ -55,7 +55,7 @@ impl RegionInferenceContext<'_> {\n         paired_scc_regions.sort();\n         let universal_regions = paired_scc_regions.iter().map(|&(_, region)| region).collect();\n \n-        let mut scc_regions = FxHashMap::default();\n+        let mut scc_regions = FxIndexMap::default();\n         let mut start = 0;\n         for (scc, group) in &paired_scc_regions.into_iter().group_by(|(scc, _)| *scc) {\n             let group_size = group.count();"}, {"sha": "17e702eb8c5282ba78e8cbde781334bb68aa030d", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -19,7 +19,7 @@ use super::{Locations, TypeChecker};\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     /// Check explicit closure signature annotation,\n-    /// e.g., `|x: FxHashMap<_, &'static u32>| ...`.\n+    /// e.g., `|x: FxIndexMap<_, &'static u32>| ...`.\n     #[instrument(skip(self, body), level = \"debug\")]\n     pub(super) fn check_signature_annotation(&mut self, body: &Body<'tcx>) {\n         let mir_def_id = body.source.def_id().expect_local();"}, {"sha": "a687d3f5352438e04c4e37ead07cc87f55b7e1f4", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_index::bit_set::HybridBitSet;\n use rustc_index::interval::IntervalSet;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n@@ -56,7 +56,7 @@ pub(super) fn trace<'mir, 'tcx>(\n         elements,\n         local_use_map,\n         move_data,\n-        drop_data: FxHashMap::default(),\n+        drop_data: FxIndexMap::default(),\n     };\n \n     let mut results = LivenessResults::new(cx);\n@@ -85,7 +85,7 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n     move_data: &'me MoveData<'tcx>,\n \n     /// Cache for the results of `dropck_outlives` query.\n-    drop_data: FxHashMap<Ty<'tcx>, DropData<'tcx>>,\n+    drop_data: FxIndexMap<Ty<'tcx>, DropData<'tcx>>,\n \n     /// Results of dataflow tracking which variables (and paths) have been\n     /// initialized.\n@@ -185,7 +185,7 @@ impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     fn add_extra_drop_facts(\n         &mut self,\n         drop_used: Vec<(Local, Location)>,\n-        relevant_live_locals: FxHashSet<Local>,\n+        relevant_live_locals: FxIndexSet<Local>,\n     ) {\n         let locations = IntervalSet::new(self.cx.elements.num_points());\n "}, {"sha": "06c7b8b8f8731a8550d27ab1bb04a58141c362ba", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -9,7 +9,7 @@ use either::Either;\n \n use hir::OpaqueTyOrigin;\n use rustc_data_structures::frozen::Frozen;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -145,7 +145,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         outlives_constraints: OutlivesConstraintSet::default(),\n         member_constraints: MemberConstraintSet::default(),\n         type_tests: Vec::default(),\n-        universe_causes: FxHashMap::default(),\n+        universe_causes: FxIndexMap::default(),\n     };\n \n     let CreateResult {\n@@ -875,7 +875,7 @@ struct TypeChecker<'a, 'tcx> {\n     user_type_annotations: &'a CanonicalUserTypeAnnotations<'tcx>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n-    reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n+    reported_errors: FxIndexSet<(Ty<'tcx>, Span)>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n }\n \n@@ -925,7 +925,7 @@ pub(crate) struct MirTypeckRegionConstraints<'tcx> {\n \n     pub(crate) member_constraints: MemberConstraintSet<'tcx, RegionVid>,\n \n-    pub(crate) universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n+    pub(crate) universe_causes: FxIndexMap<ty::UniverseIndex, UniverseInfo<'tcx>>,\n \n     pub(crate) type_tests: Vec<TypeTest<'tcx>>,\n }"}, {"sha": "68c86051364ed815f29cb98894156a9df9c7bf38", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -312,6 +312,9 @@ impl<'tcx> UniversalRegions<'tcx> {\n     }\n \n     /// Gets an iterator over all the early-bound regions that have names.\n+    /// Iteration order may be unstable, so this should only be used when\n+    /// iteration order doesn't affect anything\n+    #[allow(rustc::potential_query_instability)]\n     pub fn named_universal_regions<'s>(\n         &'s self,\n     ) -> impl Iterator<Item = (ty::Region<'tcx>, ty::RegionVid)> + 's {"}, {"sha": "18dbe24d3b8b24c04f8c75616a1739f1587ce0af", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9e09ac3ef3fa85d23ad6a0c920d49987144b13/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=8f9e09ac3ef3fa85d23ad6a0c920d49987144b13", "patch": "@@ -1,6 +1,6 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n     Local, Location, Place, Statement, StatementKind, Terminator, TerminatorKind,\n@@ -26,8 +26,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ///  See #55344 for context.\n     pub(crate) fn gather_used_muts(\n         &mut self,\n-        temporary_used_locals: FxHashSet<Local>,\n-        mut never_initialized_mut_locals: FxHashSet<Local>,\n+        temporary_used_locals: FxIndexSet<Local>,\n+        mut never_initialized_mut_locals: FxIndexSet<Local>,\n     ) {\n         {\n             let mut visitor = GatherUsedMutsVisitor {\n@@ -48,8 +48,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n /// MIR visitor for collecting used mutable variables.\n /// The 'visit lifetime represents the duration of the MIR walk.\n struct GatherUsedMutsVisitor<'visit, 'cx, 'tcx> {\n-    temporary_used_locals: FxHashSet<Local>,\n-    never_initialized_mut_locals: &'visit mut FxHashSet<Local>,\n+    temporary_used_locals: FxIndexSet<Local>,\n+    never_initialized_mut_locals: &'visit mut FxIndexSet<Local>,\n     mbcx: &'visit mut MirBorrowckCtxt<'cx, 'tcx>,\n }\n "}]}