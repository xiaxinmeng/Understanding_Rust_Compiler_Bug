{"sha": "7c71bc3208031b1307573de45a3b3e18fa45787a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNzFiYzMyMDgwMzFiMTMwNzU3M2RlNDVhM2IzZTE4ZmE0NTc4N2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-30T19:52:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-30T19:52:13Z"}, "message": "Auto merge of #60262 - michaelwoerister:pgo-preinlining-pass, r=alexcrichton\n\n PGO: Add a run-make test that makes sure that PGO profiling data is used by the compiler during optimizations.\n\nFrom the tests comment section:\n```\n# This test makes sure that PGO profiling data leads to cold functions being\n# marked as `cold` and hot functions with `inlinehint`.\n# The test program contains an `if` were actual execution only ever takes the\n# `else` branch. Accordingly, we expect the function that is never called to\n# be marked as cold.\n```\n\nr? @alexcrichton", "tree": {"sha": "1f1e41b0a19c54a794d95435c77f352ca18ae1e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f1e41b0a19c54a794d95435c77f352ca18ae1e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c71bc3208031b1307573de45a3b3e18fa45787a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c71bc3208031b1307573de45a3b3e18fa45787a", "html_url": "https://github.com/rust-lang/rust/commit/7c71bc3208031b1307573de45a3b3e18fa45787a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c71bc3208031b1307573de45a3b3e18fa45787a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7baa53c91d7c33b925fc8aec553e3521548a07", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7baa53c91d7c33b925fc8aec553e3521548a07", "html_url": "https://github.com/rust-lang/rust/commit/5b7baa53c91d7c33b925fc8aec553e3521548a07"}, {"sha": "7c4cc01f7900f66be8bc939ddb4fb15636f598f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4cc01f7900f66be8bc939ddb4fb15636f598f1", "html_url": "https://github.com/rust-lang/rust/commit/7c4cc01f7900f66be8bc939ddb4fb15636f598f1"}], "stats": {"total": 194, "additions": 132, "deletions": 62}, "files": [{"sha": "38027aded9c53eb6978922f4ec930ae9f6cf2eed", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -1231,6 +1231,28 @@ impl Step for Compiletest {\n                 if let Some(ar) = builder.ar(target) {\n                     cmd.arg(\"--ar\").arg(ar);\n                 }\n+\n+                // The llvm/bin directory contains many useful cross-platform\n+                // tools. Pass the path to run-make tests so they can use them.\n+                let llvm_bin_path = llvm_config.parent()\n+                    .expect(\"Expected llvm-config to be contained in directory\");\n+                assert!(llvm_bin_path.is_dir());\n+                cmd.arg(\"--llvm-bin-dir\").arg(llvm_bin_path);\n+\n+                // If LLD is available, add it to the PATH\n+                if builder.config.lld_enabled {\n+                    let lld_install_root = builder.ensure(native::Lld {\n+                        target: builder.config.build,\n+                    });\n+\n+                    let lld_bin_path = lld_install_root.join(\"bin\");\n+\n+                    let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+                    let new_path = env::join_paths(std::iter::once(lld_bin_path)\n+                        .chain(env::split_paths(&old_path)))\n+                        .expect(\"Could not add LLD bin path to PATH\");\n+                    cmd.env(\"PATH\", new_path);\n+                }\n             }\n         }\n "}, {"sha": "c23ddbdbc6810fe1321b15072405c6735c0facb1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -9,7 +9,6 @@ use crate::Compiler;\n use crate::builder::{Step, RunConfig, ShouldRun, Builder};\n use crate::util::{exe, add_lib_path};\n use crate::compile;\n-use crate::native;\n use crate::channel::GitInfo;\n use crate::channel;\n use crate::cache::Interned;\n@@ -698,56 +697,6 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        // Add the llvm/bin directory to PATH since it contains lots of\n-        // useful, platform-independent tools\n-        if tool.uses_llvm_tools() && !self.config.dry_run {\n-            let mut additional_paths = vec![];\n-\n-            if let Some(llvm_bin_path) = self.llvm_bin_path() {\n-                additional_paths.push(llvm_bin_path);\n-            }\n-\n-            // If LLD is available, add that too.\n-            if self.config.lld_enabled {\n-                let lld_install_root = self.ensure(native::Lld {\n-                    target: self.config.build,\n-                });\n-\n-                let lld_bin_path = lld_install_root.join(\"bin\");\n-                additional_paths.push(lld_bin_path);\n-            }\n-\n-            if host.contains(\"windows\") {\n-                // On Windows, PATH and the dynamic library path are the same,\n-                // so we just add the LLVM bin path to lib_path\n-                lib_paths.extend(additional_paths);\n-            } else {\n-                let old_path = env::var_os(\"PATH\").unwrap_or_default();\n-                let new_path = env::join_paths(additional_paths.into_iter()\n-                        .chain(env::split_paths(&old_path)))\n-                    .expect(\"Could not add LLVM bin path to PATH\");\n-                cmd.env(\"PATH\", new_path);\n-            }\n-        }\n-\n         add_lib_path(lib_paths, cmd);\n     }\n-\n-    fn llvm_bin_path(&self) -> Option<PathBuf> {\n-        if self.config.llvm_enabled() {\n-            let llvm_config = self.ensure(native::Llvm {\n-                target: self.config.build,\n-                emscripten: false,\n-            });\n-\n-            // Add the llvm/bin directory to PATH since it contains lots of\n-            // useful, platform-independent tools\n-            let llvm_bin_path = llvm_config.parent()\n-                .expect(\"Expected llvm-config to be contained in directory\");\n-            assert!(llvm_bin_path.is_dir());\n-            Some(llvm_bin_path.to_path_buf())\n-        } else {\n-            None\n-        }\n-    }\n }"}, {"sha": "3ca2a8afad0b129025e5bce15436c39df7c626ad", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/Makefile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -9,17 +9,17 @@ all: cpp-executable rust-executable\n \n cpp-executable:\n \t$(RUSTC) -Clinker-plugin-lto=on -o $(TMPDIR)/librustlib-xlto.a -Copt-level=2 -Ccodegen-units=1 ./rustlib.rs\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) $(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n+\t$(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n \t# Make sure we don't find a call instruction to the function we expect to\n \t# always be inlined.\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -v -e \"call.*rust_always_inlined\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -v -e \"call.*rust_always_inlined\"\n \t# As a sanity check, make sure we do find a call instruction to a\n \t# non-inlined function\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -e \"call.*rust_never_inlined\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -e \"call.*rust_never_inlined\"\n \n rust-executable:\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) $(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n+\t$(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n \t$(RUSTC) -Clinker-plugin-lto=on -L$(TMPDIR) -Copt-level=2 -Clinker=$(CLANG) -Clink-arg=-fuse-ld=lld ./main.rs -o $(TMPDIR)/rsmain\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n-\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\""}, {"sha": "f70b411d747e71bcc7d35c42b00a455eac70a067", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -12,7 +12,7 @@ all: staticlib.rs upstream.rs\n \n \t# Check No LTO\n \t$(RUSTC) staticlib.rs -C linker-plugin-lto -Ccodegen-units=1 -L. -o $(TMPDIR)/staticlib.a\n-\t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n+\t(cd $(TMPDIR); \"$(LLVM_BIN_DIR)\"/llvm-ar x ./staticlib.a)\n \t# Make sure the upstream object file was included\n \tls $(TMPDIR)/upstream.*.rcgu.o\n \n@@ -22,7 +22,7 @@ all: staticlib.rs upstream.rs\n \t# Check ThinLTO\n \t$(RUSTC) upstream.rs -C linker-plugin-lto -Ccodegen-units=1 -Clto=thin\n \t$(RUSTC) staticlib.rs -C linker-plugin-lto -Ccodegen-units=1 -Clto=thin -L. -o $(TMPDIR)/staticlib.a\n-\t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n+\t(cd $(TMPDIR); \"$(LLVM_BIN_DIR)\"/llvm-ar x ./staticlib.a)\n \tls $(TMPDIR)/upstream.*.rcgu.o\n \n else"}, {"sha": "b4394cb5b40797050cecf7a6452f55633a1b5b4b", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -10,8 +10,8 @@ ifndef IS_WINDOWS\n # -Clinker-plugin-lto.\n \n # this only succeeds for bitcode files\n-ASSERT_IS_BITCODE_OBJ=($(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-bcanalyzer $(1))\n-EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x $(1))\n+ASSERT_IS_BITCODE_OBJ=(\"$(LLVM_BIN_DIR)\"/llvm-bcanalyzer $(1))\n+EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; \"$(LLVM_BIN_DIR)\"/llvm-ar x $(1))\n \n BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Clinker-plugin-lto -Ccodegen-units=1\n BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Clinker-plugin-lto -Ccodegen-units=1 --emit=obj"}, {"sha": "ababd45d33e2e9de7dca982ee204a384cfa87dc4", "filename": "src/test/run-make-fulldeps/pgo-use/Makefile", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -0,0 +1,51 @@\n+# needs-profiler-support\n+\n+-include ../tools.mk\n+\n+# This test makes sure that PGO profiling data leads to cold functions being\n+# marked as `cold` and hot functions with `inlinehint`.\n+# The test program contains an `if` were actual execution only ever takes the\n+# `else` branch. Accordingly, we expect the function that is never called to\n+# be marked as cold.\n+#\n+# The program is compiled with `-Copt-level=s` because this setting disables\n+# LLVM's pre-inlining pass (i.e. a pass that does some inlining before it adds\n+# the profiling instrumentation). Disabling this pass leads to rather\n+# predictable IR which we need for this test to be stable.\n+\n+COMMON_FLAGS=-Copt-level=s -Ccodegen-units=1\n+\n+# LLVM doesn't support instrumenting binaries that use SEH:\n+# https://bugs.llvm.org/show_bug.cgi?id=41279\n+#\n+# Things work fine with -Cpanic=abort though.\n+ifdef IS_MSVC\n+COMMON_FLAGS+= -Cpanic=abort\n+endif\n+\n+ifeq ($(UNAME),Darwin)\n+# macOS does not have the `tac` command, but `tail -r` does the same thing\n+TAC := tail -r\n+else\n+# some other platforms don't support the `-r` flag for `tail`, so use `tac`\n+TAC := tac\n+endif\n+\n+all:\n+\t# Compile the test program with instrumentation\n+\t$(RUSTC) $(COMMON_FLAGS) -Z pgo-gen=\"$(TMPDIR)\" main.rs\n+\t# Run it in order to generate some profiling data\n+\t$(call RUN,main some-argument) || exit 1\n+\t# Postprocess the profiling data so it can be used by the compiler\n+\t\"$(LLVM_BIN_DIR)\"/llvm-profdata merge \\\n+\t\t-o \"$(TMPDIR)\"/merged.profdata \\\n+\t\t\"$(TMPDIR)\"/default_*.profraw\n+\t# Compile the test program again, making use of the profiling data\n+\t$(RUSTC) $(COMMON_FLAGS) -Z pgo-use=\"$(TMPDIR)\"/merged.profdata --emit=llvm-ir main.rs\n+\t# Check that the generate IR contains some things that we expect\n+\t#\n+\t# We feed the file into LLVM FileCheck tool *in reverse* so that we see the\n+\t# line with the function name before the line with the function attributes.\n+\t# FileCheck only supports checking that something matches on the next line,\n+\t# but not if something matches on the previous line.\n+\t$(TAC) \"$(TMPDIR)\"/main.ll | \"$(LLVM_FILECHECK)\" filecheck-patterns.txt"}, {"sha": "6da34f88f2a7400c24741840a62fd335e94374c6", "filename": "src/test/run-make-fulldeps/pgo-use/filecheck-patterns.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Ffilecheck-patterns.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Ffilecheck-patterns.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Ffilecheck-patterns.txt?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -0,0 +1,11 @@\n+# Add a check that the IR contains some expected metadata\n+CHECK: !{!\"ProfileFormat\", !\"InstrProf\"}\n+CHECK: !\"ProfileSummary\"\n+\n+# Make sure that the hot function is marked with `inlinehint`\n+CHECK: define {{.*}} @hot_function\n+CHECK-NEXT: Function Attrs:{{.*}}inlinehint\n+\n+# Make sure that the cold function is marked with `cold`\n+CHECK: define {{.*}} @cold_function\n+CHECK-NEXT: Function Attrs:{{.*}}cold"}, {"sha": "eb9192c87e6f05b213bb62781d253119190e6d6a", "filename": "src/test/run-make-fulldeps/pgo-use/main.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Fmain.rs?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -0,0 +1,23 @@\n+#[no_mangle]\n+pub fn cold_function(c: u8) {\n+    println!(\"cold {}\", c);\n+}\n+\n+#[no_mangle]\n+pub fn hot_function(c: u8) {\n+    std::env::set_var(format!(\"var{}\", c), format!(\"hot {}\", c));\n+}\n+\n+fn main() {\n+    let arg = std::env::args().skip(1).next().unwrap();\n+\n+    for i in 0 .. 1000_000 {\n+        let some_value = arg.as_bytes()[i % arg.len()];\n+        if some_value == b'!' {\n+            // This branch is never taken at runtime\n+            cold_function(some_value);\n+        } else {\n+            hot_function(some_value);\n+        }\n+    }\n+}"}, {"sha": "4b9ab0b7c23d74e9f94c95581dafd429e03e6c40", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -47,6 +47,7 @@ DYLIB = $(TMPDIR)/$(1).dll\n STATICLIB = $(TMPDIR)/$(1).lib\n STATICLIB_GLOB = $(1)*.lib\n BIN = $(1).exe\n+LLVM_FILECHECK := $(shell cygpath -u \"$(LLVM_FILECHECK)\")\n else\n RUN = $(TARGET_RPATH_ENV) $(RUN_BINFILE)\n FAIL = $(TARGET_RPATH_ENV) $(RUN_BINFILE) && exit 1 || exit 0"}, {"sha": "4699dee1716a9ac690bdccc662adb628dfaa27ef", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -144,6 +144,9 @@ pub struct Config {\n     /// The LLVM `FileCheck` binary path.\n     pub llvm_filecheck: Option<PathBuf>,\n \n+    /// Path to LLVM's bin directory.\n+    pub llvm_bin_dir: Option<PathBuf>,\n+\n     /// The valgrind path.\n     pub valgrind_path: Option<String>,\n "}, {"sha": "dc5d1b9a853efd62011c206225c8270e1232bf6b", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -221,6 +221,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"LIST\",\n         )\n         .reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\")\n+        .optopt(\"\", \"llvm-bin-dir\", \"Path to LLVM's `bin` directory\", \"PATH\")\n         .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n         .optopt(\n             \"\",\n@@ -306,7 +307,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n         run_clang_based_tests_with: matches.opt_str(\"run-clang-based-tests-with\"),\n-        llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(|s| PathBuf::from(&s)),\n+        llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(PathBuf::from),\n+        llvm_bin_dir: matches.opt_str(\"llvm-bin-dir\").map(PathBuf::from),\n         src_base,\n         build_base: opt_path(matches, \"build-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),"}, {"sha": "42f9cdb7886fd5eeee66e4b5cb8d993b2bc63566", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c71bc3208031b1307573de45a3b3e18fa45787a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=7c71bc3208031b1307573de45a3b3e18fa45787a", "patch": "@@ -2691,6 +2691,14 @@ impl<'test> TestCx<'test> {\n             cmd.env(\"CLANG\", clang);\n         }\n \n+        if let Some(ref filecheck) = self.config.llvm_filecheck {\n+            cmd.env(\"LLVM_FILECHECK\", filecheck);\n+        }\n+\n+        if let Some(ref llvm_bin_dir) = self.config.llvm_bin_dir {\n+            cmd.env(\"LLVM_BIN_DIR\", llvm_bin_dir);\n+        }\n+\n         // We don't want RUSTFLAGS set from the outside to interfere with\n         // compiler flags set in the test cases:\n         cmd.env_remove(\"RUSTFLAGS\");"}]}