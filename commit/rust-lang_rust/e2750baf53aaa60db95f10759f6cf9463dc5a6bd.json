{"sha": "e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNzUwYmFmNTNhYWE2MGRiOTVmMTA3NTlmNmNmOTQ2M2RjNWE2YmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T16:14:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T16:14:41Z"}, "message": "Auto merge of #88499 - eddyb:layout-off, r=nagisa\n\nProvide `layout_of` automatically (given tcx + param_env + error handling).\n\nAfter #88337, there's no longer any uses of `LayoutOf` within `rustc_target` itself, so I realized I could move the trait to `rustc_middle::ty::layout` and redesign it a bit.\n\nThis is similar to #88338 (and supersedes it), but at no ergonomic loss, since there's no funky `C: LayoutOf<Ty = Ty>` -> `Ty: TyAbiInterface<C>` generic `impl` chain, and each `LayoutOf` still corresponds to one `impl` (of `LayoutOfHelpers`) for the specific context.\n\nAfter this PR, this is what's needed to get `trait LayoutOf` (with the `layout_of` method) implemented on some context type:\n* `TyCtxt`, via `HasTyCtxt`\n* `ParamEnv`, via `HasParamEnv`\n* a way to transform `LayoutError`s into the desired error type\n  * an error type of `!` can be paired with having `cx.layout_of(...)` return `TyAndLayout` *without* `Result<...>` around it, such as used by codegen\n  * this is done through a new `LayoutOfHelpers` trait (and so is specifying the type of `cx.layout_of(...)`)\n\nWhen going through this path (and not bypassing it with a manual `impl` of `LayoutOf`), the end result is that only the error case can be customized, the query itself and the success paths are guaranteed to be uniform.\n\n(**EDIT**: just noticed that because of the supertrait relationship, you cannot actually implement `LayoutOf` yourself, the blanket `impl` fully covers all possible context types that could ever implement it)\n\nPart of the motivation for this shape of API is that I've been working on querifying `FnAbi::of_*`, and what I want/need to introduce for that looks a lot like the setup in this PR - in particular, it's harder to express the `FnAbi` methods in `rustc_target`, since they're much more tied to `rustc` concepts.\n\nr? `@nagisa` cc `@oli-obk` `@bjorn3`", "tree": {"sha": "acc74b141eefeab4f77d1ff6e863f752281d823c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc74b141eefeab4f77d1ff6e863f752281d823c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "html_url": "https://github.com/rust-lang/rust/commit/e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c00dc4099961e4b0f04c3278d21316c96172fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c00dc4099961e4b0f04c3278d21316c96172fe", "html_url": "https://github.com/rust-lang/rust/commit/f7c00dc4099961e4b0f04c3278d21316c96172fe"}, {"sha": "f53c93cf65c351ca0ef0cfe257a6139d77032ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f53c93cf65c351ca0ef0cfe257a6139d77032ea8", "html_url": "https://github.com/rust-lang/rust/commit/f53c93cf65c351ca0ef0cfe257a6139d77032ea8"}], "stats": {"total": 467, "additions": 251, "deletions": 216}, "files": [{"sha": "6f7ca51d038c0155233e9ad8dcea64cfa70a6b47", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -1,4 +1,5 @@\n use rustc_index::vec::IndexVec;\n+use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers};\n use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n@@ -256,12 +257,12 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) inline_asm_index: u32,\n }\n \n-impl<'tcx> LayoutOf<'tcx> for FunctionCx<'_, '_, 'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl<'tcx> LayoutOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        RevealAllLayoutCx(self.tcx).layout_of(ty)\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        RevealAllLayoutCx(self.tcx).handle_layout_err(err, span, ty)\n     }\n }\n \n@@ -364,19 +365,16 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n \n pub(crate) struct RevealAllLayoutCx<'tcx>(pub(crate) TyCtxt<'tcx>);\n \n-impl<'tcx> LayoutOf<'tcx> for RevealAllLayoutCx<'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl<'tcx> LayoutOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> TyAndLayout<'tcx> {\n-        assert!(!ty.still_further_specializable());\n-        self.0.layout_of(ParamEnv::reveal_all().and(&ty)).unwrap_or_else(|e| {\n-            if let layout::LayoutError::SizeOverflow(_) = e {\n-                self.0.sess.fatal(&e.to_string())\n-            } else {\n-                bug!(\"failed to get layout for `{}`: {}\", ty, e)\n-            }\n-        })\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        if let layout::LayoutError::SizeOverflow(_) = err {\n+            self.0.sess.span_fatal(span, &err.to_string())\n+        } else {\n+            span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n+        }\n     }\n }\n "}, {"sha": "2e5e8f683cdaaad47aa2e75c1ef4775345a9ba10", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -79,12 +79,12 @@ mod prelude {\n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n     pub(crate) use rustc_middle::bug;\n     pub(crate) use rustc_middle::mir::{self, *};\n-    pub(crate) use rustc_middle::ty::layout::{self, TyAndLayout};\n+    pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n         TypeFoldable, UintTy,\n     };\n-    pub(crate) use rustc_target::abi::{Abi, LayoutOf, Scalar, Size, VariantIdx};\n+    pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n "}, {"sha": "cd55a61cbaf9d7b4c7675d73ff985a4478cf9fcf", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -11,11 +11,12 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_middle::bug;\n+use rustc_middle::ty::layout::LayoutOf;\n pub use rustc_middle::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc_middle::ty::Ty;\n use rustc_target::abi::call::ArgAbi;\n pub use rustc_target::abi::call::*;\n-use rustc_target::abi::{self, HasDataLayout, Int, LayoutOf};\n+use rustc_target::abi::{self, HasDataLayout, Int};\n pub use rustc_target::spec::abi::Abi;\n \n use libc::c_uint;"}, {"sha": "da24fe08f0dfd6b7349e5290c27b216671de7678", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -15,7 +15,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::layout::TyAndLayout;\n+use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n use rustc_target::abi::{self, Align, Size};\n@@ -88,12 +88,12 @@ impl HasTargetSpec for Builder<'_, '_, 'tcx> {\n     }\n }\n \n-impl abi::LayoutOf<'tcx> for Builder<'_, '_, 'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl LayoutOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        self.cx.layout_of(ty)\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        self.cx.handle_layout_err(err, span, ty)\n     }\n }\n "}, {"sha": "cee582aec95ebf077b818093c990d77044451c07", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -12,9 +12,10 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n use rustc_middle::mir::interpret::{Allocation, GlobalAlloc, Scalar};\n-use rustc_middle::ty::{layout::TyAndLayout, ScalarInt};\n+use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n+use rustc_middle::ty::ScalarInt;\n use rustc_span::symbol::Symbol;\n-use rustc_target::abi::{self, AddressSpace, HasDataLayout, LayoutOf, Pointer, Size};\n+use rustc_target::abi::{self, AddressSpace, HasDataLayout, Pointer, Size};\n \n use libc::{c_char, c_uint};\n use tracing::debug;"}, {"sha": "e673b06f1552795b6b65ec64abf335a9ba20ded7", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -15,10 +15,11 @@ use rustc_middle::mir::interpret::{\n     Scalar as InterpScalar,\n };\n use rustc_middle::mir::mono::MonoItem;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_target::abi::{\n-    AddressSpace, Align, HasDataLayout, LayoutOf, Primitive, Scalar, Size, WrappingRange,\n+    AddressSpace, Align, HasDataLayout, Primitive, Scalar, Size, WrappingRange,\n };\n use std::ops::Range;\n use tracing::debug;"}, {"sha": "2d397dc58353402fe76e6b4925e376176376a071", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -14,15 +14,15 @@ use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_middle::bug;\n use rustc_middle::mir::mono::CodegenUnit;\n-use rustc_middle::ty::layout::{HasParamEnv, LayoutError, TyAndLayout};\n+use rustc_middle::ty::layout::{HasParamEnv, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n+use rustc_middle::{bug, span_bug};\n use rustc_session::config::{CFGuard, CrateType, DebugInfo};\n use rustc_session::Session;\n-use rustc_span::source_map::{Span, DUMMY_SP};\n+use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n-use rustc_target::abi::{HasDataLayout, LayoutOf, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n+use rustc_target::abi::{HasDataLayout, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, RelocModel, Target, TlsModel};\n use smallvec::SmallVec;\n \n@@ -835,22 +835,16 @@ impl ty::layout::HasTyCtxt<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n }\n \n-impl LayoutOf<'tcx> for CodegenCx<'ll, 'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl LayoutOfHelpers<'tcx> for CodegenCx<'ll, 'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        self.spanned_layout_of(ty, DUMMY_SP)\n-    }\n-\n-    fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::TyAndLayout {\n-        self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty)).unwrap_or_else(|e| {\n-            if let LayoutError::SizeOverflow(_) = e {\n-                self.sess().span_fatal(span, &e.to_string())\n-            } else {\n-                bug!(\"failed to get layout for `{}`: {}\", ty, e)\n-            }\n-        })\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        if let LayoutError::SizeOverflow(_) = err {\n+            self.sess().span_fatal(span, &err.to_string())\n+        } else {\n+            span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n+        }\n     }\n }\n "}, {"sha": "9a6391443dd010a2c383ceaf3479eb477c02ad8b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::mir::{self, GeneratorLayout};\n-use rustc_middle::ty::layout::{self, IntegerExt, PrimitiveExt, TyAndLayout};\n+use rustc_middle::ty::layout::{self, IntegerExt, LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, AdtKind, GeneratorSubsts, ParamEnv, Ty, TyCtxt};\n@@ -37,7 +37,7 @@ use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::{Interner, Symbol};\n use rustc_span::FileNameDisplayPreference;\n use rustc_span::{self, SourceFile, SourceFileHash, Span};\n-use rustc_target::abi::{Abi, Align, HasDataLayout, Integer, LayoutOf, TagEncoding};\n+use rustc_target::abi::{Abi, Align, HasDataLayout, Integer, TagEncoding};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n use rustc_target::abi::{Primitive, Size, VariantIdx, Variants};\n use tracing::debug;"}, {"sha": "fbaf8c8bdf63ddf33468227d37532995c0e05e55", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -25,14 +25,14 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n-use rustc_middle::ty::layout::HasTyCtxt;\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeFoldable};\n use rustc_session::config::{self, DebugInfo};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, BytePos, Pos, SourceFile, SourceFileAndLine, Span};\n-use rustc_target::abi::{LayoutOf, Primitive, Size};\n+use rustc_target::abi::{Primitive, Size};\n \n use libc::c_uint;\n use smallvec::SmallVec;"}, {"sha": "1aa52d975e9a015854dedef358b1c9e67955661f", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -15,11 +15,11 @@ use rustc_codegen_ssa::mir::operand::OperandRef;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n use rustc_hir as hir;\n-use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n+use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_span::{sym, symbol::kw, Span, Symbol};\n-use rustc_target::abi::{self, HasDataLayout, LayoutOf, Primitive};\n+use rustc_target::abi::{self, HasDataLayout, Primitive};\n use rustc_target::spec::PanicStrategy;\n \n use std::cmp::Ordering;"}, {"sha": "8ba3e870fbb71ca231968d12fbae82e27c91ff68", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -8,10 +8,9 @@ use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n pub use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n-use rustc_middle::ty::layout::FnAbiExt;\n+use rustc_middle::ty::layout::{FnAbiExt, LayoutOf};\n use rustc_middle::ty::{self, Instance, TypeFoldable};\n use rustc_session::config::CrateType;\n-use rustc_target::abi::LayoutOf;\n use rustc_target::spec::RelocModel;\n use tracing::debug;\n "}, {"sha": "d615d230ea0d19a45dc5fca07233cc39cbb67526", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -4,12 +4,12 @@ use crate::context::TypeLowering;\n use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n-use rustc_middle::ty::layout::{FnAbiExt, TyAndLayout};\n+use rustc_middle::ty::layout::{FnAbiExt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n-use rustc_target::abi::{LayoutOf, PointeeInfo, Scalar, Size, TyAbiInterface, Variants};\n+use rustc_target::abi::{PointeeInfo, Scalar, Size, TyAbiInterface, Variants};\n use smallvec::{smallvec, SmallVec};\n use tracing::debug;\n "}, {"sha": "caafae6c26750aaa9a7114bbe1fab3f65095f63e", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -7,9 +7,9 @@ use rustc_codegen_ssa::{\n     common::IntPredicate,\n     traits::{BaseTypeMethods, BuilderMethods, ConstMethods, DerivedTypeMethods},\n };\n-use rustc_middle::ty::layout::HasTyCtxt;\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::Ty;\n-use rustc_target::abi::{Align, Endian, HasDataLayout, LayoutOf, Size};\n+use rustc_target::abi::{Align, Endian, HasDataLayout, Size};\n \n fn round_pointer_up_to_alignment(\n     bx: &mut Builder<'a, 'll, 'tcx>,"}, {"sha": "a6bf1d8d1e51a2ef596dc6e2c4532b13a75df1ad", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -22,14 +22,14 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::middle::lang_items;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n-use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, EntryFnType};\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n-use rustc_target::abi::{Align, LayoutOf, VariantIdx};\n+use rustc_target::abi::{Align, VariantIdx};\n \n use std::convert::TryFrom;\n use std::ops::{Deref, DerefMut};"}, {"sha": "8d75b2e7a3d4c62a92519e00cf503310c9cc0a75", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -9,8 +9,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Location, TerminatorKind};\n-use rustc_middle::ty::layout::HasTyCtxt;\n-use rustc_target::abi::LayoutOf;\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n \n pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     fx: &FunctionCx<'a, 'tcx, Bx>,"}, {"sha": "2ca7e8fd7e8e377e05a8a89a52a6c276137625ed", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -14,13 +14,13 @@ use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::{self, SwitchTargets};\n-use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n+use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt, LayoutOf};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode};\n-use rustc_target::abi::{self, HasDataLayout, LayoutOf};\n+use rustc_target::abi::{self, HasDataLayout};\n use rustc_target::spec::abi::Abi;\n \n /// Used by `FunctionCx::codegen_terminator` for emitting common patterns"}, {"sha": "5cee25b5cca3b5f9fa5362341f4617aaa21f15b5", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -8,9 +8,9 @@ use crate::MemFlags;\n \n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, Pointer, Scalar};\n-use rustc_middle::ty::layout::TyAndLayout;\n+use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_middle::ty::Ty;\n-use rustc_target::abi::{Abi, Align, LayoutOf, Size};\n+use rustc_target::abi::{Abi, Align, Size};\n \n use std::fmt;\n "}, {"sha": "b48d6d42b43577d62242d06c0d2fc12b8d396815", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -8,10 +8,10 @@ use crate::MemFlags;\n \n use rustc_middle::mir;\n use rustc_middle::mir::tcx::PlaceTy;\n-use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::{self, Ty};\n use rustc_target::abi::{Abi, Align, FieldsShape, Int, TagEncoding};\n-use rustc_target::abi::{LayoutOf, VariantIdx, Variants};\n+use rustc_target::abi::{VariantIdx, Variants};\n \n #[derive(Copy, Clone, Debug)]\n pub struct PlaceRef<'tcx, V> {"}, {"sha": "3d8ea29160bd0941785274fa746c2883fb2fbae3", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -11,10 +11,10 @@ use rustc_apfloat::{ieee, Float, Round, Status};\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir;\n use rustc_middle::ty::cast::{CastTy, IntTy};\n-use rustc_middle::ty::layout::HasTyCtxt;\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n-use rustc_target::abi::{Abi, Int, LayoutOf, Variants};\n+use rustc_target::abi::{Abi, Int, Variants};\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_rvalue("}, {"sha": "5f0f50ae2df1d2c046b44a29a8bbff1add56bf26", "filename": "compiler/rustc_codegen_ssa/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -4,8 +4,7 @@ use crate::traits::*;\n use rustc_hir as hir;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n-use rustc_middle::ty::layout::HasTyCtxt;\n-use rustc_target::abi::LayoutOf;\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n \n pub trait MonoItemExt<'a, 'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx);"}, {"sha": "dbb7e1ee8b17fd68e573850a13a7b427ffaf5e93", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -8,15 +8,14 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorReported;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::{\n     config::{self, OutputFilenames, PrintRequest},\n     Session,\n };\n use rustc_span::symbol::Symbol;\n-use rustc_target::abi::LayoutOf;\n use rustc_target::spec::Target;\n \n pub use rustc_data_structures::sync::MetadataRef;\n@@ -39,17 +38,12 @@ pub trait BackendTypes {\n }\n \n pub trait Backend<'tcx>:\n-    Sized\n-    + BackendTypes\n-    + HasTyCtxt<'tcx>\n-    + LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n+    Sized + BackendTypes + HasTyCtxt<'tcx> + LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>>\n {\n }\n \n impl<'tcx, T> Backend<'tcx> for T where\n-    Self: BackendTypes\n-        + HasTyCtxt<'tcx>\n-        + LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n+    Self: BackendTypes + HasTyCtxt<'tcx> + LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>>\n {\n }\n "}, {"sha": "2850e7a6b44e95a485046701b98911e75a897ca3", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -41,16 +41,17 @@ use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n use rustc_hir::{HirId, Node};\n use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n+use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::Instance;\n-use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::{BuiltinLintDiagnostics, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, InnerSpan, MultiSpan, Span};\n-use rustc_target::abi::{LayoutOf, VariantIdx};\n+use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n \n use crate::nonstandard_style::{method_context, MethodLateContext};"}, {"sha": "4c45e33db79c73976ddb1f07dc78eea6bde5d886", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -31,7 +31,7 @@ use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability;\n-use rustc_middle::ty::layout::{LayoutError, TyAndLayout};\n+use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n use rustc_serialize::json::Json;\n@@ -41,7 +41,7 @@ use rustc_session::Session;\n use rustc_session::SessionLintStore;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n-use rustc_target::abi::{self, LayoutOf};\n+use rustc_target::abi;\n use tracing::debug;\n \n use std::cell::Cell;\n@@ -1080,12 +1080,12 @@ impl<'tcx> ty::layout::HasParamEnv<'tcx> for LateContext<'tcx> {\n     }\n }\n \n-impl<'tcx> LayoutOf<'tcx> for LateContext<'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n+impl<'tcx> LayoutOfHelpers<'tcx> for LateContext<'tcx> {\n+    type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        self.tcx.layout_of(self.param_env.and(ty))\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, _: Span, _: Ty<'tcx>) -> LayoutError<'tcx> {\n+        err\n     }\n }\n "}, {"sha": "480f7756db3fe60476d766bc46ebffd852c38cf6", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -6,14 +6,14 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n-use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n+use rustc_middle::ty::layout::{IntegerExt, LayoutOf, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::Abi;\n-use rustc_target::abi::{Integer, LayoutOf, TagEncoding, Variants};\n+use rustc_target::abi::{Integer, TagEncoding, Variants};\n use rustc_target::spec::abi::Abi as SpecAbi;\n \n use if_chain::if_chain;"}, {"sha": "6868be50f1d068d458a3f7568d9992881501345e", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -31,6 +31,7 @@\n #![feature(box_patterns)]\n #![feature(core_intrinsics)]\n #![feature(discriminant_kind)]\n+#![feature(exhaustive_patterns)]\n #![feature(if_let_guard)]\n #![feature(never_type)]\n #![feature(extern_types)]"}, {"sha": "f7ab9dd82ac738971450a43ea912ba456ea56a8e", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 99, "deletions": 23, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -13,7 +13,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::{config::OptLevel, DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::call::{\n     ArgAbi, ArgAttribute, ArgAttributes, ArgExtension, Conv, FnAbi, PassMode, Reg, RegKind,\n };\n@@ -2062,29 +2062,113 @@ impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {\n     }\n }\n \n+pub trait MaybeResult<T> {\n+    type Error;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self;\n+    fn to_result(self) -> Result<T, Self::Error>;\n+}\n+\n+impl<T> MaybeResult<T> for T {\n+    type Error = !;\n+\n+    fn from(Ok(x): Result<T, Self::Error>) -> Self {\n+        x\n+    }\n+    fn to_result(self) -> Result<T, Self::Error> {\n+        Ok(self)\n+    }\n+}\n+\n+impl<T, E> MaybeResult<T> for Result<T, E> {\n+    type Error = E;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self {\n+        x\n+    }\n+    fn to_result(self) -> Result<T, Self::Error> {\n+        self\n+    }\n+}\n+\n pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;\n \n-impl LayoutOf<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n+/// Trait for contexts that want to be able to compute layouts of types.\n+/// This automatically gives access to `LayoutOf`, through a blanket `impl`.\n+pub trait LayoutOfHelpers<'tcx>: HasDataLayout + HasTyCtxt<'tcx> + HasParamEnv<'tcx> {\n+    /// The `TyAndLayout`-wrapping type (or `TyAndLayout` itself), which will be\n+    /// returned from `layout_of` (see also `handle_layout_err`).\n+    type LayoutOfResult: MaybeResult<TyAndLayout<'tcx>>;\n \n+    /// `Span` to use for `tcx.at(span)`, from `layout_of`.\n+    // FIXME(eddyb) perhaps make this mandatory to get contexts to track it better?\n+    #[inline]\n+    fn layout_tcx_at_span(&self) -> Span {\n+        DUMMY_SP\n+    }\n+\n+    /// Helper used for `layout_of`, to adapt `tcx.layout_of(...)` into a\n+    /// `Self::LayoutOfResult` (which does not need to be a `Result<...>`).\n+    ///\n+    /// Most `impl`s, which propagate `LayoutError`s, should simply return `err`,\n+    /// but this hook allows e.g. codegen to return only `TyAndLayout` from its\n+    /// `cx.layout_of(...)`, without any `Result<...>` around it to deal with\n+    /// (and any `LayoutError`s are turned into fatal errors or ICEs).\n+    fn handle_layout_err(\n+        &self,\n+        err: LayoutError<'tcx>,\n+        span: Span,\n+        ty: Ty<'tcx>,\n+    ) -> <Self::LayoutOfResult as MaybeResult<TyAndLayout<'tcx>>>::Error;\n+}\n+\n+/// Blanket extension trait for contexts that can compute layouts of types.\n+pub trait LayoutOf<'tcx>: LayoutOfHelpers<'tcx> {\n     /// Computes the layout of a type. Note that this implicitly\n     /// executes in \"reveal all\" mode, and will normalize the input type.\n     #[inline]\n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        self.tcx.layout_of(self.param_env.and(ty))\n+    fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {\n+        self.spanned_layout_of(ty, DUMMY_SP)\n+    }\n+\n+    /// Computes the layout of a type, at `span`. Note that this implicitly\n+    /// executes in \"reveal all\" mode, and will normalize the input type.\n+    // FIXME(eddyb) avoid passing information like this, and instead add more\n+    // `TyCtxt::at`-like APIs to be able to do e.g. `cx.at(span).layout_of(ty)`.\n+    #[inline]\n+    fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::LayoutOfResult {\n+        let span = if !span.is_dummy() { span } else { self.layout_tcx_at_span() };\n+        MaybeResult::from(\n+            self.tcx()\n+                .at(span)\n+                .layout_of(self.param_env().and(ty))\n+                .map_err(|err| self.handle_layout_err(err, span, ty)),\n+        )\n     }\n }\n \n-impl LayoutOf<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n+impl<C: LayoutOfHelpers<'tcx>> LayoutOf<'tcx> for C {}\n+\n+impl LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n+    type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n+\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, _: Span, _: Ty<'tcx>) -> LayoutError<'tcx> {\n+        err\n+    }\n+}\n+\n+impl LayoutOfHelpers<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n+    type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n+\n+    #[inline]\n+    fn layout_tcx_at_span(&self) -> Span {\n+        self.tcx.span\n+    }\n \n-    /// Computes the layout of a type. Note that this implicitly\n-    /// executes in \"reveal all\" mode, and will normalize the input type.\n     #[inline]\n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        self.tcx.layout_of(self.param_env.and(ty))\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, _: Span, _: Ty<'tcx>) -> LayoutError<'tcx> {\n+        err\n     }\n }\n \n@@ -2559,11 +2643,7 @@ impl<'tcx> ty::Instance<'tcx> {\n \n pub trait FnAbiExt<'tcx, C>\n where\n-    C: LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n-        + HasDataLayout\n-        + HasTargetSpec\n-        + HasTyCtxt<'tcx>\n-        + HasParamEnv<'tcx>,\n+    C: LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>> + HasTargetSpec,\n {\n     /// Compute a `FnAbi` suitable for indirect calls, i.e. to `fn` pointers.\n     ///\n@@ -2746,11 +2826,7 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n \n impl<'tcx, C> FnAbiExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n where\n-    C: LayoutOf<'tcx, Ty = Ty<'tcx>, TyAndLayout = TyAndLayout<'tcx>>\n-        + HasDataLayout\n-        + HasTargetSpec\n-        + HasTyCtxt<'tcx>\n-        + HasParamEnv<'tcx>,\n+    C: LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>> + HasTargetSpec,\n {\n     fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n         call::FnAbi::new_internal(cx, sig, extra_args, None, CodegenFnAttrFlags::empty(), false)"}, {"sha": "3e8a93e08c29d9c6739735e0f70d023f10f2efb9", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -12,10 +12,11 @@ use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::traits::Reveal;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n use rustc_span::source_map::Span;\n-use rustc_target::abi::{Abi, LayoutOf};\n+use rustc_target::abi::Abi;\n use std::borrow::Cow;\n use std::convert::TryInto;\n "}, {"sha": "4c4b0bd2d1f271c215d8e6b9591e9f3ee077e851", "filename": "compiler/rustc_mir/src/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -5,9 +5,9 @@ use rustc_apfloat::{Float, FloatConvert};\n use rustc_middle::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc_middle::mir::CastKind;\n use rustc_middle::ty::adjustment::PointerCast;\n-use rustc_middle::ty::layout::{IntegerExt, TyAndLayout};\n+use rustc_middle::ty::layout::{IntegerExt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::{self, FloatTy, Ty, TypeAndMut};\n-use rustc_target::abi::{Integer, LayoutOf, Variants};\n+use rustc_target::abi::{Integer, Variants};\n \n use super::{\n     util::ensure_monomorphic_enough, FnVal, ImmTy, Immediate, InterpCx, Machine, OpTy, PlaceTy,"}, {"sha": "05502d8b21f1ce7a5026d4d74927c1b4db41c495", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -8,18 +8,18 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::mir;\n-use rustc_middle::ty::layout::{self, TyAndLayout};\n+use rustc_middle::ty::layout::{self, LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n-use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n+use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n-    AllocId, GlobalId, Immediate, InterpResult, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory,\n-    MemoryKind, Operand, Place, PlaceTy, Pointer, Provenance, Scalar, ScalarMaybeUninit,\n-    StackPopJump,\n+    AllocId, GlobalId, Immediate, InterpErrorInfo, InterpResult, MPlaceTy, Machine, MemPlace,\n+    MemPlaceMeta, Memory, MemoryKind, Operand, Place, PlaceTy, Pointer, Provenance, Scalar,\n+    ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n use crate::util::storage::AlwaysLiveLocals;\n@@ -313,15 +313,22 @@ where\n     }\n }\n \n-impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> LayoutOf<'tcx> for InterpCx<'mir, 'tcx, M> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = InterpResult<'tcx, TyAndLayout<'tcx>>;\n+impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> LayoutOfHelpers<'tcx> for InterpCx<'mir, 'tcx, M> {\n+    type LayoutOfResult = InterpResult<'tcx, TyAndLayout<'tcx>>;\n \n     #[inline]\n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        self.tcx\n-            .layout_of(self.param_env.and(ty))\n-            .map_err(|layout| err_inval!(Layout(layout)).into())\n+    fn layout_tcx_at_span(&self) -> Span {\n+        self.tcx.span\n+    }\n+\n+    #[inline]\n+    fn handle_layout_err(\n+        &self,\n+        err: LayoutError<'tcx>,\n+        _: Span,\n+        _: Ty<'tcx>,\n+    ) -> InterpErrorInfo<'tcx> {\n+        err_inval!(Layout(err)).into()\n     }\n }\n "}, {"sha": "07e974b72664bbefc7103a91f80532ea3135ec6e", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -11,10 +11,11 @@ use rustc_middle::mir::{\n     BinOp,\n };\n use rustc_middle::ty;\n+use rustc_middle::ty::layout::LayoutOf as _;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::abi::{Abi, Align, LayoutOf as _, Primitive, Size};\n+use rustc_target::abi::{Abi, Align, Primitive, Size};\n \n use super::{\n     util::ensure_monomorphic_enough, CheckInAllocMsg, ImmTy, InterpCx, Machine, OpTy, PlaceTy,"}, {"sha": "d4cbba18029311bff2079acb73220ddb4d42bf62", "filename": "compiler/rustc_mir/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -3,9 +3,9 @@ use std::convert::TryFrom;\n use rustc_ast::Mutability;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::TerminatorKind;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::subst::Subst;\n use rustc_span::{Span, Symbol};\n-use rustc_target::abi::LayoutOf;\n \n use crate::interpret::{\n     intrinsics::{InterpCx, Machine},"}, {"sha": "e67a6690836ad2a9ed8f12599369a07099775d3c", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -7,11 +7,11 @@ use std::fmt::Write;\n use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n-use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n+use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::{ConstInt, Ty};\n use rustc_middle::{mir, ty};\n-use rustc_target::abi::{Abi, HasDataLayout, LayoutOf, Size, TagEncoding};\n+use rustc_target::abi::{Abi, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n \n use super::{"}, {"sha": "ac000b1bb566fe7ea9c037167da15e730073085e", "filename": "compiler/rustc_mir/src/interpret/operator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperator.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -3,8 +3,8 @@ use std::convert::TryFrom;\n use rustc_apfloat::Float;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n-use rustc_middle::ty::{self, layout::TyAndLayout, FloatTy, Ty};\n-use rustc_target::abi::LayoutOf;\n+use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n+use rustc_middle::ty::{self, FloatTy, Ty};\n \n use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};\n "}, {"sha": "95a44e3fecf3d19b249c1f81924f123b5ebc010b", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -8,10 +8,10 @@ use std::hash::Hash;\n use rustc_ast::Mutability;\n use rustc_macros::HashStable;\n use rustc_middle::mir;\n-use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n+use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::{self, Ty};\n use rustc_target::abi::{Abi, Align, FieldsShape, TagEncoding};\n-use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n+use rustc_target::abi::{HasDataLayout, Size, VariantIdx, Variants};\n \n use super::{\n     alloc_range, mir_assign_valid_types, AllocId, AllocRef, AllocRefMut, CheckInAllocMsg,"}, {"sha": "1e96581c392d25e31d1d688494f0a865eddc8c1a", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n-use rustc_target::abi::LayoutOf;\n+use rustc_middle::ty::layout::LayoutOf;\n \n use super::{InterpCx, Machine};\n "}, {"sha": "1c8e5e9e23c3caefab88cd27f834bd67c5b8db48", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -2,13 +2,13 @@ use std::borrow::Cow;\n use std::convert::TryFrom;\n \n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc_middle::ty::layout::{self, TyAndLayout};\n+use rustc_middle::ty::layout::{self, LayoutOf as _, TyAndLayout};\n use rustc_middle::ty::Instance;\n use rustc_middle::{\n     mir,\n     ty::{self, Ty},\n };\n-use rustc_target::abi::{self, LayoutOf as _};\n+use rustc_target::abi;\n use rustc_target::spec::abi::Abi;\n \n use super::{"}, {"sha": "03e0a8e7901d94c86f2077dd026e207e1aaea148", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -12,11 +12,9 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_middle::mir::interpret::InterpError;\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::TyAndLayout;\n+use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::abi::{\n-    Abi, LayoutOf, Scalar as ScalarAbi, Size, VariantIdx, Variants, WrappingRange,\n-};\n+use rustc_target::abi::{Abi, Scalar as ScalarAbi, Size, VariantIdx, Variants, WrappingRange};\n \n use std::hash::Hash;\n "}, {"sha": "71c07be4c6d8de860919f58a7e51f38cc4d19e95", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -17,14 +17,14 @@ use rustc_middle::mir::{\n     Location, Operand, Place, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement,\n     StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n };\n-use rustc_middle::ty::layout::{LayoutError, TyAndLayout};\n+use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{\n     self, ConstInt, ConstKind, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n-use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TargetDataLayout};\n+use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n \n@@ -330,12 +330,12 @@ struct ConstPropagator<'mir, 'tcx> {\n     source_info: Option<SourceInfo>,\n }\n \n-impl<'mir, 'tcx> LayoutOf<'tcx> for ConstPropagator<'mir, 'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n+impl<'mir, 'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'mir, 'tcx> {\n+    type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        self.tcx.layout_of(self.param_env.and(ty))\n+    #[inline]\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, _: Span, _: Ty<'tcx>) -> LayoutError<'tcx> {\n+        err\n     }\n }\n "}, {"sha": "aa78fcfb4b373cc42066634ba885784ac7acb44b", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -3,10 +3,11 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::ItemKind;\n-use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, TyAndLayout};\n+use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n-use rustc_target::abi::{HasDataLayout, LayoutOf, TargetDataLayout};\n+use rustc_span::Span;\n+use rustc_target::abi::{HasDataLayout, TargetDataLayout};\n \n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n@@ -113,12 +114,16 @@ struct UnwrapLayoutCx<'tcx> {\n     param_env: ParamEnv<'tcx>,\n }\n \n-impl LayoutOf<'tcx> for UnwrapLayoutCx<'tcx> {\n-    type Ty = Ty<'tcx>;\n-    type TyAndLayout = TyAndLayout<'tcx>;\n+impl LayoutOfHelpers<'tcx> for UnwrapLayoutCx<'tcx> {\n+    type LayoutOfResult = TyAndLayout<'tcx>;\n \n-    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        self.tcx.layout_of(self.param_env.and(ty)).unwrap()\n+    fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n+        span_bug!(\n+            span,\n+            \"`#[rustc_layout(..)]` test resulted in `layout_of({}) = Err({})`\",\n+            ty,\n+            err\n+        );\n     }\n }\n "}, {"sha": "b0ecd117dd20e89b4016bcb6660cfc9cb19e9e9a", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -13,7 +13,6 @@ use std::str::FromStr;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::json::{Json, ToJson};\n-use rustc_span::Span;\n \n pub mod call;\n \n@@ -1173,46 +1172,6 @@ impl<'a, Ty> Deref for TyAndLayout<'a, Ty> {\n     }\n }\n \n-/// Trait for context types that can compute layouts of things.\n-pub trait LayoutOf<'a>: Sized {\n-    type Ty: TyAbiInterface<'a, Self>;\n-    type TyAndLayout: MaybeResult<TyAndLayout<'a, Self::Ty>>;\n-\n-    fn layout_of(&self, ty: Self::Ty) -> Self::TyAndLayout;\n-    fn spanned_layout_of(&self, ty: Self::Ty, _span: Span) -> Self::TyAndLayout {\n-        self.layout_of(ty)\n-    }\n-}\n-\n-pub trait MaybeResult<T> {\n-    type Error;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self;\n-    fn to_result(self) -> Result<T, Self::Error>;\n-}\n-\n-impl<T> MaybeResult<T> for T {\n-    type Error = !;\n-\n-    fn from(Ok(x): Result<T, Self::Error>) -> Self {\n-        x\n-    }\n-    fn to_result(self) -> Result<T, Self::Error> {\n-        Ok(self)\n-    }\n-}\n-\n-impl<T, E> MaybeResult<T> for Result<T, E> {\n-    type Error = E;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self {\n-        x\n-    }\n-    fn to_result(self) -> Result<T, Self::Error> {\n-        self\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum PointerKind {\n     /// Most general case, we know no restrictions to tell LLVM."}, {"sha": "5dcf1824ef0b7e3d387d0507f8f987a0ccf011df", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -3,9 +3,9 @@ use clippy_utils::is_hir_ty_cfg_dependant;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, GenericArg};\n use rustc_lint::LateContext;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::sym;\n-use rustc_target::abi::LayoutOf;\n \n use super::CAST_PTR_ALIGNMENT;\n "}, {"sha": "1ba241d37761675150a31b80e2e30cc4dc76023e", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -5,11 +5,11 @@ use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKi\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n-use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n@@ -171,7 +171,8 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                 // skip if there is a `self` parameter binding to a type\n                 // that contains `Self` (i.e.: `self: Box<Self>`), see #4804\n                 if let Some(trait_self_ty) = self.trait_self_ty {\n-                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(self.cx.tcx, cmt.place.ty(), trait_self_ty) {\n+                    if map.name(cmt.hir_id) == kw::SelfLower && contains_ty(self.cx.tcx, cmt.place.ty(), trait_self_ty)\n+                    {\n                         return;\n                     }\n                 }"}, {"sha": "b1f70b30c12cf1c1605b09ac48cf9fc9891fad3e", "filename": "src/tools/clippy/clippy_lints/src/invalid_upcast_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -2,10 +2,10 @@ use std::cmp::Ordering;\n \n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, IntTy, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n-use rustc_target::abi::LayoutOf;\n \n use clippy_utils::comparisons::Rel;\n use clippy_utils::consts::{constant, Constant};"}, {"sha": "10281496c11cbb4e65887c6ea5e17447d17a2ab3", "filename": "src/tools/clippy/clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -1,10 +1,10 @@\n-use crate::rustc_target::abi::LayoutOf;\n use clippy_utils::diagnostics::span_lint_and_then;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{BytePos, Pos, Span};"}, {"sha": "e4b8e7546283b460f6f40da388ae8b3c51453d3c", "filename": "src/tools/clippy/clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -6,8 +6,8 @@ use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_target::abi::LayoutOf;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "bbb6c1f902ce077e7fcfc6f168021f71fb356cde", "filename": "src/tools/clippy/clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -4,11 +4,10 @@ use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::rustc_target::abi::LayoutOf;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for local arrays that may be too large."}, {"sha": "7ecafa1f3ba5b90d4766902cd46f04adb729f22f", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_target::abi::LayoutOf;\n+use rustc_middle::ty::layout::LayoutOf;\n \n pub fn check(\n     cx: &LateContext<'_>,"}, {"sha": "6229b9608b3cbe5aad07d6316c374f70e30f2cff", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -13,10 +13,10 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, Impl, ItemKind, MutTy, Mutability, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span};\n-use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_target::spec::Target;\n "}, {"sha": "e7e2016d8f2f3de1eb7c9809111036b3cf5b36f8", "filename": "src/tools/clippy/clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -5,9 +5,9 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, GenericArg, QPath, TyKind};\n use rustc_lint::LateContext;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::TypeFoldable;\n use rustc_span::symbol::sym;\n-use rustc_target::abi::LayoutOf;\n use rustc_typeck::hir_ty_to_ty;\n \n use super::VEC_BOX;"}, {"sha": "e76d5f81c9640403a75295f93c55bdb7ba6c78fa", "filename": "src/tools/clippy/clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -1,4 +1,3 @@\n-use crate::rustc_target::abi::LayoutOf;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher;\n@@ -8,6 +7,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;"}, {"sha": "8e1cd655b6111c5cb1a66d4abac0fa13deaee7b1", "filename": "src/tools/clippy/clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2750baf53aaa60db95f10759f6cf9463dc5a6bd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=e2750baf53aaa60db95f10759f6cf9463dc5a6bd", "patch": "@@ -3,10 +3,10 @@ use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::layout::LayoutOf as _;\n use rustc_middle::ty::{Adt, Ty, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n-use rustc_target::abi::LayoutOf as _;\n use rustc_typeck::hir_ty_to_ty;\n \n declare_clippy_lint! {"}]}