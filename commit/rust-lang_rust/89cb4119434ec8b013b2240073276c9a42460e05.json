{"sha": "89cb4119434ec8b013b2240073276c9a42460e05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Y2I0MTE5NDM0ZWM4YjAxM2IyMjQwMDczMjc2YzlhNDI0NjBlMDU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-09-28T15:20:37Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-09-29T12:57:35Z"}, "message": "rustc/infer: use unwrap_or(_else) where applicable", "tree": {"sha": "bf114c6c0e1334933931bf34aa27b83c9d5ecdc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf114c6c0e1334933931bf34aa27b83c9d5ecdc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89cb4119434ec8b013b2240073276c9a42460e05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89cb4119434ec8b013b2240073276c9a42460e05", "html_url": "https://github.com/rust-lang/rust/commit/89cb4119434ec8b013b2240073276c9a42460e05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89cb4119434ec8b013b2240073276c9a42460e05/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c222479c6feb036e5e5198e068aa9824d855ffa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c222479c6feb036e5e5198e068aa9824d855ffa4", "html_url": "https://github.com/rust-lang/rust/commit/c222479c6feb036e5e5198e068aa9824d855ffa4"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "810d3231acdcd397178a75e53de2d2b3b015afab", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89cb4119434ec8b013b2240073276c9a42460e05/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cb4119434ec8b013b2240073276c9a42460e05/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=89cb4119434ec8b013b2240073276c9a42460e05", "patch": "@@ -135,10 +135,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         // Select everything, returning errors.\n-        let true_errors = match fulfill_cx.select_where_possible(self) {\n-            Ok(()) => vec![],\n-            Err(errors) => errors,\n-        };\n+        let true_errors = fulfill_cx.select_where_possible(self).err().unwrap_or_else(Vec::new);\n         debug!(\"true_errors = {:#?}\", true_errors);\n \n         if !true_errors.is_empty() {\n@@ -148,10 +145,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         }\n \n         // Anything left unselected *now* must be an ambiguity.\n-        let ambig_errors = match fulfill_cx.select_all_or_error(self) {\n-            Ok(()) => vec![],\n-            Err(errors) => errors,\n-        };\n+        let ambig_errors = fulfill_cx.select_all_or_error(self).err().unwrap_or_else(Vec::new);\n         debug!(\"ambig_errors = {:#?}\", ambig_errors);\n \n         let region_obligations = self.take_registered_region_obligations();\n@@ -448,10 +442,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 .variables\n                 .iter()\n                 .enumerate()\n-                .map(|(index, info)| match opt_values[CanonicalVar::new(index)] {\n-                    Some(k) => k,\n-                    None => self.fresh_inference_var_for_canonical_var(cause.span, *info),\n-                })\n+                .map(|(index, info)| opt_values[CanonicalVar::new(index)].unwrap_or_else(||\n+                    self.fresh_inference_var_for_canonical_var(cause.span, *info)\n+                ))\n                 .collect(),\n         };\n "}, {"sha": "f605da584b28f678a360ff9a8c949dbee4404989", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/89cb4119434ec8b013b2240073276c9a42460e05/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89cb4119434ec8b013b2240073276c9a42460e05/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=89cb4119434ec8b013b2240073276c9a42460e05", "patch": "@@ -187,12 +187,9 @@ impl<'a, 'gcx, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n             None => bug!(\"no node_id found for node: {:?}\", n),\n         };\n         let name = || format!(\"node_{}\", node_id);\n-        match dot::Id::new(name()) {\n-            Ok(id) => id,\n-            Err(_) => {\n-                bug!(\"failed to create graphviz node identified by {}\", name());\n-            }\n-        }\n+\n+        dot::Id::new(name()).unwrap_or_else(|_|\n+            bug!(\"failed to create graphviz node identified by {}\", name()))\n     }\n     fn node_label(&self, n: &Node) -> dot::LabelText {\n         match *n {"}]}