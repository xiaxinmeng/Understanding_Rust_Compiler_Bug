{"sha": "4bf76d6745046af32d0c0f33484aa15bab1c0e2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZjc2ZDY3NDUwNDZhZjMyZDBjMGYzMzQ4NGFhMTViYWIxYzBlMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-05T05:04:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-05T05:04:27Z"}, "message": "Auto merge of #48709 - tinaun:issue48703, r=nikomatsakis\n\nremove erroneous error message when checking impl trait params\n\nfixes #48703", "tree": {"sha": "fa594e44c769405d473b862acdc4a18f8b01bb9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa594e44c769405d473b862acdc4a18f8b01bb9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bf76d6745046af32d0c0f33484aa15bab1c0e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bf76d6745046af32d0c0f33484aa15bab1c0e2c", "html_url": "https://github.com/rust-lang/rust/commit/4bf76d6745046af32d0c0f33484aa15bab1c0e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1fa867f2d053102c2f0effc4b81424bf97866b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1fa867f2d053102c2f0effc4b81424bf97866b", "html_url": "https://github.com/rust-lang/rust/commit/3b1fa867f2d053102c2f0effc4b81424bf97866b"}, {"sha": "97e0dc330fb4dfc3fc5161fbba1f0b4193d80bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e0dc330fb4dfc3fc5161fbba1f0b4193d80bc9", "html_url": "https://github.com/rust-lang/rust/commit/97e0dc330fb4dfc3fc5161fbba1f0b4193d80bc9"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "3705c53a76fa0ab99562d752c741d16fa8c4f59b", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=4bf76d6745046af32d0c0f33484aa15bab1c0e2c", "patch": "@@ -310,7 +310,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // variables.\n         let method_generics = self.tcx.generics_of(pick.item.def_id);\n         let mut fn_segment = Some((segment, method_generics));\n-        self.fcx.check_path_parameter_count(self.span, &mut fn_segment, true);\n+        self.fcx.check_path_parameter_count(self.span, &mut fn_segment, true, false);\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method."}, {"sha": "27e0f6ad6ddd954b5bae581dc98994c11e673208", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4bf76d6745046af32d0c0f33484aa15bab1c0e2c", "patch": "@@ -4809,9 +4809,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // variables. If the user provided some types, we may still need\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n-        self.check_path_parameter_count(span, &mut type_segment, false);\n-        self.check_path_parameter_count(span, &mut fn_segment, false);\n-        self.check_impl_trait(span, &mut fn_segment);\n+        let supress_mismatch = self.check_impl_trait(span, &mut fn_segment);\n+        self.check_path_parameter_count(span, &mut type_segment, false, supress_mismatch);\n+        self.check_path_parameter_count(span, &mut fn_segment, false, supress_mismatch);\n \n         let (fn_start, has_self) = match (type_segment, fn_segment) {\n             (_, Some((_, generics))) => {\n@@ -4964,7 +4964,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn check_path_parameter_count(&self,\n                                   span: Span,\n                                   segment: &mut Option<(&hir::PathSegment, &ty::Generics)>,\n-                                  is_method_call: bool) {\n+                                  is_method_call: bool,\n+                                  supress_mismatch_error: bool) {\n         let (lifetimes, types, infer_types, bindings) = segment.map_or(\n             (&[][..], &[][..], true, &[][..]),\n             |(s, _)| s.parameters.as_ref().map_or(\n@@ -5004,7 +5005,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // type parameters, we force instantiate_value_path to\n             // use inference variables instead of the provided types.\n             *segment = None;\n-        } else if types.len() < required_len && !infer_types {\n+        } else if types.len() < required_len && !infer_types && !supress_mismatch_error {\n             let expected_text = count_type_params(required_len);\n             let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0089,\n@@ -5071,10 +5072,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Report error if there is an explicit type parameter when using `impl Trait`.\n     fn check_impl_trait(&self,\n                         span: Span,\n-                        segment: &mut Option<(&hir::PathSegment, &ty::Generics)>) {\n+                        segment: &mut Option<(&hir::PathSegment, &ty::Generics)>)\n+                        -> bool {\n         use hir::SyntheticTyParamKind::*;\n \n-        segment.map(|(path_segment, generics)| {\n+        let segment = segment.map(|(path_segment, generics)| {\n             let explicit = !path_segment.infer_types;\n             let impl_trait = generics.types.iter()\n                                            .any(|ty_param| {\n@@ -5095,7 +5097,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 err.emit();\n             }\n+\n+            impl_trait\n         });\n+\n+        segment.unwrap_or(false)\n     }\n \n     // Resolves `typ` by a single level if `typ` is a type variable."}, {"sha": "e017b37b7b733106c00b684680b1146d17696db3", "filename": "src/test/ui/impl-trait/universal-issue-48703.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-issue-48703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-issue-48703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-issue-48703.rs?ref=4bf76d6745046af32d0c0f33484aa15bab1c0e2c", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(universal_impl_trait)]\n+\n+use std::fmt::Debug;\n+\n+fn foo<T>(x: impl Debug) { }\n+\n+fn main() {\n+    foo::<String>('a'); //~ ERROR cannot provide explicit type parameters\n+}"}, {"sha": "ea509684f9efc0f2a07625da4a0f32c6d394ab94", "filename": "src/test/ui/impl-trait/universal-issue-48703.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-issue-48703.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bf76d6745046af32d0c0f33484aa15bab1c0e2c/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-issue-48703.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-issue-48703.stderr?ref=4bf76d6745046af32d0c0f33484aa15bab1c0e2c", "patch": "@@ -0,0 +1,9 @@\n+error[E0632]: cannot provide explicit type parameters when `impl Trait` is used in argument position.\n+  --> $DIR/universal-issue-48703.rs:18:5\n+   |\n+LL |     foo::<String>('a'); //~ ERROR cannot provide explicit type parameters\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0632`."}]}