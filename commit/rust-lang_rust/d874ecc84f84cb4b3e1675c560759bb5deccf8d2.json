{"sha": "d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NzRlY2M4NGY4NGNiNGIzZTE2NzVjNTYwNzU5YmI1ZGVjY2Y4ZDI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-26T03:58:42Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-29T18:09:14Z"}, "message": "Use correct edition when parsing `:pat` matchers\n\nAs described in issue #85708, we currently do not properly decode\n`SyntaxContext::root()` and `ExpnId::root()` from foreign crates. As a\nresult, when we decode a span from a foreign crate with\n`SyntaxContext::root()`, we end up up considering it to have the edition\nof the *current* crate, instead of the foreign crate where it was\noriginally created.\n\nA full fix for this issue will be a fairly significant undertaking.\nFortunately, it's possible to implement a partial fix, which gives us\nthe correct edition-dependent behavior for `:pat` matchers when the\nmacro is loaded from another crate. Since we have the edition of the\nmacro's defining crate available, we can 'recover' from seeing a\n`SyntaxContext::root()` and use the edition of the macro's defining\ncrate.\n\nAny solution to issue #85708 must reproduce the behavior of this\ntargeted fix - properly preserving a foreign `SyntaxContext::root()`\nmeans (among other things) preserving its edition, which by definition\nis the edition of the foreign crate itself. Therefore, this fix moves us\ncloser to the correct overall solution, and does not expose any new\nincorrect behavior to macros.", "tree": {"sha": "3b32cf49c9b5500ff64bb12e3f21baee2e1fb1a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b32cf49c9b5500ff64bb12e3f21baee2e1fb1a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCyg0sACgkQtAh+UQ6Y\nsWTtFA/+LPEghkomGkZb5wfenmMSwVA+wDaPn1t+4whXYXx/X+FMc/8b7gtSw19R\nh+E5FB4xNnHH1skdp/gq/UDBsCc3GH3vqSuaolNOBP/wBrFeiV2OeJjSXCOkmMqr\nfTBAXqwa3qpNV+U/M0bLlYizkz+sA7vMqFIgY5hI7g124egmtfbCM+eEZsKFm8um\nFUKAt9GwSpeIbknoOtAu1KQhjVXgFmGbT6keU0vcvyL7F4JZ1GjsQM16vg+87NtO\nrUYkdG+awPTWLk+oosZIuXUtCIlI3+TAAC2XOD4wA4tpi1+/ZG/giVj8omiTa9qF\nyPdKCGrZ1Hqa/tZS5VR10h8WEVll35LKyL29X+vj9yvlcZu1IF3gljX/NZgqdoN4\nQq9KldvygANRnyj6FXZ2EG+R2zmJX1Ib9uQ/HYPtRa7+exNwd00jy6JRGFal341v\n6bpatsEFzC8SgK7bLFt6h+WQaRAcmvKsPzDG7FhQ/eSsc6nrU+mXsEvVl+JJSEOJ\nwHm0ErdbeJZs/gbB+AR9tF1jNhrQdTpDkrmtPCFEyAzmJGb4JjXLE13L+LCz21m4\nFN6cNtl2JYeK7JhVaSd9nm8S82rf7Uoe4D5f3LtA4MN5pUvaNyCpaO2zdwvVSBjq\nTnECy7jdtuoHGbBCYj55VWbNXAVpuDckffOCOk8MAzIztivTiOc=\n=rRXQ\n-----END PGP SIGNATURE-----", "payload": "tree 3b32cf49c9b5500ff64bb12e3f21baee2e1fb1a4\nparent ff2c947c00f867b9f012e28ba88cecfbe556f904\nauthor Aaron Hill <aa1ronham@gmail.com> 1622001522 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1622311754 -0500\n\nUse correct edition when parsing `:pat` matchers\n\nAs described in issue #85708, we currently do not properly decode\n`SyntaxContext::root()` and `ExpnId::root()` from foreign crates. As a\nresult, when we decode a span from a foreign crate with\n`SyntaxContext::root()`, we end up up considering it to have the edition\nof the *current* crate, instead of the foreign crate where it was\noriginally created.\n\nA full fix for this issue will be a fairly significant undertaking.\nFortunately, it's possible to implement a partial fix, which gives us\nthe correct edition-dependent behavior for `:pat` matchers when the\nmacro is loaded from another crate. Since we have the edition of the\nmacro's defining crate available, we can 'recover' from seeing a\n`SyntaxContext::root()` and use the edition of the macro's defining\ncrate.\n\nAny solution to issue #85708 must reproduce the behavior of this\ntargeted fix - properly preserving a foreign `SyntaxContext::root()`\nmeans (among other things) preserving its edition, which by definition\nis the edition of the foreign crate itself. Therefore, this fix moves us\ncloser to the correct overall solution, and does not expose any new\nincorrect behavior to macros.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "html_url": "https://github.com/rust-lang/rust/commit/d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2c947c00f867b9f012e28ba88cecfbe556f904", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2c947c00f867b9f012e28ba88cecfbe556f904", "html_url": "https://github.com/rust-lang/rust/commit/ff2c947c00f867b9f012e28ba88cecfbe556f904"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "6608573d720a84a9fb2a558c5925185d4d566bbd", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "patch": "@@ -467,6 +467,7 @@ pub fn compile_declarative_macro(\n                             &sess.parse_sess,\n                             def.id,\n                             features,\n+                            edition,\n                         )\n                         .pop()\n                         .unwrap();\n@@ -492,6 +493,7 @@ pub fn compile_declarative_macro(\n                             &sess.parse_sess,\n                             def.id,\n                             features,\n+                            edition,\n                         )\n                         .pop()\n                         .unwrap();"}, {"sha": "fb7479eafc86f5e155640393e1efd8891f4c5873", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "patch": "@@ -9,7 +9,8 @@ use rustc_feature::Features;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, Ident};\n \n-use rustc_span::Span;\n+use rustc_span::edition::Edition;\n+use rustc_span::{Span, SyntaxContext};\n \n use rustc_data_structures::sync::Lrc;\n \n@@ -32,6 +33,7 @@ const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n /// - `sess`: the parsing session. Any errors will be emitted to this session.\n /// - `node_id`: the NodeId of the macro we are parsing.\n /// - `features`: language features so we can do feature gating.\n+/// - `edition`: the edition of the crate defining the macro\n ///\n /// # Returns\n ///\n@@ -42,6 +44,7 @@ pub(super) fn parse(\n     sess: &ParseSess,\n     node_id: NodeId,\n     features: &Features,\n+    edition: Edition,\n ) -> Vec<TokenTree> {\n     // Will contain the final collection of `self::TokenTree`\n     let mut result = Vec::new();\n@@ -52,7 +55,7 @@ pub(super) fn parse(\n     while let Some(tree) = trees.next() {\n         // Given the parsed tree, if there is a metavar and we are expecting matchers, actually\n         // parse out the matcher (i.e., in `$id:ident` this would parse the `:` and `ident`).\n-        let tree = parse_tree(tree, &mut trees, expect_matchers, sess, node_id, features);\n+        let tree = parse_tree(tree, &mut trees, expect_matchers, sess, node_id, features, edition);\n         match tree {\n             TokenTree::MetaVar(start_sp, ident) if expect_matchers => {\n                 let span = match trees.next() {\n@@ -64,7 +67,19 @@ pub(super) fn parse(\n \n                                     let kind =\n                                         token::NonterminalKind::from_symbol(frag.name, || {\n-                                            span.edition()\n+                                            // FIXME(#85708) - once we properly decode a foreign\n+                                            // crate's `SyntaxContext::root`, then we can replace\n+                                            // this with just `span.edition()`. A\n+                                            // `SyntaxContext::root()` from the current crate will\n+                                            // have the edition of the current crate, and a\n+                                            // `SyntaxxContext::root()` from a foreign crate will\n+                                            // have the edition of that crate (which we manually\n+                                            // retrieve via the `edition` parameter).\n+                                            if span.ctxt() == SyntaxContext::root() {\n+                                                edition\n+                                            } else {\n+                                                span.edition()\n+                                            }\n                                         })\n                                         .unwrap_or_else(\n                                             || {\n@@ -117,13 +132,15 @@ pub(super) fn parse(\n /// - `expect_matchers`: same as for `parse` (see above).\n /// - `sess`: the parsing session. Any errors will be emitted to this session.\n /// - `features`: language features so we can do feature gating.\n+/// - `edition` - the edition of the crate defining the macro\n fn parse_tree(\n     tree: tokenstream::TokenTree,\n     outer_trees: &mut impl Iterator<Item = tokenstream::TokenTree>,\n     expect_matchers: bool,\n     sess: &ParseSess,\n     node_id: NodeId,\n     features: &Features,\n+    edition: Edition,\n ) -> TokenTree {\n     // Depending on what `tree` is, we could be parsing different parts of a macro\n     match tree {\n@@ -151,7 +168,7 @@ fn parse_tree(\n                         sess.span_diagnostic.span_err(span.entire(), &msg);\n                     }\n                     // Parse the contents of the sequence itself\n-                    let sequence = parse(tts, expect_matchers, sess, node_id, features);\n+                    let sequence = parse(tts, expect_matchers, sess, node_id, features, edition);\n                     // Get the Kleene operator and optional separator\n                     let (separator, kleene) =\n                         parse_sep_and_kleene_op(&mut trees, span.entire(), sess);\n@@ -204,7 +221,7 @@ fn parse_tree(\n             span,\n             Lrc::new(Delimited {\n                 delim,\n-                tts: parse(tts, expect_matchers, sess, node_id, features),\n+                tts: parse(tts, expect_matchers, sess, node_id, features, edition),\n             }),\n         ),\n     }"}, {"sha": "26d4c96d52433c296a823aadbf5c5614542b3abe", "filename": "src/test/ui/macros/auxiliary/foreign-crate-macro-pat.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fforeign-crate-macro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fforeign-crate-macro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fforeign-crate-macro-pat.rs?ref=d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+\n+#[macro_export]\n+macro_rules! custom_matches {\n+    ($expression:expr, $( $pattern:pat )|+ $( if $guard: expr )? $(,)?) => {\n+        match $expression {\n+            $( $pattern )|+ $( if $guard )? => true,\n+            _ => false\n+        }\n+    }\n+}"}, {"sha": "ed67142ce3de2b20fd9af49a2630e7b89350dfe4", "filename": "src/test/ui/macros/cross-crate-pat-span.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/src%2Ftest%2Fui%2Fmacros%2Fcross-crate-pat-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/src%2Ftest%2Fui%2Fmacros%2Fcross-crate-pat-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fcross-crate-pat-span.rs?ref=d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "patch": "@@ -0,0 +1,12 @@\n+// edition:2021\n+// check-pass\n+// aux-build: foreign-crate-macro-pat.rs\n+//\n+// Tests that the edition of the foreign crate is used\n+// when determining the behavior of the `:pat` matcher.\n+\n+extern crate foreign_crate_macro_pat;\n+\n+fn main() {\n+    let _b = foreign_crate_macro_pat::custom_matches!(b'3', b'0' ..= b'9');\n+}"}, {"sha": "53f134c265fd75c2b6615f574875894b163153ef", "filename": "src/test/ui/macros/issue-84429-matches-edition.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/src%2Ftest%2Fui%2Fmacros%2Fissue-84429-matches-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d874ecc84f84cb4b3e1675c560759bb5deccf8d2/src%2Ftest%2Fui%2Fmacros%2Fissue-84429-matches-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-84429-matches-edition.rs?ref=d874ecc84f84cb4b3e1675c560759bb5deccf8d2", "patch": "@@ -0,0 +1,9 @@\n+// edition:2021\n+// check-pass\n+//\n+// Regression test for issue #84429\n+// Tests that we can properly invoke `matches!` from a 2021-edition crate.\n+\n+fn main() {\n+    let _b = matches!(b'3', b'0' ..= b'9');\n+}"}]}