{"sha": "78908f2e0963ceed461e9961020226d3e12c5978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OTA4ZjJlMDk2M2NlZWQ0NjFlOTk2MTAyMDIyNmQzZTEyYzU5Nzg=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-09-03T09:56:08Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-09-04T12:12:04Z"}, "message": "Override `StepBy::{try_fold, try_rfold}`", "tree": {"sha": "6a86dc2d75007734d9555a9b5e3db074afc196db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a86dc2d75007734d9555a9b5e3db074afc196db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78908f2e0963ceed461e9961020226d3e12c5978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78908f2e0963ceed461e9961020226d3e12c5978", "html_url": "https://github.com/rust-lang/rust/commit/78908f2e0963ceed461e9961020226d3e12c5978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78908f2e0963ceed461e9961020226d3e12c5978/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d760df5aea483aae041c9a241e7acacf48f75035", "url": "https://api.github.com/repos/rust-lang/rust/commits/d760df5aea483aae041c9a241e7acacf48f75035", "html_url": "https://github.com/rust-lang/rust/commit/d760df5aea483aae041c9a241e7acacf48f75035"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "7c9dde81a48fb498b7ef0423a875ea94f44a5a3a", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/78908f2e0963ceed461e9961020226d3e12c5978/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78908f2e0963ceed461e9961020226d3e12c5978/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=78908f2e0963ceed461e9961020226d3e12c5978", "patch": "@@ -5,7 +5,7 @@ use crate::usize;\n use crate::intrinsics;\n \n use super::{Iterator, DoubleEndedIterator, ExactSizeIterator, FusedIterator, TrustedLen};\n-use super::LoopState;\n+use super::{LoopState, from_fn};\n \n mod chain;\n mod flatten;\n@@ -541,6 +541,26 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n             self.iter.nth(nth - 1);\n         }\n     }\n+\n+    fn try_fold<Acc, F, R>(&mut self, mut acc: Acc, mut f: F) -> R\n+    where\n+        F: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        #[inline]\n+        fn nth<I: Iterator>(iter: &mut I, step: usize) -> impl FnMut() -> Option<I::Item> + '_ {\n+            move || iter.nth(step)\n+        }\n+\n+        if self.first_take {\n+            self.first_take = false;\n+            match self.iter.next() {\n+                None => return Try::from_ok(acc),\n+                Some(x) => acc = f(acc, x)?,\n+            }\n+        }\n+        from_fn(nth(&mut self.iter, self.step)).try_fold(acc, f)\n+    }\n }\n \n impl<I> StepBy<I> where I: ExactSizeIterator {\n@@ -574,6 +594,28 @@ impl<I> DoubleEndedIterator for StepBy<I> where I: DoubleEndedIterator + ExactSi\n             .saturating_add(self.next_back_index());\n         self.iter.nth_back(n)\n     }\n+\n+    fn try_rfold<Acc, F, R>(&mut self, init: Acc, mut f: F) -> R\n+    where\n+        F: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        #[inline]\n+        fn nth_back<I: DoubleEndedIterator>(\n+            iter: &mut I,\n+            step: usize,\n+        ) -> impl FnMut() -> Option<I::Item> + '_ {\n+            move || iter.nth_back(step)\n+        }\n+\n+        match self.next_back() {\n+            None => Try::from_ok(init),\n+            Some(x) => {\n+                let acc = f(init, x)?;\n+                from_fn(nth_back(&mut self.iter, self.step)).try_fold(acc, f)\n+            }\n+        }\n+    }\n }\n \n // StepBy can only make the iterator shorter, so the len will still fit."}, {"sha": "f52899b500a3a872c5f8ed9b29c6366c9f6531e4", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/78908f2e0963ceed461e9961020226d3e12c5978/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78908f2e0963ceed461e9961020226d3e12c5978/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=78908f2e0963ceed461e9961020226d3e12c5978", "patch": "@@ -329,6 +329,23 @@ fn test_iterator_step_by_nth_overflow() {\n     assert_eq!(it.0, (usize::MAX as Bigger) * 1);\n }\n \n+#[test]\n+fn test_iterator_step_by_nth_try_fold() {\n+    let mut it = (0..).step_by(10);\n+    assert_eq!(it.try_fold(0, i8::checked_add), None);\n+    assert_eq!(it.next(), Some(60));\n+    assert_eq!(it.try_fold(0, i8::checked_add), None);\n+    assert_eq!(it.next(), Some(90));\n+\n+    let mut it = (100..).step_by(10);\n+    assert_eq!(it.try_fold(50, i8::checked_add), None);\n+    assert_eq!(it.next(), Some(110));\n+\n+    let mut it = (100..=100).step_by(10);\n+    assert_eq!(it.next(), Some(100));\n+    assert_eq!(it.try_fold(0, i8::checked_add), Some(0));\n+}\n+\n #[test]\n fn test_iterator_step_by_nth_back() {\n     let mut it = (0..16).step_by(5);\n@@ -354,6 +371,24 @@ fn test_iterator_step_by_nth_back() {\n     assert_eq!(it().nth_back(42), None);\n }\n \n+#[test]\n+fn test_iterator_step_by_nth_try_rfold() {\n+    let mut it = (0..100).step_by(10);\n+    assert_eq!(it.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(it.next_back(), Some(70));\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(it.next_back(), Some(30));\n+\n+    let mut it = (0..100).step_by(10);\n+    assert_eq!(it.try_rfold(50, i8::checked_add), None);\n+    assert_eq!(it.next_back(), Some(80));\n+\n+    let mut it = (100..=100).step_by(10);\n+    assert_eq!(it.next_back(), Some(100));\n+    assert_eq!(it.try_fold(0, i8::checked_add), Some(0));\n+}\n+\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {"}]}