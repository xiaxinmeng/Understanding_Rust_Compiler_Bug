{"sha": "c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZWYwNGJlNTU4OTkwMWU3ZjNkOTQyOGViZThmMWViMmJkY2E3ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-05T22:51:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-05T22:51:38Z"}, "message": "auto merge of #15319 : alexcrichton/rust/no-crate-id, r=brson\n\nThis is an implementation of [RFC 35](https://github.com/rust-lang/rfcs/blob/master/active/0035-remove-crate-id.md).\r\n\r\nThe summary for this PR is the same as that of the RFC, with one addendum:\r\n\r\n\r\n* Removes the `#[crate_id]` attribute and knowledge of versions from rustc.\r\n* Added a `#[crate_name]` attribute similar to the old `#[crate_id]` attribute\r\n* Output filenames no longer have versions or hashes\r\n* Symbols no longer have versions (they still have hashes)\r\n* A new flag, `--extern`, is used to override searching for external crates\r\n* A new flag, `-C metadata=foo`, used when hashing symbols\r\n* [added] An old flag, `--crate-name`, was re purposed to specify the crate name from the command line.\r\n\r\nI tried to maintain backwards compatibility wherever possible (with warnings being printed). If I missed anywhere, however, please let me know!\r\n\r\n[breaking-change]\r\n\r\nCloses #14468\r\nCloses #14469\r\nCloses #14470\r\nCloses #14471", "tree": {"sha": "38550cd6dbb5daa27969c3f05b3e46c01ba4f2d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38550cd6dbb5daa27969c3f05b3e46c01ba4f2d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "html_url": "https://github.com/rust-lang/rust/commit/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ef5cf1310a7b1e31d0993885d867a6804597ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ef5cf1310a7b1e31d0993885d867a6804597ad", "html_url": "https://github.com/rust-lang/rust/commit/b8ef5cf1310a7b1e31d0993885d867a6804597ad"}, {"sha": "56f71015515490b65b5fbb46ff0bbc7d7af82450", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f71015515490b65b5fbb46ff0bbc7d7af82450", "html_url": "https://github.com/rust-lang/rust/commit/56f71015515490b65b5fbb46ff0bbc7d7af82450"}], "stats": {"total": 1726, "additions": 1009, "deletions": 717}, "files": [{"sha": "c01410a591b7c91dd7b646e5a2a4620a14fc95a9", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -16,6 +16,8 @@\n CFG_RELEASE_NUM=0.11.0\n CFG_RELEASE_LABEL=\n \n+CFG_FILENAME_EXTRA=4e7c5e5c\n+\n ifndef CFG_ENABLE_NIGHTLY\n # This is the normal version string\n CFG_RELEASE=$(CFG_RELEASE_NUM)$(CFG_RELEASE_LABEL)"}, {"sha": "b7a570e327511fb639e7437ba118b6ed53b04990", "filename": "mk/target.mk", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -44,6 +44,13 @@ $(foreach host,$(CFG_HOST),\t\t\t\t\t\t    \\\n    $(foreach crate,$(CRATES),\t\t\t\t\t\t    \\\n     $(eval $(call RUST_CRATE_FULLDEPS,$(stage),$(target),$(host),$(crate)))))))\n \n+# NOTE: after a stage0 snap this should be just EXTRA_FILENAME, not with a stage\n+# bound\n+EXTRA_FILENAME_0 =\n+EXTRA_FILENAME_1 = -C extra-filename=-$(CFG_FILENAME_EXTRA)\n+EXTRA_FILENAME_2 = -C extra-filename=-$(CFG_FILENAME_EXTRA)\n+EXTRA_FILENAME_3 = -C extra-filename=-$(CFG_FILENAME_EXTRA)\n+\n # RUST_TARGET_STAGE_N template: This defines how target artifacts are built\n # for all stage/target architecture combinations. This is one giant rule which\n # works as follows:\n@@ -85,7 +92,9 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4):\t\t\t\t    \\\n \t\t-L \"$$(LLVM_LIBDIR_$(2))\" \\\n \t\t-L \"$$(dir $$(LLVM_STDCPP_LOCATION_$(2)))\" \\\n \t\t$$(RUSTFLAGS_$(4)) \\\n-\t\t--out-dir $$(@D) $$<\n+\t\t--out-dir $$(@D) \\\n+\t\t$$(EXTRA_FILENAME_$(1)) \\\n+\t\t$$<\n \t@touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES,\\\n \t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))"}, {"sha": "3e403d122ac475856de0e364bb9f286f7236f147", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -60,7 +60,8 @@\n //! by libc malloc/free.  The `libc_heap` module is defined to be wired up to\n //! the system malloc/free.\n \n-#![crate_id = \"alloc#0.11.0\"]\n+#![crate_id = \"alloc#0.11.0\"] // NOTE: remove after a stage0 snap\n+#![crate_name = \"alloc\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n@@ -70,6 +71,7 @@\n \n #![no_std]\n #![feature(lang_items, phase, unsafe_destructor)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[phase(plugin, link)]\n extern crate core;"}, {"sha": "51eacd3fb4e84ff9833f028a04bed75bd7557688", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -20,6 +20,7 @@\n //! more complex, slower Arena which can hold objects of any type.\n \n #![crate_id = \"arena#0.11.0\"]\n+#![crate_name = \"arena\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -30,6 +31,7 @@\n \n #![feature(unsafe_destructor)]\n #![allow(missing_doc)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n use std::cell::{Cell, RefCell};\n use std::cmp;"}, {"sha": "d9a62cd9acd76da42ccd59b626f95914858fd783", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -12,7 +12,8 @@\n  * Collection types.\n  */\n \n-#![crate_id = \"collections#0.11.0\"]\n+#![crate_id = \"collections#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"collections\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![license = \"MIT/ASL2\"]\n@@ -24,6 +25,7 @@\n #![feature(macro_rules, managed_boxes, default_type_params, phase, globs)]\n #![feature(unsafe_destructor)]\n #![no_std]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[phase(plugin, link)] extern crate core;\n extern crate alloc;"}, {"sha": "6966c96b30ba950facd75543d9d1e4f2686a3294", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -48,6 +48,7 @@\n // separate crate, libcoretest, to avoid bizarre issues.\n \n #![crate_id = \"core#0.11.0\"]\n+#![crate_name = \"core\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n@@ -60,6 +61,7 @@\n #![feature(globs, intrinsics, lang_items, macro_rules, managed_boxes, phase)]\n #![feature(simd, unsafe_destructor)]\n #![deny(missing_doc)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n mod macros;\n "}, {"sha": "e5424fccbed59e902f11905dbec7424a6e35f70a", "filename": "src/libdebug/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibdebug%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibdebug%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -16,7 +16,8 @@\n //! Additionally, it is not guaranteed that functionality such as reflection\n //! will persist into the future.\n \n-#![crate_id = \"debug#0.11.0\"]\n+#![crate_id = \"debug#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"debug\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n@@ -27,6 +28,7 @@\n #![experimental]\n #![feature(managed_boxes, macro_rules)]\n #![allow(experimental)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n pub mod fmt;\n pub mod reflect;"}, {"sha": "923aab5e032457e9a94e690bb1acce129ef36841", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -18,7 +18,8 @@ Simple [DEFLATE][def]-based compression. This is a wrapper around the\n \n */\n \n-#![crate_id = \"flate#0.11.0\"]\n+#![crate_id = \"flate#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"flate\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -27,6 +28,7 @@ Simple [DEFLATE][def]-based compression. This is a wrapper around the\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n #![feature(phase)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n "}, {"sha": "c32f27adf65937aa2950f23da17f5ddfb31f0d69", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -14,12 +14,14 @@\n //! Parsing does not happen at runtime: structures of `std::fmt::rt` are\n //! generated instead.\n \n-#![crate_id = \"fmt_macros#0.11.0\"]\n+#![crate_id = \"fmt_macros#0.11.0\"] // NOTE: remove after stage0c\n+#![crate_name = \"fmt_macros\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![feature(macro_rules, globs)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n use std::char;\n use std::str;"}, {"sha": "55e55ba7e51bc4de40f90d373ef8cc0baf57d222", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -39,14 +39,16 @@ fn main() {\n \n */\n \n-#![crate_id = \"fourcc#0.11.0\"]\n+#![crate_id = \"fourcc#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"fourcc\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #![feature(plugin_registrar, managed_boxes)]\n "}, {"sha": "790df13c1ffbf57a30f2c82031d79f784aed7ee7", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -76,7 +76,8 @@\n //! }\n //! ~~~\n \n-#![crate_id = \"getopts#0.11.0\"]\n+#![crate_id = \"getopts#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"getopts\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -87,6 +88,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(globs, phase)]\n #![deny(missing_doc)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;"}, {"sha": "6aa48dc748ec0d0bf01c162985b6d1e0a628b7ea", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -23,7 +23,8 @@\n  * `glob`/`fnmatch` functions.\n  */\n \n-#![crate_id = \"glob#0.11.0\"]\n+#![crate_id = \"glob#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"glob\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -32,6 +33,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n use std::cell::Cell;\n use std::{cmp, os, path};"}, {"sha": "52990bae55433f31368b515c6a2e2de599bb647d", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -266,16 +266,16 @@ pub fn main() {\n \n */\n \n-#![crate_id = \"graphviz#0.11.0\"]\n+#![crate_id = \"graphviz#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"graphviz\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n-\n-#![experimental]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n use std::io;\n use std::str;"}, {"sha": "357644aed03f9a37a24a5e27e6034fb9f327c00f", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -197,7 +197,8 @@\n //! pool.shutdown();\n //! ```\n \n-#![crate_id = \"green#0.11.0\"]\n+#![crate_id = \"green#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"green\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n@@ -208,10 +209,9 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n // NB this does *not* include globs, please keep it that way.\n-#![feature(macro_rules, phase)]\n-#![allow(visible_private_types)]\n-#![allow(deprecated)]\n-#![feature(default_type_params)]\n+#![feature(macro_rules, phase, default_type_params)]\n+#![allow(visible_private_types, deprecated)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n #[cfg(test)] extern crate rustuv;"}, {"sha": "17c71c6365e1ba6008a51cb8aeb652f33a76ccc8", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -36,7 +36,8 @@ fn main() {\n \n */\n \n-#![crate_id = \"hexfloat#0.11.0\"]\n+#![crate_id = \"hexfloat#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"hexfloat\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -45,6 +46,7 @@ fn main() {\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n #![feature(plugin_registrar, managed_boxes)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "e0dd57f6ae92f99e4e4679a44b91c79bc4cb9a25", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n #![feature(globs)]\n-#![crate_id = \"libc#0.11.0\"]\n+#![crate_id = \"libc#0.11.0\"] // NOTE: remove after a stage0 snap\n+#![crate_name = \"libc\"]\n #![experimental]\n #![no_std] // we don't need std, and we can't have std, since it doesn't exist\n            // yet. std depends on us.\n@@ -18,6 +19,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n /*!\n * Bindings for the C standard library and other platform libraries"}, {"sha": "33d1cc87b7312c09b2ac8b8844267c4b96659588", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -105,7 +105,8 @@ if logging is disabled, none of the components of the log will be executed.\n \n */\n \n-#![crate_id = \"log#0.11.0\"]\n+#![crate_id = \"log#0.11.0\"] // NOTE: Remove after stage0\n+#![crate_name = \"log\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n@@ -114,7 +115,7 @@ if logging is disabled, none of the components of the log will be executed.\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n #![feature(macro_rules)]\n #![deny(missing_doc)]\n "}, {"sha": "85813a7dde38d1dfd55edea977019916ad9c2a33", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -46,7 +46,8 @@\n //! }\n //! ```\n \n-#![crate_id = \"native#0.11.0\"]\n+#![crate_id = \"native#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"native\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n@@ -57,6 +58,7 @@\n \n #![deny(unused_result, unused_must_use)]\n #![allow(non_camel_case_types, deprecated)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n #![feature(default_type_params, lang_items)]\n \n // NB this crate explicitly does *not* allow glob imports, please seriously"}, {"sha": "06e69c132bde859a69911be6703eba585ff5629d", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -44,7 +44,8 @@\n \n #![feature(macro_rules)]\n \n-#![crate_id = \"num#0.11.0\"]\n+#![crate_id = \"num#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"num\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -53,7 +54,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n-\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n #![allow(deprecated)] // from_str_radix\n \n extern crate rand;"}, {"sha": "ac0f59225e8e775a860331639705082b43cb803c", "filename": "src/librand/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -16,7 +16,8 @@\n //! is not recommended to use this library directly, but rather the official\n //! interface through `std::rand`.\n \n-#![crate_id = \"rand#0.11.0\"]\n+#![crate_id = \"rand#0.11.0\"] // NOTE: remove after a stage0 snap\n+#![crate_name = \"rand\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n@@ -25,6 +26,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules, phase, globs)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n #![no_std]\n #![experimental]\n "}, {"sha": "2275f9639d130989d088f93c87a7565a7b99c56b", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -353,7 +353,8 @@\n //! characters in the search text and `m` is the number of instructions in a\n //! compiled expression.\n \n-#![crate_id = \"regex#0.11.0\"]\n+#![crate_id = \"regex#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"regex\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![experimental]\n@@ -364,6 +365,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(macro_rules, phase)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n #![deny(missing_doc)]\n \n #[cfg(test)]"}, {"sha": "c15b232d8e1323592920dc149c7e65252a9481e7", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -11,13 +11,15 @@\n //! This crate provides the `regex!` macro. Its use is documented in the\n //! `regex` crate.\n \n-#![crate_id = \"regex_macros#0.11.0\"]\n+#![crate_id = \"regex_macros#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"regex_macros\"]\n #![crate_type = \"dylib\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #![feature(plugin_registrar, managed_boxes, quote)]\n "}, {"sha": "7b0fd3d6366fab37803eb5da8563fe4357372e04", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -20,13 +20,15 @@\n //! necessary. It is an error to include this library when also linking with\n //! the system libc library.\n \n-#![crate_id = \"rlibc#0.11.0\"]\n+#![crate_id = \"rlibc#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"rlibc\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n #![feature(intrinsics)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #![no_std]\n #![experimental]"}, {"sha": "f1856850701b27995c107e26572475ebca369de2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 81, "deletions": 58, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -11,15 +11,15 @@\n use back::archive::{Archive, METADATA_FILENAME};\n use back::rpath;\n use back::svh::Svh;\n-use driver::driver::{CrateTranslation, OutputFilenames};\n+use driver::driver::{CrateTranslation, OutputFilenames, Input, FileInput};\n use driver::config::NoDebugInfo;\n use driver::session::Session;\n use driver::config;\n use lib::llvm::llvm;\n use lib::llvm::ModuleRef;\n use lib;\n use metadata::common::LinkMeta;\n-use metadata::{encoder, cstore, filesearch, csearch, loader};\n+use metadata::{encoder, cstore, filesearch, csearch, loader, creader};\n use middle::trans::context::CrateContext;\n use middle::trans::common::gensym_name;\n use middle::ty;\n@@ -40,9 +40,8 @@ use syntax::abi;\n use syntax::ast;\n use syntax::ast_map::{PathElem, PathElems, PathName};\n use syntax::ast_map;\n-use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::crateid::CrateId;\n+use syntax::codemap::Span;\n use syntax::parse::token;\n \n #[deriving(Clone, PartialEq, PartialOrd, Ord, Eq)]\n@@ -546,32 +545,69 @@ pub mod write {\n  *    system linkers understand.\n  */\n \n-// FIXME (#9639): This needs to handle non-utf8 `out_filestem` values\n-pub fn find_crate_id(attrs: &[ast::Attribute], out_filestem: &str) -> CrateId {\n-    match attr::find_crateid(attrs) {\n-        None => from_str(out_filestem).unwrap_or_else(|| {\n-            let mut s = out_filestem.chars().filter(|c| c.is_XID_continue());\n-            from_str(s.collect::<String>().as_slice())\n-                .or(from_str(\"rust-out\")).unwrap()\n-        }),\n-        Some(s) => s,\n+pub fn find_crate_name(sess: Option<&Session>,\n+                       attrs: &[ast::Attribute],\n+                       input: &Input) -> String {\n+    use syntax::crateid::CrateId;\n+\n+    let validate = |s: String, span: Option<Span>| {\n+        creader::validate_crate_name(sess, s.as_slice(), span);\n+        s\n+    };\n+\n+    match sess {\n+        Some(sess) => {\n+            match sess.opts.crate_name {\n+                Some(ref s) => return validate(s.clone(), None),\n+                None => {}\n+            }\n+        }\n+        None => {}\n+    }\n+\n+    let crate_name = attrs.iter().find(|at| at.check_name(\"crate_name\"))\n+                          .and_then(|at| at.value_str().map(|s| (at, s)));\n+    match crate_name {\n+        Some((attr, s)) => return validate(s.get().to_string(), Some(attr.span)),\n+        None => {}\n+    }\n+    let crate_id = attrs.iter().find(|at| at.check_name(\"crate_id\"))\n+                        .and_then(|at| at.value_str().map(|s| (at, s)))\n+                        .and_then(|(at, s)| {\n+                            from_str::<CrateId>(s.get()).map(|id| (at, id))\n+                        });\n+    match crate_id {\n+        Some((attr, id)) => {\n+            match sess {\n+                Some(sess) => {\n+                    sess.span_warn(attr.span, \"the #[crate_id] attribute is \\\n+                                               deprecated for the \\\n+                                               #[crate_name] attribute\");\n+                }\n+                None => {}\n+            }\n+            return validate(id.name, Some(attr.span))\n+        }\n+        None => {}\n+    }\n+    match *input {\n+        FileInput(ref path) => {\n+            match path.filestem_str() {\n+                Some(s) => return validate(s.to_string(), None),\n+                None => {}\n+            }\n+        }\n+        _ => {}\n     }\n-}\n \n-pub fn crate_id_hash(crate_id: &CrateId) -> String {\n-    // This calculates CMH as defined above. Note that we don't use the path of\n-    // the crate id in the hash because lookups are only done by (name/vers),\n-    // not by path.\n-    let mut s = Sha256::new();\n-    s.input_str(crate_id.short_name_with_version().as_slice());\n-    truncated_hash_result(&mut s).as_slice().slice_to(8).to_string()\n+    \"rust-out\".to_string()\n }\n \n-// FIXME (#9639): This needs to handle non-utf8 `out_filestem` values\n-pub fn build_link_meta(krate: &ast::Crate, out_filestem: &str) -> LinkMeta {\n+pub fn build_link_meta(sess: &Session, krate: &ast::Crate,\n+                       name: String) -> LinkMeta {\n     let r = LinkMeta {\n-        crateid: find_crate_id(krate.attrs.as_slice(), out_filestem),\n-        crate_hash: Svh::calculate(krate),\n+        crate_name: name,\n+        crate_hash: Svh::calculate(sess, krate),\n     };\n     info!(\"{}\", r);\n     return r;\n@@ -594,9 +630,12 @@ fn symbol_hash(tcx: &ty::ctxt,\n     // to be independent of one another in the crate.\n \n     symbol_hasher.reset();\n-    symbol_hasher.input_str(link_meta.crateid.name.as_slice());\n+    symbol_hasher.input_str(link_meta.crate_name.as_slice());\n     symbol_hasher.input_str(\"-\");\n     symbol_hasher.input_str(link_meta.crate_hash.as_str());\n+    for meta in tcx.sess.crate_metadata.borrow().iter() {\n+        symbol_hasher.input_str(meta.as_slice());\n+    }\n     symbol_hasher.input_str(\"-\");\n     symbol_hasher.input_str(encoder::encoded_ty(tcx, t).as_slice());\n     // Prefix with 'h' so that it never blends into adjacent digits\n@@ -666,8 +705,7 @@ pub fn sanitize(s: &str) -> String {\n }\n \n pub fn mangle<PI: Iterator<PathElem>>(mut path: PI,\n-                                      hash: Option<&str>,\n-                                      vers: Option<&str>) -> String {\n+                                      hash: Option<&str>) -> String {\n     // Follow C++ namespace-mangling style, see\n     // http://en.wikipedia.org/wiki/Name_mangling for more info.\n     //\n@@ -698,25 +736,13 @@ pub fn mangle<PI: Iterator<PathElem>>(mut path: PI,\n         Some(s) => push(&mut n, s),\n         None => {}\n     }\n-    match vers {\n-        Some(s) => push(&mut n, s),\n-        None => {}\n-    }\n \n     n.push_char('E'); // End name-sequence.\n     n\n }\n \n-pub fn exported_name(path: PathElems, hash: &str, vers: &str) -> String {\n-    // The version will get mangled to have a leading '_', but it makes more\n-    // sense to lead with a 'v' b/c this is a version...\n-    let vers = if vers.len() > 0 && !char::is_XID_start(vers.char_at(0)) {\n-        format!(\"v{}\", vers)\n-    } else {\n-        vers.to_string()\n-    };\n-\n-    mangle(path, Some(hash), Some(vers.as_slice()))\n+pub fn exported_name(path: PathElems, hash: &str) -> String {\n+    mangle(path, Some(hash))\n }\n \n pub fn mangle_exported_name(ccx: &CrateContext, path: PathElems,\n@@ -741,9 +767,7 @@ pub fn mangle_exported_name(ccx: &CrateContext, path: PathElems,\n     hash.push_char(EXTRA_CHARS.as_bytes()[extra2] as char);\n     hash.push_char(EXTRA_CHARS.as_bytes()[extra3] as char);\n \n-    exported_name(path,\n-                  hash.as_slice(),\n-                  ccx.link_meta.crateid.version_or_default())\n+    exported_name(path, hash.as_slice())\n }\n \n pub fn mangle_internal_name_by_type_and_seq(ccx: &CrateContext,\n@@ -753,15 +777,11 @@ pub fn mangle_internal_name_by_type_and_seq(ccx: &CrateContext,\n     let path = [PathName(token::intern(s.as_slice())),\n                 gensym_name(name)];\n     let hash = get_symbol_hash(ccx, t);\n-    mangle(ast_map::Values(path.iter()), Some(hash.as_slice()), None)\n+    mangle(ast_map::Values(path.iter()), Some(hash.as_slice()))\n }\n \n pub fn mangle_internal_name_by_path_and_seq(path: PathElems, flav: &str) -> String {\n-    mangle(path.chain(Some(gensym_name(flav)).move_iter()), None, None)\n-}\n-\n-pub fn output_lib_filename(id: &CrateId) -> String {\n-    format!(\"{}-{}-{}\", id.name, crate_id_hash(id), id.version_or_default())\n+    mangle(path.chain(Some(gensym_name(flav)).move_iter()), None)\n }\n \n pub fn get_cc_prog(sess: &Session) -> String {\n@@ -803,14 +823,15 @@ fn remove(sess: &Session, path: &Path) {\n pub fn link_binary(sess: &Session,\n                    trans: &CrateTranslation,\n                    outputs: &OutputFilenames,\n-                   id: &CrateId) -> Vec<Path> {\n+                   crate_name: &str) -> Vec<Path> {\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n         if invalid_output_for_target(sess, crate_type) {\n             sess.bug(format!(\"invalid output type `{}` for target os `{}`\",\n                              crate_type, sess.targ_cfg.os).as_slice());\n         }\n-        let out_file = link_binary_output(sess, trans, crate_type, outputs, id);\n+        let out_file = link_binary_output(sess, trans, crate_type, outputs,\n+                                          crate_name);\n         out_filenames.push(out_file);\n     }\n \n@@ -859,9 +880,11 @@ fn is_writeable(p: &Path) -> bool {\n     }\n }\n \n-pub fn filename_for_input(sess: &Session, crate_type: config::CrateType,\n-                          id: &CrateId, out_filename: &Path) -> Path {\n-    let libname = output_lib_filename(id);\n+pub fn filename_for_input(sess: &Session,\n+                          crate_type: config::CrateType,\n+                          name: &str,\n+                          out_filename: &Path) -> Path {\n+    let libname = format!(\"{}{}\", name, sess.opts.cg.extra_filename);\n     match crate_type {\n         config::CrateTypeRlib => {\n             out_filename.with_filename(format!(\"lib{}.rlib\", libname))\n@@ -891,13 +914,13 @@ fn link_binary_output(sess: &Session,\n                       trans: &CrateTranslation,\n                       crate_type: config::CrateType,\n                       outputs: &OutputFilenames,\n-                      id: &CrateId) -> Path {\n+                      crate_name: &str) -> Path {\n     let obj_filename = outputs.temp_path(OutputTypeObject);\n     let out_filename = match outputs.single_output_file {\n         Some(ref file) => file.clone(),\n         None => {\n             let out_filename = outputs.path(OutputTypeExe);\n-            filename_for_input(sess, crate_type, id, &out_filename)\n+            filename_for_input(sess, crate_type, crate_name, &out_filename)\n         }\n     };\n "}, {"sha": "24b9ff970aa220a513447ba38ade1517da2b4917", "filename": "src/librustc/back/svh.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fback%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fback%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fsvh.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -53,6 +53,8 @@ use std::iter::range_step;\n use syntax::ast;\n use syntax::visit;\n \n+use driver::session::Session;\n+\n #[deriving(Clone, PartialEq)]\n pub struct Svh {\n     hash: String,\n@@ -68,7 +70,7 @@ impl Svh {\n         self.hash.as_slice()\n     }\n \n-    pub fn calculate(krate: &ast::Crate) -> Svh {\n+    pub fn calculate(sess: &Session, krate: &ast::Crate) -> Svh {\n         // FIXME (#14132): This is better than it used to be, but it still not\n         // ideal. We now attempt to hash only the relevant portions of the\n         // Crate AST as well as the top-level crate attributes. (However,\n@@ -80,6 +82,10 @@ impl Svh {\n         //        avoid collisions.\n         let mut state = SipState::new();\n \n+        for data in sess.opts.cg.metadata.iter() {\n+            data.hash(&mut state);\n+        }\n+\n         {\n             let mut visit = svh_visitor::make(&mut state);\n             visit::walk_crate(&mut visit, krate, ());"}, {"sha": "e91dfd9587b0ab697c511857ad05b0ede02a8045", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -11,7 +11,7 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command line options.\n \n-use driver::early_error;\n+use driver::{early_error, early_warn};\n use driver::driver;\n use driver::session::Session;\n \n@@ -30,7 +30,7 @@ use syntax::diagnostic::{ColorConfig, Auto, Always, Never};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n \n-use std::collections::HashSet;\n+use std::collections::{HashSet, HashMap};\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use lib::llvm::llvm;\n@@ -91,10 +91,12 @@ pub struct Options {\n     pub debugging_opts: u64,\n     /// Whether to write dependency files. It's (enabled, optional filename).\n     pub write_dependency_info: (bool, Option<Path>),\n-    /// Crate id-related things to maybe print. It's (crate_id, crate_name, crate_file_name).\n-    pub print_metas: (bool, bool, bool),\n+    /// Crate id-related things to maybe print. It's (crate_name, crate_file_name).\n+    pub print_metas: (bool, bool),\n     pub cg: CodegenOptions,\n     pub color: ColorConfig,\n+    pub externs: HashMap<String, Vec<String>>,\n+    pub crate_name: Option<String>,\n }\n \n /// Some reasonable defaults\n@@ -117,9 +119,11 @@ pub fn basic_options() -> Options {\n         no_analysis: false,\n         debugging_opts: 0,\n         write_dependency_info: (false, None),\n-        print_metas: (false, false, false),\n+        print_metas: (false, false),\n         cg: basic_codegen_options(),\n         color: Auto,\n+        externs: HashMap::new(),\n+        crate_name: None,\n     }\n }\n \n@@ -318,6 +322,10 @@ cgoptions!(\n         \"use an external assembler rather than LLVM's integrated one\"),\n     relocation_model: String = (\"pic\".to_string(), parse_string,\n          \"choose the relocation model to use (llc -relocation-model for details)\"),\n+    metadata: Vec<String> = (Vec::new(), parse_list,\n+         \"metadata to mangle symbol names with\"),\n+    extra_filename: String = (\"\".to_string(), parse_string,\n+         \"extra data to put in each output filename\"),\n )\n \n pub fn build_codegen_options(matches: &getopts::Matches) -> CodegenOptions\n@@ -505,10 +513,12 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n                  \"[bin|lib|rlib|dylib|staticlib]\"),\n         optmulti(\"\", \"emit\", \"Comma separated list of types of output for the compiler to emit\",\n                  \"[asm|bc|ir|obj|link]\"),\n-        optflag(\"\", \"crate-id\", \"Output the crate id and exit\"),\n-        optflag(\"\", \"crate-name\", \"Output the crate name and exit\"),\n-        optflag(\"\", \"crate-file-name\", \"Output the file(s) that would be written if compilation \\\n+        optopt(\"\", \"crate-name\", \"Specify the name of the crate being built\",\n+               \"NAME\"),\n+        optflag(\"\", \"print-crate-name\", \"Output the crate name and exit\"),\n+        optflag(\"\", \"print-file-name\", \"Output the file(s) that would be written if compilation \\\n               continued and exit\"),\n+        optflag(\"\", \"crate-file-name\", \"deprecated in favor of --print-file-name\"),\n         optflag(\"g\",  \"\",  \"Equivalent to --debuginfo=2\"),\n         optopt(\"\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created:\n              0 = no debug info,\n@@ -548,7 +558,9 @@ pub fn optgroups() -> Vec<getopts::OptGroup> {\n         optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize, if output goes to a tty (default);\n             always = always colorize output;\n-            never  = never colorize output\", \"auto|always|never\")\n+            never  = never colorize output\", \"auto|always|never\"),\n+        optmulti(\"\", \"extern\", \"Specify where an external rust library is located\",\n+                 \"PATH\"),\n     )\n }\n \n@@ -709,9 +721,13 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n                                  matches.opt_str(\"dep-info\")\n                                         .map(|p| Path::new(p)));\n \n-    let print_metas = (matches.opt_present(\"crate-id\"),\n-                       matches.opt_present(\"crate-name\"),\n+    let print_metas = (matches.opt_present(\"print-crate-name\"),\n+                       matches.opt_present(\"print-file-name\") ||\n                        matches.opt_present(\"crate-file-name\"));\n+    if matches.opt_present(\"crate-file-name\") {\n+        early_warn(\"the --crate-file-name argument has been renamed to \\\n+                    --print-file-name\");\n+    }\n     let cg = build_codegen_options(matches);\n \n     let color = match matches.opt_str(\"color\").as_ref().map(|s| s.as_slice()) {\n@@ -728,6 +744,23 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     };\n \n+    let mut externs = HashMap::new();\n+    for arg in matches.opt_strs(\"extern\").iter() {\n+        let mut parts = arg.as_slice().splitn('=', 1);\n+        let name = match parts.next() {\n+            Some(s) => s,\n+            None => early_error(\"--extern value must not be empty\"),\n+        };\n+        let location = match parts.next() {\n+            Some(s) => s,\n+            None => early_error(\"--extern value must be of the format `foo=bar`\"),\n+        };\n+        let locs = externs.find_or_insert(name.to_string(), Vec::new());\n+        locs.push(location.to_string());\n+    }\n+\n+    let crate_name = matches.opt_str(\"crate-name\");\n+\n     Options {\n         crate_types: crate_types,\n         gc: gc,\n@@ -748,7 +781,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         write_dependency_info: write_dependency_info,\n         print_metas: print_metas,\n         cg: cg,\n-        color: color\n+        color: color,\n+        externs: externs,\n+        crate_name: crate_name,\n     }\n }\n "}, {"sha": "16605c060170f58e5d6e90247a4d14905e52240a", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -41,7 +41,6 @@ use std::io::MemReader;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::{AttrMetaMethods};\n-use syntax::crateid::CrateId;\n use syntax::parse;\n use syntax::parse::token;\n use syntax::print::{pp, pprust};\n@@ -69,33 +68,33 @@ pub fn compile_input(sess: Session,\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n     let (outputs, trans, sess) = {\n-        let (outputs, expanded_crate, ast_map) = {\n+        let (outputs, expanded_crate, ast_map, id) = {\n             let krate = phase_1_parse_input(&sess, cfg, input);\n             if stop_after_phase_1(&sess) { return; }\n             let outputs = build_output_filenames(input,\n                                                  outdir,\n                                                  output,\n                                                  krate.attrs.as_slice(),\n                                                  &sess);\n-            let id = link::find_crate_id(krate.attrs.as_slice(),\n-                                         outputs.out_filestem.as_slice());\n+            let id = link::find_crate_name(Some(&sess), krate.attrs.as_slice(),\n+                                           input);\n             let (expanded_crate, ast_map)\n-                = match phase_2_configure_and_expand(&sess, krate, &id) {\n+                = match phase_2_configure_and_expand(&sess, krate, id.as_slice()) {\n                     None => return,\n                     Some(p) => p,\n                 };\n \n-            (outputs, expanded_crate, ast_map)\n+            (outputs, expanded_crate, ast_map, id)\n         };\n-        write_out_deps(&sess, input, &outputs, &expanded_crate);\n+        write_out_deps(&sess, input, &outputs, id.as_slice());\n \n         if stop_after_phase_2(&sess) { return; }\n \n-        let analysis = phase_3_run_analysis_passes(sess, &expanded_crate, ast_map);\n+        let analysis = phase_3_run_analysis_passes(sess, &expanded_crate,\n+                                                   ast_map, id);\n         phase_save_analysis(&analysis.ty_cx.sess, &expanded_crate, &analysis, outdir);\n         if stop_after_phase_3(&analysis.ty_cx.sess) { return; }\n-        let (tcx, trans) = phase_4_translate_to_llvm(expanded_crate,\n-                                                     analysis, &outputs);\n+        let (tcx, trans) = phase_4_translate_to_llvm(expanded_crate, analysis);\n \n         // Discard interned strings as they are no longer required.\n         token::get_ident_interner().clear();\n@@ -181,11 +180,14 @@ pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n /// Returns `None` if we're aborting after handling -W help.\n pub fn phase_2_configure_and_expand(sess: &Session,\n                                     mut krate: ast::Crate,\n-                                    crate_id: &CrateId)\n+                                    crate_name: &str)\n                                     -> Option<(ast::Crate, syntax::ast_map::Map)> {\n     let time_passes = sess.time_passes();\n \n-    *sess.crate_types.borrow_mut() = collect_crate_types(sess, krate.attrs.as_slice());\n+    *sess.crate_types.borrow_mut() =\n+        collect_crate_types(sess, krate.attrs.as_slice());\n+    *sess.crate_metadata.borrow_mut() =\n+        collect_crate_metadata(sess, krate.attrs.as_slice());\n \n     time(time_passes, \"gated feature checking\", (), |_|\n          front::feature_gate::check_crate(sess, &krate));\n@@ -247,7 +249,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             }\n             let cfg = syntax::ext::expand::ExpansionConfig {\n                 deriving_hash_type_parameter: sess.features.default_type_params.get(),\n-                crate_id: crate_id.clone(),\n+                crate_name: crate_name.to_string(),\n             };\n             syntax::ext::expand::expand_crate(&sess.parse_sess,\n                                               cfg,\n@@ -286,14 +288,16 @@ pub struct CrateAnalysis {\n     pub public_items: middle::privacy::PublicItems,\n     pub ty_cx: ty::ctxt,\n     pub reachable: NodeSet,\n+    pub name: String,\n }\n \n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes(sess: Session,\n                                    krate: &ast::Crate,\n-                                   ast_map: syntax::ast_map::Map) -> CrateAnalysis {\n+                                   ast_map: syntax::ast_map::Map,\n+                                   name: String) -> CrateAnalysis {\n \n     let time_passes = sess.time_passes();\n \n@@ -398,6 +402,7 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n         exported_items: exported_items,\n         public_items: public_items,\n         reachable: reachable_map,\n+        name: name,\n     }\n }\n \n@@ -426,16 +431,15 @@ pub struct CrateTranslation {\n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n pub fn phase_4_translate_to_llvm(krate: ast::Crate,\n-                                 analysis: CrateAnalysis,\n-                                 outputs: &OutputFilenames) -> (ty::ctxt, CrateTranslation) {\n+                                 analysis: CrateAnalysis) -> (ty::ctxt, CrateTranslation) {\n     let time_passes = analysis.ty_cx.sess.time_passes();\n \n     time(time_passes, \"resolving dependency formats\", (), |_|\n          dependency_format::calculate(&analysis.ty_cx));\n \n     // Option dance to work around the lack of stack once closures.\n     time(time_passes, \"translation\", (krate, analysis), |(krate, analysis)|\n-         trans::base::trans_crate(krate, analysis, outputs))\n+         trans::base::trans_crate(krate, analysis))\n }\n \n /// Run LLVM itself, producing a bitcode file, assembly file or object file\n@@ -473,7 +477,7 @@ pub fn phase_6_link_output(sess: &Session,\n          link::link_binary(sess,\n                            trans,\n                            outputs,\n-                           &trans.link.crateid));\n+                           trans.link.crate_name.as_slice()));\n }\n \n pub fn stop_after_phase_3(sess: &Session) -> bool {\n@@ -514,17 +518,16 @@ pub fn stop_after_phase_5(sess: &Session) -> bool {\n fn write_out_deps(sess: &Session,\n                   input: &Input,\n                   outputs: &OutputFilenames,\n-                  krate: &ast::Crate) {\n-    let id = link::find_crate_id(krate.attrs.as_slice(),\n-                                 outputs.out_filestem.as_slice());\n+                  id: &str) {\n \n     let mut out_filenames = Vec::new();\n     for output_type in sess.opts.output_types.iter() {\n         let file = outputs.path(*output_type);\n         match *output_type {\n             link::OutputTypeExe => {\n                 for output in sess.crate_types.borrow().iter() {\n-                    let p = link::filename_for_input(sess, *output, &id, &file);\n+                    let p = link::filename_for_input(sess, *output,\n+                                                     id, &file);\n                     out_filenames.push(p);\n                 }\n             }\n@@ -649,13 +652,13 @@ pub fn pretty_print_input(sess: Session,\n                           ppm: PpMode,\n                           ofile: Option<Path>) {\n     let krate = phase_1_parse_input(&sess, cfg, input);\n-    let id = link::find_crate_id(krate.attrs.as_slice(),\n-                                 input.filestem().as_slice());\n+    let id = link::find_crate_name(Some(&sess), krate.attrs.as_slice(), input);\n \n     let (krate, ast_map, is_expanded) = match ppm {\n         PpmExpanded | PpmExpandedIdentified | PpmTyped | PpmFlowGraph(_) => {\n             let (krate, ast_map)\n-                = match phase_2_configure_and_expand(&sess, krate, &id) {\n+                = match phase_2_configure_and_expand(&sess, krate,\n+                                                     id.as_slice()) {\n                     None => return,\n                     Some(p) => p,\n                 };\n@@ -695,7 +698,7 @@ pub fn pretty_print_input(sess: Session,\n         }\n         PpmTyped => {\n             let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n-            let analysis = phase_3_run_analysis_passes(sess, &krate, ast_map);\n+            let analysis = phase_3_run_analysis_passes(sess, &krate, ast_map, id);\n             let annotation = TypedAnnotation {\n                 analysis: analysis\n             };\n@@ -728,7 +731,8 @@ pub fn pretty_print_input(sess: Session,\n                     }\n                 }\n             };\n-            let analysis = phase_3_run_analysis_passes(sess, &krate, ast_map);\n+            let analysis = phase_3_run_analysis_passes(sess, &krate,\n+                                                       ast_map, id);\n             print_flowgraph(analysis, block, out)\n         }\n         _ => {\n@@ -845,6 +849,11 @@ pub fn collect_crate_types(session: &Session,\n     }).collect()\n }\n \n+pub fn collect_crate_metadata(session: &Session,\n+                              _attrs: &[ast::Attribute]) -> Vec<String> {\n+    session.opts.cg.metadata.clone()\n+}\n+\n pub struct OutputFilenames {\n     pub out_directory: Path,\n     pub out_filestem: String,\n@@ -893,14 +902,11 @@ pub fn build_output_filenames(input: &Input,\n                 None => Path::new(\".\")\n             };\n \n-            let mut stem = input.filestem();\n-\n-            // If a crateid is present, we use it as the link name\n-            let crateid = attr::find_crateid(attrs);\n-            match crateid {\n-                None => {}\n-                Some(crateid) => stem = crateid.name.to_string(),\n-            }\n+            // If a crate name is present, we use it as the link name\n+           let stem = match attr::find_crate_name(attrs) {\n+                None => input.filestem(),\n+                Some(name) => name.get().to_string(),\n+            };\n             OutputFilenames {\n                 out_directory: dirpath,\n                 out_filestem: stem,"}, {"sha": "807c2590566d91e4f2f7c7cacae554600cc55dd2", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -294,28 +294,26 @@ fn print_crate_info(sess: &Session,\n                     odir: &Option<Path>,\n                     ofile: &Option<Path>)\n                     -> bool {\n-    let (crate_id, crate_name, crate_file_name) = sess.opts.print_metas;\n+    let (crate_name, crate_file_name) = sess.opts.print_metas;\n     // these nasty nested conditions are to avoid doing extra work\n-    if crate_id || crate_name || crate_file_name {\n+    if crate_name || crate_file_name {\n         let attrs = parse_crate_attrs(sess, input);\n         let t_outputs = driver::build_output_filenames(input,\n                                                        odir,\n                                                        ofile,\n                                                        attrs.as_slice(),\n                                                        sess);\n-        let id = link::find_crate_id(attrs.as_slice(),\n-                                     t_outputs.out_filestem.as_slice());\n+        let id = link::find_crate_name(Some(sess), attrs.as_slice(), input);\n \n-        if crate_id {\n-            println!(\"{}\", id.to_str());\n-        }\n         if crate_name {\n-            println!(\"{}\", id.name);\n+            println!(\"{}\", id);\n         }\n         if crate_file_name {\n             let crate_types = driver::collect_crate_types(sess, attrs.as_slice());\n+            let metadata = driver::collect_crate_metadata(sess, attrs.as_slice());\n+            *sess.crate_metadata.borrow_mut() = metadata;\n             for &style in crate_types.iter() {\n-                let fname = link::filename_for_input(sess, style, &id,\n+                let fname = link::filename_for_input(sess, style, id.as_slice(),\n                                                      &t_outputs.with_extension(\"\"));\n                 println!(\"{}\", fname.filename_display());\n             }\n@@ -390,6 +388,11 @@ pub fn early_error(msg: &str) -> ! {\n     fail!(diagnostic::FatalError);\n }\n \n+pub fn early_warn(msg: &str) {\n+    let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto);\n+    emitter.emit(None, msg, diagnostic::Warning);\n+}\n+\n pub fn list_metadata(sess: &Session, path: &Path,\n                      out: &mut io::Writer) -> io::IoResult<()> {\n     metadata::loader::list_file_metadata(sess.targ_cfg.os, path, out)"}, {"sha": "50f61f8f06a5be795e5df197238e7ca01b473876", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -47,6 +47,7 @@ pub struct Session {\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, codemap::Span, String)>>>,\n     pub node_id: Cell<ast::NodeId>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n+    pub crate_metadata: RefCell<Vec<String>>,\n     pub features: front::feature_gate::Features,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n@@ -243,6 +244,7 @@ pub fn build_session_(sopts: config::Options,\n         lints: RefCell::new(NodeMap::new()),\n         node_id: Cell::new(1),\n         crate_types: RefCell::new(Vec::new()),\n+        crate_metadata: RefCell::new(Vec::new()),\n         features: front::feature_gate::Features::new(),\n         recursion_limit: Cell::new(64),\n     };"}, {"sha": "351c9a6b771672c6506c4c95f04d1419a8c71b87", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -25,8 +25,6 @@ use syntax::util::small_vector::SmallVector;\n use std::mem;\n use std::gc::{Gc, GC};\n \n-pub static VERSION: &'static str = \"0.11.0\";\n-\n pub fn maybe_inject_crates_ref(sess: &Session, krate: ast::Crate)\n                                -> ast::Crate {\n     if use_std(&krate) {\n@@ -60,24 +58,12 @@ struct StandardLibraryInjector<'a> {\n     sess: &'a Session,\n }\n \n-pub fn with_version(krate: &str) -> Option<(InternedString, ast::StrStyle)> {\n-    match option_env!(\"CFG_DISABLE_INJECT_STD_VERSION\") {\n-        Some(\"1\") => None,\n-        _ => {\n-            Some((token::intern_and_get_ident(format!(\"{}#{}\",\n-                                                      krate,\n-                                                      VERSION).as_slice()),\n-                  ast::CookedStr))\n-        }\n-    }\n-}\n-\n impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n         let mut vis = vec!(ast::ViewItem {\n             node: ast::ViewItemExternCrate(token::str_to_ident(\"std\"),\n-                                         with_version(\"std\"),\n-                                         ast::DUMMY_NODE_ID),\n+                                           None,\n+                                           ast::DUMMY_NODE_ID),\n             attrs: vec!(\n                 attr::mk_attr_outer(attr::mk_attr_id(), attr::mk_list_item(\n                         InternedString::new(\"phase\"),\n@@ -95,8 +81,8 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n         if use_start(&krate) && any_exe {\n             vis.push(ast::ViewItem {\n                 node: ast::ViewItemExternCrate(token::str_to_ident(\"native\"),\n-                                             with_version(\"native\"),\n-                                             ast::DUMMY_NODE_ID),\n+                                               None,\n+                                               ast::DUMMY_NODE_ID),\n                 attrs: Vec::new(),\n                 vis: ast::Inherited,\n                 span: DUMMY_SP"}, {"sha": "b2c6840ad227292b5f61a6827b192e431190ad50", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -15,7 +15,6 @@\n \n use driver::session::Session;\n use front::config;\n-use front::std_inject::with_version;\n \n use std::cell::RefCell;\n use std::gc::{Gc, GC};\n@@ -154,7 +153,7 @@ fn generate_test_harness(sess: &Session, krate: ast::Crate)\n         ext_cx: ExtCtxt::new(&sess.parse_sess, sess.opts.cfg.clone(),\n                              ExpansionConfig {\n                                  deriving_hash_type_parameter: false,\n-                                 crate_id: from_str(\"test\").unwrap(),\n+                                 crate_name: \"test\".to_string(),\n                              }),\n         path: RefCell::new(Vec::new()),\n         testfns: RefCell::new(Vec::new()),\n@@ -298,9 +297,7 @@ fn mk_std(cx: &TestCtxt) -> ast::ViewItem {\n                                         ast::DUMMY_NODE_ID))),\n          ast::Public)\n     } else {\n-        (ast::ViewItemExternCrate(id_test,\n-                               with_version(\"test\"),\n-                               ast::DUMMY_NODE_ID),\n+        (ast::ViewItemExternCrate(id_test, None, ast::DUMMY_NODE_ID),\n          ast::Inherited)\n     };\n     ast::ViewItem {\n@@ -395,8 +392,8 @@ fn mk_tests(cx: &TestCtxt) -> Gc<ast::Item> {\n }\n \n fn is_test_crate(krate: &ast::Crate) -> bool {\n-    match attr::find_crateid(krate.attrs.as_slice()) {\n-        Some(ref s) if \"test\" == s.name.as_slice() => true,\n+    match attr::find_crate_name(krate.attrs.as_slice()) {\n+        Some(ref s) if \"test\" == s.get().as_slice() => true,\n         _ => false\n     }\n }"}, {"sha": "eee909f59e30453a77faab7955c16141409a254c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -18,7 +18,8 @@ This API is completely unstable and subject to change.\n \n */\n \n-#![crate_id = \"rustc#0.11.0\"]\n+#![crate_id = \"rustc#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"rustc\"]\n #![experimental]\n #![comment = \"The Rust compiler\"]\n #![license = \"MIT/ASL2\"]\n@@ -31,6 +32,7 @@ This API is completely unstable and subject to change.\n #![allow(deprecated)]\n #![feature(macro_rules, globs, struct_variant, managed_boxes, quote)]\n #![feature(default_type_params, phase, unsafe_destructor)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n extern crate arena;\n extern crate debug;"}, {"sha": "cdeecf3a080fe2f26fadafe77e2b673d17bb38fe", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -11,7 +11,6 @@\n #![allow(non_camel_case_types)]\n \n use std::mem;\n-use syntax::crateid::CrateId;\n use back::svh::Svh;\n \n // EBML enum definitions and utils shared by the encoder and decoder\n@@ -71,9 +70,9 @@ pub static tag_crate_deps: uint = 0x18;\n pub static tag_crate_dep: uint = 0x19;\n \n pub static tag_crate_hash: uint = 0x1a;\n-pub static tag_crate_crateid: uint = 0x1b;\n+pub static tag_crate_crate_name: uint = 0x1b;\n \n-pub static tag_crate_dep_crateid: uint = 0x1d;\n+pub static tag_crate_dep_crate_name: uint = 0x1d;\n pub static tag_crate_dep_hash: uint = 0x1e;\n \n pub static tag_mod_impl: uint = 0x1f;\n@@ -215,7 +214,7 @@ pub static tag_items_data_item_stability: uint = 0x92;\n \n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n-    pub crateid: CrateId,\n+    pub crate_name: String,\n     pub crate_hash: Svh,\n }\n "}, {"sha": "29566fb1e7cd1f0cf5d13e3e7d2dd2f1d70d447e", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 77, "deletions": 46, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -12,7 +12,6 @@\n \n //! Validates all used crates and extern libraries and loads their metadata\n \n-use back::link;\n use back::svh::Svh;\n use driver::session::Session;\n use driver::{driver, config};\n@@ -33,7 +32,6 @@ use syntax::codemap::{Span};\n use syntax::diagnostic::SpanHandler;\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n-use syntax::crateid::CrateId;\n use syntax::visit;\n \n struct Env<'a> {\n@@ -69,7 +67,7 @@ impl<'a> visit::Visitor<()> for Env<'a> {\n fn dump_crates(cstore: &CStore) {\n     debug!(\"resolved crates:\");\n     cstore.iter_crate_data_origins(|_, data, opt_source| {\n-        debug!(\"crate_id: {}\", data.crate_id());\n+        debug!(\"  name: {}\", data.name());\n         debug!(\"  cnum: {}\", data.cnum);\n         debug!(\"  hash: {}\", data.hash());\n         opt_source.map(|cs| {\n@@ -83,20 +81,17 @@ fn dump_crates(cstore: &CStore) {\n fn warn_if_multiple_versions(diag: &SpanHandler, cstore: &CStore) {\n     let mut map = HashMap::new();\n     cstore.iter_crate_data(|cnum, data| {\n-        let crateid = data.crate_id();\n-        let key = (crateid.name.clone(), crateid.path.clone());\n-        map.find_or_insert_with(key, |_| Vec::new()).push(cnum);\n+        map.find_or_insert_with(data.name(), |_| Vec::new()).push(cnum);\n     });\n \n-    for ((name, _), dupes) in map.move_iter() {\n+    for (name, dupes) in map.move_iter() {\n         if dupes.len() == 1 { continue }\n         diag.handler().warn(\n-            format!(\"using multiple versions of crate `{}`\",\n-                    name).as_slice());\n+            format!(\"using multiple versions of crate `{}`\", name).as_slice());\n         for dupe in dupes.move_iter() {\n             let data = cstore.get_crate_data(dupe);\n             diag.span_note(data.span, \"used here\");\n-            loader::note_crateid_attr(diag, &data.crate_id());\n+            loader::note_crate_name(diag, data.name().as_slice());\n         }\n     }\n }\n@@ -129,7 +124,7 @@ fn visit_view_item(e: &mut Env, i: &ast::ViewItem) {\n             let (cnum, _, _) = resolve_crate(e,\n                                              &None,\n                                              info.ident.as_slice(),\n-                                             &info.crate_id,\n+                                             info.name.as_slice(),\n                                              None,\n                                              i.span);\n             e.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n@@ -140,7 +135,7 @@ fn visit_view_item(e: &mut Env, i: &ast::ViewItem) {\n \n struct CrateInfo {\n     ident: String,\n-    crate_id: CrateId,\n+    name: String,\n     id: ast::NodeId,\n     should_link: bool,\n }\n@@ -151,22 +146,18 @@ fn extract_crate_info(e: &Env, i: &ast::ViewItem) -> Option<CrateInfo> {\n             let ident = token::get_ident(ident);\n             debug!(\"resolving extern crate stmt. ident: {:?} path_opt: {:?}\",\n                    ident, path_opt);\n-            let crate_id = match *path_opt {\n+            let name = match *path_opt {\n                 Some((ref path_str, _)) => {\n-                    let crateid: Option<CrateId> = from_str(path_str.get());\n-                    match crateid {\n-                        None => {\n-                            e.sess.span_err(i.span, \"malformed crate id\");\n-                            return None\n-                        }\n-                        Some(id) => id\n-                    }\n+                    let name = path_str.get().to_str();\n+                    validate_crate_name(Some(e.sess), name.as_slice(),\n+                                        Some(i.span));\n+                    name\n                 }\n-                None => from_str(ident.get().to_str().as_slice()).unwrap()\n+                None => ident.get().to_str(),\n             };\n             Some(CrateInfo {\n                 ident: ident.get().to_string(),\n-                crate_id: crate_id,\n+                name: name,\n                 id: id,\n                 should_link: should_link(i),\n             })\n@@ -175,6 +166,28 @@ fn extract_crate_info(e: &Env, i: &ast::ViewItem) -> Option<CrateInfo> {\n     }\n }\n \n+pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n+    let err = |s: &str| {\n+        match (sp, sess) {\n+            (_, None) => fail!(\"{}\", s),\n+            (Some(sp), Some(sess)) => sess.span_err(sp, s),\n+            (None, Some(sess)) => sess.err(s),\n+        }\n+    };\n+    if s.len() == 0 {\n+        err(\"crate name must not be empty\");\n+    }\n+    for c in s.chars() {\n+        if c.is_alphanumeric() { continue }\n+        if c == '_' || c == '-' { continue }\n+        err(format!(\"invalid character `{}` in crate name: `{}`\", c, s).as_slice());\n+    }\n+    match sess {\n+        Some(sess) => sess.abort_if_errors(),\n+        None => {}\n+    }\n+}\n+\n fn visit_item(e: &Env, i: &ast::Item) {\n     match i.node {\n         ast::ItemForeignMod(ref fm) => {\n@@ -263,17 +276,36 @@ fn visit_item(e: &Env, i: &ast::Item) {\n     }\n }\n \n-fn existing_match(e: &Env, crate_id: &CrateId,\n+fn existing_match(e: &Env, name: &str,\n                   hash: Option<&Svh>) -> Option<ast::CrateNum> {\n     let mut ret = None;\n     e.sess.cstore.iter_crate_data(|cnum, data| {\n-        let other_id = data.crate_id();\n-        if crate_id.matches(&other_id) {\n-            let other_hash = data.hash();\n-            match hash {\n-                Some(hash) if *hash != other_hash => {}\n-                Some(..) | None => { ret = Some(cnum); }\n+        if data.name().as_slice() != name { return }\n+\n+        match hash {\n+            Some(hash) if *hash == data.hash() => { ret = Some(cnum); return }\n+            Some(..) => return,\n+            None => {}\n+        }\n+\n+        // When the hash is None we're dealing with a top-level dependency in\n+        // which case we may have a specification on the command line for this\n+        // library. Even though an upstream library may have loaded something of\n+        // the same name, we have to make sure it was loaded from the exact same\n+        // location as well.\n+        let source = e.sess.cstore.get_used_crate_source(cnum).unwrap();\n+        let dylib = source.dylib.as_ref().map(|p| p.as_vec());\n+        let rlib = source.rlib.as_ref().map(|p| p.as_vec());\n+        match e.sess.opts.externs.find_equiv(&name) {\n+            Some(locs) => {\n+                let found = locs.iter().any(|l| {\n+                    Some(l.as_bytes()) == dylib || Some(l.as_bytes()) == rlib\n+                });\n+                if found {\n+                    ret = Some(cnum);\n+                }\n             }\n+            None => ret = Some(cnum),\n         }\n     });\n     return ret;\n@@ -282,7 +314,7 @@ fn existing_match(e: &Env, crate_id: &CrateId,\n fn register_crate<'a>(e: &mut Env,\n                   root: &Option<CratePaths>,\n                   ident: &str,\n-                  crate_id: &CrateId,\n+                  name: &str,\n                   span: Span,\n                   lib: loader::Library)\n                         -> (ast::CrateNum, Rc<cstore::crate_metadata>,\n@@ -309,7 +341,7 @@ fn register_crate<'a>(e: &mut Env,\n     let loader::Library{ dylib, rlib, metadata } = lib;\n \n     let cmeta = Rc::new( cstore::crate_metadata {\n-        name: crate_id.name.to_string(),\n+        name: name.to_string(),\n         data: metadata,\n         cnum_map: cnum_map,\n         cnum: cnum,\n@@ -330,30 +362,29 @@ fn register_crate<'a>(e: &mut Env,\n fn resolve_crate<'a>(e: &mut Env,\n                  root: &Option<CratePaths>,\n                  ident: &str,\n-                 crate_id: &CrateId,\n+                 name: &str,\n                  hash: Option<&Svh>,\n                  span: Span)\n                      -> (ast::CrateNum, Rc<cstore::crate_metadata>,\n                          cstore::CrateSource) {\n-    match existing_match(e, crate_id, hash) {\n+    match existing_match(e, name, hash) {\n         None => {\n-            let id_hash = link::crate_id_hash(crate_id);\n             let mut load_ctxt = loader::Context {\n                 sess: e.sess,\n                 span: span,\n                 ident: ident,\n-                crate_id: crate_id,\n-                id_hash: id_hash.as_slice(),\n+                crate_name: name,\n                 hash: hash.map(|a| &*a),\n                 filesearch: e.sess.target_filesearch(),\n                 os: e.sess.targ_cfg.os,\n                 triple: e.sess.targ_cfg.target_strs.target_triple.as_slice(),\n                 root: root,\n                 rejected_via_hash: vec!(),\n                 rejected_via_triple: vec!(),\n+                should_match_name: true,\n             };\n             let library = load_ctxt.load_library_crate();\n-            register_crate(e, root, ident, crate_id, span, library)\n+            register_crate(e, root, ident, name, span, library)\n         }\n         Some(cnum) => (cnum,\n                        e.sess.cstore.get_crate_data(cnum),\n@@ -370,10 +401,10 @@ fn resolve_crate_deps(e: &mut Env,\n     // The map from crate numbers in the crate we're resolving to local crate\n     // numbers\n     decoder::get_crate_deps(cdata).iter().map(|dep| {\n-        debug!(\"resolving dep crate {} hash: `{}`\", dep.crate_id, dep.hash);\n+        debug!(\"resolving dep crate {} hash: `{}`\", dep.name, dep.hash);\n         let (local_cnum, _, _) = resolve_crate(e, root,\n-                                               dep.crate_id.name.as_slice(),\n-                                               &dep.crate_id,\n+                                               dep.name.as_slice(),\n+                                               dep.name.as_slice(),\n                                                Some(&dep.hash),\n                                                span);\n         (dep.cnum, local_cnum)\n@@ -399,21 +430,20 @@ impl<'a> PluginMetadataReader<'a> {\n         let target_triple = self.env.sess.targ_cfg.target_strs.target_triple.as_slice();\n         let is_cross = target_triple != driver::host_triple();\n         let mut should_link = info.should_link && !is_cross;\n-        let id_hash = link::crate_id_hash(&info.crate_id);\n         let os = config::get_os(driver::host_triple()).unwrap();\n         let mut load_ctxt = loader::Context {\n             sess: self.env.sess,\n             span: krate.span,\n             ident: info.ident.as_slice(),\n-            crate_id: &info.crate_id,\n-            id_hash: id_hash.as_slice(),\n+            crate_name: info.name.as_slice(),\n             hash: None,\n             filesearch: self.env.sess.host_filesearch(),\n             triple: driver::host_triple(),\n             os: os,\n             root: &None,\n             rejected_via_hash: vec!(),\n             rejected_via_triple: vec!(),\n+            should_match_name: true,\n         };\n         let library = match load_ctxt.maybe_load_library_crate() {\n             Some (l) => l,\n@@ -448,10 +478,11 @@ impl<'a> PluginMetadataReader<'a> {\n             macros: macros,\n             registrar_symbol: registrar,\n         };\n-        if should_link && existing_match(&self.env, &info.crate_id, None).is_none() {\n+        if should_link && existing_match(&self.env, info.name.as_slice(),\n+                                         None).is_none() {\n             // register crate now to avoid double-reading metadata\n             register_crate(&mut self.env, &None, info.ident.as_slice(),\n-                           &info.crate_id, krate.span, library);\n+                           info.name.as_slice(), krate.span, library);\n         }\n         pc\n     }"}, {"sha": "9d6fd109b48db4edc7b89ff330fb1a13c0bb27cb", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -22,7 +22,6 @@ use std::c_vec::CVec;\n use std::rc::Rc;\n use std::collections::HashMap;\n use syntax::ast;\n-use syntax::crateid::CrateId;\n use syntax::codemap::Span;\n use syntax::parse::token::IdentInterner;\n \n@@ -220,7 +219,7 @@ impl CStore {\n \n impl crate_metadata {\n     pub fn data<'a>(&'a self) -> &'a [u8] { self.data.as_slice() }\n-    pub fn crate_id(&self) -> CrateId { decoder::get_crate_id(self.data()) }\n+    pub fn name(&self) -> String { decoder::get_crate_name(self.data()) }\n     pub fn hash(&self) -> Svh { decoder::get_crate_hash(self.data()) }\n }\n "}, {"sha": "f88c0d34ed83eebdf45eb7ce726e2fdf9e1df497", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -46,7 +46,6 @@ use syntax::parse::token;\n use syntax::print::pprust;\n use syntax::ast;\n use syntax::codemap;\n-use syntax::crateid::CrateId;\n \n pub type Cmd<'a> = &'a crate_metadata;\n \n@@ -1101,7 +1100,7 @@ pub fn get_crate_attributes(data: &[u8]) -> Vec<ast::Attribute> {\n #[deriving(Clone)]\n pub struct CrateDep {\n     pub cnum: ast::CrateNum,\n-    pub crate_id: CrateId,\n+    pub name: String,\n     pub hash: Svh,\n }\n \n@@ -1115,13 +1114,11 @@ pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> {\n         d.as_str_slice().to_string()\n     }\n     reader::tagged_docs(depsdoc, tag_crate_dep, |depdoc| {\n-        let crate_id =\n-            from_str(docstr(depdoc,\n-                            tag_crate_dep_crateid).as_slice()).unwrap();\n+        let name = docstr(depdoc, tag_crate_dep_crate_name);\n         let hash = Svh::new(docstr(depdoc, tag_crate_dep_hash).as_slice());\n         deps.push(CrateDep {\n             cnum: crate_num,\n-            crate_id: crate_id,\n+            name: name,\n             hash: hash,\n         });\n         crate_num += 1;\n@@ -1133,7 +1130,7 @@ pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> {\n fn list_crate_deps(data: &[u8], out: &mut io::Writer) -> io::IoResult<()> {\n     try!(write!(out, \"=External Dependencies=\\n\"));\n     for dep in get_crate_deps(data).iter() {\n-        try!(write!(out, \"{} {}-{}\\n\", dep.cnum, dep.crate_id, dep.hash));\n+        try!(write!(out, \"{} {}-{}\\n\", dep.cnum, dep.name, dep.hash));\n     }\n     try!(write!(out, \"\\n\"));\n     Ok(())\n@@ -1152,23 +1149,21 @@ pub fn get_crate_hash(data: &[u8]) -> Svh {\n     Svh::new(hashdoc.as_str_slice())\n }\n \n-pub fn maybe_get_crate_id(data: &[u8]) -> Option<CrateId> {\n+pub fn maybe_get_crate_name(data: &[u8]) -> Option<String> {\n     let cratedoc = ebml::Doc::new(data);\n-    reader::maybe_get_doc(cratedoc, tag_crate_crateid).map(|doc| {\n-        from_str(doc.as_str_slice()).unwrap()\n+    reader::maybe_get_doc(cratedoc, tag_crate_crate_name).map(|doc| {\n+        doc.as_str_slice().to_string()\n     })\n }\n \n-pub fn get_crate_triple(data: &[u8]) -> String {\n+pub fn get_crate_triple(data: &[u8]) -> Option<String> {\n     let cratedoc = ebml::Doc::new(data);\n     let triple_doc = reader::maybe_get_doc(cratedoc, tag_crate_triple);\n-    triple_doc.expect(\"No triple in crate\").as_str().to_string()\n+    triple_doc.map(|s| s.as_str().to_string())\n }\n \n-pub fn get_crate_id(data: &[u8]) -> CrateId {\n-    let cratedoc = ebml::Doc::new(data);\n-    let hashdoc = reader::get_doc(cratedoc, tag_crate_crateid);\n-    from_str(hashdoc.as_str_slice()).unwrap()\n+pub fn get_crate_name(data: &[u8]) -> String {\n+    maybe_get_crate_name(data).expect(\"no crate name in crate\")\n }\n \n pub fn list_crate_metadata(bytes: &[u8], out: &mut io::Writer) -> io::IoResult<()> {"}, {"sha": "21713672f8149e82ab06ffce43dd4b2fb676e18b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 42, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -44,11 +44,9 @@ use syntax::ast_map::{PathElem, PathElems};\n use syntax::ast_map;\n use syntax::ast_util::*;\n use syntax::ast_util;\n-use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n-use syntax::crateid::CrateId;\n+use syntax::attr::AttrMetaMethods;\n use syntax::diagnostic::SpanHandler;\n-use syntax::parse::token::InternedString;\n use syntax::parse::token::special_idents;\n use syntax::parse::token;\n use syntax::visit::Visitor;\n@@ -1494,44 +1492,15 @@ fn encode_attributes(ebml_w: &mut Encoder, attrs: &[Attribute]) {\n     ebml_w.end_tag();\n }\n \n-// So there's a special crate attribute called 'crate_id' which defines the\n-// metadata that Rust cares about for linking crates. If the user didn't\n-// provide it we will throw it in anyway with a default value.\n-fn synthesize_crate_attrs(ecx: &EncodeContext,\n-                          krate: &Crate) -> Vec<Attribute> {\n-\n-    fn synthesize_crateid_attr(ecx: &EncodeContext) -> Attribute {\n-        assert!(!ecx.link_meta.crateid.name.is_empty());\n-\n-        attr::mk_attr_inner(attr::mk_attr_id(),\n-            attr::mk_name_value_item_str(\n-                InternedString::new(\"crate_id\"),\n-                token::intern_and_get_ident(ecx.link_meta\n-                                               .crateid\n-                                               .to_str()\n-                                               .as_slice())))\n-    }\n-\n-    let mut attrs = Vec::new();\n-    for attr in krate.attrs.iter() {\n-        if !attr.check_name(\"crate_id\") {\n-            attrs.push(*attr);\n-        }\n-    }\n-    attrs.push(synthesize_crateid_attr(ecx));\n-\n-    attrs\n-}\n-\n fn encode_crate_deps(ebml_w: &mut Encoder, cstore: &cstore::CStore) {\n     fn get_ordered_deps(cstore: &cstore::CStore) -> Vec<decoder::CrateDep> {\n         // Pull the cnums and name,vers,hash out of cstore\n         let mut deps = Vec::new();\n         cstore.iter_crate_data(|key, val| {\n             let dep = decoder::CrateDep {\n                 cnum: key,\n-                crate_id: decoder::get_crate_id(val.data()),\n-                hash: decoder::get_crate_hash(val.data())\n+                name: decoder::get_crate_name(val.data()),\n+                hash: decoder::get_crate_hash(val.data()),\n             };\n             deps.push(dep);\n         });\n@@ -1766,8 +1735,8 @@ fn encode_reachable_extern_fns(ecx: &EncodeContext, ebml_w: &mut Encoder) {\n fn encode_crate_dep(ebml_w: &mut Encoder,\n                     dep: decoder::CrateDep) {\n     ebml_w.start_tag(tag_crate_dep);\n-    ebml_w.start_tag(tag_crate_dep_crateid);\n-    ebml_w.writer.write(dep.crate_id.to_str().as_bytes());\n+    ebml_w.start_tag(tag_crate_dep_crate_name);\n+    ebml_w.writer.write(dep.name.as_bytes());\n     ebml_w.end_tag();\n     ebml_w.start_tag(tag_crate_dep_hash);\n     ebml_w.writer.write(dep.hash.as_str().as_bytes());\n@@ -1781,9 +1750,9 @@ fn encode_hash(ebml_w: &mut Encoder, hash: &Svh) {\n     ebml_w.end_tag();\n }\n \n-fn encode_crate_id(ebml_w: &mut Encoder, crate_id: &CrateId) {\n-    ebml_w.start_tag(tag_crate_crateid);\n-    ebml_w.writer.write(crate_id.to_str().as_bytes());\n+fn encode_crate_name(ebml_w: &mut Encoder, crate_name: &str) {\n+    ebml_w.start_tag(tag_crate_crate_name);\n+    ebml_w.writer.write(crate_name.as_bytes());\n     ebml_w.end_tag();\n }\n \n@@ -1880,7 +1849,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n \n     let mut ebml_w = writer::Encoder::new(wr);\n \n-    encode_crate_id(&mut ebml_w, &ecx.link_meta.crateid);\n+    encode_crate_name(&mut ebml_w, ecx.link_meta.crate_name.as_slice());\n     encode_crate_triple(&mut ebml_w,\n                         tcx.sess\n                            .targ_cfg\n@@ -1891,8 +1860,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n     encode_dylib_dependency_formats(&mut ebml_w, &ecx);\n \n     let mut i = ebml_w.writer.tell().unwrap();\n-    let crate_attrs = synthesize_crate_attrs(&ecx, krate);\n-    encode_attributes(&mut ebml_w, crate_attrs.as_slice());\n+    encode_attributes(&mut ebml_w, krate.attrs.as_slice());\n     stats.attr_bytes = ebml_w.writer.tell().unwrap() - i;\n \n     i = ebml_w.writer.tell().unwrap();"}, {"sha": "1b2349a271ed1a6ed6b776b597d83af09388b08a", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 312, "deletions": 87, "changes": 399, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -9,6 +9,208 @@\n // except according to those terms.\n \n //! Finds crate binaries and loads their metadata\n+//!\n+//! Might I be the first to welcome you to a world of platform differences,\n+//! version requirements, dependency graphs, conficting desires, and fun! This\n+//! is the major guts (along with metadata::creader) of the compiler for loading\n+//! crates and resolving dependencies. Let's take a tour!\n+//!\n+//! # The problem\n+//!\n+//! Each invocation of the compiler is immediately concerned with one primary\n+//! problem, to connect a set of crates to resolved crates on the filesystem.\n+//! Concretely speaking, the compiler follows roughly these steps to get here:\n+//!\n+//! 1. Discover a set of `extern crate` statements.\n+//! 2. Transform these directives into crate names. If the directive does not\n+//!    have an explicit name, then the identifier is the name.\n+//! 3. For each of these crate names, find a corresponding crate on the\n+//!    filesystem.\n+//!\n+//! Sounds easy, right? Let's walk into some of the nuances.\n+//!\n+//! ## Transitive Dependencies\n+//!\n+//! Let's say we've got three crates: A, B, and C. A depends on B, and B depends\n+//! on C. When we're compiling A, we primarily need to find and locate B, but we\n+//! also end up needing to find and locate C as well.\n+//!\n+//! The reason for this is that any of B's types could be composed of C's types,\n+//! any function in B could return a type from C, etc. To be able to guarantee\n+//! that we can always typecheck/translate any function, we have to have\n+//! complete knowledge of the whole ecosystem, not just our immediate\n+//! dependencies.\n+//!\n+//! So now as part of the \"find a corresponding crate on the filesystem\" step\n+//! above, this involves also finding all crates for *all upstream\n+//! dependencies*. This includes all dependencies transitively.\n+//!\n+//! ## Rlibs and Dylibs\n+//!\n+//! The compiler has two forms of intermediate dependencies. These are dubbed\n+//! rlibs and dylibs for the static and dynamic variants, respectively. An rlib\n+//! is a rustc-defined file format (currently just an ar archive) while a dylib\n+//! is a platform-defined dynamic library. Each library has a metadata somewhere\n+//! inside of it.\n+//!\n+//! When translating a crate name to a crate on the filesystem, we all of a\n+//! sudden need to take into account both rlibs and dylibs! Linkage later on may\n+//! use either one of these files, as each has their pros/cons. The job of crate\n+//! loading is to discover what's possible by finding all candidates.\n+//!\n+//! Most parts of this loading systems keep the dylib/rlib as just separate\n+//! variables.\n+//!\n+//! ## Where to look?\n+//!\n+//! We can't exactly scan your whole hard drive when looking for dependencies,\n+//! so we need to places to look. Currently the compiler will implicitly add the\n+//! target lib search path ($prefix/lib/rustlib/$target/lib) to any compilation,\n+//! and otherwise all -L flags are added to the search paths.\n+//!\n+//! ## What criterion to select on?\n+//!\n+//! This a pretty tricky area of loading crates. Given a file, how do we know\n+//! whether it's the right crate? Currently, the rules look along these lines:\n+//!\n+//! 1. Does the filename match an rlib/dylib pattern? That is to say, does the\n+//!    filename have the right prefix/suffix?\n+//! 2. Does the filename have the right prefix for the crate name being queried?\n+//!    This is filtering for files like `libfoo*.rlib` and such.\n+//! 3. Is the file an actual rust library? This is done by loading the metadata\n+//!    from the library and making sure it's actually there.\n+//! 4. Does the name in the metadata agree with the name of the library?\n+//! 5. Does the target in the metadata agree with the current target?\n+//! 6. Does the SVH match? (more on this later)\n+//!\n+//! If the file answeres `yes` to all these questions, then the file is\n+//! considered as being *candidate* for being accepted. It is illegal to have\n+//! more than two candidates as the compiler has no method by which to resolve\n+//! this conflict. Additionally, rlib/dylib candidates are considered\n+//! separately.\n+//!\n+//! After all this has happened, we have 1 or two files as candidates. These\n+//! represent the rlib/dylib file found for a library, and they're returned as\n+//! being found.\n+//!\n+//! ### What about versions?\n+//!\n+//! A lot of effort has been put forth to remove versioning from the compiler.\n+//! There have been forays in the past to have versioning baked in, but it was\n+//! largely always deemed insufficient to the point that it was recognized that\n+//! it's probably something the compiler shouldn't do anyway due to its\n+//! complicated nature and the state of the half-baked solutions.\n+//!\n+//! With a departure from versioning, the primary criterion for loading crates\n+//! is just the name of a crate. If we stopped here, it would imply that you\n+//! could never link two crates of the same name from different sources\n+//! together, which is clearly a bad state to be in.\n+//!\n+//! To resolve this problem, we come to the next section!\n+//!\n+//! # Expert Mode\n+//!\n+//! A number of flags have been added to the compiler to solve the \"version\n+//! problem\" in the previous section, as well as generally enabling more\n+//! powerful usage of the crate loading system of the compiler. The goal of\n+//! these flags and options are to enable third-party tools to drive the\n+//! compiler with prior knowledge about how the world should look.\n+//!\n+//! ## The `--extern` flag\n+//!\n+//! The compiler accepts a flag of this form a number of times:\n+//!\n+//! ```notrust\n+//! --extern crate-name=path/to/the/crate.rlib\n+//! ```\n+//!\n+//! This flag is basically the following letter to the compiler:\n+//!\n+//! > Dear rustc,\n+//! >\n+//! > When you are attempting to load the immediate dependency `crate-name`, I\n+//! > would like you too assume that the library is located at\n+//! > `path/to/the/crate.rlib`, and look nowhere else. Also, please do not\n+//! > assume that the path I specified has the name `crate-name`.\n+//!\n+//! This flag basically overrides most matching logic except for validating that\n+//! the file is indeed a rust library. The same `crate-name` can be specified\n+//! twice to specify the rlib/dylib pair.\n+//!\n+//! ## Enabling \"multiple versions\"\n+//!\n+//! This basically boils down to the ability to specify arbitrary packages to\n+//! the compiler. For example, if crate A wanted to use Bv1 and Bv2, then it\n+//! would look something like:\n+//!\n+//! ```ignore\n+//! extern crate b1;\n+//! extern crate b2;\n+//!\n+//! fn main() {}\n+//! ```\n+//!\n+//! and the compiler would be invoked as:\n+//!\n+//! ```notrust\n+//! rustc a.rs --extern b1=path/to/libb1.rlib --extern b2=path/to/libb2.rlib\n+//! ```\n+//!\n+//! In this scenario there are two crates named `b` and the compiler must be\n+//! manually driven to be informed where each crate is.\n+//!\n+//! ## Frobbing symbols\n+//!\n+//! One of the immediate problems with linking the same library together twice\n+//! in the same problem is dealing with duplicate symbols. The primary way to\n+//! deal with this in rustc is to add hashes to the end of each symbol.\n+//!\n+//! In order to force hashes to change between versions of a library, if\n+//! desired, the compiler exposes an option `-C metadata=foo`, which is used to\n+//! initially seed each symbol hash. The string `foo` is prepended to each\n+//! string-to-hash to ensure that symbols change over time.\n+//!\n+//! ## Loading transitive dependencies\n+//!\n+//! Dealing with same-named-but-distinct crates is not just a local problem, but\n+//! one that also needs to be dealt with for transitive dependences. Note that\n+//! in the letter above `--extern` flags only apply to the *local* set of\n+//! dependencies, not the upstream transitive dependencies. Consider this\n+//! dependency graph:\n+//!\n+//! ```notrust\n+//! A.1   A.2\n+//! |     |\n+//! |     |\n+//! B     C\n+//!  \\   /\n+//!   \\ /\n+//!    D\n+//! ```\n+//!\n+//! In this scenario, when we compile `D`, we need to be able to distinctly\n+//! resolve `A.1` and `A.2`, but an `--extern` flag cannot apply to these\n+//! transitive dependencies.\n+//!\n+//! Note that the key idea here is that `B` and `C` are both *already compiled*.\n+//! That is, they have already resolved their dependencies. Due to unrelated\n+//! technical reasons, when a library is compiled, it is only compatible with\n+//! the *exact same* version of the upstream libraries it was compiled against.\n+//! We use the \"Strict Version Hash\" to identify the exact copy of an upstream\n+//! library.\n+//!\n+//! With this knowledge, we know that `B` and `C` will depend on `A` with\n+//! different SVH values, so we crawl the normal `-L` paths looking for\n+//! `liba*.rlib` and filter based on the contained SVH.\n+//!\n+//! In the end, this ends up not needing `--extern` to specify upstream\n+//! transitive dependencies.\n+//!\n+//! # Wrapping up\n+//!\n+//! That's the general overview of loading crates in the compiler, but it's by\n+//! no means all of the necessary details. Take a look at the rest of\n+//! metadata::loader or metadata::creader for all the juicy details!\n \n use back::archive::{ArchiveRO, METADATA_FILENAME};\n use back::svh::Svh;\n@@ -21,8 +223,6 @@ use metadata::filesearch::{FileSearch, FileMatches, FileDoesntMatch};\n use syntax::abi;\n use syntax::codemap::Span;\n use syntax::diagnostic::SpanHandler;\n-use syntax::crateid::CrateId;\n-use syntax::attr::AttrMetaMethods;\n use util::fs;\n \n use std::c_str::ToCStr;\n@@ -61,15 +261,15 @@ pub struct Context<'a> {\n     pub sess: &'a Session,\n     pub span: Span,\n     pub ident: &'a str,\n-    pub crate_id: &'a CrateId,\n-    pub id_hash: &'a str,\n+    pub crate_name: &'a str,\n     pub hash: Option<&'a Svh>,\n     pub triple: &'a str,\n     pub os: abi::Os,\n     pub filesearch: FileSearch<'a>,\n     pub root: &'a Option<CratePaths>,\n     pub rejected_via_hash: Vec<CrateMismatch>,\n     pub rejected_via_triple: Vec<CrateMismatch>,\n+    pub should_match_name: bool,\n }\n \n pub struct Library {\n@@ -167,19 +367,30 @@ impl<'a> Context<'a> {\n     }\n \n     fn find_library_crate(&mut self) -> Option<Library> {\n+        // If an SVH is specified, then this is a transitive dependency that\n+        // must be loaded via -L plus some filtering.\n+        if self.hash.is_none() {\n+            self.should_match_name = false;\n+            match self.find_commandline_library() {\n+                Some(l) => return Some(l),\n+                None => {}\n+            }\n+            self.should_match_name = true;\n+        }\n+\n         let dypair = self.dylibname();\n \n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n         let dylib_prefix = dypair.map(|(prefix, _)| {\n-            format!(\"{}{}-\", prefix, self.crate_id.name)\n+            format!(\"{}{}\", prefix, self.crate_name)\n         });\n-        let rlib_prefix = format!(\"lib{}-\", self.crate_id.name);\n+        let rlib_prefix = format!(\"lib{}\", self.crate_name);\n \n         let mut candidates = HashMap::new();\n \n         // First, find all possible candidate rlibs and dylibs purely based on\n         // the name of the files themselves. We're trying to match against an\n-        // exact crate_id and a possibly an exact hash.\n+        // exact crate name and a possibly an exact hash.\n         //\n         // During this step, we can filter all found libraries based on the\n         // name and id found in the crate id (we ignore the path portion for\n@@ -195,49 +406,32 @@ impl<'a> Context<'a> {\n                 None => return FileDoesntMatch,\n                 Some(file) => file,\n             };\n-            if file.starts_with(rlib_prefix.as_slice()) &&\n+            let (hash, rlib) = if file.starts_with(rlib_prefix.as_slice()) &&\n                     file.ends_with(\".rlib\") {\n-                info!(\"rlib candidate: {}\", path.display());\n-                match self.try_match(file, rlib_prefix.as_slice(), \".rlib\") {\n-                    Some(hash) => {\n-                        info!(\"rlib accepted, hash: {}\", hash);\n-                        let slot = candidates.find_or_insert_with(hash, |_| {\n-                            (HashSet::new(), HashSet::new())\n-                        });\n-                        let (ref mut rlibs, _) = *slot;\n-                        rlibs.insert(fs::realpath(path).unwrap());\n-                        FileMatches\n-                    }\n-                    None => {\n-                        info!(\"rlib rejected\");\n-                        FileDoesntMatch\n-                    }\n-                }\n+                (file.slice(rlib_prefix.len(), file.len() - \".rlib\".len()),\n+                 true)\n             } else if dypair.map_or(false, |(_, suffix)| {\n                 file.starts_with(dylib_prefix.get_ref().as_slice()) &&\n                 file.ends_with(suffix)\n             }) {\n                 let (_, suffix) = dypair.unwrap();\n                 let dylib_prefix = dylib_prefix.get_ref().as_slice();\n-                info!(\"dylib candidate: {}\", path.display());\n-                match self.try_match(file, dylib_prefix, suffix) {\n-                    Some(hash) => {\n-                        info!(\"dylib accepted, hash: {}\", hash);\n-                        let slot = candidates.find_or_insert_with(hash, |_| {\n-                            (HashSet::new(), HashSet::new())\n-                        });\n-                        let (_, ref mut dylibs) = *slot;\n-                        dylibs.insert(fs::realpath(path).unwrap());\n-                        FileMatches\n-                    }\n-                    None => {\n-                        info!(\"dylib rejected\");\n-                        FileDoesntMatch\n-                    }\n-                }\n+                (file.slice(dylib_prefix.len(), file.len() - suffix.len()),\n+                 false)\n             } else {\n-                FileDoesntMatch\n+                return FileDoesntMatch\n+            };\n+            info!(\"lib candidate: {}\", path.display());\n+            let slot = candidates.find_or_insert_with(hash.to_string(), |_| {\n+                (HashSet::new(), HashSet::new())\n+            });\n+            let (ref mut rlibs, ref mut dylibs) = *slot;\n+            if rlib {\n+                rlibs.insert(fs::realpath(path).unwrap());\n+            } else {\n+                dylibs.insert(fs::realpath(path).unwrap());\n             }\n+            FileMatches\n         });\n \n         // We have now collected all known libraries into a set of candidates\n@@ -274,7 +468,7 @@ impl<'a> Context<'a> {\n             _ => {\n                 self.sess.span_err(self.span,\n                     format!(\"multiple matching crates for `{}`\",\n-                            self.crate_id.name).as_slice());\n+                            self.crate_name).as_slice());\n                 self.sess.note(\"candidates:\");\n                 for lib in libraries.iter() {\n                     match lib.dylib {\n@@ -292,50 +486,14 @@ impl<'a> Context<'a> {\n                         None => {}\n                     }\n                     let data = lib.metadata.as_slice();\n-                    let crate_id = decoder::get_crate_id(data);\n-                    note_crateid_attr(self.sess.diagnostic(), &crate_id);\n+                    let name = decoder::get_crate_name(data);\n+                    note_crate_name(self.sess.diagnostic(), name.as_slice());\n                 }\n                 None\n             }\n         }\n     }\n \n-    // Attempts to match the requested version of a library against the file\n-    // specified. The prefix/suffix are specified (disambiguates between\n-    // rlib/dylib).\n-    //\n-    // The return value is `None` if `file` doesn't look like a rust-generated\n-    // library, or if a specific version was requested and it doesn't match the\n-    // apparent file's version.\n-    //\n-    // If everything checks out, then `Some(hash)` is returned where `hash` is\n-    // the listed hash in the filename itself.\n-    fn try_match(&self, file: &str, prefix: &str, suffix: &str) -> Option<String>{\n-        let middle = file.slice(prefix.len(), file.len() - suffix.len());\n-        debug!(\"matching -- {}, middle: {}\", file, middle);\n-        let mut parts = middle.splitn('-', 1);\n-        let hash = match parts.next() { Some(h) => h, None => return None };\n-        debug!(\"matching -- {}, hash: {} (want {})\", file, hash, self.id_hash);\n-        let vers = match parts.next() { Some(v) => v, None => return None };\n-        debug!(\"matching -- {}, vers: {} (want {})\", file, vers,\n-               self.crate_id.version);\n-        match self.crate_id.version {\n-            Some(ref version) if version.as_slice() != vers => return None,\n-            Some(..) => {} // check the hash\n-\n-            // hash is irrelevant, no version specified\n-            None => return Some(hash.to_string())\n-        }\n-        debug!(\"matching -- {}, vers ok\", file);\n-        // hashes in filenames are prefixes of the \"true hash\"\n-        if self.id_hash == hash.as_slice() {\n-            debug!(\"matching -- {}, hash ok\", file);\n-            Some(hash.to_string())\n-        } else {\n-            None\n-        }\n-    }\n-\n     // Attempts to extract *one* library from the set `m`. If the set has no\n     // elements, `None` is returned. If the set has more than one element, then\n     // the errors and notes are emitted about the set of libraries.\n@@ -382,7 +540,7 @@ impl<'a> Context<'a> {\n                                    format!(\"multiple {} candidates for `{}` \\\n                                             found\",\n                                            flavor,\n-                                           self.crate_id.name).as_slice());\n+                                           self.crate_name).as_slice());\n                 self.sess.span_note(self.span,\n                                     format!(r\"candidate #1: {}\",\n                                             ret.get_ref()\n@@ -404,9 +562,11 @@ impl<'a> Context<'a> {\n     }\n \n     fn crate_matches(&mut self, crate_data: &[u8], libpath: &Path) -> bool {\n-        match decoder::maybe_get_crate_id(crate_data) {\n-            Some(ref id) if self.crate_id.matches(id) => {}\n-            _ => { info!(\"Rejecting via crate_id\"); return false }\n+        if self.should_match_name {\n+            match decoder::maybe_get_crate_name(crate_data) {\n+                Some(ref name) if self.crate_name == name.as_slice() => {}\n+                _ => { info!(\"Rejecting via crate name\"); return false }\n+            }\n         }\n         let hash = match decoder::maybe_get_crate_hash(crate_data) {\n             Some(hash) => hash, None => {\n@@ -415,7 +575,10 @@ impl<'a> Context<'a> {\n             }\n         };\n \n-        let triple = decoder::get_crate_triple(crate_data);\n+        let triple = match decoder::get_crate_triple(crate_data) {\n+            None => { debug!(\"triple not present\"); return false }\n+            Some(t) => t,\n+        };\n         if triple.as_slice() != self.triple {\n             info!(\"Rejecting via crate triple: expected {} got {}\", self.triple, triple);\n             self.rejected_via_triple.push(CrateMismatch {\n@@ -456,10 +619,72 @@ impl<'a> Context<'a> {\n         }\n     }\n \n+    fn find_commandline_library(&mut self) -> Option<Library> {\n+        let locs = match self.sess.opts.externs.find_equiv(&self.crate_name) {\n+            Some(s) => s,\n+            None => return None,\n+        };\n+\n+        // First, filter out all libraries that look suspicious. We only accept\n+        // files which actually exist that have the correct naming scheme for\n+        // rlibs/dylibs.\n+        let sess = self.sess;\n+        let dylibname = self.dylibname();\n+        let mut locs = locs.iter().map(|l| Path::new(l.as_slice())).filter(|loc| {\n+            if !loc.exists() {\n+                sess.err(format!(\"extern location does not exist: {}\",\n+                                 loc.display()).as_slice());\n+                return false;\n+            }\n+            let file = loc.filename_str().unwrap();\n+            if file.starts_with(\"lib\") && file.ends_with(\".rlib\") {\n+                return true\n+            } else {\n+                match dylibname {\n+                    Some((prefix, suffix)) => {\n+                        if file.starts_with(prefix) && file.ends_with(suffix) {\n+                            return true\n+                        }\n+                    }\n+                    None => {}\n+                }\n+            }\n+            sess.err(format!(\"extern location is of an unknown type: {}\",\n+                             loc.display()).as_slice());\n+            false\n+        });\n+\n+        // Now that we have an itertor of good candidates, make sure there's at\n+        // most one rlib and at most one dylib.\n+        let mut rlibs = HashSet::new();\n+        let mut dylibs = HashSet::new();\n+        for loc in locs {\n+            if loc.filename_str().unwrap().ends_with(\".rlib\") {\n+                rlibs.insert(loc.clone());\n+            } else {\n+                dylibs.insert(loc.clone());\n+            }\n+        }\n+\n+        // Extract the rlib/dylib pair.\n+        let mut metadata = None;\n+        let rlib = self.extract_one(rlibs, \"rlib\", &mut metadata);\n+        let dylib = self.extract_one(dylibs, \"dylib\", &mut metadata);\n+\n+        if rlib.is_none() && dylib.is_none() { return None }\n+        match metadata {\n+            Some(metadata) => Some(Library {\n+                dylib: dylib,\n+                rlib: rlib,\n+                metadata: metadata,\n+            }),\n+            None => None,\n+        }\n+    }\n }\n \n-pub fn note_crateid_attr(diag: &SpanHandler, crateid: &CrateId) {\n-    diag.handler().note(format!(\"crate_id: {}\", crateid.to_str()).as_slice());\n+pub fn note_crate_name(diag: &SpanHandler, name: &str) {\n+    diag.handler().note(format!(\"crate name: {}\", name).as_slice());\n }\n \n impl ArchiveMetadata {"}, {"sha": "1bb5ffdccb504567b5ecb53602545424986aa932", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -1373,15 +1373,15 @@ pub fn process_crate(sess: &Session,\n         return;\n     }\n \n-    let (cratename, crateid) = match attr::find_crateid(krate.attrs.as_slice()) {\n-        Some(crateid) => (crateid.name.clone(), crateid.to_str()),\n+    let cratename = match attr::find_crate_name(krate.attrs.as_slice()) {\n+        Some(name) => name.get().to_string(),\n         None => {\n             info!(\"Could not find crate name, using 'unknown_crate'\");\n-            (String::from_str(\"unknown_crate\"),\"unknown_crate\".to_owned())\n+            String::from_str(\"unknown_crate\")\n         },\n     };\n \n-    info!(\"Dumping crate {} ({})\", cratename, crateid);\n+    info!(\"Dumping crate {}\", cratename);\n \n     // find a path to dump our data to\n     let mut root_path = match os::getenv(\"DXR_RUST_TEMP_FOLDER\") {"}, {"sha": "d371a2589ffd53ca26f4b8035248af354959c385", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -30,7 +30,6 @@ use back::{link, abi};\n use driver::config;\n use driver::config::{NoDebugInfo, FullDebugInfo};\n use driver::session::Session;\n-use driver::driver::OutputFilenames;\n use driver::driver::{CrateAnalysis, CrateTranslation};\n use lib::llvm::{ModuleRef, ValueRef, BasicBlockRef};\n use lib::llvm::{llvm, Vector};\n@@ -2270,8 +2269,9 @@ pub fn write_metadata(cx: &CrateContext, krate: &ast::Crate) -> Vec<u8> {\n                      }.as_slice());\n     let llmeta = C_bytes(cx, compressed.as_slice());\n     let llconst = C_struct(cx, [llmeta], false);\n-    let name = format!(\"rust_metadata_{}_{}_{}\", cx.link_meta.crateid.name,\n-                       cx.link_meta.crateid.version_or_default(), cx.link_meta.crate_hash);\n+    let name = format!(\"rust_metadata_{}_{}\",\n+                       cx.link_meta.crate_name,\n+                       cx.link_meta.crate_hash);\n     let llglobal = name.with_c_str(|buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(cx.metadata_llmod, val_ty(llconst).to_ref(), buf)\n@@ -2288,9 +2288,8 @@ pub fn write_metadata(cx: &CrateContext, krate: &ast::Crate) -> Vec<u8> {\n }\n \n pub fn trans_crate(krate: ast::Crate,\n-                   analysis: CrateAnalysis,\n-                   output: &OutputFilenames) -> (ty::ctxt, CrateTranslation) {\n-    let CrateAnalysis { ty_cx: tcx, exp_map2, reachable, .. } = analysis;\n+                   analysis: CrateAnalysis) -> (ty::ctxt, CrateTranslation) {\n+    let CrateAnalysis { ty_cx: tcx, exp_map2, reachable, name, .. } = analysis;\n \n     // Before we touch LLVM, make sure that multithreading is enabled.\n     unsafe {\n@@ -2310,8 +2309,7 @@ pub fn trans_crate(krate: ast::Crate,\n         }\n     }\n \n-    let link_meta = link::build_link_meta(&krate,\n-                                          output.out_filestem.as_slice());\n+    let link_meta = link::build_link_meta(&tcx.sess, &krate, name);\n \n     // Append \".rs\" to crate name as LLVM module identifier.\n     //\n@@ -2321,7 +2319,7 @@ pub fn trans_crate(krate: ast::Crate,\n     // crashes if the module identifier is same as other symbols\n     // such as a function name in the module.\n     // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n-    let mut llmod_id = link_meta.crateid.name.clone();\n+    let mut llmod_id = link_meta.crate_name.clone();\n     llmod_id.push_str(\".rs\");\n \n     let ccx = CrateContext::new(llmod_id.as_slice(), tcx, exp_map2,"}, {"sha": "7eb3fcce7803fdd506c92d913c0e2487ec7ecf00", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -1496,7 +1496,7 @@ fn compile_unit_metadata(cx: &CrateContext) {\n     });\n \n     fn fallback_path(cx: &CrateContext) -> CString {\n-        cx.link_meta.crateid.name.as_slice().to_c_str()\n+        cx.link_meta.crate_name.as_slice().to_c_str()\n     }\n }\n \n@@ -3972,7 +3972,7 @@ impl NamespaceTreeNode {\n }\n \n fn crate_root_namespace<'a>(cx: &'a CrateContext) -> &'a str {\n-    cx.link_meta.crateid.name.as_slice()\n+    cx.link_meta.crate_name.as_slice()\n }\n \n fn namespace_for_item(cx: &CrateContext, def_id: ast::DefId) -> Rc<NamespaceTreeNode> {"}, {"sha": "ff28f668c476f1bc61aff4acea464e65e40d1614", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -566,7 +566,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n \n         let ps = ccx.tcx.map.with_path(id, |path| {\n             let abi = Some(ast_map::PathName(special_idents::clownshoe_abi.name));\n-            link::mangle(path.chain(abi.move_iter()), None, None)\n+            link::mangle(path.chain(abi.move_iter()), None)\n         });\n \n         // Compute the type that the function would have if it were just a"}, {"sha": "768deec8edc1eb449143fd3d96341476698e008f", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -129,9 +129,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         hash_id.hash(&mut state);\n         mono_ty.hash(&mut state);\n \n-        exported_name(path,\n-                      format!(\"h{}\", state.result()).as_slice(),\n-                      ccx.link_meta.crateid.version_or_default())\n+        exported_name(path, format!(\"h{}\", state.result()).as_slice())\n     });\n     debug!(\"monomorphize_fn mangled to {}\", s);\n "}, {"sha": "ff9f855c987573e5c29f171fa14b4cc3d546388c", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -37,7 +37,6 @@ use syntax::codemap;\n use syntax::codemap::{Span, CodeMap, DUMMY_SP};\n use syntax::diagnostic::{Level, RenderSpan, Bug, Fatal, Error, Warning, Note};\n use syntax::ast;\n-use syntax::crateid::CrateId;\n use util::ppaux::{ty_to_str, UserString};\n \n struct Env<'a> {\n@@ -116,11 +115,8 @@ fn test_env(_test_name: &str,\n     let krate_config = Vec::new();\n     let input = driver::StrInput(source_string.to_owned());\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input);\n-    let krate_id = CrateId { path: \"test\".to_owned(),\n-                             name: \"test\".to_owned(),\n-                             version: None };\n     let (krate, ast_map) =\n-        driver::phase_2_configure_and_expand(&sess, krate, &krate_id)\n+        driver::phase_2_configure_and_expand(&sess, krate, \"test\")\n             .expect(\"phase 2 aborted\");\n \n     // run just enough stuff to build a tcx:"}, {"sha": "1ddd97e2ed45f35e65a8a2ed3b214015a2a41484", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -119,13 +119,7 @@ impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n \n         // Figure out the name of this crate\n         let input = driver::FileInput(cx.src.clone());\n-        let t_outputs = driver::build_output_filenames(&input,\n-                                                       &None,\n-                                                       &None,\n-                                                       self.attrs.as_slice(),\n-                                                       cx.sess());\n-        let id = link::find_crate_id(self.attrs.as_slice(),\n-                                     t_outputs.out_filestem.as_slice());\n+        let name = link::find_crate_name(None, self.attrs.as_slice(), &input);\n \n         // Clean the crate, translating the entire libsyntax AST to one that is\n         // understood by rustdoc.\n@@ -188,7 +182,7 @@ impl<'a> Clean<Crate> for visit_ast::RustdocVisitor<'a> {\n         }\n \n         Crate {\n-            name: id.name.to_string(),\n+            name: name.to_string(),\n             module: Some(module),\n             externs: externs,\n             primitives: primitives,"}, {"sha": "9ef671ef2fcbbddc79e6fc125b6492fd330b29f0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -12,6 +12,7 @@ use rustc;\n use rustc::{driver, middle};\n use rustc::middle::{privacy, ty};\n use rustc::lint;\n+use rustc::back::link;\n \n use syntax::ast;\n use syntax::parse::token;\n@@ -115,13 +116,17 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<String>)\n     }\n \n     let krate = phase_1_parse_input(&sess, cfg, &input);\n+\n+    let name = link::find_crate_name(Some(&sess), krate.attrs.as_slice(),\n+                                     &input);\n+\n     let (krate, ast_map)\n-        = phase_2_configure_and_expand(&sess, krate, &from_str(\"rustdoc\").unwrap())\n+        = phase_2_configure_and_expand(&sess, krate, name.as_slice())\n             .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n     let driver::driver::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n-    } = phase_3_run_analysis_passes(sess, &krate, ast_map);\n+    } = phase_3_run_analysis_passes(sess, &krate, ast_map, name);\n \n     debug!(\"crate: {:?}\", krate);\n     (DocContext {"}, {"sha": "7d6f44f5d168a7a3bddeba9791eed749f9dec1d3", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"rustdoc#0.11.0\"]\n+#![crate_id = \"rustdoc#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"rustdoc\"]\n #![experimental]\n #![desc = \"rustdoc, the Rust documentation extractor\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #![feature(globs, struct_variant, managed_boxes, macro_rules, phase)]\n "}, {"sha": "18f823317808156b88ac86cf49d0af4be814d089", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -69,7 +69,7 @@ pub fn run(input: &str,\n     }));\n     let krate = driver::phase_1_parse_input(&sess, cfg, &input);\n     let (krate, _) = driver::phase_2_configure_and_expand(&sess, krate,\n-            &from_str(\"rustdoc-test\").unwrap())\n+                                                          \"rustdoc-test\")\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n     let ctx = box(GC) core::DocContext {"}, {"sha": "1a67f6d86bae64e11bdf4c70e26fd92b5dd88f27", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"rustrt#0.11.0\"]\n+#![crate_id = \"rustrt#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"rustrt\"]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -20,6 +21,7 @@\n #![feature(linkage, lang_items, unsafe_destructor)]\n #![no_std]\n #![experimental]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[phase(plugin, link)] extern crate core;\n extern crate alloc;"}, {"sha": "a9e6a6a4a9a871d4976fea095f0bd20cf3b80ec5", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -34,7 +34,8 @@ via `close` and `delete` methods.\n \n */\n \n-#![crate_id = \"rustuv#0.11.0\"]\n+#![crate_id = \"rustuv#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"rustuv\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"rlib\"]\n@@ -47,6 +48,7 @@ via `close` and `delete` methods.\n #![feature(macro_rules, unsafe_destructor)]\n #![deny(unused_result, unused_must_use)]\n #![allow(visible_private_types)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[cfg(test)] extern crate green;\n #[cfg(test)] extern crate debug;"}, {"sha": "31a065a14498ea14d9f8eaf6c6605f660d56e0f5", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -28,14 +28,16 @@\n //! An example version number with all five components is\n //! `0.8.1-rc.3.0+20130922.linux`.\n \n-#![crate_id = \"semver#0.11.0\"]\n+#![crate_id = \"semver#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"semver\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n use std::char;\n use std::cmp;"}, {"sha": "f635c3f4150996427fb2b7ef4bd65b41100b0a7c", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -14,7 +14,8 @@\n Core encoding and decoding interfaces.\n */\n \n-#![crate_id = \"serialize#0.11.0\"]\n+#![crate_id = \"serialize#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"serialize\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -24,6 +25,7 @@ Core encoding and decoding interfaces.\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(macro_rules, managed_boxes, default_type_params, phase)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n // test harness access\n #[cfg(test)]"}, {"sha": "928a1088d0efa29e4708cccf8dba8431b574c06f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -94,7 +94,8 @@\n //! all the standard macros, such as `assert!`, `fail!`, `println!`,\n //! and `format!`, also available to all Rust code.\n \n-#![crate_id = \"std#0.11.0\"]\n+#![crate_id = \"std#0.11.0\"] // NOTE: remove after stage0 snap\n+#![crate_name = \"std\"]\n #![unstable]\n #![comment = \"The Rust standard library\"]\n #![license = \"MIT/ASL2\"]\n@@ -107,6 +108,7 @@\n \n #![feature(macro_rules, globs, managed_boxes, linkage)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "c0d62caaa6b5b75384a6edc14bf00ec32fc7d8dc", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -17,7 +17,8 @@\n //! use this crate specifically. Instead, its functionality is reexported\n //! through `std::sync`.\n \n-#![crate_id = \"sync#0.11.0\"]\n+#![crate_id = \"sync#0.11.0\"] // NOTE: remove after stage0 snap\n+#![crate_name = \"sync\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -30,6 +31,7 @@\n #![feature(phase, globs, macro_rules, unsafe_destructor)]\n #![deny(missing_doc)]\n #![no_std]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[phase(plugin, link)] extern crate core;\n extern crate alloc;"}, {"sha": "3b2ee4e2a6134a02c32aa27fb98991e834fc3296", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -18,7 +18,6 @@ use diagnostic::SpanHandler;\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use parse::token::InternedString;\n use parse::token;\n-use crateid::CrateId;\n \n use std::collections::HashSet;\n use std::collections::BitvSet;\n@@ -271,11 +270,8 @@ pub fn sort_meta_items(items: &[Gc<MetaItem>]) -> Vec<Gc<MetaItem>> {\n     }).collect()\n }\n \n-pub fn find_crateid(attrs: &[Attribute]) -> Option<CrateId> {\n-    match first_attr_value_str_by_name(attrs, \"crate_id\") {\n-        None => None,\n-        Some(id) => from_str::<CrateId>(id.get()),\n-    }\n+pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n+    first_attr_value_str_by_name(attrs, \"crate_name\")\n }\n \n #[deriving(PartialEq)]"}, {"sha": "673ae31ef77899216e4e3f7d4a0f6357403f7569", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -452,7 +452,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn mod_pop(&mut self) { self.mod_path.pop().unwrap(); }\n     pub fn mod_path(&self) -> Vec<ast::Ident> {\n         let mut v = Vec::new();\n-        v.push(token::str_to_ident(self.ecfg.crate_id.name.as_slice()));\n+        v.push(token::str_to_ident(self.ecfg.crate_name.as_slice()));\n         v.extend(self.mod_path.iter().map(|a| *a));\n         return v;\n     }"}, {"sha": "752b3a09e652e9e9dc9270091c8192e8156ac245", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -19,7 +19,6 @@ use attr;\n use attr::AttrMetaMethods;\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n-use crateid::CrateId;\n use ext::base::*;\n use fold;\n use fold::*;\n@@ -985,7 +984,7 @@ fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n \n pub struct ExpansionConfig {\n     pub deriving_hash_type_parameter: bool,\n-    pub crate_id: CrateId,\n+    pub crate_name: String,\n }\n \n pub struct ExportedMacros {\n@@ -1184,7 +1183,7 @@ mod test {\n         // should fail:\n         let cfg = ::syntax::ext::expand::ExpansionConfig {\n             deriving_hash_type_parameter: false,\n-            crate_id: from_str(\"test\").unwrap(),\n+            crate_name: \"test\".to_str(),\n         };\n         expand_crate(&sess,cfg,vec!(),vec!(),crate_ast);\n     }\n@@ -1201,7 +1200,7 @@ mod test {\n             Vec::new(), &sess);\n         let cfg = ::syntax::ext::expand::ExpansionConfig {\n             deriving_hash_type_parameter: false,\n-            crate_id: from_str(\"test\").unwrap(),\n+            crate_name: \"test\".to_str(),\n         };\n         expand_crate(&sess,cfg,vec!(),vec!(),crate_ast);\n     }\n@@ -1217,7 +1216,7 @@ mod test {\n             Vec::new(), &sess);\n         let cfg = ::syntax::ext::expand::ExpansionConfig {\n             deriving_hash_type_parameter: false,\n-            crate_id: from_str(\"test\").unwrap(),\n+            crate_name: \"test\".to_str(),\n         };\n         expand_crate(&sess, cfg, vec!(), vec!(), crate_ast);\n     }\n@@ -1254,7 +1253,7 @@ mod test {\n         // the cfg argument actually does matter, here...\n         let cfg = ::syntax::ext::expand::ExpansionConfig {\n             deriving_hash_type_parameter: false,\n-            crate_id: from_str(\"test\").unwrap(),\n+            crate_name: \"test\".to_str(),\n         };\n         expand_crate(&ps,cfg,vec!(),vec!(),crate_ast)\n     }"}, {"sha": "6df91c66a25e84f96c2fbac772d56d7888edcfaf", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -18,7 +18,8 @@ This API is completely unstable and subject to change.\n \n */\n \n-#![crate_id = \"syntax#0.11.0\"]\n+#![crate_id = \"syntax#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"syntax\"]\n #![experimental]\n #![license = \"MIT/ASL2\"]\n #![crate_type = \"dylib\"]\n@@ -30,6 +31,7 @@ This API is completely unstable and subject to change.\n #![feature(macro_rules, globs, managed_boxes, default_type_params, phase)]\n #![feature(quote, unsafe_destructor)]\n #![allow(deprecated)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n extern crate serialize;\n extern crate term;"}, {"sha": "cdd067cef5b03cd6a8a7addb3dffd81ceabbffe6", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -38,7 +38,8 @@\n //! [win]: http://msdn.microsoft.com/en-us/library/windows/desktop/ms682010%28v=vs.85%29.aspx\n //! [ti]: https://en.wikipedia.org/wiki/Terminfo\n \n-#![crate_id = \"term#0.11.0\"]\n+#![crate_id = \"term#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"term\"]\n #![experimental]\n #![comment = \"Simple ANSI color library\"]\n #![license = \"MIT/ASL2\"]\n@@ -48,6 +49,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #![feature(macro_rules, phase)]\n "}, {"sha": "1eb13fd660e319af1221bcc402836643314c087d", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -23,7 +23,8 @@\n // running tests while providing a base that other test frameworks may\n // build off of.\n \n-#![crate_id = \"test#0.11.0\"]\n+#![crate_id = \"test#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"test\"] // NOTE: remove after stage0\n #![experimental]\n #![comment = \"Rust internal test library only used by rustc\"]\n #![license = \"MIT/ASL2\"]\n@@ -32,6 +33,7 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\")]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #![feature(asm, macro_rules, phase)]\n "}, {"sha": "873cc7af7b64761dc8b84999325d1fb91aeb14a1", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -10,7 +10,8 @@\n \n //! Simple time handling.\n \n-#![crate_id = \"time#0.11.0\"]\n+#![crate_id = \"time#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"time\"]\n #![experimental]\n \n #![crate_type = \"rlib\"]\n@@ -21,6 +22,7 @@\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(phase)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(plugin, link)] extern crate log;"}, {"sha": "e835e5b26cfd7be51a336884e03467698a8d611e", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -10,7 +10,8 @@\n \n //! Types/fns concerning URLs (see RFC 3986)\n \n-#![crate_id = \"url#0.11.0\"]\n+#![crate_id = \"url#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"url\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -20,6 +21,7 @@\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(default_type_params)]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n use std::collections::HashMap;\n use std::fmt;"}, {"sha": "426b350cab949c3972b128ebac4f04f2a3251db0", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -54,7 +54,8 @@ Examples of string representations:\n \n */\n \n-#![crate_id = \"uuid#0.11.0\"]\n+#![crate_id = \"uuid#0.11.0\"] // NOTE: remove after stage0\n+#![crate_name = \"uuid\"]\n #![experimental]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n@@ -63,6 +64,7 @@ Examples of string representations:\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/0.11.0/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![allow(unused_attribute)] // NOTE: remove after stage0\n \n #![feature(default_type_params)]\n "}, {"sha": "e26ea7c4fa6d0b73b79e49c83722512ccd5549fa", "filename": "src/test/auxiliary/crateresolve1-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-1.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id=\"crateresolve1#0.1\"]\n-\n+// compile-flags:-C extra-filename=-1\n+#![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n \n pub fn f() -> int { 10 }"}, {"sha": "715171b143a4a46686e59ad3ab168f2a52a6a272", "filename": "src/test/auxiliary/crateresolve1-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-2.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id=\"crateresolve1#0.2\"]\n-\n+// compile-flags:-C extra-filename=-2\n+#![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n \n pub fn f() -> int { 20 }"}, {"sha": "f733b5b908ab49aff407753905edf2a33317e185", "filename": "src/test/auxiliary/crateresolve1-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve1-3.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id=\"crateresolve1#0.3\"]\n-\n+// compile-flags:-C extra-filename=-3\n+#![crate_name = \"crateresolve1\"]\n #![crate_type = \"lib\"]\n \n pub fn f() -> int { 30 }"}, {"sha": "f436e7c95d1bfa37f566a5d4d4fa4907a49f394f", "filename": "src/test/auxiliary/crateresolve2-1.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve2-1.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_id=\"crateresolve2#0.1\"]\n-\n-#![crate_type = \"lib\"]\n-\n-pub fn f() -> int { 10 }"}, {"sha": "5c83b327912270e6a15c9a7f6b89e154df86a19a", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id=\"externcallback#0.1\"]\n+#![crate_name=\"externcallback\"]\n #![crate_type = \"lib\"]\n \n extern crate libc;"}, {"sha": "883bfd035f40abbcba04a8c212b8e4ecdb2890b1", "filename": "src/test/compile-fail/bad-crate-id.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fcompile-fail%2Fbad-crate-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fcompile-fail%2Fbad-crate-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-crate-id.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate foo = \"\"; //~ ERROR: malformed crate id\n-extern crate bar = \"#a\"; //~ ERROR: malformed crate id\n+extern crate foo = \"\"; //~ ERROR: crate name must not be empty\n \n fn main() {}"}, {"sha": "22e98b61c6113646d3fdd9fcf5df426c14e091d3", "filename": "src/test/compile-fail/bad-crate-id2.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-crate-id2.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id=\"crateresolve2#0.2\"]\n+extern crate bar = \"#a\"; //~ ERROR: invalid character `#` in crate name: `#a`\n \n-#![crate_type = \"lib\"]\n+fn main() {}\n \n-pub fn f() -> int { 20 }", "previous_filename": "src/test/auxiliary/crateresolve2-2.rs"}, {"sha": "c5e9d1281526d9585c7f9142c2fba696cca36500", "filename": "src/test/compile-fail/crateresolve2.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:crateresolve2-1.rs\n-// aux-build:crateresolve2-2.rs\n-// aux-build:crateresolve2-3.rs\n-// error-pattern:using multiple versions of crate `crateresolve2`\n-\n-extern crate crateresolve2 = \"crateresolve2#0.1\";\n-\n-mod m {\n-    pub extern crate crateresolve2 = \"crateresolve2#0.2\";\n-}\n-\n-fn main() {\n-    let x: int = false;\n-}"}, {"sha": "8b4801466b9b639d9dd65b1bff41505c69f3f2e0", "filename": "src/test/compile-fail/crateresolve5.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Fcompile-fail%2Fcrateresolve5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Fcompile-fail%2Fcrateresolve5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrateresolve5.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:crateresolve5-1.rs\n-// aux-build:crateresolve5-2.rs\n-\n-extern crate cr5_1 = \"crateresolve5#0.1\";\n-extern crate cr5_2 = \"crateresolve5#0.2\";\n-\n-\n-fn main() {\n-    // Nominal types from two multiple versions of a crate are different types\n-    assert!(cr5_1::nominal() == cr5_2::nominal()); //~ ERROR mismatched types: expected\n-}"}, {"sha": "dbedf355a56cb2f799f8517ee237cc347c6d28fd", "filename": "src/test/compile-fail/issue-11908-1.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Fcompile-fail%2Fissue-11908-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Fcompile-fail%2Fissue-11908-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11908-1.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:issue-11908-1.rs\n-// ignore-android this test is incompatible with the android test runner\n-// error-pattern: multiple dylib candidates for `url` found\n-\n-// This test ensures that if you have the same rlib or dylib at two locations\n-// in the same path that you don't hit an assertion in the compiler.\n-//\n-// Note that this relies on `liburl` to be in the path somewhere else,\n-// and then our aux-built libraries will collide with liburl (they have\n-// the same version listed)\n-\n-extern crate url;\n-\n-fn main() {}"}, {"sha": "c7753a67464ac64ad0e9b8193c8996632a076f41", "filename": "src/test/run-make/bootstrap-from-c-with-green/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -6,7 +6,6 @@ TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n \n all:\n \t$(RUSTC) lib.rs\n-\tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n \t$(CC) main.c -o $(call RUN_BINFILE,main) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -lboot\n \t$(call RUN,main)\n \t$(call REMOVE_DYLIBS,boot)"}, {"sha": "7f17018c486c0e11ef543dc54e8fa4fa69bff0c9", "filename": "src/test/run-make/bootstrap-from-c-with-green/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id=\"boot#0.1\"]\n+#![crate_name=\"boot\"]\n #![crate_type=\"dylib\"]\n \n extern crate rustuv;"}, {"sha": "c7753a67464ac64ad0e9b8193c8996632a076f41", "filename": "src/test/run-make/bootstrap-from-c-with-native/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -6,7 +6,6 @@ TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n \n all:\n \t$(RUSTC) lib.rs\n-\tln -nsf $(call DYLIB,boot-*) $(call DYLIB,boot)\n \t$(CC) main.c -o $(call RUN_BINFILE,main) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -lboot\n \t$(call RUN,main)\n \t$(call REMOVE_DYLIBS,boot)"}, {"sha": "a5b4430ab6a0c30d4a64da45bb359b77e4f65997", "filename": "src/test/run-make/c-link-to-rust-dylib/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-dylib%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -4,7 +4,6 @@ HOST_LIB_DIR=$(TMPDIR)/../../../stage$(RUST_BUILD_STAGE)/lib\n \n all:\n \t$(RUSTC) foo.rs\n-\tln -s $(call DYLIB,foo-*) $(call DYLIB,foo)\n \t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(call RPATH_LINK_SEARCH,$(HOST_LIB_DIR)) -Wl,-rpath,$(TMPDIR)\n \t$(call RUN,bar)\n \t$(call REMOVE_DYLIBS,foo)"}, {"sha": "8a6d6e4dd6d786122f2a338232d128c33cb32532", "filename": "src/test/run-make/c-link-to-rust-staticlib/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-link-to-rust-staticlib%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -10,7 +10,6 @@ endif\n ifneq ($(shell uname),FreeBSD)\n all:\n \t$(RUSTC) foo.rs\n-\tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n \t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRAFLAGS) -lstdc++\n \t$(call RUN,bar)\n \trm $(call STATICLIB,foo*)"}, {"sha": "23d155fe23db33ede53de6780c652c98b4c59e83", "filename": "src/test/run-make/crate-data-smoke/Makefile", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -1,10 +1,9 @@\n -include ../tools.mk\n \n all:\n-\t[ `$(RUSTC) --crate-id crate.rs` = \"foo#0.11.0\" ]\n-\t[ `$(RUSTC) --crate-name crate.rs` = \"foo\" ]\n-\t[ `$(RUSTC) --crate-file-name crate.rs` = \"foo\" ]\n-\t[ `$(RUSTC) --crate-file-name --crate-type=lib --test crate.rs` = \"foo\" ]\n-\t[ `$(RUSTC) --crate-file-name --test lib.rs` = \"mylib\" ]\n-\t$(RUSTC) --crate-file-name lib.rs\n-\t$(RUSTC) --crate-file-name rlib.rs\n+\t[ `$(RUSTC) --print-crate-name crate.rs` = \"foo\" ]\n+\t[ `$(RUSTC) --print-file-name crate.rs` = \"foo\" ]\n+\t[ `$(RUSTC) --print-file-name --crate-type=lib --test crate.rs` = \"foo\" ]\n+\t[ `$(RUSTC) --print-file-name --test lib.rs` = \"mylib\" ]\n+\t$(RUSTC) --print-file-name lib.rs\n+\t$(RUSTC) --print-file-name rlib.rs"}, {"sha": "305b3dc70a625006de0c6f3a198e046bcf6a1ff0", "filename": "src/test/run-make/crate-data-smoke/crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"foo#0.11.0\"]\n+#![crate_name = \"foo\"]\n \n // Querying about the crate metadata should *not* parse the entire crate, it\n // only needs the crate attributes (which are guaranteed to be at the top) be"}, {"sha": "639a5d0387b8ea045146515086885abdd0c89e4e", "filename": "src/test/run-make/crate-data-smoke/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"mylib\"]\n+#![crate_name = \"mylib\"]\n #![crate_type = \"lib\"]"}, {"sha": "4e0937486003c19db4449023356883814c211b55", "filename": "src/test/run-make/crate-data-smoke/rlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"mylib\"]\n+#![crate_name = \"mylib\"]\n #![crate_type = \"rlib\"]"}, {"sha": "7c15785bbb23d61eaa2a5e6315852dd2e9c2de25", "filename": "src/test/run-make/dep-info/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fdep-info%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fdep-info%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id=\"foo#0.1\"]\n+#![crate_name = \"foo\"]\n \n pub mod foo;\n pub mod bar;"}, {"sha": "9b86bf9754956eea9a883510df3604c506923956", "filename": "src/test/run-make/extern-flag-disambiguates/Makefile", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,24 @@\n+-include ../tools.mk\n+\n+# Attempt to build this dependency tree:\n+#\n+#\tA.1   A.2\n+#\t |\\    |\n+#\t | \\   |\n+#        B  \\  C\n+#         \\ | /\n+#          \\|/\n+#           D\n+#\n+# Note that A.1 and A.2 are crates with the same name.\n+\n+all:\n+\t$(RUSTC) -C metadata=1 -C extra-filename=-1 a.rs\n+\t$(RUSTC) -C metadata=2 -C extra-filename=-2 a.rs\n+\t$(RUSTC) b.rs --extern a=$(TMPDIR)/liba-1.rlib\n+\t$(RUSTC) c.rs --extern a=$(TMPDIR)/liba-2.rlib\n+\t$(RUSTC) --cfg before d.rs --extern a=$(TMPDIR)/liba-1.rlib\n+\t$(call RUN,d)\n+\t$(RUSTC) --cfg after  d.rs --extern a=$(TMPDIR)/liba-1.rlib\n+\t$(call RUN,d)\n+"}, {"sha": "11b9ba6fce3383fd5e2162076b56854feeba83a6", "filename": "src/test/run-make/extern-flag-disambiguates/a.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fa.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"a\"]\n+#![crate_type = \"rlib\"]\n+\n+static FOO: uint = 3;\n+\n+pub fn token() -> &'static uint { &FOO }"}, {"sha": "3156cf0ba7275a0f99ee4d1f0b0625f89c7624ea", "filename": "src/test/run-make/extern-flag-disambiguates/b.rs", "status": "renamed", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fb.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,14 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:issue-11908-2.rs\n-// no-prefer-dynamic\n-// ignore-android this test is incompatible with the android test runner\n-// error-pattern: multiple rlib candidates for `url` found\n+#![crate_name = \"b\"]\n+#![crate_type = \"rlib\"]\n \n-// see comments in issue-11908-1 for what's going on here\n+extern crate a;\n \n-extern crate url;\n-\n-fn main() {}\n+static FOO: uint = 3;\n \n+pub fn token() -> &'static uint { &FOO }\n+pub fn a_token() -> &'static uint { a::token() }", "previous_filename": "src/test/compile-fail/issue-11908-2.rs"}, {"sha": "d3bbc762ef2f360e464ac5506e5b12e1c642e2be", "filename": "src/test/run-make/extern-flag-disambiguates/c.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fc.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"c\"]\n+#![crate_type = \"rlib\"]\n+\n+extern crate a;\n+\n+static FOO: uint = 3;\n+\n+pub fn token() -> &'static uint { &FOO }\n+pub fn a_token() -> &'static uint { a::token() }"}, {"sha": "d850daffc39414ce661b238d61f32eb1fa907d3f", "filename": "src/test/run-make/extern-flag-disambiguates/d.rs", "status": "renamed", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-disambiguates%2Fd.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:crateresolve8-1.rs\n+#[cfg(before)] extern crate a;\n+extern crate b;\n+extern crate c;\n+#[cfg(after)] extern crate a;\n \n-#![crate_id=\"crateresolve8#0.1\"]\n+fn t(a: &'static uint) -> uint { a as *const _ as uint }\n \n-extern crate crateresolve8 = \"crateresolve8#0.1\";\n-//extern crate crateresolve8(vers = \"0.1\");\n-\n-pub fn main() {\n-    assert_eq!(crateresolve8::f(), 20);\n+fn main() {\n+    assert!(t(a::token()) == t(b::a_token()));\n+    assert!(t(a::token()) != t(c::a_token()));\n }", "previous_filename": "src/test/run-pass/crateresolve8.rs"}, {"sha": "ca5aa052a7b3bfae152722eef6dc627b0933c2c4", "filename": "src/test/run-make/extern-flag-fun/Makefile", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-fun%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-fun%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-fun%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,16 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) bar.rs --crate-type=rlib\n+\t$(RUSTC) bar.rs --crate-type=rlib -C extra-filename=-a\n+\t$(RUSTC) foo.rs --extern hello && exit 1 || exit 0\n+\t$(RUSTC) foo.rs --extern bar=no-exist && exit 1 || exit 0\n+\t$(RUSTC) foo.rs --extern bar=foo.rs && exit 1 || exit 0\n+\t$(RUSTC) foo.rs \\\n+\t\t--extern bar=$(TMPDIR)/libbar.rlib \\\n+\t\t--extern bar=$(TMPDIR)/libbar-a.rlib \\\n+\t\t&& exit 1 || exit 0\n+\t$(RUSTC) foo.rs \\\n+\t\t--extern bar=$(TMPDIR)/libbar.rlib \\\n+\t\t--extern bar=$(TMPDIR)/libbar.rlib\n+\t$(RUSTC) foo.rs --extern bar=$(TMPDIR)/libbar.rlib"}, {"sha": "2152aa79c3370a337ef242c64a9f04c09d45d8f3", "filename": "src/test/run-make/extern-flag-fun/bar.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-fun%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-fun%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-fun%2Fbar.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+"}, {"sha": "52741668640112e4d2dc33bca3c1de4e0043ca38", "filename": "src/test/run-make/extern-flag-fun/foo.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-fun%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fextern-flag-fun%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-flag-fun%2Ffoo.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-prefer-dynamic\n+extern crate bar;\n \n-#![crate_id = \"url#0.11.0\"]\n-#![crate_type = \"dylib\"]\n+fn main() {}", "previous_filename": "src/test/auxiliary/issue-11908-1.rs"}, {"sha": "663a9f7125e705816f80ad38ed32dcd0d3022d95", "filename": "src/test/run-make/issue-11908/Makefile", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fissue-11908%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fissue-11908%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-11908%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,23 @@\n+# This test ensures that if you have the same rlib or dylib at two locations\n+# in the same path that you don't hit an assertion in the compiler.\n+#\n+# Note that this relies on `liburl` to be in the path somewhere else,\n+# and then our aux-built libraries will collide with liburl (they have\n+# the same version listed)\n+\n+-include ../tools.mk\n+\n+all:\n+\tmkdir $(TMPDIR)/other\n+\t$(RUSTC) foo.rs --crate-type=dylib\n+\tmv $(call DYLIB,foo) $(TMPDIR)/other\n+\t$(RUSTC) foo.rs --crate-type=dylib\n+\t$(RUSTC) bar.rs -L $(TMPDIR)/other 2>&1 | \\\n+\t\tgrep \"multiple dylib candidates\"\n+\trm -rf $(TMPDIR)\n+\tmkdir -p $(TMPDIR)/other\n+\t$(RUSTC) foo.rs --crate-type=rlib\n+\tmv $(TMPDIR)/libfoo.rlib $(TMPDIR)/other\n+\t$(RUSTC) foo.rs --crate-type=rlib\n+\t$(RUSTC) bar.rs -L $(TMPDIR)/other 2>&1 | \\\n+\t\tgrep \"multiple rlib candidates\""}, {"sha": "6316cfa3bba08c9efa9bedac15a71633e66bf7a0", "filename": "src/test/run-make/issue-11908/bar.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fissue-11908%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fissue-11908%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-11908%2Fbar.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:can't find crate for `std`\n+extern crate foo;\n \n-extern crate std = \"std#bogus\";\n+fn main() {}", "previous_filename": "src/test/compile-fail/use-meta.rc"}, {"sha": "0858d3c4e47a12b8f1ab52030597d3ee872df721", "filename": "src/test/run-make/issue-11908/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fissue-11908%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fissue-11908%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-11908%2Ffoo.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]"}, {"sha": "6c7e9aa1d59fda347da1af71ffe94d2dcb5f1e21", "filename": "src/test/run-make/lto-smoke-c/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke-c%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -5,6 +5,5 @@ CC := $(CC:-g=)\n \n all:\n \t$(RUSTC) foo.rs -Z lto\n-\tln -s $(call STATICLIB,foo-*) $(call STATICLIB,foo)\n \t$(CC) bar.c -lfoo -o $(call RUN_BINFILE,bar) $(EXTRACFLAGS) -lstdc++\n \t$(call RUN,bar)"}, {"sha": "04d3ae67207228d9bfe4d16f9873b5cd8bbe3f92", "filename": "src/test/run-make/lto-syntax-extension/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Flib.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"rlib\"];\n+#![crate_type = \"rlib\"]"}, {"sha": "1d1419997a21b4e71300c4467f20ce56caa65a0d", "filename": "src/test/run-make/manual-crate-name/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmanual-crate-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmanual-crate-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-crate-name%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) --crate-name foo bar.rs\n+\trm $(TMPDIR)/libfoo.rlib"}, {"sha": "04d3ae67207228d9bfe4d16f9873b5cd8bbe3f92", "filename": "src/test/run-make/manual-crate-name/bar.rs", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmanual-crate-name%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmanual-crate-name%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmanual-crate-name%2Fbar.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,7 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-prefer-dynamic\n-\n-#![crate_id = \"url#0.11.0\"]\n #![crate_type = \"rlib\"]", "previous_filename": "src/test/auxiliary/issue-11908-2.rs"}, {"sha": "09e6ae0bbf7cd01f578084b768dd967d7f02d505", "filename": "src/test/run-make/metadata-flag-frobs-symbols/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs -C metadata=a -C extra-filename=-a\n+\t$(RUSTC) foo.rs -C metadata=b -C extra-filename=-b\n+\t$(RUSTC) bar.rs \\\n+\t\t--extern foo1=$(TMPDIR)/libfoo-a.rlib \\\n+\t\t--extern foo2=$(TMPDIR)/libfoo-b.rlib \\\n+\t\t-Z print-link-args\n+\t$(call RUN,bar)"}, {"sha": "44b9e2f874a4bf2610f7ec4ed8b97d975f198c38", "filename": "src/test/run-make/metadata-flag-frobs-symbols/bar.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2Fbar.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo1;\n+extern crate foo2;\n+\n+fn main() {\n+    let a = foo1::foo();\n+    let b = foo2::foo();\n+    assert!(a as *const _ != b as *const _);\n+}"}, {"sha": "ed04eed8cf77e602f57358e674da214027fcc84e", "filename": "src/test/run-make/metadata-flag-frobs-symbols/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmetadata-flag-frobs-symbols%2Ffoo.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+#![crate_type = \"rlib\"]\n+\n+static FOO: uint = 3;\n+\n+pub fn foo() -> &'static uint { &FOO }"}, {"sha": "e60c16ae0f6b8e8af8a828628f72ad051b22dd74", "filename": "src/test/run-make/multiple-versions/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmultiple-versions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmultiple-versions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmultiple-versions%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs -C metadata=a -C extra-filename=-1 --crate-type=rlib\n+\t$(RUSTC) foo.rs -C metadata=b -C extra-filename=-2 --crate-type=rlib\n+\t$(RUSTC) bar.rs \\\n+\t\t--extern foo1=$(TMPDIR)/libfoo-1.rlib \\\n+\t\t--extern foo2=$(TMPDIR)/libfoo-2.rlib \\\n+\t\t2>&1 | grep \"using multiple versions of crate .foo.\""}, {"sha": "262193a08100aaff74244605393b531a70f3a041", "filename": "src/test/run-make/multiple-versions/bar.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmultiple-versions%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmultiple-versions%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmultiple-versions%2Fbar.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id=\"crateresolve2#0.3\"]\n+extern crate foo1;\n+extern crate foo2;\n \n-#![crate_type = \"lib\"]\n-\n-pub fn f() -> int { 30 }\n+fn main() {}", "previous_filename": "src/test/auxiliary/crateresolve2-3.rs"}, {"sha": "2661b1f4eb49b7a93d03ca34e2563991eb2e37c3", "filename": "src/test/run-make/multiple-versions/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmultiple-versions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fmultiple-versions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmultiple-versions%2Ffoo.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn foo() {}"}, {"sha": "bb5796bd8737ff3c01d46d8aa588766c672a62ab", "filename": "src/test/run-make/output-type-permutations/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Foutput-type-permutations%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Foutput-type-permutations%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-type-permutations%2Ffoo.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![crate_id = \"bar\"]\n+#![crate_name = \"bar\"]\n \n fn main() {}"}, {"sha": "5d6e629ffc1d1627dccc0be3042322042e096d0f", "filename": "src/test/run-make/weird-output-filenames/Makefile", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -1,9 +1,12 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) foo.rs -o $(TMPDIR)/.foo\n-\trm $(TMPDIR)/.foo\n-\t$(RUSTC) foo.rs -o $(TMPDIR)/.foo.bar\n-\trm $(TMPDIR)/.foo.bar\n-\t$(RUSTC) foo.rs -o $(TMPDIR)/+foo+bar\n-\trm $(TMPDIR)/$(call BIN,+foo+bar)\n+\tcp foo.rs $(TMPDIR)/.foo.rs\n+\t$(RUSTC) $(TMPDIR)/.foo.rs 2>&1 \\\n+\t\t| grep \"invalid character.*in crate name:\"\n+\tcp foo.rs $(TMPDIR)/.foo.bar\n+\t$(RUSTC) $(TMPDIR)/.foo.bar 2>&1 \\\n+\t\t| grep \"invalid character.*in crate name:\"\n+\tcp foo.rs $(TMPDIR)/+foo+bar\n+\t$(RUSTC) $(TMPDIR)/+foo+bar 2>&1 \\\n+\t\t| grep \"invalid character.*in crate name:\""}, {"sha": "61e269bf9e3544f8ccd9ff6fa4176680d1ce98e7", "filename": "src/test/run-pass/crateresolve1.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:crateresolve1-1.rs\n-// aux-build:crateresolve1-2.rs\n-// aux-build:crateresolve1-3.rs\n-\n-extern crate crateresolve1 = \"crateresolve1#0.2\";\n-\n-pub fn main() {\n-    assert_eq!(crateresolve1::f(), 20);\n-}"}, {"sha": "5ed1f37c7b9e570872457c587e896bb5efd83e44", "filename": "src/test/run-pass/crateresolve2.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:crateresolve2-1.rs\n-// aux-build:crateresolve2-2.rs\n-// aux-build:crateresolve2-3.rs\n-\n-mod a {\n-    extern crate crateresolve2 = \"crateresolve2#0.1\";\n-    pub fn f() { assert!(crateresolve2::f() == 10); }\n-}\n-\n-mod b {\n-    extern crate crateresolve2 = \"crateresolve2#0.2\";\n-    pub fn f() { assert!(crateresolve2::f() == 20); }\n-}\n-\n-mod c {\n-    extern crate crateresolve2 = \"crateresolve2#0.3\";\n-    pub fn f() { assert!(crateresolve2::f() == 30); }\n-}\n-\n-pub fn main() {\n-    a::f();\n-    b::f();\n-    c::f();\n-}"}, {"sha": "cee9e6991c4564f08351b6c9e9bf76315c54832c", "filename": "src/test/run-pass/crateresolve3.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:crateresolve3-1.rs\n-// aux-build:crateresolve3-2.rs\n-\n-// verify able to link with crates with same name but different versions\n-// as long as no name collision on invoked functions.\n-\n-mod a {\n-    extern crate crateresolve3 = \"crateresolve3#0.1\";\n-    pub fn f() { assert!(crateresolve3::f() == 10); }\n-}\n-\n-mod b {\n-    extern crate crateresolve3 = \"crateresolve3#0.2\";\n-    pub fn f() { assert!(crateresolve3::g() == 20); }\n-}\n-\n-pub fn main() {\n-    a::f();\n-    b::f();\n-}"}, {"sha": "c68961522269a5877c39fa07b47e8f9256bb96ca", "filename": "src/test/run-pass/crateresolve4.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:crateresolve4a-1.rs\n-// aux-build:crateresolve4a-2.rs\n-// aux-build:crateresolve4b-1.rs\n-// aux-build:crateresolve4b-2.rs\n-\n-pub mod a {\n-    extern crate crateresolve4b = \"crateresolve4b#0.1\";\n-    pub fn f() { assert!(crateresolve4b::f() == 20); }\n-}\n-\n-pub mod b {\n-    extern crate crateresolve4b = \"crateresolve4b#0.2\";\n-    pub fn f() { assert!(crateresolve4b::g() == 10); }\n-}\n-\n-pub fn main() {\n-    a::f();\n-    b::f();\n-}"}, {"sha": "3f74731090b6c08256db930b4c31c3da55b811b5", "filename": "src/test/run-pass/crateresolve5.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ef5cf1310a7b1e31d0993885d867a6804597ad/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs?ref=b8ef5cf1310a7b1e31d0993885d867a6804597ad", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:crateresolve5-1.rs\n-// aux-build:crateresolve5-2.rs\n-\n-extern crate cr5_1 = \"crateresolve5#0.1\";\n-extern crate cr5_2 = \"crateresolve5#0.2\";\n-\n-pub fn main() {\n-    // Structural types can be used between two versions of the same crate\n-    assert!(cr5_1::struct_nameval().name == cr5_2::struct_nameval().name);\n-    assert!(cr5_1::struct_nameval().val == cr5_2::struct_nameval().val);\n-    // Make sure these are actually two different crates\n-    assert!(cr5_1::f() == 10 && cr5_2::f() == 20);\n-}"}, {"sha": "5dc25c85325c0f20780e82bf4784a91af87da3d1", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -10,7 +10,7 @@\n \n //aux-build:extern-crosscrate-source.rs\n \n-extern crate externcallback = \"externcallback#0.1\";\n+extern crate externcallback;\n \n fn fact(n: uint) -> uint {\n     unsafe {"}, {"sha": "dfed391640516d0cf6e6b90e4d65d5c0d685b2f7", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=c3ef04be5589901e7f3d9428ebe8f1eb2bdca7e4", "patch": "@@ -15,13 +15,11 @@\n #![no_std]\n extern crate std;\n extern crate zed = \"std\";\n-extern crate bar = \"std#0.11.0\";\n \n \n use std::str;\n use x = zed::str;\n mod baz {\n-    pub use bar::str;\n     pub use x = std::str;\n }\n "}]}