{"sha": "19948751bd5487b4f7e8ba6943915a288a9be785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTQ4NzUxYmQ1NDg3YjRmN2U4YmE2OTQzOTE1YTI4OGE5YmU3ODU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-16T12:52:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-24T09:35:34Z"}, "message": "purge DEF_ID_DEBUG TLS variable, and just always print a path, since I\nthink it can no longer panic", "tree": {"sha": "89d0b566e67b3c00fcccd292dcb9f26e723767c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89d0b566e67b3c00fcccd292dcb9f26e723767c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19948751bd5487b4f7e8ba6943915a288a9be785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19948751bd5487b4f7e8ba6943915a288a9be785", "html_url": "https://github.com/rust-lang/rust/commit/19948751bd5487b4f7e8ba6943915a288a9be785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19948751bd5487b4f7e8ba6943915a288a9be785/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0de23de814f8e29475c5d33c03e890512797b8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0de23de814f8e29475c5d33c03e890512797b8e", "html_url": "https://github.com/rust-lang/rust/commit/c0de23de814f8e29475c5d33c03e890512797b8e"}], "stats": {"total": 74, "additions": 30, "deletions": 44}, "files": [{"sha": "2966339f0a4fff4f105de0523545a3856c007448", "filename": "src/librustc/middle/def_id.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19948751bd5487b4f7e8ba6943915a288a9be785/src%2Flibrustc%2Fmiddle%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19948751bd5487b4f7e8ba6943915a288a9be785/src%2Flibrustc%2Fmiddle%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef_id.rs?ref=19948751bd5487b4f7e8ba6943915a288a9be785", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty;\n use syntax::ast::{CrateNum, NodeId};\n-use std::cell::Cell;\n use std::fmt;\n \n #[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n@@ -19,19 +19,26 @@ pub struct DefId {\n     pub node: NodeId,\n }\n \n-fn default_def_id_debug(_: DefId, _: &mut fmt::Formatter) -> fmt::Result { Ok(()) }\n-\n-thread_local!(pub static DEF_ID_DEBUG: Cell<fn(DefId, &mut fmt::Formatter) -> fmt::Result> =\n-                Cell::new(default_def_id_debug));\n-\n impl fmt::Debug for DefId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"DefId {{ krate: {}, node: {} }}\",\n+        try!(write!(f, \"DefId {{ krate: {}, node: {}\",\n                     self.krate, self.node));\n-        DEF_ID_DEBUG.with(|def_id_debug| def_id_debug.get()(*self, f))\n+\n+        // Unfortunately, there seems to be no way to attempt to print\n+        // a path for a def-id, so I'll just make a best effort for now\n+        // and otherwise fallback to just printing the crate/node pair\n+        try!(ty::tls::with_opt(|opt_tcx| {\n+            if let Some(tcx) = opt_tcx {\n+                try!(write!(f, \" => {}\", tcx.item_path_str(*self)));\n+            }\n+            Ok(())\n+        }));\n+\n+        write!(f, \" }}\")\n     }\n }\n \n+\n impl DefId {\n     pub fn local(id: NodeId) -> DefId {\n         DefId { krate: LOCAL_CRATE, node: id }"}, {"sha": "7418d81ed3dce1eae0c6787286a25d79c7807f23", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/19948751bd5487b4f7e8ba6943915a288a9be785/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19948751bd5487b4f7e8ba6943915a288a9be785/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=19948751bd5487b4f7e8ba6943915a288a9be785", "patch": "@@ -1093,8 +1093,6 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Binder<T> {\n }\n \n pub mod tls {\n-    use ast_map;\n-    use middle::def_id::{DefId, DEF_ID_DEBUG, LOCAL_CRATE};\n     use middle::ty;\n     use session::Session;\n \n@@ -1108,28 +1106,6 @@ pub mod tls {\n \n     scoped_thread_local!(static TLS_TCX: ThreadLocalTyCx);\n \n-    fn def_id_debug(def_id: DefId, f: &mut fmt::Formatter) -> fmt::Result {\n-        // Unfortunately, there seems to be no way to attempt to print\n-        // a path for a def-id, so I'll just make a best effort for now\n-        // and otherwise fallback to just printing the crate/node pair\n-        with(|tcx| {\n-            if def_id.krate == LOCAL_CRATE {\n-                match tcx.map.find(def_id.node) {\n-                    Some(ast_map::NodeItem(..)) |\n-                    Some(ast_map::NodeForeignItem(..)) |\n-                    Some(ast_map::NodeImplItem(..)) |\n-                    Some(ast_map::NodeTraitItem(..)) |\n-                    Some(ast_map::NodeVariant(..)) |\n-                    Some(ast_map::NodeStructCtor(..)) => {\n-                        return write!(f, \"{}\", tcx.item_path_str(def_id));\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            Ok(())\n-        })\n-    }\n-\n     fn span_debug(span: codemap::Span, f: &mut fmt::Formatter) -> fmt::Result {\n         with(|tcx| {\n             write!(f, \"{}\", tcx.sess.codemap().span_to_string(span))\n@@ -1138,25 +1114,28 @@ pub mod tls {\n \n     pub fn enter<'tcx, F: FnOnce(&ty::ctxt<'tcx>) -> R, R>(tcx: ty::ctxt<'tcx>, f: F)\n                                                            -> (Session, R) {\n-        let result = DEF_ID_DEBUG.with(|def_id_dbg| {\n-            codemap::SPAN_DEBUG.with(|span_dbg| {\n-                let original_def_id_debug = def_id_dbg.get();\n-                def_id_dbg.set(def_id_debug);\n-                let original_span_debug = span_dbg.get();\n-                span_dbg.set(span_debug);\n-                let tls_ptr = &tcx as *const _ as *const ThreadLocalTyCx;\n-                let result = TLS_TCX.set(unsafe { &*tls_ptr }, || f(&tcx));\n-                def_id_dbg.set(original_def_id_debug);\n-                span_dbg.set(original_span_debug);\n-                result\n-            })\n+        let result = codemap::SPAN_DEBUG.with(|span_dbg| {\n+            let original_span_debug = span_dbg.get();\n+            span_dbg.set(span_debug);\n+            let tls_ptr = &tcx as *const _ as *const ThreadLocalTyCx;\n+            let result = TLS_TCX.set(unsafe { &*tls_ptr }, || f(&tcx));\n+            span_dbg.set(original_span_debug);\n+            result\n         });\n         (tcx.sess, result)\n     }\n \n     pub fn with<F: FnOnce(&ty::ctxt) -> R, R>(f: F) -> R {\n         TLS_TCX.with(|tcx| f(unsafe { &*(tcx as *const _ as *const ty::ctxt) }))\n     }\n+\n+    pub fn with_opt<F: FnOnce(Option<&ty::ctxt>) -> R, R>(f: F) -> R {\n+        if TLS_TCX.is_set() {\n+            with(|v| f(Some(v)))\n+        } else {\n+            f(None)\n+        }\n+    }\n }\n \n // Flags that we track on types. These flags are propagated upwards"}]}