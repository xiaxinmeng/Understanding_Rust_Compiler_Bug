{"sha": "e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ODJlMWYzNzE4M2I3YWQ3NzMxY2YwZmJiNDc0YjU1ZDE5OWE5ZDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-19T19:04:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-19T19:05:19Z"}, "message": "Tidy", "tree": {"sha": "f5fb70de9d24ddc4028eb2e8f04912790707eb9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5fb70de9d24ddc4028eb2e8f04912790707eb9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "html_url": "https://github.com/rust-lang/rust/commit/e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b57611d10c31a7bfdc3703fa938277caaa87f3a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b57611d10c31a7bfdc3703fa938277caaa87f3a7", "html_url": "https://github.com/rust-lang/rust/commit/b57611d10c31a7bfdc3703fa938277caaa87f3a7"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "06d2aaaca352f5e4f1be8d89ce248b15b20cd819", "filename": "src/libcore/rt/io/file.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Ffile.rs?ref=e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "patch": "@@ -14,10 +14,10 @@ use super::{Reader, Writer, Seekable, Closeable};\n use super::{IoError, SeekStyle};\n \n /// Open a file with the default FileMode and FileAccess\n-/// # TODO are there sane defaults here?\n+/// # XXX are there sane defaults here?\n pub fn open_file<P: PathLike>(_path: &P) -> FileStream { fail!() }\n \n-/// # TODO\n+/// # XXX\n /// * Ugh, this is ridiculous. What is the best way to represent these options?\n enum FileMode {\n     /// Opens an existing file. IoError if file does not exist.\n@@ -33,7 +33,7 @@ enum FileMode {\n     /// Opens an existing file or creates a new one, truncating it to 0 bytes.\n     CreateOrTruncate,\n }\n- \n+\n enum FileAccess {\n     Read,\n     Write,"}, {"sha": "fcba4b1d502f93d35d4a969247a9ad4c07edb3d1", "filename": "src/libcore/rt/io/mem.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmem.rs?ref=e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "patch": "@@ -10,7 +10,7 @@\n \n //! Readers and Writers for in-memory buffers\n //!\n-//! # TODO\n+//! # XXX\n //!\n //! * Should probably have something like this for strings.\n //! * Should they implement Closable? Would take extra state.\n@@ -61,7 +61,7 @@ impl Decorator<~[u8]> for MemWriter {\n     }\n }\n \n-/// Reads from an owned byte vector \n+/// Reads from an owned byte vector\n pub struct MemReader {\n     buf: ~[u8],\n     pos: uint\n@@ -109,13 +109,13 @@ impl Decorator<~[u8]> for MemReader {\n     }\n }\n \n- \n+\n /// Writes to a fixed-size byte slice\n struct BufWriter<'self> {\n     buf: &'self mut [u8],\n     pos: uint\n }\n- \n+\n impl<'self> BufWriter<'self> {\n     pub fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a> {\n         BufWriter {\n@@ -138,7 +138,7 @@ impl<'self> Seekable for BufWriter<'self> {\n }\n \n \n-/// Reads from a fixed-size byte slice \n+/// Reads from a fixed-size byte slice\n struct BufReader<'self> {\n     buf: &'self [u8],\n     pos: uint"}, {"sha": "aed48ee7353a64b55ce9333cb0c3c4c7d92e2d6e", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "patch": "@@ -11,7 +11,7 @@\n /*! Synchronous I/O\n \n This module defines the Rust interface for synchronous I/O.\n-It supports file access, \n+It supports file access,\n \n This will likely live in core::io, not core::rt::io.\n \n@@ -73,7 +73,7 @@ Some I/O things don't belong in core\n     - http\n   - flate\n \n-# TODO\n+# XXX\n \n * Should default constructors take `Path` or `&str`? `Path` makes simple cases verbose.\n   Overloading would be nice.\n@@ -149,10 +149,10 @@ mod misc;\n pub mod blocking {\n     /// Posix file I/O\n     pub mod file;\n-    /// # TODO - implement this\n+    /// # XXX - implement this\n     pub mod stdio { }\n     /// Sockets\n-    /// # TODO - implement this\n+    /// # XXX - implement this\n     pub mod net {\n         pub mod tcp { }\n         pub mod udp { }\n@@ -164,7 +164,7 @@ pub mod blocking {\n \n /// The type passed to I/O condition handlers to indicate error\n ///\n-/// # TODO\n+/// # XXX\n ///\n /// Is something like this sufficient? It's kind of archaic\n pub struct IoError {\n@@ -195,7 +195,7 @@ pub trait Reader {\n     ///\n     /// Raises the `io_error` condition on error, then returns `None`.\n     ///\n-    /// # TODO\n+    /// # XXX\n     ///\n     /// This doesn't take a `len` argument like the old `read`.\n     /// Will people often need to slice their vectors to call this\n@@ -211,7 +211,7 @@ pub trait Reader {\n     ///         println(reader.read_line());\n     ///     }\n     ///\n-    /// # TODO\n+    /// # XXX\n     ///\n     /// What does this return if the Reader is in an error state?\n     fn eof(&mut self) -> bool;\n@@ -249,7 +249,7 @@ pub enum SeekStyle {\n     SeekCur,\n }\n \n-/// # TODO\n+/// # XXX\n /// * Are `u64` and `i64` the right choices?\n pub trait Seekable {\n     fn tell(&self) -> u64;\n@@ -262,13 +262,13 @@ pub trait Seekable {\n /// uses decorators to add functionality like compression and encryption to I/O\n /// streams.\n ///\n-/// # TODO\n+/// # XXX\n ///\n /// Is this worth having a trait for? May be overkill\n pub trait Decorator<T> {\n     /// Destroy the decorator and extract the decorated value\n     ///\n-    /// # TODO\n+    /// # XXX\n     ///\n     /// Because this takes `self' one could never 'undecorate' a Reader/Writer\n     /// that has been boxed. Is that ok? This feature is mostly useful for"}, {"sha": "c693cfaab678bf2db3f931c18860f7db85343d75", "filename": "src/libcore/rt/io/net/http.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Fnet%2Fhttp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Fnet%2Fhttp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Fhttp.rs?ref=e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "patch": "@@ -17,7 +17,7 @@ struct HttpServer;\n #[cfg(test)]\n mod test {\n     use unstable::run_in_bare_thread;\n-    \n+\n     #[test] #[ignore]\n     fn smoke_test() {\n         do run_in_bare_thread {"}, {"sha": "cff224a80bee283cd2730af0a8ae5ada5ba0e9d1", "filename": "src/libcore/rt/io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782e1f37183b7ad7731cf0fbb474b55d199a9d5/src%2Flibcore%2Frt%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Futil.rs?ref=e782e1f37183b7ad7731cf0fbb474b55d199a9d5", "patch": "@@ -10,8 +10,8 @@\n \n //! Utility mixins that apply to all Readers and Writers\n \n-// TODO: Not sure how this should be structured\n-// TODO: Iteration should probably be considered seperately\n+// XXX: Not sure how this should be structured\n+// XXX: Iteration should probably be considered seperately\n \n pub trait ReaderUtil {\n "}]}