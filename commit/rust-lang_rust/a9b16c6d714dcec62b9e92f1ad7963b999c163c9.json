{"sha": "a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjE2YzZkNzE0ZGNlYzYyYjllOTJmMWFkNzk2M2I5OTljMTYzYzk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-14T05:42:32Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-14T05:42:32Z"}, "message": "Improve error and help messages", "tree": {"sha": "6122eb166b1ba4b35254758d069321dcdf46d4c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6122eb166b1ba4b35254758d069321dcdf46d4c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "html_url": "https://github.com/rust-lang/rust/commit/a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d00ca112020680928aadb221aad13bd52634823b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00ca112020680928aadb221aad13bd52634823b", "html_url": "https://github.com/rust-lang/rust/commit/d00ca112020680928aadb221aad13bd52634823b"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "b64f18d24832f7cb2441ef5ca4524d8145268ce3", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -225,7 +225,7 @@ fn report_bin_hex_error(\n                 (t.name_str(), actually.to_string())\n             }\n         };\n-        let mut err = lint.build(&format!(\"literal out of range for {}\", t));\n+        let mut err = lint.build(&format!(\"literal out of range for `{}`\", t));\n         err.note(&format!(\n             \"the literal `{}` (decimal `{}`) does not fit into \\\n              the type `{}` and will become `{}{}`\",\n@@ -238,12 +238,12 @@ fn report_bin_hex_error(\n                 let (sans_suffix, _) = repr_str.split_at(pos);\n                 err.span_suggestion(\n                     expr.span,\n-                    &format!(\"consider using `{}` instead\", sugg_ty),\n+                    &format!(\"consider using the type `{}` instead\", sugg_ty),\n                     format!(\"{}{}\", sans_suffix, sugg_ty),\n                     Applicability::MachineApplicable,\n                 );\n             } else {\n-                err.help(&format!(\"consider using `{}` instead\", sugg_ty));\n+                err.help(&format!(\"consider using the type `{}` instead\", sugg_ty));\n             }\n         }\n         err.emit();\n@@ -345,7 +345,7 @@ fn lint_int_literal<'tcx>(\n             if let Some(sugg_ty) =\n                 get_type_suggestion(&cx.typeck_results().node_type(e.hir_id), v, negative)\n             {\n-                err.help(&format!(\"consider using `{}` instead\", sugg_ty));\n+                err.help(&format!(\"consider using the type `{}` instead\", sugg_ty));\n             }\n             err.emit();\n         });"}, {"sha": "43830679535de59b8bf79dac384098adb20f398e", "filename": "src/test/ui/enum/enum-discrim-too-small2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-too-small2.stderr?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `223` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `i16`\n   --> $DIR/enum-discrim-too-small2.rs:15:12\n@@ -19,7 +19,7 @@ LL |     Ci16 = 55555,\n    |            ^^^^^\n    |\n    = note: the literal `55555` does not fit into the type `i16` whose range is `-32768..=32767`\n-   = help: consider using `u16` instead\n+   = help: consider using the type `u16` instead\n \n error: literal out of range for `i32`\n   --> $DIR/enum-discrim-too-small2.rs:22:12\n@@ -28,7 +28,7 @@ LL |     Ci32 = 3_000_000_000,\n    |            ^^^^^^^^^^^^^\n    |\n    = note: the literal `3_000_000_000` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n-   = help: consider using `u32` instead\n+   = help: consider using the type `u32` instead\n \n error: literal out of range for `i64`\n   --> $DIR/enum-discrim-too-small2.rs:29:12\n@@ -37,7 +37,7 @@ LL |     Ci64 = 9223372036854775809,\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `9223372036854775809` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n-   = help: consider using `u64` instead\n+   = help: consider using the type `u64` instead\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e9725a027d379fce2ef3304e11ab7c772e7543d3", "filename": "src/test/ui/issues/issue-79744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Fissues%2Fissue-79744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Fissues%2Fissue-79744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-79744.rs?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let elem = 6i8;\n     let e2 = 230;\n     //~^ ERROR literal out of range for `i8`\n-    //~| HELP consider using `u8` instead\n+    //~| HELP consider using the type `u8` instead\n \n     let mut vec = Vec::new();\n "}, {"sha": "6f6dd44d2369e644c957e9d86c583561294c6248", "filename": "src/test/ui/issues/issue-79744.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Fissues%2Fissue-79744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Fissues%2Fissue-79744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-79744.stderr?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -6,7 +6,7 @@ LL |     let e2 = 230;\n    |\n    = note: `#[deny(overflowing_literals)]` on by default\n    = note: the literal `230` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n error: aborting due to previous error\n "}, {"sha": "3562cb440a661403abfd8c5439e955fba75f7fc7", "filename": "src/test/ui/lint/lint-type-limits2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits2.stderr?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -18,7 +18,7 @@ note: the lint level is defined here\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "823d1a4c76fd6407939e7d56a73aa8cf40b73dc5", "filename": "src/test/ui/lint/lint-type-limits3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-limits3.stderr?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -18,7 +18,7 @@ note: the lint level is defined here\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `200` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "1bb1ec5477609bbd62f94b1f5c9816bb1fedd1ca", "filename": "src/test/ui/lint/lint-type-overflow.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow.stderr?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -26,7 +26,7 @@ LL |     let x1: i8 = 128;\n    |                  ^^^\n    |\n    = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:18:19\n@@ -35,7 +35,7 @@ LL |     let x3: i8 = -129;\n    |                   ^^^\n    |\n    = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `i16` instead\n+   = help: consider using the type `i16` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:19:19\n@@ -44,7 +44,7 @@ LL |     let x3: i8 = -(129);\n    |                   ^^^^^\n    |\n    = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `i16` instead\n+   = help: consider using the type `i16` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:20:20\n@@ -53,7 +53,7 @@ LL |     let x3: i8 = -{129};\n    |                    ^^^\n    |\n    = note: the literal `129` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:22:10\n@@ -62,7 +62,7 @@ LL |     test(1000);\n    |          ^^^^\n    |\n    = note: the literal `1000` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `i16` instead\n+   = help: consider using the type `i16` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:24:13\n@@ -71,7 +71,7 @@ LL |     let x = 128_i8;\n    |             ^^^^^^\n    |\n    = note: the literal `128_i8` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `i8`\n   --> $DIR/lint-type-overflow.rs:28:14\n@@ -80,7 +80,7 @@ LL |     let x = -129_i8;\n    |              ^^^^^^\n    |\n    = note: the literal `129_i8` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `i16` instead\n+   = help: consider using the type `i16` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:32:18\n@@ -89,7 +89,7 @@ LL |     let x: i32 = 2147483648;\n    |                  ^^^^^^^^^^\n    |\n    = note: the literal `2147483648` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n-   = help: consider using `u32` instead\n+   = help: consider using the type `u32` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:33:13\n@@ -98,7 +98,7 @@ LL |     let x = 2147483648_i32;\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: the literal `2147483648_i32` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n-   = help: consider using `u32` instead\n+   = help: consider using the type `u32` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:36:19\n@@ -107,7 +107,7 @@ LL |     let x: i32 = -2147483649;\n    |                   ^^^^^^^^^^\n    |\n    = note: the literal `2147483649` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n-   = help: consider using `i64` instead\n+   = help: consider using the type `i64` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:37:14\n@@ -116,7 +116,7 @@ LL |     let x = -2147483649_i32;\n    |              ^^^^^^^^^^^^^^\n    |\n    = note: the literal `2147483649_i32` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n-   = help: consider using `i64` instead\n+   = help: consider using the type `i64` instead\n \n error: literal out of range for `i32`\n   --> $DIR/lint-type-overflow.rs:38:13\n@@ -125,7 +125,7 @@ LL |     let x = 2147483648;\n    |             ^^^^^^^^^^\n    |\n    = note: the literal `2147483648` does not fit into the type `i32` whose range is `-2147483648..=2147483647`\n-   = help: consider using `u32` instead\n+   = help: consider using the type `u32` instead\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:40:13\n@@ -134,7 +134,7 @@ LL |     let x = 9223372036854775808_i64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `9223372036854775808_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n-   = help: consider using `u64` instead\n+   = help: consider using the type `u64` instead\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:42:13\n@@ -143,7 +143,7 @@ LL |     let x = 18446744073709551615_i64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `18446744073709551615_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n-   = help: consider using `u64` instead\n+   = help: consider using the type `u64` instead\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:43:19\n@@ -152,7 +152,7 @@ LL |     let x: i64 = -9223372036854775809;\n    |                   ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `9223372036854775809` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n-   = help: consider using `i128` instead\n+   = help: consider using the type `i128` instead\n \n error: literal out of range for `i64`\n   --> $DIR/lint-type-overflow.rs:44:14\n@@ -161,7 +161,7 @@ LL |     let x = -9223372036854775809_i64;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `9223372036854775809_i64` does not fit into the type `i64` whose range is `-9223372036854775808..=9223372036854775807`\n-   = help: consider using `i128` instead\n+   = help: consider using the type `i128` instead\n \n error: aborting due to 18 previous errors\n "}, {"sha": "3d40cdf96efdb0937b7ce1c26694c908177f2f1c", "filename": "src/test/ui/lint/lint-type-overflow2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-type-overflow2.stderr?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `128` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n error: literal out of range for `f32`\n   --> $DIR/lint-type-overflow2.rs:9:14"}, {"sha": "6234b794c1f48ce8a053609b486cf69303efe974", "filename": "src/test/ui/lint/type-overflow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -7,16 +7,16 @@ fn main() {\n     let ok = 0b1000_0001; // should be ok -> i32\n     let ok = 0b0111_1111i8; // should be ok -> 127i8\n \n-    let fail = 0b1000_0001i8; //~WARNING literal out of range for i8\n+    let fail = 0b1000_0001i8; //~WARNING literal out of range for `i8`\n \n-    let fail = 0x8000_0000_0000_0000i64; //~WARNING literal out of range for i64\n+    let fail = 0x8000_0000_0000_0000i64; //~WARNING literal out of range for `i64`\n \n-    let fail = 0x1_FFFF_FFFFu32; //~WARNING literal out of range for u32\n+    let fail = 0x1_FFFF_FFFFu32; //~WARNING literal out of range for `u32`\n \n     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n-    //~^ WARNING literal out of range for i128\n+    //~^ WARNING literal out of range for `i128`\n \n-    let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for i32\n+    let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for `i32`\n \n-    let fail = -0b1111_1111i8; //~WARNING literal out of range for i8\n+    let fail = -0b1111_1111i8; //~WARNING literal out of range for `i8`\n }"}, {"sha": "521223e325650b637d5f679d8b620aa348192b50", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9b16c6d714dcec62b9e92f1ad7963b999c163c9/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=a9b16c6d714dcec62b9e92f1ad7963b999c163c9", "patch": "@@ -10,55 +10,55 @@ note: the lint level is defined here\n LL | #![warn(overflowing_literals)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = note: the literal `255i8` does not fit into the type `i8` whose range is `-128..=127`\n-   = help: consider using `u8` instead\n+   = help: consider using the type `u8` instead\n \n-warning: literal out of range for i8\n+warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:10:16\n    |\n LL |     let fail = 0b1000_0001i8;\n-   |                ^^^^^^^^^^^^^ help: consider using `u8` instead: `0b1000_0001u8`\n+   |                ^^^^^^^^^^^^^ help: consider using the type `u8` instead: `0b1000_0001u8`\n    |\n    = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into the type `i8` and will become `-127i8`\n \n-warning: literal out of range for i64\n+warning: literal out of range for `i64`\n   --> $DIR/type-overflow.rs:12:16\n    |\n LL |     let fail = 0x8000_0000_0000_0000i64;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x8000_0000_0000_0000u64`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using the type `u64` instead: `0x8000_0000_0000_0000u64`\n    |\n    = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into the type `i64` and will become `-9223372036854775808i64`\n \n-warning: literal out of range for u32\n+warning: literal out of range for `u32`\n   --> $DIR/type-overflow.rs:14:16\n    |\n LL |     let fail = 0x1_FFFF_FFFFu32;\n-   |                ^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x1_FFFF_FFFFu64`\n+   |                ^^^^^^^^^^^^^^^^ help: consider using the type `u64` instead: `0x1_FFFF_FFFFu64`\n    |\n    = note: the literal `0x1_FFFF_FFFFu32` (decimal `8589934591`) does not fit into the type `u32` and will become `4294967295u32`\n \n-warning: literal out of range for i128\n+warning: literal out of range for `i128`\n   --> $DIR/type-overflow.rs:16:22\n    |\n LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into the type `i128` and will become `-170141183460469231731687303715884105728i128`\n-   = help: consider using `u128` instead\n+   = help: consider using the type `u128` instead\n \n-warning: literal out of range for i32\n+warning: literal out of range for `i32`\n   --> $DIR/type-overflow.rs:19:16\n    |\n LL |     let fail = 0x8FFF_FFFF_FFFF_FFFE;\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into the type `i32` and will become `-2i32`\n-   = help: consider using `i128` instead\n+   = help: consider using the type `i128` instead\n \n-warning: literal out of range for i8\n+warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:21:17\n    |\n LL |     let fail = -0b1111_1111i8;\n-   |                 ^^^^^^^^^^^^^ help: consider using `i16` instead: `0b1111_1111i16`\n+   |                 ^^^^^^^^^^^^^ help: consider using the type `i16` instead: `0b1111_1111i16`\n    |\n    = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into the type `i8` and will become `-1i8`\n "}]}