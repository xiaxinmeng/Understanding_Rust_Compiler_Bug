{"sha": "a775004322df90a564c58e702364c10e6f0192a4", "node_id": "C_kwDOAAsO6NoAKGE3NzUwMDQzMjJkZjkwYTU2NGM1OGU3MDIzNjRjMTBlNmYwMTkyYTQ", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-11-06T06:43:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-18T22:46:35Z"}, "message": "Migrate diagnostics list output to use icu list formatter.", "tree": {"sha": "e642e5db8a9478eedaa2735855dbfab7db79d483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e642e5db8a9478eedaa2735855dbfab7db79d483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a775004322df90a564c58e702364c10e6f0192a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a775004322df90a564c58e702364c10e6f0192a4", "html_url": "https://github.com/rust-lang/rust/commit/a775004322df90a564c58e702364c10e6f0192a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a775004322df90a564c58e702364c10e6f0192a4/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d3bda08c0c65c455d8349031f42f074ad42b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d3bda08c0c65c455d8349031f42f074ad42b28", "html_url": "https://github.com/rust-lang/rust/commit/42d3bda08c0c65c455d8349031f42f074ad42b28"}], "stats": {"total": 324, "additions": 296, "deletions": 28}, "files": [{"sha": "c9a6a40d04b8176f48fa3b3f1c13fabd12c4506e", "filename": "Cargo.lock", "status": "modified", "additions": 174, "deletions": 2, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/a775004322df90a564c58e702364c10e6f0192a4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a775004322df90a564c58e702364c10e6f0192a4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a775004322df90a564c58e702364c10e6f0192a4", "patch": "@@ -211,7 +211,7 @@ checksum = \"ba3569f383e8f1598449f1a423e72e99569137b47740b1da11ef19af3d5c3223\"\n dependencies = [\n  \"lazy_static\",\n  \"memchr\",\n- \"regex-automata\",\n+ \"regex-automata 0.1.10\",\n ]\n \n [[package]]\n@@ -1707,6 +1707,73 @@ version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3c1ad908cc71012b7bea4d0c53ba96a8cba9962f048fa68d143376143d863b7a\"\n \n+[[package]]\n+name = \"icu_list\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c40218275f081c4493f190357c5395647b06734c2dc3dcb41cc099a0f60168b1\"\n+dependencies = [\n+ \"displaydoc\",\n+ \"icu_locid\",\n+ \"icu_provider\",\n+ \"regex-automata 0.2.0\",\n+ \"writeable\",\n+ \"zerovec\",\n+]\n+\n+[[package]]\n+name = \"icu_locid\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"34b3de5d99a0e275fe6193b9586dbf37364daebc0d39c89b5cf8376a53b789e8\"\n+dependencies = [\n+ \"displaydoc\",\n+ \"litemap\",\n+ \"tinystr\",\n+ \"writeable\",\n+ \"zerovec\",\n+]\n+\n+[[package]]\n+name = \"icu_provider\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2f911086e3c521a8a824d4f8bfd87769645ced2f07ff913b521c0d793be07100\"\n+dependencies = [\n+ \"displaydoc\",\n+ \"icu_locid\",\n+ \"icu_provider_macros\",\n+ \"stable_deref_trait\",\n+ \"writeable\",\n+ \"yoke\",\n+ \"zerofrom\",\n+ \"zerovec\",\n+]\n+\n+[[package]]\n+name = \"icu_provider_adapters\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"980c71d8a91b246ebbb97847178a4b816eea39d1d550c70ee566384555bb6545\"\n+dependencies = [\n+ \"icu_locid\",\n+ \"icu_provider\",\n+ \"tinystr\",\n+ \"yoke\",\n+ \"zerovec\",\n+]\n+\n+[[package]]\n+name = \"icu_provider_macros\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"38cf6f5b65cf81f0b4298da647101acbfe6ae0e25263f92bd7a22597e9d6d606\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n [[package]]\n name = \"idna\"\n version = \"0.2.0\"\n@@ -2034,6 +2101,12 @@ dependencies = [\n  \"walkdir\",\n ]\n \n+[[package]]\n+name = \"litemap\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f34a3f4798fac63fb48cf277eefa38f94d3443baff555bb98e4f56bc9092368e\"\n+\n [[package]]\n name = \"lld-wrapper\"\n version = \"0.1.0\"\n@@ -2100,7 +2173,7 @@ version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\n dependencies = [\n- \"regex-automata\",\n+ \"regex-automata 0.1.10\",\n ]\n \n [[package]]\n@@ -2927,6 +3000,15 @@ dependencies = [\n  \"regex-syntax\",\n ]\n \n+[[package]]\n+name = \"regex-automata\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e9368763f5a9b804326f3af749e16f9abf378d227bcdee7634b13d8f17793782\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"regex-syntax\"\n version = \"0.6.26\"\n@@ -3202,6 +3284,16 @@ dependencies = [\n  \"rustc_span\",\n ]\n \n+[[package]]\n+name = \"rustc_baked_icu_data\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"icu_list\",\n+ \"icu_locid\",\n+ \"icu_provider\",\n+ \"litemap\",\n+]\n+\n [[package]]\n name = \"rustc_borrowck\"\n version = \"0.0.0\"\n@@ -3422,13 +3514,18 @@ version = \"0.0.0\"\n dependencies = [\n  \"fluent-bundle\",\n  \"fluent-syntax\",\n+ \"icu_list\",\n+ \"icu_locid\",\n+ \"icu_provider_adapters\",\n  \"intl-memoizer\",\n+ \"rustc_baked_icu_data\",\n  \"rustc_data_structures\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_span\",\n  \"tracing\",\n  \"unic-langid\",\n+ \"writeable\",\n ]\n \n [[package]]\n@@ -4934,6 +5031,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f8aeafdfd935e4a7fe16a91ab711fa52d54df84f9c8f7ca5837a9d1d902ef4c2\"\n dependencies = [\n  \"displaydoc\",\n+ \"zerovec\",\n ]\n \n [[package]]\n@@ -5546,6 +5644,12 @@ version = \"0.42.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5\"\n \n+[[package]]\n+name = \"writeable\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f8e6ab4f5da1b24daf2c590cfac801bacb27b15b4f050e84eb60149ea726f06b\"\n+\n [[package]]\n name = \"xattr\"\n version = \"0.2.2\"\n@@ -5598,3 +5702,71 @@ checksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\n dependencies = [\n  \"winapi\",\n ]\n+\n+[[package]]\n+name = \"yoke\"\n+version = \"0.6.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1fe1d55ca72c32d573bfbd5cb2f0ca65a497854c44762957a6d3da96041a5184\"\n+dependencies = [\n+ \"serde\",\n+ \"stable_deref_trait\",\n+ \"yoke-derive\",\n+ \"zerofrom\",\n+]\n+\n+[[package]]\n+name = \"yoke-derive\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1346e4cd025ae818b88566eac7eb65ab33a994ea55f355c86889af2e7e56b14e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"synstructure\",\n+]\n+\n+[[package]]\n+name = \"zerofrom\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"79e9355fccf72b04b7deaa99ce7a0f6630530acf34045391b74460fcd714de54\"\n+dependencies = [\n+ \"zerofrom-derive\",\n+]\n+\n+[[package]]\n+name = \"zerofrom-derive\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2e8aa86add9ddbd2409c1ed01e033cd457d79b1b1229b64922c25095c595e829\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"synstructure\",\n+]\n+\n+[[package]]\n+name = \"zerovec\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9d919a74c17749ccb17beaf6405562e413cd94e98ba52ca1e64bbe7eefbd8b8\"\n+dependencies = [\n+ \"yoke\",\n+ \"zerofrom\",\n+ \"zerovec-derive\",\n+]\n+\n+[[package]]\n+name = \"zerovec-derive\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"490e5f878c2856225e884c35927e7ea6db3c24cdb7229b72542c7526ad7ed49e\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"synstructure\",\n+]"}, {"sha": "6fe7ab8ea0da18472f552f36f3bef59d96818878", "filename": "compiler/rustc_baked_icu_data/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_baked_icu_data%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_baked_icu_data%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2FCargo.toml?ref=a775004322df90a564c58e702364c10e6f0192a4", "patch": "@@ -5,5 +5,6 @@ edition = \"2021\"\n \n [dependencies]\n icu_list = \"1.0.0\"\n+icu_locid = \"1.0.0\"\n icu_provider = \"1.0.1\"\n litemap = \"0.6.0\""}, {"sha": "76c9bc97346f57dcb5700ea6f67f85e88cd7ef6c", "filename": "compiler/rustc_baked_icu_data/src/lib.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_baked_icu_data%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_baked_icu_data%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Flib.rs?ref=a775004322df90a564c58e702364c10e6f0192a4", "patch": "@@ -2,16 +2,30 @@\n //!\n #![allow(elided_lifetimes_in_paths)]\n \n-// generated with:\n-// ```text\n-// icu4x-datagen -W --pretty --fingerprint --use-separate-crates --cldr-tag latest --icuexport-tag latest \\\n-// --format mod -l en es fr it ja pt ru tr zh-Hans zh-Hant -k list/and@1 -o src/data\n-// ```\n+/* generated with:\n+```text\n+icu4x-datagen -W --pretty --fingerprint --use-separate-crates --cldr-tag latest --icuexport-tag latest \\\n+--format mod -l en es fr it ja pt ru tr zh-Hans zh-Hant -k list/and@1 -o src/data\n+```\n+*/\n \n mod data;\n \n pub use data::BakedDataProvider;\n \n-pub fn baked_data_provider() -> BakedDataProvider {\n+pub const fn baked_data_provider() -> BakedDataProvider {\n     data::BakedDataProvider\n }\n+\n+pub mod supported_locales {\n+    pub const EN: icu_locid::Locale = icu_locid::locale!(\"en\");\n+    pub const ES: icu_locid::Locale = icu_locid::locale!(\"es\");\n+    pub const FR: icu_locid::Locale = icu_locid::locale!(\"fr\");\n+    pub const IT: icu_locid::Locale = icu_locid::locale!(\"it\");\n+    pub const JA: icu_locid::Locale = icu_locid::locale!(\"ja\");\n+    pub const PT: icu_locid::Locale = icu_locid::locale!(\"pt\");\n+    pub const RU: icu_locid::Locale = icu_locid::locale!(\"ru\");\n+    pub const TR: icu_locid::Locale = icu_locid::locale!(\"tr\");\n+    pub const ZH_HANS: icu_locid::Locale = icu_locid::locale!(\"zh-Hans\");\n+    pub const ZH_HANT: icu_locid::Locale = icu_locid::locale!(\"zh-Hant\");\n+}"}, {"sha": "bb6edfb0903253a3bea25475d0c9d7c12cfed9c9", "filename": "compiler/rustc_error_messages/Cargo.toml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_error_messages%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_error_messages%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2FCargo.toml?ref=a775004322df90a564c58e702364c10e6f0192a4", "patch": "@@ -9,9 +9,14 @@ edition = \"2021\"\n fluent-bundle = \"0.15.2\"\n fluent-syntax = \"0.11\"\n intl-memoizer = \"0.5.1\"\n+rustc_baked_icu_data = { path = \"../rustc_baked_icu_data\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n tracing = \"0.1\"\n unic-langid = { version = \"0.9.0\", features = [\"macros\"] }\n+icu_list = \"1.0.0\"\n+writeable = \"0.5.0\"\n+icu_locid = \"1.0.0\"\n+icu_provider_adapters = \"1.0.0\""}, {"sha": "d026f5c8daf30a449a63ec74163ae91f17d33df7", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 90, "deletions": 2, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=a775004322df90a564c58e702364c10e6f0192a4", "patch": "@@ -10,6 +10,7 @@ extern crate tracing;\n \n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;\n+use icu_provider_adapters::fallback::{LocaleFallbackProvider, LocaleFallbacker};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::{fluent_messages, Decodable, Encodable};\n use rustc_span::Span;\n@@ -30,8 +31,7 @@ use intl_memoizer::concurrent::IntlLangMemoizer;\n #[cfg(not(parallel_compiler))]\n use intl_memoizer::IntlLangMemoizer;\n \n-pub use fluent_bundle::{self, FluentArgs, FluentError, FluentValue};\n-\n+pub use fluent_bundle::{self, types::FluentType, FluentArgs, FluentError, FluentValue};\n pub use unic_langid::{langid, LanguageIdentifier};\n \n // Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module.\n@@ -541,3 +541,91 @@ impl From<Vec<Span>> for MultiSpan {\n         MultiSpan::from_spans(spans)\n     }\n }\n+\n+fn icu_locale_from_unic_langid(lang: LanguageIdentifier) -> Option<icu_locid::Locale> {\n+    icu_locid::Locale::try_from_bytes(lang.to_string().as_bytes()).ok()\n+}\n+\n+pub fn fluent_value_from_str_list_sep_by_and<'source>(\n+    l: Vec<Cow<'source, str>>,\n+) -> FluentValue<'source> {\n+    // Fluent requires 'static value here for its AnyEq usages.\n+    #[derive(Clone, PartialEq, Debug)]\n+    struct FluentStrListSepByAnd(Vec<String>);\n+\n+    impl FluentType for FluentStrListSepByAnd {\n+        fn duplicate(&self) -> Box<dyn FluentType + Send> {\n+            Box::new(self.clone())\n+        }\n+\n+        fn as_string(&self, intls: &intl_memoizer::IntlLangMemoizer) -> Cow<'static, str> {\n+            let result = intls\n+                .with_try_get::<MemoizableListFormatter, _, _>((), |list_formatter| {\n+                    list_formatter.format_to_string(self.0.iter())\n+                })\n+                .unwrap();\n+            Cow::Owned(result)\n+        }\n+\n+        #[cfg(not(parallel_compiler))]\n+        fn as_string_threadsafe(\n+            &self,\n+            _intls: &intl_memoizer::concurrent::IntlLangMemoizer,\n+        ) -> Cow<'static, str> {\n+            unreachable!(\"`as_string_threadsafe` is not used in non-parallel rustc\")\n+        }\n+\n+        #[cfg(parallel_compiler)]\n+        fn as_string_threadsafe(\n+            &self,\n+            intls: &intl_memoizer::concurrent::IntlLangMemoizer,\n+        ) -> Cow<'static, str> {\n+            let result = intls\n+                .with_try_get::<MemoizableListFormatter, _, _>((), |list_formatter| {\n+                    list_formatter.format_to_string(self.0.iter())\n+                })\n+                .unwrap();\n+            Cow::Owned(result)\n+        }\n+    }\n+\n+    struct MemoizableListFormatter(icu_list::ListFormatter);\n+\n+    impl std::ops::Deref for MemoizableListFormatter {\n+        type Target = icu_list::ListFormatter;\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+\n+    impl intl_memoizer::Memoizable for MemoizableListFormatter {\n+        type Args = ();\n+        type Error = ();\n+\n+        fn construct(lang: LanguageIdentifier, _args: Self::Args) -> Result<Self, Self::Error>\n+        where\n+            Self: Sized,\n+        {\n+            let baked_data_provider = rustc_baked_icu_data::baked_data_provider();\n+            let locale_fallbacker = LocaleFallbacker::try_new_unstable(&baked_data_provider);\n+            let data_provider = LocaleFallbackProvider::new_with_fallbacker(\n+                &baked_data_provider,\n+                locale_fallbacker,\n+            );\n+            let locale = icu_locale_from_unic_langid(lang)\n+                .unwrap_or_else(|| rustc_baked_icu_data::supported_locales::EN);\n+            let list_formatter = icu_list::ListFormatter::try_new_and_with_length_unstable(\n+                &data_provider,\n+                &locale.into(),\n+                icu_list::ListLength::Wide,\n+            )\n+            .expect(\"Failed to create list formatter\");\n+\n+            Ok(MemoizableListFormatter(list_formatter))\n+        }\n+    }\n+\n+    let l = l.into_iter().map(|x| x.into_owned()).collect();\n+\n+    FluentValue::Custom(Box::new(FluentStrListSepByAnd(l)))\n+}"}, {"sha": "2c1d0037aa64f75f8532def609da85398d770547", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=a775004322df90a564c58e702364c10e6f0192a4", "patch": "@@ -4,6 +4,7 @@ use crate::{\n     SubdiagnosticMessage, Substitution, SubstitutionPart, SuggestionStyle,\n };\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_error_messages::fluent_value_from_str_list_sep_by_and;\n use rustc_error_messages::FluentValue;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n@@ -34,6 +35,7 @@ pub type DiagnosticArgName<'source> = Cow<'source, str>;\n pub enum DiagnosticArgValue<'source> {\n     Str(Cow<'source, str>),\n     Number(usize),\n+    StrListSepByAnd(Vec<Cow<'source, str>>),\n }\n \n /// Converts a value of a type into a `DiagnosticArg` (typically a field of an `IntoDiagnostic`\n@@ -58,6 +60,7 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n         match self {\n             DiagnosticArgValue::Str(s) => From::from(s),\n             DiagnosticArgValue::Number(n) => From::from(n),\n+            DiagnosticArgValue::StrListSepByAnd(l) => fluent_value_from_str_list_sep_by_and(l),\n         }\n     }\n }"}, {"sha": "6716339eaa48f6360dcc10a76635796b058f0644", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a775004322df90a564c58e702364c10e6f0192a4/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=a775004322df90a564c58e702364c10e6f0192a4", "patch": "@@ -11,7 +11,6 @@ use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n use std::borrow::Cow;\n use std::fmt;\n-use std::fmt::Write;\n use std::num::ParseIntError;\n use std::path::{Path, PathBuf};\n use std::process::ExitStatus;\n@@ -191,23 +190,9 @@ impl From<Vec<Symbol>> for DiagnosticSymbolList {\n \n impl IntoDiagnosticArg for DiagnosticSymbolList {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        // FIXME: replace the logic here with a real list formatter\n-        let symbols = match &self.0[..] {\n-            [symbol] => format!(\"`{symbol}`\"),\n-            [symbol, last] => {\n-                format!(\"`{symbol}` and `{last}`\",)\n-            }\n-            [symbols @ .., last] => {\n-                let mut result = String::new();\n-                for symbol in symbols {\n-                    write!(result, \"`{symbol}`, \").unwrap();\n-                }\n-                write!(result, \"and `{last}`\").unwrap();\n-                result\n-            }\n-            [] => unreachable!(),\n-        };\n-        DiagnosticArgValue::Str(Cow::Owned(symbols))\n+        DiagnosticArgValue::StrListSepByAnd(\n+            self.0.into_iter().map(|sym| Cow::Owned(format!(\"`{sym}`\"))).collect(),\n+        )\n     }\n }\n "}]}