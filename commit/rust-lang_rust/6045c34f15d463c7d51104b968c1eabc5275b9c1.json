{"sha": "6045c34f15d463c7d51104b968c1eabc5275b9c1", "node_id": "C_kwDOAAsO6NoAKDYwNDVjMzRmMTVkNDYzYzdkNTExMDRiOTY4YzFlYWJjNTI3NWI5YzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-09T06:30:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-09T06:30:19Z"}, "message": "Auto merge of #94761 - Dylan-DPC:rollup-v4emqsy, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #94312 (Edit `rustc_trait_selection::infer::lattice` docs)\n - #94583 (Add a team for '`@rustbot` ping fuchsia')\n - #94686 (Do not allow `#[rustc_legacy_const_generics]` on methods)\n - #94699 (BTree: remove dead data needlessly complicating insert)\n - #94756 (Use `unreachable!` for an unreachable code path)\n - #94759 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d540a7e2d3ed47e3058b603ec839015247cb2dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d540a7e2d3ed47e3058b603ec839015247cb2dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6045c34f15d463c7d51104b968c1eabc5275b9c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6045c34f15d463c7d51104b968c1eabc5275b9c1", "html_url": "https://github.com/rust-lang/rust/commit/6045c34f15d463c7d51104b968c1eabc5275b9c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6045c34f15d463c7d51104b968c1eabc5275b9c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "163c207fc28cadff4de1808848a93e3e5f2d1941", "url": "https://api.github.com/repos/rust-lang/rust/commits/163c207fc28cadff4de1808848a93e3e5f2d1941", "html_url": "https://github.com/rust-lang/rust/commit/163c207fc28cadff4de1808848a93e3e5f2d1941"}, {"sha": "822c4b6a92cb441728d7d871e08c258fccaa8826", "url": "https://api.github.com/repos/rust-lang/rust/commits/822c4b6a92cb441728d7d871e08c258fccaa8826", "html_url": "https://github.com/rust-lang/rust/commit/822c4b6a92cb441728d7d871e08c258fccaa8826"}], "stats": {"total": 142, "additions": 77, "deletions": 65}, "files": [{"sha": "4d7b62e9c559fb65ed536d392a425c67becddbd9", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -345,7 +345,6 @@ dependencies = [\n  \"libgit2-sys\",\n  \"log\",\n  \"memchr\",\n- \"num_cpus\",\n  \"opener\",\n  \"openssl\",\n  \"os_info\",\n@@ -1503,9 +1502,9 @@ dependencies = [\n \n [[package]]\n name = \"git2\"\n-version = \"0.13.23\"\n+version = \"0.14.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2a8057932925d3a9d9e4434ea016570d37420ddb1ceed45a174d577f24ed6700\"\n+checksum = \"6e7d3b96ec1fcaa8431cf04a4f1ef5caafe58d5cf7bcc31f09c1626adddb0ffe\"\n dependencies = [\n  \"bitflags\",\n  \"libc\",\n@@ -1518,9 +1517,9 @@ dependencies = [\n \n [[package]]\n name = \"git2-curl\"\n-version = \"0.14.1\"\n+version = \"0.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"883539cb0ea94bab3f8371a98cd8e937bbe9ee7c044499184aa4c17deb643a50\"\n+checksum = \"1ee51709364c341fbb6fe2a385a290fb9196753bdde2fc45447d27cd31b11b13\"\n dependencies = [\n  \"curl\",\n  \"git2\",\n@@ -1975,9 +1974,9 @@ dependencies = [\n \n [[package]]\n name = \"libgit2-sys\"\n-version = \"0.12.24+1.3.0\"\n+version = \"0.13.1+1.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ddbd6021eef06fb289a8f54b3c2acfdd85ff2a585dfbb24b8576325373d2152c\"\n+checksum = \"43e598aa7a4faedf1ea1b4608f582b06f0f40211eec551b7ef36019ae3f62def\"\n dependencies = [\n  \"cc\",\n  \"libc\","}, {"sha": "e98f33ea86eef899769407146fdff37204382b7e", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -1,3 +1,5 @@\n+//! Greatest lower bound. See [`lattice`].\n+\n use super::combine::CombineFields;\n use super::lattice::{self, LatticeDir};\n use super::InferCtxt;"}, {"sha": "32affd6a14e1cf0038441feb1fffc9eccc9cdc1c", "filename": "compiler/rustc_infer/src/infer/lattice.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -1,23 +1,21 @@\n-//! # Lattice Variables\n+//! # Lattice variables\n //!\n-//! This file contains generic code for operating on inference variables\n-//! that are characterized by an upper- and lower-bound. The logic and\n-//! reasoning is explained in detail in the large comment in `infer.rs`.\n+//! Generic code for operating on [lattices] of inference variables\n+//! that are characterized by an upper- and lower-bound.\n //!\n-//! The code in here is defined quite generically so that it can be\n+//! The code is defined quite generically so that it can be\n //! applied both to type variables, which represent types being inferred,\n //! and fn variables, which represent function types being inferred.\n-//! It may eventually be applied to their types as well, who knows.\n+//! (It may eventually be applied to their types as well.)\n //! In some cases, the functions are also generic with respect to the\n //! operation on the lattice (GLB vs LUB).\n //!\n-//! Although all the functions are generic, we generally write the\n-//! comments in a way that is specific to type variables and the LUB\n-//! operation. It's just easier that way.\n+//! ## Note\n //!\n-//! In general all of the functions are defined parametrically\n-//! over a `LatticeValue`, which is a value defined with respect to\n-//! a lattice.\n+//! Although all the functions are generic, for simplicity, comments in the source code\n+//! generally refer to type variables and the LUB operation.\n+//!\n+//! [lattices]: https://en.wikipedia.org/wiki/Lattice_(order)\n \n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::InferCtxt;\n@@ -27,6 +25,11 @@ use rustc_middle::ty::relate::{RelateResult, TypeRelation};\n use rustc_middle::ty::TyVar;\n use rustc_middle::ty::{self, Ty};\n \n+/// Trait for returning data about a lattice, and for abstracting\n+/// over the \"direction\" of the lattice operation (LUB/GLB).\n+///\n+/// GLB moves \"down\" the lattice (to smaller values); LUB moves\n+/// \"up\" the lattice (to bigger values).\n pub trait LatticeDir<'f, 'tcx>: TypeRelation<'tcx> {\n     fn infcx(&self) -> &'f InferCtxt<'f, 'tcx>;\n \n@@ -41,6 +44,7 @@ pub trait LatticeDir<'f, 'tcx>: TypeRelation<'tcx> {\n     fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;\n }\n \n+/// Relates two types using a given lattice.\n pub fn super_lattice_tys<'a, 'tcx: 'a, L>(\n     this: &mut L,\n     a: Ty<'tcx>,"}, {"sha": "bc85a4ac609a748bda607b6542d550f43dc899e0", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -1,3 +1,5 @@\n+//! Least upper bound. See [`lattice`].\n+\n use super::combine::CombineFields;\n use super::lattice::{self, LatticeDir};\n use super::InferCtxt;"}, {"sha": "01b12eec628ec074877dc828802fdd3fea137f7b", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -1345,7 +1345,7 @@ impl CheckAttrVisitor<'_> {\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) -> bool {\n-        let is_function = matches!(target, Target::Fn | Target::Method(..));\n+        let is_function = matches!(target, Target::Fn);\n         if !is_function {\n             self.tcx\n                 .sess"}, {"sha": "66608d09082d77363f10718a13cfa74f4e68a8c1", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -3,7 +3,7 @@ use core::marker::PhantomData;\n use core::mem;\n \n use super::super::borrow::DormantMutRef;\n-use super::super::node::{marker, Handle, InsertResult::*, NodeRef};\n+use super::super::node::{marker, Handle, NodeRef};\n use super::BTreeMap;\n \n use Entry::*;\n@@ -313,13 +313,13 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(self, value: V) -> &'a mut V {\n         let out_ptr = match self.handle.insert_recursing(self.key, value) {\n-            (Fit(_), val_ptr) => {\n+            (None, val_ptr) => {\n                 // SAFETY: We have consumed self.handle and the handle returned.\n                 let map = unsafe { self.dormant_map.awaken() };\n                 map.length += 1;\n                 val_ptr\n             }\n-            (Split(ins), val_ptr) => {\n+            (Some(ins), val_ptr) => {\n                 drop(ins.left);\n                 // SAFETY: We have consumed self.handle and the reference returned.\n                 let map = unsafe { self.dormant_map.awaken() };"}, {"sha": "44f5bc850b8527c61482e5e1da3957d5b4d9196b", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -861,11 +861,10 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// this edge. This method splits the node if there isn't enough room.\n     ///\n     /// The returned pointer points to the inserted value.\n-    fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {\n+    fn insert(mut self, key: K, val: V) -> (Option<SplitResult<'a, K, V, marker::Leaf>>, *mut V) {\n         if self.node.len() < CAPACITY {\n             let val_ptr = self.insert_fit(key, val);\n-            let kv = unsafe { Handle::new_kv(self.node, self.idx) };\n-            (InsertResult::Fit(kv), val_ptr)\n+            (None, val_ptr)\n         } else {\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n@@ -879,7 +878,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n                 },\n             };\n             let val_ptr = insertion_edge.insert_fit(key, val);\n-            (InsertResult::Split(result), val_ptr)\n+            (Some(result), val_ptr)\n         }\n     }\n }\n@@ -923,13 +922,12 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n         key: K,\n         val: V,\n         edge: Root<K, V>,\n-    ) -> InsertResult<'a, K, V, marker::Internal> {\n+    ) -> Option<SplitResult<'a, K, V, marker::Internal>> {\n         assert!(edge.height == self.node.height - 1);\n \n         if self.node.len() < CAPACITY {\n             self.insert_fit(key, val, edge);\n-            let kv = unsafe { Handle::new_kv(self.node, self.idx) };\n-            InsertResult::Fit(kv)\n+            None\n         } else {\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n@@ -943,7 +941,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n                 },\n             };\n             insertion_edge.insert_fit(key, val, edge);\n-            InsertResult::Split(result)\n+            Some(result)\n         }\n     }\n }\n@@ -953,32 +951,26 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// this edge. This method splits the node if there isn't enough room, and tries to\n     /// insert the split off portion into the parent node recursively, until the root is reached.\n     ///\n-    /// If the returned result is a `Fit`, its handle's node can be this edge's node or an ancestor.\n-    /// If the returned result is a `Split`, the `left` field will be the root node.\n-    /// The returned pointer points to the inserted value.\n+    /// If the returned result is some `SplitResult`, the `left` field will be the root node.\n+    /// The returned pointer points to the inserted value, which in the case of `SplitResult`\n+    /// is in the `left` or `right` tree.\n     pub fn insert_recursing(\n         self,\n         key: K,\n         value: V,\n-    ) -> (InsertResult<'a, K, V, marker::LeafOrInternal>, *mut V) {\n+    ) -> (Option<SplitResult<'a, K, V, marker::LeafOrInternal>>, *mut V) {\n         let (mut split, val_ptr) = match self.insert(key, value) {\n-            (InsertResult::Fit(handle), ptr) => {\n-                return (InsertResult::Fit(handle.forget_node_type()), ptr);\n-            }\n-            (InsertResult::Split(split), val_ptr) => (split.forget_node_type(), val_ptr),\n+            (None, val_ptr) => return (None, val_ptr),\n+            (Some(split), val_ptr) => (split.forget_node_type(), val_ptr),\n         };\n \n         loop {\n             split = match split.left.ascend() {\n                 Ok(parent) => match parent.insert(split.kv.0, split.kv.1, split.right) {\n-                    InsertResult::Fit(handle) => {\n-                        return (InsertResult::Fit(handle.forget_node_type()), val_ptr);\n-                    }\n-                    InsertResult::Split(split) => split.forget_node_type(),\n+                    None => return (None, val_ptr),\n+                    Some(split) => split.forget_node_type(),\n                 },\n-                Err(root) => {\n-                    return (InsertResult::Split(SplitResult { left: root, ..split }), val_ptr);\n-                }\n+                Err(root) => return (Some(SplitResult { left: root, ..split }), val_ptr),\n             };\n         }\n     }\n@@ -1529,14 +1521,6 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::K\n     }\n }\n \n-impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::KV> {\n-    pub fn forget_node_type(\n-        self,\n-    ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV> {\n-        unsafe { Handle::new_kv(self.node.forget_type(), self.idx) }\n-    }\n-}\n-\n impl<BorrowType, K, V, Type> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, Type> {\n     /// Checks whether the underlying node is an `Internal` node or a `Leaf` node.\n     pub fn force(\n@@ -1621,7 +1605,7 @@ pub enum ForceResult<Leaf, Internal> {\n pub struct SplitResult<'a, K, V, NodeType> {\n     // Altered node in existing tree with elements and edges that belong to the left of `kv`.\n     pub left: NodeRef<marker::Mut<'a>, K, V, NodeType>,\n-    // Some key and value split off, to be inserted elsewhere.\n+    // Some key and value that existed before and were split off, to be inserted elsewhere.\n     pub kv: (K, V),\n     // Owned, unattached, new node with elements and edges that belong to the right of `kv`.\n     pub right: NodeRef<marker::Owned, K, V, NodeType>,\n@@ -1639,11 +1623,6 @@ impl<'a, K, V> SplitResult<'a, K, V, marker::Internal> {\n     }\n }\n \n-pub enum InsertResult<'a, K, V, NodeType> {\n-    Fit(Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV>),\n-    Split(SplitResult<'a, K, V, NodeType>),\n-}\n-\n pub mod marker {\n     use core::marker::PhantomData;\n "}, {"sha": "6097e628768479b44c86b31d45d047cc390c8be2", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -224,8 +224,14 @@ where\n             } as usize;\n             if k == n && c::GetLastError() == c::ERROR_INSUFFICIENT_BUFFER {\n                 n *= 2;\n-            } else if k >= n {\n+            } else if k > n {\n                 n = k;\n+            } else if k == n {\n+                // It is impossible to reach this point.\n+                // On success, k is the returned string length excluding the null.\n+                // On failure, k is the required buffer length including the null.\n+                // Therefore k never equals n.\n+                unreachable!();\n             } else {\n                 return Ok(f2(&buf[..k]));\n             }"}, {"sha": "6eabd9b1015b79602886d27770a93f7de498c1fb", "filename": "src/test/ui/invalid/invalid-rustc_legacy_const_generics-arguments.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -29,6 +29,11 @@ extern {\n #[rustc_legacy_const_generics(0)] //~ ERROR #[rustc_legacy_const_generics] functions must only have\n fn foo8<X>() {}\n \n+impl S {\n+    #[rustc_legacy_const_generics(0)] //~ ERROR attribute should be applied to a function\n+    fn foo9<const X: usize>() {}\n+}\n+\n #[rustc_legacy_const_generics] //~ ERROR malformed `rustc_legacy_const_generics` attribute\n fn bar1() {}\n "}, {"sha": "bfe7bb2e10dccf7d9cd14252eb430fc64a0cc78c", "filename": "src/test/ui/invalid/invalid-rustc_legacy_const_generics-arguments.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.stderr?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -7,13 +7,13 @@ LL | #[rustc_legacy_const_generics(0usize)]\n    = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: malformed `rustc_legacy_const_generics` attribute input\n-  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:32:1\n+  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:37:1\n    |\n LL | #[rustc_legacy_const_generics]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_legacy_const_generics(N)]`\n \n error: malformed `rustc_legacy_const_generics` attribute input\n-  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:35:1\n+  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:40:1\n    |\n LL | #[rustc_legacy_const_generics = 1]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_legacy_const_generics(N)]`\n@@ -66,6 +66,14 @@ LL | #[rustc_legacy_const_generics(0)]\n LL | fn foo8<X>() {}\n    |         - non-const generic parameter\n \n+error: attribute should be applied to a function\n+  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:33:5\n+   |\n+LL |     #[rustc_legacy_const_generics(0)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn foo9<const X: usize>() {}\n+   |     ---------------------------- not a function\n+\n error: attribute should be applied to a function\n   --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:25:5\n    |\n@@ -82,6 +90,6 @@ LL |     fn foo7<const X: usize>();\n    |\n    = help: replace the const parameters with concrete consts\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0044`."}, {"sha": "65c82664263feddc5fe2d424be0993c28d46377a", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -1 +1 @@\n-Subproject commit 3d6970d50e30e797b8e26b2b9b1bdf92dc381f34\n+Subproject commit 65c82664263feddc5fe2d424be0993c28d46377a"}, {"sha": "f6f1b918f061f30a107e5c1ae71ea556f852d7c4", "filename": "triagebot.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6045c34f15d463c7d51104b968c1eabc5275b9c1/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6045c34f15d463c7d51104b968c1eabc5275b9c1/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=6045c34f15d463c7d51104b968c1eabc5275b9c1", "patch": "@@ -73,6 +73,13 @@ Thanks! <3\n \"\"\"\n label = \"O-riscv\"\n \n+[ping.fuchsia]\n+message = \"\"\"\\\n+Hey friends of Fuchsia! This issue could use some guidance on how this should be\n+resolved/implemented on Fuchsia. Could one of you weigh in?\n+\"\"\"\n+label = \"O-fuchsia\"\n+\n [prioritize]\n label = \"I-prioritize\"\n "}]}