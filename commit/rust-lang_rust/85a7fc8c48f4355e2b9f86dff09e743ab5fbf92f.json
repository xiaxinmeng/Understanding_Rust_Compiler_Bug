{"sha": "85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YTdmYzhjNDhmNDM1NWUyYjlmODZkZmYwOWU3NDNhYjVmYmY5MmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-12T09:55:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-12T09:55:07Z"}, "message": "Rollup merge of #57441 - VardhanThigle:Vardhan/x86_64-fortanix-unknown-sgx-backtrace-support, r=alexcrichton\n\nSupporting backtrace for x86_64-fortanix-unknown-sgx.\n\n# Overview\nImplementing following functions required by `libstd/sys_common` to support `backtrace`:\n```\n1. unwind_backtrace\n2. trace_fn\n3. resolve_symname\n```\n# Description:\nThe changes here are quite similar to the Cloudabi target `src/libstd/sys/cloudabi/backtrace.rs`\nThe first 2 functions are implemented via calls to libunwind.a that is linked to the `x86_64-fortanix-unknown-sgx` (#56979),  we have not implemented functionality needed by `resolve_symname`  (or `dladdr`) to reduce SGX TCB. Rather, we print the function address (relative to enclave image base) in `resolve_symname` which can be later translated to correct symbol name (say, via `addr2line`).\n\n# Note:\nFor `x86_64-fortanix-unknown-sgx`, the `RUST_BACKTRACE` environment has to be set from within the program running in an enclave.\ncc: @jethrogb\nr? @alexcrichton", "tree": {"sha": "c3e43edec8783c0b78a02dee094ddd010732b07e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3e43edec8783c0b78a02dee094ddd010732b07e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcObl7CRBK7hj4Ov3rIwAAdHIIALCuo3Y9t4QCUkk0mudCuPrW\naFqK2rZKtoo9vMfFlxiDbNhOvrk1uNIpqCJBEM96iiW9HhDnMeY4z83QQWFB9c01\nXgwXI0BP3H0EBGNB3JORCzF1PiZnnyWgRamBswEsfATjF2472XaCazG/wzEvzKHj\nKMXQamDx+V9mwUZkBMlrkr8osNbLaX16Ny1mbnpWS/3e+TOyjE6ZdVCBqcxbX/Gp\nn65xlAcF9JX10sZStgccM+4Ir0ricZz3l8ZAaEubqAMy1mLFO5stQokhUDIYxNVN\nAD9Vfq/ptWLyB3GDOLIF/SzEc48CIh+/YxKMXoHYYzScYjOm22+lF2XsNIJSoEQ=\n=AZ/F\n-----END PGP SIGNATURE-----\n", "payload": "tree c3e43edec8783c0b78a02dee094ddd010732b07e\nparent 632d8909a0dbf1c8f2569987b24d36dc013ed5e8\nparent 2e4766c3afcdac9f45edbd73723384b360ee4b68\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547286907 +0100\ncommitter GitHub <noreply@github.com> 1547286907 +0100\n\nRollup merge of #57441 - VardhanThigle:Vardhan/x86_64-fortanix-unknown-sgx-backtrace-support, r=alexcrichton\n\nSupporting backtrace for x86_64-fortanix-unknown-sgx.\n\n# Overview\nImplementing following functions required by `libstd/sys_common` to support `backtrace`:\n```\n1. unwind_backtrace\n2. trace_fn\n3. resolve_symname\n```\n# Description:\nThe changes here are quite similar to the Cloudabi target `src/libstd/sys/cloudabi/backtrace.rs`\nThe first 2 functions are implemented via calls to libunwind.a that is linked to the `x86_64-fortanix-unknown-sgx` (#56979),  we have not implemented functionality needed by `resolve_symname`  (or `dladdr`) to reduce SGX TCB. Rather, we print the function address (relative to enclave image base) in `resolve_symname` which can be later translated to correct symbol name (say, via `addr2line`).\n\n# Note:\nFor `x86_64-fortanix-unknown-sgx`, the `RUST_BACKTRACE` environment has to be set from within the program running in an enclave.\ncc: @jethrogb\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f", "html_url": "https://github.com/rust-lang/rust/commit/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "632d8909a0dbf1c8f2569987b24d36dc013ed5e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/632d8909a0dbf1c8f2569987b24d36dc013ed5e8", "html_url": "https://github.com/rust-lang/rust/commit/632d8909a0dbf1c8f2569987b24d36dc013ed5e8"}, {"sha": "2e4766c3afcdac9f45edbd73723384b360ee4b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4766c3afcdac9f45edbd73723384b360ee4b68", "html_url": "https://github.com/rust-lang/rust/commit/2e4766c3afcdac9f45edbd73723384b360ee4b68"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "e22008084494690373829e636fbc04bbbd69acac", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f", "patch": "@@ -305,7 +305,7 @@\n #![feature(maybe_uninit)]\n #![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n             feature(global_asm, range_contains, slice_index_methods,\n-                    decl_macro, coerce_unsized, sgx_platform))]\n+                    decl_macro, coerce_unsized, sgx_platform, ptr_wrapping_offset_from))]\n \n #![default_lib_allocator]\n "}, {"sha": "808f1ce3ff2c73a4265f9d60319357505de2a425", "filename": "src/libstd/sys/sgx/abi/mem.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmem.rs?ref=85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f", "patch": "@@ -17,8 +17,10 @@ extern {\n // Do not remove inline: will result in relocation failure\n // For the same reason we use inline ASM here instead of an extern static to\n // locate the base\n+/// Returns address at which current enclave is loaded.\n #[inline(always)]\n-fn image_base() -> u64 {\n+#[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n+pub fn image_base() -> u64 {\n     let base;\n     unsafe { asm!(\"lea IMAGE_BASE(%rip),$0\":\"=r\"(base)) };\n     base"}, {"sha": "2b8e1da05791dee62231a0c0c1aeeb02ee26cadf", "filename": "src/libstd/sys/sgx/backtrace.rs", "status": "modified", "additions": 78, "deletions": 9, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs?ref=85a7fc8c48f4355e2b9f86dff09e743ab5fbf92f", "patch": "@@ -1,27 +1,96 @@\n use io;\n-use sys::unsupported;\n+use error::Error;\n+use libc;\n use sys_common::backtrace::Frame;\n+use unwind as uw;\n+use sys::sgx::abi::mem::image_base;\n \n pub struct BacktraceContext;\n \n-pub fn unwind_backtrace(_frames: &mut [Frame])\n-    -> io::Result<(usize, BacktraceContext)>\n-{\n-    unsupported()\n+struct Context<'a> {\n+    idx: usize,\n+    frames: &'a mut [Frame],\n+}\n+\n+#[derive(Debug)]\n+struct UnwindError(uw::_Unwind_Reason_Code);\n+\n+impl Error for UnwindError {\n+    fn description(&self) -> &'static str {\n+        \"unexpected return value while unwinding\"\n+    }\n+}\n+\n+impl ::fmt::Display for UnwindError {\n+    fn fmt(&self, f: &mut ::fmt::Formatter) -> ::fmt::Result {\n+        write!(f, \"{}: {:?}\", self.description(), self.0)\n+    }\n+}\n+\n+#[inline(never)] // this function call can be skipped it when tracing.\n+pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceContext)> {\n+    let mut cx = Context { idx: 0, frames };\n+    let result_unwind =\n+        unsafe { uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context as *mut libc::c_void) };\n+    // See libunwind:src/unwind/Backtrace.c for the return values.\n+    // No, there is no doc.\n+    let res = match result_unwind {\n+        // These return codes seem to be benign and need to be ignored for backtraces\n+        // to show up properly on all tested platforms.\n+        uw::_URC_END_OF_STACK | uw::_URC_FATAL_PHASE1_ERROR | uw::_URC_FAILURE => {\n+            Ok((cx.idx, BacktraceContext))\n+        }\n+        _ => Err(io::Error::new(\n+            io::ErrorKind::Other,\n+            UnwindError(result_unwind),\n+        )),\n+    };\n+    res\n+}\n+\n+extern \"C\" fn trace_fn(\n+    ctx: *mut uw::_Unwind_Context,\n+    arg: *mut libc::c_void,\n+) -> uw::_Unwind_Reason_Code {\n+    let cx = unsafe { &mut *(arg as *mut Context) };\n+    if cx.idx >= cx.frames.len() {\n+        return uw::_URC_NORMAL_STOP;\n+    }\n+\n+    let mut ip_before_insn = 0;\n+    let mut ip = unsafe { uw::_Unwind_GetIPInfo(ctx, &mut ip_before_insn) as *mut libc::c_void };\n+    if !ip.is_null() && ip_before_insn == 0 {\n+        // this is a non-signaling frame, so `ip` refers to the address\n+        // after the calling instruction. account for that.\n+        ip = (ip as usize - 1) as *mut _;\n+    }\n+\n+    let symaddr = unsafe { uw::_Unwind_FindEnclosingFunction(ip) };\n+    cx.frames[cx.idx] = Frame {\n+        symbol_addr: symaddr as *mut u8,\n+        exact_position: ip as *mut u8,\n+        inline_context: 0,\n+    };\n+    cx.idx += 1;\n+\n+    uw::_URC_NO_REASON\n }\n \n-pub fn resolve_symname<F>(_frame: Frame,\n-                          _callback: F,\n+// To reduce TCB size in Sgx enclave, we do not want to implement resolve_symname functionality.\n+// Rather, we print the offset of the address here, which could be later mapped to correct function.\n+pub fn resolve_symname<F>(frame: Frame,\n+                          callback: F,\n                           _: &BacktraceContext) -> io::Result<()>\n     where F: FnOnce(Option<&str>) -> io::Result<()>\n {\n-    unsupported()\n+    callback(Some(&format!(\"0x{:x}\",\n+            (frame.symbol_addr.wrapping_offset_from(image_base() as _)))))\n }\n \n pub fn foreach_symbol_fileline<F>(_: Frame,\n                                   _: F,\n                                   _: &BacktraceContext) -> io::Result<bool>\n     where F: FnMut(&[u8], u32) -> io::Result<()>\n {\n-    unsupported()\n+    Ok(false)\n }"}]}