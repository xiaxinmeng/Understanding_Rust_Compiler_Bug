{"sha": "1d4d9a1e1a2560a1cfd51ed1ebc41248be386548", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNGQ5YTFlMWEyNTYwYTFjZmQ1MWVkMWViYzQxMjQ4YmUzODY1NDg=", "commit": {"author": {"name": "Teddy_Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-11T15:40:16Z"}, "committer": {"name": "Teddy_Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-11T15:40:16Z"}, "message": "Fix tests by importing core::ops::Deref", "tree": {"sha": "b11c4f3575c18a0fe1ef5bbe1cfbb1bf74a2404e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11c4f3575c18a0fe1ef5bbe1cfbb1bf74a2404e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d4d9a1e1a2560a1cfd51ed1ebc41248be386548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4d9a1e1a2560a1cfd51ed1ebc41248be386548", "html_url": "https://github.com/rust-lang/rust/commit/1d4d9a1e1a2560a1cfd51ed1ebc41248be386548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d4d9a1e1a2560a1cfd51ed1ebc41248be386548/comments", "author": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a9c457e665e99f5976f7ceb2724f308dcd1bfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a9c457e665e99f5976f7ceb2724f308dcd1bfb", "html_url": "https://github.com/rust-lang/rust/commit/67a9c457e665e99f5976f7ceb2724f308dcd1bfb"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "94cf209e21eed6f2d4f8424e9e1441bf2b486489", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1d4d9a1e1a2560a1cfd51ed1ebc41248be386548/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4d9a1e1a2560a1cfd51ed1ebc41248be386548/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=1d4d9a1e1a2560a1cfd51ed1ebc41248be386548", "patch": "@@ -243,7 +243,9 @@ fn hover_ranged(\n     })?;\n     let res = match &expr_or_pat {\n         Either::Left(ast::Expr::TryExpr(try_expr)) => hover_try_expr(sema, config, try_expr),\n-        Either::Left(ast::Expr::PrefixExpr(prefix_expr)) if prefix_expr.op_kind() == Some(ast::UnaryOp::Deref) => {\n+        Either::Left(ast::Expr::PrefixExpr(prefix_expr))\n+            if prefix_expr.op_kind() == Some(ast::UnaryOp::Deref) =>\n+        {\n             hover_deref_expr(sema, config, prefix_expr)\n         }\n         _ => None,\n@@ -355,7 +357,8 @@ fn hover_deref_expr(\n     deref_expr: &ast::PrefixExpr,\n ) -> Option<HoverResult> {\n     let inner_ty = sema.type_of_expr(&deref_expr.expr()?)?.original;\n-    let TypeInfo { original, adjusted } = sema.type_of_expr(&ast::Expr::from(deref_expr.clone()))?;\n+    let TypeInfo { original, adjusted } =\n+        sema.type_of_expr(&ast::Expr::from(deref_expr.clone()))?;\n \n     let mut res = HoverResult::default();\n     let mut targets: Vec<hir::ModuleDef> = Vec::new();\n@@ -366,7 +369,7 @@ fn hover_deref_expr(\n     };\n     walk_and_push_ty(sema.db, &inner_ty, &mut push_new_def);\n     walk_and_push_ty(sema.db, &original, &mut push_new_def);\n-    \n+\n     res.markup = if let Some(adjusted_ty) = adjusted {\n         walk_and_push_ty(sema.db, &adjusted_ty, &mut push_new_def);\n         let original = original.display(sema.db).to_string();\n@@ -375,7 +378,9 @@ fn hover_deref_expr(\n         let type_len = \"Type: \".len();\n         let coerced_len = \"Coerced to: \".len();\n         let deref_len = \"Derefenced from: \".len();\n-        let max_len = (original.len() + type_len).max(adjusted.len() + coerced_len).max(inner.len() + deref_len);\n+        let max_len = (original.len() + type_len)\n+            .max(adjusted.len() + coerced_len)\n+            .max(inner.len() + deref_len);\n         format!(\n             \"{bt_start}Type: {:>apad$}\\nCoerced to: {:>opad$}\\nDerefenced from: {:>ipad$}\\n{bt_end}\",\n             original,\n@@ -4511,12 +4516,13 @@ fn foo() -> Option<()> {\n         );\n     }\n \n-\n     #[test]\n     fn hover_deref_expr() {\n         check_hover_range(\n             r#\"\n-//- minicore: deref \n+//- minicore: deref\n+use core::ops::Deref;\n+\n struct DerefExample<T> {\n     value: T\n }\n@@ -4547,19 +4553,21 @@ fn foo() {\n     fn hover_deref_expr_with_coercion() {\n         check_hover_range(\n             r#\"\n-//- minicore: deref \n+//- minicore: deref\n+use core::ops::Deref;\n+\n struct DerefExample<T> {\n     value: T\n }\n- \n+\n impl<T> Deref for DerefExample<T> {\n     type Target = T;\n- \n+\n     fn deref(&self) -> &Self::Target {\n         &self.value\n     }\n }\n- \n+\n fn foo() {\n     let x = DerefExample { value: &&&&&0 };\n     let y: &i32 = $0*x$0;"}]}