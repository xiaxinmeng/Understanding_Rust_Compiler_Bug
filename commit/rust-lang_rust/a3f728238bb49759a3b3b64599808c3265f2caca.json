{"sha": "a3f728238bb49759a3b3b64599808c3265f2caca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZjcyODIzOGJiNDk3NTlhM2IzYjY0NTk5ODA4YzMyNjVmMmNhY2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-01T18:44:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-03T00:49:30Z"}, "message": "librustc: Forbid chained imports and fix the logic for one-level renaming imports", "tree": {"sha": "21c17b2996b9384e16e64349f6a4413975119f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c17b2996b9384e16e64349f6a4413975119f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f728238bb49759a3b3b64599808c3265f2caca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f728238bb49759a3b3b64599808c3265f2caca", "html_url": "https://github.com/rust-lang/rust/commit/a3f728238bb49759a3b3b64599808c3265f2caca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f728238bb49759a3b3b64599808c3265f2caca/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "347d19934db06f0467377ec138e7415a119f2a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/347d19934db06f0467377ec138e7415a119f2a3c", "html_url": "https://github.com/rust-lang/rust/commit/347d19934db06f0467377ec138e7415a119f2a3c"}], "stats": {"total": 940, "additions": 399, "deletions": 541}, "files": [{"sha": "b45a6a3dd450d6e5c025cd7d7cb38af178512822", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -1360,7 +1360,7 @@ Functions within foreign modules are declared in the same way as other Rust func\n with the exception that they may not have a body and are instead terminated by a semicolon.\n \n ~~~\n-# use libc::{c_char, FILE};\n+# use core::libc::{c_char, FILE};\n # #[nolink]\n \n extern mod c {"}, {"sha": "add3718ea7fb39613164e91b859d1ccbbd5303b4", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -14,7 +14,7 @@ should compile and run without any extra effort.\n \n ~~~~ {.xfail-test}\n extern mod std;\n-use libc::c_uint;\n+use core::libc::c_uint;\n \n extern mod crypto {\n     fn SHA1(src: *u8, sz: c_uint, out: *u8) -> *u8;\n@@ -217,7 +217,7 @@ microsecond-resolution timer.\n \n ~~~~\n extern mod std;\n-use libc::c_ulonglong;\n+use core::libc::c_ulonglong;\n \n struct timeval {\n     tv_sec: c_ulonglong,"}, {"sha": "52f63be984a312d182001683d528be3f972efea8", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -80,8 +80,8 @@ calling the `spawn` function with a closure argument. `spawn` executes the\n closure in the new task.\n \n ~~~~\n-# use io::println;\n-use task::spawn;\n+# use core::io::println;\n+use core::task::spawn;\n \n // Print something profound in a different task using a named function\n fn print_message() { println(\"I am running in a different task!\"); }\n@@ -110,8 +110,8 @@ execution. Like any closure, the function passed to `spawn` may capture\n an environment that it carries across tasks.\n \n ~~~\n-# use io::println;\n-# use task::spawn;\n+# use core::io::println;\n+# use core::task::spawn;\n # fn generate_task_number() -> int { 0 }\n // Generate some state locally\n let child_task_number = generate_task_number();\n@@ -127,8 +127,8 @@ in parallel. Thus, on a multicore machine, running the following code\n should interleave the output in vaguely random order.\n \n ~~~\n-# use io::print;\n-# use task::spawn;\n+# use core::io::print;\n+# use core::task::spawn;\n \n for int::range(0, 20) |child_task_number| {\n     do spawn {\n@@ -156,8 +156,8 @@ endpoint. Consider the following example of calculating two results\n concurrently:\n \n ~~~~\n-use task::spawn;\n-use comm::{stream, Port, Chan};\n+use core::task::spawn;\n+use core::comm::{stream, Port, Chan};\n \n let (port, chan): (Port<int>, Chan<int>) = stream();\n \n@@ -178,7 +178,7 @@ stream for sending and receiving integers (the left-hand side of the `let`,\n a tuple into its component parts).\n \n ~~~~\n-# use comm::{stream, Chan, Port};\n+# use core::comm::{stream, Chan, Port};\n let (port, chan): (Port<int>, Chan<int>) = stream();\n ~~~~\n \n@@ -187,9 +187,8 @@ which will wait to receive the data on the port. The next statement\n spawns the child task.\n \n ~~~~\n-# use task::{spawn};\n-# use task::spawn;\n-# use comm::{stream, Port, Chan};\n+# use core::task::spawn;\n+# use core::comm::{stream, Port, Chan};\n # fn some_expensive_computation() -> int { 42 }\n # let (port, chan) = stream();\n do spawn || {\n@@ -209,7 +208,7 @@ computation, then waits for the child's result to arrive on the\n port:\n \n ~~~~\n-# use comm::{stream, Port, Chan};\n+# use core::comm::{stream, Port, Chan};\n # fn some_other_expensive_computation() {}\n # let (port, chan) = stream::<int>();\n # chan.send(0);\n@@ -224,8 +223,8 @@ example needed to compute multiple results across a number of tasks? The\n following program is ill-typed:\n \n ~~~ {.xfail-test}\n-# use task::{spawn};\n-# use comm::{stream, Port, Chan};\n+# use core::task::{spawn};\n+# use core::comm::{stream, Port, Chan};\n # fn some_expensive_computation() -> int { 42 }\n let (port, chan) = stream();\n \n@@ -244,8 +243,8 @@ Instead we can use a `SharedChan`, a type that allows a single\n `Chan` to be shared by multiple senders.\n \n ~~~\n-# use task::spawn;\n-use comm::{stream, SharedChan};\n+# use core::task::spawn;\n+use core::comm::{stream, SharedChan};\n \n let (port, chan) = stream();\n let chan = SharedChan(chan);\n@@ -277,8 +276,8 @@ illustrate the point. For reference, written with multiple streams, it\n might look like the example below.\n \n ~~~\n-# use task::spawn;\n-# use comm::{stream, Port, Chan};\n+# use core::task::spawn;\n+# use core::comm::{stream, Port, Chan};\n \n // Create a vector of ports, one for each child task\n let ports = do vec::from_fn(3) |init_val| {\n@@ -309,7 +308,7 @@ All tasks are, by default, _linked_ to each other. That means that the fates\n of all tasks are intertwined: if one fails, so do all the others.\n \n ~~~\n-# use task::spawn;\n+# use core::task::spawn;\n # fn do_some_work() { loop { task::yield() } }\n # do task::try {\n // Create a child task that fails\n@@ -393,8 +392,8 @@ internally, with additional logic to wait for the child task to finish\n before returning. Hence:\n \n ~~~\n-# use comm::{stream, Chan, Port};\n-# use task::{spawn, try};\n+# use core::comm::{stream, Chan, Port};\n+# use core::task::{spawn, try};\n # fn sleep_forever() { loop { task::yield() } }\n # do task::try {\n let (receiver, sender): (Port<int>, Chan<int>) = stream();\n@@ -489,8 +488,8 @@ response itself is simply the stringified version of the received value,\n Here is the code for the parent task:\n \n ~~~~\n+# use core::task::spawn;\n # use std::comm::DuplexStream;\n-# use task::spawn;\n # fn stringifier(channel: &DuplexStream<~str, uint>) {\n #     let mut value: uint;\n #     loop {"}, {"sha": "5dc5ef99916e22746b8f0f04bf4714698c353561", "filename": "doc/tutorial.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -1313,7 +1313,7 @@ and [`core::str`]. Here are some examples.\n [`core::str`]: core/str.html\n \n ~~~\n-# use io::println;\n+# use core::io::println;\n # enum Crayon {\n #     Almond, AntiqueBrass, Apricot,\n #     Aquamarine, Asparagus, AtomicTangerine,\n@@ -1368,7 +1368,7 @@ Rust also supports _closures_, functions that can access variables in\n the enclosing scope.\n \n ~~~~\n-# use println = io::println;\n+# use println = core::io::println;\n fn call_closure_with_ten(b: fn(int)) { b(10); }\n \n let captured_var = 20;\n@@ -1525,7 +1525,7 @@ words, it is a function that takes an owned closure that takes no\n arguments.\n \n ~~~~\n-use task::spawn;\n+use core::task::spawn;\n \n do spawn() || {\n     debug!(\"I'm a task, whatever\");\n@@ -1537,7 +1537,7 @@ lists back to back. Since that is so unsightly, empty argument lists\n may be omitted from `do` expressions.\n \n ~~~~\n-# use task::spawn;\n+# use core::task::spawn;\n do spawn {\n    debug!(\"Kablam!\");\n }\n@@ -1568,8 +1568,8 @@ fn each(v: &[int], op: fn(v: &int) -> bool) {\n And using this function to iterate over a vector:\n \n ~~~~\n-# use each = vec::each;\n-# use println = io::println;\n+# use each = core::vec::each;\n+# use println = core::io::println;\n each([2, 4, 8, 5, 16], |n| {\n     if *n % 2 != 0 {\n         println(\"found odd number!\");\n@@ -1585,8 +1585,8 @@ out of the loop, you just write `break`. To skip ahead\n to the next iteration, write `loop`.\n \n ~~~~\n-# use each = vec::each;\n-# use println = io::println;\n+# use each = core::vec::each;\n+# use println = core::io::println;\n for each([2, 4, 8, 5, 16]) |n| {\n     if *n % 2 != 0 {\n         println(\"found odd number!\");\n@@ -1601,7 +1601,7 @@ normally allowed in closures, in a block that appears as the body of a\n the enclosing function, not just the loop body.\n \n ~~~~\n-# use each = vec::each;\n+# use each = core::vec::each;\n fn contains(v: &[int], elt: int) -> bool {\n     for each(v) |x| {\n         if (*x == elt) { return true; }\n@@ -1616,7 +1616,7 @@ In these situations it can be convenient to lean on Rust's\n argument patterns to bind `x` to the actual value, not the pointer.\n \n ~~~~\n-# use each = vec::each;\n+# use each = core::vec::each;\n # fn contains(v: &[int], elt: int) -> bool {\n     for each(v) |&x| {\n         if (x == elt) { return true; }\n@@ -1758,8 +1758,8 @@ Constructors are one common application for static methods, as in `new` above.\n To call a static method, you have to prefix it with the type name and a double colon:\n \n ~~~~\n-# use float::consts::pi;\n-# use float::sqrt;\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n struct Circle { radius: float }\n impl Circle {\n     static fn new(area: float) -> Circle { Circle { radius: sqrt(area / pi) } }\n@@ -2030,8 +2030,8 @@ The compiler will use type inference to decide which implementation to call.\n \n ~~~~\n trait Shape { static fn new(area: float) -> Self; }\n-# use float::consts::pi;\n-# use float::sqrt;\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n struct Circle { radius: float }\n struct Square { length: float }\n \n@@ -2189,8 +2189,8 @@ Now, we can implement `Circle` on a type only if we also implement `Shape`.\n # trait Shape { fn area(&self) -> float; }\n # trait Circle : Shape { fn radius(&self) -> float; }\n # struct Point { x: float, y: float }\n-# use float::consts::pi;\n-# use float::sqrt;\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n # fn square(x: float) -> float { x * x }\n struct CircleStruct { center: Point, radius: float }\n impl Circle for CircleStruct {\n@@ -2224,8 +2224,8 @@ Likewise, supertrait methods may also be called on trait objects.\n ~~~ {.xfail-test}\n # trait Shape { fn area(&self) -> float; }\n # trait Circle : Shape { fn radius(&self) -> float; }\n-# use float::consts::pi;\n-# use float::sqrt;\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n # struct Point { x: float, y: float }\n # struct CircleStruct { center: Point, radius: float }\n # impl Circle for CircleStruct { fn radius(&self) -> float { sqrt(self.area() / pi) } }"}, {"sha": "ae5cb1e6f1139890ef2d6c5cef69778308c74889", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -22,18 +22,18 @@ extern mod std(vers = \"0.6\");\n \n use core::*;\n \n-mod procsrv;\n-mod util;\n-mod header;\n-mod runtest;\n-mod common;\n-mod errors;\n+pub mod procsrv;\n+pub mod util;\n+pub mod header;\n+pub mod runtest;\n+pub mod common;\n+pub mod errors;\n \n use std::getopts;\n use std::test;\n \n use core::{result, either};\n-use result::{Ok, Err};\n+use core::result::{Ok, Err};\n \n use common::config;\n use common::mode_run_pass;"}, {"sha": "39b70299ba5bdf0c457b4c1197634100b70db53d", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,9 +11,10 @@\n use core::prelude::*;\n \n use common::config;\n-use io;\n-use io::ReaderUtil;\n-use str;\n+\n+use core::io;\n+use core::io::ReaderUtil;\n+use core::str;\n \n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n "}, {"sha": "64d1aae5ff5ef080da74b976fa813a4e12b8ad08", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,10 +12,11 @@ use core::prelude::*;\n \n use common;\n use common::config;\n-use io;\n-use io::ReaderUtil;\n-use os;\n-use str;\n+\n+use core::io::ReaderUtil;\n+use core::io;\n+use core::os;\n+use core::str;\n \n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out"}, {"sha": "8d8cdb3c719c521a87f8fedb1175fed368106a9d", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,17 +10,17 @@\n \n use core::prelude::*;\n \n-use io;\n-use io::{ReaderUtil, WriterUtil};\n-use libc;\n-use libc::{c_int, pid_t};\n-use os;\n-use run;\n-use run::spawn_process;\n-use pipes;\n-use str;\n-use task;\n-use vec;\n+use core::io::{ReaderUtil, WriterUtil};\n+use core::io;\n+use core::libc::{c_int, pid_t};\n+use core::libc;\n+use core::os;\n+use core::pipes;\n+use core::run::spawn_process;\n+use core::run;\n+use core::str;\n+use core::task;\n+use core::vec;\n \n #[cfg(target_os = \"win32\")]\n fn target_env(lib_path: ~str, prog: ~str) -> ~[(~str,~str)] {"}, {"sha": "b5def15fc509c40a8747f87118c1417d5b014fe7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,13 +10,6 @@\n \n use core::prelude::*;\n \n-use io;\n-use io::WriterUtil;\n-use os;\n-use str;\n-use uint;\n-use vec;\n-\n use common;\n use common::mode_run_pass;\n use common::mode_run_fail;\n@@ -31,6 +24,13 @@ use procsrv;\n use util;\n use util::logv;\n \n+use core::io::WriterUtil;\n+use core::io;\n+use core::os;\n+use core::str;\n+use core::uint;\n+use core::vec;\n+\n pub fn run(config: config, testfile: ~str) {\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line."}, {"sha": "ad60e532f3cb0a697d5f495e3afa2781e3d9249a", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,13 +10,13 @@\n \n use core::prelude::*;\n \n-use io;\n-use os;\n-use os::getenv;\n-\n use common;\n use common::config;\n \n+use core::io;\n+use core::os::getenv;\n+use core::os;\n+\n pub fn make_new_path(path: ~str) -> ~str {\n \n     // Windows just uses PATH as the library search path, so we have to"}, {"sha": "93989f8e4a90136195c489372b72bb229bdb1064", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -52,7 +52,7 @@ def scrub(b):\n d.write(\"extern mod std;\\n\")\n d.write(\"extern mod run_pass_stage2;\\n\")\n d.write(\"use run_pass_stage2::*;\\n\")\n-d.write(\"use io::WriterUtil;\\n\");\n+d.write(\"use core::io::WriterUtil;\\n\");\n d.write(\"fn main() {\\n\");\n d.write(\"    let out = io::stdout();\\n\");\n i = 0"}, {"sha": "56a18024ac927924cfe2a678a823e7029b4f34e2", "filename": "src/libcore/core.rc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -235,10 +235,10 @@ pub mod private {\n \n /* For internal use, not exported */\n \n-mod unicode;\n+pub mod unicode;\n #[path = \"num/cmath.rs\"]\n-mod cmath;\n-mod stackwalk;\n+pub mod cmath;\n+pub mod stackwalk;\n \n \n // A curious inner-module that's not exported that contains the binding\n@@ -253,8 +253,9 @@ pub mod core {\n \n     pub use cmp;\n     pub use condition;\n-    pub use option;\n     pub use kinds;\n+    pub use ops;\n+    pub use option;\n     pub use sys;\n     pub use pipes;\n }"}, {"sha": "4d97df621da3fd0ad61810462ce0feeff6d6da4c", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! An interface for numeric types\n-use core::cmp::{Ord, Eq};\n+use cmp::{Ord, Eq};\n use ops::{Add, Div, Modulo, Mul, Neg, Sub};\n use option::{None, Option, Some};\n use char;"}, {"sha": "185d8caae01fa365b23f196c85e141fa149f39ec", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -27,8 +27,8 @@ magic.\n */\n \n use prelude::*;\n-use rt;\n use task::local_data_priv::{local_get, local_pop, local_modify, local_set};\n+use task::rt;\n use task;\n \n /**"}, {"sha": "3714b6763c649b8785f2dbfaf52d534096bf2618", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -31,8 +31,7 @@ extern mod std(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n use core::*;\n-\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n \n use syntax::{ast, ast_util, fold, visit, codemap};\n use syntax::parse;"}, {"sha": "37e0f874b40dc9288ec4bab4e3f5bbde17e6e6c7", "filename": "src/librust/rust.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -220,7 +220,7 @@ fn usage() {\n \n }\n \n-fn main() {\n+pub fn main() {\n     let args = os::args().tail();\n \n     if !args.is_empty() {"}, {"sha": "95337b4150c29b25c7f269a989a962618c834e76", "filename": "src/librustc/back/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fback%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fback%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farm.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use back::target_strs;\n+use driver::session::sess_os_to_meta_os;\n use driver::session;\n-use session::sess_os_to_meta_os;\n use metadata::loader::meta_section_name;\n \n pub fn get_target_strs(target_os: session::os) -> target_strs::t {"}, {"sha": "446b83af425a7b96f409e2176d2188756f66bb3a", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,6 +11,7 @@\n use core::prelude::*;\n \n use back::rpath;\n+use driver::session::Session;\n use driver::session;\n use lib::llvm::llvm;\n use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False};\n@@ -21,8 +22,6 @@ use metadata::filesearch;\n use metadata::{encoder, cstore};\n use middle::trans::common::CrateContext;\n use middle::ty;\n-use session::Session;\n-use session;\n use util::ppaux;\n \n use core::char;\n@@ -89,10 +88,10 @@ pub fn WriteOutputFile(sess: Session,\n \n pub mod jit {\n     use back::link::llvm_err;\n+    use driver::session::Session;\n     use lib::llvm::llvm;\n     use lib::llvm::{ModuleRef, PassManagerRef, mk_target_data};\n     use metadata::cstore;\n-    use session::Session;\n \n     use core::cast;\n     use core::libc::c_int;\n@@ -170,11 +169,11 @@ pub mod write {\n     use back::link::{output_type_assembly, output_type_bitcode};\n     use back::link::{output_type_exe, output_type_llvm_assembly};\n     use back::link::{output_type_object};\n+    use driver::session::Session;\n     use driver::session;\n     use lib::llvm::llvm;\n     use lib::llvm::{False, True, ModuleRef, mk_pass_manager, mk_target_data};\n     use lib;\n-    use session::Session;\n \n     use core::char;\n     use core::libc::{c_char, c_int, c_uint};"}, {"sha": "2cc812c3d41056f349729549b900190d5e200ce1", "filename": "src/librustc/back/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,9 +10,9 @@\n \n \n use back::target_strs;\n+use driver::session::sess_os_to_meta_os;\n use driver::session;\n use metadata::loader::meta_section_name;\n-use session::sess_os_to_meta_os;\n \n pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n     return target_strs::t {"}, {"sha": "b68073974dcf916f895d929d6dc22af693f24dc8", "filename": "src/librustc/back/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86_64.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,9 +10,9 @@\n \n \n use back::target_strs;\n+use driver::session::sess_os_to_meta_os;\n use driver::session;\n use metadata::loader::meta_section_name;\n-use session::sess_os_to_meta_os;\n \n pub fn get_target_strs(target_os: session::os) -> target_strs::t {\n     return target_strs::t {"}, {"sha": "6e6213d4427dab4d13b54125bcd26a8fbbab5830", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,14 +12,15 @@ use core::prelude::*;\n \n use back::link;\n use back::{arm, x86, x86_64};\n+use driver::session::{Aggressive};\n+use driver::session::{Session, Session_, OptLevel, No, Less, Default};\n+use driver::session;\n use front;\n use lib::llvm::llvm;\n use metadata::{creader, cstore, filesearch};\n use metadata;\n use middle::{trans, freevars, kind, ty, typeck, lint, astencode};\n use middle;\n-use session::{Session, Session_, OptLevel, No, Less, Default, Aggressive};\n-use session;\n use util::ppaux;\n \n use core::cmp;"}, {"sha": "5da16dd5342081238d9b6215f33a0accf22e8055", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -13,7 +13,7 @@ use core::prelude::*;\n use back::link;\n use back::target_strs;\n use back;\n-use driver;\n+use driver::driver::host_triple;\n use driver::session;\n use metadata::filesearch;\n use metadata;\n@@ -293,7 +293,7 @@ pub fn basic_options() -> @options {\n         output_type: link::output_type_exe,\n         addl_lib_search_paths: ~[],\n         maybe_sysroot: None,\n-        target_triple: driver::host_triple(),\n+        target_triple: host_triple(),\n         cfg: ~[],\n         binary: ~\"rustc\",\n         test: false,"}, {"sha": "059cd9723e76aed785c8c82891cde5c19e32ac80", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,7 +11,7 @@\n // NB: this file is include_str!'ed into the compiler, re-parsed\n // and injected into each crate the compiler builds. Keep it small.\n \n-mod intrinsic {\n+pub mod intrinsic {\n     pub use intrinsic::rusti::visit_tydesc;\n \n     // FIXME (#3727): remove this when the interface has settled and the"}, {"sha": "c17a861165a3ad4a0b5046a1f824046ae785a60c", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,23 +12,22 @@\n \n use core::prelude::*;\n \n+use driver::session::Session;\n use driver::session;\n use front::config;\n-use session::Session;\n \n use core::dvec::DVec;\n use core::option;\n use core::vec;\n use syntax::ast_util::*;\n+use syntax::attr::attrs_contains_name;\n use syntax::attr;\n use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};\n use syntax::codemap;\n+use syntax::ext::base::{mk_ctxt, ext_ctxt};\n use syntax::fold;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n-use syntax::attr::attrs_contains_name;\n-\n-use syntax::ext::base::{mk_ctxt, ext_ctxt};\n \n type node_id_gen = fn@() -> ast::node_id;\n \n@@ -286,7 +285,7 @@ fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n     let vi = ast::view_item {\n         node: vi,\n         attrs: ~[],\n-        vis: ast::private,\n+        vis: ast::public,\n         span: dummy_sp()\n     };\n     return @vi;"}, {"sha": "307a58135e1387be557ac580315bce22dba7646b", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -80,7 +80,7 @@ fn dump_crates(+crate_cache: @mut ~[cache_entry]) {\n fn warn_if_multiple_versions(e: @mut Env,\n                              diag: span_handler,\n                              crate_cache: @mut ~[cache_entry]) {\n-    use either::*;\n+    use core::either::*;\n \n     if crate_cache.len() != 0u {\n         let name = loader::crate_name_from_metas("}, {"sha": "f660c796fa3b8959bb8beff9c400fb8918f0c545", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -14,9 +14,6 @@\n use core::prelude::*;\n \n use metadata::cstore::crate_metadata;\n-use dvec::DVec;\n-use hash::{Hash, HashUtil};\n-use io::WriterUtil;\n use metadata::common::*;\n use metadata::csearch::{ProvidedTraitMethodInfo, StaticMethodInfo};\n use metadata::csearch;\n@@ -28,8 +25,11 @@ use middle::{ty, resolve};\n use util::ppaux::ty_to_str;\n \n use core::cmp;\n+use core::dvec::DVec;\n use core::dvec;\n+use core::hash::{Hash, HashUtil};\n use core::int;\n+use core::io::WriterUtil;\n use core::io;\n use core::option;\n use core::str;"}, {"sha": "c0ce6ee515fabc2372c7bb96667b80de3250ae39", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -34,7 +34,7 @@ use syntax::visit::{visit_crate, visit_item};\n \n use core::ptr;\n use std::oldmap::HashMap;\n-use str_eq = str::eq;\n+use str_eq = core::str::eq;\n \n pub enum LangItem {\n     ConstTraitLangItem,         // 0"}, {"sha": "648b7e49204cddad98adb10ef2fd8f0dc2380bed", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 130, "deletions": 269, "changes": 399, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -77,15 +77,14 @@ use syntax::visit::{visit_mod, visit_ty, vt};\n use syntax::opt_vec;\n use syntax::opt_vec::OptVec;\n \n-use managed::ptr_eq;\n-use dvec::DVec;\n-use option::{Some, get, is_some, is_none};\n-use str::{connect, split_str};\n-use vec::pop;\n-\n+use core::dvec::DVec;\n+use core::managed::ptr_eq;\n+use core::option::{Some, get, is_some, is_none};\n+use core::str::{connect, split_str};\n+use core::vec::pop;\n use std::list::{Cons, List, Nil};\n use std::oldmap::HashMap;\n-use str_eq = str::eq;\n+use str_eq = core::str::eq;\n \n // Definition mapping\n pub type DefMap = HashMap<node_id,def>;\n@@ -305,6 +304,12 @@ pub enum AllowCapturingSelfFlag {\n     DontAllowCapturingSelf,     //< The \"self\" definition cannot be captured.\n }\n \n+#[deriving_eq]\n+enum NameSearchType {\n+    SearchItemsAndPublicImports,    //< Search items and public imports.\n+    SearchItemsAndAllImports,       //< Search items and all imports.\n+}\n+\n pub enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(def),\n     FoundConst(def),\n@@ -1488,7 +1493,7 @@ pub impl Resolver {\n                         let parent_link = ModuleParentLink\n                             (self.get_module_from_parent(new_parent), name);\n \n-                        child_name_bindings.define_module(privacy,\n+                        child_name_bindings.define_module(Public,\n                                                           parent_link,\n                                                           Some(def_id),\n                                                           NormalModuleKind,\n@@ -1948,10 +1953,8 @@ pub impl Resolver {\n         }\n     }\n \n-    /**\n-     * Attempts to resolve imports for the given module and all of its\n-     * submodules.\n-     */\n+    /// Attempts to resolve imports for the given module and all of its\n+    /// submodules.\n     fn resolve_imports_for_module_subtree(@mut self, module_: @mut Module) {\n         debug!(\"(resolving imports for module subtree) resolving %s\",\n                self.module_to_str(module_));\n@@ -1974,19 +1977,19 @@ pub impl Resolver {\n     }\n \n     /// Attempts to resolve imports for the given module only.\n-    fn resolve_imports_for_module(@mut self, module_: @mut Module) {\n-        if (*module_).all_imports_resolved() {\n+    fn resolve_imports_for_module(@mut self, module: @mut Module) {\n+        if module.all_imports_resolved() {\n             debug!(\"(resolving imports for module) all imports resolved for \\\n                    %s\",\n-                   self.module_to_str(module_));\n+                   self.module_to_str(module));\n             return;\n         }\n \n-        let import_count = module_.imports.len();\n-        while module_.resolved_import_count < import_count {\n-            let import_index = module_.resolved_import_count;\n-            let import_directive = module_.imports.get_elt(import_index);\n-            match self.resolve_import_for_module(module_, import_directive) {\n+        let import_count = module.imports.len();\n+        while module.resolved_import_count < import_count {\n+            let import_index = module.resolved_import_count;\n+            let import_directive = module.imports.get_elt(import_index);\n+            match self.resolve_import_for_module(module, import_directive) {\n                 Failed => {\n                     // We presumably emitted an error. Continue.\n                     let idents = import_directive.module_path.get();\n@@ -2004,7 +2007,7 @@ pub impl Resolver {\n                 }\n             }\n \n-            module_.resolved_import_count += 1;\n+            module.resolved_import_count += 1;\n         }\n     }\n \n@@ -2037,72 +2040,71 @@ pub impl Resolver {\n         }\n     }\n \n-    /**\n-     * Attempts to resolve the given import. The return value indicates\n-     * failure if we're certain the name does not exist, indeterminate if we\n-     * don't know whether the name exists at the moment due to other\n-     * currently-unresolved imports, or success if we know the name exists.\n-     * If successful, the resolved bindings are written into the module.\n-     */\n-    fn resolve_import_for_module(@mut self,\n-                                 module_: @mut Module,\n+    /// Attempts to resolve the given import. The return value indicates\n+    /// failure if we're certain the name does not exist, indeterminate if we\n+    /// don't know whether the name exists at the moment due to other\n+    /// currently-unresolved imports, or success if we know the name exists.\n+    /// If successful, the resolved bindings are written into the module.\n+    fn resolve_import_for_module(@mut self, module_: @mut Module,\n                                  import_directive: @ImportDirective)\n                               -> ResolveResult<()> {\n-        let mut resolution_result;\n+        let mut resolution_result = Failed;\n         let module_path = import_directive.module_path;\n \n         debug!(\"(resolving import for module) resolving import `%s::...` in \\\n                 `%s`\",\n-               self.idents_to_str((*module_path).get()),\n+               self.idents_to_str(module_path.get()),\n                self.module_to_str(module_));\n \n-        // One-level renaming imports of the form `import foo = bar;` are\n-        // handled specially.\n-\n-        if (*module_path).len() == 0 {\n-            resolution_result =\n-                self.resolve_one_level_renaming_import(module_,\n-                                                       import_directive);\n+        // First, resolve the module path for the directive, if necessary.\n+        let containing_module = if module_path.len() == 0 {\n+            // Use the crate root.\n+            Some(self.graph_root.get_module())\n         } else {\n-            // First, resolve the module path for the directive, if necessary.\n             match self.resolve_module_path_for_import(module_,\n                                                       module_path,\n                                                       DontUseLexicalScope,\n                                                       import_directive.span) {\n \n-                Failed => {\n-                    resolution_result = Failed;\n-                }\n+                Failed => None,\n                 Indeterminate => {\n                     resolution_result = Indeterminate;\n+                    None\n                 }\n-                Success(containing_module) => {\n-                    // We found the module that the target is contained\n-                    // within. Attempt to resolve the import within it.\n-\n-                    match *import_directive.subclass {\n-                        SingleImport(target, source, AnyNS) => {\n-                            resolution_result =\n-                                self.resolve_single_import(module_,\n-                                                           containing_module,\n-                                                           target,\n-                                                           source);\n-                        }\n-                        SingleImport(target, source, TypeNSOnly) => {\n-                            resolution_result =\n-                                self.resolve_single_module_import\n-                                    (module_, containing_module, target,\n-                                     source);\n-                        }\n-                        GlobImport => {\n-                            let span = import_directive.span;\n-                            let p = import_directive.privacy;\n-                            resolution_result =\n-                                self.resolve_glob_import(p,\n-                                                         module_,\n-                                                         containing_module,\n-                                                         span);\n-                        }\n+                Success(containing_module) => Some(containing_module),\n+            }\n+        };\n+\n+        match containing_module {\n+            None => {}\n+            Some(containing_module) => {\n+                // We found the module that the target is contained\n+                // within. Attempt to resolve the import within it.\n+\n+                match *import_directive.subclass {\n+                    SingleImport(target, source, AnyNS) => {\n+                        resolution_result =\n+                            self.resolve_single_import(module_,\n+                                                       containing_module,\n+                                                       target,\n+                                                       source);\n+                    }\n+                    SingleImport(target, source, TypeNSOnly) => {\n+                        resolution_result =\n+                            self.resolve_single_module_import(\n+                                module_,\n+                                containing_module,\n+                                target,\n+                                source);\n+                    }\n+                    GlobImport => {\n+                        let span = import_directive.span;\n+                        let privacy = import_directive.privacy;\n+                        resolution_result =\n+                            self.resolve_glob_import(privacy,\n+                                                     module_,\n+                                                     containing_module,\n+                                                     span);\n                     }\n                 }\n             }\n@@ -2575,11 +2577,13 @@ pub impl Resolver {\n         return Success(());\n     }\n \n+    /// Resolves the given module path from the given root `module_`.\n     fn resolve_module_path_from_root(@mut self,\n                                      module_: @mut Module,\n                                      module_path: @DVec<ident>,\n                                      index: uint,\n-                                     span: span)\n+                                     span: span,\n+                                     mut name_search_type: NameSearchType)\n                                   -> ResolveResult<@mut Module> {\n         let mut search_module = module_;\n         let mut index = index;\n@@ -2594,7 +2598,7 @@ pub impl Resolver {\n             match self.resolve_name_in_module(search_module,\n                                               name,\n                                               TypeNS,\n-                                              false) {\n+                                              name_search_type) {\n                 Failed => {\n                     self.session.span_err(span, ~\"unresolved name\");\n                     return Failed;\n@@ -2639,22 +2643,33 @@ pub impl Resolver {\n             }\n \n             index += 1;\n+\n+            // After the first element of the path, allow searching through\n+            // items and imports unconditionally. This allows things like:\n+            //\n+            // pub mod core {\n+            //     pub use vec;\n+            // }\n+            //\n+            // pub mod something_else {\n+            //     use core::vec;\n+            // }\n+\n+            name_search_type = SearchItemsAndPublicImports;\n         }\n \n         return Success(search_module);\n     }\n \n-    /**\n-     * Attempts to resolve the module part of an import directive or path\n-     * rooted at the given module.\n-     */\n+    /// Attempts to resolve the module part of an import directive or path\n+    /// rooted at the given module.\n     fn resolve_module_path_for_import(@mut self,\n                                       module_: @mut Module,\n                                       module_path: @DVec<ident>,\n                                       use_lexical_scope: UseLexicalScopeFlag,\n                                       span: span)\n                                    -> ResolveResult<@mut Module> {\n-        let module_path_len = (*module_path).len();\n+        let module_path_len = module_path.len();\n         assert module_path_len > 0;\n \n         debug!(\"(resolving module path for import) processing `%s` rooted at \\\n@@ -2721,12 +2736,15 @@ pub impl Resolver {\n             }\n         }\n \n-        return self.resolve_module_path_from_root(search_module,\n-                                                  module_path,\n-                                                  start_index,\n-                                                  span);\n+        self.resolve_module_path_from_root(search_module,\n+                                           module_path,\n+                                           start_index,\n+                                           span,\n+                                           SearchItemsAndPublicImports)\n     }\n \n+    /// Invariant: This must only be called during main resolution, not during\n+    /// import resolution.\n     fn resolve_item_in_lexical_scope(@mut self,\n                                      module_: @mut Module,\n                                      name: ident,\n@@ -2822,7 +2840,7 @@ pub impl Resolver {\n             match self.resolve_name_in_module(search_module,\n                                               name,\n                                               namespace,\n-                                              false) {\n+                                              SearchItemsAndAllImports) {\n                 Failed => {\n                     // Continue up the search chain.\n                 }\n@@ -2973,16 +2991,14 @@ pub impl Resolver {\n         return Success(PrefixFound(containing_module, i));\n     }\n \n-    /**\n-     * Attempts to resolve the supplied name in the given module for the\n-     * given namespace. If successful, returns the target corresponding to\n-     * the name.\n-     */\n+    /// Attempts to resolve the supplied name in the given module for the\n+    /// given namespace. If successful, returns the target corresponding to\n+    /// the name.\n     fn resolve_name_in_module(@mut self,\n                               module_: @mut Module,\n                               name: ident,\n                               namespace: Namespace,\n-                              allow_globs: bool)\n+                              +name_search_type: NameSearchType)\n                            -> ResolveResult<Target> {\n         debug!(\"(resolving name in module) resolving `%s` in `%s`\",\n                *self.session.str_of(name),\n@@ -3001,35 +3017,42 @@ pub impl Resolver {\n             }\n         }\n \n-        // Next, check the module's imports. If the module has a glob and\n-        // globs were not allowed, then we bail out; we don't know its imports\n-        // yet.\n-        if !allow_globs && module_.glob_count > 0 {\n-            debug!(\"(resolving name in module) module has glob; bailing out\");\n-            return Indeterminate;\n+        // Next, check the module's imports if necessary.\n+\n+        // If this is a search of all imports, we should be done with glob\n+        // resolution at this point.\n+        if name_search_type == SearchItemsAndAllImports {\n+            assert module_.glob_count == 0;\n         }\n \n-        // Otherwise, we check the list of resolved imports.\n+        // Check the list of resolved imports.\n         match module_.import_resolutions.find(&name) {\n             Some(import_resolution) => {\n                 if import_resolution.outstanding_references != 0 {\n-                    debug!(\"(resolving name in module) import unresolved; \\\n-                            bailing out\");\n+                    debug!(\"(resolving name in module) import \\\n+                            unresolved; bailing out\");\n                     return Indeterminate;\n                 }\n \n-                match (*import_resolution).target_for_namespace(namespace) {\n+                match import_resolution.target_for_namespace(namespace) {\n                     None => {\n-                        debug!(\"(resolving name in module) name found, but \\\n-                                not in namespace %?\",\n+                        debug!(\"(resolving name in module) name found, \\\n+                                but not in namespace %?\",\n                                namespace);\n                     }\n-                    Some(target) => {\n+                    Some(target)\n+                            if name_search_type ==\n+                                SearchItemsAndAllImports ||\n+                            import_resolution.privacy == Public => {\n                         debug!(\"(resolving name in module) resolved to \\\n                                 import\");\n                         import_resolution.state.used = true;\n                         return Success(copy target);\n                     }\n+                    Some(_) => {\n+                        debug!(\"(resolving name in module) name found, \\\n+                                but not public\");\n+                    }\n                 }\n             }\n             None => {\n@@ -3043,168 +3066,6 @@ pub impl Resolver {\n         return Failed;\n     }\n \n-    /**\n-     * Resolves a one-level renaming import of the kind `import foo = bar;`\n-     * This needs special handling, as, unlike all of the other imports, it\n-     * needs to look in the scope chain for modules and non-modules alike.\n-     */\n-    fn resolve_one_level_renaming_import(@mut self,\n-                                         module_: @mut Module,\n-                                         import_directive: @ImportDirective)\n-                                      -> ResolveResult<()> {\n-        let mut target_name;\n-        let mut source_name;\n-        let allowable_namespaces;\n-        match *import_directive.subclass {\n-            SingleImport(target, source, namespaces) => {\n-                target_name = target;\n-                source_name = source;\n-                allowable_namespaces = namespaces;\n-            }\n-            GlobImport => {\n-                fail!(~\"found `import *`, which is invalid\");\n-            }\n-        }\n-\n-        debug!(\"(resolving one-level naming result) resolving import `%s` = \\\n-                `%s` in `%s`\",\n-                *self.session.str_of(target_name),\n-                *self.session.str_of(source_name),\n-                self.module_to_str(module_));\n-\n-        // Find the matching items in the lexical scope chain for every\n-        // namespace. If any of them come back indeterminate, this entire\n-        // import is indeterminate.\n-\n-        let mut module_result;\n-        debug!(\"(resolving one-level naming result) searching for module\");\n-        match self.resolve_item_in_lexical_scope(module_,\n-                                                 source_name,\n-                                                 TypeNS,\n-                                                 SearchThroughModules) {\n-            Failed => {\n-                debug!(\"(resolving one-level renaming import) didn't find \\\n-                        module result\");\n-                module_result = None;\n-            }\n-            Indeterminate => {\n-                debug!(\"(resolving one-level renaming import) module result \\\n-                        is indeterminate; bailing\");\n-                return Indeterminate;\n-            }\n-            Success(name_bindings) => {\n-                debug!(\"(resolving one-level renaming import) module result \\\n-                        found\");\n-                module_result = Some(copy name_bindings);\n-            }\n-        }\n-\n-        let mut value_result;\n-        let mut type_result;\n-        if allowable_namespaces == TypeNSOnly {\n-            value_result = None;\n-            type_result = None;\n-        } else {\n-            debug!(\"(resolving one-level naming result) searching for value\");\n-            match self.resolve_item_in_lexical_scope(module_,\n-                                                     source_name,\n-                                                     ValueNS,\n-                                                     SearchThroughModules) {\n-\n-                Failed => {\n-                    debug!(\"(resolving one-level renaming import) didn't \\\n-                            find value result\");\n-                    value_result = None;\n-                }\n-                Indeterminate => {\n-                    debug!(\"(resolving one-level renaming import) value \\\n-                            result is indeterminate; bailing\");\n-                    return Indeterminate;\n-                }\n-                Success(name_bindings) => {\n-                    debug!(\"(resolving one-level renaming import) value \\\n-                            result found\");\n-                    value_result = Some(copy name_bindings);\n-                }\n-            }\n-\n-            debug!(\"(resolving one-level naming result) searching for type\");\n-            match self.resolve_item_in_lexical_scope(module_,\n-                                                     source_name,\n-                                                     TypeNS,\n-                                                     SearchThroughModules) {\n-\n-                Failed => {\n-                    debug!(\"(resolving one-level renaming import) didn't \\\n-                            find type result\");\n-                    type_result = None;\n-                }\n-                Indeterminate => {\n-                    debug!(\"(resolving one-level renaming import) type \\\n-                            result is indeterminate; bailing\");\n-                    return Indeterminate;\n-                }\n-                Success(name_bindings) => {\n-                    debug!(\"(resolving one-level renaming import) type \\\n-                            result found\");\n-                    type_result = Some(copy name_bindings);\n-                }\n-            }\n-        }\n-\n-        //\n-        // NB: This one results in effects that may be somewhat surprising. It\n-        // means that this:\n-        //\n-        // mod A {\n-        //     impl foo for ... { ... }\n-        //     mod B {\n-        //         impl foo for ... { ... }\n-        //         import bar = foo;\n-        //         ...\n-        //     }\n-        // }\n-        //\n-        // results in only A::B::foo being aliased to A::B::bar, not A::foo\n-        // *and* A::B::foo being aliased to A::B::bar.\n-        //\n-\n-        // If nothing at all was found, that's an error.\n-        if is_none(&module_result) &&\n-                is_none(&value_result) &&\n-                is_none(&type_result) {\n-\n-            self.session.span_err(import_directive.span,\n-                                  ~\"unresolved import\");\n-            return Failed;\n-        }\n-\n-        // Otherwise, proceed and write in the bindings.\n-        match module_.import_resolutions.find(&target_name) {\n-            None => {\n-                fail!(~\"(resolving one-level renaming import) reduced graph \\\n-                      construction or glob importing should have created the \\\n-                      import resolution name by now\");\n-            }\n-            Some(import_resolution) => {\n-                debug!(\"(resolving one-level renaming import) writing module \\\n-                        result %? for `%s` into `%s`\",\n-                       is_none(&module_result),\n-                       *self.session.str_of(target_name),\n-                       self.module_to_str(module_));\n-\n-                import_resolution.value_target = value_result;\n-                import_resolution.type_target = type_result;\n-\n-                assert import_resolution.outstanding_references >= 1;\n-                import_resolution.outstanding_references -= 1;\n-            }\n-        }\n-\n-        debug!(\"(resolving one-level renaming import) successfully resolved\");\n-        return Success(());\n-    }\n-\n     fn report_unresolved_imports(@mut self, module_: @mut Module) {\n         let index = module_.resolved_import_count;\n         let import_count = module_.imports.len();\n@@ -4538,10 +4399,8 @@ pub impl Resolver {\n         }\n     }\n \n-    /**\n-     * If `check_ribs` is true, checks the local definitions first; i.e.\n-     * doesn't skip straight to the containing module.\n-     */\n+    /// If `check_ribs` is true, checks the local definitions first; i.e.\n+    /// doesn't skip straight to the containing module.\n     fn resolve_path(@mut self,\n                     path: @path,\n                     namespace: Namespace,\n@@ -4714,6 +4573,8 @@ pub impl Resolver {\n         }\n     }\n \n+    /// Invariant: This must be called only during main resolution, not during\n+    /// import resolution.\n     fn resolve_crate_relative_path(@mut self,\n                                    path: @path,\n                                    +xray: XrayFlag,\n@@ -4727,8 +4588,8 @@ pub impl Resolver {\n         match self.resolve_module_path_from_root(root_module,\n                                                  module_path_idents,\n                                                  0,\n-                                                 path.span) {\n-\n+                                                 path.span,\n+                                                 SearchItemsAndAllImports) {\n             Failed => {\n                 self.session.span_err(path.span,\n                                       fmt!(\"use of undeclared module `::%s`\","}, {"sha": "8db48e1de605518a051bf5d6c3092978bf26782f", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,26 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use codemap::span;\n-use lib;\n use lib::llvm::llvm;\n use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n-use libc::{c_uint, c_int, c_ulonglong};\n+use lib;\n use middle::trans::common::*;\n use middle::trans::machine::llsize_of_real;\n \n use core::prelude::*;\n use core::cast::transmute;\n use core::cast;\n+use core::libc::{c_uint, c_int, c_ulonglong};\n use core::libc;\n use core::option::Some;\n use core::ptr;\n use core::str;\n use core::vec;\n use std::oldmap::HashMap;\n+use syntax::codemap::span;\n use syntax::codemap;\n \n pub fn terminate(cx: block, _: &str) {"}, {"sha": "a18bba7f3f267e43e9345641969c66ded0187959", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,6 +10,7 @@\n \n use core::prelude::*;\n \n+use driver::session::Session;\n use driver::session;\n use metadata::csearch;\n use metadata;\n@@ -22,7 +23,6 @@ use middle::resolve;\n use middle::ty;\n use middle::typeck;\n use middle;\n-use session::Session;\n use util::ppaux::{note_and_explain_region, bound_region_to_str};\n use util::ppaux::{region_to_str, explain_region, vstore_to_str};\n use util::ppaux::{ty_to_str, tys_to_str};"}, {"sha": "b2d399ac8da493ee7c007cf2d55f26752e566e73", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -24,10 +24,10 @@ use util::common::indenter;\n use util::ppaux::tys_to_str;\n use util::ppaux;\n \n+use core::result::{Result, Ok, Err};\n use core::result;\n use core::uint;\n use core::vec;\n-use result::{Result, Ok, Err};\n use std::oldmap::HashMap;\n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "1ad89fe6f1e5e68e680eeb80345bcce063fc71da", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -552,13 +552,12 @@ use util::ppaux::note_and_explain_region;\n use core::cell::{Cell, empty_cell};\n use core::cmp;\n use core::dvec::DVec;\n+use core::result::{Err, Ok, Result};\n use core::to_bytes;\n use core::uint;\n use core::vec;\n-use result::Result;\n-use result::{Ok, Err};\n-use std::oldmap::HashMap;\n use std::list::{List, Nil, Cons};\n+use std::oldmap::HashMap;\n use syntax::codemap::span;\n use syntax::codemap;\n "}, {"sha": "ed6b84b098ed5f33cbd5390f084fac3141dd81b5", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -134,21 +134,21 @@ pub mod lib {\n     pub mod llvm;\n }\n \n-use result::{Ok, Err};\n-use io::ReaderUtil;\n+use driver::driver::{host_triple, optgroups, early_error};\n+use driver::driver::{str_input, file_input, build_session_options};\n+use driver::driver::{build_session, build_configuration, parse_pretty};\n+use driver::driver::{pp_mode, pretty_print_input, list_metadata};\n+use driver::driver::{compile_input};\n+use driver::session;\n+use middle::lint;\n+\n+use core::io::ReaderUtil;\n+use core::result::{Ok, Err};\n+use std::getopts::{groups, opt_present};\n use std::getopts;\n use std::oldmap::HashMap;\n-use getopts::{opt_present};\n-use getopts::groups;\n use syntax::codemap;\n use syntax::diagnostic;\n-use driver::driver::{host_triple, optgroups, early_error,\n-                     str_input, file_input, build_session_options,\n-                     build_session, build_configuration, parse_pretty,\n-                     pp_mode, pretty_print_input, list_metadata,\n-                     compile_input};\n-use driver::session;\n-use middle::lint;\n \n pub fn version(argv0: &str) {\n     let mut vers = ~\"unknown version\";"}, {"sha": "50c7b94078bbde58a3ef32d2a7aaf5987e58bc58", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -85,7 +85,7 @@ fn opts() -> ~[(getopts::Opt, ~str)] {\n }\n \n pub fn usage() {\n-    use io::println;\n+    use core::io::println;\n \n     println(~\"Usage: rustdoc [options] <cratefile>\\n\");\n     println(~\"Options:\\n\");"}, {"sha": "b57d8416aaba6ce635ddaed16a8676d0db08a899", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -108,7 +108,7 @@ fn pandoc_writer(\n     ];\n \n     do generic_writer |markdown| {\n-        use io::WriterUtil;\n+        use core::io::WriterUtil;\n \n         debug!(\"pandoc cmd: %s\", pandoc_cmd);\n         debug!(\"pandoc args: %s\", str::connect(pandoc_args, ~\" \"));\n@@ -281,7 +281,7 @@ mod test {\n }\n \n fn write_file(path: &Path, s: ~str) {\n-    use io::WriterUtil;\n+    use core::io::WriterUtil;\n \n     match io::file_writer(path, ~[io::Create, io::Truncate]) {\n       result::Ok(writer) => {"}, {"sha": "54f1a779bcc65b6ecc26ebeb22e869082d44a6b0", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -31,41 +31,41 @@ extern mod syntax(vers = \"0.6\");\n use core::*;\n use std::par;\n \n-mod pass;\n-mod config;\n-mod parse;\n-mod extract;\n-mod attr_parser;\n-mod doc;\n-mod markdown_index_pass;\n-mod markdown_pass;\n-mod markdown_writer;\n-mod fold;\n-mod path_pass;\n-mod attr_pass;\n-mod tystr_pass;\n-mod prune_hidden_pass;\n-mod desc_to_brief_pass;\n-mod text_pass;\n-mod unindent_pass;\n-mod trim_pass;\n-mod astsrv;\n-mod demo;\n-mod sort_pass;\n-mod sort_item_name_pass;\n-mod sort_item_type_pass;\n-mod page_pass;\n-mod sectionalize_pass;\n-mod escape_pass;\n-mod prune_private_pass;\n-mod util;\n+pub mod pass;\n+pub mod config;\n+pub mod parse;\n+pub mod extract;\n+pub mod attr_parser;\n+pub mod doc;\n+pub mod markdown_index_pass;\n+pub mod markdown_pass;\n+pub mod markdown_writer;\n+pub mod fold;\n+pub mod path_pass;\n+pub mod attr_pass;\n+pub mod tystr_pass;\n+pub mod prune_hidden_pass;\n+pub mod desc_to_brief_pass;\n+pub mod text_pass;\n+pub mod unindent_pass;\n+pub mod trim_pass;\n+pub mod astsrv;\n+pub mod demo;\n+pub mod sort_pass;\n+pub mod sort_item_name_pass;\n+pub mod sort_item_type_pass;\n+pub mod page_pass;\n+pub mod sectionalize_pass;\n+pub mod escape_pass;\n+pub mod prune_private_pass;\n+pub mod util;\n \n use doc::ItemUtils;\n use doc::Item;\n use pass::Pass;\n use config::Config;\n \n-fn main() {\n+pub fn main() {\n     let args = os::args();\n \n     if args.contains(&~\"-h\") || args.contains(&~\"--help\") {\n@@ -144,7 +144,7 @@ fn run(config: Config) {\n     }\n }\n \n-fn time<T>(what: ~str, f: fn() -> T) -> T {\n+pub fn time<T>(what: ~str, f: fn() -> T) -> T {\n     let start = std::time::precise_time_s();\n     let rv = f();\n     let end = std::time::precise_time_s();"}, {"sha": "cc04585153940481027fa8133d04527b7bc666c8", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -27,14 +27,14 @@ extern mod rustc(vers = \"0.6\");\n extern mod syntax(vers = \"0.6\");\n \n use core::*;\n-use io::{ReaderUtil, WriterUtil};\n-use std::{json, semver, getopts};\n-use std::net::url;\n-use hashmap::linear::LinearMap;\n-use rustc::metadata::filesearch;\n+use core::hashmap::linear::LinearMap;\n+use core::io::{ReaderUtil, WriterUtil};\n use rustc::driver::{driver, session};\n-use syntax::{ast, attr, codemap, diagnostic, parse, visit};\n+use rustc::metadata::filesearch;\n+use std::net::url;\n+use std::{json, semver, getopts};\n use syntax::codemap::spanned;\n+use syntax::{ast, attr, codemap, diagnostic, parse, visit};\n \n mod usage;\n mod util;"}, {"sha": "bd2dd102e45ce384c5509213f4d355c5eafa2038", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use Listener;\n+\n use core::*;\n-use hashmap::linear::LinearMap;\n-use rustc::metadata::filesearch;\n+use core::hashmap::linear::LinearMap;\n use rustc::driver::{driver, session};\n-use syntax::ast_util::*;\n-use syntax::{ast, attr, codemap, diagnostic, fold, parse, visit};\n-use codemap::{span, dummy_sp, spanned};\n+use rustc::metadata::filesearch;\n+use std::getopts::groups::getopts;\n use std::semver;\n use std::{json, term, sort, getopts};\n-use getopts::groups::getopts;\n-use Listener;\n-\n+use syntax::ast_util::*;\n+use syntax::codemap::{span, dummy_sp, spanned};\n use syntax::ext::base::{mk_ctxt, ext_ctxt};\n use syntax::ext::build;\n+use syntax::{ast, attr, codemap, diagnostic, fold, parse, visit};\n \n pub struct Package {\n     id: ~str,"}, {"sha": "5212a17f373745d565ed141ba1bbfa2d2c9b6ea7", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -865,7 +865,7 @@ pub impl BigInt {\n mod biguint_tests {\n \n     use core::*;\n-    use num::{IntConvertible, Zero, One};\n+    use core::num::{IntConvertible, Zero, One};\n     use super::{BigInt, BigUint, BigDigit};\n \n     #[test]"}, {"sha": "42f954f7c390d08e9a3ea570ee6a49ea251b4682", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -771,10 +771,10 @@ mod test {\n         writer_chan: WriterChanFactory<F>,\n         port: uint) {\n \n-        use net::tcp;\n+        use core::cell::Cell;\n         use net::ip;\n-        use cell::Cell;\n         use net::tcp::TcpSocket;\n+        use net::tcp;\n         use uv;\n \n         // Indicate to the client task that the server is listening"}, {"sha": "7c7f3390f2e93f56c929ca76eed971a0aa70537d", "filename": "src/libstd/semver.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsemver.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,14 +10,14 @@\n \n //! Semver parsing and logic\n \n-use io;\n-use io::{ReaderUtil};\n-use option::{Option, Some, None};\n-use uint;\n-use str;\n-use to_str::ToStr;\n-use char;\n+use core::char;\n use core::cmp;\n+use core::io::{ReaderUtil};\n+use core::io;\n+use core::option::{Option, Some, None};\n+use core::str;\n+use core::to_str::ToStr;\n+use core::uint;\n \n #[deriving_eq]\n pub enum Identifier {"}, {"sha": "f29872bf3871243a6ff4e5897a6af79463232ca0", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -113,7 +113,7 @@ pub mod serialize;\n // 'std' so that macro-expanded references to std::serialize and such\n // can be resolved within libcore.\n #[doc(hidden)] // FIXME #3538\n-mod std {\n+pub mod std {\n     pub use serialize;\n     pub use test;\n }"}, {"sha": "3ebebe59d946b7177d62d6a03b9f88cee0cb9cf8", "filename": "src/libstd/test.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -594,15 +594,14 @@ fn calc_result(desc: &TestDesc, task_succeeded: bool) -> TestResult {\n }\n \n pub mod bench {\n-\n-    use rand;\n-    use u64;\n-    use vec;\n     use time::precise_time_ns;\n     use test::{BenchHarness, BenchSamples};\n     use stats::Stats;\n-    use num;\n-    use rand;\n+\n+    use core::num;\n+    use core::rand;\n+    use core::u64;\n+    use core::vec;\n \n     pub impl BenchHarness {\n "}, {"sha": "7bd411315b225154095fb50686a4d68b69c53289", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -221,7 +221,7 @@ mod test {\n                 let ch = ch.clone();\n                 let hl_loop_clone = hl_loop.clone();\n                 do task::spawn {\n-                    use rand::*;\n+                    use core::rand::*;\n                     let rng = Rng();\n                     for iter::repeat(times) {\n                         sleep(&hl_loop_clone, rng.next() as uint % maxms);"}, {"sha": "1898ef77320b9ce13ca48522298b9aa7eae180e5", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,21 +12,20 @@\n \n use ll = uv_ll;\n use iotask = uv_iotask;\n-use get_gl = get;\n+use get_gl = self::get;\n use uv_iotask::{IoTask, spawn_iotask};\n \n+use core::clone::Clone;\n+use core::comm::{Port, Chan, SharedChan, select2i};\n use core::either::{Left, Right};\n use core::libc;\n-use core::comm::{Port, Chan, SharedChan, select2i};\n-use core::unstable::global::{global_data_clone_create,\n-                            global_data_clone};\n-use core::unstable::weak_task::weaken_task;\n+use core::option::{Some, None};\n use core::str;\n use core::task::{task, SingleThreaded, spawn};\n use core::task;\n+use core::unstable::global::{global_data_clone_create, global_data_clone};\n+use core::unstable::weak_task::weaken_task;\n use core::vec;\n-use core::clone::Clone;\n-use core::option::{Some, None};\n \n /**\n  * Race-free helper to get access to a global task where a libuv\n@@ -123,7 +122,7 @@ fn spawn_loop() -> IoTask {\n mod test {\n     use core::prelude::*;\n \n-    use get_gl = get;\n+    use get_gl = uv_global_loop::get;\n     use uv::iotask;\n     use uv::ll;\n     use uv_global_loop::*;"}, {"sha": "7f47db3750419ee295a04c74c813db8c7b1712f4", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -396,7 +396,7 @@ fn unwrap<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>>(\n \n //#[test]\n fn test() {\n-    use io::WriterUtil;\n+    use core::io::WriterUtil;\n \n     let db = @Mut(Database { db_filename: Path(\"db.json\"),\n                              db_cache: LinearMap::new(),"}, {"sha": "c414f7a0b9cbc97139082775a769ea67de1637f0", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -24,7 +24,8 @@ use ext::base::*;\n use ext::base;\n use ext::build;\n use ext::build::*;\n-use unstable::extfmt::ct::*;\n+\n+use core::unstable::extfmt::ct::*;\n \n pub fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {"}, {"sha": "b4a74d52fb6f3f381d5fecf220256c7aefd977b8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -61,10 +61,10 @@ use ast::{vstore_uniq};\n use ast;\n use ast_util::{ident_to_path, operator_prec};\n use ast_util;\n-use classify;\n use codemap::{span,FssNone, BytePos, spanned, respan, mk_sp};\n use codemap;\n use parse::attr::parser_attr;\n+use parse::classify;\n use parse::common::{seq_sep_none, token_to_str};\n use parse::common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed};\n use parse::lexer::reader;"}, {"sha": "5fc93412c50168436e926c804cce543562faa2c8", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -13,9 +13,8 @@\n // type, and vice versa.\n \n use core::prelude::*;\n-\n-use hashmap::linear::LinearMap;\n-use dvec::DVec;\n+use core::dvec::DVec;\n+use core::hashmap::linear::LinearMap;\n \n pub struct Interner<T> {\n     priv map: @mut LinearMap<T, uint>,"}, {"sha": "05244ad096a3b629ea6002e64a6cec05fda0d986", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,7 +10,7 @@\n \n #[legacy_modes];\n \n-use dvec::DVec;\n+use core::dvec::DVec;\n \n pub struct Entry<A,B> {key: A, value: B}\n "}, {"sha": "10a7238a3f7d01ac49da70f3938fbba786307d95", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n pub trait MyNum : Add<Self,Self> Sub<Self,Self> Mul<Self,Self> Eq {\n }"}, {"sha": "5ee4a01f2b9c54ad87e840971472eb4299d63b9d", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unresolved\n-use baz::zed::bar;\n+use baz::zed::bar;  //~ ERROR unresolved name\n+//~^ ERROR failed to resolve import\n+\n mod baz {}\n mod zed {\n     pub fn bar() { debug!(\"bar3\"); }"}, {"sha": "a0d2536d85f0e7d2b22e04fa75ae7a855cd0e138", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,7 +10,8 @@\n \n // Testing that we don't fail abnormally after hitting the errors\n \n-use unresolved::*; //~ ERROR unresolved import\n+use unresolved::*; //~ ERROR unresolved name\n+//~^ ERROR failed to resolve import\n \n fn main() {\n }"}, {"sha": "1de311f4de5482e02615a7cb846944f5ab88f58d", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dvec::DVec;\n+use core::dvec::DVec;\n \n-type parser = {\n+struct parser {\n     tokens: DVec<int>,\n-};\n+}\n \n trait parse {\n     fn parse() -> ~[int];\n }\n \n impl parse for parser {\n     fn parse() -> ~[int] {\n-        dvec::unwrap(self.tokens) //~ ERROR moving out of immutable field\n+        ::core::dvec::unwrap(self.tokens) //~ ERROR moving out of immutable field\n     }\n }\n "}, {"sha": "1f425b0922337431c2ee51be5de60b3f73bdd496", "filename": "src/test/compile-fail/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -13,7 +13,7 @@\n // we let an impl method can have more permissive bounds than the trait\n // method it's implementing, the return type might be less specific than\n // needed. Just punt and make it invariant.\n-use iter::BaseIter;\n+use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy + Const,D>(x: C) -> C;"}, {"sha": "ae7869d4a6890d0c63f2349c62c4de26eb45425c", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that an impl method's bounds aren't *more* restrictive\n // than the trait method it's implementing\n-use iter::BaseIter;\n+use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy,D>(x: C) -> C;"}, {"sha": "c28fd462b410b796d38def7a6f131fb2aa5371cd", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that ty params get matched correctly when comparing\n // an impl against a trait\n-use iter::BaseIter;\n+use core::iter::BaseIter;\n \n trait A {\n   fn b<C:Copy,D>(x: C) -> C;"}, {"sha": "c88a94ef62969427df6e80d3c6cd3b234f26df77", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n trait Hahaha: Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq //~ ERROR Duplicate supertrait in trait declaration\n               Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq Eq"}, {"sha": "f337914da6dcac63761259bfcdac119721420b64", "filename": "src/test/compile-fail/issue-511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-511.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n extern mod std;\n-use cmp::Eq;\n+use core::cmp::Eq;\n \n fn f<T:Eq>(o: &mut Option<T>) {\n     assert *o == option::None;"}, {"sha": "7e65d1908c4d115f9bb1fbcc14ebf7a244b77996", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,7 +11,6 @@\n \n \n extern mod std;\n-use option::Some;\n \n // error-pattern: mismatched types\n "}, {"sha": "6b3b6f1463f58b6f335b1575d4c67d3db6e4ed78", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,7 +10,6 @@\n // except according to those terms.\n \n extern mod std;\n-use option::Some;\n \n // error-pattern: mismatched types\n "}, {"sha": "c25205c58d1960043257f69ae0393e5084db563a", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,7 +11,7 @@\n mod argparse {\n     extern mod std;\n \n-    use either::{Either, Left, Right};\n+    use core::either::{Either, Left, Right};\n \n     pub struct Flag {\n         name: &str,"}, {"sha": "9ca343e3866b883d0831774e071e2c7bb9b1a102", "filename": "src/test/run-fail/issue-2156.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2156.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:explicit failure\n // Don't double free the string\n extern mod std;\n-use io::ReaderUtil;\n+use core::io::ReaderUtil;\n \n fn main() {\n     do io::with_str_reader(~\"\") |rdr| {"}, {"sha": "6f7276af798deba6e95cd2967c4b67413c8efec0", "filename": "src/test/run-fail/zip-different-lengths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,7 +12,7 @@\n // the assert should fail at runtime\n // error-pattern:Assertion same_length(chars, ints) failed\n extern mod std;\n-use vec::{same_length, zip};\n+use core::vec::{same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert start < end;"}, {"sha": "171e7a836bee15d7aed1af48403f441ac6deaf9c", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -17,13 +17,13 @@ extern mod std;\n // These tests used to be separate files, but I wanted to refactor all\n // the common code.\n \n-use cmp::Eq;\n-use std::ebml;\n use EBReader = std::ebml::reader;\n use EBWriter = std::ebml::writer;\n-use io::Writer;\n-use std::serialize::{Encodable, Decodable};\n+use core::cmp::Eq;\n+use core::io::Writer;\n+use std::ebml;\n use std::prettyprint;\n+use std::serialize::{Encodable, Decodable};\n use std::time;\n \n fn test_prettyprint<A:Encodable<prettyprint::Serializer>>("}, {"sha": "a6d8eac3bd16387640e40a96b513a70d6eee9385", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn main() {\n-    use vec::from_fn;\n-    log(debug, vec::len(from_fn(2, |i| i)));\n+    use core::vec::from_fn;\n+    log(debug, ::core::vec::len(from_fn(2, |i| i)));\n     {\n-        use vec::*;\n+        use core::vec::*;\n         log(debug, len(~[2]));\n     }\n }"}, {"sha": "972a36697317184c0f653bc4e104b0a8e03fe1c9", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,7 +12,7 @@\n \n \n use baz::zed;\n-use zed::bar;\n+use baz::zed::bar;\n \n mod baz {\n     pub mod zed {"}, {"sha": "bbdbdd54f91f68d6ab6d90672aa5976cf4182ebf", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -18,6 +18,6 @@ mod foo {\n     }\n }\n mod bar {\n-    pub use zed::baz;\n+    pub use foo::zed::baz;\n }\n pub fn main() { baz(); }"}, {"sha": "4c6cc3458c43b593c660ced874d4b4815c82ba12", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -18,7 +18,7 @@ mod foo {\n     }\n }\n mod bar {\n-    pub use zed::baz;\n+    pub use foo::zed::baz;\n     pub mod foo {\n         pub mod zed {}\n     }"}, {"sha": "7b3247fafc7d4ec5ccd51d4b1757819975f7d3cd", "filename": "src/test/run-pass/issue-2611.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use iter::BaseIter;\n+use core::iter::BaseIter;\n \n trait FlatMapToVec<A> {\n   fn flat_map_to_vec<B, IB:BaseIter<B>>(op: fn(&A) -> IB) -> ~[B];"}, {"sha": "2b4acc34f4659ba77960daba1ba8b79ec8e7e2f7", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,12 +11,11 @@\n // except according to those terms.\n \n extern mod std;\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n use std::oldmap::HashMap;\n use std::json;\n \n-enum object\n-{\n+enum object {\n     bool_value(bool),\n     int_value(i64),\n }"}, {"sha": "3340a387a128c4e6bb6989a0302fa4ace3392c6a", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,7 +12,7 @@\n \n /// Map representation\n \n-use io::ReaderUtil;\n+use core::io::ReaderUtil;\n \n extern mod std;\n "}, {"sha": "e0c074c968f38081ddb254372e57ddc1d5e872a0", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-use comm::{Select2, Selectable};\n+use core::comm::{Select2, Selectable};\n \n pub fn main() {\n     let (p,c) = comm::stream();"}, {"sha": "e4649ed047036a74edbca271bf4bebdd362ca226", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,7 +12,7 @@\n \n // rustc --test ignores2.rs && ./ignores2\n extern mod std;\n-use path::{Path};\n+use core::path::{Path};\n \n type rsrc_loader = fn~ (path: &Path) -> result::Result<~str, ~str>;\n "}, {"sha": "4671b25ce22d4c1ea5664940e3885137c1793e6e", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -20,7 +20,7 @@ extern mod std;\n \n // Extern mod controls linkage. Use controls the visibility of names to modules that are\n // already linked in. Using WriterUtil allows us to use the write_line method.\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n \n // Represents a position on a canvas.\n struct Point {"}, {"sha": "cc774e213760e656b7e84d9c4ee6b58839b09bba", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -1,6 +1,6 @@\n extern mod std;\n \n-use comm::Chan;\n+use core::comm::Chan;\n \n type RingBuffer = ~[float];\n type SamplesFn = fn~ (samples: &RingBuffer);"}, {"sha": "267f365c7134c3adff8e0e0fdb0579da709eac25", "filename": "src/test/run-pass/new-import-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-import-syntax.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use io::println;\n+use core::io::println;\n \n pub fn main() {\n     println(\"Hello world!\");"}, {"sha": "541d898c1ff2f66ca981b6903fa5c2fb93d2fb2b", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,9 +11,9 @@\n // xfail-fast\n \n use core::bool;\n+use core::libc::c_void;\n+use core::vec::UnboxedVecRepr;\n use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n-use libc::c_void;\n-use vec::UnboxedVecRepr;\n \n #[doc = \"High-level interfaces to `intrinsic::visit_ty` reflection system.\"]\n "}, {"sha": "12e8ab1384fccc4f79e04603d52c42d62b24ec52", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,7 +11,9 @@\n // except according to those terms.\n \n extern mod std;\n-use libc, sys, cast;\n+use core::libc;\n+use core::sys;\n+use core::cast;\n use std::arena::Arena;\n \n struct Bcx {"}, {"sha": "3f11a9bdce3c7da7cba06ac61b4786c2ac1eeef6", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n fn iter<T>(v: ~[T], it: fn(&T) -> bool) {\n     let mut i = 0u, l = v.len();"}, {"sha": "c39a0f36d5804a4ee2757c6d1272f900c3ed10d6", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n extern mod std;\n-use io::WriterUtil;\n+use core::io::WriterUtil;\n use std::tempfile;\n \n pub fn main() {"}, {"sha": "3e71875c4b5c0803106c58ef77509bea3c6a49fc", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -13,8 +13,8 @@\n \n extern mod std;\n \n-use comm::Chan;\n-use comm::Port;\n+use core::comm::Chan;\n+use core::comm::Port;\n \n pub fn main() { test05(); }\n "}, {"sha": "36b1e6cd4de405dd49ed5f533bd81ad1131203f9", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::{Eq, Ord};\n-use num::NumCast::from;\n+use core::cmp::{Eq, Ord};\n+use core::num::NumCast::from;\n \n extern mod std;\n use std::cmp::FuzzyEq;"}, {"sha": "70eed496db3f551844f868d8931fa0596a8d4af4", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,7 +12,7 @@\n \n // Extending Num and using inherited static methods\n \n-use num::NumCast::from;\n+use core::num::NumCast::from;\n \n trait Num {\n     static fn from_int(i: int) -> Self;"}, {"sha": "44b4bd60f1de064f8b14dee7583afa16eecc4744", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Ord;\n-use num::NumCast::from;\n+use core::cmp::Ord;\n+use core::num::NumCast::from;\n \n pub trait NumExt: NumCast Ord { }\n "}, {"sha": "5c9d9e6a13b5fee6b8536ff752df5a1b035c3076", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -12,8 +12,8 @@\n \n // A more complex example of numeric extensions\n \n-use cmp::{Eq, Ord};\n-use num::NumCast::from;\n+use core::cmp::{Eq, Ord};\n+use core::num::NumCast::from;\n \n extern mod std;\n use std::cmp::FuzzyEq;"}, {"sha": "c2cd56ad1078e8c1e8c2f644fe6cf00c0dd47926", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::{Eq, Ord};\n-use num::NumCast::from;\n+use core::cmp::{Eq, Ord};\n+use core::num::NumCast::from;\n \n pub trait NumExt: Eq Ord NumCast {}\n "}, {"sha": "ac8d80359d87482509a6b3dac8e069f6783a3b76", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::{Eq, Ord};\n-use num::NumCast::from;\n+use core::cmp::{Eq, Ord};\n+use core::num::NumCast::from;\n \n pub trait NumExt: Eq NumCast {}\n "}, {"sha": "7ecc15a0d812d03299e4356609f53fb3ec44206d", "filename": "src/test/run-pass/trait-inheritance-overloading-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n trait MyNum : Eq { }\n "}, {"sha": "54a9ea9ad1e32551c6bc75e823b1594a4aa5ca32", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n trait MyNum : Add<Self,Self> Sub<Self,Self> Mul<Self,Self> Eq { }\n "}, {"sha": "3cc184572865be856abc44e06825710fd031a672", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cmp::Eq;\n+use core::cmp::Eq;\n \n fn sendable() {\n "}, {"sha": "1ade9e8246fdd9264817fbd3f8ca2db4823277ed", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f728238bb49759a3b3b64599808c3265f2caca/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=a3f728238bb49759a3b3b64599808c3265f2caca", "patch": "@@ -10,7 +10,7 @@\n \n // In this case, the code should compile and should\n // succeed at runtime\n-use vec::{head, last, same_length, zip};\n+use core::vec::{head, last, same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {\n     assert start < end;"}]}