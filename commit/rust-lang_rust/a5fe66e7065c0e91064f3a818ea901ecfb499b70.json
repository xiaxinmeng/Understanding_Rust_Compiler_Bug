{"sha": "a5fe66e7065c0e91064f3a818ea901ecfb499b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZmU2NmU3MDY1YzBlOTEwNjRmM2E4MThlYTkwMWVjZmI0OTliNzA=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-27T19:29:38Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-28T17:47:28Z"}, "message": "Adding upcalls to to ref() and deref() tasks. This is the first step towards atomic reference counting of tasks.", "tree": {"sha": "52d5186c3ddbc4af42c3db3218cbaac909a75e6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52d5186c3ddbc4af42c3db3218cbaac909a75e6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5fe66e7065c0e91064f3a818ea901ecfb499b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fe66e7065c0e91064f3a818ea901ecfb499b70", "html_url": "https://github.com/rust-lang/rust/commit/a5fe66e7065c0e91064f3a818ea901ecfb499b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5fe66e7065c0e91064f3a818ea901ecfb499b70/comments", "author": null, "committer": null, "parents": [{"sha": "5302cde188bba80dd38c58eaafa792d621b0818c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5302cde188bba80dd38c58eaafa792d621b0818c", "html_url": "https://github.com/rust-lang/rust/commit/5302cde188bba80dd38c58eaafa792d621b0818c"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "aa50b75e8b7d99ea996c051ae03904929e6591d3", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=a5fe66e7065c0e91064f3a818ea901ecfb499b70", "patch": "@@ -57,6 +57,8 @@ type upcalls =\n      vec_append: ValueRef,\n      get_type_desc: ValueRef,\n      new_task: ValueRef,\n+     take_task: ValueRef,\n+     drop_task: ValueRef,\n      start_task: ValueRef,\n      ivec_resize: ValueRef,\n      ivec_spill: ValueRef,\n@@ -129,6 +131,8 @@ fn declare_upcalls(tn: type_names, tydesc_type: TypeRef,\n                 ~[T_ptr(T_nil()), T_size_t(), T_size_t(), T_size_t(),\n                   T_ptr(T_ptr(tydesc_type))], T_ptr(tydesc_type)),\n           new_task: d(\"new_task\", ~[T_ptr(T_str())], taskptr_type),\n+          take_task: dv(\"take_task\", ~[taskptr_type]),\n+          drop_task: dv(\"drop_task\", ~[taskptr_type]),\n           start_task:\n               d(\"start_task\", ~[taskptr_type, T_int(), T_int(), T_size_t()],\n                 taskptr_type),"}, {"sha": "28308b853eaaa6ee30ae2381d44d1a233935f1d8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a5fe66e7065c0e91064f3a818ea901ecfb499b70", "patch": "@@ -1221,7 +1221,13 @@ fn make_copy_glue(cx: &@block_ctxt, v: ValueRef, t: &ty::t) {\n     // NB: v is an *alias* of type t here, not a direct value.\n \n     let bcx;\n-    if ty::type_is_boxed(bcx_tcx(cx), t) {\n+\n+    if ty::type_is_task(bcx_tcx(cx), t) {\n+        let task_ptr = cx.build.Load(v);\n+        cx.build.Call(bcx_ccx(cx).upcalls.take_task,\n+                      ~[cx.fcx.lltaskptr, task_ptr]);\n+        bcx = cx;\n+    } else if ty::type_is_boxed(bcx_tcx(cx), t) {\n         bcx = incr_refcnt_of_boxed(cx, cx.build.Load(v)).bcx;\n     } else if (ty::type_is_structural(bcx_tcx(cx), t)) {\n         bcx = duplicate_heap_parts_if_necessary(cx, v, t).bcx;\n@@ -1381,7 +1387,12 @@ fn make_drop_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n           ty::ty_box(_) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n           ty::ty_port(_) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n           ty::ty_chan(_) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n-          ty::ty_task. { decr_refcnt_maybe_free(cx, v0, v0, t) }\n+          ty::ty_task. {\n+            let task_ptr = cx.build.Load(v0);\n+            {bcx: cx,\n+             val: cx.build.Call(bcx_ccx(cx).upcalls.drop_task,\n+                                ~[cx.fcx.lltaskptr, task_ptr])}\n+          }\n           ty::ty_obj(_) {\n             let box_cell =\n                 cx.build.GEP(v0, ~[C_int(0), C_int(abi::obj_field_box)]);"}, {"sha": "fb8f18993b7cfae3e46a37ec65c29b80ad6f32ab", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a5fe66e7065c0e91064f3a818ea901ecfb499b70", "patch": "@@ -162,6 +162,7 @@ export type_is_bot;\n export type_is_box;\n export type_is_boxed;\n export type_is_chan;\n+export type_is_task;\n export type_is_fp;\n export type_is_integral;\n export type_is_native;\n@@ -842,6 +843,10 @@ fn type_is_chan(cx: &ctxt, ty: &t) -> bool {\n     alt struct(cx, ty) { ty_chan(_) { ret true; } _ { ret false; } }\n }\n \n+fn type_is_task(cx: &ctxt, ty: &t) -> bool {\n+    alt struct(cx, ty) { ty_task. { ret true; } _ { ret false; } }\n+}\n+\n fn type_is_structural(cx: &ctxt, ty: &t) -> bool {\n     alt struct(cx, ty) {\n       ty_rec(_) { ret true; }"}, {"sha": "103aa49a6e9f9d25d55b6bc84d6852cd4954a738", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=a5fe66e7065c0e91064f3a818ea901ecfb499b70", "patch": "@@ -547,6 +547,23 @@ upcall_new_task(rust_task *spawner, rust_vec *name) {\n     return task;\n }\n \n+extern \"C\" CDECL void\n+upcall_take_task(rust_task *task, rust_task *target) {\n+    LOG_UPCALL_ENTRY(task);\n+    if(target) {\n+        target->ref();\n+    }\n+}\n+\n+extern \"C\" CDECL void\n+upcall_drop_task(rust_task *task, rust_task *target) {\n+    LOG_UPCALL_ENTRY(task);\n+    if(target) {\n+        //target->deref();\n+        --target->ref_count;\n+    }\n+}\n+\n extern \"C\" CDECL rust_task *\n upcall_start_task(rust_task *spawner,\n                   rust_task *task,"}, {"sha": "d6c218d936d8ccd208b4895927bdbb9ee2f630c3", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=a5fe66e7065c0e91064f3a818ea901ecfb499b70", "patch": "@@ -59,6 +59,7 @@ upcall_chan_target_task\n upcall_clone_chan\n upcall_del_chan\n upcall_del_port\n+upcall_drop_task\n upcall_dup_str\n upcall_exit\n upcall_fail\n@@ -87,6 +88,7 @@ upcall_shared_malloc\n upcall_shared_free\n upcall_sleep\n upcall_start_task\n+upcall_take_task\n upcall_trace_str\n upcall_trace_word\n upcall_vec_append"}, {"sha": "67f6b107b3a4ccc6a02ddd67b872d6e822652203", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a5fe66e7065c0e91064f3a818ea901ecfb499b70/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=a5fe66e7065c0e91064f3a818ea901ecfb499b70", "patch": "@@ -10,7 +10,7 @@\n #include \"lock_and_signal.h\"\n \n #if defined(__WIN32__)\n-lock_and_signal::lock_and_signal() \n+lock_and_signal::lock_and_signal()\n     : alive(true)\n {\n     // FIXME: In order to match the behavior of pthread_cond_broadcast on"}]}