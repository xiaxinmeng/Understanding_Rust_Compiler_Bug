{"sha": "29f5c98a1737b4fd86cd56ebbc5e1a5cab68d9ca", "node_id": "C_kwDOAAsO6NoAKDI5ZjVjOThhMTczN2I0ZmQ4NmNkNTZlYmJjNWUxYTVjYWI2OGQ5Y2E", "commit": {"author": {"name": "C\u00e9dric Barreteau", "email": "cbarrete@users.noreply.github.com", "date": "2021-11-28T22:59:17Z"}, "committer": {"name": "C\u00e9dric Barreteau", "email": "cbarrete@users.noreply.github.com", "date": "2021-11-30T02:14:20Z"}, "message": "Remove unnecessary check in VecDeque::grow\n\nAll callers already check that the buffer is full before calling\n`grow()`. This is where it makes the most sense, since `grow()` is\n`inline(never)` and we don't want to pay for a function call just for\nthat check.\nIt could also be argued that it would be correct to call `grow()` even\nif the buffer wasn't full yet.\nThis change breaks no code since `grow()` is not `pub`.", "tree": {"sha": "bca3eef5ac501fc1db275bb3f5b85dad60b9503e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca3eef5ac501fc1db275bb3f5b85dad60b9503e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29f5c98a1737b4fd86cd56ebbc5e1a5cab68d9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29f5c98a1737b4fd86cd56ebbc5e1a5cab68d9ca", "html_url": "https://github.com/rust-lang/rust/commit/29f5c98a1737b4fd86cd56ebbc5e1a5cab68d9ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29f5c98a1737b4fd86cd56ebbc5e1a5cab68d9ca/comments", "author": {"login": "cbarrete", "id": 62146989, "node_id": "MDQ6VXNlcjYyMTQ2OTg5", "avatar_url": "https://avatars.githubusercontent.com/u/62146989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbarrete", "html_url": "https://github.com/cbarrete", "followers_url": "https://api.github.com/users/cbarrete/followers", "following_url": "https://api.github.com/users/cbarrete/following{/other_user}", "gists_url": "https://api.github.com/users/cbarrete/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbarrete/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbarrete/subscriptions", "organizations_url": "https://api.github.com/users/cbarrete/orgs", "repos_url": "https://api.github.com/users/cbarrete/repos", "events_url": "https://api.github.com/users/cbarrete/events{/privacy}", "received_events_url": "https://api.github.com/users/cbarrete/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbarrete", "id": 62146989, "node_id": "MDQ6VXNlcjYyMTQ2OTg5", "avatar_url": "https://avatars.githubusercontent.com/u/62146989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbarrete", "html_url": "https://github.com/cbarrete", "followers_url": "https://api.github.com/users/cbarrete/followers", "following_url": "https://api.github.com/users/cbarrete/following{/other_user}", "gists_url": "https://api.github.com/users/cbarrete/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbarrete/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbarrete/subscriptions", "organizations_url": "https://api.github.com/users/cbarrete/orgs", "repos_url": "https://api.github.com/users/cbarrete/repos", "events_url": "https://api.github.com/users/cbarrete/events{/privacy}", "received_events_url": "https://api.github.com/users/cbarrete/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45", "html_url": "https://github.com/rust-lang/rust/commit/6db0a0e9a4a2f55b1a85954e114ada0b45c32e45"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "00862615c3c7acf8f8e68d1c527d4c60a9bc8223", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29f5c98a1737b4fd86cd56ebbc5e1a5cab68d9ca/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29f5c98a1737b4fd86cd56ebbc5e1a5cab68d9ca/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=29f5c98a1737b4fd86cd56ebbc5e1a5cab68d9ca", "patch": "@@ -2179,19 +2179,21 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n+    // Double the buffer size. This method is inline(never), so we expect it to only\n+    // be called in cold paths.\n     // This may panic or abort\n     #[inline(never)]\n     fn grow(&mut self) {\n-        if self.is_full() {\n-            let old_cap = self.cap();\n-            // Double the buffer size.\n-            self.buf.reserve_exact(old_cap, old_cap);\n-            assert!(self.cap() == old_cap * 2);\n-            unsafe {\n-                self.handle_capacity_increase(old_cap);\n-            }\n-            debug_assert!(!self.is_full());\n+        // Extend or possibly remove this assertion when valid use-cases for growing the\n+        // buffer without it being full emerge\n+        debug_assert!(self.is_full());\n+        let old_cap = self.cap();\n+        self.buf.reserve_exact(old_cap, old_cap);\n+        assert!(self.cap() == old_cap * 2);\n+        unsafe {\n+            self.handle_capacity_increase(old_cap);\n         }\n+        debug_assert!(!self.is_full());\n     }\n \n     /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,"}]}