{"sha": "238616813974babc53cb85aaa8e102df119d7f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzODYxNjgxMzk3NGJhYmM1M2NiODVhYWE4ZTEwMmRmMTE5ZDdmMGY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-12T13:12:48Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:13Z"}, "message": "rustc: explicitly pass the namespace to PrintCx::parameterized.", "tree": {"sha": "f49e4dcf2b779ca2c1712b770d85b84930c89f63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f49e4dcf2b779ca2c1712b770d85b84930c89f63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/238616813974babc53cb85aaa8e102df119d7f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/238616813974babc53cb85aaa8e102df119d7f0f", "html_url": "https://github.com/rust-lang/rust/commit/238616813974babc53cb85aaa8e102df119d7f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/238616813974babc53cb85aaa8e102df119d7f0f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08d27441ecc96a56e1b0e72c0accbced2ce6a7d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/08d27441ecc96a56e1b0e72c0accbced2ce6a7d3", "html_url": "https://github.com/rust-lang/rust/commit/08d27441ecc96a56e1b0e72c0accbced2ce6a7d3"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "ec42809ff65699fcf4443a55e089211a766939c9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/238616813974babc53cb85aaa8e102df119d7f0f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238616813974babc53cb85aaa8e102df119d7f0f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=238616813974babc53cb85aaa8e102df119d7f0f", "patch": "@@ -2,7 +2,7 @@\n //!\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/index.html\n \n-use crate::hir::def::CtorKind;\n+use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, HirId, InlineAsm};\n use crate::mir::interpret::{ConstValue, EvalErrorKind, Scalar};\n@@ -2405,7 +2405,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     AggregateKind::Adt(adt_def, variant, substs, _user_ty, _) => {\n                         let variant_def = &adt_def.variants[variant];\n \n-                        ppaux::parameterized(fmt, variant_def.did, substs)?;\n+                        ppaux::parameterized(fmt, variant_def.did, substs, Namespace::ValueNS)?;\n \n                         match variant_def.ctor_kind {\n                             CtorKind::Const => Ok(()),"}, {"sha": "fd0b97e98a3f933e4950148bff2aee2e92c7ccc0", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/238616813974babc53cb85aaa8e102df119d7f0f/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238616813974babc53cb85aaa8e102df119d7f0f/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=238616813974babc53cb85aaa8e102df119d7f0f", "patch": "@@ -1,4 +1,5 @@\n use crate::hir::Unsafety;\n+use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, SubstsRef, TyCtxt};\n use crate::traits;\n@@ -175,7 +176,7 @@ impl<'tcx> InstanceDef<'tcx> {\n \n impl<'tcx> fmt::Display for Instance<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        ppaux::parameterized(f, self.def_id(), self.substs)?;\n+        ppaux::parameterized(f, self.def_id(), self.substs, Namespace::ValueNS)?;\n         match self.def {\n             InstanceDef::Item(_) => Ok(()),\n             InstanceDef::VtableShim(_) => {"}, {"sha": "94560606cad2ad147b368d35a5868a445e9b9987", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/238616813974babc53cb85aaa8e102df119d7f0f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238616813974babc53cb85aaa8e102df119d7f0f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=238616813974babc53cb85aaa8e102df119d7f0f", "patch": "@@ -1,3 +1,4 @@\n+use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n use crate::hir::map::definitions::DefPathData;\n use crate::middle::region;\n@@ -285,26 +286,12 @@ impl<F: fmt::Write> PrintCx<'a, 'gcx, 'tcx, FmtPrinter<F>> {\n \n     fn parameterized(\n         &mut self,\n-        mut def_id: DefId,\n+        def_id: DefId,\n         substs: SubstsRef<'tcx>,\n+        ns: Namespace,\n         projections: impl Iterator<Item = ty::ExistentialProjection<'tcx>>,\n     ) -> fmt::Result {\n-        let mut key = self.tcx.def_key(def_id);\n-        let is_value_ns = match key.disambiguated_data.data {\n-            DefPathData::ValueNs(_) |\n-            DefPathData::EnumVariant(_) => true,\n-\n-            // Skip `StructCtor` so that `Struct::<T>` will be printed,\n-            // instead of the less pretty `Struct<T>::{{constructor}}`.\n-            DefPathData::StructCtor => {\n-                def_id.index = key.parent.unwrap();\n-                key = self.tcx.def_key(def_id);\n-                true\n-            }\n-\n-            _ => false,\n-        };\n-\n+        let key = self.tcx.def_key(def_id);\n         let generics = self.tcx.generics_of(def_id);\n \n         if let Some(parent_def_id) = generics.parent {\n@@ -315,13 +302,20 @@ impl<F: fmt::Write> PrintCx<'a, 'gcx, 'tcx, FmtPrinter<F>> {\n                 parent_generics.has_self && parent_generics.parent_count == 0;\n             if parent_has_own_self {\n                 print!(self, write(\"<\"), print_display(substs.type_at(0)), write(\" as \"))?;\n-            }\n-            self.parameterized(parent_def_id, substs, iter::empty())?;\n-            if parent_has_own_self {\n+                self.parameterized(parent_def_id, substs, Namespace::TypeNS, iter::empty())?;\n                 print!(self, write(\">\"))?;\n+            } else {\n+                self.parameterized(parent_def_id, substs, ns, iter::empty())?;\n             }\n \n-            print!(self, write(\"::{}\", key.disambiguated_data.data.as_interned_str()))?;\n+            // Skip `::{{constructor}}` on tuple/unit structs.\n+            match key.disambiguated_data.data {\n+                DefPathData::StructCtor => {}\n+\n+                _ => {\n+                    print!(self, write(\"::{}\", key.disambiguated_data.data.as_interned_str()))?;\n+                }\n+            }\n         } else {\n             // Try to print `impl`s more like how you'd refer to their associated items.\n             if let DefPathData::Impl = key.disambiguated_data.data {\n@@ -352,7 +346,7 @@ impl<F: fmt::Write> PrintCx<'a, 'gcx, 'tcx, FmtPrinter<F>> {\n             }\n         };\n \n-        let start = if is_value_ns { \"::<\" } else { \"<\" };\n+        let start = if ns == Namespace::ValueNS { \"::<\" } else { \"<\" };\n \n         let has_own_self = generics.has_self && generics.parent_count == 0;\n         let params = &generics.params[has_own_self as usize..];\n@@ -496,10 +490,15 @@ impl<F: fmt::Write> PrintCx<'a, 'gcx, 'tcx, FmtPrinter<F>> {\n     }\n }\n \n-pub fn parameterized<F: fmt::Write>(f: &mut F, did: DefId, substs: SubstsRef<'_>) -> fmt::Result {\n+pub fn parameterized<F: fmt::Write>(\n+    f: &mut F,\n+    did: DefId,\n+    substs: SubstsRef<'_>,\n+    ns: Namespace,\n+) -> fmt::Result {\n     PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n         let substs = cx.tcx.lift(&substs).expect(\"could not lift for printing\");\n-        cx.parameterized(did, substs, iter::empty())\n+        cx.parameterized(did, substs, ns, iter::empty())\n     })\n }\n \n@@ -538,6 +537,7 @@ define_print! {\n                     cx.parameterized(\n                         principal.def_id,\n                         principal.substs,\n+                        Namespace::TypeNS,\n                         self.projection_bounds(),\n                     )?;\n                 }\n@@ -663,7 +663,7 @@ define_print! {\n             let trait_ref = *ty::Binder::bind(*self)\n                 .with_self_ty(cx.tcx, dummy_self)\n                 .skip_binder();\n-            cx.parameterized(trait_ref.def_id, trait_ref.substs, iter::empty())\n+            cx.parameterized(trait_ref.def_id, trait_ref.substs, Namespace::TypeNS, iter::empty())\n         }\n         debug {\n             self.print_display(cx)\n@@ -1112,12 +1112,16 @@ define_print_multi! {\n define_print! {\n     ('tcx) ty::TraitRef<'tcx>, (self, cx) {\n         display {\n-            cx.parameterized(self.def_id, self.substs, iter::empty())\n+            cx.parameterized(self.def_id, self.substs, Namespace::TypeNS, iter::empty())\n         }\n         debug {\n-            print!(cx, write(\"<\"), print(self.self_ty()), write(\" as \"))?;\n-            cx.parameterized(self.def_id, self.substs, iter::empty())?;\n-            print!(cx, write(\">\"))\n+            print!(cx,\n+                write(\"<\"),\n+                print(self.self_ty()),\n+                write(\" as \"),\n+                print_display(self),\n+                write(\">\")\n+            )\n         }\n     }\n }\n@@ -1163,7 +1167,7 @@ define_print! {\n                 FnDef(def_id, substs) => {\n                     let sig = cx.tcx.fn_sig(def_id).subst(cx.tcx, substs);\n                     print!(cx, print(sig), write(\" {{\"))?;\n-                    cx.parameterized(def_id, substs, iter::empty())?;\n+                    cx.parameterized(def_id, substs, Namespace::ValueNS, iter::empty())?;\n                     print!(cx, write(\"}}\"))\n                 }\n                 FnPtr(ref bare_fn) => {\n@@ -1185,7 +1189,9 @@ define_print! {\n                         ty::BoundTyKind::Param(p) => print!(cx, write(\"{}\", p)),\n                     }\n                 }\n-                Adt(def, substs) => cx.parameterized(def.did, substs, iter::empty()),\n+                Adt(def, substs) => {\n+                    cx.parameterized(def.did, substs, Namespace::TypeNS, iter::empty())\n+                }\n                 Dynamic(data, r) => {\n                     let print_r = r.display_outputs_anything(cx);\n                     if print_r {\n@@ -1199,7 +1205,12 @@ define_print! {\n                     Ok(())\n                 }\n                 Foreign(def_id) => {\n-                    cx.parameterized(def_id, subst::InternalSubsts::empty(), iter::empty())\n+                    cx.parameterized(\n+                        def_id,\n+                        subst::InternalSubsts::empty(),\n+                        Namespace::TypeNS,\n+                        iter::empty(),\n+                    )\n                 }\n                 Projection(ref data) => data.print(cx),\n                 UnnormalizedProjection(ref data) => {\n@@ -1481,7 +1492,7 @@ define_print! {\n define_print! {\n     ('tcx) ty::ProjectionTy<'tcx>, (self, cx) {\n         display {\n-            cx.parameterized(self.item_def_id, self.substs, iter::empty())\n+            cx.parameterized(self.item_def_id, self.substs, Namespace::TypeNS, iter::empty())\n         }\n     }\n }\n@@ -1518,7 +1529,7 @@ define_print! {\n                 }\n                 ty::Predicate::ConstEvaluatable(def_id, substs) => {\n                     print!(cx, write(\"the constant `\"))?;\n-                    cx.parameterized(def_id, substs, iter::empty())?;\n+                    cx.parameterized(def_id, substs, Namespace::ValueNS, iter::empty())?;\n                     print!(cx, write(\"` can be evaluated\"))\n                 }\n             }"}, {"sha": "3ce43cc4a224fa1f443145bbffba5aaaca0246b7", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/238616813974babc53cb85aaa8e102df119d7f0f/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238616813974babc53cb85aaa8e102df119d7f0f/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=238616813974babc53cb85aaa8e102df119d7f0f", "patch": "@@ -35,7 +35,7 @@ fn main() {\n //        _2 = move _3;\n //        StorageDead(_3);\n //        StorageLive(_4);\n-//        _4 = std::option::Option<std::boxed::Box<u32>>::None;\n+//        _4 = std::option::Option::<std::boxed::Box<u32>>::None;\n //        FakeRead(ForLet, _4);\n //        AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] });\n //        StorageLive(_5);"}, {"sha": "9eeef8570a37a307f86bd0e0f0fb90d075c6cabc", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/238616813974babc53cb85aaa8e102df119d7f0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238616813974babc53cb85aaa8e102df119d7f0f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=238616813974babc53cb85aaa8e102df119d7f0f", "patch": "@@ -42,7 +42,7 @@ fn main() {\n // START rustc.full_tested_match.QualifyAndPromoteConstants.after.mir\n //  bb0: {\n //      ...\n-//      _2 = std::option::Option<i32>::Some(const 42i32,);\n+//      _2 = std::option::Option::<i32>::Some(const 42i32,);\n //      FakeRead(ForMatchedPlace, _2);\n //      _3 = discriminant(_2);\n //      switchInt(move _3) -> [0isize: bb4, 1isize: bb2, otherwise: bb7];\n@@ -111,7 +111,7 @@ fn main() {\n // START rustc.full_tested_match2.QualifyAndPromoteConstants.before.mir\n //  bb0: {\n //      ...\n-//      _2 = std::option::Option<i32>::Some(const 42i32,);\n+//      _2 = std::option::Option::<i32>::Some(const 42i32,);\n //      FakeRead(ForMatchedPlace, _2);\n //      _3 = discriminant(_2);\n //      switchInt(move _3) -> [0isize: bb3, 1isize: bb2, otherwise: bb7];\n@@ -180,7 +180,7 @@ fn main() {\n // START rustc.main.QualifyAndPromoteConstants.before.mir\n // bb0: {\n //     ...\n-//      _2 = std::option::Option<i32>::Some(const 1i32,);\n+//      _2 = std::option::Option::<i32>::Some(const 1i32,);\n //      FakeRead(ForMatchedPlace, _2);\n //      _3 = discriminant(_2);\n //      switchInt(move _3) -> [1isize: bb2, otherwise: bb3];"}, {"sha": "9a22f57116ed89f7a0997e2d32a494a096f39daf", "filename": "src/test/mir-opt/storage_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/238616813974babc53cb85aaa8e102df119d7f0f/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/238616813974babc53cb85aaa8e102df119d7f0f/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.rs?ref=238616813974babc53cb85aaa8e102df119d7f0f", "patch": "@@ -18,7 +18,7 @@ fn main() {\n //         StorageLive(_4);\n //         StorageLive(_5);\n //         _5 = _1;\n-//         _4 = std::option::Option<i32>::Some(move _5,);\n+//         _4 = std::option::Option::<i32>::Some(move _5,);\n //         StorageDead(_5);\n //         _3 = &_4;\n //         FakeRead(ForLet, _3);"}]}