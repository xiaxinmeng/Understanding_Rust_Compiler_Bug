{"sha": "00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZDM1ZWVhMjYyMWZmYjRkZGZjNjlmN2Q1YjIzODViMmVmNTNjMjE=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-21T01:07:24Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-21T10:16:13Z"}, "message": "Fix typo", "tree": {"sha": "b4b08a7c047955c414b3deec85829bb3ba2b6620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b08a7c047955c414b3deec85829bb3ba2b6620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21", "html_url": "https://github.com/rust-lang/rust/commit/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e489f322155113fe911352895a8fee68a9751d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e489f322155113fe911352895a8fee68a9751d7", "html_url": "https://github.com/rust-lang/rust/commit/0e489f322155113fe911352895a8fee68a9751d7"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "44aab3917c788349b01a7f604eda676ee3ef674d", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21", "patch": "@@ -1561,7 +1561,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                         cx,\n                         IMPLICIT_HASHER,\n                         target.span(),\n-                        &format!(\"impl for `{}` should be generarized over different hashers\", target.type_name()),\n+                        &format!(\"impl for `{}` should be generalized over different hashers\", target.type_name()),\n                         move |db| {\n                             suggestion(cx, db, generics.span, generics_suggestion_span, target, ctr_vis);\n                         },\n@@ -1595,7 +1595,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                             IMPLICIT_HASHER,\n                             target.span(),\n                             &format!(\n-                                \"parameter of type `{}` should be generarized over different hashers\",\n+                                \"parameter of type `{}` should be generalized over different hashers\",\n                                 target.type_name()\n                             ),\n                             move |db| {"}, {"sha": "27d6e2cec080e0a520e83113c457d64f9415db36", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=00d35eea2621ffb4ddfc69f7d5b2385b2ef53c21", "patch": "@@ -1,4 +1,4 @@\n-error: impl for `HashMap` should be generarized over different hashers\n+error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:11:35\n    |\n 11 | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n@@ -14,7 +14,7 @@ help: ...and use generic constructor\n 17 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n    |          ^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashMap` should be generarized over different hashers\n+error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:20:36\n    |\n 20 | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n@@ -29,7 +29,7 @@ help: ...and use generic constructor\n 22 |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Default::default()),))\n    |           ^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashMap` should be generarized over different hashers\n+error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:25:19\n    |\n 25 | impl Foo<i16> for HashMap<String, String> {\n@@ -44,7 +44,7 @@ help: ...and use generic constructor\n 27 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n    |          ^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashSet` should be generarized over different hashers\n+error: impl for `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:43:32\n    |\n 43 | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n@@ -59,7 +59,7 @@ help: ...and use generic constructor\n 45 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n    |          ^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashSet` should be generarized over different hashers\n+error: impl for `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:48:19\n    |\n 48 | impl Foo<i16> for HashSet<String> {\n@@ -74,7 +74,7 @@ help: ...and use generic constructor\n 50 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n    |          ^^^^^^^^^^^^^^^^^^\n \n-error: parameter of type `HashMap` should be generarized over different hashers\n+error: parameter of type `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:65:23\n    |\n 65 | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n@@ -85,7 +85,7 @@ help: consider adding a type parameter\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: parameter of type `HashSet` should be generarized over different hashers\n+error: parameter of type `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:65:53\n    |\n 65 | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n@@ -96,7 +96,7 @@ help: consider adding a type parameter\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: impl for `HashMap` should be generarized over different hashers\n+error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:70:43\n    |\n 70 |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n@@ -114,7 +114,7 @@ help: ...and use generic constructor\n 72 |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n    |                  ^^^^^^^^^^^^^^^^^^\n \n-error: parameter of type `HashMap` should be generarized over different hashers\n+error: parameter of type `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:78:33\n    |\n 78 |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n@@ -128,7 +128,7 @@ help: consider adding a type parameter\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: parameter of type `HashSet` should be generarized over different hashers\n+error: parameter of type `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:78:63\n    |\n 78 |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {"}]}