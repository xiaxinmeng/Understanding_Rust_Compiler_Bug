{"sha": "3b57d40fe5a813ac957667ac04938753e3100f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNTdkNDBmZTVhODEzYWM5NTc2NjdhYzA0OTM4NzUzZTMxMDBmNTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T14:04:11Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob import ast::FunctionRetTy variants", "tree": {"sha": "315ed7442c8ba2e503c57a1f09d3e9a1cde41145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/315ed7442c8ba2e503c57a1f09d3e9a1cde41145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b57d40fe5a813ac957667ac04938753e3100f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b57d40fe5a813ac957667ac04938753e3100f55", "html_url": "https://github.com/rust-lang/rust/commit/3b57d40fe5a813ac957667ac04938753e3100f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b57d40fe5a813ac957667ac04938753e3100f55/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05e25de4f0add7ae3cd0e8f66cd4558c5bfa42aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e25de4f0add7ae3cd0e8f66cd4558c5bfa42aa", "html_url": "https://github.com/rust-lang/rust/commit/05e25de4f0add7ae3cd0e8f66cd4558c5bfa42aa"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "2862a1811fb20ffaa0f9226804fef778203f7581", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -450,9 +450,9 @@ pub fn lower_fn_decl(lctx: &LoweringContext, decl: &FnDecl) -> P<hir::FnDecl> {\n     P(hir::FnDecl {\n         inputs: decl.inputs.iter().map(|x| lower_arg(lctx, x)).collect(),\n         output: match decl.output {\n-            Return(ref ty) => hir::Return(lower_ty(lctx, ty)),\n-            DefaultReturn(span) => hir::DefaultReturn(span),\n-            NoReturn(span) => hir::NoReturn(span),\n+            FunctionRetTy::Ty(ref ty) => hir::Return(lower_ty(lctx, ty)),\n+            FunctionRetTy::Default(span) => hir::DefaultReturn(span),\n+            FunctionRetTy::None(span) => hir::NoReturn(span),\n         },\n         variadic: decl.variadic,\n     })"}, {"sha": "9714e4f02b113c74d1eafc23c59522cb63e81596", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -350,7 +350,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             self.visit_ty(&arg.ty);\n         }\n \n-        if let ast::Return(ref ret_ty) = sig.decl.output {\n+        if let ast::FunctionRetTy::Ty(ref ret_ty) = sig.decl.output {\n             self.visit_ty(ret_ty);\n         }\n \n@@ -429,7 +429,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             self.visit_ty(&arg.ty);\n         }\n \n-        if let ast::Return(ref ret_ty) = decl.output {\n+        if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n             self.visit_ty(&ret_ty);\n         }\n \n@@ -1141,7 +1141,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                     self.visit_ty(&*arg.ty);\n                 }\n \n-                if let ast::Return(ref ret_ty) = decl.output {\n+                if let ast::FunctionRetTy::Ty(ref ret_ty) = decl.output {\n                     self.visit_ty(&**ret_ty);\n                 }\n "}, {"sha": "9d49fb3be4fc759fb37c48f7296637437f47dc4e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -16,7 +16,6 @@ pub use self::Decl_::*;\n pub use self::ExplicitSelf_::*;\n pub use self::Expr_::*;\n pub use self::FloatTy::*;\n-pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n pub use self::IntTy::*;\n pub use self::Item_::*;\n@@ -1727,23 +1726,23 @@ impl fmt::Debug for ImplPolarity {\n pub enum FunctionRetTy {\n     /// Functions with return type `!`that always\n     /// raise an error or exit (i.e. never return to the caller)\n-    NoReturn(Span),\n+    None(Span),\n     /// Return type is not specified.\n     ///\n     /// Functions default to `()` and\n     /// closures default to inference. Span points to where return\n     /// type would be inserted.\n-    DefaultReturn(Span),\n+    Default(Span),\n     /// Everything else\n-    Return(P<Ty>),\n+    Ty(P<Ty>),\n }\n \n impl FunctionRetTy {\n     pub fn span(&self) -> Span {\n         match *self {\n-            NoReturn(span) => span,\n-            DefaultReturn(span) => span,\n-            Return(ref ty) => ty.span\n+            FunctionRetTy::None(span) => span,\n+            FunctionRetTy::Default(span) => span,\n+            FunctionRetTy::Ty(ref ty) => ty.span,\n         }\n     }\n }"}, {"sha": "91ced6eb07641cca48265a6d8c181afd7cb9bb51", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -941,7 +941,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn fn_decl(&self, inputs: Vec<ast::Arg>, output: P<ast::Ty>) -> P<ast::FnDecl> {\n         P(ast::FnDecl {\n             inputs: inputs,\n-            output: ast::Return(output),\n+            output: ast::FunctionRetTy::Ty(output),\n             variadic: false\n         })\n     }"}, {"sha": "dc96e9ecc09dd3a2ab2c7118efae4b9ee9b648a1", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -685,9 +685,9 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n     decl.map(|FnDecl {inputs, output, variadic}| FnDecl {\n         inputs: inputs.move_map(|x| fld.fold_arg(x)),\n         output: match output {\n-            Return(ty) => Return(fld.fold_ty(ty)),\n-            DefaultReturn(span) => DefaultReturn(span),\n-            NoReturn(span) => NoReturn(span)\n+            FunctionRetTy::Ty(ty) => FunctionRetTy::Ty(fld.fold_ty(ty)),\n+            FunctionRetTy::Default(span) => FunctionRetTy::Default(span),\n+            FunctionRetTy::None(span) => FunctionRetTy::None(span),\n         },\n         variadic: variadic\n     })"}, {"sha": "becce9ba7d9d7432a8a2b8cf5bb215769f86df41", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -950,7 +950,7 @@ mod tests {\n                                     }),\n                                         id: ast::DUMMY_NODE_ID\n                                     }),\n-                                output: ast::DefaultReturn(sp(15, 15)),\n+                                output: ast::FunctionRetTy::Default(sp(15, 15)),\n                                 variadic: false\n                             }),\n                                     ast::Unsafety::Normal,"}, {"sha": "3f7173b179cf2ec52fe75b2de375b34777ac3ef2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -18,7 +18,7 @@ use ast::{Mod, Arg, Arm, Attribute, BindingMode};\n use ast::Block;\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n-use ast::{Decl, DeclItem, DeclLocal, DefaultBlock, DefaultReturn};\n+use ast::{Decl, DeclItem, DeclLocal, DefaultBlock};\n use ast::{EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n@@ -39,11 +39,11 @@ use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n use ast::{MutImmutable, MutMutable, Mac_};\n use ast::{MutTy, Mutability};\n-use ast::{NamedField, NoReturn};\n+use ast::NamedField;\n use ast::{Pat, PatBox, PatEnum, PatIdent, PatLit, PatQPath, PatMac, PatRange};\n use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild};\n use ast::{PolyTraitRef, QSelf};\n-use ast::{Return, Stmt, StmtDecl};\n+use ast::{Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, VariantData, StructField};\n use ast::StrStyle;\n use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n@@ -1283,13 +1283,13 @@ impl<'a> Parser<'a> {\n     pub fn parse_ret_ty(&mut self) -> PResult<'a, FunctionRetTy> {\n         if self.eat(&token::RArrow) {\n             if self.eat(&token::Not) {\n-                Ok(NoReturn(self.last_span))\n+                Ok(FunctionRetTy::None(self.last_span))\n             } else {\n-                Ok(Return(try!(self.parse_ty())))\n+                Ok(FunctionRetTy::Ty(try!(self.parse_ty())))\n             }\n         } else {\n             let pos = self.span.lo;\n-            Ok(DefaultReturn(mk_sp(pos, pos)))\n+            Ok(FunctionRetTy::Default(mk_sp(pos, pos)))\n         }\n     }\n \n@@ -3053,7 +3053,7 @@ impl<'a> Parser<'a> {\n     {\n         let decl = try!(self.parse_fn_block_decl());\n         let body = match decl.output {\n-            DefaultReturn(_) => {\n+            FunctionRetTy::Default(_) => {\n                 // If no explicit return type is given, parse any\n                 // expr and wrap it up in a dummy block:\n                 let body_expr = try!(self.parse_expr());"}, {"sha": "4e1f761c51ae09d0ba0cf4668b679d84b3b8f078", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -2108,7 +2108,7 @@ impl<'a> State<'a> {\n                 try!(space(&mut self.s));\n \n                 let default_return = match decl.output {\n-                    ast::DefaultReturn(..) => true,\n+                    ast::FunctionRetTy::Default(..) => true,\n                     _ => false\n                 };\n \n@@ -2722,19 +2722,19 @@ impl<'a> State<'a> {\n         try!(self.print_fn_args(decl, None, true));\n         try!(word(&mut self.s, \"|\"));\n \n-        if let ast::DefaultReturn(..) = decl.output {\n+        if let ast::FunctionRetTy::Default(..) = decl.output {\n             return Ok(());\n         }\n \n         try!(self.space_if_not_bol());\n         try!(self.word_space(\"->\"));\n         match decl.output {\n-            ast::Return(ref ty) => {\n+            ast::FunctionRetTy::Ty(ref ty) => {\n                 try!(self.print_type(&**ty));\n                 self.maybe_print_comment(ty.span.lo)\n             }\n-            ast::DefaultReturn(..) => unreachable!(),\n-            ast::NoReturn(span) => {\n+            ast::FunctionRetTy::Default(..) => unreachable!(),\n+            ast::FunctionRetTy::None(span) => {\n                 try!(self.word_nbsp(\"!\"));\n                 self.maybe_print_comment(span.lo)\n             }\n@@ -2988,24 +2988,24 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_output(&mut self, decl: &ast::FnDecl) -> io::Result<()> {\n-        if let ast::DefaultReturn(..) = decl.output {\n+        if let ast::FunctionRetTy::Default(..) = decl.output {\n             return Ok(());\n         }\n \n         try!(self.space_if_not_bol());\n         try!(self.ibox(INDENT_UNIT));\n         try!(self.word_space(\"->\"));\n         match decl.output {\n-            ast::NoReturn(_) =>\n+            ast::FunctionRetTy::None(_) =>\n                 try!(self.word_nbsp(\"!\")),\n-            ast::DefaultReturn(..) => unreachable!(),\n-            ast::Return(ref ty) =>\n+            ast::FunctionRetTy::Default(..) => unreachable!(),\n+            ast::FunctionRetTy::Ty(ref ty) =>\n                 try!(self.print_type(&**ty))\n         }\n         try!(self.end());\n \n         match decl.output {\n-            ast::Return(ref output) => self.maybe_print_comment(output.span.lo),\n+            ast::FunctionRetTy::Ty(ref output) => self.maybe_print_comment(output.span.lo),\n             _ => Ok(())\n         }\n     }\n@@ -3155,7 +3155,7 @@ mod tests {\n \n         let decl = ast::FnDecl {\n             inputs: Vec::new(),\n-            output: ast::DefaultReturn(codemap::DUMMY_SP),\n+            output: ast::FunctionRetTy::Default(codemap::DUMMY_SP),\n             variadic: false\n         };\n         let generics = ast::Generics::default();"}, {"sha": "054d57e90ea048175367560f2f7946ee511ed860", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -357,8 +357,8 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n         match i.node {\n           ast::ItemFn(ref decl, _, _, _, ref generics, _) => {\n             let no_output = match decl.output {\n-                ast::DefaultReturn(..) => true,\n-                ast::Return(ref t) if t.node == ast::TyTup(vec![]) => true,\n+                ast::FunctionRetTy::Default(..) => true,\n+                ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyTup(vec![]) => true,\n                 _ => false\n             };\n             if decl.inputs.is_empty()\n@@ -394,8 +394,8 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n             ast::ItemFn(ref decl, _, _, _, ref generics, _) => {\n                 let input_cnt = decl.inputs.len();\n                 let no_output = match decl.output {\n-                    ast::DefaultReturn(..) => true,\n-                    ast::Return(ref t) if t.node == ast::TyTup(vec![]) => true,\n+                    ast::FunctionRetTy::Default(..) => true,\n+                    ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyTup(vec![]) => true,\n                     _ => false\n                 };\n                 let tparm_cnt = generics.ty_params.len();"}, {"sha": "834291dd561efb7a7b8cf5acffb2bb0317a5c107", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b57d40fe5a813ac957667ac04938753e3100f55/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3b57d40fe5a813ac957667ac04938753e3100f55", "patch": "@@ -524,7 +524,7 @@ pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics\n }\n \n pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionRetTy) {\n-    if let Return(ref output_ty) = *ret_ty {\n+    if let FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n         visitor.visit_ty(output_ty)\n     }\n }"}]}