{"sha": "a4e094562122d9839a9b247ace2be3c4b3724b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTA5NDU2MjEyMmQ5ODM5YTliMjQ3YWNlMmJlM2M0YjM3MjRiNDc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-03T15:54:35Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-03T17:14:21Z"}, "message": "Unions reinitialized after assignment into field.\n\nThis commit makes two changes:\n\nFirst, it updates the dataflow builder to add an init for the place\ncontaining a union if there is an assignment into the field of\nthat union.\n\nSecond, it stops a \"use of uninitialized\" error occuring when there is an\nassignment into the field of an uninitialized union that was previously\ninitialized. Making this assignment would re-initialize the union, as\ntested in `src/test/ui/borrowck/borrowck-union-move-assign.nll.stderr`.\nThe check for previous initialization ensures that we do not start\nsupporting partial initialization yet (cc #21232, #54499, #54986).", "tree": {"sha": "012801fb234f5dcd79c5ccf2e52d8c062088b599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/012801fb234f5dcd79c5ccf2e52d8c062088b599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e094562122d9839a9b247ace2be3c4b3724b47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlvd2B8ACgkQAXYLT59T\n8VS0/w/8CTSR+u+y4cc93lYXqHNJjoCn9cumiOFCE22F8hc5yoo0bqFyUV0URrDB\nlTuK8yUf2KR6axXnt1K1HRX6tkGrp+zbatYEFhbh2AbrBVnldE6bfVj81b2MciJf\nNgkDivRxygbzo8asdCbDUuVjy3Y2KqWuUw4Nfn3SWPnCTMrR4szy0YU8Brpbtmpz\ngakHls7+GLHMIE3Fj/HGtdS2D2Ecnxdxui3LrbRlzaAx30tXsjJp1ld9hXQxlMBp\nxdM7EDJM6UcJw+8/S5a/DW6jGGC3SHUnQT4gDHMaKqmtGzhc/bsL8m2252gHpAV7\nMwYvNshwqEHu+LgXJq1XP+UhncFCQ725CZWTAyhL05iePbiaUbpu+n0BYRSBBJh6\nFrsJar5kaqQ/VxxLC3vgGXFP0rgsAeCBhKLlavYyc7Cphi5AhP49qYrSP1AaQ/WB\nkahi6sWJwMM1oTjqIVHfBn2bZ5EQAeqGezdOlgerBj2knYuYGc1ZLamBNxCCiuJu\nTeyR2cxWus+3r9ptJzkj1HXZChqyYE9zMW39JoEsVB6w+GlNWNsnTCJxK2qUg6i4\nZU9JYEEYxxOcHzKE4rSRGodgRDwb5Xj/WvIM2LBDUjR5AQTFi4b3xH91mb1wK4Rz\ng1YZOZw2hed6MIji8GirGxq6g/9bWAK4C7k0Spvfg9q/Y3qySAw=\n=eTYX\n-----END PGP SIGNATURE-----", "payload": "tree 012801fb234f5dcd79c5ccf2e52d8c062088b599\nparent 87a3c1ee7016bbfb782f2fd8adc75b46687ef929\nauthor David Wood <david@davidtw.co> 1541260475 +0100\ncommitter David Wood <david@davidtw.co> 1541265261 +0100\n\nUnions reinitialized after assignment into field.\n\nThis commit makes two changes:\n\nFirst, it updates the dataflow builder to add an init for the place\ncontaining a union if there is an assignment into the field of\nthat union.\n\nSecond, it stops a \"use of uninitialized\" error occuring when there is an\nassignment into the field of an uninitialized union that was previously\ninitialized. Making this assignment would re-initialize the union, as\ntested in `src/test/ui/borrowck/borrowck-union-move-assign.nll.stderr`.\nThe check for previous initialization ensures that we do not start\nsupporting partial initialization yet (cc #21232, #54499, #54986).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e094562122d9839a9b247ace2be3c4b3724b47", "html_url": "https://github.com/rust-lang/rust/commit/a4e094562122d9839a9b247ace2be3c4b3724b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e094562122d9839a9b247ace2be3c4b3724b47/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a3c1ee7016bbfb782f2fd8adc75b46687ef929", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a3c1ee7016bbfb782f2fd8adc75b46687ef929", "html_url": "https://github.com/rust-lang/rust/commit/87a3c1ee7016bbfb782f2fd8adc75b46687ef929"}], "stats": {"total": 81, "additions": 50, "deletions": 31}, "files": [{"sha": "b440cf87a24c1b7a4a958a7db5d6c76bf1b9e55f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a4e094562122d9839a9b247ace2be3c4b3724b47/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e094562122d9839a9b247ace2be3c4b3724b47/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a4e094562122d9839a9b247ace2be3c4b3724b47", "patch": "@@ -1719,12 +1719,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n \n-        fn check_parent_of_field<'cx, 'gcx, 'tcx>(this: &mut MirBorrowckCtxt<'cx, 'gcx, 'tcx>,\n-                                                  context: Context,\n-                                                  base: &Place<'tcx>,\n-                                                  span: Span,\n-                                                  flow_state: &Flows<'cx, 'gcx, 'tcx>)\n-        {\n+        fn check_parent_of_field<'cx, 'gcx, 'tcx>(\n+            this: &mut MirBorrowckCtxt<'cx, 'gcx, 'tcx>,\n+            context: Context,\n+            base: &Place<'tcx>,\n+            span: Span,\n+            flow_state: &Flows<'cx, 'gcx, 'tcx>,\n+        ) {\n             // rust-lang/rust#21232: Until Rust allows reads from the\n             // initialized parts of partially initialized structs, we\n             // will, starting with the 2018 edition, reject attempts\n@@ -1776,6 +1777,22 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n \n             if let Some((prefix, mpi)) = shortest_uninit_seen {\n+                // Check for a reassignment into a uninitialized field of a union (for example,\n+                // after a move out). In this case, do not report a error here. There is an\n+                // exception, if this is the first assignment into the union (that is, there is\n+                // no move out from an earlier location) then this is an attempt at initialization\n+                // of the union - we should error in that case.\n+                let tcx = this.infcx.tcx;\n+                if let ty::TyKind::Adt(def, _) = base.ty(this.mir, tcx).to_ty(tcx).sty {\n+                    let moved_before_this = this.move_data.path_map[mpi].iter().any(|moi| {\n+                        this.move_data.moves[*moi].source < context.loc\n+                    });\n+\n+                    if def.is_union() && moved_before_this {\n+                        return;\n+                    }\n+                }\n+\n                 this.report_use_of_moved_or_uninitialized(\n                     context,\n                     InitializationRequiringAction::PartialAssignment,"}, {"sha": "ba3da3aaa1afc50d27487137b814c046c5a10375", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4e094562122d9839a9b247ace2be3c4b3724b47/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e094562122d9839a9b247ace2be3c4b3724b47/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=a4e094562122d9839a9b247ace2be3c4b3724b47", "patch": "@@ -430,6 +430,20 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n     fn gather_init(&mut self, place: &Place<'tcx>, kind: InitKind) {\n         debug!(\"gather_init({:?}, {:?})\", self.loc, place);\n \n+        let place = match place {\n+            // Check if we are assigning into a field of a union, if so, lookup the place\n+            // of the union so it is marked as initialized again.\n+            Place::Projection(box Projection {\n+                base,\n+                elem: ProjectionElem::Field(_, _),\n+            }) if match base.ty(self.builder.mir, self.builder.tcx).to_ty(self.builder.tcx).sty {\n+                    ty::TyKind::Adt(def, _) if def.is_union() => true,\n+                    _ => false,\n+            } => base,\n+            // Otherwise, lookup the place.\n+            _ => place,\n+        };\n+\n         if let LookupResult::Exact(path) = self.builder.data.rev_lookup.find(place) {\n             let init = self.builder.data.inits.push(Init {\n                 location: InitLocation::Statement(self.loc),"}, {"sha": "a7125450e1c278ce9cc0166d995b2b6f3049ec83", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.nll.stderr", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a4e094562122d9839a9b247ace2be3c4b3724b47/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e094562122d9839a9b247ace2be3c4b3724b47/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr?ref=a4e094562122d9839a9b247ace2be3c4b3724b47", "patch": "@@ -8,28 +8,6 @@ LL |             let a = u.a; //~ ERROR use of moved value: `u.a`\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `u`\n-  --> $DIR/borrowck-union-move-assign.rs:33:21\n-   |\n-LL |             let a = u.a;\n-   |                     --- value moved here\n-LL |             u.a = A;\n-LL |             let a = u.a; // OK\n-   |                     ^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `u`\n-  --> $DIR/borrowck-union-move-assign.rs:39:21\n-   |\n-LL |             let a = u.a;\n-   |                     --- value moved here\n-LL |             u.b = B;\n-LL |             let a = u.a; // OK\n-   |                     ^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "fb1fe27774064cb97ecd35dc1c47cea959a08259", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.nll.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4e094562122d9839a9b247ace2be3c4b3724b47/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e094562122d9839a9b247ace2be3c4b3724b47/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.nll.stderr?ref=a4e094562122d9839a9b247ace2be3c4b3724b47", "patch": "@@ -4,6 +4,16 @@ error[E0381]: assign to part of possibly uninitialized variable: `x`\n LL |     x.a = 1;  //~ ERROR\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n-error: aborting due to previous error\n+error[E0594]: cannot assign to `x.b`, as `x` is not declared as mutable\n+  --> $DIR/reassignment_immutable_fields_overlapping.rs:23:5\n+   |\n+LL |     let x: Foo;\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     x.a = 1;  //~ ERROR\n+LL |     x.b = 22; //~ ERROR\n+   |     ^^^^^^^^ cannot assign\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0381`.\n+Some errors occurred: E0381, E0594.\n+For more information about an error, try `rustc --explain E0381`."}]}