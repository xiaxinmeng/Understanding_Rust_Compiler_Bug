{"sha": "bd7cbaecd32aa59ea5d14b3b35490a058512b92a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkN2NiYWVjZDMyYWE1OWVhNWQxNGIzYjM1NDkwYTA1ODUxMmI5MmE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-08-31T01:40:56Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-28T23:31:44Z"}, "message": "Explain fully qualified syntax for `Rc` and `Arc`", "tree": {"sha": "66dc80c24c46cb3964368426439428e3c23c762d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66dc80c24c46cb3964368426439428e3c23c762d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd7cbaecd32aa59ea5d14b3b35490a058512b92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7cbaecd32aa59ea5d14b3b35490a058512b92a", "html_url": "https://github.com/rust-lang/rust/commit/bd7cbaecd32aa59ea5d14b3b35490a058512b92a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd7cbaecd32aa59ea5d14b3b35490a058512b92a/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31ee872db5aae4750e3da1ca4ed1523c4356947f", "url": "https://api.github.com/repos/rust-lang/rust/commits/31ee872db5aae4750e3da1ca4ed1523c4356947f", "html_url": "https://github.com/rust-lang/rust/commit/31ee872db5aae4750e3da1ca4ed1523c4356947f"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "fdf64953e2abce6160ccf6a14f45a67adc6e5d52", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bd7cbaecd32aa59ea5d14b3b35490a058512b92a/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7cbaecd32aa59ea5d14b3b35490a058512b92a/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=bd7cbaecd32aa59ea5d14b3b35490a058512b92a", "patch": "@@ -11,7 +11,7 @@\n //! is no exception: you cannot generally obtain a mutable reference to\n //! something inside an [`Rc`]. If you need mutability, put a [`Cell`]\n //! or [`RefCell`] inside the [`Rc`]; see [an example of mutability\n-//! inside an Rc][mutability].\n+//! inside an `Rc`][mutability].\n //!\n //! [`Rc`] uses non-atomic reference counting. This means that overhead is very\n //! low, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]\n@@ -35,15 +35,26 @@\n //! `Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),\n //! so you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name\n //! clashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are associated\n-//! functions, called using function-like syntax:\n+//! functions, called using [fully qualified syntax]:\n //!\n //! ```\n //! use std::rc::Rc;\n-//! let my_rc = Rc::new(());\n //!\n+//! let my_rc = Rc::new(());\n //! Rc::downgrade(&my_rc);\n //! ```\n //!\n+//! `Rc<T>`'s implementations of traits like `Clone` should also be called using\n+//! fully qualified syntax to avoid confusion as to whether the *reference* is being\n+//! cloned or the *backing data* (`T`) is being cloned:\n+//!\n+//! ```\n+//! use std::rc::Rc;\n+//!\n+//! let my_rc = Rc::new(());\n+//! let your_rc = Rc::clone(&my_rc);\n+//! ```\n+//!\n //! [`Weak<T>`][`Weak`] does not auto-dereference to `T`, because the inner value may have\n //! already been dropped.\n //!\n@@ -54,6 +65,7 @@\n //!\n //! ```\n //! use std::rc::Rc;\n+//!\n //! let foo = Rc::new(vec![1.0, 2.0, 3.0]);\n //! // The two syntaxes below are equivalent.\n //! let a = foo.clone();\n@@ -218,7 +230,7 @@\n //! [`Cell`]: core::cell::Cell\n //! [`RefCell`]: core::cell::RefCell\n //! [send]: core::marker::Send\n-//! [arc]: ../../std/sync/struct.Arc.html\n+//! [arc]: alloc::sync::Arc\n //! [`Deref`]: core::ops::Deref\n //! [downgrade]: Rc::downgrade\n //! [upgrade]: Weak::upgrade\n@@ -272,10 +284,9 @@ struct RcBox<T: ?Sized> {\n ///\n /// The inherent methods of `Rc` are all associated functions, which means\n /// that you have to call them as e.g., [`Rc::get_mut(&mut value)`][get_mut] instead of\n-/// `value.get_mut()`. This avoids conflicts with methods of the inner\n-/// type `T`.\n+/// `value.get_mut()`. This avoids conflicts with methods of the inner type `T`.\n ///\n-/// [get_mut]: #method.get_mut\n+/// [get_mut]: Rc::get_mut\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Rc\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {"}, {"sha": "5ec7d4e3c81ee4796886919c8a682a02240d16fd", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd7cbaecd32aa59ea5d14b3b35490a058512b92a/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7cbaecd32aa59ea5d14b3b35490a058512b92a/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=bd7cbaecd32aa59ea5d14b3b35490a058512b92a", "patch": "@@ -129,15 +129,26 @@ macro_rules! acquire {\n /// `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\n /// so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\n /// clashes with `T`'s methods, the methods of `Arc<T>` itself are associated\n-/// functions, called using function-like syntax:\n+/// functions, called using [fully qualified syntax]:\n ///\n /// ```\n /// use std::sync::Arc;\n-/// let my_arc = Arc::new(());\n ///\n+/// let my_arc = Arc::new(());\n /// Arc::downgrade(&my_arc);\n /// ```\n ///\n+/// `Arc<T>`'s implementations of traits like `Clone` should also be called using\n+/// fully qualified syntax to avoid confusion as to whether the *reference* is being\n+/// cloned or the *backing data* (`T`) is being cloned:\n+///\n+/// ```\n+/// use std::sync::Arc;\n+///\n+/// let my_arc = Arc::new(());\n+/// let your_arc = Arc::clone(&my_arc);\n+/// ```\n+///\n /// [`Weak<T>`][Weak] does not auto-dereference to `T`, because the inner value may have\n /// already been dropped.\n ///\n@@ -154,6 +165,7 @@ macro_rules! acquire {\n /// [`RefCell<T>`]: core::cell::RefCell\n /// [`std::sync`]: ../../std/sync/index.html\n /// [`Arc::clone(&from)`]: Arc::clone\n+/// [fully qualified syntax]: https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\n ///\n /// # Examples\n ///"}]}