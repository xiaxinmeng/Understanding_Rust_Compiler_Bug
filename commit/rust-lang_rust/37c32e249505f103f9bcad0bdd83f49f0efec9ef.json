{"sha": "37c32e249505f103f9bcad0bdd83f49f0efec9ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YzMyZTI0OTUwNWYxMDNmOWJjYWQwYmRkODNmNDlmMGVmZWM5ZWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-30T01:34:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-24T01:23:20Z"}, "message": "librustc: Remove the remaining direct uses of `@fn` from librustc.", "tree": {"sha": "febe3d608891c3b30968a95b1b03d355ec282b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/febe3d608891c3b30968a95b1b03d355ec282b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c32e249505f103f9bcad0bdd83f49f0efec9ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c32e249505f103f9bcad0bdd83f49f0efec9ef", "html_url": "https://github.com/rust-lang/rust/commit/37c32e249505f103f9bcad0bdd83f49f0efec9ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c32e249505f103f9bcad0bdd83f49f0efec9ef/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1676e77db279772551cf804bafbad5214096b9a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1676e77db279772551cf804bafbad5214096b9a9", "html_url": "https://github.com/rust-lang/rust/commit/1676e77db279772551cf804bafbad5214096b9a9"}], "stats": {"total": 142, "additions": 84, "deletions": 58}, "files": [{"sha": "ae1133e1880603a96d79e549f54a96893e71530a", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37c32e249505f103f9bcad0bdd83f49f0efec9ef/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c32e249505f103f9bcad0bdd83f49f0efec9ef/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=37c32e249505f103f9bcad0bdd83f49f0efec9ef", "patch": "@@ -113,8 +113,8 @@ pub fn build_configuration(sess: Session) ->\n }\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n-fn parse_cfgspecs(cfgspecs: ~[~str],\n-                  demitter: diagnostic::Emitter) -> ast::CrateConfig {\n+fn parse_cfgspecs(cfgspecs: ~[~str], demitter: @diagnostic::Emitter)\n+                  -> ast::CrateConfig {\n     do cfgspecs.move_iter().map |s| {\n         let sess = parse::new_parse_sess(Some(demitter));\n         parse::parse_meta_from_source_str(@\"cfgspec\", s.to_managed(), ~[], sess)\n@@ -589,8 +589,8 @@ static architecture_abis : &'static [(&'static str, abi::Architecture)] = &'stat\n     (\"mips\",   abi::Mips)];\n \n pub fn build_target_config(sopts: @session::options,\n-                           demitter: diagnostic::Emitter)\n-                        -> @session::config {\n+                           demitter: @diagnostic::Emitter)\n+                           -> @session::config {\n     let os = match get_os(sopts.target_triple) {\n       Some(os) => os,\n       None => early_error(demitter, ~\"unknown operating system\")\n@@ -638,8 +638,8 @@ pub fn host_triple() -> ~str {\n \n pub fn build_session_options(binary: @str,\n                              matches: &getopts::Matches,\n-                             demitter: diagnostic::Emitter)\n-                          -> @session::options {\n+                             demitter: @diagnostic::Emitter)\n+                             -> @session::options {\n     let crate_type = if matches.opt_present(\"lib\") {\n         session::lib_crate\n     } else if matches.opt_present(\"bin\") {\n@@ -812,8 +812,8 @@ pub fn build_session_options(binary: @str,\n     return sopts;\n }\n \n-pub fn build_session(sopts: @session::options,\n-                     demitter: diagnostic::Emitter) -> Session {\n+pub fn build_session(sopts: @session::options, demitter: @diagnostic::Emitter)\n+                     -> Session {\n     let codemap = @codemap::CodeMap::new();\n     let diagnostic_handler =\n         diagnostic::mk_handler(Some(demitter));\n@@ -824,9 +824,9 @@ pub fn build_session(sopts: @session::options,\n \n pub fn build_session_(sopts: @session::options,\n                       cm: @codemap::CodeMap,\n-                      demitter: diagnostic::Emitter,\n+                      demitter: @diagnostic::Emitter,\n                       span_diagnostic_handler: @mut diagnostic::span_handler)\n-                   -> Session {\n+                      -> Session {\n     let target_cfg = build_target_config(sopts, demitter);\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler,\n                                                     cm);\n@@ -1035,8 +1035,8 @@ pub fn build_output_filenames(input: &input,\n     }\n }\n \n-pub fn early_error(emitter: diagnostic::Emitter, msg: ~str) -> ! {\n-    emitter(None, msg, diagnostic::fatal);\n+pub fn early_error(emitter: @diagnostic::Emitter, msg: ~str) -> ! {\n+    emitter.emit(None, msg, diagnostic::fatal);\n     fail!();\n }\n "}, {"sha": "9fadaf82a98747f89ffc69de80af4b3359881f42", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/37c32e249505f103f9bcad0bdd83f49f0efec9ef/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c32e249505f103f9bcad0bdd83f49f0efec9ef/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=37c32e249505f103f9bcad0bdd83f49f0efec9ef", "patch": "@@ -33,6 +33,7 @@ use driver::driver::{compile_input};\n use driver::session;\n use middle::lint;\n \n+use std::comm;\n use std::io;\n use std::num;\n use std::os;\n@@ -43,6 +44,7 @@ use std::vec;\n use extra::getopts::groups;\n use extra::getopts;\n use syntax::codemap;\n+use syntax::diagnostic::Emitter;\n use syntax::diagnostic;\n \n pub mod middle {\n@@ -191,7 +193,7 @@ pub fn describe_debug_flags() {\n     }\n }\n \n-pub fn run_compiler(args: &[~str], demitter: diagnostic::Emitter) {\n+pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n     // Don't display log spew by default. Can override with RUST_LOG.\n     ::std::logging::console_off();\n \n@@ -291,6 +293,23 @@ pub enum monitor_msg {\n     done,\n }\n \n+struct RustcEmitter {\n+    ch_capture: comm::SharedChan<monitor_msg>\n+}\n+\n+impl diagnostic::Emitter for RustcEmitter {\n+    fn emit(&self,\n+            cmsp: Option<(@codemap::CodeMap, codemap::span)>,\n+            msg: &str,\n+            lvl: diagnostic::level) {\n+        if lvl == diagnostic::fatal {\n+            self.ch_capture.send(fatal)\n+        }\n+\n+        diagnostic::DefaultEmitter.emit(cmsp, msg, lvl)\n+    }\n+}\n+\n /*\n This is a sanity check that any failure of the compiler is performed\n through the diagnostic module and reported properly - we shouldn't be calling\n@@ -303,7 +322,7 @@ diagnostic emitter which records when we hit a fatal error. If the task\n fails without recording a fatal error then we've encountered a compiler\n bug and need to present an error.\n */\n-pub fn monitor(f: ~fn(diagnostic::Emitter)) {\n+pub fn monitor(f: ~fn(@diagnostic::Emitter)) {\n     use std::comm::*;\n \n     // XXX: This is a hack for newsched since it doesn't support split stacks.\n@@ -324,18 +343,11 @@ pub fn monitor(f: ~fn(diagnostic::Emitter)) {\n \n     match do task_builder.try {\n         let ch = ch_capture.clone();\n-        let ch_capture = ch.clone();\n         // The 'diagnostics emitter'. Every error, warning, etc. should\n         // go through this function.\n-        let demitter: @fn(Option<(@codemap::CodeMap, codemap::Span)>,\n-                          &str,\n-                          diagnostic::level) =\n-                          |cmsp, msg, lvl| {\n-            if lvl == diagnostic::fatal {\n-                ch_capture.send(fatal);\n-            }\n-            diagnostic::emit(cmsp, msg, lvl);\n-        };\n+        let demitter = @RustcEmitter {\n+            ch_capture: ch.clone(),\n+        } as @diagnostic::Emitter;\n \n         struct finally {\n             ch: SharedChan<monitor_msg>,\n@@ -357,7 +369,7 @@ pub fn monitor(f: ~fn(diagnostic::Emitter)) {\n         result::Err(_) => {\n             // Task failed without emitting a fatal diagnostic\n             if p.recv() == done {\n-                diagnostic::emit(\n+                diagnostic::DefaultEmitter.emit(\n                     None,\n                     diagnostic::ice_msg(\"unexpected failure\"),\n                     diagnostic::error);\n@@ -370,7 +382,9 @@ pub fn monitor(f: ~fn(diagnostic::Emitter)) {\n                      to github.com/mozilla/rust/issues\"\n                 ];\n                 for note in xs.iter() {\n-                    diagnostic::emit(None, *note, diagnostic::note)\n+                    diagnostic::DefaultEmitter.emit(None,\n+                                                    *note,\n+                                                    diagnostic::note)\n                 }\n             }\n             // Fail so the process returns a failure code"}, {"sha": "6f066218b7cdf6171c781b8bb1f4bdef99803391", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/37c32e249505f103f9bcad0bdd83f49f0efec9ef/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c32e249505f103f9bcad0bdd83f49f0efec9ef/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=37c32e249505f103f9bcad0bdd83f49f0efec9ef", "patch": "@@ -15,9 +15,12 @@ use std::io;\n use std::local_data;\n use extra::term;\n \n-pub type Emitter = @fn(cmsp: Option<(@codemap::CodeMap, Span)>,\n-                       msg: &str,\n-                       lvl: level);\n+pub trait Emitter {\n+    fn emit(&self,\n+            cmsp: Option<(@codemap::CodeMap, Span)>,\n+            msg: &str,\n+            lvl: level);\n+}\n \n // a handler deals with errors; certain errors\n // (fatal, bug, unimpl) may cause immediate exit,\n@@ -55,7 +58,7 @@ pub trait span_handler {\n \n struct HandlerT {\n     err_count: uint,\n-    emit: Emitter,\n+    emit: @Emitter,\n }\n \n struct CodemapT {\n@@ -91,11 +94,11 @@ impl span_handler for CodemapT {\n \n impl handler for HandlerT {\n     fn fatal(@mut self, msg: &str) -> ! {\n-        (self.emit)(None, msg, fatal);\n+        self.emit.emit(None, msg, fatal);\n         fail!();\n     }\n     fn err(@mut self, msg: &str) {\n-        (self.emit)(None, msg, error);\n+        self.emit.emit(None, msg, error);\n         self.bump_err_count();\n     }\n     fn bump_err_count(@mut self) {\n@@ -120,10 +123,10 @@ impl handler for HandlerT {\n         self.fatal(s);\n     }\n     fn warn(@mut self, msg: &str) {\n-        (self.emit)(None, msg, warning);\n+        self.emit.emit(None, msg, warning);\n     }\n     fn note(@mut self, msg: &str) {\n-        (self.emit)(None, msg, note);\n+        self.emit.emit(None, msg, note);\n     }\n     fn bug(@mut self, msg: &str) -> ! {\n         self.fatal(ice_msg(msg));\n@@ -135,7 +138,7 @@ impl handler for HandlerT {\n             cmsp: Option<(@codemap::CodeMap, Span)>,\n             msg: &str,\n             lvl: level) {\n-        (self.emit)(cmsp, msg, lvl);\n+        self.emit.emit(cmsp, msg, lvl);\n     }\n }\n \n@@ -145,19 +148,22 @@ pub fn ice_msg(msg: &str) -> ~str {\n \n pub fn mk_span_handler(handler: @mut handler, cm: @codemap::CodeMap)\n                     -> @mut span_handler {\n-    @mut CodemapT { handler: handler, cm: cm } as @mut span_handler\n+    @mut CodemapT {\n+        handler: handler,\n+        cm: cm,\n+    } as @mut span_handler\n }\n \n-pub fn mk_handler(emitter: Option<Emitter>) -> @mut handler {\n-    let emit: Emitter = match emitter {\n+pub fn mk_handler(emitter: Option<@Emitter>) -> @mut handler {\n+    let emit: @Emitter = match emitter {\n         Some(e) => e,\n-        None => {\n-            let emit: Emitter = |cmsp, msg, t| emit(cmsp, msg, t);\n-            emit\n-        }\n+        None => @DefaultEmitter as @Emitter\n     };\n \n-    @mut HandlerT { err_count: 0, emit: emit } as @mut handler\n+    @mut HandlerT {\n+        err_count: 0,\n+        emit: emit,\n+    } as @mut handler\n }\n \n #[deriving(Eq)]\n@@ -237,24 +243,30 @@ pub fn collect(messages: @mut ~[~str])\n     f\n }\n \n-pub fn emit(cmsp: Option<(@codemap::CodeMap, Span)>, msg: &str, lvl: level) {\n-    match cmsp {\n-      Some((cm, sp)) => {\n-        let sp = cm.adjust_span(sp);\n-        let ss = cm.span_to_str(sp);\n-        let lines = cm.span_to_lines(sp);\n-        print_diagnostic(ss, lvl, msg);\n-        highlight_lines(cm, sp, lvl, lines);\n-        print_macro_backtrace(cm, sp);\n-      }\n-      None => {\n-        print_diagnostic(\"\", lvl, msg);\n-      }\n+pub struct DefaultEmitter;\n+\n+impl Emitter for DefaultEmitter {\n+    fn emit(&self,\n+            cmsp: Option<(@codemap::CodeMap, Span)>,\n+            msg: &str,\n+            lvl: level) {\n+        match cmsp {\n+            Some((cm, sp)) => {\n+                let sp = cm.adjust_span(sp);\n+                let ss = cm.span_to_str(sp);\n+                let lines = cm.span_to_lines(sp);\n+                print_diagnostic(ss, lvl, msg);\n+                highlight_lines(cm, sp, lvl, lines);\n+                print_macro_backtrace(cm, sp);\n+            }\n+            None => print_diagnostic(\"\", lvl, msg),\n+        }\n     }\n }\n \n fn highlight_lines(cm: @codemap::CodeMap,\n-                   sp: Span, lvl: level,\n+                   sp: Span,\n+                   lvl: level,\n                    lines: @codemap::FileLines) {\n     let fm = lines.file;\n "}, {"sha": "91ef55c78f6af106d9d9fa0847b6be0fbfd13664", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c32e249505f103f9bcad0bdd83f49f0efec9ef/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c32e249505f103f9bcad0bdd83f49f0efec9ef/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=37c32e249505f103f9bcad0bdd83f49f0efec9ef", "patch": "@@ -45,7 +45,7 @@ pub struct ParseSess {\n     included_mod_stack: ~[Path],\n }\n \n-pub fn new_parse_sess(demitter: Option<Emitter>) -> @mut ParseSess {\n+pub fn new_parse_sess(demitter: Option<@Emitter>) -> @mut ParseSess {\n     let cm = @CodeMap::new();\n     @mut ParseSess {\n         cm: cm,"}]}