{"sha": "a5447e13aae877d9a8454e5e69de373cf32f8ee7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NDQ3ZTEzYWFlODc3ZDlhODQ1NGU1ZTY5ZGUzNzNjZjMyZjhlZTc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-02T11:34:53Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-04T03:21:00Z"}, "message": "rustc_trans: remove some outdated and unused logic from callee.", "tree": {"sha": "0f2c2da64a494a7ab5082043e4777243d35cd58f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f2c2da64a494a7ab5082043e4777243d35cd58f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5447e13aae877d9a8454e5e69de373cf32f8ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5447e13aae877d9a8454e5e69de373cf32f8ee7", "html_url": "https://github.com/rust-lang/rust/commit/a5447e13aae877d9a8454e5e69de373cf32f8ee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5447e13aae877d9a8454e5e69de373cf32f8ee7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5620a5879178dab2b929557208e19827eab9bda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5620a5879178dab2b929557208e19827eab9bda0", "html_url": "https://github.com/rust-lang/rust/commit/5620a5879178dab2b929557208e19827eab9bda0"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "2c707663a61b234f8eaf67abdfd736a403079e2a", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a5447e13aae877d9a8454e5e69de373cf32f8ee7/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5447e13aae877d9a8454e5e69de373cf32f8ee7/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=a5447e13aae877d9a8454e5e69de373cf32f8ee7", "patch": "@@ -698,12 +698,12 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n         _ => panic!(\"expected bare rust fn or closure in trans_call_inner\")\n     };\n \n-    let (llfn, llenv, llself) = match callee.data {\n+    let (llfn, llself) = match callee.data {\n         Fn(llfn) => {\n-            (llfn, None, None)\n+            (llfn, None)\n         }\n         TraitItem(d) => {\n-            (d.llfn, None, Some(d.llself))\n+            (d.llfn, Some(d.llself))\n         }\n         Intrinsic(node, substs) => {\n             assert!(abi == synabi::RustIntrinsic);\n@@ -794,11 +794,9 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n-        // Push the environment (or a trait object's self).\n-        match (llenv, llself) {\n-            (Some(llenv), None) => llargs.push(llenv),\n-            (None, Some(llself)) => llargs.push(llself),\n-            _ => {}\n+        // Push a trait object's self.\n+        if let Some(llself) = llself {\n+            llargs.push(llself);\n         }\n \n         // Push the arguments.\n@@ -894,11 +892,11 @@ pub enum CallArgs<'a, 'tcx> {\n     // value.\n     ArgVals(&'a [ValueRef]),\n \n-    // For overloaded operators: `(lhs, Vec(rhs, rhs_id), autoref)`. `lhs`\n+    // For overloaded operators: `(lhs, Option(rhs, rhs_id), autoref)`. `lhs`\n     // is the left-hand-side and `rhs/rhs_id` is the datum/expr-id of\n-    // the right-hand-side arguments (if any). `autoref` indicates whether the `rhs`\n+    // the right-hand-side argument (if any). `autoref` indicates whether the `rhs`\n     // arguments should be auto-referenced\n-    ArgOverloadedOp(Datum<'tcx, Expr>, Vec<(Datum<'tcx, Expr>, ast::NodeId)>, bool),\n+    ArgOverloadedOp(Datum<'tcx, Expr>, Option<(Datum<'tcx, Expr>, ast::NodeId)>, bool),\n \n     // Supply value of arguments as a list of expressions that must be\n     // translated, for overloaded call operators.\n@@ -1077,12 +1075,14 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                   DontAutorefArg,\n                                   llargs);\n \n-            assert_eq!(arg_tys.len(), 1 + rhs.len());\n-            for (rhs, rhs_id) in rhs {\n+            if let Some((rhs, rhs_id)) = rhs {\n+                assert_eq!(arg_tys.len(), 2);\n                 bcx = trans_arg_datum(bcx, arg_tys[1], rhs,\n                                       arg_cleanup_scope,\n                                       if autoref { DoAutorefArg(rhs_id) } else { DontAutorefArg },\n                                       llargs);\n+            } else {\n+                assert_eq!(arg_tys.len(), 1);\n             }\n         }\n         ArgVals(vs) => {"}, {"sha": "4505c75f6474fb42ecea1e9dfd1c74c18534b7c8", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5447e13aae877d9a8454e5e69de373cf32f8ee7/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5447e13aae877d9a8454e5e69de373cf32f8ee7/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=a5447e13aae877d9a8454e5e69de373cf32f8ee7", "patch": "@@ -805,7 +805,7 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                index_expr,\n                                                method_call,\n                                                base_datum,\n-                                               vec![(ix_datum, idx.id)],\n+                                               Some((ix_datum, idx.id)),\n                                                Some(SaveIn(scratch.val)),\n                                                false));\n             let datum = scratch.to_expr_datum();\n@@ -1175,21 +1175,21 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let lhs = unpack_datum!(bcx, trans(bcx, &**lhs));\n             let rhs_datum = unpack_datum!(bcx, trans(bcx, &**rhs));\n             trans_overloaded_op(bcx, expr, MethodCall::expr(expr.id), lhs,\n-                                vec![(rhs_datum, rhs.id)], Some(dest),\n+                                Some((rhs_datum, rhs.id)), Some(dest),\n                                 !ast_util::is_by_value_binop(op.node)).bcx\n         }\n         ast::ExprUnary(op, ref subexpr) => {\n             // if not overloaded, would be RvalueDatumExpr\n             let arg = unpack_datum!(bcx, trans(bcx, &**subexpr));\n             trans_overloaded_op(bcx, expr, MethodCall::expr(expr.id),\n-                                arg, Vec::new(), Some(dest), !ast_util::is_by_value_unop(op)).bcx\n+                                arg, None, Some(dest), !ast_util::is_by_value_unop(op)).bcx\n         }\n         ast::ExprIndex(ref base, ref idx) => {\n             // if not overloaded, would be RvalueDatumExpr\n             let base = unpack_datum!(bcx, trans(bcx, &**base));\n             let idx_datum = unpack_datum!(bcx, trans(bcx, &**idx));\n             trans_overloaded_op(bcx, expr, MethodCall::expr(expr.id), base,\n-                                vec![(idx_datum, idx.id)], Some(dest), true).bcx\n+                                Some((idx_datum, idx.id)), Some(dest), true).bcx\n         }\n         ast::ExprCast(..) => {\n             // Trait casts used to come this way, now they should be coercions.\n@@ -1943,7 +1943,7 @@ fn trans_overloaded_op<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                    expr: &ast::Expr,\n                                    method_call: MethodCall,\n                                    lhs: Datum<'tcx, Expr>,\n-                                   rhs: Vec<(Datum<'tcx, Expr>, ast::NodeId)>,\n+                                   rhs: Option<(Datum<'tcx, Expr>, ast::NodeId)>,\n                                    dest: Option<Dest>,\n                                    autoref: bool)\n                                    -> Result<'blk, 'tcx> {\n@@ -2259,7 +2259,7 @@ fn deref_once<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let scratch = rvalue_scratch_datum(bcx, ref_ty, \"overloaded_deref\");\n \n             unpack_result!(bcx, trans_overloaded_op(bcx, expr, method_call,\n-                                                    datum, Vec::new(), Some(SaveIn(scratch.val)),\n+                                                    datum, None, Some(SaveIn(scratch.val)),\n                                                     false));\n             scratch.to_expr_datum()\n         }"}]}