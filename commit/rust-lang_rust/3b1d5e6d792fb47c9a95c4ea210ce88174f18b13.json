{"sha": "3b1d5e6d792fb47c9a95c4ea210ce88174f18b13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMWQ1ZTZkNzkyZmI0N2M5YTk1YzRlYTIxMGNlODgxNzRmMThiMTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-03T10:04:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-05T16:41:29Z"}, "message": "call the mut version as_mut_ptr and also add an as_ptr-like method to NonNull slices", "tree": {"sha": "099d2e0bac3d87a75bde626224f3bb2df6824584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099d2e0bac3d87a75bde626224f3bb2df6824584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13", "html_url": "https://github.com/rust-lang/rust/commit/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c478b5473d6623622d318d058477f5f09e2eeb52", "url": "https://api.github.com/repos/rust-lang/rust/commits/c478b5473d6623622d318d058477f5f09e2eeb52", "html_url": "https://github.com/rust-lang/rust/commit/c478b5473d6623622d318d058477f5f09e2eeb52"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "66a1bea0c44b591e7c54d3815f3f76816c6f79cf", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3b1d5e6d792fb47c9a95c4ea210ce88174f18b13", "patch": "@@ -93,6 +93,7 @@\n #![feature(const_slice_ptr_len)]\n #![feature(const_type_name)]\n #![feature(const_likely)]\n+#![feature(const_slice_ptr_ptr)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "70a81f85da8f47ac3dfcb99a346e15acd509c9b0", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=3b1d5e6d792fb47c9a95c4ea210ce88174f18b13", "patch": "@@ -1041,12 +1041,12 @@ impl<T> *mut [T] {\n     /// use std::ptr;\n     ///\n     /// let slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\n-    /// assert_eq!(slice.as_ptr(), 0 as *mut i8);\n+    /// assert_eq!(slice.as_mut_ptr(), 0 as *mut i8);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"slice_ptr_ptr\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_ptr\", issue = \"none\")]\n-    pub const fn as_ptr(self) -> *mut T {\n+    pub const fn as_mut_ptr(self) -> *mut T {\n         self as *mut T\n     }\n }"}, {"sha": "3461d224c46b9153c8ea723b350009cac3a28cd9", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d5e6d792fb47c9a95c4ea210ce88174f18b13/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=3b1d5e6d792fb47c9a95c4ea210ce88174f18b13", "patch": "@@ -204,6 +204,26 @@ impl<T> NonNull<[T]> {\n     pub const fn len(self) -> usize {\n         self.as_ptr().len()\n     }\n+\n+    /// Returns a non-null pointer to the slice's buffer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(slice_ptr_ptr, nonnull_slice_from_raw_parts)]\n+    ///\n+    /// use std::ptr::NonNull;\n+    ///\n+    /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\n+    /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"slice_ptr_ptr\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_slice_ptr_ptr\", issue = \"none\")]\n+    pub const fn as_non_null_ptr(self) -> NonNull<T> {\n+        // SAFETY: We know `self` is non-null.\n+        unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }\n+    }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]"}]}