{"sha": "61be3bae40ffe16dff1fc2e0147ecf125064fde3", "node_id": "C_kwDOAAsO6NoAKDYxYmUzYmFlNDBmZmUxNmRmZjFmYzJlMDE0N2VjZjEyNTA2NGZkZTM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T15:47:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T16:40:34Z"}, "message": "support current_exe on macOS, and fix write_os_str length logic", "tree": {"sha": "1c46557467b1fccfcfdbe4bb65b212170c405d75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c46557467b1fccfcfdbe4bb65b212170c405d75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61be3bae40ffe16dff1fc2e0147ecf125064fde3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61be3bae40ffe16dff1fc2e0147ecf125064fde3", "html_url": "https://github.com/rust-lang/rust/commit/61be3bae40ffe16dff1fc2e0147ecf125064fde3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61be3bae40ffe16dff1fc2e0147ecf125064fde3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f633537f3e4d47a2e1f96daee68e1063e0da17d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f633537f3e4d47a2e1f96daee68e1063e0da17d4", "html_url": "https://github.com/rust-lang/rust/commit/f633537f3e4d47a2e1f96daee68e1063e0da17d4"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "d333e78e5240f86d2b206adc1530434a51a5cf04", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61be3bae40ffe16dff1fc2e0147ecf125064fde3/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61be3bae40ffe16dff1fc2e0147ecf125064fde3/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=61be3bae40ffe16dff1fc2e0147ecf125064fde3", "patch": "@@ -18,11 +18,11 @@ fn windows_check_buffer_size((success, len): (bool, u64)) -> u32 {\n     if success {\n         // If the function succeeds, the return value is the number of characters stored in the target buffer,\n         // not including the terminating null character.\n-        u32::try_from(len).unwrap()\n+        u32::try_from(len.checked_sub(1).unwrap()).unwrap()\n     } else {\n         // If the target buffer was not large enough to hold the data, the return value is the buffer size, in characters,\n         // required to hold the string and its terminating null character.\n-        u32::try_from(len.checked_add(1).unwrap()).unwrap()\n+        u32::try_from(len).unwrap()\n     }\n }\n "}, {"sha": "f99e2d174b5318141f9d183b9328046eb303126a", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61be3bae40ffe16dff1fc2e0147ecf125064fde3/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61be3bae40ffe16dff1fc2e0147ecf125064fde3/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=61be3bae40ffe16dff1fc2e0147ecf125064fde3", "patch": "@@ -92,7 +92,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// the Unix APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n     /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n-    /// string length returned does not include the null terminator.\n+    /// string length returned does include the null terminator.\n     fn write_os_str_to_c_str(\n         &mut self,\n         os_str: &OsStr,\n@@ -103,7 +103,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n         let string_length = u64::try_from(bytes.len()).unwrap();\n-        if size <= string_length {\n+        let string_length = string_length.checked_add(1).unwrap();\n+        if size < string_length {\n             return Ok((false, string_length));\n         }\n         self.eval_context_mut()\n@@ -115,7 +116,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// the Windows APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n     /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n-    /// string length returned does not include the null terminator.\n+    /// string length returned does include the null terminator. Length is measured in units of\n+    /// `u16.`\n     fn write_os_str_to_wide_str(\n         &mut self,\n         os_str: &OsStr,\n@@ -157,7 +159,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             alloc\n                 .write_scalar(alloc_range(size2 * offset, size2), Scalar::from_u16(wchar).into())?;\n         }\n-        Ok((true, string_length - 1))\n+        Ok((true, string_length))\n     }\n \n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes."}, {"sha": "951ddae2c14d0f1225d5d72f59dd2b40d3aad3f0", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61be3bae40ffe16dff1fc2e0147ecf125064fde3/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61be3bae40ffe16dff1fc2e0147ecf125064fde3/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=61be3bae40ffe16dff1fc2e0147ecf125064fde3", "patch": "@@ -1380,11 +1380,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let name_place = this.mplace_field(&entry_place, 5)?;\n \n                 let file_name = dir_entry.file_name(); // not a Path as there are no separators!\n-                let (name_fits, file_name_len) = this.write_os_str_to_c_str(\n+                let (name_fits, file_name_buf_len) = this.write_os_str_to_c_str(\n                     &file_name,\n                     name_place.ptr,\n                     name_place.layout.size.bytes(),\n                 )?;\n+                let file_name_len = file_name_buf_len.checked_sub(1).unwrap();\n                 if !name_fits {\n                     throw_unsup_format!(\n                         \"a directory entry had a name too large to fit in libc::dirent\""}, {"sha": "35751d5818ab8167ac55eb7e4be5c4a29420da7d", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/61be3bae40ffe16dff1fc2e0147ecf125064fde3/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61be3bae40ffe16dff1fc2e0147ecf125064fde3/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=61be3bae40ffe16dff1fc2e0147ecf125064fde3", "patch": "@@ -117,6 +117,33 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     dest,\n                 )?;\n             }\n+            \"_NSGetExecutablePath\" => {\n+                let [buf, bufsize] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                this.check_no_isolation(\"`_NSGetExecutablePath`\")?;\n+\n+                let buf_ptr = this.read_pointer(buf)?;\n+                let bufsize = this.deref_operand(bufsize)?;\n+\n+                // Using the host current_exe is a bit off, but consistent with Linux\n+                // (where stdlib reads /proc/self/exe).\n+                let path = std::env::current_exe().unwrap();\n+                let (written, size_needed) = this.write_path_to_c_str(\n+                    &path,\n+                    buf_ptr,\n+                    this.read_scalar(&bufsize.into())?.to_u32()?.into(),\n+                )?;\n+\n+                if written {\n+                    this.write_null(dest)?;\n+                } else {\n+                    this.write_scalar(\n+                        Scalar::from_u32(size_needed.try_into().unwrap()),\n+                        &bufsize.into(),\n+                    )?;\n+                    this.write_int(-1, dest)?;\n+                }\n+            }\n \n             // Thread-local storage\n             \"_tlv_atexit\" => {"}, {"sha": "64f62b230e488e5b41c1d41d21216649d2b7cf58", "filename": "tests/pass/current_exe.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/61be3bae40ffe16dff1fc2e0147ecf125064fde3/tests%2Fpass%2Fcurrent_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61be3bae40ffe16dff1fc2e0147ecf125064fde3/tests%2Fpass%2Fcurrent_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fcurrent_exe.rs?ref=61be3bae40ffe16dff1fc2e0147ecf125064fde3", "patch": "@@ -0,0 +1,8 @@\n+//@ignore-target-windows\n+//@compile-flags: -Zmiri-disable-isolation\n+use std::env;\n+\n+fn main() {\n+    // The actual value we get is a bit odd: we get the Miri binary that interprets us.\n+    env::current_exe().unwrap();\n+}"}]}