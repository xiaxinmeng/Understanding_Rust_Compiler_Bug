{"sha": "24329d72935c2753454e2187e632579c2405b6fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MzI5ZDcyOTM1YzI3NTM0NTRlMjE4N2U2MzI1NzljMjQwNWI2ZmM=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-12-15T14:57:34Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-12-20T14:10:06Z"}, "message": "Change `Extend` and `FromIterator` functionality of `BitvSet`\n\nAlso fix up some tests from last commit.", "tree": {"sha": "385aeac02c3bb775ecc2eedebb426fac2b2cbb25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385aeac02c3bb775ecc2eedebb426fac2b2cbb25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24329d72935c2753454e2187e632579c2405b6fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24329d72935c2753454e2187e632579c2405b6fc", "html_url": "https://github.com/rust-lang/rust/commit/24329d72935c2753454e2187e632579c2405b6fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24329d72935c2753454e2187e632579c2405b6fc/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84a3833077825893b5bf0fb5abf07bdbd58d988", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84a3833077825893b5bf0fb5abf07bdbd58d988", "html_url": "https://github.com/rust-lang/rust/commit/e84a3833077825893b5bf0fb5abf07bdbd58d988"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "dd3369ea1da75d24c52e9a686e46dea91750532a", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/24329d72935c2753454e2187e632579c2405b6fc/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24329d72935c2753454e2187e632579c2405b6fc/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=24329d72935c2753454e2187e632579c2405b6fc", "patch": "@@ -98,6 +98,14 @@ type Blocks<'a> = Cloned<Items<'a, u32>>;\n type MutBlocks<'a> = MutItems<'a, u32>;\n type MatchWords<'a> = Chain<Enumerate<Blocks<'a>>, Skip<Take<Enumerate<Repeat<u32>>>>>;\n \n+fn reverse_bits(byte: u8) -> u8 {\n+    let mut result = 0;\n+    for i in range(0, u8::BITS) {\n+        result |= ((byte >> i) & 1) << (u8::BITS - 1 - i);\n+    }\n+    result\n+}\n+\n // Take two BitV's, and return iterators of their words, where the shorter one\n // has been padded with 0's\n fn match_words <'a,'b>(a: &'a Bitv, b: &'b Bitv) -> (MatchWords<'a>, MatchWords<'b>) {\n@@ -303,19 +311,21 @@ impl Bitv {\n         let complete_words = bytes.len() / 4;\n         let extra_bytes = bytes.len() % 4;\n \n+        bitv.nbits = len;\n+\n         for i in range(0, complete_words) {\n             bitv.storage.push(\n-                (bytes[i * 4 + 0] as u32 << 0) |\n-                (bytes[i * 4 + 1] as u32 << 8) |\n-                (bytes[i * 4 + 2] as u32 << 16) |\n-                (bytes[i * 4 + 3] as u32 << 24)\n+                (reverse_bits(bytes[i * 4 + 0]) as u32 << 0) |\n+                (reverse_bits(bytes[i * 4 + 1]) as u32 << 8) |\n+                (reverse_bits(bytes[i * 4 + 2]) as u32 << 16) |\n+                (reverse_bits(bytes[i * 4 + 3]) as u32 << 24)\n             );\n         }\n \n         if extra_bytes > 0 {\n             let mut last_word = 0u32;\n             for (i, &byte) in bytes[complete_words*4..].iter().enumerate() {\n-                last_word |= byte as u32 << (i * 8);\n+                last_word |= reverse_bits(byte) as u32 << (i * 8);\n             }\n             bitv.storage.push(last_word);\n         }\n@@ -1102,18 +1112,20 @@ impl Default for BitvSet {\n     fn default() -> BitvSet { BitvSet::new() }\n }\n \n-impl FromIterator<bool> for BitvSet {\n-    fn from_iter<I:Iterator<bool>>(iterator: I) -> BitvSet {\n+impl FromIterator<uint> for BitvSet {\n+    fn from_iter<I:Iterator<uint>>(iterator: I) -> BitvSet {\n         let mut ret = BitvSet::new();\n         ret.extend(iterator);\n         ret\n     }\n }\n \n-impl Extend<bool> for BitvSet {\n+impl Extend<uint> for BitvSet {\n     #[inline]\n-    fn extend<I: Iterator<bool>>(&mut self, iterator: I) {\n-        self.bitv.extend(iterator);\n+    fn extend<I: Iterator<uint>>(&mut self, mut iterator: I) {\n+        for i in iterator {\n+            self.insert(i);\n+        }\n     }\n }\n \n@@ -2592,9 +2604,9 @@ mod bitv_set_test {\n     }\n \n     #[test]\n-    fn test_bitv_set_from_bools() {\n-        let bools = vec![true, false, true, true];\n-        let a: BitvSet = bools.iter().map(|n| *n).collect();\n+    fn test_bitv_set_from_uints() {\n+        let uints = vec![0, 2, 2, 3];\n+        let a: BitvSet = uints.into_iter().collect();\n         let mut b = BitvSet::new();\n         b.insert(0);\n         b.insert(2);\n@@ -2604,13 +2616,13 @@ mod bitv_set_test {\n \n     #[test]\n     fn test_bitv_set_iterator() {\n-        let bools = [true, false, true, true];\n-        let bitv: BitvSet = bools.iter().map(|n| *n).collect();\n+        let uints = vec![0, 2, 2, 3];\n+        let bitv: BitvSet = uints.into_iter().collect();\n \n         let idxs: Vec<uint> = bitv.iter().collect();\n-        assert_eq!(idxs, vec!(0, 2, 3));\n+        assert_eq!(idxs, vec![0, 2, 3]);\n \n-        let long: BitvSet = range(0u, 10000).map(|n| n % 2 == 0).collect();\n+        let long: BitvSet = range(0u, 10000).filter(|&n| n % 2 == 0).collect();\n         let real = range_step(0, 10000, 2).collect::<Vec<uint>>();\n \n         let idxs: Vec<uint> = long.iter().collect();"}]}