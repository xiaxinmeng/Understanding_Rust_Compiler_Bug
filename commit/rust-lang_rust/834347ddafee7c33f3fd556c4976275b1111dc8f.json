{"sha": "834347ddafee7c33f3fd556c4976275b1111dc8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNDM0N2RkYWZlZTdjMzNmM2ZkNTU2YzQ5NzYyNzViMTExMWRjOGY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-09T19:28:22Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-25T16:43:57Z"}, "message": "Add rustdoc JS non-std tests", "tree": {"sha": "859eb0cf3b0502258e116b248af8aca8e828349a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859eb0cf3b0502258e116b248af8aca8e828349a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/834347ddafee7c33f3fd556c4976275b1111dc8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/834347ddafee7c33f3fd556c4976275b1111dc8f", "html_url": "https://github.com/rust-lang/rust/commit/834347ddafee7c33f3fd556c4976275b1111dc8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/834347ddafee7c33f3fd556c4976275b1111dc8f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da573206f87b5510de4b0ee1a9c044127e409bd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da573206f87b5510de4b0ee1a9c044127e409bd3", "html_url": "https://github.com/rust-lang/rust/commit/da573206f87b5510de4b0ee1a9c044127e409bd3"}], "stats": {"total": 421, "additions": 420, "deletions": 1}, "files": [{"sha": "71b9cd6f9fba4df7cb540c36160d538089a8e682", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=834347ddafee7c33f3fd556c4976275b1111dc8f", "patch": "@@ -406,6 +406,7 @@ impl<'a> Builder<'a> {\n                 test::Clippy,\n                 test::CompiletestTest,\n                 test::RustdocJS,\n+                test::RustdocJSNotStd,\n                 test::RustdocTheme,\n                 // Run bootstrap close to the end as it's unlikely to fail\n                 test::Bootstrap,"}, {"sha": "7dcc10e8a091887b4a735817a78a50048e45c82c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=834347ddafee7c33f3fd556c4976275b1111dc8f", "patch": "@@ -612,6 +612,50 @@ impl Step for RustdocJS {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustdocJSNotStd {\n+    pub host: Interned<String>,\n+    pub target: Interned<String>,\n+    pub compiler: Compiler,\n+}\n+\n+impl Step for RustdocJSNotStd {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/test/rustdoc-js-not-std\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n+        run.builder.ensure(RustdocJSNotStd {\n+            host: run.host,\n+            target: run.target,\n+            compiler,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        if let Some(ref nodejs) = builder.config.nodejs {\n+            let mut command = Command::new(nodejs);\n+            command.args(&[\"src/tools/rustdoc-js-not-std/tester.js\",\n+                           &*self.host,\n+                           builder.top_stage.to_string().as_str()]);\n+            builder.ensure(crate::doc::Std {\n+                target: self.target,\n+                stage: builder.top_stage,\n+            });\n+            builder.run(&mut command);\n+        } else {\n+            builder.info(\n+                \"No nodejs found, skipping \\\"src/test/rustdoc-js-not-std\\\" tests\"\n+            );\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocUi {\n     pub host: Interned<String>,"}, {"sha": "d99b23468b60cfa94361eac46317304aa7ae8332", "filename": "src/test/rustdoc-js-not-std/basic.js", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Ftest%2Frustdoc-js-not-std%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Ftest%2Frustdoc-js-not-std%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-not-std%2Fbasic.js?ref=834347ddafee7c33f3fd556c4976275b1111dc8f", "patch": "@@ -0,0 +1,7 @@\n+const QUERY = 'Fo';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'basic', 'name': 'Foo' },\n+    ],\n+};"}, {"sha": "4a835673a596bcd05404f43d34082bf2785f2a9d", "filename": "src/test/rustdoc-js-not-std/basic.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Ftest%2Frustdoc-js-not-std%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Ftest%2Frustdoc-js-not-std%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-not-std%2Fbasic.rs?ref=834347ddafee7c33f3fd556c4976275b1111dc8f", "patch": "@@ -0,0 +1 @@\n+pub struct Foo;"}, {"sha": "61490b2f48d03f47dac1d79a7833850d93a63070", "filename": "src/tools/rustdoc-js-not-std/tester.js", "status": "added", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/rust-lang/rust/blob/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Ftools%2Frustdoc-js-not-std%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Ftools%2Frustdoc-js-not-std%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-not-std%2Ftester.js?ref=834347ddafee7c33f3fd556c4976275b1111dc8f", "patch": "@@ -0,0 +1,365 @@\n+const fs = require('fs');\n+const { spawnSync } = require('child_process');\n+\n+const TEST_FOLDER = 'src/test/rustdoc-js-not-std/';\n+\n+function getNextStep(content, pos, stop) {\n+    while (pos < content.length && content[pos] !== stop &&\n+           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n+        pos += 1;\n+    }\n+    if (pos >= content.length) {\n+        return null;\n+    }\n+    if (content[pos] !== stop) {\n+        return pos * -1;\n+    }\n+    return pos;\n+}\n+\n+// Stupid function extractor based on indent. Doesn't support block\n+// comments. If someone puts a ' or an \" in a block comment this\n+// will blow up. Template strings are not tested and might also be\n+// broken.\n+function extractFunction(content, functionName) {\n+    var indent = 0;\n+    var splitter = \"function \" + functionName + \"(\";\n+\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = start;\n+        while (pos < content.length && content[pos] !== ')') {\n+            pos += 1;\n+        }\n+        if (pos >= content.length) {\n+            break;\n+        }\n+        pos = getNextStep(content, pos + 1, '{');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            // Eat single-line comments\n+            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '\\n');\n+\n+            // Eat quoted strings\n+            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n+                var stop = content[pos];\n+                var is_escaped = false;\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+\n+            // Otherwise, check for indent\n+            } else if (content[pos] === '{') {\n+                indent += 1;\n+            } else if (content[pos] === '}') {\n+                indent -= 1;\n+                if (indent === 0) {\n+                    return content.slice(start, pos + 1);\n+                }\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var splitter = \"var \" + arrayName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        pos = getNextStep(content, pos, '[');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ']' &&\n+                       pos + 1 < content.length &&\n+                       content[pos + 1] === ';') {\n+                return content.slice(start, pos + 2);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var splitter = \"var \" + varName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ';') {\n+                return content.slice(start, pos + 1);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n+}\n+\n+function loadContent(content) {\n+    var Module = module.constructor;\n+    var m = new Module();\n+    m._compile(content, \"tmp.js\");\n+    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n+        content.startsWith(\"// ignore-order\\n\");\n+    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n+        content.startsWith(\"// exact-check\\n\");\n+    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n+        content.startsWith(\"// should-fail\\n\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n+    }\n+    return content;\n+}\n+\n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            var value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return i;\n+        }\n+    }\n+    return null;\n+}\n+\n+function remove_docs(out_dir) {\n+    spawnSync('rm', ['-rf', out_dir]);\n+}\n+\n+function build_docs(out_dir, rustdoc_path, file_to_document) {\n+    remove_docs(out_dir);\n+    var c = spawnSync(rustdoc_path, [file_to_document, '-o', out_dir]);\n+    var s = '';\n+    if (c.error || c.stderr.length > 0) {\n+        if (c.stderr.length > 0) {\n+            s += '==> STDERR: ' + c.stderr + '\\n';\n+        }\n+        s += '==> ERROR: ' + c.error;\n+    }\n+    return s;\n+}\n+\n+function load_files(out_folder, crate) {\n+    var mainJs = readFile(out_folder + \"/main.js\");\n+    var ALIASES = readFile(out_folder + \"/aliases.js\");\n+    var searchIndex = readFile(out_folder + \"/search-index.js\").split(\"\\n\");\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\",\n+                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n+                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n+                           \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n+                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n+    finalJS += 'var rootPath = \"../\";\\n';\n+    finalJS += ALIASES;\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    return [loaded, loaded.buildIndex(searchIndex.searchIndex)];\n+}\n+\n+function main(argv) {\n+    if (argv.length !== 4) {\n+        console.error(\"USAGE: node tester.js [TOOLCHAIN] [STAGE]\");\n+        return 1;\n+    }\n+    const toolchain = argv[2];\n+    const stage = argv[3];\n+    const rustdoc_path = './build/' + toolchain + '/stage' + stage + '/bin/rustdoc';\n+\n+    var errors = 0;\n+\n+    fs.readdirSync(TEST_FOLDER).forEach(function(file) {\n+        if (!file.endsWith('.js')) {\n+            return;\n+        }\n+        var test_name = file.substring(0, file.length - 3);\n+        process.stdout.write('Checking \"' + test_name + '\" ... ');\n+        var rust_file = TEST_FOLDER + test_name + '.rs';\n+\n+        if (!fs.existsSync(rust_file)) {\n+            console.error(\"FAILED\");\n+            console.error(\"==> Missing '\" + test_name + \".rs' file...\");\n+            errors += 1;\n+            return;\n+        }\n+\n+        var out_folder = \"build/\" + toolchain + \"/stage\" + stage + \"/tests/rustdoc-js-not-std/\" +\n+                         test_name;\n+\n+        var ret = build_docs(out_folder, rustdoc_path, rust_file);\n+        if (ret.length > 0) {\n+            console.error(\"FAILED\");\n+            console.error(ret);\n+            errors += 1;\n+            return;\n+        }\n+\n+        var [loaded, index] = load_files(out_folder, test_name);\n+        var loadedFile = loadContent(readFile(TEST_FOLDER + file) +\n+                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+        const expected = loadedFile.EXPECTED;\n+        const query = loadedFile.QUERY;\n+        const filter_crate = loadedFile.FILTER_CRATE;\n+        const ignore_order = loadedFile.ignore_order;\n+        const exact_check = loadedFile.exact_check;\n+        const should_fail = loadedFile.should_fail;\n+        var results = loaded.execSearch(loaded.getQuery(query), index);\n+        var error_text = [];\n+        for (var key in expected) {\n+            if (!expected.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            if (!results.hasOwnProperty(key)) {\n+                error_text.push('==> Unknown key \"' + key + '\"');\n+                break;\n+            }\n+            var entry = expected[key];\n+            var prev_pos = -1;\n+            for (var i = 0; i < entry.length; ++i) {\n+                var entry_pos = lookForEntry(entry[i], results[key]);\n+                if (entry_pos === null) {\n+                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                    JSON.stringify(entry[i]) + \"'\");\n+                } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n+                    error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n+                                    \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n+                                    JSON.stringify(results[key][i]) + \"'\");\n+                } else if (ignore_order === false && entry_pos < prev_pos) {\n+                    error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n+                                    \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+                } else {\n+                    prev_pos = entry_pos;\n+                }\n+            }\n+        }\n+        if (error_text.length === 0 && should_fail === true) {\n+            errors += 1;\n+            console.error(\"FAILED\");\n+            console.error(\"==> Test was supposed to fail but all items were found...\");\n+        } else if (error_text.length !== 0 && should_fail === false) {\n+            errors += 1;\n+            console.error(\"FAILED\");\n+            console.error(error_text.join(\"\\n\"));\n+        } else {\n+            // In this case, we remove the docs, no need to keep them around.\n+            remove_docs(out_folder);\n+            console.log(\"OK\");\n+        }\n+    });\n+    return errors;\n+}\n+\n+process.exit(main(process.argv));"}, {"sha": "38fdcb4f468cf6b09c3ab9e5c7897805284ff94b", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/834347ddafee7c33f3fd556c4976275b1111dc8f/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=834347ddafee7c33f3fd556c4976275b1111dc8f", "patch": "@@ -221,7 +221,8 @@ function lookForEntry(entry, data) {\n \n function main(argv) {\n     if (argv.length !== 3) {\n-        console.error(\"Expected toolchain to check as argument (for example 'x86_64-apple-darwin'\");\n+        console.error(\"Expected toolchain to check as argument (for example \\\n+                       'x86_64-apple-darwin')\");\n         return 1;\n     }\n     var toolchain = argv[2];"}]}