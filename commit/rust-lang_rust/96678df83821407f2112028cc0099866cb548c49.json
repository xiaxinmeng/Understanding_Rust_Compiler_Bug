{"sha": "96678df83821407f2112028cc0099866cb548c49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Njc4ZGY4MzgyMTQwN2YyMTEyMDI4Y2MwMDk5ODY2Y2I1NDhjNDk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2019-01-05T17:41:12Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2019-01-05T17:41:12Z"}, "message": "Cleanup PartialEq docs.\n\n- Cleanup the `impl PartialEq<BookFormat> for Book` implementation\n- Implement `impl PartialEq<Book> for BookFormat` so it\u2019s symmetric\n  - Fixes https://github.com/rust-lang/rust/issues/53844.\n- Removes the last example since it appears to be redundant with the\n  previous two examples.", "tree": {"sha": "0073eb407ba69cc6b184b97c998236fa8ecfd212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0073eb407ba69cc6b184b97c998236fa8ecfd212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96678df83821407f2112028cc0099866cb548c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96678df83821407f2112028cc0099866cb548c49", "html_url": "https://github.com/rust-lang/rust/commit/96678df83821407f2112028cc0099866cb548c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96678df83821407f2112028cc0099866cb548c49/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68614265d312fc2cbe8a696f7dabb9416eb6f221", "url": "https://api.github.com/repos/rust-lang/rust/commits/68614265d312fc2cbe8a696f7dabb9416eb6f221", "html_url": "https://github.com/rust-lang/rust/commit/68614265d312fc2cbe8a696f7dabb9416eb6f221"}], "stats": {"total": 56, "additions": 9, "deletions": 47}, "files": [{"sha": "cf24e08e2e706276123990c379b11ecc603f9e6b", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 9, "deletions": 47, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/96678df83821407f2112028cc0099866cb548c49/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96678df83821407f2112028cc0099866cb548c49/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=96678df83821407f2112028cc0099866cb548c49", "patch": "@@ -107,67 +107,29 @@ use self::Ordering::*;\n ///     format: BookFormat,\n /// }\n ///\n+/// // Implement <Book> == <BookFormat> comparisons\n /// impl PartialEq<BookFormat> for Book {\n ///     fn eq(&self, other: &BookFormat) -> bool {\n-///         match (&self.format, other) {\n-///            (BookFormat::Paperback, BookFormat::Paperback) => true,\n-///            (BookFormat::Hardback,  BookFormat::Hardback)  => true,\n-///            (BookFormat::Ebook,     BookFormat::Ebook)     => true,\n-///            (_, _) => false,\n-///         }\n+///         self.format == *other\n ///     }\n /// }\n ///\n-/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n-///\n-/// assert!(b1 == BookFormat::Paperback);\n-/// assert!(b1 != BookFormat::Ebook);\n-/// ```\n-///\n-/// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n-/// we've changed what type we can use on the right side of the `==` operator.\n-/// This lets us use it in the `assert!` statements at the bottom.\n-///\n-/// You can also combine these implementations to let the `==` operator work with\n-/// two different types:\n-///\n-/// ```\n-/// enum BookFormat {\n-///     Paperback,\n-///     Hardback,\n-///     Ebook,\n-/// }\n-///\n-/// struct Book {\n-///     isbn: i32,\n-///     format: BookFormat,\n-/// }\n-///\n-/// impl PartialEq<BookFormat> for Book {\n-///     fn eq(&self, other: &BookFormat) -> bool {\n-///         match (&self.format, other) {\n-///            (&BookFormat::Paperback, &BookFormat::Paperback) => true,\n-///            (&BookFormat::Hardback,  &BookFormat::Hardback)  => true,\n-///            (&BookFormat::Ebook,     &BookFormat::Ebook)     => true,\n-///            (_, _) => false,\n-///         }\n-///     }\n-/// }\n-///\n-/// impl PartialEq for Book {\n+/// // Implement <BookFormat> == <Book> comparisons\n+/// impl PartialEq<Book> for BookFormat {\n ///     fn eq(&self, other: &Book) -> bool {\n-///         self.isbn == other.isbn\n+///         *other == self.format\n ///     }\n /// }\n ///\n /// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n-/// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n ///\n /// assert!(b1 == BookFormat::Paperback);\n-/// assert!(b1 != BookFormat::Ebook);\n-/// assert!(b1 == b2);\n+/// assert!(BookFormat::Ebook != b1);\n /// ```\n ///\n+/// By changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\n+/// we allow `BookFormat`s to be compared with `Book`s.\n+///\n /// # Examples\n ///\n /// ```"}]}