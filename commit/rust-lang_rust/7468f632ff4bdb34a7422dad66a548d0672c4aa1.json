{"sha": "7468f632ff4bdb34a7422dad66a548d0672c4aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjhmNjMyZmY0YmRiMzRhNzQyMmRhZDY2YTU0OGQwNjcyYzRhYTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-31T09:52:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-31T09:56:08Z"}, "message": "also reduce some libcore test iteration counts", "tree": {"sha": "f4db0ee613098b22a6d2650d7ea1da3a56a7011d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4db0ee613098b22a6d2650d7ea1da3a56a7011d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7468f632ff4bdb34a7422dad66a548d0672c4aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7468f632ff4bdb34a7422dad66a548d0672c4aa1", "html_url": "https://github.com/rust-lang/rust/commit/7468f632ff4bdb34a7422dad66a548d0672c4aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7468f632ff4bdb34a7422dad66a548d0672c4aa1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e168a696f23bf3bbb8b23ac83240910a92ff7a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e168a696f23bf3bbb8b23ac83240910a92ff7a3", "html_url": "https://github.com/rust-lang/rust/commit/7e168a696f23bf3bbb8b23ac83240910a92ff7a3"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "e5656eb204c733ab8933f0ddd21be3463e0b75d8", "filename": "library/core/tests/num/flt2dec/random.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7468f632ff4bdb34a7422dad66a548d0672c4aa1/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7468f632ff4bdb34a7422dad66a548d0672c4aa1/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=7468f632ff4bdb34a7422dad66a548d0672c4aa1", "patch": "@@ -188,7 +188,7 @@ fn exact_f32_random_equivalence_test() {\n fn exact_f64_random_equivalence_test() {\n     use core::num::flt2dec::strategy::dragon::format_exact as fallback;\n     // Miri is too slow\n-    let n = if cfg!(miri) { 3 } else { 1_000 };\n+    let n = if cfg!(miri) { 2 } else { 1_000 };\n \n     for k in 1..21 {\n         f64_random_equivalence_test("}, {"sha": "7e6c8add3339d2d0052fc800fbbb7ce5e2eeda61", "filename": "library/core/tests/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7468f632ff4bdb34a7422dad66a548d0672c4aa1/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7468f632ff4bdb34a7422dad66a548d0672c4aa1/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=7468f632ff4bdb34a7422dad66a548d0672c4aa1", "patch": "@@ -2,6 +2,7 @@ use super::super::*;\n use core::num::flt2dec::strategy::grisu::*;\n \n #[test]\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_cached_power() {\n     assert_eq!(CACHED_POW10.first().unwrap().1, CACHED_POW10_FIRST_E);\n     assert_eq!(CACHED_POW10.last().unwrap().1, CACHED_POW10_LAST_E);"}, {"sha": "35502031da43707d722807ffb15c87f680de6ba1", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7468f632ff4bdb34a7422dad66a548d0672c4aa1/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7468f632ff4bdb34a7422dad66a548d0672c4aa1/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=7468f632ff4bdb34a7422dad66a548d0672c4aa1", "patch": "@@ -1268,14 +1268,14 @@ fn sort_unstable() {\n     use rand::{rngs::StdRng, seq::SliceRandom, Rng, SeedableRng};\n \n     // Miri is too slow\n-    let large_range = if cfg!(miri) { 0..0 } else { 500..510 };\n+    let lens = if cfg!(miri) { (2..20).chain(0..0) } else { (2..25).chain(500..510) };\n     let rounds = if cfg!(miri) { 1 } else { 100 };\n \n     let mut v = [0; 600];\n     let mut tmp = [0; 600];\n     let mut rng = StdRng::from_entropy();\n \n-    for len in (2..25).chain(large_range) {\n+    for len in lens {\n         let v = &mut v[0..len];\n         let tmp = &mut tmp[0..len];\n "}]}