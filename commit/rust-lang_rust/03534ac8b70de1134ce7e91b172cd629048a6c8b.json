{"sha": "03534ac8b70de1134ce7e91b172cd629048a6c8b", "node_id": "C_kwDOAAsO6NoAKDAzNTM0YWM4YjcwZGUxMTM0Y2U3ZTkxYjE3MmNkNjI5MDQ4YTZjOGI", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-05-26T17:19:35Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-05-28T16:44:50Z"}, "message": "Replace EarlyBinder(x) with EarlyBinder::new(x)", "tree": {"sha": "3ad32332510ba0986bf9cdb52ac1901ec13813b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ad32332510ba0986bf9cdb52ac1901ec13813b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03534ac8b70de1134ce7e91b172cd629048a6c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03534ac8b70de1134ce7e91b172cd629048a6c8b", "html_url": "https://github.com/rust-lang/rust/commit/03534ac8b70de1134ce7e91b172cd629048a6c8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03534ac8b70de1134ce7e91b172cd629048a6c8b/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c03fb65268e3331f381714c664a581a6e86b8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c03fb65268e3331f381714c664a581a6e86b8c", "html_url": "https://github.com/rust-lang/rust/commit/39c03fb65268e3331f381714c664a581a6e86b8c"}], "stats": {"total": 122, "additions": 63, "deletions": 59}, "files": [{"sha": "70cb6dfd66f27bde23afcad51e6027c34520b165", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -361,7 +361,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            ty::EarlyBinder(value),\n+            ty::EarlyBinder::new(value),\n         )\n     }\n "}, {"sha": "6cb9e163b404ece9395249f6cf8e9db5e7b33693", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -93,7 +93,7 @@ fn make_mir_scope<'ll, 'tcx>(\n             let callee = cx.tcx.subst_and_normalize_erasing_regions(\n                 instance.substs,\n                 ty::ParamEnv::reveal_all(),\n-                ty::EarlyBinder(callee),\n+                ty::EarlyBinder::new(callee),\n             );\n             let callee_fn_abi = cx.fn_abi_of_instance(callee, ty::List::empty());\n             cx.dbg_scope_fn(callee, callee_fn_abi, None)"}, {"sha": "51393a5d774dc58e37cfc8001bc12091f61f00fb", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.cx.tcx(),\n             ty::ParamEnv::reveal_all(),\n-            ty::EarlyBinder(value),\n+            ty::EarlyBinder::new(value),\n         )\n     }\n }"}, {"sha": "9195ae163bc6134bf86660ad4ecfaebe99eed8bb", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -497,7 +497,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .try_subst_mir_and_normalize_erasing_regions(\n                 *self.tcx,\n                 self.param_env,\n-                ty::EarlyBinder(value),\n+                ty::EarlyBinder::new(value),\n             )\n             .map_err(|_| err_inval!(TooGeneric))\n     }"}, {"sha": "284ae0e1e58a27539095ab8640d6c3bd80d0a852", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -1278,7 +1278,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // params (and trait ref's late bound params). This logic is very similar to\n             // `Predicate::subst_supertrait`, and it's no coincidence why.\n             let shifted_output = tcx.shift_bound_var_indices(num_bound_vars, output);\n-            let subst_output = ty::EarlyBinder(shifted_output).subst(tcx, substs);\n+            let subst_output = ty::EarlyBinder::new(shifted_output).subst(tcx, substs);\n \n             let bound_vars = tcx.late_bound_vars(binding.hir_id);\n             ty::Binder::bind_with_vars(subst_output, bound_vars)"}, {"sha": "283a9ed3388eb9518022465cf2f882cd77fc12b7", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -794,14 +794,14 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                     })\n                 });\n                 debug!(%ty);\n-                collected_tys.insert(def_id, ty::EarlyBinder(ty));\n+                collected_tys.insert(def_id, ty::EarlyBinder::new(ty));\n             }\n             Err(err) => {\n                 let reported = tcx.sess.delay_span_bug(\n                     return_span,\n                     format!(\"could not fully resolve: {ty} => {err:?}\"),\n                 );\n-                collected_tys.insert(def_id, ty::EarlyBinder(tcx.ty_error(reported)));\n+                collected_tys.insert(def_id, ty::EarlyBinder::new(tcx.ty_error(reported)));\n             }\n         }\n     }"}, {"sha": "eeb69c389cd804c207e0e38ae63c7b5cba607334", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -128,7 +128,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     // We don't need to normalize this param-env or anything, since we're only\n     // substituting it with free params, so no additional param-env normalization\n     // can occur on top of what has been done in the param_env query itself.\n-    let param_env = ty::EarlyBinder(tcx.param_env(adt_def_id))\n+    let param_env = ty::EarlyBinder::new(tcx.param_env(adt_def_id))\n         .subst(tcx, adt_to_impl_substs)\n         .with_constness(tcx.constness(drop_impl_def_id));\n "}, {"sha": "4c513c4d8cc6a046976e4f7e46d1f080b254f4e9", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -1398,7 +1398,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             }\n             let mut param_count = CountParams::default();\n             let has_region = pred.visit_with(&mut param_count).is_break();\n-            let substituted_pred = ty::EarlyBinder(pred).subst(tcx, substs);\n+            let substituted_pred = ty::EarlyBinder::new(pred).subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n             if substituted_pred.has_non_region_param() || param_count.params.len() > 1 || has_region"}, {"sha": "75d99fee152ea686af60ef549b1896982f2e733d", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -1124,7 +1124,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<ty::PolyFnSig<\n             bug!(\"unexpected sort of node in fn_sig(): {:?}\", x);\n         }\n     };\n-    ty::EarlyBinder(output)\n+    ty::EarlyBinder::new(output)\n }\n \n fn infer_return_ty_for_fn_sig<'tcx>(\n@@ -1312,7 +1312,7 @@ fn impl_trait_ref(\n                 check_impl_constness(tcx, impl_.constness, ast_trait_ref),\n             )\n         })\n-        .map(ty::EarlyBinder)\n+        .map(ty::EarlyBinder::new)\n }\n \n fn check_impl_constness("}, {"sha": "03c8c59402e76d86bb218d6d7dc086b97cf68eed", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -86,7 +86,7 @@ pub(super) fn explicit_item_bounds(\n         Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n             let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n             let opaque_ty = item.expect_opaque_ty();\n-            return ty::EarlyBinder(opaque_type_bounds(\n+            return ty::EarlyBinder::new(opaque_type_bounds(\n                 tcx,\n                 opaque_def_id.expect_local(),\n                 opaque_ty.bounds,\n@@ -124,7 +124,7 @@ pub(super) fn explicit_item_bounds(\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     };\n-    ty::EarlyBinder(bounds)\n+    ty::EarlyBinder::new(bounds)\n }\n \n pub(super) fn item_bounds("}, {"sha": "0b57d6965856314d7d19673210738b81694dc581", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -323,7 +323,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                 return map[&assoc_item.trait_item_def_id.unwrap()];\n             }\n             Err(_) => {\n-                return ty::EarlyBinder(tcx.ty_error_with_message(\n+                return ty::EarlyBinder::new(tcx.ty_error_with_message(\n                     DUMMY_SP,\n                     \"Could not collect return position impl trait in trait tys\",\n                 ));\n@@ -497,7 +497,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n             bug!(\"unexpected sort of node in type_of(): {:?}\", x);\n         }\n     };\n-    ty::EarlyBinder(output)\n+    ty::EarlyBinder::new(output)\n }\n \n fn infer_placeholder_type<'a>("}, {"sha": "d7f11d3fd9d38b53f91bc21068178564dd47e55e", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                 }\n             }\n \n-            ty::EarlyBinder(required_predicates)\n+            ty::EarlyBinder::new(required_predicates)\n         })\n     }\n }"}, {"sha": "e386b1b7120f3a9e59f01eeb072de9ccba09fd04", "filename": "compiler/rustc_hir_analysis/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -73,7 +73,7 @@ pub(super) fn infer_predicates(\n             if item_required_predicates.len() > item_predicates_len {\n                 predicates_added = true;\n                 global_inferred_outlives\n-                    .insert(item_did.to_def_id(), ty::EarlyBinder(item_required_predicates));\n+                    .insert(item_did.to_def_id(), ty::EarlyBinder::new(item_required_predicates));\n             }\n         }\n "}, {"sha": "731bbb1edfb70776ce9bea3e28d0717959e0c897", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -851,7 +851,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         } else {\n             tcx.arena.alloc_from_iter(lazy.decode((self, tcx)))\n         };\n-        ty::EarlyBinder(&*output)\n+        ty::EarlyBinder::new(&*output)\n     }\n \n     fn get_variant("}, {"sha": "e3a0ce373879b3ff2ecdc1e83416d54264a5fadd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -1727,7 +1727,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ty::Closure(_, substs) => {\n                 let constness = self.tcx.constness(def_id.to_def_id());\n                 self.tables.constness.set_some(def_id.to_def_id().index, constness);\n-                record!(self.tables.fn_sig[def_id.to_def_id()] <- ty::EarlyBinder(substs.as_closure().sig()));\n+                record!(self.tables.fn_sig[def_id.to_def_id()] <- ty::EarlyBinder::new(substs.as_closure().sig()));\n             }\n \n             _ => bug!(\"closure that is neither generator nor closure\"),"}, {"sha": "34e47de969c1750c26cff908bbd1d61b40f8c389", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -476,7 +476,7 @@ impl<'tcx> Body<'tcx> {\n     /// Returns the return type; it always return first element from `local_decls` array.\n     #[inline]\n     pub fn bound_return_ty(&self) -> ty::EarlyBinder<Ty<'tcx>> {\n-        ty::EarlyBinder(self.local_decls[RETURN_PLACE].ty)\n+        ty::EarlyBinder::new(self.local_decls[RETURN_PLACE].ty)\n     }\n \n     /// Gets the location of the terminator for the given block."}, {"sha": "2b99fcad26758f06025cef48700339dee4cf01f0", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -573,7 +573,7 @@ impl<'tcx> AdtDef<'tcx> {\n     /// Due to normalization being eager, this applies even if\n     /// the associated type is behind a pointer (e.g., issue #31299).\n     pub fn sized_constraint(self, tcx: TyCtxt<'tcx>) -> ty::EarlyBinder<&'tcx [Ty<'tcx>]> {\n-        ty::EarlyBinder(tcx.adt_sized_constraint(self.did()))\n+        ty::EarlyBinder::new(tcx.adt_sized_constraint(self.did()))\n     }\n }\n "}, {"sha": "5fcbc4a9ed49ad3d593da28efb723c2d6cf54570", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -254,5 +254,5 @@ pub fn const_param_default(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBind\n             \"`const_param_default` expected a generic parameter with a constant\"\n         ),\n     };\n-    ty::EarlyBinder(Const::from_anon_const(tcx, default_def_id))\n+    ty::EarlyBinder::new(Const::from_anon_const(tcx, default_def_id))\n }"}, {"sha": "b27ee8cbad0fded2910ff963d6f4789660b471e2", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -343,7 +343,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> impl Iterator<Item = (Predicate<'tcx>, Span)> + DoubleEndedIterator + ExactSizeIterator\n     {\n-        EarlyBinder(self.predicates).subst_iter_copied(tcx, substs)\n+        EarlyBinder::new(self.predicates).subst_iter_copied(tcx, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(self, tcx))]\n@@ -358,7 +358,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n         }\n         instantiated\n             .predicates\n-            .extend(self.predicates.iter().map(|(p, _)| EarlyBinder(*p).subst(tcx, substs)));\n+            .extend(self.predicates.iter().map(|(p, _)| EarlyBinder::new(*p).subst(tcx, substs)));\n         instantiated.spans.extend(self.predicates.iter().map(|(_, sp)| *sp));\n     }\n "}, {"sha": "b3cc27e3f78381713a48338dc2728fef775a3ad3", "filename": "compiler/rustc_middle/src/ty/inhabitedness/inhabited_predicate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -158,7 +158,7 @@ impl<'tcx> InhabitedPredicate<'tcx> {\n     fn subst_opt(self, tcx: TyCtxt<'tcx>, substs: ty::SubstsRef<'tcx>) -> Option<Self> {\n         match self {\n             Self::ConstIsZero(c) => {\n-                let c = ty::EarlyBinder(c).subst(tcx, substs);\n+                let c = ty::EarlyBinder::new(c).subst(tcx, substs);\n                 let pred = match c.kind().try_to_target_usize(tcx) {\n                     Some(0) => Self::True,\n                     Some(1..) => Self::False,\n@@ -167,7 +167,7 @@ impl<'tcx> InhabitedPredicate<'tcx> {\n                 Some(pred)\n             }\n             Self::GenericType(t) => {\n-                Some(ty::EarlyBinder(t).subst(tcx, substs).inhabited_predicate(tcx))\n+                Some(ty::EarlyBinder::new(t).subst(tcx, substs).inhabited_predicate(tcx))\n             }\n             Self::And(&[a, b]) => match a.subst_opt(tcx, substs) {\n                 None => b.subst_opt(tcx, substs).map(|b| a.and(tcx, b)),"}, {"sha": "4b2c7e8ef311037294141a5fd0602584bad2e2e9", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -764,7 +764,7 @@ impl<'tcx> Predicate<'tcx> {\n         let shifted_pred =\n             tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());\n         // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>\n-        let new = EarlyBinder(shifted_pred).subst(tcx, trait_ref.skip_binder().substs);\n+        let new = EarlyBinder::new(shifted_pred).subst(tcx, trait_ref.skip_binder().substs);\n         // 3) ['x] + ['b] -> ['x, 'b]\n         let bound_vars =\n             tcx.mk_bound_variable_kinds_from_iter(trait_bound_vars.iter().chain(pred_bound_vars));"}, {"sha": "945ef6aa251957ef43a35f8b31b9cf8f982093c7", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -568,7 +568,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         let layout = tcx.generator_layout(def_id).unwrap();\n         layout.variant_fields.iter().map(move |variant| {\n             variant.iter().map(move |field| {\n-                ty::EarlyBinder(layout.field_tys[*field].ty).subst(tcx, self.substs)\n+                ty::EarlyBinder::new(layout.field_tys[*field].ty).subst(tcx, self.substs)\n             })\n         })\n     }"}, {"sha": "43450bda19b2032c2f14a5be2c38531b72606be6", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -545,6 +545,10 @@ impl<'tcx, T> !TypeFoldable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n impl<'tcx, T> !TypeVisitable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n \n impl<T> EarlyBinder<T> {\n+    pub fn new(inner: T) -> EarlyBinder<T> {\n+        EarlyBinder(inner)\n+    }\n+\n     pub fn as_ref(&self) -> EarlyBinder<&T> {\n         EarlyBinder(&self.0)\n     }"}, {"sha": "dade50df5d962c98de239822b0512f5a20b8f149", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -709,7 +709,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .as_ref()\n             .map_or_else(|| [].iter(), |l| l.field_tys.iter())\n             .filter(|decl| !decl.ignore_for_traits)\n-            .map(|decl| ty::EarlyBinder(decl.ty))\n+            .map(|decl| ty::EarlyBinder::new(decl.ty))\n     }\n \n     /// Normalizes all opaque types in the given value, replacing them"}, {"sha": "58374f6b3bd7851e19c58ac4eb5d37b99dffe0b7", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -96,13 +96,13 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for Representability {\n \n impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<Ty<'_>> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<DepKind>]) -> Self {\n-        ty::EarlyBinder(Ty::from_cycle_error(tcx, cycle))\n+        ty::EarlyBinder::new(Ty::from_cycle_error(tcx, cycle))\n     }\n }\n \n impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<ty::Binder<'_, ty::FnSig<'_>>> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<DepKind>]) -> Self {\n-        ty::EarlyBinder(ty::Binder::from_cycle_error(tcx, cycle))\n+        ty::EarlyBinder::new(ty::Binder::from_cycle_error(tcx, cycle))\n     }\n }\n "}, {"sha": "c0458126840da0667efab697c8136118a38d2b8e", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                         // If the inner type matches the type bound by `Pointer`\n                         if inner_ty == bound_ty {\n                             // Do a substitution using the parameters from the callsite\n-                            let subst_ty = EarlyBinder(inner_ty).subst(self.tcx, substs_ref);\n+                            let subst_ty = EarlyBinder::new(inner_ty).subst(self.tcx, substs_ref);\n                             if let Some((fn_id, fn_substs)) =\n                                 FunctionItemRefChecker::is_fn_ref(subst_ty)\n                             {"}, {"sha": "e27d48fa8f65aaf7d9b48e8b333ee30fe5912374", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -192,7 +192,7 @@ impl<'tcx> Inliner<'tcx> {\n         let Ok(callee_body) = callsite.callee.try_subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             self.param_env,\n-            ty::EarlyBinder(callee_body.clone()),\n+            ty::EarlyBinder::new(callee_body.clone()),\n         ) else {\n             return Err(\"failed to normalize callee body\");\n         };\n@@ -455,7 +455,7 @@ impl<'tcx> Inliner<'tcx> {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = callsite\n                     .callee\n-                    .subst_mir(self.tcx, ty::EarlyBinder(&place.ty(callee_body, tcx).ty));\n+                    .subst_mir(self.tcx, ty::EarlyBinder::new(&place.ty(callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) && let UnwindAction::Cleanup(unwind) = unwind {\n                     work_list.push(unwind);\n                 }\n@@ -790,7 +790,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = self\n                     .instance\n-                    .subst_mir(tcx, ty::EarlyBinder(&place.ty(self.callee_body, tcx).ty));\n+                    .subst_mir(tcx, ty::EarlyBinder::new(&place.ty(self.callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) {\n                     self.cost += CALL_PENALTY;\n                     if let UnwindAction::Cleanup(_) = unwind {\n@@ -801,7 +801,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 }\n             }\n             TerminatorKind::Call { func: Operand::Constant(ref f), unwind, .. } => {\n-                let fn_ty = self.instance.subst_mir(tcx, ty::EarlyBinder(&f.literal.ty()));\n+                let fn_ty = self.instance.subst_mir(tcx, ty::EarlyBinder::new(&f.literal.ty()));\n                 self.cost += if let ty::FnDef(def_id, _) = *fn_ty.kind() && tcx.is_intrinsic(def_id) {\n                     // Don't give intrinsics the extra penalty for calls\n                     INSTR_COST"}, {"sha": "00842e9d66596a9ed07279e09865ed89ba360dc2", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n             let Ok(substs) = caller.try_subst_mir_and_normalize_erasing_regions(\n                 tcx,\n                 param_env,\n-                ty::EarlyBinder(substs),\n+                ty::EarlyBinder::new(substs),\n             ) else {\n                 trace!(?caller, ?param_env, ?substs, \"cannot normalize, skipping\");\n                 continue;"}, {"sha": "fbe6a274ea19bc82decbdcdb52bfadf49b22f5b6", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -69,7 +69,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             // of this function. Is this intentional?\n             if let Some(ty::Generator(gen_def_id, substs, _)) = ty.map(Ty::kind) {\n                 let body = tcx.optimized_mir(*gen_def_id).generator_drop().unwrap();\n-                let body = EarlyBinder(body.clone()).subst(tcx, substs);\n+                let body = EarlyBinder::new(body.clone()).subst(tcx, substs);\n                 debug!(\"make_shim({:?}) = {:?}\", instance, body);\n                 return body;\n             }"}, {"sha": "8874aa7d3ca9ba3c73c77c6398a1dccb1a5207a9", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -677,7 +677,7 @@ impl<'a, 'tcx> MirNeighborCollector<'a, 'tcx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            ty::EarlyBinder(value),\n+            ty::EarlyBinder::new(value),\n         )\n     }\n }"}, {"sha": "772f15201536c032ada9bc4f2370c74ee348fd73", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -29,12 +29,12 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n         let before_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            ty::EarlyBinder(before_feature_tys),\n+            ty::EarlyBinder::new(before_feature_tys),\n         );\n         let after_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            ty::EarlyBinder(after_feature_tys),\n+            ty::EarlyBinder::new(after_feature_tys),\n         );\n \n         let new_size = tcx"}, {"sha": "55901bfbde9cf254b56b946268a342a46c837cd3", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n         let mut param_env = self.tcx.param_env_reveal_all_normalized(impl_def_id);\n         if !substs.is_empty() {\n-            param_env = EarlyBinder(param_env).subst(self.tcx, substs);\n+            param_env = EarlyBinder::new(param_env).subst(self.tcx, substs);\n         }\n \n         match &mut impl_trait_ref {"}, {"sha": "0f84032d9ef6d5727006f0f36d2a3107c3987683", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -487,7 +487,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n                 tcx,\n                 ObligationCause::dummy_with_span(*span),\n                 param_env,\n-                ty::EarlyBinder(*pred).subst(tcx, impl_trait_ref.substs),\n+                ty::EarlyBinder::new(*pred).subst(tcx, impl_trait_ref.substs),\n             )\n         })\n     });"}, {"sha": "0be21156b6c96c51c8034480338791f6e7f8f425", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -642,7 +642,7 @@ fn receiver_for_self_ty<'tcx>(\n         if param.index == 0 { self_ty.into() } else { tcx.mk_param_from_def(param) }\n     });\n \n-    let result = EarlyBinder(receiver_ty).subst(tcx, substs);\n+    let result = EarlyBinder::new(receiver_ty).subst(tcx, substs);\n     debug!(\n         \"receiver_for_self_ty({:?}, {:?}, {:?}) = {:?}\",\n         receiver_ty, self_ty, method_def_id, result"}, {"sha": "0a1b1b10b00704e5eb28b347461fab4471b66a01", "filename": "compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -307,13 +307,13 @@ pub fn dtorck_constraint_for_ty_inner<'tcx>(\n             // there, but that needs some way to handle cycles.\n             constraints\n                 .dtorck_types\n-                .extend(dtorck_types.iter().map(|t| EarlyBinder(*t).subst(tcx, substs)));\n+                .extend(dtorck_types.iter().map(|t| EarlyBinder::new(*t).subst(tcx, substs)));\n             constraints\n                 .outlives\n-                .extend(outlives.iter().map(|t| EarlyBinder(*t).subst(tcx, substs)));\n+                .extend(outlives.iter().map(|t| EarlyBinder::new(*t).subst(tcx, substs)));\n             constraints\n                 .overflows\n-                .extend(overflows.iter().map(|t| EarlyBinder(*t).subst(tcx, substs)));\n+                .extend(overflows.iter().map(|t| EarlyBinder::new(*t).subst(tcx, substs)));\n         }\n \n         // Objects must be alive in order for their destructor"}, {"sha": "0925b3956de369226c3c22b9e7692cba165b19dc", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -301,7 +301,7 @@ fn associated_type_for_impl_trait_in_trait(\n     trait_assoc_ty.impl_defaultness(tcx.impl_defaultness(fn_def_id));\n \n     // Copy type_of of the opaque.\n-    trait_assoc_ty.type_of(ty::EarlyBinder(tcx.mk_opaque(\n+    trait_assoc_ty.type_of(ty::EarlyBinder::new(tcx.mk_opaque(\n         opaque_ty_def_id.to_def_id(),\n         InternalSubsts::identity_for_item(tcx, opaque_ty_def_id),\n     )));"}, {"sha": "bb723c9997ac110e278c43088add61300b8c5342", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -419,7 +419,7 @@ pub fn thir_abstract_const(\n \n     let root_span = body.exprs[body_id].span;\n \n-    Ok(Some(ty::EarlyBinder(recurse_build(tcx, body, body_id, root_span)?)))\n+    Ok(Some(ty::EarlyBinder::new(recurse_build(tcx, body, body_id, root_span)?)))\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "0e5b23ca423efefda4428a407c7f934c40c59936", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -610,7 +610,7 @@ fn generator_layout<'tcx>(\n ) -> Result<Layout<'tcx>, LayoutError<'tcx>> {\n     use SavedLocalEligibility::*;\n     let tcx = cx.tcx;\n-    let subst_field = |ty: Ty<'tcx>| EarlyBinder(ty).subst(tcx, substs);\n+    let subst_field = |ty: Ty<'tcx>| EarlyBinder::new(ty).subst(tcx, substs);\n \n     let Some(info) = tcx.generator_layout(def_id) else {\n         return Err(LayoutError::Unknown(ty));"}, {"sha": "075fde6ddb654293627ccad63793cabf733e7973", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -210,7 +210,7 @@ fn drop_tys_helper<'tcx>(\n             match subty.kind() {\n                 ty::Adt(adt_id, subst) => {\n                     for subty in tcx.adt_drop_tys(adt_id.did())? {\n-                        vec.push(EarlyBinder(subty).subst(tcx, subst));\n+                        vec.push(EarlyBinder::new(subty).subst(tcx, subst));\n                     }\n                 }\n                 _ => vec.push(subty),"}, {"sha": "4eb1256a1a720a310174f0d942866287aaf55057", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -508,7 +508,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<EarlyBinder<Ty<'\n \n     if self_ty_matches {\n         debug!(\"issue33140_self_ty - MATCHES!\");\n-        Some(EarlyBinder(self_ty))\n+        Some(EarlyBinder::new(self_ty))\n     } else {\n         debug!(\"issue33140_self_ty - non-matching self type\");\n         None"}, {"sha": "8e74e6e16bbe5bf703bf3f15ec6aaca3a1879c7c", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                 let infcx = cx.tcx.infer_ctxt().build();\n                 let substs = infcx.fresh_substs_for_item(DUMMY_SP, item_def_id);\n                 let impl_ty = ty.subst(infcx.tcx, substs);\n-                let param_env = EarlyBinder(param_env).subst(infcx.tcx, substs);\n+                let param_env = EarlyBinder::new(param_env).subst(infcx.tcx, substs);\n \n                 let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n                 let impl_trait_ref = trait_ref.subst(infcx.tcx, impl_substs);"}, {"sha": "a418a910ba8ea2f614eb1ea0d2603583b06fffb5", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -1219,7 +1219,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n                 return false;\n             }\n \n-            let predicate = EarlyBinder(predicate).subst(cx.tcx, &substs_with_referent_ty);\n+            let predicate = EarlyBinder::new(predicate).subst(cx.tcx, &substs_with_referent_ty);\n             let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n             let infcx = cx.tcx.infer_ctxt().build();\n             infcx.predicate_must_hold_modulo_regions(&obligation)"}, {"sha": "af2aac6ac0d0ace9cff23dde29baf40543c50053", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -243,7 +243,7 @@ fn get_ufcs_type_name<'tcx>(cx: &LateContext<'tcx>, method_def_id: DefId, substs\n                 | ty::Ref(..)\n                 | ty::Slice(_)\n                 | ty::Tuple(_) => {\n-                    format!(\"<{}>\", EarlyBinder(ty).subst(cx.tcx, substs))\n+                    format!(\"<{}>\", EarlyBinder::new(ty).subst(cx.tcx, substs))\n                 },\n                 _ => ty.to_string(),\n             }"}, {"sha": "d4cc14bb856327946ebdcf7281b7b46c9cb8392d", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -241,7 +241,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {\n-        item_ty == EarlyBinder(search_ty).subst(cx.tcx, cx.typeck_results().node_substs(call_id))\n+        item_ty == EarlyBinder::new(search_ty).subst(cx.tcx, cx.typeck_results().node_substs(call_id))\n     } else {\n         false\n     }"}, {"sha": "fdacfa49e92d54b08a23c37757ed33618732c7ed", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -428,7 +428,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                                      }));\n \n                         if trait_predicates.any(|predicate| {\n-                            let predicate = EarlyBinder(predicate).subst(cx.tcx, new_subst);\n+                            let predicate = EarlyBinder::new(predicate).subst(cx.tcx, new_subst);\n                             let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n                             !cx.tcx.infer_ctxt().build().predicate_must_hold_modulo_regions(&obligation)\n                         }) {\n@@ -438,7 +438,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         let output_ty = fn_sig.output();\n                         if output_ty.contains(*param_ty) {\n                             if let Ok(new_ty)  = cx.tcx.try_subst_and_normalize_erasing_regions(\n-                                new_subst, cx.param_env, EarlyBinder(output_ty)) {\n+                                new_subst, cx.param_env, EarlyBinder::new(output_ty)) {\n                                 expr = parent_expr;\n                                 ty = new_ty;\n                                 continue;"}, {"sha": "843538e1eb2db2c5638ab3c7d0d9df8b87910d90", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03534ac8b70de1134ce7e91b172cd629048a6c8b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=03534ac8b70de1134ce7e91b172cd629048a6c8b", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let substs = if self.substs.is_empty() {\n                     substs\n                 } else {\n-                    EarlyBinder(substs).subst(self.lcx.tcx, self.substs)\n+                    EarlyBinder::new(substs).subst(self.lcx.tcx, self.substs)\n                 };\n \n                 let result = self"}]}