{"sha": "f2bef55389e3e053cab50d91a674739d8a1ca036", "node_id": "C_kwDOAAsO6NoAKGYyYmVmNTUzODllM2UwNTNjYWI1MGQ5MWE2NzQ3MzlkOGExY2EwMzY", "commit": {"author": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2022-07-07T09:59:55Z"}, "committer": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2022-07-07T10:43:16Z"}, "message": "trait_bounds: rework two loops into one\n\nthe two loops did practically the same, only the type were different (&&\nvs &), so I used `copied` to convert `&&` and chained them together.\nInstead of parsing the trait info manually, I use the already provided\nmethod `get_trait_info_from_bound`.\nAlso, instead of using manual string writing, I used `join` by\n`itertools`.", "tree": {"sha": "6a00b2bfaff05ec677de3819c04677d45fe84a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a00b2bfaff05ec677de3819c04677d45fe84a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2bef55389e3e053cab50d91a674739d8a1ca036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bef55389e3e053cab50d91a674739d8a1ca036", "html_url": "https://github.com/rust-lang/rust/commit/f2bef55389e3e053cab50d91a674739d8a1ca036", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2bef55389e3e053cab50d91a674739d8a1ca036/comments", "author": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb34eb261aa8e54b9045a582d2553bb7d6fd463", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb34eb261aa8e54b9045a582d2553bb7d6fd463", "html_url": "https://github.com/rust-lang/rust/commit/afb34eb261aa8e54b9045a582d2553bb7d6fd463"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "76b739c48f1eccd6d50fc89be64c4276a05c8d08", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f2bef55389e3e053cab50d91a674739d8a1ca036/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2bef55389e3e053cab50d91a674739d8a1ca036/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=f2bef55389e3e053cab50d91a674739d8a1ca036", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::{SpanlessEq, SpanlessHash};\n use core::hash::{Hash, Hasher};\n use if_chain::if_chain;\n+use itertools::Itertools;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n@@ -14,7 +15,6 @@ use rustc_hir::{\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n-use std::fmt::Write as _;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -178,30 +178,18 @@ impl TraitBounds {\n                 );\n \n                 then {\n-                    let mut hint_string = format!(\n-                        \"consider combining the bounds: `{}:\",\n-                        snippet(cx, p.bounded_ty.span, \"_\")\n+                    let trait_bounds = v\n+                        .iter()\n+                        .copied()\n+                        .chain(p.bounds.iter())\n+                        .filter_map(get_trait_info_from_bound)\n+                        .map(|(_, _, span)| snippet_with_applicability(cx, span, \"..\", &mut applicability))\n+                        .join(\" + \");\n+                    let hint_string = format!(\n+                        \"consider combining the bounds: `{}: {}`\",\n+                        snippet(cx, p.bounded_ty.span, \"_\"),\n+                        trait_bounds,\n                     );\n-                    for b in v.iter() {\n-                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n-                            let path = &poly_trait_ref.trait_ref.path;\n-                            let _ = write!(hint_string,\n-                                \" {} +\",\n-                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n-                            );\n-                        }\n-                    }\n-                    for b in p.bounds.iter() {\n-                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n-                            let path = &poly_trait_ref.trait_ref.path;\n-                            let _ = write!(hint_string,\n-                                \" {} +\",\n-                                snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n-                            );\n-                        }\n-                    }\n-                    hint_string.truncate(hint_string.len() - 2);\n-                    hint_string.push('`');\n                     span_lint_and_help(\n                         cx,\n                         TYPE_REPETITION_IN_BOUNDS,"}]}