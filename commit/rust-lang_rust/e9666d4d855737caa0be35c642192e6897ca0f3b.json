{"sha": "e9666d4d855737caa0be35c642192e6897ca0f3b", "node_id": "C_kwDOAAsO6NoAKGU5NjY2ZDRkODU1NzM3Y2FhMGJlMzVjNjQyMTkyZTY4OTdjYTBmM2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-10T23:57:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-10T23:57:27Z"}, "message": "Rollup merge of #112493 - fmease:iat-select-complete-bound-var-erasure, r=compiler-errors\n\niat selection: normalize self ty & completely erase bound vars\n\nErase bound vars (most notably late-bound regions) irrespective of their binding level instead of just at the innermost one.\nFixes #111404.", "tree": {"sha": "ecc58c5d83f5414dde42c02180109cbad8983b5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc58c5d83f5414dde42c02180109cbad8983b5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9666d4d855737caa0be35c642192e6897ca0f3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhQ3nCRBK7hj4Ov3rIwAABvcIACIRQfz4w+yis9t03HvGIW41\nOEmxtxW63I/X42WXDlU1nyE+P7XRE7TOSP54PnEAKLzIM3BLyK2GXZVBxifJln16\n6Arxgx08V6TfV9Nhm6RlGujU31sutLSGzOHFWarEc9GbhyMwbKn8q762iF3As/tJ\nYTjVktCBboEurIlWL++SK8ogJwNTLLt2BNUsZOkVZPXyebB1JlDXZMwPoxSX7+Ki\n5V/kUnLqwBqKv++4KrT3y2P0Nrf2yq89gGjckm8nWjmDzFoABTE+w4aCPvHtHtDr\npAXqnMAYTGmqeAAtykgSKpkkpcUu3bMyq0tyoR3/H/FzIRYnWs+BFyJoHo+I0Dk=\n=WoKI\n-----END PGP SIGNATURE-----\n", "payload": "tree ecc58c5d83f5414dde42c02180109cbad8983b5b\nparent fcf621e3731b76762acabbebcbf9e422d30e7078\nparent a995255cf5dfd053584198c10e86d7763e5dbc87\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686441447 +0200\ncommitter GitHub <noreply@github.com> 1686441447 +0200\n\nRollup merge of #112493 - fmease:iat-select-complete-bound-var-erasure, r=compiler-errors\n\niat selection: normalize self ty & completely erase bound vars\n\nErase bound vars (most notably late-bound regions) irrespective of their binding level instead of just at the innermost one.\nFixes #111404.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9666d4d855737caa0be35c642192e6897ca0f3b", "html_url": "https://github.com/rust-lang/rust/commit/e9666d4d855737caa0be35c642192e6897ca0f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9666d4d855737caa0be35c642192e6897ca0f3b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf621e3731b76762acabbebcbf9e422d30e7078", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf621e3731b76762acabbebcbf9e422d30e7078", "html_url": "https://github.com/rust-lang/rust/commit/fcf621e3731b76762acabbebcbf9e422d30e7078"}, {"sha": "a995255cf5dfd053584198c10e86d7763e5dbc87", "url": "https://api.github.com/repos/rust-lang/rust/commits/a995255cf5dfd053584198c10e86d7763e5dbc87", "html_url": "https://github.com/rust-lang/rust/commit/a995255cf5dfd053584198c10e86d7763e5dbc87"}], "stats": {"total": 111, "additions": 92, "deletions": 19}, "files": [{"sha": "1037a49acdf32efd6d72dfc1ef7868828fb32095", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 57, "deletions": 19, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e9666d4d855737caa0be35c642192e6897ca0f3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9666d4d855737caa0be35c642192e6897ca0f3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=e9666d4d855737caa0be35c642192e6897ca0f3b", "patch": "@@ -26,10 +26,9 @@ use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n-use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::middle::stability::AllowUnstable;\n-use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, IsSuggestable, Ty, TyCtxt, TypeVisitableExt};\n@@ -43,7 +42,10 @@ use rustc_trait_selection::traits::error_reporting::{\n     report_object_safety_error, suggestions::NextTypeParamName,\n };\n use rustc_trait_selection::traits::wf::object_region_bounds;\n-use rustc_trait_selection::traits::{self, astconv_object_safety_violations, ObligationCtxt};\n+use rustc_trait_selection::traits::{\n+    self, astconv_object_safety_violations, NormalizeExt, ObligationCtxt,\n+};\n+use rustc_type_ir::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n \n use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n@@ -2442,6 +2444,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             return Ok(None);\n         }\n \n+        if !tcx.features().inherent_associated_types {\n+            tcx.sess\n+                .delay_span_bug(span, \"found inherent assoc type without the feature being gated\");\n+        }\n+\n         //\n         // Select applicable inherent associated type candidates modulo regions.\n         //\n@@ -2465,30 +2472,61 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut fulfillment_errors = Vec::new();\n         let mut applicable_candidates: Vec<_> = infcx.probe(|_| {\n-            let universe = infcx.create_next_universe();\n-\n             // Regions are not considered during selection.\n-            // FIXME(non_lifetime_binders): Here we are \"truncating\" or \"flattening\" the universes\n-            // of type and const binders. Is that correct in the selection phase? See also #109505.\n-            let self_ty = tcx.replace_escaping_bound_vars_uncached(\n-                self_ty,\n-                FnMutDelegate {\n-                    regions: &mut |_| tcx.lifetimes.re_erased,\n-                    types: &mut |bv| {\n-                        tcx.mk_placeholder(ty::PlaceholderType { universe, bound: bv })\n-                    },\n-                    consts: &mut |bv, ty| {\n-                        tcx.mk_const(ty::PlaceholderConst { universe, bound: bv }, ty)\n-                    },\n-                },\n-            );\n+            let self_ty = self_ty\n+                .fold_with(&mut BoundVarEraser { tcx, universe: infcx.create_next_universe() });\n+\n+            struct BoundVarEraser<'tcx> {\n+                tcx: TyCtxt<'tcx>,\n+                universe: ty::UniverseIndex,\n+            }\n+\n+            // FIXME(non_lifetime_binders): Don't assign the same universe to each placeholder.\n+            impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarEraser<'tcx> {\n+                fn interner(&self) -> TyCtxt<'tcx> {\n+                    self.tcx\n+                }\n+\n+                fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+                    if r.is_late_bound() { self.tcx.lifetimes.re_erased } else { r }\n+                }\n+\n+                fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+                    match *ty.kind() {\n+                        ty::Bound(_, bv) => self.tcx.mk_placeholder(ty::PlaceholderType {\n+                            universe: self.universe,\n+                            bound: bv,\n+                        }),\n+                        _ => ty.super_fold_with(self),\n+                    }\n+                }\n+\n+                fn fold_const(\n+                    &mut self,\n+                    ct: ty::Const<'tcx>,\n+                ) -> <TyCtxt<'tcx> as rustc_type_ir::Interner>::Const {\n+                    assert!(!ct.ty().has_escaping_bound_vars());\n+\n+                    match ct.kind() {\n+                        ty::ConstKind::Bound(_, bv) => self.tcx.mk_const(\n+                            ty::PlaceholderConst { universe: self.universe, bound: bv },\n+                            ct.ty(),\n+                        ),\n+                        _ => ct.super_fold_with(self),\n+                    }\n+                }\n+            }\n+\n+            let InferOk { value: self_ty, obligations } =\n+                infcx.at(&cause, param_env).normalize(self_ty);\n \n             candidates\n                 .iter()\n                 .copied()\n                 .filter(|&(impl_, _)| {\n                     infcx.probe(|_| {\n                         let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n+                        ocx.register_obligations(obligations.clone());\n \n                         let impl_substs = infcx.fresh_substs_for_item(span, impl_);\n                         let impl_ty = tcx.type_of(impl_).subst(tcx, impl_substs);"}, {"sha": "1180577bd5421b8b4f5ab480471c25e24ee865c6", "filename": "tests/ui/associated-inherent-types/issue-111404-0.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9666d4d855737caa0be35c642192e6897ca0f3b/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9666d4d855737caa0be35c642192e6897ca0f3b/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-0.rs?ref=e9666d4d855737caa0be35c642192e6897ca0f3b", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<T>(T);\n+\n+impl<'a> Foo<fn(&'a ())> {\n+    type Assoc = &'a ();\n+}\n+\n+fn bar(_: for<'a> fn(Foo<fn(Foo<fn(&'a ())>::Assoc)>::Assoc)) {}\n+\n+fn main() {}"}, {"sha": "f4ad5d7ff6c03703884e36ade4d1ae7853d637a2", "filename": "tests/ui/associated-inherent-types/issue-111404-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9666d4d855737caa0be35c642192e6897ca0f3b/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9666d4d855737caa0be35c642192e6897ca0f3b/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.rs?ref=e9666d4d855737caa0be35c642192e6897ca0f3b", "patch": "@@ -0,0 +1,13 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<T>(T);\n+\n+impl<'a> Foo<fn(&'a ())> {\n+    type Assoc = &'a ();\n+}\n+\n+fn bar(_: fn(Foo<for<'b> fn(Foo<fn(&'b ())>::Assoc)>::Assoc)) {}\n+//~^ ERROR higher-ranked subtype error\n+\n+fn main() {}"}, {"sha": "c55f1432389c786cb0b6c2a07ebcf43b6f38477f", "filename": "tests/ui/associated-inherent-types/issue-111404-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9666d4d855737caa0be35c642192e6897ca0f3b/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9666d4d855737caa0be35c642192e6897ca0f3b/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-111404-1.stderr?ref=e9666d4d855737caa0be35c642192e6897ca0f3b", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-111404-1.rs:10:1\n+   |\n+LL | fn bar(_: fn(Foo<for<'b> fn(Foo<fn(&'b ())>::Assoc)>::Assoc)) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}