{"sha": "194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "node_id": "C_kwDOAAsO6NoAKDE5NGEwYmI1ZDZmYmRkMzZlMGRmNThiNDY5ODMxMWJiOGZlZDZiY2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-10T21:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-10T21:50:46Z"}, "message": "Auto merge of #109638 - NotStirred:suggest/non-derive, r=davidtwco\n\nAdd suggestion to remove `derive()` if invoked macro is non-derive\n\nAdds to the existing `expected derive macro, found {}` error message:\n```\nhelp: remove the surrounding \"derive()\":\n  --> $DIR/macro-path-prelude-fail-4.rs:1:3\n   |\nLL | #[derive(inline)]\n   |   ^^^^^^^      ^\n```\n\nThis suggestion will either fix the issue, in the case that the macro was valid, or provide a better error message if not\n\nNot ready for merge yet, as the highlighted span is only valid for trivial formatting. Is there a nice way to get the parent span of the macro path within `smart_resolve_macro_path`?\n\nCloses #109589", "tree": {"sha": "6c3419ffdd07c011177621862badf4991e6b8ffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c3419ffdd07c011177621862badf4991e6b8ffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "html_url": "https://github.com/rust-lang/rust/commit/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fb1b922b047981fc0cfc62aa1418b4361ae72e", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fb1b922b047981fc0cfc62aa1418b4361ae72e", "html_url": "https://github.com/rust-lang/rust/commit/88fb1b922b047981fc0cfc62aa1418b4361ae72e"}, {"sha": "668a62984ac51a09987c5b1a7c1589814f7a95d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/668a62984ac51a09987c5b1a7c1589814f7a95d4", "html_url": "https://github.com/rust-lang/rust/commit/668a62984ac51a09987c5b1a7c1589814f7a95d4"}], "stats": {"total": 139, "additions": 133, "deletions": 6}, "files": [{"sha": "2628f247c541166d29859ec2b07ce8e86fe534a0", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "patch": "@@ -213,3 +213,13 @@ resolve_tool_module_imported =\n \n resolve_module_only =\n     visibility must resolve to a module\n+\n+resolve_macro_expected_found =\n+    expected {$expected}, found {$found} `{$macro_path}`\n+\n+resolve_remove_surrounding_derive =\n+    remove from the surrounding `derive()`\n+\n+resolve_add_as_non_derive =\n+    add as non-Derive macro\n+    `#[{$macro_path}]`"}, {"sha": "afa796cb6453bd818e4ae7342fda279c25c6e247", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "patch": "@@ -481,3 +481,30 @@ pub(crate) struct ToolModuleImported {\n #[derive(Diagnostic)]\n #[diag(resolve_module_only)]\n pub(crate) struct ModuleOnly(#[primary_span] pub(crate) Span);\n+\n+#[derive(Diagnostic, Default)]\n+#[diag(resolve_macro_expected_found)]\n+pub(crate) struct MacroExpectedFound<'a> {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    pub(crate) found: &'a str,\n+    pub(crate) expected: &'a str,\n+    pub(crate) macro_path: &'a str,\n+    #[subdiagnostic]\n+    pub(crate) remove_surrounding_derive: Option<RemoveSurroundingDerive>,\n+    #[subdiagnostic]\n+    pub(crate) add_as_non_derive: Option<AddAsNonDerive<'a>>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[help(resolve_remove_surrounding_derive)]\n+pub(crate) struct RemoveSurroundingDerive {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[help(resolve_add_as_non_derive)]\n+pub(crate) struct AddAsNonDerive<'a> {\n+    pub(crate) macro_path: &'a str,\n+}"}, {"sha": "22b014c0651c2168afe16128b98b1c2496f6b67d", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "patch": "@@ -1,6 +1,7 @@\n //! A bunch of methods and structures more or less related to resolving macros and\n //! interface provided by `Resolver` to macro expander.\n \n+use crate::errors::{AddAsNonDerive, MacroExpectedFound, RemoveSurroundingDerive};\n use crate::Namespace::*;\n use crate::{BuiltinMacroState, Determinacy};\n use crate::{DeriveData, Finalize, ParentScope, ResolutionError, Resolver, ScopeSet};\n@@ -543,12 +544,29 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         };\n         if let Some((article, expected)) = unexpected_res {\n             let path_str = pprust::path_to_string(path);\n-            let msg = format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str);\n-            self.tcx\n-                .sess\n-                .struct_span_err(path.span, &msg)\n-                .span_label(path.span, format!(\"not {} {}\", article, expected))\n-                .emit();\n+\n+            let mut err = MacroExpectedFound {\n+                span: path.span,\n+                expected,\n+                found: res.descr(),\n+                macro_path: &path_str,\n+                ..Default::default() // Subdiagnostics default to None\n+            };\n+\n+            // Suggest moving the macro out of the derive() if the macro isn't Derive\n+            if !path.span.from_expansion()\n+                && kind == MacroKind::Derive\n+                && ext.macro_kind() != MacroKind::Derive\n+            {\n+                err.remove_surrounding_derive = Some(RemoveSurroundingDerive { span: path.span });\n+                err.add_as_non_derive = Some(AddAsNonDerive { macro_path: &path_str });\n+            }\n+\n+            let mut err = self.tcx.sess.create_err(err);\n+            err.span_label(path.span, format!(\"not {} {}\", article, expected));\n+\n+            err.emit();\n+\n             return Ok((self.dummy_ext(kind), Res::Err));\n         }\n "}, {"sha": "81c6722b56a826abece4e3690aa9e636a909cbfc", "filename": "tests/ui/macros/macro-path-prelude-fail-4.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-4.stderr?ref=194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "patch": "@@ -3,6 +3,14 @@ error: expected derive macro, found built-in attribute `inline`\n    |\n LL | #[derive(inline)]\n    |          ^^^^^^ not a derive macro\n+   |\n+help: remove from the surrounding `derive()`\n+  --> $DIR/macro-path-prelude-fail-4.rs:1:10\n+   |\n+LL | #[derive(inline)]\n+   |          ^^^^^^\n+   = help: add as non-Derive macro\n+           `#[inline]`\n \n error: aborting due to previous error\n "}, {"sha": "b82b6bc7878599b294a5fc8e8c694b14f0d369cd", "filename": "tests/ui/macros/macro-path-prelude-fail-5.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-5.rs?ref=194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "patch": "@@ -0,0 +1,10 @@\n+#[derive(Clone, Debug)] // OK\n+struct S;\n+\n+#[derive(Debug, inline)] //~ ERROR expected derive macro, found built-in attribute `inline`\n+struct T;\n+\n+#[derive(inline, Debug)] //~ ERROR expected derive macro, found built-in attribute `inline`\n+struct U;\n+\n+fn main() {}"}, {"sha": "105c59db67425f276f920a1d800ac3fdf13a8c48", "filename": "tests/ui/macros/macro-path-prelude-fail-5.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-path-prelude-fail-5.stderr?ref=194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "patch": "@@ -0,0 +1,30 @@\n+error: expected derive macro, found built-in attribute `inline`\n+  --> $DIR/macro-path-prelude-fail-5.rs:4:17\n+   |\n+LL | #[derive(Debug, inline)]\n+   |                 ^^^^^^ not a derive macro\n+   |\n+help: remove from the surrounding `derive()`\n+  --> $DIR/macro-path-prelude-fail-5.rs:4:17\n+   |\n+LL | #[derive(Debug, inline)]\n+   |                 ^^^^^^\n+   = help: add as non-Derive macro\n+           `#[inline]`\n+\n+error: expected derive macro, found built-in attribute `inline`\n+  --> $DIR/macro-path-prelude-fail-5.rs:7:10\n+   |\n+LL | #[derive(inline, Debug)]\n+   |          ^^^^^^ not a derive macro\n+   |\n+help: remove from the surrounding `derive()`\n+  --> $DIR/macro-path-prelude-fail-5.rs:7:10\n+   |\n+LL | #[derive(inline, Debug)]\n+   |          ^^^^^^\n+   = help: add as non-Derive macro\n+           `#[inline]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b9effe7cf21f35f37356ae92f0eaa09c7a02df2c", "filename": "tests/ui/proc-macro/macro-namespace-reserved-2.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "patch": "@@ -57,6 +57,14 @@ error: expected derive macro, found attribute macro `my_macro_attr`\n    |\n LL | #[derive(my_macro_attr)]\n    |          ^^^^^^^^^^^^^ not a derive macro\n+   |\n+help: remove from the surrounding `derive()`\n+  --> $DIR/macro-namespace-reserved-2.rs:53:10\n+   |\n+LL | #[derive(my_macro_attr)]\n+   |          ^^^^^^^^^^^^^\n+   = help: add as non-Derive macro\n+           `#[my_macro_attr]`\n \n error: can't use a procedural macro from the same crate that defines it\n   --> $DIR/macro-namespace-reserved-2.rs:56:10\n@@ -87,6 +95,14 @@ error: expected derive macro, found macro `crate::my_macro`\n    |\n LL | #[derive(crate::my_macro)]\n    |          ^^^^^^^^^^^^^^^ not a derive macro\n+   |\n+help: remove from the surrounding `derive()`\n+  --> $DIR/macro-namespace-reserved-2.rs:50:10\n+   |\n+LL | #[derive(crate::my_macro)]\n+   |          ^^^^^^^^^^^^^^^\n+   = help: add as non-Derive macro\n+           `#[crate::my_macro]`\n \n error: cannot find macro `my_macro_attr` in this scope\n   --> $DIR/macro-namespace-reserved-2.rs:28:5"}, {"sha": "06696b548d48403de563641bd2207cad4092941f", "filename": "tests/ui/tool-attributes/tool-attributes-misplaced-2.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/194a0bb5d6fbdd36e0df58b4698311bb8fed6bca/tests%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-2.stderr?ref=194a0bb5d6fbdd36e0df58b4698311bb8fed6bca", "patch": "@@ -3,6 +3,14 @@ error: expected derive macro, found tool attribute `rustfmt::skip`\n    |\n LL | #[derive(rustfmt::skip)]\n    |          ^^^^^^^^^^^^^ not a derive macro\n+   |\n+help: remove from the surrounding `derive()`\n+  --> $DIR/tool-attributes-misplaced-2.rs:1:10\n+   |\n+LL | #[derive(rustfmt::skip)]\n+   |          ^^^^^^^^^^^^^\n+   = help: add as non-Derive macro\n+           `#[rustfmt::skip]`\n \n error: expected macro, found tool attribute `rustfmt::skip`\n   --> $DIR/tool-attributes-misplaced-2.rs:5:5"}]}