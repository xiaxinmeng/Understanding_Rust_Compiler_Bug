{"sha": "a51fb2ba827f24ec4d676a9575a0a5e46afd302a", "node_id": "C_kwDOAAsO6NoAKGE1MWZiMmJhODI3ZjI0ZWM0ZDY3NmE5NTc1YTBhNWU0NmFmZDMwMmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T03:56:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-11T03:56:37Z"}, "message": "Auto merge of #99130 - jyn514:std-cache-invalidation, r=Mark-Simulacrum\n\nFix `x build library/std compiler/rustc`\n\nPreviously, this was broken because of improper caching:\n1. `StepDescription::maybe_run` builds `Compile::Std`, which only built `std` and not `proc_macro`\n1. `Std` calls `builder.ensure(StdLink)`\n1. `Rustc` calls `ensure(Std)`, which builds all crates, including `proc_macro`\n1. `Rustc` calls `ensure(StdLink)`. `ensure` would see that it had already been run and do nothing.  <-- bug is here\n1. Cargo gives an error that `proc_macro` doesn't exist.\n\nThis fixes the caching by adding `crates` to `StdLink`, so it will get rerun if the crates that are built change.\n\nFixes https://github.com/rust-lang/rust/issues/99129.", "tree": {"sha": "7e8dba3de12ba968eeee1303a948b9a6d56f1b94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e8dba3de12ba968eeee1303a948b9a6d56f1b94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a51fb2ba827f24ec4d676a9575a0a5e46afd302a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a51fb2ba827f24ec4d676a9575a0a5e46afd302a", "html_url": "https://github.com/rust-lang/rust/commit/a51fb2ba827f24ec4d676a9575a0a5e46afd302a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a51fb2ba827f24ec4d676a9575a0a5e46afd302a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adaddb5bab936250535665fe1e7c6982d03352cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/adaddb5bab936250535665fe1e7c6982d03352cb", "html_url": "https://github.com/rust-lang/rust/commit/adaddb5bab936250535665fe1e7c6982d03352cb"}, {"sha": "7d4bd54f751db36a32a7d4594f075bf1a0b92bbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4bd54f751db36a32a7d4594f075bf1a0b92bbf", "html_url": "https://github.com/rust-lang/rust/commit/7d4bd54f751db36a32a7d4594f075bf1a0b92bbf"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "c099fedc3a72ce3f18b2ba0e58c286d233415fa8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a51fb2ba827f24ec4d676a9575a0a5e46afd302a/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a51fb2ba827f24ec4d676a9575a0a5e46afd302a/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=a51fb2ba827f24ec4d676a9575a0a5e46afd302a", "patch": "@@ -104,7 +104,7 @@ impl Step for Std {\n             || builder.config.keep_stage_std.contains(&compiler.stage)\n         {\n             builder.info(\"Warning: Using a potentially old libstd. This may not behave well.\");\n-            builder.ensure(StdLink { compiler, target_compiler: compiler, target });\n+            builder.ensure(StdLink::from_std(self, compiler));\n             return;\n         }\n \n@@ -122,11 +122,7 @@ impl Step for Std {\n             copy_third_party_objects(builder, &compiler, target);\n             copy_self_contained_objects(builder, &compiler, target);\n \n-            builder.ensure(StdLink {\n-                compiler: compiler_to_use,\n-                target_compiler: compiler,\n-                target,\n-            });\n+            builder.ensure(StdLink::from_std(self, compiler_to_use));\n             return;\n         }\n \n@@ -149,11 +145,10 @@ impl Step for Std {\n             false,\n         );\n \n-        builder.ensure(StdLink {\n-            compiler: builder.compiler(compiler.stage, builder.config.build),\n-            target_compiler: compiler,\n-            target,\n-        });\n+        builder.ensure(StdLink::from_std(\n+            self,\n+            builder.compiler(compiler.stage, builder.config.build),\n+        ));\n     }\n }\n \n@@ -394,6 +389,19 @@ struct StdLink {\n     pub compiler: Compiler,\n     pub target_compiler: Compiler,\n     pub target: TargetSelection,\n+    /// Not actually used; only present to make sure the cache invalidation is correct.\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl StdLink {\n+    fn from_std(std: Std, host_compiler: Compiler) -> Self {\n+        Self {\n+            compiler: host_compiler,\n+            target_compiler: std.compiler,\n+            target: std.target,\n+            crates: std.crates,\n+        }\n+    }\n }\n \n impl Step for StdLink {\n@@ -614,7 +622,7 @@ impl Step for Rustc {\n         if builder.config.keep_stage.contains(&compiler.stage) {\n             builder.info(\"Warning: Using a potentially old librustc. This may not behave well.\");\n             builder.info(\"Warning: Use `--keep-stage-std` if you want to rebuild the compiler when it changes\");\n-            builder.ensure(RustcLink { compiler, target_compiler: compiler, target });\n+            builder.ensure(RustcLink::from_rustc(self, compiler));\n             return;\n         }\n \n@@ -623,11 +631,7 @@ impl Step for Rustc {\n             builder.ensure(Rustc::new(compiler_to_use, target));\n             builder\n                 .info(&format!(\"Uplifting stage1 rustc ({} -> {})\", builder.config.build, target));\n-            builder.ensure(RustcLink {\n-                compiler: compiler_to_use,\n-                target_compiler: compiler,\n-                target,\n-            });\n+            builder.ensure(RustcLink::from_rustc(self, compiler_to_use));\n             return;\n         }\n \n@@ -688,11 +692,10 @@ impl Step for Rustc {\n             false,\n         );\n \n-        builder.ensure(RustcLink {\n-            compiler: builder.compiler(compiler.stage, builder.config.build),\n-            target_compiler: compiler,\n-            target,\n-        });\n+        builder.ensure(RustcLink::from_rustc(\n+            self,\n+            builder.compiler(compiler.stage, builder.config.build),\n+        ));\n     }\n }\n \n@@ -807,6 +810,19 @@ struct RustcLink {\n     pub compiler: Compiler,\n     pub target_compiler: Compiler,\n     pub target: TargetSelection,\n+    /// Not actually used; only present to make sure the cache invalidation is correct.\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl RustcLink {\n+    fn from_rustc(rustc: Rustc, host_compiler: Compiler) -> Self {\n+        Self {\n+            compiler: host_compiler,\n+            target_compiler: rustc.compiler,\n+            target: rustc.target,\n+            crates: rustc.crates,\n+        }\n+    }\n }\n \n impl Step for RustcLink {"}]}