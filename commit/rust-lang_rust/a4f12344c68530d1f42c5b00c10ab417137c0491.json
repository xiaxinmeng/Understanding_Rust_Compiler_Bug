{"sha": "a4f12344c68530d1f42c5b00c10ab417137c0491", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZjEyMzQ0YzY4NTMwZDFmNDJjNWIwMGMxMGFiNDE3MTM3YzA0OTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T15:12:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-27T15:12:08Z"}, "message": "add comments explaining our uses of get_ref/get_mut for MaybeUninit", "tree": {"sha": "e524ce93de95033d5cdac8908d6fad6eb4e09968", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e524ce93de95033d5cdac8908d6fad6eb4e09968"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4f12344c68530d1f42c5b00c10ab417137c0491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f12344c68530d1f42c5b00c10ab417137c0491", "html_url": "https://github.com/rust-lang/rust/commit/a4f12344c68530d1f42c5b00c10ab417137c0491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4f12344c68530d1f42c5b00c10ab417137c0491/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f2f37983d14c53c3328540d6cf44499c1699521", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2f37983d14c53c3328540d6cf44499c1699521", "html_url": "https://github.com/rust-lang/rust/commit/2f2f37983d14c53c3328540d6cf44499c1699521"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "0c1ac90dfd2d7315d281ed276fa758ca3587a929", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4f12344c68530d1f42c5b00c10ab417137c0491/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4f12344c68530d1f42c5b00c10ab417137c0491/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=a4f12344c68530d1f42c5b00c10ab417137c0491", "patch": "@@ -22,6 +22,9 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n+        // FIXME: Technically, this is calling `get_mut` on an uninitialized\n+        // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n+        // we decided whether that is valid or not.\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n                                                     false, buf.get_mut(), parts.get_mut());"}, {"sha": "626db7806dfe4e97c6fe971af970caddac46c698", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4f12344c68530d1f42c5b00c10ab417137c0491/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4f12344c68530d1f42c5b00c10ab417137c0491/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=a4f12344c68530d1f42c5b00c10ab417137c0491", "patch": "@@ -1106,6 +1106,9 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n+    // FIXME: We currently rely on the above being incorrect, i.e., we have references\n+    // to uninitialized data (e.g. in `libstd/sys/windows/mutex.rs`).  We should make\n+    // a final decision about the rules before stabilization.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n@@ -1118,6 +1121,9 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n+    // FIXME: We currently rely on the above being incorrect, i.e., we have references\n+    // to uninitialized data (e.g. in `libcore/fmt/float.rs`).  We should make\n+    // a final decision about the rules before stabilization.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {"}, {"sha": "0c228f5097ee33a3fa3a99f2d2216ae70f538c53", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4f12344c68530d1f42c5b00c10ab417137c0491/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4f12344c68530d1f42c5b00c10ab417137c0491/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=a4f12344c68530d1f42c5b00c10ab417137c0491", "patch": "@@ -168,6 +168,9 @@ impl ReentrantMutex {\n     }\n \n     pub unsafe fn init(&mut self) {\n+        // FIXME: Technically, this is calling `get_ref` on an uninitialized\n+        // `MaybeUninit`.  Revisit this once we decided whether that is valid\n+        // or not.\n         c::InitializeCriticalSection(self.inner.get_ref().get());\n     }\n "}]}