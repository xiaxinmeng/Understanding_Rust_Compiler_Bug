{"sha": "5201bf17e6a051dd1411513346d8efc4afcb3c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDFiZjE3ZTZhMDUxZGQxNDExNTEzMzQ2ZDhlZmM0YWZjYjNjMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-15T06:07:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-15T06:07:22Z"}, "message": "auto merge of #18031 : huonw/rust/adjust-vec-sort-test, r=alexcrichton\n\nPreviously it had some uninituitive conditionals due to the interaction\r\nwith the Rand construction and Clone reinitialisation to create\r\nsequential identifying numbers. This replaces all that with just\r\nconstructing the DropCounters with the appropriate identifiers.", "tree": {"sha": "b30a220d04b9d1edcf87fb3619860199a78ad3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b30a220d04b9d1edcf87fb3619860199a78ad3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5201bf17e6a051dd1411513346d8efc4afcb3c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5201bf17e6a051dd1411513346d8efc4afcb3c36", "html_url": "https://github.com/rust-lang/rust/commit/5201bf17e6a051dd1411513346d8efc4afcb3c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5201bf17e6a051dd1411513346d8efc4afcb3c36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea8a5df431bfdea5c82d380f5832ab89a9f8fa03", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8a5df431bfdea5c82d380f5832ab89a9f8fa03", "html_url": "https://github.com/rust-lang/rust/commit/ea8a5df431bfdea5c82d380f5832ab89a9f8fa03"}, {"sha": "32513b0019c43e0de7a1f5c0e7ec520d7499c70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32513b0019c43e0de7a1f5c0e7ec520d7499c70c", "html_url": "https://github.com/rust-lang/rust/commit/32513b0019c43e0de7a1f5c0e7ec520d7499c70c"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "46f760722a6052a7ab6ee6d77a052a2774f0680b", "filename": "src/test/run-pass/vector-sort-failure-safe.rs", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5201bf17e6a051dd1411513346d8efc4afcb3c36/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5201bf17e6a051dd1411513346d8efc4afcb3c36/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs?ref=5201bf17e6a051dd1411513346d8efc4afcb3c36", "patch": "@@ -9,41 +9,56 @@\n // except according to those terms.\n \n use std::task;\n-use std::rand::{task_rng, Rng};\n+use std::sync::atomics::{AtomicUint, INIT_ATOMIC_UINT, Relaxed};\n+use std::rand::{task_rng, Rng, Rand};\n \n-const MAX_LEN: uint = 20;\n-static mut drop_counts: [uint, .. MAX_LEN] = [0, .. MAX_LEN];\n-static mut clone_count: uint = 0;\n+const REPEATS: uint = 5;\n+const MAX_LEN: uint = 32;\n+static drop_counts: [AtomicUint, .. MAX_LEN] =\n+    // FIXME #5244: AtomicUint is not Copy.\n+    [\n+        INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,\n+        INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,\n+        INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,\n+        INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,\n \n-#[deriving(Rand, PartialEq, PartialOrd, Eq, Ord)]\n-struct DropCounter { x: uint, clone_num: uint }\n+        INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,\n+        INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,\n+        INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,\n+        INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT, INIT_ATOMIC_UINT,\n+     ];\n \n-impl Clone for DropCounter {\n-    fn clone(&self) -> DropCounter {\n-        let num = unsafe { clone_count };\n-        unsafe { clone_count += 1; }\n+static creation_count: AtomicUint = INIT_ATOMIC_UINT;\n+\n+#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord)]\n+struct DropCounter { x: uint, creation_id: uint }\n+\n+impl Rand for DropCounter {\n+    fn rand<R: Rng>(rng: &mut R) -> DropCounter {\n+        // (we're not using this concurrently, so Relaxed is fine.)\n+        let num = creation_count.fetch_add(1, Relaxed);\n         DropCounter {\n-            x: self.x,\n-            clone_num: num\n+            x: rng.gen(),\n+            creation_id: num\n         }\n     }\n }\n \n impl Drop for DropCounter {\n     fn drop(&mut self) {\n-        unsafe {\n-            // Rand creates some with arbitrary clone_nums\n-            if self.clone_num < MAX_LEN {\n-                drop_counts[self.clone_num] += 1;\n-            }\n-        }\n+        drop_counts[self.creation_id].fetch_add(1, Relaxed);\n     }\n }\n \n pub fn main() {\n+    assert!(MAX_LEN <= std::uint::BITS);\n     // len can't go above 64.\n-    for len in range(2u, MAX_LEN) {\n-        for _ in range(0i, 10) {\n+    for len in range(2, MAX_LEN) {\n+        for _ in range(0, REPEATS) {\n+            // reset the count for these new DropCounters, so their\n+            // IDs start from 0.\n+            creation_count.store(0, Relaxed);\n+\n             let main = task_rng().gen_iter::<DropCounter>()\n                                  .take(len)\n                                  .collect::<Vec<DropCounter>>();\n@@ -56,14 +71,13 @@ pub fn main() {\n             // ... and then fail on each and every single one.\n             for fail_countdown in range(0i, count) {\n                 // refresh the counters.\n-                unsafe {\n-                    drop_counts = [0, .. MAX_LEN];\n-                    clone_count = 0;\n+                for c in drop_counts.iter() {\n+                    c.store(0, Relaxed);\n                 }\n \n                 let v = main.clone();\n \n-                task::try(proc() {\n+                let _ = task::try(proc() {\n                         let mut v = v;\n                         let mut fail_countdown = fail_countdown;\n                         v.as_mut_slice().sort_by(|a, b| {\n@@ -77,13 +91,11 @@ pub fn main() {\n \n                 // check that the number of things dropped is exactly\n                 // what we expect (i.e. the contents of `v`).\n-                unsafe {\n-                    for (i, &c) in drop_counts.iter().enumerate() {\n-                        let expected = if i < len {1} else {0};\n-                        assert!(c == expected,\n-                                \"found drop count == {} for i == {}, len == {}\",\n-                                c, i, len);\n-                    }\n+                for (i, c) in drop_counts.iter().enumerate().take(len) {\n+                    let count = c.load(Relaxed);\n+                    assert!(count == 1,\n+                            \"found drop count == {} for i == {}, len == {}\",\n+                            count, i, len);\n                 }\n             }\n         }"}]}