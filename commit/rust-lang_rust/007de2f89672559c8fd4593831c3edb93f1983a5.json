{"sha": "007de2f89672559c8fd4593831c3edb93f1983a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwN2RlMmY4OTY3MjU1OWM4ZmQ0NTkzODMxYzNlZGI5M2YxOTgzYTU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-10T22:46:57Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:32Z"}, "message": "Lift pure_wrt_drop to GenericParamDef", "tree": {"sha": "da46c0b935fe8a5aa35c5f23b5145404fde61189", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da46c0b935fe8a5aa35c5f23b5145404fde61189"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/007de2f89672559c8fd4593831c3edb93f1983a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/007de2f89672559c8fd4593831c3edb93f1983a5", "html_url": "https://github.com/rust-lang/rust/commit/007de2f89672559c8fd4593831c3edb93f1983a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/007de2f89672559c8fd4593831c3edb93f1983a5/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9200bdee2699b5d846c6d0e19ee6369007f06e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9200bdee2699b5d846c6d0e19ee6369007f06e2e", "html_url": "https://github.com/rust-lang/rust/commit/9200bdee2699b5d846c6d0e19ee6369007f06e2e"}], "stats": {"total": 100, "additions": 40, "deletions": 60}, "files": [{"sha": "31dce2a14c2b783869720488634fb89ed4a7ac5a", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -754,25 +754,21 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n }\n \n impl_stable_hash_for!(enum ty::GenericParamDefKind {\n-    Lifetime(lt),\n+    Lifetime,\n     Type(ty)\n });\n \n impl_stable_hash_for!(struct ty::GenericParamDef {\n     name,\n     def_id,\n     index,\n+    pure_wrt_drop,\n     kind\n });\n \n-impl_stable_hash_for!(struct ty::LifetimeParamDef {\n-    pure_wrt_drop\n-});\n-\n impl_stable_hash_for!(struct ty::TypeParamDef {\n     has_default,\n     object_lifetime_default,\n-    pure_wrt_drop,\n     synthetic\n });\n "}, {"sha": "d681e2e3d34b9b735c634a70c2c420749ff5dbc6", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let mut least_region = None;\n         for param in &abstract_type_generics.params {\n             match param.kind {\n-                GenericParamDefKind::Lifetime(_) => {}\n+                GenericParamDefKind::Lifetime => {}\n                 _ => continue\n             }\n             // Get the value supplied for this region from the substs."}, {"sha": "900fbdfdeadb3c58af9193f68128f55125d475d6", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -1666,7 +1666,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                     GenericParamDefKind::Type(ty) => {\n                                         Some(ty.object_lifetime_default)\n                                     }\n-                                    GenericParamDefKind::Lifetime(_) => None,\n+                                    GenericParamDefKind::Lifetime => None,\n                                 }\n                             })\n                             .collect()"}, {"sha": "227cba40d146388a016431509201bd3a522f3c94", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -226,7 +226,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .iter()\n                 .filter_map(|param| {\n                     match param.kind {\n-                        ty::GenericParamDefKind::Lifetime(_) => Some(param.name.to_string()),\n+                        ty::GenericParamDefKind::Lifetime => Some(param.name.to_string()),\n                         _ => None\n                     }\n                 })"}, {"sha": "f56720328b2997766e2913e2809fc890a85e9d45", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -386,7 +386,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let ty = trait_ref.substs.type_for_def(&param);\n                     ty.to_string()\n                 },\n-                GenericParamDefKind::Lifetime(_) => continue,\n+                GenericParamDefKind::Lifetime => continue,\n             };\n             flags.push((name.clone(), Some(value.clone())));\n         }"}, {"sha": "ff10c430f7be890685f22dd78ccfcf9e6834fd3b", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -293,7 +293,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n                     Some((param.name.to_string(),\n                          trait_ref.substs.type_for_def(&param).to_string()))\n                 },\n-                GenericParamDefKind::Lifetime(_) => None\n+                GenericParamDefKind::Lifetime => None\n             }\n         }).collect::<FxHashMap<String, String>>();\n "}, {"sha": "42aed9940ad5c7ebc79ac23c1ab1655faa74b990", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -713,23 +713,9 @@ pub struct FloatVarValue(pub ast::FloatTy);\n pub struct TypeParamDef {\n     pub has_default: bool,\n     pub object_lifetime_default: ObjectLifetimeDefault,\n-\n-    /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n-    /// on generic parameter `T`, asserts data behind the parameter\n-    /// `T` won't be accessed during the parent type's `Drop` impl.\n-    pub pure_wrt_drop: bool,\n-\n     pub synthetic: Option<hir::SyntheticTyParamKind>,\n }\n \n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct LifetimeParamDef {\n-    /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n-    /// on generic parameter `'a`, asserts data of lifetime `'a`\n-    /// won't be accessed during the parent type's `Drop` impl.\n-    pub pure_wrt_drop: bool,\n-}\n-\n impl ty::EarlyBoundRegion {\n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n         ty::BoundRegion::BrNamed(self.def_id, self.name)\n@@ -738,7 +724,7 @@ impl ty::EarlyBoundRegion {\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum GenericParamDefKind {\n-    Lifetime(LifetimeParamDef),\n+    Lifetime,\n     Type(TypeParamDef),\n }\n \n@@ -747,17 +733,16 @@ pub struct GenericParamDef {\n     pub name: InternedString,\n     pub def_id: DefId,\n     pub index: u32,\n+\n+    /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n+    /// on generic parameter `'a`/`T`, asserts data behind the parameter\n+    /// `'a`/`T` won't be accessed during the parent type's `Drop` impl.\n+    pub pure_wrt_drop: bool,\n+\n     pub kind: GenericParamDefKind,\n }\n \n impl GenericParamDef {\n-    pub fn to_lifetime(&self) -> LifetimeParamDef {\n-        match self.kind {\n-            GenericParamDefKind::Lifetime(lt) => lt,\n-            _ => bug!(\"cannot convert a non-lifetime to a lifetime\")\n-        }\n-    }\n-\n     pub fn to_type(&self) -> TypeParamDef {\n         match self.kind {\n             GenericParamDefKind::Type(ty) => ty,\n@@ -767,7 +752,7 @@ impl GenericParamDef {\n \n     pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {\n         match self.kind {\n-            GenericParamDefKind::Lifetime(_) => {\n+            GenericParamDefKind::Lifetime => {\n                 ty::EarlyBoundRegion {\n                     def_id: self.def_id,\n                     index: self.index,\n@@ -780,7 +765,7 @@ impl GenericParamDef {\n \n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n         match self.kind {\n-            GenericParamDefKind::Lifetime(_) => {\n+            GenericParamDefKind::Lifetime => {\n                 self.to_early_bound_region_data().to_bound_region()\n             }\n             _ => bug!(\"cannot convert a non-lifetime parameter def to an early bound region\")\n@@ -827,7 +812,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n \n         for param in self.params.iter() {\n             match param.kind {\n-                GenericParamDefKind::Lifetime(_) => param_counts.lifetimes += 1,\n+                GenericParamDefKind::Lifetime => param_counts.lifetimes += 1,\n                 GenericParamDefKind::Type(_) => param_counts.types += 1,\n             };\n         }\n@@ -839,7 +824,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         for param in self.params.iter() {\n             match param.kind {\n                 GenericParamDefKind::Type(_) => return true,\n-                GenericParamDefKind::Lifetime(_) => {}\n+                GenericParamDefKind::Lifetime => {}\n             }\n         }\n         if let Some(parent_def_id) = self.parent {\n@@ -858,7 +843,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n             match param.kind {\n-                ty::GenericParamDefKind::Lifetime(_) => param,\n+                ty::GenericParamDefKind::Lifetime => param,\n                 _ => bug!(\"expected region parameter, but found another generic parameter\")\n             }\n         } else {"}, {"sha": "d4db2ae481a271c28004d89a8cb83a947b20db98", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n           FT: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         for param in &defs.params {\n             let kind = match param.kind {\n-                ty::GenericParamDefKind::Lifetime(_) => mk_region(param, substs).into(),\n+                ty::GenericParamDefKind::Lifetime => mk_region(param, substs).into(),\n                 ty::GenericParamDefKind::Type(_) => mk_type(param, substs).into(),\n             };\n             assert_eq!(param.index as usize, substs.len());"}, {"sha": "fdd0754730febb72bf0d37a73f73d95bf00c864f", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -505,12 +505,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             .filter(|&(_, &k)| {\n                 match k.unpack() {\n                     UnpackedKind::Lifetime(&ty::RegionKind::ReEarlyBound(ref ebr)) => {\n-                        !impl_generics.region_param(ebr, self).to_lifetime().pure_wrt_drop\n+                        !impl_generics.region_param(ebr, self).pure_wrt_drop\n                     }\n                     UnpackedKind::Type(&ty::TyS {\n                         sty: ty::TypeVariants::TyParam(ref pt), ..\n                     }) => {\n-                        !impl_generics.type_param(pt, self).to_type().pure_wrt_drop\n+                        !impl_generics.type_param(pt, self).pure_wrt_drop\n                     }\n                     UnpackedKind::Lifetime(_) | UnpackedKind::Type(_) => {\n                         // not a type or region param - this should be reported"}, {"sha": "b3e840ae025ddc3d3dc13f4db15eac6988e7bf86", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -340,7 +340,7 @@ impl PrintContext {\n                     generics.params.iter().rev().filter_map(|param| {\n                         match param.kind {\n                             GenericParamDefKind::Type(ty) => Some((param.def_id, ty.has_default)),\n-                            GenericParamDefKind::Lifetime(_) => None,\n+                            GenericParamDefKind::Lifetime => None,\n                         }\n                     });\n                 if let Some(last_ty) = type_params.next() {\n@@ -606,7 +606,7 @@ define_print! {\n impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let type_name = match self.kind {\n-            ty::GenericParamDefKind::Lifetime(_) => \"Lifetime\",\n+            ty::GenericParamDefKind::Lifetime => \"Lifetime\",\n             ty::GenericParamDefKind::Type(_) => \"Type\",\n         };\n         write!(f, \"{}({}, {:?}, {})\","}, {"sha": "6e9b03cd2a9c6cedb35d803f4c1fa0d421f6c6d2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -406,7 +406,7 @@ impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n                         self.ev.tcx.type_of(param.def_id).visit_with(self);\n                     }\n                 }\n-                GenericParamDefKind::Lifetime(_) => {}\n+                GenericParamDefKind::Lifetime => {}\n             }\n         }\n         self\n@@ -1347,7 +1347,7 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n                         self.tcx.type_of(param.def_id).visit_with(self);\n                     }\n                 }\n-                GenericParamDefKind::Lifetime(_) => {}\n+                GenericParamDefKind::Lifetime => {}\n             }\n         }\n         self"}, {"sha": "86913fcadfa67ed3e882348d315cd6050882681a", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -731,13 +731,13 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n             GenericParamDefKind::Type(_) => Some(param),\n-            GenericParamDefKind::Lifetime(_) => None,\n+            GenericParamDefKind::Lifetime => None,\n         }\n     });\n     let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n             GenericParamDefKind::Type(_) => Some(param),\n-            GenericParamDefKind::Lifetime(_) => None,\n+            GenericParamDefKind::Lifetime => None,\n         }\n     });\n     for (impl_ty, trait_ty) in impl_m_type_params.zip(trait_m_type_params) {"}, {"sha": "a96652f953e996a16e71bb316e702a76e53e93ab", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -652,7 +652,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n         parent.params.iter()\n                      .flat_map(|param| {\n                          match param.kind {\n-                             GenericParamDefKind::Lifetime(_) => None,\n+                             GenericParamDefKind::Lifetime => None,\n                              GenericParamDefKind::Type(_) => Some((param.name, param.def_id)),\n                          }\n                      })\n@@ -661,7 +661,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n     for method_param in generics.params.iter() {\n         match method_param.kind {\n             // Shadowing is checked in resolve_lifetime.\n-            GenericParamDefKind::Lifetime(_) => continue,\n+            GenericParamDefKind::Lifetime => continue,\n             _ => {},\n         };\n         if impl_params.contains_key(&method_param.name) {"}, {"sha": "1cc2730158f82bd010c95ac9e4c3800b500bb24a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -844,10 +844,10 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         index: 0,\n                         name: keywords::SelfType.name().as_interned_str(),\n                         def_id: tcx.hir.local_def_id(param_id),\n+                        pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n                             has_default: false,\n                             object_lifetime_default: rl::Set1::Empty,\n-                            pure_wrt_drop: false,\n                             synthetic: None,\n                         }),\n                     });\n@@ -892,9 +892,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             name: l.lifetime.name.name().as_interned_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(l.lifetime.id),\n-            kind: ty::GenericParamDefKind::Lifetime(ty::LifetimeParamDef {\n-                pure_wrt_drop: l.pure_wrt_drop,\n-            }),\n+            pure_wrt_drop: l.pure_wrt_drop,\n+            kind: ty::GenericParamDefKind::Lifetime,\n         }\n     }).collect::<Vec<_>>();\n \n@@ -923,11 +922,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             index: type_start + i as u32,\n             name: p.name.as_interned_str(),\n             def_id: tcx.hir.local_def_id(p.id),\n+            pure_wrt_drop: p.pure_wrt_drop,\n             kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n                 has_default: p.default.is_some(),\n                 object_lifetime_default:\n                     object_lifetime_defaults.as_ref().map_or(rl::Set1::Empty, |o| o[i]),\n-                pure_wrt_drop: p.pure_wrt_drop,\n                 synthetic: p.synthetic,\n             }),\n         }\n@@ -948,10 +947,10 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 index: type_start + i as u32,\n                 name: Symbol::intern(arg).as_interned_str(),\n                 def_id,\n+                pure_wrt_drop: false,\n                 kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n                     has_default: false,\n                     object_lifetime_default: rl::Set1::Empty,\n-                    pure_wrt_drop: false,\n                     synthetic: None,\n                 }),\n             });\n@@ -963,10 +962,10 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     index: type_start + i,\n                     name: Symbol::intern(\"<upvar>\").as_interned_str(),\n                     def_id,\n+                    pure_wrt_drop: false,\n                     kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n                         has_default: false,\n                         object_lifetime_default: rl::Set1::Empty,\n-                        pure_wrt_drop: false,\n                         synthetic: None,\n                     }),\n                 }"}, {"sha": "ef699b201a51a873d170c6a2abdcee6fc5d9bcff", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -125,7 +125,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     report_unused_parameter(tcx, hir_ty.span, \"type\", &param_ty.to_string());\n                 }\n             }\n-            (&ty::GenericParamDefKind::Lifetime(_), hir::GenericParam::Lifetime(hir_lt)) => {\n+            (&ty::GenericParamDefKind::Lifetime, hir::GenericParam::Lifetime(hir_lt)) => {\n                 let param = ctp::Parameter::from(ty_param.to_early_bound_region_data());\n                 if lifetimes_in_associated_types.contains(&param) && // (*)\n                     !input_parameters.contains(&param) {\n@@ -134,7 +134,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n             }\n             (&ty::GenericParamDefKind::Type(_), _) => continue,\n-            (&ty::GenericParamDefKind::Lifetime(_), _) => continue,\n+            (&ty::GenericParamDefKind::Lifetime, _) => continue,\n         }\n     }\n "}, {"sha": "d7646ce7bfc5ca4fb24dded85c7ca43bfb765438", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n \n         for param in generics.params.iter() {\n             match param.kind {\n-                ty::GenericParamDefKind::Lifetime(_) => {\n+                ty::GenericParamDefKind::Lifetime => {\n                     let name = if param.name == \"\" {\n                         hir::LifetimeName::Static\n                     } else {"}, {"sha": "621ec641ee036048d225d8b7ded06acc83c398da", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007de2f89672559c8fd4593831c3edb93f1983a5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=007de2f89672559c8fd4593831c3edb93f1983a5", "patch": "@@ -1855,7 +1855,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n             params: gens.params\n                         .iter()\n                         .flat_map(|param| {\n-                            if let ty::GenericParamDefKind::Lifetime(_) = param.kind {\n+                            if let ty::GenericParamDefKind::Lifetime = param.kind {\n                                 Some(GenericParamDef::Lifetime(param.clean(cx)))\n                             } else {\n                                 None"}]}