{"sha": "874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NGU4ZTM1MDU1YWZmMWJiN2NiNWI4YWZkOWUxYzI3YzhjZjIwZGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-10T01:48:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-10T01:50:46Z"}, "message": "rustc: Have tag patterns use the type parameter information from the typechecker instead of trying to deduce it in trans. Un-XFAIL test/run-pass/generic-tag-values.rs.", "tree": {"sha": "2e8c199daebdfa86e9299e8a9bcc815e02dcce80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8c199daebdfa86e9299e8a9bcc815e02dcce80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de", "html_url": "https://github.com/rust-lang/rust/commit/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bafcbb101c104b136ce781380ce6944c49b77691", "url": "https://api.github.com/repos/rust-lang/rust/commits/bafcbb101c104b136ce781380ce6944c49b77691", "html_url": "https://github.com/rust-lang/rust/commit/bafcbb101c104b136ce781380ce6944c49b77691"}], "stats": {"total": 60, "additions": 49, "deletions": 11}, "files": [{"sha": "70e2330e5324b63285dd6a5c8d8af26c6d7c2703", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de", "patch": "@@ -453,7 +453,6 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         foreach-put-structured.rs \\\n                         foreach-simple-outer-slot.rs \\\n                         generic-iter-frame.rs \\\n-                        generic-tag-values.rs \\\n                         iter-range.rs \\\n                         iter-ret.rs \\\n                         lazychan.rs \\"}, {"sha": "00e7e6d839a2ea0c3b7a03e96eba03dd49f490d3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de", "patch": "@@ -1185,18 +1185,27 @@ fn GEP_tup_like(@block_ctxt cx, @ty.t t,\n // This function uses GEP_tup_like() above and automatically performs casts as\n // appropriate. @llblobptr is the data part of a tag value; its actual type is\n // meaningless, as it will be cast away.\n-fn GEP_tag(@block_ctxt cx, ValueRef llblobptr, &ast.variant variant, int ix)\n+fn GEP_tag(@block_ctxt cx,\n+           ValueRef llblobptr,\n+           &ast.def_id tag_id,\n+           &ast.def_id variant_id,\n+           vec[@ty.t] ty_substs,\n+           int ix)\n         -> result {\n+    auto ty_params = tag_ty_params(cx.fcx.ccx, tag_id);\n+    auto variant = tag_variant_with_id(cx.fcx.ccx, tag_id, variant_id);\n+\n     // Synthesize a tuple type so that GEP_tup_like() can work its magic.\n     // Separately, store the type of the element we're interested in.\n     auto arg_tys = arg_tys_of_fn(variant.ann);\n     auto elem_ty = ty.plain_ty(ty.ty_nil);  // typestate infelicity\n     auto i = 0;\n     let vec[@ty.t] true_arg_tys = vec();\n     for (ty.arg a in arg_tys) {\n-        true_arg_tys += vec(a.ty);\n+        auto arg_ty = ty.substitute_ty_params(ty_params, ty_substs, a.ty);\n+        true_arg_tys += vec(arg_ty);\n         if (i == ix) {\n-            elem_ty = a.ty;\n+            elem_ty = arg_ty;\n         }\n \n         i += 1;\n@@ -2283,6 +2292,24 @@ fn node_ann_type(@crate_ctxt cx, &ast.ann a) -> @ty.t {\n     }\n }\n \n+fn node_ann_ty_params(&ast.ann a) -> vec[@ty.t] {\n+    alt (a) {\n+        case (ast.ann_none) {\n+            log \"missing type annotation\";\n+            fail;\n+        }\n+        case (ast.ann_type(_, ?tps_opt)) {\n+            alt (tps_opt) {\n+                case (none[vec[@ty.t]]) {\n+                    log \"type annotation has no ty params\";\n+                    fail;\n+                }\n+                case (some[vec[@ty.t]](?tps)) { ret tps; }\n+            }\n+        }\n+    }\n+}\n+\n fn node_type(@crate_ctxt cx, &ast.ann a) -> TypeRef {\n     ret type_of(cx, node_ann_type(cx, a));\n }\n@@ -2981,13 +3008,15 @@ fn trans_pat_match(@block_ctxt cx, @ast.pat pat, ValueRef llval,\n                                       C_int(variant_tag));\n             cx.build.CondBr(lleq, matched_cx.llbb, next_cx.llbb);\n \n+            auto ty_params = node_ann_ty_params(ann);\n+\n             if (_vec.len[@ast.pat](subpats) > 0u) {\n                 auto llblobptr = matched_cx.build.GEP(lltagptr,\n                     vec(C_int(0), C_int(1)));\n                 auto i = 0;\n                 for (@ast.pat subpat in subpats) {\n-                    auto rslt = GEP_tag(matched_cx, llblobptr, variants.(i),\n-                                        i);\n+                    auto rslt = GEP_tag(matched_cx, llblobptr, vdef._0,\n+                                        vdef._1, ty_params, i);\n                     auto llsubvalptr = rslt.val;\n                     matched_cx = rslt.bcx;\n \n@@ -3025,7 +3054,7 @@ fn trans_pat_binding(@block_ctxt cx, @ast.pat pat, ValueRef llval)\n \n             ret copy_ty(bcx, INIT, dst, llval, ty);\n         }\n-        case (ast.pat_tag(_, ?subpats, ?vdef_opt, _)) {\n+        case (ast.pat_tag(_, ?subpats, ?vdef_opt, ?ann)) {\n             if (_vec.len[@ast.pat](subpats) == 0u) { ret res(cx, llval); }\n \n             // Get the appropriate variant for this tag.\n@@ -3036,10 +3065,13 @@ fn trans_pat_binding(@block_ctxt cx, @ast.pat pat, ValueRef llval)\n                 T_opaque_tag_ptr(cx.fcx.ccx.tn));\n             auto llblobptr = cx.build.GEP(lltagptr, vec(C_int(0), C_int(1)));\n \n+            auto ty_param_substs = node_ann_ty_params(ann);\n+\n             auto this_cx = cx;\n             auto i = 0;\n             for (@ast.pat subpat in subpats) {\n-                auto rslt = GEP_tag(this_cx, llblobptr, variant, i);\n+                auto rslt = GEP_tag(this_cx, llblobptr, vdef._0, vdef._1,\n+                                    ty_param_substs, i);\n                 this_cx = rslt.bcx;\n                 auto llsubvalptr = rslt.val;\n \n@@ -4926,6 +4958,11 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n                               none[TypeRef], ret_ty_of_fn(variant.ann),\n                               fn_args, ty_params);\n \n+    let vec[@ty.t] ty_param_substs = vec();\n+    for (ast.ty_param tp in ty_params) {\n+        ty_param_substs += vec(plain_ty(ty.ty_param(tp.id)));\n+    }\n+\n     auto bcx = new_top_block_ctxt(fcx);\n \n     auto arg_tys = arg_tys_of_fn(variant.ann);\n@@ -4944,7 +4981,8 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n \n     i = 0u;\n     for (ast.variant_arg va in variant.args) {\n-        auto rslt = GEP_tag(bcx, llblobptr, variant, i as int);\n+        auto rslt = GEP_tag(bcx, llblobptr, tag_id, variant.id,\n+                            ty_param_substs, i as int);\n         bcx = rslt.bcx;\n         auto lldestptr = rslt.val;\n "}, {"sha": "7dfe918c065be34c16229d4243198e1b7894f0d1", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=874e8e35055aff1bb7cb5b8afd9e1c27c8cf20de", "patch": "@@ -1085,6 +1085,7 @@ fn demand_pat(&@fn_ctxt fcx, @ty.t expected, @ast.pat pat) -> @ast.pat {\n                     fail;\n                 }\n             }\n+            auto tps_opt = some[vec[@ty.t]](ty_param_substs);\n \n             // The type of the tag isn't enough; we also have to get the type\n             // of the variant, which is either a tag type in the case of\n@@ -1100,7 +1101,7 @@ fn demand_pat(&@fn_ctxt fcx, @ty.t expected, @ast.pat pat) -> @ast.pat {\n                     // Nullary tag variant.\n                     check (subpats_len == 0u);\n                     p_1 = ast.pat_tag(id, subpats, vdef_opt,\n-                                      ast.ann_type(t, none[vec[@ty.t]]));\n+                                      ast.ann_type(t, tps_opt));\n                 }\n                 case (ty.ty_fn(_, ?args, ?tag_ty)) {\n                     // N-ary tag variant.\n@@ -1115,7 +1116,7 @@ fn demand_pat(&@fn_ctxt fcx, @ty.t expected, @ast.pat pat) -> @ast.pat {\n                         i += 1u;\n                     }\n                     p_1 = ast.pat_tag(id, new_subpats, vdef_opt,\n-                                      ast.ann_type(tag_ty, none[vec[@ty.t]]));\n+                                      ast.ann_type(tag_ty, tps_opt));\n                 }\n             }\n         }"}]}