{"sha": "d964e60e4fffc95e8c1aee90badafdc83e9ea421", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NjRlNjBlNGZmZmM5NWU4YzFhZWU5MGJhZGFmZGM4M2U5ZWE0MjE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-03-03T14:53:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-03-16T17:30:26Z"}, "message": "Rename render::Type to improve naming", "tree": {"sha": "2c55c21f969fbbf00dfb712b0f82b2dcc26edbd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c55c21f969fbbf00dfb712b0f82b2dcc26edbd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d964e60e4fffc95e8c1aee90badafdc83e9ea421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d964e60e4fffc95e8c1aee90badafdc83e9ea421", "html_url": "https://github.com/rust-lang/rust/commit/d964e60e4fffc95e8c1aee90badafdc83e9ea421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d964e60e4fffc95e8c1aee90badafdc83e9ea421/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5654cde729c99f894507141c391e0e8b2311e2fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5654cde729c99f894507141c391e0e8b2311e2fb", "html_url": "https://github.com/rust-lang/rust/commit/5654cde729c99f894507141c391e0e8b2311e2fb"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "9e1e11c54d0263fdb43cb1143f6f61aa620e38e3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d964e60e4fffc95e8c1aee90badafdc83e9ea421/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d964e60e4fffc95e8c1aee90badafdc83e9ea421/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d964e60e4fffc95e8c1aee90badafdc83e9ea421", "patch": "@@ -302,14 +302,14 @@ impl Serialize for IndexItem {\n \n /// A type used for the search index.\n #[derive(Debug)]\n-struct Type {\n+struct RenderType {\n     ty: Option<DefId>,\n     idx: Option<usize>,\n     name: Option<String>,\n     generics: Option<Vec<Generic>>,\n }\n \n-impl Serialize for Type {\n+impl Serialize for RenderType {\n     fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n     where\n         S: Serializer,\n@@ -388,12 +388,12 @@ impl Serialize for IndexItemFunctionType {\n \n #[derive(Debug)]\n pub struct TypeWithKind {\n-    ty: Type,\n+    ty: RenderType,\n     kind: TypeKind,\n }\n \n-impl From<(Type, TypeKind)> for TypeWithKind {\n-    fn from(x: (Type, TypeKind)) -> TypeWithKind {\n+impl From<(RenderType, TypeKind)> for TypeWithKind {\n+    fn from(x: (RenderType, TypeKind)) -> TypeWithKind {\n         TypeWithKind { ty: x.0, kind: x.1 }\n     }\n }"}, {"sha": "ed0de2b311955874864e05babb5645f9f128540d", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d964e60e4fffc95e8c1aee90badafdc83e9ea421/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d964e60e4fffc95e8c1aee90badafdc83e9ea421/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=d964e60e4fffc95e8c1aee90badafdc83e9ea421", "patch": "@@ -12,7 +12,7 @@ use std::path::{Path, PathBuf};\n use serde::Serialize;\n \n use super::{plain_summary_line, shorten, Impl, IndexItem, IndexItemFunctionType, ItemType};\n-use super::{Generic, RenderInfo, Type, TypeWithKind};\n+use super::{Generic, RenderInfo, RenderType, TypeWithKind};\n \n /// Indicates where an external crate can be found.\n pub enum ExternalLocation {\n@@ -665,8 +665,8 @@ fn get_index_search_type(item: &clean::Item) -> Option<IndexItemFunctionType> {\n     Some(IndexItemFunctionType { inputs, output })\n }\n \n-fn get_index_type(clean_type: &clean::Type) -> Type {\n-    let t = Type {\n+fn get_index_type(clean_type: &clean::Type) -> RenderType {\n+    let t = RenderType {\n         ty: clean_type.def_id(),\n         idx: None,\n         name: get_index_type_name(clean_type, true).map(|s| s.to_ascii_lowercase()),"}]}