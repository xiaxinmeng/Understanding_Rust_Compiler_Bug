{"sha": "2855b92eb4fcc32d940de71dfd5eb383eaecc872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NTViOTJlYjRmY2MzMmQ5NDBkZTcxZGZkNWViMzgzZWFlY2M4NzI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-09T07:43:53Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-21T10:27:55Z"}, "message": "add tests", "tree": {"sha": "86b59dd11a76c281ad6e852f39459be3d8470bbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86b59dd11a76c281ad6e852f39459be3d8470bbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2855b92eb4fcc32d940de71dfd5eb383eaecc872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2855b92eb4fcc32d940de71dfd5eb383eaecc872", "html_url": "https://github.com/rust-lang/rust/commit/2855b92eb4fcc32d940de71dfd5eb383eaecc872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2855b92eb4fcc32d940de71dfd5eb383eaecc872/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073127a04fda615fe865808add119f96a241ec91", "url": "https://api.github.com/repos/rust-lang/rust/commits/073127a04fda615fe865808add119f96a241ec91", "html_url": "https://github.com/rust-lang/rust/commit/073127a04fda615fe865808add119f96a241ec91"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "bbfd2183b06e386b04004babe545c1abf4d4bf85", "filename": "src/test/ui/const-generics/issues/issue-69654-run-pass.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654-run-pass.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features, unused_braces)]\n+\n+trait Bar<T> {}\n+impl<T> Bar<T> for [u8; {7}] {}\n+\n+struct Foo<const N: usize> {}\n+impl<const N: usize> Foo<N>\n+where\n+    [u8; N]: Bar<[(); N]>,\n+{\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    Foo::foo();\n+}"}, {"sha": "7e775999ebd10f85e721a9eb8eaf599d38c993d8", "filename": "src/test/ui/const-generics/issues/issue-69654.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,18 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait Bar<T> {}\n+impl<T> Bar<T> for [u8; T] {}\n+//~^ ERROR expected value, found type parameter `T`\n+\n+struct Foo<const N: usize> {}\n+impl<const N: usize> Foo<N>\n+where\n+    [u8; N]: Bar<[(); N]>,\n+{\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    Foo::foo();\n+}"}, {"sha": "70af7bf25d8491953a15b8395bc58cf88d60e71d", "filename": "src/test/ui/const-generics/issues/issue-69654.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.stderr?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,9 @@\n+error[E0423]: expected value, found type parameter `T`\n+  --> $DIR/issue-69654.rs:5:25\n+   |\n+LL | impl<T> Bar<T> for [u8; T] {}\n+   |                         ^ not a value\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "68d186500098d481d5c293db203b4196d53e2c1d", "filename": "src/test/ui/const-generics/occurs-check/bind-param.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Fbind-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Fbind-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Fbind-param.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,17 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+// This test does not use any \"unevaluated\" consts, so it should compile just fine.\n+\n+fn bind<const N: usize>(value: [u8; N]) -> [u8; N] {\n+    todo!()\n+}\n+\n+fn sink(_: [u8; 5]) {}\n+\n+fn main() {\n+    let mut arr = Default::default();\n+    arr = bind(arr);\n+    sink(arr);\n+}"}, {"sha": "3cb9b7b9da880867f43943de0eb5be6f1679788d", "filename": "src/test/ui/const-generics/occurs-check/unify-fixpoint.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,18 @@\n+#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+\n+// It depends on how we normalize constants and how const equate works if this\n+// compiles.\n+//\n+// Please ping @lcnr if the output if this test changes.\n+\n+\n+fn bind<const N: usize>(value: [u8; N + 2]) -> [u8; N * 2] {\n+    //~^ ERROR constant expression depends on a generic parameter\n+    //~| ERROR constant expression depends on a generic parameter\n+    todo!()\n+}\n+\n+fn main() {\n+    let mut arr = Default::default();\n+    arr = bind::<2>(arr);\n+}"}, {"sha": "671f1103dccad7fcfeb56f35c067cb35b5d5ca72", "filename": "src/test/ui/const-generics/occurs-check/unify-fixpoint.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-fixpoint.stderr?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/unify-fixpoint.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/unify-fixpoint.rs:9:32\n+   |\n+LL | fn bind<const N: usize>(value: [u8; N + 2]) -> [u8; N * 2] {\n+   |                                ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/unify-fixpoint.rs:9:48\n+   |\n+LL | fn bind<const N: usize>(value: [u8; N + 2]) -> [u8; N * 2] {\n+   |                                                ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "552b1b2a66ac523ed8b512b415c2da0c03b94bc3", "filename": "src/test/ui/const-generics/occurs-check/unify-n-nplusone.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-n-nplusone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-n-nplusone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-n-nplusone.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,17 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+// This test would try to unify `N` with `N + 1` which must fail the occurs check.\n+\n+fn bind<const N: usize>(value: [u8; N]) -> [u8; N + 1] {\n+    //~^ ERROR constant expression depends on a generic parameter\n+    todo!()\n+}\n+\n+fn sink(_: [u8; 5]) {}\n+\n+fn main() {\n+    let mut arr = Default::default();\n+    arr = bind(arr);\n+    sink(arr);\n+}"}, {"sha": "c1ac7eec1e7d8c912e9802525e9f484cc7cc5d9b", "filename": "src/test/ui/const-generics/occurs-check/unify-n-nplusone.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-n-nplusone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-n-nplusone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funify-n-nplusone.stderr?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/unify-n-nplusone.rs:6:44\n+   |\n+LL | fn bind<const N: usize>(value: [u8; N]) -> [u8; N + 1] {\n+   |                                            ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "f56687ecd9329ec6f4a4714e1c61ffcb1b440f2d", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,14 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait Bar<const M: usize> {}\n+impl<const N: usize> Bar<N> for A<{ 6 + 1 }> {}\n+\n+struct A<const N: usize>\n+where\n+    A<N>: Bar<N>;\n+\n+fn main() {\n+    let _ = A;\n+}"}, {"sha": "12444ec5312d98b42398cb5099a6e838accb309f", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-2.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+// The goal is is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(_#1t)` subst.\n+//\n+// If we are then able to infer `ty::Infer(TyVar(_#1t) := Ty<ct>` we introduced an\n+// artificial inference cycle.\n+struct Foo<const N: usize>;\n+\n+trait Bind<T> {\n+    fn bind() -> (T, Self);\n+}\n+\n+// `N` has to be `ConstKind::Unevaluated`.\n+impl<T> Bind<T> for Foo<{ 6 + 1 }> {\n+    fn bind() -> (T, Self) {\n+        (panic!(), Foo)\n+    }\n+}\n+\n+fn main() {\n+    let (mut t, foo) = Foo::bind();\n+    // `t` is `ty::Infer(TyVar(_#1t))`\n+    // `foo` contains `ty::Infer(TyVar(_#1t))` in its substs\n+    t = foo;\n+}"}, {"sha": "187e27382fcf29794c2009d0cd822849efabf7ab", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-3.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+// The goal is is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(_#1t)` subst.\n+//\n+// If we are then able to infer `ty::Infer(TyVar(_#1t) := Ty<ct>` we introduced an\n+// artificial inference cycle.\n+fn bind<T>() -> (T, [u8; 6 + 1]) {\n+    todo!()\n+}\n+\n+fn main() {\n+    let (mut t, foo) = bind();\n+    // `t` is `ty::Infer(TyVar(_#1t))`\n+    // `foo` contains `ty::Infer(TyVar(_#1t))` in its substs\n+    t = foo;\n+}"}, {"sha": "8e42ceb6d70e90bbdb9b813c51d4999a501aa1dd", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-4.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2855b92eb4fcc32d940de71dfd5eb383eaecc872/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-4.rs?ref=2855b92eb4fcc32d940de71dfd5eb383eaecc872", "patch": "@@ -0,0 +1,12 @@\n+// build-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn bind<const N: usize>(value: [u8; N]) -> [u8; 3 + 4] {\n+    todo!()\n+}\n+\n+fn main() {\n+    let mut arr = Default::default();\n+    arr = bind(arr);\n+}"}]}