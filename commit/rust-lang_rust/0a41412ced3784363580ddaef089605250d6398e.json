{"sha": "0a41412ced3784363580ddaef089605250d6398e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDE0MTJjZWQzNzg0MzYzNTgwZGRhZWYwODk2MDUyNTBkNjM5OGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-01T17:38:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-01T17:38:00Z"}, "message": "Merge #3806\n\n3806: lower bool literal value r=flodiebold a=JoshMcguigan\n\nFollowing up on #3805, this PR adds the literal value to `ast::LiteralKind` so when we lower we can use the actual value from the source code rather than the default value for the type. Ultimately I plan to use this for exhaustiveness checking in #3706.\r\n\r\nI didn't include this in the previous PR because I wasn't sure if it made sense to add this information to `ast::LiteralKind` or provide some other mechanism to get this from `ast::Literal`.\r\n\r\nFor now I've only implemented this for boolean literals, but I think it could be easily extended to other types. A possible exception to this are string literals, since we may not want to clone around an owned string to hold onto in `ast::LiteralKind`, and it'd be nice to avoid adding a generic lifetime as well. Perhaps we won't ever care about the actual value of a string literal? \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "ddc82aaaf8e35fa652feb04400fd31bc9af4749e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddc82aaaf8e35fa652feb04400fd31bc9af4749e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a41412ced3784363580ddaef089605250d6398e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehNF4CRBK7hj4Ov3rIwAAdHIIACpdv1rJmG9ubQ8tm8p78CBe\nAbYJE44Wv7j0WkTL/Xy/rme9XmKFJdyD07+P/+qqwkWB544gdv0FLcJ/aFNfZvBR\n8CQJvM266zMH1pu3O3SS4VW0gP4fZW39VSxgV+zaBDAs98MYPNpf3K7yYkmRqV4/\n8WFniHVXkP5f4iayCTClS9jr5YAIqKTv4IoBxj1tcmLQ2ESi78OLw3TWQK82JNvJ\nNax47eXexuFKybLL/uDTARdjhlH0dvSAI18+XfCWOoat+ND78o4KfrEk0yo+bG4G\naU+7FdjARWugP+/TOvu6Kx95laBWXpbro4RWxwONXP7/FJet+7TiLIwrk5PsNio=\n=FmUK\n-----END PGP SIGNATURE-----\n", "payload": "tree ddc82aaaf8e35fa652feb04400fd31bc9af4749e\nparent f39b51d025c080682a35706ffcb86c2aeb28044b\nparent d0b6b2ee2f4a447f4c3827f87ebaf5216de6f226\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585762680 +0000\ncommitter GitHub <noreply@github.com> 1585762680 +0000\n\nMerge #3806\n\n3806: lower bool literal value r=flodiebold a=JoshMcguigan\n\nFollowing up on #3805, this PR adds the literal value to `ast::LiteralKind` so when we lower we can use the actual value from the source code rather than the default value for the type. Ultimately I plan to use this for exhaustiveness checking in #3706.\r\n\r\nI didn't include this in the previous PR because I wasn't sure if it made sense to add this information to `ast::LiteralKind` or provide some other mechanism to get this from `ast::Literal`.\r\n\r\nFor now I've only implemented this for boolean literals, but I think it could be easily extended to other types. A possible exception to this are string literals, since we may not want to clone around an owned string to hold onto in `ast::LiteralKind`, and it'd be nice to avoid adding a generic lifetime as well. Perhaps we won't ever care about the actual value of a string literal? \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a41412ced3784363580ddaef089605250d6398e", "html_url": "https://github.com/rust-lang/rust/commit/0a41412ced3784363580ddaef089605250d6398e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a41412ced3784363580ddaef089605250d6398e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f39b51d025c080682a35706ffcb86c2aeb28044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39b51d025c080682a35706ffcb86c2aeb28044b", "html_url": "https://github.com/rust-lang/rust/commit/f39b51d025c080682a35706ffcb86c2aeb28044b"}, {"sha": "d0b6b2ee2f4a447f4c3827f87ebaf5216de6f226", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b6b2ee2f4a447f4c3827f87ebaf5216de6f226", "html_url": "https://github.com/rust-lang/rust/commit/d0b6b2ee2f4a447f4c3827f87ebaf5216de6f226"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "28c570c769bf4b7c839f32470035c26dce438176", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a41412ced3784363580ddaef089605250d6398e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a41412ced3784363580ddaef089605250d6398e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=0a41412ced3784363580ddaef089605250d6398e", "patch": "@@ -748,7 +748,7 @@ impl From<ast::LiteralKind> for Literal {\n             LiteralKind::ByteString => Literal::ByteString(Default::default()),\n             LiteralKind::String => Literal::String(Default::default()),\n             LiteralKind::Byte => Literal::Int(Default::default(), Some(BuiltinInt::U8)),\n-            LiteralKind::Bool => Literal::Bool(Default::default()),\n+            LiteralKind::Bool(val) => Literal::Bool(val),\n             LiteralKind::Char => Literal::Char(Default::default()),\n         }\n     }"}, {"sha": "8bbd946c0710296b9d6095327f7b43b891f1ef69", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a41412ced3784363580ddaef089605250d6398e/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a41412ced3784363580ddaef089605250d6398e/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=0a41412ced3784363580ddaef089605250d6398e", "patch": "@@ -308,7 +308,7 @@ pub enum LiteralKind {\n     Byte,\n     IntNumber { suffix: Option<SmolStr> },\n     FloatNumber { suffix: Option<SmolStr> },\n-    Bool,\n+    Bool(bool),\n }\n \n impl ast::Literal {\n@@ -355,7 +355,8 @@ impl ast::Literal {\n                 LiteralKind::FloatNumber { suffix: Self::find_suffix(&text, &FLOAT_SUFFIXES) }\n             }\n             STRING | RAW_STRING => LiteralKind::String,\n-            T![true] | T![false] => LiteralKind::Bool,\n+            T![true] => LiteralKind::Bool(true),\n+            T![false] => LiteralKind::Bool(false),\n             BYTE_STRING | RAW_BYTE_STRING => LiteralKind::ByteString,\n             CHAR => LiteralKind::Char,\n             BYTE => LiteralKind::Byte,"}]}