{"sha": "9f08341aa486ea59cb488635f19e960523568fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDgzNDFhYTQ4NmVhNTljYjQ4ODYzNWYxOWU5NjA1MjM1NjhmYjg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-27T16:56:38Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-27T16:56:38Z"}, "message": "Merge #246\n\n246: Resolve path r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "160b6aecfabb2f7dac111763b35b6f52ba6ff25b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/160b6aecfabb2f7dac111763b35b6f52ba6ff25b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f08341aa486ea59cb488635f19e960523568fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f08341aa486ea59cb488635f19e960523568fb8", "html_url": "https://github.com/rust-lang/rust/commit/9f08341aa486ea59cb488635f19e960523568fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f08341aa486ea59cb488635f19e960523568fb8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6bb06addf8d5100cd1125c40d3dfa5f7613b42c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb06addf8d5100cd1125c40d3dfa5f7613b42c1", "html_url": "https://github.com/rust-lang/rust/commit/6bb06addf8d5100cd1125c40d3dfa5f7613b42c1"}, {"sha": "192e2bbb0e5c772d43ec61d36de56a0f7062610e", "url": "https://api.github.com/repos/rust-lang/rust/commits/192e2bbb0e5c772d43ec61d36de56a0f7062610e", "html_url": "https://github.com/rust-lang/rust/commit/192e2bbb0e5c772d43ec61d36de56a0f7062610e"}], "stats": {"total": 130, "additions": 98, "deletions": 32}, "files": [{"sha": "5ef278127e1da318df8dfbeef01e3b6cd3a55db5", "filename": "crates/ra_analysis/src/completion/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs?ref=9f08341aa486ea59cb488635f19e960523568fb8", "patch": "@@ -38,10 +38,7 @@ pub(crate) fn completions(\n         original_file.reparse(&edit)\n     };\n \n-    let module = match ModuleDescriptor::guess_from_position(db, position)? {\n-        None => return Ok(None),\n-        Some(it) => it,\n-    };\n+    let module = ctry!(ModuleDescriptor::guess_from_position(db, position)?);\n \n     let mut res = Vec::new();\n     let mut has_completions = false;"}, {"sha": "858b52e76ecea587638f32685679dd70670fde85", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=9f08341aa486ea59cb488635f19e960523568fb8", "patch": "@@ -13,6 +13,7 @@ use crate::{\n     descriptors::{\n         module::{ModuleDescriptor},\n         function::FnScopes,\n+        Def,\n         Path,\n     },\n     Cancelable\n@@ -42,8 +43,7 @@ pub(super) fn completions(\n             let module_scope = module.scope(db)?;\n             acc.extend(\n                 module_scope\n-                    .items\n-                    .iter()\n+                    .entries()\n                     .filter(|(_name, res)| {\n                         // Don't expose this item\n                         match res.import {\n@@ -157,19 +157,20 @@ fn complete_path(\n         return Ok(());\n     }\n     path.segments.pop();\n-    let target_module = match module.resolve_path(path) {\n+    let def_id = match module.resolve_path(db, path)? {\n         None => return Ok(()),\n         Some(it) => it,\n     };\n+    let target_module = match def_id.resolve(db)? {\n+        Def::Module(it) => it,\n+        Def::Item => return Ok(()),\n+    };\n     let module_scope = target_module.scope(db)?;\n-    let completions = module_scope\n-        .items\n-        .iter()\n-        .map(|(name, _res)| CompletionItem {\n-            label: name.to_string(),\n-            lookup: None,\n-            snippet: None,\n-        });\n+    let completions = module_scope.entries().map(|(name, _res)| CompletionItem {\n+        label: name.to_string(),\n+        lookup: None,\n+        snippet: None,\n+    });\n     acc.extend(completions);\n     Ok(())\n }"}, {"sha": "7a1bcf4475899ec9edd03c651ef4cc081f2165c1", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=9f08341aa486ea59cb488635f19e960523568fb8", "patch": "@@ -13,9 +13,12 @@ use crate::{\n     FileId,\n     db::SyntaxDatabase,\n     descriptors::function::{resolve_local_name, FnId, FnScopes},\n-    descriptors::module::{ModuleId, ModuleTree, ModuleSource, nameres::{ItemMap, InputModuleItems, FileItems}},\n+    descriptors::module::{\n+        ModuleId, ModuleTree, ModuleSource, ModuleDescriptor,\n+        nameres::{ItemMap, InputModuleItems, FileItems}\n+    },\n     input::SourceRootId,\n-    loc2id::IdDatabase,\n+    loc2id::{IdDatabase, DefId, DefLoc},\n     syntax_ptr::LocalSyntaxPtr,\n     Cancelable,\n };\n@@ -67,6 +70,25 @@ salsa::query_group! {\n     }\n }\n \n+pub(crate) enum Def {\n+    Module(ModuleDescriptor),\n+    Item,\n+}\n+\n+impl DefId {\n+    pub(crate) fn resolve(self, db: &impl DescriptorDatabase) -> Cancelable<Def> {\n+        let loc = db.id_maps().def_loc(self);\n+        let res = match loc {\n+            DefLoc::Module { id, source_root } => {\n+                let descr = ModuleDescriptor::new(db, source_root, id)?;\n+                Def::Module(descr)\n+            }\n+            DefLoc::Item { .. } => Def::Item,\n+        };\n+        Ok(res)\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct ReferenceDescriptor {\n     pub range: TextRange,"}, {"sha": "78911d5d9c950fbac8b7e72e208b35bfdbbc2b2e", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=9f08341aa486ea59cb488635f19e960523568fb8", "patch": "@@ -17,6 +17,7 @@ use crate::{\n     descriptors::{Path, PathKind, DescriptorDatabase},\n     input::SourceRootId,\n     arena::{Arena, Id},\n+    loc2id::{DefLoc, DefId},\n };\n \n pub(crate) use self::nameres::ModuleScope;\n@@ -76,6 +77,20 @@ impl ModuleDescriptor {\n         Ok(res)\n     }\n \n+    pub(super) fn new(\n+        db: &impl DescriptorDatabase,\n+        source_root_id: SourceRootId,\n+        module_id: ModuleId,\n+    ) -> Cancelable<ModuleDescriptor> {\n+        let module_tree = db._module_tree(source_root_id)?;\n+        let res = ModuleDescriptor {\n+            tree: module_tree,\n+            source_root_id,\n+            module_id,\n+        };\n+        Ok(res)\n+    }\n+\n     /// Returns `mod foo;` or `mod foo {}` node whihc declared this module.\n     /// Returns `None` for the root module\n     pub fn parent_link_source(\n@@ -117,6 +132,14 @@ impl ModuleDescriptor {\n         Some(link.name(&self.tree))\n     }\n \n+    pub fn def_id(&self, db: &impl DescriptorDatabase) -> DefId {\n+        let def_loc = DefLoc::Module {\n+            id: self.module_id,\n+            source_root: self.source_root_id,\n+        };\n+        db.id_maps().def_id(def_loc)\n+    }\n+\n     /// Finds a child module with the specified name.\n     pub fn child(&self, name: &str) -> Option<ModuleDescriptor> {\n         let child_id = self.module_id.child(&self.tree, name)?;\n@@ -133,17 +156,28 @@ impl ModuleDescriptor {\n         Ok(res)\n     }\n \n-    pub(crate) fn resolve_path(&self, path: Path) -> Option<ModuleDescriptor> {\n+    pub(crate) fn resolve_path(\n+        &self,\n+        db: &impl DescriptorDatabase,\n+        path: Path,\n+    ) -> Cancelable<Option<DefId>> {\n         let mut curr = match path.kind {\n             PathKind::Crate => self.crate_root(),\n             PathKind::Self_ | PathKind::Plain => self.clone(),\n-            PathKind::Super => self.parent()?,\n-        };\n+            PathKind::Super => ctry!(self.parent()),\n+        }\n+        .def_id(db);\n+\n         let segments = path.segments;\n-        for name in segments {\n-            curr = curr.child(&name)?;\n+        for name in segments.iter() {\n+            let module = match db.id_maps().def_loc(curr) {\n+                DefLoc::Module { id, source_root } => ModuleDescriptor::new(db, source_root, id)?,\n+                _ => return Ok(None),\n+            };\n+            let scope = module.scope(db)?;\n+            curr = ctry!(ctry!(scope.get(&name)).def_id);\n         }\n-        Some(curr)\n+        Ok(Some(curr))\n     }\n \n     pub fn problems(&self, db: &impl DescriptorDatabase) -> Vec<(SyntaxNode, Problem)> {"}, {"sha": "d2964f67f9287eadc59d6ffd774a6216203161e7", "filename": "crates/ra_analysis/src/descriptors/module/nameres.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fnameres.rs?ref=9f08341aa486ea59cb488635f19e960523568fb8", "patch": "@@ -103,7 +103,16 @@ pub(crate) struct ItemMap {\n \n #[derive(Debug, Default, PartialEq, Eq, Clone)]\n pub(crate) struct ModuleScope {\n-    pub(crate) items: FxHashMap<SmolStr, Resolution>,\n+    items: FxHashMap<SmolStr, Resolution>,\n+}\n+\n+impl ModuleScope {\n+    pub(crate) fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a SmolStr, &Resolution)> + 'a {\n+        self.items.iter()\n+    }\n+    pub(crate) fn get(&self, name: &SmolStr) -> Option<&Resolution> {\n+        self.items.get(name)\n+    }\n }\n \n /// A set of items and imports declared inside a module, without relation to"}, {"sha": "8a41b31526551f631f505a33992af6e19a107a83", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=9f08341aa486ea59cb488635f19e960523568fb8", "patch": "@@ -450,14 +450,8 @@ impl AnalysisImpl {\n         let syntax = file.syntax();\n \n         // Find the calling expression and it's NameRef\n-        let calling_node = match FnCallNode::with_node(syntax, position.offset) {\n-            Some(node) => node,\n-            None => return Ok(None),\n-        };\n-        let name_ref = match calling_node.name_ref() {\n-            Some(name) => name,\n-            None => return Ok(None),\n-        };\n+        let calling_node = ctry!(FnCallNode::with_node(syntax, position.offset));\n+        let name_ref = ctry!(calling_node.name_ref());\n \n         // Resolve the function's NameRef (NOTE: this isn't entirely accurate).\n         let file_symbols = self.index_resolve(name_ref)?;"}, {"sha": "0fbfd8a408c16aa54e9276ba567ef52ec04babc3", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f08341aa486ea59cb488635f19e960523568fb8/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=9f08341aa486ea59cb488635f19e960523568fb8", "patch": "@@ -9,6 +9,15 @@ extern crate relative_path;\n extern crate rustc_hash;\n extern crate salsa;\n \n+macro_rules! ctry {\n+    ($expr:expr) => {\n+        match $expr {\n+            None => return Ok(None),\n+            Some(it) => it,\n+        }\n+    };\n+}\n+\n mod arena;\n mod db;\n mod loc2id;"}]}