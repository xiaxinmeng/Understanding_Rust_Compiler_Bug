{"sha": "5b10f4e117479afbf1cd69e471e4a63995187db5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMTBmNGUxMTc0NzlhZmJmMWNkNjllNDcxZTRhNjM5OTUxODdkYjU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-03-25T14:21:02Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-03-26T13:18:48Z"}, "message": "Miscellaneous documentation additions.\n\nAdded notes explaining how [expr, ..expr] form is used, targeted at\nindividuals like me who thought it was more general and handled\ndynamic repeat expressions.  (I left a TODO for this section in a\ncomment, but perhaps that is bad form for the manual...)\n\nAdded example of `do` syntax with a function of arity > 1; yes, one\nshould be able to derive this from the text above it, but it is still\na useful detail to compare and contrast against the arity == 1 case.\n\nAdded example of using for expression over a uint range, since someone\nwho is most used to write `for(int i; i < lim; i++) { ... }` will\nlikely want to know how to translate that form (regardless of whether\nit happens to be good style or not for their use-case).\n\nAdded note about the semi-strange meaning of \"fixed size\" of vectors\nin the vector type section.", "tree": {"sha": "d5f6bfab66b3ceb7df02c2dc93c818a3fc4ca773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5f6bfab66b3ceb7df02c2dc93c818a3fc4ca773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b10f4e117479afbf1cd69e471e4a63995187db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b10f4e117479afbf1cd69e471e4a63995187db5", "html_url": "https://github.com/rust-lang/rust/commit/5b10f4e117479afbf1cd69e471e4a63995187db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b10f4e117479afbf1cd69e471e4a63995187db5/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "125cdf52cd280ed8e82e02eedffa3dd8a0cbe42a", "url": "https://api.github.com/repos/rust-lang/rust/commits/125cdf52cd280ed8e82e02eedffa3dd8a0cbe42a", "html_url": "https://github.com/rust-lang/rust/commit/125cdf52cd280ed8e82e02eedffa3dd8a0cbe42a"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "3dca649807f425993438c4e24c2ef1a907bee0cf", "filename": "doc/rust.md", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5b10f4e117479afbf1cd69e471e4a63995187db5/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/5b10f4e117479afbf1cd69e471e4a63995187db5/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=5b10f4e117479afbf1cd69e471e4a63995187db5", "patch": "@@ -1671,6 +1671,12 @@ vec_elems : [expr [',' expr]*] | [expr ',' \"..\" expr]\n A [_vector_](#vector-types) _expression_ is written by enclosing zero or\n more comma-separated expressions of uniform type in square brackets.\n \n+In the `[expr ',' \"..\" expr]` form, the expression after the `\"..\"`\n+must be an expression form that can be evaluated at compile time, such\n+as a [literal](#literals) or a [constant](#constants).\n+\n+<!--- TODO: elaborate the actual subgrammar for constant expressions -->\n+\n ~~~~\n [1, 2, 3, 4];\n [\"a\", \"b\", \"c\", \"d\"];\n@@ -2156,6 +2162,19 @@ do f |j| {\n }\n ~~~~\n \n+In this example, both calls to the (binary) function `k` are equivalent:\n+\n+~~~~\n+# fn k(x:int, f: &fn(int)) { }\n+# fn l(i: int) { }\n+\n+k(3, |j| l(j));\n+\n+do k(3) |j| {\n+   l(j);\n+}\n+~~~~\n+\n \n ### For expressions\n \n@@ -2184,7 +2203,7 @@ and early boolean-valued returns from the `block` function,\n such that the meaning of `break` and `loop` is preserved in a primitive loop\n when rewritten as a `for` loop controlled by a higher order function.\n \n-An example a for loop:\n+An example of a for loop over the contents of a vector:\n \n ~~~~\n # type foo = int;\n@@ -2198,6 +2217,14 @@ for v.each |e| {\n }\n ~~~~\n \n+An example of a for loop over a series of integers:\n+\n+~~~~\n+# fn bar(b:uint) { }\n+for uint::range(0, 256) |i| {\n+    bar(i);\n+}\n+~~~~\n \n ### If expressions\n \n@@ -2474,6 +2501,7 @@ fail_unless!(b != \"world\");\n \n The vector type constructor represents a homogeneous array of values of a given type.\n A vector has a fixed size.\n+(Operations like `vec::push` operate solely on owned vectors.)\n A vector type can be annotated with a _definite_ size,\n written with a trailing asterisk and integer literal, such as `[int * 10]`.\n Such a definite-sized vector type is a first-class type, since its size is known statically.\n@@ -2484,6 +2512,10 @@ such as `&[T]`, `@[T]` or `~[T]`.\n The kind of a vector type depends on the kind of its element type,\n as with other simple structural types.\n \n+Expressions producing vectors of definite size cannot be evaluated in a\n+context expecting a vector of indefinite size; one must copy the\n+definite-sized vector contents into a distinct vector of indefinite size.\n+\n An example of a vector type and its use:\n \n ~~~~"}]}