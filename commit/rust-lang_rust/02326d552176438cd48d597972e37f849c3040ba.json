{"sha": "02326d552176438cd48d597972e37f849c3040ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMzI2ZDU1MjE3NjQzOGNkNDhkNTk3OTcyZTM3Zjg0OWMzMDQwYmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-11T23:55:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-11T23:55:20Z"}, "message": "Rollup merge of #83003 - notriddle:rustdoc-index-v3, r=GuillaumeGomez\n\nrustdoc: tweak the search index format\n\nThis essentially switches search-index.js from a \"array of struct\" to a \"struct of array\" format, like this:\n\n    {\n    \"doc\": \"Crate documentation\",\n    \"t\": [ 1, 1, 2, 3, ... ],\n    \"n\": [ \"Something\", \"SomethingElse\", \"whatever\", \"do_stuff\", ... ],\n    \"q\": [ \"a::b\", \"\", \"\", \"\", ... ],\n    \"d\": [ \"A Struct That Does Something\", \"Another Struct\", \"a function\", \"another function\", ... ],\n    \"i\": [ 0, 0, 1, 1, ... ],\n    \"f\": [ null, null, [], [], ... ],\n    \"p\": ...,\n    \"a\": ...\n    }\n\nSo `{ty: 1, name: \"Something\", path: \"a::b\", desc: \"A Struct That Does Something\", parent_idx: 0, search_type: null}` is the first item.\n\nThis makes the uncompressed version smaller, but it really shows on the compressed version:\n\n    notriddle:rust$ wc -c new-search-index1.52.0.js\n    2622427 new-search-index1.52.0.js\n    notriddle:rust$ wc -c old-search-index1.52.0.js\n    2725046 old-search-index1.52.0.js\n    notriddle:rust$ gzip new-search-index1.52.0.js\n    notriddle:rust$ gzip old-search-index1.52.0.js\n    notriddle:rust$ wc -c new-search-index1.52.0.js.gz\n    239385 new-search-index1.52.0.js.gz\n    notriddle:rust$ wc -c old-search-index1.52.0.js.gz\n    296328 old-search-index1.52.0.js.gz\n\nThat's a 4% improvement on the uncompressed version (fewer `[]`, and also changing `null` to `0` in the parent_idx list), and 20% improvement after gzipping it, thanks to putting like-typed data next to each other. Any compression algorithm based on a sliding window will probably show this kind of improvement.", "tree": {"sha": "e31b23ef5aa94918048cfed69ce66e918b099341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e31b23ef5aa94918048cfed69ce66e918b099341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02326d552176438cd48d597972e37f849c3040ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgSq3oCRBK7hj4Ov3rIwAAdHIIAG8nyRmxxdgxBD7+lN2T71x7\nkvKc4ja4GacPNQywqd59RvUspRsX19gCfdzwDILGb+LSIopQ/yGxvw0lmKqVHZhz\nYgWXCHIUBl88/v2o7QbK8U6OcJgXHXDAEVDc9Rt+zJXSyfqEfmGMUWjw/l0o9a/q\n8wsNAGx9+Lj4nJ8lN5k9mjqmmcDd4UYfYrzrgVSEVOGBPT1XUJfDIpEt4qc9vZI4\nX7FaL/5TZ/kF/9tX0BI9TcA5kf8gsqUOGiPHX5IuVvHDV+H3QXaeYfRLyhtGHmmK\nYVZynJ1in7b9HsUtQ8fYDZ7850qsB2zfsrdWSFode/QMhIXC+BNyAWgqIRlD/LQ=\n=quW7\n-----END PGP SIGNATURE-----\n", "payload": "tree e31b23ef5aa94918048cfed69ce66e918b099341\nparent 3e6e808aa69001eeb4b65cfeff165832616a7355\nparent 3934dd1b3e7514959202de6ca0d2636bcae21830\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615506920 +0900\ncommitter GitHub <noreply@github.com> 1615506920 +0900\n\nRollup merge of #83003 - notriddle:rustdoc-index-v3, r=GuillaumeGomez\n\nrustdoc: tweak the search index format\n\nThis essentially switches search-index.js from a \"array of struct\" to a \"struct of array\" format, like this:\n\n    {\n    \"doc\": \"Crate documentation\",\n    \"t\": [ 1, 1, 2, 3, ... ],\n    \"n\": [ \"Something\", \"SomethingElse\", \"whatever\", \"do_stuff\", ... ],\n    \"q\": [ \"a::b\", \"\", \"\", \"\", ... ],\n    \"d\": [ \"A Struct That Does Something\", \"Another Struct\", \"a function\", \"another function\", ... ],\n    \"i\": [ 0, 0, 1, 1, ... ],\n    \"f\": [ null, null, [], [], ... ],\n    \"p\": ...,\n    \"a\": ...\n    }\n\nSo `{ty: 1, name: \"Something\", path: \"a::b\", desc: \"A Struct That Does Something\", parent_idx: 0, search_type: null}` is the first item.\n\nThis makes the uncompressed version smaller, but it really shows on the compressed version:\n\n    notriddle:rust$ wc -c new-search-index1.52.0.js\n    2622427 new-search-index1.52.0.js\n    notriddle:rust$ wc -c old-search-index1.52.0.js\n    2725046 old-search-index1.52.0.js\n    notriddle:rust$ gzip new-search-index1.52.0.js\n    notriddle:rust$ gzip old-search-index1.52.0.js\n    notriddle:rust$ wc -c new-search-index1.52.0.js.gz\n    239385 new-search-index1.52.0.js.gz\n    notriddle:rust$ wc -c old-search-index1.52.0.js.gz\n    296328 old-search-index1.52.0.js.gz\n\nThat's a 4% improvement on the uncompressed version (fewer `[]`, and also changing `null` to `0` in the parent_idx list), and 20% improvement after gzipping it, thanks to putting like-typed data next to each other. Any compression algorithm based on a sliding window will probably show this kind of improvement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02326d552176438cd48d597972e37f849c3040ba", "html_url": "https://github.com/rust-lang/rust/commit/02326d552176438cd48d597972e37f849c3040ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02326d552176438cd48d597972e37f849c3040ba/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6e808aa69001eeb4b65cfeff165832616a7355", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6e808aa69001eeb4b65cfeff165832616a7355", "html_url": "https://github.com/rust-lang/rust/commit/3e6e808aa69001eeb4b65cfeff165832616a7355"}, {"sha": "3934dd1b3e7514959202de6ca0d2636bcae21830", "url": "https://api.github.com/repos/rust-lang/rust/commits/3934dd1b3e7514959202de6ca0d2636bcae21830", "html_url": "https://github.com/rust-lang/rust/commit/3934dd1b3e7514959202de6ca0d2636bcae21830"}], "stats": {"total": 116, "additions": 74, "deletions": 42}, "files": [{"sha": "56fee2c9fec2d78aae62a79afd4ab409ff2100bf", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/02326d552176438cd48d597972e37f849c3040ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02326d552176438cd48d597972e37f849c3040ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=02326d552176438cd48d597972e37f849c3040ba", "patch": "@@ -4,7 +4,7 @@ use std::path::Path;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n-use serde::Serialize;\n+use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean::types::{\n     FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, TypeKind, WherePredicate,\n@@ -133,21 +133,69 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         .map(|module| module.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)))\n         .unwrap_or_default();\n \n-    #[derive(Serialize)]\n     struct CrateData<'a> {\n         doc: String,\n-        #[serde(rename = \"i\")]\n         items: Vec<&'a IndexItem>,\n-        #[serde(rename = \"p\")]\n         paths: Vec<(ItemType, String)>,\n         // The String is alias name and the vec is the list of the elements with this alias.\n         //\n         // To be noted: the `usize` elements are indexes to `items`.\n-        #[serde(rename = \"a\")]\n-        #[serde(skip_serializing_if = \"BTreeMap::is_empty\")]\n         aliases: &'a BTreeMap<String, Vec<usize>>,\n     }\n \n+    impl<'a> Serialize for CrateData<'a> {\n+        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+        where\n+            S: Serializer,\n+        {\n+            let has_aliases = !self.aliases.is_empty();\n+            let mut crate_data =\n+                serializer.serialize_struct(\"CrateData\", if has_aliases { 9 } else { 8 })?;\n+            crate_data.serialize_field(\"doc\", &self.doc)?;\n+            crate_data.serialize_field(\n+                \"t\",\n+                &self.items.iter().map(|item| &item.ty).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"n\",\n+                &self.items.iter().map(|item| &item.name).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"q\",\n+                &self.items.iter().map(|item| &item.path).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"d\",\n+                &self.items.iter().map(|item| &item.desc).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"i\",\n+                &self\n+                    .items\n+                    .iter()\n+                    .map(|item| {\n+                        assert_eq!(\n+                            item.parent.is_some(),\n+                            item.parent_idx.is_some(),\n+                            \"`{}` is missing idx\",\n+                            item.name\n+                        );\n+                        item.parent_idx.map(|x| x + 1).unwrap_or(0)\n+                    })\n+                    .collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"f\",\n+                &self.items.iter().map(|item| &item.search_type).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\"p\", &self.paths)?;\n+            if has_aliases {\n+                crate_data.serialize_field(\"a\", &self.aliases)?;\n+            }\n+            crate_data.end()\n+        }\n+    }\n+\n     // Collect the index into a string\n     format!(\n         r#\"\"{}\":{}\"#,"}, {"sha": "66c47f14655baaea4a1c607e4655b4e0fb1740c3", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02326d552176438cd48d597972e37f849c3040ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02326d552176438cd48d597972e37f849c3040ba/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=02326d552176438cd48d597972e37f849c3040ba", "patch": "@@ -166,23 +166,6 @@ crate struct IndexItem {\n     crate search_type: Option<IndexItemFunctionType>,\n }\n \n-impl Serialize for IndexItem {\n-    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n-    where\n-        S: Serializer,\n-    {\n-        assert_eq!(\n-            self.parent.is_some(),\n-            self.parent_idx.is_some(),\n-            \"`{}` is missing idx\",\n-            self.name\n-        );\n-\n-        (self.ty, &self.name, &self.path, &self.desc, self.parent_idx, &self.search_type)\n-            .serialize(serializer)\n-    }\n-}\n-\n /// A type used for the search index.\n #[derive(Debug)]\n crate struct RenderType {"}, {"sha": "ac2da5f779bd1dfb1ef207961402aa8aed4d489f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/02326d552176438cd48d597972e37f849c3040ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/02326d552176438cd48d597972e37f849c3040ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=02326d552176438cd48d597972e37f849c3040ba", "patch": "@@ -1847,13 +1847,18 @@ function defocusSearchBar() {\n                 });\n                 currentIndex += 1;\n \n-                // an array of [(Number) item type,\n-                //              (String) name,\n-                //              (String) full path or empty string for previous path,\n-                //              (String) description,\n-                //              (Number | null) the parent path index to `paths`]\n-                //              (Object | null) the type of the function (if any)\n-                var items = rawSearchIndex[crate].i;\n+                // an array of (Number) item types\n+                var itemTypes = rawSearchIndex[crate].t;\n+                // an array of (String) item names\n+                var itemNames = rawSearchIndex[crate].n;\n+                // an array of (String) full paths (or empty string for previous path)\n+                var itemPaths = rawSearchIndex[crate].q;\n+                // an array of (String) descriptions\n+                var itemDescs = rawSearchIndex[crate].d;\n+                // an array of (Number) the parent path index + 1 to `paths`, or 0 if none\n+                var itemParentIdxs = rawSearchIndex[crate].i;\n+                // an array of (Object | null) the type of the function, if any\n+                var itemFunctionSearchTypes = rawSearchIndex[crate].f;\n                 // an array of [(Number) item type,\n                 //              (String) name]\n                 var paths = rawSearchIndex[crate].p;\n@@ -1867,28 +1872,24 @@ function defocusSearchBar() {\n                     paths[i] = {ty: paths[i][0], name: paths[i][1]};\n                 }\n \n-                // convert `items` into an object form, and construct word indices.\n+                // convert `item*` into an object form, and construct word indices.\n                 //\n                 // before any analysis is performed lets gather the search terms to\n                 // search against apart from the rest of the data.  This is a quick\n                 // operation that is cached for the life of the page state so that\n                 // all other search operations have access to this cached data for\n                 // faster analysis operations\n-                len = items.length;\n+                len = itemTypes.length;\n                 var lastPath = \"\";\n                 for (i = 0; i < len; ++i) {\n-                    var rawRow = items[i];\n-                    if (!rawRow[2]) {\n-                        rawRow[2] = lastPath;\n-                    }\n                     var row = {\n                         crate: crate,\n-                        ty: rawRow[0],\n-                        name: rawRow[1],\n-                        path: rawRow[2],\n-                        desc: rawRow[3],\n-                        parent: paths[rawRow[4]],\n-                        type: rawRow[5],\n+                        ty: itemTypes[i],\n+                        name: itemNames[i],\n+                        path: itemPaths[i] ? itemPaths[i] : lastPath,\n+                        desc: itemDescs[i],\n+                        parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n+                        type: itemFunctionSearchTypes[i],\n                     };\n                     searchIndex.push(row);\n                     if (typeof row.name === \"string\") {"}]}