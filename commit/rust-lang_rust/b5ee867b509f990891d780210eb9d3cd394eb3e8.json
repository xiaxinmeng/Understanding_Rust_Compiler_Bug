{"sha": "b5ee867b509f990891d780210eb9d3cd394eb3e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZWU4NjdiNTA5Zjk5MDg5MWQ3ODAyMTBlYjlkM2NkMzk0ZWIzZTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-13T20:28:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-13T20:28:06Z"}, "message": "Rollup merge of #69108 - cjgillot:trait_candidate, r=Zoxc\n\nUse HirId in TraitCandidate.\n\nI had to duplicate the `TraitMap` type to hold `NodeId`s until AST->HIR lowering is done.\n\nr? @Zoxc", "tree": {"sha": "2c58958d163410e8947891931c426f69ca04d871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c58958d163410e8947891931c426f69ca04d871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ee867b509f990891d780210eb9d3cd394eb3e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRbFWCRBK7hj4Ov3rIwAAdHIIAD6oNhXZ3SPWfUx57xEeJMh8\ni3MboYuymgPbxkzDU9A/QghD4GTx0MRn78qWLi2kRX3l6vfRIZTDgc+/Dc5/29Ub\noSb0dVr9bjjm0pF8GhngOmNiUlBbnTcwNvkVEwPIKXKe2bYdLJ5BV9MIJnY0b22p\nWTN8lTHDQhecMu9A2dO92DXYyp0bsQ0hHtWcEHJZnNsXiKAueO4K2e3GyXaQ5Olq\n5uauBJ3T44n8aFq7j1GoepGSCNSjW6A/Hfs77rR7yw/oTM19vZHCjgK/9JcQQ79q\nVbFLiR5m1sKfoOR6UBwdSWTBKU/i/gswxxTbL2Eda26PRrSLLdIrBrtmej7Uveo=\n=ijTJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c58958d163410e8947891931c426f69ca04d871\nparent fc51170af5425853dc28997b39f91755b3c386c4\nparent 2a899e2a2f3eb442af7637f3b9fce529f8441978\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581625686 +0100\ncommitter GitHub <noreply@github.com> 1581625686 +0100\n\nRollup merge of #69108 - cjgillot:trait_candidate, r=Zoxc\n\nUse HirId in TraitCandidate.\n\nI had to duplicate the `TraitMap` type to hold `NodeId`s until AST->HIR lowering is done.\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ee867b509f990891d780210eb9d3cd394eb3e8", "html_url": "https://github.com/rust-lang/rust/commit/b5ee867b509f990891d780210eb9d3cd394eb3e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ee867b509f990891d780210eb9d3cd394eb3e8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc51170af5425853dc28997b39f91755b3c386c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc51170af5425853dc28997b39f91755b3c386c4", "html_url": "https://github.com/rust-lang/rust/commit/fc51170af5425853dc28997b39f91755b3c386c4"}, {"sha": "2a899e2a2f3eb442af7637f3b9fce529f8441978", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a899e2a2f3eb442af7637f3b9fce529f8441978", "html_url": "https://github.com/rust-lang/rust/commit/2a899e2a2f3eb442af7637f3b9fce529f8441978"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "eadc9ddeee6fc827af0b4736b02abc0bb7876f13", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=b5ee867b509f990891d780210eb9d3cd394eb3e8", "patch": "@@ -270,7 +270,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n \n         let import_keys = import_ids\n             .iter()\n-            .map(|node_id| hcx.node_to_hir_id(*node_id))\n             .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner), hir_id.local_id))\n             .collect();\n         (hcx.def_path_hash(*def_id), import_keys)"}, {"sha": "b2eb122bfeeade2e4916f9c8e9e7465b4940eb74", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b5ee867b509f990891d780210eb9d3cd394eb3e8", "patch": "@@ -1161,6 +1161,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         for (k, v) in resolutions.trait_map {\n             let hir_id = hir.node_to_hir_id(k);\n             let map = trait_map.entry(hir_id.owner).or_default();\n+            let v = v\n+                .into_iter()\n+                .map(|tc| tc.map_import_ids(|id| hir.definitions().node_to_hir_id(id)))\n+                .collect();\n             map.insert(hir_id.local_id, StableVec::new(v));\n         }\n "}, {"sha": "ad51c60ab017874a627720aca95c6796a5e60569", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b5ee867b509f990891d780210eb9d3cd394eb3e8", "patch": "@@ -126,7 +126,7 @@ pub struct ResolverOutputs {\n     pub definitions: hir_map::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n     pub extern_crate_map: NodeMap<CrateNum>,\n-    pub trait_map: TraitMap,\n+    pub trait_map: TraitMap<NodeId>,\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap<NodeId>,"}, {"sha": "80b379218a5d50d0fd79735a3d8bc65742c23de1", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=b5ee867b509f990891d780210eb9d3cd394eb3e8", "patch": "@@ -16,7 +16,7 @@ use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name, NodeId};\n+use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name};\n use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use syntax::ast::{CaptureBy, Movability, Mutability};\n@@ -2608,13 +2608,24 @@ pub type CaptureModeMap = NodeMap<CaptureBy>;\n // has length > 0 if the trait is found through an chain of imports, starting with the\n // import/use statement in the scope where the trait is used.\n #[derive(Clone, Debug)]\n-pub struct TraitCandidate {\n+pub struct TraitCandidate<ID = HirId> {\n     pub def_id: DefId,\n-    pub import_ids: SmallVec<[NodeId; 1]>,\n+    pub import_ids: SmallVec<[ID; 1]>,\n+}\n+\n+impl<ID> TraitCandidate<ID> {\n+    pub fn map_import_ids<F, T>(self, f: F) -> TraitCandidate<T>\n+    where\n+        F: Fn(ID) -> T,\n+    {\n+        let TraitCandidate { def_id, import_ids } = self;\n+        let import_ids = import_ids.into_iter().map(f).collect();\n+        TraitCandidate { def_id, import_ids }\n+    }\n }\n \n // Trait method resolution\n-pub type TraitMap = NodeMap<Vec<TraitCandidate>>;\n+pub type TraitMap<ID = HirId> = NodeMap<Vec<TraitCandidate<ID>>>;\n \n // Map from the NodeId of a glob import to a list of items which are actually\n // imported."}, {"sha": "bcf558d1563edd66d2bb522e6c25d86378534d27", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=b5ee867b509f990891d780210eb9d3cd394eb3e8", "patch": "@@ -2078,7 +2078,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         &mut self,\n         mut ident: Ident,\n         ns: Namespace,\n-    ) -> Vec<TraitCandidate> {\n+    ) -> Vec<TraitCandidate<NodeId>> {\n         debug!(\"(getting traits containing item) looking for '{}'\", ident.name);\n \n         let mut found_traits = Vec::new();\n@@ -2123,7 +2123,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         ident: Ident,\n         ns: Namespace,\n         module: Module<'a>,\n-        found_traits: &mut Vec<TraitCandidate>,\n+        found_traits: &mut Vec<TraitCandidate<NodeId>>,\n     ) {\n         assert!(ns == TypeNS || ns == ValueNS);\n         let mut traits = module.traits.borrow_mut();"}, {"sha": "4278bf867f305a4a1616b284d3ef95ce61eaec73", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b5ee867b509f990891d780210eb9d3cd394eb3e8", "patch": "@@ -865,7 +865,7 @@ pub struct Resolver<'a> {\n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: NodeMap<CrateNum>,\n     export_map: ExportMap<NodeId>,\n-    trait_map: TraitMap,\n+    trait_map: TraitMap<NodeId>,\n \n     /// A map from nodes to anonymous modules.\n     /// Anonymous modules are pseudo-modules that are implicitly created around items"}, {"sha": "8f0fbc2d60c9fc06951e42cbf760530235671787", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ee867b509f990891d780210eb9d3cd394eb3e8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b5ee867b509f990891d780210eb9d3cd394eb3e8", "patch": "@@ -902,13 +902,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n-                    let import_ids = trait_candidate\n-                        .import_ids\n-                        .iter()\n-                        .map(|node_id| self.fcx.tcx.hir().node_to_hir_id(*node_id))\n-                        .collect();\n-                    let result =\n-                        self.assemble_extension_candidates_for_trait(import_ids, trait_did);\n+                    let result = self.assemble_extension_candidates_for_trait(\n+                        &trait_candidate.import_ids,\n+                        trait_did,\n+                    );\n                     result?;\n                 }\n             }\n@@ -920,7 +917,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let mut duplicates = FxHashSet::default();\n         for trait_info in suggest::all_traits(self.tcx) {\n             if duplicates.insert(trait_info.def_id) {\n-                self.assemble_extension_candidates_for_trait(smallvec![], trait_info.def_id)?;\n+                self.assemble_extension_candidates_for_trait(&smallvec![], trait_info.def_id)?;\n             }\n         }\n         Ok(())\n@@ -959,7 +956,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     fn assemble_extension_candidates_for_trait(\n         &mut self,\n-        import_ids: SmallVec<[hir::HirId; 1]>,\n+        import_ids: &SmallVec<[hir::HirId; 1]>,\n         trait_def_id: DefId,\n     ) -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);"}]}