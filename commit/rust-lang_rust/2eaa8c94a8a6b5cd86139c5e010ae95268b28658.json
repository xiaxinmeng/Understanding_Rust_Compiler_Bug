{"sha": "2eaa8c94a8a6b5cd86139c5e010ae95268b28658", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYWE4Yzk0YThhNmI1Y2Q4NjEzOWM1ZTAxMGFlOTUyNjhiMjg2NTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-16T13:49:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-16T14:00:54Z"}, "message": "Goto definition works inside macros", "tree": {"sha": "ba86bbb6e4e82fb1a85ab6a830173c00f2415d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba86bbb6e4e82fb1a85ab6a830173c00f2415d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eaa8c94a8a6b5cd86139c5e010ae95268b28658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eaa8c94a8a6b5cd86139c5e010ae95268b28658", "html_url": "https://github.com/rust-lang/rust/commit/2eaa8c94a8a6b5cd86139c5e010ae95268b28658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "url": "https://api.github.com/repos/rust-lang/rust/commits/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "html_url": "https://github.com/rust-lang/rust/commit/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "75a467fb392f336be29862f09b23c5f655d4d31c", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=2eaa8c94a8a6b5cd86139c5e010ae95268b28658", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     expr::{ExprId, PatId},\n     path::known,\n };\n-use hir_expand::{name::AsName, Source};\n+use hir_expand::{name::AsName, AstId, MacroCallId, MacroCallLoc, MacroFileKind, Source};\n use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast, AstPtr,\n@@ -126,6 +126,20 @@ pub struct ReferenceDescriptor {\n     pub name: String,\n }\n \n+pub struct Expansion {\n+    macro_call_id: MacroCallId,\n+}\n+\n+impl Expansion {\n+    pub fn translate_offset(&self, db: &impl HirDatabase, offset: TextUnit) -> Option<TextUnit> {\n+        let exp_info = self.file_id().expansion_info(db)?;\n+        exp_info.translate_offset(offset)\n+    }\n+    pub fn file_id(&self) -> HirFileId {\n+        self.macro_call_id.as_file(MacroFileKind::Items)\n+    }\n+}\n+\n impl SourceAnalyzer {\n     pub fn new(\n         db: &impl HirDatabase,\n@@ -386,6 +400,13 @@ impl SourceAnalyzer {\n         implements_trait(&canonical_ty, db, &self.resolver, krate, std_future_trait)\n     }\n \n+    pub fn expand(&self, db: &impl HirDatabase, macro_call: &ast::MacroCall) -> Option<Expansion> {\n+        let def = self.resolve_macro_call(db, macro_call)?.id;\n+        let ast_id = AstId::new(self.file_id, db.ast_id_map(self.file_id).ast_id(macro_call));\n+        let macro_call_loc = MacroCallLoc { def, ast_id };\n+        Some(Expansion { macro_call_id: db.intern_macro(macro_call_loc) })\n+    }\n+\n     #[cfg(test)]\n     pub(crate) fn body_source_map(&self) -> Arc<BodySourceMap> {\n         self.body_source_map.clone().unwrap()"}, {"sha": "6bfbb2f799688435466f04269ff61fa81e8c7819", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=2eaa8c94a8a6b5cd86139c5e010ae95268b28658", "patch": "@@ -160,6 +160,15 @@ pub struct ExpansionInfo {\n }\n \n impl ExpansionInfo {\n+    pub fn translate_offset(&self, offset: TextUnit) -> Option<TextUnit> {\n+        let offset = offset.checked_sub(self.arg_start.1)?;\n+        let token_id = self.macro_arg.1.token_by_offset(offset)?;\n+        let token_id = tt::TokenId(token_id.0 + self.shift);\n+\n+        let (r, _) = self.exp_map.ranges.iter().find(|(_, tid)| *tid == token_id)?;\n+        Some(r.start())\n+    }\n+\n     pub fn find_range(&self, from: TextRange) -> Option<(HirFileId, TextRange)> {\n         let token_id = look_in_rev_map(&self.exp_map, from)?;\n "}, {"sha": "4b15814994c9d9c7189b62aa93ab543730ef4b3b", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=2eaa8c94a8a6b5cd86139c5e010ae95268b28658", "patch": "@@ -1,11 +1,10 @@\n //! FIXME: write short doc here\n \n-use hir::Source;\n-use ra_db::SourceDatabase;\n+use hir::{db::AstDatabase, Source};\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, DocCommentsOwner},\n-    match_ast, AstNode, SyntaxNode,\n+    match_ast, AstNode, SyntaxNode, TextUnit,\n };\n \n use crate::{\n@@ -19,17 +18,29 @@ pub(crate) fn goto_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let parse = db.parse(position.file_id);\n-    let syntax = parse.tree().syntax().clone();\n-    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(&syntax, position.offset) {\n-        let navs =\n-            reference_definition(db, Source::new(position.file_id.into(), &name_ref)).to_vec();\n+    go(db, Source::new(position.file_id.into(), position.offset))\n+}\n+\n+fn go(db: &RootDatabase, offset: Source<TextUnit>) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n+    let syntax = db.parse_or_expand(offset.file_id)?;\n+\n+    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(&syntax, offset.ast) {\n+        let navs = reference_definition(db, offset.with_ast(&name_ref)).to_vec();\n         return Some(RangeInfo::new(name_ref.syntax().text_range(), navs.to_vec()));\n     }\n-    if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, position.offset) {\n-        let navs = name_definition(db, Source::new(position.file_id.into(), &name))?;\n+    if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, offset.ast) {\n+        let navs = name_definition(db, offset.with_ast(&name))?;\n         return Some(RangeInfo::new(name.syntax().text_range(), navs));\n     }\n+    if let Some(macro_call) = find_node_at_offset::<ast::MacroCall>(&syntax, offset.ast) {\n+        let source_analyzer =\n+            hir::SourceAnalyzer::new(db, offset.with_ast(macro_call.syntax()), None);\n+        if let Some(exp) = source_analyzer.expand(db, &macro_call) {\n+            if let Some(offset) = exp.translate_offset(db, offset.ast) {\n+                return go(db, Source::new(exp.file_id(), offset));\n+            }\n+        }\n+    }\n     None\n }\n \n@@ -677,4 +688,23 @@ mod tests {\n             \"bar MODULE FileId(1) [0; 11) [4; 7)\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_from_macro() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)* }\n+            }\n+            fn foo() {}\n+            id! {\n+                fn bar() {\n+                    fo<|>o();\n+                }\n+            }\n+            \",\n+            \"foo FN_DEF FileId(1) [52; 63) [55; 58)\",\n+        );\n+    }\n }"}, {"sha": "37382d2df7414bc525329e409436e7c179a75b40", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eaa8c94a8a6b5cd86139c5e010ae95268b28658/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=2eaa8c94a8a6b5cd86139c5e010ae95268b28658", "patch": "@@ -77,6 +77,12 @@ pub fn token_tree_to_syntax_node(\n }\n \n impl TokenMap {\n+    pub fn token_by_offset(&self, relative_offset: TextUnit) -> Option<tt::TokenId> {\n+        let (idx, _) =\n+            self.tokens.iter().enumerate().find(|(_, range)| range.contains(relative_offset))?;\n+        Some(tt::TokenId(idx as u32))\n+    }\n+\n     pub fn relative_range_of(&self, tt: tt::TokenId) -> Option<TextRange> {\n         let idx = tt.0 as usize;\n         self.tokens.get(idx).copied()"}]}