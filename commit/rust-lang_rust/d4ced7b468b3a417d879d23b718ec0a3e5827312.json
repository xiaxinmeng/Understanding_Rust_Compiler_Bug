{"sha": "d4ced7b468b3a417d879d23b718ec0a3e5827312", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0Y2VkN2I0NjhiM2E0MTdkODc5ZDIzYjcxOGVjMGEzZTU4MjczMTI=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-01-21T11:44:49Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-01-21T11:44:49Z"}, "message": "De-mut the parser", "tree": {"sha": "d17c7d7a084823c0c4a8d59b85c4a015517006c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d17c7d7a084823c0c4a8d59b85c4a015517006c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ced7b468b3a417d879d23b718ec0a3e5827312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ced7b468b3a417d879d23b718ec0a3e5827312", "html_url": "https://github.com/rust-lang/rust/commit/d4ced7b468b3a417d879d23b718ec0a3e5827312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ced7b468b3a417d879d23b718ec0a3e5827312/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e28dd0c88030b8661f0c414eb0af3e09840b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e28dd0c88030b8661f0c414eb0af3e09840b31", "html_url": "https://github.com/rust-lang/rust/commit/51e28dd0c88030b8661f0c414eb0af3e09840b31"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "2ce4aa5814653d812f7fa8c46ca842da6ec08b7b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ced7b468b3a417d879d23b718ec0a3e5827312/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ced7b468b3a417d879d23b718ec0a3e5827312/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d4ced7b468b3a417d879d23b718ec0a3e5827312", "patch": "@@ -364,7 +364,7 @@ pub mod with_hygiene {\n }\n \n /// Abort if necessary\n-pub fn maybe_aborted<T>(result: T, mut p: Parser) -> T {\n+pub fn maybe_aborted<T>(result: T, p: Parser) -> T {\n     p.abort_if_errors();\n     result\n }"}, {"sha": "e538877edc8619d5f7aa2ff89d04b0c6de564ee6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d4ced7b468b3a417d879d23b718ec0a3e5827312/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ced7b468b3a417d879d23b718ec0a3e5827312/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d4ced7b468b3a417d879d23b718ec0a3e5827312", "patch": "@@ -382,18 +382,18 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Convert the current token to a string using self's reader\n-    pub fn this_token_to_string(&mut self) -> String {\n+    pub fn this_token_to_string(&self) -> String {\n         Parser::token_to_string(&self.token)\n     }\n \n-    pub fn unexpected_last(&mut self, t: &token::Token) -> ! {\n+    pub fn unexpected_last(&self, t: &token::Token) -> ! {\n         let token_str = Parser::token_to_string(t);\n         let last_span = self.last_span;\n         self.span_fatal(last_span, &format!(\"unexpected token: `{}`\",\n                                                 token_str)[]);\n     }\n \n-    pub fn unexpected(&mut self) -> ! {\n+    pub fn unexpected(&self) -> ! {\n         let this_token = self.this_token_to_string();\n         self.fatal(&format!(\"unexpected token: `{}`\", this_token)[]);\n     }\n@@ -660,7 +660,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn expect_no_suffix(&mut self, sp: Span, kind: &str, suffix: Option<ast::Name>) {\n+    pub fn expect_no_suffix(&self, sp: Span, kind: &str, suffix: Option<ast::Name>) {\n         match suffix {\n             None => {/* everything ok */}\n             Some(suf) => {\n@@ -983,39 +983,39 @@ impl<'a> Parser<'a> {\n         }\n         f(&self.buffer[((self.buffer_start + dist - 1) & 3) as uint].tok)\n     }\n-    pub fn fatal(&mut self, m: &str) -> ! {\n+    pub fn fatal(&self, m: &str) -> ! {\n         self.sess.span_diagnostic.span_fatal(self.span, m)\n     }\n-    pub fn span_fatal(&mut self, sp: Span, m: &str) -> ! {\n+    pub fn span_fatal(&self, sp: Span, m: &str) -> ! {\n         self.sess.span_diagnostic.span_fatal(sp, m)\n     }\n-    pub fn span_fatal_help(&mut self, sp: Span, m: &str, help: &str) -> ! {\n+    pub fn span_fatal_help(&self, sp: Span, m: &str, help: &str) -> ! {\n         self.span_err(sp, m);\n         self.span_help(sp, help);\n         panic!(diagnostic::FatalError);\n     }\n-    pub fn span_note(&mut self, sp: Span, m: &str) {\n+    pub fn span_note(&self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_note(sp, m)\n     }\n-    pub fn span_help(&mut self, sp: Span, m: &str) {\n+    pub fn span_help(&self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_help(sp, m)\n     }\n-    pub fn bug(&mut self, m: &str) -> ! {\n+    pub fn bug(&self, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(self.span, m)\n     }\n-    pub fn warn(&mut self, m: &str) {\n+    pub fn warn(&self, m: &str) {\n         self.sess.span_diagnostic.span_warn(self.span, m)\n     }\n-    pub fn span_warn(&mut self, sp: Span, m: &str) {\n+    pub fn span_warn(&self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_warn(sp, m)\n     }\n-    pub fn span_err(&mut self, sp: Span, m: &str) {\n+    pub fn span_err(&self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_err(sp, m)\n     }\n-    pub fn span_bug(&mut self, sp: Span, m: &str) -> ! {\n+    pub fn span_bug(&self, sp: Span, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(sp, m)\n     }\n-    pub fn abort_if_errors(&mut self) {\n+    pub fn abort_if_errors(&self) {\n         self.sess.span_diagnostic.handler().abort_if_errors();\n     }\n \n@@ -1670,7 +1670,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Matches token_lit = LIT_INTEGER | ...\n-    pub fn lit_from_token(&mut self, tok: &token::Token) -> Lit_ {\n+    pub fn lit_from_token(&self, tok: &token::Token) -> Lit_ {\n         match *tok {\n             token::Interpolated(token::NtExpr(ref v)) => {\n                 match v.node {"}]}