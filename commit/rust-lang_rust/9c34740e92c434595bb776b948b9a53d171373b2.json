{"sha": "9c34740e92c434595bb776b948b9a53d171373b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzQ3NDBlOTJjNDM0NTk1YmI3NzZiOTQ4YjlhNTNkMTcxMzczYjI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-12T12:49:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-12T12:49:06Z"}, "message": "Rollup merge of #71048 - arlosi:normalize_ext_src, r=eddyb\n\nNormalize source when loading external foreign source into SourceMap\n\nThe compiler normalizes source when reading files initially (removes BOMs, etc), but not when loading external sources.\n\nThis leads to the external source matching according to the `src_hash`, but differing internally because it was not normalized.\n\nFixes #70874.", "tree": {"sha": "76bbdbf0757e5857dae3dba66280b5181a4367a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76bbdbf0757e5857dae3dba66280b5181a4367a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c34740e92c434595bb776b948b9a53d171373b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekw5CCRBK7hj4Ov3rIwAAdHIIACbnIefF2IULMbTYSaB7K5Pn\n+8U355Rm/o3KAINt3DEN7UjRmdTPJdEb0bC3QahYcZYYKJBBcUOA9w541sRovrK/\nFuYGamIP4ItxP6JBIdzi7duv1FMrAUYFCO9nJmNV6ICnZpv9erL2NWaG8f1ojd+l\n8xPLeFhbnIO6wA6WQiFaq0Wi0jon2olaTums/EjJsyTTZlX5vZ+D7f4uAexodCH5\neiJsyFAlRBE9MAa/Rx35IlqwTH2CiXLZa+9ZneE8TtNpMfTiimCoBm1gejSQv76D\nzALR88DBhrSOfJgzmMX9IX9+LLXw/0TPcOsyhLpdJDV8w23Ylrs8YZRtB46Ii8w=\n=ziSS\n-----END PGP SIGNATURE-----\n", "payload": "tree 76bbdbf0757e5857dae3dba66280b5181a4367a6\nparent d608dfc4f54358242963b794cf946802ec9bb9f8\nparent f41aa161c223b6490486d81339f4da91e80b8c0a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586695746 +0200\ncommitter GitHub <noreply@github.com> 1586695746 +0200\n\nRollup merge of #71048 - arlosi:normalize_ext_src, r=eddyb\n\nNormalize source when loading external foreign source into SourceMap\n\nThe compiler normalizes source when reading files initially (removes BOMs, etc), but not when loading external sources.\n\nThis leads to the external source matching according to the `src_hash`, but differing internally because it was not normalized.\n\nFixes #70874.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c34740e92c434595bb776b948b9a53d171373b2", "html_url": "https://github.com/rust-lang/rust/commit/9c34740e92c434595bb776b948b9a53d171373b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c34740e92c434595bb776b948b9a53d171373b2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d608dfc4f54358242963b794cf946802ec9bb9f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d608dfc4f54358242963b794cf946802ec9bb9f8", "html_url": "https://github.com/rust-lang/rust/commit/d608dfc4f54358242963b794cf946802ec9bb9f8"}, {"sha": "f41aa161c223b6490486d81339f4da91e80b8c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f41aa161c223b6490486d81339f4da91e80b8c0a", "html_url": "https://github.com/rust-lang/rust/commit/f41aa161c223b6490486d81339f4da91e80b8c0a"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "85a870ae34c11b0bbd97a5fdb96b3c1a3ba63a39", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c34740e92c434595bb776b948b9a53d171373b2/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c34740e92c434595bb776b948b9a53d171373b2/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=9c34740e92c434595bb776b948b9a53d171373b2", "patch": "@@ -1192,8 +1192,10 @@ impl SourceFile {\n                 kind: src_kind @ ExternalSourceKind::AbsentOk, ..\n             } = &mut *external_src\n             {\n-                if let Some(src) = src {\n+                if let Some(mut src) = src {\n+                    // The src_hash needs to be computed on the pre-normalized src.\n                     if self.src_hash.matches(&src) {\n+                        normalize_src(&mut src, BytePos::from_usize(0));\n                         *src_kind = ExternalSourceKind::Present(Lrc::new(src));\n                         return true;\n                     }"}, {"sha": "b8459eee4ecf0e6a84ba86cd6e0ff48b32a5c114", "filename": "src/librustc_span/source_map/tests.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9c34740e92c434595bb776b948b9a53d171373b2/src%2Flibrustc_span%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c34740e92c434595bb776b948b9a53d171373b2/src%2Flibrustc_span%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map%2Ftests.rs?ref=9c34740e92c434595bb776b948b9a53d171373b2", "patch": "@@ -168,6 +168,62 @@ fn span_merging_fail() {\n     assert!(sm.merge_spans(span1, span2).is_none());\n }\n \n+/// Tests loading an external source file that requires normalization.\n+#[test]\n+fn t10() {\n+    let sm = SourceMap::new(FilePathMapping::empty());\n+    let unnormalized = \"first line.\\r\\nsecond line\";\n+    let normalized = \"first line.\\nsecond line\";\n+\n+    let src_file = sm.new_source_file(PathBuf::from(\"blork.rs\").into(), unnormalized.to_string());\n+\n+    assert_eq!(src_file.src.as_ref().unwrap().as_ref(), normalized);\n+    assert!(\n+        src_file.src_hash.matches(unnormalized),\n+        \"src_hash should use the source before normalization\"\n+    );\n+\n+    let SourceFile {\n+        name,\n+        name_was_remapped,\n+        src_hash,\n+        start_pos,\n+        end_pos,\n+        lines,\n+        multibyte_chars,\n+        non_narrow_chars,\n+        normalized_pos,\n+        name_hash,\n+        ..\n+    } = (*src_file).clone();\n+\n+    let imported_src_file = sm.new_imported_source_file(\n+        name,\n+        name_was_remapped,\n+        src_hash,\n+        name_hash,\n+        (end_pos - start_pos).to_usize(),\n+        CrateNum::new(0),\n+        lines,\n+        multibyte_chars,\n+        non_narrow_chars,\n+        normalized_pos,\n+        start_pos,\n+        end_pos,\n+    );\n+\n+    assert!(\n+        imported_src_file.external_src.borrow().get_source().is_none(),\n+        \"imported source file should not have source yet\"\n+    );\n+    imported_src_file.add_external_src(|| Some(unnormalized.to_string()));\n+    assert_eq!(\n+        imported_src_file.external_src.borrow().get_source().unwrap().as_ref(),\n+        normalized,\n+        \"imported source file should be normalized\"\n+    );\n+}\n+\n /// Returns the span corresponding to the `n`th occurrence of `substring` in `source_text`.\n trait SourceMapExtension {\n     fn span_substr("}]}