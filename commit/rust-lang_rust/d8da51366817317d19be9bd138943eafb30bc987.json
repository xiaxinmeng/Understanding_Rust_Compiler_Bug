{"sha": "d8da51366817317d19be9bd138943eafb30bc987", "node_id": "C_kwDOAAsO6NoAKGQ4ZGE1MTM2NjgxNzMxN2QxOWJlOWJkMTM4OTQzZWFmYjMwYmM5ODc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-28T10:00:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-28T10:00:56Z"}, "message": "Auto merge of #106916 - lukas-code:overlapping-substs, r=estebank\n\nRemove overlapping parts of multipart suggestions\n\nThis PR adds a debug assertion that the parts of a single substitution cannot overlap, fixes a overlapping substitution from the testsuite, and fixes https://github.com/rust-lang/rust/issues/106870.\n\nNote that a single suggestion can still have multiple overlapping substitutions / possible edits, we just don't suggest overlapping replacements in a single edit anymore.\n\nI've also included a fix for an unrelated bug where rustfix for `explicit_outlives_requirements` would produce multiple trailing commas for a where clause.", "tree": {"sha": "23ff9c0cf43972239454598d7d21506a641ba43b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23ff9c0cf43972239454598d7d21506a641ba43b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8da51366817317d19be9bd138943eafb30bc987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8da51366817317d19be9bd138943eafb30bc987", "html_url": "https://github.com/rust-lang/rust/commit/d8da51366817317d19be9bd138943eafb30bc987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8da51366817317d19be9bd138943eafb30bc987/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "226b2496fc3ef997fa1cccf84259539203f82375", "url": "https://api.github.com/repos/rust-lang/rust/commits/226b2496fc3ef997fa1cccf84259539203f82375", "html_url": "https://github.com/rust-lang/rust/commit/226b2496fc3ef997fa1cccf84259539203f82375"}, {"sha": "228ddf04fca01e8224ad4fb8a8e9db8483642249", "url": "https://api.github.com/repos/rust-lang/rust/commits/228ddf04fca01e8224ad4fb8a8e9db8483642249", "html_url": "https://github.com/rust-lang/rust/commit/228ddf04fca01e8224ad4fb8a8e9db8483642249"}], "stats": {"total": 276, "additions": 214, "deletions": 62}, "files": [{"sha": "4ad24c1400d69d1a5ec36650443b4ab4b00a0e88", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -629,19 +629,27 @@ impl Diagnostic {\n         applicability: Applicability,\n         style: SuggestionStyle,\n     ) -> &mut Self {\n-        assert!(!suggestion.is_empty());\n-        debug_assert!(\n-            !(suggestion.iter().any(|(sp, text)| sp.is_empty() && text.is_empty())),\n-            \"Span must not be empty and have no suggestion\"\n+        let mut parts = suggestion\n+            .into_iter()\n+            .map(|(span, snippet)| SubstitutionPart { snippet, span })\n+            .collect::<Vec<_>>();\n+\n+        parts.sort_unstable_by_key(|part| part.span);\n+\n+        assert!(!parts.is_empty());\n+        debug_assert_eq!(\n+            parts.iter().find(|part| part.span.is_empty() && part.snippet.is_empty()),\n+            None,\n+            \"Span must not be empty and have no suggestion\",\n+        );\n+        debug_assert_eq!(\n+            parts.array_windows().find(|[a, b]| a.span.overlaps(b.span)),\n+            None,\n+            \"suggestion must not have overlapping parts\",\n         );\n \n         self.push_suggestion(CodeSuggestion {\n-            substitutions: vec![Substitution {\n-                parts: suggestion\n-                    .into_iter()\n-                    .map(|(span, snippet)| SubstitutionPart { snippet, span })\n-                    .collect(),\n-            }],\n+            substitutions: vec![Substitution { parts }],\n             msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style,\n             applicability,\n@@ -802,25 +810,34 @@ impl Diagnostic {\n         suggestions: impl IntoIterator<Item = Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self {\n-        let suggestions: Vec<_> = suggestions.into_iter().collect();\n-        debug_assert!(\n-            !(suggestions\n-                .iter()\n-                .flatten()\n-                .any(|(sp, suggestion)| sp.is_empty() && suggestion.is_empty())),\n-            \"Span must not be empty and have no suggestion\"\n-        );\n+        let substitutions = suggestions\n+            .into_iter()\n+            .map(|sugg| {\n+                let mut parts = sugg\n+                    .into_iter()\n+                    .map(|(span, snippet)| SubstitutionPart { snippet, span })\n+                    .collect::<Vec<_>>();\n+\n+                parts.sort_unstable_by_key(|part| part.span);\n+\n+                assert!(!parts.is_empty());\n+                debug_assert_eq!(\n+                    parts.iter().find(|part| part.span.is_empty() && part.snippet.is_empty()),\n+                    None,\n+                    \"Span must not be empty and have no suggestion\",\n+                );\n+                debug_assert_eq!(\n+                    parts.array_windows().find(|[a, b]| a.span.overlaps(b.span)),\n+                    None,\n+                    \"suggestion must not have overlapping parts\",\n+                );\n+\n+                Substitution { parts }\n+            })\n+            .collect();\n \n         self.push_suggestion(CodeSuggestion {\n-            substitutions: suggestions\n-                .into_iter()\n-                .map(|sugg| Substitution {\n-                    parts: sugg\n-                        .into_iter()\n-                        .map(|(span, snippet)| SubstitutionPart { snippet, span })\n-                        .collect(),\n-                })\n-                .collect(),\n+            substitutions,\n             msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n             style: SuggestionStyle::ShowCode,\n             applicability,"}, {"sha": "d076fc08b0e2f1f023e73a3259d18c6cf9d98795", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -3,6 +3,7 @@\n //! This module contains the code for creating and emitting diagnostics.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(array_windows)]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n #![feature(is_terminal)]"}, {"sha": "cd431f5701958e529531504fc9f9574915b7cf4b", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -10,7 +10,7 @@ use crate::mbe::transcribe::transcribe;\n \n use rustc_ast as ast;\n use rustc_ast::token::{self, Delimiter, NonterminalKind, Token, TokenKind, TokenKind::*};\n-use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n+use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, TransparencyError};\n@@ -212,7 +212,6 @@ fn expand_macro<'cx>(\n             };\n             let arm_span = rhses[i].span();\n \n-            let rhs_spans = rhs.tts.iter().map(|t| t.span()).collect::<Vec<_>>();\n             // rhs has holes ( `$id` and `$(...)` that need filled)\n             let mut tts = match transcribe(cx, &named_matches, &rhs, rhs_span, transparency) {\n                 Ok(tts) => tts,\n@@ -224,12 +223,25 @@ fn expand_macro<'cx>(\n \n             // Replace all the tokens for the corresponding positions in the macro, to maintain\n             // proper positions in error reporting, while maintaining the macro_backtrace.\n-            if rhs_spans.len() == tts.len() {\n+            if tts.len() == rhs.tts.len() {\n                 tts = tts.map_enumerated(|i, tt| {\n                     let mut tt = tt.clone();\n-                    let mut sp = rhs_spans[i];\n-                    sp = sp.with_ctxt(tt.span().ctxt());\n-                    tt.set_span(sp);\n+                    let rhs_tt = &rhs.tts[i];\n+                    let ctxt = tt.span().ctxt();\n+                    match (&mut tt, rhs_tt) {\n+                        // preserve the delim spans if able\n+                        (\n+                            TokenTree::Delimited(target_sp, ..),\n+                            mbe::TokenTree::Delimited(source_sp, ..),\n+                        ) => {\n+                            target_sp.open = source_sp.open.with_ctxt(ctxt);\n+                            target_sp.close = source_sp.close.with_ctxt(ctxt);\n+                        }\n+                        _ => {\n+                            let sp = rhs_tt.span().with_ctxt(ctxt);\n+                            tt.set_span(sp);\n+                        }\n+                    }\n                     tt\n                 });\n             }"}, {"sha": "9b22ad098b2f85068609cbe4800f672f62cc17fb", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -2175,13 +2175,31 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                     dropped_predicate_count += 1;\n                 }\n \n-                if drop_predicate && !in_where_clause {\n-                    lint_spans.push(predicate_span);\n-                } else if drop_predicate && i + 1 < num_predicates {\n-                    // If all the bounds on a predicate were inferable and there are\n-                    // further predicates, we want to eat the trailing comma.\n-                    let next_predicate_span = hir_generics.predicates[i + 1].span();\n-                    where_lint_spans.push(predicate_span.to(next_predicate_span.shrink_to_lo()));\n+                if drop_predicate {\n+                    if !in_where_clause {\n+                        lint_spans.push(predicate_span);\n+                    } else if predicate_span.from_expansion() {\n+                        // Don't try to extend the span if it comes from a macro expansion.\n+                        where_lint_spans.push(predicate_span);\n+                    } else if i + 1 < num_predicates {\n+                        // If all the bounds on a predicate were inferable and there are\n+                        // further predicates, we want to eat the trailing comma.\n+                        let next_predicate_span = hir_generics.predicates[i + 1].span();\n+                        if next_predicate_span.from_expansion() {\n+                            where_lint_spans.push(predicate_span);\n+                        } else {\n+                            where_lint_spans\n+                                .push(predicate_span.to(next_predicate_span.shrink_to_lo()));\n+                        }\n+                    } else {\n+                        // Eat the optional trailing comma after the last predicate.\n+                        let where_span = hir_generics.where_clause_span;\n+                        if where_span.from_expansion() {\n+                            where_lint_spans.push(predicate_span);\n+                        } else {\n+                            where_lint_spans.push(predicate_span.to(where_span.shrink_to_hi()));\n+                        }\n+                    }\n                 } else {\n                     where_lint_spans.extend(self.consolidate_outlives_bound_spans(\n                         predicate_span.shrink_to_lo(),\n@@ -2225,6 +2243,11 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                     Applicability::MaybeIncorrect\n                 };\n \n+                // Due to macros, there might be several predicates with the same span\n+                // and we only want to suggest removing them once.\n+                lint_spans.sort_unstable();\n+                lint_spans.dedup();\n+\n                 cx.emit_spanned_lint(\n                     EXPLICIT_OUTLIVES_REQUIREMENTS,\n                     lint_spans.clone(),"}, {"sha": "d376ad3bfe3998cc1e48a7d927efd68bfcdbbfaa", "filename": "src/tools/clippy/clippy_lints/src/format_args.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformat_args.rs?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -311,6 +311,10 @@ fn check_uninlined_args(\n     // in those cases, make the code suggestion hidden\n     let multiline_fix = fixes.iter().any(|(span, _)| cx.sess().source_map().is_multiline(*span));\n \n+    // Suggest removing each argument only once, for example in `format!(\"{0} {0}\", arg)`.\n+    fixes.sort_unstable_by_key(|(span, _)| *span);\n+    fixes.dedup_by_key(|(span, _)| *span);\n+\n     span_lint_and_then(\n         cx,\n         UNINLINED_FORMAT_ARGS,"}, {"sha": "cc629fd920fab89d85bebac8a9b52cfff6afba05", "filename": "tests/ui/const-generics/min_const_generics/macro-fail.stderr", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -8,7 +8,7 @@ LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n    |                                 in this macro invocation\n ...\n LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type\n+   |                           ^ expected type\n    |\n    = note: this error originates in the macro `gimme_a_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -22,26 +22,21 @@ LL |   Example::<gimme_a_const!(marker)>\n    |             in this macro invocation\n ...\n LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type\n+   |                           ^ expected type\n    |\n    = note: this error originates in the macro `gimme_a_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected type, found `{`\n   --> $DIR/macro-fail.rs:4:10\n    |\n-LL |     () => {{\n-   |  __________^\n-LL | |\n-LL | |     const X: usize = 1337;\n-LL | |     X\n-LL | |   }}\n-   | |___^ expected type\n+LL |   () => {{\n+   |          ^ expected type\n ...\n-LL |     let _fail = Example::<external_macro!()>;\n-   |                           -----------------\n-   |                           |\n-   |                           this macro call doesn't expand to a type\n-   |                           in this macro invocation\n+LL |   let _fail = Example::<external_macro!()>;\n+   |                         -----------------\n+   |                         |\n+   |                         this macro call doesn't expand to a type\n+   |                         in this macro invocation\n    |\n    = note: this error originates in the macro `external_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a6a5b1393daecc8e0c7298541f5c5966bb181db8", "filename": "tests/ui/imports/import-prefix-macro-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -2,7 +2,7 @@ error: expected one of `::`, `;`, or `as`, found `{`\n   --> $DIR/import-prefix-macro-1.rs:11:27\n    |\n LL |     ($p: path) => (use $p {S, Z});\n-   |                           ^^^^^^ expected one of `::`, `;`, or `as`\n+   |                           ^ expected one of `::`, `;`, or `as`\n ...\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation"}, {"sha": "de02ea85b27b7c23337c3bad8fe2a3e44290ed5d", "filename": "tests/ui/parser/issues/issue-44406.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -21,8 +21,8 @@ LL |     foo!(true);\n    = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: if `bar` is a struct, use braces as delimiters\n    |\n-LL |         bar {  }\n-   |             ~\n+LL |         bar { baz: $rest }\n+   |             ~            ~\n help: if `bar` is a function, use the arguments directly\n    |\n LL -         bar(baz: $rest)"}, {"sha": "d2254acb33f6bc87f9e1bd6677cb1d889e1b8b9c", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives-multispan.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.rs?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -365,4 +365,24 @@ mod unions {\n     }\n }\n \n+// https://github.com/rust-lang/rust/issues/106870\n+mod multiple_predicates_with_same_span {\n+    macro_rules! m {\n+        ($($name:ident)+) => {\n+            struct Inline<'a, $($name: 'a,)+>(&'a ($($name,)+));\n+            //~^ ERROR: outlives requirements can be inferred\n+            struct FullWhere<'a, $($name,)+>(&'a ($($name,)+)) where $($name: 'a,)+;\n+            //~^ ERROR: outlives requirements can be inferred\n+            struct PartialWhere<'a, $($name,)+>(&'a ($($name,)+)) where (): Sized, $($name: 'a,)+;\n+            //~^ ERROR: outlives requirements can be inferred\n+            struct Interleaved<'a, $($name,)+>(&'a ($($name,)+))\n+            where\n+                (): Sized,\n+                $($name: 'a, $name: 'a, )+ //~ ERROR: outlives requirements can be inferred\n+                $($name: 'a, $name: 'a, )+;\n+        }\n+    }\n+    m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+}\n+\n fn main() {}"}, {"sha": "f5ec287d29132dbce156642d9f410390618b266d", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives-multispan.stderr", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -819,5 +819,61 @@ LL -     union BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U:\n LL +     union BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug,  {\n    |\n \n-error: aborting due to 68 previous errors\n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives-multispan.rs:372:38\n+   |\n+LL |             struct Inline<'a, $($name: 'a,)+>(&'a ($($name,)+));\n+   |                                      ^^^^ help: remove these bounds\n+...\n+LL |     m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+   |     --------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives-multispan.rs:374:64\n+   |\n+LL |             struct FullWhere<'a, $($name,)+>(&'a ($($name,)+)) where $($name: 'a,)+;\n+   |                                                                ^^^^^^^^^^^^^^^^^^ help: remove these bounds\n+...\n+LL |     m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+   |     --------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives-multispan.rs:376:86\n+   |\n+LL |             struct PartialWhere<'a, $($name,)+>(&'a ($($name,)+)) where (): Sized, $($name: 'a,)+;\n+   |                                                                                      ^^^^^^^^^ help: remove these bounds\n+...\n+LL |     m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+   |     --------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives-multispan.rs:381:19\n+   |\n+LL |                 $($name: 'a, $name: 'a, )+\n+   |                   ^^^^^^^^^  ^^^^^^^^^\n+LL |                 $($name: 'a, $name: 'a, )+;\n+   |                   ^^^^^^^^^  ^^^^^^^^^\n+...\n+LL |     m!(T0 T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 T11 T12 T13 T14 T15);\n+   |     ---------------------------------------------------------\n+   |     |\n+   |     in this macro invocation\n+   |     in this macro invocation\n+   |     in this macro invocation\n+   |     in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: remove these bounds\n+   |\n+LL ~                 $(, , )+\n+LL ~                 $(, , )+;\n+   |\n+\n+error: aborting due to 72 previous errors\n "}, {"sha": "868bdf2e068d807861af109f76da061301ab731d", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.fixed?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -791,5 +791,14 @@ struct StaticRef<T: 'static> {\n     field: &'static T\n }\n \n+struct TrailingCommaInWhereClause<'a, T, U>\n+where\n+    T: 'a,\n+    \n+    //~^ ERROR outlives requirements can be inferred\n+{\n+    tee: T,\n+    yoo: &'a U\n+}\n \n fn main() {}"}, {"sha": "75783764ad6c9365f6bd506b99be9239218fb1d3", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.rs?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -791,5 +791,14 @@ struct StaticRef<T: 'static> {\n     field: &'static T\n }\n \n+struct TrailingCommaInWhereClause<'a, T, U>\n+where\n+    T: 'a,\n+    U: 'a,\n+    //~^ ERROR outlives requirements can be inferred\n+{\n+    tee: T,\n+    yoo: &'a U\n+}\n \n fn main() {}"}, {"sha": "e655fb4842c714613724c98205f0050669c89698", "filename": "tests/ui/rust-2018/edition-lint-infer-outlives.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8da51366817317d19be9bd138943eafb30bc987/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fedition-lint-infer-outlives.stderr?ref=d8da51366817317d19be9bd138943eafb30bc987", "patch": "@@ -1,15 +1,21 @@\n error: outlives requirements can be inferred\n-  --> $DIR/edition-lint-infer-outlives.rs:26:31\n+  --> $DIR/edition-lint-infer-outlives.rs:797:5\n    |\n-LL |     struct TeeOutlivesAy<'a, T: 'a> {\n-   |                               ^^^^ help: remove this bound\n+LL |     U: 'a,\n+   |     ^^^^^^ help: remove this bound\n    |\n note: the lint level is defined here\n   --> $DIR/edition-lint-infer-outlives.rs:4:9\n    |\n LL | #![deny(explicit_outlives_requirements)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: outlives requirements can be inferred\n+  --> $DIR/edition-lint-infer-outlives.rs:26:31\n+   |\n+LL |     struct TeeOutlivesAy<'a, T: 'a> {\n+   |                               ^^^^ help: remove this bound\n+\n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives.rs:31:40\n    |\n@@ -916,5 +922,5 @@ error: outlives requirements can be inferred\n LL |     union BeeWhereOutlivesAyTeeWhereDebug<'a, 'b, T> where 'b: 'a, T: Debug {\n    |                                                            ^^^^^^^^ help: remove this bound\n \n-error: aborting due to 152 previous errors\n+error: aborting due to 153 previous errors\n "}]}