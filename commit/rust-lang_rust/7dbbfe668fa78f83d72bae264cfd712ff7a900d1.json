{"sha": "7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYmJmZTY2OGZhNzhmODNkNzJiYWUyNjRjZmQ3MTJmZjdhOTAwZDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-25T16:33:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T16:33:36Z"}, "message": "Merge pull request #982 from bjorn3/backtrace_support\n\nImplement .eh_frame writing", "tree": {"sha": "1fbd7770a58c856a5914be6200dd18a8f92d792d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fbd7770a58c856a5914be6200dd18a8f92d792d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepGZgCRBK7hj4Ov3rIwAAdHIIAA9jiqXmUKD7NA2mqOoVirEu\n/d2pVczFrbDjGiT78Az6MAgwfdFSMNGNth5vzeufD7DyqWhFkKzn5oIlpZxZliVt\n5PiVK71v7ax9q9RJt6y7N0Qhh8S4CO0rCp50shRNWnTusZryejmwzatvdtyCz+k9\nsffTjZPYPUCbBJCQaP2Tyxr0Cs5GtCH5D3SAiUuFBhPu12v2VflNCbT2b2VGjAWL\nyqVVBv1xEWHKymGhZr1Uht2ieaAtrBvm71P5vTRX/w1vuM6/O9QBbsagBvUH1viY\nBgkiQlPPxcQq+kWubd7MNcSDZtwRF+9g70Y9S20DljaxPLw9Ed3oUlGagfTHHHY=\n=hJvH\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fbd7770a58c856a5914be6200dd18a8f92d792d\nparent 9d6f65ea1408b2151c0a92ff439aef48ac5c8882\nparent e7661d49c34a45f9da9a9b6bf0e39ce376939a64\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1587832416 +0200\ncommitter GitHub <noreply@github.com> 1587832416 +0200\n\nMerge pull request #982 from bjorn3/backtrace_support\n\nImplement .eh_frame writing"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "html_url": "https://github.com/rust-lang/rust/commit/7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d6f65ea1408b2151c0a92ff439aef48ac5c8882", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6f65ea1408b2151c0a92ff439aef48ac5c8882", "html_url": "https://github.com/rust-lang/rust/commit/9d6f65ea1408b2151c0a92ff439aef48ac5c8882"}, {"sha": "e7661d49c34a45f9da9a9b6bf0e39ce376939a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7661d49c34a45f9da9a9b6bf0e39ce376939a64", "html_url": "https://github.com/rust-lang/rust/commit/e7661d49c34a45f9da9a9b6bf0e39ce376939a64"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "90f5429bb0e1ce8c93706dc0e835e0cd955d328f", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "patch": "@@ -9,7 +9,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime/\" }\n+cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime/\", features = [\"unwind\"] }\n cranelift-frontend = { git = \"https://github.com/bytecodealliance/wasmtime/\" }\n cranelift-module = { git = \"https://github.com/bytecodealliance/wasmtime/\" }\n cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime/\" }"}, {"sha": "bfc9e2d436767dff87e8ba7972c510b1113a61ec", "filename": "src/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "patch": "@@ -39,7 +39,7 @@ impl WriteMetadata for object::write::Object {\n }\n \n pub(crate) trait WriteDebugInfo {\n-    type SectionId;\n+    type SectionId: Copy;\n \n     fn add_debug_section(&mut self, name: SectionId, data: Vec<u8>) -> Self::SectionId;\n     fn add_debug_reloc("}, {"sha": "e49e13a5be5a827d54ff0563e50a8fbf18dcf2d7", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n \n-use gimli::write::{Address, AttributeValue, EndianVec, Result, Sections, Writer};\n+use gimli::write::{Address, AttributeValue, EhFrame, EndianVec, Result, Sections, Writer, Section};\n use gimli::{RunTimeEndian, SectionId};\n \n use crate::backend::WriteDebugInfo;\n@@ -20,6 +20,9 @@ impl DebugContext<'_> {\n         let mut sections = Sections::new(WriterRelocate::new(self));\n         self.dwarf.write(&mut sections).unwrap();\n \n+        let mut eh_frame = EhFrame::from(WriterRelocate::new(self));\n+        self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n+\n         let mut section_map = FxHashMap::default();\n         let _: Result<()> = sections.for_each_mut(|id, section| {\n             if !section.writer.slice().is_empty() {\n@@ -37,6 +40,16 @@ impl DebugContext<'_> {\n             }\n             Ok(())\n         });\n+\n+        if !eh_frame.0.writer.slice().is_empty() {\n+            let id = eh_frame.id();\n+            let section_id = product.add_debug_section(id, eh_frame.0.writer.into_vec());\n+            section_map.insert(id, section_id);\n+\n+            for reloc in &eh_frame.0.relocs {\n+                product.add_debug_reloc(&section_map, &self.symbols, &section_id, reloc);\n+            }\n+        }\n     }\n }\n "}, {"sha": "fdc6cc911c75aea0a87687b5afc59413ce760da8", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "patch": "@@ -1,5 +1,6 @@\n mod emit;\n mod line_info;\n+mod unwind;\n \n use crate::prelude::*;\n \n@@ -10,8 +11,8 @@ use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n \n use gimli::write::{\n-    self, Address, AttributeValue, DwarfUnit, Expression, LineProgram, LineString, Location,\n-    LocationList, Range, RangeList, UnitEntryId, Writer,\n+    self, Address, AttributeValue, CieId, DwarfUnit, Expression, FrameTable, LineProgram,\n+    LineString, Location, LocationList, Range, RangeList, UnitEntryId, Writer,\n };\n use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, X86_64};\n \n@@ -34,13 +35,15 @@ pub(crate) struct DebugContext<'tcx> {\n \n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n+    frame_table: FrameTable,\n \n+    cie: CieId,\n     clif_types: FxHashMap<Type, UnitEntryId>,\n     types: FxHashMap<Ty<'tcx>, UnitEntryId>,\n }\n \n impl<'tcx> DebugContext<'tcx> {\n-    pub(crate) fn new(tcx: TyCtxt<'tcx>, address_size: u8) -> Self {\n+    pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa) -> Self {\n         let encoding = Encoding {\n             format: Format::Dwarf32,\n             // TODO: this should be configurable\n@@ -53,7 +56,7 @@ impl<'tcx> DebugContext<'tcx> {\n                 // support it.\n                 4\n             },\n-            address_size,\n+            address_size: isa.frontend_config().pointer_bytes(),\n         };\n \n         let mut dwarf = DwarfUnit::new(encoding);\n@@ -108,6 +111,9 @@ impl<'tcx> DebugContext<'tcx> {\n             );\n         }\n \n+        let mut frame_table = FrameTable::default();\n+        let cie = frame_table.add_cie(isa.create_systemv_cie().expect(\"SystemV unwind info CIE\"));\n+\n         DebugContext {\n             tcx,\n \n@@ -116,7 +122,9 @@ impl<'tcx> DebugContext<'tcx> {\n \n             dwarf,\n             unit_range_list: RangeList(Vec::new()),\n+            frame_table,\n \n+            cie,\n             clif_types: FxHashMap::default(),\n             types: FxHashMap::default(),\n         }\n@@ -312,6 +320,8 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n         local_map: FxHashMap<mir::Local, CPlace<'tcx>>,\n     ) {\n+        self.create_unwind_info(context, isa);\n+\n         let end = self.create_debug_lines(context, isa, source_info_set);\n \n         self.debug_context"}, {"sha": "c0d4eb5c0edeb60ace78678bd829d7d89dc63208", "filename": "src/debuginfo/unwind.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "patch": "@@ -0,0 +1,31 @@\n+use crate::prelude::*;\n+\n+use cranelift_codegen::isa::unwind::UnwindInfo;\n+\n+use gimli::write::Address;\n+\n+impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n+    pub(super) fn create_unwind_info(\n+        &mut self,\n+        context: &Context,\n+        isa: &dyn cranelift_codegen::isa::TargetIsa,\n+    ) {\n+        let unwind_info = if let Some(unwind_info) = context.create_unwind_info(isa).unwrap() {\n+            unwind_info\n+        } else {\n+            return;\n+        };\n+\n+        match unwind_info {\n+            UnwindInfo::SystemV(unwind_info) => {\n+                self.debug_context.frame_table.add_fde(self.debug_context.cie, unwind_info.to_fde(Address::Symbol {\n+                    symbol: self.symbol,\n+                    addend: 0,\n+                }));\n+            },\n+            UnwindInfo::WindowsX64(_) => {\n+                // FIXME implement this\n+            }\n+        }\n+    }\n+}"}, {"sha": "6ab5b40d3ce79d18c1412164b5b13d84fbaf480c", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbbfe668fa78f83d72bae264cfd712ff7a900d1/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=7dbbfe668fa78f83d72bae264cfd712ff7a900d1", "patch": "@@ -120,7 +120,7 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n     let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None {\n         let debug = DebugContext::new(\n             tcx,\n-            module.target_config().pointer_type().bytes() as u8,\n+            module.isa(),\n         );\n         Some(debug)\n     } else {"}]}