{"sha": "c8c3c3bdd641411134c53117f4c0a449195d1e10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YzNjM2JkZDY0MTQxMTEzNGM1MzExN2Y0YzBhNDQ5MTk1ZDFlMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-15T17:25:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-15T17:25:48Z"}, "message": "auto merge of #9150 : catamorphism/rust/rustpkg-cleanup, r=catamorphism\n\nJust refactoring in tests.rs.", "tree": {"sha": "9dd9cf9338181f7f4338616d5c2ed221ad45ebe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd9cf9338181f7f4338616d5c2ed221ad45ebe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8c3c3bdd641411134c53117f4c0a449195d1e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c3c3bdd641411134c53117f4c0a449195d1e10", "html_url": "https://github.com/rust-lang/rust/commit/c8c3c3bdd641411134c53117f4c0a449195d1e10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8c3c3bdd641411134c53117f4c0a449195d1e10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0528a50779f3608d7e623b938cdb239e3d94d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0528a50779f3608d7e623b938cdb239e3d94d51", "html_url": "https://github.com/rust-lang/rust/commit/e0528a50779f3608d7e623b938cdb239e3d94d51"}, {"sha": "84f2d3397392ac496c23908776ad5afbb38e107f", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f2d3397392ac496c23908776ad5afbb38e107f", "html_url": "https://github.com/rust-lang/rust/commit/84f2d3397392ac496c23908776ad5afbb38e107f"}], "stats": {"total": 101, "additions": 42, "deletions": 59}, "files": [{"sha": "83110e22ed55fa24112ba0b9b6b93db809730fd0", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 42, "deletions": 59, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/c8c3c3bdd641411134c53117f4c0a449195d1e10/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c3c3bdd641411134c53117f4c0a449195d1e10/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=c8c3c3bdd641411134c53117f4c0a449195d1e10", "patch": "@@ -95,17 +95,17 @@ fn mk_empty_workspace(short_name: &Path, version: &Version, tag: &str) -> Path {\n \n fn mk_workspace(workspace: &Path, short_name: &Path, version: &Version) -> Path {\n     // include version number in directory name\n-    let package_dir = workspace.push(\"src\").push(fmt!(\"%s-%s\",\n-                                                      short_name.to_str(), version.to_str()));\n+    let package_dir = workspace.push_many([~\"src\", fmt!(\"%s-%s\",\n+                                                      short_name.to_str(), version.to_str())]);\n     assert!(os::mkdir_recursive(&package_dir, U_RWX));\n     package_dir\n }\n \n fn mk_temp_workspace(short_name: &Path, version: &Version) -> Path {\n     let package_dir = mk_empty_workspace(short_name,\n-                          version, \"temp_workspace\").push(\"src\").push(fmt!(\"%s-%s\",\n+                          version, \"temp_workspace\").push_many([~\"src\", fmt!(\"%s-%s\",\n                                                             short_name.to_str(),\n-                                                            version.to_str()));\n+                                                            version.to_str())]);\n \n     debug!(\"Created %s and does it exist? %?\", package_dir.to_str(),\n           os::path_is_dir(&package_dir));\n@@ -207,13 +207,13 @@ fn test_sysroot() -> Path {\n // Returns the path to rustpkg\n fn rustpkg_exec() -> Path {\n     // Ugh\n-    let first_try = test_sysroot().push(\"lib\").push(\"rustc\")\n-        .push(host_triple()).push(\"bin\").push(\"rustpkg\");\n+    let first_try = test_sysroot().push_many(\n+        [~\"lib\", ~\"rustc\", host_triple(), ~\"bin\", ~\"rustpkg\"]);\n     if is_executable(&first_try) {\n         first_try\n     }\n     else {\n-        let second_try = test_sysroot().push(\"bin\").push(\"rustpkg\");\n+        let second_try = test_sysroot().push_many([~\"bin\", ~\"rustpkg\"]);\n         if is_executable(&second_try) {\n             second_try\n         }\n@@ -237,8 +237,11 @@ fn command_line_test_partial(args: &[~str], cwd: &Path) -> Option<ProcessOutput>\n fn command_line_test_with_env(args: &[~str], cwd: &Path, env: Option<~[(~str, ~str)]>)\n     -> Option<ProcessOutput> {\n     let cmd = rustpkg_exec().to_str();\n-    debug!(\"cd %s; %s %s\",\n-           cwd.to_str(), cmd, args.connect(\" \"));\n+    let env_str = match env {\n+        Some(ref pairs) => pairs.map(|&(ref k, ref v)| { fmt!(\"%s=%s\", *k, *v) }).connect(\",\"),\n+        None        => ~\"\"\n+    };\n+    debug!(\"%s cd %s; %s %s\", env_str, cwd.to_str(), cmd, args.connect(\" \"));\n     assert!(os::path_is_dir(&*cwd));\n     let cwd = (*cwd).clone();\n     let mut prog = run::Process::new(cmd, args, run::ProcessOptions {\n@@ -278,7 +281,7 @@ fn create_local_package(pkgid: &PkgId) -> Path {\n \n fn create_local_package_in(pkgid: &PkgId, pkgdir: &Path) -> Path {\n \n-    let package_dir = pkgdir.push(\"src\").push(pkgid.to_str());\n+    let package_dir = pkgdir.push_many([~\"src\", pkgid.to_str()]);\n \n     // Create main, lib, test, and bench files\n     assert!(os::mkdir_recursive(&package_dir, U_RWX));\n@@ -306,16 +309,12 @@ fn create_local_package_with_dep(pkgid: &PkgId, subord_pkgid: &PkgId) -> Path {\n     let package_dir = create_local_package(pkgid);\n     create_local_package_in(subord_pkgid, &package_dir);\n     // Write a main.rs file into pkgid that references subord_pkgid\n-    writeFile(&package_dir.push(\"src\").push(pkgid.to_str()).push(\"main.rs\"),\n+    writeFile(&package_dir.push_many([~\"src\", pkgid.to_str(), ~\"main.rs\"]),\n               fmt!(\"extern mod %s;\\nfn main() {}\",\n                    subord_pkgid.short_name));\n     // Write a lib.rs file into subord_pkgid that has something in it\n-    writeFile(&package_dir.push(\"src\").push(subord_pkgid.to_str()).push(\"lib.rs\"),\n+    writeFile(&package_dir.push_many([~\"src\", subord_pkgid.to_str(), ~\"lib.rs\"]),\n               \"pub fn f() {}\");\n-    debug!(\"Dry run -- would create packages %s and %s in %s\",\n-           pkgid.to_str(),\n-           subord_pkgid.to_str(),\n-           package_dir.to_str());\n     package_dir\n }\n \n@@ -432,13 +431,13 @@ fn lib_output_file_name(workspace: &Path, parent: &str, short_name: &str) -> Pat\n                          &NoVersion).expect(\"lib_output_file_name\")\n }\n \n-fn output_file_name(workspace: &Path, short_name: &str) -> Path {\n+fn output_file_name(workspace: &Path, short_name: ~str) -> Path {\n     target_build_dir(workspace).push(short_name).push(fmt!(\"%s%s\", short_name, os::EXE_SUFFIX))\n }\n \n fn touch_source_file(workspace: &Path, pkgid: &PkgId) {\n     use conditions::bad_path::cond;\n-    let pkg_src_dir = workspace.push(\"src\").push(pkgid.to_str());\n+    let pkg_src_dir = workspace.push_many([~\"src\", pkgid.to_str()]);\n     let contents = os::list_dir_path(&pkg_src_dir);\n     for p in contents.iter() {\n         if p.filetype() == Some(\".rs\") {\n@@ -453,7 +452,7 @@ fn touch_source_file(workspace: &Path, pkgid: &PkgId) {\n /// Add a comment at the end\n fn frob_source_file(workspace: &Path, pkgid: &PkgId) {\n     use conditions::bad_path::cond;\n-    let pkg_src_dir = workspace.push(\"src\").push(pkgid.to_str());\n+    let pkg_src_dir = workspace.push_many([~\"src\", pkgid.to_str()]);\n     let contents = os::list_dir_path(&pkg_src_dir);\n     let mut maybe_p = None;\n     for p in contents.iter() {\n@@ -544,7 +543,7 @@ fn test_install_git() {\n     let temp_pkg_id = git_repo_pkg();\n     let repo = init_git_repo(&temp_pkg_id.path);\n     debug!(\"repo = %s\", repo.to_str());\n-    let repo_subdir = repo.push(\"mockgithub.com\").push(\"catamorphism\").push(\"test-pkg\");\n+    let repo_subdir = repo.push_many([~\"mockgithub.com\", ~\"catamorphism\", ~\"test-pkg\"]);\n     debug!(\"repo_subdir = %s\", repo_subdir.to_str());\n \n     writeFile(&repo_subdir.push(\"main.rs\"),\n@@ -632,7 +631,7 @@ fn test_package_ids_must_be_relative_path_like() {\n fn test_package_version() {\n     let local_path = \"mockgithub.com/catamorphism/test_pkg_version\";\n     let repo = init_git_repo(&Path(local_path));\n-    let repo_subdir = repo.push(\"mockgithub.com\").push(\"catamorphism\").push(\"test_pkg_version\");\n+    let repo_subdir = repo.push_many([~\"mockgithub.com\", ~\"catamorphism\", ~\"test_pkg_version\"]);\n     debug!(\"Writing files in: %s\", repo_subdir.to_str());\n     writeFile(&repo_subdir.push(\"main.rs\"),\n               \"fn main() { let _x = (); }\");\n@@ -667,7 +666,7 @@ fn test_package_version() {\n fn test_package_request_version() {\n     let local_path = \"mockgithub.com/catamorphism/test_pkg_version\";\n     let repo = init_git_repo(&Path(local_path));\n-    let repo_subdir = repo.push(\"mockgithub.com\").push(\"catamorphism\").push(\"test_pkg_version\");\n+    let repo_subdir = repo.push_many([~\"mockgithub.com\", ~\"catamorphism\", ~\"test_pkg_version\"]);\n     debug!(\"Writing files in: %s\", repo_subdir.to_str());\n     writeFile(&repo_subdir.push(\"main.rs\"),\n               \"fn main() { let _x = (); }\");\n@@ -693,16 +692,16 @@ fn test_package_request_version() {\n     });\n     let temp_pkg_id = PkgId::new(\"mockgithub.com/catamorphism/test_pkg_version#0.3\");\n     assert!(target_executable_in_workspace(&temp_pkg_id, &repo.push(\".rust\"))\n-            == repo.push(\".rust\").push(\"bin\").push(\"test_pkg_version\"));\n+            == repo.push_many([~\".rust\", ~\"bin\", ~\"test_pkg_version\"]));\n+\n+    let dir = &repo.push_many([~\".rust\",\n+                               ~\"src\",\n+                               ~\"mockgithub.com\",\n+                               ~\"catamorphism\",\n+                               ~\"test_pkg_version-0.3\"]);\n \n-    assert!(os::path_exists(&repo.push(\".rust\").push(\"src\")\n-                            .push(\"mockgithub.com\").push(\"catamorphism\")\n-                            .push(\"test_pkg_version-0.3\")\n-                            .push(\"version-0.3-file.txt\")));\n-    assert!(!os::path_exists(&repo.push(\".rust\").push(\"src\")\n-                            .push(\"mockgithub.com\").push(\"catamorphism\")\n-                             .push(\"test_pkg_version-0.3\")\n-                            .push(\"version-0.4-file.txt\")));\n+    assert!(os::path_exists(&dir.push(\"version-0.3-file.txt\")));\n+    assert!(!os::path_exists(&dir.push(\"version-0.4-file.txt\")));\n }\n \n #[test]\n@@ -745,11 +744,11 @@ fn rustpkg_local_pkg() {\n fn package_script_with_default_build() {\n     let dir = create_local_package(&PkgId::new(\"fancy-lib\"));\n     debug!(\"dir = %s\", dir.to_str());\n-    let source = test_sysroot().pop().pop().pop().push(\"src\").push(\"librustpkg\").\n-        push(\"testsuite\").push(\"pass\").push(\"src\").push(\"fancy-lib\").push(\"pkg.rs\");\n+    let source = test_sysroot().pop().pop().pop().push_many(\n+        [~\"src\", ~\"librustpkg\", ~\"testsuite\", ~\"pass\", ~\"src\", ~\"fancy-lib\", ~\"pkg.rs\"]);\n     debug!(\"package_script_with_default_build: %s\", source.to_str());\n     if !os::copy_file(&source,\n-                      &dir.push(\"src\").push(\"fancy-lib-0.1\").push(\"pkg.rs\")) {\n+                      &dir.push_many([~\"src\", ~\"fancy-lib-0.1\", ~\"pkg.rs\"])) {\n         fail!(\"Couldn't copy file\");\n     }\n     command_line_test([~\"install\", ~\"fancy-lib\"], &dir);\n@@ -761,7 +760,7 @@ fn package_script_with_default_build() {\n fn rustpkg_build_no_arg() {\n     let tmp = mkdtemp(&os::tmpdir(), \"rustpkg_build_no_arg\").expect(\"rustpkg_build_no_arg failed\")\n               .push(\".rust\");\n-    let package_dir = tmp.push(\"src\").push(\"foo\");\n+    let package_dir = tmp.push_many([~\"src\", ~\"foo\"]);\n     assert!(os::mkdir_recursive(&package_dir, U_RWX));\n \n     writeFile(&package_dir.push(\"main.rs\"),\n@@ -776,7 +775,7 @@ fn rustpkg_install_no_arg() {\n     let tmp = mkdtemp(&os::tmpdir(),\n                       \"rustpkg_install_no_arg\").expect(\"rustpkg_install_no_arg failed\")\n               .push(\".rust\");\n-    let package_dir = tmp.push(\"src\").push(\"foo\");\n+    let package_dir = tmp.push_many([~\"src\", ~\"foo\"]);\n     assert!(os::mkdir_recursive(&package_dir, U_RWX));\n     writeFile(&package_dir.push(\"lib.rs\"),\n               \"fn main() { let _x = (); }\");\n@@ -789,7 +788,7 @@ fn rustpkg_install_no_arg() {\n fn rustpkg_clean_no_arg() {\n     let tmp = mkdtemp(&os::tmpdir(), \"rustpkg_clean_no_arg\").expect(\"rustpkg_clean_no_arg failed\")\n               .push(\".rust\");\n-    let package_dir = tmp.push(\"src\").push(\"foo\");\n+    let package_dir = tmp.push_many([~\"src\", ~\"foo\"]);\n     assert!(os::mkdir_recursive(&package_dir, U_RWX));\n \n     writeFile(&package_dir.push(\"main.rs\"),\n@@ -822,7 +821,7 @@ fn rust_path_test() {\n #[ignore] // FIXME(#9184) tests can't change the cwd (other tests are sad then)\n fn rust_path_contents() {\n     let dir = mkdtemp(&os::tmpdir(), \"rust_path\").expect(\"rust_path_contents failed\");\n-    let abc = &dir.push(\"A\").push(\"B\").push(\"C\");\n+    let abc = &dir.push_many([~\"A\", ~\"B\", ~\"C\"]);\n     assert!(os::mkdir_recursive(&abc.push(\".rust\"), U_RWX));\n     assert!(os::mkdir_recursive(&abc.pop().push(\".rust\"), U_RWX));\n     assert!(os::mkdir_recursive(&abc.pop().pop().push(\".rust\"), U_RWX));\n@@ -863,7 +862,6 @@ fn test_list() {\n // list doesn't output very much right now...\n     command_line_test([~\"install\", ~\"foo\"], &dir);\n     let env_arg = ~[(~\"RUST_PATH\", dir.to_str())];\n-    debug!(\"RUST_PATH = %s\", dir.to_str());\n     let list_output = command_line_test_output_with_env([~\"list\"], env_arg.clone());\n     assert!(list_output.iter().any(|x| x.starts_with(\"foo\")));\n \n@@ -949,14 +947,14 @@ fn no_rebuilding_dep() {\n     let bar_date_1 = datestamp(&lib_output_file_name(&workspace,\n                                                   \".rust\",\n                                                   \"bar\"));\n-    let foo_date_1 = datestamp(&output_file_name(&workspace, \"foo\"));\n+    let foo_date_1 = datestamp(&output_file_name(&workspace, ~\"foo\"));\n \n     frob_source_file(&workspace, &p_id);\n     command_line_test([~\"build\", ~\"foo\"], &workspace);\n     let bar_date_2 = datestamp(&lib_output_file_name(&workspace,\n                                                   \".rust\",\n                                                   \"bar\"));\n-    let foo_date_2 = datestamp(&output_file_name(&workspace, \"foo\"));\n+    let foo_date_2 = datestamp(&output_file_name(&workspace, ~\"foo\"));\n     assert_eq!(bar_date_1, bar_date_2);\n     assert!(foo_date_1 < foo_date_2);\n     assert!(foo_date_1 > bar_date_1);\n@@ -1043,7 +1041,7 @@ fn test_uninstall() {\n fn test_non_numeric_tag() {\n     let temp_pkg_id = git_repo_pkg();\n     let repo = init_git_repo(&temp_pkg_id.path);\n-    let repo_subdir = repo.push(\"mockgithub.com\").push(\"catamorphism\").push(\"test-pkg\");\n+    let repo_subdir = repo.push_many([~\"mockgithub.com\", ~\"catamorphism\", ~\"test-pkg\"]);\n     writeFile(&repo_subdir.push(\"foo\"), \"foo\");\n     writeFile(&repo_subdir.push(\"lib.rs\"),\n               \"pub fn f() { let _x = (); }\");\n@@ -1085,12 +1083,6 @@ fn test_extern_mod() {\n     let env = Some([(~\"RUST_PATH\", lib_depend_dir.to_str())] + os::env());\n     let rustpkg_exec = rustpkg_exec();\n     let rustc = rustpkg_exec.with_filename(\"rustc\");\n-    debug!(\"RUST_PATH=%s %s %s \\n --sysroot %s -o %s\",\n-                     lib_depend_dir.to_str(),\n-                     rustc.to_str(),\n-                     main_file.to_str(),\n-                     test_sysroot().to_str(),\n-                     exec_file.to_str());\n \n     let mut prog = run::Process::new(rustc.to_str(), [main_file.to_str(),\n                                                       ~\"--sysroot\", test_sysroot().to_str(),\n@@ -1164,7 +1156,7 @@ fn test_extern_mod_simpler() {\n fn test_import_rustpkg() {\n     let p_id = PkgId::new(\"foo\");\n     let workspace = create_local_package(&p_id);\n-    writeFile(&workspace.push(\"src\").push(\"foo-0.1\").push(\"pkg.rs\"),\n+    writeFile(&workspace.push_many([~\"src\", ~\"foo-0.1\", ~\"pkg.rs\"]),\n               \"extern mod rustpkg; fn main() {}\");\n     command_line_test([~\"build\", ~\"foo\"], &workspace);\n     debug!(\"workspace = %s\", workspace.to_str());\n@@ -1176,7 +1168,7 @@ fn test_import_rustpkg() {\n fn test_macro_pkg_script() {\n     let p_id = PkgId::new(\"foo\");\n     let workspace = create_local_package(&p_id);\n-    writeFile(&workspace.push(\"src\").push(\"foo-0.1\").push(\"pkg.rs\"),\n+    writeFile(&workspace.push_many([~\"src\", ~\"foo-0.1\", ~\"pkg.rs\"]),\n               \"extern mod rustpkg; fn main() { debug!(\\\"Hi\\\"); }\");\n     command_line_test([~\"build\", ~\"foo\"], &workspace);\n     debug!(\"workspace = %s\", workspace.to_str());\n@@ -1215,8 +1207,6 @@ fn rust_path_hack_test(hack_flag: bool) {\n    let dest_workspace = mk_empty_workspace(&Path(\"bar\"), &NoVersion, \"dest_workspace\");\n    let rust_path = Some(~[(~\"RUST_PATH\",\n        fmt!(\"%s:%s\", dest_workspace.to_str(), workspace.push_many([\"src\", \"foo-0.1\"]).to_str()))]);\n-   debug!(\"declare -x RUST_PATH=%s:%s\",\n-       dest_workspace.to_str(), workspace.push_many([\"src\", \"foo-0.1\"]).to_str());\n    command_line_test_with_env(~[~\"install\"] + if hack_flag { ~[~\"--rust-path-hack\"] } else { ~[] } +\n                                ~[~\"foo\"], &dest_workspace, rust_path);\n    assert_lib_exists(&dest_workspace, &Path(\"foo\"), NoVersion);\n@@ -1256,7 +1246,6 @@ fn rust_path_hack_cwd() {\n \n    let dest_workspace = mk_empty_workspace(&Path(\"bar\"), &NoVersion, \"dest_workspace\");\n    let rust_path = Some(~[(~\"RUST_PATH\", dest_workspace.to_str())]);\n-   debug!(\"declare -x RUST_PATH=%s\", dest_workspace.to_str());\n    command_line_test_with_env([~\"install\", ~\"--rust-path-hack\", ~\"foo\"], &cwd, rust_path);\n    debug!(\"Checking that foo exists in %s\", dest_workspace.to_str());\n    assert_lib_exists(&dest_workspace, &Path(\"foo\"), NoVersion);\n@@ -1276,7 +1265,6 @@ fn rust_path_hack_multi_path() {\n \n    let dest_workspace = mk_empty_workspace(&Path(\"bar\"), &NoVersion, \"dest_workspace\");\n    let rust_path = Some(~[(~\"RUST_PATH\", dest_workspace.to_str())]);\n-   debug!(\"declare -x RUST_PATH=%s\", dest_workspace.to_str());\n    command_line_test_with_env([~\"install\", ~\"--rust-path-hack\", name.clone()], &subdir, rust_path);\n    debug!(\"Checking that %s exists in %s\", name, dest_workspace.to_str());\n    assert_lib_exists(&dest_workspace, &Path(\"quux\"), NoVersion);\n@@ -1295,7 +1283,6 @@ fn rust_path_hack_install_no_arg() {\n \n    let dest_workspace = mk_empty_workspace(&Path(\"bar\"), &NoVersion, \"dest_workspace\");\n    let rust_path = Some(~[(~\"RUST_PATH\", dest_workspace.to_str())]);\n-   debug!(\"declare -x RUST_PATH=%s\", dest_workspace.to_str());\n    command_line_test_with_env([~\"install\", ~\"--rust-path-hack\"], &source_dir, rust_path);\n    debug!(\"Checking that foo exists in %s\", dest_workspace.to_str());\n    assert_lib_exists(&dest_workspace, &Path(\"foo\"), NoVersion);\n@@ -1314,7 +1301,6 @@ fn rust_path_hack_build_no_arg() {\n \n    let dest_workspace = mk_empty_workspace(&Path(\"bar\"), &NoVersion, \"dest_workspace\");\n    let rust_path = Some(~[(~\"RUST_PATH\", dest_workspace.to_str())]);\n-   debug!(\"declare -x RUST_PATH=%s\", dest_workspace.to_str());\n    command_line_test_with_env([~\"build\", ~\"--rust-path-hack\"], &source_dir, rust_path);\n    debug!(\"Checking that foo exists in %s\", dest_workspace.to_str());\n    assert_built_library_exists(&dest_workspace, \"foo\");\n@@ -1336,8 +1322,6 @@ fn rust_path_install_target() {\n     let rust_path = Some(~[(~\"RUST_PATH\", fmt!(\"%s:%s\", dir_to_install_to.to_str(),\n                                                dir.to_str()))]);\n     let cwd = os::getcwd();\n-\n-    debug!(\"RUST_PATH=%s:%s\", dir_to_install_to.to_str(), dir.to_str());\n     command_line_test_with_env([~\"install\", ~\"foo\"],\n                                &cwd,\n                                rust_path);\n@@ -1623,7 +1607,6 @@ fn pkgid_pointing_to_subdir() {\n                use foo::f; use bar::g; \\n\n                fn main() { f(); g(); }\");\n \n-    debug!(\"RUST_PATH=%s\", workspace.to_str());\n     command_line_test([~\"install\", ~\"testpkg\"], &workspace);\n     assert_executable_exists(&workspace, \"testpkg\");\n }"}]}