{"sha": "09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YmYyZmVmMjI0OTYwMmJkZDNkNGQ1OGFlMGRjYjllNzk2OGNhY2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T14:58:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:56Z"}, "message": "Fallout in tests -- we now report an error if you even reference a type\n`&Foo` where `Foo` is a trait that is not object-safe", "tree": {"sha": "040c5dcb3385bdeb00a0579efd5bf7ef47d98238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040c5dcb3385bdeb00a0579efd5bf7ef47d98238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "html_url": "https://github.com/rust-lang/rust/commit/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15d743fa87efa9d496447eac1ebd402c5dab0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15d743fa87efa9d496447eac1ebd402c5dab0b3", "html_url": "https://github.com/rust-lang/rust/commit/d15d743fa87efa9d496447eac1ebd402c5dab0b3"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "78d0394a6e5ad31dbff6090aaab5409e67b2d0bd", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -72,7 +72,6 @@ pub mod testtypes {\n     // Tests TyTrait\n     pub trait FooTrait {\n         fn foo_method(&self) -> usize;\n-        fn foo_static_method() -> usize;\n     }\n \n     // Tests TyStruct"}, {"sha": "d18746cdf0ba5726cab195da4d15ed12bb637e14", "filename": "src/test/compile-fail/cast-to-unsized-trait-object-suggestion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fcast-to-unsized-trait-object-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fcast-to-unsized-trait-object-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-unsized-trait-object-suggestion.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn main() {\n-    &1 as Copy;\n+    &1 as Send;\n     //~^ ERROR cast to unsized type\n     //~| HELP try casting to a reference instead:\n-    //~| SUGGESTION &1 as &Copy;\n-    Box::new(1) as Copy;\n+    //~| SUGGESTION &1 as &Send;\n+    Box::new(1) as Send;\n     //~^ ERROR cast to unsized type\n     //~| HELP try casting to a `Box` instead:\n-    //~| SUGGESTION Box::new(1) as Box<Copy>;\n+    //~| SUGGESTION Box::new(1) as Box<Send>;\n }"}, {"sha": "9b02bf4cb85a8744dddd64a452bca81da8ae022b", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -15,7 +15,7 @@\n // so for now just live with it.\n // This test case was originally for issue #2258.\n \n-trait ToOpt {\n+trait ToOpt: Sized {\n     fn to_option(&self) -> Option<Self>;\n }\n "}, {"sha": "95176da9020d566c9dfdcc8bf3703ad85b1ee5fe", "filename": "src/test/compile-fail/issue-18959.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -21,10 +21,11 @@ impl Foo for Thing {\n fn foo(b: &Bar) {\n     b.foo(&0)\n     //~^ ERROR the trait `Foo` is not implemented for the type `Bar`\n+    //~| ERROR E0038\n }\n \n fn main() {\n     let mut thing = Thing;\n-    let test: &Bar = &mut thing; //~ ERROR cannot convert to a trait object\n+    let test: &Bar = &mut thing; //~ ERROR E0038\n     foo(test);\n }"}, {"sha": "e24e6bbeb7bbac40954121f8b4d7a1a18258d118", "filename": "src/test/compile-fail/issue-19380.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19380.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -18,11 +18,11 @@ impl Qiz for Foo {\n }\n \n struct Bar {\n+//~^ ERROR E0038\n   foos: &'static [&'static (Qiz + 'static)]\n }\n \n const FOO : Foo = Foo;\n const BAR : Bar = Bar { foos: &[&FOO]};\n-//~^ ERROR: cannot convert to a trait object because trait `Qiz` is not object-safe [E0038]\n \n fn main() { }"}, {"sha": "a6190500582620af5659fa756a9550f6c4af8c8f", "filename": "src/test/compile-fail/issue-19538.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fissue-19538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fissue-19538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19538.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -25,5 +25,6 @@ impl Bar for Thing { }\n fn main() {\n     let mut thing = Thing;\n     let test: &mut Bar = &mut thing;\n-    //~^ ERROR cannot convert to a trait object because trait `Bar` is not object-safe\n+    //~^ ERROR E0038\n+    //~| ERROR E0038\n }"}, {"sha": "63e5718537cf9166881efafaa66be30ff683b1a0", "filename": "src/test/compile-fail/object-safety-generics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-generics.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -23,14 +23,15 @@ trait Quux {\n \n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n-        //~^ ERROR `Bar` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE method `bar` has generic type parameters\n }\n \n fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n     t as &Bar\n-        //~^ ERROR `Bar` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE method `bar` has generic type parameters\n+        //~| ERROR E0038\n }\n \n fn make_quux<T:Quux>(t: &T) -> &Quux {"}, {"sha": "f49ed42fe44d0022bc132a65b4b75a7094b14933", "filename": "src/test/compile-fail/object-safety-issue-22040.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -18,7 +18,7 @@ trait Expr: Debug + PartialEq {\n \n //#[derive(PartialEq)]\n #[derive(Debug)]\n-struct SExpr<'x> {\n+struct SExpr<'x> { //~ ERROR E0038\n     elements: Vec<Box<Expr+ 'x>>,\n }\n \n@@ -43,8 +43,8 @@ impl <'x> Expr for SExpr<'x> {\n }\n \n fn main() {\n-    let a: Box<Expr> = Box::new(SExpr::new()); //~ ERROR trait `Expr` is not object-safe\n-    let b: Box<Expr> = Box::new(SExpr::new()); //~ ERROR trait `Expr` is not object-safe\n+    let a: Box<Expr> = Box::new(SExpr::new());\n+    let b: Box<Expr> = Box::new(SExpr::new());\n \n     assert_eq!(a , b);\n }"}, {"sha": "55b780906355a8f8b1a21f12679ab1f132938cb5", "filename": "src/test/compile-fail/object-safety-mentions-Self.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-mentions-Self.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -26,26 +26,28 @@ trait Quux {\n \n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n-        //~^ ERROR `Bar` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE method `bar` references the `Self` type in its arguments or return type\n }\n \n fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n     t as &Bar\n-        //~^ ERROR `Bar` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE method `bar` references the `Self` type in its arguments or return type\n+        //~| ERROR E0038\n }\n \n fn make_baz<T:Baz>(t: &T) -> &Baz {\n     t\n-        //~^ ERROR `Baz` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE method `bar` references the `Self` type in its arguments or return type\n }\n \n fn make_baz_explicit<T:Baz>(t: &T) -> &Baz {\n     t as &Baz\n-        //~^ ERROR `Baz` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE method `bar` references the `Self` type in its arguments or return type\n+        //~| ERROR E0038\n }\n \n fn make_quux<T:Quux>(t: &T) -> &Quux {"}, {"sha": "2dc7983d1b561d3f522177862a62ed295ef757d4", "filename": "src/test/compile-fail/object-safety-no-static.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -17,14 +17,15 @@ trait Foo {\n \n fn foo_implicit<T:Foo+'static>(b: Box<T>) -> Box<Foo+'static> {\n     b\n-        //~^ ERROR cannot convert to a trait object\n+        //~^ ERROR E0038\n         //~| NOTE method `foo` has no receiver\n }\n \n fn foo_explicit<T:Foo+'static>(b: Box<T>) -> Box<Foo+'static> {\n     b as Box<Foo>\n-        //~^ ERROR cannot convert to a trait object\n+        //~^ ERROR E0038\n         //~| NOTE method `foo` has no receiver\n+        //~| ERROR E0038\n }\n \n fn main() {"}, {"sha": "401602bd681a38b5a536e98fd533c8e8c2492c5f", "filename": "src/test/compile-fail/object-safety-sized-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-sized-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-sized-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-sized-2.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -19,14 +19,15 @@ trait Bar\n \n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n-        //~^ ERROR `Bar` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE the trait cannot require that `Self : Sized`\n }\n \n fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n     t as &Bar\n-        //~^ ERROR `Bar` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE the trait cannot require that `Self : Sized`\n+        //~| ERROR E0038\n }\n \n fn main() {"}, {"sha": "29b4e4db65c36d11a70a7b04bbceb1e1dc988c11", "filename": "src/test/compile-fail/object-safety-sized.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-sized.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -17,14 +17,15 @@ trait Bar : Sized {\n \n fn make_bar<T:Bar>(t: &T) -> &Bar {\n     t\n-        //~^ ERROR `Bar` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE the trait cannot require that `Self : Sized`\n }\n \n fn make_bar_explicit<T:Bar>(t: &T) -> &Bar {\n     t as &Bar\n-        //~^ ERROR `Bar` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE the trait cannot require that `Self : Sized`\n+        //~| ERROR E0038\n }\n \n fn main() {"}, {"sha": "ba82635a4016e16a0b57c59ac7bec7e33017ab5d", "filename": "src/test/compile-fail/object-safety-supertrait-mentions-Self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -24,7 +24,7 @@ fn make_bar<T:Bar<u32>>(t: &T) -> &Bar<u32> {\n \n fn make_baz<T:Baz>(t: &T) -> &Baz {\n     t\n-        //~^ ERROR `Baz` is not object-safe\n+        //~^ ERROR E0038\n         //~| NOTE the trait cannot use `Self` as a type parameter in the supertrait listing\n }\n "}, {"sha": "0ca936878148b6c54f2d477f9d43128beaf838b9", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=09bf2fef2249602bdd3d4d58ae0dcb9e7968cacc", "patch": "@@ -21,10 +21,10 @@ fn main() {\n         // str\n         std::intrinsics::type_name::<str>(),\n         // Trait\n-        std::intrinsics::type_name::<Copy>(),\n+        std::intrinsics::type_name::<Send>(),\n         // Newtype\n         std::intrinsics::type_name::<NT>(),\n         // DST\n         std::intrinsics::type_name::<DST>()\n-    )}, (\"[u8]\", \"str\", \"core::marker::Copy + 'static\", \"NT\", \"DST\"));\n+    )}, (\"[u8]\", \"str\", \"core::marker::Send + 'static\", \"NT\", \"DST\"));\n }"}]}