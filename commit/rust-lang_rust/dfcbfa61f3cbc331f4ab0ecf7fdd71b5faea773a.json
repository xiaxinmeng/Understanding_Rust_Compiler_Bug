{"sha": "dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmY2JmYTYxZjNjYmMzMzFmNGFiMGVjZjdmZGQ3MWI1ZmFlYTc3M2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-31T22:48:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-31T23:02:17Z"}, "message": "rt: Introduce \"end_dp\" bailouts in order to avoid marching past the end of oddly aligned vectors", "tree": {"sha": "4fe190ae5786965687d3c80b9b4f587066b5c496", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe190ae5786965687d3c80b9b4f587066b5c496"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a", "html_url": "https://github.com/rust-lang/rust/commit/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "143569fce4e9c394496e8bac357511229255ed6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/143569fce4e9c394496e8bac357511229255ed6a", "html_url": "https://github.com/rust-lang/rust/commit/143569fce4e9c394496e8bac357511229255ed6a"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "a693684fa896fe52c6dbdb5d1346a785895ef5fd", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a", "patch": "@@ -280,7 +280,7 @@ class cmp : public data<cmp,ptr_pair> {\n     }\n \n     inline void cmp_two_pointers() {\n-        if (align) dp = align_to(dp, alignof<uint8_t *>() * 2);\n+        ALIGN_TO(alignof<void *>() * 2);\n         data_pair<uint8_t *> fst = bump_dp<uint8_t *>(dp);\n         data_pair<uint8_t *> snd = bump_dp<uint8_t *>(dp);\n         cmp_number(fst);\n@@ -289,7 +289,7 @@ class cmp : public data<cmp,ptr_pair> {\n     }\n \n     inline void cmp_pointer() {\n-        if (align) dp = align_to(dp, alignof<uint8_t *>());\n+        ALIGN_TO(alignof<void *>());\n         cmp_number(bump_dp<uint8_t *>(dp));\n     }\n \n@@ -369,7 +369,7 @@ void cmp::cmp_number<int32_t>(const data_pair<int32_t> &nums) {\n void\n cmp::walk_vec(bool is_pod, const std::pair<ptr_pair,ptr_pair> &data_range) {\n     cmp sub(*this, data_range.first);\n-    ptr_pair data_end = data_range.second;\n+    ptr_pair data_end = sub.end_dp = data_range.second;\n     while (!result && sub.dp < data_end) {\n         sub.walk_reset();\n         result = sub.result;\n@@ -467,6 +467,7 @@ log::walk_vec(bool is_pod, const std::pair<ptr,ptr> &data) {\n     out << \"[\";\n \n     log sub(*this, data.first);\n+    sub.end_dp = data.second;\n \n     bool first = true;\n     while (sub.dp < data.second) {"}, {"sha": "dacfddba049667f99cc751ba8e5851f610ae9d67", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a", "patch": "@@ -622,11 +622,9 @@ class ptr {\n     template<typename T>\n     struct data { typedef T t; };\n \n-    ptr(uint8_t *in_p)\n-    : p(in_p) {}\n-\n-    ptr(uintptr_t in_p)\n-    : p((uint8_t *)in_p) {}\n+    ptr() : p(NULL) {}\n+    ptr(uint8_t *in_p) : p(in_p) {}\n+    ptr(uintptr_t in_p) : p((uint8_t *)in_p) {}\n \n     inline ptr operator+(const size_t amount) const {\n         return make(p + amount);\n@@ -639,7 +637,8 @@ class ptr {\n     template<typename T>\n     inline operator T *() { return (T *)p; }\n \n-    inline operator uintptr_t() { return (uintptr_t)p; }\n+    inline operator bool() const { return p != NULL; }\n+    inline operator uintptr_t() const { return (uintptr_t)p; }\n \n     static inline ptr make(uint8_t *in_p) {\n         ptr self(in_p);\n@@ -687,12 +686,14 @@ class ptr_pair {\n     template<typename T>\n     struct data { typedef data_pair<T> t; };\n \n+    ptr_pair() : fst(NULL), snd(NULL) {}\n     ptr_pair(uint8_t *in_fst, uint8_t *in_snd) : fst(in_fst), snd(in_snd) {}\n-\n     ptr_pair(data_pair<uint8_t *> &other) : fst(other.fst), snd(other.snd) {}\n \n     inline void operator=(uint8_t *rhs) { fst = snd = rhs; }\n \n+    inline operator bool() const { return fst != NULL && snd != NULL; }\n+\n     inline ptr_pair operator+(size_t n) const {\n         return make(fst + n, snd + n);\n     }\n@@ -754,15 +755,27 @@ namespace shape {\n // An abstract class (again using the curiously recurring template pattern)\n // for methods that actually manipulate the data involved.\n \n+#define ALIGN_TO(alignment) \\\n+    if (this->align) { \\\n+        dp = align_to(dp, (alignment)); \\\n+        if (this->end_dp && !(dp < this->end_dp)) \\\n+            return; \\\n+    }\n+\n #define DATA_SIMPLE(ty, call) \\\n-    if (this->align) dp = align_to(dp, alignof<ty>()); \\\n+    ALIGN_TO(alignof<ty>()); \\\n     U end_dp = dp + sizeof(ty); \\\n     static_cast<T *>(this)->call; \\\n     dp = end_dp;\n \n template<typename T,typename U>\n class data : public ctxt< data<T,U> > {\n+public:\n+    U dp;\n+\n protected:\n+    U end_dp;\n+\n     void walk_box_contents();\n     void walk_fn_contents(ptr &dp);\n     void walk_obj_contents(ptr &dp);\n@@ -774,16 +787,15 @@ class data : public ctxt< data<T,U> > {\n     static std::pair<ptr_pair,ptr_pair> get_vec_data_range(ptr_pair &dp);\n \n public:\n-    U dp;\n-\n     data(rust_task *in_task,\n          bool in_align,\n          const uint8_t *in_sp,\n          const type_param *in_params,\n          const rust_shape_tables *in_tables,\n          U const &in_dp)\n     : ctxt< data<T,U> >(in_task, in_align, in_sp, in_params, in_tables),\n-      dp(in_dp) {}\n+      dp(in_dp),\n+      end_dp() {}\n \n     void walk_tag(tag_info &tinfo);\n \n@@ -801,14 +813,14 @@ class data : public ctxt< data<T,U> > {\n     void walk_box()     { DATA_SIMPLE(void *, walk_box()); }\n \n     void walk_fn() {\n-        if (this->align) dp = align_to(dp, sizeof(void *));\n+        ALIGN_TO(alignof<void *>());\n         U next_dp = dp + sizeof(void *) * 2;\n         static_cast<T *>(this)->walk_fn();\n         dp = next_dp;\n     }\n \n     void walk_obj() {\n-        if (this->align) dp = align_to(dp, sizeof(void *));\n+        ALIGN_TO(alignof<void *>());\n         U next_dp = dp + sizeof(void *) * 2;\n         static_cast<T *>(this)->walk_obj();\n         dp = next_dp;\n@@ -893,8 +905,8 @@ void\n data<T,U>::walk_tag(tag_info &tinfo) {\n     size_of::compute_tag_size(*this, tinfo);\n \n-    if (tinfo.variant_count > 1 && this->align)\n-        dp = align_to(dp, alignof<uint32_t>());\n+    if (tinfo.variant_count > 1)\n+        ALIGN_TO(alignof<uint32_t>());\n \n     U end_dp = dp + tinfo.tag_sa.size;\n \n@@ -1029,7 +1041,7 @@ class log : public data<log,ptr> {\n     void walk_subcontext(log &sub) { sub.walk(); }\n \n     void walk_box_contents(log &sub, ptr &ref_count_dp) {\n-        if (ref_count_dp == 0) {\n+        if (!ref_count_dp) {\n             out << \"(null)\";\n         } else {\n             sub.align = true;"}]}