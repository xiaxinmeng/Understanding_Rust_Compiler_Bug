{"sha": "45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmM4ZDVjODRkNDBkYTdhNWRiZjliMWEyM2VjMzg5ZjU0ZDFhODE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-27T16:03:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-27T16:03:29Z"}, "message": "Merge #4587\n\n4587: Add \"missing unsafe\" diagnostics r=Nashenas88 a=Nashenas88\n\nAddresses #190 \n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>", "tree": {"sha": "ebe09304a24180b010b21a6aea3a727433403565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe09304a24180b010b21a6aea3a727433403565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe923RCRBK7hj4Ov3rIwAAdHIIAKD6WS1ilvRkQBVNb+HCZx+G\nanZ41OTDqHrahPfv6Ri5DrBXYWee9H/PuHHeXyRwu9K0OFEVNWXnllN1F0lEIABD\nBuPt/eJaaLYmdHu2uduKCrEIoWalpLJI4H1uT/C+Q+vRSyOhoy63LLzXyCE76+Hl\nw6NhJaaTkl0DoFWG35kCaHIVa7xN17B//SaFi7AtKHXncTCIZ3UzGlyxmRB1HUa2\nkM1lY2hZ2600Ci7B7m/z+2zGrklDVuSrKtR0jIv0snReqAnmQqbTXvl4KR7MScXQ\nl5S85J1k906DIyPR6PUrdr4aISOcjllFxKhmkjjdM3RODLwaokjP+xHHKvhXMb4=\n=zCrE\n-----END PGP SIGNATURE-----\n", "payload": "tree ebe09304a24180b010b21a6aea3a727433403565\nparent 9d1e2c4d9dc6c7f5fbaee5d9907d135f618d7ac6\nparent 9777d2cb2dcea7b5a3b289708fea21b4bf787f0f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593273809 +0000\ncommitter GitHub <noreply@github.com> 1593273809 +0000\n\nMerge #4587\n\n4587: Add \"missing unsafe\" diagnostics r=Nashenas88 a=Nashenas88\n\nAddresses #190 \n\nCo-authored-by: Paul Daniel Faria <Nashenas88@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "html_url": "https://github.com/rust-lang/rust/commit/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1e2c4d9dc6c7f5fbaee5d9907d135f618d7ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1e2c4d9dc6c7f5fbaee5d9907d135f618d7ac6", "html_url": "https://github.com/rust-lang/rust/commit/9d1e2c4d9dc6c7f5fbaee5d9907d135f618d7ac6"}, {"sha": "9777d2cb2dcea7b5a3b289708fea21b4bf787f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9777d2cb2dcea7b5a3b289708fea21b4bf787f0f", "html_url": "https://github.com/rust-lang/rust/commit/9777d2cb2dcea7b5a3b289708fea21b4bf787f0f"}], "stats": {"total": 341, "additions": 328, "deletions": 13}, "files": [{"sha": "472fe1a1370e04e4852002367d4fcccd844850c4", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -7,6 +7,5 @@ crates/*/target\n *.log\n *.iml\n .vscode/settings.json\n-*.html\n generated_assists.adoc\n generated_features.adoc"}, {"sha": "dc758a1f09ea7dc48150754fc5b6f090c040aea9", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -30,7 +30,7 @@ version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n dependencies = [\n- \"winapi 0.3.8\",\n+ \"winapi 0.3.9\",\n ]\n \n [[package]]\n@@ -1791,7 +1791,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438\"\n dependencies = [\n  \"libc\",\n- \"winapi 0.3.8\",\n+ \"winapi 0.3.9\",\n ]\n \n [[package]]"}, {"sha": "27e94b7fe750b93f76604092912df37c5031b1f8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -26,8 +26,10 @@ use hir_ty::{\n     autoderef,\n     display::{HirDisplayError, HirFormatter},\n     expr::ExprValidator,\n-    method_resolution, ApplicationTy, Canonical, GenericPredicate, InEnvironment, Substs,\n-    TraitEnvironment, Ty, TyDefId, TypeCtor,\n+    method_resolution,\n+    unsafe_validation::UnsafeValidator,\n+    ApplicationTy, Canonical, GenericPredicate, InEnvironment, Substs, TraitEnvironment, Ty,\n+    TyDefId, TypeCtor,\n };\n use ra_db::{CrateId, CrateName, Edition, FileId};\n use ra_prof::profile;\n@@ -677,7 +679,9 @@ impl Function {\n         let _p = profile(\"Function::diagnostics\");\n         let infer = db.infer(self.id.into());\n         infer.add_diagnostics(db, self.id, sink);\n-        let mut validator = ExprValidator::new(self.id, infer, sink);\n+        let mut validator = ExprValidator::new(self.id, infer.clone(), sink);\n+        validator.validate_body(db);\n+        let mut validator = UnsafeValidator::new(self.id, infer, sink);\n         validator.validate_body(db);\n     }\n }"}, {"sha": "c6bc85e2f13e14ca1e3f01e96989aaa50371ce81", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -176,6 +176,7 @@ impl ExprCollector<'_> {\n         if !self.expander.is_cfg_enabled(&expr) {\n             return self.missing_expr();\n         }\n+\n         match expr {\n             ast::Expr::IfExpr(e) => {\n                 let then_branch = self.collect_block_opt(e.then_branch());\n@@ -218,8 +219,12 @@ impl ExprCollector<'_> {\n                     let body = self.collect_block_opt(e.block_expr());\n                     self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n                 }\n+                ast::Effect::Unsafe(_) => {\n+                    let body = self.collect_block_opt(e.block_expr());\n+                    self.alloc_expr(Expr::Unsafe { body }, syntax_ptr)\n+                }\n                 // FIXME: we need to record these effects somewhere...\n-                ast::Effect::Async(_) | ast::Effect::Label(_) | ast::Effect::Unsafe(_) => {\n+                ast::Effect::Async(_) | ast::Effect::Label(_) => {\n                     self.collect_block_opt(e.block_expr())\n                 }\n             },\n@@ -445,7 +450,6 @@ impl ExprCollector<'_> {\n                     Mutability::from_mutable(e.mut_token().is_some())\n                 };\n                 let rawness = Rawness::from_raw(raw_tok);\n-\n                 self.alloc_expr(Expr::Ref { expr, rawness, mutability }, syntax_ptr)\n             }\n             ast::Expr::PrefixExpr(e) => {"}, {"sha": "e41cfc16b9e813ef74c080d0ea2be3db67ce9d41", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -150,6 +150,9 @@ pub enum Expr {\n     Tuple {\n         exprs: Vec<ExprId>,\n     },\n+    Unsafe {\n+        body: ExprId,\n+    },\n     Array(Array),\n     Literal(Literal),\n }\n@@ -247,7 +250,7 @@ impl Expr {\n                     f(*expr);\n                 }\n             }\n-            Expr::TryBlock { body } => f(*body),\n+            Expr::TryBlock { body } | Expr::Unsafe { body } => f(*body),\n             Expr::Loop { body, .. } => f(*body),\n             Expr::While { condition, body, .. } => {\n                 f(*condition);"}, {"sha": "a59efb34768dcc7ce3656fbc8ce16e55909d293f", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -169,3 +169,31 @@ impl AstDiagnostic for BreakOutsideOfLoop {\n         ast::Expr::cast(node).unwrap()\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct MissingUnsafe {\n+    pub file: HirFileId,\n+    pub expr: AstPtr<ast::Expr>,\n+}\n+\n+impl Diagnostic for MissingUnsafe {\n+    fn message(&self) -> String {\n+        format!(\"This operation is unsafe and requires an unsafe function or block\")\n+    }\n+    fn source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.expr.clone().into() }\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n+impl AstDiagnostic for MissingUnsafe {\n+    type AST = ast::Expr;\n+\n+    fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n+        let root = db.parse_or_expand(self.source().file_id).unwrap();\n+        let node = self.source().value.to_node(&root);\n+        ast::Expr::cast(node).unwrap()\n+    }\n+}"}, {"sha": "61af5f06456c062aa2853089d3c7b42eb26700ca", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -142,6 +142,7 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME: Breakable block inference\n                 self.infer_block(statements, *tail, expected)\n             }\n+            Expr::Unsafe { body } => self.infer_expr(*body, expected),\n             Expr::TryBlock { body } => {\n                 let _inner = self.infer_expr(*body, expected);\n                 // FIXME should be std::result::Result<{inner}, _>"}, {"sha": "41415813934c90b7753b5d754d50a5245eca8044", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -37,6 +37,7 @@ pub(crate) mod utils;\n pub mod db;\n pub mod diagnostics;\n pub mod expr;\n+pub mod unsafe_validation;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "9c2c6959ddc9d36b5328f56d9f678588a42d3b50", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -11,7 +11,10 @@ use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDataba\n use rustc_hash::FxHashSet;\n use stdx::format_to;\n \n-use crate::{db::HirDatabase, diagnostics::Diagnostic, expr::ExprValidator};\n+use crate::{\n+    db::HirDatabase, diagnostics::Diagnostic, expr::ExprValidator,\n+    unsafe_validation::UnsafeValidator,\n+};\n \n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n@@ -119,7 +122,9 @@ impl TestDB {\n                 let infer = self.infer(f.into());\n                 let mut sink = DiagnosticSink::new(&mut cb);\n                 infer.add_diagnostics(self, f, &mut sink);\n-                let mut validator = ExprValidator::new(f, infer, &mut sink);\n+                let mut validator = ExprValidator::new(f, infer.clone(), &mut sink);\n+                validator.validate_body(self);\n+                let mut validator = UnsafeValidator::new(f, infer, &mut sink);\n                 validator.validate_body(self);\n             }\n         }"}, {"sha": "2a85ce85d6de433fcf632c94102944a862b0c0ce", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -538,6 +538,155 @@ fn missing_record_pat_field_no_diagnostic_if_not_exhaustive() {\n     assert_snapshot!(diagnostics, @\"\");\n }\n \n+#[test]\n+fn missing_unsafe_diagnostic_with_raw_ptr() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+fn missing_unsafe() {\n+    let x = &5 as *const usize;\n+    let y = *x;\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r#\"\"*x\": This operation is unsafe and requires an unsafe function or block\"#);\n+}\n+\n+#[test]\n+fn missing_unsafe_diagnostic_with_unsafe_call() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+//- /lib.rs\n+unsafe fn unsafe_fn() {\n+    let x = &5 as *const usize;\n+    let y = *x;\n+}\n+\n+fn missing_unsafe() {\n+    unsafe_fn();\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r#\"\"unsafe_fn()\": This operation is unsafe and requires an unsafe function or block\"#);\n+}\n+\n+#[test]\n+fn missing_unsafe_diagnostic_with_unsafe_method_call() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+struct HasUnsafe;\n+\n+impl HasUnsafe {\n+    unsafe fn unsafe_fn(&self) {\n+        let x = &5 as *const usize;\n+        let y = *x;\n+    }\n+}\n+\n+fn missing_unsafe() {\n+    HasUnsafe.unsafe_fn();\n+}\n+\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r#\"\"HasUnsafe.unsafe_fn()\": This operation is unsafe and requires an unsafe function or block\"#);\n+}\n+\n+#[test]\n+fn no_missing_unsafe_diagnostic_with_raw_ptr_in_unsafe_block() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+fn nothing_to_see_move_along() {\n+    let x = &5 as *const usize;\n+    unsafe {\n+        let y = *x;\n+    }\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @\"\");\n+}\n+\n+#[test]\n+fn missing_unsafe_diagnostic_with_raw_ptr_outside_unsafe_block() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+fn nothing_to_see_move_along() {\n+    let x = &5 as *const usize;\n+    unsafe {\n+        let y = *x;\n+    }\n+    let z = *x;\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r#\"\"*x\": This operation is unsafe and requires an unsafe function or block\"#);\n+}\n+\n+#[test]\n+fn no_missing_unsafe_diagnostic_with_unsafe_call_in_unsafe_block() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+unsafe fn unsafe_fn() {\n+    let x = &5 as *const usize;\n+    let y = *x;\n+}\n+\n+fn nothing_to_see_move_along() {\n+    unsafe {\n+        unsafe_fn();\n+    }\n+}\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @\"\");\n+}\n+\n+#[test]\n+fn no_missing_unsafe_diagnostic_with_unsafe_method_call_in_unsafe_block() {\n+    let diagnostics = TestDB::with_files(\n+        r\"\n+struct HasUnsafe;\n+\n+impl HasUnsafe {\n+    unsafe fn unsafe_fn() {\n+        let x = &5 as *const usize;\n+        let y = *x;\n+    }\n+}\n+\n+fn nothing_to_see_move_along() {\n+    unsafe {\n+        HasUnsafe.unsafe_fn();\n+    }\n+}\n+\n+\",\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @\"\");\n+}\n+\n #[test]\n fn break_outside_of_loop() {\n     let diagnostics = TestDB::with_files("}, {"sha": "cd919466f450807ccc6ca77bac66194337c8edf1", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -1880,6 +1880,7 @@ fn main() {\n         @r###\"\n     10..130 '{     ...2 }; }': ()\n     20..21 'x': i32\n+    24..37 'unsafe { 92 }': i32\n     31..37 '{ 92 }': i32\n     33..35 '92': i32\n     47..48 'y': {unknown}"}, {"sha": "c512c4f8e9cb0204b161493186af0c88ef3f066c", "filename": "crates/ra_hir_ty/src/unsafe_validation.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -0,0 +1,120 @@\n+//! Provides validations for unsafe code. Currently checks if unsafe functions are missing\n+//! unsafe blocks.\n+\n+use std::sync::Arc;\n+\n+use hir_def::{\n+    body::Body,\n+    expr::{Expr, ExprId, UnaryOp},\n+    DefWithBodyId, FunctionId,\n+};\n+use hir_expand::diagnostics::DiagnosticSink;\n+\n+use crate::{\n+    db::HirDatabase, diagnostics::MissingUnsafe, lower::CallableDef, ApplicationTy,\n+    InferenceResult, Ty, TypeCtor,\n+};\n+\n+pub struct UnsafeValidator<'a, 'b: 'a> {\n+    func: FunctionId,\n+    infer: Arc<InferenceResult>,\n+    sink: &'a mut DiagnosticSink<'b>,\n+}\n+\n+impl<'a, 'b> UnsafeValidator<'a, 'b> {\n+    pub fn new(\n+        func: FunctionId,\n+        infer: Arc<InferenceResult>,\n+        sink: &'a mut DiagnosticSink<'b>,\n+    ) -> UnsafeValidator<'a, 'b> {\n+        UnsafeValidator { func, infer, sink }\n+    }\n+\n+    pub fn validate_body(&mut self, db: &dyn HirDatabase) {\n+        let def = self.func.into();\n+        let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n+        let func_data = db.function_data(self.func);\n+        if func_data.is_unsafe\n+            || unsafe_expressions\n+                .iter()\n+                .filter(|unsafe_expr| !unsafe_expr.inside_unsafe_block)\n+                .count()\n+                == 0\n+        {\n+            return;\n+        }\n+\n+        let (_, body_source) = db.body_with_source_map(def);\n+        for unsafe_expr in unsafe_expressions {\n+            if !unsafe_expr.inside_unsafe_block {\n+                if let Ok(in_file) = body_source.as_ref().expr_syntax(unsafe_expr.expr) {\n+                    self.sink.push(MissingUnsafe { file: in_file.file_id, expr: in_file.value })\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+pub struct UnsafeExpr {\n+    pub expr: ExprId,\n+    pub inside_unsafe_block: bool,\n+}\n+\n+pub fn unsafe_expressions(\n+    db: &dyn HirDatabase,\n+    infer: &InferenceResult,\n+    def: DefWithBodyId,\n+) -> Vec<UnsafeExpr> {\n+    let mut unsafe_exprs = vec![];\n+    let body = db.body(def);\n+    walk_unsafe(&mut unsafe_exprs, db, infer, &body, body.body_expr, false);\n+\n+    unsafe_exprs\n+}\n+\n+fn walk_unsafe(\n+    unsafe_exprs: &mut Vec<UnsafeExpr>,\n+    db: &dyn HirDatabase,\n+    infer: &InferenceResult,\n+    body: &Body,\n+    current: ExprId,\n+    inside_unsafe_block: bool,\n+) {\n+    let expr = &body.exprs[current];\n+    match expr {\n+        Expr::Call { callee, .. } => {\n+            let ty = &infer[*callee];\n+            if let &Ty::Apply(ApplicationTy {\n+                ctor: TypeCtor::FnDef(CallableDef::FunctionId(func)),\n+                ..\n+            }) = ty\n+            {\n+                if db.function_data(func).is_unsafe {\n+                    unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+                }\n+            }\n+        }\n+        Expr::MethodCall { .. } => {\n+            if infer\n+                .method_resolution(current)\n+                .map(|func| db.function_data(func).is_unsafe)\n+                .unwrap_or(false)\n+            {\n+                unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+            }\n+        }\n+        Expr::UnaryOp { expr, op: UnaryOp::Deref } => {\n+            if let Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }) = &infer[*expr] {\n+                unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n+            }\n+        }\n+        Expr::Unsafe { body: child } => {\n+            return walk_unsafe(unsafe_exprs, db, infer, body, *child, true);\n+        }\n+        _ => {}\n+    }\n+\n+    expr.walk_child_exprs(|child| {\n+        walk_unsafe(unsafe_exprs, db, infer, body, child, inside_unsafe_block);\n+    });\n+}"}, {"sha": "13d9dd195ae29461dc610e7055d6c877d8221850", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=45fc8d5c84d40da7a5dbf9b1a23ec389f54d1a81", "patch": "@@ -25,15 +25,13 @@ pub enum HighlightTag {\n     EnumVariant,\n     EscapeSequence,\n     Field,\n-    FormatSpecifier,\n     Function,\n     Generic,\n     Keyword,\n     Lifetime,\n     Macro,\n     Module,\n     NumericLiteral,\n-    Operator,\n     SelfKeyword,\n     SelfType,\n     Static,\n@@ -45,6 +43,8 @@ pub enum HighlightTag {\n     Union,\n     Local,\n     UnresolvedReference,\n+    FormatSpecifier,\n+    Operator,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]"}]}