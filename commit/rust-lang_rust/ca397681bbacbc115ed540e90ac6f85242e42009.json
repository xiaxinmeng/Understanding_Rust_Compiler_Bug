{"sha": "ca397681bbacbc115ed540e90ac6f85242e42009", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMzk3NjgxYmJhY2JjMTE1ZWQ1NDBlOTBhYzZmODUyNDJlNDIwMDk=", "commit": {"author": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-12T18:10:25Z"}, "committer": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-12T18:10:25Z"}, "message": "run rustfmt on librand", "tree": {"sha": "12ad044e4e4a2fb6d4310d9dcebb479ced2f5704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ad044e4e4a2fb6d4310d9dcebb479ced2f5704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca397681bbacbc115ed540e90ac6f85242e42009", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX/nyRAAoJEAkcWPS/w2Vxnm8QAI7YODQChAtBlQ1rQxorlGjM\nwpur/6if+K/aP0FkNSCTBJFRnGAd3yju+GFTDyuK5JIjO+M1RUroICc27YjS6nop\niYlVIAiJ0pSF9KLE/YHSNCJyr6qahdaJLYG2Pksw8OfBcoegYaWcaXaOVLJPibbA\nqxqRl7xNWV2kSpdWoSyfcYS6Vp9Rg+pQP+/02IOdJTvMQln6FBB6rW/XTLagJrxg\nu7eT+xXEa0z2MsquNqMY1QcNGEfLvl9Nk4FmivWrnbR2QKWR2QXUVZ50emZxaCx1\nOCve244SmAyHyvYEoU+EoJU90qJ4YoH1mTRYCsKCWrTwI982Cwh21B59J804/sKK\nsq3iDk0U9RLYBqohK7Aw0OUnHrpDgAIJ5wqZwD97m9iRdUGpXKydPeZHq/Uke5vo\nVwJjJpUG4p0M3oMQJmG0oh4LSDjVVu2WAsIrFwOpJYS9plIfUHsuibGwwy4eNMnb\nViEOKziMOwMVcsZLKLQtcZwwSr4djQP+eDroJJ0gsQSOPBhfaahaH2fA7fNjBYET\nODpY8c24uNy/1EtMvuOxyUNcInEzsexVJaqP1Hg61wLG4CcC6oB4mMj6bFgHLgRo\n2n0ik7xm0hubER5/+78Hgvkk5mWbSeDhb9D4hIrXBd0VkQmHV7MNMH3fsT9Sfiio\n2tVkHwI3Wqnd74y8TiX1\n=gNnl\n-----END PGP SIGNATURE-----", "payload": "tree 12ad044e4e4a2fb6d4310d9dcebb479ced2f5704\nparent acb50e3481a06089dbd13d860dadc7d8d7cd1649\nauthor Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476295825 +0530\ncommitter Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476295825 +0530\n\nrun rustfmt on librand\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca397681bbacbc115ed540e90ac6f85242e42009", "html_url": "https://github.com/rust-lang/rust/commit/ca397681bbacbc115ed540e90ac6f85242e42009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca397681bbacbc115ed540e90ac6f85242e42009/comments", "author": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acb50e3481a06089dbd13d860dadc7d8d7cd1649", "url": "https://api.github.com/repos/rust-lang/rust/commits/acb50e3481a06089dbd13d860dadc7d8d7cd1649", "html_url": "https://github.com/rust-lang/rust/commit/acb50e3481a06089dbd13d860dadc7d8d7cd1649"}], "stats": {"total": 48, "additions": 18, "deletions": 30}, "files": [{"sha": "8ca1738bb18f4740f6c096681e65f04acb357863", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=ca397681bbacbc115ed540e90ac6f85242e42009", "patch": "@@ -217,8 +217,8 @@ mod tests {\n         let mut ra: ChaChaRng = SeedableRng::from_seed(&*s);\n         let mut rb: ChaChaRng = SeedableRng::from_seed(&*s);\n         assert!(ra.gen_ascii_chars()\n-                  .take(100)\n-                  .eq(rb.gen_ascii_chars().take(100)));\n+            .take(100)\n+            .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n     #[test]\n@@ -227,8 +227,8 @@ mod tests {\n         let mut ra: ChaChaRng = SeedableRng::from_seed(seed);\n         let mut rb: ChaChaRng = SeedableRng::from_seed(seed);\n         assert!(ra.gen_ascii_chars()\n-                  .take(100)\n-                  .eq(rb.gen_ascii_chars().take(100)));\n+            .take(100)\n+            .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n     #[test]"}, {"sha": "c5588d94876c0acdace181d58a07c69b1d1afdc3", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=ca397681bbacbc115ed540e90ac6f85242e42009", "patch": "@@ -237,18 +237,10 @@ fn ziggurat<R: Rng, P, Z>(rng: &mut R,\n \n         // u is either U(-1, 1) or U(0, 1) depending on if this is a\n         // symmetric distribution or not.\n-        let u = if symmetric {\n-            2.0 * f - 1.0\n-        } else {\n-            f\n-        };\n+        let u = if symmetric { 2.0 * f - 1.0 } else { f };\n         let x = u * x_tab[i];\n \n-        let test_x = if symmetric {\n-            x.abs()\n-        } else {\n-            x\n-        };\n+        let test_x = if symmetric { x.abs() } else { x };\n \n         // algebraically equivalent to |u| < x_tab[i+1]/x_tab[i] (or u < x_tab[i+1]/x_tab[i])\n         if test_x < x_tab[i + 1] {"}, {"sha": "974f65ac2c5b5e05e38490f83eaf040ccd7e51fa", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=ca397681bbacbc115ed540e90ac6f85242e42009", "patch": "@@ -599,17 +599,17 @@ mod tests {\n         let mut ra: IsaacRng = SeedableRng::from_seed(&s[..]);\n         let mut rb: IsaacRng = SeedableRng::from_seed(&s[..]);\n         assert!(ra.gen_ascii_chars()\n-                  .take(100)\n-                  .eq(rb.gen_ascii_chars().take(100)));\n+            .take(100)\n+            .eq(rb.gen_ascii_chars().take(100)));\n     }\n     #[test]\n     fn test_rng_64_rand_seeded() {\n         let s = ::test::rng().gen_iter::<u64>().take(256).collect::<Vec<u64>>();\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(&s[..]);\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(&s[..]);\n         assert!(ra.gen_ascii_chars()\n-                  .take(100)\n-                  .eq(rb.gen_ascii_chars().take(100)));\n+            .take(100)\n+            .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n     #[test]\n@@ -618,17 +618,17 @@ mod tests {\n         let mut ra: IsaacRng = SeedableRng::from_seed(seed);\n         let mut rb: IsaacRng = SeedableRng::from_seed(seed);\n         assert!(ra.gen_ascii_chars()\n-                  .take(100)\n-                  .eq(rb.gen_ascii_chars().take(100)));\n+            .take(100)\n+            .eq(rb.gen_ascii_chars().take(100)));\n     }\n     #[test]\n     fn test_rng_64_seeded() {\n         let seed: &[_] = &[1, 23, 456, 7890, 12345];\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(seed);\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(seed);\n         assert!(ra.gen_ascii_chars()\n-                  .take(100)\n-                  .eq(rb.gen_ascii_chars().take(100)));\n+            .take(100)\n+            .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n     #[test]"}, {"sha": "b0d824da3ab4795a45b39b449300eed1c3a5f1ae", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=ca397681bbacbc115ed540e90ac6f85242e42009", "patch": "@@ -203,10 +203,6 @@ tuple_impl!{A, B, C, D, E, F, G, H, I, J, K, L}\n impl<T: Rand> Rand for Option<T> {\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> Option<T> {\n-        if rng.gen() {\n-            Some(rng.gen())\n-        } else {\n-            None\n-        }\n+        if rng.gen() { Some(rng.gen()) } else { None }\n     }\n }"}, {"sha": "b8a65842e2ff59388c52a938edd22372ca62a117", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca397681bbacbc115ed540e90ac6f85242e42009/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=ca397681bbacbc115ed540e90ac6f85242e42009", "patch": "@@ -138,7 +138,7 @@ mod tests {\n         }\n     }\n     impl Default for Counter {\n-    /// Constructs a `Counter` with initial value zero.\n+        /// Constructs a `Counter` with initial value zero.\n         fn default() -> Counter {\n             Counter { i: 0 }\n         }\n@@ -169,8 +169,8 @@ mod tests {\n         let mut ra: MyRng = SeedableRng::from_seed((ReseedWithDefault, 2));\n         let mut rb: MyRng = SeedableRng::from_seed((ReseedWithDefault, 2));\n         assert!(ra.gen_ascii_chars()\n-                  .take(100)\n-                  .eq(rb.gen_ascii_chars().take(100)));\n+            .take(100)\n+            .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n     #[test]"}]}