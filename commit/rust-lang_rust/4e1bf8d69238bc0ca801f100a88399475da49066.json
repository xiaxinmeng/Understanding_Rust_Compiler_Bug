{"sha": "4e1bf8d69238bc0ca801f100a88399475da49066", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMWJmOGQ2OTIzOGJjMGNhODAxZjEwMGE4ODM5OTQ3NWRhNDkwNjY=", "commit": {"author": {"name": "Roland Tanglao", "email": "roland@rolandtanglao.com", "date": "2012-01-27T06:46:39Z"}, "committer": {"name": "Roland Tanglao", "email": "roland@rolandtanglao.com", "date": "2012-01-27T06:46:39Z"}, "message": "rustdocs for f32.rs and f64.rs", "tree": {"sha": "216f43dde2c4a2eaeaabe9f1912164e06c5c7f22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216f43dde2c4a2eaeaabe9f1912164e06c5c7f22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e1bf8d69238bc0ca801f100a88399475da49066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1bf8d69238bc0ca801f100a88399475da49066", "html_url": "https://github.com/rust-lang/rust/commit/4e1bf8d69238bc0ca801f100a88399475da49066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e1bf8d69238bc0ca801f100a88399475da49066/comments", "author": {"login": "rtanglao", "id": 45195, "node_id": "MDQ6VXNlcjQ1MTk1", "avatar_url": "https://avatars.githubusercontent.com/u/45195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtanglao", "html_url": "https://github.com/rtanglao", "followers_url": "https://api.github.com/users/rtanglao/followers", "following_url": "https://api.github.com/users/rtanglao/following{/other_user}", "gists_url": "https://api.github.com/users/rtanglao/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtanglao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtanglao/subscriptions", "organizations_url": "https://api.github.com/users/rtanglao/orgs", "repos_url": "https://api.github.com/users/rtanglao/repos", "events_url": "https://api.github.com/users/rtanglao/events{/privacy}", "received_events_url": "https://api.github.com/users/rtanglao/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rtanglao", "id": 45195, "node_id": "MDQ6VXNlcjQ1MTk1", "avatar_url": "https://avatars.githubusercontent.com/u/45195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtanglao", "html_url": "https://github.com/rtanglao", "followers_url": "https://api.github.com/users/rtanglao/followers", "following_url": "https://api.github.com/users/rtanglao/following{/other_user}", "gists_url": "https://api.github.com/users/rtanglao/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtanglao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtanglao/subscriptions", "organizations_url": "https://api.github.com/users/rtanglao/orgs", "repos_url": "https://api.github.com/users/rtanglao/repos", "events_url": "https://api.github.com/users/rtanglao/events{/privacy}", "received_events_url": "https://api.github.com/users/rtanglao/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0ba69a96fd765290f62c7bde251596857a00077", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ba69a96fd765290f62c7bde251596857a00077", "html_url": "https://github.com/rust-lang/rust/commit/f0ba69a96fd765290f62c7bde251596857a00077"}], "stats": {"total": 379, "additions": 134, "deletions": 245}, "files": [{"sha": "0e4974e645c2ae06225b33b6053cb3b858bdb6af", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 66, "deletions": 123, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/4e1bf8d69238bc0ca801f100a88399475da49066/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1bf8d69238bc0ca801f100a88399475da49066/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=4e1bf8d69238bc0ca801f100a88399475da49066", "patch": "@@ -1,8 +1,4 @@\n-/*\n-Module: f32\n-\n-Floating point operations and constants for `f32`\n-*/\n+#[doc = \"Floating point operations and constants for `f32`\"];\n \n // PORT\n \n@@ -29,113 +25,87 @@ type t = f32;\n // These are not defined inside consts:: for consistency with\n // the integer types\n \n-/* Const: NaN */\n const NaN: f32 = 0.0_f32/0.0_f32;\n \n-/* Const: infinity */\n const infinity: f32 = 1.0_f32/0.0_f32;\n \n-/* Const: neg_infinity */\n const neg_infinity: f32 = -1.0_f32/0.0_f32;\n \n-/* Predicate: isNaN */\n pure fn is_NaN(f: f32) -> bool { f != f }\n \n-/* Function: add */\n pure fn add(x: f32, y: f32) -> f32 { ret x + y; }\n \n-/* Function: sub */\n pure fn sub(x: f32, y: f32) -> f32 { ret x - y; }\n \n-/* Function: mul */\n pure fn mul(x: f32, y: f32) -> f32 { ret x * y; }\n \n-/* Function: div */\n pure fn div(x: f32, y: f32) -> f32 { ret x / y; }\n \n-/* Function: rem */\n pure fn rem(x: f32, y: f32) -> f32 { ret x % y; }\n \n-/* Predicate: lt */\n pure fn lt(x: f32, y: f32) -> bool { ret x < y; }\n \n-/* Predicate: le */\n pure fn le(x: f32, y: f32) -> bool { ret x <= y; }\n \n-/* Predicate: eq */\n pure fn eq(x: f32, y: f32) -> bool { ret x == y; }\n \n-/* Predicate: ne */\n pure fn ne(x: f32, y: f32) -> bool { ret x != y; }\n \n-/* Predicate: ge */\n pure fn ge(x: f32, y: f32) -> bool { ret x >= y; }\n \n-/* Predicate: gt */\n pure fn gt(x: f32, y: f32) -> bool { ret x > y; }\n \n // FIXME replace the predicates below with llvm intrinsics or calls\n // to the libmath macros in the rust runtime for performance\n \n-/*\n-Predicate: is_positive\n-\n-Returns true if `x` is a positive number, including +0.0f320 and +Infinity.\n- */\n+#[doc(\n+  brief = \"Returns true if `x` is a positive number, including +0.0f320 and +Infinity.\"\n+)]\n pure fn is_positive(x: f32) -> bool\n     { ret x > 0.0f32 || (1.0f32/x) == infinity; }\n \n-/*\n-Predicate: is_negative\n-\n-Returns true if `x` is a negative number, including -0.0f320 and -Infinity.\n- */\n+#[doc(\n+  brief = \"Returns true if `x` is a negative number, including -0.0f320 and -Infinity.\"\n+)]\n pure fn is_negative(x: f32) -> bool\n     { ret x < 0.0f32 || (1.0f32/x) == neg_infinity; }\n \n-/*\n-Predicate: is_nonpositive\n-\n-Returns true if `x` is a negative number, including -0.0f320 and -Infinity.\n-(This is the same as `f32::negative`.)\n-*/\n+#[doc(\n+  brief = \"Returns true if `x` is a negative number, including \\\n+           -0.0f320 and -Infinity. (This is the same as \\\n+           `f32::negative`.)\"\n+)]\n pure fn is_nonpositive(x: f32) -> bool {\n   ret x < 0.0f32 || (1.0f32/x) == neg_infinity;\n }\n \n-/*\n-Predicate: nonnegative\n-\n-Returns true if `x` is a positive number, including +0.0f320 and +Infinity.\n-(This is the same as `f32::positive`.)\n-*/\n+#[doc(\n+  brief = \"Returns true if `x` is a positive number, \\\n+           including +0.0f320 and +Infinity. (This is \\\n+           the same as `f32::positive`.)\"\n+)]\n pure fn is_nonnegative(x: f32) -> bool {\n   ret x > 0.0f32 || (1.0f32/x) == infinity;\n }\n \n-/*\n-Predicate: is_zero\n-\n-Returns true if `x` is a zero number (positive or negative zero)\n-*/\n+#[doc(\n+  brief = \"Returns true if `x` is a zero number \\\n+  (positive or negative zero)\"\n+)]\n pure fn is_zero(x: f32) -> bool {\n     ret x == 0.0f32 || x == -0.0f32;\n }\n \n-/*\n-Predicate: is_infinite\n-\n-Returns true if `x`is an infinite numer\n-*/\n+#[doc(\n+  brief = \"Returns true if `x`is an infinite number\"\n+)]\n pure fn is_infinite(x: f32) -> bool {\n     ret x == infinity || x == neg_infinity;\n }\n \n-/*\n-Predicate: is_finite\n-\n-Returns true if `x`is a finite numer\n-*/\n+#[doc(\n+  brief = \"Returns true if `x`is a finite number\"\n+)]\n pure fn is_finite(x: f32) -> bool {\n     ret !(is_NaN(x) || is_infinite(x));\n }\n@@ -146,96 +116,69 @@ pure fn is_finite(x: f32) -> bool {\n mod consts {\n \n     // FIXME replace with mathematical constants from cmath\n-\n-    /*\n-    Const: pi\n-\n-    Archimedes' constant\n-    */\n+    #[doc(\n+      brief = \"Archimedes' constant\"\n+    )]\n     const pi: f32 = 3.14159265358979323846264338327950288_f32;\n \n-    /*\n-    Const: frac_pi_2\n-\n-    pi/2.0\n-    */\n+    #[doc(\n+      brief = \"pi/2.0\"\n+    )]\n     const frac_pi_2: f32 = 1.57079632679489661923132169163975144_f32;\n \n-    /*\n-    Const: frac_pi_4\n-\n-    pi/4.0\n-    */\n+    #[doc(\n+      brief = \"pi/4.0\"\n+    )]\n     const frac_pi_4: f32 = 0.785398163397448309615660845819875721_f32;\n \n-    /*\n-    Const: frac_1_pi\n-\n-    1.0/pi\n-    */\n+    #[doc(\n+      brief = \"1.0/pi\"\n+    )]\n     const frac_1_pi: f32 = 0.318309886183790671537767526745028724_f32;\n \n-    /*\n-    Const: frac_2_pi\n-\n-    2.0/pi\n-    */\n+    #[doc(\n+      brief = \"2.0/pi\"\n+    )]\n     const frac_2_pi: f32 = 0.636619772367581343075535053490057448_f32;\n \n-    /*\n-    Const: frac_2_sqrtpi\n-\n-    2.0/sqrt(pi)\n-    */\n+    #[doc(\n+      brief = \"2.0/sqrt(pi)\"\n+    )]\n     const frac_2_sqrtpi: f32 = 1.12837916709551257389615890312154517_f32;\n \n-    /*\n-    Const: sqrt2\n-\n-    sqrt(2.0)\n-    */\n+    #[doc(\n+      brief = \"sqrt(2.0)\"\n+    )]\n     const sqrt2: f32 = 1.41421356237309504880168872420969808_f32;\n \n-    /*\n-    Const: frac_1_sqrt2\n-\n-    1.0/sqrt(2.0)\n-    */\n+    #[doc(\n+      brief = \"1.0/sqrt(2.0)\"\n+    )]\n     const frac_1_sqrt2: f32 = 0.707106781186547524400844362104849039_f32;\n \n-    /*\n-    Const: e\n-\n-    Euler's number\n-    */\n+    #[doc(\n+      brief = \"Euler's number\"\n+    )]\n     const e: f32 = 2.71828182845904523536028747135266250_f32;\n \n-    /*\n-    Const: log2_e\n-\n-    log2(e)\n-    */\n+    #[doc(\n+      brief = \"log2(e)\"\n+    )]\n     const log2_e: f32 = 1.44269504088896340735992468100189214_f32;\n \n-    /*\n-    Const: log10_e\n-\n-    log10(e)\n-    */\n+    #[doc(\n+      brief = \"log10(e)\"\n+    )]\n     const log10_e: f32 = 0.434294481903251827651128918916605082_f32;\n \n-    /*\n-    Const: ln_2\n-\n-    ln(2.0)\n-    */\n+    #[doc(\n+      brief = \"ln(2.0)\"\n+    )]\n     const ln_2: f32 = 0.693147180559945309417232121458176568_f32;\n \n-    /*\n-    Const: ln_10\n-\n-    ln(10.0)\n-    */\n+    #[doc(\n+      brief = \"ln(10.0)\"\n+    )]\n     const ln_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n "}, {"sha": "6db74766387a92fb7f424f5ca06122a66a27694d", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 68, "deletions": 122, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/4e1bf8d69238bc0ca801f100a88399475da49066/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1bf8d69238bc0ca801f100a88399475da49066/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=4e1bf8d69238bc0ca801f100a88399475da49066", "patch": "@@ -1,8 +1,4 @@\n-/*\n-Module: f64\n-\n-Floating point operations and constants for `f64`\n-*/\n+#[doc = \"Floating point operations and constants for `f64`\"];\n \n // PORT\n \n@@ -50,110 +46,86 @@ const max_exp: int = 1024;\n const min_10_exp: int = -307;\n const max_10_exp: int = 308;\n \n-/* Const: NaN */\n const NaN: f64 = 0.0_f64/0.0_f64;\n \n-/* Const: infinity */\n const infinity: f64 = 1.0_f64/0.0_f64;\n \n-/* Const: neg_infinity */\n const neg_infinity: f64 = -1.0_f64/0.0_f64;\n \n-/* Predicate: isNaN */\n pure fn is_NaN(f: f64) -> bool { f != f }\n \n-/* Function: add */\n pure fn add(x: f64, y: f64) -> f64 { ret x + y; }\n \n-/* Function: sub */\n pure fn sub(x: f64, y: f64) -> f64 { ret x - y; }\n \n-/* Function: mul */\n pure fn mul(x: f64, y: f64) -> f64 { ret x * y; }\n \n-/* Function: div */\n pure fn div(x: f64, y: f64) -> f64 { ret x / y; }\n \n-/* Function: rem */\n pure fn rem(x: f64, y: f64) -> f64 { ret x % y; }\n \n-/* Predicate: lt */\n pure fn lt(x: f64, y: f64) -> bool { ret x < y; }\n \n-/* Predicate: le */\n pure fn le(x: f64, y: f64) -> bool { ret x <= y; }\n \n-/* Predicate: eq */\n pure fn eq(x: f64, y: f64) -> bool { ret x == y; }\n \n-/* Predicate: ne */\n pure fn ne(x: f64, y: f64) -> bool { ret x != y; }\n \n-/* Predicate: ge */\n pure fn ge(x: f64, y: f64) -> bool { ret x >= y; }\n \n-/* Predicate: gt */\n pure fn gt(x: f64, y: f64) -> bool { ret x > y; }\n \n-/*\n-Predicate: is_positive\n-\n-Returns true if `x` is a positive number, including +0.0f640 and +Infinity.\n- */\n+#[doc(\n+  brief = \"Returns true if `x` is a positive number, including \\\n+           +0.0f640 and +Infinity.\"\n+)]\n pure fn is_positive(x: f64) -> bool\n     { ret x > 0.0f64 || (1.0f64/x) == infinity; }\n \n-/*\n-Predicate: is_negative\n-\n-Returns true if `x` is a negative number, including -0.0f640 and -Infinity.\n- */\n+#[doc(\n+  brief = \"Returns true if `x` is a negative number, including \\\n+           -0.0f640 and -Infinity.\"\n+)]\n pure fn is_negative(x: f64) -> bool\n     { ret x < 0.0f64 || (1.0f64/x) == neg_infinity; }\n \n-/*\n-Predicate: is_nonpositive\n-\n-Returns true if `x` is a negative number, including -0.0f640 and -Infinity.\n-(This is the same as `f64::negative`.)\n-*/\n+#[doc(\n+  brief = \"Returns true if `x` is a negative number, including \\\n+           -0.0f640 and -Infinity. (This is the same as \\\n+           `f64::negative`.)\"\n+)]\n pure fn is_nonpositive(x: f64) -> bool {\n   ret x < 0.0f64 || (1.0f64/x) == neg_infinity;\n }\n \n-/*\n-Predicate: is_nonnegative\n-\n-Returns true if `x` is a positive number, including +0.0f640 and +Infinity.\n-(This is the same as `f64::positive`.)\n-*/\n+#[doc(\n+  brief = \"Returns true if `x` is a positive number, including \\\n+           +0.0f640 and +Infinity.(This is the same as \\\n+           `f64::positive`.)\"\n+)]\n pure fn is_nonnegative(x: f64) -> bool {\n   ret x > 0.0f64 || (1.0f64/x) == infinity;\n }\n \n-/*\n-Predicate: is_zero\n-\n-Returns true if `x` is a zero number (positive or negative zero)\n-*/\n+#[doc(\n+  brief = \"Returns true if `x` is a zero number (positive or \\\n+           negative zero)\"\n+)]\n pure fn is_zero(x: f64) -> bool {\n     ret x == 0.0f64 || x == -0.0f64;\n }\n \n-/*\n-Predicate: is_infinite\n-\n-Returns true if `x`is an infinite numer\n-*/\n+#[doc(\n+  brief = \"Returns true if `x`is an infinite number.\"\n+)]\n pure fn is_infinite(x: f64) -> bool {\n     ret x == infinity || x == neg_infinity;\n }\n \n-/*\n-Predicate: is_finite\n-\n-Returns true if `x`is a finite numer\n-*/\n+#[doc(\n+  brief = \"Returns true if `x`is a finite number.\"\n+)]\n pure fn is_finite(x: f64) -> bool {\n     ret !(is_NaN(x) || is_infinite(x));\n }\n@@ -165,95 +137,69 @@ mod consts {\n \n     // FIXME replace with mathematical constants from cmath\n \n-    /*\n-    Const: pi\n-\n-    Archimedes' constant\n-    */\n+    #[doc(\n+      brief = \"Archimedes' constant\"\n+    )]\n     const pi: f64 = 3.14159265358979323846264338327950288_f64;\n \n-    /*\n-    Const: frac_pi_2\n-\n-    pi/2.0\n-    */\n+    #[doc(\n+      brief = \"pi/2.0\"\n+    )]\n     const frac_pi_2: f64 = 1.57079632679489661923132169163975144_f64;\n \n-    /*\n-    Const: frac_pi_4\n-\n-    pi/4.0\n-    */\n+    #[doc(\n+      brief = \"pi/4.0\"\n+    )]\n     const frac_pi_4: f64 = 0.785398163397448309615660845819875721_f64;\n \n-    /*\n-    Const: frac_1_pi\n-\n-    1.0/pi\n-    */\n+    #[doc(\n+      brief = \"1.0/pi\"\n+    )]\n     const frac_1_pi: f64 = 0.318309886183790671537767526745028724_f64;\n \n-    /*\n-    Const: frac_2_pi\n-\n-    2.0/pi\n-    */\n+    #[doc(\n+      brief = \"2.0/pi\"\n+    )]\n     const frac_2_pi: f64 = 0.636619772367581343075535053490057448_f64;\n \n-    /*\n-    Const: frac_2_sqrtpi\n-\n-    2.0/sqrt(pi)\n-    */\n+    #[doc(\n+      brief = \"2.0/sqrt(pi)\"\n+    )]\n     const frac_2_sqrtpi: f64 = 1.12837916709551257389615890312154517_f64;\n \n-    /*\n-    Const: sqrt2\n-\n-    sqrt(2.0)\n-    */\n+    #[doc(\n+      brief = \"sqrt(2.0)\"\n+    )]\n     const sqrt2: f64 = 1.41421356237309504880168872420969808_f64;\n \n-    /*\n-    Const: frac_1_sqrt2\n-\n-    1.0/sqrt(2.0)\n-    */\n+    #[doc(\n+      brief = \"1.0/sqrt(2.0)\"\n+    )]\n     const frac_1_sqrt2: f64 = 0.707106781186547524400844362104849039_f64;\n \n-    /*\n-    Const: e\n-\n-    Euler's number\n-    */\n+    #[doc(\n+      brief = \"Euler's number\"\n+    )]\n     const e: f64 = 2.71828182845904523536028747135266250_f64;\n \n-    /*\n-    Const: log2_e\n-\n-    log2(e)\n-    */\n+    #[doc(\n+      brief = \"log2(e)\"\n+    )]\n     const log2_e: f64 = 1.44269504088896340735992468100189214_f64;\n \n-    /*\n-    Const: log10_e\n-\n-    log10(e)\n-    */\n+    #[doc(\n+      brief = \"log10(e)\"\n+    )]\n     const log10_e: f64 = 0.434294481903251827651128918916605082_f64;\n \n-    /*\n-    Const: ln_2\n-\n-    ln(2.0)\n-    */\n+    #[doc(\n+      brief = \"ln(2.0)\"\n+    )]\n     const ln_2: f64 = 0.693147180559945309417232121458176568_f64;\n \n-    /*\n-    Const: ln_10\n-\n-    ln(10.0)\n-    */\n+    #[doc(\n+      brief = \"ln(10.0)\"\n+    )]\n     const ln_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n "}]}