{"sha": "7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTQ2NDMzNmE2MjdlY2I5NjJmNGViMzgxNzNmYmZiZmRkMmNjZjA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-27T20:41:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-05T18:32:01Z"}, "message": "When suggesting lifetimes, propose adding the new lifetime to all arguments", "tree": {"sha": "1118175cf8ccb8ebe81d2eba85ff64db625938a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1118175cf8ccb8ebe81d2eba85ff64db625938a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "html_url": "https://github.com/rust-lang/rust/commit/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70dbf5526d37ad031fca57ddde55bf8757bfc326", "url": "https://api.github.com/repos/rust-lang/rust/commits/70dbf5526d37ad031fca57ddde55bf8757bfc326", "html_url": "https://github.com/rust-lang/rust/commit/70dbf5526d37ad031fca57ddde55bf8757bfc326"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "56fb66004053c75c5e0e47bfbd6a14fb6c4a75ee", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "patch": "@@ -19,7 +19,7 @@ use syntax::ast::{self, Ident, Path};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use crate::imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n-use crate::lifetimes::{HRLTSpanType, MissingLifetimeSpot};\n+use crate::lifetimes::{ElisionFailureInfo, HRLTSpanType, MissingLifetimeSpot};\n use crate::path_names_to_string;\n use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind};\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n@@ -1467,11 +1467,13 @@ crate fn report_missing_lifetime_specifiers(\n \n crate fn add_missing_lifetime_specifiers_label(\n     err: &mut DiagnosticBuilder<'_>,\n+    source_map: &SourceMap,\n     span: Span,\n     count: usize,\n     lifetime_names: &FxHashSet<ast::Ident>,\n     snippet: Option<&str>,\n     missing_named_lifetime_spots: &[MissingLifetimeSpot<'_>],\n+    params: &[ElisionFailureInfo],\n ) {\n     if count > 1 {\n         err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n@@ -1514,6 +1516,14 @@ crate fn add_missing_lifetime_specifiers_label(\n                         (*span, suggestion.to_string())\n                     }\n                 });\n+                for param in params {\n+                    if let Ok(snippet) = source_map.span_to_snippet(param.span) {\n+                        if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n+                            introduce_suggestion\n+                                .push((param.span, format!(\"&'lifetime {}\", &snippet[1..])));\n+                        }\n+                    }\n+                }\n                 introduce_suggestion.push((span, sugg.to_string()));\n                 err.multipart_suggestion(msg, introduce_suggestion, Applicability::MaybeIncorrect);\n                 if should_break {"}, {"sha": "97d314c8f65a9ae458f64d8b15ee6dedea4955fb", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "patch": "@@ -280,14 +280,14 @@ enum Elide {\n }\n \n #[derive(Clone, Debug)]\n-struct ElisionFailureInfo {\n+crate struct ElisionFailureInfo {\n     /// Where we can find the argument pattern.\n     parent: Option<hir::BodyId>,\n     /// The index of the argument in the original definition.\n     index: usize,\n     lifetime_count: usize,\n     have_bound_regions: bool,\n-    span: Span,\n+    crate span: Span,\n }\n \n type ScopeRef<'a> = &'a Scope<'a>;\n@@ -2441,11 +2441,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         if add_label {\n             add_missing_lifetime_specifiers_label(\n                 &mut err,\n+                self.tcx.sess.source_map(),\n                 span,\n                 lifetime_refs.len(),\n                 &lifetime_names,\n                 self.tcx.sess.source_map().span_to_snippet(span).ok().as_ref().map(|s| s.as_str()),\n                 &self.missing_named_lifetime_spots,\n+                error.map(|p| &p[..]).unwrap_or(&[]),\n             );\n         }\n \n@@ -2488,7 +2490,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let mut spans = vec![];\n \n         for (i, info) in elided_params.into_iter().enumerate() {\n-            let ElisionFailureInfo { parent, index, lifetime_count: n, have_bound_regions, span } = info;\n+            let ElisionFailureInfo { parent, index, lifetime_count: n, have_bound_regions, span } =\n+                info;\n \n             spans.push(span);\n             let help_name = if let Some(ident) ="}, {"sha": "f8917b7bdd0877c378756ede5ff4654b3ff4e086", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "patch": "@@ -11,8 +11,8 @@ LL | type Foo = fn(&u8, &u8) -> &u8;\n    |               ^^^  ^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | type Foo<'lifetime> = fn(&u8, &u8) -> &'lifetime u8;\n-   |         ^^^^^^^^^^^                   ^^^^^^^^^^\n+LL | type Foo<'lifetime> = fn(&'lifetime u8, &'lifetime u8) -> &'lifetime u8;\n+   |         ^^^^^^^^^^^      ^^^^^^^^^^^^^  ^^^^^^^^^^^^^     ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:5:27\n@@ -28,12 +28,12 @@ LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n    = note: for more information on Higher-Ranked lifetimes, visit https://doc.rust-lang.org/nomicon/hrtb.html\n help: consider introducing a Higher-Ranked lifetime\n    |\n-LL | fn bar<F: for<'lifetime> Fn(&u8, &u8) -> &'lifetime u8>(f: &F) {}\n-   |           ^^^^^^^^^^^^^^                 ^^^^^^^^^^\n+LL | fn bar<F: for<'lifetime> Fn(&'lifetime u8, &'lifetime u8) -> &'lifetime u8>(f: &F) {}\n+   |           ^^^^^^^^^^^^^^    ^^^^^^^^^^^^^  ^^^^^^^^^^^^^     ^^^^^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn bar<'lifetime, F: Fn(&u8, &u8) -> &'lifetime u8>(f: &F) {}\n-   |        ^^^^^^^^^^                    ^^^^^^^^^^\n+LL | fn bar<'lifetime, F: Fn(&'lifetime u8, &'lifetime u8) -> &'lifetime u8>(f: &F) {}\n+   |        ^^^^^^^^^^       ^^^^^^^^^^^^^  ^^^^^^^^^^^^^     ^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fbe715de932f9e2c5c6b251fbb31c40ee6ef23e8", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "patch": "@@ -11,8 +11,8 @@ LL | fn f(a: &S, b: i32) -> &i32 {\n    |         ^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn f<'lifetime>(a: &S, b: i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^                   ^^^^^^^^^^\n+LL | fn f<'lifetime>(a: &'lifetime S, b: i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^    ^^^^^^^^^^^^             ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:14:34\n@@ -27,8 +27,8 @@ LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n    |         ^^              ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'lifetime>(a: &S, b: bool, c: &i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^                             ^^^^^^^^^^\n+LL | fn g<'lifetime>(a: &'lifetime S, b: bool, c: &'lifetime i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^    ^^^^^^^^^^^^              ^^^^^^^^^^^^^^     ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:19:44\n@@ -43,8 +43,8 @@ LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n    |         ^^^^^              ^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn h<'lifetime>(a: &bool, b: bool, c: &S, d: &i32) -> &'lifetime i32 {\n-   |     ^^^^^^^^^^^                                       ^^^^^^^^^^\n+LL | fn h<'lifetime>(a: &'lifetime bool, b: bool, c: &'lifetime S, d: &'lifetime i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^    ^^^^^^^^^^^^^^^              ^^^^^^^^^^^^     ^^^^^^^^^^^^^^     ^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "01236e3c7730481ac50a67e496559ecfcf36b523", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "patch": "@@ -19,8 +19,8 @@ LL | fn g(_x: &isize, _y: &isize) -> &isize {\n    |          ^^^^^^      ^^^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn g<'lifetime>(_x: &isize, _y: &isize) -> &'lifetime isize {\n-   |     ^^^^^^^^^^^                            ^^^^^^^^^^\n+LL | fn g<'lifetime>(_x: &'lifetime isize, _y: &'lifetime isize) -> &'lifetime isize {\n+   |     ^^^^^^^^^^^     ^^^^^^^^^^^^^^^^      ^^^^^^^^^^^^^^^^     ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:19\n@@ -35,8 +35,8 @@ LL | fn h(_x: &Foo) -> &isize {\n    |          ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn h<'lifetime>(_x: &Foo) -> &'lifetime isize {\n-   |     ^^^^^^^^^^^              ^^^^^^^^^^\n+LL | fn h<'lifetime>(_x: &'lifetime Foo) -> &'lifetime isize {\n+   |     ^^^^^^^^^^^     ^^^^^^^^^^^^^^     ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20"}, {"sha": "bea1a8bf2c1fd37c5aefc6b7f040a72f3d906e27", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "patch": "@@ -11,8 +11,8 @@ LL | fn foo(x: &i32, y: &i32) -> &i32 {\n    |           ^^^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo<'lifetime>(x: &i32, y: &i32) -> &'lifetime i32 {\n-   |       ^^^^^^^^^^^                      ^^^^^^^^^^\n+LL | fn foo<'lifetime>(x: &'lifetime i32, y: &'lifetime i32) -> &'lifetime i32 {\n+   |       ^^^^^^^^^^^    ^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "97014dae2b970e7a0fc8ce021d261f285a9c146e", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e1464336a627ecb962f4eb38173fbfbfdd2ccf0/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=7e1464336a627ecb962f4eb38173fbfbfdd2ccf0", "patch": "@@ -11,8 +11,8 @@ LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n    |           ^^^^     ^^^^\n help: consider introducing a named lifetime parameter\n    |\n-LL | fn foo<'lifetime>(x: &u32, y: &u32) -> &'lifetime u32 { loop { } }\n-   |       ^^^^^^^^^^^                       ^^^^^^^^^\n+LL | fn foo<'lifetime>(x: &'lifetime u32, y: &'lifetime u32) -> &'lifetime u32 { loop { } }\n+   |       ^^^^^^^^^^^    ^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^      ^^^^^^^^^\n \n error: aborting due to previous error\n "}]}