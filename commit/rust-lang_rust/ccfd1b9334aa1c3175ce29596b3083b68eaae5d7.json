{"sha": "ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZmQxYjkzMzRhYTFjMzE3NWNlMjk1OTZiMzA4M2I2OGVhYWU1ZDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-16T12:58:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-16T12:58:41Z"}, "message": "Initialize the atomic mutex in a constructor for proc macros", "tree": {"sha": "526680aed25861e8ece4d8684ff8fd7b5deadc94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/526680aed25861e8ece4d8684ff8fd7b5deadc94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "html_url": "https://github.com/rust-lang/rust/commit/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e87651c3f23e6ad63cc1ee359115ad72e50d3ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87651c3f23e6ad63cc1ee359115ad72e50d3ba9", "html_url": "https://github.com/rust-lang/rust/commit/e87651c3f23e6ad63cc1ee359115ad72e50d3ba9"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "942f2c8c99afa32efecc629fe626a30c31b382c2", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "patch": "@@ -10,7 +10,7 @@ use crate::prelude::*;\n pub static mut __cg_clif_global_atomic_mutex: libc::pthread_mutex_t = libc::PTHREAD_MUTEX_INITIALIZER;\n \n pub(crate) fn init_global_lock(module: &mut Module<impl Backend>, bcx: &mut FunctionBuilder<'_>) {\n-    if std::env::var(\"CG_CLIF_JIT\").is_ok () {\n+    if std::env::var(\"CG_CLIF_JIT\").is_ok() {\n         // When using JIT, dylibs won't find the __cg_clif_global_atomic_mutex data object defined here,\n         // so instead define it in the cg_clif dylib.\n \n@@ -47,6 +47,39 @@ pub(crate) fn init_global_lock(module: &mut Module<impl Backend>, bcx: &mut Func\n     bcx.ins().call(pthread_mutex_init, &[atomic_mutex, nullptr]);\n }\n \n+pub(crate) fn init_global_lock_constructor(\n+    module: &mut Module<impl Backend>,\n+    constructor_name: &str\n+) -> FuncId {\n+    let sig = Signature::new(CallConv::SystemV);\n+    let init_func_id = module\n+        .declare_function(constructor_name, Linkage::Export, &sig)\n+        .unwrap();\n+\n+    let mut ctx = Context::new();\n+    ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n+    {\n+        let mut func_ctx = FunctionBuilderContext::new();\n+        let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n+\n+        let block = bcx.create_block();\n+        bcx.switch_to_block(block);\n+\n+        crate::atomic_shim::init_global_lock(module, &mut bcx);\n+\n+        bcx.ins().return_(&[]);\n+        bcx.seal_all_blocks();\n+        bcx.finalize();\n+    }\n+    module.define_function(\n+        init_func_id,\n+        &mut ctx,\n+        &mut cranelift_codegen::binemit::NullTrapSink {},\n+    ).unwrap();\n+\n+    init_func_id\n+}\n+\n pub(crate) fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     let atomic_mutex = fx.module.declare_data(\n         \"__cg_clif_global_atomic_mutex\","}, {"sha": "e375fffb6cb621bfeb8fe5ab7d36e19f64d5d3a8", "filename": "src/backend.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "patch": "@@ -97,6 +97,32 @@ impl WriteDebugInfo for ObjectProduct {\n     }\n }\n \n+// FIXME remove once atomic instructions are implemented in Cranelift.\n+pub(crate) trait AddConstructor {\n+    fn add_constructor(&mut self, func_id: FuncId);\n+}\n+\n+impl AddConstructor for ObjectProduct {\n+    fn add_constructor(&mut self, func_id: FuncId) {\n+        let symbol = self.function_symbol(func_id);\n+        let segment = self.object.segment_name(object::write::StandardSegment::Data);\n+        let init_array_section = self.object.add_section(segment.to_vec(), b\".init_array\".to_vec(), SectionKind::Data);\n+        self.object.append_section_data(\n+            init_array_section,\n+            &std::iter::repeat(0).take(8 /*FIXME pointer size*/).collect::<Vec<u8>>(),\n+            8,\n+        );\n+        self.object.add_relocation(init_array_section, object::write::Relocation {\n+            offset: 0,\n+            size: 64, // FIXME pointer size\n+            kind: RelocationKind::Absolute,\n+            encoding: RelocationEncoding::Generic,\n+            symbol,\n+            addend: 0,\n+        }).unwrap();\n+    }\n+}\n+\n pub(crate) trait Emit {\n     fn emit(self) -> Vec<u8>;\n }\n@@ -140,7 +166,7 @@ pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object\n     metadata_object.write().unwrap()\n }\n \n-pub(crate) type Backend = impl cranelift_module::Backend<Product: Emit + WriteDebugInfo>;\n+pub(crate) type Backend = impl cranelift_module::Backend<Product: AddConstructor + Emit + WriteDebugInfo>;\n \n pub(crate) fn make_module(sess: &Session, name: String) -> Module<Backend> {\n     let module: Module<ObjectBackend> = Module::new("}, {"sha": "38ca44c4bfbd0b9c2d654234afbceda5fd9b839f", "filename": "src/driver/aot.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use crate::prelude::*;\n \n-use crate::backend::{Emit, WriteDebugInfo};\n+use crate::backend::{AddConstructor, Emit, WriteDebugInfo};\n \n fn new_module(tcx: TyCtxt<'_>, name: String) -> Module<crate::backend::Backend> {\n     let module = crate::backend::make_module(tcx.sess, name);\n@@ -35,8 +35,9 @@ fn emit_module<B: Backend>(\n     mut module: Module<B>,\n     debug: Option<DebugContext<'_>>,\n     unwind_context: UnwindContext<'_>,\n+    map_product: impl FnOnce(B::Product) -> B::Product,\n ) -> ModuleCodegenResult\n-    where B::Product: Emit + WriteDebugInfo,\n+    where B::Product: AddConstructor + Emit + WriteDebugInfo,\n {\n     module.finalize_definitions();\n     let mut product = module.finish();\n@@ -47,6 +48,8 @@ fn emit_module<B: Backend>(\n \n     unwind_context.emit(&mut product);\n \n+    let product = map_product(product);\n+\n     let tmp_file = tcx\n         .output_filenames(LOCAL_CRATE)\n         .temp_path(OutputType::Object, Some(&name));\n@@ -110,7 +113,23 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n     let cgu = tcx.codegen_unit(cgu_name);\n     let mono_items = cgu.items_in_deterministic_order(tcx);\n \n-    let module = new_module(tcx, cgu_name.as_str().to_string());\n+    let mut module = new_module(tcx, cgu_name.as_str().to_string());\n+\n+    // Initialize the global atomic mutex using a constructor for proc-macros.\n+    // FIXME implement atomic instructions in Cranelift.\n+    let mut init_atomics_mutex_from_constructor = None;\n+    if tcx.sess.crate_types().contains(&rustc_session::config::CrateType::ProcMacro) {\n+        if mono_items.iter().any(|(mono_item, _)| {\n+            match mono_item {\n+                rustc_middle::mir::mono::MonoItem::Static(def_id) => {\n+                    tcx.symbol_name(Instance::mono(tcx, *def_id)).name.as_str().contains(\"__rustc_proc_macro_decls_\")\n+                }\n+                _ => false,\n+            }\n+        }) {\n+            init_atomics_mutex_from_constructor = Some(crate::atomic_shim::init_global_lock_constructor(&mut module, &format!(\"{}_init_atomics_mutex\", cgu_name.as_str())));\n+        }\n+    }\n \n     let mut cx = crate::CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n     super::codegen_mono_items(&mut cx, mono_items);\n@@ -124,6 +143,13 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n         module,\n         debug,\n         unwind_context,\n+        |mut product| {\n+            if let Some(func_id) = init_atomics_mutex_from_constructor {\n+                product.add_constructor(func_id);\n+            }\n+\n+            product\n+        }\n     );\n \n     codegen_global_asm(tcx, &cgu.name().as_str(), &global_asm);\n@@ -196,6 +222,7 @@ pub(super) fn run_aot(\n             allocator_module,\n             None,\n             allocator_unwind_context,\n+            |product| product,\n         );\n         if let Some((id, product)) = work_product {\n             work_products.insert(id, product);"}]}