{"sha": "16d8a91d511b0e90391bcb20b8c67036071d9392", "node_id": "C_kwDOAAsO6NoAKDE2ZDhhOTFkNTExYjBlOTAzOTFiY2IyMGI4YzY3MDM2MDcxZDkzOTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-17T06:03:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-17T06:03:38Z"}, "message": "Auto merge of #91812 - camelid:assoc-const-lazy, r=GuillaumeGomez\n\nrustdoc: Pretty-print assoc const defaults on-demand\n\nThis should improve performance, clean up the code, and help pave the\nway for #83035.", "tree": {"sha": "7bd13b400dfbcc8915c6fc1262a1fd987d5db596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bd13b400dfbcc8915c6fc1262a1fd987d5db596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d8a91d511b0e90391bcb20b8c67036071d9392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d8a91d511b0e90391bcb20b8c67036071d9392", "html_url": "https://github.com/rust-lang/rust/commit/16d8a91d511b0e90391bcb20b8c67036071d9392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d8a91d511b0e90391bcb20b8c67036071d9392/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "html_url": "https://github.com/rust-lang/rust/commit/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53"}, {"sha": "719d7a53751eb2eb4166c9f272507b345aa444ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/719d7a53751eb2eb4166c9f272507b345aa444ef", "html_url": "https://github.com/rust-lang/rust/commit/719d7a53751eb2eb4166c9f272507b345aa444ef"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "2b4466d4041705d98cb70d5f586466d9b9f11c2b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16d8a91d511b0e90391bcb20b8c67036071d9392/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d8a91d511b0e90391bcb20b8c67036071d9392/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=16d8a91d511b0e90391bcb20b8c67036071d9392", "patch": "@@ -912,7 +912,9 @@ impl Clean<Item> for hir::TraitItem<'_> {\n         cx.with_param_env(local_did, |cx| {\n             let inner = match self.kind {\n                 hir::TraitItemKind::Const(ref ty, default) => {\n-                    AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx.tcx, e)))\n+                    let default =\n+                        default.map(|e| ConstantKind::Local { def_id: local_did, body: e });\n+                    AssocConstItem(ty.clean(cx), default)\n                 }\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                     let mut m = clean_function(cx, sig, &self.generics, body);\n@@ -959,7 +961,8 @@ impl Clean<Item> for hir::ImplItem<'_> {\n         cx.with_param_env(local_did, |cx| {\n             let inner = match self.kind {\n                 hir::ImplItemKind::Const(ref ty, expr) => {\n-                    AssocConstItem(ty.clean(cx), Some(print_const_expr(cx.tcx, expr)))\n+                    let default = Some(ConstantKind::Local { def_id: local_did, body: expr });\n+                    AssocConstItem(ty.clean(cx), default)\n                 }\n                 hir::ImplItemKind::Fn(ref sig, body) => {\n                     let mut m = clean_function(cx, sig, &self.generics, body);\n@@ -1009,7 +1012,7 @@ impl Clean<Item> for ty::AssocItem {\n             ty::AssocKind::Const => {\n                 let ty = tcx.type_of(self.def_id);\n                 let default = if self.defaultness.has_value() {\n-                    Some(inline::print_inlined_const(tcx, self.def_id))\n+                    Some(ConstantKind::Extern { def_id: self.def_id })\n                 } else {\n                     None\n                 };"}, {"sha": "6ce6d889150108e5b543ff222238f9b855f2f4cd", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/16d8a91d511b0e90391bcb20b8c67036071d9392/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d8a91d511b0e90391bcb20b8c67036071d9392/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=16d8a91d511b0e90391bcb20b8c67036071d9392", "patch": "@@ -670,7 +670,7 @@ crate enum ItemKind {\n     MacroItem(Macro),\n     ProcMacroItem(ProcMacro),\n     PrimitiveItem(PrimitiveType),\n-    AssocConstItem(Type, Option<String>),\n+    AssocConstItem(Type, Option<ConstantKind>),\n     /// An associated item in a trait or trait impl.\n     ///\n     /// The bounds may be non-empty if there is a `where` clause.\n@@ -2153,7 +2153,21 @@ crate enum ConstantKind {\n \n impl Constant {\n     crate fn expr(&self, tcx: TyCtxt<'_>) -> String {\n-        match self.kind {\n+        self.kind.expr(tcx)\n+    }\n+\n+    crate fn value(&self, tcx: TyCtxt<'_>) -> Option<String> {\n+        self.kind.value(tcx)\n+    }\n+\n+    crate fn is_literal(&self, tcx: TyCtxt<'_>) -> bool {\n+        self.kind.is_literal(tcx)\n+    }\n+}\n+\n+impl ConstantKind {\n+    crate fn expr(&self, tcx: TyCtxt<'_>) -> String {\n+        match *self {\n             ConstantKind::TyConst { ref expr } => expr.clone(),\n             ConstantKind::Extern { def_id } => print_inlined_const(tcx, def_id),\n             ConstantKind::Local { body, .. } | ConstantKind::Anonymous { body } => {\n@@ -2163,7 +2177,7 @@ impl Constant {\n     }\n \n     crate fn value(&self, tcx: TyCtxt<'_>) -> Option<String> {\n-        match self.kind {\n+        match *self {\n             ConstantKind::TyConst { .. } | ConstantKind::Anonymous { .. } => None,\n             ConstantKind::Extern { def_id } | ConstantKind::Local { def_id, .. } => {\n                 print_evaluated_const(tcx, def_id)\n@@ -2172,7 +2186,7 @@ impl Constant {\n     }\n \n     crate fn is_literal(&self, tcx: TyCtxt<'_>) -> bool {\n-        match self.kind {\n+        match *self {\n             ConstantKind::TyConst { .. } => false,\n             ConstantKind::Extern { def_id } => def_id.as_local().map_or(false, |def_id| {\n                 is_literal_expr(tcx, tcx.hir().local_def_id_to_hir_id(def_id))"}, {"sha": "2432f5cc085ef6d88479f6fa01b62b30aadb78e6", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16d8a91d511b0e90391bcb20b8c67036071d9392/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d8a91d511b0e90391bcb20b8c67036071d9392/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=16d8a91d511b0e90391bcb20b8c67036071d9392", "patch": "@@ -762,7 +762,6 @@ fn assoc_const(\n     w: &mut Buffer,\n     it: &clean::Item,\n     ty: &clean::Type,\n-    _default: Option<&String>,\n     link: AssocItemLink<'_>,\n     extra: &str,\n     cx: &Context<'_>,\n@@ -958,15 +957,9 @@ fn render_assoc_item(\n         clean::MethodItem(ref m, _) => {\n             method(w, item, m.header, &m.generics, &m.decl, link, parent, cx, render_mode)\n         }\n-        clean::AssocConstItem(ref ty, ref default) => assoc_const(\n-            w,\n-            item,\n-            ty,\n-            default.as_ref(),\n-            link,\n-            if parent == ItemType::Trait { \"    \" } else { \"\" },\n-            cx,\n-        ),\n+        clean::AssocConstItem(ref ty, _) => {\n+            assoc_const(w, item, ty, link, if parent == ItemType::Trait { \"    \" } else { \"\" }, cx)\n+        }\n         clean::AssocTypeItem(ref bounds, ref default) => assoc_type(\n             w,\n             item,\n@@ -1467,7 +1460,7 @@ fn render_impl(\n                 w.write_str(\"</h4>\");\n                 w.write_str(\"</div>\");\n             }\n-            clean::AssocConstItem(ref ty, ref default) => {\n+            clean::AssocConstItem(ref ty, _) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n                 write!(\n@@ -1482,7 +1475,6 @@ fn render_impl(\n                     w,\n                     item,\n                     ty,\n-                    default.as_ref(),\n                     link.anchor(if trait_.is_some() { &source_id } else { &id }),\n                     \"\",\n                     cx,"}, {"sha": "ee29bfcc7a48d62080d3e54de4278f61286c402a", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16d8a91d511b0e90391bcb20b8c67036071d9392/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d8a91d511b0e90391bcb20b8c67036071d9392/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=16d8a91d511b0e90391bcb20b8c67036071d9392", "patch": "@@ -219,7 +219,9 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         MacroItem(m) => ItemEnum::Macro(m.source),\n         ProcMacroItem(m) => ItemEnum::ProcMacro(m.into_tcx(tcx)),\n         PrimitiveItem(p) => ItemEnum::PrimitiveType(p.as_sym().to_string()),\n-        AssocConstItem(t, s) => ItemEnum::AssocConst { type_: t.into_tcx(tcx), default: s },\n+        AssocConstItem(ty, default) => {\n+            ItemEnum::AssocConst { type_: ty.into_tcx(tcx), default: default.map(|c| c.expr(tcx)) }\n+        }\n         AssocTypeItem(g, t) => ItemEnum::AssocType {\n             bounds: g.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: t.map(|x| x.into_tcx(tcx)),"}]}