{"sha": "b6780b3a20ad9f482911119eee84b0ad5a495af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NzgwYjNhMjBhZDlmNDgyOTExMTE5ZWVlODRiMGFkNWE0OTVhZjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-11T23:04:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-11T23:04:03Z"}, "message": "Rollup merge of #83669 - kwj2104:issue-81508-fix, r=varkor\n\nIssue 81508 fix\n\nFix #81508\n\n**Problem**: When variable name is used incorrectly as path, error and warning point to undeclared/unused name, when in fact the name is used, just incorrectly (should be used as a variable, not part of a path).\n\n**Summary for fix**: When path resolution errs, diagnostics checks for variables in ```ValueNS``` that have the same name (e.g., variable rather than path named Foo), and adds additional suggestion that user may actually intend to use the variable name rather than a path.\n\nThe fix does not suppress or otherwise change the *warning* that results. I did not find a straightforward way in the code to modify this, but would love to make changes here as well with any guidance.", "tree": {"sha": "7a525f830b669c1b37cf38994cf9258599a37e7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a525f830b669c1b37cf38994cf9258599a37e7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6780b3a20ad9f482911119eee84b0ad5a495af6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgc4BjCRBK7hj4Ov3rIwAAdHIIADkPPwM5AddNEs6fK6jPnKqD\nVPAgqENxDl5jRRrAHtjSFqKVjK0ops2iU6XlgpMLf0bjNoZT1C6rfRVEzBclKX2n\nhbbSa1juYgyJv3+Un/+kNK0ZlkKLEGlqNT10t3MeeOUjjRVm8o9q2/aP/fwgHT7J\nBcioCALA3vcX32f/iKRSz689UTQY96cWP6fGo8FFo46Sr8ODkG9zwTrpsv8T3fG/\n0rA5GQhAvChkF1MrYPI8+gk657BfVRGra58xvTcn/rNyucOXdqHAsMIl5MDkcIO2\ndr3n4dN4JO7DpieFLV0Vyxj4URYYyyoF46qE6srE6bPaMh3+4XkXjaDVxlsGVdw=\n=v4R4\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a525f830b669c1b37cf38994cf9258599a37e7e\nparent a8661245649f3d1c0dc5b23270bdac0bbd2d8f64\nparent f51f25ab7de7c737ab67d79e23691b8f8f642a8c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1618182243 +0200\ncommitter GitHub <noreply@github.com> 1618182243 +0200\n\nRollup merge of #83669 - kwj2104:issue-81508-fix, r=varkor\n\nIssue 81508 fix\n\nFix #81508\n\n**Problem**: When variable name is used incorrectly as path, error and warning point to undeclared/unused name, when in fact the name is used, just incorrectly (should be used as a variable, not part of a path).\n\n**Summary for fix**: When path resolution errs, diagnostics checks for variables in ```ValueNS``` that have the same name (e.g., variable rather than path named Foo), and adds additional suggestion that user may actually intend to use the variable name rather than a path.\n\nThe fix does not suppress or otherwise change the *warning* that results. I did not find a straightforward way in the code to modify this, but would love to make changes here as well with any guidance.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6780b3a20ad9f482911119eee84b0ad5a495af6", "html_url": "https://github.com/rust-lang/rust/commit/b6780b3a20ad9f482911119eee84b0ad5a495af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6780b3a20ad9f482911119eee84b0ad5a495af6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8661245649f3d1c0dc5b23270bdac0bbd2d8f64", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8661245649f3d1c0dc5b23270bdac0bbd2d8f64", "html_url": "https://github.com/rust-lang/rust/commit/a8661245649f3d1c0dc5b23270bdac0bbd2d8f64"}, {"sha": "f51f25ab7de7c737ab67d79e23691b8f8f642a8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f51f25ab7de7c737ab67d79e23691b8f8f642a8c", "html_url": "https://github.com/rust-lang/rust/commit/f51f25ab7de7c737ab67d79e23691b8f8f642a8c"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "9321f11f6593380f749d79476205eca86929f173", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6780b3a20ad9f482911119eee84b0ad5a495af6/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6780b3a20ad9f482911119eee84b0ad5a495af6/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=b6780b3a20ad9f482911119eee84b0ad5a495af6", "patch": "@@ -1031,7 +1031,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n-                debug!(\"resolve_item ItemKind::Const\");\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n                     if let Some(expr) = expr {\n@@ -1597,6 +1596,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)\n                         .unwrap_or_else(|| self.fresh_binding(ident, pat.id, pat_src, bindings));\n                     self.r.record_partial_res(pat.id, PartialRes::new(res));\n+                    self.r.record_pat_span(pat.id, pat.span);\n                 }\n                 PatKind::TupleStruct(ref path, ref sub_patterns) => {\n                     self.smart_resolve_path("}, {"sha": "129954381c9baf497321a6e1aea4350cfef88ce6", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b6780b3a20ad9f482911119eee84b0ad5a495af6/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6780b3a20ad9f482911119eee84b0ad5a495af6/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b6780b3a20ad9f482911119eee84b0ad5a495af6", "patch": "@@ -891,6 +891,10 @@ pub struct Resolver<'a> {\n     /// \"self-confirming\" import resolutions during import validation.\n     unusable_binding: Option<&'a NameBinding<'a>>,\n \n+    // Spans for local variables found during pattern resolution.\n+    // Used for suggestions during error reporting.\n+    pat_span_map: NodeMap<Span>,\n+\n     /// Resolutions for nodes that have a single resolution.\n     partial_res_map: NodeMap<PartialRes>,\n     /// Resolutions for import nodes, which have multiple resolutions in different namespaces.\n@@ -1270,6 +1274,7 @@ impl<'a> Resolver<'a> {\n             last_import_segment: false,\n             unusable_binding: None,\n \n+            pat_span_map: Default::default(),\n             partial_res_map: Default::default(),\n             import_res_map: Default::default(),\n             label_res_map: Default::default(),\n@@ -1917,7 +1922,6 @@ impl<'a> Resolver<'a> {\n                 return Some(LexicalScopeBinding::Item(binding));\n             }\n         }\n-\n         self.early_resolve_ident_in_lexical_scope(\n             orig_ident,\n             ScopeSet::Late(ns, module, record_used_id),\n@@ -2394,7 +2398,59 @@ impl<'a> Resolver<'a> {\n                             .next()\n                             .map_or(false, |c| c.is_ascii_uppercase())\n                         {\n-                            (format!(\"use of undeclared type `{}`\", ident), None)\n+                            // Check whether the name refers to an item in the value namespace.\n+                            let suggestion = if ribs.is_some() {\n+                                let match_span = match self.resolve_ident_in_lexical_scope(\n+                                    ident,\n+                                    ValueNS,\n+                                    parent_scope,\n+                                    None,\n+                                    path_span,\n+                                    &ribs.unwrap()[ValueNS],\n+                                ) {\n+                                    // Name matches a local variable. For example:\n+                                    // ```\n+                                    // fn f() {\n+                                    //     let Foo: &str = \"\";\n+                                    //     println!(\"{}\", Foo::Bar); // Name refers to local\n+                                    //                               // variable `Foo`.\n+                                    // }\n+                                    // ```\n+                                    Some(LexicalScopeBinding::Res(Res::Local(id))) => {\n+                                        Some(*self.pat_span_map.get(&id).unwrap())\n+                                    }\n+\n+                                    // Name matches item from a local name binding\n+                                    // created by `use` declaration. For example:\n+                                    // ```\n+                                    // pub Foo: &str = \"\";\n+                                    //\n+                                    // mod submod {\n+                                    //     use super::Foo;\n+                                    //     println!(\"{}\", Foo::Bar); // Name refers to local\n+                                    //                               // binding `Foo`.\n+                                    // }\n+                                    // ```\n+                                    Some(LexicalScopeBinding::Item(name_binding)) => {\n+                                        Some(name_binding.span)\n+                                    }\n+                                    _ => None,\n+                                };\n+\n+                                if let Some(span) = match_span {\n+                                    Some((\n+                                        vec![(span, String::from(\"\"))],\n+                                        format!(\"`{}` is defined here, but is not a type\", ident),\n+                                        Applicability::MaybeIncorrect,\n+                                    ))\n+                                } else {\n+                                    None\n+                                }\n+                            } else {\n+                                None\n+                            };\n+\n+                            (format!(\"use of undeclared type `{}`\", ident), suggestion)\n                         } else {\n                             (format!(\"use of undeclared crate or module `{}`\", ident), None)\n                         }\n@@ -2805,6 +2861,11 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    fn record_pat_span(&mut self, node: NodeId, span: Span) {\n+        debug!(\"(recording pat) recording {:?} for {:?}\", node, span);\n+        self.pat_span_map.insert(node, span);\n+    }\n+\n     fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {\n         vis.is_accessible_from(module.nearest_parent_mod, self)\n     }"}, {"sha": "23605cd2fd91dfa54acf8dcfd0bbdb30f3c4a60a", "filename": "src/test/ui/resolve/issue-81508.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b6780b3a20ad9f482911119eee84b0ad5a495af6/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6780b3a20ad9f482911119eee84b0ad5a495af6/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.rs?ref=b6780b3a20ad9f482911119eee84b0ad5a495af6", "patch": "@@ -0,0 +1,22 @@\n+// Confusing diagnostic when using variable as a type:\n+//\n+// Previous warnings indicate Foo is not used, when in fact it is\n+// used improperly as a variable or constant. New warning points\n+// out user may be trying to use variable as a type. Test demonstrates\n+// cases for both local variable and const.\n+\n+fn main() {\n+    let Baz: &str = \"\";\n+\n+    println!(\"{}\", Baz::Bar); //~ ERROR: failed to resolve: use of undeclared type `Baz`\n+}\n+\n+#[allow(non_upper_case_globals)]\n+pub const Foo: &str = \"\";\n+\n+mod submod {\n+    use super::Foo;\n+    fn function() {\n+        println!(\"{}\", Foo::Bar); //~ ERROR: failed to resolve: use of undeclared type `Foo`\n+    }\n+}"}, {"sha": "15555631b90474887cdb356f8a4158e1d03ad044", "filename": "src/test/ui/resolve/issue-81508.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6780b3a20ad9f482911119eee84b0ad5a495af6/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6780b3a20ad9f482911119eee84b0ad5a495af6/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr?ref=b6780b3a20ad9f482911119eee84b0ad5a495af6", "patch": "@@ -0,0 +1,21 @@\n+error[E0433]: failed to resolve: use of undeclared type `Baz`\n+  --> $DIR/issue-81508.rs:11:20\n+   |\n+LL |     let Baz: &str = \"\";\n+   |         --- help: `Baz` is defined here, but is not a type\n+LL | \n+LL |     println!(\"{}\", Baz::Bar);\n+   |                    ^^^ use of undeclared type `Baz`\n+\n+error[E0433]: failed to resolve: use of undeclared type `Foo`\n+  --> $DIR/issue-81508.rs:20:24\n+   |\n+LL |     use super::Foo;\n+   |         ---------- help: `Foo` is defined here, but is not a type\n+LL |     fn function() {\n+LL |         println!(\"{}\", Foo::Bar);\n+   |                        ^^^ use of undeclared type `Foo`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}]}