{"sha": "ea19e703049f60008f1f5ea4c79ac5b0b4bcc986", "node_id": "C_kwDOAAsO6NoAKGVhMTllNzAzMDQ5ZjYwMDA4ZjFmNWVhNGM3OWFjNWIwYjRiY2M5ODY", "commit": {"author": {"name": "Hasan Ali", "email": "hasan@hasali.dev", "date": "2022-07-17T21:42:03Z"}, "committer": {"name": "Hasan Ali", "email": "hasan@hasali.dev", "date": "2022-07-17T21:42:03Z"}, "message": "Fix extract variable assist for subexpression in mutable borrow", "tree": {"sha": "5f63ae09342a0f7b36061d31c81231a4ee249f30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f63ae09342a0f7b36061d31c81231a4ee249f30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea19e703049f60008f1f5ea4c79ac5b0b4bcc986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea19e703049f60008f1f5ea4c79ac5b0b4bcc986", "html_url": "https://github.com/rust-lang/rust/commit/ea19e703049f60008f1f5ea4c79ac5b0b4bcc986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea19e703049f60008f1f5ea4c79ac5b0b4bcc986/comments", "author": {"login": "hasali19", "id": 10169241, "node_id": "MDQ6VXNlcjEwMTY5MjQx", "avatar_url": "https://avatars.githubusercontent.com/u/10169241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hasali19", "html_url": "https://github.com/hasali19", "followers_url": "https://api.github.com/users/hasali19/followers", "following_url": "https://api.github.com/users/hasali19/following{/other_user}", "gists_url": "https://api.github.com/users/hasali19/gists{/gist_id}", "starred_url": "https://api.github.com/users/hasali19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hasali19/subscriptions", "organizations_url": "https://api.github.com/users/hasali19/orgs", "repos_url": "https://api.github.com/users/hasali19/repos", "events_url": "https://api.github.com/users/hasali19/events{/privacy}", "received_events_url": "https://api.github.com/users/hasali19/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hasali19", "id": 10169241, "node_id": "MDQ6VXNlcjEwMTY5MjQx", "avatar_url": "https://avatars.githubusercontent.com/u/10169241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hasali19", "html_url": "https://github.com/hasali19", "followers_url": "https://api.github.com/users/hasali19/followers", "following_url": "https://api.github.com/users/hasali19/following{/other_user}", "gists_url": "https://api.github.com/users/hasali19/gists{/gist_id}", "starred_url": "https://api.github.com/users/hasali19/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hasali19/subscriptions", "organizations_url": "https://api.github.com/users/hasali19/orgs", "repos_url": "https://api.github.com/users/hasali19/repos", "events_url": "https://api.github.com/users/hasali19/events{/privacy}", "received_events_url": "https://api.github.com/users/hasali19/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "897a7ec4b826f85ec1626870e734490701138097", "url": "https://api.github.com/repos/rust-lang/rust/commits/897a7ec4b826f85ec1626870e734490701138097", "html_url": "https://github.com/rust-lang/rust/commit/897a7ec4b826f85ec1626870e734490701138097"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "500db158e6fab177679b8cbaf1543f20d844039b", "filename": "crates/ide-assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ea19e703049f60008f1f5ea4c79ac5b0b4bcc986/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea19e703049f60008f1f5ea4c79ac5b0b4bcc986/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=ea19e703049f60008f1f5ea4c79ac5b0b4bcc986", "patch": "@@ -58,6 +58,12 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         _ => \"\",\n     };\n \n+    let parent_ref_expr = to_extract.syntax().parent().and_then(ast::RefExpr::cast);\n+    let var_modifier = match parent_ref_expr {\n+        Some(expr) if expr.mut_token().is_some() => \"mut \",\n+        _ => \"\",\n+    };\n+\n     let anchor = Anchor::from(&to_extract)?;\n     let indent = anchor.syntax().prev_sibling_or_token()?.as_token()?.clone();\n     let target = to_extract.syntax().text_range();\n@@ -85,7 +91,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             match anchor {\n                 Anchor::Before(_) | Anchor::Replace(_) => {\n-                    format_to!(buf, \"let {} = {}\", var_name, reference_modifier)\n+                    format_to!(buf, \"let {}{} = {}\", var_modifier, var_name, reference_modifier)\n                 }\n                 Anchor::WrapInBlock(_) => {\n                     format_to!(buf, \"{{ let {} = {}\", var_name, reference_modifier)\n@@ -100,8 +106,10 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 }\n                 match ctx.config.snippet_cap {\n                     Some(cap) => {\n-                        let snip = buf\n-                            .replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n+                        let snip = buf.replace(\n+                            &format!(\"let {}{}\", var_modifier, var_name),\n+                            &format!(\"let {}$0{}\", var_modifier, var_name),\n+                        );\n                         edit.replace_snippet(cap, expr_range, snip)\n                     }\n                     None => edit.replace(expr_range, buf),\n@@ -126,8 +134,10 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n             let offset = anchor.syntax().text_range().start();\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    let snip =\n-                        buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n+                    let snip = buf.replace(\n+                        &format!(\"let {}{}\", var_modifier, var_name),\n+                        &format!(\"let {}$0{}\", var_modifier, var_name),\n+                    );\n                     edit.insert_snippet(cap, offset, snip)\n                 }\n                 None => edit.insert(offset, buf),\n@@ -1247,6 +1257,22 @@ fn foo() {\n     let local = &S::new();\n     let $0x = &local.sub;\n     x.do_thing();\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_var_for_mutable_borrow() {\n+        check_assist(\n+            extract_variable,\n+            r#\"\n+fn foo() {\n+    let v = &mut $00$0;\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let mut $0var_name = 0;\n+    let v = &mut var_name;\n }\"#,\n         );\n     }"}]}