{"sha": "1b1321a685f4d5e362786c1876dbcc9e2de866ba", "node_id": "C_kwDOAAsO6NoAKDFiMTMyMWE2ODVmNGQ1ZTM2Mjc4NmMxODc2ZGJjYzllMmRlODY2YmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-17T17:14:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-17T17:14:16Z"}, "message": "fix simd_bitmask shorter than a byte on big-endian", "tree": {"sha": "dab443487606cb46dd39af6c8966ee33d9866f63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dab443487606cb46dd39af6c8966ee33d9866f63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b1321a685f4d5e362786c1876dbcc9e2de866ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1321a685f4d5e362786c1876dbcc9e2de866ba", "html_url": "https://github.com/rust-lang/rust/commit/1b1321a685f4d5e362786c1876dbcc9e2de866ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b1321a685f4d5e362786c1876dbcc9e2de866ba/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71", "html_url": "https://github.com/rust-lang/rust/commit/b5d3a25b49f97301bfeaa632d1cf432b3c0e8a71"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "c344d0ff9c34db5c4c956f2f3448bc6407b8380a", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b1321a685f4d5e362786c1876dbcc9e2de866ba/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b1321a685f4d5e362786c1876dbcc9e2de866ba/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=1b1321a685f4d5e362786c1876dbcc9e2de866ba", "patch": "@@ -685,7 +685,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .unwrap();\n                 for i in 0..dest_len {\n                     let mask =\n-                        mask & (1 << simd_bitmask_index(i, bitmask_len, this.data_layout().endian));\n+                        mask & (1 << simd_bitmask_index(i, dest_len, this.data_layout().endian));\n                     let yes = this.read_immediate(&this.mplace_index(&yes, i)?.into())?;\n                     let no = this.read_immediate(&this.mplace_index(&no, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n@@ -695,8 +695,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n                 for i in dest_len..bitmask_len {\n                     // If the mask is \"padded\", ensure that padding is all-zero.\n-                    let mask =\n-                        mask & (1 << simd_bitmask_index(i, bitmask_len, this.data_layout().endian));\n+                    let mask = mask & (1 << i);\n                     if mask != 0 {\n                         throw_ub_format!(\n                             \"a SIMD bitmask less than 8 bits long must be filled with 0s for the remaining bits\"\n@@ -841,7 +840,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 for i in 0..op_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n                     if simd_element_to_bool(op)? {\n-                        res |= 1 << simd_bitmask_index(i, bitmask_len, this.data_layout().endian);\n+                        res |= 1 << simd_bitmask_index(i, op_len, this.data_layout().endian);\n                     }\n                 }\n                 this.write_int(res, dest)?;\n@@ -1382,10 +1381,10 @@ fn simd_element_to_bool<'tcx>(elem: ImmTy<'tcx, Tag>) -> InterpResult<'tcx, bool\n     })\n }\n \n-fn simd_bitmask_index(idx: u64, bitmask_len: u64, endianess: Endian) -> u64 {\n-    assert!(idx < bitmask_len);\n+fn simd_bitmask_index(idx: u64, vec_len: u64, endianess: Endian) -> u64 {\n+    assert!(idx < vec_len);\n     match endianess {\n         Endian::Little => idx,\n-        Endian::Big => bitmask_len - 1 - idx, // reverse order of bits\n+        Endian::Big => vec_len - 1 - idx, // reverse order of bits\n     }\n }"}, {"sha": "99a64ea370f6b872712e0ddc557f2be8f6bcc07f", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b1321a685f4d5e362786c1876dbcc9e2de866ba/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b1321a685f4d5e362786c1876dbcc9e2de866ba/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=1b1321a685f4d5e362786c1876dbcc9e2de866ba", "patch": "@@ -200,7 +200,7 @@ fn simd_mask() {\n     let values = [false, false, false, true];\n     let mask = Mask::<i64, 4>::from_array(values);\n     let bitmask = mask.to_bitmask();\n-    assert_eq!(bitmask, 0b1000);\n+    // FIXME fails until https://github.com/rust-lang/portable-simd/pull/267 lands: assert_eq!(bitmask, 0b1000);\n     assert_eq!(Mask::<i64, 4>::from_bitmask(bitmask), mask);\n }\n "}]}