{"sha": "cde17d915867d75169e8f7e8845ce705006c2ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZTE3ZDkxNTg2N2Q3NTE2OWU4ZjdlODg0NWNlNzA1MDA2YzJlYmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T10:09:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T07:55:42Z"}, "message": "Add From instances for Pointer -> ScalarMaybeUndef and Pointer -> Immediate", "tree": {"sha": "2c71f4903be1ddfd07d15cba10b15d25611e6f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c71f4903be1ddfd07d15cba10b15d25611e6f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cde17d915867d75169e8f7e8845ce705006c2ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cde17d915867d75169e8f7e8845ce705006c2ebb", "html_url": "https://github.com/rust-lang/rust/commit/cde17d915867d75169e8f7e8845ce705006c2ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cde17d915867d75169e8f7e8845ce705006c2ebb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8eea623f5f44332be284af26180136f898f4832", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8eea623f5f44332be284af26180136f898f4832", "html_url": "https://github.com/rust-lang/rust/commit/a8eea623f5f44332be284af26180136f898f4832"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "a038ca23ae92d6e1939d420cb937fec91148cf7b", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=cde17d915867d75169e8f7e8845ce705006c2ebb", "patch": "@@ -471,6 +471,13 @@ impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n     }\n }\n \n+impl<Tag> From<Pointer<Tag>> for ScalarMaybeUndef<Tag> {\n+    #[inline(always)]\n+    fn from(s: Pointer<Tag>) -> Self {\n+        ScalarMaybeUndef::Scalar(s.into())\n+    }\n+}\n+\n impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for ScalarMaybeUndef<Tag, Id> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {"}, {"sha": "e9602ecfa4c72be193daf751b0d1d4249c9a3c66", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=cde17d915867d75169e8f7e8845ce705006c2ebb", "patch": "@@ -55,7 +55,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         ).ok_or_else(|| err_inval!(TooGeneric))?;\n \n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n-                        self.write_scalar(Scalar::Ptr(fn_ptr.into()), dest)?;\n+                        self.write_scalar(fn_ptr, dest)?;\n                     }\n                     _ => bug!(\"reify fn pointer on {:?}\", src.layout.ty),\n                 }\n@@ -88,8 +88,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             ty::ClosureKind::FnOnce,\n                         );\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n-                        let val = Immediate::Scalar(Scalar::Ptr(fn_ptr.into()).into());\n-                        self.write_immediate(val, dest)?;\n+                        self.write_scalar(fn_ptr, dest)?;\n                     }\n                     _ => bug!(\"closure fn pointer on {:?}\", src.layout.ty),\n                 }"}, {"sha": "1035a93a1e964e063c6dd20c3c7e1e75cdf42b8b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=cde17d915867d75169e8f7e8845ce705006c2ebb", "patch": "@@ -350,7 +350,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             sptr\n         } else {\n             // A \"real\" access, we must get a pointer.\n-            Scalar::Ptr(self.force_ptr(sptr)?)\n+            Scalar::from(self.force_ptr(sptr)?)\n         };\n         Ok(match normalized.to_bits_or_ptr(self.pointer_size(), self) {\n             Ok(bits) => {"}, {"sha": "96bad0deafe1b7275dffbbf47a9963698f37a758", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=cde17d915867d75169e8f7e8845ce705006c2ebb", "patch": "@@ -47,6 +47,13 @@ impl<Tag> From<Scalar<Tag>> for Immediate<Tag> {\n     }\n }\n \n+impl<Tag> From<Pointer<Tag>> for Immediate<Tag> {\n+    #[inline(always)]\n+    fn from(val: Pointer<Tag>) -> Self {\n+        Immediate::Scalar(Scalar::from(val).into())\n+    }\n+}\n+\n impl<'tcx, Tag> Immediate<Tag> {\n     pub fn new_slice(\n         val: Scalar<Tag>,\n@@ -60,7 +67,7 @@ impl<'tcx, Tag> Immediate<Tag> {\n     }\n \n     pub fn new_dyn_trait(val: Scalar<Tag>, vtable: Pointer<Tag>) -> Self {\n-        Immediate::ScalarPair(val.into(), Scalar::Ptr(vtable).into())\n+        Immediate::ScalarPair(val.into(), vtable.into())\n     }\n \n     #[inline]"}, {"sha": "11caf20acc532fd54de99d93bfa18ee476cb2fa2", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=cde17d915867d75169e8f7e8845ce705006c2ebb", "patch": "@@ -686,6 +686,7 @@ where\n     }\n \n     /// Write a scalar to a place\n+    #[inline(always)]\n     pub fn write_scalar(\n         &mut self,\n         val: impl Into<ScalarMaybeUndef<M::PointerTag>>,"}, {"sha": "efa0d266cbc21c410e70a65c2ccd4634a09ad917", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde17d915867d75169e8f7e8845ce705006c2ebb/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=cde17d915867d75169e8f7e8845ce705006c2ebb", "patch": "@@ -67,7 +67,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by\n         // multiples of `ptr_align`, which means that it will stay aligned to `ptr_align`.\n         let vtable_alloc = self.memory.get_raw_mut(vtable.alloc_id)?;\n-        vtable_alloc.write_ptr_sized(tcx, vtable, Scalar::Ptr(drop).into())?;\n+        vtable_alloc.write_ptr_sized(tcx, vtable, drop.into())?;\n \n         let size_ptr = vtable.offset(ptr_size, tcx)?;\n         vtable_alloc.write_ptr_sized(tcx, size_ptr, Scalar::from_uint(size, ptr_size).into())?;\n@@ -87,7 +87,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // We cannot use `vtable_allic` as we are creating fn ptrs in this loop.\n                 let method_ptr = vtable.offset(ptr_size * (3 + i as u64), tcx)?;\n                 self.memory.get_raw_mut(vtable.alloc_id)?\n-                    .write_ptr_sized(tcx, method_ptr, Scalar::Ptr(fn_ptr).into())?;\n+                    .write_ptr_sized(tcx, method_ptr, fn_ptr.into())?;\n             }\n         }\n "}]}