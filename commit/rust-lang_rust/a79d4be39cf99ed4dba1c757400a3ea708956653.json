{"sha": "a79d4be39cf99ed4dba1c757400a3ea708956653", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OWQ0YmUzOWNmOTllZDRkYmExYzc1NzQwMGEzZWE3MDg5NTY2NTM=", "commit": {"author": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2014-11-07T17:13:45Z"}, "committer": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2014-11-07T21:08:43Z"}, "message": "Implement len() for EnumSet.", "tree": {"sha": "0add644d7f3a10b9af2da1943a79329d33f46838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0add644d7f3a10b9af2da1943a79329d33f46838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a79d4be39cf99ed4dba1c757400a3ea708956653", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a79d4be39cf99ed4dba1c757400a3ea708956653", "html_url": "https://github.com/rust-lang/rust/commit/a79d4be39cf99ed4dba1c757400a3ea708956653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a79d4be39cf99ed4dba1c757400a3ea708956653/comments", "author": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3cbf8cf44e41072c11277363a5100cf3a8a161", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3cbf8cf44e41072c11277363a5100cf3a8a161", "html_url": "https://github.com/rust-lang/rust/commit/0a3cbf8cf44e41072c11277363a5100cf3a8a161"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "68991628b225368e2d253923df41ce2b4ef9c1d6", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a79d4be39cf99ed4dba1c757400a3ea708956653/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79d4be39cf99ed4dba1c757400a3ea708956653/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=a79d4be39cf99ed4dba1c757400a3ea708956653", "patch": "@@ -18,7 +18,6 @@ use core::fmt;\n \n // FIXME(conventions): implement BitXor\n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n-// FIXME(conventions): implement len\n \n #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n /// A specialized `Set` implementation to use enum types.\n@@ -92,6 +91,12 @@ impl<E:CLike> EnumSet<E> {\n         EnumSet {bits: 0}\n     }\n \n+    /// Returns the number of elements in the given `EnumSet`.\n+    #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+    pub fn len(&self) -> uint {\n+        self.bits.count_ones()\n+    }\n+\n     /// Returns true if the `EnumSet` is empty.\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn is_empty(&self) -> bool {\n@@ -269,6 +274,20 @@ mod test {\n         assert_eq!(\"{A, C}\", e.to_string().as_slice());\n     }\n \n+    #[test]\n+    fn test_len() {\n+        let mut e = EnumSet::new();\n+        assert_eq!(e.len(), 0);\n+        e.insert(A);\n+        e.insert(B);\n+        e.insert(C);\n+        assert_eq!(e.len(), 3);\n+        e.remove(&A);\n+        assert_eq!(e.len(), 2);\n+        e.clear();\n+        assert_eq!(e.len(), 0);\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // intersect\n "}]}