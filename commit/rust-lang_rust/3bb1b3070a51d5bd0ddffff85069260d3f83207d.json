{"sha": "3bb1b3070a51d5bd0ddffff85069260d3f83207d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYjFiMzA3MGE1MWQ1YmQwZGRmZmZmODUwNjkyNjBkM2Y4MzIwN2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T15:50:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T15:50:19Z"}, "message": "minor", "tree": {"sha": "5e1d84d1119d9b7d848456f6c331c0f78c1597c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e1d84d1119d9b7d848456f6c331c0f78c1597c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bb1b3070a51d5bd0ddffff85069260d3f83207d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb1b3070a51d5bd0ddffff85069260d3f83207d", "html_url": "https://github.com/rust-lang/rust/commit/3bb1b3070a51d5bd0ddffff85069260d3f83207d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bb1b3070a51d5bd0ddffff85069260d3f83207d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "818aeb8a242bba5d8947ce2960e1af27d998f4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/818aeb8a242bba5d8947ce2960e1af27d998f4fc", "html_url": "https://github.com/rust-lang/rust/commit/818aeb8a242bba5d8947ce2960e1af27d998f4fc"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "f5637a7404831fddc94dd84fd364381b8c6b2110", "filename": "crates/ra_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bb1b3070a51d5bd0ddffff85069260d3f83207d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb1b3070a51d5bd0ddffff85069260d3f83207d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=3bb1b3070a51d5bd0ddffff85069260d3f83207d", "patch": "@@ -37,7 +37,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         return None;\n     }\n     let expr = node.ancestors().find_map(valid_target_expr)?;\n-    let (anchor_stmt, wrap_in_block) = anchor_stmt(expr.clone())?;\n+    let (anchor_stmt, wrap_in_block) = anchor_stmt(&expr)?;\n     let indent = anchor_stmt.prev_sibling_or_token()?.as_token()?.clone();\n     if indent.kind() != WHITESPACE {\n         return None;\n@@ -143,7 +143,7 @@ fn valid_target_expr(node: SyntaxNode) -> Option<ast::Expr> {\n /// to produce correct code.\n /// It can be a statement, the last in a block expression or a wanna be block\n /// expression like a lambda or match arm.\n-fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n+fn anchor_stmt(expr: &ast::Expr) -> Option<(SyntaxNode, bool)> {\n     expr.syntax().ancestors().find_map(|node| {\n         if let Some(expr) = node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.expr()) {\n             if expr.syntax() == &node {"}]}