{"sha": "c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZTAyYWQ3MjRmMDVmNzNiOTU3YjNkNmY2MzE0YTlhMmU1YzI4NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-19T14:06:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-19T14:06:57Z"}, "message": "Auto merge of #68363 - Dylan-DPC:rollup-33enndv, r=Dylan-DPC\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #67682 ([const-prop] Remove useless typedef)\n - #68247 (Clean up err codes)\n - #68348 (Make iter::Empty<T> Send and Sync for any T)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7c54dabdc1a8a57a5da2d78f5c87b21971428cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c54dabdc1a8a57a5da2d78f5c87b21971428cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "html_url": "https://github.com/rust-lang/rust/commit/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6250d56355d72264ece721e8d0dc95b16a6824b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6250d56355d72264ece721e8d0dc95b16a6824b1", "html_url": "https://github.com/rust-lang/rust/commit/6250d56355d72264ece721e8d0dc95b16a6824b1"}, {"sha": "d276e6942ea1af5c1ad79743e7f0ee797010023f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d276e6942ea1af5c1ad79743e7f0ee797010023f", "html_url": "https://github.com/rust-lang/rust/commit/d276e6942ea1af5c1ad79743e7f0ee797010023f"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "25dfc573e416abd38a0a9c3e23ae12812e2566b9", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "patch": "@@ -208,6 +208,11 @@ pub fn repeat_with<A, F: FnMut() -> A>(repeater: F) -> RepeatWith<F> {\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n pub struct Empty<T>(marker::PhantomData<T>);\n \n+#[stable(feature = \"iter_empty_send_sync\", since = \"1.42.0\")]\n+unsafe impl<T> Send for Empty<T> {}\n+#[stable(feature = \"iter_empty_send_sync\", since = \"1.42.0\")]\n+unsafe impl<T> Sync for Empty<T> {}\n+\n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T> fmt::Debug for Empty<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "b8c313d412eba9ee91b67eee02994082187ba006", "filename": "src/librustc_error_codes/error_codes/E0195.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0195.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0195.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0195.md?ref=c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "patch": "@@ -1,4 +1,5 @@\n-Your method's lifetime parameters do not match the trait declaration.\n+The lifetime parameters of the method do not match the trait declaration.\n+\n Erroneous code example:\n \n ```compile_fail,E0195\n@@ -16,7 +17,7 @@ impl Trait for Foo {\n }\n ```\n \n-The lifetime constraint `'b` for bar() implementation does not match the\n+The lifetime constraint `'b` for `bar()` implementation does not match the\n trait declaration. Ensure lifetime declarations match exactly in both trait\n declaration and implementation. Example:\n "}, {"sha": "c142b8f3664c5e83a46c396d7191681c1298f79f", "filename": "src/librustc_error_codes/error_codes/E0197.md", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0197.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0197.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0197.md?ref=c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "patch": "@@ -1,13 +1,20 @@\n+An inherent implementation was marked unsafe.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0197\n+struct Foo;\n+\n+unsafe impl Foo { } // error!\n+```\n+\n Inherent implementations (one that do not implement a trait but provide\n methods associated with a type) are always safe because they are not\n implementing an unsafe trait. Removing the `unsafe` keyword from the inherent\n implementation will resolve this error.\n \n-```compile_fail,E0197\n+```\n struct Foo;\n \n-// this will cause this error\n-unsafe impl Foo { }\n-// converting it to this will fix it\n-impl Foo { }\n+impl Foo { } // ok!\n ```"}, {"sha": "bd398c6e5b449e0a4ebbd3dcbcd5dc15cf820a60", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "patch": "@@ -288,8 +288,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n }\n \n-type Const<'tcx> = OpTy<'tcx>;\n-\n /// Finds optimization opportunities on the MIR.\n struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine>,\n@@ -387,7 +385,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n+    fn get_const(&self, local: Local) -> Option<OpTy<'tcx>> {\n         if local == RETURN_PLACE {\n             // Try to read the return place as an immediate so that if it is representable as a\n             // scalar, we can handle it as such, but otherwise, just return the value as is.\n@@ -466,11 +464,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         r\n     }\n \n-    fn eval_constant(\n-        &mut self,\n-        c: &Constant<'tcx>,\n-        source_info: SourceInfo,\n-    ) -> Option<Const<'tcx>> {\n+    fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         self.ecx.tcx.span = c.span;\n \n         // FIXME we need to revisit this for #67176\n@@ -510,12 +504,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n+    fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         trace!(\"eval_place(place={:?})\", place);\n         self.use_ecx(source_info, |this| this.ecx.eval_place_to_op(place, None))\n     }\n \n-    fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n+    fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         match *op {\n             Operand::Constant(ref c) => self.eval_constant(c, source_info),\n             Operand::Move(ref place) | Operand::Copy(ref place) => {\n@@ -664,7 +658,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn replace_with_const(\n         &mut self,\n         rval: &mut Rvalue<'tcx>,\n-        value: Const<'tcx>,\n+        value: OpTy<'tcx>,\n         source_info: SourceInfo,\n     ) {\n         trace!(\"attepting to replace {:?} with {:?}\", rval, value);"}, {"sha": "2f6d35f01be62be86783118e1faa5368275448e3", "filename": "src/test/ui/threads-sendsync/sync-send-iterators-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-iterators-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e02ad724f05f73b957b3d6f6314a9a2e5c284e/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-iterators-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fsync-send-iterators-in-libcore.rs?ref=c0e02ad724f05f73b957b3d6f6314a9a2e5c284e", "patch": "@@ -88,6 +88,7 @@ fn main() {\n     is_sync_send!((1..));\n     is_sync_send!(repeat(1));\n     is_sync_send!(empty::<usize>());\n+    is_sync_send!(empty::<*mut i32>());\n     is_sync_send!(once(1));\n \n     // for option.rs"}]}