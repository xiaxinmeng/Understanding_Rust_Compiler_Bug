{"sha": "13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzY2NiYjI5MTlkZmY4ZTk4ZDBhMjQyZDlkNmI3ZWRkMTdhNmJkMmM=", "commit": {"author": {"name": "Matt Niemeir", "email": "matt.niemeir@gmail.com", "date": "2020-03-11T03:27:38Z"}, "committer": {"name": "Matt Niemeir", "email": "matt.niemeir@gmail.com", "date": "2020-03-11T03:27:38Z"}, "message": "find_usages limited to actual usages again", "tree": {"sha": "4c8fb108cce727f0386c543cf4e9867803495f0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c8fb108cce727f0386c543cf4e9867803495f0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c", "html_url": "https://github.com/rust-lang/rust/commit/13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c/comments", "author": {"login": "m-n", "id": 1393649, "node_id": "MDQ6VXNlcjEzOTM2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1393649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-n", "html_url": "https://github.com/m-n", "followers_url": "https://api.github.com/users/m-n/followers", "following_url": "https://api.github.com/users/m-n/following{/other_user}", "gists_url": "https://api.github.com/users/m-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-n/subscriptions", "organizations_url": "https://api.github.com/users/m-n/orgs", "repos_url": "https://api.github.com/users/m-n/repos", "events_url": "https://api.github.com/users/m-n/events{/privacy}", "received_events_url": "https://api.github.com/users/m-n/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-n", "id": 1393649, "node_id": "MDQ6VXNlcjEzOTM2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1393649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-n", "html_url": "https://github.com/m-n", "followers_url": "https://api.github.com/users/m-n/followers", "following_url": "https://api.github.com/users/m-n/following{/other_user}", "gists_url": "https://api.github.com/users/m-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-n/subscriptions", "organizations_url": "https://api.github.com/users/m-n/orgs", "repos_url": "https://api.github.com/users/m-n/repos", "events_url": "https://api.github.com/users/m-n/events{/privacy}", "received_events_url": "https://api.github.com/users/m-n/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8121bd65daecd9e92371c244dd1ac2b0e5ecda", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda", "html_url": "https://github.com/rust-lang/rust/commit/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda"}], "stats": {"total": 98, "additions": 84, "deletions": 14}, "files": [{"sha": "7d1190af9e972ae9578dcc3d407897228eac2c2f", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c", "patch": "@@ -381,6 +381,76 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_field_shorthand_correct_struct() {\n+        test_rename(\n+            r#\"\n+    struct Foo {\n+        i<|>: i32,\n+    }\n+\n+    struct Bar {\n+        i: i32,\n+    }\n+\n+    impl Bar {\n+        fn new(i: i32) -> Self {\n+            Self { i }\n+        }\n+    }\n+    \"#,\n+            \"j\",\n+            r#\"\n+    struct Foo {\n+        j: i32,\n+    }\n+\n+    struct Bar {\n+        i: i32,\n+    }\n+\n+    impl Bar {\n+        fn new(i: i32) -> Self {\n+            Self { i }\n+        }\n+    }\n+    \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_shadow_local_for_struct_shorthand() {\n+        test_rename(\n+            r#\"\n+    struct Foo {\n+        i: i32,\n+    }\n+\n+    fn baz(i<|>: i32) -> Self {\n+         let x = Foo { i };\n+         {\n+             let i = 0;\n+             Foo { i }\n+         }\n+     }\n+    \"#,\n+            \"j\",\n+            r#\"\n+    struct Foo {\n+        i: i32,\n+    }\n+\n+    fn baz(j: i32) -> Self {\n+         let x = Foo { i: j };\n+         {\n+             let i = 0;\n+             Foo { i }\n+         }\n+     }\n+    \"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_rename_mod() {\n         let (analysis, position) = analysis_and_position("}, {"sha": "cf78d3e41ed58e650ef27084eede25e68cf16ff1", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=13ccbb2919dff8e98d0a242d9d6b7edd17a6bd2c", "patch": "@@ -256,21 +256,21 @@ impl Definition {\n                             access: reference_access(&def, &name_ref),\n                         });\n                     }\n-                    Some(NameRefClass::FieldShorthand { local, field: _ }) => {\n-                        let kind = match self {\n-                            Definition::StructField(_) => {\n-                                ReferenceKind::StructFieldShorthandForField\n-                            }\n-                            Definition::Local(_) => ReferenceKind::StructFieldShorthandForLocal,\n-                            _ => continue,\n+                    Some(NameRefClass::FieldShorthand { local, field }) => {\n+                        match self {\n+                            Definition::StructField(_) if &field == self => refs.push(Reference {\n+                                file_range: sema.original_range(name_ref.syntax()),\n+                                kind: ReferenceKind::StructFieldShorthandForField,\n+                                access: reference_access(&field, &name_ref),\n+                            }),\n+                            Definition::Local(l) if &local == l => refs.push(Reference {\n+                                file_range: sema.original_range(name_ref.syntax()),\n+                                kind: ReferenceKind::StructFieldShorthandForLocal,\n+                                access: reference_access(&Definition::Local(local), &name_ref),\n+                            }),\n+\n+                            _ => {} // not a usage\n                         };\n-\n-                        let file_range = sema.original_range(name_ref.syntax());\n-                        refs.push(Reference {\n-                            file_range,\n-                            kind,\n-                            access: reference_access(&Definition::Local(local), &name_ref),\n-                        });\n                     }\n                     _ => {} // not a usage\n                 }"}]}