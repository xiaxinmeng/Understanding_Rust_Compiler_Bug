{"sha": "dc6ed63655b6698828b363e49d6bd9df76633334", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNmVkNjM2NTViNjY5ODgyOGIzNjNlNDlkNmJkOWRmNzY2MzMzMzQ=", "commit": {"author": {"name": "Greg Chapple", "email": "gregchapple1@gmail.com", "date": "2016-01-25T14:07:10Z"}, "committer": {"name": "Greg Chapple", "email": "gregchapple1@gmail.com", "date": "2016-01-25T14:25:32Z"}, "message": "Added info on the build system to contributing guide\n\nI recently wrote a blog post on contributing to the Rust compiler which\ngained some interest. It was mentioned in a comment on Reddit that it\nwould be useful to integrate some of the information from that post to\nthe official contributing guide.\n\nThis is the start of my efforts to integrate what I wrote with the\nofficial guide.\n\nThis commit adds information on the build system. It is not a complete\nguide on the build system, but it should be enough to provide a good\nstarting place for those wishing to contribute.", "tree": {"sha": "2c908e97da23a932b00b32224aa2a15731115d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c908e97da23a932b00b32224aa2a15731115d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc6ed63655b6698828b363e49d6bd9df76633334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6ed63655b6698828b363e49d6bd9df76633334", "html_url": "https://github.com/rust-lang/rust/commit/dc6ed63655b6698828b363e49d6bd9df76633334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc6ed63655b6698828b363e49d6bd9df76633334/comments", "author": {"login": "gchp", "id": 1315394, "node_id": "MDQ6VXNlcjEzMTUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1315394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchp", "html_url": "https://github.com/gchp", "followers_url": "https://api.github.com/users/gchp/followers", "following_url": "https://api.github.com/users/gchp/following{/other_user}", "gists_url": "https://api.github.com/users/gchp/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchp/subscriptions", "organizations_url": "https://api.github.com/users/gchp/orgs", "repos_url": "https://api.github.com/users/gchp/repos", "events_url": "https://api.github.com/users/gchp/events{/privacy}", "received_events_url": "https://api.github.com/users/gchp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gchp", "id": 1315394, "node_id": "MDQ6VXNlcjEzMTUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1315394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gchp", "html_url": "https://github.com/gchp", "followers_url": "https://api.github.com/users/gchp/followers", "following_url": "https://api.github.com/users/gchp/following{/other_user}", "gists_url": "https://api.github.com/users/gchp/gists{/gist_id}", "starred_url": "https://api.github.com/users/gchp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gchp/subscriptions", "organizations_url": "https://api.github.com/users/gchp/orgs", "repos_url": "https://api.github.com/users/gchp/repos", "events_url": "https://api.github.com/users/gchp/events{/privacy}", "received_events_url": "https://api.github.com/users/gchp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22cb5359fd2c9703e1c0db3a179b79c7cdb42cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22cb5359fd2c9703e1c0db3a179b79c7cdb42cd", "html_url": "https://github.com/rust-lang/rust/commit/c22cb5359fd2c9703e1c0db3a179b79c7cdb42cd"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "94576bbac1f2ca2463ef1e2a1e4d8cde94ea0d5a", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dc6ed63655b6698828b363e49d6bd9df76633334/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc6ed63655b6698828b363e49d6bd9df76633334/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=dc6ed63655b6698828b363e49d6bd9df76633334", "patch": "@@ -6,6 +6,7 @@ links to the major sections:\n \n * [Feature Requests](#feature-requests)\n * [Bug Reports](#bug-reports)\n+* [The Build System](#the-build-system)\n * [Pull Requests](#pull-requests)\n * [Writing Documentation](#writing-documentation)\n * [Issue Triage](#issue-triage)\n@@ -77,6 +78,60 @@ to do this is to invoke `rustc` like this:\n $ RUST_BACKTRACE=1 rustc ...\n ```\n \n+## The Build System\n+\n+The build system for Rust is complex. It covers bootstrapping the compiler,\n+running tests, building documentation and more. Unless you are familiar with\n+Makefiles, I wouldn't suggest trying to understand everything going on in\n+Rust's setup - there's a lot there, and you can get lost trying to understand\n+it all.\n+\n+If Makefiles are your thing, though, all the configuration lives in\n+[the `mk` directory][mkdir] in the project root.\n+\n+[mkdir]: https://github.com/rust-lang/rust/tree/master/mk/\n+\n+### Configuration\n+\n+Before you can start building the compiler you need to configure the build for\n+your system. In most cases, that will just mean using the defaults provided\n+for Rust. Configuring involves invoking the `configure` script in the project\n+root.\n+\n+```\n+./configure\n+```\n+\n+There are large number of options accepted by this script to alter the\n+configuration used later in the build process. Some options to note:\n+\n+- `--enable-debug` - Build a debug version of the compiler (disables optimizations)\n+- `--disable-valgrind-rpass` - Don't run tests with valgrind\n+- `--enable-clang` - Prefer clang to gcc for building dependencies (ie LLVM)\n+- `--enable-ccache` - Invoke clang/gcc with ccache to re-use object files between builds\n+\n+To see a full list of options, run `./configure --help`.\n+\n+### Useful Targets\n+\n+Some common make targets are:\n+\n+- `make rustc-stage1` - build up to (and including) the first stage. For most\n+  cases we don't need to build the stage2 compiler, so we can save time by not\n+  building it. The stage1 compiler is a fully functioning compiler and\n+  (probably) will be enough to determine if your change works as expected.\n+- `make check` - build the full compiler & run all tests (takes a while). This\n+  is what gets run by the continuous integration system against your pull\n+  request. You should run this before submitting to make sure your tests pass\n+  & everything builds in the correct manner.\n+- `make check-stage1-std NO_REBUILD=1` - test the standard library without\n+  rebuilding the entire compiler\n+- `make check TESTNAME=<path-to-test-file>.rs` - Run a single test file\n+- `make check-stage1-rpass TESTNAME=<path-to-test-file>.rs` - Run a single\n+  rpass test with the stage1 compiler (this will be quicker than running the\n+  command above as we only build the stage1 compiler, not the entire thing).\n+  You can also leave off the `-rpass` to run all stage1 test types.\n+\n ## Pull Requests\n \n Pull requests are the primary mechanism we use to change Rust. GitHub itself"}]}