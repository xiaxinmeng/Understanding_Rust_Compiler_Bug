{"sha": "5519cbfe334182f57047ea00368f3fd0b9ca0d1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MTljYmZlMzM0MTgyZjU3MDQ3ZWEwMDM2OGYzZmQwYjljYTBkMWM=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-04-05T09:12:45Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-05-08T08:58:08Z"}, "message": "Don't force -O1 with ThinLTO\n\nThis doesn't seem to be necessary anymore, although I don't know\nat which point or why that changed.\n\nForcing -O1 makes some tests fail under NewPM, because NewPM also\nperforms inlining at -O1, so it ends up performing much more\noptimization in practice than before.", "tree": {"sha": "cacb3abc042ab79535ac178553e9bf6b2b79db96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cacb3abc042ab79535ac178553e9bf6b2b79db96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5519cbfe334182f57047ea00368f3fd0b9ca0d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5519cbfe334182f57047ea00368f3fd0b9ca0d1c", "html_url": "https://github.com/rust-lang/rust/commit/5519cbfe334182f57047ea00368f3fd0b9ca0d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5519cbfe334182f57047ea00368f3fd0b9ca0d1c/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4989ab707e246b507caf0f554741a7518bc868", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4989ab707e246b507caf0f554741a7518bc868", "html_url": "https://github.com/rust-lang/rust/commit/7c4989ab707e246b507caf0f554741a7518bc868"}], "stats": {"total": 22, "additions": 0, "deletions": 22}, "files": [{"sha": "48ca7c0060a0326a5307336f7d09dde3b1702f75", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5519cbfe334182f57047ea00368f3fd0b9ca0d1c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5519cbfe334182f57047ea00368f3fd0b9ca0d1c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=5519cbfe334182f57047ea00368f3fd0b9ca0d1c", "patch": "@@ -584,12 +584,6 @@ pub(crate) fn run_pass_manager(\n         if write::should_use_new_llvm_pass_manager(config) {\n             let opt_stage = if thin { llvm::OptStage::ThinLTO } else { llvm::OptStage::FatLTO };\n             let opt_level = config.opt_level.unwrap_or(config::OptLevel::No);\n-            // See comment below for why this is necessary.\n-            let opt_level = if let config::OptLevel::No = opt_level {\n-                config::OptLevel::Less\n-            } else {\n-                opt_level\n-            };\n             write::optimize_with_new_llvm_pass_manager(cgcx, module, config, opt_level, opt_stage);\n             debug!(\"lto done\");\n             return;\n@@ -603,26 +597,10 @@ pub(crate) fn run_pass_manager(\n             llvm::LLVMRustAddPass(pm, pass.unwrap());\n         }\n \n-        // When optimizing for LTO we don't actually pass in `-O0`, but we force\n-        // it to always happen at least with `-O1`.\n-        //\n-        // With ThinLTO we mess around a lot with symbol visibility in a way\n-        // that will actually cause linking failures if we optimize at O0 which\n-        // notable is lacking in dead code elimination. To ensure we at least\n-        // get some optimizations and correctly link we forcibly switch to `-O1`\n-        // to get dead code elimination.\n-        //\n-        // Note that in general this shouldn't matter too much as you typically\n-        // only turn on ThinLTO when you're compiling with optimizations\n-        // otherwise.\n         let opt_level = config\n             .opt_level\n             .map(|x| to_llvm_opt_settings(x).0)\n             .unwrap_or(llvm::CodeGenOptLevel::None);\n-        let opt_level = match opt_level {\n-            llvm::CodeGenOptLevel::None => llvm::CodeGenOptLevel::Less,\n-            level => level,\n-        };\n         with_llvm_pmb(module.module_llvm.llmod(), config, opt_level, false, &mut |b| {\n             if thin {\n                 llvm::LLVMRustPassManagerBuilderPopulateThinLTOPassManager(b, pm);"}]}