{"sha": "5f57491c981530103e1e26dcd280e1a2df10f853", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNTc0OTFjOTgxNTMwMTAzZTFlMjZkY2QyODBlMWEyZGYxMGY4NTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-21T13:56:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-21T13:56:18Z"}, "message": "Cleanup TextEdit", "tree": {"sha": "4f68def42ca0230c6e6d0e3ed98cd351c9e2d79b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f68def42ca0230c6e6d0e3ed98cd351c9e2d79b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f57491c981530103e1e26dcd280e1a2df10f853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f57491c981530103e1e26dcd280e1a2df10f853", "html_url": "https://github.com/rust-lang/rust/commit/5f57491c981530103e1e26dcd280e1a2df10f853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f57491c981530103e1e26dcd280e1a2df10f853/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cba0dc26b707bebc1865671fd2c5139c1e1c537", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cba0dc26b707bebc1865671fd2c5139c1e1c537", "html_url": "https://github.com/rust-lang/rust/commit/3cba0dc26b707bebc1865671fd2c5139c1e1c537"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "cfb7c1e380b6b51e7b66b46bfe4d6438efae3cfc", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=5f57491c981530103e1e26dcd280e1a2df10f853", "patch": "@@ -63,8 +63,8 @@ impl fmt::Debug for CompletionItem {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let mut s = f.debug_struct(\"CompletionItem\");\n         s.field(\"label\", &self.label()).field(\"source_range\", &self.source_range());\n-        if self.text_edit().as_indels().len() == 1 {\n-            let atom = &self.text_edit().as_indels()[0];\n+        if self.text_edit().len() == 1 {\n+            let atom = &self.text_edit().iter().next().unwrap();\n             s.field(\"delete\", &atom.delete);\n             s.field(\"insert\", &atom.insert);\n         } else {"}, {"sha": "fd2163dad66300e637b2b5a8afd3022d7ddff784", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=5f57491c981530103e1e26dcd280e1a2df10f853", "patch": "@@ -983,8 +983,8 @@ mod tests {\n         if let Some(change) = source_change {\n             for edit in change.info.source_file_edits {\n                 file_id = Some(edit.file_id);\n-                for indel in edit.edit.as_indels() {\n-                    text_edit_builder.replace(indel.delete, indel.insert.clone());\n+                for indel in edit.edit.into_iter() {\n+                    text_edit_builder.replace(indel.delete, indel.insert);\n                 }\n             }\n         }"}, {"sha": "b335582a33e0fe91ea3197ce3e5980b81653e8d7", "filename": "crates/ra_ide/src/test_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftest_utils.rs?ref=5f57491c981530103e1e26dcd280e1a2df10f853", "patch": "@@ -3,9 +3,9 @@\n use ra_syntax::{SourceFile, TextSize};\n use ra_text_edit::TextEdit;\n \n-pub use test_utils::*;\n+pub(crate) use test_utils::*;\n \n-pub fn check_action<F: Fn(&SourceFile, TextSize) -> Option<TextEdit>>(\n+pub(crate) fn check_action<F: Fn(&SourceFile, TextSize) -> Option<TextEdit>>(\n     before: &str,\n     after: &str,\n     f: F,"}, {"sha": "199fd109687153bc1442a3d65493b5a7bfc10af2", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=5f57491c981530103e1e26dcd280e1a2df10f853", "patch": "@@ -3,6 +3,7 @@\n //! `rust-analyzer` never mutates text itself and only sends diffs to clients,\n //! so `TextEdit` is the ultimate representation of the work done by\n //! rust-analyzer.\n+use std::{slice, vec};\n \n pub use text_size::{TextRange, TextSize};\n \n@@ -71,17 +72,24 @@ impl TextEdit {\n         TextEdit { indels }\n     }\n \n+    pub fn len(&self) -> usize {\n+        self.indels.len()\n+    }\n+\n     pub fn is_empty(&self) -> bool {\n         self.indels.is_empty()\n     }\n \n-    // FXME: impl IntoIter instead\n-    pub fn as_indels(&self) -> &[Indel] {\n-        &self.indels\n+    pub fn iter(&self) -> slice::Iter<'_, Indel> {\n+        self.indels.iter()\n+    }\n+\n+    pub fn into_iter(self) -> vec::IntoIter<Indel> {\n+        self.indels.into_iter()\n     }\n \n     pub fn apply(&self, text: &mut String) {\n-        match self.indels.len() {\n+        match self.len() {\n             0 => return,\n             1 => {\n                 self.indels[0].apply(text);"}, {"sha": "6171979634b0573e4bba17054fdcaf647134945f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f57491c981530103e1e26dcd280e1a2df10f853/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=5f57491c981530103e1e26dcd280e1a2df10f853", "patch": "@@ -133,11 +133,7 @@ pub(crate) fn text_edit_vec(\n     line_endings: LineEndings,\n     text_edit: TextEdit,\n ) -> Vec<lsp_types::TextEdit> {\n-    text_edit\n-        .as_indels()\n-        .iter()\n-        .map(|it| self::text_edit(line_index, line_endings, it.clone()))\n-        .collect()\n+    text_edit.into_iter().map(|indel| self::text_edit(line_index, line_endings, indel)).collect()\n }\n \n pub(crate) fn completion_item(\n@@ -150,7 +146,7 @@ pub(crate) fn completion_item(\n     // LSP does not allow arbitrary edits in completion, so we have to do a\n     // non-trivial mapping here.\n     let source_range = completion_item.source_range();\n-    for indel in completion_item.text_edit().as_indels() {\n+    for indel in completion_item.text_edit().iter() {\n         if indel.delete.contains_range(source_range) {\n             text_edit = Some(if indel.delete == source_range {\n                 self::text_edit(line_index, line_endings, indel.clone())\n@@ -459,8 +455,7 @@ pub(crate) fn snippet_text_document_edit(\n     let line_endings = world.file_line_endings(source_file_edit.file_id);\n     let edits = source_file_edit\n         .edit\n-        .as_indels()\n-        .iter()\n+        .into_iter()\n         .map(|it| snippet_text_edit(&line_index, line_endings, is_snippet, it.clone()))\n         .collect();\n     Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })"}]}