{"sha": "b3a8f212f88bbea143bb11a5fddbe60603ebb7ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYThmMjEyZjg4YmJlYTE0M2JiMTFhNWZkZGJlNjA2MDNlYmI3ZmY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-01T23:53:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-01T23:53:20Z"}, "message": "Uncomment test code for failure to use `Box::pin`\n\nClose #69083.", "tree": {"sha": "a139df2235e9d4a302f4ba9adb9b2156b2ae3d8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a139df2235e9d4a302f4ba9adb9b2156b2ae3d8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff", "html_url": "https://github.com/rust-lang/rust/commit/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f65393b9abf5e70d0b9a8080558f17c5625bd40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f65393b9abf5e70d0b9a8080558f17c5625bd40", "html_url": "https://github.com/rust-lang/rust/commit/7f65393b9abf5e70d0b9a8080558f17c5625bd40"}], "stats": {"total": 111, "additions": 95, "deletions": 16}, "files": [{"sha": "5dee0f5dae0b0d644641442b1d9ba28a1dbc96da", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=b3a8f212f88bbea143bb11a5fddbe60603ebb7ff", "patch": "@@ -11,19 +11,26 @@ fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     x //~ ERROR mismatched types\n }\n \n-// FIXME: uncomment these once this commit is in Beta and we can rely on `rustc_on_unimplemented`\n-//        having filtering for `Self` being a trait.\n-//\n-// fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Box::new(x)\n-// }\n-//\n-// fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Pin::new(x)\n-// }\n-//\n-// fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Pin::new(Box::new(x))\n-// }\n+// This case is still subpar:\n+// `Pin::new(x)`: store this in the heap by calling `Box::new`: `Box::new(x)`\n+// Should suggest changing the code from `Pin::new` to `Box::pin`.\n+fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Box::new(x) //~ ERROR mismatched types\n+}\n+\n+fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Pin::new(x) //~ ERROR mismatched types\n+    //~^ ERROR E0277\n+}\n+\n+fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Pin::new(Box::new(x)) //~ ERROR E0277\n+}\n+\n+fn zap() -> BoxFuture<'static, i32> {\n+    async { //~ ERROR mismatched types\n+        42\n+    }\n+}\n \n fn main() {}"}, {"sha": "ff256eb30947a5a6b9b7784f1ebd1e2b2cf485a1", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3a8f212f88bbea143bb11a5fddbe60603ebb7ff/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=b3a8f212f88bbea143bb11a5fddbe60603ebb7ff", "patch": "@@ -15,6 +15,78 @@ LL |     x\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n+   |\n+LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |                                                         ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL |     Box::new(x)\n+   |     ^^^^^^^^^^^ expected struct `std::pin::Pin`, found struct `std::boxed::Box`\n+   |\n+   = note: expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+              found struct `std::boxed::Box<F>`\n+   = help: use `Box::pin`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:14\n+   |\n+LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |        - this type parameter\n+LL |     Pin::new(x)\n+   |              ^\n+   |              |\n+   |              expected struct `std::boxed::Box`, found type parameter `F`\n+   |              help: store this in the heap by calling `Box::new`: `Box::new(x)`\n+   |\n+   = note:      expected struct `std::boxed::Box<dyn std::future::Future<Output = i32> + std::marker::Send>`\n+           found type parameter `F`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:5\n+   |\n+LL |     Pin::new(x)\n+   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n+   |\n+   = note: consider using `Box::pin`\n+   = note: required by `std::pin::Pin::<P>::new`\n+\n+error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:27:5\n+   |\n+LL |     Pin::new(Box::new(x))\n+   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n+   |\n+   = note: consider using `Box::pin`\n+   = note: required by `std::pin::Pin::<P>::new`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:31:5\n+   |\n+LL |   fn zap() -> BoxFuture<'static, i32> {\n+   |               ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL | /     async {\n+LL | |         42\n+LL | |     }\n+   | |_____^ expected struct `std::pin::Pin`, found opaque type\n+   | \n+  ::: $SRC_DIR/libcore/future/mod.rs:LL:COL\n+   |\n+LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                             ------------------------------- the found opaque type\n+   |\n+   = note:   expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+           found opaque type `impl std::future::Future`\n+help: you need to pin and box this expression\n+   |\n+LL |     Box::pin(async {\n+LL |         42\n+LL |     })\n+   |\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}