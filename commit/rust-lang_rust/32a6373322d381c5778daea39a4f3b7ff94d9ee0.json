{"sha": "32a6373322d381c5778daea39a4f3b7ff94d9ee0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYTYzNzMzMjJkMzgxYzU3NzhkYWVhMzlhNGYzYjdmZjk0ZDllZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-02T01:43:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-02T01:43:28Z"}, "message": "Auto merge of #34067 - tbu-:pr_lookup_host_ignore_other_addresses, r=alexcrichton\n\nIgnore unknown address types when looking up hosts\n\nPreviously, any function using a `ToSocketAddrs` input would fail if\npassed a hostname that resolves to an address type different from the\nones recognized by Rust.\n\nThis also changes the `LookupHost` iterator to only include the known\naddress types, as a result, it doesn't have to return `Result`s any\nmore, which are likely misinterpreted as failed name lookups.", "tree": {"sha": "c9dc0b5377eef02cc968d9f68be600ec68275322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9dc0b5377eef02cc968d9f68be600ec68275322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32a6373322d381c5778daea39a4f3b7ff94d9ee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32a6373322d381c5778daea39a4f3b7ff94d9ee0", "html_url": "https://github.com/rust-lang/rust/commit/32a6373322d381c5778daea39a4f3b7ff94d9ee0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32a6373322d381c5778daea39a4f3b7ff94d9ee0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01411937ff6b2a2dfad03d060d636941b0034591", "url": "https://api.github.com/repos/rust-lang/rust/commits/01411937ff6b2a2dfad03d060d636941b0034591", "html_url": "https://github.com/rust-lang/rust/commit/01411937ff6b2a2dfad03d060d636941b0034591"}, {"sha": "6aa01825204e8c3c29d104935de78df74a8e51d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa01825204e8c3c29d104935de78df74a8e51d3", "html_url": "https://github.com/rust-lang/rust/commit/6aa01825204e8c3c29d104935de78df74a8e51d3"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "b93ca8277e636bb7b3b8ff1ed30cd84db1a20ef1", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32a6373322d381c5778daea39a4f3b7ff94d9ee0/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a6373322d381c5778daea39a4f3b7ff94d9ee0/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=32a6373322d381c5778daea39a4f3b7ff94d9ee0", "patch": "@@ -344,6 +344,9 @@ impl hash::Hash for SocketAddrV6 {\n /// some other type (e.g. a string) just for it to be converted back to\n /// `SocketAddr` in constructor methods is pointless.\n ///\n+/// Addresses returned by the operating system that are not IP addresses are\n+/// silently ignored.\n+///\n /// Some examples:\n ///\n /// ```no_run\n@@ -448,12 +451,7 @@ impl ToSocketAddrs for (Ipv6Addr, u16) {\n \n fn resolve_socket_addr(s: &str, p: u16) -> io::Result<vec::IntoIter<SocketAddr>> {\n     let ips = lookup_host(s)?;\n-    let v: Vec<_> = ips.map(|a| {\n-        a.map(|mut a| {\n-            a.set_port(p);\n-            a\n-        })\n-    }).collect()?;\n+    let v: Vec<_> = ips.map(|mut a| { a.set_port(p); a }).collect();\n     Ok(v.into_iter())\n }\n "}, {"sha": "ac13b23ebee50256b70f780917b182f77ffce26b", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32a6373322d381c5778daea39a4f3b7ff94d9ee0/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a6373322d381c5778daea39a4f3b7ff94d9ee0/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=32a6373322d381c5778daea39a4f3b7ff94d9ee0", "patch": "@@ -98,15 +98,18 @@ pub struct LookupHost(net_imp::LookupHost);\n                                               addresses\",\n            issue = \"27705\")]\n impl Iterator for LookupHost {\n-    type Item = io::Result<SocketAddr>;\n-    fn next(&mut self) -> Option<io::Result<SocketAddr>> { self.0.next() }\n+    type Item = SocketAddr;\n+    fn next(&mut self) -> Option<SocketAddr> { self.0.next() }\n }\n \n /// Resolve the host specified by `host` as a number of `SocketAddr` instances.\n ///\n /// This method may perform a DNS query to resolve `host` and may also inspect\n /// system configuration to resolve the specified hostname.\n ///\n+/// The returned iterator will skip over any unknown addresses returned by the\n+/// operating system.\n+///\n /// # Examples\n ///\n /// ```no_run\n@@ -116,7 +119,7 @@ impl Iterator for LookupHost {\n ///\n /// # fn foo() -> std::io::Result<()> {\n /// for host in try!(net::lookup_host(\"rust-lang.org\")) {\n-///     println!(\"found address: {}\", try!(host));\n+///     println!(\"found address: {}\", host);\n /// }\n /// # Ok(())\n /// # }"}, {"sha": "274e495d70eb620b3f0d4e5f2ea91ee618825dfb", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32a6373322d381c5778daea39a4f3b7ff94d9ee0/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32a6373322d381c5778daea39a4f3b7ff94d9ee0/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=32a6373322d381c5778daea39a4f3b7ff94d9ee0", "patch": "@@ -119,14 +119,22 @@ pub struct LookupHost {\n }\n \n impl Iterator for LookupHost {\n-    type Item = io::Result<SocketAddr>;\n-    fn next(&mut self) -> Option<io::Result<SocketAddr>> {\n-        unsafe {\n-            if self.cur.is_null() { return None }\n-            let ret = sockaddr_to_addr(mem::transmute((*self.cur).ai_addr),\n-                                       (*self.cur).ai_addrlen as usize);\n-            self.cur = (*self.cur).ai_next as *mut c::addrinfo;\n-            Some(ret)\n+    type Item = SocketAddr;\n+    fn next(&mut self) -> Option<SocketAddr> {\n+        loop {\n+            unsafe {\n+                let cur = match self.cur.as_ref() {\n+                    None => return None,\n+                    Some(c) => c,\n+                };\n+                self.cur = cur.ai_next;\n+                match sockaddr_to_addr(mem::transmute(cur.ai_addr),\n+                                       cur.ai_addrlen as usize)\n+                {\n+                    Ok(addr) => return Some(addr),\n+                    Err(_) => continue,\n+                }\n+            }\n         }\n     }\n }"}]}