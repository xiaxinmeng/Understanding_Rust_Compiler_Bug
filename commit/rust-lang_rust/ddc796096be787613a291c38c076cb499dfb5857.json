{"sha": "ddc796096be787613a291c38c076cb499dfb5857", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYzc5NjA5NmJlNzg3NjEzYTI5MWMzOGMwNzZjYjQ5OWRmYjU4NTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-19T11:20:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-19T11:20:56Z"}, "message": "rustc: put ty_closure behind some indirection.\n\nThis reduces the size of sty from 112 to 96; like with the ty_trait\nvariant, this variant of sty occurs rarely (~1%) so the benefits are\nlarge and the costs small.", "tree": {"sha": "4e7d5591a349bbbeef2353902f1ac8d0541c511c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e7d5591a349bbbeef2353902f1ac8d0541c511c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddc796096be787613a291c38c076cb499dfb5857", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc796096be787613a291c38c076cb499dfb5857", "html_url": "https://github.com/rust-lang/rust/commit/ddc796096be787613a291c38c076cb499dfb5857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddc796096be787613a291c38c076cb499dfb5857/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405b5fc1ee21cc6bc29f97719600bd94066dd58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/405b5fc1ee21cc6bc29f97719600bd94066dd58c", "html_url": "https://github.com/rust-lang/rust/commit/405b5fc1ee21cc6bc29f97719600bd94066dd58c"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "0934b6407fb744ea51f95232a5a0a2f7a2f972d9", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -315,7 +315,7 @@ fn enc_sty(w: &mut MemWriter, cx: &ctxt, st: &ty::sty) {\n         ty::ty_unboxed_vec(mt) => { mywrite!(w, \"U\"); enc_mt(w, cx, mt); }\n         ty::ty_closure(ref f) => {\n             mywrite!(w, \"f\");\n-            enc_closure_ty(w, cx, f);\n+            enc_closure_ty(w, cx, *f);\n         }\n         ty::ty_bare_fn(ref f) => {\n             mywrite!(w, \"F\");"}, {"sha": "0f7106c389813ad7c0b76e49ab976e10379e162b", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -208,21 +208,21 @@ fn with_appropriate_checker(cx: &Context,\n \n     let fty = ty::node_id_to_type(cx.tcx, id);\n     match ty::get(fty).sty {\n-        ty::ty_closure(ty::ClosureTy {\n+        ty::ty_closure(~ty::ClosureTy {\n             sigil: OwnedSigil,\n             bounds: bounds,\n             ..\n         }) => {\n             b(|cx, fv| check_for_uniq(cx, fv, bounds))\n         }\n-        ty::ty_closure(ty::ClosureTy {\n+        ty::ty_closure(~ty::ClosureTy {\n             sigil: ManagedSigil,\n             ..\n         }) => {\n             // can't happen\n             fail!(\"internal error: saw closure with managed sigil (@fn)\");\n         }\n-        ty::ty_closure(ty::ClosureTy {\n+        ty::ty_closure(~ty::ClosureTy {\n             sigil: BorrowedSigil,\n             bounds: bounds,\n             region: region,"}, {"sha": "7c95815af54e50f9fb7051b1c5f5b9494ff5749b", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -173,7 +173,7 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n         ty::ty_trait(~ty::TyTrait { store: ty::UniqTraitStore, .. }) |\n         ty::ty_vec(_, ty::vstore_uniq) |\n         ty::ty_str(ty::vstore_uniq) |\n-        ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, ..}) => {\n+        ty::ty_closure(~ty::ClosureTy {sigil: ast::OwnedSigil, ..}) => {\n             Some(deref_ptr(OwnedPtr))\n         }\n \n@@ -189,7 +189,7 @@ pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n         }\n \n         ty::ty_str(ty::vstore_slice(r)) |\n-        ty::ty_closure(ty::ClosureTy {sigil: ast::BorrowedSigil,\n+        ty::ty_closure(~ty::ClosureTy {sigil: ast::BorrowedSigil,\n                                       region: r, ..}) => {\n             Some(deref_ptr(BorrowedPtr(ty::ImmBorrow, r)))\n         }"}, {"sha": "7cdb4b07d03a823e825798d4acb1130fa98d5d06", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -269,7 +269,7 @@ pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n             // noalias because the actual object pointer is nested.\n             ty::ty_uniq(..) | // ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n             ty::ty_vec(_, ty::vstore_uniq) | ty::ty_str(ty::vstore_uniq) |\n-            ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, ..}) => {\n+            ty::ty_closure(~ty::ClosureTy {sigil: ast::OwnedSigil, ..}) => {\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoAliasAttribute as c_uint);\n                 }"}, {"sha": "61371cec49ea590321dd5dc92912b12cc95cbbb2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -746,7 +746,7 @@ pub enum sty {\n     ty_ptr(mt),\n     ty_rptr(Region, mt),\n     ty_bare_fn(BareFnTy),\n-    ty_closure(ClosureTy),\n+    ty_closure(~ClosureTy),\n     ty_trait(~TyTrait),\n     ty_struct(DefId, substs),\n     ty_tup(Vec<t>),\n@@ -1407,7 +1407,7 @@ pub fn mk_mut_unboxed_vec(cx: &ctxt, ty: t) -> t {\n pub fn mk_tup(cx: &ctxt, ts: Vec<t>) -> t { mk_t(cx, ty_tup(ts)) }\n \n pub fn mk_closure(cx: &ctxt, fty: ClosureTy) -> t {\n-    mk_t(cx, ty_closure(fty))\n+    mk_t(cx, ty_closure(~fty))\n }\n \n pub fn mk_bare_fn(cx: &ctxt, fty: BareFnTy) -> t {\n@@ -2149,7 +2149,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_closure(ref c) => {\n-                closure_contents(cx, c)\n+                closure_contents(cx, *c)\n             }\n \n             ty_box(typ) => {\n@@ -2870,7 +2870,7 @@ pub fn ty_region(tcx: &ctxt,\n pub fn replace_fn_sig(cx: &ctxt, fsty: &sty, new_sig: FnSig) -> t {\n     match *fsty {\n         ty_bare_fn(ref f) => mk_bare_fn(cx, BareFnTy {sig: new_sig, ..*f}),\n-        ty_closure(ref f) => mk_closure(cx, ClosureTy {sig: new_sig, ..*f}),\n+        ty_closure(ref f) => mk_closure(cx, ClosureTy {sig: new_sig, ..**f}),\n         ref s => {\n             cx.sess.bug(\n                 format!(\"ty_fn_sig() called on non-fn type: {:?}\", s));\n@@ -2888,7 +2888,7 @@ pub fn replace_closure_return_type(tcx: &ctxt, fn_type: t, ret_type: t) -> t {\n         ty::ty_closure(ref fty) => {\n             ty::mk_closure(tcx, ClosureTy {\n                 sig: FnSig {output: ret_type, ..fty.sig.clone()},\n-                ..(*fty).clone()\n+                ..(**fty).clone()\n             })\n         }\n         _ => {\n@@ -3140,7 +3140,7 @@ pub fn adjust_ty(cx: &ctxt,\n                 ty::mk_closure(cx, ClosureTy {\n                     sigil: BorrowedSigil,\n                     region: r,\n-                    ..(*fty).clone()\n+                    ..(**fty).clone()\n                 })\n             }\n "}, {"sha": "f75d707b0f3b0f98a50c08df231ee014afc77fb4", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -175,7 +175,7 @@ pub fn super_fold_sty<T:TypeFolder>(this: &mut T,\n             ty::ty_bare_fn(this.fold_bare_fn_ty(f))\n         }\n         ty::ty_closure(ref f) => {\n-            ty::ty_closure(this.fold_closure_ty(f))\n+            ty::ty_closure(~this.fold_closure_ty(*f))\n         }\n         ty::ty_rptr(r, ref tm) => {\n             ty::ty_rptr(this.fold_region(r),"}, {"sha": "8ed28711194ff82808e6bf29caa34c3c95e14123", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -1860,7 +1860,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n \n         let fn_sig = match *fn_sty {\n             ty::ty_bare_fn(ty::BareFnTy {sig: ref sig, ..}) |\n-            ty::ty_closure(ty::ClosureTy {sig: ref sig, ..}) => sig,\n+            ty::ty_closure(~ty::ClosureTy {sig: ref sig, ..}) => sig,\n             _ => {\n                 fcx.type_error_message(call_expr.span, |actual| {\n                     format!(\"expected function but \\"}, {"sha": "1533943a55c2190553429c9a10f01557e1171bc1", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -610,7 +610,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n     let tcx = rcx.fcx.tcx();\n     let function_type = rcx.resolve_node_type(expr.id);\n     match ty::get(function_type).sty {\n-        ty::ty_closure(ty::ClosureTy {\n+        ty::ty_closure(~ty::ClosureTy {\n                 sigil: ast::BorrowedSigil, region: region, ..}) => {\n             let freevars = freevars::get_freevars(tcx, expr.id);\n             if freevars.is_empty() {\n@@ -635,7 +635,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n     rcx.set_repeating_scope(repeating_scope);\n \n     match ty::get(function_type).sty {\n-        ty::ty_closure(ty::ClosureTy {sigil: ast::BorrowedSigil, ..}) => {\n+        ty::ty_closure(~ty::ClosureTy {sigil: ast::BorrowedSigil, ..}) => {\n             let freevars = freevars::get_freevars(tcx, expr.id);\n             propagate_upupvar_borrow_kind(rcx, expr, freevars);\n         }"}, {"sha": "5dc55ab4b5c07056084b91e5b0cbb60c73d48fa4", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -119,7 +119,7 @@ impl<'f> Coerce<'f> {\n                 });\n             }\n \n-            ty::ty_closure(ty::ClosureTy {sigil: ast::BorrowedSigil, ..}) => {\n+            ty::ty_closure(~ty::ClosureTy {sigil: ast::BorrowedSigil, ..}) => {\n                 return self.unpack_actual_value(a, |sty_a| {\n                     self.coerce_borrowed_fn(a, sty_a, b)\n                 });\n@@ -361,7 +361,7 @@ impl<'f> Coerce<'f> {\n             ty::ClosureTy {\n                 sigil: ast::BorrowedSigil,\n                 region: r_borrow,\n-                ..fn_ty\n+                .. *fn_ty\n             });\n \n         if_ok!(self.subtype(a_borrowed, b));\n@@ -397,7 +397,7 @@ impl<'f> Coerce<'f> {\n             let a_closure = ty::mk_closure(self.get_ref().infcx.tcx,\n                                            ty::ClosureTy {\n                                                 sig: fn_ty_a.sig.clone(),\n-                                                ..fn_ty_b\n+                                                .. *fn_ty_b\n                                            });\n             if_ok!(self.subtype(a_closure, b));\n             Ok(Some(adj))"}, {"sha": "b05e168e9434c8feee4fb6e389e366c97b40c23d", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -570,7 +570,7 @@ pub fn super_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n       }\n \n       (&ty::ty_closure(ref a_fty), &ty::ty_closure(ref b_fty)) => {\n-        this.closure_tys(a_fty, b_fty).and_then(|fty| {\n+        this.closure_tys(*a_fty, *b_fty).and_then(|fty| {\n             Ok(ty::mk_closure(tcx, fty))\n         })\n       }"}, {"sha": "f9c336a499401b400cbdcf68e17a463951b9b7e1", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -705,7 +705,7 @@ impl<'a> ConstraintContext<'a> {\n                 self.add_constraints_from_sig(sig, variance);\n             }\n \n-            ty::ty_closure(ty::ClosureTy { sig: ref sig, region, .. }) => {\n+            ty::ty_closure(~ty::ClosureTy { sig: ref sig, region, .. }) => {\n                 let contra = self.contravariant(variance);\n                 self.add_constraints_from_region(region, contra);\n                 self.add_constraints_from_sig(sig, variance);"}, {"sha": "7c03c1dc45dfb95a4bd625dd6c851bdfa197569e", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc796096be787613a291c38c076cb499dfb5857/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ddc796096be787613a291c38c076cb499dfb5857", "patch": "@@ -453,7 +453,7 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str {\n         ~\"(\" + strs.connect(\",\") + \")\"\n       }\n       ty_closure(ref f) => {\n-          closure_to_str(cx, f)\n+          closure_to_str(cx, *f)\n       }\n       ty_bare_fn(ref f) => {\n           bare_fn_to_str(cx, f.purity, f.abis, None, &f.sig)"}]}