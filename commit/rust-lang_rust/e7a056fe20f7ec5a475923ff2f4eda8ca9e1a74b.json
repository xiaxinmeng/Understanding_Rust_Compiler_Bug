{"sha": "e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YTA1NmZlMjBmN2VjNWE0NzU5MjNmZjJmNGVkYThjYTllMWE3NGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-25T20:28:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-25T20:32:57Z"}, "message": "Share wasm-bindgen compat abi selection code", "tree": {"sha": "26f45af8f9f69ac10587a88b04797211db5b2df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f45af8f9f69ac10587a88b04797211db5b2df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b", "html_url": "https://github.com/rust-lang/rust/commit/e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d2766e3524129f0d7ec6ad34c4045150ad4f978", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2766e3524129f0d7ec6ad34c4045150ad4f978", "html_url": "https://github.com/rust-lang/rust/commit/4d2766e3524129f0d7ec6ad34c4045150ad4f978"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "2bec761b0e53f1ab9953768a17e9f2c9f5dd6254", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b", "patch": "@@ -2752,7 +2752,7 @@ where\n                 attrs\n             });\n \n-            if target.arch == \"wasm32\" && target.os == \"unknown\" {\n+            if call::use_wasm_bindgen_compat_abi(target) {\n                 // wasm-bindgen depends on ABI details and is incompatible with the\n                 // correct C ABI, so this is being kept around until wasm-bindgen\n                 // can be fixed to work with the correct ABI. See #63649 for further"}, {"sha": "521aea6dd7215159bd6b9a6e33e55af6192921f2", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=e7a056fe20f7ec5a475923ff2f4eda8ca9e1a74b", "patch": "@@ -1,6 +1,6 @@\n use crate::abi::{self, Abi, Align, FieldsShape, Size};\n use crate::abi::{HasDataLayout, LayoutOf, TyAndLayout, TyAndLayoutMethods};\n-use crate::spec::{self, HasTargetSpec};\n+use crate::spec::{self, HasTargetSpec, Target};\n \n mod aarch64;\n mod amdgpu;\n@@ -631,9 +631,10 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"nvptx64\" => nvptx64::compute_abi_info(self),\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" | \"riscv64\" => riscv::compute_abi_info(cx, self),\n-            \"wasm32\" => match cx.target_spec().os.as_str() {\n-                \"emscripten\" | \"wasi\" => wasm32::compute_abi_info(cx, self),\n-                _ => wasm32_bindgen_compat::compute_abi_info(self),\n+            \"wasm32\" => if use_wasm_bindgen_compat_abi(cx.target_spec()) {\n+                wasm32_bindgen_compat::compute_abi_info(self)\n+            } else {\n+                wasm32::compute_abi_info(cx, self)\n             },\n             \"asmjs\" => wasm32::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a)),\n@@ -642,3 +643,14 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n         Ok(())\n     }\n }\n+\n+pub fn use_wasm_bindgen_compat_abi(target_spec: &Target) -> bool {\n+    if target_spec.arch.as_str() == \"wasm32\" {\n+        match target_spec.os.as_str() {\n+            \"emscripten\" | \"wasi\" => false,\n+            _ => true,\n+        }\n+    } else {\n+        false\n+    }\n+}"}]}