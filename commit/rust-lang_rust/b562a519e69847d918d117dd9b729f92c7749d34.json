{"sha": "b562a519e69847d918d117dd9b729f92c7749d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NjJhNTE5ZTY5ODQ3ZDkxOGQxMTdkZDliNzI5ZjkyYzc3NDlkMzQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-21T08:40:13Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-21T10:14:18Z"}, "message": "Don't use use ty::TyKind::*", "tree": {"sha": "15328e6022210347695fa0b643fda71fe5b0340e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15328e6022210347695fa0b643fda71fe5b0340e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b562a519e69847d918d117dd9b729f92c7749d34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl5PrXoACgkQaTCGhp1Q\nZjd0PA/+KYT2q2JVoQzn9t528oNtTIOzQfjmhY3nLtzF3jYIFp0EcSbIpk2nz6na\nEgX/mfxjvnvgsM74rPH17AwQqNRWW5lb/uGwsLHjtkVf3g952JTfNf143OlX1V2W\n/6a0ZtMsOc8zPj0yIlzke2U9OCu7Kjjd3EjbILbIuUKbIdZISgngp7aBy1bBbToO\nDf0QH8t8GWiup/v7C8CphkLKFdWALdc2B9aR4p9UEsIPTGR+kfyiNmorRpBO8N5a\n0M3IdzLF2n4TqClRgk209obDGnub4WT38sCLdFzZlZe+RMJ4jIKrC8DVoqMOta/m\nKYvujeHb10kfcKAZcIyO9MpjeEJYIx+OP3sdsP+xiwvRTfBKzOjySaeDfzMeDw88\nhoAjL39pdQOfsAPtZVepQ/eKp2SvA4jeco3kqnjtIcoBlX1OhywfZ16Tr0jKPA32\n1HNHcUY0bJrKq93FbWQniUDKeNOGRCMp+a1Noc53e2ma6uZm786OIVJzGs8G8WUE\nEYLLFB+OHFh97OzqXrg/+J8kCwBTBJMNpuWaAKLWRoibsneaB/v2xQiC3SC72l3y\nn/JvoAcWw/ssZZkbSIWFbdZEb7YJfCh69XxY/8J6s198WsJvv81N51ZmoYkWVZjm\n0B8N1TJi3dZ50zLwwtPPAmL36F2pHwkD/N4c0UQUMbscPxjuovs=\n=h/a6\n-----END PGP SIGNATURE-----", "payload": "tree 15328e6022210347695fa0b643fda71fe5b0340e\nparent 8472ecda0f18a2b1045d4b8736e06e774ab1c73a\nauthor flip1995 <hello@philkrones.com> 1582274413 +0100\ncommitter flip1995 <hello@philkrones.com> 1582280058 +0100\n\nDon't use use ty::TyKind::*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b562a519e69847d918d117dd9b729f92c7749d34", "html_url": "https://github.com/rust-lang/rust/commit/b562a519e69847d918d117dd9b729f92c7749d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b562a519e69847d918d117dd9b729f92c7749d34/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8472ecda0f18a2b1045d4b8736e06e774ab1c73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8472ecda0f18a2b1045d4b8736e06e774ab1c73a", "html_url": "https://github.com/rust-lang/rust/commit/8472ecda0f18a2b1045d4b8736e06e774ab1c73a"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "620ec1f49510a04fbfa94ef9d9c9d0d078918b6a", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b562a519e69847d918d117dd9b729f92c7749d34/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562a519e69847d918d117dd9b729f92c7749d34/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=b562a519e69847d918d117dd9b729f92c7749d34", "patch": "@@ -497,18 +497,17 @@ fn is_mutable_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat<'_>, tys: &mut FxHash\n static KNOWN_WRAPPER_TYS: &[&[&str]] = &[&[\"alloc\", \"rc\", \"Rc\"], &[\"std\", \"sync\", \"Arc\"]];\n \n fn is_mutable_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Span, tys: &mut FxHashSet<DefId>) -> bool {\n-    use ty::TyKind::{Adt, Array, Bool, Char, Float, Int, RawPtr, Ref, Slice, Str, Tuple, Uint};\n     match ty.kind {\n         // primitive types are never mutable\n-        Bool | Char | Int(_) | Uint(_) | Float(_) | Str => false,\n-        Adt(ref adt, ref substs) => {\n+        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => false,\n+        ty::Adt(ref adt, ref substs) => {\n             tys.insert(adt.did) && !ty.is_freeze(cx.tcx, cx.param_env, span)\n                 || KNOWN_WRAPPER_TYS.iter().any(|path| match_def_path(cx, adt.did, path))\n                     && substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys))\n         },\n-        Tuple(ref substs) => substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys)),\n-        Array(ty, _) | Slice(ty) => is_mutable_ty(cx, ty, span, tys),\n-        RawPtr(ty::TypeAndMut { ty, mutbl }) | Ref(_, ty, mutbl) => {\n+        ty::Tuple(ref substs) => substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys)),\n+        ty::Array(ty, _) | ty::Slice(ty) => is_mutable_ty(cx, ty, span, tys),\n+        ty::RawPtr(ty::TypeAndMut { ty, mutbl }) | ty::Ref(_, ty, mutbl) => {\n             mutbl == hir::Mutability::Mut || is_mutable_ty(cx, ty, span, tys)\n         },\n         // calling something constitutes a side effect, so return true on all callables"}, {"sha": "708e3feef293b6273abdc393743a18f92840b276", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b562a519e69847d918d117dd9b729f92c7749d34/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b562a519e69847d918d117dd9b729f92c7749d34/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b562a519e69847d918d117dd9b729f92c7749d34", "patch": "@@ -1292,17 +1292,19 @@ pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n \n // Returns whether the type has #[must_use] attribute\n pub fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    use ty::TyKind::{Adt, Array, Dynamic, Foreign, Opaque, RawPtr, Ref, Slice, Tuple};\n     match ty.kind {\n-        Adt(ref adt, _) => must_use_attr(&cx.tcx.get_attrs(adt.did)).is_some(),\n-        Foreign(ref did) => must_use_attr(&cx.tcx.get_attrs(*did)).is_some(),\n-        Slice(ref ty) | Array(ref ty, _) | RawPtr(ty::TypeAndMut { ref ty, .. }) | Ref(_, ref ty, _) => {\n+        ty::Adt(ref adt, _) => must_use_attr(&cx.tcx.get_attrs(adt.did)).is_some(),\n+        ty::Foreign(ref did) => must_use_attr(&cx.tcx.get_attrs(*did)).is_some(),\n+        ty::Slice(ref ty)\n+        | ty::Array(ref ty, _)\n+        | ty::RawPtr(ty::TypeAndMut { ref ty, .. })\n+        | ty::Ref(_, ref ty, _) => {\n             // for the Array case we don't need to care for the len == 0 case\n             // because we don't want to lint functions returning empty arrays\n             is_must_use_ty(cx, *ty)\n         },\n-        Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n-        Opaque(ref def_id, _) => {\n+        ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n+        ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n                 if let ty::Predicate::Trait(ref poly_trait_predicate, _) = predicate {\n                     if must_use_attr(&cx.tcx.get_attrs(poly_trait_predicate.skip_binder().trait_ref.def_id)).is_some() {\n@@ -1312,7 +1314,7 @@ pub fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> boo\n             }\n             false\n         },\n-        Dynamic(binder, _) => {\n+        ty::Dynamic(binder, _) => {\n             for predicate in binder.skip_binder().iter() {\n                 if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n                     if must_use_attr(&cx.tcx.get_attrs(trait_ref.def_id)).is_some() {"}]}