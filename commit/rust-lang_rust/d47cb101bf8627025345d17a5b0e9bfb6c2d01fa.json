{"sha": "d47cb101bf8627025345d17a5b0e9bfb6c2d01fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0N2NiMTAxYmY4NjI3MDI1MzQ1ZDE3YTViMGU5YmZiNmMyZDAxZmE=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-08-30T23:39:56Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-31T14:11:06Z"}, "message": "Pretty print JSON: indentation and newlines", "tree": {"sha": "0cb5d311355fca134b24620b52e66f46cdfb4a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cb5d311355fca134b24620b52e66f46cdfb4a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d47cb101bf8627025345d17a5b0e9bfb6c2d01fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d47cb101bf8627025345d17a5b0e9bfb6c2d01fa", "html_url": "https://github.com/rust-lang/rust/commit/d47cb101bf8627025345d17a5b0e9bfb6c2d01fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d47cb101bf8627025345d17a5b0e9bfb6c2d01fa/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "536cb90a216a08870fbaac6aad93f77f0681537d", "url": "https://api.github.com/repos/rust-lang/rust/commits/536cb90a216a08870fbaac6aad93f77f0681537d", "html_url": "https://github.com/rust-lang/rust/commit/536cb90a216a08870fbaac6aad93f77f0681537d"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "5c70c1ff210c6b00f51fc087a99f45baa4ab8438", "filename": "src/libstd/json.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d47cb101bf8627025345d17a5b0e9bfb6c2d01fa/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d47cb101bf8627025345d17a5b0e9bfb6c2d01fa/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=d47cb101bf8627025345d17a5b0e9bfb6c2d01fa", "patch": "@@ -86,6 +86,69 @@ fn to_writer(wr: io::Writer, j: Json) {\n     }\n }\n \n+/// Serializes a json value into a io::writer\n+fn to_writer_pretty(wr: io::Writer, j: Json, indent: uint) {\n+    fn spaces(n: uint) -> ~str {\n+        let ss = ~\"\";\n+        n.times { str::push_str(ss, \" \"); }\n+        return ss;\n+    }\n+\n+    match j {\n+      Num(n) => wr.write_str(float::to_str(n, 6u)),\n+      String(s) => wr.write_str(escape_str(*s)),\n+      Boolean(b) => wr.write_str(if b { ~\"true\" } else { ~\"false\" }),\n+      List(v) => {\n+        // [\n+        wr.write_str(spaces(indent));\n+        wr.write_str(\"[ \");\n+\n+        // [ elem,\n+        //   elem,\n+        //   elem ]\n+        let inner_indent = indent + 2;\n+        let mut first = true;\n+        for (*v).each |item| {\n+            if !first {\n+                wr.write_str(~\",\\n\");\n+                wr.write_str(spaces(inner_indent));\n+            }\n+            first = false;\n+            to_writer_pretty(wr, item, inner_indent);\n+        };\n+\n+        // ]\n+        wr.write_str(~\" ]\");\n+      }\n+      Dict(d) => {\n+        // {\n+        wr.write_str(spaces(indent));\n+        wr.write_str(~\"{ \");\n+\n+        // { k: v,\n+        //   k: v,\n+        //   k: v }\n+        let inner_indent = indent + 2;\n+        let mut first = true;\n+        for d.each |key, value| {\n+            if !first {\n+                wr.write_str(~\",\\n\");\n+                wr.write_str(spaces(inner_indent));\n+            }\n+            first = false;\n+            let key = str::append(escape_str(key), ~\": \");\n+            let key_indent = str::len(key);\n+            wr.write_str(key);\n+            to_writer_pretty(wr, value, key_indent);\n+        };\n+\n+        // }\n+        wr.write_str(~\" }\");\n+      }\n+      Null => wr.write_str(~\"null\")\n+    }\n+}\n+\n fn escape_str(s: ~str) -> ~str {\n     let mut escaped = ~\"\\\"\";\n     do str::chars_iter(s) |c| {\n@@ -111,6 +174,11 @@ fn to_str(j: Json) -> ~str {\n     io::with_str_writer(|wr| to_writer(wr, j))\n }\n \n+/// Serializes a json value into a string, with whitespace and sorting\n+fn to_str_pretty(j: Json) -> ~str {\n+    io::with_str_writer(|wr| to_writer_pretty(wr, j, 0))\n+}\n+\n type Parser_ = {\n     rdr: io::Reader,\n     mut ch: char,"}]}