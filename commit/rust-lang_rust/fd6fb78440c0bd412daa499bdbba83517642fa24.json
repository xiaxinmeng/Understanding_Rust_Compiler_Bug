{"sha": "fd6fb78440c0bd412daa499bdbba83517642fa24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNmZiNzg0NDBjMGJkNDEyZGFhNDk5YmRiYmE4MzUxNzY0MmZhMjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-10T20:31:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-10T20:31:11Z"}, "message": "Merge #5299\n\n5299: Reload when new example/test/etc is added r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6177263fca1ddd26e001626313922ff6fbda6753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6177263fca1ddd26e001626313922ff6fbda6753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd6fb78440c0bd412daa499bdbba83517642fa24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCNAPCRBK7hj4Ov3rIwAAdHIIAJ58/37JTof1BCgCmss75eKl\n7TqdawJUIaqg1LSCduexXIMGdno/4sSTo+J6W3jelJ3HsdGm8dZDYXFNnuV0jfoV\nNU5DrsYwWVSz7VbISsSaqs3dCTTgbp0h6DFwq9iwEGBJkrXRF8xdO0gRQkJjNm2O\nkPob8RhXjMHShP/exA14eklXouptiEwZJ/Qn9/Y+sJrk/MlrzVZgGtciu5vF86Q6\ni8/XH2AELbgwWJQnn6twaRtvgWzO9P4lrpfMmd1y0s9qK3Nnx6t11+ogSfeX9Oix\nZ4bqu2sJ1VEFqNES1R8+Pn9H+DIeJS3YD7KmTvCnxExGhwpUyleW5maaTzXOCzk=\n=bJXK\n-----END PGP SIGNATURE-----\n", "payload": "tree 6177263fca1ddd26e001626313922ff6fbda6753\nparent c1eed627d909e897309b3d50654a592505654147\nparent a1ef6cc553bbd141d94144ccb8e1599fa3f76526\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594413071 +0000\ncommitter GitHub <noreply@github.com> 1594413071 +0000\n\nMerge #5299\n\n5299: Reload when new example/test/etc is added r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6fb78440c0bd412daa499bdbba83517642fa24", "html_url": "https://github.com/rust-lang/rust/commit/fd6fb78440c0bd412daa499bdbba83517642fa24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd6fb78440c0bd412daa499bdbba83517642fa24/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1eed627d909e897309b3d50654a592505654147", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eed627d909e897309b3d50654a592505654147", "html_url": "https://github.com/rust-lang/rust/commit/c1eed627d909e897309b3d50654a592505654147"}, {"sha": "a1ef6cc553bbd141d94144ccb8e1599fa3f76526", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ef6cc553bbd141d94144ccb8e1599fa3f76526", "html_url": "https://github.com/rust-lang/rust/commit/a1ef6cc553bbd141d94144ccb8e1599fa3f76526"}], "stats": {"total": 149, "additions": 107, "deletions": 42}, "files": [{"sha": "4182ca156d6b95b485052ac021f63f2f87f5d84e", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=fd6fb78440c0bd412daa499bdbba83517642fa24", "patch": "@@ -155,7 +155,7 @@ impl CargoWorkspace {\n         if let Some(target) = cargo_features.target.as_ref() {\n             meta.other_options(vec![String::from(\"--filter-platform\"), target.clone()]);\n         }\n-        let meta = meta.exec().with_context(|| {\n+        let mut meta = meta.exec().with_context(|| {\n             format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display())\n         })?;\n \n@@ -175,6 +175,7 @@ impl CargoWorkspace {\n \n         let ws_members = &meta.workspace_members;\n \n+        meta.packages.sort_by(|a, b| a.id.cmp(&b.id));\n         for meta_pkg in meta.packages {\n             let cargo_metadata::Package { id, edition, name, manifest_path, version, .. } =\n                 meta_pkg;\n@@ -210,7 +211,7 @@ impl CargoWorkspace {\n             }\n         }\n         let resolve = meta.resolve.expect(\"metadata executed with deps\");\n-        for node in resolve.nodes {\n+        for mut node in resolve.nodes {\n             let source = match pkg_by_id.get(&node.id) {\n                 Some(&src) => src,\n                 // FIXME: replace this and a similar branch below with `.unwrap`, once\n@@ -221,6 +222,7 @@ impl CargoWorkspace {\n                     continue;\n                 }\n             };\n+            node.deps.sort_by(|a, b| a.pkg.cmp(&b.pkg));\n             for dep_node in node.deps {\n                 let pkg = match pkg_by_id.get(&dep_node.pkg) {\n                     Some(&pkg) => pkg,"}, {"sha": "9a9a6547a973f3d68319efc47106d4f366456602", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=fd6fb78440c0bd412daa499bdbba83517642fa24", "patch": "@@ -26,6 +26,7 @@ use crate::{\n     to_proto::url_from_abs_path,\n     Result,\n };\n+use ra_prof::profile;\n \n #[derive(Eq, PartialEq, Copy, Clone)]\n pub(crate) enum Status {\n@@ -122,6 +123,10 @@ impl GlobalState {\n     }\n \n     pub(crate) fn process_changes(&mut self) -> bool {\n+        let _p = profile(\"GlobalState::process_changes\");\n+        let mut fs_changes = Vec::new();\n+        let mut has_fs_changes = false;\n+\n         let change = {\n             let mut change = AnalysisChange::new();\n             let (vfs, line_endings_map) = &mut *self.vfs.write();\n@@ -130,13 +135,14 @@ impl GlobalState {\n                 return false;\n             }\n \n-            let fs_op = changed_files.iter().any(|it| it.is_created_or_deleted());\n-            if fs_op {\n-                let roots = self.source_root_config.partition(&vfs);\n-                change.set_roots(roots)\n-            }\n-\n             for file in changed_files {\n+                if file.is_created_or_deleted() {\n+                    if let Some(path) = vfs.file_path(file.file_id).as_path() {\n+                        fs_changes.push((path.to_path_buf(), file.change_kind));\n+                        has_fs_changes = true;\n+                    }\n+                }\n+\n                 let text = if file.exists() {\n                     let bytes = vfs.file_contents(file.file_id).to_vec();\n                     match String::from_utf8(bytes).ok() {\n@@ -152,10 +158,15 @@ impl GlobalState {\n                 };\n                 change.change_file(file.file_id, text);\n             }\n+            if has_fs_changes {\n+                let roots = self.source_root_config.partition(&vfs);\n+                change.set_roots(roots);\n+            }\n             change\n         };\n \n         self.analysis_host.apply_change(change);\n+        self.maybe_refresh(&fs_changes);\n         true\n     }\n "}, {"sha": "702f25a19277ef9a7723b0198dd5b427190e15e2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=fd6fb78440c0bd412daa499bdbba83517642fa24", "patch": "@@ -22,6 +22,7 @@ use crate::{\n     Result,\n };\n use ra_project_model::ProjectWorkspace;\n+use vfs::ChangeKind;\n \n pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n     log::info!(\"initial config: {:#?}\", config);\n@@ -197,39 +198,49 @@ impl GlobalState {\n                 }\n                 self.analysis_host.maybe_collect_garbage();\n             }\n-            Event::Vfs(task) => match task {\n-                vfs::loader::Message::Loaded { files } => {\n-                    let vfs = &mut self.vfs.write().0;\n-                    for (path, contents) in files {\n-                        let path = VfsPath::from(path);\n-                        if !self.mem_docs.contains(&path) {\n-                            vfs.set_file_contents(path, contents)\n+            Event::Vfs(mut task) => {\n+                let _p = profile(\"GlobalState::handle_event/vfs\");\n+                loop {\n+                    match task {\n+                        vfs::loader::Message::Loaded { files } => {\n+                            let vfs = &mut self.vfs.write().0;\n+                            for (path, contents) in files {\n+                                let path = VfsPath::from(path);\n+                                if !self.mem_docs.contains(&path) {\n+                                    vfs.set_file_contents(path, contents)\n+                                }\n+                            }\n+                        }\n+                        vfs::loader::Message::Progress { n_total, n_done } => {\n+                            if n_total == 0 {\n+                                self.transition(Status::Invalid);\n+                            } else {\n+                                let state = if n_done == 0 {\n+                                    self.transition(Status::Loading);\n+                                    Progress::Begin\n+                                } else if n_done < n_total {\n+                                    Progress::Report\n+                                } else {\n+                                    assert_eq!(n_done, n_total);\n+                                    self.transition(Status::Ready);\n+                                    Progress::End\n+                                };\n+                                self.report_progress(\n+                                    \"roots scanned\",\n+                                    state,\n+                                    Some(format!(\"{}/{}\", n_done, n_total)),\n+                                    Some(Progress::percentage(n_done, n_total)),\n+                                )\n+                            }\n                         }\n                     }\n-                }\n-                vfs::loader::Message::Progress { n_total, n_done } => {\n-                    if n_total == 0 {\n-                        self.transition(Status::Invalid);\n-                    } else {\n-                        let state = if n_done == 0 {\n-                            self.transition(Status::Loading);\n-                            Progress::Begin\n-                        } else if n_done < n_total {\n-                            Progress::Report\n-                        } else {\n-                            assert_eq!(n_done, n_total);\n-                            self.transition(Status::Ready);\n-                            Progress::End\n-                        };\n-                        self.report_progress(\n-                            \"roots scanned\",\n-                            state,\n-                            Some(format!(\"{}/{}\", n_done, n_total)),\n-                            Some(Progress::percentage(n_done, n_total)),\n-                        )\n+                    // Coalesce many VFS event into a single loop turn\n+                    task = match self.loader.receiver.try_recv() {\n+                        Ok(task) => task,\n+                        Err(_) => break,\n                     }\n                 }\n-            },\n+            }\n             Event::Flycheck(task) => match task {\n                 flycheck::Message::AddDiagnostic { workspace_root, diagnostic } => {\n                     let diagnostics = crate::diagnostics::to_proto::map_rust_diagnostic_to_lsp(\n@@ -428,7 +439,9 @@ impl GlobalState {\n                 if let Some(flycheck) = &this.flycheck {\n                     flycheck.handle.update();\n                 }\n-                this.maybe_refresh(params.text_document.uri.as_str());\n+                if let Ok(abs_path) = from_proto::abs_path(&params.text_document.uri) {\n+                    this.maybe_refresh(&[(abs_path, ChangeKind::Modify)]);\n+                }\n                 Ok(())\n             })?\n             .on::<lsp_types::notification::DidChangeConfiguration>(|this, _params| {"}, {"sha": "ffe234a5bc5695828d8f96e5a749e4bfd79010e4", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=fd6fb78440c0bd412daa499bdbba83517642fa24", "patch": "@@ -6,17 +6,19 @@ use flycheck::FlycheckHandle;\n use ra_db::{CrateGraph, SourceRoot, VfsPath};\n use ra_ide::AnalysisChange;\n use ra_project_model::{PackageRoot, ProcMacroClient, ProjectWorkspace};\n-use vfs::{file_set::FileSetConfig, AbsPath};\n+use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n use crate::{\n     config::{Config, FilesWatcher, LinkedProject},\n     global_state::{GlobalState, Handle, Status},\n     lsp_ext,\n     main_loop::Task,\n };\n+use ra_prof::profile;\n \n impl GlobalState {\n     pub(crate) fn update_configuration(&mut self, config: Config) {\n+        let _p = profile(\"GlobalState::update_configuration\");\n         let old_config = mem::replace(&mut self.config, config);\n         if self.config.lru_capacity != old_config.lru_capacity {\n             self.analysis_host.update_lru_capacity(old_config.lru_capacity);\n@@ -27,8 +29,8 @@ impl GlobalState {\n             self.reload_flycheck();\n         }\n     }\n-    pub(crate) fn maybe_refresh(&mut self, saved_doc_url: &str) {\n-        if !(saved_doc_url.ends_with(\"Cargo.toml\") || saved_doc_url.ends_with(\"Cargo.lock\")) {\n+    pub(crate) fn maybe_refresh(&mut self, changes: &[(AbsPathBuf, ChangeKind)]) {\n+        if !changes.iter().any(|(path, kind)| is_interesting(path, *kind)) {\n             return;\n         }\n         match self.status {\n@@ -40,6 +42,41 @@ impl GlobalState {\n         } else {\n             self.transition(Status::NeedsReload);\n         }\n+\n+        fn is_interesting(path: &AbsPath, change_kind: ChangeKind) -> bool {\n+            const IMPLICIT_TARGET_FILES: &[&str] = &[\"build.rs\", \"src/main.rs\", \"src/lib.rs\"];\n+            const IMPLICIT_TARGET_DIRS: &[&str] = &[\"src/bin\", \"examples\", \"tests\", \"benches\"];\n+\n+            if path.ends_with(\"Cargo.toml\") || path.ends_with(\"Cargo.lock\") {\n+                return true;\n+            }\n+            if change_kind == ChangeKind::Modify {\n+                return false;\n+            }\n+            if path.extension().map(|it| it.to_str()) != Some(\"rs\".into()) {\n+                return false;\n+            }\n+            if IMPLICIT_TARGET_FILES.iter().any(|it| path.ends_with(it)) {\n+                return true;\n+            }\n+            let parent = match path.parent() {\n+                Some(it) => it,\n+                None => return false,\n+            };\n+            if IMPLICIT_TARGET_DIRS.iter().any(|it| parent.ends_with(it)) {\n+                return true;\n+            }\n+            if path.ends_with(\"main.rs\") {\n+                let grand_parent = match parent.parent() {\n+                    Some(it) => it,\n+                    None => return false,\n+                };\n+                if IMPLICIT_TARGET_DIRS.iter().any(|it| grand_parent.ends_with(it)) {\n+                    return true;\n+                }\n+            }\n+            false\n+        }\n     }\n     pub(crate) fn transition(&mut self, new_status: Status) {\n         self.status = new_status;\n@@ -79,6 +116,7 @@ impl GlobalState {\n         });\n     }\n     pub(crate) fn switch_workspaces(&mut self, workspaces: Vec<anyhow::Result<ProjectWorkspace>>) {\n+        let _p = profile(\"GlobalState::switch_workspaces\");\n         log::info!(\"reloading projects: {:?}\", self.config.linked_projects);\n \n         let mut has_errors = false;\n@@ -267,6 +305,7 @@ pub(crate) struct SourceRootConfig {\n \n impl SourceRootConfig {\n     pub(crate) fn partition(&self, vfs: &vfs::Vfs) -> Vec<SourceRoot> {\n+        let _p = profile(\"SourceRootConfig::partition\");\n         self.fsc\n             .partition(vfs)\n             .into_iter()"}, {"sha": "3bfecd08fbb2619b534e520e87f8c207d7d9e539", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd6fb78440c0bd412daa499bdbba83517642fa24/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=fd6fb78440c0bd412daa499bdbba83517642fa24", "patch": "@@ -70,7 +70,7 @@ impl ChangedFile {\n     }\n }\n \n-#[derive(Eq, PartialEq)]\n+#[derive(Eq, PartialEq, Copy, Clone, Debug)]\n pub enum ChangeKind {\n     Create,\n     Modify,"}]}