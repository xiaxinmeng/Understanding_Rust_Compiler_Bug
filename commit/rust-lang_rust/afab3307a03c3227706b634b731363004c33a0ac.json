{"sha": "afab3307a03c3227706b634b731363004c33a0ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYWIzMzA3YTAzYzMyMjc3MDZiNjM0YjczMTM2MzAwNGMzM2EwYWM=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-10-03T20:59:34Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-10-29T16:09:20Z"}, "message": "C-like enums are not always immediate", "tree": {"sha": "868942c8a218a2abb76de0dec15bf4929111c0cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/868942c8a218a2abb76de0dec15bf4929111c0cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afab3307a03c3227706b634b731363004c33a0ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afab3307a03c3227706b634b731363004c33a0ac", "html_url": "https://github.com/rust-lang/rust/commit/afab3307a03c3227706b634b731363004c33a0ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afab3307a03c3227706b634b731363004c33a0ac/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "html_url": "https://github.com/rust-lang/rust/commit/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "9a019f98a493c5857f9ad3029cbb64483dd2e1aa", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afab3307a03c3227706b634b731363004c33a0ac/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3307a03c3227706b634b731363004c33a0ac/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=afab3307a03c3227706b634b731363004c33a0ac", "patch": "@@ -1726,9 +1726,14 @@ fn trans_imm_cast(bcx: @mut Block, expr: &ast::Expr,\n             (cast_enum, cast_float) => {\n                 let bcx = bcx;\n                 let repr = adt::represent_type(ccx, t_in);\n-                let slot = Alloca(bcx, ll_t_in, \"\");\n-                Store(bcx, llexpr, slot);\n-                let lldiscrim_a = adt::trans_get_discr(bcx, repr, slot, Some(Type::i64()));\n+                let llexpr_ptr;\n+                if type_is_immediate(ccx, t_in) {\n+                    llexpr_ptr = Alloca(bcx, ll_t_in, \"\");\n+                    Store(bcx, llexpr, llexpr_ptr);\n+                } else {\n+                    llexpr_ptr = llexpr;\n+                }\n+                let lldiscrim_a = adt::trans_get_discr(bcx, repr, llexpr_ptr, Some(Type::i64()));\n                 match k_out {\n                     cast_integral => int_cast(bcx, ll_t_out,\n                                               val_ty(lldiscrim_a),"}]}