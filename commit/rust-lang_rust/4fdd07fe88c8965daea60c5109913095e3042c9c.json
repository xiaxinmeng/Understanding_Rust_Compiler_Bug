{"sha": "4fdd07fe88c8965daea60c5109913095e3042c9c", "node_id": "C_kwDOAAsO6NoAKDRmZGQwN2ZlODhjODk2NWRhZWE2MGM1MTA5OTEzMDk1ZTMwNDJjOWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-13T13:33:39Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-06-16T16:16:41Z"}, "message": "Merge the orphan logic for all alias kinds", "tree": {"sha": "33b101e33af1a505bb4f2351bbae25c0c3dd03fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b101e33af1a505bb4f2351bbae25c0c3dd03fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fdd07fe88c8965daea60c5109913095e3042c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdd07fe88c8965daea60c5109913095e3042c9c", "html_url": "https://github.com/rust-lang/rust/commit/4fdd07fe88c8965daea60c5109913095e3042c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fdd07fe88c8965daea60c5109913095e3042c9c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2304917aad2f18ee9a1c6969e1197c96dee907b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2304917aad2f18ee9a1c6969e1197c96dee907b6", "html_url": "https://github.com/rust-lang/rust/commit/2304917aad2f18ee9a1c6969e1197c96dee907b6"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "c270bebd67891fd65dbbb0f0dcbafa2e8c874ad2", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4fdd07fe88c8965daea60c5109913095e3042c9c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fdd07fe88c8965daea60c5109913095e3042c9c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=4fdd07fe88c8965daea60c5109913095e3042c9c", "patch": "@@ -200,35 +200,29 @@ fn do_orphan_check_impl<'tcx>(\n                 NonlocalImpl::DisallowOther,\n             ),\n \n-            // trait Id { type This: ?Sized; }\n-            // impl<T: ?Sized> Id for T {\n-            //     type This = T;\n-            // }\n-            // impl<T: ?Sized> AutoTrait for <T as Id>::This {}\n-            ty::Alias(AliasKind::Projection, _) => (\n-                LocalImpl::Disallow { problematic_kind: \"associated type\" },\n-                NonlocalImpl::DisallowOther,\n-            ),\n-\n-            // ```\n-            // struct S<T>(T);\n-            // impl<T: ?Sized> S<T> {\n-            //     type This = T;\n-            // }\n-            // impl<T: ?Sized> AutoTrait for S<T>::This {}\n-            // ```\n-            // FIXME(inherent_associated_types): The example code above currently leads to a cycle\n-            ty::Alias(AliasKind::Inherent, _) => (\n-                LocalImpl::Disallow { problematic_kind: \"associated type\" },\n-                NonlocalImpl::DisallowOther,\n-            ),\n-\n-            // type Opaque = impl Trait;\n-            // impl AutoTrait for Opaque {}\n-            ty::Alias(AliasKind::Opaque, _) => (\n-                LocalImpl::Disallow { problematic_kind: \"opaque type\" },\n-                NonlocalImpl::DisallowOther,\n-            ),\n+            ty::Alias(kind, _) => {\n+                let problematic_kind = match kind {\n+                    // trait Id { type This: ?Sized; }\n+                    // impl<T: ?Sized> Id for T {\n+                    //     type This = T;\n+                    // }\n+                    // impl<T: ?Sized> AutoTrait for <T as Id>::This {}\n+                    AliasKind::Projection => \"associated type\",\n+                    // type Opaque = impl Trait;\n+                    // impl AutoTrait for Opaque {}\n+                    AliasKind::Opaque => \"opaque type\",\n+                    // ```\n+                    // struct S<T>(T);\n+                    // impl<T: ?Sized> S<T> {\n+                    //     type This = T;\n+                    // }\n+                    // impl<T: ?Sized> AutoTrait for S<T>::This {}\n+                    // ```\n+                    // FIXME(inherent_associated_types): The example code above currently leads to a cycle\n+                    AliasKind::Inherent => \"associated type\",\n+                };\n+                (LocalImpl::Disallow { problematic_kind }, NonlocalImpl::DisallowOther)\n+            }\n \n             ty::Bool\n             | ty::Char"}]}