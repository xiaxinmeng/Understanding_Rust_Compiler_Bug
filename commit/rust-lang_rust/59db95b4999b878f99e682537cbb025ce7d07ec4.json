{"sha": "59db95b4999b878f99e682537cbb025ce7d07ec4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZGI5NWI0OTk5Yjg3OGY5OWU2ODI1MzdjYmIwMjVjZTdkMDdlYzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-06-02T00:41:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-06-22T02:54:28Z"}, "message": "Convert makefiles to build LLVM/compiler-rt with CMake", "tree": {"sha": "9e814881750ef57a34e455c8e4c1ae6200d44a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e814881750ef57a34e455c8e4c1ae6200d44a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59db95b4999b878f99e682537cbb025ce7d07ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59db95b4999b878f99e682537cbb025ce7d07ec4", "html_url": "https://github.com/rust-lang/rust/commit/59db95b4999b878f99e682537cbb025ce7d07ec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59db95b4999b878f99e682537cbb025ce7d07ec4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe96928d7de991e527a7ed7b88bb30aa965c8a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe96928d7de991e527a7ed7b88bb30aa965c8a08", "html_url": "https://github.com/rust-lang/rust/commit/fe96928d7de991e527a7ed7b88bb30aa965c8a08"}], "stats": {"total": 518, "additions": 278, "deletions": 240}, "files": [{"sha": "69bb3c5e874c0b1ced4349c124704bfedd7bb2a1", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59db95b4999b878f99e682537cbb025ce7d07ec4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/59db95b4999b878f99e682537cbb025ce7d07ec4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=59db95b4999b878f99e682537cbb025ce7d07ec4", "patch": "@@ -19,6 +19,7 @@ Read [\"Installing Rust\"] from [The Book].\n    * `g++` 4.7 or later or `clang++` 3.x\n    * `python` 2.7 (but not 3.x)\n    * GNU `make` 3.81 or later\n+   * `cmake` 2.8.8 or later\n    * `curl`\n    * `git`\n "}, {"sha": "bccd91baf581b665dfdfe456fbfb35ad7e43083f", "filename": "configure", "status": "modified", "additions": 153, "deletions": 173, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/59db95b4999b878f99e682537cbb025ce7d07ec4/configure", "raw_url": "https://github.com/rust-lang/rust/raw/59db95b4999b878f99e682537cbb025ce7d07ec4/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=59db95b4999b878f99e682537cbb025ce7d07ec4", "patch": "@@ -775,6 +775,9 @@ probe CFG_BISON            bison\n probe CFG_GDB              gdb\n probe CFG_LLDB             lldb\n \n+# For building LLVM\n+probe_need CFG_CMAKE cmake\n+\n # On MacOS X, invoking `javac` pops up a dialog if the JDK is not\n # installed. Since `javac` is only used if `antlr4` is available,\n # probe for it only in this case.\n@@ -1233,9 +1236,6 @@ $ pacman -R python2 && pacman -S mingw-w64-x86_64-python2\n \"\n             fi\n \n-            # MSVC requires cmake because that's how we're going to build LLVM\n-            probe_need CFG_CMAKE cmake\n-\n             # There are three builds of cmake on windows: MSVC, MinGW and Cygwin\n             # The Cygwin build does not have generators for Visual Studio, so\n             # detect that here and error.\n@@ -1508,27 +1508,16 @@ do\n     elif [ -z $CFG_LLVM_ROOT ]\n     then\n         LLVM_BUILD_DIR=${CFG_BUILD_DIR}$t/llvm\n-        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n-        then\n-            LLVM_DBG_OPTS=\"--enable-debug-symbols --disable-optimized\"\n-            # Just use LLVM straight from its build directory to\n-            # avoid 'make install' time\n-            LLVM_INST_DIR=$LLVM_BUILD_DIR/Debug\n-        else\n-            LLVM_DBG_OPTS=\"--enable-optimized\"\n-            LLVM_INST_DIR=$LLVM_BUILD_DIR/Release\n-        fi\n-        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-        then\n-            LLVM_ASSERTION_OPTS=\"--disable-assertions\"\n-        else\n-            LLVM_ASSERTION_OPTS=\"--enable-assertions\"\n-\n-            # Apparently even if we request assertions be enabled for MSVC,\n-            # LLVM's CMake build system ignore this and outputs in `Release`\n-            # anyway.\n-            if [ ${is_msvc} -eq 0 ]; then\n-                LLVM_INST_DIR=${LLVM_INST_DIR}+Asserts\n+        LLVM_INST_DIR=$LLVM_BUILD_DIR\n+        # For some crazy reason the MSVC output dir is different than Unix\n+        if [ ${is_msvc} -ne 0 ]; then\n+            if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n+            then\n+                # Just use LLVM straight from its build directory to\n+                # avoid 'make install' time\n+                LLVM_INST_DIR=$LLVM_BUILD_DIR/Debug\n+            else\n+                LLVM_INST_DIR=$LLVM_BUILD_DIR/Release\n             fi\n         fi\n     else\n@@ -1586,96 +1575,68 @@ do\n                 err \"can only build LLVM for x86 platforms\"\n                 ;;\n         esac\n-        CFG_CMAKE_GENERATOR=$generator\n-        putvar CFG_CMAKE_GENERATOR\n-    fi\n-\n-    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n-    then\n-        msg \"configuring LLVM for $t with cmake\"\n-\n-        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n-        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n-        fi\n-        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-        then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n-        fi\n-\n-        msg \"configuring LLVM with:\"\n-        msg \"$CMAKE_ARGS\"\n-\n-        (cd $LLVM_BUILD_DIR && \"$CFG_CMAKE\" $CFG_LLVM_SRC_DIR \\\n-                                            -G \"$CFG_CMAKE_GENERATOR\" \\\n-                                            $CMAKE_ARGS)\n-        need_ok \"LLVM cmake configure failed\"\n+    else\n+        generator=\"Unix Makefiles\"\n     fi\n-\n-    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -eq 0 ]\n-    then\n-        # LLVM's configure doesn't recognize the new Windows triples yet\n-        gnu_t=$(to_gnu_triple $t)\n-\n-        msg \"configuring LLVM for $gnu_t\"\n-\n-        LLVM_TARGETS=\"--enable-targets=x86,x86_64,arm,aarch64,mips,powerpc\"\n-        LLVM_BUILD=\"--build=$gnu_t\"\n-        LLVM_HOST=\"--host=$gnu_t\"\n-        LLVM_TARGET=\"--target=$gnu_t\"\n-\n-        # Disable unused LLVM features\n-        LLVM_OPTS=\"$LLVM_DBG_OPTS $LLVM_ASSERTION_OPTS --disable-docs --enable-bindings=none\"\n-        # Disable term-info, linkage of which comes in multiple forms,\n-        # making our snapshots incompatible (#9334)\n-        LLVM_OPTS=\"$LLVM_OPTS --disable-terminfo\"\n-        # Try to have LLVM pull in as few dependencies as possible (#9397)\n-        LLVM_OPTS=\"$LLVM_OPTS --disable-zlib --disable-libffi\"\n-\n-        # Use win32 native thread/lock apis instead of pthread wrapper.\n-        # (llvm's configure tries to find pthread first, so we have to disable it explicitly.)\n-        # Also note that pthreads works badly on mingw-w64 systems: #8996\n-        case \"$CFG_BUILD\" in\n-            (*-windows-gnu)\n-            LLVM_OPTS=\"$LLVM_OPTS --disable-pthreads\"\n-            ;;\n-        esac\n-\n-        case \"$CFG_CC\" in\n-            (\"ccache clang\")\n-            LLVM_CXX_32=\"ccache clang++ -Qunused-arguments\"\n-            LLVM_CC_32=\"ccache clang -Qunused-arguments\"\n-\n-            LLVM_CXX_64=\"ccache clang++ -Qunused-arguments\"\n-            LLVM_CC_64=\"ccache clang -Qunused-arguments\"\n+    CFG_CMAKE_GENERATOR=$generator\n+    putvar CFG_CMAKE_GENERATOR\n+\n+    msg \"configuring LLVM for $t\"\n+\n+    LLVM_CFLAGS_32=\"\"\n+    LLVM_CXXFLAGS_32=\"\"\n+    LLVM_LDFLAGS_32=\"\"\n+    LLVM_CFLAGS_64=\"\"\n+    LLVM_CXXFLAGS_64=\"\"\n+    LLVM_LDFLAGS_64=\"\"\n+\n+    case \"$CFG_CC\" in\n+        (\"ccache clang\")\n+            LLVM_CXX_32=\"ccache\"\n+            LLVM_CC_32=\"ccache\"\n+            LLVM_CXX_32_ARG1=\"clang++\"\n+            LLVM_CC_32_ARG1=\"clang\"\n+            LLVM_CFLAGS_32=\"-Qunused-arguments\"\n+            LLVM_CXXFLAGS_32=\"-Qunused-arguments\"\n+\n+            LLVM_CXX_64=\"ccache\"\n+            LLVM_CC_64=\"ccache\"\n+            LLVM_CXX_64_ARG1=\"clang++\"\n+            LLVM_CC_64_ARG1=\"clang\"\n+            LLVM_CFLAGS_64=\"-Qunused-arguments\"\n+            LLVM_CXXFLAGS_64=\"-Qunused-arguments\"\n             ;;\n-            (\"clang\")\n-            LLVM_CXX_32=\"clang++ -Qunused-arguments\"\n-            LLVM_CC_32=\"clang -Qunused-arguments\"\n-\n-            LLVM_CXX_64=\"clang++ -Qunused-arguments\"\n-            LLVM_CC_64=\"clang -Qunused-arguments\"\n+        (\"clang\")\n+            LLVM_CXX_32=\"clang++\"\n+            LLVM_CC_32=\"clang\"\n+            LLVM_CFLAGS_32=\"-Qunused-arguments\"\n+            LLVM_CXXFLAGS_32=\"-Qunused-arguments\"\n+\n+            LLVM_CXX_64=\"clang++\"\n+            LLVM_CC_64=\"clang\"\n+            LLVM_CFLAGS_64=\"-Qunused-arguments\"\n+            LLVM_CXXFLAGS_64=\"-Qunused-arguments\"\n             ;;\n-            (\"ccache gcc\")\n-            LLVM_CXX_32=\"ccache g++\"\n-            LLVM_CC_32=\"ccache gcc\"\n-\n-            LLVM_CXX_64=\"ccache g++\"\n-            LLVM_CC_64=\"ccache gcc\"\n+        (\"ccache gcc\")\n+            LLVM_CXX_32=\"ccache\"\n+            LLVM_CC_32=\"ccache\"\n+            LLVM_CXX_32_ARG1=\"clang++\"\n+            LLVM_CC_32_ARG1=\"clang\"\n+\n+            LLVM_CXX_64=\"ccache\"\n+            LLVM_CC_64=\"ccache\"\n+            LLVM_CXX_64_ARG1=\"g++\"\n+            LLVM_CC_64_ARG1=\"gcc\"\n             ;;\n-            (\"gcc\")\n+        (\"gcc\")\n             LLVM_CXX_32=\"g++\"\n             LLVM_CC_32=\"gcc\"\n \n             LLVM_CXX_64=\"g++\"\n             LLVM_CC_64=\"gcc\"\n             ;;\n \n-            (*)\n+        (*)\n             msg \"inferring LLVM_CXX/CC from CXX/CC = $CXX/$CC\"\n             if [ -n \"$CFG_ENABLE_CCACHE\" ]\n             then\n@@ -1684,11 +1645,15 @@ do\n                     err \"ccache requested but not found\"\n                 fi\n \n-                LLVM_CXX_32=\"ccache $CXX\"\n-                LLVM_CC_32=\"ccache $CC\"\n+                LLVM_CXX_32=\"ccache\"\n+                LLVM_CC_32=\"ccache\"\n+                LLVM_CXX_32_ARG1=\"$CXX\"\n+                LLVM_CC_32_ARG1=\"$CC\"\n \n-                LLVM_CXX_64=\"ccache $CXX\"\n-                LLVM_CC_64=\"ccache $CC\"\n+                LLVM_CXX_64=\"ccache\"\n+                LLVM_CC_64=\"ccache\"\n+                LLVM_CXX_64_ARG1=\"$CXX\"\n+                LLVM_CC_64_ARG1=\"$CC\"\n             else\n                 LLVM_CXX_32=\"$CXX\"\n                 LLVM_CC_32=\"$CC\"\n@@ -1698,86 +1663,101 @@ do\n             fi\n \n             ;;\n-        esac\n+    esac\n \n-        case \"$CFG_CPUTYPE\" in\n-            (x86*)\n-                LLVM_CXX_32=\"$LLVM_CXX_32 -m32\"\n-                LLVM_CC_32=\"$LLVM_CC_32 -m32\"\n+    case \"$CFG_CPUTYPE\" in\n+        (x86*)\n+            LLVM_CFLAGS_32=\"$LLVM_CFLAGS_32 -m32\"\n+            LLVM_CXXFLAGS_32=\"$LLVM_CXXFLAGS_32 -m32\"\n+            LLVM_LDFLAGS_32=\"$LLVM_LDFLAGS_32 -m32\"\n+            ;;\n+    esac\n \n-                LLVM_CFLAGS_32=\"-m32\"\n-                LLVM_CXXFLAGS_32=\"-m32\"\n-                LLVM_LDFLAGS_32=\"-m32\"\n+    if echo $t | grep -q x86_64\n+    then\n+        LLVM_CXX=$LLVM_CXX_64\n+        LLVM_CC=$LLVM_CC_64\n+        LLVM_CXX_ARG1=$LLVM_CXX_64_ARG1\n+        LLVM_CC_ARG1=$LLVM_CC_64_ARG1\n+        LLVM_CFLAGS=$LLVM_CFLAGS_64\n+        LLVM_CXXFLAGS=$LLVM_CXXFLAGS_64\n+        LLVM_LDFLAGS=$LLVM_LDFLAGS_64\n+    else\n+        LLVM_CXX=$LLVM_CXX_32\n+        LLVM_CC=$LLVM_CC_32\n+        LLVM_CXX_ARG1=$LLVM_CXX_32_ARG1\n+        LLVM_CC_ARG1=$LLVM_CC_32_ARG1\n+        LLVM_CFLAGS=$LLVM_CFLAGS_32\n+        LLVM_CXXFLAGS=$LLVM_CXXFLAGS_32\n+        LLVM_LDFLAGS=$LLVM_LDFLAGS_32\n+    fi\n \n-                LLVM_CFLAGS_64=\"\"\n-                LLVM_CXXFLAGS_64=\"\"\n-                LLVM_LDFLAGS_64=\"\"\n+    if [ \"$CFG_USING_LIBCPP\" != \"0\" ]; then\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_LIBCXX=ON\"\n+    fi\n \n-                LLVM_CXX_32=\"$LLVM_CXX_32 -m32\"\n-                LLVM_CC_32=\"$LLVM_CC_32 -m32\"\n-                ;;\n+    # Turn off things we don't need\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_TESTS=OFF\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_EXAMPLES=OFF\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_DOCS=OFF\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ZLIB=OFF\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DWITH_POLY=OFF\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_TERMINFO=OFF\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_LIBEDIT=OFF\"\n \n-            (*)\n-                LLVM_CFLAGS_32=\"\"\n-                LLVM_CXXFLAGS_32=\"\"\n-                LLVM_LDFLAGS_32=\"\"\n+    arch=\"$(echo \"$t\" | cut -d - -f 1)\"\n \n-                LLVM_CFLAGS_64=\"\"\n-                LLVM_CXXFLAGS_64=\"\"\n-                LLVM_LDFLAGS_64=\"\"\n-                ;;\n-        esac\n+    if [ \"$arch\" = i686 ]; then\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_BUILD_32_BITS=ON\"\n+    fi\n \n-        if echo $t | grep -q x86_64\n-        then\n-            LLVM_CXX=$LLVM_CXX_64\n-            LLVM_CC=$LLVM_CC_64\n-            LLVM_CFLAGS=$LLVM_CFLAGS_64\n-            LLVM_CXXFLAGS=$LLVM_CXXFLAGS_64\n-            LLVM_LDFLAGS=$LLVM_LDFLAGS_64\n-        else\n-            LLVM_CXX=$LLVM_CXX_32\n-            LLVM_CC=$LLVM_CC_32\n-            LLVM_CFLAGS=$LLVM_CFLAGS_32\n-            LLVM_CXXFLAGS=$LLVM_CXXFLAGS_32\n-            LLVM_LDFLAGS=$LLVM_LDFLAGS_32\n+    if [ \"$t\" != \"$CFG_BUILD\" ]; then\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CROSSCOMPILING=True\"\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGET_ARCH=$arch\"\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TABLEGEN=$LLVM_INST_DIR/bin/llvm-tablegen\"\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_DEFAULT_TARGET_TRIPLE=$t\"\n+    fi\n+\n+    # MSVC handles compiler business itself\n+    if [ ${is_msvc} -eq 0 ]; then\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_C_COMPILER=$LLVM_CC\"\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CXX_COMPILER=$LLVM_CXX\"\n+        CMAKE_ARGS=\"$CMAKE_ARGS '-DCMAKE_C_FLAGS=$LLVM_CFLAGS'\"\n+        CMAKE_ARGS=\"$CMAKE_ARGS '-DCMAKE_CXX_FLAGS=$LLVM_CXXFLAGS'\"\n+        if [ -n \"$LLVM_CC_ARG1\" ]; then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_C_COMPILER_ARG1=$LLVM_CC_ARG1\"\n         fi\n+        if [ -n \"$LLVM_CXX_ARG1\" ]; then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CXX_COMPILER_ARG1=$LLVM_CXX_ARG1\"\n+        fi\n+        # FIXME: What about LDFLAGS?\n+    fi\n \n-        CXX=$LLVM_CXX\n-        CC=$LLVM_CC\n-        CFLAGS=\"$CFLAGS $LLVM_CFLAGS\"\n-        CXXFLAGS=\"$CXXFLAGS $LLVM_CXXFLAGS\"\n-        LDFLAGS=\"$LDFLAGS $LLVM_LDFLAGS\"\n+    if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n+    else\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n+    fi\n+    if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n+    then\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n+    else\n+        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n+    fi\n \n-        if [ \"$CFG_USING_LIBCPP\" != \"0\" ]; then\n-            LLVM_OPTS=\"$LLVM_OPTS --enable-libcpp\"\n-        fi\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;Mips;PowerPC'\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -G '$CFG_CMAKE_GENERATOR'\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS $CFG_LLVM_SRC_DIR\"\n \n-        LLVM_FLAGS=\"$LLVM_TARGETS $LLVM_OPTS $LLVM_BUILD \\\n-                        $LLVM_HOST $LLVM_TARGET --with-python=$CFG_PYTHON\"\n+    if [ ${do_reconfigure} -ne 0 ]\n+    then\n+        msg \"configuring LLVM for $t with cmake\"\n \n         msg \"configuring LLVM with:\"\n-        msg \"$LLVM_FLAGS\"\n-\n-        export CXX\n-        export CC\n-        export CFLAGS\n-        export CXXFLAGS\n-        export LDFLAGS\n-\n-        cd $LLVM_BUILD_DIR\n-        case $CFG_SRC_DIR in\n-            /* | [a-z]:* | [A-Z]:*)\n-                ${CFG_LLVM_SRC_DIR}configure $LLVM_FLAGS\n-                ;;\n-            *)\n-                ${CFG_BUILD_DIR}${CFG_LLVM_SRC_DIR}configure \\\n-                    $LLVM_FLAGS\n-                ;;\n-        esac\n-        need_ok \"LLVM configure failed\"\n+        msg \"$CMAKE_ARGS\"\n \n-        cd $CFG_BUILD_DIR\n+        (cd $LLVM_BUILD_DIR && eval \"$CFG_CMAKE\" $CMAKE_ARGS)\n+        need_ok \"LLVM cmake configure failed\"\n     fi\n \n     # Construct variables for LLVM build and install directories for"}, {"sha": "c1cd20a843cec5e2233296dc865acc612c309c2a", "filename": "mk/cfg/i686-unknown-linux-musl.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59db95b4999b878f99e682537cbb025ce7d07ec4/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/59db95b4999b878f99e682537cbb025ce7d07ec4/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-musl.mk?ref=59db95b4999b878f99e682537cbb025ce7d07ec4", "patch": "@@ -1,6 +1,6 @@\n # i686-unknown-linux-musl configuration\n CC_i686-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc\n-CXX_i686-unknown-linux-musl=notaprogram\n+CXX_i686-unknown-linux-musl=$(CXX)\n CPP_i686-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc -E\n AR_i686-unknown-linux-musl=$(AR)\n CFG_INSTALL_ONLY_RLIB_i686-unknown-linux-musl = 1"}, {"sha": "dfe9de18f57878b4db44b7be3e87b75c083b757f", "filename": "mk/cfg/x86_64-unknown-linux-musl.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59db95b4999b878f99e682537cbb025ce7d07ec4/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/59db95b4999b878f99e682537cbb025ce7d07ec4/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk?ref=59db95b4999b878f99e682537cbb025ce7d07ec4", "patch": "@@ -1,6 +1,6 @@\n # x86_64-unknown-linux-musl configuration\n CC_x86_64-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc\n-CXX_x86_64-unknown-linux-musl=notaprogram\n+CXX_x86_64-unknown-linux-musl=$(CXX)\n CPP_x86_64-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc -E\n AR_x86_64-unknown-linux-musl=$(AR)\n CFG_INSTALL_ONLY_RLIB_x86_64-unknown-linux-musl = 1"}, {"sha": "cc868a49e4b02201dee9b761d6672f74d9b0f5aa", "filename": "mk/llvm.mk", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59db95b4999b878f99e682537cbb025ce7d07ec4/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/59db95b4999b878f99e682537cbb025ce7d07ec4/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=59db95b4999b878f99e682537cbb025ce7d07ec4", "patch": "@@ -32,27 +32,17 @@ ifeq ($(CFG_LLVM_ROOT),)\n \n LLVM_STAMP_$(1) = $$(CFG_LLVM_BUILD_DIR_$(1))/llvm-auto-clean-stamp\n \n-ifeq ($$(findstring msvc,$(1)),msvc)\n-\n $$(LLVM_CONFIG_$(1)): $$(LLVM_DEPS) $$(LLVM_STAMP_$(1))\n \t@$$(call E, cmake: llvm)\n+ifeq ($$(findstring msvc,$(1)),msvc)\n \t$$(Q)$$(CFG_CMAKE) --build $$(CFG_LLVM_BUILD_DIR_$(1)) \\\n \t\t--config $$(LLVM_BUILD_CONFIG_MODE)\n-\t$$(Q)touch $$(LLVM_CONFIG_$(1))\n-\n-clean-llvm$(1):\n-\n else\n-\n-$$(LLVM_CONFIG_$(1)): $$(LLVM_DEPS) $$(LLVM_STAMP_$(1))\n-\t@$$(call E, make: llvm)\n-\t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1)) $$(CFG_LLVM_BUILD_ENV_$(1)) ONLY_TOOLS=\"$$(LLVM_TOOLS)\"\n+\t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n+endif\n \t$$(Q)touch $$(LLVM_CONFIG_$(1))\n \n clean-llvm$(1):\n-\t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1)) clean\n-\n-endif\n \n else\n clean-llvm$(1):"}, {"sha": "d0ab3102d7d70d82e4979463d20664fb46d3731b", "filename": "mk/rt.mk", "status": "modified", "additions": 111, "deletions": 50, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/59db95b4999b878f99e682537cbb025ce7d07ec4/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/59db95b4999b878f99e682537cbb025ce7d07ec4/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=59db95b4999b878f99e682537cbb025ce7d07ec4", "patch": "@@ -233,35 +233,98 @@ COMPRT_DEPS := $(wildcard \\\n               $(S)src/compiler-rt/*/*/*/*)\n endif\n \n+# compiler-rt's build system is a godawful mess. Here we figure out\n+# the ridiculous platform-specific values and paths necessary to get\n+# useful artifacts out of it.\n+\n COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n \n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS) $$(LLVM_CONFIG_$$(CFG_BUILD))\n-\t@$$(call E, cmake: compiler-rt)\n-\t$$(Q)cd \"$$(COMPRT_BUILD_DIR_$(1))\"; $$(CFG_CMAKE) \"$(S)src/compiler-rt\" \\\n-\t\t-DCMAKE_BUILD_TYPE=$$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-DLLVM_CONFIG_PATH=$$(LLVM_CONFIG_$$(CFG_BUILD)) \\\n-\t\t-G\"$$(CFG_CMAKE_GENERATOR)\"\n-\t$$(Q)$$(CFG_CMAKE) --build \"$$(COMPRT_BUILD_DIR_$(1))\" \\\n-\t\t--target lib/builtins/builtins \\\n-\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-- //v:m //nologo\n-\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/lib/windows/$$(LLVM_BUILD_CONFIG_MODE)/clang_rt.builtins-$$(HOST_$(1)).lib $$@\n+COMPRT_ARCH_$(1) := $$(word 1,$$(subst -, ,$(1)))\n+\n+# All this is to figure out the path to the compiler-rt bin\n+ifeq ($$(findstring windows-msvc,$(1)),windows-msvc)\n+COMPRT_DIR_$(1) := windows/Release\n+COMPRT_LIB_NAME_$(1) := clang_rt.builtins-$$(patsubst i%86,i386,$$(COMPRT_ARCH_$(1)))\n+endif\n+\n+ifeq ($$(findstring windows-gnu,$(1)),windows-gnu)\n+COMPRT_DIR_$(1) := windows\n+COMPRT_LIB_NAME_$(1) := clang_rt.builtins-$$(COMPRT_ARCH_$(1))\n+endif\n+\n+ifeq ($$(findstring darwin,$(1)),darwin)\n+COMPRT_DIR_$(1) := builtins\n+COMPRT_LIB_NAME_$(1) := clang_rt.builtins_$$(patsubst i686,i386,$$(COMPRT_ARCH_$(1)))_osx\n+endif\n+\n+ifeq ($$(findstring ios,$(1)),ios)\n+COMPRT_DIR_$(1) := builtins\n+COMPRT_ARCH_$(1) := $$(patsubst armv7s,armv7em,$$(COMPRT_ARCH_$(1)))\n+COMPRT_LIB_NAME_$(1) := clang_rt.hard_pic_$$(COMPRT_ARCH_$(1))_macho_embedded\n+ifeq ($$(COMPRT_ARCH_$(1)),aarch64)\n+COMPRT_LIB_NAME_$(1) := clang_rt.builtins_arm64_ios\n+endif\n+COMPRT_DEFINES_$(1) := -DCOMPILER_RT_ENABLE_IOS=ON\n+endif\n+\n+ifndef COMPRT_DIR_$(1)\n+# NB: FreeBSD and NetBSD output to \"linux\"...\n+COMPRT_DIR_$(1) := linux\n+COMPRT_ARCH_$(1) := $$(patsubst i586,i386,$$(COMPRT_ARCH_$(1)))\n+\n+ifeq ($$(findstring android,$(1)),android)\n+ifeq ($$(findstring arm,$$(COMPRT_ARCH_$(1))),arm)\n+COMPRT_ARCH_$(1) := armhf\n+endif\n+endif\n+\n+ifeq ($$(findstring eabihf,$(1)),eabihf)\n+ifeq ($$(findstring armv7,$(1)),)\n+COMPRT_LIB_NAME_$(1) := clang_rt.builtins-armhf\n+endif\n+endif\n+\n+ifndef COMPRT_LIB_NAME_$(1)\n+COMPRT_LIB_NAME_$(1) := clang_rt.builtins-$$(COMPRT_ARCH_$(1))\n+endif\n+endif\n+\n+\n+ifeq ($$(findstring windows-gnu,$(1)),windows-gnu)\n+COMPRT_LIB_FILE_$(1) := lib$$(COMPRT_LIB_NAME_$(1)).a\n+endif\n+\n+ifeq ($$(findstring android,$(1)),android)\n+ifeq ($$(findstring arm,$(1)),arm)\n+COMPRT_LIB_FILE_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),$$(COMPRT_LIB_NAME_$(1))-android)\n+endif\n+endif\n+\n+ifndef COMPRT_LIB_FILE_$(1)\n+COMPRT_LIB_FILE_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),$$(COMPRT_LIB_NAME_$(1)))\n+endif\n+\n+COMPRT_OUTPUT_$(1) := $$(COMPRT_BUILD_DIR_$(1))/lib/$$(COMPRT_DIR_$(1))/$$(COMPRT_LIB_FILE_$(1))\n+\n+ifeq ($$(findstring windows-msvc,$(1)),windows-msvc)\n+COMPRT_BUILD_ARGS_$(1) := //v:m //nologo\n+COMPRT_BUILD_TARGET_$(1) := lib/builtins/builtins\n+COMPRT_BUILD_CC_$(1) :=\n else\n-COMPRT_CC_$(1) := $$(CC_$(1))\n-COMPRT_AR_$(1) := $$(AR_$(1))\n-# We chomp -Werror here because GCC warns about the type signature of\n-# builtins not matching its own and the build fails. It's a bit hacky,\n-# but what can we do, we're building libclang-rt using GCC ......\n-COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -Wno-error -std=c99\n-\n-# FreeBSD Clang's packaging is problematic; it doesn't copy unwind.h to\n-# the standard include directory. This should really be in our changes to\n-# compiler-rt, but we override the CFLAGS here so there isn't much choice\n-ifeq ($$(findstring freebsd,$(1)),freebsd)\n-\tCOMPRT_CFLAGS_$(1) += -I/usr/include/c++/v1\n+COMPRT_BUILD_ARGS_$(1) :=\n+ifndef COMPRT_BUILD_TARGET_$(1)\n+COMPRT_BUILD_TARGET_$(1) := $$(COMPRT_LIB_NAME_$(1))\n+endif\n+COMPRT_BUILD_CC_$(1) := -DCMAKE_C_COMPILER=$$(call FIND_COMPILER,$$(CC_$(1))) \\\n+\t\t\t-DCMAKE_CXX_COMPILER=$$(call FIND_COMPILER,$$(CXX_$(1)))\n+\n+ifeq ($$(findstring ios,$(1)),)\n+COMPRT_BUILD_CC_$(1) := $$(COMPRT_BUILD_CC_$(1)) \\\n+\t\t\t-DCMAKE_C_FLAGS=\"$$(CFG_GCCISH_CFLAGS_$(1)) -Wno-error\"\n+endif\n+\n endif\n \n ifeq ($$(findstring emscripten,$(1)),emscripten)\n@@ -273,20 +336,26 @@ $$(COMPRT_LIB_$(1)):\n \n else\n \n-$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n-\t@$$(call E, make: compiler-rt)\n-\t$$(Q)$$(MAKE) -C \"$(S)src/compiler-rt\" \\\n-\t\tProjSrcRoot=\"$(S)src/compiler-rt\" \\\n-\t\tProjObjRoot=\"$$(abspath $$(COMPRT_BUILD_DIR_$(1)))\" \\\n-\t\tCC='$$(COMPRT_CC_$(1))' \\\n-\t\tAR='$$(COMPRT_AR_$(1))' \\\n-\t\tRANLIB='$$(COMPRT_AR_$(1)) s' \\\n-\t\tCFLAGS=\"$$(COMPRT_CFLAGS_$(1))\" \\\n-\t\tTargetTriple=$(1) \\\n-\t\ttriple-builtins\n-\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/builtins/libcompiler_rt.a $$@\n-\n-endif # if emscripten\n+$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS) $$(LLVM_CONFIG_$$(CFG_BUILD))\n+\t@$$(call E, cmake: compiler-rt)\n+\t$$(Q)rm -rf $$(COMPRT_BUILD_DIR_$(1))\n+\t$$(Q)mkdir $$(COMPRT_BUILD_DIR_$(1))\n+\t$$(Q)cd \"$$(COMPRT_BUILD_DIR_$(1))\"; \\\n+\t\t$$(CFG_CMAKE) \"$(S)src/compiler-rt\" \\\n+\t\t-DCMAKE_BUILD_TYPE=$$(LLVM_BUILD_CONFIG_MODE) \\\n+\t\t-DLLVM_CONFIG_PATH=$$(LLVM_CONFIG_$$(CFG_BUILD)) \\\n+\t\t-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=$(1) \\\n+\t\t-DCOMPILER_RT_BUILD_SANITIZERS=OFF \\\n+\t\t-DCOMPILER_RT_BUILD_EMUTLS=OFF \\\n+\t\t$$(COMPRT_DEFINES_$(1)) \\\n+\t\t$$(COMPRT_BUILD_CC_$(1)) \\\n+\t\t-G\"$$(CFG_CMAKE_GENERATOR)\"\n+\t$$(Q)$$(CFG_CMAKE) --build \"$$(COMPRT_BUILD_DIR_$(1))\" \\\n+\t\t--target $$(COMPRT_BUILD_TARGET_$(1)) \\\n+\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n+\t\t-- $$(COMPRT_BUILD_ARGS_$(1)) $$(MFLAGS)\n+\t$$(Q)cp \"$$(COMPRT_OUTPUT_$(1))\" $$@\n+\n endif\n \n ################################################################################\n@@ -310,20 +379,15 @@ ifeq ($$(findstring darwin,$$(OSTYPE_$(1))),darwin)\n $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n \n-else\n-ifeq ($$(findstring ios,$$(OSTYPE_$(1))),ios)\n+else ifeq ($$(findstring ios,$$(OSTYPE_$(1))),ios)\n # See comment above\n $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n-else\n-\n-ifeq ($$(findstring msvc,$(1)),msvc)\n+else ifeq ($$(findstring msvc,$(1)),msvc)\n # See comment above\n $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n-else\n-\n-ifeq ($$(findstring emscripten,$(1)),emscripten)\n+else ifeq ($$(findstring emscripten,$(1)),emscripten)\n # FIXME: libbacktrace doesn't understand the emscripten triple\n $$(BACKTRACE_LIB_$(1)):\n \ttouch $$@\n@@ -376,10 +440,7 @@ $$(BACKTRACE_LIB_$(1)): $$(BACKTRACE_BUILD_DIR_$(1))/Makefile $$(MKFILE_DEPS)\n \t\tINCDIR=$(S)src/libbacktrace\n \t$$(Q)cp $$(BACKTRACE_BUILD_DIR_$(1))/.libs/libbacktrace.a $$@\n \n-endif # endif for emscripten\n-endif # endif for msvc\n-endif # endif for ios\n-endif # endif for darwin\n+endif\n \n ################################################################################\n # libc/libunwind for musl"}, {"sha": "a1ef94b76029780a510bc2dc9c6a791bd091ff19", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=59db95b4999b878f99e682537cbb025ce7d07ec4", "patch": "@@ -1 +1 @@\n-Subproject commit 57315f7e07d09b6f0341ebbcd50dded6c20d782f\n+Subproject commit a1ef94b76029780a510bc2dc9c6a791bd091ff19"}, {"sha": "31de2ae894839d906b8c1e4f5475a3f1c497632e", "filename": "src/etc/Dockerfile", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59db95b4999b878f99e682537cbb025ce7d07ec4/src%2Fetc%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/59db95b4999b878f99e682537cbb025ce7d07ec4/src%2Fetc%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FDockerfile?ref=59db95b4999b878f99e682537cbb025ce7d07ec4", "patch": "@@ -19,7 +19,13 @@ FROM ubuntu:xenial\n RUN apt-get update && apt-get -y install \\\n     curl g++ git make \\\n     libedit-dev zlib1g-dev \\\n-    llvm-3.7-tools\n+    llvm-3.7-tools cmake\n+\n+# When we compile compiler-rt we pass it the llvm-config we just installed on\n+# the system, but unfortunately it doesn't infer correctly where\n+# LLVMConfig.cmake is so we need to coerce it a bit...\n+RUN mkdir -p /usr/lib/llvm-3.7/build/share/llvm\n+RUN ln -s /usr/share/llvm-3.7/cmake /usr/lib/llvm-3.7/build/share/llvm/cmake\n \n RUN mkdir /build\n WORKDIR /build"}]}