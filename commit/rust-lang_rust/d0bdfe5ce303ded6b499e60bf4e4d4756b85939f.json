{"sha": "d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYmRmZTVjZTMwM2RlZDZiNDk5ZTYwYmY0ZTRkNDc1NmI4NTkzOWY=", "commit": {"author": {"name": "Phil Turnbull", "email": "philip.turnbull@gmail.com", "date": "2017-01-23T01:57:17Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-15T11:01:09Z"}, "message": "Handle non-trivial nil closures\n\n`reduce_nil_closure` mixed together a) 'is this a nil closure?' and b) 'can it\nbe reduced to a simple expression?'. Split the logic into two functions so we\ncan still generate a basic warning when the closure can't be simplified.", "tree": {"sha": "e85de4e5c34c8ec9e51c8a886a5e2b7076e18332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e85de4e5c34c8ec9e51c8a886a5e2b7076e18332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa0zD1AAoJELb6Bqbg4mZbX2cP/Ry2DjejF06wEzt1skd1R9g6\n+XNuirBabFlMNntvrpNrr3VtToNxz6oqT1RoryTH/g9384TCbsk/T7btF9ACe48v\nR9pXQxf67HWatkBij9uCX2VlnL6syr9dpyByuiSngd89v6Of78SjYWxeSkOIkiUX\nsF9TwG3wcqbPwWwu5TWUeXBlv/ZZ+4cSg4bIikvuSz4CzYH6gM/VXAkFBTHs79lI\nn3AuFh19xofGTbaGaVYA1qHLuEkd95vKUPNKOMQjmkPWrQ+1oWnEfmhTqwAw715U\nZ442DK5leK1lrpmc9XilHf8jhkICiiUemz2xQjgKLsFia31e/aVi7K/Sriz2V17X\nV7lDVByIH3U4ZjF/+PPwmpuHkKz/jDd2dj2e+Qn7grOK4N/n7xuOw4LL8tXYlT8s\nZS65rjf2OsGzxXEzmn/DhH+npfR6RJS5IVQXZjgx2S53Ao2P5x0j6jfsnhkX787Y\nzoJhEUfOdr/onISjuGusiwpzXhDtQQJ80wBqnPtqKCT0+PIt3jEjxuTMc+hLqoBI\nn/44Pdi2KRNFKx08xoAXG3GSWk8H4YEJ0qjM//U9fTTqLrQQSyvmTo6LbIFcpsN6\nfzhp5V6yavXJYv38az1djP0GciFt8GIyNdtcR3SGjmr+J1DY4hQDwJ0J9bL1JGYz\nZ5oy2lZD8K/f0r9mePns\n=7Krk\n-----END PGP SIGNATURE-----", "payload": "tree e85de4e5c34c8ec9e51c8a886a5e2b7076e18332\nparent 2f52d1d568913f32a6bd24affeeb5ec594061a3c\nauthor Phil Turnbull <philip.turnbull@gmail.com> 1485136637 -0500\ncommitter Philipp Hansch <dev@phansch.net> 1523790069 +0200\n\nHandle non-trivial nil closures\n\n`reduce_nil_closure` mixed together a) 'is this a nil closure?' and b) 'can it\nbe reduced to a simple expression?'. Split the logic into two functions so we\ncan still generate a basic warning when the closure can't be simplified.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "html_url": "https://github.com/rust-lang/rust/commit/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f/comments", "author": {"login": "philipturnbull", "id": 45588, "node_id": "MDQ6VXNlcjQ1NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/45588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipturnbull", "html_url": "https://github.com/philipturnbull", "followers_url": "https://api.github.com/users/philipturnbull/followers", "following_url": "https://api.github.com/users/philipturnbull/following{/other_user}", "gists_url": "https://api.github.com/users/philipturnbull/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipturnbull/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipturnbull/subscriptions", "organizations_url": "https://api.github.com/users/philipturnbull/orgs", "repos_url": "https://api.github.com/users/philipturnbull/repos", "events_url": "https://api.github.com/users/philipturnbull/events{/privacy}", "received_events_url": "https://api.github.com/users/philipturnbull/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f52d1d568913f32a6bd24affeeb5ec594061a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f52d1d568913f32a6bd24affeeb5ec594061a3c", "html_url": "https://github.com/rust-lang/rust/commit/2f52d1d568913f32a6bd24affeeb5ec594061a3c"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "cc998ad00eed2400f59c0e40a03f1f3945067920", "filename": "clippy_lints/src/map_nil_fn.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f/clippy_lints%2Fsrc%2Fmap_nil_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f/clippy_lints%2Fsrc%2Fmap_nil_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_nil_fn.rs?ref=d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "patch": "@@ -14,7 +14,7 @@ pub struct Pass;\n /// **Why is this bad?** Readability, this can be written more clearly with\n /// an if statement\n ///\n-/// **Known problems:** Closures with multiple statements are not handled\n+/// **Known problems:** None.\n ///\n /// **Example:**\n /// ```rust\n@@ -114,16 +114,17 @@ fn reduce_nil_expression<'a>(cx: &LateContext, expr: &'a hir::Expr) -> Option<Sp\n     }\n }\n \n-fn reduce_nil_closure<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'a hir::Expr) -> Option<(Span, Span)> {\n+fn nil_closure<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'a hir::Expr) -> Option<(&'tcx hir::Arg, &'a hir::Expr)> {\n     if let hir::ExprClosure(_, ref decl, inner_expr_id, _) = expr.node {\n         let body = cx.tcx.map.body(inner_expr_id);\n+        let body_expr = &body.value;\n \n         if_let_chain! {[\n             decl.inputs.len() == 1,\n+            is_nil_expression(cx, body_expr),\n             let Some(binding) = iter_input_pats(&decl, body).next(),\n-            let Some(expr_span) = reduce_nil_expression(cx, &body.value),\n         ], {\n-            return Some((binding.pat.span, expr_span))\n+            return Some((binding, body_expr))\n         }}\n     }\n     None\n@@ -148,12 +149,18 @@ fn lint_map_nil_fn(cx: &LateContext, stmt: &hir::Stmt, expr: &hir::Expr, map_arg\n                            expr.span,\n                            msg,\n                            |db| { db.span_suggestion(stmt.span, \"try this\", suggestion); });\n-    } else if let Some((binding_span, expr_span)) = reduce_nil_closure(cx, fn_arg) {\n+    } else if let Some((binding, closure_expr)) = nil_closure(cx, fn_arg) {\n         let msg = \"called `map(f)` on an Option value where `f` is a nil closure\";\n-        let suggestion = format!(\"if let Some({0}) = {1} {{ {2} }}\",\n-                                 snippet(cx, binding_span, \"_\"),\n-                                 snippet(cx, var_arg.span, \"_\"),\n-                                 snippet(cx, expr_span, \"_\"));\n+        let suggestion = if let Some(expr_span) = reduce_nil_expression(cx, closure_expr) {\n+            format!(\"if let Some({0}) = {1} {{ {2} }}\",\n+                    snippet(cx, binding.pat.span, \"_\"),\n+                    snippet(cx, var_arg.span, \"_\"),\n+                    snippet(cx, expr_span, \"_\"))\n+        } else {\n+            format!(\"if let Some({0}) = {1} {{ ... }}\",\n+                    snippet(cx, binding.pat.span, \"_\"),\n+                    snippet(cx, var_arg.span, \"_\"))\n+        };\n \n         span_lint_and_then(cx,\n                            OPTION_MAP_NIL_FN,"}, {"sha": "ba2c20db087a08710504d25a7e29d955f2857e34", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "patch": "@@ -432,16 +432,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n fn check_nan(cx: &LateContext, path: &Path, expr: &Expr) {\n     if !in_constant(cx, expr.id) {\n-        path.segments.last().map(|seg| {\n-            if seg.name == \"NAN\" {\n-                span_lint(\n-                    cx,\n-                    CMP_NAN,\n-                    expr.span,\n-                    \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\",\n-                );\n-            }\n-        });\n+        if let Some(seg) = path.segments.last() {\n+            path.segments.last().map(|seg| {\n+                if seg.name == \"NAN\" {\n+                    span_lint(\n+                        cx,\n+                        CMP_NAN,\n+                        expr.span,\n+                        \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\",\n+                    );\n+                }\n+            });\n+        }\n     }\n }\n "}, {"sha": "b580e53c9d864bbf11a35936fb781131aff6f07e", "filename": "tests/compile-fail/map_nil_fn.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f/tests%2Fcompile-fail%2Fmap_nil_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bdfe5ce303ded6b499e60bf4e4d4756b85939f/tests%2Fcompile-fail%2Fmap_nil_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmap_nil_fn.rs?ref=d0bdfe5ce303ded6b499e60bf4e4d4756b85939f", "patch": "@@ -130,6 +130,13 @@ fn main() {\n     //~| SUGGESTION if let Some(ref value) = x.field { do_nothing(value + captured) }\n \n \n-    // closures with multiple statements are not linted:\n     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n+    //~| HELP try this\n+    //~| SUGGESTION if let Some(value) = x.field { ... }\n+\n+    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+    //~^ ERROR called `map(f)` on an Option value where `f` is a nil closure\n+    //~| HELP try this\n+    //~| SUGGESTION if let Some(value) = x.field { ... }\n }"}]}