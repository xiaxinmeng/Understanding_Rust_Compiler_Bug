{"sha": "6f51f728a114078a0c3a029fc66cfb8c4daf9a28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNTFmNzI4YTExNDA3OGEwYzNhMDI5ZmM2NmNmYjhjNGRhZjlhMjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-01T10:53:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-01T10:53:39Z"}, "message": "Type-safer API for dealing with parameter lists with optional self", "tree": {"sha": "21a6ec1454180e7cec86a3a2efae000d70a07096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21a6ec1454180e7cec86a3a2efae000d70a07096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f51f728a114078a0c3a029fc66cfb8c4daf9a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f51f728a114078a0c3a029fc66cfb8c4daf9a28", "html_url": "https://github.com/rust-lang/rust/commit/6f51f728a114078a0c3a029fc66cfb8c4daf9a28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455a0cfda2121596deb13ca3f40a83c98b32863c", "url": "https://api.github.com/repos/rust-lang/rust/commits/455a0cfda2121596deb13ca3f40a83c98b32863c", "html_url": "https://github.com/rust-lang/rust/commit/455a0cfda2121596deb13ca3f40a83c98b32863c"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "e2fe44aff9fa17cabc1b672527db33028e6d1aab", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=6f51f728a114078a0c3a029fc66cfb8c4daf9a28", "patch": "@@ -139,7 +139,7 @@ fn add_function_impl(\n ) {\n     let fn_name = func.name(ctx.db).to_string();\n \n-    let label = if func.params(ctx.db).is_empty() {\n+    let label = if func.assoc_fn_params(ctx.db).is_empty() {\n         format!(\"fn {}()\", fn_name)\n     } else {\n         format!(\"fn {}(..)\", fn_name)"}, {"sha": "09d9f85bc0cd335e5c320249a9cd07b4422b9943", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=6f51f728a114078a0c3a029fc66cfb8c4daf9a28", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn render_fn<'a>(\n struct FunctionRender<'a> {\n     ctx: RenderContext<'a>,\n     name: String,\n-    fn_: hir::Function,\n+    func: hir::Function,\n     ast_node: Fn,\n }\n \n@@ -35,15 +35,15 @@ impl<'a> FunctionRender<'a> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()).to_string());\n         let ast_node = fn_.source(ctx.db()).value;\n \n-        FunctionRender { ctx, name, fn_, ast_node }\n+        FunctionRender { ctx, name, func: fn_, ast_node }\n     }\n \n     fn render(self, import_to_add: Option<ImportToAdd>) -> CompletionItem {\n         let params = self.params();\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())\n-            .set_documentation(self.ctx.docs(self.fn_))\n-            .set_deprecated(self.ctx.is_deprecated(self.fn_))\n+            .set_documentation(self.ctx.docs(self.func))\n+            .set_deprecated(self.ctx.is_deprecated(self.func))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n             .add_import(import_to_add)\n@@ -67,7 +67,11 @@ impl<'a> FunctionRender<'a> {\n     }\n \n     fn params(&self) -> Params {\n-        let params_ty = self.fn_.params(self.ctx.db());\n+        let params_ty = if self.ctx.completion.dot_receiver.is_some() {\n+            self.func.method_params(self.ctx.db()).unwrap_or_default()\n+        } else {\n+            self.func.assoc_fn_params(self.ctx.db())\n+        };\n         let params = self\n             .ast_node\n             .param_list()\n@@ -87,7 +91,7 @@ impl<'a> FunctionRender<'a> {\n     }\n \n     fn kind(&self) -> CompletionItemKind {\n-        if self.fn_.self_param(self.ctx.db()).is_some() {\n+        if self.func.self_param(self.ctx.db()).is_some() {\n             CompletionItemKind::Method\n         } else {\n             CompletionItemKind::Function"}, {"sha": "ba121104ba07cff22d1ec1876e3349899603d48f", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=6f51f728a114078a0c3a029fc66cfb8c4daf9a28", "patch": "@@ -744,14 +744,13 @@ impl Function {\n         Some(SelfParam { func: self.id })\n     }\n \n-    pub fn params(self, db: &dyn HirDatabase) -> Vec<Param> {\n+    pub fn assoc_fn_params(self, db: &dyn HirDatabase) -> Vec<Param> {\n         let resolver = self.id.resolver(db.upcast());\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n         let environment = TraitEnvironment::lower(db, &resolver);\n         db.function_data(self.id)\n             .params\n             .iter()\n-            .skip(if self.self_param(db).is_some() { 1 } else { 0 })\n             .map(|type_ref| {\n                 let ty = Type {\n                     krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate,\n@@ -764,6 +763,14 @@ impl Function {\n             })\n             .collect()\n     }\n+    pub fn method_params(self, db: &dyn HirDatabase) -> Option<Vec<Param>> {\n+        if self.self_param(db).is_none() {\n+            return None;\n+        }\n+        let mut res = self.assoc_fn_params(db);\n+        res.remove(0);\n+        Some(res)\n+    }\n \n     pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n         db.function_data(self.id).is_unsafe"}, {"sha": "64fe8bd654cab8aa651982ecbeeeef733b6eb6a2", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f51f728a114078a0c3a029fc66cfb8c4daf9a28/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=6f51f728a114078a0c3a029fc66cfb8c4daf9a28", "patch": "@@ -241,7 +241,7 @@ fn rename_to_self(\n         return Err(RenameError(\"Method already has a self parameter\".to_string()));\n     }\n \n-    let params = fn_def.params(sema.db);\n+    let params = fn_def.assoc_fn_params(sema.db);\n     let first_param =\n         params.first().ok_or_else(|| RenameError(\"Method has no parameters\".into()))?;\n     let first_param_ty = first_param.ty();"}]}