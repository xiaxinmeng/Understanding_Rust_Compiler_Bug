{"sha": "8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZGM5NGU4NDA0MGNlNzk3ZmQzM2QwYTdjZmRhNGVjNGYyZjI0MjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-17T12:11:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-17T12:11:41Z"}, "message": "Auto merge of #75592 - RalfJung:miri-int-align, r=oli-obk\n\nmiri engine: add option to use force_int for alignment check\n\nThis is needed for https://github.com/rust-lang/miri/issues/1074. The Miri-side patch is at https://github.com/rust-lang/miri/pull/1513.\n\nr? @oli-obk", "tree": {"sha": "613072e59d3b4b3c447a7ad960c5af2bc3ffd988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613072e59d3b4b3c447a7ad960c5af2bc3ffd988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421", "html_url": "https://github.com/rust-lang/rust/commit/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e7b9b8cf776222825dbbd4cb1e39b7765ef27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e7b9b8cf776222825dbbd4cb1e39b7765ef27c", "html_url": "https://github.com/rust-lang/rust/commit/67e7b9b8cf776222825dbbd4cb1e39b7765ef27c"}, {"sha": "6da8503dff7b8792916bf6cd489e92c49ea7e868", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da8503dff7b8792916bf6cd489e92c49ea7e868", "html_url": "https://github.com/rust-lang/rust/commit/6da8503dff7b8792916bf6cd489e92c49ea7e868"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "3718da1723b1626ff4fd1cd653e435ecb38fff58", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421", "patch": "@@ -122,6 +122,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Whether memory accesses should be alignment-checked.\n     fn enforce_alignment(memory_extra: &Self::MemoryExtra) -> bool;\n \n+    /// Whether, when checking alignment, we should `force_int` and thus support\n+    /// custom alignment logic based on whatever the integer address happens to be.\n+    fn force_int_for_alignment_check(memory_extra: &Self::MemoryExtra) -> bool;\n+\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n@@ -375,6 +379,12 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         false\n     }\n \n+    #[inline(always)]\n+    fn force_int_for_alignment_check(_memory_extra: &Self::MemoryExtra) -> bool {\n+        // We do not support `force_int`.\n+        false\n+    }\n+\n     #[inline(always)]\n     fn enforce_validity(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         false // for now, we don't enforce validity"}, {"sha": "8d80fa82185eda40df6e92c4572940293a998c2f", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421", "patch": "@@ -8,7 +8,7 @@\n \n use std::borrow::Cow;\n use std::collections::VecDeque;\n-use std::convert::TryFrom;\n+use std::convert::{TryFrom, TryInto};\n use std::fmt;\n use std::ptr;\n \n@@ -380,7 +380,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             // if this is already a `Pointer` we want to do the bounds checks!\n             sptr\n         } else {\n-            // A \"real\" access, we must get a pointer.\n+            // A \"real\" access, we must get a pointer to be able to check the bounds.\n             Scalar::from(self.force_ptr(sptr)?)\n         };\n         Ok(match normalized.to_bits_or_ptr(self.pointer_size(), self) {\n@@ -411,15 +411,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {\n-                    if alloc_align.bytes() < align.bytes() {\n-                        // The allocation itself is not aligned enough.\n-                        // FIXME: Alignment check is too strict, depending on the base address that\n-                        // got picked we might be aligned even if this check fails.\n-                        // We instead have to fall back to converting to an integer and checking\n-                        // the \"real\" alignment.\n-                        throw_ub!(AlignmentCheckFailed { has: alloc_align, required: align });\n+                    if M::force_int_for_alignment_check(&self.extra) {\n+                        let bits = self\n+                            .force_bits(ptr.into(), self.pointer_size())\n+                            .expect(\"ptr-to-int cast for align check should never fail\");\n+                        check_offset_align(bits.try_into().unwrap(), align)?;\n+                    } else {\n+                        // Check allocation alignment and offset alignment.\n+                        if alloc_align.bytes() < align.bytes() {\n+                            throw_ub!(AlignmentCheckFailed { has: alloc_align, required: align });\n+                        }\n+                        check_offset_align(ptr.offset.bytes(), align)?;\n                     }\n-                    check_offset_align(ptr.offset.bytes(), align)?;\n                 }\n \n                 // We can still be zero-sized in this branch, in which case we have to"}]}