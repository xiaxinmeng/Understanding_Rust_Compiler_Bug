{"sha": "f5e1b0f97c9e46b5186f99d744f4587b2aee397e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTFiMGY5N2M5ZTQ2YjUxODZmOTlkNzQ0ZjQ1ODdiMmFlZTM5N2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-12T09:07:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-12T09:07:47Z"}, "message": "Minor refactoring", "tree": {"sha": "d3ec974d07c36ce1007dbc8d65c25a811ea444b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ec974d07c36ce1007dbc8d65c25a811ea444b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e1b0f97c9e46b5186f99d744f4587b2aee397e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e1b0f97c9e46b5186f99d744f4587b2aee397e", "html_url": "https://github.com/rust-lang/rust/commit/f5e1b0f97c9e46b5186f99d744f4587b2aee397e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e1b0f97c9e46b5186f99d744f4587b2aee397e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc055281a5c1c81a6df0e4c10cde71e4799bd329", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc055281a5c1c81a6df0e4c10cde71e4799bd329", "html_url": "https://github.com/rust-lang/rust/commit/fc055281a5c1c81a6df0e4c10cde71e4799bd329"}], "stats": {"total": 53, "additions": 32, "deletions": 21}, "files": [{"sha": "52d24e24d721470760ad181ed914b9313c73aafc", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5e1b0f97c9e46b5186f99d744f4587b2aee397e/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e1b0f97c9e46b5186f99d744f4587b2aee397e/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=f5e1b0f97c9e46b5186f99d744f4587b2aee397e", "patch": "@@ -9,7 +9,7 @@ use std::iter;\n use std::sync::Arc;\n \n use hir_def::{\n-    builtin_type::BuiltinType,\n+    builtin_type::{BuiltinFloat, BuiltinInt, BuiltinType},\n     path::{GenericArg, PathSegment},\n     type_ref::{TypeBound, TypeRef},\n };\n@@ -657,10 +657,10 @@ fn type_for_builtin(def: BuiltinType) -> Ty {\n         BuiltinType::Char => TypeCtor::Char,\n         BuiltinType::Bool => TypeCtor::Bool,\n         BuiltinType::Str => TypeCtor::Str,\n-        BuiltinType::Int { signedness, bitness } => {\n+        BuiltinType::Int(BuiltinInt { signedness, bitness }) => {\n             TypeCtor::Int(IntTy { signedness, bitness }.into())\n         }\n-        BuiltinType::Float { bitness } => TypeCtor::Float(FloatTy { bitness }.into()),\n+        BuiltinType::Float(BuiltinFloat { bitness }) => TypeCtor::Float(FloatTy { bitness }.into()),\n     })\n }\n "}, {"sha": "996e86fd9404e09d08d867ccb5cc950ded0038e6", "filename": "crates/ra_hir_def/src/builtin_type.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f5e1b0f97c9e46b5186f99d744f4587b2aee397e/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e1b0f97c9e46b5186f99d744f4587b2aee397e/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs?ref=f5e1b0f97c9e46b5186f99d744f4587b2aee397e", "patch": "@@ -29,13 +29,24 @@ pub enum FloatBitness {\n     X64,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct BuiltinInt {\n+    pub signedness: Signedness,\n+    pub bitness: IntBitness,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct BuiltinFloat {\n+    pub bitness: FloatBitness,\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum BuiltinType {\n     Char,\n     Bool,\n     Str,\n-    Int { signedness: Signedness, bitness: IntBitness },\n-    Float { bitness: FloatBitness },\n+    Int(BuiltinInt),\n+    Float(BuiltinFloat),\n }\n \n impl BuiltinType {\n@@ -45,22 +56,22 @@ impl BuiltinType {\n         (name::BOOL, BuiltinType::Bool),\n         (name::STR,  BuiltinType::Str ),\n \n-        (name::ISIZE, BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::Xsize }),\n-        (name::I8,    BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X8    }),\n-        (name::I16,   BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X16   }),\n-        (name::I32,   BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X32   }),\n-        (name::I64,   BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X64   }),\n-        (name::I128,  BuiltinType::Int { signedness: Signedness::Signed,   bitness: IntBitness::X128  }),\n+        (name::ISIZE, BuiltinType::Int(BuiltinInt { signedness: Signedness::Signed,   bitness: IntBitness::Xsize })),\n+        (name::I8,    BuiltinType::Int(BuiltinInt { signedness: Signedness::Signed,   bitness: IntBitness::X8    })),\n+        (name::I16,   BuiltinType::Int(BuiltinInt { signedness: Signedness::Signed,   bitness: IntBitness::X16   })),\n+        (name::I32,   BuiltinType::Int(BuiltinInt { signedness: Signedness::Signed,   bitness: IntBitness::X32   })),\n+        (name::I64,   BuiltinType::Int(BuiltinInt { signedness: Signedness::Signed,   bitness: IntBitness::X64   })),\n+        (name::I128,  BuiltinType::Int(BuiltinInt { signedness: Signedness::Signed,   bitness: IntBitness::X128  })),\n \n-        (name::USIZE, BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize }),\n-        (name::U8,    BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X8    }),\n-        (name::U16,   BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X16   }),\n-        (name::U32,   BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X32   }),\n-        (name::U64,   BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X64   }),\n-        (name::U128,  BuiltinType::Int { signedness: Signedness::Unsigned, bitness: IntBitness::X128  }),\n+        (name::USIZE, BuiltinType::Int(BuiltinInt { signedness: Signedness::Unsigned, bitness: IntBitness::Xsize })),\n+        (name::U8,    BuiltinType::Int(BuiltinInt { signedness: Signedness::Unsigned, bitness: IntBitness::X8    })),\n+        (name::U16,   BuiltinType::Int(BuiltinInt { signedness: Signedness::Unsigned, bitness: IntBitness::X16   })),\n+        (name::U32,   BuiltinType::Int(BuiltinInt { signedness: Signedness::Unsigned, bitness: IntBitness::X32   })),\n+        (name::U64,   BuiltinType::Int(BuiltinInt { signedness: Signedness::Unsigned, bitness: IntBitness::X64   })),\n+        (name::U128,  BuiltinType::Int(BuiltinInt { signedness: Signedness::Unsigned, bitness: IntBitness::X128  })),\n \n-        (name::F32, BuiltinType::Float { bitness: FloatBitness::X32 }),\n-        (name::F64, BuiltinType::Float { bitness: FloatBitness::X64 }),\n+        (name::F32, BuiltinType::Float(BuiltinFloat { bitness: FloatBitness::X32 })),\n+        (name::F64, BuiltinType::Float(BuiltinFloat { bitness: FloatBitness::X64 })),\n     ];\n }\n \n@@ -70,7 +81,7 @@ impl fmt::Display for BuiltinType {\n             BuiltinType::Char => \"char\",\n             BuiltinType::Bool => \"bool\",\n             BuiltinType::Str => \"str\",\n-            BuiltinType::Int { signedness, bitness } => match (signedness, bitness) {\n+            BuiltinType::Int(BuiltinInt { signedness, bitness }) => match (signedness, bitness) {\n                 (Signedness::Signed, IntBitness::Xsize) => \"isize\",\n                 (Signedness::Signed, IntBitness::X8) => \"i8\",\n                 (Signedness::Signed, IntBitness::X16) => \"i16\",\n@@ -85,7 +96,7 @@ impl fmt::Display for BuiltinType {\n                 (Signedness::Unsigned, IntBitness::X64) => \"u64\",\n                 (Signedness::Unsigned, IntBitness::X128) => \"u128\",\n             },\n-            BuiltinType::Float { bitness } => match bitness {\n+            BuiltinType::Float(BuiltinFloat { bitness }) => match bitness {\n                 FloatBitness::X32 => \"f32\",\n                 FloatBitness::X64 => \"f64\",\n             },"}]}