{"sha": "958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OGM2N2Q5YzhjYTc0MzcwZTIwNTJmZDhhM2QyMDliODE4NGQxZjQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-05-13T19:40:06Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-05-15T21:56:09Z"}, "message": "adressed comments by @kennytm and @petrochenkov", "tree": {"sha": "8f89d2dddd401827953e94e8c3e8a0086a8fb068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f89d2dddd401827953e94e8c3e8a0086a8fb068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "html_url": "https://github.com/rust-lang/rust/commit/958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9c163ebe9deeaf74699fc8642d919cdb2b5e617", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c163ebe9deeaf74699fc8642d919cdb2b5e617", "html_url": "https://github.com/rust-lang/rust/commit/a9c163ebe9deeaf74699fc8642d919cdb2b5e617"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "73aeb40df840064ae0ffd2ea79ee369a9939d498", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -111,7 +111,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     // overflow the maximum line width.\n     description.map(|raw_msg| {\n         let msg = raw_msg.as_str();\n-        if !msg.starts_with('\\n') || !msg.ends_with('\\n') {\n+        if !msg.starts_with(\"\\n\") || !msg.ends_with(\"\\n\") {\n             ecx.span_err(span, &format!(\n                 \"description for error code {} doesn't start and end with a newline\",\n                 code\n@@ -120,7 +120,7 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n \n         // URLs can be unavoidably longer than the line limit, so we allow them.\n         // Allowed format is: `[name]: https://www.rust-lang.org/`\n-        let is_url = |l: &str| l.starts_with('[') && l.contains(\"]:\") && l.contains(\"http\");\n+        let is_url = |l: &str| l.starts_with(\"[\") && l.contains(\"]:\") && l.contains(\"http\");\n \n         if msg.lines().any(|line| line.len() > MAX_DESCRIPTION_WIDTH && !is_url(line)) {\n             ecx.span_err(span, &format!("}, {"sha": "31a7e0d58d0d8e20fe3c290bee248f9a3378fec2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -635,8 +635,8 @@ pub struct ExpansionData {\n }\n \n /// One of these is made during expansion and incrementally updated as we go;\n-/// when a macro expansion occurs, the resulting nodes have the backtrace()\n-/// -> `expn_info` of their expansion context stored into their span.\n+/// when a macro expansion occurs, the resulting nodes have the `backtrace()\n+/// -> expn_info` of their expansion context stored into their span.\n pub struct ExtCtxt<'a> {\n     pub parse_sess: &'a parse::ParseSess,\n     pub ecfg: expand::ExpansionConfig<'a>,"}, {"sha": "a0103a1e3feca874a5f9a79975b550d524f2baaa", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -36,43 +36,47 @@\n //! repetitions indicated by Kleene stars. It only advances or calls out to the\n //! real Rust parser when no `cur_eis` items remain\n //!\n-//! Example: Start parsing `a a a a b` against [\u00b7 a $( a )* a b].\n+//! Example:\n //!\n-//! Remaining input: `a a a a b`\n-//! `next_eis`: `[\u00b7 a $( a )* a b]`\n+//! ```text, ignore\n+//! Start parsing a a a a b against [\u00b7 a $( a )* a b].\n //!\n-//! - - - Advance over an `a`. - - -\n+//! Remaining input: a a a a b\n+//! next_eis: [\u00b7 a $( a )* a b]\n //!\n-//! Remaining input: `a a a b`\n-//! cur: `[a \u00b7 $( a )* a b]`\n+//! - - - Advance over an a. - - -\n+//!\n+//! Remaining input: a a a b\n+//! cur: [a \u00b7 $( a )* a b]\n //! Descend/Skip (first item).\n-//! next: `[a $( \u00b7 a )* a b]  [a $( a )* \u00b7 a b]`.\n+//! next: [a $( \u00b7 a )* a b]  [a $( a )* \u00b7 a b].\n //!\n-//! - - - Advance over an `a`. - - -\n+//! - - - Advance over an a. - - -\n //!\n-//! Remaining input: `a a b`\n-//! cur: `[a $( a \u00b7 )* a b]`  next: `[a $( a )* a \u00b7 b]`\n+//! Remaining input: a a b\n+//! cur: [a $( a \u00b7 )* a b]  next: [a $( a )* a \u00b7 b]\n //! Finish/Repeat (first item)\n-//! next: `[a $( a )* \u00b7 a b]  [a $( \u00b7 a )* a b]  [a $( a )* a \u00b7 b]`\n+//! next: [a $( a )* \u00b7 a b]  [a $( \u00b7 a )* a b]  [a $( a )* a \u00b7 b]\n //!\n-//! - - - Advance over an `a`. - - - (this looks exactly like the last step)\n+//! - - - Advance over an a. - - - (this looks exactly like the last step)\n //!\n-//! Remaining input: `a b`\n-//! cur: `[a $( a \u00b7 )* a b]`  next: `[a $( a )* a \u00b7 b]`\n+//! Remaining input: a b\n+//! cur: [a $( a \u00b7 )* a b]  next: [a $( a )* a \u00b7 b]\n //! Finish/Repeat (first item)\n-//! next: `[a $( a )* \u00b7 a b]  [a $( \u00b7 a )* a b]  [a $( a )* a \u00b7 b]`\n+//! next: [a $( a )* \u00b7 a b]  [a $( \u00b7 a )* a b]  [a $( a )* a \u00b7 b]\n //!\n-//! - - - Advance over an `a`. - - - (this looks exactly like the last step)\n+//! - - - Advance over an a. - - - (this looks exactly like the last step)\n //!\n-//! Remaining input: `b`\n-//! cur: `[a $( a \u00b7 )* a b]`  next: `[a $( a )* a \u00b7 b]`\n+//! Remaining input: b\n+//! cur: [a $( a \u00b7 )* a b]  next: [a $( a )* a \u00b7 b]\n //! Finish/Repeat (first item)\n-//! next: `[a $( a )* \u00b7 a b]  [a $( \u00b7 a )* a b]`\n+//! next: [a $( a )* \u00b7 a b]  [a $( \u00b7 a )* a b]\n //!\n-//! - - - Advance over a `b`. - - -\n+//! - - - Advance over a b. - - -\n //!\n-//! Remaining input: ``\n-//! eof: `[a $( a )* a b \u00b7]`\n+//! Remaining input: ''\n+//! eof: [a $( a )* a b \u00b7]\n+//! ```\n \n pub use self::NamedMatch::*;\n pub use self::ParseResult::*;\n@@ -485,7 +489,7 @@ pub fn parse(sess: &ParseSess, tts: TokenStream, ms: &[TokenTree], directory: Op\n }\n \n fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n-    if let \"tt\" = name {\n+    if name == \"tt\" {\n         return token::NtTT(p.parse_token_tree());\n     }\n     // check at the beginning and the parser checks after each bump"}, {"sha": "4a307ab18a593b07e547b534b38fbc09bd8149b8", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -858,6 +858,7 @@ fn quoted_tt_to_string(tt: &quoted::TokenTree) -> String {\n     match *tt {\n         quoted::TokenTree::Token(_, ref tok) => ::print::pprust::token_to_string(tok),\n         quoted::TokenTree::MetaVarDecl(_, name, kind) => format!(\"${}:{}\", name, kind),\n-        _ => panic!(\"unexpected quoted::TokenTree::{{Sequence or Delimited}} in follow set checker\"),\n+        _ => panic!(\"unexpected quoted::TokenTree::{{Sequence or Delimited}} \\\n+                     in follow set checker\"),\n     }\n }"}, {"sha": "09090ab87313087ac393082c21f6f95a0c335a83", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -1216,7 +1216,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n \n             ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n-                if let ast::ImplPolarity::Negative = polarity {\n+                if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,\n                                        i.span,\n                                        \"negative trait bounds are not yet fully implemented; \\\n@@ -1269,10 +1269,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FunctionRetTy) {\n         if let ast::FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n-            if let ast::TyKind::Never = output_ty.node {\n-                return\n+            if output_ty.node != ast::TyKind::Never {\n+                self.visit_ty(output_ty)\n             }\n-            self.visit_ty(output_ty)\n         }\n     }\n "}, {"sha": "0c6f09ba7666cb0ed6b5896194c75794f1f2d5d1", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -48,8 +48,8 @@ pub fn expr_is_simple_block(e: &ast::Expr) -> bool {\n pub fn stmt_ends_with_semi(stmt: &ast::StmtKind) -> bool {\n     match *stmt {\n         ast::StmtKind::Local(_) => true,\n-        ast::StmtKind::Item(_) => false,\n         ast::StmtKind::Expr(ref e) => expr_requires_semi_to_be_stmt(e),\n+        ast::StmtKind::Item(_) |\n         ast::StmtKind::Semi(..) |\n         ast::StmtKind::Mac(..) => false,\n     }"}, {"sha": "1eff819d755493f33f713b6281100591bab78413", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -341,7 +341,6 @@ pub fn raw_str_lit(lit: &str) -> String {\n     debug!(\"raw_str_lit: given {}\", escape_default(lit));\n     let mut res = String::with_capacity(lit.len());\n \n-    // FIXME #8372: This could be a for-loop if it didn't borrow the iterator\n     let mut chars = lit.chars().peekable();\n     while let Some(c) = chars.next() {\n         if c == '\\r' {"}, {"sha": "4741f896d3cc0c8c6ce38501dd2e1cb1a7dcfe0e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -1546,7 +1546,7 @@ impl<'a> Parser<'a> {\n     pub fn is_named_argument(&mut self) -> bool {\n         let offset = match self.token {\n             token::BinOp(token::And) |\n-            token::AndAnd |\n+            token::AndAnd => 1,\n             _ if self.token.is_keyword(keywords::Mut) => 1,\n             _ => 0\n         };\n@@ -2569,7 +2569,7 @@ impl<'a> Parser<'a> {\n                             s.print_usize(float.trunc() as usize)?;\n                             s.pclose()?;\n                             word(&mut s.s, \".\")?;\n-                            word(&mut s.s, fstr.splitn(2, '.').last().unwrap())\n+                            word(&mut s.s, fstr.splitn(2, \".\").last().unwrap())\n                         });\n                         err.span_suggestion(\n                             lo.to(self.prev_span),\n@@ -4917,7 +4917,7 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         } else {\n-            if let ast::ImplPolarity::Negative = polarity {\n+            if polarity == ast::ImplPolarity::Negative {\n                 // This is a negated type implementation\n                 // `impl !MyType {}`, which is not allowed.\n                 self.span_err(neg_span, \"inherent implementation can't be negated\");"}, {"sha": "bdb4ce34b91e5a93f4b9069d9256c098d50c9498", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958c67d9c8ca74370e2052fd8a3d209b8184d1f4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=958c67d9c8ca74370e2052fd8a3d209b8184d1f4", "patch": "@@ -1327,7 +1327,7 @@ impl<'a> State<'a> {\n                     space(&mut self.s)?;\n                 }\n \n-                if let ast::ImplPolarity::Negative = polarity {\n+                if polarity == ast::ImplPolarity::Negative {\n                     word(&mut self.s, \"!\")?;\n                 }\n "}]}