{"sha": "230e396a7663d933d24c3c30f556abbc1dd9405e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMGUzOTZhNzY2M2Q5MzNkMjRjM2MzMGY1NTZhYmJjMWRkOTQwNWU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-17T13:59:45Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-28T02:16:34Z"}, "message": "Fix compiler docs", "tree": {"sha": "6d9da33f54310be81b0b30d9afe47a4a96fdea9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9da33f54310be81b0b30d9afe47a4a96fdea9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230e396a7663d933d24c3c30f556abbc1dd9405e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230e396a7663d933d24c3c30f556abbc1dd9405e", "html_url": "https://github.com/rust-lang/rust/commit/230e396a7663d933d24c3c30f556abbc1dd9405e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230e396a7663d933d24c3c30f556abbc1dd9405e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0fda9558e5b9eed94cd1e2c1599ea72115d744", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0fda9558e5b9eed94cd1e2c1599ea72115d744", "html_url": "https://github.com/rust-lang/rust/commit/de0fda9558e5b9eed94cd1e2c1599ea72115d744"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "3fc63b4e50c1452b266669c13b1b26aca8bc9f2e", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/230e396a7663d933d24c3c30f556abbc1dd9405e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230e396a7663d933d24c3c30f556abbc1dd9405e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=230e396a7663d933d24c3c30f556abbc1dd9405e", "patch": "@@ -45,6 +45,9 @@ macro_rules! forward {\n         pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)?) -> &Self\n     ) => {\n         $(#[$attrs])*\n+        // we always document with --document-private-items\n+        #[cfg_attr(not(bootstrap), allow(rustdoc::private_intra_doc_links))]\n+        #[cfg_attr(bootstrap, allow(private_intra_doc_links))]\n         #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n         pub fn $n(&self, $($name: $ty),*) -> &Self {\n             self.diagnostic.$n($($name),*);\n@@ -59,6 +62,9 @@ macro_rules! forward {\n     ) => {\n         $(#[$attrs])*\n         #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n+        // we always document with --document-private-items\n+        #[cfg_attr(not(bootstrap), allow(rustdoc::private_intra_doc_links))]\n+        #[cfg_attr(bootstrap, allow(private_intra_doc_links))]\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n             self.0.diagnostic.$n($($name),*);\n             self\n@@ -76,6 +82,9 @@ macro_rules! forward {\n     ) => {\n         $(#[$attrs])*\n         #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n+        // we always document with --document-private-items\n+        #[cfg_attr(not(bootstrap), allow(rustdoc::private_intra_doc_links))]\n+        #[cfg_attr(bootstrap, allow(private_intra_doc_links))]\n         pub fn $n<$($generic: $bound),*>(&mut self, $($name: $ty),*) -> &mut Self {\n             self.0.diagnostic.$n($($name),*);\n             self"}, {"sha": "c19c16b88a7ab08eceabe64b65b1a31991e942dc", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/230e396a7663d933d24c3c30f556abbc1dd9405e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230e396a7663d933d24c3c30f556abbc1dd9405e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=230e396a7663d933d24c3c30f556abbc1dd9405e", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> SaveContext<'tcx> {\n     /// returns `None` if the node is not macro-generated or the span is malformed,\n     /// else uses the expansion callsite and callee to return some MacroRef.\n     ///\n-    /// FIXME: [`dump_visitor::process_macro_use`] should actually dump this data\n+    /// FIXME: [`DumpVisitor::process_macro_use`] should actually dump this data\n     #[allow(dead_code)]\n     fn get_macro_use_data(&self, span: Span) -> Option<MacroRef> {\n         if !generated_code(span) {"}]}