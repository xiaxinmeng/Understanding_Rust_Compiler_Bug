{"sha": "2c4570c9587b5b41955b6664046de1fc335c0a05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNDU3MGM5NTg3YjViNDE5NTViNjY2NDA0NmRlMWZjMzM1YzBhMDU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-13T12:44:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-18T00:02:32Z"}, "message": "hir: Preserve used syntax in `TyKind::TraitObject`", "tree": {"sha": "2c60767639ebda150bd99ed3765665345b721736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c60767639ebda150bd99ed3765665345b721736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c4570c9587b5b41955b6664046de1fc335c0a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4570c9587b5b41955b6664046de1fc335c0a05", "html_url": "https://github.com/rust-lang/rust/commit/2c4570c9587b5b41955b6664046de1fc335c0a05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c4570c9587b5b41955b6664046de1fc335c0a05/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62694b08fa4068248bf4656adcde39b86cfd815", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62694b08fa4068248bf4656adcde39b86cfd815", "html_url": "https://github.com/rust-lang/rust/commit/b62694b08fa4068248bf4656adcde39b86cfd815"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3ac6e6cbbefcf49f1b924cbb8b7278f7ebea0204", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c4570c9587b5b41955b6664046de1fc335c0a05/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4570c9587b5b41955b6664046de1fc335c0a05/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=2c4570c9587b5b41955b6664046de1fc335c0a05", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n                 return;\n             },\n-            TyKind::TraitObject(bounds, ref lt) => {\n+            TyKind::TraitObject(bounds, ref lt, _) => {\n                 if !lt.is_elided() {\n                     self.unelided_trait_object_lifetime = true;\n                 }"}, {"sha": "81090040d92e0af42b1f8a9a700305119d6bc3d8", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c4570c9587b5b41955b6664046de1fc335c0a05/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4570c9587b5b41955b6664046de1fc335c0a05/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=2c4570c9587b5b41955b6664046de1fc335c0a05", "patch": "@@ -50,7 +50,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                     // Originally reported as the issue #3128.\n                     let inner_snippet = snippet(cx, inner.span, \"..\");\n                     let suggestion = match &inner.kind {\n-                        TyKind::TraitObject(bounds, lt_bound) if bounds.len() > 1 || !lt_bound.is_elided() => {\n+                        TyKind::TraitObject(bounds, lt_bound, _) if bounds.len() > 1 || !lt_bound.is_elided() => {\n                             format!(\"&{}({})\", ltopt, &inner_snippet)\n                         },\n                         TyKind::Path(qpath)\n@@ -86,7 +86,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n // Returns true if given type is `Any` trait.\n fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n     if_chain! {\n-        if let TyKind::TraitObject(ref traits, _) = t.kind;\n+        if let TyKind::TraitObject(ref traits, ..) = t.kind;\n         if !traits.is_empty();\n         // Only Send/Sync can be used as additional traits, so it is enough to\n         // check only the first trait."}, {"sha": "4a1a608e8ae62ea308ffa0f7dcb43e6f3b2129b0", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c4570c9587b5b41955b6664046de1fc335c0a05/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4570c9587b5b41955b6664046de1fc335c0a05/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=2c4570c9587b5b41955b6664046de1fc335c0a05", "patch": "@@ -911,7 +911,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n             // function types bring a lot of overhead\n             TyKind::BareFn(ref bare) if bare.abi == Abi::Rust => (50 * self.nest, 1),\n \n-            TyKind::TraitObject(ref param_bounds, _) => {\n+            TyKind::TraitObject(ref param_bounds, ..) => {\n                 let has_lifetime_parameters = param_bounds.iter().any(|bound| {\n                     bound\n                         .bound_generic_params"}, {"sha": "7f7d9c5f56a1e0463071f9a9784083beb9c46241", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c4570c9587b5b41955b6664046de1fc335c0a05/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4570c9587b5b41955b6664046de1fc335c0a05/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=2c4570c9587b5b41955b6664046de1fc335c0a05", "patch": "@@ -892,7 +892,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::OpaqueDef(_, arg_list) => {\n                 self.hash_generic_args(arg_list);\n             },\n-            TyKind::TraitObject(_, lifetime) => {\n+            TyKind::TraitObject(_, lifetime, _) => {\n                 self.hash_lifetime(lifetime);\n             },\n             TyKind::Typeof(anon_const) => {"}]}