{"sha": "1ad7e7097ae9274d74b16899e25c65d125159bd4", "node_id": "C_kwDOAAsO6NoAKDFhZDdlNzA5N2FlOTI3NGQ3NGIxNjg5OWUyNWM2NWQxMjUxNTliZDQ", "commit": {"author": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-03-10T07:06:35Z"}, "committer": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-03-10T07:06:35Z"}, "message": "remove parameters that are only used in recursion", "tree": {"sha": "d0bfec361895db8a5330fa48ee8b5e225c82003d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0bfec361895db8a5330fa48ee8b5e225c82003d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad7e7097ae9274d74b16899e25c65d125159bd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEErNAvdl6JhsmcOZwWK4aJjMsqVIYFAmIpo3sACgkQK4aJjMsq\nVIZ24BAAxdwTgo/zVXhnM52t0ba9XzUsFPWu9+53SFjxMj5dehPO6IbUNeURGxvv\nVPyyrntMi8MtlQCFERIHUaP4VNjYLDRZhHcIadHhvUUnyyIj0/E0TgyNhHINDqXy\ntrvbOCCcHxnJm8bDGdPyHL0C+BOvsUHCHLjl2Nt78z3vo4kPxcaAn1bjcVsIetwm\nXzPlE4Scim0KoQfGIpHDq9yuCVtDSx+Kr4ONAxa37PV5mNNIT3/4oeZWnAW8w7tk\n6CGxTSCLqNTT8ppmyNDoRiDZiJYmJxek+GWdSymMzcSyzdTZkH9zLp0FrLgVQRcy\nHE8zzcJ8Elh0nD2Ep0CaWw69FIl8yabgyWkWfHPA4JzkjfrXixAEnQ+mUg09vwHQ\npMP3Q4S4VMjDyoI+SNOzWrWFqbR9n7xRJU6QeZmTHOl6S5LjP3yM+fIbzr2yQtZ3\nIcT+j8OxUXRw9fZZELUHsqSFOCW60V6m07lKRkawZCCimS/amkRtSu4sK1PCd6ow\nHXfKrWWLpFmCFx/OGE2xTwwsCtrrdWMmXgHAcOEzeHE9CoVgzr5TR9GijWZ3/0LK\ndsIE8424+pdbfflm/yPap27vqp+zl9WVGEU/5njuJCt6QMMkqQzBBXOWymnommSV\nB48cw+oD22Sff0i85bRUDEE4KnGvzJzomF7wkUjrvPWQCEgjxkg=\n=zu7x\n-----END PGP SIGNATURE-----", "payload": "tree d0bfec361895db8a5330fa48ee8b5e225c82003d\nparent 52d35dca6a91908c963c207cc93f2cf0f800dcea\nauthor Jaeyong Sung <jaeyong0201@gmail.com> 1646895995 +0900\ncommitter Jaeyong Sung <jaeyong0201@gmail.com> 1646895995 +0900\n\nremove parameters that are only used in recursion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad7e7097ae9274d74b16899e25c65d125159bd4", "html_url": "https://github.com/rust-lang/rust/commit/1ad7e7097ae9274d74b16899e25c65d125159bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad7e7097ae9274d74b16899e25c65d125159bd4/comments", "author": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52d35dca6a91908c963c207cc93f2cf0f800dcea", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d35dca6a91908c963c207cc93f2cf0f800dcea", "html_url": "https://github.com/rust-lang/rust/commit/52d35dca6a91908c963c207cc93f2cf0f800dcea"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "899568a933f7afe196b890a5f81e146aca01ec2a", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ad7e7097ae9274d74b16899e25c65d125159bd4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ad7e7097ae9274d74b16899e25c65d125159bd4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=1ad7e7097ae9274d74b16899e25c65d125159bd4", "patch": "@@ -123,7 +123,7 @@ impl QuestionMark {\n     }\n \n     fn result_check_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>, nested_expr: &Expr<'_>) -> bool {\n-        Self::is_result(cx, expr) && Self::expression_returns_unmodified_err(cx, nested_expr, expr)\n+        Self::is_result(cx, expr) && Self::expression_returns_unmodified_err(nested_expr, expr)\n     }\n \n     fn option_check_and_early_return(cx: &LateContext<'_>, expr: &Expr<'_>, nested_expr: &Expr<'_>) -> bool {\n@@ -156,9 +156,9 @@ impl QuestionMark {\n         }\n     }\n \n-    fn expression_returns_unmodified_err(cx: &LateContext<'_>, expr: &Expr<'_>, cond_expr: &Expr<'_>) -> bool {\n+    fn expression_returns_unmodified_err(expr: &Expr<'_>, cond_expr: &Expr<'_>) -> bool {\n         match peel_blocks_with_stmt(expr).kind {\n-            ExprKind::Ret(Some(ret_expr)) => Self::expression_returns_unmodified_err(cx, ret_expr, cond_expr),\n+            ExprKind::Ret(Some(ret_expr)) => Self::expression_returns_unmodified_err(ret_expr, cond_expr),\n             ExprKind::Path(_) => path_to_local(expr).is_some() && path_to_local(expr) == path_to_local(cond_expr),\n             _ => false,\n         }"}]}