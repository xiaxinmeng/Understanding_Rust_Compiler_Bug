{"sha": "1df6f8321b4745a7ec356faaadb2a1ea00097022", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZjZmODMyMWI0NzQ1YTdlYzM1NmZhYWFkYjJhMWVhMDAwOTcwMjI=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-10-30T07:36:03Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:49Z"}, "message": "Remove duplicated functions from trans::common.rs", "tree": {"sha": "3bbbd8f0aa319353e5bd1f98447dfbf884f3df41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bbbd8f0aa319353e5bd1f98447dfbf884f3df41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1df6f8321b4745a7ec356faaadb2a1ea00097022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1df6f8321b4745a7ec356faaadb2a1ea00097022", "html_url": "https://github.com/rust-lang/rust/commit/1df6f8321b4745a7ec356faaadb2a1ea00097022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1df6f8321b4745a7ec356faaadb2a1ea00097022/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7996f63ce48490ea446499550c7e65a82930aae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7996f63ce48490ea446499550c7e65a82930aae2", "html_url": "https://github.com/rust-lang/rust/commit/7996f63ce48490ea446499550c7e65a82930aae2"}], "stats": {"total": 84, "additions": 22, "deletions": 62}, "files": [{"sha": "32dc1067d37c1a8e1484470f636e6ba238e7ceaa", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -11,7 +11,7 @@\n use llvm::{self, ValueRef, AttributePlace};\n use base;\n use builder::Builder;\n-use common::{instance_ty, ty_fn_sig, C_usize};\n+use common::{ty_fn_sig, C_usize};\n use context::CrateContext;\n use cabi_x86;\n use cabi_x86_64;\n@@ -649,7 +649,7 @@ pub struct FnType<'tcx> {\n impl<'a, 'tcx> FnType<'tcx> {\n     pub fn of_instance(ccx: &CrateContext<'a, 'tcx>, instance: &ty::Instance<'tcx>)\n                        -> Self {\n-        let fn_ty = instance_ty(ccx.tcx(), &instance);\n+        let fn_ty = instance.ty(ccx.tcx());\n         let sig = ty_fn_sig(ccx, fn_ty);\n         let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&sig);\n         FnType::new(ccx, sig, &[])"}, {"sha": "fd470475071563478a9df08b0dd4ce137e8f3401", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -468,7 +468,7 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n     // release builds.\n     info!(\"trans_instance({})\", instance);\n \n-    let fn_ty = common::instance_ty(ccx.tcx(), &instance);\n+    let fn_ty = instance.ty(ccx.tcx());\n     let sig = common::ty_fn_sig(ccx, fn_ty);\n     let sig = ccx.tcx().erase_late_bound_regions_and_normalize(&sig);\n "}, {"sha": "0a0f2615a1bd162242051521a0a71ae9adface6a", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -48,7 +48,7 @@ pub fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     assert!(!instance.substs.has_escaping_regions());\n     assert!(!instance.substs.has_param_types());\n \n-    let fn_ty = common::instance_ty(ccx.tcx(), &instance);\n+    let fn_ty = instance.ty(ccx.tcx());\n     if let Some(&llfn) = ccx.instances().borrow().get(&instance) {\n         return llfn;\n     }\n@@ -96,7 +96,7 @@ pub fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         assert_eq!(common::val_ty(llfn), llptrty);\n         debug!(\"get_fn: not casting pointer!\");\n \n-        if common::is_inline_instance(tcx, &instance) {\n+        if instance.def.is_inline(tcx) {\n             attributes::inline(llfn, attributes::InlineAttr::Hint);\n         }\n         let attrs = instance.def.attrs(ccx.tcx());"}, {"sha": "b1bdee3fa5fc55c620400ad4e2cd84a960e11dea", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -16,7 +16,6 @@ use llvm;\n use llvm::{ValueRef, ContextRef, TypeKind};\n use llvm::{True, False, Bool, OperandBundleDef};\n use rustc::hir::def_id::DefId;\n-use rustc::hir::map::DefPathData;\n use rustc::middle::lang_items::LangItem;\n use abi;\n use base;\n@@ -29,7 +28,7 @@ use value::Value;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{HasDataLayout, LayoutOf};\n-use rustc::ty::subst::{Kind, Substs};\n+use rustc::ty::subst::Kind;\n use rustc::hir;\n \n use libc::{c_uint, c_char};\n@@ -430,38 +429,3 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n-pub fn is_inline_instance<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    instance: &ty::Instance<'tcx>\n-) -> bool {\n-    let def_id = match instance.def {\n-        ty::InstanceDef::Item(def_id) => def_id,\n-        ty::InstanceDef::DropGlue(_, Some(_)) => return false,\n-        _ => return true\n-    };\n-    match tcx.def_key(def_id).disambiguated_data.data {\n-        DefPathData::StructCtor |\n-        DefPathData::EnumVariant(..) |\n-        DefPathData::ClosureExpr => true,\n-        _ => false\n-    }\n-}\n-\n-/// Given a DefId and some Substs, produces the monomorphic item type.\n-pub fn def_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                        def_id: DefId,\n-                        substs: &'tcx Substs<'tcx>)\n-                        -> Ty<'tcx>\n-{\n-    let ty = tcx.type_of(def_id);\n-    tcx.trans_apply_param_substs(substs, &ty)\n-}\n-\n-/// Return the substituted type of an instance.\n-pub fn instance_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             instance: &ty::Instance<'tcx>)\n-                             -> Ty<'tcx>\n-{\n-    let ty = instance.def.def_ty(tcx);\n-    tcx.trans_apply_param_substs(instance.substs, &ty)\n-}"}, {"sha": "226eec647a83c048d8ddbe8de8c604be0339353b", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -17,7 +17,7 @@ use rustc::middle::const_val::ConstEvalErr;\n use debuginfo;\n use base;\n use trans_item::{MonoItem, MonoItemExt};\n-use common::{self, CrateContext, val_ty};\n+use common::{CrateContext, val_ty};\n use declare;\n use monomorphize::Instance;\n use type_::Type;\n@@ -110,7 +110,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n         return g;\n     }\n \n-    let ty = common::instance_ty(ccx.tcx(), &instance);\n+    let ty = instance.ty(ccx.tcx());\n     let g = if let Some(id) = ccx.tcx().hir.as_local_node_id(def_id) {\n \n         let llty = ccx.layout_of(ty).llvm_type(ccx);\n@@ -266,7 +266,7 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         };\n \n         let instance = Instance::mono(ccx.tcx(), def_id);\n-        let ty = common::instance_ty(ccx.tcx(), &instance);\n+        let ty = instance.ty(ccx.tcx());\n         let llty = ccx.layout_of(ty).llvm_type(ccx);\n         let g = if val_llty == llty {\n             g"}, {"sha": "12cd874f86887ee54ae287ad717fb4241b00a994", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -27,10 +27,10 @@ use llvm::debuginfo::{DIType, DIFile, DIScope, DIDescriptor,\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ty::fold::TypeVisitor;\n-use rustc::ty::subst::Substs;\n use rustc::ty::util::TypeIdHasher;\n use rustc::ich::Fingerprint;\n-use common::{self, CrateContext};\n+use rustc::ty::Instance;\n+use common::CrateContext;\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n use rustc::session::{Session, config};\n@@ -1656,7 +1656,7 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     };\n \n     let is_local_to_unit = is_node_local_to_unit(cx, node_id);\n-    let variable_type = common::def_ty(cx.tcx(), node_def_id, Substs::empty());\n+    let variable_type = Instance::mono(cx.tcx(), node_def_id).ty(cx.tcx());\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = tcx.item_name(node_def_id).to_string();\n     let linkage_name = mangled_name_of_item(cx, node_def_id, \"\");"}, {"sha": "228b83a58ad9682dc343834036ed278a3a12c575", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -27,7 +27,7 @@ use rustc::hir::def_id::{DefId, CrateNum};\n use rustc::ty::subst::Substs;\n \n use abi::Abi;\n-use common::{self, CrateContext};\n+use common::CrateContext;\n use builder::Builder;\n use monomorphize::Instance;\n use rustc::ty::{self, Ty};\n@@ -428,7 +428,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // If the method does *not* belong to a trait, proceed\n             if cx.tcx().trait_id_of_impl(impl_def_id).is_none() {\n                 let impl_self_ty =\n-                    common::def_ty(cx.tcx(), impl_def_id, instance.substs);\n+                    Instance::new(impl_def_id, instance.substs).ty(cx.tcx());\n \n                 // Only \"class\" methods are generally understood by LLVM,\n                 // so avoid methods on other types (e.g. `<*mut T>::null`)."}, {"sha": "1cb3a66e4d8cf84860826f91bdcbd8f46adb893b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 args = &args[..1 + place.has_extra() as usize];\n                 let (drop_fn, fn_ty) = match ty.sty {\n                     ty::TyDynamic(..) => {\n-                        let fn_ty = common::instance_ty(bcx.ccx.tcx(), &drop_fn);\n+                        let fn_ty = drop_fn.ty(bcx.ccx.tcx());\n                         let sig = common::ty_fn_sig(bcx.ccx, fn_ty);\n                         let sig = bcx.tcx().erase_late_bound_regions_and_normalize(&sig);\n                         let fn_ty = FnType::new_vtable(bcx.ccx, sig, &[]);\n@@ -535,8 +535,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                     }).collect();\n \n \n-                    let callee_ty = common::instance_ty(\n-                        bcx.ccx.tcx(), instance.as_ref().unwrap());\n+                    let callee_ty = instance.as_ref().unwrap().ty(bcx.ccx.tcx());\n                     trans_intrinsic_call(&bcx, callee_ty, &fn_ty, &args, dest,\n                                          terminator.source_info.span);\n "}, {"sha": "9d5b4e9893c95bcccbfd7c5eb97eee6039615778", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -103,7 +103,6 @@\n //! inlining, even when they are not marked #[inline].\n \n use rustc_mir::monomorphize::collector::InliningMap;\n-use common;\n use rustc::dep_graph::WorkProductId;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n@@ -115,6 +114,7 @@ use std::collections::hash_map::Entry;\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n use trans_item::{MonoItem, BaseMonoItemExt, MonoItemExt, InstantiationMode};\n+use rustc::ty::Instance;\n \n pub use rustc::mir::mono::CodegenUnit;\n \n@@ -575,7 +575,7 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n                 // This is a method within an inherent impl, find out what the\n                 // self-type is:\n-                let impl_self_ty = common::def_ty(tcx, impl_def_id, instance.substs);\n+                let impl_self_ty = Instance::new(impl_def_id, instance.substs).ty(tcx);\n                 if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                     return Some(def_id);\n                 }"}, {"sha": "8270168642f6c25792361dbd585a35891516d9a0", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -19,7 +19,6 @@ use attributes;\n use base;\n use consts;\n use context::CrateContext;\n-use common;\n use declare;\n use llvm;\n use monomorphize::Instance;\n@@ -173,7 +172,7 @@ fn predefine_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                               symbol_name: &str) {\n     let def_id = ccx.tcx().hir.local_def_id(node_id);\n     let instance = Instance::mono(ccx.tcx(), def_id);\n-    let ty = common::instance_ty(ccx.tcx(), &instance);\n+    let ty = instance.ty(ccx.tcx());\n     let llty = ccx.layout_of(ty).llvm_type(ccx);\n \n     let g = declare::define_global(ccx, symbol_name, llty).unwrap_or_else(|| {\n@@ -198,7 +197,7 @@ fn predefine_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     assert!(!instance.substs.needs_infer() &&\n             !instance.substs.has_param_types());\n \n-    let mono_ty = common::instance_ty(ccx.tcx(), &instance);\n+    let mono_ty = instance.ty(ccx.tcx());\n     let attrs = instance.def.attrs(ccx.tcx());\n     let lldecl = declare::declare_fn(ccx, symbol_name, mono_ty);\n     unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n@@ -224,7 +223,7 @@ fn predefine_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n \n     debug!(\"predefine_fn: mono_ty = {:?} instance = {:?}\", mono_ty, instance);\n-    if common::is_inline_instance(ccx.tcx(), &instance) {\n+    if instance.def.is_inline(ccx.tcx()) {\n         attributes::inline(lldecl, attributes::InlineAttr::Hint);\n     }\n     attributes::from_fn_attrs(ccx, &attrs, lldecl);"}, {"sha": "e8651d373df65809b0c478b80a645d02a0438d60", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df6f8321b4745a7ec356faaadb2a1ea00097022/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=1df6f8321b4745a7ec356faaadb2a1ea00097022", "patch": "@@ -44,8 +44,6 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::map as hir_map;\n use rustc::util::nodemap::NodeSet;\n \n-use syntax::attr;\n-\n pub mod link;\n pub mod trans_crate;\n \n@@ -104,7 +102,7 @@ pub fn find_exported_symbols<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> NodeSet {\n                 (generics.parent_types == 0 && generics.types.is_empty()) &&\n                 // Functions marked with #[inline] are only ever translated\n                 // with \"internal\" linkage and are never exported.\n-                !common::requests_inline(tcx, &Instance::mono(tcx, def_id))\n+                !Instance::mono(tcx, def_id).def.requires_local(tcx)\n             }\n \n             _ => false"}]}