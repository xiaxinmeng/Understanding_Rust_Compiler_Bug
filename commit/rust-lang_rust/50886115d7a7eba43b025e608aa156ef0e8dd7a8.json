{"sha": "50886115d7a7eba43b025e608aa156ef0e8dd7a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwODg2MTE1ZDdhN2ViYTQzYjAyNWU2MDhhYTE1NmVmMGU4ZGQ3YTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-04T02:17:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-06T20:55:53Z"}, "message": "Address review comments\n\nAdjust a few fulldeps and pretty-printing tests\nFix rebase", "tree": {"sha": "88c1cd29941cf3a222b83be31fed782a8157301f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88c1cd29941cf3a222b83be31fed782a8157301f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50886115d7a7eba43b025e608aa156ef0e8dd7a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50886115d7a7eba43b025e608aa156ef0e8dd7a8", "html_url": "https://github.com/rust-lang/rust/commit/50886115d7a7eba43b025e608aa156ef0e8dd7a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50886115d7a7eba43b025e608aa156ef0e8dd7a8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb64672e0cfccb6d447fddd0ca3e74d0f1de542f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb64672e0cfccb6d447fddd0ca3e74d0f1de542f", "html_url": "https://github.com/rust-lang/rust/commit/cb64672e0cfccb6d447fddd0ca3e74d0f1de542f"}], "stats": {"total": 144, "additions": 60, "deletions": 84}, "files": [{"sha": "d680b2d9f7d745112bdaede946922cf5f4ae3aec", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -329,6 +329,9 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n             self.report_proc_macro_stub(invoc.span());\n             return Err(Determinacy::Determined);\n         } else if let Def::NonMacroAttr(attr_kind) = def {\n+            // Note that not only attributes, but anything in macro namespace can result in a\n+            // `Def::NonMacroAttr` definition (e.g. `inline!()`), so we must report the error\n+            // below for these cases.\n             let is_attr_invoc =\n                 if let InvocationKind::Attr { .. } = invoc.kind { true } else { false };\n             let path = invoc.path().expect(\"no path for non-macro attr\");\n@@ -604,7 +607,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // 3. Builtin attributes (closed, controlled).\n \n         assert!(ns == TypeNS  || ns == MacroNS);\n-        let force = force || record_used;\n+        assert!(force || !record_used); // `record_used` implies `force`\n         ident = ident.modern();\n \n         // Names from inner scope that can't shadow names from outer scopes, e.g.\n@@ -789,7 +792,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n         let determinacy = Determinacy::determined(force);\n         if determinacy == Determinacy::Determined && is_attr {\n-            // For attributes interpret determinate \"no solution\" as a custom attribute.\n+            // For single-segment attributes interpret determinate \"no resolution\" as a custom\n+            // attribute. (Lexical resolution implies the first segment and is_attr should imply\n+            // the last segment, so we are certainly working with a single-segment attribute here.)\n+            assert!(ns == MacroNS);\n             let binding = (Def::NonMacroAttr(NonMacroAttrKind::Custom),\n                            ty::Visibility::Public, ident.span, Mark::root())\n                            .to_name_binding(self.arenas);"}, {"sha": "12941a85669876c456c6595f774a9a502615ad14", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -516,6 +516,15 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     }\n \n     fn expand_invoc(&mut self, invoc: Invocation, ext: &SyntaxExtension) -> Option<AstFragment> {\n+        if invoc.fragment_kind == AstFragmentKind::ForeignItems &&\n+           !self.cx.ecfg.macros_in_extern_enabled() {\n+            if let SyntaxExtension::NonMacroAttr { .. } = *ext {} else {\n+                emit_feature_err(&self.cx.parse_sess, \"macros_in_extern\",\n+                                 invoc.span(), GateIssue::Language,\n+                                 \"macro invocations in `extern {}` blocks are experimental\");\n+            }\n+        }\n+\n         let result = match invoc.kind {\n             InvocationKind::Bang { .. } => self.expand_bang_invoc(invoc, ext)?,\n             InvocationKind::Attr { .. } => self.expand_attr_invoc(invoc, ext)?,\n@@ -549,6 +558,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         if let NonMacroAttr { mark_used: false } = *ext {} else {\n+            // Macro attrs are always used when expanded,\n+            // non-macro attrs are considered used when the field says so.\n             attr::mark_used(&attr);\n         }\n         invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n@@ -1482,34 +1493,14 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                          foreign_item: ast::ForeignItem) -> SmallVector<ast::ForeignItem> {\n         let (attr, traits, foreign_item) = self.classify_item(foreign_item);\n \n-        let explain = if self.cx.ecfg.use_extern_macros_enabled() {\n-            feature_gate::EXPLAIN_PROC_MACROS_IN_EXTERN\n-        } else {\n-            feature_gate::EXPLAIN_MACROS_IN_EXTERN\n-        };\n-\n-        if attr.is_some() || !traits.is_empty()  {\n-            if !self.cx.ecfg.macros_in_extern_enabled() &&\n-               !self.cx.ecfg.custom_attribute_enabled() {\n-                if let Some(ref attr) = attr {\n-                    emit_feature_err(&self.cx.parse_sess, \"macros_in_extern\", attr.span,\n-                                     GateIssue::Language, explain);\n-                }\n-            }\n-\n+        if attr.is_some() || !traits.is_empty() {\n             let item = Annotatable::ForeignItem(P(foreign_item));\n             return self.collect_attr(attr, traits, item, AstFragmentKind::ForeignItems)\n                 .make_foreign_items();\n         }\n \n         if let ast::ForeignItemKind::Macro(mac) = foreign_item.node {\n             self.check_attributes(&foreign_item.attrs);\n-\n-            if !self.cx.ecfg.macros_in_extern_enabled() {\n-                emit_feature_err(&self.cx.parse_sess, \"macros_in_extern\", foreign_item.span,\n-                                 GateIssue::Language, explain);\n-            }\n-\n             return self.collect_bang(mac, foreign_item.span, AstFragmentKind::ForeignItems)\n                 .make_foreign_items();\n         }\n@@ -1671,7 +1662,6 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_custom_derive = custom_derive,\n         fn enable_format_args_nl = format_args_nl,\n         fn macros_in_extern_enabled = macros_in_extern,\n-        fn custom_attribute_enabled = custom_attribute,\n         fn proc_macro_mod = proc_macro_mod,\n         fn proc_macro_gen = proc_macro_gen,\n         fn proc_macro_expr = proc_macro_expr,"}, {"sha": "119505896d69ad99e2773c4b58205b7d56f7c56d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -1354,13 +1354,6 @@ pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &'static str =\n pub const EXPLAIN_MACRO_AT_MOST_ONCE_REP: &'static str =\n     \"using the `?` macro Kleene operator for \\\"at most one\\\" repetition is unstable\";\n \n-pub const EXPLAIN_MACROS_IN_EXTERN: &'static str =\n-    \"macro invocations in `extern {}` blocks are experimental.\";\n-\n-// mention proc-macros when enabled\n-pub const EXPLAIN_PROC_MACROS_IN_EXTERN: &'static str =\n-    \"macro and proc-macro invocations in `extern {}` blocks are experimental.\";\n-\n struct PostExpansionVisitor<'a> {\n     context: &'a Context<'a>,\n }\n@@ -1969,7 +1962,6 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                     ).emit();\n                 } else {\n                     set(&mut features, mi.span);\n-                    feature_checker.collect(&features, mi.span);\n                     features.declared_lang_features.push((name, mi.span, None));\n                 }\n                 continue"}, {"sha": "f71d4b86f1e0147f40878fce5c509e519abdf654", "filename": "src/test/compile-fail-fulldeps/proc-macro/issue-41211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fissue-41211.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -15,7 +15,7 @@\n \n #![feature(use_extern_macros)]\n #![emit_unchanged]\n-//~^ ERROR: cannot find attribute macro `emit_unchanged` in this scope\n+//~^ ERROR attribute `emit_unchanged` is currently unknown to the compiler\n extern crate issue_41211;\n use issue_41211::emit_unchanged;\n "}, {"sha": "e418ecc114cc1112a16e7494773a9fce987df938", "filename": "src/test/compile-fail-fulldeps/proc-macro/macros-in-extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacros-in-extern.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -26,13 +26,13 @@ fn main() {\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     #[no_output]\n-    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     fn some_definitely_unknown_symbol_which_should_be_removed();\n \n     #[nop_attr]\n-    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     fn rust_get_test_int() -> isize;\n \n     emit_input!(fn rust_dbg_extern_identity_u32(arg: u32) -> u32;);\n-    //~^ ERROR macro and proc-macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }"}, {"sha": "40053853b15a7e2802fba2c2b88ee41abb346b6a", "filename": "src/test/compile-fail/macros-in-extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-in-extern.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -34,9 +34,9 @@ fn main() {\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     returns_isize!(rust_get_test_int);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     emits_nothing!();\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }"}, {"sha": "ce157e3632c70a5f67f07331e0f9ad23e43fc3a3", "filename": "src/test/pretty/attr-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fpretty%2Fattr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fpretty%2Fattr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-literals.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     #[align = 8]\n     fn f() { }\n \n-    #[vec(1, 2, 3)]\n+    #[vector(1, 2, 3)]\n     fn g() { }\n }"}, {"sha": "1940151357c8f82a478b434f6943ce8e0394623f", "filename": "src/test/ui-fulldeps/resolve-error.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -13,7 +13,7 @@\n // aux-build:attr_proc_macro.rs\n // aux-build:bang_proc_macro.rs\n \n-#![feature(use_extern_macros)]\n+#![feature(custom_attribute)]\n \n #[macro_use]\n extern crate derive_foo;\n@@ -37,12 +37,10 @@ macro_rules! attr_proc_mac {\n //~^ ERROR cannot find\n struct Foo;\n \n-#[attr_proc_macra]\n-//~^ ERROR cannot find\n+#[attr_proc_macra] // OK, interpreted as a custom attribute\n struct Bar;\n \n-#[FooWithLongNan]\n-//~^ ERROR cannot find\n+#[FooWithLongNan]  // OK, interpreted as a custom attribute\n struct Asdf;\n \n #[derive(Dlone)]"}, {"sha": "278409c688ab9dcfa581b523f3578aa17ed13062", "filename": "src/test/ui-fulldeps/resolve-error.stderr", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fresolve-error.stderr?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -4,59 +4,47 @@ error: cannot find derive macro `FooWithLongNan` in this scope\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n \n-error: cannot find attribute macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:40:3\n-   |\n-LL | #[attr_proc_macra]\n-   |   ^^^^^^^^^^^^^^^ help: try: `attr_proc_macro`\n-\n-error: cannot find attribute macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:44:3\n-   |\n-LL | #[FooWithLongNan]\n-   |   ^^^^^^^^^^^^^^\n-\n error: cannot find derive macro `Dlone` in this scope\n-  --> $DIR/resolve-error.rs:48:10\n+  --> $DIR/resolve-error.rs:46:10\n    |\n LL | #[derive(Dlone)]\n    |          ^^^^^ help: try: `Clone`\n \n error: cannot find derive macro `Dlona` in this scope\n-  --> $DIR/resolve-error.rs:52:10\n+  --> $DIR/resolve-error.rs:50:10\n    |\n LL | #[derive(Dlona)]\n    |          ^^^^^ help: try: `Clona`\n \n error: cannot find derive macro `attr_proc_macra` in this scope\n-  --> $DIR/resolve-error.rs:56:10\n+  --> $DIR/resolve-error.rs:54:10\n    |\n LL | #[derive(attr_proc_macra)]\n    |          ^^^^^^^^^^^^^^^\n \n error: cannot find macro `FooWithLongNama!` in this scope\n-  --> $DIR/resolve-error.rs:61:5\n+  --> $DIR/resolve-error.rs:59:5\n    |\n LL |     FooWithLongNama!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `FooWithLongNam`\n \n error: cannot find macro `attr_proc_macra!` in this scope\n-  --> $DIR/resolve-error.rs:64:5\n+  --> $DIR/resolve-error.rs:62:5\n    |\n LL |     attr_proc_macra!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `attr_proc_mac`\n \n error: cannot find macro `Dlona!` in this scope\n-  --> $DIR/resolve-error.rs:67:5\n+  --> $DIR/resolve-error.rs:65:5\n    |\n LL |     Dlona!();\n    |     ^^^^^\n \n error: cannot find macro `bang_proc_macrp!` in this scope\n-  --> $DIR/resolve-error.rs:70:5\n+  --> $DIR/resolve-error.rs:68:5\n    |\n LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "ad8e0e76e14137511b0b0599eb31eb1add49bbcd", "filename": "src/test/ui/custom-attribute-multisegment.rs", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,18 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:attr_proc_macro.rs\n-// ignore-tidy-linelength\n+// Unresolved multi-segment attributes are not treated as custom.\n \n-#![feature(custom_attribute)]\n-//~^ ERROR Cannot use `#![feature(use_extern_macros)]` and `#![feature(custom_attribute)] at the same time\n+#![feature(custom_attribute, proc_macro_path_invoc)]\n \n-extern crate attr_proc_macro;\n-use attr_proc_macro::attr_proc_macro;\n+mod existent {}\n \n-#[attr_proc_macro]\n-fn foo() {}\n-\n-fn main() {\n-    foo();\n-}\n+#[existent::nonexistent] //~ ERROR failed to resolve. Could not find `nonexistent` in `existent`\n+fn main() {}", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-custom-attr-mutex.rs"}, {"sha": "ff72d1c36d85244f2e93998d5330afea914043cd", "filename": "src/test/ui/custom-attribute-multisegment.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve. Could not find `nonexistent` in `existent`\n+  --> $DIR/custom-attribute-multisegment.rs:17:13\n+   |\n+LL | #[existent::nonexistent] //~ ERROR failed to resolve. Could not find `nonexistent` in `existent`\n+   |             ^^^^^^^^^^^ Could not find `nonexistent` in `existent`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "77080e3c348f99390781f48e54d0925a895311df", "filename": "src/test/ui/feature-gate-macros_in_extern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.rs?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -27,9 +27,9 @@ macro_rules! emits_nothing(\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     returns_isize!(rust_get_test_int);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n     emits_nothing!();\n-    //~^ ERROR macro invocations in `extern {}` blocks are experimental.\n+    //~^ ERROR macro invocations in `extern {}` blocks are experimental\n }"}, {"sha": "23b63078dbf8e7c0126e210b042b40dad5a7d949", "filename": "src/test/ui/feature-gate-macros_in_extern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50886115d7a7eba43b025e608aa156ef0e8dd7a8/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macros_in_extern.stderr?ref=50886115d7a7eba43b025e608aa156ef0e8dd7a8", "patch": "@@ -1,20 +1,20 @@\n-error[E0658]: macro and proc-macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:29:5\n    |\n LL |     returns_isize!(rust_get_test_int);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro and proc-macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:31:5\n    |\n LL |     takes_u32_returns_u32!(rust_dbg_extern_identity_u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(macros_in_extern)] to the crate attributes to enable\n \n-error[E0658]: macro and proc-macro invocations in `extern {}` blocks are experimental. (see issue #49476)\n+error[E0658]: macro invocations in `extern {}` blocks are experimental (see issue #49476)\n   --> $DIR/feature-gate-macros_in_extern.rs:33:5\n    |\n LL |     emits_nothing!();"}]}