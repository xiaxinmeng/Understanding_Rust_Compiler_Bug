{"sha": "cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2Q0MGY5YjU1MjM2N2E4ZDFiYjk1OGI0MjFhMmU1ZTY1YzI4YWI=", "commit": {"author": {"name": "oli", "email": "oli@uhura.edef.eu", "date": "2020-10-26T19:00:40Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-04T21:40:38Z"}, "message": "Keep an unoptimized duplicate of `const fn` around\nThis allows CTFE to reliably detect UB, as otherwise\noptimizations may hide UB.", "tree": {"sha": "7c894f6159623e06ef390fbf41f6d3f3c2e8263b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c894f6159623e06ef390fbf41f6d3f3c2e8263b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "html_url": "https://github.com/rust-lang/rust/commit/cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/comments", "author": null, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e4fe6647f360f5175fd4984f3b5683606fe6879", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4fe6647f360f5175fd4984f3b5683606fe6879", "html_url": "https://github.com/rust-lang/rust/commit/8e4fe6647f360f5175fd4984f3b5683606fe6879"}], "stats": {"total": 424, "additions": 312, "deletions": 112}, "files": [{"sha": "ae8b379703a8921523b44aa268f99157db1f1e0c", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -1162,6 +1162,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn is_item_mir_available(&self, id: DefIndex) -> bool {\n         self.root.tables.mir.get(self, id).is_some()\n+            || self.root.tables.mir_for_ctfe.get(self, id).is_some()\n     }\n \n     fn module_expansion(&self, id: DefIndex, sess: &Session) -> ExpnId {\n@@ -1183,6 +1184,17 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, tcx))\n     }\n \n+    fn get_mir_for_ctfe(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {\n+        self.root\n+            .tables\n+            .mir_for_ctfe\n+            .get(self, id)\n+            .unwrap_or_else(|| {\n+                bug!(\"get_mir_for_ctfe: missing MIR for `{:?}`\", self.local_def_id(id))\n+            })\n+            .decode((self, tcx))\n+    }\n+\n     fn get_mir_abstract_const(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "0398f9667b62a34621653a37fe5ddf831dfe2664", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -115,6 +115,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         })\n     }\n     optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n+    mir_for_ctfe => { tcx.arena.alloc(cdata.get_mir_for_ctfe(tcx, def_id.index)) }\n     promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     mir_abstract_const => { cdata.get_mir_abstract_const(tcx, def_id.index) }\n     unused_generic_params => { cdata.get_unused_generic_params(def_id.index) }"}, {"sha": "e74b2935ec35f6c36cc392a1be124ceb52eeb9ec", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 69, "deletions": 18, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -787,6 +787,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n+        self.encode_mir_for_ctfe(def_id.expect_local());\n         self.encode_optimized_mir(def_id.expect_local());\n         self.encode_promoted_mir(def_id.expect_local());\n     }\n@@ -895,6 +896,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n         self.encode_optimized_mir(def_id.expect_local());\n+        self.encode_mir_for_ctfe(def_id.expect_local());\n         self.encode_promoted_mir(def_id.expect_local());\n     }\n \n@@ -1015,7 +1017,13 @@ impl EncodeContext<'a, 'tcx> {\n         // This should be kept in sync with `PrefetchVisitor.visit_trait_item`.\n         match trait_item.kind {\n             ty::AssocKind::Type => {}\n-            ty::AssocKind::Const | ty::AssocKind::Fn => {\n+            ty::AssocKind::Const => {\n+                if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id.expect_local()) {\n+                    self.encode_mir_for_ctfe(def_id.expect_local());\n+                    self.encode_promoted_mir(def_id.expect_local());\n+                }\n+            }\n+            ty::AssocKind::Fn => {\n                 if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id.expect_local()) {\n                     self.encode_optimized_mir(def_id.expect_local());\n                     self.encode_promoted_mir(def_id.expect_local());\n@@ -1094,23 +1102,28 @@ impl EncodeContext<'a, 'tcx> {\n \n         // The following part should be kept in sync with `PrefetchVisitor.visit_impl_item`.\n \n-        let mir = match ast_item.kind {\n-            hir::ImplItemKind::Const(..) => true,\n+        let (mir, mir_const) = match ast_item.kind {\n+            hir::ImplItemKind::Const(..) => (false, true),\n             hir::ImplItemKind::Fn(ref sig, _) => {\n                 let generics = self.tcx.generics_of(def_id);\n                 let needs_inline = (generics.requires_monomorphization(self.tcx)\n                     || tcx.codegen_fn_attrs(def_id).requests_inline())\n                     && !self.metadata_output_only();\n                 let is_const_fn = sig.header.constness == hir::Constness::Const;\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || is_const_fn || always_encode_mir\n+                (needs_inline || always_encode_mir, is_const_fn)\n             }\n-            hir::ImplItemKind::TyAlias(..) => false,\n+            hir::ImplItemKind::TyAlias(..) => (false, false),\n         };\n         if mir {\n             self.encode_optimized_mir(def_id.expect_local());\n+        }\n+        if mir || mir_const {\n             self.encode_promoted_mir(def_id.expect_local());\n         }\n+        if mir_const {\n+            self.encode_mir_for_ctfe(def_id.expect_local());\n+        }\n     }\n \n     fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {\n@@ -1121,9 +1134,9 @@ impl EncodeContext<'a, 'tcx> {\n         self.lazy(param_names.iter())\n     }\n \n-    fn encode_optimized_mir(&mut self, def_id: LocalDefId) {\n-        debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n-        record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n+    fn encode_mir_for_ctfe(&mut self, def_id: LocalDefId) {\n+        debug!(\"EntryBuilder::encode_mir_for_ctfe({:?})\", def_id);\n+        record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));\n \n         let unused = self.tcx.unused_generic_params(def_id);\n         if !unused.is_empty() {\n@@ -1136,6 +1149,16 @@ impl EncodeContext<'a, 'tcx> {\n         }\n     }\n \n+    fn encode_optimized_mir(&mut self, def_id: LocalDefId) {\n+        debug!(\"EntryBuilder::encode_optimized_mir({:?})\", def_id);\n+        record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n+\n+        let unused = self.tcx.unused_generic_params(def_id);\n+        if !unused.is_empty() {\n+            record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n+        }\n+    }\n+\n     fn encode_promoted_mir(&mut self, def_id: LocalDefId) {\n         debug!(\"EncodeContext::encode_promoted_mir({:?})\", def_id);\n         record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));\n@@ -1407,8 +1430,8 @@ impl EncodeContext<'a, 'tcx> {\n \n         // The following part should be kept in sync with `PrefetchVisitor.visit_item`.\n \n-        let mir = match item.kind {\n-            hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n+        let (mir, const_mir) = match item.kind {\n+            hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => (false, true),\n             hir::ItemKind::Fn(ref sig, ..) => {\n                 let generics = tcx.generics_of(def_id);\n                 let needs_inline = (generics.requires_monomorphization(tcx)\n@@ -1417,14 +1440,21 @@ impl EncodeContext<'a, 'tcx> {\n \n                 let is_const_fn = sig.header.constness == hir::Constness::Const;\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || is_const_fn || always_encode_mir\n+                let mir = needs_inline || always_encode_mir;\n+                // We don't need the optimized MIR for const fns.\n+                (mir, is_const_fn)\n             }\n-            _ => false,\n+            _ => (false, false),\n         };\n         if mir {\n             self.encode_optimized_mir(def_id.expect_local());\n+        }\n+        if mir || const_mir {\n             self.encode_promoted_mir(def_id.expect_local());\n         }\n+        if const_mir {\n+            self.encode_mir_for_ctfe(def_id.expect_local());\n+        }\n     }\n \n     /// Serialize the text of exported macros\n@@ -1489,7 +1519,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_generics(def_id.to_def_id());\n         self.encode_explicit_predicates(def_id.to_def_id());\n         self.encode_inferred_outlives(def_id.to_def_id());\n-        self.encode_optimized_mir(def_id);\n+        self.encode_mir_for_ctfe(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n \n@@ -1954,6 +1984,12 @@ struct PrefetchVisitor<'tcx> {\n }\n \n impl<'tcx> PrefetchVisitor<'tcx> {\n+    fn prefetch_ctfe_mir(&self, def_id: LocalDefId) {\n+        if self.mir_keys.contains(&def_id) {\n+            self.tcx.ensure().mir_for_ctfe(def_id);\n+            self.tcx.ensure().promoted_mir(def_id);\n+        }\n+    }\n     fn prefetch_mir(&self, def_id: LocalDefId) {\n         if self.mir_keys.contains(&def_id) {\n             self.tcx.ensure().optimized_mir(def_id);\n@@ -1968,42 +2004,57 @@ impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n         let tcx = self.tcx;\n         match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => {\n-                self.prefetch_mir(tcx.hir().local_def_id(item.hir_id))\n+                self.prefetch_ctfe_mir(tcx.hir().local_def_id(item.hir_id))\n             }\n             hir::ItemKind::Fn(ref sig, ..) => {\n                 let def_id = tcx.hir().local_def_id(item.hir_id);\n                 let generics = tcx.generics_of(def_id.to_def_id());\n                 let needs_inline = generics.requires_monomorphization(tcx)\n                     || tcx.codegen_fn_attrs(def_id.to_def_id()).requests_inline();\n-                if needs_inline || sig.header.constness == hir::Constness::Const {\n+                if needs_inline {\n                     self.prefetch_mir(def_id)\n                 }\n+                if sig.header.constness == hir::Constness::Const {\n+                    self.prefetch_ctfe_mir(def_id);\n+                }\n             }\n             _ => (),\n         }\n     }\n \n     fn visit_trait_item(&self, trait_item: &'v hir::TraitItem<'v>) {\n         // This should be kept in sync with `encode_info_for_trait_item`.\n-        self.prefetch_mir(self.tcx.hir().local_def_id(trait_item.hir_id));\n+        let def_id = self.tcx.hir().local_def_id(trait_item.hir_id);\n+        match trait_item.kind {\n+            hir::TraitItemKind::Type(..) => {}\n+            hir::TraitItemKind::Const(..) => {\n+                self.prefetch_ctfe_mir(def_id);\n+            }\n+            hir::TraitItemKind::Fn(..) => {\n+                self.prefetch_mir(def_id);\n+            }\n+        }\n     }\n \n     fn visit_impl_item(&self, impl_item: &'v hir::ImplItem<'v>) {\n         // This should be kept in sync with `encode_info_for_impl_item`.\n         let tcx = self.tcx;\n         match impl_item.kind {\n             hir::ImplItemKind::Const(..) => {\n-                self.prefetch_mir(tcx.hir().local_def_id(impl_item.hir_id))\n+                self.prefetch_ctfe_mir(tcx.hir().local_def_id(impl_item.hir_id))\n             }\n             hir::ImplItemKind::Fn(ref sig, _) => {\n                 let def_id = tcx.hir().local_def_id(impl_item.hir_id);\n                 let generics = tcx.generics_of(def_id.to_def_id());\n                 let needs_inline = generics.requires_monomorphization(tcx)\n                     || tcx.codegen_fn_attrs(def_id.to_def_id()).requests_inline();\n                 let is_const_fn = sig.header.constness == hir::Constness::Const;\n-                if needs_inline || is_const_fn {\n+                if needs_inline {\n                     self.prefetch_mir(def_id)\n                 }\n+                if is_const_fn {\n+                    self.prefetch_ctfe_mir(def_id);\n+                }\n             }\n             hir::ImplItemKind::TyAlias(..) => (),\n         }"}, {"sha": "59a8bc7fac1be941776f095231252922d0185330", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -302,6 +302,7 @@ define_tables! {\n     // As an optimization, a missing entry indicates an empty `&[]`.\n     explicit_item_bounds: Table<DefIndex, Lazy!([(ty::Predicate<'tcx>, Span)])>,\n     mir: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n+    mir_for_ctfe: Table<DefIndex, Lazy!(mir::Body<'tcx>)>,\n     promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::Body<'tcx>>)>,\n     mir_abstract_consts: Table<DefIndex, Lazy!(&'tcx [mir::abstract_const::Node<'tcx>])>,\n     unused_generic_params: Table<DefIndex, Lazy<FiniteBitSet<u32>>>,"}, {"sha": "0fff7d98b29c1ab035918c2536aed4e384dae2ea", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -450,6 +450,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn mir_for_ctfe_opt_const_arg(self, def: ty::WithOptConstParam<DefId>) -> &'tcx Body<'tcx> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.mir_for_ctfe_of_const_arg((did, param_did))\n+        } else {\n+            self.mir_for_ctfe(def.did)\n+        }\n+    }\n+\n     #[inline]\n     pub fn mir_abstract_const_opt_const_arg(\n         self,"}, {"sha": "5edeb8c9e653282f8fb185b1ab5439fbd99d6d33", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -312,6 +312,20 @@ rustc_queries! {\n             desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n         }\n \n+        query mir_for_ctfe(\n+            key: DefId\n+        ) -> &'tcx mir::Body<'tcx> {\n+            desc { |tcx| \"caching mir for `{}` for CTFE\", tcx.def_path_str(key) }\n+            cache_on_disk_if { key.is_local() }\n+        }\n+\n+        query mir_for_ctfe_of_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::Body<'tcx> {\n+            desc {\n+                |tcx| \"MIR for CTFE of the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n+            }\n+        }\n+\n         query mir_promoted(key: ty::WithOptConstParam<LocalDefId>) ->\n             (\n                 &'tcx Steal<mir::Body<'tcx>>,\n@@ -331,6 +345,9 @@ rustc_queries! {\n             desc { |tcx| \"optimizing MIR for `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { key.is_local() }\n         }\n+\n+        // FIXME: now that we have `mir_for_ctfe_of_const_arg` can we get\n+        // rid of this query?\n         query optimized_mir_of_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::Body<'tcx> {\n             desc {\n                 |tcx| \"optimizing MIR for the const argument `{}`\","}, {"sha": "8cd09613074ef9cad13d1e92a6bbed4153421237", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -480,7 +480,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance {\n             ty::InstanceDef::Item(def) => {\n                 if self.tcx.is_mir_available(def.did) {\n-                    Ok(self.tcx.optimized_mir_opt_const_arg(def))\n+                    Ok(self.tcx.mir_for_ctfe_opt_const_arg(def))\n                 } else {\n                     throw_unsup!(NoMirFor(def.did))\n                 }"}, {"sha": "7a8f630315fa8c35d82e4e7596b0ddcd290fc493", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -69,7 +69,10 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     debug!(\"unused_generic_params: (after default) unused_parameters={:?}\", unused_parameters);\n \n     // Visit MIR and accumululate used generic parameters.\n-    let body = tcx.optimized_mir(def_id);\n+    let body = match tcx.hir().body_const_context(def_id.expect_local()) {\n+        None => tcx.optimized_mir(def_id),\n+        Some(_) => tcx.mir_for_ctfe(def_id),\n+    };\n     let mut vis = MarkUsedGenericParams { tcx, def_id, unused_parameters: &mut unused_parameters };\n     vis.visit_body(body);\n     debug!(\"unused_generic_params: (after visitor) unused_parameters={:?}\", unused_parameters);"}, {"sha": "52c2ba212a5cff1805e42205a69d08c265e35569", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -71,6 +71,8 @@ pub(crate) fn provide(providers: &mut Providers) {\n         },\n         mir_promoted,\n         mir_drops_elaborated_and_const_checked,\n+        mir_for_ctfe,\n+        mir_for_ctfe_of_const_arg,\n         optimized_mir,\n         optimized_mir_of_const_arg,\n         is_mir_available,\n@@ -319,6 +321,63 @@ fn mir_promoted(\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n }\n \n+fn mir_for_ctfe<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+    let did = def_id.expect_local();\n+    if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n+        tcx.mir_for_ctfe_of_const_arg(def)\n+    } else {\n+        tcx.arena.alloc(inner_mir_for_ctfe(tcx, ty::WithOptConstParam::unknown(did)))\n+    }\n+}\n+\n+fn mir_for_ctfe_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (did, param_did): (LocalDefId, DefId),\n+) -> &'tcx Body<'tcx> {\n+    tcx.arena.alloc(inner_mir_for_ctfe(\n+        tcx,\n+        ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n+    ))\n+}\n+\n+fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n+    // FIXME: don't duplicate this between the optimized_mir/mir_for_ctfe queries\n+    if tcx.is_constructor(def.did.to_def_id()) {\n+        // There's no reason to run all of the MIR passes on constructors when\n+        // we can just output the MIR we want directly. This also saves const\n+        // qualification and borrow checking the trouble of special casing\n+        // constructors.\n+        return shim::build_adt_ctor(tcx, def.did.to_def_id());\n+    }\n+\n+    assert_ne!(\n+        tcx.hir().body_const_context(def.did),\n+        None,\n+        \"mir_for_ctfe should not be used for runtime functions\"\n+    );\n+\n+    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).borrow().clone();\n+\n+    #[rustfmt::skip]\n+    let optimizations: &[&dyn MirPass<'_>] = &[\n+        &const_prop::ConstProp,\n+    ];\n+\n+    #[rustfmt::skip]\n+    run_passes(\n+        tcx,\n+        &mut body,\n+        MirPhase::Optimization,\n+        &[\n+            optimizations,\n+        ],\n+    );\n+\n+    debug_assert!(!body.has_free_regions(), \"Free regions in MIR for CTFE\");\n+\n+    body\n+}\n+\n fn mir_drops_elaborated_and_const_checked<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n@@ -484,6 +543,17 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>)\n         return shim::build_adt_ctor(tcx, def.did.to_def_id());\n     }\n \n+    match tcx.hir().body_const_context(def.did) {\n+        Some(hir::ConstContext::ConstFn) => {\n+            if let Some((did, param_did)) = def.to_global().as_const_arg() {\n+                tcx.ensure().mir_for_ctfe_of_const_arg((did, param_did))\n+            } else {\n+                tcx.ensure().mir_for_ctfe(def.did)\n+            }\n+        }\n+        None => {}\n+        Some(other) => panic!(\"do not use `optimized_mir` for constants: {:?}\", other),\n+    }\n     let mut body = tcx.mir_drops_elaborated_and_const_checked(def).steal();\n     run_optimization_passes(tcx, &mut body);\n "}, {"sha": "0d1abd63772a7f65447f141ccfe7264294a0125c", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -273,7 +273,11 @@ pub fn write_mir_pretty<'tcx>(\n \n     let mut first = true;\n     for def_id in dump_mir_def_ids(tcx, single) {\n-        let body = &tcx.optimized_mir(def_id);\n+        let body = match tcx.hir().body_const_context(def_id.expect_local()) {\n+            // FIXME: print both MIRs for `const fn`?\n+            None | Some(rustc_hir::ConstContext::ConstFn) => tcx.optimized_mir(def_id),\n+            Some(_) => tcx.mir_for_ctfe(def_id),\n+        };\n \n         if first {\n             first = false;"}, {"sha": "370ad577170ba4a3ed9b7926a865439a1e732681", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -152,7 +152,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {\n             DefKind::AnonConst => {\n-                let mir_body = infcx.tcx.optimized_mir_opt_const_arg(def);\n+                let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(def);\n \n                 if mir_body.is_polymorphic {\n                     future_compat_lint();"}, {"sha": "d2e764f856f08442004df1ed2b54d2a10085df28", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -24,41 +24,41 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500alloc23\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc27\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc23 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc8\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc13\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc21\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc27 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc12\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc17\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc25\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc8 (size: 0, align: 4) {}\n+alloc12 (size: 0, align: 4) {}\n \n-alloc13 (size: 8, align: 4) {\n-    \u257e\u2500alloc11\u2500\u257c \u257e\u2500alloc12\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc17 (size: 8, align: 4) {\n+    \u257e\u2500alloc15\u2500\u257c \u257e\u2500alloc16\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc11 (size: 1, align: 1) {\n+alloc15 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc12 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc21 (size: 12, align: 4) {\n-    \u257e\u2500a17+0x3\u2500\u257c \u257e\u2500alloc18\u2500\u257c \u257e\u2500a20+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc25 (size: 12, align: 4) {\n+    \u257e\u2500a21+0x3\u2500\u257c \u257e\u2500alloc22\u2500\u257c \u257e\u2500a24+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc17 (size: 4, align: 1) {\n+alloc21 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc18 (size: 1, align: 1) {\n+alloc22 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc20 (size: 4, align: 1) {\n+alloc24 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "00bf91f90bf61fcdce11a5b95cb5c134d92bdd35", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -24,44 +24,44 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc23\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc27\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc23 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc27 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc21\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc25\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc8 (size: 0, align: 8) {}\n+alloc12 (size: 0, align: 8) {}\n \n-alloc13 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc11\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc17 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc11 (size: 1, align: 1) {\n+alloc15 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc12 (size: 1, align: 1) {\n+alloc16 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc21 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc17+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc18\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc20+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc25 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc21+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc22\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc24+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc17 (size: 4, align: 1) {\n+alloc21 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc18 (size: 1, align: 1) {\n+alloc22 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc20 (size: 4, align: 1) {\n+alloc24 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "519002da392e2533d8e0ef302d2ec93c46fbdc1e", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -24,30 +24,30 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 4, align: 4) {\n-    \u257e\u2500alloc9\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+    \u257e\u2500alloc10\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n-alloc9 (size: 168, align: 1) {\n+alloc10 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc4\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc5\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc6\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n-    0x90 \u2502 \u257e\u2500a7+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc7\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x90 \u2502 \u257e\u2500a8+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc4 (size: 4, align: 4) {\n+alloc5 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc6 (fn: main)\n+alloc7 (fn: main)\n \n-alloc7 (size: 100, align: 1) {\n+alloc8 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "73c4288c32e9d9eea526ddae1e8fe5524bd8bc61", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -24,31 +24,31 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc9 (size: 180, align: 1) {\n+alloc10 (size: 180, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc4\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc5\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n     0x20 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 ef cd ab 00 00 00 00 00 00 00 00 \u2502 \u2500\u2500\u2500\u257c............\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x80 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500 \u2502 ..............\u257e\u2500\n-    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc6\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc7+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc8+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0xa0 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0xb0 \u2502 00 00 00 00                                     \u2502 ....\n }\n \n-alloc4 (size: 4, align: 4) {\n+alloc5 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc6 (fn: main)\n+alloc7 (fn: main)\n \n-alloc7 (size: 100, align: 1) {\n+alloc8 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "f2dfac4ce3ed2bd82163d042d6a9ee7218259d07", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -30,7 +30,7 @@ note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-a\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+note: ...which requires caching mir for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;"}, {"sha": "2d5e8e869a9783ca26de32fdedce18f136a2e380", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -30,7 +30,7 @@ note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for `FooDefault::BAR`...\n+note: ...which requires caching mir for `FooDefault::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;"}, {"sha": "125961a88a700d8a13357072a9580335657d52da", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -30,7 +30,7 @@ note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-a\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+note: ...which requires caching mir for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR` for CTFE...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;"}, {"sha": "39a568d054af49ffab06e9dc17f04592c696c464", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -7,13 +7,13 @@ LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: any use of this value will cause an error\n-  --> $DIR/ub-nonnull.rs:18:29\n+  --> $DIR/ub-nonnull.rs:18:30\n    |\n LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n+   | |                              ^^^^^^^^ memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc10 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "bcd05b4cd7ec853b84a31595520e3dc16a0dd1b3", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -95,22 +95,26 @@ const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n \n // # trait object\n // bad trait object\n+#[warn(const_err)]\n const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { mem::transmute((&92u8, &3u8)) };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ WARN any use of this value will cause an error [const_err]\n // bad trait object\n+#[warn(const_err)]\n const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ WARN any use of this value will cause an error [const_err]\n // bad trait object\n+#[warn(const_err)]\n const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, 4usize)) };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ WARN any use of this value will cause an error [const_err]\n const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n //~^ ERROR it is undefined behavior to use this value\n const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n //~^ ERROR it is undefined behavior to use this value\n const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n //~^ ERROR it is undefined behavior to use this value\n+#[warn(const_err)]\n const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ WARN any use of this value will cause an error [const_err]\n \n // bad data *inside* the trait object\n const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };"}, {"sha": "ec5d465c8825149bc116144470b4e98c63229c1d", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -134,98 +134,122 @@ LL | | };\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:98:1\n+warning: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:99:55\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: &dyn Trait = unsafe { mem::transmute((&92u8, &3u8)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n+   | ------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                       |\n+   |                                                       memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+note: the lint level is defined here\n+  --> $DIR/ub-wide-ptr.rs:98:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:101:1\n+warning: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:103:55\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: &dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n+   | ------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                       |\n+   |                                                       memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+note: the lint level is defined here\n+  --> $DIR/ub-wide-ptr.rs:102:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:104:1\n+warning: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:107:51\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, 4usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n+   | --------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                   |\n+   |                                                   unable to turn bytes into a pointer\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+note: the lint level is defined here\n+  --> $DIR/ub-wide-ptr.rs:106:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:106:1\n+  --> $DIR/ub-wide-ptr.rs:109:1\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:108:1\n+  --> $DIR/ub-wide-ptr.rs:111:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:110:1\n+  --> $DIR/ub-wide-ptr.rs:113:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:112:1\n+warning: any use of this value will cause an error\n+  --> $DIR/ub-wide-ptr.rs:116:63\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: &dyn Trait = unsafe { mem::transmute((&92u8, &[&42u8; 8])) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n+   | --------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                                               |\n+   |                                                               \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+note: the lint level is defined here\n+  --> $DIR/ub-wide-ptr.rs:115:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:116:1\n+  --> $DIR/ub-wide-ptr.rs:120:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.<dyn-downcast>, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:120:1\n+  --> $DIR/ub-wide-ptr.rs:124:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:122:1\n+  --> $DIR/ub-wide-ptr.rs:126:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:128:5\n+  --> $DIR/ub-wide-ptr.rs:132:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inbounds test failed: 0x0 is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:132:5\n+  --> $DIR/ub-wide-ptr.rs:136:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 24 previous errors; 4 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "631fab6e4f7f6c9a182687e749f0d6f9c992de98", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -14,6 +14,11 @@ note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`..\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires simplifying constant for the type system `std::intrinsics::size_of`...\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     pub fn size_of<T>() -> usize;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `[u8; _]`...\n    = note: ...which again requires simplifying constant for the type system `Foo::bytes::{constant#0}`, completing the cycle"}, {"sha": "14eeabb49a2a071fd9116d6b3f66fa2695ae5950", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -35,11 +35,11 @@ LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:26:14\n+  --> $DIR/const_refers_to_static_cross_crate.rs:26:15\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n+   | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n LL | | };"}, {"sha": "595ed30bf9c8209b9c7484cf244d13507eaf1467", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -66,6 +66,7 @@ const _: *const u8 =\n //~^ NOTE\n     unsafe { std::ptr::raw_const!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR any use of this value will cause an error\n+//~| NOTE\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error"}, {"sha": "49511b84500de92fdd379c473cf4a5a0db96a96f", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccd40f9b552367a8d1bb958b421a2e5e65c28ab/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=cccd40f9b552367a8d1bb958b421a2e5e65c28ab", "patch": "@@ -16,27 +16,25 @@ LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n    = note: `#[deny(const_err)]` on by default\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:67:14\n+  --> $DIR/ptr_comparisons.rs:67:35\n    |\n LL | / const _: *const u8 =\n LL | |\n LL | |     unsafe { std::ptr::raw_const!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n-   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n-   |                |\n-   |                memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   | |___________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n+   |                                     |\n+   |                                     memory access failed: pointer must be in-bounds at offset 1000, but is outside bounds of alloc2 which has size $WORD\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:70:27\n+  --> $DIR/ptr_comparisons.rs:71:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                           |\n    |                           \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:75:27\n+  --> $DIR/ptr_comparisons.rs:76:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}]}