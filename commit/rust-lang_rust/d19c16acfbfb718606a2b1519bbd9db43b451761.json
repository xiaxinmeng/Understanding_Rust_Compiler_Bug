{"sha": "d19c16acfbfb718606a2b1519bbd9db43b451761", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOWMxNmFjZmJmYjcxODYwNmEyYjE1MTliYmQ5ZGI0M2I0NTE3NjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-04T19:20:37Z"}, "message": "Fix cross-crate resolution of half-items created by export shadowing", "tree": {"sha": "1055c9d1af95a0982718403debb804d4e8716cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1055c9d1af95a0982718403debb804d4e8716cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d19c16acfbfb718606a2b1519bbd9db43b451761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d19c16acfbfb718606a2b1519bbd9db43b451761", "html_url": "https://github.com/rust-lang/rust/commit/d19c16acfbfb718606a2b1519bbd9db43b451761", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d19c16acfbfb718606a2b1519bbd9db43b451761/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da7b1c984c74db17198bd5434d5da78587a9a91e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da7b1c984c74db17198bd5434d5da78587a9a91e", "html_url": "https://github.com/rust-lang/rust/commit/da7b1c984c74db17198bd5434d5da78587a9a91e"}], "stats": {"total": 604, "additions": 558, "deletions": 46}, "files": [{"sha": "94ce6e2f7f774b389d4be3fa987cd960831e1ec3", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -100,8 +100,8 @@ pub type ExportMap = NodeMap<Vec<Export>>;\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n pub struct Export {\n-    pub name: ast::Name,    // The name of the target.\n-    pub def_id: DefId, // The definition of the target.\n+    pub name: ast::Name, // The name of the target.\n+    pub def: Def, // The definition of the target.\n }\n \n impl CtorKind {"}, {"sha": "10bafa4ee1d68d6de677c00159ce5ceb8c7650c7", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -149,7 +149,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.dep_graph.read(DepNode::MetaData(def_id));\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate)\n-            .each_child_of_item(def_id.index, |child| result.push(child.def_id));\n+            .each_child_of_item(def_id.index, |child| result.push(child.def.def_id()));\n         result\n     }\n \n@@ -566,7 +566,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n             let mut bfs_queue = &mut VecDeque::new();\n             let mut add_child = |bfs_queue: &mut VecDeque<_>, child: def::Export, parent: DefId| {\n-                let child = child.def_id;\n+                let child = child.def.def_id();\n \n                 if self.visibility(child) != ty::Visibility::Public {\n                     return;"}, {"sha": "59a33fcbbcdd5695a0e2afe41923cb70dc82c71a", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -670,10 +670,12 @@ impl<'a, 'tcx> CrateMetadata {\n                     // FIXME(eddyb) Don't encode these in children.\n                     EntryKind::ForeignMod => {\n                         for child_index in child.children.decode(self) {\n-                            callback(def::Export {\n-                                def_id: self.local_def_id(child_index),\n-                                name: self.item_name(&self.entry(child_index))\n-                            });\n+                            if let Some(def) = self.get_def(child_index) {\n+                                callback(def::Export {\n+                                    def: def,\n+                                    name: self.item_name(&self.entry(child_index))\n+                                });\n+                            }\n                         }\n                         continue;\n                     }\n@@ -683,11 +685,26 @@ impl<'a, 'tcx> CrateMetadata {\n                 }\n \n                 let def_key = child.def_key.decode(self);\n-                if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n-                    callback(def::Export {\n-                        def_id: self.local_def_id(child_index),\n-                        name: name\n-                    });\n+                if let (Some(def), Some(name)) = (self.get_def(child_index),\n+                                                  def_key.disambiguated_data.data.get_opt_name()) {\n+                    callback(def::Export { def: def, name: name });\n+                    // For non-reexport structs and variants add their constructors to children.\n+                    // Reexport lists automatically contain constructors when necessary.\n+                    match def {\n+                        Def::Struct(..) => {\n+                            if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {\n+                                let vkind = self.get_variant_kind(child_index).unwrap();\n+                                let ctor_def = Def::StructCtor(ctor_def_id, vkind.ctor_kind());\n+                                callback(def::Export { def: ctor_def, name: name });\n+                            }\n+                        }\n+                        Def::Variant(def_id) => {\n+                            let vkind = self.get_variant_kind(child_index).unwrap();\n+                            let ctor_def = Def::VariantCtor(def_id, vkind.ctor_kind());\n+                            callback(def::Export { def: ctor_def, name: name });\n+                        }\n+                        _ => {}\n+                    }\n                 }\n             }\n         }"}, {"sha": "8774e55011ed6497fee15d430b0ff3b706f581d2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -406,17 +406,21 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_struct_ctor(&mut self, (adt_def_id, def_id): (DefId, DefId))\n                           -> Entry<'tcx> {\n-        let variant = self.tcx.lookup_adt_def(adt_def_id).struct_variant();\n+        let tcx = self.tcx;\n+        let variant = tcx.lookup_adt_def(adt_def_id).struct_variant();\n \n         let data = VariantData {\n             kind: variant.kind,\n             disr: variant.disr_val.to_u64_unchecked(),\n             struct_ctor: Some(def_id.index)\n         };\n \n+        let struct_id = tcx.map.as_local_node_id(adt_def_id).unwrap();\n+        let struct_vis = &tcx.map.expect_item(struct_id).vis;\n+\n         Entry {\n             kind: EntryKind::Struct(self.lazy(&data)),\n-            visibility: ty::Visibility::Public,\n+            visibility: struct_vis.simplify(),\n             def_key: self.encode_def_key(def_id),\n             attributes: LazySeq::empty(),\n             children: LazySeq::empty(),"}, {"sha": "a6a1326b719bfa841f827e4851792d016eae8ef6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -286,7 +286,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n         if self.prev_level.is_some() {\n             if let Some(exports) = self.export_map.get(&id) {\n                 for export in exports {\n-                    if let Some(node_id) = self.tcx.map.as_local_node_id(export.def_id) {\n+                    if let Some(node_id) = self.tcx.map.as_local_node_id(export.def.def_id()) {\n                         self.update(node_id, Some(AccessLevel::Exported));\n                     }\n                 }"}, {"sha": "b6afacf05e2d0b43f8bc79688bb3703e94af0adb", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -24,7 +24,6 @@ use {resolve_error, resolve_struct_error, ResolutionError};\n use rustc::middle::cstore::LoadedMacroKind;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n-use rustc::hir::map::DefPathData;\n use rustc::ty;\n \n use std::cell::Cell;\n@@ -398,15 +397,9 @@ impl<'b> Resolver<'b> {\n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'b>,\n                                                   child: Export) {\n-        let def_id = child.def_id;\n         let name = child.name;\n-\n-        let def = if let Some(def) = self.session.cstore.describe_def(def_id) {\n-            def\n-        } else {\n-            return;\n-        };\n-\n+        let def = child.def;\n+        let def_id = def.def_id();\n         let vis = if parent.is_trait() {\n             ty::Visibility::Public\n         } else {\n@@ -424,14 +417,15 @@ impl<'b> Resolver<'b> {\n                 debug!(\"(building reduced graph for external crate) building variant {}\", name);\n                 // All variants are defined in both type and value namespaces as future-proofing.\n                 let vkind = self.session.cstore.variant_kind(def_id).unwrap();\n-                let ctor_def = Def::VariantCtor(def_id, vkind.ctor_kind());\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n-                let _ = self.try_define(parent, name, ValueNS, (ctor_def, DUMMY_SP, vis));\n                 if vkind == ty::VariantKind::Struct {\n                     // Not adding fields for variants as they are not accessed with a self receiver\n                     self.structs.insert(def_id, Vec::new());\n                 }\n             }\n+            Def::VariantCtor(..) => {\n+                let _ = self.try_define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n+            }\n             Def::Fn(..) |\n             Def::Static(..) |\n             Def::Const(..) |\n@@ -468,33 +462,25 @@ impl<'b> Resolver<'b> {\n                 debug!(\"(building reduced graph for external crate) building type {}\", name);\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n             }\n-            Def::Struct(..)\n-                if self.session.cstore.def_key(def_id).disambiguated_data.data !=\n-                   DefPathData::StructCtor\n-                => {\n+            Def::Struct(..) => {\n                 debug!(\"(building reduced graph for external crate) building type and value for {}\",\n                        name);\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n-                if let Some(ctor_def_id) = self.session.cstore.struct_ctor_def_id(def_id) {\n-                    let vkind = self.session.cstore.variant_kind(def_id).unwrap();\n-                    let ctor_def = Def::StructCtor(ctor_def_id, vkind.ctor_kind());\n-                    let _ = self.try_define(parent, name, ValueNS, (ctor_def, DUMMY_SP, vis));\n-                }\n \n                 // Record the def ID and fields of this struct.\n                 let fields = self.session.cstore.struct_field_names(def_id);\n                 self.structs.insert(def_id, fields);\n             }\n+            Def::StructCtor(..) => {\n+                let _ = self.try_define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n+            }\n             Def::Union(_) => {\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n \n                 // Record the def ID and fields of this union.\n                 let fields = self.session.cstore.struct_field_names(def_id);\n                 self.structs.insert(def_id, fields);\n             }\n-            Def::Struct(..) => {}\n-            Def::VariantCtor(..) |\n-            Def::StructCtor(..) |\n             Def::Local(..) |\n             Def::PrimTy(..) |\n             Def::TyParam(..) |"}, {"sha": "4689c4ded5c0a4aaec56e47266575f531eb4d4ee", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -797,7 +797,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                (binding.is_import() || binding.is_extern_crate()) {\n                 let def = binding.def();\n                 if def != Def::Err {\n-                    reexports.push(Export { name: name, def_id: def.def_id() });\n+                    reexports.push(Export { name: name, def: def });\n                 }\n             }\n "}, {"sha": "4fd1341f09b727f62ee33f6605252b1754320e5f", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -461,7 +461,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n                         return;\n                     }\n                     for child in ccx.tcx.sess.cstore.item_children(def_id) {\n-                        handle_external_def(ccx, traits, external_mods, child.def_id)\n+                        handle_external_def(ccx, traits, external_mods, child.def.def_id())\n                     }\n                 }\n                 _ => {}"}, {"sha": "68bc5d57e7b4d65c73887ed657f08409b9b74094", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -498,9 +498,10 @@ fn build_module<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // visit each node at most once.\n         let mut visited = FnvHashSet();\n         for item in tcx.sess.cstore.item_children(did) {\n-            if tcx.sess.cstore.visibility(item.def_id) == ty::Visibility::Public {\n-                if !visited.insert(item.def_id) { continue }\n-                if let Some(def) = tcx.sess.cstore.describe_def(item.def_id) {\n+            let def_id = item.def.def_id();\n+            if tcx.sess.cstore.visibility(def_id) == ty::Visibility::Public {\n+                if !visited.insert(def_id) { continue }\n+                if let Some(def) = tcx.sess.cstore.describe_def(def_id) {\n                     if let Some(i) = try_inline_def(cx, tcx, def) {\n                         items.extend(i)\n                     }"}, {"sha": "3a13e17d293d7977115c147c2466a03fb2b8c625", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -237,7 +237,7 @@ impl Clean<ExternalCrate> for CrateNum {\n         let root = DefId { krate: self.0, index: CRATE_DEF_INDEX };\n         cx.tcx_opt().map(|tcx| {\n             for item in tcx.sess.cstore.item_children(root) {\n-                let attrs = inline::load_attrs(cx, tcx, item.def_id);\n+                let attrs = inline::load_attrs(cx, tcx, item.def.def_id());\n                 PrimitiveType::find(&attrs).map(|prim| primitives.push(prim));\n             }\n         });"}, {"sha": "1e262bb490635074f1858128a0f83440d8ef96f0", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n \n     pub fn visit_mod(&mut self, def_id: DefId) {\n         for item in self.cstore.item_children(def_id) {\n-            self.visit_item(item.def_id);\n+            self.visit_item(item.def.def_id());\n         }\n     }\n "}, {"sha": "88e8b0d56fe3d4ab3e94bcdafe6b957794859851", "filename": "src/test/compile-fail/auxiliary/namespace-mix-new.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-new.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -0,0 +1,78 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(item_like_imports, relaxed_adts)]\n+\n+pub mod c {\n+    pub struct S {}\n+    pub struct TS();\n+    pub struct US;\n+    pub enum E {\n+        V {},\n+        TV(),\n+        UV,\n+    }\n+\n+    pub struct Item;\n+}\n+\n+pub mod xm1 {\n+    pub use ::c::*;\n+    pub type S = ::c::Item;\n+}\n+pub mod xm2 {\n+    pub use ::c::*;\n+    pub const S: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xm3 {\n+    pub use ::c::*;\n+    pub type TS = ::c::Item;\n+}\n+pub mod xm4 {\n+    pub use ::c::*;\n+    pub const TS: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xm5 {\n+    pub use ::c::*;\n+    pub type US = ::c::Item;\n+}\n+pub mod xm6 {\n+    pub use ::c::*;\n+    pub const US: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xm7 {\n+    pub use ::c::E::*;\n+    pub type V = ::c::Item;\n+}\n+pub mod xm8 {\n+    pub use ::c::E::*;\n+    pub const V: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xm9 {\n+    pub use ::c::E::*;\n+    pub type TV = ::c::Item;\n+}\n+pub mod xmA {\n+    pub use ::c::E::*;\n+    pub const TV: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xmB {\n+    pub use ::c::E::*;\n+    pub type UV = ::c::Item;\n+}\n+pub mod xmC {\n+    pub use ::c::E::*;\n+    pub const UV: ::c::Item = ::c::Item;\n+}"}, {"sha": "7bbba7163b5570c98ad5e56235f1b2fd0746cdcf", "filename": "src/test/compile-fail/auxiliary/namespace-mix-old.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fnamespace-mix-old.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// FIXME: Remove when `item_like_imports` is stabilized.\n+\n+#![feature(relaxed_adts)]\n+\n+pub mod c {\n+    pub struct S {}\n+    pub struct TS();\n+    pub struct US;\n+    pub enum E {\n+        V {},\n+        TV(),\n+        UV,\n+    }\n+\n+    pub struct Item;\n+}\n+\n+pub mod proxy {\n+    pub use c::*;\n+    pub use c::E::*;\n+}\n+\n+pub mod xm1 {\n+    pub use ::proxy::*;\n+    pub type S = ::c::Item;\n+}\n+pub mod xm2 {\n+    pub use ::proxy::*;\n+    pub const S: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xm3 {\n+    pub use ::proxy::*;\n+    pub type TS = ::c::Item;\n+}\n+pub mod xm4 {\n+    pub use ::proxy::*;\n+    pub const TS: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xm5 {\n+    pub use ::proxy::*;\n+    pub type US = ::c::Item;\n+}\n+pub mod xm6 {\n+    pub use ::proxy::*;\n+    pub const US: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xm7 {\n+    pub use ::proxy::*;\n+    pub type V = ::c::Item;\n+}\n+pub mod xm8 {\n+    pub use ::proxy::*;\n+    pub const V: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xm9 {\n+    pub use ::proxy::*;\n+    pub type TV = ::c::Item;\n+}\n+pub mod xmA {\n+    pub use ::proxy::*;\n+    pub const TV: ::c::Item = ::c::Item;\n+}\n+\n+pub mod xmB {\n+    pub use ::proxy::*;\n+    pub type UV = ::c::Item;\n+}\n+pub mod xmC {\n+    pub use ::proxy::*;\n+    pub const UV: ::c::Item = ::c::Item;\n+}"}, {"sha": "0abe8bd4390935dc64a9135cdd9edaecde373cc2", "filename": "src/test/compile-fail/namespace-mix-new.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-new.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -0,0 +1,167 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:namespace-mix-new.rs\n+\n+#![feature(item_like_imports, relaxed_adts)]\n+\n+extern crate namespace_mix_new;\n+use namespace_mix_new::*;\n+\n+mod c {\n+    pub struct S {}\n+    pub struct TS();\n+    pub struct US;\n+    pub enum E {\n+        V {},\n+        TV(),\n+        UV,\n+    }\n+\n+    pub struct Item;\n+}\n+\n+// Use something emitting the type argument name, e.g. unsatisfied bound.\n+trait Impossible {}\n+fn check<T: Impossible>(_: T) {}\n+\n+mod m1 {\n+    pub use ::c::*;\n+    pub type S = ::c::Item;\n+}\n+mod m2 {\n+    pub use ::c::*;\n+    pub const S: ::c::Item = ::c::Item;\n+}\n+\n+fn f12() {\n+    check(m1::S{}); //~ ERROR c::Item\n+    check(m1::S); //~ ERROR unresolved name\n+    check(m2::S{}); //~ ERROR c::S\n+    check(m2::S); //~ ERROR c::Item\n+}\n+fn xf12() {\n+    check(xm1::S{}); //~ ERROR c::Item\n+    check(xm1::S); //~ ERROR unresolved name\n+    check(xm2::S{}); //~ ERROR c::S\n+    check(xm2::S); //~ ERROR c::Item\n+}\n+\n+mod m3 {\n+    pub use ::c::*;\n+    pub type TS = ::c::Item;\n+}\n+mod m4 {\n+    pub use ::c::*;\n+    pub const TS: ::c::Item = ::c::Item;\n+}\n+\n+fn f34() {\n+    check(m3::TS{}); //~ ERROR c::Item\n+    check(m3::TS); //~ ERROR c::TS\n+    check(m4::TS{}); //~ ERROR c::TS\n+    check(m4::TS); //~ ERROR c::Item\n+}\n+fn xf34() {\n+    check(xm3::TS{}); //~ ERROR c::Item\n+    check(xm3::TS); //~ ERROR c::TS\n+    check(xm4::TS{}); //~ ERROR c::TS\n+    check(xm4::TS); //~ ERROR c::Item\n+}\n+\n+mod m5 {\n+    pub use ::c::*;\n+    pub type US = ::c::Item;\n+}\n+mod m6 {\n+    pub use ::c::*;\n+    pub const US: ::c::Item = ::c::Item;\n+}\n+\n+fn f56() {\n+    check(m5::US{}); //~ ERROR c::Item\n+    check(m5::US); //~ ERROR c::US\n+    check(m6::US{}); //~ ERROR c::US\n+    check(m6::US); //~ ERROR c::Item\n+}\n+fn xf56() {\n+    check(xm5::US{}); //~ ERROR c::Item\n+    check(xm5::US); //~ ERROR c::US\n+    check(xm6::US{}); //~ ERROR c::US\n+    check(xm6::US); //~ ERROR c::Item\n+}\n+\n+mod m7 {\n+    pub use ::c::E::*;\n+    pub type V = ::c::Item;\n+}\n+mod m8 {\n+    pub use ::c::E::*;\n+    pub const V: ::c::Item = ::c::Item;\n+}\n+\n+fn f78() {\n+    check(m7::V{}); //~ ERROR c::Item\n+    check(m7::V); //~ ERROR name of a struct or struct variant\n+    check(m8::V{}); //~ ERROR c::E\n+    check(m8::V); //~ ERROR c::Item\n+}\n+fn xf78() {\n+    check(xm7::V{}); //~ ERROR c::Item\n+    check(xm7::V); //~ ERROR name of a struct or struct variant\n+    check(xm8::V{}); //~ ERROR c::E\n+    check(xm8::V); //~ ERROR c::Item\n+}\n+\n+mod m9 {\n+    pub use ::c::E::*;\n+    pub type TV = ::c::Item;\n+}\n+mod mA {\n+    pub use ::c::E::*;\n+    pub const TV: ::c::Item = ::c::Item;\n+}\n+\n+fn f9A() {\n+    check(m9::TV{}); //~ ERROR c::Item\n+    check(m9::TV); //~ ERROR c::E\n+    check(mA::TV{}); //~ ERROR c::E\n+    check(mA::TV); //~ ERROR c::Item\n+}\n+fn xf9A() {\n+    check(xm9::TV{}); //~ ERROR c::Item\n+    check(xm9::TV); //~ ERROR c::E\n+    check(xmA::TV{}); //~ ERROR c::E\n+    check(xmA::TV); //~ ERROR c::Item\n+}\n+\n+mod mB {\n+    pub use ::c::E::*;\n+    pub type UV = ::c::Item;\n+}\n+mod mC {\n+    pub use ::c::E::*;\n+    pub const UV: ::c::Item = ::c::Item;\n+}\n+\n+fn fBC() {\n+    check(mB::UV{}); //~ ERROR c::Item\n+    check(mB::UV); //~ ERROR c::E\n+    check(mC::UV{}); //~ ERROR c::E\n+    check(mC::UV); //~ ERROR c::Item\n+}\n+fn xfBC() {\n+    check(xmB::UV{}); //~ ERROR c::Item\n+    check(xmB::UV); //~ ERROR c::E\n+    check(xmC::UV{}); //~ ERROR c::E\n+    check(xmC::UV); //~ ERROR c::Item\n+}\n+\n+fn main() {}"}, {"sha": "ad6766441961b2375027922e42b22096e95a0927", "filename": "src/test/compile-fail/namespace-mix-old.rs", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19c16acfbfb718606a2b1519bbd9db43b451761/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespace-mix-old.rs?ref=d19c16acfbfb718606a2b1519bbd9db43b451761", "patch": "@@ -0,0 +1,174 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// FIXME: Remove when `item_like_imports` is stabilized.\n+\n+// aux-build:namespace-mix-old.rs\n+\n+#![feature(relaxed_adts)]\n+\n+extern crate namespace_mix_old;\n+use namespace_mix_old::{xm1, xm2, xm3, xm4, xm5, xm6, xm7, xm8, xm9, xmA, xmB, xmC};\n+\n+mod c {\n+    pub struct S {}\n+    pub struct TS();\n+    pub struct US;\n+    pub enum E {\n+        V {},\n+        TV(),\n+        UV,\n+    }\n+\n+    pub struct Item;\n+}\n+\n+mod proxy {\n+    pub use c::*;\n+    pub use c::E::*;\n+}\n+\n+// Use something emitting the type argument name, e.g. unsatisfied bound.\n+trait Impossible {}\n+fn check<T: Impossible>(_: T) {}\n+\n+mod m1 {\n+    pub use ::proxy::*;\n+    pub type S = ::c::Item;\n+}\n+mod m2 {\n+    pub use ::proxy::*;\n+    pub const S: ::c::Item = ::c::Item;\n+}\n+\n+fn f12() {\n+    check(m1::S{}); //~ ERROR c::Item\n+    check(m1::S); //~ ERROR unresolved name\n+    check(m2::S{}); //~ ERROR c::S\n+    check(m2::S); //~ ERROR c::Item\n+}\n+fn xf12() {\n+    check(xm1::S{}); //~ ERROR c::Item\n+    check(xm1::S); //~ ERROR unresolved name\n+    check(xm2::S{}); //~ ERROR c::S\n+    check(xm2::S); //~ ERROR c::Item\n+}\n+\n+mod m3 {\n+    pub use ::proxy::*;\n+    pub type TS = ::c::Item;\n+}\n+mod m4 {\n+    pub use ::proxy::*;\n+    pub const TS: ::c::Item = ::c::Item;\n+}\n+\n+fn f34() {\n+    check(m3::TS{}); //~ ERROR c::Item\n+    check(m3::TS); //~ ERROR c::TS\n+    check(m4::TS{}); //~ ERROR c::TS\n+    check(m4::TS); //~ ERROR c::Item\n+}\n+fn xf34() {\n+    check(xm3::TS{}); //~ ERROR c::Item\n+    check(xm3::TS); //~ ERROR c::TS\n+    check(xm4::TS{}); //~ ERROR c::TS\n+    check(xm4::TS); //~ ERROR c::Item\n+}\n+\n+mod m5 {\n+    pub use ::proxy::*;\n+    pub type US = ::c::Item;\n+}\n+mod m6 {\n+    pub use ::proxy::*;\n+    pub const US: ::c::Item = ::c::Item;\n+}\n+\n+fn f56() {\n+    check(m5::US{}); //~ ERROR c::Item\n+    check(m5::US); //~ ERROR c::US\n+    check(m6::US{}); //~ ERROR c::US\n+    check(m6::US); //~ ERROR c::Item\n+}\n+fn xf56() {\n+    check(xm5::US{}); //~ ERROR c::Item\n+    check(xm5::US); //~ ERROR c::US\n+    check(xm6::US{}); //~ ERROR c::US\n+    check(xm6::US); //~ ERROR c::Item\n+}\n+\n+mod m7 {\n+    pub use ::proxy::*;\n+    pub type V = ::c::Item;\n+}\n+mod m8 {\n+    pub use ::proxy::*;\n+    pub const V: ::c::Item = ::c::Item;\n+}\n+\n+fn f78() {\n+    check(m7::V{}); //~ ERROR c::Item\n+    check(m7::V); //~ ERROR name of a struct or struct variant\n+    check(m8::V{}); //~ ERROR c::E\n+    check(m8::V); //~ ERROR c::Item\n+}\n+fn xf78() {\n+    check(xm7::V{}); //~ ERROR c::Item\n+    check(xm7::V); //~ ERROR name of a struct or struct variant\n+    check(xm8::V{}); //~ ERROR c::E\n+    check(xm8::V); //~ ERROR c::Item\n+}\n+\n+mod m9 {\n+    pub use ::proxy::*;\n+    pub type TV = ::c::Item;\n+}\n+mod mA {\n+    pub use ::proxy::*;\n+    pub const TV: ::c::Item = ::c::Item;\n+}\n+\n+fn f9A() {\n+    check(m9::TV{}); //~ ERROR c::Item\n+    check(m9::TV); //~ ERROR c::E\n+    check(mA::TV{}); //~ ERROR c::E\n+    check(mA::TV); //~ ERROR c::Item\n+}\n+fn xf9A() {\n+    check(xm9::TV{}); //~ ERROR c::Item\n+    check(xm9::TV); //~ ERROR c::E\n+    check(xmA::TV{}); //~ ERROR c::E\n+    check(xmA::TV); //~ ERROR c::Item\n+}\n+\n+mod mB {\n+    pub use ::proxy::*;\n+    pub type UV = ::c::Item;\n+}\n+mod mC {\n+    pub use ::proxy::*;\n+    pub const UV: ::c::Item = ::c::Item;\n+}\n+\n+fn fBC() {\n+    check(mB::UV{}); //~ ERROR c::Item\n+    check(mB::UV); //~ ERROR c::E\n+    check(mC::UV{}); //~ ERROR c::E\n+    check(mC::UV); //~ ERROR c::Item\n+}\n+fn xfBC() {\n+    check(xmB::UV{}); //~ ERROR c::Item\n+    check(xmB::UV); //~ ERROR c::E\n+    check(xmC::UV{}); //~ ERROR c::E\n+    check(xmC::UV); //~ ERROR c::Item\n+}\n+\n+fn main() {}"}]}