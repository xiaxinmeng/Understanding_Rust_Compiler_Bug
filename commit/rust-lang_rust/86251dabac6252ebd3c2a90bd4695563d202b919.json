{"sha": "86251dabac6252ebd3c2a90bd4695563d202b919", "node_id": "C_kwDOAAsO6NoAKDg2MjUxZGFiYWM2MjUyZWJkM2MyYTkwYmQ0Njk1NTYzZDIwMmI5MTk", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-11-26T20:08:41Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-11-26T20:50:01Z"}, "message": "Refactor `setup_config_toml` into a function", "tree": {"sha": "2e4f799c384603c9f27fe93dbab1c98cb11cc9db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e4f799c384603c9f27fe93dbab1c98cb11cc9db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86251dabac6252ebd3c2a90bd4695563d202b919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86251dabac6252ebd3c2a90bd4695563d202b919", "html_url": "https://github.com/rust-lang/rust/commit/86251dabac6252ebd3c2a90bd4695563d202b919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86251dabac6252ebd3c2a90bd4695563d202b919/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71fd3abc73471bf1b68666c980d73c4385e5e9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/71fd3abc73471bf1b68666c980d73c4385e5e9a7", "html_url": "https://github.com/rust-lang/rust/commit/71fd3abc73471bf1b68666c980d73c4385e5e9a7"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "bad6accc784727f86401b76198d0b00eed79e6bb", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/86251dabac6252ebd3c2a90bd4695563d202b919/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86251dabac6252ebd3c2a90bd4695563d202b919/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=86251dabac6252ebd3c2a90bd4695563d202b919", "patch": "@@ -1,15 +1,13 @@\n+use crate::Config;\n use crate::{t, VERSION};\n-use crate::{Config, TargetSelection};\n use std::env::consts::EXE_SUFFIX;\n use std::fmt::Write as _;\n use std::fs::File;\n+use std::io::Write;\n use std::path::{Path, PathBuf, MAIN_SEPARATOR};\n use std::process::Command;\n use std::str::FromStr;\n-use std::{\n-    env, fmt, fs,\n-    io::{self, Write},\n-};\n+use std::{fmt, fs, io};\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n pub enum Profile {\n@@ -84,34 +82,10 @@ impl fmt::Display for Profile {\n pub fn setup(config: &Config, profile: Option<Profile>) {\n     let path = &config.config.clone().unwrap_or(PathBuf::from(\"config.toml\"));\n     let profile = profile.unwrap_or_else(|| t!(interactive_path()));\n+    setup_config_toml(path, profile, config);\n \n-    if path.exists() {\n-        eprintln!(\n-            \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n-            path.display()\n-        );\n-        eprintln!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n-        eprintln!(\n-            \"note: this will use the configuration in {}\",\n-            profile.include_path(&config.src).display()\n-        );\n-        crate::detail_exit(1);\n-    }\n-\n-    let settings = format!(\n-        \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n-    profile = \\\"{}\\\"\\n\\\n-    changelog-seen = {}\\n\",\n-        profile, VERSION\n-    );\n-    t!(fs::write(path, settings));\n-\n-    let include_path = profile.include_path(&config.src);\n-    println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n-\n-    let build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n     let stage_path =\n-        [\"build\", build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n+        [\"build\", config.build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n \n     println!();\n \n@@ -153,6 +127,32 @@ pub fn setup(config: &Config, profile: Option<Profile>) {\n     }\n }\n \n+fn setup_config_toml(path: &PathBuf, profile: Profile, config: &Config) {\n+    if path.exists() {\n+        eprintln!(\n+            \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n+            path.display()\n+        );\n+        eprintln!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n+        eprintln!(\n+            \"note: this will use the configuration in {}\",\n+            profile.include_path(&config.src).display()\n+        );\n+        crate::detail_exit(1);\n+    }\n+\n+    let settings = format!(\n+        \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n+    profile = \\\"{}\\\"\\n\\\n+    changelog-seen = {}\\n\",\n+        profile, VERSION\n+    );\n+    t!(fs::write(path, settings));\n+\n+    let include_path = profile.include_path(&config.src);\n+    println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n+}\n+\n fn rustup_installed() -> bool {\n     Command::new(\"rustup\")\n         .arg(\"--version\")"}]}