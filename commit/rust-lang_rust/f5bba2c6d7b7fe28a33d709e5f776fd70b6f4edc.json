{"sha": "f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YmJhMmM2ZDdiN2ZlMjhhMzNkNzA5ZTVmNzc2ZmQ3MGI2ZjRlZGM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-15T11:16:36Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-20T10:00:43Z"}, "message": "HirIdification: change some NodeId to HirId calls", "tree": {"sha": "cb21985ae8486faed4268cb2aaec22e1c9fc3d5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb21985ae8486faed4268cb2aaec22e1c9fc3d5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "html_url": "https://github.com/rust-lang/rust/commit/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36fffa81969fbefa64974da838590e06dc0b3faa", "url": "https://api.github.com/repos/rust-lang/rust/commits/36fffa81969fbefa64974da838590e06dc0b3faa", "html_url": "https://github.com/rust-lang/rust/commit/36fffa81969fbefa64974da838590e06dc0b3faa"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "9a00c43be3fbb0da3f9061993ace43a8b3cb77ef", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "patch": "@@ -88,8 +88,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &[MoveErr\n             }\n         }\n         if let NoteClosureEnv(upvar_id) = error.move_from.note {\n-            let var_node_id = bccx.tcx.hir().hir_to_node_id(upvar_id.var_path.hir_id);\n-            err.span_label(bccx.tcx.hir().span(var_node_id),\n+            err.span_label(bccx.tcx.hir().span_by_hir_id(upvar_id.var_path.hir_id),\n                            \"captured outer variable\");\n         }\n         err.emit();"}, {"sha": "31189a71bba82cf87e2bd1c2e02e7385c4bca74c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "patch": "@@ -703,20 +703,20 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n         // Get type of value and span where it was previously\n         // moved.\n-        let node_id = self.tcx.hir().hir_to_node_id(hir::HirId {\n+        let hir_id = hir::HirId {\n             owner: self.body.value.hir_id.owner,\n             local_id: the_move.id\n-        });\n+        };\n         let (move_span, move_note) = match the_move.kind {\n             move_data::Declared => {\n                 unreachable!();\n             }\n \n             move_data::MoveExpr |\n-            move_data::MovePat => (self.tcx.hir().span(node_id), \"\"),\n+            move_data::MovePat => (self.tcx.hir().span_by_hir_id(hir_id), \"\"),\n \n             move_data::Captured =>\n-                (match self.tcx.hir().expect_expr(node_id).node {\n+                (match self.tcx.hir().expect_expr_by_hir_id(hir_id).node {\n                     hir::ExprKind::Closure(.., fn_decl_span, _) => fn_decl_span,\n                     ref r => bug!(\"Captured({:?}) maps to non-closure: {:?}\",\n                                   the_move.id, r),\n@@ -828,8 +828,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     MutabilityViolation => {\n                         let mut db = self.cannot_assign(error_span, &descr, Origin::Ast);\n                         if let mc::NoteClosureEnv(upvar_id) = err.cmt.note {\n-                            let node_id = self.tcx.hir().hir_to_node_id(upvar_id.var_path.hir_id);\n-                            let sp = self.tcx.hir().span(node_id);\n+                            let hir_id = upvar_id.var_path.hir_id;\n+                            let sp = self.tcx.hir().span_by_hir_id(hir_id);\n                             let fn_closure_msg = \"`Fn` closures cannot capture their enclosing \\\n                                                   environment for modifications\";\n                             match (self.tcx.sess.source_map().span_to_snippet(sp), &err.cmt.cat) {\n@@ -1120,8 +1120,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 } else {\n                     \"consider changing this closure to take self by mutable reference\"\n                 };\n-                let node_id = self.tcx.hir().local_def_id_to_node_id(id);\n-                let help_span = self.tcx.hir().span(node_id);\n+                let hir_id = self.tcx.hir().local_def_id_to_hir_id(id);\n+                let help_span = self.tcx.hir().span_by_hir_id(hir_id);\n                 self.cannot_act_on_capture_in_sharable_fn(span,\n                                                           prefix,\n                                                           (help_span, help_msg),\n@@ -1362,9 +1362,9 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     _ => bug!()\n                 };\n                 if *kind == ty::ClosureKind::Fn {\n-                    let closure_node_id =\n-                        self.tcx.hir().local_def_id_to_node_id(upvar_id.closure_expr_id);\n-                    db.span_help(self.tcx.hir().span(closure_node_id),\n+                    let closure_hir_id =\n+                        self.tcx.hir().local_def_id_to_hir_id(upvar_id.closure_expr_id);\n+                    db.span_help(self.tcx.hir().span_by_hir_id(closure_hir_id),\n                                  \"consider changing this closure to take \\\n                                   self by mutable reference\");\n                 }\n@@ -1397,8 +1397,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                       loan_path: &LoanPath<'tcx>,\n                                       out: &mut String) {\n         match loan_path.kind {\n-            LpUpvar(ty::UpvarId { var_path: ty::UpvarPath { hir_id: id}, closure_expr_id: _ }) => {\n-                out.push_str(&self.tcx.hir().name(self.tcx.hir().hir_to_node_id(id)).as_str());\n+            LpUpvar(ty::UpvarId { var_path: ty::UpvarPath { hir_id: id }, closure_expr_id: _ }) => {\n+                out.push_str(&self.tcx.hir().name_by_hir_id(id).as_str());\n             }\n             LpVar(id) => {\n                 out.push_str(&self.tcx.hir().name(id).as_str());"}, {"sha": "894cb4cf11b20d5c379ed86c5db285e4c9588734", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "patch": "@@ -454,8 +454,8 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n         if let Some([module, segment]) = segments.rchunks_exact(2).next() {\n             if let Some(item) = module.def\n                 .and_then(|def| def.mod_def_id())\n-                .and_then(|def_id| self.tcx.hir().as_local_node_id(def_id))\n-                .map(|module_node_id| self.tcx.hir().expect_item(module_node_id))\n+                .and_then(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n+                .map(|module_hir_id| self.tcx.hir().expect_item_by_hir_id(module_hir_id))\n              {\n                 if let hir::ItemKind::Mod(m) = &item.node {\n                     for item_id in m.item_ids.as_ref() {"}, {"sha": "18155169d9ad5147e7a79ee065fd641e299a5e3d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "patch": "@@ -296,8 +296,8 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n         }\n     }\n \n-    let for_ = if let Some(nodeid) = tcx.hir().as_local_node_id(did) {\n-        match tcx.hir().expect_item(nodeid).node {\n+    let for_ = if let Some(hir_id) = tcx.hir().as_local_hir_id(did) {\n+        match tcx.hir().expect_item_by_hir_id(hir_id).node {\n             hir::ItemKind::Impl(.., ref t, _) => {\n                 t.clean(cx)\n             }\n@@ -318,8 +318,8 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     }\n \n     let predicates = tcx.predicates_of(did);\n-    let (trait_items, generics) = if let Some(nodeid) = tcx.hir().as_local_node_id(did) {\n-        match tcx.hir().expect_item(nodeid).node {\n+    let (trait_items, generics) = if let Some(hir_id) = tcx.hir().as_local_hir_id(did) {\n+        match tcx.hir().expect_item_by_hir_id(hir_id).node {\n             hir::ItemKind::Impl(.., ref gen, _, _, ref item_ids) => {\n                 (\n                     item_ids.iter()"}, {"sha": "fa921535a701db69453f744b9aa23356d30fb9d5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f5bba2c6d7b7fe28a33d709e5f776fd70b6f4edc", "patch": "@@ -2562,9 +2562,9 @@ impl Clean<Type> for hir::Ty {\n                 let mut alias = None;\n                 if let Def::TyAlias(def_id) = path.def {\n                     // Substitute private type aliases\n-                    if let Some(node_id) = cx.tcx.hir().as_local_node_id(def_id) {\n+                    if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(def_id) {\n                         if !cx.renderinfo.borrow().access_levels.is_exported(def_id) {\n-                            alias = Some(&cx.tcx.hir().expect_item(node_id).node);\n+                            alias = Some(&cx.tcx.hir().expect_item_by_hir_id(hir_id).node);\n                         }\n                     }\n                 };"}]}