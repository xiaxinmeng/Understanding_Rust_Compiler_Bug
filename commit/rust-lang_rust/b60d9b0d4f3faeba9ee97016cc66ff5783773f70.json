{"sha": "b60d9b0d4f3faeba9ee97016cc66ff5783773f70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MGQ5YjBkNGYzZmFlYmE5ZWU5NzAxNmNjNjZmZjU3ODM3NzNmNzA=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-02-16T01:14:06Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-02-16T01:14:06Z"}, "message": "Preserve trailing spaces in doc comments even when options are set\n\nCloses #37.", "tree": {"sha": "868964ab15758ec3f3e1830b91ca37244f47a4ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/868964ab15758ec3f3e1830b91ca37244f47a4ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60d9b0d4f3faeba9ee97016cc66ff5783773f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60d9b0d4f3faeba9ee97016cc66ff5783773f70", "html_url": "https://github.com/rust-lang/rust/commit/b60d9b0d4f3faeba9ee97016cc66ff5783773f70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60d9b0d4f3faeba9ee97016cc66ff5783773f70/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "651dae30f1f502b9826944dffa98bb3bdf669a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/651dae30f1f502b9826944dffa98bb3bdf669a66", "html_url": "https://github.com/rust-lang/rust/commit/651dae30f1f502b9826944dffa98bb3bdf669a66"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "512863c88bec49e2668c1aff81d6c053e8832999", "filename": "rustfmt-core/src/comment.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b60d9b0d4f3faeba9ee97016cc66ff5783773f70/rustfmt-core%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d9b0d4f3faeba9ee97016cc66ff5783773f70/rustfmt-core%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcomment.rs?ref=b60d9b0d4f3faeba9ee97016cc66ff5783773f70", "patch": "@@ -50,6 +50,13 @@ fn custom_opener(s: &str) -> &str {\n }\n \n impl<'a> CommentStyle<'a> {\n+    pub fn is_doc_comment(&self) -> bool {\n+        match *self {\n+            CommentStyle::TripleSlash | CommentStyle::Doc => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn opener(&self) -> &'a str {\n         match *self {\n             CommentStyle::DoubleSlash => \"// \",\n@@ -248,14 +255,15 @@ fn _rewrite_comment(\n         return light_rewrite_comment(orig, shape.indent, config, is_doc_comment);\n     }\n \n-    identify_comment(orig, block_style, shape, config)\n+    identify_comment(orig, block_style, shape, config, is_doc_comment)\n }\n \n fn identify_comment(\n     orig: &str,\n     block_style: bool,\n     shape: Shape,\n     config: &Config,\n+    is_doc_comment: bool,\n ) -> Option<String> {\n     let style = comment_style(orig, false);\n     let first_group = orig.lines()\n@@ -267,11 +275,18 @@ fn identify_comment(\n         .collect::<Vec<_>>()\n         .join(\"\\n\");\n \n-    let first_group_str = rewrite_comment_inner(&first_group, block_style, style, shape, config)?;\n+    let first_group_str = rewrite_comment_inner(\n+        &first_group,\n+        block_style,\n+        style,\n+        shape,\n+        config,\n+        is_doc_comment || style.is_doc_comment(),\n+    )?;\n     if rest.is_empty() {\n         Some(first_group_str)\n     } else {\n-        identify_comment(&rest, block_style, shape, config).map(|rest_str| {\n+        identify_comment(&rest, block_style, shape, config, is_doc_comment).map(|rest_str| {\n             format!(\n                 \"{}\\n{}{}\",\n                 first_group_str,\n@@ -288,6 +303,7 @@ fn rewrite_comment_inner(\n     style: CommentStyle,\n     shape: Shape,\n     config: &Config,\n+    is_doc_comment: bool,\n ) -> Option<String> {\n     let (opener, closer, line_start) = if block_style {\n         CommentStyle::SingleBullet.to_str_tuplet()\n@@ -315,7 +331,7 @@ fn rewrite_comment_inner(\n     let lines = orig.lines()\n         .enumerate()\n         .map(|(i, mut line)| {\n-            line = line.trim();\n+            line = trim_right_unless_two_whitespaces(line.trim_left(), is_doc_comment);\n             // Drop old closer.\n             if i == line_breaks && line.ends_with(\"*/\") && !line.starts_with(\"//\") {\n                 line = line[..(line.len() - 2)].trim_right();"}, {"sha": "2c4d6a5cc2be9e48df52bc50d682c1bcf443374f", "filename": "rustfmt-core/tests/source/markdown-comment-with-options.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b60d9b0d4f3faeba9ee97016cc66ff5783773f70/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment-with-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d9b0d4f3faeba9ee97016cc66ff5783773f70/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment-with-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment-with-options.rs?ref=b60d9b0d4f3faeba9ee97016cc66ff5783773f70", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-wrap_comments: true\n+\n+// Preserve two trailing whitespaces in doc comment,\n+// but trim any whitespaces in normal comment.\n+\n+//! hello world  \n+//! hello world \n+\n+/// hello world    \n+/// hello world \n+/// hello world  \n+fn foo() {\n+    // hello world  \n+    // hello world \n+    let x = 3;\n+    println!(\"x = {}\", x);\n+}"}, {"sha": "ede2bc0d035f5cd5a095d78eac7489e8a202c84f", "filename": "rustfmt-core/tests/target/markdown-comment-with-options.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b60d9b0d4f3faeba9ee97016cc66ff5783773f70/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment-with-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60d9b0d4f3faeba9ee97016cc66ff5783773f70/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment-with-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment-with-options.rs?ref=b60d9b0d4f3faeba9ee97016cc66ff5783773f70", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-wrap_comments: true\n+\n+// Preserve two trailing whitespaces in doc comment,\n+// but trim any whitespaces in normal comment.\n+\n+//! hello world  \n+//! hello world\n+\n+/// hello world    \n+/// hello world\n+/// hello world  \n+fn foo() {\n+    // hello world\n+    // hello world\n+    let x = 3;\n+    println!(\"x = {}\", x);\n+}"}]}