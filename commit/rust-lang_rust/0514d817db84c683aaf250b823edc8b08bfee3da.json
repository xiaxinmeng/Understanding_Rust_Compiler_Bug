{"sha": "0514d817db84c683aaf250b823edc8b08bfee3da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MTRkODE3ZGI4NGM2ODNhYWYyNTBiODIzZWRjOGIwOGJmZWUzZGE=", "commit": {"author": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-06-22T18:36:56Z"}, "committer": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-06-22T18:43:53Z"}, "message": "Decouple http file stream logic from temp dir logic", "tree": {"sha": "56af0bdf3724d4bed6101c18b3a8579102e2b46c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56af0bdf3724d4bed6101c18b3a8579102e2b46c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0514d817db84c683aaf250b823edc8b08bfee3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0514d817db84c683aaf250b823edc8b08bfee3da", "html_url": "https://github.com/rust-lang/rust/commit/0514d817db84c683aaf250b823edc8b08bfee3da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0514d817db84c683aaf250b823edc8b08bfee3da/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb69203b55d83aeaf4e58bff4a58f2f17d4087d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb69203b55d83aeaf4e58bff4a58f2f17d4087d", "html_url": "https://github.com/rust-lang/rust/commit/ceb69203b55d83aeaf4e58bff4a58f2f17d4087d"}], "stats": {"total": 101, "additions": 57, "deletions": 44}, "files": [{"sha": "7bae8bb33389be6d2aa80f75fa2ab560f739d663", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0514d817db84c683aaf250b823edc8b08bfee3da/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0514d817db84c683aaf250b823edc8b08bfee3da/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=0514d817db84c683aaf250b823edc8b08bfee3da", "patch": "@@ -178,7 +178,11 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n     const dest = path.join(config.globalStoragePath, \"rust-analyzer.vsix\");\n-    await download(artifact.browser_download_url, dest, \"Downloading rust-analyzer extension\");\n+    await download({\n+        url: artifact.browser_download_url,\n+        dest,\n+        progressTitle: \"Downloading rust-analyzer extension\",\n+    });\n \n     await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", vscode.Uri.file(dest));\n     await fs.unlink(dest);\n@@ -299,7 +303,12 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         if (err.code !== \"ENOENT\") throw err;\n     });\n \n-    await download(artifact.browser_download_url, dest, \"Downloading rust-analyzer server\", { mode: 0o755 });\n+    await download({\n+        url: artifact.browser_download_url,\n+        dest,\n+        progressTitle: \"Downloading rust-analyzer server\",\n+        mode: 0o755\n+    });\n \n     // Patching executable if that's NixOS.\n     if (await fs.stat(\"/etc/nixos\").then(_ => true).catch(_ => false)) {"}, {"sha": "e02fd6d4f47fb949a76994c4b48c71beddfc8595", "filename": "editors/code/src/net.ts", "status": "modified", "additions": 46, "deletions": 42, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/0514d817db84c683aaf250b823edc8b08bfee3da/editors%2Fcode%2Fsrc%2Fnet.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0514d817db84c683aaf250b823edc8b08bfee3da/editors%2Fcode%2Fsrc%2Fnet.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnet.ts?ref=0514d817db84c683aaf250b823edc8b08bfee3da", "patch": "@@ -60,32 +60,40 @@ export interface GithubRelease {\n     }>;\n }\n \n+interface DownloadOpts {\n+    progressTitle: string;\n+    url: string;\n+    dest: string;\n+    mode?: number;\n+}\n \n-export async function download(\n-    downloadUrl: string,\n-    destinationPath: string,\n-    progressTitle: string,\n-    { mode }: { mode?: number } = {},\n-) {\n-    await vscode.window.withProgress(\n-        {\n-            location: vscode.ProgressLocation.Notification,\n-            cancellable: false,\n-            title: progressTitle\n-        },\n-        async (progress, _cancellationToken) => {\n-            let lastPercentage = 0;\n-            await downloadFile(downloadUrl, destinationPath, mode, (readBytes, totalBytes) => {\n-                const newPercentage = (readBytes / totalBytes) * 100;\n-                progress.report({\n-                    message: newPercentage.toFixed(0) + \"%\",\n-                    increment: newPercentage - lastPercentage\n+export async function download(opts: DownloadOpts) {\n+    // Put the artifact into a temporary folder to prevent partially downloaded files when user kills vscode\n+    await withTempDir(async tempDir => {\n+        const tempFile = path.join(tempDir, path.basename(opts.dest));\n+\n+        await vscode.window.withProgress(\n+            {\n+                location: vscode.ProgressLocation.Notification,\n+                cancellable: false,\n+                title: opts.progressTitle\n+            },\n+            async (progress, _cancellationToken) => {\n+                let lastPercentage = 0;\n+                await downloadFile(opts.url, tempFile, opts.mode, (readBytes, totalBytes) => {\n+                    const newPercentage = (readBytes / totalBytes) * 100;\n+                    progress.report({\n+                        message: newPercentage.toFixed(0) + \"%\",\n+                        increment: newPercentage - lastPercentage\n+                    });\n+\n+                    lastPercentage = newPercentage;\n                 });\n+            }\n+        );\n \n-                lastPercentage = newPercentage;\n-            });\n-        }\n-    );\n+        await moveFile(tempFile, opts.dest);\n+    });\n }\n \n /**\n@@ -114,28 +122,23 @@ async function downloadFile(\n \n     log.debug(\"Downloading file of\", totalBytes, \"bytes size from\", url, \"to\", destFilePath);\n \n-    // Put the artifact into a temporary folder to prevent partially downloaded files when user kills vscode\n-    await withTempFile(async tempFilePath => {\n-        const destFileStream = fs.createWriteStream(tempFilePath, { mode });\n-\n-        let readBytes = 0;\n-        res.body.on(\"data\", (chunk: Buffer) => {\n-            readBytes += chunk.length;\n-            onProgress(readBytes, totalBytes);\n-        });\n+    let readBytes = 0;\n+    res.body.on(\"data\", (chunk: Buffer) => {\n+        readBytes += chunk.length;\n+        onProgress(readBytes, totalBytes);\n+    });\n \n-        await pipeline(res.body, destFileStream);\n-        await new Promise<void>(resolve => {\n-            destFileStream.on(\"close\", resolve);\n-            destFileStream.destroy();\n-            // This workaround is awaiting to be removed when vscode moves to newer nodejs version:\n-            // https://github.com/rust-analyzer/rust-analyzer/issues/3167\n-        });\n-        await moveFile(tempFilePath, destFilePath);\n+    const destFileStream = fs.createWriteStream(destFilePath, { mode });\n+    await pipeline(res.body, destFileStream);\n+    await new Promise<void>(resolve => {\n+        destFileStream.on(\"close\", resolve);\n+        destFileStream.destroy();\n+        // This workaround is awaiting to be removed when vscode moves to newer nodejs version:\n+        // https://github.com/rust-analyzer/rust-analyzer/issues/3167\n     });\n }\n \n-async function withTempFile(scope: (tempFilePath: string) => Promise<void>) {\n+async function withTempDir(scope: (tempDirPath: string) => Promise<void>) {\n     // Based on the great article: https://advancedweb.hu/secure-tempfiles-in-nodejs-without-dependencies/\n \n     // `.realpath()` should handle the cases where os.tmpdir() contains symlinks\n@@ -144,7 +147,7 @@ async function withTempFile(scope: (tempFilePath: string) => Promise<void>) {\n     const tempDir = await fs.promises.mkdtemp(path.join(osTempDir, \"rust-analyzer\"));\n \n     try {\n-        return await scope(path.join(tempDir, \"file\"));\n+        return await scope(tempDir);\n     } finally {\n         // We are good citizens :D\n         void fs.promises.rmdir(tempDir, { recursive: true }).catch(log.error);\n@@ -161,6 +164,7 @@ async function moveFile(src: fs.PathLike, dest: fs.PathLike) {\n             await fs.promises.unlink(src);\n         } else {\n             log.error(`Failed to rename the file ${src} -> ${dest}`, err);\n+            throw err;\n         }\n     }\n }"}]}