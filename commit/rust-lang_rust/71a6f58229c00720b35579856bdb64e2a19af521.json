{"sha": "71a6f58229c00720b35579856bdb64e2a19af521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTZmNTgyMjljMDA3MjBiMzU1Nzk4NTZiZGI2NGUyYTE5YWY1MjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-02T10:10:27Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-02T12:32:37Z"}, "message": "parser: address review comments re. `self`.", "tree": {"sha": "c4af395650e4903a37a93c6de89f390852616bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4af395650e4903a37a93c6de89f390852616bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a6f58229c00720b35579856bdb64e2a19af521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a6f58229c00720b35579856bdb64e2a19af521", "html_url": "https://github.com/rust-lang/rust/commit/71a6f58229c00720b35579856bdb64e2a19af521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a6f58229c00720b35579856bdb64e2a19af521/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8674efdb7c9d263caef8d282086a4243eae8df20", "url": "https://api.github.com/repos/rust-lang/rust/commits/8674efdb7c9d263caef8d282086a4243eae8df20", "html_url": "https://github.com/rust-lang/rust/commit/8674efdb7c9d263caef8d282086a4243eae8df20"}], "stats": {"total": 252, "additions": 124, "deletions": 128}, "files": [{"sha": "23c5ef9b3d6520f0be9bf4b338d5c8dbab59f28c", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -372,10 +372,10 @@ impl<'a> AstValidator<'a> {\n                 self.err_handler()\n                     .struct_span_err(\n                         param.span,\n-                        \"`self` parameter only allowed in associated `fn`s\",\n+                        \"`self` parameter is only allowed in associated functions\",\n                     )\n                     .span_label(param.span, \"not semantically valid as function parameter\")\n-                    .note(\"associated `fn`s are those in `impl` or `trait` definitions\")\n+                    .note(\"associated functions are those in `impl` or `trait` definitions\")\n                     .emit();\n             }\n         }"}, {"sha": "4f259d314fbf19273d2c5ec8a54fa2e51476e8be", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -1336,8 +1336,7 @@ impl<'a> Parser<'a> {\n         err: &mut DiagnosticBuilder<'_>,\n         pat: P<ast::Pat>,\n         require_name: bool,\n-        is_self_semantic: bool,\n-        in_assoc_item: bool,\n+        first_param: bool,\n     ) -> Option<Ident> {\n         // If we find a pattern followed by an identifier, it could be an (incorrect)\n         // C-style parameter declaration.\n@@ -1357,13 +1356,12 @@ impl<'a> Parser<'a> {\n             return Some(ident);\n         } else if let PatKind::Ident(_, ident, _) = pat.kind {\n             if require_name\n-                && (in_assoc_item\n-                    || self.token == token::Comma\n+                && (self.token == token::Comma\n                     || self.token == token::Lt\n                     || self.token == token::CloseDelim(token::Paren))\n             {\n                 // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n-                if is_self_semantic {\n+                if first_param {\n                     err.span_suggestion(\n                         pat.span,\n                         \"if this is a `self` type, give it a parameter name\",\n@@ -1420,21 +1418,12 @@ impl<'a> Parser<'a> {\n         Ok((pat, ty))\n     }\n \n-    pub(super) fn recover_bad_self_param(\n-        &mut self,\n-        mut param: ast::Param,\n-        in_assoc_item: bool,\n-    ) -> PResult<'a, ast::Param> {\n+    pub(super) fn recover_bad_self_param(&mut self, mut param: Param) -> PResult<'a, Param> {\n         let sp = param.pat.span;\n         param.ty.kind = TyKind::Err;\n-        let mut err = self.struct_span_err(sp, \"unexpected `self` parameter in function\");\n-        if in_assoc_item {\n-            err.span_label(sp, \"must be the first associated function parameter\");\n-        } else {\n-            err.span_label(sp, \"not valid as function parameter\");\n-            err.note(\"`self` is only valid as the first parameter of an associated function\");\n-        }\n-        err.emit();\n+        self.struct_span_err(sp, \"unexpected `self` parameter in function\")\n+            .span_label(sp, \"must be the first parameter of an associated function\")\n+            .emit();\n         Ok(param)\n     }\n "}, {"sha": "da5cc0bb83e350d3ac8ba9103f12a56bcc5896e9", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -1715,9 +1715,6 @@ impl<'a> Parser<'a> {\n \n /// The parsing configuration used to parse a parameter list (see `parse_fn_params`).\n pub(super) struct ParamCfg {\n-    /// Is `self` is *semantically* allowed as the first parameter?\n-    /// This is only used for diagnostics.\n-    pub in_assoc_item: bool,\n     /// `is_name_required` decides if, per-parameter,\n     /// the parameter must have a pattern or just a type.\n     pub is_name_required: fn(&token::Token) -> bool,\n@@ -1733,7 +1730,7 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n         header: FnHeader,\n     ) -> PResult<'a, Option<P<Item>>> {\n-        let cfg = ParamCfg { in_assoc_item: false, is_name_required: |_| true };\n+        let cfg = ParamCfg { is_name_required: |_| true };\n         let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n         let kind = ItemKind::Fn(FnSig { decl, header }, generics, body);\n@@ -1748,7 +1745,7 @@ impl<'a> Parser<'a> {\n         attrs: Vec<Attribute>,\n         extern_sp: Span,\n     ) -> PResult<'a, P<ForeignItem>> {\n-        let cfg = ParamCfg { in_assoc_item: false, is_name_required: |_| true };\n+        let cfg = ParamCfg { is_name_required: |_| true };\n         self.expect_keyword(kw::Fn)?;\n         let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n         let span = lo.to(self.token.span);\n@@ -1763,9 +1760,8 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         is_name_required: fn(&token::Token) -> bool,\n     ) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n-        let cfg = ParamCfg { in_assoc_item: true, is_name_required };\n         let header = self.parse_fn_front_matter()?;\n-        let (ident, decl, generics) = self.parse_fn_sig(&cfg)?;\n+        let (ident, decl, generics) = self.parse_fn_sig(&ParamCfg { is_name_required })?;\n         let sig = FnSig { header, decl };\n         let body = self.parse_assoc_fn_body(at_end, attrs)?;\n         Ok((ident, AssocItemKind::Fn(sig, body), generics))\n@@ -1893,11 +1889,7 @@ impl<'a> Parser<'a> {\n         // Possibly parse `self`. Recover if we parsed it and it wasn't allowed here.\n         if let Some(mut param) = self.parse_self_param()? {\n             param.attrs = attrs.into();\n-            return if first_param {\n-                Ok(param)\n-            } else {\n-                self.recover_bad_self_param(param, cfg.in_assoc_item)\n-            };\n+            return if first_param { Ok(param) } else { self.recover_bad_self_param(param) };\n         }\n \n         let is_name_required = match self.token.kind {\n@@ -1909,13 +1901,9 @@ impl<'a> Parser<'a> {\n \n             let pat = self.parse_fn_param_pat()?;\n             if let Err(mut err) = self.expect(&token::Colon) {\n-                return if let Some(ident) = self.parameter_without_type(\n-                    &mut err,\n-                    pat,\n-                    is_name_required,\n-                    first_param && cfg.in_assoc_item,\n-                    cfg.in_assoc_item,\n-                ) {\n+                return if let Some(ident) =\n+                    self.parameter_without_type(&mut err, pat, is_name_required, first_param)\n+                {\n                     err.emit();\n                     Ok(dummy_arg(ident))\n                 } else {"}, {"sha": "c9c2cbb98ca40710892f24e67b6c8d9a5920cf03", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -288,8 +288,7 @@ impl<'a> Parser<'a> {\n         let unsafety = self.parse_unsafety();\n         let ext = self.parse_extern()?;\n         self.expect_keyword(kw::Fn)?;\n-        let cfg = ParamCfg { in_assoc_item: false, is_name_required: |_| false };\n-        let decl = self.parse_fn_decl(&cfg, false)?;\n+        let decl = self.parse_fn_decl(&ParamCfg { is_name_required: |_| false }, false)?;\n         Ok(TyKind::BareFn(P(BareFnTy { ext, unsafety, generic_params, decl })))\n     }\n "}, {"sha": "7c580bc5a5deaa1d2ff46b6dece1c6b5e6cd1e43", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -1,6 +1,6 @@\n fn a(&self) { }\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n //~| NOTE not semantically valid as function parameter\n-//~| NOTE associated `fn`s are those in `impl` or `trait` definitions\n+//~| NOTE associated functions are those in `impl` or `trait` definitions\n \n fn main() { }"}, {"sha": "37753e61f582a790d42af1456412d34b8e3e851f", "filename": "src/test/ui/invalid-self-argument/bare-fn-start.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn-start.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -1,10 +1,10 @@\n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/bare-fn-start.rs:1:6\n    |\n LL | fn a(&self) { }\n    |      ^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n error: aborting due to previous error\n "}, {"sha": "342bdc31a7c8218f45a05c557a4206a610f3871a", "filename": "src/test/ui/invalid-self-argument/bare-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -1,6 +1,5 @@\n fn b(foo: u32, &mut self) { }\n //~^ ERROR unexpected `self` parameter in function\n-//~| NOTE not valid as function parameter\n-//~| NOTE `self` is only valid as the first parameter of an associated function\n+//~| NOTE must be the first parameter of an associated function\n \n fn main() { }"}, {"sha": "ff2217b5e80bc04acacd8506cf241655e814f2c3", "filename": "src/test/ui/invalid-self-argument/bare-fn.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Fbare-fn.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -2,9 +2,7 @@ error: unexpected `self` parameter in function\n   --> $DIR/bare-fn.rs:1:16\n    |\n LL | fn b(foo: u32, &mut self) { }\n-   |                ^^^^^^^^^ not valid as function parameter\n-   |\n-   = note: `self` is only valid as the first parameter of an associated function\n+   |                ^^^^^^^^^ must be the first parameter of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "5ccea589561cbdea1b02aae56fb3eaa448d5b65a", "filename": "src/test/ui/invalid-self-argument/trait-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -3,7 +3,7 @@ struct Foo {}\n impl Foo {\n     fn c(foo: u32, self) {}\n     //~^ ERROR unexpected `self` parameter in function\n-    //~| NOTE must be the first associated function parameter\n+    //~| NOTE must be the first parameter of an associated function\n \n     fn good(&mut self, foo: u32) {}\n }"}, {"sha": "b9887af962cbc1a898801fe21e54127a58ecb77c", "filename": "src/test/ui/invalid-self-argument/trait-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-self-argument%2Ftrait-fn.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -2,7 +2,7 @@ error: unexpected `self` parameter in function\n   --> $DIR/trait-fn.rs:4:20\n    |\n LL |     fn c(foo: u32, self) {}\n-   |                    ^^^^ must be the first associated function parameter\n+   |                    ^^^^ must be the first parameter of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "6f19ee9c7dc0d600aba995b6b8a2292c041c5334", "filename": "src/test/ui/parser/inverted-parameters.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -21,6 +21,7 @@ fn pattern((i32, i32) (a, b)) {}\n fn fizz(i32) {}\n //~^ ERROR expected one of `:`, `@`\n //~| HELP if this was a parameter name, give it a type\n+//~| HELP if this is a `self` type, give it a parameter name\n //~| HELP if this is a type, explicitly ignore the parameter name\n \n fn missing_colon(quux S) {}"}, {"sha": "043ff65f74e1a4831e3b066e6321ca2223115bca", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -35,6 +35,10 @@ LL | fn fizz(i32) {}\n    |            ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn fizz(self: i32) {}\n+   |         ^^^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL | fn fizz(i32: TypeName) {}\n@@ -45,7 +49,7 @@ LL | fn fizz(_: i32) {}\n    |         ^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `S`\n-  --> $DIR/inverted-parameters.rs:26:23\n+  --> $DIR/inverted-parameters.rs:27:23\n    |\n LL | fn missing_colon(quux S) {}\n    |                  -----^"}, {"sha": "9f138bf84ce1985a69638db8db90ee6bc3c56d30", "filename": "src/test/ui/parser/omitted-arg-in-item-fn.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fomitted-arg-in-item-fn.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -5,6 +5,10 @@ LL | fn foo(x) {\n    |         ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn foo(self: x) {\n+   |        ^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL | fn foo(x: TypeName) {"}, {"sha": "6db9a4a0f15a6f92d69e4b3c1c0a20bbe9e8aa01", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -5,6 +5,10 @@ LL | fn a(B<) {}\n    |       ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn a(self: B<) {}\n+   |      ^^^^^^^\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn a(_: B<) {}"}, {"sha": "47d8381b0b1dad4322fcc4935f9c73de6a0a001f", "filename": "src/test/ui/parser/self-in-function-arg.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-in-function-arg.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -2,9 +2,7 @@ error: unexpected `self` parameter in function\n   --> $DIR/self-in-function-arg.rs:1:15\n    |\n LL | fn foo(x:i32, self: i32) -> i32 { self }\n-   |               ^^^^ not valid as function parameter\n-   |\n-   = note: `self` is only valid as the first parameter of an associated function\n+   |               ^^^^ must be the first parameter of an associated function\n \n error: aborting due to previous error\n "}, {"sha": "5676971b01ae42a123c8a4fa1f24c4b5321c6dfb", "filename": "src/test/ui/parser/self-param-semantic-fail.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.rs?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -6,59 +6,59 @@ fn main() {}\n \n fn free() {\n     fn f1(self) {}\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f2(mut self) {}\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f3(&self) {}\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f4(&mut self) {}\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f5<'a>(&'a self) {}\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f6<'a>(&'a mut self) {}\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f7(self: u8) {}\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f8(mut self: u8) {}\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n }\n \n extern {\n     fn f1(self);\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f2(mut self);\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     //~| ERROR patterns aren't allowed in\n     fn f3(&self);\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f4(&mut self);\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f5<'a>(&'a self);\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f6<'a>(&'a mut self);\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f7(self: u8);\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     fn f8(mut self: u8);\n-    //~^ ERROR `self` parameter only allowed in associated `fn`s\n+    //~^ ERROR `self` parameter is only allowed in associated functions\n     //~| ERROR patterns aren't allowed in\n }\n \n type X1 = fn(self);\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n type X2 = fn(mut self);\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n //~| ERROR patterns aren't allowed in\n type X3 = fn(&self);\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n type X4 = fn(&mut self);\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n type X5 = for<'a> fn(&'a self);\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n type X6 = for<'a> fn(&'a mut self);\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n type X7 = fn(self: u8);\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n type X8 = fn(mut self: u8);\n-//~^ ERROR `self` parameter only allowed in associated `fn`s\n+//~^ ERROR `self` parameter is only allowed in associated functions\n //~| ERROR patterns aren't allowed in"}, {"sha": "e5d679773696b1b760c463a66df89b4aae26a775", "filename": "src/test/ui/parser/self-param-semantic-fail.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fself-param-semantic-fail.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -1,212 +1,212 @@\n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:8:11\n    |\n LL |     fn f1(self) {}\n    |           ^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:10:11\n    |\n LL |     fn f2(mut self) {}\n    |           ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:12:11\n    |\n LL |     fn f3(&self) {}\n    |           ^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:14:11\n    |\n LL |     fn f4(&mut self) {}\n    |           ^^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:16:15\n    |\n LL |     fn f5<'a>(&'a self) {}\n    |               ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:18:15\n    |\n LL |     fn f6<'a>(&'a mut self) {}\n    |               ^^^^^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:20:11\n    |\n LL |     fn f7(self: u8) {}\n    |           ^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:22:11\n    |\n LL |     fn f8(mut self: u8) {}\n    |           ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:27:11\n    |\n LL |     fn f1(self);\n    |           ^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:29:11\n    |\n LL |     fn f2(mut self);\n    |           ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n error[E0130]: patterns aren't allowed in foreign function declarations\n   --> $DIR/self-param-semantic-fail.rs:29:11\n    |\n LL |     fn f2(mut self);\n    |           ^^^^^^^^ pattern not allowed in foreign function\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:32:11\n    |\n LL |     fn f3(&self);\n    |           ^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:34:11\n    |\n LL |     fn f4(&mut self);\n    |           ^^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:36:15\n    |\n LL |     fn f5<'a>(&'a self);\n    |               ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:38:15\n    |\n LL |     fn f6<'a>(&'a mut self);\n    |               ^^^^^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:40:11\n    |\n LL |     fn f7(self: u8);\n    |           ^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:42:11\n    |\n LL |     fn f8(mut self: u8);\n    |           ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n error[E0130]: patterns aren't allowed in foreign function declarations\n   --> $DIR/self-param-semantic-fail.rs:42:11\n    |\n LL |     fn f8(mut self: u8);\n    |           ^^^^^^^^ pattern not allowed in foreign function\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:47:14\n    |\n LL | type X1 = fn(self);\n    |              ^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:49:14\n    |\n LL | type X2 = fn(mut self);\n    |              ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n error[E0561]: patterns aren't allowed in function pointer types\n   --> $DIR/self-param-semantic-fail.rs:49:14\n    |\n LL | type X2 = fn(mut self);\n    |              ^^^^^^^^\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:52:14\n    |\n LL | type X3 = fn(&self);\n    |              ^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:54:14\n    |\n LL | type X4 = fn(&mut self);\n    |              ^^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:56:22\n    |\n LL | type X5 = for<'a> fn(&'a self);\n    |                      ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:58:22\n    |\n LL | type X6 = for<'a> fn(&'a mut self);\n    |                      ^^^^^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:60:14\n    |\n LL | type X7 = fn(self: u8);\n    |              ^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n-error: `self` parameter only allowed in associated `fn`s\n+error: `self` parameter is only allowed in associated functions\n   --> $DIR/self-param-semantic-fail.rs:62:14\n    |\n LL | type X8 = fn(mut self: u8);\n    |              ^^^^^^^^ not semantically valid as function parameter\n    |\n-   = note: associated `fn`s are those in `impl` or `trait` definitions\n+   = note: associated functions are those in `impl` or `trait` definitions\n \n error[E0561]: patterns aren't allowed in function pointer types\n   --> $DIR/self-param-semantic-fail.rs:62:14"}, {"sha": "80a237ac6aad498d7ce1575307fd790f68d51d42", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -5,6 +5,10 @@ LL | fn foo(Option<i32>, String) {}\n    |              ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn foo(self: Option<i32>, String) {}\n+   |        ^^^^^^^^^^^^\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | fn foo(_: Option<i32>, String) {}\n@@ -33,6 +37,10 @@ LL | fn bar(x, y: usize) {}\n    |         ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn bar(self: x, y: usize) {}\n+   |        ^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL | fn bar(x: TypeName, y: usize) {}"}, {"sha": "e96db3f1e8630664159a9ef6c8f46506de0382bf", "filename": "src/test/ui/suggestions/issue-64252-self-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a6f58229c00720b35579856bdb64e2a19af521/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr?ref=71a6f58229c00720b35579856bdb64e2a19af521", "patch": "@@ -5,6 +5,10 @@ LL | pub fn foo(Box<Self>) { }\n    |               ^ expected one of `:`, `@`, or `|`\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | pub fn foo(self: Box<Self>) { }\n+   |            ^^^^^^^^^\n help: if this is a type, explicitly ignore the parameter name\n    |\n LL | pub fn foo(_: Box<Self>) { }"}]}