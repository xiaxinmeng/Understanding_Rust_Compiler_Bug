{"sha": "103f7a499b2eeff908ce9234c812262a9e87a16f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwM2Y3YTQ5OWIyZWVmZjkwOGNlOTIzNGM4MTIyNjJhOWU4N2ExNmY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-07T10:54:35Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-07T10:56:31Z"}, "message": "fix `super_visit_with` for `Terminator`", "tree": {"sha": "7309d6f5618d89eba3c62bcb64a5c06e4f183627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7309d6f5618d89eba3c62bcb64a5c06e4f183627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/103f7a499b2eeff908ce9234c812262a9e87a16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/103f7a499b2eeff908ce9234c812262a9e87a16f", "html_url": "https://github.com/rust-lang/rust/commit/103f7a499b2eeff908ce9234c812262a9e87a16f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/103f7a499b2eeff908ce9234c812262a9e87a16f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a601302ff0217b91589b5a7310a8a23adb843fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a601302ff0217b91589b5a7310a8a23adb843fdc", "html_url": "https://github.com/rust-lang/rust/commit/a601302ff0217b91589b5a7310a8a23adb843fdc"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "0801188b27881c80d9c531a0d483da710e51f06a", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/103f7a499b2eeff908ce9234c812262a9e87a16f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103f7a499b2eeff908ce9234c812262a9e87a16f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=103f7a499b2eeff908ce9234c812262a9e87a16f", "patch": "@@ -109,24 +109,21 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 args.visit_with(visitor)\n             }\n             Assert { ref cond, ref msg, .. } => {\n-                if cond.visit_with(visitor).is_break() {\n-                    use AssertKind::*;\n-                    match msg {\n-                        BoundsCheck { ref len, ref index } => {\n-                            len.visit_with(visitor)?;\n-                            index.visit_with(visitor)\n-                        }\n-                        Overflow(_, l, r) => {\n-                            l.visit_with(visitor)?;\n-                            r.visit_with(visitor)\n-                        }\n-                        OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n-                            op.visit_with(visitor)\n-                        }\n-                        ResumedAfterReturn(_) | ResumedAfterPanic(_) => ControlFlow::CONTINUE,\n+                cond.visit_with(visitor)?;\n+                use AssertKind::*;\n+                match msg {\n+                    BoundsCheck { ref len, ref index } => {\n+                        len.visit_with(visitor)?;\n+                        index.visit_with(visitor)\n+                    }\n+                    Overflow(_, l, r) => {\n+                        l.visit_with(visitor)?;\n+                        r.visit_with(visitor)\n+                    }\n+                    OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n+                        op.visit_with(visitor)\n                     }\n-                } else {\n-                    ControlFlow::CONTINUE\n+                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => ControlFlow::CONTINUE,\n                 }\n             }\n             InlineAsm { ref operands, .. } => operands.visit_with(visitor),"}]}