{"sha": "4a1a5ff54eee3d0fa42f3f64170fc19524aa10f8", "node_id": "C_kwDOAAsO6NoAKDRhMWE1ZmY1NGVlZTNkMGZhNDJmM2Y2NDE3MGZjMTk1MjRhYTEwZjg", "commit": {"author": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-27T15:20:12Z"}, "committer": {"name": "Anatol Ulrich", "email": "anatol.ulrich@ferrous-systems.com", "date": "2021-10-27T15:20:12Z"}, "message": "fix logic error: alias detection was too lenient", "tree": {"sha": "59fcd9962a2c7f65f70f906c85495bc13eeeeb71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59fcd9962a2c7f65f70f906c85495bc13eeeeb71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1a5ff54eee3d0fa42f3f64170fc19524aa10f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1a5ff54eee3d0fa42f3f64170fc19524aa10f8", "html_url": "https://github.com/rust-lang/rust/commit/4a1a5ff54eee3d0fa42f3f64170fc19524aa10f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1a5ff54eee3d0fa42f3f64170fc19524aa10f8/comments", "author": null, "committer": null, "parents": [{"sha": "6cd15c296d47a3021eaa6073ca0c9e2169147738", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd15c296d47a3021eaa6073ca0c9e2169147738", "html_url": "https://github.com/rust-lang/rust/commit/6cd15c296d47a3021eaa6073ca0c9e2169147738"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "2f95557a8e093d31ef1c734945aac81bf519c439", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a5ff54eee3d0fa42f3f64170fc19524aa10f8/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a5ff54eee3d0fa42f3f64170fc19524aa10f8/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=4a1a5ff54eee3d0fa42f3f64170fc19524aa10f8", "patch": "@@ -147,22 +147,27 @@ fn find_definitions(\n                     })\n                     .map(|def| (name_like.clone(), def))\n                     .ok_or_else(|| format_err!(\"No references found at position\")),\n-                ast::NameLike::NameRef(name_ref) => NameRefClass::classify(sema, name_ref)\n-                    .map(|class| match class {\n-                        NameRefClass::Definition(def) => def,\n-                        NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n-                            Definition::Local(local_ref)\n-                        }\n-                    })\n-                    .and_then(|def| {\n-                        // if the name differs from the definitions name it has to be an alias\n-                        if def.name(sema.db).map_or(false, |it| it.to_string() != name_ref.text()) {\n-                            None\n-                        } else {\n-                            Some((name_like.clone(), def))\n-                        }\n-                    })\n-                    .ok_or_else(|| format_err!(\"Renaming aliases is currently unsupported\")),\n+                ast::NameLike::NameRef(name_ref) => {\n+                    NameRefClass::classify(sema, name_ref)\n+                        .map(|class| match class {\n+                            NameRefClass::Definition(def) => def,\n+                            NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n+                                Definition::Local(local_ref)\n+                            }\n+                        })\n+                        .ok_or_else(|| format_err!(\"No references found at position\"))\n+                        .and_then(|def| {\n+                            // if the name differs from the definitions name it has to be an alias\n+                            if def\n+                                .name(sema.db)\n+                                .map_or(false, |it| it.to_string() != name_ref.text())\n+                            {\n+                                Err(format_err!(\"Renaming aliases is currently unsupported\"))\n+                            } else {\n+                                Ok((name_like.clone(), def))\n+                            }\n+                        })\n+                }\n                 ast::NameLike::Lifetime(lifetime) => {\n                     NameRefClass::classify_lifetime(sema, lifetime)\n                         .and_then(|class| match class {\n@@ -183,8 +188,8 @@ fn find_definitions(\n         });\n \n     // TODO avoid collect() somehow?\n-    let v: RenameResult<Vec<(ast::NameLike, Definition)>> = symbols.collect();\n-    match v {\n+    let res: RenameResult<Vec<(ast::NameLike, Definition)>> = symbols.collect();\n+    match res {\n         // remove duplicates\n         Ok(v) => {\n             if v.is_empty() {"}]}