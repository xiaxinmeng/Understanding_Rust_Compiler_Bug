{"sha": "db47071df2647f90da5a66624caf262fa3a17456", "node_id": "C_kwDOAAsO6NoAKGRiNDcwNzFkZjI2NDdmOTBkYTVhNjY2MjRjYWYyNjJmYTNhMTc0NTY", "commit": {"author": {"name": "jonathanCogan", "email": "jonathanecogan@gmail.com", "date": "2022-10-28T23:48:00Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-12-30T13:00:42Z"}, "message": "Replace libstd, libcore, liballoc in line comments.", "tree": {"sha": "2bf358a7c3997b7dd80ccd17dda0d52f0d82ff31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bf358a7c3997b7dd80ccd17dda0d52f0d82ff31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db47071df2647f90da5a66624caf262fa3a17456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db47071df2647f90da5a66624caf262fa3a17456", "html_url": "https://github.com/rust-lang/rust/commit/db47071df2647f90da5a66624caf262fa3a17456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db47071df2647f90da5a66624caf262fa3a17456/comments", "author": {"login": "jonathanCogan", "id": 38228852, "node_id": "MDQ6VXNlcjM4MjI4ODUy", "avatar_url": "https://avatars.githubusercontent.com/u/38228852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathanCogan", "html_url": "https://github.com/jonathanCogan", "followers_url": "https://api.github.com/users/jonathanCogan/followers", "following_url": "https://api.github.com/users/jonathanCogan/following{/other_user}", "gists_url": "https://api.github.com/users/jonathanCogan/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathanCogan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathanCogan/subscriptions", "organizations_url": "https://api.github.com/users/jonathanCogan/orgs", "repos_url": "https://api.github.com/users/jonathanCogan/repos", "events_url": "https://api.github.com/users/jonathanCogan/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathanCogan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d", "html_url": "https://github.com/rust-lang/rust/commit/72067c77bdc1e8e339b9ed378a2c0ca0a9367c4d"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "a2fdec6fbfe7b18b3c0ae48fc9956935c885c8d6", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -23,7 +23,7 @@ extern \"Rust\" {\n     // These are the magic symbols to call the global allocator.  rustc generates\n     // them to call `__rg_alloc` etc. if there is a `#[global_allocator]` attribute\n     // (the code expanding that attribute macro generates those functions), or to call\n-    // the default implementations in libstd (`__rdl_alloc` etc. in `library/std/src/alloc.rs`)\n+    // the default implementations in std (`__rdl_alloc` etc. in `library/std/src/alloc.rs`)\n     // otherwise.\n     // The rustc fork of LLVM 14 and earlier also special-cases these function names to be able to optimize them\n     // like `malloc`, `realloc`, and `free`, respectively."}, {"sha": "f6cbac005ff392abbff1b31daa81f4ad73a95ce9", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -75,7 +75,7 @@\n ))]\n #![no_std]\n #![needs_allocator]\n-// To run liballoc tests without x.py without ending up with two copies of liballoc, Miri needs to be\n+// To run alloc tests without x.py without ending up with two copies of alloc, Miri needs to be\n // able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n // rustc itself never sets the feature, so this line has no affect there.\n #![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]"}, {"sha": "24f1b3a1c87509888ff5cc3dacf45679732942c0", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -2678,7 +2678,7 @@ impl From<&String> for String {\n     }\n }\n \n-// note: test pulls in libstd, which causes errors here\n+// note: test pulls in std, which causes errors here\n #[cfg(not(test))]\n #[stable(feature = \"string_from_box\", since = \"1.18.0\")]\n impl From<Box<str>> for String {"}, {"sha": "1da73862d4a924634e73146b9b4c6fb2b1508698", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -3191,7 +3191,7 @@ where\n     }\n }\n \n-// note: test pulls in libstd, which causes errors here\n+// note: test pulls in std, which causes errors here\n #[cfg(not(test))]\n #[stable(feature = \"vec_from_box\", since = \"1.18.0\")]\n impl<T, A: Allocator> From<Box<[T], A>> for Vec<T, A> {\n@@ -3209,7 +3209,7 @@ impl<T, A: Allocator> From<Box<[T], A>> for Vec<T, A> {\n     }\n }\n \n-// note: test pulls in libstd, which causes errors here\n+// note: test pulls in std, which causes errors here\n #[cfg(not(no_global_oom_handling))]\n #[cfg(not(test))]\n #[stable(feature = \"box_from_vec\", since = \"1.20.0\")]"}, {"sha": "879e32b3fa309ce7190f94dc8fd167e9900a4229", "filename": "library/alloc/tests/autotraits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Ftests%2Fautotraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Falloc%2Ftests%2Fautotraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fautotraits.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -32,7 +32,7 @@ fn test_btree_map() {\n     //         spawn(f());\n     //     }\n     //\n-    // where with some unintentionally overconstrained Send impls in liballoc's\n+    // where with some unintentionally overconstrained Send impls in alloc's\n     // internals, the future might incorrectly not be Send even though every\n     // single type involved in the program is Send and Sync.\n     require_send_sync(async {"}, {"sha": "129213fde7491c8ef02040003c6dc7314af694de", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -1994,7 +1994,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     #[rustc_const_stable(feature = \"const_unsafecell_get\", since = \"1.32.0\")]\n     pub const fn get(&self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n-        // #[repr(transparent)]. This exploits libstd's special status, there is\n+        // #[repr(transparent)]. This exploits std's special status, there is\n         // no guarantee for user code that this will work in future versions of the compiler!\n         self as *const UnsafeCell<T> as *const T as *mut T\n     }\n@@ -2052,7 +2052,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     #[rustc_const_stable(feature = \"unsafe_cell_raw_get\", since = \"1.56.0\")]\n     pub const fn raw_get(this: *const Self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n-        // #[repr(transparent)]. This exploits libstd's special status, there is\n+        // #[repr(transparent)]. This exploits std's special status, there is\n         // no guarantee for user code that this will work in future versions of the compiler!\n         this as *const T as *mut T\n     }"}, {"sha": "6a22ea90864af0eff4e0725524f9fbe9fd580ae1", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -38,18 +38,18 @@\n //!    which do not trigger a panic can be assured that this function is never\n //!    called. The `lang` attribute is called `eh_personality`.\n \n-// Since libcore defines many fundamental lang items, all tests live in a\n+// Since core defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues.\n //\n // Here we explicitly #[cfg]-out this whole crate when testing. If we don't do\n // this, both the generated test artifact and the linked libtest (which\n-// transitively includes libcore) will both define the same set of lang items,\n+// transitively includes core) will both define the same set of lang items,\n // and this will cause the E0152 \"found duplicate lang item\" error. See\n // discussion in #50466 for details.\n //\n // This cfg won't affect doc tests.\n #![cfg(not(test))]\n-// To run libcore tests without x.py without ending up with two copies of libcore, Miri needs to be\n+// To run core tests without x.py without ending up with two copies of core, Miri needs to be\n // able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n // rustc itself never sets the feature, so this line has no affect there.\n #![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n@@ -311,7 +311,7 @@ pub mod f64;\n #[macro_use]\n pub mod num;\n \n-/* The libcore prelude, not as all-encompassing as the libstd prelude */\n+/* The core prelude, not as all-encompassing as the std prelude */\n \n pub mod prelude;\n \n@@ -378,12 +378,12 @@ mod const_closure;\n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n pub mod primitive;\n \n-// Pull in the `core_arch` crate directly into libcore. The contents of\n+// Pull in the `core_arch` crate directly into core. The contents of\n // `core_arch` are in a different repository: rust-lang/stdarch.\n //\n-// `core_arch` depends on libcore, but the contents of this module are\n+// `core_arch` depends on core, but the contents of this module are\n // set up in such a way that directly pulling it here works such that the\n-// crate uses the this crate as its libcore.\n+// crate uses the this crate as its core.\n #[path = \"../../stdarch/crates/core_arch/src/mod.rs\"]\n #[allow(\n     missing_docs,\n@@ -402,12 +402,12 @@ mod core_arch;\n #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n pub mod arch;\n \n-// Pull in the `core_simd` crate directly into libcore. The contents of\n+// Pull in the `core_simd` crate directly into core. The contents of\n // `core_simd` are in a different repository: rust-lang/portable-simd.\n //\n-// `core_simd` depends on libcore, but the contents of this module are\n+// `core_simd` depends on core, but the contents of this module are\n // set up in such a way that directly pulling it here works such that the\n-// crate uses this crate as its libcore.\n+// crate uses this crate as its core.\n #[path = \"../../portable-simd/crates/core_simd/src/mod.rs\"]\n #[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n #[allow(rustdoc::bare_urls)]"}, {"sha": "1308b0770b848a80aed914166b90616241f09b29", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -428,7 +428,7 @@ impl f32 {\n         self != self\n     }\n \n-    // FIXME(#50145): `abs` is publicly unavailable in libcore due to\n+    // FIXME(#50145): `abs` is publicly unavailable in core due to\n     // concerns about portability, so this implementation is for\n     // private use internally.\n     #[inline]"}, {"sha": "2a22c4302b91bd97ecb97c823b6de0a51bc48508", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -427,7 +427,7 @@ impl f64 {\n         self != self\n     }\n \n-    // FIXME(#50145): `abs` is publicly unavailable in libcore due to\n+    // FIXME(#50145): `abs` is publicly unavailable in core due to\n     // concerns about portability, so this implementation is for\n     // private use internally.\n     #[inline]"}, {"sha": "0d385c9d1874435ed2bca34ac02c58dfa3554d58", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -157,7 +157,7 @@ impl fmt::Display for PanicInfo<'_> {\n             write!(formatter, \"'{}', \", payload)?\n         }\n         // NOTE: we cannot use downcast_ref::<String>() here\n-        // since String is not available in libcore!\n+        // since String is not available in core!\n         // The payload is a String when `std::panic!` is called with multiple arguments,\n         // but in that case the message is also available.\n "}, {"sha": "ab2f8520ecb33d969a479891fdca82997b90144e", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -368,7 +368,7 @@ impl str {\n     #[inline(always)]\n     pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n         // SAFETY: the cast from `&str` to `&[u8]` is safe since `str`\n-        // has the same layout as `&[u8]` (only libstd can make this guarantee).\n+        // has the same layout as `&[u8]` (only std can make this guarantee).\n         // The pointer dereference is safe since it comes from a mutable reference which\n         // is guaranteed to be valid for writes.\n         unsafe { &mut *(self as *mut str as *mut [u8]) }"}, {"sha": "e1faa407d54c55206b50477caba6e89482592d1f", "filename": "library/core/src/unicode/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Fmod.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -17,7 +17,7 @@ mod unicode_data;\n #[stable(feature = \"unicode_version\", since = \"1.45.0\")]\n pub const UNICODE_VERSION: (u8, u8, u8) = unicode_data::UNICODE_VERSION;\n \n-// For use in liballoc, not re-exported in libstd.\n+// For use in alloc, not re-exported in std.\n pub use unicode_data::{\n     case_ignorable::lookup as Case_Ignorable, cased::lookup as Cased, conversions,\n };"}, {"sha": "80d30f14c66b24d137dbbea5270566051eda363e", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -807,7 +807,7 @@ fn ptr_metadata_bounds() {\n     }\n     // \"Synthetic\" trait impls generated by the compiler like those of `Pointee`\n     // are not checked for bounds of associated type.\n-    // So with a buggy libcore we could have both:\n+    // So with a buggy core we could have both:\n     // * `<dyn Display as Pointee>::Metadata == DynMetadata`\n     // * `DynMetadata: !PartialEq`\n     // \u2026 and cause an ICE here:"}, {"sha": "9033d7ec1567f1c2e7a2953951dfeb50791e8c1f", "filename": "library/core/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fcore%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fstr.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -1 +1 @@\n-// All `str` tests live in liballoc/tests\n+// All `str` tests live in alloc/tests"}, {"sha": "a3cebf99c5342c3078f2565b3dbb336ca5fd59cf", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -61,7 +61,7 @@ pub unsafe fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n             //\n             // https://docs.microsoft.com/en-us/cpp/intrinsics/fastfail\n             //\n-            // Note: this is the same implementation as in libstd's `abort_internal`\n+            // Note: this is the same implementation as in std's `abort_internal`\n             unsafe fn abort() -> ! {\n                 #[allow(unused)]\n                 const FAST_FAIL_FATAL_APP_EXIT: usize = 7;\n@@ -89,7 +89,7 @@ pub unsafe fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n // This... is a bit of an oddity. The tl;dr; is that this is required to link\n // correctly, the longer explanation is below.\n //\n-// Right now the binaries of libcore/libstd that we ship are all compiled with\n+// Right now the binaries of core/std that we ship are all compiled with\n // `-C panic=unwind`. This is done to ensure that the binaries are maximally\n // compatible with as many situations as possible. The compiler, however,\n // requires a \"personality function\" for all functions compiled with `-C\n@@ -109,7 +109,7 @@ pub unsafe fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n // library just defines this symbol so there's at least some personality\n // somewhere.\n //\n-// Essentially this symbol is just defined to get wired up to libcore/libstd\n+// Essentially this symbol is just defined to get wired up to core/std\n // binaries, but it should never be called as we don't link in an unwinding\n // runtime at all.\n pub mod personalities {"}, {"sha": "52a08cad9110fa18316478ad300f27788706ee5a", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -356,7 +356,7 @@ impl<I, O> Clone for Client<I, O> {\n \n fn maybe_install_panic_hook(force_show_panics: bool) {\n     // Hide the default panic output within `proc_macro` expansions.\n-    // NB. the server can't do this because it may use a different libstd.\n+    // NB. the server can't do this because it may use a different std.\n     static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();\n     HIDE_PANICS_DURING_EXPANSION.call_once(|| {\n         let prev = panic::take_hook();"}, {"sha": "2ea87d866ff3eaf584973afab015d989e0a364c1", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -112,7 +112,7 @@ macro_rules! define_dispatcher_impl {\n                                 $name::$method(server, $($arg),*)\n                             };\n                             // HACK(eddyb) don't use `panic::catch_unwind` in a panic.\n-                            // If client and server happen to use the same `libstd`,\n+                            // If client and server happen to use the same `std`,\n                             // `catch_unwind` asserts that the panic counter was 0,\n                             // even when the closure passed to it didn't panic.\n                             let r = if thread::panicking() {"}, {"sha": "87db7af44ae09590625561b3b0d26340131f403b", "filename": "library/rustc-std-workspace-alloc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Frustc-std-workspace-alloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Frustc-std-workspace-alloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Frustc-std-workspace-alloc%2Flib.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -3,7 +3,7 @@\n \n // See rustc-std-workspace-core for why this crate is needed.\n \n-// Rename the crate to avoid conflicting with the alloc module in liballoc.\n+// Rename the crate to avoid conflicting with the alloc module in alloc.\n extern crate alloc as foo;\n \n pub use foo::*;"}, {"sha": "601c01c2128c816757c103d3a04f3c4c0dd8646c", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -166,7 +166,7 @@ impl Repr {\n         // `new_unchecked` is safe.\n         let res = Self(unsafe { NonNull::new_unchecked(tagged) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n-        // only run in libstd's tests, unless the user uses -Zbuild-std)\n+        // only run in std's tests, unless the user uses -Zbuild-std)\n         debug_assert!(matches!(res.data(), ErrorData::Custom(_)), \"repr(custom) encoding failed\");\n         res\n     }\n@@ -177,7 +177,7 @@ impl Repr {\n         // Safety: `TAG_OS` is not zero, so the result of the `|` is not 0.\n         let res = Self(unsafe { NonNull::new_unchecked(ptr::invalid_mut(utagged)) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n-        // only run in libstd's tests, unless the user uses -Zbuild-std)\n+        // only run in std's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n             matches!(res.data(), ErrorData::Os(c) if c == code),\n             \"repr(os) encoding failed for {code}\"\n@@ -191,7 +191,7 @@ impl Repr {\n         // Safety: `TAG_SIMPLE` is not zero, so the result of the `|` is not 0.\n         let res = Self(unsafe { NonNull::new_unchecked(ptr::invalid_mut(utagged)) }, PhantomData);\n         // quickly smoke-check we encoded the right thing (This generally will\n-        // only run in libstd's tests, unless the user uses -Zbuild-std)\n+        // only run in std's tests, unless the user uses -Zbuild-std)\n         debug_assert!(\n             matches!(res.data(), ErrorData::Simple(k) if k == kind),\n             \"repr(simple) encoding failed {:?}\",\n@@ -348,7 +348,7 @@ fn kind_from_prim(ek: u32) -> Option<ErrorKind> {\n // that our encoding relies on for correctness and soundness. (Some of these are\n // a bit overly thorough/cautious, admittedly)\n //\n-// If any of these are hit on a platform that libstd supports, we should likely\n+// If any of these are hit on a platform that std supports, we should likely\n // just use `repr_unpacked.rs` there instead (unless the fix is easy).\n macro_rules! static_assert {\n     ($condition:expr) => {"}, {"sha": "13dfd41abbf84ddd42b8d17dd138dd2beb3c367d", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -202,7 +202,7 @@\n     no_global_oom_handling,\n     not(no_global_oom_handling)\n ))]\n-// To run libstd tests without x.py without ending up with two copies of libstd, Miri needs to be\n+// To run std tests without x.py without ending up with two copies of std, Miri needs to be\n // able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n // rustc itself never sets the feature, so this line has no affect there.\n #![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n@@ -532,7 +532,7 @@ pub mod process;\n pub mod sync;\n pub mod time;\n \n-// Pull in `std_float` crate  into libstd. The contents of\n+// Pull in `std_float` crate  into std. The contents of\n // `std_float` are in a different repository: rust-lang/portable-simd.\n #[path = \"../../portable-simd/crates/std_float/src/lib.rs\"]\n #[allow(missing_debug_implementations, dead_code, unsafe_op_in_unsafe_fn, unused_unsafe)]\n@@ -602,15 +602,15 @@ mod personality;\n #[allow(dead_code, unused_attributes, fuzzy_provenance_casts)]\n mod backtrace_rs;\n \n-// Re-export macros defined in libcore.\n+// Re-export macros defined in core.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]\n pub use core::{\n     assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne, matches, todo, r#try,\n     unimplemented, unreachable, write, writeln,\n };\n \n-// Re-export built-in macros defined through libcore.\n+// Re-export built-in macros defined through core.\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated)]\n pub use core::{"}, {"sha": "3023cac9bcc5ec224104ca0a0e1a7f8f569bbec3", "filename": "library/std/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -306,7 +306,7 @@ unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n     // This casts are safe as OsStr is internally a wrapper around [u8] on all\n     // platforms.\n     //\n-    // Note that currently this relies on the special knowledge that libstd has;\n+    // Note that currently this relies on the special knowledge that std has;\n     // these types are single-element structs but are not marked\n     // repr(transparent) or repr(C) which would make these casts not allowable\n     // outside std."}, {"sha": "f1eeb75be7c4d805fa009b935a7fd5f809bc5217", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -139,9 +139,9 @@ fn lang_start_internal(\n     // mechanism itself.\n     //\n     // There are a couple of instances where unwinding can begin. First is inside of the\n-    // `rt::init`, `rt::cleanup` and similar functions controlled by libstd. In those instances a\n-    // panic is a libstd implementation bug. A quite likely one too, as there isn't any way to\n-    // prevent libstd from accidentally introducing a panic to these functions. Another is from\n+    // `rt::init`, `rt::cleanup` and similar functions controlled by bstd. In those instances a\n+    // panic is a std implementation bug. A quite likely one too, as there isn't any way to\n+    // prevent std from accidentally introducing a panic to these functions. Another is from\n     // user code from `main` or, more nefariously, as described in e.g. issue #86030.\n     // SAFETY: Only called once during runtime initialization.\n     panic::catch_unwind(move || unsafe { init(argc, argv, sigpipe) }).map_err(rt_abort)?;"}, {"sha": "9d7a06852b78acc23bc8f8d2b9c441ae36773cbd", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -164,7 +164,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     unsafe fn reset_sigpipe(#[allow(unused_variables)] sigpipe: u8) {\n         #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\", target_os = \"horizon\")))]\n         {\n-            // We don't want to add this as a public type to libstd, nor do we\n+            // We don't want to add this as a public type to std, nor do we\n             // want to `include!` a file from the compiler (which would break\n             // Miri and xargo for example), so we choose to duplicate these\n             // constants from `compiler/rustc_session/src/config/sigpipe.rs`."}, {"sha": "c86f80972a69de412dd1ac0a26561353df056f1a", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -512,7 +512,7 @@ impl FromRawFd for Socket {\n // A workaround for this bug is to call the res_init libc function, to clear\n // the cached configs. Unfortunately, while we believe glibc's implementation\n // of res_init is thread-safe, we know that other implementations are not\n-// (https://github.com/rust-lang/rust/issues/43592). Code here in libstd could\n+// (https://github.com/rust-lang/rust/issues/43592). Code here in std could\n // try to synchronize its res_init calls with a Mutex, but that wouldn't\n // protect programs that call into libc in other ways. So instead of calling\n // res_init unconditionally, we call it only when we detect we're linking"}, {"sha": "f1d804ef40c0e60786d568a4249bb80e42f63b91", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -20,7 +20,7 @@ pub fn lock() -> impl Drop {\n /// Prints the current backtrace.\n pub fn print(w: &mut dyn Write, format: PrintFmt) -> io::Result<()> {\n     // There are issues currently linking libbacktrace into tests, and in\n-    // general during libstd's own unit tests we're not testing this path. In\n+    // general during std's own unit tests we're not testing this path. In\n     // test mode immediately return here to optimize away any references to the\n     // libbacktrace symbols\n     if cfg!(test) {"}, {"sha": "57e9c134240cd09d279655e4aae9f43317ecc672", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -950,7 +950,7 @@ pub mod fast {\n \n         // note that this is just a publicly-callable function only for the\n         // const-initialized form of thread locals, basically a way to call the\n-        // free `register_dtor` function defined elsewhere in libstd.\n+        // free `register_dtor` function defined elsewhere in std.\n         pub unsafe fn register_dtor(a: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n             unsafe {\n                 register_dtor(a, dtor);"}, {"sha": "036a35869a5b277568968990ac228a0fe28b80e5", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db47071df2647f90da5a66624caf262fa3a17456/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db47071df2647f90da5a66624caf262fa3a17456/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=db47071df2647f90da5a66624caf262fa3a17456", "patch": "@@ -88,7 +88,7 @@ pub type _Unwind_Exception_Cleanup_Fn =\n     extern \"C\" fn(unwind_code: _Unwind_Reason_Code, exception: *mut _Unwind_Exception);\n \n // FIXME: The `#[link]` attributes on `extern \"C\"` block marks those symbols declared in\n-// the block are reexported in dylib build of libstd. This is needed when build rustc with\n+// the block are reexported in dylib build of std. This is needed when build rustc with\n // feature `llvm-libunwind', as no other cdylib will provided those _Unwind_* symbols.\n // However the `link` attribute is duplicated multiple times and does not just export symbol,\n // a better way to manually export symbol would be another attribute like `#[export]`."}]}