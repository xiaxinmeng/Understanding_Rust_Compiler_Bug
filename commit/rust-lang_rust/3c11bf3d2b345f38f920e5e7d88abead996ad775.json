{"sha": "3c11bf3d2b345f38f920e5e7d88abead996ad775", "node_id": "C_kwDOAAsO6NoAKDNjMTFiZjNkMmIzNDVmMzhmOTIwZTVlN2Q4OGFiZWFkOTk2YWQ3NzU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-25T08:48:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-25T08:48:31Z"}, "message": "Rollup merge of #97384 - nnethercote:fix-metadata-stats, r=bjorn3\n\nFix metadata stats.\n\nThis commit:\n- Counts some things that weren't being counted previously, and adds\n  an assertion that ensure everything is counted.\n- Reorders things so the `eprintln`s order matches the code order.\n- Adds percentages, and makes clear that the zero bytes count is orthogonal to\n  the other measurements.\n\nExample of the new output:\n```\n55463779 metadata bytes, of which 18054531 bytes (32.6%) are zero\n             preamble:       30 bytes ( 0.0%)\n                  dep:        0 bytes ( 0.0%)\n          lib feature:    17458 bytes ( 0.0%)\n            lang item:      337 bytes ( 0.0%)\n      diagnostic item:     1788 bytes ( 0.0%)\n           native lib:        0 bytes ( 0.0%)\n      foreign modules:     5113 bytes ( 0.0%)\n       def-path table:   720180 bytes ( 1.3%)\n               traits:      359 bytes ( 0.0%)\n                impls:    64624 bytes ( 0.1%)\n     incoherent_impls:      130 bytes ( 0.0%)\n                  mir: 16137354 bytes (29.1%)\n                 item: 23773099 bytes (42.9%)\ninterpret_alloc_index:      599 bytes ( 0.0%)\n      proc-macro-data:        0 bytes ( 0.0%)\n               tables: 10081135 bytes (18.2%)\n debugger visualizers:        0 bytes ( 0.0%)\n     exported symbols:     5666 bytes ( 0.0%)\n              hygiene:  1539390 bytes ( 2.8%)\n      def-path hashes:  2752564 bytes ( 5.0%)\n           source_map:   363540 bytes ( 0.7%)\n                final:      413 bytes ( 0.0%)\n```\nr? `@bjorn3`", "tree": {"sha": "5f1e73b5f9ec885ec59f26665b2721d15026917d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f1e73b5f9ec885ec59f26665b2721d15026917d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c11bf3d2b345f38f920e5e7d88abead996ad775", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJije1fCRBK7hj4Ov3rIwAARUUIAEiUHGlKC9zVYCIH3STMTxd7\nC8kcX07iJxsTbJjYibEFUSL16Kcspbdi+J5CksB3C+ZW09H15+YLqfKDhrBgMrPu\nGx4kfPfVGVvW3GMnUhvkp6xt3wd3ytBrqNZHJAX5mvZ8pLcv3yRT4c9U2Whle5hK\nB8SviuQlKVu40afcqbpuH8VSAs4FoWPmV60IwvkWQabEX7uxWBMvahZ8iEED73KS\nsm8mQlYd6dyuQuP/Fp9PDygYFr4zL980aAjG/H4gEDTEvtn+IX1K8JwsMtb8UdJt\nUPWLUJ6qklp9YzXSP3ZlSjf4/LwX13ow7/qfLofb6cOKsUlQ6gXRjUXBXid+aGo=\n=mk75\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f1e73b5f9ec885ec59f26665b2721d15026917d\nparent fe727e4dfc560ad5c973d04cd4e98ea943b463de\nparent 9a926e5d6c100d169b936a66120b7107c016ae5b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653468511 +0200\ncommitter GitHub <noreply@github.com> 1653468511 +0200\n\nRollup merge of #97384 - nnethercote:fix-metadata-stats, r=bjorn3\n\nFix metadata stats.\n\nThis commit:\n- Counts some things that weren't being counted previously, and adds\n  an assertion that ensure everything is counted.\n- Reorders things so the `eprintln`s order matches the code order.\n- Adds percentages, and makes clear that the zero bytes count is orthogonal to\n  the other measurements.\n\nExample of the new output:\n```\n55463779 metadata bytes, of which 18054531 bytes (32.6%) are zero\n             preamble:       30 bytes ( 0.0%)\n                  dep:        0 bytes ( 0.0%)\n          lib feature:    17458 bytes ( 0.0%)\n            lang item:      337 bytes ( 0.0%)\n      diagnostic item:     1788 bytes ( 0.0%)\n           native lib:        0 bytes ( 0.0%)\n      foreign modules:     5113 bytes ( 0.0%)\n       def-path table:   720180 bytes ( 1.3%)\n               traits:      359 bytes ( 0.0%)\n                impls:    64624 bytes ( 0.1%)\n     incoherent_impls:      130 bytes ( 0.0%)\n                  mir: 16137354 bytes (29.1%)\n                 item: 23773099 bytes (42.9%)\ninterpret_alloc_index:      599 bytes ( 0.0%)\n      proc-macro-data:        0 bytes ( 0.0%)\n               tables: 10081135 bytes (18.2%)\n debugger visualizers:        0 bytes ( 0.0%)\n     exported symbols:     5666 bytes ( 0.0%)\n              hygiene:  1539390 bytes ( 2.8%)\n      def-path hashes:  2752564 bytes ( 5.0%)\n           source_map:   363540 bytes ( 0.7%)\n                final:      413 bytes ( 0.0%)\n```\nr? `@bjorn3`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c11bf3d2b345f38f920e5e7d88abead996ad775", "html_url": "https://github.com/rust-lang/rust/commit/3c11bf3d2b345f38f920e5e7d88abead996ad775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c11bf3d2b345f38f920e5e7d88abead996ad775/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe727e4dfc560ad5c973d04cd4e98ea943b463de", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe727e4dfc560ad5c973d04cd4e98ea943b463de", "html_url": "https://github.com/rust-lang/rust/commit/fe727e4dfc560ad5c973d04cd4e98ea943b463de"}, {"sha": "9a926e5d6c100d169b936a66120b7107c016ae5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a926e5d6c100d169b936a66120b7107c016ae5b", "html_url": "https://github.com/rust-lang/rust/commit/9a926e5d6c100d169b936a66120b7107c016ae5b"}], "stats": {"total": 92, "additions": 69, "deletions": 23}, "files": [{"sha": "63103061c9c29ba61f64bb34a45ec4ffb7c45454", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 69, "deletions": 23, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3c11bf3d2b345f38f920e5e7d88abead996ad775/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c11bf3d2b345f38f920e5e7d88abead996ad775/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=3c11bf3d2b345f38f920e5e7d88abead996ad775", "patch": "@@ -536,9 +536,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n     fn encode_crate_root(&mut self) -> LazyValue<CrateRoot> {\n         let tcx = self.tcx;\n-        let mut i = self.position();\n+        let mut i = 0;\n+        let preamble_bytes = self.position() - i;\n \n         // Encode the crate deps\n+        i = self.position();\n         let crate_deps = self.encode_crate_deps();\n         let dylib_dependency_formats = self.encode_dylib_dependency_formats();\n         let dep_bytes = self.position() - i;\n@@ -564,7 +566,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let native_libraries = self.encode_native_libraries();\n         let native_lib_bytes = self.position() - i;\n \n+        i = self.position();\n         let foreign_modules = self.encode_foreign_modules();\n+        let foreign_modules_bytes = self.position() - i;\n \n         // Encode DefPathTable\n         i = self.position();\n@@ -584,6 +588,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         i = self.position();\n         let incoherent_impls = self.encode_incoherent_impls();\n         let incoherent_impls_bytes = self.position() - i;\n+\n         // Encode MIR.\n         i = self.position();\n         self.encode_mir();\n@@ -596,6 +601,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let item_bytes = self.position() - i;\n \n         // Encode the allocation index\n+        i = self.position();\n         let interpret_alloc_index = {\n             let mut interpret_alloc_index = Vec::new();\n             let mut n = 0;\n@@ -618,6 +624,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             self.lazy_array(interpret_alloc_index)\n         };\n+        let interpret_alloc_index_bytes = self.position() - i;\n \n         // Encode the proc macro data. This affects 'tables',\n         // so we need to do this before we encode the tables\n@@ -662,9 +669,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let source_map = self.encode_source_map();\n         let source_map_bytes = self.position() - i;\n \n+        i = self.position();\n         let attrs = tcx.hir().krate_attrs();\n         let has_default_lib_allocator = tcx.sess.contains_name(&attrs, sym::default_lib_allocator);\n-\n         let root = self.lazy(CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n             extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n@@ -707,9 +714,34 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             expn_hashes,\n             def_path_hash_map,\n         });\n+        let final_bytes = self.position() - i;\n \n         let total_bytes = self.position();\n \n+        let computed_total_bytes = preamble_bytes\n+            + dep_bytes\n+            + lib_feature_bytes\n+            + lang_item_bytes\n+            + diagnostic_item_bytes\n+            + native_lib_bytes\n+            + foreign_modules_bytes\n+            + def_path_table_bytes\n+            + traits_bytes\n+            + impls_bytes\n+            + incoherent_impls_bytes\n+            + mir_bytes\n+            + item_bytes\n+            + interpret_alloc_index_bytes\n+            + proc_macro_data_bytes\n+            + tables_bytes\n+            + debugger_visualizers_bytes\n+            + exported_symbols_bytes\n+            + hygiene_bytes\n+            + def_path_hash_map_bytes\n+            + source_map_bytes\n+            + final_bytes;\n+        assert_eq!(total_bytes, computed_total_bytes);\n+\n         if tcx.sess.meta_stats() {\n             let mut zero_bytes = 0;\n             for e in self.opaque.data.iter() {\n@@ -718,27 +750,41 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 }\n             }\n \n-            eprintln!(\"metadata stats:\");\n-            eprintln!(\"                  dep bytes: {}\", dep_bytes);\n-            eprintln!(\"          lib feature bytes: {}\", lib_feature_bytes);\n-            eprintln!(\"            lang item bytes: {}\", lang_item_bytes);\n-            eprintln!(\"      diagnostic item bytes: {}\", diagnostic_item_bytes);\n-            eprintln!(\"               native bytes: {}\", native_lib_bytes);\n-            eprintln!(\" debugger visualizers bytes: {}\", debugger_visualizers_bytes);\n-            eprintln!(\"           source_map bytes: {}\", source_map_bytes);\n-            eprintln!(\"               traits bytes: {}\", traits_bytes);\n-            eprintln!(\"                impls bytes: {}\", impls_bytes);\n-            eprintln!(\"     incoherent_impls bytes: {}\", incoherent_impls_bytes);\n-            eprintln!(\"         exp. symbols bytes: {}\", exported_symbols_bytes);\n-            eprintln!(\"       def-path table bytes: {}\", def_path_table_bytes);\n-            eprintln!(\"      def-path hashes bytes: {}\", def_path_hash_map_bytes);\n-            eprintln!(\"      proc-macro-data-bytes: {}\", proc_macro_data_bytes);\n-            eprintln!(\"                  mir bytes: {}\", mir_bytes);\n-            eprintln!(\"                 item bytes: {}\", item_bytes);\n-            eprintln!(\"                table bytes: {}\", tables_bytes);\n-            eprintln!(\"              hygiene bytes: {}\", hygiene_bytes);\n-            eprintln!(\"                 zero bytes: {}\", zero_bytes);\n-            eprintln!(\"                total bytes: {}\", total_bytes);\n+            let perc = |bytes| (bytes * 100) as f64 / total_bytes as f64;\n+            let p = |label, bytes| {\n+                eprintln!(\"{:>21}: {:>8} bytes ({:4.1}%)\", label, bytes, perc(bytes));\n+            };\n+\n+            eprintln!(\"\");\n+            eprintln!(\n+                \"{} metadata bytes, of which {} bytes ({:.1}%) are zero\",\n+                total_bytes,\n+                zero_bytes,\n+                perc(zero_bytes)\n+            );\n+            p(\"preamble\", preamble_bytes);\n+            p(\"dep\", dep_bytes);\n+            p(\"lib feature\", lib_feature_bytes);\n+            p(\"lang item\", lang_item_bytes);\n+            p(\"diagnostic item\", diagnostic_item_bytes);\n+            p(\"native lib\", native_lib_bytes);\n+            p(\"foreign modules\", foreign_modules_bytes);\n+            p(\"def-path table\", def_path_table_bytes);\n+            p(\"traits\", traits_bytes);\n+            p(\"impls\", impls_bytes);\n+            p(\"incoherent_impls\", incoherent_impls_bytes);\n+            p(\"mir\", mir_bytes);\n+            p(\"item\", item_bytes);\n+            p(\"interpret_alloc_index\", interpret_alloc_index_bytes);\n+            p(\"proc-macro-data\", proc_macro_data_bytes);\n+            p(\"tables\", tables_bytes);\n+            p(\"debugger visualizers\", debugger_visualizers_bytes);\n+            p(\"exported symbols\", exported_symbols_bytes);\n+            p(\"hygiene\", hygiene_bytes);\n+            p(\"def-path hashes\", def_path_hash_map_bytes);\n+            p(\"source_map\", source_map_bytes);\n+            p(\"final\", final_bytes);\n+            eprintln!(\"\");\n         }\n \n         root"}]}