{"sha": "3986c964481a048100565c8d30b1937ec2eb516d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ODZjOTY0NDgxYTA0ODEwMDU2NWM4ZDMwYjE5MzdlYzJlYjUxNmQ=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-11-19T06:21:38Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-12-23T01:40:48Z"}, "message": "enum type instead of variant suggestion unification\n\nWeirdly, we were deciding between a help note and a structured\nsuggestion based on whether the import candidate span was a dummy\u2014but\nwe weren't using that span in any case! The dummy-ness of the span\n(which appears to be a matter of this-crate vs. other-crate\ndefinition) isn't the right criterion by which we should decide\nwhether it's germane to mention that \"there is an enum variant\";\ninstead, let's use the someness of `def` (which is used as the\n`has_unexpected_resolution` argument to `error_code`).\n\nSince `import_candidate_to_paths` has no other callers, we are free to\nstop returning the span and rename the function. By using\n`span_suggestions_`, we leverage the max-suggestions output limit\nalready built in to the emitter, thus resolving #56028.\n\nIn the matter of message wording, \"you can\" is redundant (and perhaps\ntoo informal); prefer the imperative.", "tree": {"sha": "89e89d7ca0def45c4bdd824e8b8c07186e5a72b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e89d7ca0def45c4bdd824e8b8c07186e5a72b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3986c964481a048100565c8d30b1937ec2eb516d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3986c964481a048100565c8d30b1937ec2eb516d", "html_url": "https://github.com/rust-lang/rust/commit/3986c964481a048100565c8d30b1937ec2eb516d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3986c964481a048100565c8d30b1937ec2eb516d/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d3e909e4e68259e15ca2908ff9e854f0a68bbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3e909e4e68259e15ca2908ff9e854f0a68bbec", "html_url": "https://github.com/rust-lang/rust/commit/2d3e909e4e68259e15ca2908ff9e854f0a68bbec"}], "stats": {"total": 176, "additions": 122, "deletions": 54}, "files": [{"sha": "8f329283b1a289c922b2abc5a08bfbbb0380481e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -3213,23 +3213,33 @@ impl<'a> Resolver<'a> {\n                 let enum_candidates =\n                     this.lookup_import_candidates(ident, ns, is_enum_variant);\n                 let mut enum_candidates = enum_candidates.iter()\n-                    .map(|suggestion| import_candidate_to_paths(&suggestion)).collect::<Vec<_>>();\n+                    .map(|suggestion| {\n+                        import_candidate_to_enum_paths(&suggestion)\n+                    }).collect::<Vec<_>>();\n                 enum_candidates.sort();\n-                for (sp, variant_path, enum_path) in enum_candidates {\n-                    if sp.is_dummy() {\n-                        let msg = format!(\"there is an enum variant `{}`, \\\n-                                           try using `{}`?\",\n-                                          variant_path,\n-                                          enum_path);\n-                        err.help(&msg);\n+\n+                if !enum_candidates.is_empty() {\n+                    // contextualize for E0412 \"cannot find type\", but don't belabor the point\n+                    // (that it's a variant) for E0573 \"expected type, found variant\"\n+                    let preamble = if def.is_none() {\n+                        let others = match enum_candidates.len() {\n+                            1 => String::new(),\n+                            2 => \" and 1 other\".to_owned(),\n+                            n => format!(\" and {} others\", n)\n+                        };\n+                        format!(\"there is an enum variant `{}`{}; \",\n+                                enum_candidates[0].0, others)\n                     } else {\n-                        err.span_suggestion_with_applicability(\n-                            span,\n-                            \"you can try using the variant's enum\",\n-                            enum_path,\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n+                        String::new()\n+                    };\n+                    let msg = format!(\"{}try using the variant's enum\", preamble);\n+\n+                    err.span_suggestions_with_applicability(\n+                        span,\n+                        &msg,\n+                        enum_candidates.into_iter().map(|(_variant, enum_ty)| enum_ty),\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n             }\n             if path.len() == 1 && this.self_type_is_available(span) {\n@@ -5128,8 +5138,8 @@ fn path_names_to_string(path: &Path) -> String {\n                         .collect::<Vec<_>>())\n }\n \n-/// Get the path for an enum and the variant from an `ImportSuggestion` for an enum variant.\n-fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (Span, String, String) {\n+/// Get the stringified path for an enum from an `ImportSuggestion` for an enum variant.\n+fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, String) {\n     let variant_path = &suggestion.path;\n     let variant_path_string = path_names_to_string(variant_path);\n \n@@ -5140,7 +5150,7 @@ fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (Span, String, St\n     };\n     let enum_path_string = path_names_to_string(&enum_path);\n \n-    (suggestion.path.span, variant_path_string, enum_path_string)\n+    (variant_path_string, enum_path_string)\n }\n \n "}, {"sha": "ec41c411416169f8d7527accd8a3833da78b5154", "filename": "src/test/ui/did_you_mean/issue-56028-there-is-an-enum-variant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.rs?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -0,0 +1,13 @@\n+enum PutDown { Set }\n+enum AffixHeart { Set }\n+enum CauseToBe { Set }\n+enum Determine { Set }\n+enum TableDishesAction { Set }\n+enum Solidify { Set }\n+enum UnorderedCollection { Set }\n+\n+fn setup() -> Set { Set }\n+\n+fn main() {\n+    setup();\n+}"}, {"sha": "6107ca32a5d75aec623a738daf538f021a82f1d8", "filename": "src/test/ui/did_you_mean/issue-56028-there-is-an-enum-variant.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -0,0 +1,38 @@\n+error[E0412]: cannot find type `Set` in this scope\n+  --> $DIR/issue-56028-there-is-an-enum-variant.rs:9:15\n+   |\n+LL | fn setup() -> Set { Set }\n+   |               ^^^ not found in this scope\n+help: there is an enum variant `AffixHeart::Set` and 7 others; try using the variant's enum\n+   |\n+LL | fn setup() -> AffixHeart { Set }\n+   |               ^^^^^^^^^^\n+LL | fn setup() -> CauseToBe { Set }\n+   |               ^^^^^^^^^\n+LL | fn setup() -> Determine { Set }\n+   |               ^^^^^^^^^\n+LL | fn setup() -> PutDown { Set }\n+   |               ^^^^^^^\n+and 3 other candidates\n+\n+error[E0425]: cannot find value `Set` in this scope\n+  --> $DIR/issue-56028-there-is-an-enum-variant.rs:9:21\n+   |\n+LL | fn setup() -> Set { Set }\n+   |                     ^^^ not found in this scope\n+help: possible candidates are found in other modules, you can import them into scope\n+   |\n+LL | use AffixHeart::Set;\n+   |\n+LL | use CauseToBe::Set;\n+   |\n+LL | use Determine::Set;\n+   |\n+LL | use PutDown::Set;\n+   |\n+and 3 other candidates\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0412, E0425.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "eb869f5539f366f777f8f9f95d4a6157199aa180", "filename": "src/test/ui/enum/enum-variant-type-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fenum%2Fenum-variant-type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fenum%2Fenum-variant-type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-variant-type-2.stderr?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(x: Foo::Bar) {} //~ ERROR expected type, found variant `Foo::Bar`\n    |           ^^^^^^^^\n    |           |\n    |           not a type\n-   |           help: you can try using the variant's enum: `Foo`\n+   |           help: try using the variant's enum: `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "a8ab5e8eb7745b4ba5320b94e37efd0c0a756ba7", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -5,7 +5,7 @@ LL |     fn new() -> NoResult<MyEnum, String> {\n    |                 --------^^^^^^^^^^^^^^^^\n    |                 |\n    |                 did you mean `Result`?\n-   |                 help: you can try using the variant's enum: `foo::MyEnum`\n+   |                 help: try using the variant's enum: `foo::MyEnum`\n \n error[E0573]: expected type, found variant `Result`\n   --> $DIR/issue-17546.rs:32:17\n@@ -48,7 +48,7 @@ LL | fn newer() -> NoResult<foo::MyEnum, String> {\n    |               --------^^^^^^^^^^^^^^^^^^^^^\n    |               |\n    |               did you mean `Result`?\n-   |               help: you can try using the variant's enum: `foo::MyEnum`\n+   |               help: try using the variant's enum: `foo::MyEnum`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "35ef227acfce6547ef1375852a1295972bcf1262", "filename": "src/test/ui/issues/issue-30535.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fissues%2Fissue-30535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fissues%2Fissue-30535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30535.stderr?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -2,9 +2,10 @@ error[E0573]: expected type, found variant `foo::Foo::FooV`\n   --> $DIR/issue-30535.rs:16:8\n    |\n LL |     _: foo::Foo::FooV //~ ERROR expected type, found variant `foo::Foo::FooV`\n-   |        ^^^^^^^^^^^^^^ not a type\n-   |\n-   = help: there is an enum variant `foo::Foo::FooV`, try using `foo::Foo`?\n+   |        ^^^^^^^^^^^^^^\n+   |        |\n+   |        not a type\n+   |        help: try using the variant's enum: `foo::Foo`\n \n error: aborting due to previous error\n "}, {"sha": "ead07a5f0c8fec1d64b66904f377aa07f2e577b8", "filename": "src/test/ui/issues/issue-35075.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fissues%2Fissue-35075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fissues%2Fissue-35075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35075.stderr?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -2,19 +2,21 @@ error[E0412]: cannot find type `Foo` in this scope\n   --> $DIR/issue-35075.rs:12:12\n    |\n LL |     inner: Foo<T> //~ ERROR cannot find type `Foo` in this scope\n-   |            ^^^---\n-   |            |\n-   |            not found in this scope\n-   |            help: you can try using the variant's enum: `Baz`\n+   |            ^^^ not found in this scope\n+help: there is an enum variant `Baz::Foo`; try using the variant's enum\n+   |\n+LL |     inner: Baz //~ ERROR cannot find type `Foo` in this scope\n+   |            ^^^\n \n error[E0412]: cannot find type `Foo` in this scope\n   --> $DIR/issue-35075.rs:16:9\n    |\n LL |     Foo(Foo<T>) //~ ERROR cannot find type `Foo` in this scope\n-   |         ^^^---\n-   |         |\n-   |         not found in this scope\n-   |         help: you can try using the variant's enum: `Baz`\n+   |         ^^^ not found in this scope\n+help: there is an enum variant `Baz::Foo`; try using the variant's enum\n+   |\n+LL |     Foo(Baz) //~ ERROR cannot find type `Foo` in this scope\n+   |         ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2f07ee7124d07ffc61c283056e251b3212e0bf13", "filename": "src/test/ui/issues/issue-35675.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35675.stderr?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -2,10 +2,11 @@ error[E0412]: cannot find type `Apple` in this scope\n   --> $DIR/issue-35675.rs:17:29\n    |\n LL | fn should_return_fruit() -> Apple {\n+   |                             ^^^^^ not found in this scope\n+help: there is an enum variant `Fruit::Apple`; try using the variant's enum\n+   |\n+LL | fn should_return_fruit() -> Fruit {\n    |                             ^^^^^\n-   |                             |\n-   |                             not found in this scope\n-   |                             help: you can try using the variant's enum: `Fruit`\n \n error[E0425]: cannot find function `Apple` in this scope\n   --> $DIR/issue-35675.rs:19:5\n@@ -24,7 +25,7 @@ LL | fn should_return_fruit_too() -> Fruit::Apple {\n    |                                 ^^^^^^^^^^^^\n    |                                 |\n    |                                 not a type\n-   |                                 help: you can try using the variant's enum: `Fruit`\n+   |                                 help: try using the variant's enum: `Fruit`\n \n error[E0425]: cannot find function `Apple` in this scope\n   --> $DIR/issue-35675.rs:25:5\n@@ -41,27 +42,34 @@ error[E0573]: expected type, found variant `Ok`\n    |\n LL | fn foo() -> Ok {\n    |             ^^ not a type\n+help: try using the variant's enum\n    |\n-   = help: there is an enum variant `std::prelude::v1::Ok`, try using `std::prelude::v1`?\n-   = help: there is an enum variant `std::result::Result::Ok`, try using `std::result::Result`?\n+LL | fn foo() -> std::prelude::v1 {\n+   |             ^^^^^^^^^^^^^^^^\n+LL | fn foo() -> std::result::Result {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error[E0412]: cannot find type `Variant3` in this scope\n   --> $DIR/issue-35675.rs:34:13\n    |\n LL | fn bar() -> Variant3 {\n-   |             ^^^^^^^^\n-   |             |\n-   |             not found in this scope\n-   |             help: you can try using the variant's enum: `x::Enum`\n+   |             ^^^^^^^^ not found in this scope\n+help: there is an enum variant `x::Enum::Variant3`; try using the variant's enum\n+   |\n+LL | fn bar() -> x::Enum {\n+   |             ^^^^^^^\n \n error[E0573]: expected type, found variant `Some`\n   --> $DIR/issue-35675.rs:38:13\n    |\n LL | fn qux() -> Some {\n    |             ^^^^ not a type\n+help: try using the variant's enum\n    |\n-   = help: there is an enum variant `std::prelude::v1::Option::Some`, try using `std::prelude::v1::Option`?\n-   = help: there is an enum variant `std::prelude::v1::Some`, try using `std::prelude::v1`?\n+LL | fn qux() -> std::prelude::v1::Option {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn qux() -> std::prelude::v1 {\n+   |             ^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "c72729923ef6d6d027ead1bc5dfe83e907e8cdb7", "filename": "src/test/ui/variants/variant-used-as-type.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fvariants%2Fvariant-used-as-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3986c964481a048100565c8d30b1937ec2eb516d/src%2Ftest%2Fui%2Fvariants%2Fvariant-used-as-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariants%2Fvariant-used-as-type.stderr?ref=3986c964481a048100565c8d30b1937ec2eb516d", "patch": "@@ -3,28 +3,24 @@ error[E0573]: expected type, found variant `Ty::A`\n    |\n LL |     B(Ty::A),\n    |       ^^^^^ not a type\n-help: you can try using the variant's enum\n-   |\n-LL |     B(Ty),\n-   |       ^^\n-help: you can try using the variant's enum\n+help: try using the variant's enum\n    |\n LL |     B(E),\n    |       ^\n+LL |     B(Ty),\n+   |       ^^\n \n error[E0573]: expected type, found variant `E::A`\n   --> $DIR/variant-used-as-type.rs:27:6\n    |\n LL | impl E::A {}\n    |      ^^^^ not a type\n-help: you can try using the variant's enum\n-   |\n-LL | impl Ty {}\n-   |      ^^\n-help: you can try using the variant's enum\n+help: try using the variant's enum\n    |\n LL | impl E {}\n    |      ^\n+LL | impl Ty {}\n+   |      ^^\n \n error: aborting due to 2 previous errors\n "}]}