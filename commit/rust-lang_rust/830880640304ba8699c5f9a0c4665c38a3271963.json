{"sha": "830880640304ba8699c5f9a0c4665c38a3271963", "node_id": "C_kwDOAAsO6NoAKDgzMDg4MDY0MDMwNGJhODY5OWM1ZjlhMGM0NjY1YzM4YTMyNzE5NjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-28T18:36:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-28T18:36:42Z"}, "message": "Auto merge of #98632 - matthiaskrgr:rollup-peg868d, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #98548 (rustdoc-json: Allow Typedef to be different in sanity assert)\n - #98560 (Add regression test for #85907)\n - #98564 (Remove references to `./tmp` in-tree)\n - #98602 (Add regression test for #80074)\n - #98606 (:arrow_up: rust-analyzer)\n - #98609 (Fix ICE for associated constant generics)\n - #98611 (Fix glob import ICE in rustdoc JSON format)\n - #98617 (Remove feature `const_option` from std)\n - #98619 (Fix mir-opt wg name)\n - #98621 (llvm-wrapper: adapt for removal of the ASanGlobalsMetadataAnalysis LLVM API)\n - #98623 (fix typo in comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a984e46bf7b5e06a3b688797ffb1af6f30dd7bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a984e46bf7b5e06a3b688797ffb1af6f30dd7bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/830880640304ba8699c5f9a0c4665c38a3271963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/830880640304ba8699c5f9a0c4665c38a3271963", "html_url": "https://github.com/rust-lang/rust/commit/830880640304ba8699c5f9a0c4665c38a3271963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/830880640304ba8699c5f9a0c4665c38a3271963/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e93749ab00539a11e90426ea87382c433530a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e93749ab00539a11e90426ea87382c433530a8", "html_url": "https://github.com/rust-lang/rust/commit/94e93749ab00539a11e90426ea87382c433530a8"}, {"sha": "164c98e447aa1b6aadcaaebf4c218fa28ff07830", "url": "https://api.github.com/repos/rust-lang/rust/commits/164c98e447aa1b6aadcaaebf4c218fa28ff07830", "html_url": "https://github.com/rust-lang/rust/commit/164c98e447aa1b6aadcaaebf4c218fa28ff07830"}], "stats": {"total": 150, "additions": 132, "deletions": 18}, "files": [{"sha": "a6625ac2ac4a172d08c081090e5cfba5597cea00", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -46,8 +46,6 @@ no_llvm_build\n /unicode-downloads\n /target\n /src/tools/x/target\n-# Generated by compiletest for incremental\n-/tmp/\n # Created by default with `src/ci/docker/run.sh`\n /obj/\n "}, {"sha": "3da6bc14622a0b838b853151614a5f2e3e2ddfbd", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -238,7 +238,7 @@ fn scan_escape(chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {\n                             c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?;\n                         n_digits += 1;\n                         if n_digits > 6 {\n-                            // Stop updating value since we're sure that it's is incorrect already.\n+                            // Stop updating value since we're sure that it's incorrect already.\n                             continue;\n                         }\n                         let digit = digit as u32;"}, {"sha": "0f4973ebf7129bd55571a117fd2a1addc216d079", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -985,7 +985,9 @@ LLVMRustOptimizeWithNewPassManager(\n     if (SanitizerOptions->SanitizeAddress) {\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n+#if LLVM_VERSION_LT(15, 0)\n           MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n+#endif\n #if LLVM_VERSION_GE(14, 0)\n           AddressSanitizerOptions opts = AddressSanitizerOptions{\n             /*CompileKernel=*/false,"}, {"sha": "227127aed50d71b8feca779b1a71149b6709ef5b", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -956,7 +956,7 @@ impl SourceMap {\n     }\n \n     pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {\n-        let prev_span = self.span_extend_to_prev_str(span, \"fn\", true, true).unwrap_or(span);\n+        let prev_span = self.span_extend_to_prev_str(span, \"fn\", true, true)?;\n         if let Ok(snippet) = self.span_to_snippet(prev_span) {\n             debug!(\n                 \"generate_fn_name_span: span={:?}, prev_span={:?}, snippet={:?}\","}, {"sha": "65b8df429966329615eb3570e38c2d81a18698c6", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -335,7 +335,6 @@\n #![feature(const_ip)]\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n-#![feature(const_option)]\n #![feature(const_socketaddr)]\n #![feature(thread_local_internals)]\n //"}, {"sha": "01f26298290f0174d212cf7570a1af0ce7190c7a", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -21,6 +21,17 @@ use crate::vec;\n \n use core::iter;\n \n+/// This is the const equivalent to `NonZeroU16::new(n).unwrap()`\n+///\n+/// FIXME: This can be removed once `Option::unwrap` is stably const.\n+/// See the `const_option` feature (#67441).\n+const fn non_zero_u16(n: u16) -> NonZeroU16 {\n+    match NonZeroU16::new(n) {\n+        Some(n) => n,\n+        None => panic!(\"called `unwrap` on a `None` value\"),\n+    }\n+}\n+\n pub fn args() -> Args {\n     // SAFETY: `GetCommandLineW` returns a pointer to a null terminated UTF-16\n     // string so it's safe for `WStrUnits` to use.\n@@ -58,10 +69,10 @@ fn parse_lp_cmd_line<'a, F: Fn() -> OsString>(\n     lp_cmd_line: Option<WStrUnits<'a>>,\n     exe_name: F,\n ) -> Vec<OsString> {\n-    const BACKSLASH: NonZeroU16 = NonZeroU16::new(b'\\\\' as u16).unwrap();\n-    const QUOTE: NonZeroU16 = NonZeroU16::new(b'\"' as u16).unwrap();\n-    const TAB: NonZeroU16 = NonZeroU16::new(b'\\t' as u16).unwrap();\n-    const SPACE: NonZeroU16 = NonZeroU16::new(b' ' as u16).unwrap();\n+    const BACKSLASH: NonZeroU16 = non_zero_u16(b'\\\\' as u16);\n+    const QUOTE: NonZeroU16 = non_zero_u16(b'\"' as u16);\n+    const TAB: NonZeroU16 = non_zero_u16(b'\\t' as u16);\n+    const SPACE: NonZeroU16 = non_zero_u16(b' ' as u16);\n \n     let mut ret_val = Vec::new();\n     // If the cmd line pointer is null or it points to an empty string then"}, {"sha": "352803855a4e75284db48a8df03f60d42282f166", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -2161,8 +2161,12 @@ impl Path {\n         self.res.def_id()\n     }\n \n+    pub(crate) fn last_opt(&self) -> Option<Symbol> {\n+        self.segments.last().map(|s| s.name)\n+    }\n+\n     pub(crate) fn last(&self) -> Symbol {\n-        self.segments.last().expect(\"segments were empty\").name\n+        self.last_opt().expect(\"segments were empty\")\n     }\n \n     pub(crate) fn whole_name(&self) -> String {"}, {"sha": "54dc1b4fdeeac5d7f59f8ca270a19f5205ac38e9", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -666,7 +666,12 @@ impl FromWithTcx<clean::Import> for Import {\n             },\n             Glob => Import {\n                 source: import.source.path.whole_name(),\n-                name: import.source.path.last().to_string(),\n+                name: import\n+                    .source\n+                    .path\n+                    .last_opt()\n+                    .unwrap_or_else(|| Symbol::intern(\"*\"))\n+                    .to_string(),\n                 id: import.source.did.map(ItemId::from).map(|i| from_item_id(i, tcx)),\n                 glob: true,\n             },"}, {"sha": "716bb3d2848cc196d2ddb39d95cf60f8607cd98a", "filename": "src/test/rustdoc-json/assoc_type.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Frustdoc-json%2Fassoc_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Frustdoc-json%2Fassoc_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fassoc_type.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/98547>.\n+\n+// @has assoc_type.json\n+// @has - \"$.index[*][?(@.name=='Trait')]\"\n+// @has - \"$.index[*][?(@.name=='AssocType')]\"\n+// @has - \"$.index[*][?(@.name=='S')]\"\n+// @has - \"$.index[*][?(@.name=='S2')]\"\n+\n+pub trait Trait {\n+    type AssocType;\n+}\n+\n+impl<T> Trait for T {\n+    type AssocType = Self;\n+}\n+\n+pub struct S;\n+\n+/// Not needed for the #98547 ICE to occur, but added to maximize the chance of\n+/// getting an ICE in the future. See\n+/// <https://github.com/rust-lang/rust/pull/98548#discussion_r908219164>\n+pub struct S2;"}, {"sha": "d7ac952d1bbc5aa4b9ce84387b22fedcac541bf1", "filename": "src/test/rustdoc-json/glob_import.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Frustdoc-json%2Fglob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Frustdoc-json%2Fglob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fglob_import.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -0,0 +1,24 @@\n+// This is a regression test for <https://github.com/rust-lang/rust/issues/98003>.\n+\n+#![feature(no_core)]\n+#![no_std]\n+#![no_core]\n+\n+// @has glob_import.json\n+// @has - \"$.index[*][?(@.name=='glob')]\"\n+// @has - \"$.index[*][?(@.kind=='import')].inner.name\" \\\"*\\\"\n+\n+\n+mod m1 {\n+    pub fn f() {}\n+}\n+mod m2 {\n+    pub fn f(_: u8) {}\n+}\n+\n+pub use m1::*;\n+pub use m2::*;\n+\n+pub mod glob {\n+    pub use *;\n+}"}, {"sha": "6ae40ae6ddbf63df6067e9ee626b206816c618a7", "filename": "src/test/ui/consts/const-eval/issue-85907.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -0,0 +1,7 @@\n+const fn hey() -> usize {\n+    panic!(123); //~ ERROR argument to `panic!()` in a const context must have type `&str`\n+}\n+\n+fn main() {\n+    let _: [u8; hey()] = todo!();\n+}"}, {"sha": "381f2fd1114ec79f856e02bd3537fd59744083ca", "filename": "src/test/ui/consts/const-eval/issue-85907.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -0,0 +1,10 @@\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-85907.rs:2:5\n+   |\n+LL |     panic!(123);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "30e0f19ab8d84ac448f41ab685048b396b957c74", "filename": "src/test/ui/extern/auxiliary/issue-80074-macro.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fissue-80074-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fissue-80074-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fissue-80074-macro.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -0,0 +1,4 @@\n+// edition:2018\n+\n+macro_rules! foo_ { () => {}; }\n+use foo_ as foo;"}, {"sha": "f83027d4abfd23e19045d95ef8a5efe4651279f2", "filename": "src/test/ui/extern/issue-80074.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fextern%2Fissue-80074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fextern%2Fissue-80074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-80074.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -0,0 +1,10 @@\n+// edition:2018\n+// build-pass\n+// aux-crate:issue_80074=issue-80074-macro.rs\n+\n+#[macro_use]\n+extern crate issue_80074;\n+\n+fn main() {\n+    foo!();\n+}"}, {"sha": "780c50d6ffa19dbe8b802f970c94a45352be7f4a", "filename": "src/test/ui/generics/issue-98432.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -0,0 +1,9 @@\n+struct Struct<T>(T);\n+\n+impl<T> Struct<T> {\n+    const CONST: fn() = || {\n+        struct _Obligation where T:; //~ ERROR can't use generic parameters from outer function\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "afa67b63bd9a16d0bb0b18d8b5c920f9c694b379", "filename": "src/test/ui/generics/issue-98432.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-98432.stderr?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -0,0 +1,14 @@\n+error[E0401]: can't use generic parameters from outer function\n+  --> $DIR/issue-98432.rs:5:34\n+   |\n+LL | impl<T> Struct<T> {\n+   |      - type parameter from outer function\n+LL |     const CONST: fn() = || {\n+LL |         struct _Obligation where T:;\n+   |                                  ^ use of generic parameter from outer function\n+   |\n+   = help: try using a local generic parameter instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0401`."}, {"sha": "4e8e5afd4bbe279bbfeb4d2e994435e26db403b8", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -351,11 +351,6 @@ pub fn opt_str2(maybestr: Option<String>) -> String {\n }\n \n pub fn run_tests(config: Config) {\n-    // FIXME(#33435) Avoid spurious failures in codegen-units/partitioning tests.\n-    if let Mode::CodegenUnits = config.mode {\n-        let _ = fs::remove_dir_all(\"tmp/partitioning-tests\");\n-    }\n-\n     // If we want to collect rustfix coverage information,\n     // we first make sure that the coverage file does not exist.\n     // It will be created later on."}, {"sha": "b74e96f509baf0be70281c55f14cb18fefbc6b22", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -1 +1 @@\n-Subproject commit 427061da19723f2206fe4dcb175c9c43b9a6193d\n+Subproject commit b74e96f509baf0be70281c55f14cb18fefbc6b22"}, {"sha": "100dfd613f0cb5878633d33c1bc5c4c7e477c363", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/830880640304ba8699c5f9a0c4665c38a3271963/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/830880640304ba8699c5f9a0c4665c38a3271963/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=830880640304ba8699c5f9a0c4665c38a3271963", "patch": "@@ -244,7 +244,7 @@ cc = [\"@rust-lang/miri\"]\n \n [mentions.\"compiler/rustc_mir_transform/src/\"]\n message = \"Some changes occurred to MIR optimizations\"\n-cc = [\"@rust-lang/mir-opt\"]\n+cc = [\"@rust-lang/wg-mir-opt\"]\n \n [mentions.\"compiler/rustc_trait_selection/src/traits/const_evaluatable.rs\"]\n message = \"Some changes occurred in const_evaluatable.rs\""}]}