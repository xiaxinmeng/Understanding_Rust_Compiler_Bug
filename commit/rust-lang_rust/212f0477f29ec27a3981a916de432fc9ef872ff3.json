{"sha": "212f0477f29ec27a3981a916de432fc9ef872ff3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMmYwNDc3ZjI5ZWMyN2EzOTgxYTkxNmRlNDMyZmM5ZWY4NzJmZjM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-15T17:28:58Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:48:34Z"}, "message": "Make diverging type variables work again\n\nChalk doesn't know about the `diverging` flag, so we need to instead\npropagate it before fully resolving the variables.", "tree": {"sha": "5a8c5c7391a1fda399c909180b969abae2212435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a8c5c7391a1fda399c909180b969abae2212435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/212f0477f29ec27a3981a916de432fc9ef872ff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/212f0477f29ec27a3981a916de432fc9ef872ff3", "html_url": "https://github.com/rust-lang/rust/commit/212f0477f29ec27a3981a916de432fc9ef872ff3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/212f0477f29ec27a3981a916de432fc9ef872ff3/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32fc944263ae0b30eba130fbcf28f4eb5578fdb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/32fc944263ae0b30eba130fbcf28f4eb5578fdb3", "html_url": "https://github.com/rust-lang/rust/commit/32fc944263ae0b30eba130fbcf28f4eb5578fdb3"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "7898740be2a52f524462c843dfa682717996891b", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/212f0477f29ec27a3981a916de432fc9ef872ff3/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212f0477f29ec27a3981a916de432fc9ef872ff3/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=212f0477f29ec27a3981a916de432fc9ef872ff3", "patch": "@@ -284,6 +284,9 @@ impl<'a> InferenceContext<'a> {\n \n     fn resolve_all(mut self) -> InferenceResult {\n         // FIXME resolve obligations as well (use Guidance if necessary)\n+\n+        // make sure diverging type variables are marked as such\n+        self.table.propagate_diverging_flag();\n         let mut result = std::mem::take(&mut self.result);\n         for ty in result.type_of_expr.values_mut() {\n             let resolved = self.table.resolve_ty_completely(ty.clone());"}, {"sha": "56e06b7d0a4b5eeb9b604004a58eefd73eb7e9d6", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/212f0477f29ec27a3981a916de432fc9ef872ff3/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/212f0477f29ec27a3981a916de432fc9ef872ff3/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=212f0477f29ec27a3981a916de432fc9ef872ff3", "patch": "@@ -179,8 +179,28 @@ impl<'a> InferenceTable<'a> {\n         }\n     }\n \n+    /// Chalk doesn't know about the `diverging` flag, so when it unifies two\n+    /// type variables of which one is diverging, the chosen root might not be\n+    /// diverging and we have no way of marking it as such at that time. This\n+    /// function goes through all type variables and make sure their root is\n+    /// marked as diverging if necessary, so that resolving them gives the right\n+    /// result.\n+    pub(super) fn propagate_diverging_flag(&mut self) {\n+        for i in 0..self.type_variable_table.inner.len() {\n+            if !self.type_variable_table.inner[i].diverging {\n+                continue;\n+            }\n+            let v = InferenceVar::from(i as u32);\n+            let root = self.var_unification_table.inference_var_root(v);\n+            if let Some(data) = self.type_variable_table.inner.get_mut(root.index() as usize) {\n+                data.diverging = true;\n+            }\n+        }\n+    }\n+\n     fn new_var(&mut self, kind: TyVariableKind, diverging: bool) -> Ty {\n         let var = self.var_unification_table.new_variable(UniverseIndex::ROOT);\n+        // Chalk might have created some type variables for its own purposes that we don't know about...\n         self.type_variable_table.inner.extend(\n             (0..1 + var.index() as usize - self.type_variable_table.inner.len())\n                 .map(|_| TypeVariableData { diverging: false }),"}]}