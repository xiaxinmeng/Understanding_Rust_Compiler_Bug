{"sha": "03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "node_id": "C_kwDOAAsO6NoAKDAzYTZhYjBiNjJiMmZiYWVmYmYzOWJlZTY2MDViM2ExMDUwYjgwODM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-14T20:55:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-14T20:55:03Z"}, "message": "Add signature help for record struct patterns", "tree": {"sha": "1ccaa4c4f2ee80f3f3c57473259d672f571d3444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ccaa4c4f2ee80f3f3c57473259d672f571d3444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "html_url": "https://github.com/rust-lang/rust/commit/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "510e4b402994124cff40893ad240646e7e0bfa54", "url": "https://api.github.com/repos/rust-lang/rust/commits/510e4b402994124cff40893ad240646e7e0bfa54", "html_url": "https://github.com/rust-lang/rust/commit/510e4b402994124cff40893ad240646e7e0bfa54"}], "stats": {"total": 102, "additions": 88, "deletions": 14}, "files": [{"sha": "407ba6f65844e7b426450a81c4e001985b9ffa8e", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "patch": "@@ -411,7 +411,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_record_field(field)\n     }\n \n-    pub fn resolve_record_pat_field(&self, field: &ast::RecordPatField) -> Option<Field> {\n+    pub fn resolve_record_pat_field(&self, field: &ast::RecordPatField) -> Option<(Field, Type)> {\n         self.imp.resolve_record_pat_field(field)\n     }\n \n@@ -1201,7 +1201,7 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(field.syntax())?.resolve_record_field(self.db, field)\n     }\n \n-    fn resolve_record_pat_field(&self, field: &ast::RecordPatField) -> Option<Field> {\n+    fn resolve_record_pat_field(&self, field: &ast::RecordPatField) -> Option<(Field, Type)> {\n         self.analyze(field.syntax())?.resolve_record_pat_field(self.db, field)\n     }\n "}, {"sha": "c24d196e1b6247857764f9898fd17c623069bdc0", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "patch": "@@ -441,14 +441,17 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         field: &ast::RecordPatField,\n-    ) -> Option<Field> {\n+    ) -> Option<(Field, Type)> {\n         let field_name = field.field_name()?.as_name();\n         let record_pat = ast::RecordPat::cast(field.syntax().parent().and_then(|p| p.parent())?)?;\n         let pat_id = self.pat_id(&record_pat.into())?;\n         let variant = self.infer.as_ref()?.variant_resolution_for_pat(pat_id)?;\n         let variant_data = variant.variant_data(db.upcast());\n         let field = FieldId { parent: variant, local_id: variant_data.field(&field_name)? };\n-        Some(field.into())\n+        let (_, subst) = self.infer.as_ref()?.type_of_pat.get(pat_id)?.as_adt()?;\n+        let field_ty =\n+            db.field_types(variant).get(field.local_id)?.clone().substitute(Interner, subst);\n+        Some((field.into(), Type::new_with_resolver(db, &self.resolver, field_ty)))\n     }\n \n     pub(crate) fn resolve_macro_call("}, {"sha": "4071c490b7fc39546812ad04375c17b292305f54", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "patch": "@@ -327,7 +327,7 @@ impl NameClass {\n             let pat_parent = ident_pat.syntax().parent();\n             if let Some(record_pat_field) = pat_parent.and_then(ast::RecordPatField::cast) {\n                 if record_pat_field.name_ref().is_none() {\n-                    if let Some(field) = sema.resolve_record_pat_field(&record_pat_field) {\n+                    if let Some((field, _)) = sema.resolve_record_pat_field(&record_pat_field) {\n                         return Some(NameClass::PatFieldShorthand {\n                             local_def: local,\n                             field_ref: field,\n@@ -483,6 +483,13 @@ impl NameRefClass {\n                 },\n                 ast::RecordPatField(record_pat_field) => {\n                     sema.resolve_record_pat_field(&record_pat_field)\n+                        .map(|(field, ..)|field)\n+                        .map(Definition::Field)\n+                        .map(NameRefClass::Definition)\n+                },\n+                ast::RecordExprField(record_expr_field) => {\n+                    sema.resolve_record_field(&record_expr_field)\n+                        .map(|(field, ..)|field)\n                         .map(Definition::Field)\n                         .map(NameRefClass::Definition)\n                 },"}, {"sha": "6d2d0bd635165b2bba55a7ff4fccd6b74fbe03d4", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn goto_type_definition(\n                                 ty\n                             } else {\n                                 let record_field = ast::RecordPatField::for_field_name_ref(&it)?;\n-                                sema.resolve_record_pat_field(&record_field)?.ty(db)\n+                                sema.resolve_record_pat_field(&record_field)?.1\n                             }\n                         },\n                         _ => return None,"}, {"sha": "21f92ccddb94332e631094fcf57acd4b511d13c9", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 72, "deletions": 8, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a6ab0b62b2fbaefbf39bee6605b3a1050b8083/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=03a6ab0b62b2fbaefbf39bee6605b3a1050b8083", "patch": "@@ -16,7 +16,7 @@ use stdx::format_to;\n use syntax::{\n     algo,\n     ast::{self, HasArgList},\n-    match_ast, AstNode, Direction, SyntaxToken, TextRange, TextSize,\n+    match_ast, AstNode, Direction, SyntaxElementChildren, SyntaxToken, TextRange, TextSize,\n };\n \n use crate::RootDatabase;\n@@ -102,6 +102,14 @@ pub(crate) fn signature_help(db: &RootDatabase, position: FilePosition) -> Optio\n                     }\n                     return signature_help_for_record_lit(&sema, record, token);\n                 },\n+                ast::RecordPat(record) => {\n+                    let cursor_outside = record.record_pat_field_list().and_then(|list| list.r_curly_token()).as_ref() == Some(&token);\n+                    if cursor_outside {\n+                        continue;\n+                    }\n+                    return signature_help_for_record_pat(&sema, record, token);\n+                },\n+                ast::TupleStructPat(tuple_pat) => {},\n                 _ => (),\n             }\n         }\n@@ -346,10 +354,27 @@ fn signature_help_for_record_lit(\n     record: ast::RecordExpr,\n     token: SyntaxToken,\n ) -> Option<SignatureHelp> {\n-    let active_parameter = record\n-        .record_expr_field_list()?\n-        .syntax()\n-        .children_with_tokens()\n+    signature_help_for_record_(\n+        sema,\n+        record.record_expr_field_list()?.syntax().children_with_tokens(),\n+        &record.path()?,\n+        record\n+            .record_expr_field_list()?\n+            .fields()\n+            .filter_map(|field| sema.resolve_record_field(&field))\n+            .map(|(field, _, ty)| (field, ty)),\n+        token,\n+    )\n+}\n+\n+fn signature_help_for_record_(\n+    sema: &Semantics<'_, RootDatabase>,\n+    field_list_children: SyntaxElementChildren,\n+    path: &ast::Path,\n+    fields2: impl Iterator<Item = (hir::Field, hir::Type)>,\n+    token: SyntaxToken,\n+) -> Option<SignatureHelp> {\n+    let active_parameter = field_list_children\n         .filter_map(syntax::NodeOrToken::into_token)\n         .filter(|t| t.kind() == syntax::T![,])\n         .take_while(|t| t.text_range().start() <= token.text_range().start())\n@@ -365,7 +390,7 @@ fn signature_help_for_record_lit(\n     let fields;\n \n     let db = sema.db;\n-    let path_res = sema.resolve_path(&record.path()?)?;\n+    let path_res = sema.resolve_path(path)?;\n     if let PathResolution::Def(ModuleDef::Variant(variant)) = path_res {\n         fields = variant.fields(db);\n         let en = variant.parent_enum(db);\n@@ -397,8 +422,7 @@ fn signature_help_for_record_lit(\n     let mut fields =\n         fields.into_iter().map(|field| (field.name(db), Some(field))).collect::<FxIndexMap<_, _>>();\n     let mut buf = String::new();\n-    for field in record.record_expr_field_list()?.fields() {\n-        let Some((field, _, ty)) = sema.resolve_record_field(&field) else { continue };\n+    for (field, ty) in fields2 {\n         let name = field.name(db);\n         format_to!(buf, \"{name}: {}\", ty.display_truncated(db, Some(20)));\n         res.push_record_field(&buf);\n@@ -418,6 +442,23 @@ fn signature_help_for_record_lit(\n     Some(res)\n }\n \n+fn signature_help_for_record_pat(\n+    sema: &Semantics<'_, RootDatabase>,\n+    record: ast::RecordPat,\n+    token: SyntaxToken,\n+) -> Option<SignatureHelp> {\n+    signature_help_for_record_(\n+        sema,\n+        record.record_pat_field_list()?.syntax().children_with_tokens(),\n+        &record.path()?,\n+        record\n+            .record_pat_field_list()?\n+            .fields()\n+            .filter_map(|field| sema.resolve_record_pat_field(&field)),\n+        token,\n+    )\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::iter;\n@@ -1550,6 +1591,29 @@ impl S {\n         );\n     }\n \n+    #[test]\n+    fn record_pat() {\n+        check(\n+            r#\"\n+struct Strukt<T, U = ()> {\n+    t: T,\n+    u: U,\n+    unit: (),\n+}\n+fn f() {\n+    let Strukt {\n+        u: 0,\n+        $0\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                struct Strukt { u: i32, t: T, unit: () }\n+                                ------  ^^^^  --------\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_enum_in_nested_method_in_lambda() {\n         check("}]}