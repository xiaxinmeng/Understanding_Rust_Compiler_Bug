{"sha": "1202fce40ea91ac26cbfefe2532aa5c5c3755991", "node_id": "C_kwDOAAsO6NoAKDEyMDJmY2U0MGVhOTFhYzI2Y2JmZWZlMjUzMmFhNWM1YzM3NTU5OTE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T10:01:53Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:59Z"}, "message": "Remove definitions field that is only needed for one method", "tree": {"sha": "431a4cf3db957906eb63f7423e4ac073b20f62b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/431a4cf3db957906eb63f7423e4ac073b20f62b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1202fce40ea91ac26cbfefe2532aa5c5c3755991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1202fce40ea91ac26cbfefe2532aa5c5c3755991", "html_url": "https://github.com/rust-lang/rust/commit/1202fce40ea91ac26cbfefe2532aa5c5c3755991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1202fce40ea91ac26cbfefe2532aa5c5c3755991/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "url": "https://api.github.com/repos/rust-lang/rust/commits/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664", "html_url": "https://github.com/rust-lang/rust/commit/4953d70e2fb5f023682cbc7c9e4aa0c5c8619664"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "586b8c93e1ccb61841f553703c196cfdb7215afd", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1202fce40ea91ac26cbfefe2532aa5c5c3755991/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1202fce40ea91ac26cbfefe2532aa5c5c3755991/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=1202fce40ea91ac26cbfefe2532aa5c5c3755991", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{MappedReadGuard, ReadGuard};\n+use rustc_data_structures::sync::MappedReadGuard;\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n@@ -64,7 +64,6 @@ pub struct CrateLoader<'a> {\n     // Immutable configuration.\n     sess: &'a Session,\n     metadata_loader: &'a MetadataLoaderDyn,\n-    definitions: ReadGuard<'a, Definitions>,\n     local_crate_name: Symbol,\n     // Mutable output.\n     cstore: &'a mut CStore,\n@@ -261,17 +260,9 @@ impl<'a> CrateLoader<'a> {\n         metadata_loader: &'a MetadataLoaderDyn,\n         local_crate_name: Symbol,\n         cstore: &'a mut CStore,\n-        definitions: ReadGuard<'a, Definitions>,\n         used_extern_options: &'a mut FxHashSet<Symbol>,\n     ) -> Self {\n-        CrateLoader {\n-            sess,\n-            metadata_loader,\n-            local_crate_name,\n-            cstore,\n-            used_extern_options,\n-            definitions,\n-        }\n+        CrateLoader { sess, metadata_loader, local_crate_name, cstore, used_extern_options }\n     }\n     pub fn cstore(&self) -> &CStore {\n         &self.cstore\n@@ -989,6 +980,7 @@ impl<'a> CrateLoader<'a> {\n         &mut self,\n         item: &ast::Item,\n         def_id: LocalDefId,\n+        definitions: &Definitions,\n     ) -> Option<CrateNum> {\n         match item.kind {\n             ast::ItemKind::ExternCrate(orig_name) => {\n@@ -1011,7 +1003,7 @@ impl<'a> CrateLoader<'a> {\n \n                 let cnum = self.resolve_crate(name, item.span, dep_kind)?;\n \n-                let path_len = self.definitions.def_path(def_id).data.len();\n+                let path_len = definitions.def_path(def_id).data.len();\n                 self.update_extern_crate(\n                     cnum,\n                     ExternCrate {"}, {"sha": "b1e023f2caa5761b3620d7e030268dd8a74b91d3", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1202fce40ea91ac26cbfefe2532aa5c5c3755991/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1202fce40ea91ac26cbfefe2532aa5c5c3755991/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=1202fce40ea91ac26cbfefe2532aa5c5c3755991", "patch": "@@ -855,7 +855,10 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n         } else if orig_name == Some(kw::SelfLower) {\n             Some(self.r.graph_root)\n         } else {\n-            let crate_id = self.r.crate_loader(|c| c.process_extern_crate(item, local_def_id));\n+            let tcx = self.r.tcx;\n+            let crate_id = self.r.crate_loader(|c| {\n+                c.process_extern_crate(item, local_def_id, &tcx.definitions_untracked())\n+            });\n             crate_id.map(|crate_id| {\n                 self.r.extern_crate_map.insert(local_def_id, crate_id);\n                 self.r.expect_module(crate_id.as_def_id())"}, {"sha": "27b45181c9d8b6779f4110b47f7bbb52ecb1afe3", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1202fce40ea91ac26cbfefe2532aa5c5c3755991/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1202fce40ea91ac26cbfefe2532aa5c5c3755991/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=1202fce40ea91ac26cbfefe2532aa5c5c3755991", "patch": "@@ -1470,7 +1470,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             &*self.metadata_loader,\n             self.local_crate_name,\n             &mut *self.tcx.untracked().cstore.write().untracked_as_any().downcast_mut().unwrap(),\n-            self.tcx.definitions_untracked(),\n             &mut self.used_extern_options,\n         ))\n     }"}]}