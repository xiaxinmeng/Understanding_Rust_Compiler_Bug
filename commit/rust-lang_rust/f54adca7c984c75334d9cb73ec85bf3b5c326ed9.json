{"sha": "f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NGFkY2E3Yzk4NGM3NTMzNGQ5Y2I3M2VjODViZjNiNWMzMjZlZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-17T01:57:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-17T01:57:43Z"}, "message": "auto merge of #5374 : z0w0/rust/rustdoc-explicit-self, r=z0w0", "tree": {"sha": "5c691dd5ab292eefde75c5451cba9a5899b85d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c691dd5ab292eefde75c5451cba9a5899b85d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "html_url": "https://github.com/rust-lang/rust/commit/f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f54adca7c984c75334d9cb73ec85bf3b5c326ed9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6307d24364c02ff636b6c76e0ac8b379d73b86f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6307d24364c02ff636b6c76e0ac8b379d73b86f7", "html_url": "https://github.com/rust-lang/rust/commit/6307d24364c02ff636b6c76e0ac8b379d73b86f7"}, {"sha": "246573d5ae1024193914de8c9be9230860781410", "url": "https://api.github.com/repos/rust-lang/rust/commits/246573d5ae1024193914de8c9be9230860781410", "html_url": "https://github.com/rust-lang/rust/commit/246573d5ae1024193914de8c9be9230860781410"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "70d5c730569e74949294438c1f7763edbb668c32", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f54adca7c984c75334d9cb73ec85bf3b5c326ed9/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54adca7c984c75334d9cb73ec85bf3b5c326ed9/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "patch": "@@ -734,8 +734,8 @@ fn should_write_trait_method_header() {\n #[test]\n fn should_write_trait_method_signature() {\n     let markdown = test::render(\n-        ~\"trait i { fn a(); }\");\n-    fail_unless!(str::contains(markdown, ~\"\\n    fn a()\"));\n+        ~\"trait i { fn a(&self); }\");\n+    fail_unless!(str::contains(markdown, ~\"\\n    fn a(&self)\"));\n }\n \n fn write_impl(ctxt: &Ctxt, doc: doc::ImplDoc) {\n@@ -773,8 +773,8 @@ fn should_write_impl_method_header() {\n #[test]\n fn should_write_impl_method_signature() {\n     let markdown = test::render(\n-        ~\"impl int { fn a() { } }\");\n-    fail_unless!(str::contains(markdown, ~\"\\n    fn a()\"));\n+        ~\"impl int { fn a(&mut self) { } }\");\n+    fail_unless!(str::contains(markdown, ~\"\\n    fn a(&mut self)\"));\n }\n \n fn write_type("}, {"sha": "54197e316da94d7db9317d2bc90766db5e98d8aa", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f54adca7c984c75334d9cb73ec85bf3b5c326ed9/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54adca7c984c75334d9cb73ec85bf3b5c326ed9/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "patch": "@@ -75,7 +75,7 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n             ident: ident,\n             node: ast::foreign_item_fn(ref decl, _, ref tys), _\n           }, _, _) => {\n-            Some(pprust::fun_to_str(decl, ident, tys,\n+            Some(pprust::fun_to_str(decl, ident, None, tys,\n                                     extract::interner()))\n           }\n           _ => fail!(~\"get_fn_sig: fn_id not bound to a fn item\")\n@@ -215,6 +215,7 @@ fn get_method_sig(\n                       Some(pprust::fun_to_str(\n                           &ty_m.decl,\n                           ty_m.ident,\n+                          Some(ty_m.self_ty.node),\n                           &ty_m.generics,\n                           extract::interner()\n                       ))\n@@ -223,6 +224,7 @@ fn get_method_sig(\n                       Some(pprust::fun_to_str(\n                           &m.decl,\n                           m.ident,\n+                          Some(m.self_ty.node),\n                           &m.generics,\n                           extract::interner()\n                       ))\n@@ -242,6 +244,7 @@ fn get_method_sig(\n                     Some(pprust::fun_to_str(\n                         &method.decl,\n                         method.ident,\n+                        Some(method.self_ty.node),\n                         &method.generics,\n                         extract::interner()\n                     ))\n@@ -256,9 +259,9 @@ fn get_method_sig(\n \n #[test]\n fn should_add_trait_method_sigs() {\n-    let doc = test::mk_doc(~\"trait i { fn a<T>() -> int; }\");\n+    let doc = test::mk_doc(~\"trait i { fn a<T>(&mut self) -> int; }\");\n     fail_unless!(doc.cratemod().traits()[0].methods[0].sig\n-        == Some(~\"fn a<T>() -> int\"));\n+        == Some(~\"fn a<T>(&mut self) -> int\"));\n }\n \n fn fold_impl(\n@@ -315,9 +318,9 @@ fn should_add_impl_self_ty() {\n \n #[test]\n fn should_add_impl_method_sigs() {\n-    let doc = test::mk_doc(~\"impl int { fn a<T>() -> int { fail!() } }\");\n+    let doc = test::mk_doc(~\"impl int { fn a<T>(&self) -> int { fail!() } }\");\n     fail_unless!(doc.cratemod().impls()[0].methods[0].sig\n-        == Some(~\"fn a<T>() -> int\"));\n+        == Some(~\"fn a<T>(&self) -> int\"));\n }\n \n fn fold_type("}, {"sha": "5aae5570dbfee8d9f813588e16044b5fa9e1c71e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f54adca7c984c75334d9cb73ec85bf3b5c326ed9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54adca7c984c75334d9cb73ec85bf3b5c326ed9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "patch": "@@ -181,10 +181,11 @@ pub fn path_to_str(&&p: @ast::path, intr: @ident_interner) -> ~str {\n }\n \n pub fn fun_to_str(decl: &ast::fn_decl, name: ast::ident,\n+                  opt_self_ty: Option<ast::self_ty_>,\n                   generics: &ast::Generics, intr: @ident_interner) -> ~str {\n     do io::with_str_writer |wr| {\n         let s = rust_printer(wr, intr);\n-        print_fn(s, decl, None, name, generics, None, ast::inherited);\n+        print_fn(s, decl, None, name, generics, opt_self_ty, ast::inherited);\n         end(s); // Close the head box\n         end(s); // Close the outer box\n         eof(s.s);\n@@ -2274,7 +2275,7 @@ pub mod test {\n             cf: ast::return_val\n         };\n         let generics = ast_util::empty_generics();\n-        check_equal (&fun_to_str(&decl, abba_ident, &generics, mock_interner),\n+        check_equal (&fun_to_str(&decl, abba_ident, None, &generics, mock_interner),\n                      &~\"fn abba()\");\n     }\n "}]}