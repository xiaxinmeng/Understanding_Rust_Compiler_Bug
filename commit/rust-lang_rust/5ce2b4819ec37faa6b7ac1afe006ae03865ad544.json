{"sha": "5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZTJiNDgxOWVjMzdmYWE2YjdhYzFhZmUwMDZhZTAzODY1YWQ1NDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-08T09:55:23Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-08T09:55:23Z"}, "message": "Merge #1504\n\n1504: Simplify LSP handlers r=matklad a=kjeremy\n\nTakes advantage of protocol inheritance via composition and simplifies some responses via the `From`/`Into` traits.\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "e627fd15f070cd210c379f033b54ea004309d7ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e627fd15f070cd210c379f033b54ea004309d7ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "html_url": "https://github.com/rust-lang/rust/commit/5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "5b19825e376b67aabbe8d5b163bf69b1acd92f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b19825e376b67aabbe8d5b163bf69b1acd92f04", "html_url": "https://github.com/rust-lang/rust/commit/5b19825e376b67aabbe8d5b163bf69b1acd92f04"}, {"sha": "9c6e93cd6c108536015272b6a363ed5cc1d4fb44", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6e93cd6c108536015272b6a363ed5cc1d4fb44", "html_url": "https://github.com/rust-lang/rust/commit/9c6e93cd6c108536015272b6a363ed5cc1d4fb44"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "3049ab3d9a66be29e18a51d4296adff314880935", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "patch": "@@ -541,7 +541,7 @@ dependencies = [\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lsp-types 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lsp-types 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.94 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -774,7 +774,7 @@ dependencies = [\n \n [[package]]\n name = \"lsp-types\"\n-version = \"0.58.1\"\n+version = \"0.59.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1200,7 +1200,7 @@ dependencies = [\n  \"flexi_logger 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gen_lsp_server 0.2.0\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lsp-types 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lsp-types 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n@@ -2201,7 +2201,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum linked-hash-map 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n \"checksum lock_api 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ed946d4529956a20f2d63ebe1b69996d5a2137c91913fe3ebbeff957f5bca7ff\"\n \"checksum log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c84ec4b527950aa83a329754b01dbe3f58361d1c5efacd1f6d68c494d08a17c6\"\n-\"checksum lsp-types 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42c7edac51b6739544453fd33c7ae5e910d1ec4f2d9904cf1990f8f6581e26f5\"\n+\"checksum lsp-types 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8961cde7f6f856771910edf37ff0729e59e02d2a8592a94c27495b746320e6ed\"\n \"checksum maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08cbb6b4fef96b6d77bfc40ec491b1690c779e77b05cd9f07f787ed376fd4c43\"\n \"checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \"checksum memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\""}, {"sha": "36a29265c692c51363fad5cc1caf28ab580c07c4", "filename": "crates/gen_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/crates%2Fgen_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/crates%2Fgen_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2FCargo.toml?ref=5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "patch": "@@ -8,7 +8,7 @@ license = \"MIT OR Apache-2.0\"\n description = \"Generic LSP server scaffold.\"\n \n [dependencies]\n-lsp-types = \"0.58.0\"\n+lsp-types = \"0.59.0\"\n log = \"0.4.3\"\n serde_json = \"1.0.34\"\n serde = { version = \"1.0.83\", features = [\"derive\"] }"}, {"sha": "50bc8111b018b6b9397b0480e526cdea841a741e", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "patch": "@@ -13,7 +13,7 @@ crossbeam-channel = \"0.3.5\"\n flexi_logger = \"0.13.0\"\n log = \"0.4.3\"\n url_serde = \"0.2.0\"\n-lsp-types = { version = \"0.58.0\", features = [\"proposed\"] }\n+lsp-types = { version = \"0.59.0\", features = [\"proposed\"] }\n rustc-hash = \"1.0\"\n parking_lot = \"0.8.0\"\n "}, {"sha": "62c8cbf7100cba66db5854de334cab873564228f", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "patch": "@@ -2,11 +2,11 @@ use std::{fmt::Write as _, io::Write as _};\n \n use gen_lsp_server::ErrorCode;\n use lsp_types::{\n-    CodeAction, CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity,\n-    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeKind,\n-    FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind, Position,\n-    PrepareRenameResponse, Range, RenameParams, SymbolInformation, TextDocumentIdentifier,\n-    TextEdit, WorkspaceEdit,\n+    CodeAction, CodeActionResponse, CodeLens, Command, CompletionItem, Diagnostic,\n+    DiagnosticSeverity, DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n+    FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n+    MarkupKind, Position, PrepareRenameResponse, Range, RenameParams, SymbolInformation,\n+    TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide_api::{\n     AssistId, Cancelable, FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo,\n@@ -153,14 +153,12 @@ pub fn handle_on_type_formatting(\n     params: req::DocumentOnTypeFormattingParams,\n ) -> Result<Option<Vec<TextEdit>>> {\n     let _p = profile(\"handle_on_type_formatting\");\n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n-    let position = FilePosition {\n-        file_id,\n-        /// in `ra_ide_api`, the `on_type` invariant is that\n-        /// `text.char_at(position) == typed_char`.\n-        offset: params.position.conv_with(&line_index) - TextUnit::of_char('.'),\n-    };\n+    let mut position = params.text_document_position.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(position.file_id);\n+\n+    // in `ra_ide_api`, the `on_type` invariant is that\n+    // `text.char_at(position) == typed_char`.\n+    position.offset = position.offset - TextUnit::of_char('.');\n \n     let edit = match params.ch.as_str() {\n         \"=\" => world.analysis().on_eq_typed(position),\n@@ -214,7 +212,7 @@ pub fn handle_document_symbol(\n         }\n     }\n \n-    Ok(Some(req::DocumentSymbolResponse::Nested(res)))\n+    Ok(Some(res.into()))\n }\n \n pub fn handle_workspace_symbol(\n@@ -277,7 +275,7 @@ pub fn handle_goto_definition(\n         .map(|nav| RangeInfo::new(nav_range, nav))\n         .map(|nav| to_location_link(&nav, &world, &line_index))\n         .collect::<Result<Vec<_>>>()?;\n-    Ok(Some(req::GotoDefinitionResponse::Link(res)))\n+    Ok(Some(res.into()))\n }\n \n pub fn handle_goto_implementation(\n@@ -297,7 +295,7 @@ pub fn handle_goto_implementation(\n         .map(|nav| RangeInfo::new(nav_range, nav))\n         .map(|nav| to_location_link(&nav, &world, &line_index))\n         .collect::<Result<Vec<_>>>()?;\n-    Ok(Some(req::GotoDefinitionResponse::Link(res)))\n+    Ok(Some(res.into()))\n }\n \n pub fn handle_goto_type_definition(\n@@ -317,7 +315,7 @@ pub fn handle_goto_type_definition(\n         .map(|nav| RangeInfo::new(nav_range, nav))\n         .map(|nav| to_location_link(&nav, &world, &line_index))\n         .collect::<Result<Vec<_>>>()?;\n-    Ok(Some(req::GotoDefinitionResponse::Link(res)))\n+    Ok(Some(res.into()))\n }\n \n pub fn handle_parent_module(\n@@ -407,12 +405,7 @@ pub fn handle_completion(\n     params: req::CompletionParams,\n ) -> Result<Option<req::CompletionResponse>> {\n     let _p = profile(\"handle_completion\");\n-    let position = {\n-        let file_id = params.text_document.try_conv_with(&world)?;\n-        let line_index = world.analysis().file_line_index(file_id);\n-        let offset = params.position.conv_with(&line_index);\n-        FilePosition { file_id, offset }\n-    };\n+    let position = params.text_document_position.try_conv_with(&world)?;\n     let completion_triggered_after_single_colon = {\n         let mut res = false;\n         if let Some(ctx) = params.context {\n@@ -440,9 +433,10 @@ pub fn handle_completion(\n         Some(items) => items,\n     };\n     let line_index = world.analysis().file_line_index(position.file_id);\n-    let items = items.into_iter().map(|item| item.conv_with(&line_index)).collect();\n+    let items: Vec<CompletionItem> =\n+        items.into_iter().map(|item| item.conv_with(&line_index)).collect();\n \n-    Ok(Some(req::CompletionResponse::Array(items)))\n+    Ok(Some(items.into()))\n }\n \n pub fn handle_folding_range(\n@@ -543,9 +537,7 @@ pub fn handle_prepare_rename(\n }\n \n pub fn handle_rename(world: WorldSnapshot, params: RenameParams) -> Result<Option<WorkspaceEdit>> {\n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n-    let offset = params.position.conv_with(&line_index);\n+    let position = params.text_document_position.try_conv_with(&world)?;\n \n     if params.new_name.is_empty() {\n         return Err(LspError::new(\n@@ -555,8 +547,7 @@ pub fn handle_rename(world: WorldSnapshot, params: RenameParams) -> Result<Optio\n         .into());\n     }\n \n-    let optional_change =\n-        world.analysis().rename(FilePosition { file_id, offset }, &*params.new_name)?;\n+    let optional_change = world.analysis().rename(position, &*params.new_name)?;\n     let change = match optional_change {\n         None => return Ok(None),\n         Some(it) => it,\n@@ -571,11 +562,10 @@ pub fn handle_references(\n     world: WorldSnapshot,\n     params: req::ReferenceParams,\n ) -> Result<Option<Vec<Location>>> {\n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n-    let offset = params.position.conv_with(&line_index);\n+    let position = params.text_document_position.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(position.file_id);\n \n-    let refs = match world.analysis().find_all_refs(FilePosition { file_id, offset })? {\n+    let refs = match world.analysis().find_all_refs(position)? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };"}, {"sha": "451be32a8b31c788223f0952d3e647690cc689f7", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce2b4819ec37faa6b7ac1afe006ae03865ad544/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=5ce2b4819ec37faa6b7ac1afe006ae03865ad544", "patch": "@@ -37,9 +37,11 @@ use std::collections::Spam;\n     eprintln!(\"loading took    {:?}\", project_start.elapsed());\n     let completion_start = Instant::now();\n     let res = server.send_request::<Completion>(CompletionParams {\n-        text_document: server.doc_id(\"src/lib.rs\"),\n+        text_document_position: TextDocumentPositionParams::new(\n+            server.doc_id(\"src/lib.rs\"),\n+            Position::new(0, 23),\n+        ),\n         context: None,\n-        position: Position::new(0, 23),\n     });\n     assert!(format!(\"{}\", res).contains(\"HashMap\"));\n     eprintln!(\"completion took {:?}\", completion_start.elapsed());"}]}