{"sha": "2da7a9c0d943e694eef17c0b47e87cbcde03a957", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYTdhOWMwZDk0M2U2OTRlZWYxN2MwYjQ3ZTg3Y2JjZGUwM2E5NTc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T06:14:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T07:30:40Z"}, "message": "Use `Symbol` for codegen unit names.\n\nThis is a straightforward replacement except for two places where we\nhave to convert to `LocalInternedString` to get a stable sort.", "tree": {"sha": "b20db65e98a0cfa39728030c75030670dbfc24f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20db65e98a0cfa39728030c75030670dbfc24f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2da7a9c0d943e694eef17c0b47e87cbcde03a957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2da7a9c0d943e694eef17c0b47e87cbcde03a957", "html_url": "https://github.com/rust-lang/rust/commit/2da7a9c0d943e694eef17c0b47e87cbcde03a957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2da7a9c0d943e694eef17c0b47e87cbcde03a957/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddacf1eb3efb3c2111b27456be43c21e4497ffd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dddacf1eb3efb3c2111b27456be43c21e4497ffd", "html_url": "https://github.com/rust-lang/rust/commit/dddacf1eb3efb3c2111b27456be43c21e4497ffd"}], "stats": {"total": 97, "additions": 46, "deletions": 51}, "files": [{"sha": "dea8d70aaf4e6a4a0c6ebd855bacf8e5bf294991", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -59,7 +59,7 @@ use crate::ich::{Fingerprint, StableHashingContext};\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use std::fmt;\n use std::hash::Hash;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n use crate::traits;\n use crate::traits::query::{\n     CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n@@ -426,7 +426,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n \n     [anon] TraitSelect,\n \n-    [] CompileCodegenUnit(InternedString),\n+    [] CompileCodegenUnit(Symbol),\n \n     [eval_always] Analysis(CrateNum),\n ]);"}, {"sha": "9be741a1656067e34cc7a287156296feae9c01d9", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -1,6 +1,6 @@\n use crate::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use crate::hir::HirId;\n-use syntax::symbol::{InternedString, Symbol};\n+use syntax::symbol::Symbol;\n use syntax::attr::InlineAttr;\n use syntax::source_map::Span;\n use crate::ty::{Instance, InstanceDef, TyCtxt, SymbolName, subst::InternalSubsts};\n@@ -246,7 +246,7 @@ pub struct CodegenUnit<'tcx> {\n     /// name be unique amongst **all** crates. Therefore, it should\n     /// contain something unique to this crate (e.g., a module path)\n     /// as well as the crate name and disambiguator.\n-    name: InternedString,\n+    name: Symbol,\n     items: FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)>,\n     size_estimate: Option<usize>,\n }\n@@ -294,19 +294,19 @@ impl_stable_hash_for!(enum self::Visibility {\n });\n \n impl<'tcx> CodegenUnit<'tcx> {\n-    pub fn new(name: InternedString) -> CodegenUnit<'tcx> {\n+    pub fn new(name: Symbol) -> CodegenUnit<'tcx> {\n         CodegenUnit {\n             name: name,\n             items: Default::default(),\n             size_estimate: None,\n         }\n     }\n \n-    pub fn name(&self) -> &InternedString {\n-        &self.name\n+    pub fn name(&self) -> Symbol {\n+        self.name\n     }\n \n-    pub fn set_name(&mut self, name: InternedString) {\n+    pub fn set_name(&mut self, name: Symbol) {\n         self.name = name;\n     }\n \n@@ -474,7 +474,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n                                    cnum: CrateNum,\n                                    components: I,\n                                    special_suffix: Option<S>)\n-                                   -> InternedString\n+                                   -> Symbol\n         where I: IntoIterator<Item=C>,\n               C: fmt::Display,\n               S: fmt::Display,\n@@ -487,7 +487,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n             cgu_name\n         } else {\n             let cgu_name = &cgu_name.as_str()[..];\n-            InternedString::intern(&CodegenUnit::mangle_name(cgu_name))\n+            Symbol::intern(&CodegenUnit::mangle_name(cgu_name))\n         }\n     }\n \n@@ -497,7 +497,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n                                              cnum: CrateNum,\n                                              components: I,\n                                              special_suffix: Option<S>)\n-                                             -> InternedString\n+                                             -> Symbol\n         where I: IntoIterator<Item=C>,\n               C: fmt::Display,\n               S: fmt::Display,\n@@ -543,6 +543,6 @@ impl CodegenUnitNameBuilder<'tcx> {\n             write!(cgu_name, \".{}\", special_suffix).unwrap();\n         }\n \n-        InternedString::intern(&cgu_name[..])\n+        Symbol::intern(&cgu_name[..])\n     }\n }"}, {"sha": "fdca6d0e17a1d03a1d49793ce4bd0f3cae1849f9", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -15,7 +15,7 @@ use crate::traits::query::{\n };\n \n use std::borrow::Cow;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n \n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n@@ -924,7 +924,7 @@ rustc_queries! {\n             desc { \"collect_and_partition_mono_items\" }\n         }\n         query is_codegened_item(_: DefId) -> bool {}\n-        query codegen_unit(_: InternedString) -> Arc<CodegenUnit<'tcx>> {\n+        query codegen_unit(_: Symbol) -> Arc<CodegenUnit<'tcx>> {\n             no_force\n             desc { \"codegen_unit\" }\n         }"}, {"sha": "0c48ae9717864305ba6778772150094da5ccbcd4", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -11,7 +11,7 @@ use crate::mir;\n use std::fmt::Debug;\n use std::hash::Hash;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n \n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n@@ -190,7 +190,7 @@ impl<'tcx> Key for traits::Environment<'tcx> {\n     }\n }\n \n-impl Key for InternedString {\n+impl Key for Symbol {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }"}, {"sha": "9b15ad560b5d25f751eea19788be91b410aafbae", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -55,7 +55,6 @@ use std::ops::Deref;\n use std::sync::Arc;\n use std::any::type_name;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax_pos::symbol::InternedString;\n use syntax::attr;\n use syntax::ast;\n use syntax::feature_gate;"}, {"sha": "edd34b52eade7703687020c9a5f97ad7e693dd71", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -36,7 +36,7 @@ use rustc_codegen_ssa::back::write::submit_codegened_module_to_llvm;\n \n use std::ffi::CString;\n use std::time::Instant;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n use rustc::hir::CodegenFnAttrs;\n \n use crate::value::Value;\n@@ -105,7 +105,7 @@ pub fn iter_globals(llmod: &'ll llvm::Module) -> ValueIter<'ll> {\n \n pub fn compile_codegen_unit(\n     tcx: TyCtxt<'tcx>,\n-    cgu_name: InternedString,\n+    cgu_name: Symbol,\n     tx_to_llvm_workers: &std::sync::mpsc::Sender<Box<dyn std::any::Any + Send>>,\n ) {\n     let prof_timer = tcx.prof.generic_activity(\"codegen_module\");\n@@ -131,7 +131,7 @@ pub fn compile_codegen_unit(\n \n     fn module_codegen(\n         tcx: TyCtxt<'_>,\n-        cgu_name: InternedString,\n+        cgu_name: Symbol,\n     ) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);\n         // Instantiate monomorphizations without filling out definitions yet..."}, {"sha": "8c1797cfb7de4630f8be7df428693d2ff84b9fa9", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -50,7 +50,6 @@ use rustc_codegen_ssa::CompiledModule;\n use errors::{FatalError, Handler};\n use rustc::dep_graph::WorkProduct;\n use syntax_expand::allocator::AllocatorKind;\n-use syntax_pos::symbol::InternedString;\n pub use llvm_util::target_features;\n use std::any::Any;\n use std::sync::Arc;\n@@ -123,7 +122,7 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     }\n     fn compile_codegen_unit(\n         &self, tcx: TyCtxt<'_>,\n-        cgu_name: InternedString,\n+        cgu_name: Symbol,\n         tx: &std::sync::mpsc::Sender<Box<dyn Any + Send>>,\n     ) {\n         base::compile_codegen_unit(tcx, cgu_name, tx);"}, {"sha": "516fd5049f2607d0c29e5e270a507b86ed9cfd3f", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -515,7 +515,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // unnecessarily.\n     if tcx.dep_graph.is_fully_enabled() {\n         for cgu in &codegen_units {\n-            tcx.codegen_unit(cgu.name().clone());\n+            tcx.codegen_unit(cgu.name());\n         }\n     }\n \n@@ -603,7 +603,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         match cgu_reuse {\n             CguReuse::No => {\n                 let start_time = Instant::now();\n-                backend.compile_codegen_unit(tcx, *cgu.name(), &ongoing_codegen.coordinator_send);\n+                backend.compile_codegen_unit(tcx, cgu.name(), &ongoing_codegen.coordinator_send);\n                 total_codegen_time += start_time.elapsed();\n                 false\n             }"}, {"sha": "1fff740d7403fee1bf7e026cbb683b87dd0ad0e8", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -10,7 +10,7 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use std::sync::Arc;\n use std::sync::mpsc;\n use syntax_expand::allocator::AllocatorKind;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n \n pub trait BackendTypes {\n     type Value: CodegenObject;\n@@ -50,7 +50,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n     fn compile_codegen_unit(\n         &self,\n         tcx: TyCtxt<'_>,\n-        cgu_name: InternedString,\n+        cgu_name: Symbol,\n         tx_to_llvm_workers: &mpsc::Sender<Box<dyn std::any::Any + Send>>,\n     );\n     // If find_features is true this won't access `sess.crate_types` by assuming"}, {"sha": "ca035d0cdcb19d434700732e3b428b4d4a5e7d5f", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -27,7 +27,7 @@ use rustc::mir::mono::CodegenUnitNameBuilder;\n use rustc::ty::TyCtxt;\n use std::collections::BTreeSet;\n use syntax::ast;\n-use syntax::symbol::{InternedString, Symbol, sym};\n+use syntax::symbol::{Symbol, sym};\n use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_CODEGENED,\n                  ATTR_EXPECTED_CGU_REUSE};\n \n@@ -45,8 +45,8 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n             .collect_and_partition_mono_items(LOCAL_CRATE)\n             .1\n             .iter()\n-            .map(|cgu| *cgu.name())\n-            .collect::<BTreeSet<InternedString>>();\n+            .map(|cgu| cgu.name())\n+            .collect::<BTreeSet<Symbol>>();\n \n         let ams = AssertModuleSource {\n             tcx,\n@@ -61,7 +61,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n struct AssertModuleSource<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    available_cgus: BTreeSet<InternedString>,\n+    available_cgus: BTreeSet<Symbol>,\n }\n \n impl AssertModuleSource<'tcx> {"}, {"sha": "42f08771f866d57b32b1f4242ec8b3ddc05017f1", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2da7a9c0d943e694eef17c0b47e87cbcde03a957/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=2da7a9c0d943e694eef17c0b47e87cbcde03a957", "patch": "@@ -96,7 +96,7 @@ use std::collections::hash_map::Entry;\n use std::cmp;\n use std::sync::Arc;\n \n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n@@ -121,7 +121,7 @@ pub enum PartitioningStrategy {\n }\n \n // Anything we can't find a proper codegen unit for goes into this.\n-fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_>) -> InternedString {\n+fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_>) -> Symbol {\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n }\n \n@@ -185,9 +185,7 @@ where\n         internalization_candidates: _,\n     } = post_inlining;\n \n-    result.sort_by(|cgu1, cgu2| {\n-        cgu1.name().cmp(cgu2.name())\n-    });\n+    result.sort_by_cached_key(|cgu| cgu.name().as_str());\n \n     result\n }\n@@ -203,7 +201,7 @@ struct PreInliningPartitioning<'tcx> {\n /// to keep track of that.\n #[derive(Clone, PartialEq, Eq, Debug)]\n enum MonoItemPlacement {\n-    SingleCgu { cgu_name: InternedString },\n+    SingleCgu { cgu_name: Symbol },\n     MultipleCgus,\n }\n \n@@ -251,8 +249,8 @@ where\n             None => fallback_cgu_name(cgu_name_builder),\n         };\n \n-        let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n-            .or_insert_with(|| CodegenUnit::new(codegen_unit_name.clone()));\n+        let codegen_unit = codegen_units.entry(codegen_unit_name)\n+            .or_insert_with(|| CodegenUnit::new(codegen_unit_name));\n \n         let mut can_be_internalized = true;\n         let (linkage, visibility) = mono_item_linkage_and_visibility(\n@@ -273,8 +271,7 @@ where\n     // crate with just types (for example), we could wind up with no CGU.\n     if codegen_units.is_empty() {\n         let codegen_unit_name = fallback_cgu_name(cgu_name_builder);\n-        codegen_units.insert(codegen_unit_name.clone(),\n-                             CodegenUnit::new(codegen_unit_name.clone()));\n+        codegen_units.insert(codegen_unit_name, CodegenUnit::new(codegen_unit_name));\n     }\n \n     PreInliningPartitioning {\n@@ -492,7 +489,7 @@ fn merge_codegen_units<'tcx>(\n     // smallest into each other) we're sure to start off with a deterministic\n     // order (sorted by name). This'll mean that if two cgus have the same size\n     // the stable sort below will keep everything nice and deterministic.\n-    codegen_units.sort_by_key(|cgu| *cgu.name());\n+    codegen_units.sort_by_cached_key(|cgu| cgu.name().as_str());\n \n     // Merge the two smallest codegen units until the target size is reached.\n     while codegen_units.len() > target_cgu_count {\n@@ -537,7 +534,7 @@ fn place_inlined_mono_items<'tcx>(initial_partitioning: PreInliningPartitioning<\n             follow_inlining(*root, inlining_map, &mut reachable);\n         }\n \n-        let mut new_codegen_unit = CodegenUnit::new(old_codegen_unit.name().clone());\n+        let mut new_codegen_unit = CodegenUnit::new(old_codegen_unit.name());\n \n         // Add all monomorphizations that are not already there.\n         for mono_item in reachable {\n@@ -564,16 +561,16 @@ fn place_inlined_mono_items<'tcx>(initial_partitioning: PreInliningPartitioning<\n                     Entry::Occupied(e) => {\n                         let placement = e.into_mut();\n                         debug_assert!(match *placement {\n-                            MonoItemPlacement::SingleCgu { ref cgu_name } => {\n-                                *cgu_name != *new_codegen_unit.name()\n+                            MonoItemPlacement::SingleCgu { cgu_name } => {\n+                                cgu_name != new_codegen_unit.name()\n                             }\n                             MonoItemPlacement::MultipleCgus => true,\n                         });\n                         *placement = MonoItemPlacement::MultipleCgus;\n                     }\n                     Entry::Vacant(e) => {\n                         e.insert(MonoItemPlacement::SingleCgu {\n-                            cgu_name: new_codegen_unit.name().clone()\n+                            cgu_name: new_codegen_unit.name()\n                         });\n                     }\n                 }\n@@ -638,7 +635,7 @@ fn internalize_symbols<'tcx>(\n     // accessed from outside its defining codegen unit.\n     for cgu in &mut partitioning.codegen_units {\n         let home_cgu = MonoItemPlacement::SingleCgu {\n-            cgu_name: cgu.name().clone()\n+            cgu_name: cgu.name()\n         };\n \n         for (accessee, linkage_and_visibility) in cgu.items_mut() {\n@@ -717,15 +714,15 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n     }\n }\n \n-type CguNameCache = FxHashMap<(DefId, bool), InternedString>;\n+type CguNameCache = FxHashMap<(DefId, bool), Symbol>;\n \n fn compute_codegen_unit_name(\n     tcx: TyCtxt<'_>,\n     name_builder: &mut CodegenUnitNameBuilder<'_>,\n     def_id: DefId,\n     volatile: bool,\n     cache: &mut CguNameCache,\n-) -> InternedString {\n+) -> Symbol {\n     // Find the innermost module that is not nested within a function.\n     let mut current_def_id = def_id;\n     let mut cgu_def_id = None;\n@@ -777,7 +774,7 @@ fn compute_codegen_unit_name(\n fn numbered_codegen_unit_name(\n     name_builder: &mut CodegenUnitNameBuilder<'_>,\n     index: usize,\n-) -> InternedString {\n+) -> Symbol {\n     name_builder.build_cgu_name_no_mangle(LOCAL_CRATE, &[\"cgu\"], Some(index))\n }\n \n@@ -929,7 +926,7 @@ fn collect_and_partition_mono_items(\n             for (&mono_item, &linkage) in cgu.items() {\n                 item_to_cgus.entry(mono_item)\n                             .or_default()\n-                            .push((cgu.name().clone(), linkage));\n+                            .push((cgu.name(), linkage));\n             }\n         }\n \n@@ -991,7 +988,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.codegen_unit = |tcx, name| {\n         let (_, all) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n         all.iter()\n-            .find(|cgu| *cgu.name() == name)\n+            .find(|cgu| cgu.name() == name)\n             .cloned()\n             .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))\n     };"}]}