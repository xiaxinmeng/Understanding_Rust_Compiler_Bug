{"sha": "b8d269990c57634e77f4702afc91041bacb4816a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZDI2OTk5MGM1NzYzNGU3N2Y0NzAyYWZjOTEwNDFiYWNiNDgxNmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-31T12:34:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-31T12:34:01Z"}, "message": "Merge #9060\n\n9060: feat: Diagnose unimplemented built-in macros r=matklad a=jonas-schievink\n\nA number of built-in attribute macros are unsupported, I thought it might be useful to put a diagnostic on their definition in libcore. Not sure.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "f1d707daa5f4d20abec75299234552b320fa1a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1d707daa5f4d20abec75299234552b320fa1a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d269990c57634e77f4702afc91041bacb4816a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgtNe5CRBK7hj4Ov3rIwAA/fQIAEcAYoabKwj62cOolRgBArWM\nnKc36CW51vJ1nOv3NA0qKpfu54CTigPBTs8WpuYPxqzEL8IB2JCbt9fn82qHcI9B\n9o+pb/0mnwPu6W2oPJFbb82UsC8Lrbh5Y/uX2K2Bmirnh4frxfZtbJfPdPwdkMN4\nmwxGKz5WcpF4V7TQlspl5pv8DKXIR0+cqqMQkNJ80O7YxXjamH7rP5cRbw7IEtyy\n6CLWodSFSbu4pRsfErKvyTtWv7PrGRxWhLkfCT/Jqqq+wacsey8ObqHeFTjjZ2m5\nemELbtctbC4WkdqMEo4CqDnl2M+u6NlS6kUO4JotQKMYTRlz+4N01uc55u8ZO3Q=\n=2MQ7\n-----END PGP SIGNATURE-----\n", "payload": "tree f1d707daa5f4d20abec75299234552b320fa1a42\nparent d7cbb49057c4495307d91f5db32465c29c175124\nparent cb5454db86bae1e97d86b05607b5c36a89fb749b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622464441 +0000\ncommitter GitHub <noreply@github.com> 1622464441 +0000\n\nMerge #9060\n\n9060: feat: Diagnose unimplemented built-in macros r=matklad a=jonas-schievink\n\nA number of built-in attribute macros are unsupported, I thought it might be useful to put a diagnostic on their definition in libcore. Not sure.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d269990c57634e77f4702afc91041bacb4816a", "html_url": "https://github.com/rust-lang/rust/commit/b8d269990c57634e77f4702afc91041bacb4816a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d269990c57634e77f4702afc91041bacb4816a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7cbb49057c4495307d91f5db32465c29c175124", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7cbb49057c4495307d91f5db32465c29c175124", "html_url": "https://github.com/rust-lang/rust/commit/d7cbb49057c4495307d91f5db32465c29c175124"}, {"sha": "cb5454db86bae1e97d86b05607b5c36a89fb749b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5454db86bae1e97d86b05607b5c36a89fb749b", "html_url": "https://github.com/rust-lang/rust/commit/cb5454db86bae1e97d86b05607b5c36a89fb749b"}], "stats": {"total": 105, "additions": 87, "deletions": 18}, "files": [{"sha": "2cdbd172a5ec46ec37d179988f44acdd9c2a8bb9", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=b8d269990c57634e77f4702afc91041bacb4816a", "patch": "@@ -227,3 +227,27 @@ impl Diagnostic for MacroError {\n         true\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct UnimplementedBuiltinMacro {\n+    pub file: HirFileId,\n+    pub node: SyntaxNodePtr,\n+}\n+\n+impl Diagnostic for UnimplementedBuiltinMacro {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"unimplemented-builtin-macro\")\n+    }\n+\n+    fn message(&self) -> String {\n+        \"unimplemented built-in macro\".to_string()\n+    }\n+\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile::new(self.file, self.node.clone())\n+    }\n+\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}"}, {"sha": "d3ef29db4ec23fc5d7258ef19463cec944eec3ca", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b8d269990c57634e77f4702afc91041bacb4816a", "patch": "@@ -36,8 +36,8 @@ use std::{iter, sync::Arc};\n use arrayvec::ArrayVec;\n use base_db::{CrateDisplayName, CrateId, Edition, FileId};\n use diagnostics::{\n-    InactiveCode, MacroError, UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall,\n-    UnresolvedModule, UnresolvedProcMacro,\n+    InactiveCode, MacroError, UnimplementedBuiltinMacro, UnresolvedExternCrate, UnresolvedImport,\n+    UnresolvedMacroCall, UnresolvedModule, UnresolvedProcMacro,\n };\n use either::Either;\n use hir_def::{\n@@ -565,6 +565,14 @@ impl Module {\n                     };\n                     sink.push(MacroError { file, node: ast, message: message.clone() });\n                 }\n+\n+                DefDiagnosticKind::UnimplementedBuiltinMacro { ast } => {\n+                    let node = ast.to_node(db.upcast());\n+                    // Must have a name, otherwise we wouldn't emit it.\n+                    let name = node.name().expect(\"unimplemented builtin macro with no name\");\n+                    let ptr = SyntaxNodePtr::from(AstPtr::new(&name));\n+                    sink.push(UnimplementedBuiltinMacro { file: ast.file_id, node: ptr });\n+                }\n             }\n         }\n         for decl in self.declarations(db) {"}, {"sha": "50b2b0af4ee8895362c29088eb03191134f80221", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b8d269990c57634e77f4702afc91041bacb4816a", "patch": "@@ -1679,14 +1679,22 @@ impl ModCollector<'_, '_> {\n                 None => &mac.name,\n             };\n             let krate = self.def_collector.def_map.krate;\n-            if let Some(macro_id) = find_builtin_macro(name, krate, ast_id) {\n-                self.def_collector.define_macro_rules(\n-                    self.module_id,\n-                    mac.name.clone(),\n-                    macro_id,\n-                    is_export,\n-                );\n-                return;\n+            match find_builtin_macro(name, krate, ast_id) {\n+                Some(macro_id) => {\n+                    self.def_collector.define_macro_rules(\n+                        self.module_id,\n+                        mac.name.clone(),\n+                        macro_id,\n+                        is_export,\n+                    );\n+                    return;\n+                }\n+                None => {\n+                    self.def_collector\n+                        .def_map\n+                        .diagnostics\n+                        .push(DefDiagnostic::unimplemented_builtin_macro(self.module_id, ast_id));\n+                }\n             }\n         }\n \n@@ -1715,15 +1723,23 @@ impl ModCollector<'_, '_> {\n             let macro_id = find_builtin_macro(&mac.name, krate, ast_id)\n                 .or_else(|| find_builtin_derive(&mac.name, krate, ast_id));\n \n-            if let Some(macro_id) = macro_id {\n-                self.def_collector.define_macro_def(\n-                    self.module_id,\n-                    mac.name.clone(),\n-                    macro_id,\n-                    &self.item_tree[mac.visibility],\n-                );\n+            match macro_id {\n+                Some(macro_id) => {\n+                    self.def_collector.define_macro_def(\n+                        self.module_id,\n+                        mac.name.clone(),\n+                        macro_id,\n+                        &self.item_tree[mac.visibility],\n+                    );\n+                    return;\n+                }\n+                None => {\n+                    self.def_collector\n+                        .def_map\n+                        .diagnostics\n+                        .push(DefDiagnostic::unimplemented_builtin_macro(self.module_id, ast_id));\n+                }\n             }\n-            return;\n         }\n \n         // Case 2: normal `macro`"}, {"sha": "95061f60154e9c7525b7ced29e75f4b8d5b88189", "filename": "crates/hir_def/src/nameres/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=b8d269990c57634e77f4702afc91041bacb4816a", "patch": "@@ -27,6 +27,8 @@ pub enum DefDiagnosticKind {\n     UnresolvedMacroCall { ast: AstId<ast::MacroCall>, path: ModPath },\n \n     MacroError { ast: MacroCallKind, message: String },\n+\n+    UnimplementedBuiltinMacro { ast: AstId<ast::Macro> },\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -93,4 +95,11 @@ impl DefDiagnostic {\n     ) -> Self {\n         Self { in_module: container, kind: DefDiagnosticKind::UnresolvedMacroCall { ast, path } }\n     }\n+\n+    pub(super) fn unimplemented_builtin_macro(\n+        container: LocalModuleId,\n+        ast: AstId<ast::Macro>,\n+    ) -> Self {\n+        Self { in_module: container, kind: DefDiagnosticKind::UnimplementedBuiltinMacro { ast } }\n+    }\n }"}, {"sha": "e840fe5e808a6422eb3d02b1a61fef7b613ccd5d", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=b8d269990c57634e77f4702afc91041bacb4816a", "patch": "@@ -298,6 +298,13 @@ impl TestDB {\n                     DefDiagnosticKind::MacroError { ast, message } => {\n                         (ast.to_node(self.upcast()), message.as_str())\n                     }\n+                    DefDiagnosticKind::UnimplementedBuiltinMacro { ast } => {\n+                        let node = ast.to_node(self.upcast());\n+                        (\n+                            InFile::new(ast.file_id, node.syntax().clone()),\n+                            \"UnimplementedBuiltinMacro\",\n+                        )\n+                    }\n                 };\n \n                 let frange = node.as_ref().original_file_range(self);"}, {"sha": "d5c954b8bb0ac1b0f87abc4125fa8d067d54bfa4", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d269990c57634e77f4702afc91041bacb4816a/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b8d269990c57634e77f4702afc91041bacb4816a", "patch": "@@ -182,6 +182,11 @@ pub(crate) fn diagnostics(\n             res.borrow_mut()\n                 .push(Diagnostic::error(display_range, d.message()).with_code(Some(d.code())));\n         })\n+        .on::<hir::diagnostics::UnimplementedBuiltinMacro, _>(|d| {\n+            let display_range = sema.diagnostics_display_range(d.display_source()).range;\n+            res.borrow_mut()\n+                .push(Diagnostic::hint(display_range, d.message()).with_code(Some(d.code())));\n+        })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !(diag.is_experimental() && config.disable_experimental))\n         .filter(|diag| !config.disabled.contains(diag.code().as_str()));"}]}