{"sha": "f327a352b89a571dde76e176471d12fbd8fce0dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMjdhMzUyYjg5YTU3MWRkZTc2ZTE3NjQ3MWQxMmZiZDhmY2UwZGQ=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-11-18T17:19:38Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-12-24T15:48:27Z"}, "message": "BTreeMap: test full nodes a little more", "tree": {"sha": "69a61122821ae987a1be5c7d9ca1bf89a38042b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69a61122821ae987a1be5c7d9ca1bf89a38042b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f327a352b89a571dde76e176471d12fbd8fce0dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f327a352b89a571dde76e176471d12fbd8fce0dd", "html_url": "https://github.com/rust-lang/rust/commit/f327a352b89a571dde76e176471d12fbd8fce0dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f327a352b89a571dde76e176471d12fbd8fce0dd/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34c015fe2710caf53ba7ae9d1644f9ba65a6f74", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34c015fe2710caf53ba7ae9d1644f9ba65a6f74", "html_url": "https://github.com/rust-lang/rust/commit/c34c015fe2710caf53ba7ae9d1644f9ba65a6f74"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "9c53c84f5b2fb5ad7c601eba1480e6815be1ca6d", "filename": "library/alloc/src/collections/btree/append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f327a352b89a571dde76e176471d12fbd8fce0dd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f327a352b89a571dde76e176471d12fbd8fce0dd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fappend.rs?ref=f327a352b89a571dde76e176471d12fbd8fce0dd", "patch": "@@ -30,7 +30,7 @@ impl<K, V> Root<K, V> {\n     /// Pushes all key-value pairs to the end of the tree, incrementing a\n     /// `length` variable along the way. The latter makes it easier for the\n     /// caller to avoid a leak when the iterator panicks.\n-    fn bulk_push<I>(&mut self, iter: I, length: &mut usize)\n+    pub fn bulk_push<I>(&mut self, iter: I, length: &mut usize)\n     where\n         I: Iterator<Item = (K, V)>,\n     {"}, {"sha": "565dc175393a2fb76da467fc55f79edfa0f93dd1", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f327a352b89a571dde76e176471d12fbd8fce0dd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f327a352b89a571dde76e176471d12fbd8fce0dd/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=f327a352b89a571dde76e176471d12fbd8fce0dd", "patch": "@@ -111,6 +111,18 @@ impl<K, V> BTreeMap<K, V> {\n             }\n         }\n     }\n+\n+    // Transform the tree to minimize wasted space, obtaining fewer nodes that\n+    // are mostly filled up to their capacity. The same compact tree could have\n+    // been obtained by inserting keys in a shrewd order.\n+    fn compact(&mut self)\n+    where\n+        K: Ord,\n+    {\n+        let iter = mem::take(self).into_iter();\n+        let root = BTreeMap::ensure_is_owned(&mut self.root);\n+        root.bulk_push(iter, &mut self.length);\n+    }\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n@@ -1679,17 +1691,29 @@ fn test_first_last_entry() {\n }\n \n #[test]\n-fn test_insert_into_full_left() {\n-    let mut map: BTreeMap<_, _> = (0..NODE_CAPACITY).map(|i| (i * 2, ())).collect();\n-    assert!(map.insert(NODE_CAPACITY, ()).is_none());\n-    map.check();\n+fn test_insert_into_full_height_0() {\n+    let size = NODE_CAPACITY;\n+    for pos in 0..=size {\n+        let mut map: BTreeMap<_, _> = (0..size).map(|i| (i * 2 + 1, ())).collect();\n+        assert!(map.insert(pos * 2, ()).is_none());\n+        map.check();\n+    }\n }\n \n #[test]\n-fn test_insert_into_full_right() {\n-    let mut map: BTreeMap<_, _> = (0..NODE_CAPACITY).map(|i| (i * 2, ())).collect();\n-    assert!(map.insert(NODE_CAPACITY + 2, ()).is_none());\n-    map.check();\n+fn test_insert_into_full_height_1() {\n+    let size = NODE_CAPACITY + 1 + NODE_CAPACITY;\n+    for pos in 0..=size {\n+        let mut map: BTreeMap<_, _> = (0..size).map(|i| (i * 2 + 1, ())).collect();\n+        map.compact();\n+        let root_node = map.root.as_ref().unwrap().reborrow();\n+        assert_eq!(root_node.len(), 1);\n+        assert_eq!(root_node.first_leaf_edge().into_node().len(), NODE_CAPACITY);\n+        assert_eq!(root_node.last_leaf_edge().into_node().len(), NODE_CAPACITY);\n+\n+        assert!(map.insert(pos * 2, ()).is_none());\n+        map.check();\n+    }\n }\n \n macro_rules! create_append_test {"}]}