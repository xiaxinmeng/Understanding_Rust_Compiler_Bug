{"sha": "5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "node_id": "C_kwDOAAsO6NoAKDVhMDdlMzNkMmNjNTdkOTI5YmJkNTBhMjJjYWQ3MDNkNGM2NjZmYzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-01T21:50:45Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-01T21:50:45Z"}, "message": "use and_then/flat_map for map().flatten()", "tree": {"sha": "2b0fa4ab1d9210a2a45d57b8e47aea8ededce0b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0fa4ab1d9210a2a45d57b8e47aea8ededce0b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "html_url": "https://github.com/rust-lang/rust/commit/5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac229c281981129003cfcf6ef894bb7655b0d466", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac229c281981129003cfcf6ef894bb7655b0d466", "html_url": "https://github.com/rust-lang/rust/commit/ac229c281981129003cfcf6ef894bb7655b0d466"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "4f8b5abd9010c424077d3d73077128afb5a984b3", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "patch": "@@ -378,8 +378,7 @@ pub(crate) fn get_dllimport<'tcx>(\n     name: &str,\n ) -> Option<&'tcx DllImport> {\n     tcx.native_library(id)\n-        .map(|lib| lib.dll_imports.iter().find(|di| di.name.as_str() == name))\n-        .flatten()\n+        .and_then(|lib| lib.dll_imports.iter().find(|di| di.name.as_str() == name))\n }\n \n pub(crate) fn is_mingw_gnu_toolchain(target: &Target) -> bool {"}, {"sha": "8b96864ddd7c93b87007613a9b551f2f6e6e5445", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> ValTree<'tcx> {\n     }\n \n     pub fn try_to_target_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        self.try_to_scalar_int().map(|s| s.try_to_target_usize(tcx).ok()).flatten()\n+        self.try_to_scalar_int().and_then(|s| s.try_to_target_usize(tcx).ok())\n     }\n \n     /// Get the values inside the ValTree as a slice of bytes. This only works for"}, {"sha": "99291740ac82f39b6129320a08684bf759cbb64a", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "patch": "@@ -62,21 +62,21 @@ pub fn as_constant_inner<'tcx>(\n             Constant { span, user_ty: None, literal }\n         }\n         ExprKind::NonHirLiteral { lit, ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let literal = ConstantKind::Val(ConstValue::Scalar(Scalar::Int(lit)), ty);\n \n             Constant { span, user_ty, literal }\n         }\n         ExprKind::ZstLiteral { ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let literal = ConstantKind::Val(ConstValue::ZeroSized, ty);\n \n             Constant { span, user_ty, literal }\n         }\n         ExprKind::NamedConst { def_id, substs, ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let uneval = mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n             let literal = ConstantKind::Unevaluated(uneval, ty);"}, {"sha": "be5d4fca7a0093b53345b301b4357a205db28a31", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "patch": "@@ -911,7 +911,7 @@ mod parse {\n         let mut seen_instruction_threshold = false;\n         let mut seen_skip_entry = false;\n         let mut seen_skip_exit = false;\n-        for option in v.into_iter().map(|v| v.split(',')).flatten() {\n+        for option in v.into_iter().flat_map(|v| v.split(',')) {\n             match option {\n                 \"always\" if !seen_always && !seen_never => {\n                     options.always = true;"}, {"sha": "cff3d277a78fb83ae69360f00dc0ce6f2267a7a7", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a07e33d2cc57d929bbd50a22cad703d4c666fc2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=5a07e33d2cc57d929bbd50a22cad703d4c666fc2", "patch": "@@ -110,8 +110,6 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n         body_id: LocalDefId,\n         tys: FxIndexSet<Ty<'tcx>>,\n     ) -> Bounds<'a, 'tcx> {\n-        tys.into_iter()\n-            .map(move |ty| self.implied_outlives_bounds(param_env, body_id, ty))\n-            .flatten()\n+        tys.into_iter().flat_map(move |ty| self.implied_outlives_bounds(param_env, body_id, ty))\n     }\n }"}]}