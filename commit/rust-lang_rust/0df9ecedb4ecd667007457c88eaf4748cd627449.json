{"sha": "0df9ecedb4ecd667007457c88eaf4748cd627449", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZjllY2VkYjRlY2Q2NjcwMDc0NTdjODhlYWY0NzQ4Y2Q2Mjc0NDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-18T14:51:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T14:51:10Z"}, "message": "Merge #5798\n\n5798: Introduce Label\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "55b43c677a213af8184483a857ea2e4631270547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55b43c677a213af8184483a857ea2e4631270547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df9ecedb4ecd667007457c88eaf4748cd627449", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfO+reCRBK7hj4Ov3rIwAAdHIIAEcTjBlXLsW1ZrcSLtYq0iLp\nfLk1Aox9qIqhLhefTXeIfV6tcHj8YJ2wIowLhLgEDcJ5K1TLGeOuuMZ2tWhUPkaY\nUAwgHp4RO5LVXXfMPx+05r9VT/iEkAWugvEOH3uxCxFa6xeFsG3qZPnahao4afOb\ncoh3EhvRS3B/f50oOM25RMDk2Yfi23M6ypihSbYme6/yjdkSEB11uXq00424PFpH\ntvg8I/EI40VZOJS/H+SIqK7Az3OfLFwtV6YddnN0buZLSOE5I0ZDZqZxPzC3VU2M\nNj++8tF05VsS9TZooftn1LjIEkoBp6DvWeFH40XQeE2GbeBtpNsvZkR51q/ozb4=\n=SOzf\n-----END PGP SIGNATURE-----\n", "payload": "tree 55b43c677a213af8184483a857ea2e4631270547\nparent e81c310b6224946318b8e6af56a55021716ea9b5\nparent aa1a7a5414e59c7f1c6e74002df1b6a04937459e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597762270 +0000\ncommitter GitHub <noreply@github.com> 1597762270 +0000\n\nMerge #5798\n\n5798: Introduce Label\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df9ecedb4ecd667007457c88eaf4748cd627449", "html_url": "https://github.com/rust-lang/rust/commit/0df9ecedb4ecd667007457c88eaf4748cd627449", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df9ecedb4ecd667007457c88eaf4748cd627449/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81c310b6224946318b8e6af56a55021716ea9b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81c310b6224946318b8e6af56a55021716ea9b5", "html_url": "https://github.com/rust-lang/rust/commit/e81c310b6224946318b8e6af56a55021716ea9b5"}, {"sha": "aa1a7a5414e59c7f1c6e74002df1b6a04937459e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1a7a5414e59c7f1c6e74002df1b6a04937459e", "html_url": "https://github.com/rust-lang/rust/commit/aa1a7a5414e59c7f1c6e74002df1b6a04937459e"}], "stats": {"total": 98, "additions": 68, "deletions": 30}, "files": [{"sha": "11c171fc2d6f5b3bcafd6aaa814517c411fe6d0d", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=0df9ecedb4ecd667007457c88eaf4748cd627449", "patch": "@@ -6,6 +6,7 @@ use algo::find_covering_element;\n use base_db::{FileId, FileRange};\n use hir::Semantics;\n use ide_db::{\n+    label::Label,\n     source_change::{SourceChange, SourceFileEdit},\n     RootDatabase,\n };\n@@ -157,8 +158,9 @@ impl Assists {\n         if !self.is_allowed(&id) {\n             return None;\n         }\n-        let label = Assist::new(id, label.into(), None, target);\n-        self.add_impl(label, f)\n+        let label = Label::new(label.into());\n+        let assist = Assist { id, label, group: None, target };\n+        self.add_impl(assist, f)\n     }\n \n     pub(crate) fn add_group(\n@@ -172,12 +174,12 @@ impl Assists {\n         if !self.is_allowed(&id) {\n             return None;\n         }\n-\n-        let label = Assist::new(id, label.into(), Some(group.clone()), target);\n-        self.add_impl(label, f)\n+        let label = Label::new(label.into());\n+        let assist = Assist { id, label, group: Some(group.clone()), target };\n+        self.add_impl(assist, f)\n     }\n \n-    fn add_impl(&mut self, label: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n+    fn add_impl(&mut self, assist: Assist, f: impl FnOnce(&mut AssistBuilder)) -> Option<()> {\n         let source_change = if self.resolve {\n             let mut builder = AssistBuilder::new(self.file);\n             f(&mut builder);\n@@ -186,7 +188,7 @@ impl Assists {\n             None\n         };\n \n-        self.buf.push((label, source_change));\n+        self.buf.push((assist, source_change));\n         Some(())\n     }\n "}, {"sha": "14834480ac39b3f77c52a5390befeee57ed86a61", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=0df9ecedb4ecd667007457c88eaf4748cd627449", "patch": "@@ -19,7 +19,7 @@ pub mod ast_transform;\n \n use base_db::FileRange;\n use hir::Semantics;\n-use ide_db::{source_change::SourceChange, RootDatabase};\n+use ide_db::{label::Label, source_change::SourceChange, RootDatabase};\n use syntax::TextRange;\n \n pub(crate) use crate::assist_context::{AssistContext, Assists};\n@@ -68,7 +68,7 @@ pub struct GroupLabel(pub String);\n pub struct Assist {\n     pub id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n-    label: String,\n+    pub label: Label,\n     pub group: Option<GroupLabel>,\n     /// Target ranges are used to sort assists: the smaller the target range,\n     /// the more specific assist is, and so it should be sorted first.\n@@ -82,11 +82,6 @@ pub struct ResolvedAssist {\n }\n \n impl Assist {\n-    fn new(id: AssistId, label: String, group: Option<GroupLabel>, target: TextRange) -> Assist {\n-        assert!(label.starts_with(char::is_uppercase));\n-        Assist { id, label, group, target }\n-    }\n-\n     /// Return all the assists applicable at the given position.\n     ///\n     /// Assists are returned in the \"unresolved\" state, that is only labels are\n@@ -118,10 +113,6 @@ impl Assist {\n         });\n         acc.finish_resolved()\n     }\n-\n-    pub fn label(&self) -> &str {\n-        self.label.as_str()\n-    }\n }\n \n mod handlers {"}, {"sha": "3c36c0e15dca7b2581b440169ce116c1316fcf60", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=0df9ecedb4ecd667007457c88eaf4748cd627449", "patch": "@@ -19,7 +19,7 @@ use syntax::{\n };\n use text_edit::TextEdit;\n \n-use crate::{FileId, SourceChange, SourceFileEdit};\n+use crate::{FileId, Label, SourceChange, SourceFileEdit};\n \n use self::fixes::DiagnosticWithFix;\n \n@@ -34,20 +34,15 @@ pub struct Diagnostic {\n \n #[derive(Debug)]\n pub struct Fix {\n-    pub label: String,\n+    pub label: Label,\n     pub source_change: SourceChange,\n     /// Allows to trigger the fix only when the caret is in the range given\n     pub fix_trigger_range: TextRange,\n }\n \n impl Fix {\n-    fn new(\n-        label: impl Into<String>,\n-        source_change: SourceChange,\n-        fix_trigger_range: TextRange,\n-    ) -> Self {\n-        let label = label.into();\n-        assert!(label.starts_with(char::is_uppercase) && !label.ends_with('.'));\n+    fn new(label: &str, source_change: SourceChange, fix_trigger_range: TextRange) -> Self {\n+        let label = Label::new(label);\n         Self { label, source_change, fix_trigger_range }\n     }\n }"}, {"sha": "e3af6d5bc945aa9525e8e8a64498226084675213", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=0df9ecedb4ecd667007457c88eaf4748cd627449", "patch": "@@ -88,6 +88,7 @@ pub use base_db::{\n pub use hir::{Documentation, Semantics};\n pub use ide_db::{\n     change::AnalysisChange,\n+    label::Label,\n     line_index::{LineCol, LineIndex},\n     search::SearchScope,\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},"}, {"sha": "c0e89e72f5827c07e8d22e0112780b7e01296288", "filename": "crates/ide_db/src/label.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fide_db%2Fsrc%2Flabel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fide_db%2Fsrc%2Flabel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flabel.rs?ref=0df9ecedb4ecd667007457c88eaf4748cd627449", "patch": "@@ -0,0 +1,49 @@\n+//! See `Label`\n+use std::fmt;\n+\n+/// A type to specify UI label, like an entry in the list of assists. Enforces\n+/// proper casing:\n+///\n+///    Frobnicate bar\n+///\n+/// Note the upper-case first letter and the absence of `.` at the end.\n+#[derive(Clone)]\n+pub struct Label(String);\n+\n+impl PartialEq<str> for Label {\n+    fn eq(&self, other: &str) -> bool {\n+        self.0 == other\n+    }\n+}\n+\n+impl PartialEq<&'_ str> for Label {\n+    fn eq(&self, other: &&str) -> bool {\n+        self == *other\n+    }\n+}\n+\n+impl From<Label> for String {\n+    fn from(label: Label) -> String {\n+        label.0\n+    }\n+}\n+\n+impl Label {\n+    pub fn new(label: impl Into<String>) -> Label {\n+        let label = label.into();\n+        assert!(label.starts_with(char::is_uppercase) && !label.ends_with('.'));\n+        Label(label)\n+    }\n+}\n+\n+impl fmt::Display for Label {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.0, f)\n+    }\n+}\n+\n+impl fmt::Debug for Label {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Debug::fmt(&self.0, f)\n+    }\n+}"}, {"sha": "70ada02f3121ef0b03cf489ea2c35e7eaf659320", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=0df9ecedb4ecd667007457c88eaf4748cd627449", "patch": "@@ -2,6 +2,7 @@\n //!\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n+pub mod label;\n pub mod line_index;\n pub mod symbol_index;\n pub mod change;"}, {"sha": "33e60b500a162ed068897152d4488bf39e2a5640", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=0df9ecedb4ecd667007457c88eaf4748cd627449", "patch": "@@ -782,10 +782,9 @@ fn handle_fixes(\n         .filter_map(|d| d.fix)\n         .filter(|fix| fix.fix_trigger_range.intersect(range).is_some())\n     {\n-        let title = fix.label;\n         let edit = to_proto::snippet_workspace_edit(&snap, fix.source_change)?;\n         let action = lsp_ext::CodeAction {\n-            title,\n+            title: fix.label.to_string(),\n             id: None,\n             group: None,\n             kind: Some(CodeActionKind::QUICKFIX),"}, {"sha": "643dcb4fcb56706801ea626e1bcc763829a7868b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df9ecedb4ecd667007457c88eaf4748cd627449/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0df9ecedb4ecd667007457c88eaf4748cd627449", "patch": "@@ -704,7 +704,7 @@ pub(crate) fn unresolved_code_action(\n     index: usize,\n ) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n-        title: assist.label().to_string(),\n+        title: assist.label.to_string(),\n         id: Some(format!(\"{}:{}\", assist.id.0, index.to_string())),\n         group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n         kind: Some(code_action_kind(assist.id.1)),"}]}