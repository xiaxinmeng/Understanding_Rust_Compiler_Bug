{"sha": "d8fcfd7d64f102402819aba3ac91954a7a6888cc", "node_id": "C_kwDOAAsO6NoAKGQ4ZmNmZDdkNjRmMTAyNDAyODE5YWJhM2FjOTE5NTRhN2E2ODg4Y2M", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-12T14:09:54Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-28T14:38:01Z"}, "message": "Move if_then_panic to pedantic", "tree": {"sha": "5afa359d7d279f1ec4279712dbc9431639f8d36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5afa359d7d279f1ec4279712dbc9431639f8d36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8fcfd7d64f102402819aba3ac91954a7a6888cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8fcfd7d64f102402819aba3ac91954a7a6888cc", "html_url": "https://github.com/rust-lang/rust/commit/d8fcfd7d64f102402819aba3ac91954a7a6888cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8fcfd7d64f102402819aba3ac91954a7a6888cc/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7788af9c47de03a8c7ff854cbdfbb6696042d4ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/7788af9c47de03a8c7ff854cbdfbb6696042d4ab", "html_url": "https://github.com/rust-lang/rust/commit/7788af9c47de03a8c7ff854cbdfbb6696042d4ab"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "7946c93c6ec656789da839a42091444a100c3ca9", "filename": "clippy_lints/src/if_then_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8fcfd7d64f102402819aba3ac91954a7a6888cc/clippy_lints%2Fsrc%2Fif_then_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fcfd7d64f102402819aba3ac91954a7a6888cc/clippy_lints%2Fsrc%2Fif_then_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_panic.rs?ref=d8fcfd7d64f102402819aba3ac91954a7a6888cc", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// assert!(sad_people.is_empty(), \"there are sad people: {:?}\", sad_people);\n     /// ```\n     pub IF_THEN_PANIC,\n-    style,\n+    pedantic,\n     \"`panic!` and only a `panic!` in `if`-then statement\"\n }\n "}, {"sha": "15edb79d36c24d613653e870f38dc66ff94ca3e3", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8fcfd7d64f102402819aba3ac91954a7a6888cc/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fcfd7d64f102402819aba3ac91954a7a6888cc/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=d8fcfd7d64f102402819aba3ac91954a7a6888cc", "patch": "@@ -76,7 +76,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n-    LintId::of(if_then_panic::IF_THEN_PANIC),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n     LintId::of(infinite_iter::INFINITE_ITER),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),"}, {"sha": "d22b3b31f6da7cbcf5215e138c9e24a71946294e", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8fcfd7d64f102402819aba3ac91954a7a6888cc/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fcfd7d64f102402819aba3ac91954a7a6888cc/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=d8fcfd7d64f102402819aba3ac91954a7a6888cc", "patch": "@@ -34,6 +34,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(functions::MUST_USE_CANDIDATE),\n     LintId::of(functions::TOO_MANY_LINES),\n     LintId::of(if_not_else::IF_NOT_ELSE),\n+    LintId::of(if_then_panic::IF_THEN_PANIC),\n     LintId::of(implicit_hasher::IMPLICIT_HASHER),\n     LintId::of(implicit_saturating_sub::IMPLICIT_SATURATING_SUB),\n     LintId::of(inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR),"}, {"sha": "744880bda3e69c2a83763dc5d9b1a38ade7b6ec5", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8fcfd7d64f102402819aba3ac91954a7a6888cc/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fcfd7d64f102402819aba3ac91954a7a6888cc/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=d8fcfd7d64f102402819aba3ac91954a7a6888cc", "patch": "@@ -27,7 +27,6 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n-    LintId::of(if_then_panic::IF_THEN_PANIC),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),\n     LintId::of(len_zero::LEN_WITHOUT_IS_EMPTY),"}, {"sha": "5d5af4e4632970afe821f9b42b82eae5bd445e08", "filename": "tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8fcfd7d64f102402819aba3ac91954a7a6888cc/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fcfd7d64f102402819aba3ac91954a7a6888cc/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=d8fcfd7d64f102402819aba3ac91954a7a6888cc", "patch": "@@ -1,5 +1,4 @@\n #![deny(clippy::fallible_impl_from)]\n-#![allow(clippy::if_then_panic)]\n \n // docs example\n struct Foo(i32);"}, {"sha": "5772ff055084f4691d5bbc51eeaf9627578cc178", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d8fcfd7d64f102402819aba3ac91954a7a6888cc/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8fcfd7d64f102402819aba3ac91954a7a6888cc/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=d8fcfd7d64f102402819aba3ac91954a7a6888cc", "patch": "@@ -1,5 +1,5 @@\n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:6:1\n+  --> $DIR/fallible_impl_from.rs:5:1\n    |\n LL | / impl From<String> for Foo {\n LL | |     fn from(s: String) -> Self {\n@@ -15,13 +15,13 @@ LL | #![deny(clippy::fallible_impl_from)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:8:13\n+  --> $DIR/fallible_impl_from.rs:7:13\n    |\n LL |         Foo(s.parse().unwrap())\n    |             ^^^^^^^^^^^^^^^^^^\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:27:1\n+  --> $DIR/fallible_impl_from.rs:26:1\n    |\n LL | / impl From<usize> for Invalid {\n LL | |     fn from(i: usize) -> Invalid {\n@@ -34,14 +34,14 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:30:13\n+  --> $DIR/fallible_impl_from.rs:29:13\n    |\n LL |             panic!();\n    |             ^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:36:1\n+  --> $DIR/fallible_impl_from.rs:35:1\n    |\n LL | / impl From<Option<String>> for Invalid {\n LL | |     fn from(s: Option<String>) -> Invalid {\n@@ -54,7 +54,7 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:38:17\n+  --> $DIR/fallible_impl_from.rs:37:17\n    |\n LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n@@ -68,7 +68,7 @@ LL |             panic!(\"{:?}\", s);\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n-  --> $DIR/fallible_impl_from.rs:54:1\n+  --> $DIR/fallible_impl_from.rs:53:1\n    |\n LL | / impl<'a> From<&'a mut <Box<u32> as ProjStrTrait>::ProjString> for Invalid {\n LL | |     fn from(s: &'a mut <Box<u32> as ProjStrTrait>::ProjString) -> Invalid {\n@@ -81,7 +81,7 @@ LL | | }\n    |\n    = help: `From` is intended for infallible conversions only. Use `TryFrom` if there's a possibility for the conversion to fail\n note: potential failure(s)\n-  --> $DIR/fallible_impl_from.rs:56:12\n+  --> $DIR/fallible_impl_from.rs:55:12\n    |\n LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "06370dfce65188899dda939fb0dbee8e561c7170", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8fcfd7d64f102402819aba3ac91954a7a6888cc/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8fcfd7d64f102402819aba3ac91954a7a6888cc/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=d8fcfd7d64f102402819aba3ac91954a7a6888cc", "patch": "@@ -1,9 +1,4 @@\n-#![allow(\n-    unused,\n-    clippy::many_single_char_names,\n-    clippy::redundant_clone,\n-    clippy::if_then_panic\n-)]\n+#![allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n #![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;"}, {"sha": "64594eb870c2c5067b413095f6eabdeded968ebc", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d8fcfd7d64f102402819aba3ac91954a7a6888cc/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8fcfd7d64f102402819aba3ac91954a7a6888cc/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=d8fcfd7d64f102402819aba3ac91954a7a6888cc", "patch": "@@ -1,31 +1,31 @@\n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:12:14\n+  --> $DIR/ptr_arg.rs:7:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:21:14\n+  --> $DIR/ptr_arg.rs:16:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:30:15\n+  --> $DIR/ptr_arg.rs:25:15\n    |\n LL | fn do_path(x: &PathBuf) {\n    |               ^^^^^^^^ help: change this to: `&Path`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:43:18\n+  --> $DIR/ptr_arg.rs:38:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:56:14\n+  --> $DIR/ptr_arg.rs:51:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     x.to_owned()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:65:18\n+  --> $DIR/ptr_arg.rs:60:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n@@ -67,7 +67,7 @@ LL |     x.to_string()\n    |\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:73:19\n+  --> $DIR/ptr_arg.rs:68:19\n    |\n LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n    |                   ^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     x.to_path_buf()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:81:44\n+  --> $DIR/ptr_arg.rs:76:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n@@ -109,13 +109,13 @@ LL |     let c = y;\n    |             ~\n \n error: using a reference to `Cow` is not recommended\n-  --> $DIR/ptr_arg.rs:95:25\n+  --> $DIR/ptr_arg.rs:90:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices\n-  --> $DIR/ptr_arg.rs:148:21\n+  --> $DIR/ptr_arg.rs:143:21\n    |\n LL |     fn foo_vec(vec: &Vec<u8>) {\n    |                     ^^^^^^^^\n@@ -134,7 +134,7 @@ LL |         let _ = vec.to_owned().clone();\n    |                 ~~~~~~~~~~~~~~\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:153:23\n+  --> $DIR/ptr_arg.rs:148:23\n    |\n LL |     fn foo_path(path: &PathBuf) {\n    |                       ^^^^^^^^\n@@ -153,7 +153,7 @@ LL |         let _ = path.to_path_buf().clone();\n    |                 ~~~~~~~~~~~~~~~~~~\n \n error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do\n-  --> $DIR/ptr_arg.rs:158:21\n+  --> $DIR/ptr_arg.rs:153:21\n    |\n LL |     fn foo_str(str: &PathBuf) {\n    |                     ^^^^^^^^"}]}