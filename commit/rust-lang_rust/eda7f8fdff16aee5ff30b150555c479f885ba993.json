{"sha": "eda7f8fdff16aee5ff30b150555c479f885ba993", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYTdmOGZkZmYxNmFlZTVmZjMwYjE1MDU1NWM0NzlmODg1YmE5OTM=", "commit": {"author": {"name": "cohenarthur", "email": "arthur.cohen@epita.fr", "date": "2020-04-30T09:00:45Z"}, "committer": {"name": "cohenarthur", "email": "arthur.cohen@epita.fr", "date": "2020-04-30T09:00:45Z"}, "message": "rename-unique: Rename Unique::empty() to Unique::dangling()\n\nrename-unique: Change calls and doc in raw_vec.rs\n\nrename-unique: Change empty() -> dangling() in const-ptr-unique-rpass.rs", "tree": {"sha": "3ad0d0b09e0aba9b143492dbf327cb77c1da11dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ad0d0b09e0aba9b143492dbf327cb77c1da11dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eda7f8fdff16aee5ff30b150555c479f885ba993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eda7f8fdff16aee5ff30b150555c479f885ba993", "html_url": "https://github.com/rust-lang/rust/commit/eda7f8fdff16aee5ff30b150555c479f885ba993", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eda7f8fdff16aee5ff30b150555c479f885ba993/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2", "html_url": "https://github.com/rust-lang/rust/commit/7c8dbd969dd0ef2af6d8bab9e03ba7ce6cac41a2"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "a8e19c9cbaa86152482fe4b49d7446f1604cde3f", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eda7f8fdff16aee5ff30b150555c479f885ba993/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda7f8fdff16aee5ff30b150555c479f885ba993/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=eda7f8fdff16aee5ff30b150555c479f885ba993", "patch": "@@ -25,9 +25,9 @@ mod tests;\n /// involved. This type is excellent for building your own data structures like Vec and VecDeque.\n /// In particular:\n ///\n-/// * Produces `Unique::empty()` on zero-sized types.\n-/// * Produces `Unique::empty()` on zero-length allocations.\n-/// * Avoids freeing `Unique::empty()`.\n+/// * Produces `Unique::dangling()` on zero-sized types.\n+/// * Produces `Unique::dangling()` on zero-length allocations.\n+/// * Avoids freeing `Unique::dangling()`.\n /// * Catches all overflows in capacity computations (promotes them to \"capacity overflow\" panics).\n /// * Guards against 32-bit systems allocating more than isize::MAX bytes.\n /// * Guards against overflowing your length.\n@@ -125,7 +125,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     /// the returned `RawVec`.\n     pub const fn new_in(alloc: A) -> Self {\n         // `cap: 0` means \"unallocated\". zero-sized types are ignored.\n-        Self { ptr: Unique::empty(), cap: 0, alloc }\n+        Self { ptr: Unique::dangling(), cap: 0, alloc }\n     }\n \n     /// Like `with_capacity`, but parameterized over the choice of\n@@ -172,7 +172,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     }\n \n     /// Gets a raw pointer to the start of the allocation. Note that this is\n-    /// `Unique::empty()` if `capacity == 0` or `T` is zero-sized. In the former case, you must\n+    /// `Unique::dangling()` if `capacity == 0` or `T` is zero-sized. In the former case, you must\n     /// be careful.\n     pub fn ptr(&self) -> *mut T {\n         self.ptr.as_ptr()"}, {"sha": "f58d35f06137d4ea870403a42cc7cb41ad21bfd1", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eda7f8fdff16aee5ff30b150555c479f885ba993/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda7f8fdff16aee5ff30b150555c479f885ba993/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=eda7f8fdff16aee5ff30b150555c479f885ba993", "patch": "@@ -70,9 +70,8 @@ impl<T: Sized> Unique<T> {\n     /// a `T`, which means this must not be used as a \"not yet initialized\"\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n-    // FIXME: rename to dangling() to match NonNull?\n     #[inline]\n-    pub const fn empty() -> Self {\n+    pub const fn dangling() -> Self {\n         // SAFETY: mem::align_of() returns a valid, non-null pointer. The\n         // conditions to call new_unchecked() are thus respected.\n         unsafe { Unique::new_unchecked(mem::align_of::<T>() as *mut T) }"}, {"sha": "fc13bb98bd2c95c1423d9a908ebc7b3a9432152c", "filename": "src/test/ui/consts/const-ptr-unique-rpass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eda7f8fdff16aee5ff30b150555c479f885ba993/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eda7f8fdff16aee5ff30b150555c479f885ba993/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-ptr-unique-rpass.rs?ref=eda7f8fdff16aee5ff30b150555c479f885ba993", "patch": "@@ -8,9 +8,9 @@ use test::black_box as b; // prevent promotion of the argument and const-propaga\n use std::ptr::Unique;\n \n \n-const PTR: *mut u32 = Unique::empty().as_ptr();\n+const PTR: *mut u32 = Unique::dangling().as_ptr();\n \n pub fn main() {\n     // Be super-extra paranoid and cast the fn items to fn pointers before blackboxing them.\n-    assert_eq!(PTR, b::<fn() -> _>(Unique::<u32>::empty)().as_ptr());\n+    assert_eq!(PTR, b::<fn() -> _>(Unique::<u32>::dangling)().as_ptr());\n }"}]}