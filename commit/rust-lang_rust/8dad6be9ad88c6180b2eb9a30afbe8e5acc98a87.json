{"sha": "8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYWQ2YmU5YWQ4OGM2MTgwYjJlYjlhMzBhZmJlOGU1YWNjOThhODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-17T14:16:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-17T14:16:54Z"}, "message": "Auto merge of #53288 - RalfJung:dropck, r=nikomatsakis\n\nunions are not always trivially dropable\n\nFixes #52786\n\nr? @nikomatsakis", "tree": {"sha": "40de72a5aa9c3a9f90e7b903e5535cbe63cdb11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40de72a5aa9c3a9f90e7b903e5535cbe63cdb11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "html_url": "https://github.com/rust-lang/rust/commit/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b923a19edd32a46ca75f234fef32081376bd111", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b923a19edd32a46ca75f234fef32081376bd111", "html_url": "https://github.com/rust-lang/rust/commit/8b923a19edd32a46ca75f234fef32081376bd111"}, {"sha": "d8f5790262fe17b5ff2a8e6ba00b890046f8f59b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f5790262fe17b5ff2a8e6ba00b890046f8f59b", "html_url": "https://github.com/rust-lang/rust/commit/d8f5790262fe17b5ff2a8e6ba00b890046f8f59b"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "e41ed0824b4ee29891b8c2e75ae0c5f13f0ccba2", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "patch": "@@ -242,16 +242,14 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n             .all(|t| trivial_dropck_outlives(tcx, t)),\n \n         ty::TyAdt(def, _) => {\n-            if def.is_union() {\n-                // Unions never have a dtor.\n-                true\n-            } else if Some(def.did) == tcx.lang_items().manually_drop() {\n+            if Some(def.did) == tcx.lang_items().manually_drop() {\n                 // `ManuallyDrop` never has a dtor.\n                 true\n             } else {\n                 // Other types might. Moreover, PhantomData doesn't\n                 // have a dtor, but it is considered to own its\n-                // content, so it is non-trivial.\n+                // content, so it is non-trivial. Unions can have `impl Drop`,\n+                // and hence are non-trivial as well.\n                 false\n             }\n         }"}, {"sha": "35d7ffc7879eda17de606b49ce2c53cff0615646", "filename": "src/test/ui/dropck/dropck-union.nll.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.nll.stderr?ref=8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "patch": "@@ -0,0 +1,16 @@\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/dropck-union.rs:49:18\n+   |\n+LL |     v.0.set(Some(&v)); //~ ERROR: `v` does not live long enough\n+   |                  ^^ borrowed value does not live long enough\n+LL | }\n+   | -\n+   | |\n+   | `v` dropped here while still borrowed\n+   | borrow later used here, when `v` is dropped\n+   |\n+   = note: values in a scope are dropped in the opposite order they are defined\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "f16d761fdab6a17d7019d6899c5e60e312c447c2", "filename": "src/test/ui/dropck/dropck-union.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs?ref=8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+use std::cell::Cell;\n+use std::ops::Deref;\n+use std::mem::ManuallyDrop;\n+\n+union Wrap<T> { x: ManuallyDrop<T> }\n+\n+impl<T> Drop for Wrap<T>  {\n+    fn drop(&mut self) {\n+        unsafe { std::ptr::drop_in_place(&mut *self.x as *mut T); }\n+    }\n+}\n+\n+impl<T> Wrap<T> {\n+    fn new(x: T) -> Self {\n+        Wrap { x: ManuallyDrop::new(x) }\n+    }\n+}\n+\n+impl<T> Deref for Wrap<T> {\n+    type Target = T;\n+    #[inline]\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            &self.x\n+        }\n+    }\n+}\n+\n+struct C<'a>(Cell<Option<&'a C<'a>>>);\n+\n+impl<'a> Drop for C<'a> {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    let v : Wrap<C> = Wrap::new(C(Cell::new(None)));\n+    v.0.set(Some(&v)); //~ ERROR: `v` does not live long enough\n+}"}, {"sha": "a383ca5d390475572ec6797756a15b3cd71764ba", "filename": "src/test/ui/dropck/dropck-union.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr?ref=8dad6be9ad88c6180b2eb9a30afbe8e5acc98a87", "patch": "@@ -0,0 +1,13 @@\n+error[E0597]: `v` does not live long enough\n+  --> $DIR/dropck-union.rs:49:19\n+   |\n+LL |     v.0.set(Some(&v)); //~ ERROR: `v` does not live long enough\n+   |                   ^ borrowed value does not live long enough\n+LL | }\n+   | - `v` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}