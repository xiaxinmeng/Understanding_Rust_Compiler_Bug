{"sha": "e72a21b2bb6b889a991229a966a9243b6d81e4d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MmEyMWIyYmI2Yjg4OWE5OTEyMjlhOTY2YTkyNDNiNmQ4MWU0ZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-24T10:21:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-24T10:21:24Z"}, "message": "auto merge of #14392 : alexcrichton/rust/mem-updates, r=sfackler\n\n* All of the *_val functions have gone from #[unstable] to #[stable]\r\n* The overwrite and zeroed functions have gone from #[unstable] to #[stable]\r\n* The uninit function is now deprecated, replaced by its stable counterpart,\r\n  uninitialized\r\n\r\n[breaking-change]", "tree": {"sha": "4f0cc6ac953bdfd6629027f0dba0b0c6a2403b9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0cc6ac953bdfd6629027f0dba0b0c6a2403b9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e72a21b2bb6b889a991229a966a9243b6d81e4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e72a21b2bb6b889a991229a966a9243b6d81e4d0", "html_url": "https://github.com/rust-lang/rust/commit/e72a21b2bb6b889a991229a966a9243b6d81e4d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e72a21b2bb6b889a991229a966a9243b6d81e4d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12467989c3562eee5d7556e20bdc5d0d115c2cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/12467989c3562eee5d7556e20bdc5d0d115c2cf1", "html_url": "https://github.com/rust-lang/rust/commit/12467989c3562eee5d7556e20bdc5d0d115c2cf1"}, {"sha": "2fd484172406a25e11f0f83000daeef7a287aebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd484172406a25e11f0f83000daeef7a287aebb", "html_url": "https://github.com/rust-lang/rust/commit/2fd484172406a25e11f0f83000daeef7a287aebb"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "b9e2eccbb9a2963b73096c9425ca966363a84725", "filename": "src/libcollections/lru_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flru_cache.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -92,7 +92,7 @@ impl<K: Hash + TotalEq, V> LruCache<K, V> {\n         let cache = LruCache {\n             map: HashMap::new(),\n             max_size: capacity,\n-            head: unsafe{ mem::transmute(box mem::uninit::<LruEntry<K, V>>()) },\n+            head: unsafe{ mem::transmute(box mem::uninitialized::<LruEntry<K, V>>()) },\n         };\n         unsafe {\n             (*cache.head).next = cache.head;"}, {"sha": "dcec07ef24e3279beb8b44d89fd7f00b36a10483", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -26,7 +26,7 @@ pub fn size_of<T>() -> uint {\n \n /// Returns the size of the type that `_val` points to in bytes.\n #[inline]\n-#[unstable = \"the name of this function may change slightly before stabilizing\"]\n+#[stable]\n pub fn size_of_val<T>(_val: &T) -> uint {\n     size_of::<T>()\n }\n@@ -64,7 +64,7 @@ pub fn min_align_of<T>() -> uint {\n /// Returns the ABI-required minimum alignment of the type of the value that\n /// `_val` points to\n #[inline]\n-#[unstable = \"the name of this function may change slightly before stabilizing\"]\n+#[stable]\n pub fn min_align_of_val<T>(_val: &T) -> uint {\n     min_align_of::<T>()\n }\n@@ -90,7 +90,7 @@ pub fn align_of<T>() -> uint {\n /// as trait objects (in the future), returning the alignment for an arbitrary\n /// value at runtime.\n #[inline]\n-#[unstable = \"the name of this function may change slightly before stabilizing\"]\n+#[stable]\n pub fn align_of_val<T>(_val: &T) -> uint {\n     align_of::<T>()\n }\n@@ -117,7 +117,7 @@ pub fn pref_align_of_val<T>(val: &T) -> uint { align_of_val(val) }\n ///\n /// This is useful for FFI functions sometimes, but should generally be avoided.\n #[inline]\n-#[unstable = \"the name of this function is subject to change\"]\n+#[stable]\n pub unsafe fn zeroed<T>() -> T {\n     intrinsics::init()\n }\n@@ -136,7 +136,14 @@ pub unsafe fn init<T>() -> T { zeroed() }\n ///\n /// This is useful for FFI functions sometimes, but should generally be avoided.\n #[inline]\n-#[unstable = \"the name of this function is subject to change\"]\n+#[stable]\n+pub unsafe fn uninitialized<T>() -> T {\n+    intrinsics::uninit()\n+}\n+\n+/// Deprecated, use `uninitialized` instead.\n+#[inline]\n+#[deprecated = \"this function has been renamed to `uninitialized`\"]\n pub unsafe fn uninit<T>() -> T {\n     intrinsics::uninit()\n }\n@@ -148,7 +155,7 @@ pub unsafe fn uninit<T>() -> T {\n /// contained at the location `dst`. This could leak allocations or resources,\n /// so care must be taken to previously deallocate the value at `dst`.\n #[inline]\n-#[unstable = \"the name of this function is subject to change\"]\n+#[stable]\n pub unsafe fn overwrite<T>(dst: *mut T, src: T) {\n     intrinsics::move_val_init(&mut *dst, src)\n }\n@@ -315,7 +322,7 @@ pub fn from_be64(x: u64) -> u64 { x }\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n         // Give ourselves some scratch space to work with\n-        let mut t: T = uninit();\n+        let mut t: T = uninitialized();\n \n         // Perform the swap, `&mut` pointers never alias\n         ptr::copy_nonoverlapping_memory(&mut t, &*x, 1);"}, {"sha": "34596480273c3d5e83693d5d4591efac8fc2912c", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -196,7 +196,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *T, count: uint) {\n /// fn swap<T>(x: &mut T, y: &mut T) {\n ///     unsafe {\n ///         // Give ourselves some scratch space to work with\n-///         let mut t: T = mem::uninit();\n+///         let mut t: T = mem::uninitialized();\n ///\n ///         // Perform the swap, `&mut` pointers never alias\n ///         ptr::copy_nonoverlapping_memory(&mut t, &*x, 1);\n@@ -239,7 +239,7 @@ pub unsafe fn zero_memory<T>(dst: *mut T, count: uint) {\n #[inline]\n pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     // Give ourselves some scratch space to work with\n-    let mut tmp: T = mem::uninit();\n+    let mut tmp: T = mem::uninitialized();\n     let t: *mut T = &mut tmp;\n \n     // Perform the swap\n@@ -263,7 +263,7 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n /// Reads the value from `*src` and returns it.\n #[inline(always)]\n pub unsafe fn read<T>(src: *T) -> T {\n-    let mut tmp: T = mem::uninit();\n+    let mut tmp: T = mem::uninitialized();\n     copy_nonoverlapping_memory(&mut tmp, src, 1);\n     tmp\n }"}, {"sha": "b10284a3b6c3f0da7b269c186667bf6cb803ac02", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -164,7 +164,7 @@ impl rtio::RtioFileStream for FileDesc {\n     }\n \n     fn fstat(&mut self) -> IoResult<io::FileStat> {\n-        let mut stat: libc::stat = unsafe { mem::uninit() };\n+        let mut stat: libc::stat = unsafe { mem::zeroed() };\n         match retry(|| unsafe { libc::fstat(self.fd(), &mut stat) }) {\n             0 => Ok(mkstat(&stat)),\n             _ => Err(super::last_error()),\n@@ -509,15 +509,15 @@ fn mkstat(stat: &libc::stat) -> io::FileStat {\n }\n \n pub fn stat(p: &CString) -> IoResult<io::FileStat> {\n-    let mut stat: libc::stat = unsafe { mem::uninit() };\n+    let mut stat: libc::stat = unsafe { mem::zeroed() };\n     match retry(|| unsafe { libc::stat(p.with_ref(|p| p), &mut stat) }) {\n         0 => Ok(mkstat(&stat)),\n         _ => Err(super::last_error()),\n     }\n }\n \n pub fn lstat(p: &CString) -> IoResult<io::FileStat> {\n-    let mut stat: libc::stat = unsafe { mem::uninit() };\n+    let mut stat: libc::stat = unsafe { mem::zeroed() };\n     match retry(|| unsafe { libc::lstat(p.with_ref(|p| p), &mut stat) }) {\n         0 => Ok(mkstat(&stat)),\n         _ => Err(super::last_error()),"}, {"sha": "c9a48db69207a23d01585850d9c7784eff4a6cd1", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -195,7 +195,7 @@ impl rtio::RtioFileStream for FileDesc {\n     }\n \n     fn fstat(&mut self) -> IoResult<io::FileStat> {\n-        let mut stat: libc::stat = unsafe { mem::uninit() };\n+        let mut stat: libc::stat = unsafe { mem::zeroed() };\n         match unsafe { libc::fstat(self.fd(), &mut stat) } {\n             0 => Ok(mkstat(&stat)),\n             _ => Err(super::last_error()),\n@@ -510,7 +510,7 @@ fn mkstat(stat: &libc::stat) -> io::FileStat {\n }\n \n pub fn stat(p: &CString) -> IoResult<io::FileStat> {\n-    let mut stat: libc::stat = unsafe { mem::uninit() };\n+    let mut stat: libc::stat = unsafe { mem::zeroed() };\n     as_utf16_p(p.as_str().unwrap(), |up| {\n         match unsafe { libc::wstat(up, &mut stat) } {\n             0 => Ok(mkstat(&stat)),"}, {"sha": "1c48faad9f8472ab956e299aaec37c8f225e1769", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -254,8 +254,8 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n                 // The idea here is to avoid initializing threads that never\n                 // need to be initialized, particularly for larger regexs with\n                 // a lot of instructions.\n-                queue: unsafe { ::std::mem::uninit() },\n-                sparse: unsafe { ::std::mem::uninit() },\n+                queue: unsafe { ::std::mem::uninitialized() },\n+                sparse: unsafe { ::std::mem::uninitialized() },\n                 size: 0,\n             }\n         }"}, {"sha": "fbb812d3fb3b0608b1532b969c8c33afbb0c935d", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -377,7 +377,7 @@ impl<'a> ToCStr for &'a [u8] {\n // Unsafe function that handles possibly copying the &[u8] into a stack array.\n unsafe fn with_c_str<T>(v: &[u8], checked: bool, f: |*libc::c_char| -> T) -> T {\n     if v.len() < BUF_LEN {\n-        let mut buf: [u8, .. BUF_LEN] = mem::uninit();\n+        let mut buf: [u8, .. BUF_LEN] = mem::uninitialized();\n         slice::bytes::copy_memory(buf, v);\n         buf[v.len()] = 0;\n "}, {"sha": "21903f6b6b88feef24bf36e81c70420f544cae2e", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -969,7 +969,7 @@ pub fn page_size() -> uint {\n pub fn page_size() -> uint {\n     use mem;\n     unsafe {\n-        let mut info = mem::uninit();\n+        let mut info = mem::zeroed();\n         libc::GetSystemInfo(&mut info);\n \n         return info.dwPageSize as uint;\n@@ -1288,7 +1288,7 @@ impl MemoryMap {\n     pub fn granularity() -> uint {\n         use mem;\n         unsafe {\n-            let mut info = mem::uninit();\n+            let mut info = mem::zeroed();\n             libc::GetSystemInfo(&mut info);\n \n             return info.dwAllocationGranularity as uint;"}, {"sha": "6cc9604dc59a5deef5137ee3549916739431d63b", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -227,8 +227,8 @@ mod imp {\n     pub type rust_thread_return = *u8;\n \n     pub unsafe fn create(stack: uint, p: Box<proc():Send>) -> rust_thread {\n-        let mut native: libc::pthread_t = mem::uninit();\n-        let mut attr: libc::pthread_attr_t = mem::uninit();\n+        let mut native: libc::pthread_t = mem::zeroed();\n+        let mut attr: libc::pthread_attr_t = mem::zeroed();\n         assert_eq!(pthread_attr_init(&mut attr), 0);\n         assert_eq!(pthread_attr_setdetachstate(&mut attr,\n                                                PTHREAD_CREATE_JOINABLE), 0);"}, {"sha": "90e87f96f7899e54edec7a9dad75b6d9fa140c65", "filename": "src/test/run-pass/issue-10714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Ftest%2Frun-pass%2Fissue-10714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Ftest%2Frun-pass%2Fissue-10714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10714.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -10,5 +10,5 @@\n \n enum v {}\n pub fn main() {\n-    let y: v = unsafe { ::std::mem::uninit() };\n+    let y: v = unsafe { ::std::mem::uninitialized() };\n }"}, {"sha": "005205353fce6a4d15a02de5a086f073f5b8f21d", "filename": "src/test/run-pass/uninit-empty-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e72a21b2bb6b889a991229a966a9243b6d81e4d0/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs?ref=e72a21b2bb6b889a991229a966a9243b6d81e4d0", "patch": "@@ -17,7 +17,7 @@ struct Foo;\n \n pub fn main() {\n     unsafe {\n-        let _x: Foo = mem::uninit();\n-        let _x: [Foo, ..2] = mem::uninit();\n+        let _x: Foo = mem::uninitialized();\n+        let _x: [Foo, ..2] = mem::uninitialized();\n     }\n }"}]}