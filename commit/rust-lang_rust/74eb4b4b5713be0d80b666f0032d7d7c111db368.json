{"sha": "74eb4b4b5713be0d80b666f0032d7d7c111db368", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZWI0YjRiNTcxM2JlMGQ4MGI2NjZmMDAzMmQ3ZDdjMTExZGIzNjg=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-06T18:59:33Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-06T18:59:33Z"}, "message": "Add new tests for borrowck field-sensitivity.", "tree": {"sha": "7558af78ce51b4ea2b0f40d53293ef938c61293d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7558af78ce51b4ea2b0f40d53293ef938c61293d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74eb4b4b5713be0d80b666f0032d7d7c111db368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74eb4b4b5713be0d80b666f0032d7d7c111db368", "html_url": "https://github.com/rust-lang/rust/commit/74eb4b4b5713be0d80b666f0032d7d7c111db368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74eb4b4b5713be0d80b666f0032d7d7c111db368/comments", "author": null, "committer": null, "parents": [{"sha": "c53d296e122393830ca239195eb21ec3f49025fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c53d296e122393830ca239195eb21ec3f49025fe", "html_url": "https://github.com/rust-lang/rust/commit/c53d296e122393830ca239195eb21ec3f49025fe"}], "stats": {"total": 347, "additions": 347, "deletions": 0}, "files": [{"sha": "4363f85048f0e45fb77351328711a5754fe81e09", "filename": "src/test/compile-fail/borrowck-field-sensitivity.rs", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/74eb4b4b5713be0d80b666f0032d7d7c111db368/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eb4b4b5713be0d80b666f0032d7d7c111db368/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-field-sensitivity.rs?ref=74eb4b4b5713be0d80b666f0032d7d7c111db368", "patch": "@@ -0,0 +1,124 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A { a: int, b: Box<int> }\n+\n+fn borrow<T>(_: &T) { }\n+\n+fn use_after_move() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    drop(*x.b); //~ ERROR use of partially moved value: `*x.b`\n+}\n+\n+fn use_after_fu_move() {\n+    let x = A { a: 1, b: box 2 };\n+    let y = A { a: 3, .. x };\n+    drop(*x.b); //~ ERROR use of partially moved value: `*x.b`\n+}\n+\n+fn borrow_after_move() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    borrow(&x.b); //~ ERROR use of moved value: `x.b`\n+}\n+\n+fn borrow_after_fu_move() {\n+    let x = A { a: 1, b: box 2 };\n+    let _y = A { a: 3, .. x };\n+    borrow(&x.b); //~ ERROR use of moved value: `x.b`\n+}\n+\n+fn move_after_borrow() {\n+    let x = A { a: 1, b: box 2 };\n+    let y = &x.b;\n+    drop(x.b); //~ ERROR cannot move out of `x.b` because it is borrowed\n+    borrow(&*y);\n+}\n+\n+fn fu_move_after_borrow() {\n+    let x = A { a: 1, b: box 2 };\n+    let y = &x.b;\n+    let _z = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n+    borrow(&*y);\n+}\n+\n+fn mut_borrow_after_mut_borrow() {\n+    let mut x = A { a: 1, b: box 2 };\n+    let y = &mut x.a;\n+    let z = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n+    drop(*y);\n+    drop(*z);\n+}\n+\n+fn move_after_move() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    drop(x.b);  //~ ERROR use of moved value: `x.b`\n+}\n+\n+fn move_after_fu_move() {\n+    let x = A { a: 1, b: box 2 };\n+    let _y = A { a: 3, .. x };\n+    drop(x.b);  //~ ERROR use of moved value: `x.b`\n+}\n+\n+fn fu_move_after_move() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    let _z = A { a: 3, .. x };  //~ ERROR use of moved value: `x.b`\n+}\n+\n+fn fu_move_after_fu_move() {\n+    let x = A { a: 1, b: box 2 };\n+    let _y = A { a: 3, .. x };\n+    let _z = A { a: 4, .. x };  //~ ERROR use of moved value: `x.b`\n+}\n+\n+// The following functions aren't yet accepted, but they should be.\n+\n+fn use_after_field_assign_after_uninit() {\n+    let mut x: A;\n+    x.a = 1;\n+    drop(x.a); //~ ERROR use of possibly uninitialized variable: `x.a`\n+}\n+\n+fn borrow_after_field_assign_after_uninit() {\n+    let mut x: A;\n+    x.a = 1;\n+    borrow(&x.a); //~ ERROR use of possibly uninitialized variable: `x.a`\n+}\n+\n+fn move_after_field_assign_after_uninit() {\n+    let mut x: A;\n+    x.b = box 1;\n+    drop(x.b); //~ ERROR use of possibly uninitialized variable: `x.b`\n+}\n+\n+fn main() {\n+    use_after_move();\n+    use_after_fu_move();\n+\n+    borrow_after_move();\n+    borrow_after_fu_move();\n+    move_after_borrow();\n+    fu_move_after_borrow();\n+    mut_borrow_after_mut_borrow();\n+\n+    move_after_move();\n+    move_after_fu_move();\n+    fu_move_after_move();\n+    fu_move_after_fu_move();\n+\n+    use_after_field_assign_after_uninit();\n+    borrow_after_field_assign_after_uninit();\n+    move_after_field_assign_after_uninit();\n+}\n+"}, {"sha": "3b82f51123f8d3b2bff4333ec0d8746dec001532", "filename": "src/test/run-pass/borrowck-field-sensitivity.rs", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/74eb4b4b5713be0d80b666f0032d7d7c111db368/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74eb4b4b5713be0d80b666f0032d7d7c111db368/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-field-sensitivity.rs?ref=74eb4b4b5713be0d80b666f0032d7d7c111db368", "patch": "@@ -0,0 +1,223 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A { a: int, b: Box<int> }\n+struct B { a: Box<int>, b: Box<int> }\n+\n+fn borrow<T>(_: &T) { }\n+\n+fn move_after_use() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.a);\n+    drop(x.b);\n+}\n+\n+fn move_after_fu_use() {\n+    let x = A { a: 1, b: box 2 };\n+    let _y = A { b: box 3, .. x };\n+    drop(x.b);\n+}\n+\n+fn fu_move_after_use() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.a);\n+    let y = A { a: 3, .. x };\n+    drop(y.b);\n+}\n+\n+fn fu_move_after_fu_use() {\n+    let x = A { a: 1, b: box 2 };\n+    let _y = A { b: box 3, .. x };\n+    let z = A { a: 4, .. x };\n+    drop(z.b);\n+}\n+\n+fn use_after_move() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    drop(x.a);\n+}\n+\n+fn use_after_fu_move() {\n+    let x = A { a: 1, b: box 2 };\n+    let y = A { a: 3, .. x };\n+    drop(x.a);\n+    drop(y.b);\n+}\n+\n+fn fu_use_after_move() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    let _y = A { b: box 3, .. x };\n+}\n+\n+fn fu_use_after_fu_move() {\n+    let x = A { a: 1, b: box 2 };\n+    let y = A { a: 3, .. x };\n+    let _z = A { b: box 3, .. x };\n+    drop(y.b);\n+}\n+\n+fn borrow_after_move() {\n+    let x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    borrow(&x.a);\n+}\n+\n+fn borrow_after_fu_move() {\n+    let x = A { a: 1, b: box 2 };\n+    let y = A { a: 3, .. x };\n+    borrow(&x.a);\n+    drop(y.b);\n+}\n+\n+fn move_after_borrow() {\n+    let x = A { a: 1, b: box 2 };\n+    borrow(&x.a);\n+    drop(x.b);\n+}\n+\n+fn fu_move_after_borrow() {\n+    let x = A { a: 1, b: box 2 };\n+    borrow(&x.a);\n+    let y = A { a: 3, .. x };\n+    drop(y.b);\n+}\n+\n+fn mut_borrow_after_mut_borrow() {\n+    let mut x = A { a: 1, b: box 2 };\n+    let y = &mut x.a;\n+    let z = &mut x.b;\n+    drop(*y);\n+    drop(**z);\n+}\n+\n+fn move_after_move() {\n+    let x = B { a: box 1, b: box 2 };\n+    drop(x.a);\n+    drop(x.b);\n+}\n+\n+fn move_after_fu_move() {\n+    let x = B { a: box 1, b: box 2 };\n+    let y = B { a: box 3, .. x };\n+    drop(x.a);\n+    drop(y.b);\n+}\n+\n+fn fu_move_after_move() {\n+    let x = B { a: box 1, b: box 2 };\n+    drop(x.a);\n+    let z = B { a: box 3, .. x };\n+    drop(z.b);\n+}\n+\n+fn fu_move_after_fu_move() {\n+    let x = B { a: box 1, b: box 2 };\n+    let y = B { b: box 3, .. x };\n+    let z = B { a: box 4, .. x };\n+    drop(y.a);\n+    drop(z.b);\n+}\n+\n+fn use_after_assign_after_move() {\n+    let mut x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    x = A { a: 3, b: box 4 };\n+    drop(*x.b);\n+}\n+\n+fn use_after_field_assign_after_move() {\n+    let mut x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    x.b = box 3;\n+    drop(*x.b);\n+}\n+\n+fn borrow_after_assign_after_move() {\n+    let mut x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    x = A { a: 3, b: box 4 };\n+    borrow(&x.b);\n+}\n+\n+fn borrow_after_field_assign_after_move() {\n+    let mut x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    x.b = box 3;\n+    borrow(&x.b);\n+}\n+\n+fn move_after_assign_after_move() {\n+    let mut x = A { a: 1, b: box 2 };\n+    let y = x.b;\n+    x = A { a: 3, b: box 4 };\n+    drop(x.b);\n+    drop(y);\n+}\n+\n+fn move_after_field_assign_after_move() {\n+    let mut x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+    x.b = box 3;\n+    drop(x.b);\n+}\n+\n+fn use_after_assign_after_uninit() {\n+    let mut x: A;\n+    x = A { a: 1, b: box 2 };\n+    drop(x.a);\n+}\n+\n+fn borrow_after_assign_after_uninit() {\n+    let mut x: A;\n+    x = A { a: 1, b: box 2 };\n+    borrow(&x.a);\n+}\n+\n+fn move_after_assign_after_uninit() {\n+    let mut x: A;\n+    x = A { a: 1, b: box 2 };\n+    drop(x.b);\n+}\n+\n+fn main() {\n+    move_after_use();\n+    move_after_fu_use();\n+    fu_move_after_use();\n+    fu_move_after_fu_use();\n+    use_after_move();\n+    use_after_fu_move();\n+    fu_use_after_move();\n+    fu_use_after_fu_move();\n+\n+    borrow_after_move();\n+    borrow_after_fu_move();\n+    move_after_borrow();\n+    fu_move_after_borrow();\n+    mut_borrow_after_mut_borrow();\n+\n+    move_after_move();\n+    move_after_fu_move();\n+    fu_move_after_move();\n+    fu_move_after_fu_move();\n+\n+    use_after_assign_after_move();\n+    use_after_field_assign_after_move();\n+    borrow_after_assign_after_move();\n+    borrow_after_field_assign_after_move();\n+    move_after_assign_after_move();\n+    move_after_field_assign_after_move();\n+\n+    use_after_assign_after_uninit();\n+    borrow_after_assign_after_uninit();\n+    move_after_assign_after_uninit();\n+}\n+"}]}