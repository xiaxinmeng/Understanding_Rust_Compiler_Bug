{"sha": "a2f217902675d8ad29ecb79a8c153b485d85cb7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZjIxNzkwMjY3NWQ4YWQyOWVjYjc5YThjMTUzYjQ4NWQ4NWNiN2I=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-26T16:28:52Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-04-20T13:30:28Z"}, "message": "Add an attribute to be able to configure the limit", "tree": {"sha": "afe1c1945d2162db75faf314269500e18120dc9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe1c1945d2162db75faf314269500e18120dc9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f217902675d8ad29ecb79a8c153b485d85cb7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f217902675d8ad29ecb79a8c153b485d85cb7b", "html_url": "https://github.com/rust-lang/rust/commit/a2f217902675d8ad29ecb79a8c153b485d85cb7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f217902675d8ad29ecb79a8c153b485d85cb7b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9696c8b62c45903bed1bb39782abe43e392cd21", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9696c8b62c45903bed1bb39782abe43e392cd21", "html_url": "https://github.com/rust-lang/rust/commit/e9696c8b62c45903bed1bb39782abe43e392cd21"}], "stats": {"total": 76, "additions": 65, "deletions": 11}, "files": [{"sha": "eb143e5bac22de4b87e646bdf7d574d902a42d04", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -633,6 +633,9 @@ declare_features! (\n     /// Allows associated types in inherent impls.\n     (active, inherent_associated_types, \"1.52.0\", Some(8995), None),\n \n+    // Allows setting the threshold for the `large_assignments` lint.\n+    (active, large_assignments, \"1.52.0\", Some(83518), None),\n+\n     /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n "}, {"sha": "8dfc4572a848c3de56f53529bab16a75795448c1", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -241,6 +241,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), const_eval_limit,\n         experimental!(const_eval_limit)\n     ),\n+    gated!(\n+        move_size_limit, CrateLevel, template!(NameValueStr: \"N\"), large_assignments,\n+        experimental!(move_size_limit)\n+    ),\n \n     // Entry point:\n     ungated!(main, Normal, template!(Word)),"}, {"sha": "2edb8b717fd57f28c9f037234fdf789e6e84d464", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -2906,7 +2906,7 @@ declare_lint! {\n     /// This lint will trigger on all sites of large moves and thus allow the\n     /// user to resolve them in code.\n     pub LARGE_ASSIGNMENTS,\n-    Allow,\n+    Warn,\n     \"detects large moves or copies\",\n }\n "}, {"sha": "601198fd0de0443090df30821db510102dee1d82", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -1,4 +1,8 @@\n-//! Registering limits, recursion_limit, type_length_limit and const_eval_limit\n+//! Registering limits:\n+//! * recursion_limit,\n+//! * move_size_limit,\n+//! * type_length_limit, and\n+//! * const_eval_limit\n //!\n //! There are various parts of the compiler that must impose arbitrary limits\n //! on how deeply they recurse to prevent stack overflow. Users can override\n@@ -8,21 +12,22 @@\n use crate::bug;\n use rustc_ast as ast;\n use rustc_data_structures::sync::OnceCell;\n-use rustc_session::{Limit, Session};\n+use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n \n use std::num::IntErrorKind;\n \n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n     update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);\n+    update_limit(sess, krate, &sess.move_size_limit, sym::move_size_limit, 0);\n     update_limit(sess, krate, &sess.type_length_limit, sym::type_length_limit, 1048576);\n     update_limit(sess, krate, &sess.const_eval_limit, sym::const_eval_limit, 1_000_000);\n }\n \n fn update_limit(\n     sess: &Session,\n     krate: &ast::Crate,\n-    limit: &OnceCell<Limit>,\n+    limit: &OnceCell<impl From<usize> + std::fmt::Debug>,\n     name: Symbol,\n     default: usize,\n ) {\n@@ -34,7 +39,7 @@ fn update_limit(\n         if let Some(s) = attr.value_str() {\n             match s.as_str().parse() {\n                 Ok(n) => {\n-                    limit.set(Limit::new(n)).unwrap();\n+                    limit.set(From::from(n)).unwrap();\n                     return;\n                 }\n                 Err(e) => {\n@@ -63,5 +68,5 @@ fn update_limit(\n             }\n         }\n     }\n-    limit.set(Limit::new(default)).unwrap();\n+    limit.set(From::from(default)).unwrap();\n }"}, {"sha": "e621bc9167d801dc3c4f2587e0ac714e8684a741", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -757,11 +757,16 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &mir::Operand<'tcx>, location: Location) {\n         self.super_operand(operand, location);\n+        let limit = self.tcx.sess.move_size_limit();\n+        if limit == 0 {\n+            return;\n+        }\n+        let limit = Size::from_bytes(limit);\n         let ty = operand.ty(self.body, self.tcx);\n         let ty = self.monomorphize(ty);\n         let layout = self.tcx.layout_of(ty::ParamEnv::reveal_all().and(ty));\n         if let Ok(layout) = layout {\n-            if layout.size > Size::from_bytes(1000) {\n+            if layout.size > limit {\n                 debug!(?layout);\n                 let source_info = self.body.source_info(location);\n                 debug!(?source_info);"}, {"sha": "7bff634fb2dd09baef261966758669e942e8fec9", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -83,6 +83,12 @@ impl Limit {\n     }\n }\n \n+impl From<usize> for Limit {\n+    fn from(value: usize) -> Self {\n+        Self::new(value)\n+    }\n+}\n+\n impl fmt::Display for Limit {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.0)\n@@ -143,6 +149,10 @@ pub struct Session {\n     /// operations such as auto-dereference and monomorphization.\n     pub recursion_limit: OnceCell<Limit>,\n \n+    /// The size at which the `large_assignments` lint starts\n+    /// being emitted.\n+    pub move_size_limit: OnceCell<usize>,\n+\n     /// The maximum length of types during monomorphization.\n     pub type_length_limit: OnceCell<Limit>,\n \n@@ -352,6 +362,11 @@ impl Session {\n         self.recursion_limit.get().copied().unwrap()\n     }\n \n+    #[inline]\n+    pub fn move_size_limit(&self) -> usize {\n+        self.move_size_limit.get().copied().unwrap()\n+    }\n+\n     #[inline]\n     pub fn type_length_limit(&self) -> Limit {\n         self.type_length_limit.get().copied().unwrap()\n@@ -1414,6 +1429,7 @@ pub fn build_session(\n         features: OnceCell::new(),\n         lint_store: OnceCell::new(),\n         recursion_limit: OnceCell::new(),\n+        move_size_limit: OnceCell::new(),\n         type_length_limit: OnceCell::new(),\n         const_eval_limit: OnceCell::new(),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),"}, {"sha": "5c46e7d9af90dce53cf29d65f4fe0c6c1d971ff0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -669,6 +669,7 @@ symbols! {\n         label_break_value,\n         lang,\n         lang_items,\n+        large_assignments,\n         lateout,\n         lazy_normalization_consts,\n         le,\n@@ -749,6 +750,7 @@ symbols! {\n         more_struct_aliases,\n         movbe_target_feature,\n         move_ref_pattern,\n+        move_size_limit,\n         mul,\n         mul_assign,\n         mul_with_overflow,"}, {"sha": "fff23db3351e8d26a02a63a2edf2f6c834fdf84a", "filename": "src/test/ui/async-await/large_moves.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -1,4 +1,6 @@\n #![deny(large_assignments)]\n+#![feature(large_assignments)]\n+#![move_size_limit = \"1000\"]\n // build-fail\n \n // edition:2018"}, {"sha": "476f5875beb3b047db5465a5afbab858dbe7e4b9", "filename": "src/test/ui/async-await/large_moves.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Flarge_moves.stderr?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -1,5 +1,5 @@\n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:7:13\n+  --> $DIR/large_moves.rs:9:13\n    |\n LL |       let x = async {\n    |  _____________^\n@@ -17,19 +17,19 @@ LL | #![deny(large_assignments)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:13:14\n+  --> $DIR/large_moves.rs:15:14\n    |\n LL |     let z = (x, 42);\n    |              ^ value moved from here\n \n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:13:13\n+  --> $DIR/large_moves.rs:15:13\n    |\n LL |     let z = (x, 42);\n    |             ^^^^^^^ value moved from here\n \n error: moving 10024 bytes\n-  --> $DIR/large_moves.rs:15:13\n+  --> $DIR/large_moves.rs:17:13\n    |\n LL |     let a = z.0;\n    |             ^^^ value moved from here"}, {"sha": "7e9e574bfa08f43dbbf7fa0f9d961d64a33fc78c", "filename": "src/test/ui/feature-gates/feature-gate-large-assignments.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.rs?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -0,0 +1,5 @@\n+// check that `move_size_limit is feature-gated\n+\n+#![move_size_limit = \"42\"] //~ ERROR the `#[move_size_limit]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "8ddc3043e966c5dc1bd78cee272be5cb49d9357e", "filename": "src/test/ui/feature-gates/feature-gate-large-assignments.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2f217902675d8ad29ecb79a8c153b485d85cb7b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2f217902675d8ad29ecb79a8c153b485d85cb7b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-large-assignments.stderr?ref=a2f217902675d8ad29ecb79a8c153b485d85cb7b", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[move_size_limit]` attribute is an experimental feature\n+  --> $DIR/feature-gate-large-assignments.rs:3:1\n+   |\n+LL | #![move_size_limit = \"42\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83518 <https://github.com/rust-lang/rust/issues/83518> for more information\n+   = help: add `#![feature(large_assignments)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}