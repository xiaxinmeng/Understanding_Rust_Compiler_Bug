{"sha": "3b69d1b941d61250735923f0cf957e1e3d86c4b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNjlkMWI5NDFkNjEyNTA3MzU5MjNmMGNmOTU3ZTFlM2Q4NmM0YjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-23T09:27:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-23T19:43:58Z"}, "message": "Rollup merge of #22490 - nagisa:inline-args, r=alexcrichton", "tree": {"sha": "20291b577f944e5ce2a6861cd08aaa4b4c0e23d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20291b577f944e5ce2a6861cd08aaa4b4c0e23d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b69d1b941d61250735923f0cf957e1e3d86c4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b69d1b941d61250735923f0cf957e1e3d86c4b4", "html_url": "https://github.com/rust-lang/rust/commit/3b69d1b941d61250735923f0cf957e1e3d86c4b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b69d1b941d61250735923f0cf957e1e3d86c4b4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b4b90130fea3b2f5a8a52f2d19a3ace1c464efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4b90130fea3b2f5a8a52f2d19a3ace1c464efb", "html_url": "https://github.com/rust-lang/rust/commit/3b4b90130fea3b2f5a8a52f2d19a3ace1c464efb"}, {"sha": "c9d0967383d67e2b51c222b17eb5502a8746aad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d0967383d67e2b51c222b17eb5502a8746aad0", "html_url": "https://github.com/rust-lang/rust/commit/c9d0967383d67e2b51c222b17eb5502a8746aad0"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "bb7fd40ced55f18ed587e1a850139650c4247077", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=3b69d1b941d61250735923f0cf957e1e3d86c4b4", "patch": "@@ -861,7 +861,7 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n             encode_attributes(rbml_w, &ast_method.attrs);\n             let scheme = ty::lookup_item_type(ecx.tcx, m.def_id);\n             let any_types = !scheme.generics.types.is_empty();\n-            if any_types || is_default_impl || should_inline(&ast_method.attrs) {\n+            if any_types || is_default_impl || attr::requests_inline(&ast_method.attrs) {\n                 encode_inlined_item(ecx, rbml_w, IIImplItemRef(local_def(parent_id),\n                                                                ast_item_opt.unwrap()));\n             }\n@@ -954,14 +954,6 @@ const FN_FAMILY: char = 'f';\n const STATIC_METHOD_FAMILY: char = 'F';\n const METHOD_FAMILY: char = 'h';\n \n-fn should_inline(attrs: &[ast::Attribute]) -> bool {\n-    use syntax::attr::*;\n-    match find_inline_attr(attrs) {\n-        InlineNone | InlineNever  => false,\n-        InlineHint | InlineAlways => true\n-    }\n-}\n-\n // Encodes the inherent implementations of a structure, enumeration, or trait.\n fn encode_inherent_implementations(ecx: &EncodeContext,\n                                    rbml_w: &mut Encoder,\n@@ -1067,7 +1059,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_name(rbml_w, item.ident.name);\n         encode_path(rbml_w, path);\n         encode_attributes(rbml_w, &item.attrs);\n-        if tps_len > 0 || should_inline(&item.attrs) {\n+        if tps_len > 0 || attr::requests_inline(&item.attrs) {\n             encode_inlined_item(ecx, rbml_w, IIItemRef(item));\n         }\n         if tps_len == 0 {"}, {"sha": "4fd5a02b05216a4293eb404cbbc8cce2df2db56a", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=3b69d1b941d61250735923f0cf957e1e3d86c4b4", "patch": "@@ -26,20 +26,10 @@ use syntax::abi;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{is_local, PostExpansionMethod};\n-use syntax::attr::{InlineAlways, InlineHint, InlineNever, InlineNone};\n use syntax::attr;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n-// Returns true if the given set of attributes contains the `#[inline]`\n-// attribute.\n-fn attributes_specify_inlining(attrs: &[ast::Attribute]) -> bool {\n-    match attr::find_inline_attr(attrs) {\n-        InlineNone | InlineNever => false,\n-        InlineAlways | InlineHint => true,\n-    }\n-}\n-\n // Returns true if the given set of generics implies that the item it's\n // associated with must be inlined.\n fn generics_require_inlining(generics: &ast::Generics) -> bool {\n@@ -50,7 +40,7 @@ fn generics_require_inlining(generics: &ast::Generics) -> bool {\n // monomorphized or it was marked with `#[inline]`. This will only return\n // true for functions.\n fn item_might_be_inlined(item: &ast::Item) -> bool {\n-    if attributes_specify_inlining(&item.attrs) {\n+    if attr::requests_inline(&item.attrs) {\n         return true\n     }\n \n@@ -65,7 +55,7 @@ fn item_might_be_inlined(item: &ast::Item) -> bool {\n \n fn method_might_be_inlined(tcx: &ty::ctxt, method: &ast::Method,\n                            impl_src: ast::DefId) -> bool {\n-    if attributes_specify_inlining(&method.attrs) ||\n+    if attr::requests_inline(&method.attrs) ||\n         generics_require_inlining(method.pe_generics()) {\n         return true\n     }\n@@ -201,8 +191,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                 match *impl_item {\n                     ast::MethodImplItem(ref method) => {\n                         if generics_require_inlining(method.pe_generics()) ||\n-                                attributes_specify_inlining(\n-                                    &method.attrs) {\n+                                attr::requests_inline(&method.attrs) {\n                             true\n                         } else {\n                             let impl_did = self.tcx"}, {"sha": "35b6ca7f0f5114770e90555d0b47926c6bcad8d4", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=3b69d1b941d61250735923f0cf957e1e3d86c4b4", "patch": "@@ -435,7 +435,7 @@ pub fn set_inline_hint(f: ValueRef) {\n pub fn set_llvm_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) {\n     use syntax::attr::*;\n     // Set the inline hint if there is one\n-    match find_inline_attr(attrs) {\n+    match find_inline_attr(Some(ccx.sess().diagnostic()), attrs) {\n         InlineHint   => set_inline_hint(llfn),\n         InlineAlways => set_always_inline(llfn),\n         InlineNever  => set_no_inline(llfn),"}, {"sha": "4fc08c0c2b28caaccfcabe40924c848cbcf917ac", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=3b69d1b941d61250735923f0cf957e1e3d86c4b4", "patch": "@@ -292,7 +292,7 @@ pub enum InlineAttr {\n }\n \n /// Determine what `#[inline]` attribute is present in `attrs`, if any.\n-pub fn find_inline_attr(attrs: &[Attribute]) -> InlineAttr {\n+pub fn find_inline_attr(diagnostic: Option<&SpanHandler>, attrs: &[Attribute]) -> InlineAttr {\n     // FIXME (#2809)---validate the usage of #[inline] and #[inline]\n     attrs.iter().fold(InlineNone, |ia,attr| {\n         match attr.node.value.node {\n@@ -302,12 +302,16 @@ pub fn find_inline_attr(attrs: &[Attribute]) -> InlineAttr {\n             }\n             MetaList(ref n, ref items) if *n == \"inline\" => {\n                 mark_used(attr);\n-                if contains_name(&items[..], \"always\") {\n+                if items.len() != 1 {\n+                    diagnostic.map(|d|{ d.span_err(attr.span, \"expected one argument\"); });\n+                    InlineNone\n+                } else if contains_name(&items[..], \"always\") {\n                     InlineAlways\n                 } else if contains_name(&items[..], \"never\") {\n                     InlineNever\n                 } else {\n-                    InlineHint\n+                    diagnostic.map(|d|{ d.span_err((*items[0]).span, \"invalid argument\"); });\n+                    InlineNone\n                 }\n             }\n             _ => ia\n@@ -317,7 +321,7 @@ pub fn find_inline_attr(attrs: &[Attribute]) -> InlineAttr {\n \n /// True if `#[inline]` or `#[inline(always)]` is present in `attrs`.\n pub fn requests_inline(attrs: &[Attribute]) -> bool {\n-    match find_inline_attr(attrs) {\n+    match find_inline_attr(None, attrs) {\n         InlineHint | InlineAlways => true,\n         InlineNone | InlineNever => false,\n     }"}, {"sha": "ad89087d660201ab865620e0ce76aae566c95b6c", "filename": "src/test/compile-fail/invalid-inline.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b69d1b941d61250735923f0cf957e1e3d86c4b4/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs?ref=3b69d1b941d61250735923f0cf957e1e3d86c4b4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![allow(dead_code)]\n+\n+#[inline(please_no)] //~ ERROR invalid argument\n+fn a() {\n+}\n+\n+#[inline(please,no)] //~ ERROR expected one argument\n+fn b() {\n+}\n+\n+#[inline()] //~ ERROR expected one argument\n+fn c() {\n+}\n+\n+fn main() {}"}]}