{"sha": "df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNjA4ZTcxMGMzZjU5MjU3NGQzZGZhMGQyZjg0MDJhYTRkMzNkY2I=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-10T19:11:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:24Z"}, "message": "Rename suspend to yield", "tree": {"sha": "6507f7fae4a575428a26b56cd22be1cfb9f4eed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6507f7fae4a575428a26b56cd22be1cfb9f4eed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "html_url": "https://github.com/rust-lang/rust/commit/df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66fc6dfbb6dd947426951aac0ed01ff9afed391a", "url": "https://api.github.com/repos/rust-lang/rust/commits/66fc6dfbb6dd947426951aac0ed01ff9afed391a", "html_url": "https://github.com/rust-lang/rust/commit/66fc6dfbb6dd947426951aac0ed01ff9afed391a"}], "stats": {"total": 194, "additions": 97, "deletions": 97}, "files": [{"sha": "fb205655df29c36f4cacee0b2ffa4d72411d882a", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             hir::ExprUnary(_, ref e) |\n             hir::ExprField(ref e, _) |\n             hir::ExprTupField(ref e, _) |\n-            hir::ExprSuspend(ref e) |\n+            hir::ExprYield(ref e) |\n             hir::ExprRepeat(ref e, _) => {\n                 self.straightline(expr, pred, Some(&**e).into_iter())\n             }"}, {"sha": "9e4117033724f412310bec12d7e6dc7c16575b7f", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -1045,7 +1045,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n                 visitor.visit_expr(input)\n             }\n         }\n-        ExprSuspend(ref subexpression) => {\n+        ExprYield(ref subexpression) => {\n             visitor.visit_expr(subexpression);\n         }\n         ExprImplArg(id) => {"}, {"sha": "3aa7149933cbae2b114cff797c469b306c053814", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -2108,7 +2108,7 @@ impl<'a> LoweringContext<'a> {\n                 let expr = opt_expr.as_ref().map(|x| self.lower_expr(x)).unwrap_or_else(|| {\n                     self.expr(e.span, hir::ExprTup(hir_vec![]), ThinVec::new())\n                 });\n-                hir::ExprSuspend(P(expr))\n+                hir::ExprYield(P(expr))\n             }\n \n             ExprKind::ImplArg => {"}, {"sha": "40a745bcebfb3c13d2f4aac5e45d2f3c5322213a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -1069,8 +1069,8 @@ pub enum Expr_ {\n     /// to be repeated; the second is the number of times to repeat it.\n     ExprRepeat(P<Expr>, BodyId),\n \n-    /// A suspension point for generators\n-    ExprSuspend(P<Expr>),\n+    /// A suspension point for generators. This is `yield <expr>` in Rust.\n+    ExprYield(P<Expr>),\n \n     /// The argument to a generator\n     ExprImplArg(NodeId),"}, {"sha": "d513719146282a6b70028569d1fbbb7584c7d94b", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -1461,8 +1461,8 @@ impl<'a> State<'a> {\n \n                 self.pclose()?;\n             }\n-            hir::ExprSuspend(ref expr) => {\n-                word(&mut self.s, \"suspend \")?;\n+            hir::ExprYield(ref expr) => {\n+                word(&mut self.s, \"yield \")?;\n                 self.print_expr(&expr)?;\n             }\n             hir::ExprImplArg(_) => {"}, {"sha": "39fa0cb44d09d1e6ff348c0029b5929b2bbe7bf3", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -573,7 +573,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::E\n                 hir::ExprBreak(..)      |\n                 hir::ExprAgain(..)      |\n                 hir::ExprRet(..)        |\n-                hir::ExprSuspend(..)    |\n+                hir::ExprYield(..)    |\n                 hir::ExprImplArg(..)    |\n                 hir::ExprInlineAsm(..)  |\n                 hir::ExprRepeat(..)     |\n@@ -654,7 +654,7 @@ impl_stable_hash_for!(enum hir::Expr_ {\n     ExprInlineAsm(asm, inputs, outputs),\n     ExprStruct(path, fields, base),\n     ExprRepeat(val, times),\n-    ExprSuspend(val),\n+    ExprYield(val),\n     ExprImplArg(id)\n });\n "}, {"sha": "63100f4c11a2ccf9fb68b39ae24a5f3de9ece4ea", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -58,7 +58,7 @@ for mir::Terminator<'tcx> {\n             mir::TerminatorKind::Unreachable |\n             mir::TerminatorKind::Drop { .. } |\n             mir::TerminatorKind::DropAndReplace { .. } |\n-            mir::TerminatorKind::Suspend { .. } |\n+            mir::TerminatorKind::Yield { .. } |\n             mir::TerminatorKind::Call { .. } => false,\n         };\n \n@@ -164,7 +164,7 @@ for mir::TerminatorKind<'tcx> {\n                 target.hash_stable(hcx, hasher);\n                 unwind.hash_stable(hcx, hasher);\n             }\n-            mir::TerminatorKind::Suspend { ref value,\n+            mir::TerminatorKind::Yield { ref value,\n                                         resume,\n                                         drop } => {\n                 value.hash_stable(hcx, hasher);"}, {"sha": "29f201f84c995a959a2cfe86bef4fd5b496aeb95", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -144,7 +144,7 @@ for ty::UpvarCapture<'tcx> {\n \n impl_stable_hash_for!(struct ty::GenSig<'tcx> {\n     impl_arg_ty,\n-    suspend_ty,\n+    yield_ty,\n     return_ty\n });\n "}, {"sha": "1154c82cd2edf08ff171e19277c0c07b2dd979d7", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -525,7 +525,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_expr(&base);\n             }\n \n-            hir::ExprSuspend(ref value) => {\n+            hir::ExprYield(ref value) => {\n                 self.consume_expr(&value);\n             }\n "}, {"sha": "98e742c694e9f4f6eb89832c4d8dfbca4a625e1d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -470,7 +470,7 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprAgain(_) | hir::ExprLit(_) | hir::ExprRet(..) |\n       hir::ExprBlock(..) | hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) |\n-      hir::ExprInlineAsm(..) | hir::ExprBox(..) | hir::ExprSuspend(..) |\n+      hir::ExprInlineAsm(..) | hir::ExprBox(..) | hir::ExprYield(..) |\n       hir::ExprType(..) | hir::ExprPath(hir::QPath::TypeRelative(..)) => {\n           intravisit::walk_expr(ir, expr);\n       }\n@@ -1129,7 +1129,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprCast(ref e, _) |\n           hir::ExprType(ref e, _) |\n           hir::ExprUnary(_, ref e) |\n-          hir::ExprSuspend(ref e) |\n+          hir::ExprYield(ref e) |\n           hir::ExprRepeat(ref e, _) => {\n             self.propagate_through_expr(&e, succ)\n           }\n@@ -1420,7 +1420,7 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprBreak(..) | hir::ExprAgain(..) | hir::ExprLit(_) |\n       hir::ExprBlock(..) | hir::ExprAddrOf(..) |\n       hir::ExprStruct(..) | hir::ExprRepeat(..) | hir::ExprImplArg(_) |\n-      hir::ExprClosure(..) | hir::ExprPath(_) | hir::ExprSuspend(..) |\n+      hir::ExprClosure(..) | hir::ExprPath(_) | hir::ExprYield(..) |\n       hir::ExprBox(..) | hir::ExprType(..) => {\n         intravisit::walk_expr(this, expr);\n       }"}, {"sha": "92883ca1b11aeef73de72b8ed2a456a4e21c5e42", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -620,7 +620,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           hir::ExprAddrOf(..) | hir::ExprCall(..) |\n           hir::ExprAssign(..) | hir::ExprAssignOp(..) |\n           hir::ExprClosure(..) | hir::ExprRet(..) |\n-          hir::ExprUnary(..) | hir::ExprSuspend(..) |\n+          hir::ExprUnary(..) | hir::ExprYield(..) |\n           hir::ExprMethodCall(..) | hir::ExprCast(..) |\n           hir::ExprArray(..) | hir::ExprTup(..) | hir::ExprIf(..) |\n           hir::ExprBinary(..) | hir::ExprWhile(..) |"}, {"sha": "b8b8476d54b467021034cb9950444bd4685bb045", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -1158,7 +1158,7 @@ impl<'tcx> Visitor<'tcx> for YieldFinder {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n-        if let hir::ExprSuspend(..) = expr.node {\n+        if let hir::ExprYield(..) = expr.node {\n             self.0 = true;\n         }\n "}, {"sha": "2c500aa9c6fe903ce1f9e443e2f50d8b8ef31286", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -104,8 +104,8 @@ pub struct Mir<'tcx> {\n     /// Return type of the function.\n     pub return_ty: Ty<'tcx>,\n \n-    /// Suspend type of the function, if it is a generator.\n-    pub suspend_ty: Option<Ty<'tcx>>,\n+    /// Yield type of the function, if it is a generator.\n+    pub yield_ty: Option<Ty<'tcx>>,\n \n     /// Generator drop glue\n     pub generator_drop: Option<Box<Mir<'tcx>>>,\n@@ -153,7 +153,7 @@ impl<'tcx> Mir<'tcx> {\n                visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n                promoted: IndexVec<Promoted, Mir<'tcx>>,\n                return_ty: Ty<'tcx>,\n-               suspend_ty: Option<Ty<'tcx>>,\n+               yield_ty: Option<Ty<'tcx>>,\n                local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n                arg_count: usize,\n                upvar_decls: Vec<UpvarDecl>,\n@@ -169,7 +169,7 @@ impl<'tcx> Mir<'tcx> {\n             visibility_scopes,\n             promoted,\n             return_ty,\n-            suspend_ty,\n+            yield_ty,\n             generator_drop: None,\n             generator_layout: None,\n             local_decls,\n@@ -287,7 +287,7 @@ impl_stable_hash_for!(struct Mir<'tcx> {\n     visibility_scopes,\n     promoted,\n     return_ty,\n-    suspend_ty,\n+    yield_ty,\n     generator_drop,\n     generator_layout,\n     local_decls,\n@@ -590,7 +590,7 @@ pub enum TerminatorKind<'tcx> {\n     },\n \n     /// A suspend point\n-    Suspend {\n+    Yield {\n         /// The value to return\n         value: Operand<'tcx>,\n         /// Where to resume to\n@@ -638,8 +638,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 slice::ref_slice(t).into_cow(),\n             Call { destination: None, cleanup: Some(ref c), .. } => slice::ref_slice(c).into_cow(),\n             Call { destination: None, cleanup: None, .. } => (&[]).into_cow(),\n-            Suspend { resume: t, drop: Some(c), .. } => vec![t, c].into_cow(),\n-            Suspend { resume: ref t, drop: None, .. } => slice::ref_slice(t).into_cow(),\n+            Yield { resume: t, drop: Some(c), .. } => vec![t, c].into_cow(),\n+            Yield { resume: ref t, drop: None, .. } => slice::ref_slice(t).into_cow(),\n             DropAndReplace { target, unwind: Some(unwind), .. } |\n             Drop { target, unwind: Some(unwind), .. } => {\n                 vec![target, unwind].into_cow()\n@@ -667,8 +667,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Call { destination: Some((_, ref mut t)), cleanup: None, .. } => vec![t],\n             Call { destination: None, cleanup: Some(ref mut c), .. } => vec![c],\n             Call { destination: None, cleanup: None, .. } => vec![],\n-            Suspend { resume: ref mut t, drop: Some(ref mut c), .. } => vec![t, c],\n-            Suspend { resume: ref mut t, drop: None, .. } => vec![t],\n+            Yield { resume: ref mut t, drop: Some(ref mut c), .. } => vec![t, c],\n+            Yield { resume: ref mut t, drop: None, .. } => vec![t],\n             DropAndReplace { ref mut target, unwind: Some(ref mut unwind), .. } |\n             Drop { ref mut target, unwind: Some(ref mut unwind), .. } => vec![target, unwind],\n             DropAndReplace { ref mut target, unwind: None, .. } |\n@@ -750,7 +750,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Return => write!(fmt, \"return\"),\n             GeneratorDrop => write!(fmt, \"generator_drop\"),\n             Resume => write!(fmt, \"resume\"),\n-            Suspend { ref value, .. } => write!(fmt, \"_1 = suspend({:?})\", value),\n+            Yield { ref value, .. } => write!(fmt, \"_1 = suspend({:?})\", value),\n             Unreachable => write!(fmt, \"unreachable\"),\n             Drop { ref location, .. } => write!(fmt, \"drop({:?})\", location),\n             DropAndReplace { ref location, ref value, .. } =>\n@@ -818,9 +818,9 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Call { destination: Some(_), cleanup: None, .. } => vec![\"return\".into_cow()],\n             Call { destination: None, cleanup: Some(_), .. } => vec![\"unwind\".into_cow()],\n             Call { destination: None, cleanup: None, .. } => vec![],\n-            Suspend { drop: Some(_), .. } =>\n+            Yield { drop: Some(_), .. } =>\n                 vec![\"resume\".into_cow(), \"drop\".into_cow()],\n-            Suspend { drop: None, .. } => vec![\"resume\".into_cow()],\n+            Yield { drop: None, .. } => vec![\"resume\".into_cow()],\n             DropAndReplace { unwind: None, .. } |\n             Drop { unwind: None, .. } => vec![\"return\".into_cow()],\n             DropAndReplace { unwind: Some(_), .. } |\n@@ -1526,7 +1526,7 @@ impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n             visibility_scopes: self.visibility_scopes.clone(),\n             promoted: self.promoted.fold_with(folder),\n             return_ty: self.return_ty.fold_with(folder),\n-            suspend_ty: self.suspend_ty.fold_with(folder),\n+            yield_ty: self.yield_ty.fold_with(folder),\n             generator_drop: self.generator_drop.fold_with(folder),\n             generator_layout: self.generator_layout.fold_with(folder),\n             local_decls: self.local_decls.fold_with(folder),\n@@ -1542,7 +1542,7 @@ impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n         self.basic_blocks.visit_with(visitor) ||\n         self.generator_drop.visit_with(visitor) ||\n         self.generator_layout.visit_with(visitor) ||\n-        self.suspend_ty.visit_with(visitor) ||\n+        self.yield_ty.visit_with(visitor) ||\n         self.promoted.visit_with(visitor)     ||\n         self.return_ty.visit_with(visitor)    ||\n         self.local_decls.visit_with(visitor)\n@@ -1665,7 +1665,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 target,\n                 unwind,\n             },\n-            Suspend { ref value, resume, drop } => Suspend {\n+            Yield { ref value, resume, drop } => Yield {\n                 value: value.fold_with(folder),\n                 resume: resume,\n                 drop: drop,\n@@ -1719,7 +1719,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Drop { ref location, ..} => location.visit_with(visitor),\n             DropAndReplace { ref location, ref value, ..} =>\n                 location.visit_with(visitor) || value.visit_with(visitor),\n-            Suspend { ref value, ..} =>\n+            Yield { ref value, ..} =>\n                 value.visit_with(visitor),\n             Call { ref func, ref args, ref destination, .. } => {\n                 let dest = if let Some((ref loc, _)) = *destination {"}, {"sha": "325c87fded61a1bfd00b278873478ce81b34c335", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -448,7 +448,7 @@ macro_rules! make_mir_visitor {\n                         cleanup.map(|t| self.visit_branch(block, t));\n                     }\n \n-                    TerminatorKind::Suspend { ref $($mutability)* value,\n+                    TerminatorKind::Yield { ref $($mutability)* value,\n                                               resume,\n                                               drop } => {\n                         self.visit_operand(value, source_location);"}, {"sha": "91d6fac26f1bbc2c674d8b5f0940eb94982c994c", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -1156,7 +1156,7 @@ fn confirm_generator_candidate<'cx, 'gcx, 'tcx>(\n     let gen_def_id = tcx.lang_items.gen_trait().unwrap();\n \n     // Note: we unwrap the binder here but re-create it below (1)\n-    let ty::Binder((trait_ref, suspend_ty, return_ty)) =\n+    let ty::Binder((trait_ref, yield_ty, return_ty)) =\n         tcx.generator_trait_ref_and_outputs(gen_def_id,\n                                             obligation.predicate.trait_ref.self_ty(),\n                                             gen_sig);\n@@ -1165,7 +1165,7 @@ fn confirm_generator_candidate<'cx, 'gcx, 'tcx>(\n     let ty = if name == Symbol::intern(\"Return\") {\n         return_ty\n     } else if name == Symbol::intern(\"Yield\") {\n-        suspend_ty\n+        yield_ty\n     } else {\n         bug!()\n     };"}, {"sha": "f0b812ff9687d0cce260feaf0c9b42947b397277", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             def_id: fn_trait_def_id,\n             substs: self.mk_substs_trait(self_ty, &[sig.skip_binder().impl_arg_ty]),\n         };\n-        ty::Binder((trait_ref, sig.skip_binder().suspend_ty, sig.skip_binder().return_ty))\n+        ty::Binder((trait_ref, sig.skip_binder().yield_ty, sig.skip_binder().return_ty))\n     }\n \n     pub fn impl_is_default(self, node_item_def_id: DefId) -> bool {"}, {"sha": "21a98bceedff3bea6589098c88e2b60897324581", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -2030,7 +2030,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir::ExprBox(..) |\n             hir::ExprAddrOf(..) |\n             hir::ExprBinary(..) |\n-            hir::ExprSuspend(..) |\n+            hir::ExprYield(..) |\n             hir::ExprCast(..) => {\n                 false\n             }"}, {"sha": "c70831cd551cf9f96c7c5413adb1696e7853f901", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -304,11 +304,11 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&(self.impl_arg_ty, self.suspend_ty, self.return_ty))\n-            .map(|(impl_arg_ty, suspend_ty, return_ty)| {\n+        tcx.lift(&(self.impl_arg_ty, self.yield_ty, self.return_ty))\n+            .map(|(impl_arg_ty, yield_ty, return_ty)| {\n                 ty::GenSig {\n                     impl_arg_ty,\n-                    suspend_ty,\n+                    yield_ty,\n                     return_ty,\n                 }\n             })\n@@ -638,14 +638,14 @@ impl<'tcx> TypeFoldable<'tcx> for ty::GenSig<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::GenSig {\n             impl_arg_ty: self.impl_arg_ty.fold_with(folder),\n-            suspend_ty: self.suspend_ty.fold_with(folder),\n+            yield_ty: self.yield_ty.fold_with(folder),\n             return_ty: self.return_ty.fold_with(folder),\n         }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.impl_arg_ty.visit_with(visitor) ||\n-        self.suspend_ty.visit_with(visitor) ||\n+        self.yield_ty.visit_with(visitor) ||\n         self.return_ty.visit_with(visitor)\n     }\n }"}, {"sha": "bd5f6a8e262542b3e0b75f3ef28f127a50bf90cf", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -643,7 +643,7 @@ impl<'a, 'tcx> ProjectionTy<'tcx> {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct GenSig<'tcx> {\n     pub impl_arg_ty: Ty<'tcx>,\n-    pub suspend_ty: Ty<'tcx>,\n+    pub yield_ty: Ty<'tcx>,\n     pub return_ty: Ty<'tcx>,\n }\n \n@@ -652,8 +652,8 @@ pub type PolyGenSig<'tcx> = Binder<GenSig<'tcx>>;\n \n #[allow(warnings)]\n impl<'tcx> PolyGenSig<'tcx> {\n-    pub fn suspend_ty(&self) -> ty::Binder<Ty<'tcx>> {\n-        self.map_bound_ref(|sig| sig.suspend_ty)\n+    pub fn yield_ty(&self) -> ty::Binder<Ty<'tcx>> {\n+        self.map_bound_ref(|sig| sig.yield_ty)\n     }\n     pub fn return_ty(&self) -> ty::Binder<Ty<'tcx>> {\n         self.map_bound_ref(|sig| sig.return_ty)"}, {"sha": "659a5e60364bfc5628b27eec0977b4ff1d583f6b", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Return { .. } |\n             ExprKind::Literal { .. } |\n             ExprKind::InlineAsm { .. } |\n-            ExprKind::Suspend { .. } |\n+            ExprKind::Yield { .. } |\n             ExprKind::Call { .. } => {\n                 // these are not lvalues, so we need to make a temporary.\n                 debug_assert!(match Category::of(&expr.kind) {"}, {"sha": "024b1a3483acf53eadb0b0bf2947fa0cc1fb5439", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 block = unpack!(this.stmt_expr(block, expr));\n                 block.and(this.unit_rvalue())\n             }\n-            ExprKind::Suspend { value } => {\n+            ExprKind::Yield { value } => {\n                 let value = unpack!(block = this.as_operand(block, scope, value));\n                 let impl_arg_ty = this.impl_arg_ty.unwrap();\n                 block = unpack!(this.build_drop(block,\n@@ -248,7 +248,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     impl_arg_ty));\n                 let resume = this.cfg.start_new_block();\n                 let cleanup = this.generator_drop_cleanup(expr_span);\n-                this.cfg.terminate(block, source_info, TerminatorKind::Suspend {\n+                this.cfg.terminate(block, source_info, TerminatorKind::Yield {\n                     value: value,\n                     resume: resume,\n                     drop: cleanup,"}, {"sha": "7f576666dcdcf477f13f5419314715e318fb04e4", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -78,7 +78,7 @@ impl Category {\n             ExprKind::Borrow { .. } |\n             ExprKind::Assign { .. } |\n             ExprKind::AssignOp { .. } |\n-            ExprKind::Suspend { .. } |\n+            ExprKind::Yield { .. } |\n             ExprKind::InlineAsm { .. } =>\n                 Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n "}, {"sha": "ef7533e8d49e71647efbb6bc503ef986089c5fe9", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Index { .. } |\n             ExprKind::Deref { .. } |\n             ExprKind::Literal { .. } |\n-            ExprKind::Suspend { .. } |\n+            ExprKind::Yield { .. } |\n             ExprKind::ImplArg |\n             ExprKind::Field { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {"}, {"sha": "9a8c43e328638e4fb055ecf8140b618fbfacfd3b", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -119,14 +119,14 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n \n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n \n-            let (suspend_ty, impl_arg_ty, return_ty) = if body.is_generator() {\n+            let (yield_ty, impl_arg_ty, return_ty) = if body.is_generator() {\n                 let gen_sig = cx.tables().generator_sigs[&id].clone().unwrap();\n-                (Some(gen_sig.suspend_ty), Some(gen_sig.impl_arg_ty), gen_sig.return_ty)\n+                (Some(gen_sig.yield_ty), Some(gen_sig.impl_arg_ty), gen_sig.return_ty)\n             } else {\n                 (None, None, fn_sig.output())\n             };\n \n-            build::construct_fn(cx, id, arguments, abi, return_ty, suspend_ty, impl_arg_ty, body)\n+            build::construct_fn(cx, id, arguments, abi, return_ty, yield_ty, impl_arg_ty, body)\n         } else {\n             build::construct_const(cx, body_id)\n         };\n@@ -342,7 +342,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    arguments: A,\n                                    abi: Abi,\n                                    return_ty: Ty<'gcx>,\n-                                   suspend_ty: Option<Ty<'gcx>>,\n+                                   yield_ty: Option<Ty<'gcx>>,\n                                    impl_arg_ty: Option<Ty<'gcx>>,\n                                    body: &'gcx hir::Body)\n                                    -> Mir<'tcx>\n@@ -411,7 +411,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         }).collect()\n     });\n \n-    let mut mir = builder.finish(upvar_decls, return_ty, suspend_ty);\n+    let mut mir = builder.finish(upvar_decls, return_ty, yield_ty);\n     mir.spread_arg = spread_arg;\n     mir\n }\n@@ -487,7 +487,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn finish(self,\n               upvar_decls: Vec<UpvarDecl>,\n               return_ty: Ty<'tcx>,\n-              suspend_ty: Option<Ty<'tcx>>)\n+              yield_ty: Option<Ty<'tcx>>)\n               -> Mir<'tcx> {\n         for (index, block) in self.cfg.basic_blocks.iter().enumerate() {\n             if block.terminator.is_none() {\n@@ -499,7 +499,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                  self.visibility_scopes,\n                  IndexVec::new(),\n                  return_ty,\n-                 suspend_ty,\n+                 yield_ty,\n                  self.local_decls,\n                  self.arg_count,\n                  upvar_decls,"}, {"sha": "0b740e5f028344bd1a12f543464b8f78ef4955c8", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -299,7 +299,7 @@ pub(crate) fn drop_flag_effects_for_location<'a, 'tcx, F>(\n                                           move_data.rev_lookup.find(location),\n                                           |moi| callback(moi, DropFlagState::Present))\n                 }\n-                mir::TerminatorKind::Suspend { .. } => {\n+                mir::TerminatorKind::Yield { .. } => {\n                     on_lookup_result_bits(tcx, mir, move_data,\n                                           move_data.rev_lookup.find(&Mir::impl_arg_lvalue()),\n                                           |moi| callback(moi, DropFlagState::Present))"}, {"sha": "6392bde9eaeb447401f909b43fb68a8eecd7cf47", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -456,14 +456,14 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n             mir::TerminatorKind::Unreachable => {}\n             mir::TerminatorKind::Goto { ref target } |\n             mir::TerminatorKind::Assert { ref target, cleanup: None, .. } |\n-            mir::TerminatorKind::Suspend { resume: ref target, drop: None, .. } |\n+            mir::TerminatorKind::Yield { resume: ref target, drop: None, .. } |\n             mir::TerminatorKind::Drop { ref target, location: _, unwind: None } |\n             mir::TerminatorKind::DropAndReplace {\n                 ref target, value: _, location: _, unwind: None\n             } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n             }\n-            mir::TerminatorKind::Suspend { resume: ref target, drop: Some(ref drop), .. } => {\n+            mir::TerminatorKind::Yield { resume: ref target, drop: Some(ref drop), .. } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 self.propagate_bits_into_entry_set_for(in_out, changed, drop);\n             }"}, {"sha": "dba396e813980498ed0bce885a7b5c517ba42ff8", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -474,7 +474,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                 // branching terminators - these don't move anything\n             }\n \n-            TerminatorKind::Suspend { ref value,  .. } => {\n+            TerminatorKind::Yield { ref value,  .. } => {\n                 self.create_move_path(&Mir::impl_arg_lvalue());\n                 self.gather_operand(loc, value);\n             }"}, {"sha": "4a223ce61f74455965aae46527ce48aeafece7ce", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -568,7 +568,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprTup(ref fields) => ExprKind::Tuple { fields: fields.to_ref() },\n \n         hir::ExprImplArg(_) => ExprKind::ImplArg,\n-        hir::ExprSuspend(ref v) => ExprKind::Suspend { value: v.to_ref() },\n+        hir::ExprYield(ref v) => ExprKind::Yield { value: v.to_ref() },\n     };\n \n     Expr {"}, {"sha": "a2e9e5c40f945c285096b3e85e394ee2eaa2b321", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -250,7 +250,7 @@ pub enum ExprKind<'tcx> {\n         inputs: Vec<ExprRef<'tcx>>\n     },\n     ImplArg,\n-    Suspend {\n+    Yield {\n         value: ExprRef<'tcx>,\n     },\n }"}, {"sha": "472623ec20ab32f912bd4540d682193cde6d0299", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -100,7 +100,7 @@ fn find_dead_unwinds<'a, 'tcx>(\n         let location = match bb_data.terminator().kind {\n             TerminatorKind::Drop { ref location, unwind: Some(_), .. } |\n             TerminatorKind::DropAndReplace { ref location, unwind: Some(_), .. } => location,\n-            TerminatorKind::Suspend { .. } => &impl_arg,\n+            TerminatorKind::Yield { .. } => &impl_arg,\n             _ => continue,\n         };\n \n@@ -348,7 +348,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             let location = match terminator.kind {\n                 TerminatorKind::Drop { ref location, .. } |\n                 TerminatorKind::DropAndReplace { ref location, .. } => location,\n-                TerminatorKind::Suspend { .. } => &impl_arg,\n+                TerminatorKind::Yield { .. } => &impl_arg,\n                 _ => continue\n             };\n "}, {"sha": "fc5834d605332754ccd207a03b6577097f87269a", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -159,7 +159,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for TransformVisitor<'a, 'tcx> {\n                 self.return_block,\n                 Operand::Consume(Lvalue::Local(self.new_ret_local)),\n                 None)),\n-            TerminatorKind::Suspend { ref value, resume, drop } => Some((0,\n+            TerminatorKind::Yield { ref value, resume, drop } => Some((0,\n                 resume,\n                 value.clone(),\n                 drop)),\n@@ -325,7 +325,7 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     liveness::dump_mir(tcx, \"generator_liveness\", source, mir, &result);\n \n     for (block, data) in mir.basic_blocks().iter_enumerated() {\n-        if let TerminatorKind::Suspend { .. } = data.terminator().kind {\n+        if let TerminatorKind::Yield { .. } = data.terminator().kind {\n             set.union(&result.outs[block]);\n         }\n     }\n@@ -742,8 +742,8 @@ impl MirPass for StateTransform {\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     source: MirSource,\n                     mir: &mut Mir<'tcx>) {\n-        let suspend_ty = if let Some(suspend_ty) = mir.suspend_ty {\n-            suspend_ty\n+        let yield_ty = if let Some(yield_ty) = mir.yield_ty {\n+            yield_ty\n         } else {\n             // This only applies to generators\n             return\n@@ -758,7 +758,7 @@ impl MirPass for StateTransform {\n \n         let state_did = tcx.lang_items.gen_state().unwrap();\n         let state_adt_ref = tcx.adt_def(state_did);\n-        let state_substs = tcx.mk_substs([Kind::from(suspend_ty),\n+        let state_substs = tcx.mk_substs([Kind::from(yield_ty),\n             Kind::from(mir.return_ty)].iter());\n         let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n@@ -787,7 +787,7 @@ impl MirPass for StateTransform {\n         transform.visit_mir(mir);\n \n         mir.return_ty = ret_ty;\n-        mir.suspend_ty = None;\n+        mir.yield_ty = None;\n         mir.arg_count = 2;\n         mir.spread_arg = None;\n         mir.generator_layout = Some(layout);"}, {"sha": "e7ee68b104b41b34f59766ec3be6c1d2e75945e3", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         }\n \n         // Cannot inline generators which haven't been transformed yet\n-        if callee_mir.suspend_ty.is_some() {\n+        if callee_mir.yield_ty.is_some() {\n             return false;\n         }\n \n@@ -657,7 +657,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n \n         match *kind {\n             TerminatorKind::GeneratorDrop |\n-            TerminatorKind::Suspend { .. } => bug!(),\n+            TerminatorKind::Yield { .. } => bug!(),\n             TerminatorKind::Goto { ref mut target} => {\n                 *target = self.update_target(*target);\n             }"}, {"sha": "fa6bb644871dced4e11184f0bfa68d6f9eac738c", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n             TerminatorKind::Return |\n             TerminatorKind::Unreachable |\n             TerminatorKind::GeneratorDrop |\n-            TerminatorKind::Suspend { .. } |\n+            TerminatorKind::Yield { .. } |\n             TerminatorKind::SwitchInt { .. } => {\n                 /* nothing to do */\n             },"}, {"sha": "3ae0f8f2e82a28b036a0254b6b907a5a2f6f52ad", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::DropAndReplace { .. } |\n                 TerminatorKind::Resume |\n                 TerminatorKind::GeneratorDrop |\n-                TerminatorKind::Suspend { .. } |\n+                TerminatorKind::Yield { .. } |\n                 TerminatorKind::Unreachable => None,\n \n                 TerminatorKind::Return => {"}, {"sha": "38b9454f8962b6fe86fe6ed26d45a22dcc44eb12", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -512,14 +512,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-            TerminatorKind::Suspend { ref value, .. } => {\n+            TerminatorKind::Yield { ref value, .. } => {\n                 let value_ty = value.ty(mir, tcx);\n-                match mir.suspend_ty {\n-                    None => span_mirbug!(self, term, \"suspend in non-generator\"),\n+                match mir.yield_ty {\n+                    None => span_mirbug!(self, term, \"yield in non-generator\"),\n                     Some(ty) if ty != value_ty => {\n                         span_mirbug!(self,\n                             term,\n-                            \"type of suspend value is ({:?}, but the suspend type is ({:?}\",\n+                            \"type of yield value is ({:?}, but the yield type is ({:?}\",\n                             value_ty,\n                             ty);\n                     }\n@@ -657,9 +657,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     span_mirbug!(self, block, \"generator_drop in cleanup block\")\n                 }\n             }\n-            TerminatorKind::Suspend { resume, drop, .. } => {\n+            TerminatorKind::Yield { resume, drop, .. } => {\n                 if is_cleanup {\n-                    span_mirbug!(self, block, \"suspend in cleanup block\")\n+                    span_mirbug!(self, block, \"yield in cleanup block\")\n                 }\n                 self.assert_iscleanup(mir, block, resume, is_cleanup);\n                 if let Some(drop) = drop {"}, {"sha": "b85218338065255244294693e96aecb3706e9ee4", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -436,7 +436,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         hir::ExprRet(_) |\n \n         // Generator expressions\n-        hir::ExprSuspend(_) |\n+        hir::ExprYield(_) |\n         hir::ExprImplArg(_) |\n \n         // Expressions with side-effects."}, {"sha": "2e3c594e43c59aefee2f48d6cdd8caa163c53a55", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -159,7 +159,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             TerminatorKind::Call { .. } => \"TerminatorKind::Call\",\n             TerminatorKind::Assert { .. } => \"TerminatorKind::Assert\",\n             TerminatorKind::GeneratorDrop => \"TerminatorKind::GeneratorDrop\",\n-            TerminatorKind::Suspend { .. } => \"TerminatorKind::Suspend\",\n+            TerminatorKind::Yield { .. } => \"TerminatorKind::Yield\",\n         }, kind);\n         self.super_terminator_kind(block, kind, location);\n     }"}, {"sha": "559acd53a360299923e921ebf206e9a38f046b03", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -630,7 +630,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::Unreachable |\n             mir::TerminatorKind::Assert { .. } => {}\n             mir::TerminatorKind::GeneratorDrop |\n-            mir::TerminatorKind::Suspend { .. } => bug!(),\n+            mir::TerminatorKind::Yield { .. } => bug!(),\n         }\n \n         self.super_terminator_kind(block, kind, location);"}, {"sha": "8cf22e2e4fea5cd42432715187eebed3c45a3154", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -538,7 +538,7 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             sig.map_bound(|sig| {\n                 let state_did = tcx.lang_items.gen_state().unwrap();\n                 let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs = tcx.mk_substs([Kind::from(sig.suspend_ty),\n+                let state_substs = tcx.mk_substs([Kind::from(sig.yield_ty),\n                     Kind::from(sig.return_ty)].iter());\n                 let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n "}, {"sha": "9ff32bb7088017111078bc9ac681ed60f5779194", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -218,7 +218,7 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n                 TerminatorKind::GeneratorDrop |\n                 TerminatorKind::Unreachable |\n                 TerminatorKind::SwitchInt { .. } |\n-                TerminatorKind::Suspend { .. }  => {\n+                TerminatorKind::Yield { .. }  => {\n                     /* nothing to do */\n                 }\n                 TerminatorKind::Call { cleanup: unwind, .. } |"}, {"sha": "edf833a26307ec050e2655fb271e59af91d8148b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -579,7 +579,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         cleanup);\n             }\n             mir::TerminatorKind::GeneratorDrop |\n-            mir::TerminatorKind::Suspend { .. } => bug!(\"generator ops in trans\"),\n+            mir::TerminatorKind::Yield { .. } => bug!(\"generator ops in trans\"),\n         }\n     }\n "}, {"sha": "d8cedb81ac8ee38b0f98112e1dc4b5b6f29bf633", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -506,7 +506,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     ret_coercion: Option<RefCell<DynamicCoerceMany<'gcx, 'tcx>>>,\n \n-    suspend_ty: Option<Ty<'tcx>>,\n+    yield_ty: Option<Ty<'tcx>>,\n     impl_arg_ty: Option<Ty<'tcx>>,\n \n     ps: RefCell<UnsafetyState>,\n@@ -1037,7 +1037,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n             // Write the type to the impl arg id\n             fcx.write_ty(impl_arg.id, impl_arg_ty);\n \n-            fcx.suspend_ty = Some(fcx.next_ty_var(TypeVariableOrigin::TypeInference(span)));\n+            fcx.yield_ty = Some(fcx.next_ty_var(TypeVariableOrigin::TypeInference(span)));\n         }\n     }\n \n@@ -1062,7 +1062,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     let gen_ty = if can_be_generator && body.is_generator() {\n         let gen_sig = ty::GenSig {\n             impl_arg_ty: fcx.impl_arg_ty.unwrap(),\n-            suspend_ty: fcx.suspend_ty.unwrap(),\n+            yield_ty: fcx.yield_ty.unwrap(),\n             return_ty: ret_ty,\n         };\n         inherited.tables.borrow_mut().generator_sigs.insert(fn_id, Some(gen_sig));\n@@ -1750,7 +1750,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             param_env,\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n-            suspend_ty: None,\n+            yield_ty: None,\n             impl_arg_ty: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal,\n                                                      ast::CRATE_NODE_ID)),\n@@ -4008,8 +4008,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n           }\n-          hir::ExprSuspend(ref value) => {\n-            match self.suspend_ty {\n+          hir::ExprYield(ref value) => {\n+            match self.yield_ty {\n                 Some(ty) => {\n                     self.check_expr_coercable_to_type(&value, ty);\n                 }"}, {"sha": "5c397a984371615cefbf5389a92b5d7e8e2acc85", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df608e710c3f592574d3dfa0d2f8402aa4d33dcb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=df608e710c3f592574d3dfa0d2f8402aa4d33dcb", "patch": "@@ -329,7 +329,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         for (&node_id, gen_sig) in self.fcx.tables.borrow().generator_sigs.iter() {\n             let gen_sig = gen_sig.map(|s| ty::GenSig {\n                 impl_arg_ty: self.resolve(&s.impl_arg_ty, &node_id),\n-                suspend_ty: self.resolve(&s.suspend_ty, &node_id),\n+                yield_ty: self.resolve(&s.yield_ty, &node_id),\n                 return_ty: self.resolve(&s.return_ty, &node_id),\n             });\n             self.tables.generator_sigs.insert(node_id, gen_sig);"}]}