{"sha": "c1a9cf42b400bab235d2d1c11d35270879d8fd60", "node_id": "C_kwDOAAsO6NoAKGMxYTljZjQyYjQwMGJhYjIzNWQyZDFjMTFkMzUyNzA4NzlkOGZkNjA", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-09-30T17:53:32Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-09-30T17:53:32Z"}, "message": "make query take `(LocalDefId, DefId)`", "tree": {"sha": "6d21f9382cffc8f09a6420c74c5d3b383d8503be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d21f9382cffc8f09a6420c74c5d3b383d8503be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a9cf42b400bab235d2d1c11d35270879d8fd60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a9cf42b400bab235d2d1c11d35270879d8fd60", "html_url": "https://github.com/rust-lang/rust/commit/c1a9cf42b400bab235d2d1c11d35270879d8fd60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a9cf42b400bab235d2d1c11d35270879d8fd60/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831f4402aa8531544d3589158e56d5f5f5d51373", "url": "https://api.github.com/repos/rust-lang/rust/commits/831f4402aa8531544d3589158e56d5f5f5d51373", "html_url": "https://github.com/rust-lang/rust/commit/831f4402aa8531544d3589158e56d5f5f5d51373"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "c47fdaefd60e9370c7407ed6c2cb42889e0c2b42", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=c1a9cf42b400bab235d2d1c11d35270879d8fd60", "patch": "@@ -1046,9 +1046,8 @@ fn check_impl_items_against_trait<'tcx>(\n             hir::ImplItemKind::Const(..) => {\n                 // Find associated const definition.\n                 let _ = tcx.compare_assoc_const_impl_item_with_trait_item((\n-                    &ty_impl_item,\n-                    &ty_trait_item,\n-                    impl_trait_ref,\n+                    impl_item.id.def_id.def_id,\n+                    ty_impl_item.trait_item_def_id.unwrap(),\n                 ));\n             }\n             hir::ImplItemKind::Fn(..) => {"}, {"sha": "75e56cd4be78e37d3c417d337160fe8ef743aec6", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c1a9cf42b400bab235d2d1c11d35270879d8fd60", "patch": "@@ -1,6 +1,6 @@\n use super::potentially_plural_count;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n-use hir::def_id::DefId;\n+use hir::def_id::{DefId, LocalDefId};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -1303,14 +1303,17 @@ fn compare_generic_param_kinds<'tcx>(\n /// Use `tcx.compare_assoc_const_impl_item_with_trait_item` instead\n pub(crate) fn raw_compare_const_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    (impl_c, trait_c, impl_trait_ref): (&ty::AssocItem, &ty::AssocItem, ty::TraitRef<'tcx>),\n+    (impl_const_item_def, trait_const_item_def): (LocalDefId, DefId),\n ) -> Result<(), ErrorGuaranteed> {\n+    let impl_const_item = tcx.associated_item(impl_const_item_def);\n+    let trait_const_item = tcx.associated_item(trait_const_item_def);\n+    let impl_trait_ref = tcx.impl_trait_ref(impl_const_item.container_id(tcx)).unwrap();\n     debug!(\"compare_const_impl(impl_trait_ref={:?})\", impl_trait_ref);\n \n-    let impl_c_span = tcx.def_span(impl_c.def_id);\n+    let impl_c_span = tcx.def_span(impl_const_item_def.to_def_id());\n \n     tcx.infer_ctxt().enter(|infcx| {\n-        let param_env = tcx.param_env(impl_c.def_id);\n+        let param_env = tcx.param_env(impl_const_item_def.to_def_id());\n         let ocx = ObligationCtxt::new(&infcx);\n \n         // The below is for the most part highly similar to the procedure\n@@ -1322,18 +1325,18 @@ pub(crate) fn raw_compare_const_impl<'tcx>(\n \n         // Create a parameter environment that represents the implementation's\n         // method.\n-        let impl_c_hir_id = tcx.hir().local_def_id_to_hir_id(impl_c.def_id.expect_local());\n+        let impl_c_hir_id = tcx.hir().local_def_id_to_hir_id(impl_const_item_def);\n \n         // Compute placeholder form of impl and trait const tys.\n-        let impl_ty = tcx.type_of(impl_c.def_id);\n-        let trait_ty = tcx.bound_type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n+        let impl_ty = tcx.type_of(impl_const_item_def.to_def_id());\n+        let trait_ty = tcx.bound_type_of(trait_const_item_def).subst(tcx, trait_to_impl_substs);\n         let mut cause = ObligationCause::new(\n             impl_c_span,\n             impl_c_hir_id,\n             ObligationCauseCode::CompareImplItemObligation {\n-                impl_item_def_id: impl_c.def_id.expect_local(),\n-                trait_item_def_id: trait_c.def_id,\n-                kind: impl_c.kind,\n+                impl_item_def_id: impl_const_item_def,\n+                trait_item_def_id: trait_const_item_def,\n+                kind: impl_const_item.kind,\n             },\n         );\n \n@@ -1357,24 +1360,24 @@ pub(crate) fn raw_compare_const_impl<'tcx>(\n                 );\n \n                 // Locate the Span containing just the type of the offending impl\n-                match tcx.hir().expect_impl_item(impl_c.def_id.expect_local()).kind {\n+                match tcx.hir().expect_impl_item(impl_const_item_def).kind {\n                     ImplItemKind::Const(ref ty, _) => cause.span = ty.span,\n-                    _ => bug!(\"{:?} is not a impl const\", impl_c),\n+                    _ => bug!(\"{:?} is not a impl const\", impl_const_item),\n                 }\n \n                 let mut diag = struct_span_err!(\n                     tcx.sess,\n                     cause.span,\n                     E0326,\n                     \"implemented const `{}` has an incompatible type for trait\",\n-                    trait_c.name\n+                    trait_const_item.name\n                 );\n \n-                let trait_c_span = trait_c.def_id.as_local().map(|trait_c_def_id| {\n+                let trait_c_span = trait_const_item_def.as_local().map(|trait_c_def_id| {\n                     // Add a label to the Span containing just the type of the const\n                     match tcx.hir().expect_trait_item(trait_c_def_id).kind {\n                         TraitItemKind::Const(ref ty, _) => ty.span,\n-                        _ => bug!(\"{:?} is not a trait const\", trait_c),\n+                        _ => bug!(\"{:?} is not a trait const\", trait_const_item),\n                     }\n                 });\n \n@@ -1402,10 +1405,8 @@ pub(crate) fn raw_compare_const_impl<'tcx>(\n \n         // FIXME return `ErrorReported` if region obligations error?\n         let outlives_environment = OutlivesEnvironment::new(param_env);\n-        infcx.check_region_obligations_and_report_errors(\n-            impl_c.def_id.expect_local(),\n-            &outlives_environment,\n-        );\n+        infcx\n+            .check_region_obligations_and_report_errors(impl_const_item_def, &outlives_environment);\n         maybe_error_reported\n     })\n }"}, {"sha": "10dc441b187a3d22162f27766cab886e781ee67e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c1a9cf42b400bab235d2d1c11d35270879d8fd60", "patch": "@@ -2102,8 +2102,8 @@ rustc_queries! {\n     }\n \n     query compare_assoc_const_impl_item_with_trait_item(\n-        key: (&'tcx ty::AssocItem, &'tcx ty::AssocItem, ty::TraitRef<'tcx>)\n+        key: (LocalDefId, DefId)\n     ) -> Result<(), ErrorGuaranteed> {\n-        desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0.def_id) }\n+        desc { |tcx| \"checking assoc const `{}` has the same type as trait item\", tcx.def_path_str(key.0.to_def_id()) }\n     }\n }"}, {"sha": "ff3cdde75a418d41d1fa9ea341705392d3d999af", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=c1a9cf42b400bab235d2d1c11d35270879d8fd60", "patch": "@@ -184,15 +184,11 @@ fn resolve_associated_item<'tcx>(\n             // error has already been/will be emitted elsewhere).\n             if leaf_def.item.kind == ty::AssocKind::Const\n                 && trait_item_id != leaf_def.item.def_id\n-                && leaf_def.item.def_id.is_local()\n+                && let Some(leaf_def_item) = leaf_def.item.def_id.as_local()\n             {\n-                let impl_item = tcx.associated_item(leaf_def.item.def_id);\n-                let trait_item = tcx.associated_item(trait_item_id);\n-                let impl_trait_ref = tcx.impl_trait_ref(impl_item.container_id(tcx)).unwrap();\n                 tcx.compare_assoc_const_impl_item_with_trait_item((\n-                    impl_item,\n-                    trait_item,\n-                    impl_trait_ref,\n+                    leaf_def_item,\n+                    trait_item_id,\n                 ))?;\n             }\n "}, {"sha": "9fd51e75b0e4c97e7579d077abc5e918267511aa", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a9cf42b400bab235d2d1c11d35270879d8fd60/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=c1a9cf42b400bab235d2d1c11d35270879d8fd60", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(let_chains)]\n #![feature(control_flow_enum)]\n #![feature(never_type)]\n #![feature(box_patterns)]"}]}