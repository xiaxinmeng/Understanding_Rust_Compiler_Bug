{"sha": "1bc7f8f49f813e2fa77b0e3727697dc98cf967e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYzdmOGY0OWY4MTNlMmZhNzdiMGUzNzI3Njk3ZGM5OGNmOTY3ZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-23T12:17:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-23T12:17:01Z"}, "message": "Auto merge of #37347 - srinivasreddy:llvm, r=eddyb\n\nrun rustfmt on librustc_llvm folder", "tree": {"sha": "51505dd99ae5738fb9770dd4887854a822ffd5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51505dd99ae5738fb9770dd4887854a822ffd5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7", "html_url": "https://github.com/rust-lang/rust/commit/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87af2324bb43ca5fa2689da0560d116399b3456a", "url": "https://api.github.com/repos/rust-lang/rust/commits/87af2324bb43ca5fa2689da0560d116399b3456a", "html_url": "https://github.com/rust-lang/rust/commit/87af2324bb43ca5fa2689da0560d116399b3456a"}, {"sha": "9972d17ecf9406a9ec5508b1d45c383e52ce79b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9972d17ecf9406a9ec5508b1d45c383e52ce79b4", "html_url": "https://github.com/rust-lang/rust/commit/9972d17ecf9406a9ec5508b1d45c383e52ce79b4"}], "stats": {"total": 822, "additions": 314, "deletions": 508}, "files": [{"sha": "35140d5ab4ae64108dddd366c1f2fc6a82db851f", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=1bc7f8f49f813e2fa77b0e3727697dc98cf967e7", "patch": "@@ -22,22 +22,21 @@ fn main() {\n \n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config = env::var_os(\"LLVM_CONFIG\")\n-                          .map(PathBuf::from)\n-                          .unwrap_or_else(|| {\n-                              if let Some(dir) = env::var_os(\"CARGO_TARGET_DIR\")\n-                                      .map(PathBuf::from) {\n-                                  let to_test = dir.parent()\n-                                                   .unwrap()\n-                                                   .parent()\n-                                                   .unwrap()\n-                                                   .join(&target)\n-                                                   .join(\"llvm/bin/llvm-config\");\n-                                  if Command::new(&to_test).output().is_ok() {\n-                                      return to_test;\n-                                  }\n-                              }\n-                              PathBuf::from(\"llvm-config\")\n-                          });\n+        .map(PathBuf::from)\n+        .unwrap_or_else(|| {\n+            if let Some(dir) = env::var_os(\"CARGO_TARGET_DIR\").map(PathBuf::from) {\n+                let to_test = dir.parent()\n+                    .unwrap()\n+                    .parent()\n+                    .unwrap()\n+                    .join(&target)\n+                    .join(\"llvm/bin/llvm-config\");\n+                if Command::new(&to_test).output().is_ok() {\n+                    return to_test;\n+                }\n+            }\n+            PathBuf::from(\"llvm-config\")\n+        });\n \n     println!(\"cargo:rerun-if-changed={}\", llvm_config.display());\n \n@@ -66,8 +65,8 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n-    let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\",\n-                               \"jsbackend\"];\n+    let optional_components =\n+        [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\"];\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses.\n@@ -149,7 +148,7 @@ fn main() {\n             // that off\n             lib.trim_right_matches(\".lib\")\n         } else {\n-            continue\n+            continue;\n         };\n \n         // Don't need or want this library, but LLVM's CMake build system\n@@ -158,7 +157,7 @@ fn main() {\n         // library and it otherwise may just pull in extra dependencies on\n         // libedit which we don't want\n         if name == \"LLVMLineEditor\" {\n-            continue\n+            continue;\n         }\n \n         let kind = if name.starts_with(\"LLVM\") {\n@@ -179,7 +178,7 @@ fn main() {\n     cmd.arg(\"--ldflags\");\n     for lib in output(&mut cmd).split_whitespace() {\n         if lib.starts_with(\"-LIBPATH:\") {\n-                println!(\"cargo:rustc-link-search=native={}\", &lib[9..]);\n+            println!(\"cargo:rustc-link-search=native={}\", &lib[9..]);\n         } else if is_crossed {\n             if lib.starts_with(\"-L\") {\n                 println!(\"cargo:rustc-link-search=native={}\","}, {"sha": "8767f03b3e756286ad0e9e183c9b05ec9dfc0545", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=1bc7f8f49f813e2fa77b0e3727697dc98cf967e7", "patch": "@@ -33,8 +33,7 @@ pub enum OptimizationDiagnosticKind {\n impl OptimizationDiagnosticKind {\n     pub fn describe(self) -> &'static str {\n         match self {\n-            OptimizationRemark |\n-            OptimizationRemarkOther => \"remark\",\n+            OptimizationRemark | OptimizationRemarkOther => \"remark\",\n             OptimizationMissed => \"missed\",\n             OptimizationAnalysis => \"analysis\",\n             OptimizationAnalysisFPCommute => \"floating-point\",\n@@ -130,18 +129,14 @@ impl Diagnostic {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationAnalysis, di))\n             }\n \n-\n             Dk::OptimizationRemarkAnalysisFPCommute => {\n-                Optimization(OptimizationDiagnostic::unpack(\n-                    OptimizationAnalysisFPCommute, di))\n+                Optimization(OptimizationDiagnostic::unpack(OptimizationAnalysisFPCommute, di))\n             }\n \n             Dk::OptimizationRemarkAnalysisAliasing => {\n-                Optimization(OptimizationDiagnostic::unpack(\n-                    OptimizationAnalysisAliasing, di))\n+                Optimization(OptimizationDiagnostic::unpack(OptimizationAnalysisAliasing, di))\n             }\n \n-\n             Dk::OptimizationFailure => {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationFailure, di))\n             }"}, {"sha": "78a9d67ed77006b04bb4d084f5fed83aab6741ea", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 257, "deletions": 417, "changes": 674, "blob_url": "https://github.com/rust-lang/rust/blob/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=1bc7f8f49f813e2fa77b0e3727697dc98cf967e7", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use debuginfo::{DIBuilderRef, DIDescriptor,\n-                DIFile, DILexicalBlock, DISubprogram, DIType,\n-                DIBasicType, DIDerivedType, DICompositeType, DIScope,\n-                DIVariable, DIGlobalVariable, DIArray, DISubrange,\n-                DITemplateTypeParameter, DIEnumerator, DINameSpace};\n+use debuginfo::{DIBuilderRef, DIDescriptor, DIFile, DILexicalBlock, DISubprogram, DIType,\n+                DIBasicType, DIDerivedType, DICompositeType, DIScope, DIVariable,\n+                DIGlobalVariable, DIArray, DISubrange, DITemplateTypeParameter, DIEnumerator,\n+                DINameSpace};\n \n use libc::{c_uint, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong, c_void};\n@@ -44,7 +43,7 @@ pub enum CallConv {\n     X86FastcallCallConv = 65,\n     X86_64_SysV = 78,\n     X86_64_Win64 = 79,\n-    X86_VectorCall = 80\n+    X86_VectorCall = 80,\n }\n \n /// LLVMRustLinkage\n@@ -78,9 +77,9 @@ pub enum DiagnosticSeverity {\n #[derive(Copy, Clone)]\n #[repr(C)]\n pub enum DLLStorageClass {\n-  Default   = 0,\n-  DllImport = 1, /* Function to be imported from DLL. */\n-  DllExport = 2, /* Function to be accessible from DLL. */\n+    Default = 0,\n+    DllImport = 1, // Function to be imported from DLL.\n+    DllExport = 2, // Function to be accessible from DLL.\n }\n \n bitflags! {\n@@ -180,38 +179,38 @@ pub enum RealPredicate {\n #[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(C)]\n pub enum TypeKind {\n-    Void      = 0,\n-    Half      = 1,\n-    Float     = 2,\n-    Double    = 3,\n-    X86_FP80  = 4,\n-    FP128     = 5,\n+    Void = 0,\n+    Half = 1,\n+    Float = 2,\n+    Double = 3,\n+    X86_FP80 = 4,\n+    FP128 = 5,\n     PPC_FP128 = 6,\n-    Label     = 7,\n-    Integer   = 8,\n-    Function  = 9,\n-    Struct    = 10,\n-    Array     = 11,\n-    Pointer   = 12,\n-    Vector    = 13,\n-    Metadata  = 14,\n-    X86_MMX   = 15,\n-    Token     = 16,\n+    Label = 7,\n+    Integer = 8,\n+    Function = 9,\n+    Struct = 10,\n+    Array = 11,\n+    Pointer = 12,\n+    Vector = 13,\n+    Metadata = 14,\n+    X86_MMX = 15,\n+    Token = 16,\n }\n \n /// LLVMAtomicRmwBinOp\n #[derive(Copy, Clone)]\n #[repr(C)]\n pub enum AtomicRmwBinOp {\n     AtomicXchg = 0,\n-    AtomicAdd  = 1,\n-    AtomicSub  = 2,\n-    AtomicAnd  = 3,\n+    AtomicAdd = 1,\n+    AtomicSub = 2,\n+    AtomicAnd = 3,\n     AtomicNand = 4,\n-    AtomicOr   = 5,\n-    AtomicXor  = 6,\n-    AtomicMax  = 7,\n-    AtomicMin  = 8,\n+    AtomicOr = 5,\n+    AtomicXor = 6,\n+    AtomicMax = 7,\n+    AtomicMin = 8,\n     AtomicUMax = 9,\n     AtomicUMin = 10,\n }\n@@ -227,7 +226,7 @@ pub enum AtomicOrdering {\n     Acquire = 4,\n     Release = 5,\n     AcquireRelease = 6,\n-    SequentiallyConsistent = 7\n+    SequentiallyConsistent = 7,\n }\n \n /// LLVMRustSynchronizationScope\n@@ -429,7 +428,7 @@ pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_v\n \n pub mod debuginfo {\n     pub use self::DIDescriptorFlags::*;\n-    use super::{MetadataRef};\n+    use super::MetadataRef;\n \n     #[allow(missing_copy_implementations)]\n     pub enum DIBuilder_opaque {}\n@@ -455,22 +454,22 @@ pub mod debuginfo {\n \n     #[derive(Copy, Clone)]\n     pub enum DIDescriptorFlags {\n-      FlagPrivate            = 1 << 0,\n-      FlagProtected          = 1 << 1,\n-      FlagFwdDecl            = 1 << 2,\n-      FlagAppleBlock         = 1 << 3,\n-      FlagBlockByrefStruct   = 1 << 4,\n-      FlagVirtual            = 1 << 5,\n-      FlagArtificial         = 1 << 6,\n-      FlagExplicit           = 1 << 7,\n-      FlagPrototyped         = 1 << 8,\n-      FlagObjcClassComplete  = 1 << 9,\n-      FlagObjectPointer      = 1 << 10,\n-      FlagVector             = 1 << 11,\n-      FlagStaticMember       = 1 << 12,\n-      FlagIndirectVariable   = 1 << 13,\n-      FlagLValueReference    = 1 << 14,\n-      FlagRValueReference    = 1 << 15\n+        FlagPrivate = 1 << 0,\n+        FlagProtected = 1 << 1,\n+        FlagFwdDecl = 1 << 2,\n+        FlagAppleBlock = 1 << 3,\n+        FlagBlockByrefStruct = 1 << 4,\n+        FlagVirtual = 1 << 5,\n+        FlagArtificial = 1 << 6,\n+        FlagExplicit = 1 << 7,\n+        FlagPrototyped = 1 << 8,\n+        FlagObjcClassComplete = 1 << 9,\n+        FlagObjectPointer = 1 << 10,\n+        FlagVector = 1 << 11,\n+        FlagStaticMember = 1 << 12,\n+        FlagIndirectVariable = 1 << 13,\n+        FlagLValueReference = 1 << 14,\n+        FlagRValueReference = 1 << 15,\n     }\n }\n \n@@ -487,22 +486,17 @@ pub mod debuginfo {\n // set of the libraries we need to link to LLVM for.\n #[link(name = \"rustllvm\", kind = \"static\")]\n #[cfg(not(cargobuild))]\n-extern {}\n+extern \"C\" {}\n \n #[linked_from = \"rustllvm\"] // not quite true but good enough\n-extern {\n-    /* Create and destroy contexts. */\n+extern \"C\" {\n+    // Create and destroy contexts.\n     pub fn LLVMContextCreate() -> ContextRef;\n     pub fn LLVMContextDispose(C: ContextRef);\n-    pub fn LLVMGetMDKindIDInContext(C: ContextRef,\n-                                    Name: *const c_char,\n-                                    SLen: c_uint)\n-                                    -> c_uint;\n+    pub fn LLVMGetMDKindIDInContext(C: ContextRef, Name: *const c_char, SLen: c_uint) -> c_uint;\n \n-    /* Create and destroy modules. */\n-    pub fn LLVMModuleCreateWithNameInContext(ModuleID: *const c_char,\n-                                             C: ContextRef)\n-                                             -> ModuleRef;\n+    // Create and destroy modules.\n+    pub fn LLVMModuleCreateWithNameInContext(ModuleID: *const c_char, C: ContextRef) -> ModuleRef;\n     pub fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;\n     pub fn LLVMCloneModule(M: ModuleRef) -> ModuleRef;\n     pub fn LLVMDisposeModule(M: ModuleRef);\n@@ -527,25 +521,24 @@ extern {\n     /// See llvm::LLVMType::getContext.\n     pub fn LLVMGetTypeContext(Ty: TypeRef) -> ContextRef;\n \n-    /* Operations on integer types */\n+    // Operations on integer types\n     pub fn LLVMInt1TypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMInt8TypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMInt16TypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMInt32TypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMInt64TypeInContext(C: ContextRef) -> TypeRef;\n-    pub fn LLVMIntTypeInContext(C: ContextRef, NumBits: c_uint)\n-                                -> TypeRef;\n+    pub fn LLVMIntTypeInContext(C: ContextRef, NumBits: c_uint) -> TypeRef;\n \n     pub fn LLVMGetIntTypeWidth(IntegerTy: TypeRef) -> c_uint;\n \n-    /* Operations on real types */\n+    // Operations on real types\n     pub fn LLVMFloatTypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMDoubleTypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMX86FP80TypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMFP128TypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMPPCFP128TypeInContext(C: ContextRef) -> TypeRef;\n \n-    /* Operations on function types */\n+    // Operations on function types\n     pub fn LLVMFunctionType(ReturnType: TypeRef,\n                             ParamTypes: *const TypeRef,\n                             ParamCount: c_uint,\n@@ -556,96 +549,79 @@ extern {\n     pub fn LLVMCountParamTypes(FunctionTy: TypeRef) -> c_uint;\n     pub fn LLVMGetParamTypes(FunctionTy: TypeRef, Dest: *mut TypeRef);\n \n-    /* Operations on struct types */\n+    // Operations on struct types\n     pub fn LLVMStructTypeInContext(C: ContextRef,\n                                    ElementTypes: *const TypeRef,\n                                    ElementCount: c_uint,\n                                    Packed: Bool)\n                                    -> TypeRef;\n     pub fn LLVMCountStructElementTypes(StructTy: TypeRef) -> c_uint;\n-    pub fn LLVMGetStructElementTypes(StructTy: TypeRef,\n-                                     Dest: *mut TypeRef);\n+    pub fn LLVMGetStructElementTypes(StructTy: TypeRef, Dest: *mut TypeRef);\n     pub fn LLVMIsPackedStruct(StructTy: TypeRef) -> Bool;\n \n-    /* Operations on array, pointer, and vector types (sequence types) */\n+    // Operations on array, pointer, and vector types (sequence types)\n     pub fn LLVMRustArrayType(ElementType: TypeRef, ElementCount: u64) -> TypeRef;\n-    pub fn LLVMPointerType(ElementType: TypeRef, AddressSpace: c_uint)\n-                           -> TypeRef;\n-    pub fn LLVMVectorType(ElementType: TypeRef, ElementCount: c_uint)\n-                          -> TypeRef;\n+    pub fn LLVMPointerType(ElementType: TypeRef, AddressSpace: c_uint) -> TypeRef;\n+    pub fn LLVMVectorType(ElementType: TypeRef, ElementCount: c_uint) -> TypeRef;\n \n     pub fn LLVMGetElementType(Ty: TypeRef) -> TypeRef;\n     pub fn LLVMGetArrayLength(ArrayTy: TypeRef) -> c_uint;\n     pub fn LLVMGetPointerAddressSpace(PointerTy: TypeRef) -> c_uint;\n-    pub fn LLVMGetPointerToGlobal(EE: ExecutionEngineRef, V: ValueRef)\n-                                  -> *const c_void;\n+    pub fn LLVMGetPointerToGlobal(EE: ExecutionEngineRef, V: ValueRef) -> *const c_void;\n     pub fn LLVMGetVectorSize(VectorTy: TypeRef) -> c_uint;\n \n-    /* Operations on other types */\n+    // Operations on other types\n     pub fn LLVMVoidTypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMLabelTypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMRustMetadataTypeInContext(C: ContextRef) -> TypeRef;\n \n-    /* Operations on all values */\n+    // Operations on all values\n     pub fn LLVMTypeOf(Val: ValueRef) -> TypeRef;\n     pub fn LLVMGetValueName(Val: ValueRef) -> *const c_char;\n     pub fn LLVMSetValueName(Val: ValueRef, Name: *const c_char);\n     pub fn LLVMDumpValue(Val: ValueRef);\n     pub fn LLVMReplaceAllUsesWith(OldVal: ValueRef, NewVal: ValueRef);\n     pub fn LLVMSetMetadata(Val: ValueRef, KindID: c_uint, Node: ValueRef);\n \n-    /* Operations on Uses */\n+    // Operations on Uses\n     pub fn LLVMGetFirstUse(Val: ValueRef) -> UseRef;\n     pub fn LLVMGetNextUse(U: UseRef) -> UseRef;\n     pub fn LLVMGetUser(U: UseRef) -> ValueRef;\n     pub fn LLVMGetUsedValue(U: UseRef) -> ValueRef;\n \n-    /* Operations on Users */\n+    // Operations on Users\n     pub fn LLVMGetNumOperands(Val: ValueRef) -> c_int;\n     pub fn LLVMGetOperand(Val: ValueRef, Index: c_uint) -> ValueRef;\n     pub fn LLVMSetOperand(Val: ValueRef, Index: c_uint, Op: ValueRef);\n \n-    /* Operations on constants of any type */\n+    // Operations on constants of any type\n     pub fn LLVMConstNull(Ty: TypeRef) -> ValueRef;\n-    /* all zeroes */\n+    // all zeroes\n     pub fn LLVMConstAllOnes(Ty: TypeRef) -> ValueRef;\n-    pub fn LLVMConstICmp(Pred: IntPredicate, V1: ValueRef, V2: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef)\n-                         -> ValueRef;\n-    /* only for isize/vector */\n+    pub fn LLVMConstICmp(Pred: IntPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef;\n+    pub fn LLVMConstFCmp(Pred: RealPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef;\n+    // only for isize/vector\n     pub fn LLVMGetUndef(Ty: TypeRef) -> ValueRef;\n     pub fn LLVMIsConstant(Val: ValueRef) -> Bool;\n     pub fn LLVMIsNull(Val: ValueRef) -> Bool;\n     pub fn LLVMIsUndef(Val: ValueRef) -> Bool;\n     pub fn LLVMConstPointerNull(Ty: TypeRef) -> ValueRef;\n \n-    /* Operations on metadata */\n-    pub fn LLVMMDStringInContext(C: ContextRef,\n-                                 Str: *const c_char,\n-                                 SLen: c_uint)\n-                                 -> ValueRef;\n-    pub fn LLVMMDNodeInContext(C: ContextRef,\n-                               Vals: *const ValueRef,\n-                               Count: c_uint)\n-                               -> ValueRef;\n-    pub fn LLVMAddNamedMetadataOperand(M: ModuleRef,\n-                                       Str: *const c_char,\n-                                       Val: ValueRef);\n+    // Operations on metadata\n+    pub fn LLVMMDStringInContext(C: ContextRef, Str: *const c_char, SLen: c_uint) -> ValueRef;\n+    pub fn LLVMMDNodeInContext(C: ContextRef, Vals: *const ValueRef, Count: c_uint) -> ValueRef;\n+    pub fn LLVMAddNamedMetadataOperand(M: ModuleRef, Str: *const c_char, Val: ValueRef);\n \n-    /* Operations on scalar constants */\n-    pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool)\n-                        -> ValueRef;\n-    pub fn LLVMConstIntOfString(IntTy: TypeRef, Text: *const c_char, Radix: u8)\n-                                -> ValueRef;\n+    // Operations on scalar constants\n+    pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool) -> ValueRef;\n+    pub fn LLVMConstIntOfString(IntTy: TypeRef, Text: *const c_char, Radix: u8) -> ValueRef;\n     pub fn LLVMConstIntOfStringAndSize(IntTy: TypeRef,\n                                        Text: *const c_char,\n                                        SLen: c_uint,\n                                        Radix: u8)\n                                        -> ValueRef;\n     pub fn LLVMConstReal(RealTy: TypeRef, N: f64) -> ValueRef;\n-    pub fn LLVMConstRealOfString(RealTy: TypeRef, Text: *const c_char)\n-                                 -> ValueRef;\n+    pub fn LLVMConstRealOfString(RealTy: TypeRef, Text: *const c_char) -> ValueRef;\n     pub fn LLVMConstRealOfStringAndSize(RealTy: TypeRef,\n                                         Text: *const c_char,\n                                         SLen: c_uint)\n@@ -654,7 +630,7 @@ extern {\n     pub fn LLVMConstIntGetSExtValue(ConstantVal: ValueRef) -> c_longlong;\n \n \n-    /* Operations on composite constants */\n+    // Operations on composite constants\n     pub fn LLVMConstStringInContext(C: ContextRef,\n                                     Str: *const c_char,\n                                     Length: c_uint,\n@@ -670,68 +646,41 @@ extern {\n                           ConstantVals: *const ValueRef,\n                           Length: c_uint)\n                           -> ValueRef;\n-    pub fn LLVMConstVector(ScalarConstantVals: *const ValueRef, Size: c_uint)\n-                           -> ValueRef;\n+    pub fn LLVMConstVector(ScalarConstantVals: *const ValueRef, Size: c_uint) -> ValueRef;\n \n-    /* Constant expressions */\n+    // Constant expressions\n     pub fn LLVMAlignOf(Ty: TypeRef) -> ValueRef;\n     pub fn LLVMSizeOf(Ty: TypeRef) -> ValueRef;\n     pub fn LLVMConstNeg(ConstantVal: ValueRef) -> ValueRef;\n     pub fn LLVMConstNSWNeg(ConstantVal: ValueRef) -> ValueRef;\n     pub fn LLVMConstNUWNeg(ConstantVal: ValueRef) -> ValueRef;\n     pub fn LLVMConstFNeg(ConstantVal: ValueRef) -> ValueRef;\n     pub fn LLVMConstNot(ConstantVal: ValueRef) -> ValueRef;\n-    pub fn LLVMConstAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                        -> ValueRef;\n-    pub fn LLVMConstNSWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstNUWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstFAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstSub(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                        -> ValueRef;\n-    pub fn LLVMConstNSWSub(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstNUWSub(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstFSub(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstMul(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                        -> ValueRef;\n-    pub fn LLVMConstNSWMul(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstNUWMul(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstFMul(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstUDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstExactSDiv(LHSConstant: ValueRef,\n-                              RHSConstant: ValueRef)\n-                              -> ValueRef;\n-    pub fn LLVMConstFDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstURem(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstSRem(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstFRem(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstAnd(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                        -> ValueRef;\n-    pub fn LLVMConstOr(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                       -> ValueRef;\n-    pub fn LLVMConstXor(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                        -> ValueRef;\n-    pub fn LLVMConstShl(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                        -> ValueRef;\n-    pub fn LLVMConstLShr(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstAShr(LHSConstant: ValueRef, RHSConstant: ValueRef)\n-                         -> ValueRef;\n+    pub fn LLVMConstAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstNSWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstNUWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstFAdd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstNSWSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstNUWSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstFSub(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstNSWMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstNUWMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstFMul(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstUDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstExactSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstFDiv(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstURem(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstSRem(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstFRem(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstAnd(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstOr(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstXor(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstShl(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstLShr(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n+    pub fn LLVMConstAShr(LHSConstant: ValueRef, RHSConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstGEP(ConstantVal: ValueRef,\n                         ConstantIndices: *const ValueRef,\n                         NumIndices: c_uint)\n@@ -740,51 +689,29 @@ extern {\n                                 ConstantIndices: *const ValueRef,\n                                 NumIndices: c_uint)\n                                 -> ValueRef;\n-    pub fn LLVMConstTrunc(ConstantVal: ValueRef, ToType: TypeRef)\n-                          -> ValueRef;\n-    pub fn LLVMConstSExt(ConstantVal: ValueRef, ToType: TypeRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstZExt(ConstantVal: ValueRef, ToType: TypeRef)\n-                         -> ValueRef;\n-    pub fn LLVMConstFPTrunc(ConstantVal: ValueRef, ToType: TypeRef)\n-                            -> ValueRef;\n-    pub fn LLVMConstFPExt(ConstantVal: ValueRef, ToType: TypeRef)\n-                          -> ValueRef;\n-    pub fn LLVMConstUIToFP(ConstantVal: ValueRef, ToType: TypeRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstSIToFP(ConstantVal: ValueRef, ToType: TypeRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstFPToUI(ConstantVal: ValueRef, ToType: TypeRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstFPToSI(ConstantVal: ValueRef, ToType: TypeRef)\n-                           -> ValueRef;\n-    pub fn LLVMConstPtrToInt(ConstantVal: ValueRef, ToType: TypeRef)\n-                             -> ValueRef;\n-    pub fn LLVMConstIntToPtr(ConstantVal: ValueRef, ToType: TypeRef)\n-                             -> ValueRef;\n-    pub fn LLVMConstBitCast(ConstantVal: ValueRef, ToType: TypeRef)\n-                            -> ValueRef;\n-    pub fn LLVMConstZExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)\n-                                  -> ValueRef;\n-    pub fn LLVMConstSExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)\n-                                  -> ValueRef;\n-    pub fn LLVMConstTruncOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)\n-                                   -> ValueRef;\n-    pub fn LLVMConstPointerCast(ConstantVal: ValueRef, ToType: TypeRef)\n-                                -> ValueRef;\n-    pub fn LLVMConstIntCast(ConstantVal: ValueRef,\n-                            ToType: TypeRef,\n-                            isSigned: Bool)\n-                            -> ValueRef;\n-    pub fn LLVMConstFPCast(ConstantVal: ValueRef, ToType: TypeRef)\n-                           -> ValueRef;\n+    pub fn LLVMConstTrunc(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstSExt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstZExt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstFPTrunc(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstFPExt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstUIToFP(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstSIToFP(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstFPToUI(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstFPToSI(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstPtrToInt(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstIntToPtr(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstZExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstSExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstTruncOrBitCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstPointerCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n+    pub fn LLVMConstIntCast(ConstantVal: ValueRef, ToType: TypeRef, isSigned: Bool) -> ValueRef;\n+    pub fn LLVMConstFPCast(ConstantVal: ValueRef, ToType: TypeRef) -> ValueRef;\n     pub fn LLVMConstSelect(ConstantCondition: ValueRef,\n                            ConstantIfTrue: ValueRef,\n                            ConstantIfFalse: ValueRef)\n                            -> ValueRef;\n-    pub fn LLVMConstExtractElement(VectorConstant: ValueRef,\n-                                   IndexConstant: ValueRef)\n-                                   -> ValueRef;\n+    pub fn LLVMConstExtractElement(VectorConstant: ValueRef, IndexConstant: ValueRef) -> ValueRef;\n     pub fn LLVMConstInsertElement(VectorConstant: ValueRef,\n                                   ElementValueConstant: ValueRef,\n                                   IndexConstant: ValueRef)\n@@ -812,7 +739,7 @@ extern {\n \n \n \n-    /* Operations on global variables, functions, and aliases (globals) */\n+    // Operations on global variables, functions, and aliases (globals)\n     pub fn LLVMGetGlobalParent(Global: ValueRef) -> ModuleRef;\n     pub fn LLVMIsDeclaration(Global: ValueRef) -> Bool;\n     pub fn LLVMRustGetLinkage(Global: ValueRef) -> Linkage;\n@@ -823,52 +750,41 @@ extern {\n     pub fn LLVMSetVisibility(Global: ValueRef, Viz: c_uint);\n     pub fn LLVMGetAlignment(Global: ValueRef) -> c_uint;\n     pub fn LLVMSetAlignment(Global: ValueRef, Bytes: c_uint);\n-    pub fn LLVMSetDLLStorageClass(V: ValueRef,\n-                                  C: DLLStorageClass);\n+    pub fn LLVMSetDLLStorageClass(V: ValueRef, C: DLLStorageClass);\n \n \n-    /* Operations on global variables */\n+    // Operations on global variables\n     pub fn LLVMIsAGlobalVariable(GlobalVar: ValueRef) -> ValueRef;\n-    pub fn LLVMAddGlobal(M: ModuleRef, Ty: TypeRef, Name: *const c_char)\n-                         -> ValueRef;\n+    pub fn LLVMAddGlobal(M: ModuleRef, Ty: TypeRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMAddGlobalInAddressSpace(M: ModuleRef,\n                                        Ty: TypeRef,\n                                        Name: *const c_char,\n                                        AddressSpace: c_uint)\n                                        -> ValueRef;\n-    pub fn LLVMGetNamedGlobal(M: ModuleRef,\n-                              Name: *const c_char)\n-                              -> ValueRef;\n-    pub fn LLVMRustGetOrInsertGlobal(M: ModuleRef,\n-                                     Name: *const c_char,\n-                                     T: TypeRef)\n-                                     -> ValueRef;\n+    pub fn LLVMGetNamedGlobal(M: ModuleRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMRustGetOrInsertGlobal(M: ModuleRef, Name: *const c_char, T: TypeRef) -> ValueRef;\n     pub fn LLVMGetFirstGlobal(M: ModuleRef) -> ValueRef;\n     pub fn LLVMGetLastGlobal(M: ModuleRef) -> ValueRef;\n     pub fn LLVMGetNextGlobal(GlobalVar: ValueRef) -> ValueRef;\n     pub fn LLVMGetPreviousGlobal(GlobalVar: ValueRef) -> ValueRef;\n     pub fn LLVMDeleteGlobal(GlobalVar: ValueRef);\n     pub fn LLVMGetInitializer(GlobalVar: ValueRef) -> ValueRef;\n-    pub fn LLVMSetInitializer(GlobalVar: ValueRef,\n-                              ConstantVal: ValueRef);\n+    pub fn LLVMSetInitializer(GlobalVar: ValueRef, ConstantVal: ValueRef);\n     pub fn LLVMIsThreadLocal(GlobalVar: ValueRef) -> Bool;\n     pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);\n     pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;\n     pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);\n     pub fn LLVMRustGetNamedValue(M: ModuleRef, Name: *const c_char) -> ValueRef;\n \n-    /* Operations on aliases */\n+    // Operations on aliases\n     pub fn LLVMAddAlias(M: ModuleRef,\n                         Ty: TypeRef,\n                         Aliasee: ValueRef,\n                         Name: *const c_char)\n                         -> ValueRef;\n \n-    /* Operations on functions */\n-    pub fn LLVMAddFunction(M: ModuleRef,\n-                           Name: *const c_char,\n-                           FunctionTy: TypeRef)\n-                           -> ValueRef;\n+    // Operations on functions\n+    pub fn LLVMAddFunction(M: ModuleRef, Name: *const c_char, FunctionTy: TypeRef) -> ValueRef;\n     pub fn LLVMGetNamedFunction(M: ModuleRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMGetFirstFunction(M: ModuleRef) -> ValueRef;\n     pub fn LLVMGetLastFunction(M: ModuleRef) -> ValueRef;\n@@ -887,19 +803,16 @@ extern {\n     pub fn LLVMRustAddDereferenceableAttr(Fn: ValueRef, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddFunctionAttribute(Fn: ValueRef, index: c_uint, PA: u64);\n     pub fn LLVMRustAddFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);\n-    pub fn LLVMRustAddFunctionAttrStringValue(Fn: ValueRef, index: c_uint,\n+    pub fn LLVMRustAddFunctionAttrStringValue(Fn: ValueRef,\n+                                              index: c_uint,\n                                               Name: *const c_char,\n                                               Value: *const c_char);\n-    pub fn LLVMRustRemoveFunctionAttributes(Fn: ValueRef,\n-                                            index: c_uint,\n-                                            attr: u64);\n-    pub fn LLVMRustRemoveFunctionAttrString(Fn: ValueRef,\n-                                            index: c_uint,\n-                                            Name: *const c_char);\n+    pub fn LLVMRustRemoveFunctionAttributes(Fn: ValueRef, index: c_uint, attr: u64);\n+    pub fn LLVMRustRemoveFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);\n     pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_uint;\n     pub fn LLVMRemoveFunctionAttr(Fn: ValueRef, val: c_uint);\n \n-    /* Operations on parameters */\n+    // Operations on parameters\n     pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;\n     pub fn LLVMGetParams(Fn: ValueRef, Params: *const ValueRef);\n     pub fn LLVMGetParam(Fn: ValueRef, Index: c_uint) -> ValueRef;\n@@ -913,7 +826,7 @@ extern {\n     pub fn LLVMGetAttribute(Arg: ValueRef) -> c_uint;\n     pub fn LLVMSetParamAlignment(Arg: ValueRef, align: c_uint);\n \n-    /* Operations on basic blocks */\n+    // Operations on basic blocks\n     pub fn LLVMBasicBlockAsValue(BB: BasicBlockRef) -> ValueRef;\n     pub fn LLVMValueIsBasicBlock(Val: ValueRef) -> Bool;\n     pub fn LLVMValueAsBasicBlock(Val: ValueRef) -> BasicBlockRef;\n@@ -936,67 +849,49 @@ extern {\n                                          -> BasicBlockRef;\n     pub fn LLVMDeleteBasicBlock(BB: BasicBlockRef);\n \n-    pub fn LLVMMoveBasicBlockAfter(BB: BasicBlockRef,\n-                                   MoveAfter: BasicBlockRef);\n+    pub fn LLVMMoveBasicBlockAfter(BB: BasicBlockRef, MoveAfter: BasicBlockRef);\n \n-    pub fn LLVMMoveBasicBlockBefore(BB: BasicBlockRef,\n-                                    MoveBefore: BasicBlockRef);\n+    pub fn LLVMMoveBasicBlockBefore(BB: BasicBlockRef, MoveBefore: BasicBlockRef);\n \n-    /* Operations on instructions */\n+    // Operations on instructions\n     pub fn LLVMGetInstructionParent(Inst: ValueRef) -> BasicBlockRef;\n     pub fn LLVMGetFirstInstruction(BB: BasicBlockRef) -> ValueRef;\n     pub fn LLVMGetLastInstruction(BB: BasicBlockRef) -> ValueRef;\n     pub fn LLVMGetNextInstruction(Inst: ValueRef) -> ValueRef;\n     pub fn LLVMGetPreviousInstruction(Inst: ValueRef) -> ValueRef;\n     pub fn LLVMInstructionEraseFromParent(Inst: ValueRef);\n \n-    /* Operations on call sites */\n+    // Operations on call sites\n     pub fn LLVMSetInstructionCallConv(Instr: ValueRef, CC: c_uint);\n     pub fn LLVMGetInstructionCallConv(Instr: ValueRef) -> c_uint;\n-    pub fn LLVMAddInstrAttribute(Instr: ValueRef,\n-                                 index: c_uint,\n-                                 IA: c_uint);\n-    pub fn LLVMRemoveInstrAttribute(Instr: ValueRef,\n-                                    index: c_uint,\n-                                    IA: c_uint);\n-    pub fn LLVMSetInstrParamAlignment(Instr: ValueRef,\n-                                      index: c_uint,\n-                                      align: c_uint);\n-    pub fn LLVMRustAddCallSiteAttribute(Instr: ValueRef,\n-                                    index: c_uint,\n-                                    Val: u64);\n-    pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: ValueRef,\n-                                                  index: c_uint,\n-                                                  bytes: u64);\n-\n-    /* Operations on call instructions (only) */\n+    pub fn LLVMAddInstrAttribute(Instr: ValueRef, index: c_uint, IA: c_uint);\n+    pub fn LLVMRemoveInstrAttribute(Instr: ValueRef, index: c_uint, IA: c_uint);\n+    pub fn LLVMSetInstrParamAlignment(Instr: ValueRef, index: c_uint, align: c_uint);\n+    pub fn LLVMRustAddCallSiteAttribute(Instr: ValueRef, index: c_uint, Val: u64);\n+    pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: ValueRef, index: c_uint, bytes: u64);\n+\n+    // Operations on call instructions (only)\n     pub fn LLVMIsTailCall(CallInst: ValueRef) -> Bool;\n     pub fn LLVMSetTailCall(CallInst: ValueRef, IsTailCall: Bool);\n \n-    /* Operations on load/store instructions (only) */\n+    // Operations on load/store instructions (only)\n     pub fn LLVMGetVolatile(MemoryAccessInst: ValueRef) -> Bool;\n     pub fn LLVMSetVolatile(MemoryAccessInst: ValueRef, volatile: Bool);\n \n-    /* Operations on phi nodes */\n+    // Operations on phi nodes\n     pub fn LLVMAddIncoming(PhiNode: ValueRef,\n                            IncomingValues: *const ValueRef,\n                            IncomingBlocks: *const BasicBlockRef,\n                            Count: c_uint);\n     pub fn LLVMCountIncoming(PhiNode: ValueRef) -> c_uint;\n-    pub fn LLVMGetIncomingValue(PhiNode: ValueRef, Index: c_uint)\n-                                -> ValueRef;\n-    pub fn LLVMGetIncomingBlock(PhiNode: ValueRef, Index: c_uint)\n-                                -> BasicBlockRef;\n+    pub fn LLVMGetIncomingValue(PhiNode: ValueRef, Index: c_uint) -> ValueRef;\n+    pub fn LLVMGetIncomingBlock(PhiNode: ValueRef, Index: c_uint) -> BasicBlockRef;\n \n-    /* Instruction builders */\n+    // Instruction builders\n     pub fn LLVMCreateBuilderInContext(C: ContextRef) -> BuilderRef;\n-    pub fn LLVMPositionBuilder(Builder: BuilderRef,\n-                               Block: BasicBlockRef,\n-                               Instr: ValueRef);\n-    pub fn LLVMPositionBuilderBefore(Builder: BuilderRef,\n-                                     Instr: ValueRef);\n-    pub fn LLVMPositionBuilderAtEnd(Builder: BuilderRef,\n-                                    Block: BasicBlockRef);\n+    pub fn LLVMPositionBuilder(Builder: BuilderRef, Block: BasicBlockRef, Instr: ValueRef);\n+    pub fn LLVMPositionBuilderBefore(Builder: BuilderRef, Instr: ValueRef);\n+    pub fn LLVMPositionBuilderAtEnd(Builder: BuilderRef, Block: BasicBlockRef);\n     pub fn LLVMGetInsertBlock(Builder: BuilderRef) -> BasicBlockRef;\n     pub fn LLVMClearInsertionPosition(Builder: BuilderRef);\n     pub fn LLVMInsertIntoBuilder(Builder: BuilderRef, Instr: ValueRef);\n@@ -1005,18 +900,15 @@ extern {\n                                          Name: *const c_char);\n     pub fn LLVMDisposeBuilder(Builder: BuilderRef);\n \n-    /* Metadata */\n+    // Metadata\n     pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: ValueRef);\n     pub fn LLVMGetCurrentDebugLocation(Builder: BuilderRef) -> ValueRef;\n     pub fn LLVMSetInstDebugLocation(Builder: BuilderRef, Inst: ValueRef);\n \n-    /* Terminators */\n+    // Terminators\n     pub fn LLVMBuildRetVoid(B: BuilderRef) -> ValueRef;\n     pub fn LLVMBuildRet(B: BuilderRef, V: ValueRef) -> ValueRef;\n-    pub fn LLVMBuildAggregateRet(B: BuilderRef,\n-                                 RetVals: *const ValueRef,\n-                                 N: c_uint)\n-                                 -> ValueRef;\n+    pub fn LLVMBuildAggregateRet(B: BuilderRef, RetVals: *const ValueRef, N: c_uint) -> ValueRef;\n     pub fn LLVMBuildBr(B: BuilderRef, Dest: BasicBlockRef) -> ValueRef;\n     pub fn LLVMBuildCondBr(B: BuilderRef,\n                            If: ValueRef,\n@@ -1028,10 +920,7 @@ extern {\n                            Else: BasicBlockRef,\n                            NumCases: c_uint)\n                            -> ValueRef;\n-    pub fn LLVMBuildIndirectBr(B: BuilderRef,\n-                               Addr: ValueRef,\n-                               NumDests: c_uint)\n-                               -> ValueRef;\n+    pub fn LLVMBuildIndirectBr(B: BuilderRef, Addr: ValueRef, NumDests: c_uint) -> ValueRef;\n     pub fn LLVMRustBuildInvoke(B: BuilderRef,\n                                Fn: ValueRef,\n                                Args: *const ValueRef,\n@@ -1055,42 +944,41 @@ extern {\n                                    ParentPad: ValueRef,\n                                    ArgCnt: c_uint,\n                                    Args: *const ValueRef,\n-                                   Name: *const c_char) -> ValueRef;\n+                                   Name: *const c_char)\n+                                   -> ValueRef;\n     pub fn LLVMRustBuildCleanupRet(B: BuilderRef,\n                                    CleanupPad: ValueRef,\n-                                   UnwindBB: BasicBlockRef) -> ValueRef;\n+                                   UnwindBB: BasicBlockRef)\n+                                   -> ValueRef;\n     pub fn LLVMRustBuildCatchPad(B: BuilderRef,\n                                  ParentPad: ValueRef,\n                                  ArgCnt: c_uint,\n                                  Args: *const ValueRef,\n-                                 Name: *const c_char) -> ValueRef;\n-    pub fn LLVMRustBuildCatchRet(B: BuilderRef,\n-                                 Pad: ValueRef,\n-                                 BB: BasicBlockRef) -> ValueRef;\n+                                 Name: *const c_char)\n+                                 -> ValueRef;\n+    pub fn LLVMRustBuildCatchRet(B: BuilderRef, Pad: ValueRef, BB: BasicBlockRef) -> ValueRef;\n     pub fn LLVMRustBuildCatchSwitch(Builder: BuilderRef,\n                                     ParentPad: ValueRef,\n                                     BB: BasicBlockRef,\n                                     NumHandlers: c_uint,\n-                                    Name: *const c_char) -> ValueRef;\n-    pub fn LLVMRustAddHandler(CatchSwitch: ValueRef,\n-                              Handler: BasicBlockRef);\n+                                    Name: *const c_char)\n+                                    -> ValueRef;\n+    pub fn LLVMRustAddHandler(CatchSwitch: ValueRef, Handler: BasicBlockRef);\n     pub fn LLVMRustSetPersonalityFn(B: BuilderRef, Pers: ValueRef);\n \n-    /* Add a case to the switch instruction */\n-    pub fn LLVMAddCase(Switch: ValueRef,\n-                       OnVal: ValueRef,\n-                       Dest: BasicBlockRef);\n+    // Add a case to the switch instruction\n+    pub fn LLVMAddCase(Switch: ValueRef, OnVal: ValueRef, Dest: BasicBlockRef);\n \n-    /* Add a destination to the indirectbr instruction */\n+    // Add a destination to the indirectbr instruction\n     pub fn LLVMAddDestination(IndirectBr: ValueRef, Dest: BasicBlockRef);\n \n-    /* Add a clause to the landing pad instruction */\n+    // Add a clause to the landing pad instruction\n     pub fn LLVMAddClause(LandingPad: ValueRef, ClauseVal: ValueRef);\n \n-    /* Set the cleanup on a landing pad instruction */\n+    // Set the cleanup on a landing pad instruction\n     pub fn LLVMSetCleanup(LandingPad: ValueRef, Val: Bool);\n \n-    /* Arithmetic */\n+    // Arithmetic\n     pub fn LLVMBuildAdd(B: BuilderRef,\n                         LHS: ValueRef,\n                         RHS: ValueRef,\n@@ -1210,7 +1098,7 @@ extern {\n                        LHS: ValueRef,\n                        RHS: ValueRef,\n                        Name: *const c_char)\n-                           -> ValueRef;\n+                       -> ValueRef;\n     pub fn LLVMBuildXor(B: BuilderRef,\n                         LHS: ValueRef,\n                         RHS: ValueRef,\n@@ -1222,29 +1110,19 @@ extern {\n                           RHS: ValueRef,\n                           Name: *const c_char)\n                           -> ValueRef;\n-    pub fn LLVMBuildNeg(B: BuilderRef, V: ValueRef, Name: *const c_char)\n-                        -> ValueRef;\n-    pub fn LLVMBuildNSWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char)\n-                           -> ValueRef;\n-    pub fn LLVMBuildNUWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char)\n-                           -> ValueRef;\n-    pub fn LLVMBuildFNeg(B: BuilderRef, V: ValueRef, Name: *const c_char)\n-                         -> ValueRef;\n-    pub fn LLVMBuildNot(B: BuilderRef, V: ValueRef, Name: *const c_char)\n-                        -> ValueRef;\n+    pub fn LLVMBuildNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildNSWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildNUWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildFNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildNot(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMRustSetHasUnsafeAlgebra(Instr: ValueRef);\n \n-    /* Memory */\n-    pub fn LLVMBuildAlloca(B: BuilderRef, Ty: TypeRef, Name: *const c_char)\n-                           -> ValueRef;\n+    // Memory\n+    pub fn LLVMBuildAlloca(B: BuilderRef, Ty: TypeRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMBuildFree(B: BuilderRef, PointerVal: ValueRef) -> ValueRef;\n-    pub fn LLVMBuildLoad(B: BuilderRef,\n-                         PointerVal: ValueRef,\n-                         Name: *const c_char)\n-                         -> ValueRef;\n+    pub fn LLVMBuildLoad(B: BuilderRef, PointerVal: ValueRef, Name: *const c_char) -> ValueRef;\n \n-    pub fn LLVMBuildStore(B: BuilderRef, Val: ValueRef, Ptr: ValueRef)\n-                          -> ValueRef;\n+    pub fn LLVMBuildStore(B: BuilderRef, Val: ValueRef, Ptr: ValueRef) -> ValueRef;\n \n     pub fn LLVMBuildGEP(B: BuilderRef,\n                         Pointer: ValueRef,\n@@ -1272,7 +1150,7 @@ extern {\n                                     Name: *const c_char)\n                                     -> ValueRef;\n \n-    /* Casts */\n+    // Casts\n     pub fn LLVMBuildTrunc(B: BuilderRef,\n                           Val: ValueRef,\n                           DestTy: TypeRef,\n@@ -1352,7 +1230,8 @@ extern {\n                          Op: Opcode,\n                          Val: ValueRef,\n                          DestTy: TypeRef,\n-                         Name: *const c_char) -> ValueRef;\n+                         Name: *const c_char)\n+                         -> ValueRef;\n     pub fn LLVMBuildPointerCast(B: BuilderRef,\n                                 Val: ValueRef,\n                                 DestTy: TypeRef,\n@@ -1369,7 +1248,7 @@ extern {\n                            Name: *const c_char)\n                            -> ValueRef;\n \n-    /* Comparisons */\n+    // Comparisons\n     pub fn LLVMBuildICmp(B: BuilderRef,\n                          Op: c_uint,\n                          LHS: ValueRef,\n@@ -1383,9 +1262,8 @@ extern {\n                          Name: *const c_char)\n                          -> ValueRef;\n \n-    /* Miscellaneous instructions */\n-    pub fn LLVMBuildPhi(B: BuilderRef, Ty: TypeRef, Name: *const c_char)\n-                        -> ValueRef;\n+    // Miscellaneous instructions\n+    pub fn LLVMBuildPhi(B: BuilderRef, Ty: TypeRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMRustBuildCall(B: BuilderRef,\n                              Fn: ValueRef,\n                              Args: *const ValueRef,\n@@ -1433,17 +1311,15 @@ extern {\n                                 Name: *const c_char)\n                                 -> ValueRef;\n \n-    pub fn LLVMBuildIsNull(B: BuilderRef, Val: ValueRef, Name: *const c_char)\n-                           -> ValueRef;\n-    pub fn LLVMBuildIsNotNull(B: BuilderRef, Val: ValueRef, Name: *const c_char)\n-                              -> ValueRef;\n+    pub fn LLVMBuildIsNull(B: BuilderRef, Val: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildIsNotNull(B: BuilderRef, Val: ValueRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMBuildPtrDiff(B: BuilderRef,\n                             LHS: ValueRef,\n                             RHS: ValueRef,\n                             Name: *const c_char)\n                             -> ValueRef;\n \n-    /* Atomic Operations */\n+    // Atomic Operations\n     pub fn LLVMRustBuildAtomicLoad(B: BuilderRef,\n                                    PointerVal: ValueRef,\n                                    Name: *const c_char,\n@@ -1480,7 +1356,7 @@ extern {\n                                     Scope: SynchronizationScope);\n \n \n-    /* Selected entries from the downcasts. */\n+    // Selected entries from the downcasts.\n     pub fn LLVMIsATerminatorInst(Inst: ValueRef) -> ValueRef;\n     pub fn LLVMIsAStoreInst(Inst: ValueRef) -> ValueRef;\n \n@@ -1490,22 +1366,18 @@ extern {\n     /// Creates target data from a target layout string.\n     pub fn LLVMCreateTargetData(StringRep: *const c_char) -> TargetDataRef;\n     /// Number of bytes clobbered when doing a Store to *T.\n-    pub fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef)\n-                               -> c_ulonglong;\n+    pub fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;\n \n     /// Number of bytes clobbered when doing a Store to *T.\n-    pub fn LLVMSizeOfTypeInBits(TD: TargetDataRef, Ty: TypeRef)\n-                                -> c_ulonglong;\n+    pub fn LLVMSizeOfTypeInBits(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;\n \n     /// Distance between successive elements in an array of T. Includes ABI padding.\n     pub fn LLVMABISizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_ulonglong;\n \n     /// Returns the preferred alignment of a type.\n-    pub fn LLVMPreferredAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)\n-                                        -> c_uint;\n+    pub fn LLVMPreferredAlignmentOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n     /// Returns the minimum alignment of a type.\n-    pub fn LLVMABIAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)\n-                                  -> c_uint;\n+    pub fn LLVMABIAlignmentOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n \n     /// Computes the byte offset of the indexed struct element for a\n     /// target.\n@@ -1515,8 +1387,7 @@ extern {\n                                -> c_ulonglong;\n \n     /// Returns the minimum alignment of a type when part of a call frame.\n-    pub fn LLVMCallFrameAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)\n-                                        -> c_uint;\n+    pub fn LLVMCallFrameAlignmentOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n \n     /// Disposes target data.\n     pub fn LLVMDisposeTargetData(TD: TargetDataRef);\n@@ -1525,8 +1396,7 @@ extern {\n     pub fn LLVMCreatePassManager() -> PassManagerRef;\n \n     /// Creates a function-by-function pass manager\n-    pub fn LLVMCreateFunctionPassManagerForModule(M: ModuleRef)\n-                                                  -> PassManagerRef;\n+    pub fn LLVMCreateFunctionPassManagerForModule(M: ModuleRef) -> PassManagerRef;\n \n     /// Disposes a pass manager.\n     pub fn LLVMDisposePassManager(PM: PassManagerRef);\n@@ -1535,8 +1405,7 @@ extern {\n     pub fn LLVMRunPassManager(PM: PassManagerRef, M: ModuleRef) -> Bool;\n \n     /// Runs the function passes on the provided function.\n-    pub fn LLVMRunFunctionPassManager(FPM: PassManagerRef, F: ValueRef)\n-                                      -> Bool;\n+    pub fn LLVMRunFunctionPassManager(FPM: PassManagerRef, F: ValueRef) -> Bool;\n \n     /// Initializes all the function passes scheduled in the manager\n     pub fn LLVMInitializeFunctionPassManager(FPM: PassManagerRef) -> Bool;\n@@ -1589,38 +1458,28 @@ extern {\n     pub fn LLVMPassManagerBuilderDispose(PMB: PassManagerBuilderRef);\n     pub fn LLVMPassManagerBuilderSetOptLevel(PMB: PassManagerBuilderRef,\n                                              OptimizationLevel: c_uint);\n-    pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef,\n-                                              Value: Bool);\n-    pub fn LLVMPassManagerBuilderSetDisableUnitAtATime(\n-        PMB: PassManagerBuilderRef,\n-        Value: Bool);\n-    pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(\n-        PMB: PassManagerBuilderRef,\n-        Value: Bool);\n-    pub fn LLVMPassManagerBuilderSetDisableSimplifyLibCalls(\n-        PMB: PassManagerBuilderRef,\n-        Value: Bool);\n-    pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(\n-        PMB: PassManagerBuilderRef,\n-        threshold: c_uint);\n-    pub fn LLVMPassManagerBuilderPopulateModulePassManager(\n-        PMB: PassManagerBuilderRef,\n-        PM: PassManagerRef);\n-\n-    pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(\n-        PMB: PassManagerBuilderRef,\n-        PM: PassManagerRef);\n-    pub fn LLVMPassManagerBuilderPopulateLTOPassManager(\n-        PMB: PassManagerBuilderRef,\n-        PM: PassManagerRef,\n-        Internalize: Bool,\n-        RunInliner: Bool);\n+    pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef, Value: Bool);\n+    pub fn LLVMPassManagerBuilderSetDisableUnitAtATime(PMB: PassManagerBuilderRef, Value: Bool);\n+    pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(PMB: PassManagerBuilderRef, Value: Bool);\n+    pub fn LLVMPassManagerBuilderSetDisableSimplifyLibCalls(PMB: PassManagerBuilderRef,\n+                                                            Value: Bool);\n+    pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(PMB: PassManagerBuilderRef,\n+                                                         threshold: c_uint);\n+    pub fn LLVMPassManagerBuilderPopulateModulePassManager(PMB: PassManagerBuilderRef,\n+                                                           PM: PassManagerRef);\n+\n+    pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(PMB: PassManagerBuilderRef,\n+                                                             PM: PassManagerRef);\n+    pub fn LLVMPassManagerBuilderPopulateLTOPassManager(PMB: PassManagerBuilderRef,\n+                                                        PM: PassManagerRef,\n+                                                        Internalize: Bool,\n+                                                        RunInliner: Bool);\n \n     /// Destroys a memory buffer.\n     pub fn LLVMDisposeMemoryBuffer(MemBuf: MemoryBufferRef);\n \n \n-    /* Stuff that's in rustllvm/ because it's not upstream yet. */\n+    // Stuff that's in rustllvm/ because it's not upstream yet.\n \n     /// Opens an object file.\n     pub fn LLVMCreateObjectFile(MemBuf: MemoryBufferRef) -> ObjectFileRef;\n@@ -1633,9 +1492,7 @@ extern {\n     pub fn LLVMDisposeSectionIterator(SI: SectionIteratorRef);\n     /// Returns true if the section iterator is at the end of the section\n     /// list:\n-    pub fn LLVMIsSectionIteratorAtEnd(ObjFile: ObjectFileRef,\n-                                      SI: SectionIteratorRef)\n-                                      -> Bool;\n+    pub fn LLVMIsSectionIteratorAtEnd(ObjFile: ObjectFileRef, SI: SectionIteratorRef) -> Bool;\n     /// Moves the section iterator to point to the next section.\n     pub fn LLVMMoveToNextSection(SI: SectionIteratorRef);\n     /// Returns the current section size.\n@@ -1645,8 +1502,7 @@ extern {\n \n     /// Reads the given file and returns it as a memory buffer. Use\n     /// LLVMDisposeMemoryBuffer() to get rid of it.\n-    pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *const c_char)\n-                                                        -> MemoryBufferRef;\n+    pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *const c_char) -> MemoryBufferRef;\n     /// Borrows the contents of the memory buffer (doesn't copy it)\n     pub fn LLVMCreateMemoryBufferWithMemoryRange(InputData: *const c_char,\n                                                  InputDataLength: size_t,\n@@ -1695,9 +1551,7 @@ extern {\n     pub fn LLVMRustVersionMajor() -> u32;\n     pub fn LLVMRustVersionMinor() -> u32;\n \n-    pub fn LLVMRustAddModuleFlag(M: ModuleRef,\n-                                 name: *const c_char,\n-                                 value: u32);\n+    pub fn LLVMRustAddModuleFlag(M: ModuleRef, name: *const c_char, value: u32);\n \n     pub fn LLVMRustDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;\n \n@@ -1751,11 +1605,11 @@ extern {\n                                             -> DIBasicType;\n \n     pub fn LLVMRustDIBuilderCreatePointerType(Builder: DIBuilderRef,\n-                                          PointeeTy: DIType,\n-                                          SizeInBits: u64,\n-                                          AlignInBits: u64,\n-                                          Name: *const c_char)\n-                                          -> DIDerivedType;\n+                                              PointeeTy: DIType,\n+                                              SizeInBits: u64,\n+                                              AlignInBits: u64,\n+                                              Name: *const c_char)\n+                                              -> DIDerivedType;\n \n     pub fn LLVMRustDIBuilderCreateStructType(Builder: DIBuilderRef,\n                                              Scope: DIDescriptor,\n@@ -1926,8 +1780,7 @@ extern {\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> PassRef;\n     pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: PassRef);\n \n-    pub fn LLVMRustHasFeature(T: TargetMachineRef,\n-                              s: *const c_char) -> bool;\n+    pub fn LLVMRustHasFeature(T: TargetMachineRef, s: *const c_char) -> bool;\n \n     pub fn LLVMRustPrintTargetCPUs(T: TargetMachineRef);\n     pub fn LLVMRustPrintTargetFeatures(T: TargetMachineRef);\n@@ -1941,11 +1794,10 @@ extern {\n                                        UseSoftFP: bool,\n                                        PositionIndependentExecutable: bool,\n                                        FunctionSections: bool,\n-                                       DataSections: bool) -> TargetMachineRef;\n+                                       DataSections: bool)\n+                                       -> TargetMachineRef;\n     pub fn LLVMRustDisposeTargetMachine(T: TargetMachineRef);\n-    pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef,\n-                                     PM: PassManagerRef,\n-                                     M: ModuleRef);\n+    pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef, PM: PassManagerRef, M: ModuleRef);\n     pub fn LLVMRustAddBuilderLibraryInfo(PMB: PassManagerBuilderRef,\n                                          M: ModuleRef,\n                                          DisableSimplifyLibCalls: bool);\n@@ -1954,7 +1806,8 @@ extern {\n                                                MergeFunctions: bool,\n                                                SLPVectorize: bool,\n                                                LoopVectorize: bool);\n-    pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef, M: ModuleRef,\n+    pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef,\n+                                  M: ModuleRef,\n                                   DisableSimplifyLibCalls: bool);\n     pub fn LLVMRustRunFunctionPassManager(PM: PassManagerRef, M: ModuleRef);\n     pub fn LLVMRustWriteOutputFile(T: TargetMachineRef,\n@@ -1963,35 +1816,25 @@ extern {\n                                    Output: *const c_char,\n                                    FileType: FileType)\n                                    -> LLVMRustResult;\n-    pub fn LLVMRustPrintModule(PM: PassManagerRef,\n-                               M: ModuleRef,\n-                               Output: *const c_char);\n+    pub fn LLVMRustPrintModule(PM: PassManagerRef, M: ModuleRef, Output: *const c_char);\n     pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);\n     pub fn LLVMRustPrintPasses();\n     pub fn LLVMRustSetNormalizedTarget(M: ModuleRef, triple: *const c_char);\n-    pub fn LLVMRustAddAlwaysInlinePass(P: PassManagerBuilderRef,\n-                                       AddLifetimes: bool);\n-    pub fn LLVMRustLinkInExternalBitcode(M: ModuleRef,\n-                                         bc: *const c_char,\n-                                         len: size_t) -> bool;\n-    pub fn LLVMRustRunRestrictionPass(M: ModuleRef,\n-                                      syms: *const *const c_char,\n-                                      len: size_t);\n+    pub fn LLVMRustAddAlwaysInlinePass(P: PassManagerBuilderRef, AddLifetimes: bool);\n+    pub fn LLVMRustLinkInExternalBitcode(M: ModuleRef, bc: *const c_char, len: size_t) -> bool;\n+    pub fn LLVMRustRunRestrictionPass(M: ModuleRef, syms: *const *const c_char, len: size_t);\n     pub fn LLVMRustMarkAllFunctionsNounwind(M: ModuleRef);\n \n     pub fn LLVMRustOpenArchive(path: *const c_char) -> ArchiveRef;\n     pub fn LLVMRustArchiveIteratorNew(AR: ArchiveRef) -> ArchiveIteratorRef;\n     pub fn LLVMRustArchiveIteratorNext(AIR: ArchiveIteratorRef) -> ArchiveChildRef;\n-    pub fn LLVMRustArchiveChildName(ACR: ArchiveChildRef,\n-                                    size: *mut size_t) -> *const c_char;\n-    pub fn LLVMRustArchiveChildData(ACR: ArchiveChildRef,\n-                                    size: *mut size_t) -> *const c_char;\n+    pub fn LLVMRustArchiveChildName(ACR: ArchiveChildRef, size: *mut size_t) -> *const c_char;\n+    pub fn LLVMRustArchiveChildData(ACR: ArchiveChildRef, size: *mut size_t) -> *const c_char;\n     pub fn LLVMRustArchiveChildFree(ACR: ArchiveChildRef);\n     pub fn LLVMRustArchiveIteratorFree(AIR: ArchiveIteratorRef);\n     pub fn LLVMRustDestroyArchive(AR: ArchiveRef);\n \n-    pub fn LLVMRustGetSectionName(SI: SectionIteratorRef,\n-                                  data: *mut *const c_char) -> size_t;\n+    pub fn LLVMRustGetSectionName(SI: SectionIteratorRef, data: *mut *const c_char) -> size_t;\n \n     pub fn LLVMRustWriteTwineToString(T: TwineRef, s: RustStringRef);\n \n@@ -2009,14 +1852,11 @@ extern {\n                                              message_out: *mut TwineRef,\n                                              instruction_out: *mut ValueRef);\n \n-    pub fn LLVMRustWriteDiagnosticInfoToString(DI: DiagnosticInfoRef,\n-                                               s: RustStringRef);\n+    pub fn LLVMRustWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);\n     pub fn LLVMGetDiagInfoSeverity(DI: DiagnosticInfoRef) -> DiagnosticSeverity;\n     pub fn LLVMRustGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n \n-    pub fn LLVMRustWriteDebugLocToString(C: ContextRef,\n-                                         DL: DebugLocRef,\n-                                         s: RustStringRef);\n+    pub fn LLVMRustWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);\n \n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: ContextRef,\n                                                  H: InlineAsmDiagHandler,\n@@ -2028,15 +1868,15 @@ extern {\n                                 NumMembers: size_t,\n                                 Members: *const RustArchiveMemberRef,\n                                 WriteSymbtab: bool,\n-                                Kind: ArchiveKind) ->\n-                                LLVMRustResult;\n+                                Kind: ArchiveKind)\n+                                -> LLVMRustResult;\n     pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,\n                                     Name: *const c_char,\n-                                    Child: ArchiveChildRef) -> RustArchiveMemberRef;\n+                                    Child: ArchiveChildRef)\n+                                    -> RustArchiveMemberRef;\n     pub fn LLVMRustArchiveMemberFree(Member: RustArchiveMemberRef);\n \n-    pub fn LLVMRustSetDataLayoutFromTargetMachine(M: ModuleRef,\n-                                                  TM: TargetMachineRef);\n+    pub fn LLVMRustSetDataLayoutFromTargetMachine(M: ModuleRef, TM: TargetMachineRef);\n     pub fn LLVMRustGetModuleDataLayout(M: ModuleRef) -> TargetDataRef;\n \n     pub fn LLVMRustBuildOperandBundleDef(Name: *const c_char,\n@@ -2057,4 +1897,4 @@ extern {\n // during llvm-config?\n #[cfg(windows)]\n #[link(name = \"ole32\")]\n-extern {}\n+extern \"C\" {}"}, {"sha": "da09bfa66d28f7cf809e68084a8c7fefa0209989", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 34, "deletions": 62, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bc7f8f49f813e2fa77b0e3727697dc98cf967e7/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=1bc7f8f49f813e2fa77b0e3727697dc98cf967e7", "patch": "@@ -31,7 +31,9 @@\n #![feature(concat_idents)]\n \n extern crate libc;\n-#[macro_use] #[no_link] extern crate rustc_bitflags;\n+#[macro_use]\n+#[no_link]\n+extern crate rustc_bitflags;\n \n pub use self::IntPredicate::*;\n pub use self::RealPredicate::*;\n@@ -68,7 +70,7 @@ impl LLVMRustResult {\n #[derive(Copy, Clone, Default, Debug)]\n pub struct Attributes {\n     regular: Attribute,\n-    dereferenceable_bytes: u64\n+    dereferenceable_bytes: u64,\n }\n \n impl Attributes {\n@@ -96,10 +98,7 @@ impl Attributes {\n         unsafe {\n             self.regular.apply_llfn(idx, llfn);\n             if self.dereferenceable_bytes != 0 {\n-                LLVMRustAddDereferenceableAttr(\n-                    llfn,\n-                    idx.as_uint(),\n-                    self.dereferenceable_bytes);\n+                LLVMRustAddDereferenceableAttr(llfn, idx.as_uint(), self.dereferenceable_bytes);\n             }\n         }\n     }\n@@ -108,27 +107,23 @@ impl Attributes {\n         unsafe {\n             self.regular.apply_callsite(idx, callsite);\n             if self.dereferenceable_bytes != 0 {\n-                LLVMRustAddDereferenceableCallSiteAttr(\n-                    callsite,\n-                    idx.as_uint(),\n-                    self.dereferenceable_bytes);\n+                LLVMRustAddDereferenceableCallSiteAttr(callsite,\n+                                                       idx.as_uint(),\n+                                                       self.dereferenceable_bytes);\n             }\n         }\n     }\n }\n \n-pub fn AddFunctionAttrStringValue(\n-    llfn: ValueRef,\n-    idx: AttributePlace,\n-    attr: &'static str,\n-    value: &'static str\n-) {\n+pub fn AddFunctionAttrStringValue(llfn: ValueRef,\n+                                  idx: AttributePlace,\n+                                  attr: &'static str,\n+                                  value: &'static str) {\n     unsafe {\n-        LLVMRustAddFunctionAttrStringValue(\n-            llfn,\n-            idx.as_uint(),\n-            attr.as_ptr() as *const _,\n-            value.as_ptr() as *const _)\n+        LLVMRustAddFunctionAttrStringValue(llfn,\n+                                           idx.as_uint(),\n+                                           attr.as_ptr() as *const _,\n+                                           value.as_ptr() as *const _)\n     }\n }\n \n@@ -233,44 +228,30 @@ pub fn set_thread_local(global: ValueRef, is_thread_local: bool) {\n \n impl Attribute {\n     pub fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef) {\n-        unsafe {\n-            LLVMRustAddFunctionAttribute(\n-                llfn, idx.as_uint(), self.bits())\n-        }\n+        unsafe { LLVMRustAddFunctionAttribute(llfn, idx.as_uint(), self.bits()) }\n     }\n \n     pub fn apply_callsite(&self, idx: AttributePlace, callsite: ValueRef) {\n-        unsafe {\n-            LLVMRustAddCallSiteAttribute(\n-                callsite, idx.as_uint(), self.bits())\n-        }\n+        unsafe { LLVMRustAddCallSiteAttribute(callsite, idx.as_uint(), self.bits()) }\n     }\n \n     pub fn unapply_llfn(&self, idx: AttributePlace, llfn: ValueRef) {\n-        unsafe {\n-            LLVMRustRemoveFunctionAttributes(\n-                llfn, idx.as_uint(), self.bits())\n-        }\n+        unsafe { LLVMRustRemoveFunctionAttributes(llfn, idx.as_uint(), self.bits()) }\n     }\n \n-    pub fn toggle_llfn(&self,\n-                       idx: AttributePlace,\n-                       llfn: ValueRef,\n-                       set: bool)\n-    {\n+    pub fn toggle_llfn(&self, idx: AttributePlace, llfn: ValueRef, set: bool) {\n         if set {\n             self.apply_llfn(idx, llfn);\n         } else {\n             self.unapply_llfn(idx, llfn);\n         }\n     }\n-\n }\n \n-/* Memory-managed interface to target data. */\n+// Memory-managed interface to target data.\n \n pub struct TargetData {\n-    pub lltd: TargetDataRef\n+    pub lltd: TargetDataRef,\n }\n \n impl Drop for TargetData {\n@@ -283,12 +264,10 @@ impl Drop for TargetData {\n \n pub fn mk_target_data(string_rep: &str) -> TargetData {\n     let string_rep = CString::new(string_rep).unwrap();\n-    TargetData {\n-        lltd: unsafe { LLVMCreateTargetData(string_rep.as_ptr()) }\n-    }\n+    TargetData { lltd: unsafe { LLVMCreateTargetData(string_rep.as_ptr()) } }\n }\n \n-/* Memory-managed interface to object files. */\n+// Memory-managed interface to object files.\n \n pub struct ObjectFile {\n     pub llof: ObjectFileRef,\n@@ -301,12 +280,10 @@ impl ObjectFile {\n             let llof = LLVMCreateObjectFile(llmb);\n             if llof as isize == 0 {\n                 // LLVMCreateObjectFile took ownership of llmb\n-                return None\n+                return None;\n             }\n \n-            Some(ObjectFile {\n-                llof: llof,\n-            })\n+            Some(ObjectFile { llof: llof })\n         }\n     }\n }\n@@ -319,10 +296,10 @@ impl Drop for ObjectFile {\n     }\n }\n \n-/* Memory-managed interface to section iterators. */\n+// Memory-managed interface to section iterators.\n \n pub struct SectionIter {\n-    pub llsi: SectionIteratorRef\n+    pub llsi: SectionIteratorRef,\n }\n \n impl Drop for SectionIter {\n@@ -334,11 +311,7 @@ impl Drop for SectionIter {\n }\n \n pub fn mk_section_iter(llof: ObjectFileRef) -> SectionIter {\n-    unsafe {\n-        SectionIter {\n-            llsi: LLVMGetSections(llof)\n-        }\n-    }\n+    unsafe { SectionIter { llsi: LLVMGetSections(llof) } }\n }\n \n /// Safe wrapper around `LLVMGetParam`, because segfaults are no fun.\n@@ -361,15 +334,16 @@ pub fn get_params(llfn: ValueRef) -> Vec<ValueRef> {\n     }\n }\n \n-pub fn build_string<F>(f: F) -> Option<String> where F: FnOnce(RustStringRef){\n+pub fn build_string<F>(f: F) -> Option<String>\n+    where F: FnOnce(RustStringRef)\n+{\n     let mut buf = RefCell::new(Vec::new());\n     f(&mut buf as RustStringRepr as RustStringRef);\n     String::from_utf8(buf.into_inner()).ok()\n }\n \n pub unsafe fn twine_to_string(tr: TwineRef) -> String {\n-    build_string(|s| LLVMRustWriteTwineToString(tr, s))\n-        .expect(\"got a non-UTF8 Twine from LLVM\")\n+    build_string(|s| LLVMRustWriteTwineToString(tr, s)).expect(\"got a non-UTF8 Twine from LLVM\")\n }\n \n pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String {\n@@ -462,9 +436,7 @@ impl OperandBundleDef {\n     pub fn new(name: &str, vals: &[ValueRef]) -> OperandBundleDef {\n         let name = CString::new(name).unwrap();\n         let def = unsafe {\n-            LLVMRustBuildOperandBundleDef(name.as_ptr(),\n-                                          vals.as_ptr(),\n-                                          vals.len() as c_uint)\n+            LLVMRustBuildOperandBundleDef(name.as_ptr(), vals.as_ptr(), vals.len() as c_uint)\n         };\n         OperandBundleDef { inner: def }\n     }"}]}