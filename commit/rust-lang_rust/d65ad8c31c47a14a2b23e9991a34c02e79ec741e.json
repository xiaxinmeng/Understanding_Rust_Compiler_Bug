{"sha": "d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NWFkOGMzMWM0N2ExNGEyYjIzZTk5OTFhMzRjMDJlNzllYzc0MWU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-14T00:04:15Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-14T00:33:04Z"}, "message": "Change decl to local in expr_for and expr_for_each\n\nSince the decl in a for or for-each loop must always be a local\ndecl, I changed the AST to express this. Fewer potential match\nfailures and \"the impossible happened\" error messages = yay!", "tree": {"sha": "1e19c486da2fd483fdc97404c8117a21985a2b76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e19c486da2fd483fdc97404c8117a21985a2b76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "html_url": "https://github.com/rust-lang/rust/commit/d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff8af3c2db5e778dc9d8dad16538a2c38a124df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8af3c2db5e778dc9d8dad16538a2c38a124df7", "html_url": "https://github.com/rust-lang/rust/commit/ff8af3c2db5e778dc9d8dad16538a2c38a124df7"}], "stats": {"total": 371, "additions": 149, "deletions": 222}, "files": [{"sha": "66ee43e991d46e9a7ac80bcc0a5bb7615fad0827", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -221,16 +221,17 @@ tag init_op {\n type initializer = rec(init_op op,\n                        @expr expr);\n \n-type local = rec(option::t[@ty] ty,\n+type local_ = rec(option::t[@ty] ty,\n                  bool infer,\n                  ident ident,\n                  option::t[initializer] init,\n                  def_id id,\n                  ann ann);\n+type local = spanned[@local_];\n \n type decl = spanned[decl_];\n tag decl_ {\n-    decl_local(@local);\n+    decl_local(@local_);\n     decl_item(@item);\n }\n \n@@ -266,8 +267,8 @@ tag expr_ {\n     expr_cast(@expr, @ty, ann);\n     expr_if(@expr, block, option::t[@expr], ann);\n     expr_while(@expr, block, ann);\n-    expr_for(@decl, @expr, block, ann);\n-    expr_for_each(@decl, @expr, block, ann);\n+    expr_for(@local, @expr, block, ann);\n+    expr_for_each(@local, @expr, block, ann);\n     expr_do_while(block, @expr, ann);\n     expr_alt(@expr, vec[arm], ann);\n     expr_block(block, ann);"}, {"sha": "62e68f1411dc102d23890cd14a5c5149cbea3306", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -1367,15 +1367,14 @@ fn parse_else_expr(&parser p) -> @ast::expr {\n     }\n }\n \n-fn parse_head_local(&parser p) -> @ast::decl {\n+fn parse_head_local(&parser p) -> @ast::local {\n     auto lo = p.get_lo_pos();\n-    let @ast::local local;\n-    if (is_word(p, \"auto\")) {\n-        local = parse_auto_local(p);\n-    } else {\n-        local = parse_typed_local(p);\n-    }\n-    ret @spanned(lo, p.get_hi_pos(), ast::decl_local(local));\n+    let @ast::local_ l = if (is_word(p, \"auto\")) {\n+                           parse_auto_local(p)\n+                         } else {\n+                           parse_typed_local(p)\n+                         };\n+    ret @spanned(lo, p.get_hi_pos(), l);\n }\n \n \n@@ -1567,7 +1566,7 @@ fn parse_pat(&parser p) -> @ast::pat {\n }\n \n fn parse_local_full(&option::t[@ast::ty] tyopt,\n-                    &parser p) -> @ast::local {\n+                    &parser p) -> @ast::local_ {\n     auto ident = parse_value_ident(p);\n     auto init = parse_initializer(p);\n     ret @rec(ty = tyopt,\n@@ -1578,12 +1577,12 @@ fn parse_local_full(&option::t[@ast::ty] tyopt,\n              ann = p.get_ann());\n }\n \n-fn parse_typed_local(&parser p) -> @ast::local {\n+fn parse_typed_local(&parser p) -> @ast::local_ {\n     auto ty = parse_ty(p);\n     ret parse_local_full(some(ty), p);\n }\n \n-fn parse_auto_local(&parser p) -> @ast::local {\n+fn parse_auto_local(&parser p) -> @ast::local_ {\n     ret parse_local_full(none[@ast::ty], p);\n }\n "}, {"sha": "eeeb55d144638baa482d5a27a857495d91cefb1e", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -247,15 +247,13 @@ fn arm_defnums(&ast::arm arm) -> vec[def_num] {\n     ret dnums;\n }\n \n-fn check_for_each(&ctx cx, &@ast::decl decl, &@ast::expr call,\n+fn check_for_each(&ctx cx, &@ast::local local, &@ast::expr call,\n                   &ast::block block, &scope sc, &vt[scope] v) {\n     visit::visit_expr(call, sc, v);\n     alt (call.node) {\n         case (ast::expr_call(?f, ?args, _)) {\n             auto data = check_call(cx, f, args, sc);\n-            auto defnum = alt (decl.node) {\n-                case (ast::decl_local(?l)) { l.id._1 }\n-            };\n+            auto defnum = local.node.id._1;\n             \n             auto new_sc = @rec(root_vars=data.root_vars,\n                                block_defnum=defnum,\n@@ -268,12 +266,10 @@ fn check_for_each(&ctx cx, &@ast::decl decl, &@ast::expr call,\n     }\n }\n \n-fn check_for(&ctx cx, &@ast::decl decl, &@ast::expr seq,\n+fn check_for(&ctx cx, &@ast::local local, &@ast::expr seq,\n              &ast::block block, &scope sc, &vt[scope] v) {\n     visit::visit_expr(seq, sc, v);\n-    auto defnum = alt (decl.node) {\n-        case (ast::decl_local(?l)) { l.id._1 }\n-    };\n+    auto defnum = local.node.id._1;\n \n     auto root = expr_root(cx, seq, false);\n     auto root_def = alt (path_def_id(cx, root.ex)) {"}, {"sha": "0230de83f1a4760bcfffa6dc75b880a98cd32429", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -39,7 +39,7 @@ tag scope {\n     scope_item(@ast::item);\n     scope_fn(ast::fn_decl, vec[ast::ty_param]);\n     scope_native_item(@ast::native_item);\n-    scope_loop(@ast::decl); // there's only 1 decl per loop.\n+    scope_loop(@ast::local_); // there's only 1 decl per loop.\n     scope_block(ast::block);\n     scope_arm(ast::arm);\n }\n@@ -341,10 +341,10 @@ fn visit_arm_with_scope(&ast::arm a, &scopes sc, &vt[scopes] v) {\n fn visit_expr_with_scope(&@ast::expr x, &scopes sc, &vt[scopes] v) {\n     auto new_sc = alt (x.node) {\n         case (ast::expr_for(?d, _, _, _)) {\n-            cons[scope](scope_loop(d), @sc)\n+            cons[scope](scope_loop(d.node), @sc)\n         }\n         case (ast::expr_for_each(?d, _, _, _)) {\n-            cons[scope](scope_loop(d), @sc)\n+            cons[scope](scope_loop(d.node), @sc)\n         }\n         case (_) { sc }\n     };\n@@ -540,14 +540,10 @@ fn lookup_in_scope(&env e, scopes sc, &span sp, &ident id, namespace ns)\n             case (scope_fn(?decl, ?ty_params)) {\n                 ret lookup_in_fn(id, decl, ty_params, ns);\n             }\n-            case (scope_loop(?d)) {\n+            case (scope_loop(?local)) {\n                 if (ns == ns_value) {\n-                    alt (d.node) {\n-                        case (ast::decl_local(?local)) {\n-                            if (str::eq(local.ident, id)) {\n-                                ret some(ast::def_local(local.id));\n-                            }\n-                        }\n+                    if (str::eq(local.ident, id)) {\n+                        ret some(ast::def_local(local.id));\n                     }\n                 }\n             }"}, {"sha": "2984fa3483aaf3cee26144d93be199b684e8ed56", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -4004,11 +4004,11 @@ fn trans_if(&@block_ctxt cx, &@ast::expr cond,\n }\n \n fn trans_for(&@block_ctxt cx,\n-             &@ast::decl decl,\n+             &@ast::local local,\n              &@ast::expr seq,\n              &ast::block body) -> result {\n     fn inner(&@block_ctxt cx,\n-             @ast::local local, ValueRef curr,\n+             @ast::local_ local, ValueRef curr,\n              ty::t t, ast::block body,\n              @block_ctxt outer_next_cx) -> result {\n \n@@ -4027,19 +4027,11 @@ fn trans_for(&@block_ctxt cx,\n         ret res(next_cx, C_nil());\n     }\n \n-\n-    let @ast::local local;\n-    alt (decl.node) {\n-        case (ast::decl_local(?loc)) {\n-            local = loc;\n-        }\n-    }\n-\n     auto next_cx = new_sub_block_ctxt(cx, \"next\");\n     auto seq_ty = ty::expr_ty(cx.fcx.lcx.ccx.tcx, seq);\n     auto seq_res = trans_expr(cx, seq);\n     auto it = iter_sequence(seq_res.bcx, seq_res.val, seq_ty,\n-                            bind inner(_, local, _, _, body, next_cx));\n+                            bind inner(_, local.node, _, _, body, next_cx));\n     it.bcx.build.Br(next_cx.llbb);\n     ret res(next_cx, it.val);\n }\n@@ -4074,13 +4066,8 @@ fn collect_upvars(&@block_ctxt cx, &ast::block bloc,\n         }\n     }\n \n-    fn walk_decl(env e, &@ast::decl decl) {\n-        alt (decl.node) {\n-            case (ast::decl_local(?local)) {\n-                e.decls.insert(local.id, ());\n-            }\n-            case (_) {}\n-        }\n+    fn walk_local(env e, &@ast::local local) {\n+        e.decls.insert(local.node.id, ());\n     }\n \n     let vec[ast::def_id] refs = [];\n@@ -4090,7 +4077,7 @@ fn collect_upvars(&@block_ctxt cx, &ast::block bloc,\n                      decls=decls,\n                      def_map=cx.fcx.lcx.ccx.tcx.def_map);\n \n-    auto visitor = @rec(visit_decl_pre = bind walk_decl(e, _),\n+    auto visitor = @rec(visit_local_pre = bind walk_local(e, _),\n                         visit_expr_pre = bind walk_expr(e, _)\n                         with walk::default_visitor());\n     walk::walk_block(*visitor, bloc);\n@@ -4108,7 +4095,7 @@ fn collect_upvars(&@block_ctxt cx, &ast::block bloc,\n }\n \n fn trans_for_each(&@block_ctxt cx,\n-                  &@ast::decl decl,\n+                  &@ast::local local,\n                   &@ast::expr seq,\n                   &ast::block body) -> result {\n     /*\n@@ -4139,14 +4126,8 @@ fn trans_for_each(&@block_ctxt cx,\n \n     auto lcx = cx.fcx.lcx;\n     // FIXME: possibly support alias-mode here?\n-    auto decl_ty = ty::mk_nil(lcx.ccx.tcx);\n-    auto decl_id;\n-    alt (decl.node) {\n-        case (ast::decl_local(?local)) {\n-            decl_ty = node_ann_type(lcx.ccx, local.ann);\n-            decl_id = local.id;\n-        }\n-    }\n+    auto decl_ty = node_ann_type(lcx.ccx, local.node.ann);\n+    auto decl_id = local.node.id;\n \n     auto upvars = collect_upvars(cx, body, decl_id);\n     auto upvar_count = vec::len[ast::def_id](upvars);\n@@ -6901,7 +6882,7 @@ fn trans_anon_obj(@block_ctxt cx, &span sp,\n     ret res(bcx, pair);\n }\n \n-fn init_local(&@block_ctxt cx, &@ast::local local) -> result {\n+fn init_local(&@block_ctxt cx, &@ast::local_ local) -> result {\n \n     // Make a note to drop this slot on the way out.\n     assert (cx.fcx.lllocals.contains_key(local.id));\n@@ -7064,7 +7045,7 @@ fn trans_block_cleanups(&@block_ctxt cx,\n     ret bcx;\n }\n \n-iter block_locals(&ast::block b) -> @ast::local {\n+iter block_locals(&ast::block b) -> @ast::local_ {\n     // FIXME: putting from inside an iter block doesn't work, so we can't\n     // use the index here.\n     for (@ast::stmt s in b.node.stmts) {\n@@ -7117,7 +7098,7 @@ fn alloc_ty(&@block_ctxt cx, &ty::t t) -> result {\n     ret res(cx, val);\n }\n \n-fn alloc_local(&@block_ctxt cx, &@ast::local local) -> result {\n+fn alloc_local(&@block_ctxt cx, &@ast::local_ local) -> result {\n     auto t = node_ann_type(cx.fcx.lcx.ccx, local.ann);\n     auto r = alloc_ty(cx, t);\n     r.bcx.fcx.lllocals.insert(local.id, r.val);\n@@ -7126,7 +7107,7 @@ fn alloc_local(&@block_ctxt cx, &@ast::local local) -> result {\n \n fn trans_block(&@block_ctxt cx, &ast::block b, &out_method output) -> result {\n     auto bcx = cx;\n-    for each (@ast::local local in block_locals(b)) {\n+    for each (@ast::local_ local in block_locals(b)) {\n         *bcx = rec(sp=local_rhs_span(local, cx.sp) with *bcx);\n         bcx = alloc_local(bcx, local).bcx;\n     }"}, {"sha": "aa0496d97bbfe2ac64179d911a65e9ff8277aabc", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -3,39 +3,7 @@ import std::option;\n import std::option::some;\n import std::option::none;\n \n-import front::ast;\n-import front::ast::ident;\n-import front::ast::def_id;\n-import front::ast::ann;\n-import front::ast::item;\n-import front::ast::_fn;\n-import front::ast::_mod;\n-import front::ast::crate;\n-import front::ast::_obj;\n-import front::ast::ty_param;\n-import front::ast::item_fn;\n-import front::ast::item_obj;\n-import front::ast::item_ty;\n-import front::ast::item_tag;\n-import front::ast::item_const;\n-import front::ast::item_mod;\n-import front::ast::item_native_mod;\n-import front::ast::expr;\n-import front::ast::elt;\n-import front::ast::field;\n-import front::ast::decl;\n-import front::ast::decl_local;\n-import front::ast::decl_item;\n-import front::ast::initializer;\n-import front::ast::local;\n-import front::ast::arm;\n-import front::ast::stmt;\n-import front::ast::stmt_decl;\n-import front::ast::stmt_expr;\n-import front::ast::block;\n-import front::ast::block_;\n-import front::ast::method;\n-\n+import front::ast::*;\n import middle::ty::expr_ann;\n \n import util::common::uistr;\n@@ -82,13 +50,8 @@ fn collect_ids_stmt(&@stmt s, @mutable vec[uint] res) -> () {\n     }\n }\n \n-fn collect_ids_decl(&@decl d, @mutable vec[uint] res) -> () {\n-    alt (d.node) {\n-        case (decl_local(?l)) {\n-            vec::push(*res, l.ann.id);\n-        }\n-        case (_) {}\n-    }\n+fn collect_ids_local(&@local l, @mutable vec[uint] res) -> () {\n+    vec::push(*res, l.node.ann.id);\n }\n \n fn node_ids_in_fn(&_fn f, &span sp, &ident i, &def_id d, &ann a,\n@@ -97,7 +60,7 @@ fn node_ids_in_fn(&_fn f, &span sp, &ident i, &def_id d, &ann a,\n     collect_ids = rec(visit_expr_pre  = bind collect_ids_expr(_,res),\n                       visit_block_pre = bind collect_ids_block(_,res),\n                       visit_stmt_pre  = bind collect_ids_stmt(_,res),\n-                      visit_decl_pre  = bind collect_ids_decl(_,res)\n+                      visit_local_pre  = bind collect_ids_local(_,res)\n                       with collect_ids);\n     walk::walk_fn(collect_ids, f, sp, i, d, a);\n }"}, {"sha": "cda6405785c7af71a62323133a964d5588c57409", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -31,15 +31,10 @@ import util::common::respan;\n type ctxt = rec(@mutable vec[constr] cs,\n                 ty::ctxt tcx);\n \n-fn collect_local(&ctxt cx, &@decl d) -> () {\n-    alt (d.node) {\n-      case (decl_local(?loc)) {\n-        log(\"collect_local: pushing \" + loc.ident);\n-        vec::push[constr](*cx.cs, respan(d.span,\n-                                         ninit(loc.ident, loc.id)));\n-      }\n-      case (_) { ret; }\n-    }\n+fn collect_local(&ctxt cx, &@local loc) -> () {\n+    log(\"collect_local: pushing \" + loc.node.ident);\n+    vec::push[constr](*cx.cs, respan(loc.span,\n+                                     ninit(loc.node.ident, loc.node.id)));\n }\n \n fn collect_pred(&ctxt cx, &@expr e) -> () {\n@@ -77,7 +72,7 @@ fn find_locals(&ty::ctxt tcx, &_fn f, &span sp, &ident i, &def_id d, &ann a)\n     -> ctxt {\n     let ctxt cx = rec(cs=@mutable vec::alloc[constr](0u), tcx=tcx);\n     auto visitor = walk::default_visitor();\n-    visitor = rec(visit_decl_pre=bind collect_local(cx,_),\n+    visitor = rec(visit_local_pre=bind collect_local(cx,_),\n                   visit_expr_pre=bind collect_pred(cx,_)\n                   with visitor);\n     walk_fn(visitor, f, sp, i, d, a);"}, {"sha": "5771b0fff7cb4d90b476e630c2848263aa42cdaa", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -170,12 +170,11 @@ fn find_pre_post_exprs(&fn_ctxt fcx, &vec[@expr] args, ann a) {\n           (nv, (vec::map[pre_and_post, postcond](h, pps))));\n }\n \n-fn find_pre_post_loop(&fn_ctxt fcx, &@decl d, &@expr index,\n+fn find_pre_post_loop(&fn_ctxt fcx, &@local l, &@expr index,\n       &block body, &ann a) -> () {\n     find_pre_post_expr(fcx, index);\n     find_pre_post_block(fcx, body);\n-    log(\"222\");\n-    auto loop_precond = declare_var(fcx, decl_lhs(d),\n+    auto loop_precond = declare_var(fcx, l.node.id,\n       seq_preconds(fcx, [expr_pp(fcx.ccx, index), block_pp(fcx.ccx, body)]));\n     auto loop_postcond = intersect_postconds\n         ([expr_postcond(fcx.ccx, index), block_postcond(fcx.ccx, body)]);\n@@ -448,11 +447,11 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) -> () {\n                 loop_postcond = empty_poststate(num_local_vars);\n             }\n \n-            log \"777\";\n+\n             set_pre_and_post(fcx.ccx, a, seq_preconds(fcx,\n-                           [block_pp(fcx.ccx, body),\n-                            expr_pp(fcx.ccx, test)]),\n-              loop_postcond);\n+                                          [block_pp(fcx.ccx, body),\n+                                           expr_pp(fcx.ccx, test)]),\n+                             loop_postcond);\n         }\n         case (expr_for(?d, ?index, ?body, ?a)) {\n             find_pre_post_loop(fcx, d, index, body, a);"}, {"sha": "2b2bfa01a42a90f759bbc4cfc486f37d239df01c", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -104,11 +104,12 @@ fn find_pre_post_state_exprs(&fn_ctxt fcx, &prestate pres,\n     ret changed;\n }\n \n-fn find_pre_post_state_loop(&fn_ctxt fcx, prestate pres, &@decl d,\n+fn find_pre_post_state_loop(&fn_ctxt fcx, prestate pres, &@local l,\n   &@expr index, &block body, &ann a) -> bool {\n     auto changed = false;\n \n     /* same issues as while */\n+    // FIXME: also want to set l as initialized, no?\n     changed = extend_prestate_ann(fcx.ccx, a, pres) || changed;\n     changed = find_pre_post_state_expr(fcx, pres, index) || changed;\n     /* in general, would need the intersection of"}, {"sha": "16d86888ef70a347f6c0a3c3f01a2fb84cd56576", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -1698,15 +1698,8 @@ fn expr_has_ty_params(&ctxt cx, &@ast::expr expr) -> bool {\n     ret ann_has_type_params(cx, expr_ann(expr));\n }\n \n-fn decl_local_ty(&ctxt cx, &@ast::decl d) -> t {\n-    alt (d.node) {\n-        case (ast::decl_local(?l)) {\n-            ret ann_to_type(cx, l.ann);\n-        }\n-        case (_) {\n-            cx.sess.bug(\"decl_local_ty called on an item decl\");\n-        }\n-    }\n+fn decl_local_ty(&ctxt cx, &@ast::local_ l) -> t {\n+    ret ann_to_type(cx, l.ann);\n }\n \n fn stmt_ann(&@ast::stmt s) -> ast::ann {"}, {"sha": "8240874bbb23c6a0cec28488a01ef63ec42e2f6b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 46, "deletions": 58, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -1084,24 +1084,19 @@ mod writeback {\n         resolve_type_vars_for_node(fcx, p.span, ty::pat_ann(p));\n     }\n \n-    fn visit_decl_pre(@fn_ctxt fcx, &@ast::decl d) {\n-        alt (d.node) {\n-            case (ast::decl_local(?l)) {\n-                auto var_id = fcx.locals.get(l.id);\n-                auto fix_rslt = ty::unify::resolve_type_var(fcx.ccx.tcx,\n-                    fcx.var_bindings, var_id);\n-                alt (fix_rslt) {\n-                    case (fix_ok(?lty)) {\n-                        write::ty_only(fcx.ccx.tcx, l.ann.id, lty);\n-                    }\n-                    case (fix_err(_)) {\n-                        fcx.ccx.tcx.sess.span_err(d.span,\n-                            \"cannot determine a type for this local \" +\n-                            \"variable\");\n-                    }\n-                }\n+    fn visit_local_pre(@fn_ctxt fcx, &@ast::local l) {\n+        auto var_id = fcx.locals.get(l.node.id);\n+        auto fix_rslt = ty::unify::resolve_type_var(fcx.ccx.tcx,\n+                                                    fcx.var_bindings, var_id);\n+        alt (fix_rslt) {\n+            case (fix_ok(?lty)) {\n+                write::ty_only(fcx.ccx.tcx, l.node.ann.id, lty);\n+            }\n+            case (fix_err(_)) {\n+                fcx.ccx.tcx.sess.span_err(l.span,\n+                   \"cannot determine a type for this local \" +\n+                                          \"variable\");\n             }\n-            case (_) { /* no-op */ }\n         }\n     }\n \n@@ -1123,7 +1118,7 @@ mod writeback {\n                          visit_expr_pre=bind visit_expr_pre(fcx, _),\n                          visit_block_pre=bind visit_block_pre(fcx, _),\n                          visit_pat_pre=bind visit_pat_pre(fcx, _),\n-                         visit_decl_pre=bind visit_decl_pre(fcx, _)\n+                         visit_local_pre=bind visit_local_pre(fcx, _)\n                          with walk::default_visitor());\n         walk::walk_block(visit, block);\n     }\n@@ -1196,29 +1191,24 @@ fn gather_locals(&@crate_ctxt ccx, &ast::fn_decl decl, &ast::block body,\n     }\n \n     // Add explicitly-declared locals.\n-    fn visit_decl_pre(@crate_ctxt ccx,\n+    fn visit_local_pre(@crate_ctxt ccx,\n                       @ty::unify::var_bindings vb,\n                       hashmap[ast::def_id,int] locals,\n                       hashmap[ast::def_id,ast::ident] local_names,\n                       @mutable int nvi,\n-                      &@ast::decl d) {\n-        alt (d.node) {\n-            case (ast::decl_local(?local)) {\n-                alt (local.ty) {\n-                    case (none) {\n-                        // Auto slot.\n-                        assign(ccx.tcx, vb, locals, local_names, nvi,\n-                               local.id, local.ident, none[ty::t]);\n-                    }\n-                    case (some(?ast_ty)) {\n-                        // Explicitly typed slot.\n-                        auto local_ty = ast_ty_to_ty_crate(ccx, ast_ty);\n-                        assign(ccx.tcx, vb, locals, local_names, nvi,\n-                               local.id, local.ident, some[ty::t](local_ty));\n-                    }\n-                }\n+                      &@ast::local local) {\n+        alt (local.node.ty) {\n+            case (none) {\n+                // Auto slot.\n+                assign(ccx.tcx, vb, locals, local_names, nvi,\n+                       local.node.id, local.node.ident, none[ty::t]);\n+            }\n+            case (some(?ast_ty)) {\n+                // Explicitly typed slot.\n+                auto local_ty = ast_ty_to_ty_crate(ccx, ast_ty);\n+                assign(ccx.tcx, vb, locals, local_names, nvi,\n+                  local.node.id, local.node.ident, some[ty::t](local_ty));\n             }\n-            case (_) { /* no-op */ }\n         }\n     }\n \n@@ -1239,7 +1229,7 @@ fn gather_locals(&@crate_ctxt ccx, &ast::fn_decl decl, &ast::block body,\n     }\n \n     auto visit =\n-        rec(visit_decl_pre=bind visit_decl_pre(ccx, vb, locals, local_names,\n+        rec(visit_local_pre=bind visit_local_pre(ccx, vb, locals, local_names,\n                                                nvi, _),\n             visit_pat_pre=bind visit_pat_pre(ccx, vb, locals, local_names,\n                                              nvi, _)\n@@ -1530,15 +1520,15 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n     }\n \n     // A generic function for checking for or for-each loops\n-    fn check_for_or_for_each(&@fn_ctxt fcx, &@ast::decl decl,\n+    fn check_for_or_for_each(&@fn_ctxt fcx, &@ast::local local,\n                              &ty::t element_ty, &ast::block body,\n                              uint node_id) {\n-        check_decl_local(fcx, decl);\n+        check_decl_local(fcx, local.node);\n         check_block(fcx, body);\n \n         // Unify type of decl with element type of the seq\n-        demand::simple(fcx, decl.span, ty::decl_local_ty(fcx.ccx.tcx,\n-                                                         decl),\n+        demand::simple(fcx, local.span, ty::decl_local_ty(fcx.ccx.tcx,\n+                                                          local.node),\n                        element_ty);\n         \n         auto typ = ty::mk_nil(fcx.ccx.tcx);\n@@ -1835,25 +1825,20 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n \n         case (ast::expr_for(?decl, ?seq, ?body, ?a)) {\n             check_expr(fcx, seq);\n+            auto elt_ty;\n             alt (structure_of(fcx, expr.span, expr_ty(fcx.ccx.tcx, seq))) {\n-                // FIXME: I include the check_for_or_each call in \n-                // each case because of a bug in typestate.\n-                // The bug is fixed; once there's a new snapshot,\n-                // the call can be moved out of the alt expression\n                 case (ty::ty_vec(?vec_elt_ty)) {\n-                    auto elt_ty = vec_elt_ty.ty;\n-                    check_for_or_for_each(fcx, decl, elt_ty, body, a.id);\n+                    elt_ty = vec_elt_ty.ty;\n                 }\n                 case (ty::ty_str) {\n-                    auto elt_ty = ty::mk_mach(fcx.ccx.tcx, \n-                                         util::common::ty_u8);\n-                    check_for_or_for_each(fcx, decl, elt_ty, body, a.id);\n+                    elt_ty = ty::mk_mach(fcx.ccx.tcx, util::common::ty_u8);\n                 }\n                 case (_) {\n                     fcx.ccx.tcx.sess.span_err(expr.span,\n                       \"type of for loop iterator is not a vector or string\");\n                 }\n             }\n+            check_for_or_for_each(fcx, decl, elt_ty, body, a.id);\n         }\n \n         case (ast::expr_for_each(?decl, ?seq, ?body, ?a)) {\n@@ -2389,11 +2374,15 @@ fn check_decl_initializer(&@fn_ctxt fcx, &ast::def_id lid,\n     }\n }\n \n-fn check_decl_local(&@fn_ctxt fcx, &@ast::decl decl) -> @ast::decl {\n-    alt (decl.node) {\n-        case (ast::decl_local(?local)) {\n-            auto a_res = local.ann;\n-            auto t = ty::mk_var(fcx.ccx.tcx, fcx.locals.get(local.id));\n+fn check_decl_local(&@fn_ctxt fcx, &@ast::local_ local) -> @ast::local_ {\n+    auto a_res = local.ann;\n+    alt (fcx.locals.find(local.id)) {\n+        case (none) {\n+            fcx.ccx.tcx.sess.bug(\"check_decl_local: local id not found \"\n+                                 + local.ident);\n+        }\n+        case (some(?i)) {\n+            auto t = ty::mk_var(fcx.ccx.tcx, i);\n             write::ty_only_fixup(fcx, a_res.id, t);\n \n             auto initopt = local.init;\n@@ -2403,8 +2392,7 @@ fn check_decl_local(&@fn_ctxt fcx, &@ast::decl decl) -> @ast::decl {\n                 }\n                 case (_) { /* fall through */  }\n             }\n-            auto local_1 = @rec(init=initopt, ann=a_res with *local);\n-            ret @rec(node=ast::decl_local(local_1) with *decl);\n+            ret @rec(init=initopt, ann=a_res with *local);\n         }\n     }\n }\n@@ -2415,7 +2403,7 @@ fn check_stmt(&@fn_ctxt fcx, &@ast::stmt stmt) {\n         case (ast::stmt_decl(?decl,?a)) {\n             node_id = a.id;\n             alt (decl.node) {\n-                case (ast::decl_local(_)) { check_decl_local(fcx, decl); }\n+                case (ast::decl_local(?l)) { check_decl_local(fcx, l); }\n                 case (ast::decl_item(_)) { /* ignore for now */ }\n             }\n         }"}, {"sha": "586ff0397bce66d50041ffd4221a102b0bbd1080", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -3,6 +3,7 @@ import std::option;\n import std::option::some;\n import std::option::none;\n import util::common::span;\n+import util::common::respan;\n \n // Context-passing AST walker. Each overridden visit method has full control\n // over what happens with its node, it can do its own traversal of the node's\n@@ -23,6 +24,7 @@ type visitor[E] =\n          fn(&@view_item v, &E e, &vt[E] v)     visit_view_item,\n          fn(&@native_item i, &E e, &vt[E] v)   visit_native_item,\n          fn(&@item i, &E e, &vt[E] v)          visit_item,\n+         fn(&@local l, &E e, &vt[E] v)        visit_local,\n          fn(&block b, &E e, &vt[E] v)          visit_block,\n          fn(&@stmt s, &E e, &vt[E] v)          visit_stmt,\n          fn(&arm a, &E e, &vt[E] v)            visit_arm,\n@@ -39,6 +41,7 @@ fn default_visitor[E]() -> visitor[E] {\n              visit_view_item = bind visit_view_item[E](_, _, _),\n              visit_native_item = bind visit_native_item[E](_, _, _),\n              visit_item = bind visit_item[E](_, _, _),\n+             visit_local = bind visit_local[E](_, _, _),\n              visit_block = bind visit_block[E](_, _, _),\n              visit_stmt = bind visit_stmt[E](_, _, _),\n              visit_arm = bind visit_arm[E](_, _, _),\n@@ -88,6 +91,17 @@ fn visit_mod[E](&_mod m, &span sp, &E e, &vt[E] v) {\n \n fn visit_view_item[E](&@view_item vi, &E e, &vt[E] v) {}\n \n+fn visit_local[E](&@local loc, &E e, &vt[E] v) {\n+    alt (loc.node.ty) {\n+        case (none) {}\n+        case (some(?t)) { vt(v).visit_ty(t, e, v); }\n+    }\n+    alt (loc.node.init) {\n+        case (none) {}\n+        case (some(?i)) { vt(v).visit_expr(i.expr, e, v); }\n+    }\n+}\n+\n fn visit_item[E](&@item i, &E e, &vt[E] v) {\n     alt (i.node) {\n         case (item_const(_, ?t, ?ex, _, _)) {\n@@ -237,14 +251,7 @@ fn visit_stmt[E](&@stmt s, &E e, &vt[E] v) {\n fn visit_decl[E](&@decl d, &E e, &vt[E] v) {\n     alt (d.node) {\n         case (decl_local(?loc)) {\n-            alt (loc.ty) {\n-                case (none) {}\n-                case (some(?t)) { vt(v).visit_ty(t, e, v); }\n-            }\n-            alt (loc.init) {\n-                case (none) {}\n-                case (some(?i)) { vt(v).visit_expr(i.expr, e, v); }\n-            }\n+            vt(v).visit_local(@respan(d.span, loc), e, v);\n         }\n         case (decl_item(?it)) { vt(v).visit_item(it, e, v); }\n     }\n@@ -309,12 +316,12 @@ fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n             vt(v).visit_block(b, e, v);\n         }\n         case (expr_for(?dcl, ?x, ?b, _)) {\n-            vt(v).visit_decl(dcl, e, v);\n+            vt(v).visit_local(dcl, e, v);\n             vt(v).visit_expr(x, e, v);\n             vt(v).visit_block(b, e, v);\n         }\n         case (expr_for_each(?dcl, ?x, ?b, _)) {\n-            vt(v).visit_decl(dcl, e, v);\n+            vt(v).visit_local(dcl, e, v);\n             vt(v).visit_expr(x, e, v);\n             vt(v).visit_block(b, e, v);\n         }"}, {"sha": "3c184eacfb42bddc7f610e0a805e271b732d1a2c", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -5,6 +5,7 @@ import std::option::some;\n import std::option::none;\n \n import util::common::span;\n+import util::common::respan;\n \n // FIXME: Should visit patterns as well.\n type ast_visitor =\n@@ -32,6 +33,8 @@ type ast_visitor =\n         fn (&@ast::pat p)               visit_pat_post,\n         fn (&@ast::decl d)              visit_decl_pre,\n         fn (&@ast::decl d)              visit_decl_post,\n+        fn (&@ast::local l)            visit_local_pre,\n+        fn (&@ast::local l)            visit_local_post,\n         fn (&@ast::expr e)              visit_expr_pre,\n         fn (&@ast::expr e)              visit_expr_post,\n         fn (&@ast::ty t)                visit_ty_pre,\n@@ -92,6 +95,21 @@ fn walk_view_item(&ast_visitor v, @ast::view_item vi) {\n     v.visit_view_item_post(vi);\n }\n \n+fn walk_local(&ast_visitor v, @ast::local loc) {\n+    v.visit_local_pre(loc);\n+    alt (loc.node.ty) {\n+        case (none) {}\n+        case (some(?t)) { walk_ty(v, t); }\n+    }\n+    alt (loc.node.init) {\n+        case (none) {}\n+        case (some(?i)) {\n+            walk_expr(v, i.expr);\n+        }\n+    }\n+    v.visit_local_post(loc);\n+}\n+\n fn walk_item(&ast_visitor v, @ast::item i) {\n     if (!v.keep_going()) { ret; }\n     v.visit_item_pre(i);\n@@ -291,16 +309,7 @@ fn walk_decl(&ast_visitor v, @ast::decl d) {\n     v.visit_decl_pre(d);\n     alt (d.node) {\n         case (ast::decl_local(?loc)) {\n-            alt (loc.ty) {\n-                case (none) {}\n-                case (some(?t)) { walk_ty(v, t); }\n-            }\n-            alt (loc.init) {\n-                case (none) {}\n-                case (some(?i)) {\n-                    walk_expr(v, i.expr);\n-                }\n-            }\n+            walk_local(v, @respan(d.span, loc));\n         }\n         case (ast::decl_item(?it)) {\n             walk_item(v, it);\n@@ -379,12 +388,12 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n             walk_block(v, b);\n         }\n         case (ast::expr_for(?dcl, ?x, ?b, _)) {\n-            walk_decl(v, dcl);\n+            walk_local(v, dcl);\n             walk_expr(v, x);\n             walk_block(v, b);\n         }\n         case (ast::expr_for_each(?dcl, ?x, ?b, _)) {\n-            walk_decl(v, dcl);\n+            walk_local(v, dcl);\n             walk_expr(v, x);\n             walk_block(v, b);\n         }\n@@ -516,6 +525,7 @@ fn def_visit_stmt(&@ast::stmt s) { }\n fn def_visit_arm(&ast::arm a) { }\n fn def_visit_pat(&@ast::pat p) { }\n fn def_visit_decl(&@ast::decl d) { }\n+fn def_visit_local(&@ast::local l) { }\n fn def_visit_expr(&@ast::expr e) { }\n fn def_visit_ty(&@ast::ty t) { }\n fn def_visit_constr(&@ast::constr c) { }\n@@ -547,6 +557,8 @@ fn default_visitor() -> ast_visitor {\n             visit_pat_post=def_visit_pat,\n             visit_decl_pre=def_visit_decl,\n             visit_decl_post=def_visit_decl,\n+            visit_local_pre=def_visit_local,\n+            visit_local_post=def_visit_local,\n             visit_expr_pre=def_visit_expr,\n             visit_expr_post=def_visit_expr,\n             visit_ty_pre=def_visit_ty,"}, {"sha": "c4c48c234d0c9babb82f9b459bf494877f777fac", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -889,14 +889,10 @@ fn print_ident(&ps s, &ast::ident ident) {\n     word(s.s, ident);\n }\n \n-fn print_for_decl(&ps s, @ast::decl decl) {\n-    alt (decl.node) {\n-        case (ast::decl_local(?loc)) {\n-            print_type(s, *option::get[@ast::ty](loc.ty));\n-            space(s.s);\n-            word(s.s, loc.ident);\n-        }\n-    }\n+fn print_for_decl(&ps s, @ast::local loc) {\n+    print_type(s, *option::get[@ast::ty](loc.node.ty));\n+    space(s.s);\n+    word(s.s, loc.node.ident);\n }\n \n fn print_path(&ps s, &ast::path path) {"}, {"sha": "61177b068ace96cea9c02e569981559e762898a0", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65ad8c31c47a14a2b23e9991a34c02e79ec741e/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=d65ad8c31c47a14a2b23e9991a34c02e79ec741e", "patch": "@@ -224,7 +224,7 @@ fn has_nonlocal_exits(&ast::block b) -> bool {\n     ret *has_exits;\n }\n \n-fn local_rhs_span(&@ast::local l, &span def) -> span {\n+fn local_rhs_span(&@ast::local_ l, &span def) -> span {\n     alt (l.init) {\n         case (some(?i)) { ret i.expr.span; }\n         case (_) { ret def; }"}]}