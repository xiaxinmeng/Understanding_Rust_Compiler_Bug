{"sha": "bcd357a0ae1fab1efabf9bed7435cf19e615948f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZDM1N2EwYWUxZmFiMWVmYWJmOWJlZDc0MzVjZjE5ZTYxNTk0OGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-18T09:35:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-25T10:41:33Z"}, "message": "Rustup to rustc 1.45.0-nightly (46e85b432 2020-05-24)", "tree": {"sha": "806d01a324b8b0cf3b329c767648b7cae02c59a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/806d01a324b8b0cf3b329c767648b7cae02c59a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcd357a0ae1fab1efabf9bed7435cf19e615948f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd357a0ae1fab1efabf9bed7435cf19e615948f", "html_url": "https://github.com/rust-lang/rust/commit/bcd357a0ae1fab1efabf9bed7435cf19e615948f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcd357a0ae1fab1efabf9bed7435cf19e615948f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e5282f9293b174cad733a14d7a9769ec9f89016", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5282f9293b174cad733a14d7a9769ec9f89016", "html_url": "https://github.com/rust-lang/rust/commit/2e5282f9293b174cad733a14d7a9769ec9f89016"}], "stats": {"total": 383, "additions": 335, "deletions": 48}, "files": [{"sha": "e98128dd09e135dccc97d53e2fa94aac5949da6e", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -8,7 +8,5 @@ perf.data.old\n *.string*\n /build_sysroot/sysroot\n /build_sysroot/sysroot_src\n-/build_sysroot/Cargo.lock\n-/build_sysroot/test_target/Cargo.lock\n /rust\n /regex"}, {"sha": "1fee499763f23dde97632e0f294ffd49c3bd3a9b", "filename": "build_sysroot/Cargo.lock", "status": "added", "additions": 290, "deletions": 0, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/build_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/build_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.lock?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -0,0 +1,290 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+[[package]]\n+name = \"alloc\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"core\",\n+]\n+\n+[[package]]\n+name = \"alloc_system\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"core\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"autocfg\"\n+version = \"0.1.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n+\n+[[package]]\n+name = \"backtrace\"\n+version = \"0.3.48\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0df2f85c8a2abbe3b7d7e748052fdd9b76a0458fdeb16ad4223f5eca78c7c130\"\n+dependencies = [\n+ \"backtrace-sys\",\n+ \"cfg-if\",\n+ \"compiler_builtins\",\n+ \"libc\",\n+ \"rustc-demangle\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"backtrace-sys\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"18fbebbe1c9d1f383a9cc7e8ccdb471b91c8d024ee9c2ca5b5346121fe8b4399\"\n+dependencies = [\n+ \"cc\",\n+ \"compiler_builtins\",\n+ \"libc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"cc\"\n+version = \"1.0.54\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7bbb73db36c1246e9034e307d0fba23f9a2e251faa47ade70c1bd252220c8311\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"compiler_builtins\"\n+version = \"0.1.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"439a6fab343b1dab347823537734a5cd4ae6ae2000b465ab886f64cdb723bd14\"\n+dependencies = [\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"core\"\n+version = \"0.0.0\"\n+\n+[[package]]\n+name = \"dlmalloc\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"35055b1021724f4eb5262eb49130eebff23fc59fc5a14160e05faad8eeb36673\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"libc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"fortanix-sgx-abi\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c56c422ef86062869b2d57ae87270608dc5929969dd130a6e248979cf4fb6ca6\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"getopts\"\n+version = \"0.2.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5\"\n+dependencies = [\n+ \"rustc-std-workspace-core\",\n+ \"rustc-std-workspace-std\",\n+ \"unicode-width\",\n+]\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.6.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8e6073d0ca812575946eb5f35ff68dbe519907b25c42530389ff946dc84c6ead\"\n+dependencies = [\n+ \"autocfg\",\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"hermit-abi\"\n+version = \"0.1.13\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"91780f809e750b0a89f5544be56617ff6b1227ee485bcb06ebe10cdf89bd3b71\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"libc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.69\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"99e85c08494b21a9054e7fe1374a732aeadaff3980b6990b94bfd3a70f690005\"\n+dependencies = [\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"panic_abort\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"core\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"panic_unwind\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc\",\n+ \"cfg-if\",\n+ \"compiler_builtins\",\n+ \"core\",\n+ \"libc\",\n+ \"unwind\",\n+]\n+\n+[[package]]\n+name = \"proc_macro\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"std\",\n+]\n+\n+[[package]]\n+name = \"rustc-demangle\"\n+version = \"0.1.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"rustc-std-workspace-alloc\"\n+version = \"1.99.0\"\n+dependencies = [\n+ \"alloc\",\n+]\n+\n+[[package]]\n+name = \"rustc-std-workspace-core\"\n+version = \"1.99.0\"\n+dependencies = [\n+ \"core\",\n+]\n+\n+[[package]]\n+name = \"rustc-std-workspace-std\"\n+version = \"1.99.0\"\n+dependencies = [\n+ \"std\",\n+]\n+\n+[[package]]\n+name = \"std\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc\",\n+ \"backtrace\",\n+ \"cfg-if\",\n+ \"compiler_builtins\",\n+ \"core\",\n+ \"dlmalloc\",\n+ \"fortanix-sgx-abi\",\n+ \"hashbrown\",\n+ \"hermit-abi\",\n+ \"libc\",\n+ \"panic_abort\",\n+ \"panic_unwind\",\n+ \"unwind\",\n+ \"wasi\",\n+]\n+\n+[[package]]\n+name = \"sysroot\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc\",\n+ \"alloc_system\",\n+ \"compiler_builtins\",\n+ \"core\",\n+ \"libc\",\n+ \"std\",\n+ \"test\",\n+]\n+\n+[[package]]\n+name = \"term\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core\",\n+ \"std\",\n+]\n+\n+[[package]]\n+name = \"test\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core\",\n+ \"getopts\",\n+ \"libc\",\n+ \"panic_abort\",\n+ \"panic_unwind\",\n+ \"proc_macro\",\n+ \"std\",\n+ \"term\",\n+]\n+\n+[[package]]\n+name = \"unicode-width\"\n+version = \"0.1.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"caaa9d531767d1ff2150b9332433f32a24622147e5ebb1f26409d5da67afd479\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+ \"rustc-std-workspace-std\",\n+]\n+\n+[[package]]\n+name = \"unwind\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"cc\",\n+ \"cfg-if\",\n+ \"compiler_builtins\",\n+ \"core\",\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.9.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]"}, {"sha": "ef39a0d87f63056bbba18886364c6e219b8c9fd3", "filename": "build_sysroot/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/build_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/build_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.toml?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -12,6 +12,8 @@ test = { path = \"./sysroot_src/src/libtest\" }\n \n alloc_system = { path = \"./alloc_system\" }\n \n+libc = { version = \"=0.2.69\", default-features = false } # FIXME rustc 1.45.0-nightly (7ebd87a7a 2020-05-08) ices on libc 0.2.70\n+\n [patch.crates-io]\n rustc-std-workspace-core = { path = \"./sysroot_src/src/tools/rustc-std-workspace-core\" }\n rustc-std-workspace-alloc = { path = \"./sysroot_src/src/tools/rustc-std-workspace-alloc\" }"}, {"sha": "65ccf605ea98ffa23fbfb51d264cd539fb968db0", "filename": "build_sysroot/build_sysroot.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -12,7 +12,6 @@ popd >/dev/null\n # Cleanup for previous run\n #     v Clean target dir except for build scripts and incremental cache\n rm -r target/*/{debug,release}/{build,deps,examples,libsysroot*,native} || true\n-rm Cargo.lock test_target/Cargo.lock 2>/dev/null || true\n rm -r sysroot/ 2>/dev/null || true\n \n # Build libs"}, {"sha": "b64399bb7c8364c5c425b7ab5a2fd55839ee35f8", "filename": "clean_all.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/clean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/clean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clean_all.sh?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -1,5 +1,5 @@\n #!/bin/bash --verbose\n set -e\n \n-rm -rf target/ build_sysroot/{sysroot/,sysroot_src/,target/,Cargo.lock} perf.data{,.old}\n+rm -rf target/ build_sysroot/{sysroot/,sysroot_src/,target/} perf.data{,.old}\n rm -rf regex/ simple-raytracer/"}, {"sha": "8d57e77018e24291dd512f0dcc18f59ecf7a1251", "filename": "prepare.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/prepare.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/prepare.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/prepare.sh?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -1,7 +1,7 @@\n #!/bin/bash --verbose\n set -e\n \n-rustup component add rust-src rustc-dev\n+rustup component add rust-src rustc-dev llvm-tools-preview\n ./build_sysroot/prepare_sysroot_src.sh\n cargo install hyperfine || echo \"Skipping hyperfine install\"\n "}, {"sha": "923f005a830810660862edf08ca5588a7c55f506", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -1 +1 @@\n-nightly-2020-05-09\n+nightly-2020-05-25"}, {"sha": "b911320f7a08daa626597dc62c92d670391d36ac", "filename": "rustup.sh", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/rustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/rustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustup.sh?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -17,9 +17,12 @@ case $1 in\n \n         ./clean_all.sh\n         ./prepare.sh\n+\n+        (cd build_sysroot && cargo update)\n+\n         ;;\n     \"commit\")\n-        git add rust-toolchain\n+        git add rust-toolchain build_sysroot/Cargo.lock\n         git commit -m \"Rustup to $(rustc -V)\"\n         ;;\n     *)"}, {"sha": "ba5249d412f00a757d6ff0e3178bf9b9bdf09d7a", "filename": "src/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -94,7 +94,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         ));\n     }\n \n-    fn add_native_library(&mut self, name: rustc_ast::ast::Name) {\n+    fn add_native_library(&mut self, name: rustc_span::symbol::Symbol) {\n         let location = find_library(name, &self.config.lib_search_paths, self.config.sess);\n         self.add_archive(location.clone(), |_| false)\n             .unwrap_or_else(|e| {"}, {"sha": "b3751a02029434fd948965780108d025944002d0", "filename": "src/base.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -305,6 +305,28 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                     *destination,\n                 ));\n             }\n+            TerminatorKind::InlineAsm {\n+                template,\n+                operands,\n+                options: _,\n+                destination,\n+            } => {\n+                match template {\n+                    &[] => {\n+                        assert_eq!(operands, &[]);\n+                        match *destination {\n+                            Some(destination) => {\n+                                let destination_block = fx.get_block(destination);\n+                                fx.bcx.ins().jump(destination_block, &[]);\n+                            }\n+                            None => bug!(),\n+                        }\n+\n+                        // Black box\n+                    }\n+                    _ => unimpl_fatal!(fx.tcx, bb_data.terminator().source_info.span, \"Inline assembly is not supported\"),\n+                }\n+            }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n                 trap_unreachable(fx, \"[corruption] Unwinding bb reached.\");\n             }\n@@ -615,7 +637,7 @@ fn trans_stmt<'tcx>(\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::LlvmInlineAsm(asm) => {\n-            use rustc_ast::ast::Name;\n+            use rustc_span::symbol::Symbol;\n             let LlvmInlineAsm {\n                 asm,\n                 outputs: _,\n@@ -632,37 +654,14 @@ fn trans_stmt<'tcx>(\n                 asm_str_style: _,\n             } = asm;\n             match &*asm_code.as_str() {\n-                \"\" => {\n-                    assert_eq!(inputs, &[Name::intern(\"r\")]);\n-                    assert!(outputs.is_empty(), \"{:?}\", outputs);\n-\n-                    // Black box\n-                }\n-                \"cpuid\" | \"cpuid\\n\" => {\n-                    assert_eq!(inputs, &[Name::intern(\"{eax}\"), Name::intern(\"{ecx}\")]);\n-\n-                    assert_eq!(outputs.len(), 4);\n-                    for (i, c) in (&[\"={eax}\", \"={ebx}\", \"={ecx}\", \"={edx}\"])\n-                        .iter()\n-                        .enumerate()\n-                    {\n-                        assert_eq!(&outputs[i].constraint.as_str(), c);\n-                        assert!(!outputs[i].is_rw);\n-                        assert!(!outputs[i].is_indirect);\n-                    }\n-\n-                    assert_eq!(clobbers, &[Name::intern(\"rbx\")]);\n-\n-                    assert!(!volatile);\n-                    assert!(!alignstack);\n-\n+                cpuid if cpuid.contains(\"cpuid\") => {\n                     crate::trap::trap_unimplemented(\n                         fx,\n                         \"__cpuid_count arch intrinsic is not supported\",\n                     );\n                 }\n                 \"xgetbv\" => {\n-                    assert_eq!(inputs, &[Name::intern(\"{ecx}\")]);\n+                    assert_eq!(inputs, &[Symbol::intern(\"{ecx}\")]);\n \n                     assert_eq!(outputs.len(), 2);\n                     for (i, c) in (&[\"={eax}\", \"={edx}\"]).iter().enumerate() {"}, {"sha": "efc7d8240840070996eb0a5edbab5ac6b59e4283", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -111,7 +111,7 @@ pub(crate) fn trans_const_value<'tcx>(\n                     return CValue::const_val(fx, layout, data);\n                 }\n                 Scalar::Ptr(ptr) => {\n-                    let alloc_kind = fx.tcx.alloc_map.lock().get(ptr.alloc_id);\n+                    let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n                             fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n@@ -163,7 +163,7 @@ fn pointer_for_allocation<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     alloc: &'tcx Allocation,\n ) -> crate::pointer::Pointer {\n-    let alloc_id = fx.tcx.alloc_map.lock().create_memory_alloc(alloc);\n+    let alloc_id = fx.tcx.create_memory_alloc(alloc);\n     fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n     let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align);\n \n@@ -260,7 +260,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n         let (data_id, alloc) = match todo_item {\n             TodoItem::Alloc(alloc_id) => {\n                 //println!(\"alloc_id {}\", alloc_id);\n-                let alloc = match tcx.alloc_map.lock().get(alloc_id).unwrap() {\n+                let alloc = match tcx.get_global_alloc(alloc_id).unwrap() {\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n@@ -314,11 +314,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n \n-            // Don't inline `reloc_target_alloc` into the match. That would cause `tcx.alloc_map`\n-            // to be locked for the duration of the match. `data_id_for_static` however may try\n-            // to lock `tcx.alloc_map` itself while calculating the layout of the target static.\n-            // This would cause a panic in single threaded rustc and a deadlock for parallel rustc.\n-            let reloc_target_alloc = tcx.alloc_map.lock().get(reloc).unwrap();\n+            let reloc_target_alloc = tcx.get_global_alloc(reloc).unwrap();\n             let data_id = match reloc_target_alloc {\n                 GlobalAlloc::Function(instance) => {\n                     assert_eq!(addend, 0);"}, {"sha": "6c5d5c48d860b34dca113196f91358566b208281", "filename": "src/driver/aot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -54,10 +54,10 @@ fn emit_module<B: Backend>(\n     let work_product = if std::env::var(\"CG_CLIF_INCR_CACHE_DISABLED\").is_ok() {\n         None\n     } else {\n-        rustc_incremental::copy_cgu_workproducts_to_incr_comp_cache_dir(\n+        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n             tcx.sess,\n             &name,\n-            &[tmp_file.clone()],\n+            &Some(tmp_file.clone()),\n         )\n     };\n \n@@ -80,7 +80,7 @@ fn reuse_workproduct_for_cgu(\n     let incr_comp_session_dir = tcx.sess.incr_comp_session_dir();\n     let mut object = None;\n     let work_product = cgu.work_product(tcx);\n-    for saved_file in &work_product.saved_files {\n+    if let Some(saved_file) = &work_product.saved_file {\n         let obj_out = tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);"}, {"sha": "e72e15a3279adc8265179a5b72d551fa2fc731a0", "filename": "src/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -17,7 +17,7 @@ pub(crate) fn codegen_crate(\n     tcx.sess.abort_if_errors();\n \n     if std::env::var(\"CG_CLIF_JIT\").is_ok()\n-        && tcx.sess.crate_types.get().contains(&rustc_session::config::CrateType::Executable)\n+        && tcx.sess.crate_types().contains(&rustc_session::config::CrateType::Executable)\n     {\n         #[cfg(not(target_arch = \"wasm32\"))]\n         let _: ! = jit::run_jit(tcx);"}, {"sha": "d97973667f303b7942b22a332a0522bbed0af49d", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -517,6 +517,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         _ if intrinsic.starts_with(\"unchecked_\") || intrinsic == \"exact_div\", (c x, c y) {\n             // FIXME trap on overflow\n             let bin_op = match intrinsic {\n+                \"unchecked_add\" => BinOp::Add,\n                 \"unchecked_sub\" => BinOp::Sub,\n                 \"unchecked_div\" | \"exact_div\" => BinOp::Div,\n                 \"unchecked_rem\" => BinOp::Rem,"}, {"sha": "052d7e4a27cced7eded77fa8a8db63ea3bcf674f", "filename": "src/metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcd357a0ae1fab1efabf9bed7435cf19e615948f/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=bcd357a0ae1fab1efabf9bed7435cf19e615948f", "patch": "@@ -73,8 +73,7 @@ pub(crate) fn write_metadata<P: WriteMetadata>(tcx: TyCtxt<'_>, product: &mut P)\n \n     let kind = tcx\n         .sess\n-        .crate_types\n-        .borrow()\n+        .crate_types()\n         .iter()\n         .map(|ty| match *ty {\n             config::CrateType::Executable"}]}