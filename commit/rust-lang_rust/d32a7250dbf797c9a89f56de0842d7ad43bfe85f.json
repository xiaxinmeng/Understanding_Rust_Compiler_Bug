{"sha": "d32a7250dbf797c9a89f56de0842d7ad43bfe85f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMmE3MjUwZGJmNzk3YzlhODlmNTZkZTA4NDJkN2FkNDNiZmU4NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-13T20:45:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-13T20:45:40Z"}, "message": "Auto merge of #62584 - eddyb:circular-math-is-hard, r=pnkfelix\n\n rustc_codegen_ssa: fix range check in codegen_get_discr.\n\nFixes #61696, see https://github.com/rust-lang/rust/issues/61696#issuecomment-505473018 for more details.\n\nIn short, I had wanted to use `x - a <= b - a` to check whether `x` is in `a..=b` (as it's 1 comparison instead of 2 *and* `b - a` is guaranteed to fit in the same data type, while `b` itself might not), but I ended up with `x - a + c <= b - a + c` instead, because `x - a + c` was the final value needed.\n\nThat latter comparison is equivalent to checking that `x` is in `(a - c)..=b`, i.e. it also includes `(a - c)..a`, not just `a..=b`, so if `c` is not `0`, it will cause false positives.\n\nThis presented itself as the non-niche (\"dataful\") variant sometimes being treated like a niche variant, in the presence of uninhabited variants (which made `c`, aka the index of the first niche variant, arbitrarily large).\n\nr? @nagisa, @rkruppe or @oli-obk", "tree": {"sha": "5a5cffe20a744ad2cb71ea31b9397f5e744c7bf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a5cffe20a744ad2cb71ea31b9397f5e744c7bf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d32a7250dbf797c9a89f56de0842d7ad43bfe85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d32a7250dbf797c9a89f56de0842d7ad43bfe85f", "html_url": "https://github.com/rust-lang/rust/commit/d32a7250dbf797c9a89f56de0842d7ad43bfe85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d32a7250dbf797c9a89f56de0842d7ad43bfe85f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69656fa4cbafc378fd63f9186d93b0df3cdd9320", "url": "https://api.github.com/repos/rust-lang/rust/commits/69656fa4cbafc378fd63f9186d93b0df3cdd9320", "html_url": "https://github.com/rust-lang/rust/commit/69656fa4cbafc378fd63f9186d93b0df3cdd9320"}, {"sha": "c063057beb96cd4901ab300eed2267c9b73ed589", "url": "https://api.github.com/repos/rust-lang/rust/commits/c063057beb96cd4901ab300eed2267c9b73ed589", "html_url": "https://github.com/rust-lang/rust/commit/c063057beb96cd4901ab300eed2267c9b73ed589"}], "stats": {"total": 150, "additions": 126, "deletions": 24}, "files": [{"sha": "588badfa11af2656d21244dbc72d58bf8ec682e0", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 62, "deletions": 24, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d32a7250dbf797c9a89f56de0842d7ad43bfe85f/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32a7250dbf797c9a89f56de0842d7ad43bfe85f/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=d32a7250dbf797c9a89f56de0842d7ad43bfe85f", "patch": "@@ -228,8 +228,11 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n             }\n         };\n \n-        let discr = self.project_field(bx, discr_index);\n-        let lldiscr = bx.load_operand(discr).immediate();\n+        // Read the tag/niche-encoded discriminant from memory.\n+        let encoded_discr = self.project_field(bx, discr_index);\n+        let encoded_discr = bx.load_operand(encoded_discr);\n+\n+        // Decode the discriminant (specifically if it's niche-encoded).\n         match *discr_kind {\n             layout::DiscriminantKind::Tag => {\n                 let signed = match discr_scalar.value {\n@@ -240,38 +243,73 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     layout::Int(_, signed) => !discr_scalar.is_bool() && signed,\n                     _ => false\n                 };\n-                bx.intcast(lldiscr, cast_to, signed)\n+                bx.intcast(encoded_discr.immediate(), cast_to, signed)\n             }\n             layout::DiscriminantKind::Niche {\n                 dataful_variant,\n                 ref niche_variants,\n                 niche_start,\n             } => {\n-                let niche_llty = bx.cx().immediate_backend_type(discr.layout);\n-                if niche_variants.start() == niche_variants.end() {\n-                    // FIXME(eddyb): check the actual primitive type here.\n-                    let niche_llval = if niche_start == 0 {\n-                        // HACK(eddyb): using `c_null` as it works on all types.\n+                // Rebase from niche values to discriminants, and check\n+                // whether the result is in range for the niche variants.\n+                let niche_llty = bx.cx().immediate_backend_type(encoded_discr.layout);\n+                let encoded_discr = encoded_discr.immediate();\n+\n+                // We first compute the \"relative discriminant\" (wrt `niche_variants`),\n+                // that is, if `n = niche_variants.end() - niche_variants.start()`,\n+                // we remap `niche_start..=niche_start + n` (which may wrap around)\n+                // to (non-wrap-around) `0..=n`, to be able to check whether the\n+                // discriminant corresponds to a niche variant with one comparison.\n+                // We also can't go directly to the (variant index) discriminant\n+                // and check that it is in the range `niche_variants`, because\n+                // that might not fit in the same type, on top of needing an extra\n+                // comparison (see also the comment on `let niche_discr`).\n+                let relative_discr = if niche_start == 0 {\n+                    // Avoid subtracting `0`, which wouldn't work for pointers.\n+                    // FIXME(eddyb) check the actual primitive type here.\n+                    encoded_discr\n+                } else {\n+                    bx.sub(encoded_discr, bx.cx().const_uint_big(niche_llty, niche_start))\n+                };\n+                let relative_max = niche_variants.end().as_u32() - niche_variants.start().as_u32();\n+                let is_niche = {\n+                    let relative_max = if relative_max == 0 {\n+                        // Avoid calling `const_uint`, which wouldn't work for pointers.\n+                        // FIXME(eddyb) check the actual primitive type here.\n                         bx.cx().const_null(niche_llty)\n                     } else {\n-                        bx.cx().const_uint_big(niche_llty, niche_start)\n+                        bx.cx().const_uint(niche_llty, relative_max as u64)\n+                    };\n+                    bx.icmp(IntPredicate::IntULE, relative_discr, relative_max)\n+                };\n+\n+                // NOTE(eddyb) this addition needs to be performed on the final\n+                // type, in case the niche itself can't represent all variant\n+                // indices (e.g. `u8` niche with more than `256` variants,\n+                // but enough uninhabited variants so that the remaining variants\n+                // fit in the niche).\n+                // In other words, `niche_variants.end - niche_variants.start`\n+                // is representable in the niche, but `niche_variants.end`\n+                // might not be, in extreme cases.\n+                let niche_discr = {\n+                    let relative_discr = if relative_max == 0 {\n+                        // HACK(eddyb) since we have only one niche, we know which\n+                        // one it is, and we can avoid having a dynamic value here.\n+                        bx.cx().const_uint(cast_to, 0)\n+                    } else {\n+                        bx.intcast(relative_discr, cast_to, false)\n                     };\n-                    let select_arg = bx.icmp(IntPredicate::IntEQ, lldiscr, niche_llval);\n-                    bx.select(select_arg,\n+                    bx.add(\n+                        relative_discr,\n                         bx.cx().const_uint(cast_to, niche_variants.start().as_u32() as u64),\n-                        bx.cx().const_uint(cast_to, dataful_variant.as_u32() as u64))\n-                } else {\n-                    // Rebase from niche values to discriminant values.\n-                    let delta = niche_start.wrapping_sub(niche_variants.start().as_u32() as u128);\n-                    let lldiscr = bx.sub(lldiscr, bx.cx().const_uint_big(niche_llty, delta));\n-                    let lldiscr_max =\n-                        bx.cx().const_uint(niche_llty, niche_variants.end().as_u32() as u64);\n-                    let select_arg = bx.icmp(IntPredicate::IntULE, lldiscr, lldiscr_max);\n-                    let cast = bx.intcast(lldiscr, cast_to, false);\n-                    bx.select(select_arg,\n-                        cast,\n-                        bx.cx().const_uint(cast_to, dataful_variant.as_u32() as u64))\n-                }\n+                    )\n+                };\n+\n+                bx.select(\n+                    is_niche,\n+                    niche_discr,\n+                    bx.cx().const_uint(cast_to, dataful_variant.as_u32() as u64),\n+                )\n             }\n         }\n     }"}, {"sha": "381e5a632e71f8ac9dd9bc3e4950b44f245da593", "filename": "src/test/run-pass/issues/issue-61696.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d32a7250dbf797c9a89f56de0842d7ad43bfe85f/src%2Ftest%2Frun-pass%2Fissues%2Fissue-61696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32a7250dbf797c9a89f56de0842d7ad43bfe85f/src%2Ftest%2Frun-pass%2Fissues%2Fissue-61696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-61696.rs?ref=d32a7250dbf797c9a89f56de0842d7ad43bfe85f", "patch": "@@ -0,0 +1,64 @@\n+pub enum Infallible {}\n+\n+// The check that the `bool` field of `V1` is encoding a \"niche variant\"\n+// (i.e. not `V1`, so `V3` or `V4`) used to be mathematically incorrect,\n+// causing valid `V1` values to be interpreted as other variants.\n+pub enum E1 {\n+    V1 { f: bool },\n+    V2 { f: Infallible },\n+    V3,\n+    V4,\n+}\n+\n+// Computing the discriminant used to be done using the niche type (here `u8`,\n+// from the `bool` field of `V1`), overflowing for variants with large enough\n+// indices (`V3` and `V4`), causing them to be interpreted as other variants.\n+pub enum E2<X> {\n+    V1 { f: bool },\n+\n+    /*_00*/ _01(X), _02(X), _03(X), _04(X), _05(X), _06(X), _07(X),\n+    _08(X), _09(X), _0A(X), _0B(X), _0C(X), _0D(X), _0E(X), _0F(X),\n+    _10(X), _11(X), _12(X), _13(X), _14(X), _15(X), _16(X), _17(X),\n+    _18(X), _19(X), _1A(X), _1B(X), _1C(X), _1D(X), _1E(X), _1F(X),\n+    _20(X), _21(X), _22(X), _23(X), _24(X), _25(X), _26(X), _27(X),\n+    _28(X), _29(X), _2A(X), _2B(X), _2C(X), _2D(X), _2E(X), _2F(X),\n+    _30(X), _31(X), _32(X), _33(X), _34(X), _35(X), _36(X), _37(X),\n+    _38(X), _39(X), _3A(X), _3B(X), _3C(X), _3D(X), _3E(X), _3F(X),\n+    _40(X), _41(X), _42(X), _43(X), _44(X), _45(X), _46(X), _47(X),\n+    _48(X), _49(X), _4A(X), _4B(X), _4C(X), _4D(X), _4E(X), _4F(X),\n+    _50(X), _51(X), _52(X), _53(X), _54(X), _55(X), _56(X), _57(X),\n+    _58(X), _59(X), _5A(X), _5B(X), _5C(X), _5D(X), _5E(X), _5F(X),\n+    _60(X), _61(X), _62(X), _63(X), _64(X), _65(X), _66(X), _67(X),\n+    _68(X), _69(X), _6A(X), _6B(X), _6C(X), _6D(X), _6E(X), _6F(X),\n+    _70(X), _71(X), _72(X), _73(X), _74(X), _75(X), _76(X), _77(X),\n+    _78(X), _79(X), _7A(X), _7B(X), _7C(X), _7D(X), _7E(X), _7F(X),\n+    _80(X), _81(X), _82(X), _83(X), _84(X), _85(X), _86(X), _87(X),\n+    _88(X), _89(X), _8A(X), _8B(X), _8C(X), _8D(X), _8E(X), _8F(X),\n+    _90(X), _91(X), _92(X), _93(X), _94(X), _95(X), _96(X), _97(X),\n+    _98(X), _99(X), _9A(X), _9B(X), _9C(X), _9D(X), _9E(X), _9F(X),\n+    _A0(X), _A1(X), _A2(X), _A3(X), _A4(X), _A5(X), _A6(X), _A7(X),\n+    _A8(X), _A9(X), _AA(X), _AB(X), _AC(X), _AD(X), _AE(X), _AF(X),\n+    _B0(X), _B1(X), _B2(X), _B3(X), _B4(X), _B5(X), _B6(X), _B7(X),\n+    _B8(X), _B9(X), _BA(X), _BB(X), _BC(X), _BD(X), _BE(X), _BF(X),\n+    _C0(X), _C1(X), _C2(X), _C3(X), _C4(X), _C5(X), _C6(X), _C7(X),\n+    _C8(X), _C9(X), _CA(X), _CB(X), _CC(X), _CD(X), _CE(X), _CF(X),\n+    _D0(X), _D1(X), _D2(X), _D3(X), _D4(X), _D5(X), _D6(X), _D7(X),\n+    _D8(X), _D9(X), _DA(X), _DB(X), _DC(X), _DD(X), _DE(X), _DF(X),\n+    _E0(X), _E1(X), _E2(X), _E3(X), _E4(X), _E5(X), _E6(X), _E7(X),\n+    _E8(X), _E9(X), _EA(X), _EB(X), _EC(X), _ED(X), _EE(X), _EF(X),\n+    _F0(X), _F1(X), _F2(X), _F3(X), _F4(X), _F5(X), _F6(X), _F7(X),\n+    _F8(X), _F9(X), _FA(X), _FB(X), _FC(X), _FD(X), _FE(X), _FF(X),\n+\n+    V3,\n+    V4,\n+}\n+\n+fn main() {\n+    if let E1::V2 { .. } = (E1::V1 { f: true }) {\n+        unreachable!()\n+    }\n+\n+    if let E2::V1 { .. } = E2::V3::<Infallible> {\n+        unreachable!()\n+    }\n+}"}]}