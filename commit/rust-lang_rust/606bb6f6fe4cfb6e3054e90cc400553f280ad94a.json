{"sha": "606bb6f6fe4cfb6e3054e90cc400553f280ad94a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNmJiNmY2ZmU0Y2ZiNmUzMDU0ZTkwY2M0MDA1NTNmMjgwYWQ5NGE=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-06T21:31:59Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-07T22:37:37Z"}, "message": "avoid extra copy", "tree": {"sha": "7bb147f57bfd364bc080e1097d85d7a0483f3a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bb147f57bfd364bc080e1097d85d7a0483f3a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/606bb6f6fe4cfb6e3054e90cc400553f280ad94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/606bb6f6fe4cfb6e3054e90cc400553f280ad94a", "html_url": "https://github.com/rust-lang/rust/commit/606bb6f6fe4cfb6e3054e90cc400553f280ad94a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/606bb6f6fe4cfb6e3054e90cc400553f280ad94a/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d26c5f73ca1c6d1615c141b181374e152cab61a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d26c5f73ca1c6d1615c141b181374e152cab61a", "html_url": "https://github.com/rust-lang/rust/commit/6d26c5f73ca1c6d1615c141b181374e152cab61a"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "424b94173a7f8ccffe8dde0dbe610601de9ca7b8", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/606bb6f6fe4cfb6e3054e90cc400553f280ad94a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606bb6f6fe4cfb6e3054e90cc400553f280ad94a/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=606bb6f6fe4cfb6e3054e90cc400553f280ad94a", "patch": "@@ -98,26 +98,27 @@ pub fn transcribe(\n         };\n \n         match tree {\n-            quoted::TokenTree::Sequence(sp, seq) => {\n-                // FIXME(pcwalton): Bad copy.\n-                match lockstep_iter_size(\n-                    &quoted::TokenTree::Sequence(sp, seq.clone()),\n-                    &interpolations,\n-                    &repeats,\n-                ) {\n+            seq @ quoted::TokenTree::Sequence(..) => {\n+                match lockstep_iter_size(&seq, interp, &repeats) {\n                     LockstepIterSize::Unconstrained => {\n                         cx.span_fatal(\n-                            sp.entire(), /* blame macro writer */\n+                            seq.span(), /* blame macro writer */\n                             \"attempted to repeat an expression \\\n                              containing no syntax \\\n                              variables matched as repeating at this depth\",\n                         );\n                     }\n                     LockstepIterSize::Contradiction(ref msg) => {\n                         // FIXME #2887 blame macro invoker instead\n-                        cx.span_fatal(sp.entire(), &msg[..]);\n+                        cx.span_fatal(seq.span(), &msg[..]);\n                     }\n                     LockstepIterSize::Constraint(len, _) => {\n+                        let (sp, seq) = if let quoted::TokenTree::Sequence(sp, seq) = seq {\n+                            (sp, seq)\n+                        } else {\n+                            unreachable!()\n+                        };\n+\n                         if len == 0 {\n                             if seq.op == quoted::KleeneOp::OneOrMore {\n                                 // FIXME #2887 blame invoker\n@@ -201,10 +202,8 @@ enum LockstepIterSize {\n     Contradiction(String),\n }\n \n-impl Add for LockstepIterSize {\n-    type Output = LockstepIterSize;\n-\n-    fn add(self, other: LockstepIterSize) -> LockstepIterSize {\n+impl LockstepIterSize {\n+    fn with(self, other: LockstepIterSize) -> LockstepIterSize {\n         match self {\n             LockstepIterSize::Unconstrained => other,\n             LockstepIterSize::Contradiction(_) => self,"}]}