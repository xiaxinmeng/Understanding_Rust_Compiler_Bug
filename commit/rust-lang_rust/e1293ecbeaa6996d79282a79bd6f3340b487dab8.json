{"sha": "e1293ecbeaa6996d79282a79bd6f3340b487dab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMjkzZWNiZWFhNjk5NmQ3OTI4MmE3OWJkNmYzMzQwYjQ4N2RhYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-06T11:10:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-06T11:10:37Z"}, "message": "Auto merge of #42437 - Mark-Simulacrum:skip-no-doc, r=alexcrichton\n\nSkip documentation files without ``` when running markdown tests.\n\nThis should reduce the 'running 0 tests' noise in builds, and I believe this is a good heuristic for us to use.\n\ncc @rust-lang/docs -- do we use the indented format for code blocks anywhere? Will we? If so, we shouldn't do this.\n\nr? @alexcrichton", "tree": {"sha": "9ca046379011f5cb6c0ee250f7f7bc300f80f092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca046379011f5cb6c0ee250f7f7bc300f80f092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1293ecbeaa6996d79282a79bd6f3340b487dab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1293ecbeaa6996d79282a79bd6f3340b487dab8", "html_url": "https://github.com/rust-lang/rust/commit/e1293ecbeaa6996d79282a79bd6f3340b487dab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1293ecbeaa6996d79282a79bd6f3340b487dab8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9006db1fb0a543f927398b86cf4475ad3ec332da", "url": "https://api.github.com/repos/rust-lang/rust/commits/9006db1fb0a543f927398b86cf4475ad3ec332da", "html_url": "https://github.com/rust-lang/rust/commit/9006db1fb0a543f927398b86cf4475ad3ec332da"}, {"sha": "dd1d75e9ecedde1803b4a7bfd2599d07d52a708a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1d75e9ecedde1803b4a7bfd2599d07d52a708a", "html_url": "https://github.com/rust-lang/rust/commit/dd1d75e9ecedde1803b4a7bfd2599d07d52a708a"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "23cc22c5cb3ae6b609e3fea4db79fbf4bb718af9", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e1293ecbeaa6996d79282a79bd6f3340b487dab8/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1293ecbeaa6996d79282a79bd6f3340b487dab8/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=e1293ecbeaa6996d79282a79bd6f3340b487dab8", "patch": "@@ -18,9 +18,10 @@ extern crate build_helper;\n use std::collections::HashSet;\n use std::env;\n use std::fmt;\n-use std::fs;\n+use std::fs::{self, File};\n use std::path::{PathBuf, Path};\n use std::process::Command;\n+use std::io::Read;\n \n use build_helper::output;\n \n@@ -328,24 +329,15 @@ pub fn docs(build: &Build, compiler: &Compiler) {\n \n     while let Some(p) = stack.pop() {\n         if p.is_dir() {\n-            stack.extend(t!(p.read_dir()).map(|p| t!(p).path()));\n+            stack.extend(t!(p.read_dir()).map(|p| t!(p).path()).filter(|p| {\n+                p.extension().and_then(|s| s.to_str()) == Some(\"md\") &&\n+                // The nostarch directory in the book is for no starch, and so isn't guaranteed to\n+                // build. We don't care if it doesn't build, so skip it.\n+                p.to_str().map_or(true, |p| !p.contains(\"nostarch\"))\n+            }));\n             continue\n         }\n \n-        if p.extension().and_then(|s| s.to_str()) != Some(\"md\") {\n-            continue\n-        }\n-\n-        // The nostarch directory in the book is for no starch, and so isn't guaranteed to build.\n-        // we don't care if it doesn't build, so skip it.\n-        use std::ffi::OsStr;\n-        let path: &OsStr = p.as_ref();\n-        if let Some(path) = path.to_str() {\n-            if path.contains(\"nostarch\") {\n-                continue;\n-            }\n-        }\n-\n         println!(\"doc tests for: {}\", p.display());\n         markdown_test(build, compiler, &p);\n     }\n@@ -376,6 +368,13 @@ pub fn error_index(build: &Build, compiler: &Compiler) {\n }\n \n fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n+    let mut file = t!(File::open(markdown));\n+    let mut contents = String::new();\n+    t!(file.read_to_string(&mut contents));\n+    if !contents.contains(\"```\") {\n+        return;\n+    }\n+\n     let mut cmd = Command::new(build.rustdoc(compiler));\n     build.add_rustc_lib_path(compiler, &mut cmd);\n     build.add_rust_test_threads(&mut cmd);"}]}