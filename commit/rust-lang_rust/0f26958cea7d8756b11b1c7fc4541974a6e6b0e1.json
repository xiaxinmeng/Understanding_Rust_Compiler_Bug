{"sha": "0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMjY5NThjZWE3ZDg3NTZiMTFiMWM3ZmM0NTQxOTc0YTZlNmIwZTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-28T12:35:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T12:35:44Z"}, "message": "Rollup merge of #59429 - estebank:for-loop-move-nll, r=petrochenkov\n\nWhen moving out of a for loop head, suggest borrowing it in nll mode\n\nFollow up to #59195 for NLL.", "tree": {"sha": "a30edffbd2e98cb10926429a44ec9326db8bad10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30edffbd2e98cb10926429a44ec9326db8bad10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnL+hCRBK7hj4Ov3rIwAAdHIIAIJGzHHWRxTB5dIgu7j25leU\nXubiu/ySknZF7mMRFlE+HfyxyMhucpWPvKck53kRPm7LNeHOcw5zLpfrjCKqGnN1\nj/kVCcRy38X7YYxu9UdDu9aCp/WEJleKyooeXbz21qMJtYXtc9AGCxqjoWLSVAUQ\nUt1jr3ezCPmtt+3fQhSTbU2AQHshi+z/Xnzn+6HF41K61tqrgKFsoh9WLy5UfAkJ\nlHKeD0B/z3a2hVwyJaxeKLTwlrGox/xqKll3nQo6WUHN7jqCJbMBAeFosYo6I5e1\nnClecZKUcJJTHrNTbJUHRBsAnneuaiLMu0IHrJsShbSv+dXRK5lHTr0vPzJp6ng=\n=ANeM\n-----END PGP SIGNATURE-----\n", "payload": "tree a30edffbd2e98cb10926429a44ec9326db8bad10\nparent 06a9196055291d87bccdae59c8662e08a20ccf87\nparent 4bad56e54c1a870377b04b0b7f17e3051f246248\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553776544 +0100\ncommitter GitHub <noreply@github.com> 1553776544 +0100\n\nRollup merge of #59429 - estebank:for-loop-move-nll, r=petrochenkov\n\nWhen moving out of a for loop head, suggest borrowing it in nll mode\n\nFollow up to #59195 for NLL.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "html_url": "https://github.com/rust-lang/rust/commit/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a9196055291d87bccdae59c8662e08a20ccf87", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a9196055291d87bccdae59c8662e08a20ccf87", "html_url": "https://github.com/rust-lang/rust/commit/06a9196055291d87bccdae59c8662e08a20ccf87"}, {"sha": "4bad56e54c1a870377b04b0b7f17e3051f246248", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bad56e54c1a870377b04b0b7f17e3051f246248", "html_url": "https://github.com/rust-lang/rust/commit/4bad56e54c1a870377b04b0b7f17e3051f246248"}], "stats": {"total": 101, "additions": 63, "deletions": 38}, "files": [{"sha": "95701204cab6d6205020b73ca66acced86dbf4c9", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "patch": "@@ -19,6 +19,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n+use syntax::source_map::CompilerDesugaringKind;\n \n use super::borrow_set::BorrowData;\n use super::{Context, MirBorrowckCtxt};\n@@ -154,6 +155,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         span,\n                         format!(\"value moved{} here, in previous iteration of loop\", move_msg),\n                     );\n+                    if Some(CompilerDesugaringKind::ForLoop) == span.compiler_desugaring_kind() {\n+                        if let Ok(snippet) = self.infcx.tcx.sess.source_map()\n+                            .span_to_snippet(span)\n+                        {\n+                            err.span_suggestion(\n+                                move_span,\n+                                \"consider borrowing this to avoid moving it into the for loop\",\n+                                format!(\"&{}\", snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n                     is_loop_move = true;\n                 } else if move_site.traversed_back_edge {\n                     err.span_label(\n@@ -291,8 +304,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             format!(\"move occurs due to use{}\", move_spans.describe())\n         );\n \n-        self.explain_why_borrow_contains_point(context, borrow, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+        self.explain_why_borrow_contains_point(\n+            context,\n+            borrow,\n+            None,\n+        ).add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", Some(borrow_span));\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -329,7 +345,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         });\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -542,8 +558,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             ));\n         }\n \n-        explanation\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, first_borrow_desc);\n+        explanation.add_explanation_to_diagnostic(\n+            self.infcx.tcx,\n+            self.mir,\n+            &mut err,\n+            first_borrow_desc,\n+            None,\n+        );\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -866,7 +887,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             if let BorrowExplanation::MustBeValidFor { .. } = explanation {\n             } else {\n-                explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+                explanation.add_explanation_to_diagnostic(\n+                    self.infcx.tcx,\n+                    self.mir,\n+                    &mut err,\n+                    \"\",\n+                    None,\n+                );\n             }\n         } else {\n             err.span_label(borrow_span, \"borrowed value does not live long enough\");\n@@ -886,7 +913,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 format!(\"value captured here{}\", within),\n             );\n \n-            explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+            explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n         }\n \n         err\n@@ -946,7 +973,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             _ => {}\n         }\n \n-        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -1027,7 +1054,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n             _ => {}\n         }\n-        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n \n         let within = if borrow_spans.for_generator() {\n             \" by generator\"\n@@ -1367,7 +1394,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         self.explain_why_borrow_contains_point(context, loan, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n \n         err.buffer(&mut self.errors_buffer);\n     }"}, {"sha": "67b77605f3c92f4a8b3ea45247a13b8cd8686722", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "patch": "@@ -56,17 +56,23 @@ impl BorrowExplanation {\n         mir: &Mir<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         borrow_desc: &str,\n+        borrow_span: Option<Span>,\n     ) {\n         match *self {\n             BorrowExplanation::UsedLater(later_use_kind, var_or_use_span) => {\n                 let message = match later_use_kind {\n-                    LaterUseKind::TraitCapture => \"borrow later captured here by trait object\",\n-                    LaterUseKind::ClosureCapture => \"borrow later captured here by closure\",\n-                    LaterUseKind::Call => \"borrow later used by call\",\n-                    LaterUseKind::FakeLetRead => \"borrow later stored here\",\n-                    LaterUseKind::Other => \"borrow later used here\",\n+                    LaterUseKind::TraitCapture => \"captured here by trait object\",\n+                    LaterUseKind::ClosureCapture => \"captured here by closure\",\n+                    LaterUseKind::Call => \"used by call\",\n+                    LaterUseKind::FakeLetRead => \"stored here\",\n+                    LaterUseKind::Other => \"used here\",\n                 };\n-                err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n+                if !borrow_span.map(|sp| sp.overlaps(var_or_use_span)).unwrap_or(false) {\n+                    err.span_label(\n+                        var_or_use_span,\n+                        format!(\"{}borrow later {}\", borrow_desc, message),\n+                    );\n+                }\n             }\n             BorrowExplanation::UsedLaterInLoop(later_use_kind, var_or_use_span) => {\n                 let message = match later_use_kind {"}, {"sha": "e205e2a87810f7da0a39b88c1bb8d75021a2368b", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "patch": "@@ -1,18 +1,11 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/augmented-assignments.rs:16:5\n    |\n-LL |       x\n-   |       -\n-   |       |\n-   |  _____borrow of `x` occurs here\n-   | |\n-LL | |\n-LL | |     +=\n-LL | |     x;\n-   | |     ^\n-   | |     |\n-   | |_____move out of `x` occurs here\n-   |       borrow later used here\n+LL |     x\n+   |     - borrow of `x` occurs here\n+...\n+LL |     x;\n+   |     ^ move out of `x` occurs here\n \n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/augmented-assignments.rs:21:5"}, {"sha": "d455902ee8c07ca294bf368ead705cbb6a006747", "filename": "src/test/ui/regions/region-bound-on-closure-outlives-call.nll.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-on-closure-outlives-call.nll.stderr?ref=0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "patch": "@@ -14,11 +14,10 @@ error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/region-bound-on-closure-outlives-call.rs:3:25\n    |\n LL |     (|x| f(x))(call_rec(f))\n-   |     ----------          ^ move out of `f` occurs here\n-   |     ||   |\n-   |     ||   borrow occurs due to use in closure\n-   |     |borrow of `f` occurs here\n-   |     borrow later used by call\n+   |      --- -              ^ move out of `f` occurs here\n+   |      |   |\n+   |      |   borrow occurs due to use in closure\n+   |      borrow of `f` occurs here\n \n error: aborting due to previous error\n "}, {"sha": "1a5ab7a7d56a032e65bb23e38f49ad20131df1fa", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "patch": "@@ -42,7 +42,6 @@ LL |     f(Box::new(|a| {\n    |     -          ^^^ move out of `f` occurs here\n    |     |\n    |     borrow of `f` occurs here\n-   |     borrow later used by call\n LL |         foo(f);\n    |             - move occurs due to use in closure\n "}, {"sha": "96dbdec7074a9977a52e25b36b1425b8e467898f", "filename": "src/test/ui/suggestions/borrow-for-loop-head.nll.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f26958cea7d8756b11b1c7fc4541974a6e6b0e1/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.nll.stderr?ref=0f26958cea7d8756b11b1c7fc4541974a6e6b0e1", "patch": "@@ -2,10 +2,7 @@ error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrow-for-loop-head.rs:4:18\n    |\n LL |     for i in &a {\n-   |              --\n-   |              |\n-   |              borrow of `a` occurs here\n-   |              borrow later used here\n+   |              -- borrow of `a` occurs here\n LL |         for j in a {\n    |                  ^ move out of `a` occurs here\n \n@@ -17,6 +14,10 @@ LL |     let a = vec![1, 2, 3];\n LL |     for i in &a {\n LL |         for j in a {\n    |                  ^ value moved here, in previous iteration of loop\n+help: consider borrowing this to avoid moving it into the for loop\n+   |\n+LL |         for j in &a {\n+   |                  ^^\n \n error: aborting due to 2 previous errors\n "}]}