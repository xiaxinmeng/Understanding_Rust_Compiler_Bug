{"sha": "24abe6f363cd47d444e4cff1123da93817b980f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YWJlNmYzNjNjZDQ3ZDQ0NGU0Y2ZmMTEyM2RhOTM4MTdiOTgwZjg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-04T10:04:33Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-29T21:01:36Z"}, "message": "rust-lang/rust#27282: Add `StatementKind::ReadForMatch` to MIR.\n\n(This is just the data structure changes and some boilerplate match\ncode that followed from it; the actual emission of these statements\ncomes in a follow-up commit.)", "tree": {"sha": "849e130d445bc81ee9a6fadeae611c0118e8e86c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/849e130d445bc81ee9a6fadeae611c0118e8e86c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24abe6f363cd47d444e4cff1123da93817b980f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24abe6f363cd47d444e4cff1123da93817b980f8", "html_url": "https://github.com/rust-lang/rust/commit/24abe6f363cd47d444e4cff1123da93817b980f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24abe6f363cd47d444e4cff1123da93817b980f8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47bb3fd50559c31030c5f89400864f368694c02f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47bb3fd50559c31030c5f89400864f368694c02f", "html_url": "https://github.com/rust-lang/rust/commit/47bb3fd50559c31030c5f89400864f368694c02f"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "e77d38de582642585911fd518fcb23b373734f16", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -241,6 +241,9 @@ for mir::StatementKind<'gcx> {\n                 place.hash_stable(hcx, hasher);\n                 rvalue.hash_stable(hcx, hasher);\n             }\n+            mir::StatementKind::ReadForMatch(ref place) => {\n+                place.hash_stable(hcx, hasher);\n+            }\n             mir::StatementKind::SetDiscriminant { ref place, variant_index } => {\n                 place.hash_stable(hcx, hasher);\n                 variant_index.hash_stable(hcx, hasher);"}, {"sha": "a94e5e793b470efa700d0112cfc52cfd722ab24c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -1225,6 +1225,10 @@ pub enum StatementKind<'tcx> {\n     /// Write the RHS Rvalue to the LHS Place.\n     Assign(Place<'tcx>, Rvalue<'tcx>),\n \n+    /// This represents all the reading that a pattern match may do\n+    /// (e.g. inspecting constants and discriminant values).\n+    ReadForMatch(Place<'tcx>),\n+\n     /// Write the discriminant for a variant to the enum Place.\n     SetDiscriminant { place: Place<'tcx>, variant_index: usize },\n \n@@ -1327,6 +1331,7 @@ impl<'tcx> Debug for Statement<'tcx> {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(ref place, ref rv) => write!(fmt, \"{:?} = {:?}\", place, rv),\n+            ReadForMatch(ref place) => write!(fmt, \"ReadForMatch({:?})\", place),\n             // (reuse lifetime rendering policy from ppaux.)\n             EndRegion(ref ce) => write!(fmt, \"EndRegion({})\", ty::ReScope(*ce)),\n             Validate(ref op, ref places) => write!(fmt, \"Validate({:?}, {:?})\", op, places),\n@@ -2212,6 +2217,7 @@ BraceStructTypeFoldableImpl! {\n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for StatementKind<'tcx> {\n         (StatementKind::Assign)(a, b),\n+        (StatementKind::ReadForMatch)(place),\n         (StatementKind::SetDiscriminant) { place, variant_index },\n         (StatementKind::StorageLive)(a),\n         (StatementKind::StorageDead)(a),"}, {"sha": "9dd1432167a9044115052025e0cdc4e71b7f53b5", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -355,6 +355,11 @@ macro_rules! make_mir_visitor {\n                                           ref $($mutability)* rvalue) => {\n                         self.visit_assign(block, place, rvalue, location);\n                     }\n+                    StatementKind::ReadForMatch(ref $($mutability)* place) => {\n+                        self.visit_place(place,\n+                                         PlaceContext::Inspect,\n+                                         location);\n+                    }\n                     StatementKind::EndRegion(_) => {}\n                     StatementKind::Validate(_, ref $($mutability)* places) => {\n                         for operand in places {"}, {"sha": "c0cce297ef6a98263db3e01b2a8ccaf8b03cc4d9", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -82,6 +82,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n                 bx\n             }\n+            mir::StatementKind::ReadForMatch(_) |\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n             mir::StatementKind::UserAssertTy(..) |"}, {"sha": "233974435f3f835ba8c4316979703cb5573349c8", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -423,6 +423,14 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                     flow_state,\n                 );\n             }\n+            StatementKind::ReadForMatch(ref place) => {\n+                self.access_place(ContextKind::ReadForMatch.new(location),\n+                                  (place, span),\n+                                  (Deep, Read(ReadKind::Borrow(BorrowKind::Shared))),\n+                                  LocalMutationIsAllowed::No,\n+                                  flow_state,\n+                                  );\n+            }\n             StatementKind::SetDiscriminant {\n                 ref place,\n                 variant_index: _,\n@@ -2090,6 +2098,7 @@ enum ContextKind {\n     CallDest,\n     Assert,\n     Yield,\n+    ReadForMatch,\n     StorageDead,\n }\n "}, {"sha": "46026cdc9412121ecef012b186f858f41f1226c6", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -93,6 +93,14 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n                     JustWrite\n                 );\n             }\n+            StatementKind::ReadForMatch(ref place) => {\n+                self.access_place(\n+                    ContextKind::ReadForMatch.new(location),\n+                    place,\n+                    (Deep, Read(ReadKind::Borrow(BorrowKind::Shared))),\n+                    LocalMutationIsAllowed::No,\n+                );\n+            }\n             StatementKind::SetDiscriminant {\n                 ref place,\n                 variant_index: _,"}, {"sha": "04f5024b76946602cd2341f393ac30ba921fe7eb", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -836,7 +836,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::StorageLive(_)\n+            StatementKind::ReadForMatch(_)\n+            | StatementKind::StorageLive(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::InlineAsm { .. }\n             | StatementKind::EndRegion(_)"}, {"sha": "78886baf51476b1168727af735eab17af264265f", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -227,6 +227,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            mir::StatementKind::ReadForMatch(..) |\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n             mir::StatementKind::Validate(..) |"}, {"sha": "2ff22842141d9bfc806bff4ae7ca4b3f7f8b46c2", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -278,6 +278,9 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 }\n                 self.gather_rvalue(rval);\n             }\n+            StatementKind::ReadForMatch(ref place) => {\n+                self.create_move_path(place);\n+            }\n             StatementKind::InlineAsm { ref outputs, ref inputs, ref asm } => {\n                 for (output, kind) in outputs.iter().zip(&asm.outputs) {\n                     if !kind.is_indirect {"}, {"sha": "b9edd2c07f3813938fa17720791799a79bd54584", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -79,6 +79,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 self.deallocate_local(old_val)?;\n             }\n \n+            // FIXME: is there some dynamic semantics we should attach to\n+            // these? Or am I correct in thinking that the inerpreter\n+            // is solely intended for borrowck'ed code?\n+            ReadForMatch(..) => {}\n+\n             // Validity checks.\n             Validate(op, ref places) => {\n                 for operand in places {"}, {"sha": "4081f827d4b3da98ba8acad19f731cee89375d40", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -100,6 +100,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n         self.source_info = statement.source_info;\n         match statement.kind {\n             StatementKind::Assign(..) |\n+            StatementKind::ReadForMatch(..) |\n             StatementKind::SetDiscriminant { .. } |\n             StatementKind::StorageLive(..) |\n             StatementKind::StorageDead(..) |"}, {"sha": "719630129440a6defacbbe1cc3928914cb937e92", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -1135,6 +1135,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 StatementKind::Assign(ref place, ref rvalue) => {\n                     this.visit_assign(bb, place, rvalue, location);\n                 }\n+                StatementKind::ReadForMatch(..) |\n                 StatementKind::SetDiscriminant { .. } |\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |"}, {"sha": "680b60b97284121f58be6726b6d42ad3b401fa2a", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -47,6 +47,7 @@ impl RemoveNoopLandingPads {\n     {\n         for stmt in &mir[bb].statements {\n             match stmt.kind {\n+                StatementKind::ReadForMatch(_) |\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n                 StatementKind::EndRegion(_) |"}, {"sha": "b23f05680121028dfd34f1f69dad8783215d9582", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -158,6 +158,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::Assign(ref place, ref rvalue) => {\n                 (place, rvalue)\n             }\n+            mir::StatementKind::ReadForMatch(_) |\n             mir::StatementKind::StorageLive(_) |\n             mir::StatementKind::StorageDead(_) |\n             mir::StatementKind::InlineAsm { .. } |"}, {"sha": "f7c8f8f43f178a2c2f81005a14b89b0642bb4c31", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24abe6f363cd47d444e4cff1123da93817b980f8/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=24abe6f363cd47d444e4cff1123da93817b980f8", "patch": "@@ -85,6 +85,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.record(\"Statement\", statement);\n         self.record(match statement.kind {\n             StatementKind::Assign(..) => \"StatementKind::Assign\",\n+            StatementKind::ReadForMatch(..) => \"StatementKind::ReadForMatch\",\n             StatementKind::EndRegion(..) => \"StatementKind::EndRegion\",\n             StatementKind::Validate(..) => \"StatementKind::Validate\",\n             StatementKind::SetDiscriminant { .. } => \"StatementKind::SetDiscriminant\","}]}