{"sha": "dc4a644980e919539962f2bbf267381c20441f8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNGE2NDQ5ODBlOTE5NTM5OTYyZjJiYmYyNjczODFjMjA0NDFmOGU=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-07-05T22:52:13Z"}, "committer": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-07-05T22:52:13Z"}, "message": "Add 'unrolled' is_ascii_align_to benchmark, and move is_ascii benchmarks into own file", "tree": {"sha": "3becb9952fb313ead616e75a6a95da8f378ba3c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3becb9952fb313ead616e75a6a95da8f378ba3c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc4a644980e919539962f2bbf267381c20441f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4a644980e919539962f2bbf267381c20441f8e", "html_url": "https://github.com/rust-lang/rust/commit/dc4a644980e919539962f2bbf267381c20441f8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc4a644980e919539962f2bbf267381c20441f8e/comments", "author": null, "committer": null, "parents": [{"sha": "13e380d798cd13fac2c4683f673da50514770cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e380d798cd13fac2c4683f673da50514770cb3", "html_url": "https://github.com/rust-lang/rust/commit/13e380d798cd13fac2c4683f673da50514770cb3"}], "stats": {"total": 159, "additions": 83, "deletions": 76}, "files": [{"sha": "6a4d706cff6e4cb6eb9871572debfc675bc3c066", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 2, "deletions": 76, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/dc4a644980e919539962f2bbf267381c20441f8e/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4a644980e919539962f2bbf267381c20441f8e/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=dc4a644980e919539962f2bbf267381c20441f8e", "patch": "@@ -1,3 +1,5 @@\n+mod is_ascii;\n+\n // Lower-case ASCII 'a' is the first byte that has its highest bit set\n // after wrap-adding 0x1F:\n //\n@@ -59,48 +61,6 @@ macro_rules! benches {\n             )+\n         }\n     };\n-\n-    // For some tests the vec allocation tends to dominate, so it can be avoided.\n-    (@readonly $( fn $name: ident($arg: ident: &[u8]) $body: block )+) => {\n-        benches!(@ro mod short_readonly SHORT $($name $arg $body)+);\n-        benches!(@ro mod medium_readonly MEDIUM $($name $arg $body)+);\n-        benches!(@ro mod long_readonly LONG $($name $arg $body)+);\n-        // Add another `MEDIUM` bench, but trim the ends so that we can (try to)\n-        // benchmark a case where the function has to handle misalignment.\n-        mod medium_unaligned {\n-            use super::*;\n-            $(\n-                #[bench]\n-                fn $name(bencher: &mut Bencher) {\n-                    bencher.bytes = MEDIUM.len() as u64 - 2;\n-                    let mut vec = MEDIUM.as_bytes().to_vec();\n-                    bencher.iter(|| {\n-                        black_box(&mut vec);\n-                        let $arg = black_box(&vec[1..(vec.len() - 1)]);\n-                        black_box($body)\n-                    })\n-                }\n-            )+\n-        }\n-    };\n-    (@ro mod $mod_name: ident $input: ident $($name: ident $arg: ident $body: block)+) => {\n-        mod $mod_name {\n-            use super::*;\n-\n-            $(\n-                #[bench]\n-                fn $name(bencher: &mut Bencher) {\n-                    bencher.bytes = $input.len() as u64;\n-                    let mut vec = $input.as_bytes().to_vec();\n-                    bencher.iter(|| {\n-                        black_box(&mut vec);\n-                        let $arg = black_box(&vec[..]);\n-                        black_box($body)\n-                    })\n-                }\n-            )+\n-        }\n-    };\n }\n \n use test::black_box;\n@@ -287,40 +247,6 @@ benches! {\n     is_ascii_control,\n }\n \n-benches! {\n-    @readonly\n-    fn is_ascii_slice_libcore(bytes: &[u8]) {\n-        bytes.is_ascii()\n-    }\n-\n-    fn is_ascii_slice_iter_all(bytes: &[u8]) {\n-        bytes.iter().all(|b| b.is_ascii())\n-    }\n-\n-    fn is_ascii_slice_align_to(bytes: &[u8]) {\n-        is_ascii_align_to_impl(bytes)\n-    }\n-}\n-\n-// Separate since it's easier to debug errors if they don't go through macro\n-// expansion first.\n-fn is_ascii_align_to_impl(bytes: &[u8]) -> bool {\n-    if bytes.len() < core::mem::size_of::<usize>() {\n-        return bytes.iter().all(|b| b.is_ascii());\n-    }\n-    // SAFETY: transmuting a sequence of `u8` to `usize` is always fine\n-    let (head, body, tail) = unsafe { bytes.align_to::<usize>() };\n-    head.iter().all(|b| b.is_ascii())\n-        && body.iter().all(|w| !contains_nonascii(*w))\n-        && tail.iter().all(|b| b.is_ascii())\n-}\n-\n-#[inline]\n-fn contains_nonascii(v: usize) -> bool {\n-    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n-    (NONASCII_MASK & v) != 0\n-}\n-\n macro_rules! repeat {\n     ($s: expr) => {\n         concat!($s, $s, $s, $s, $s, $s, $s, $s, $s, $s)"}, {"sha": "45ba2f8fe82ec8f036cd31c01aabfe72820132b0", "filename": "src/libcore/benches/ascii/is_ascii.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/dc4a644980e919539962f2bbf267381c20441f8e/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4a644980e919539962f2bbf267381c20441f8e/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs?ref=dc4a644980e919539962f2bbf267381c20441f8e", "patch": "@@ -0,0 +1,81 @@\n+use super::{LONG, MEDIUM, SHORT};\n+use test::black_box;\n+use test::Bencher;\n+\n+macro_rules! benches {\n+    ($( fn $name: ident($arg: ident: &[u8]) $body: block )+) => {\n+        benches!(mod short SHORT[..] $($name $arg $body)+);\n+        benches!(mod medium MEDIUM[..] $($name $arg $body)+);\n+        benches!(mod long LONG[..] $($name $arg $body)+);\n+\n+        benches!(mod unaligned_head MEDIUM[1..] $($name $arg $body)+);\n+        benches!(mod unaligned_tail MEDIUM[..(MEDIUM.len() - 1)] $($name $arg $body)+);\n+        benches!(mod unaligned_both MEDIUM[1..(MEDIUM.len() - 1)] $($name $arg $body)+);\n+    };\n+\n+    (mod $mod_name: ident $input: ident [$range: expr] $($name: ident $arg: ident $body: block)+) => {\n+        mod $mod_name {\n+            use super::*;\n+            $(\n+                #[bench]\n+                fn $name(bencher: &mut Bencher) {\n+                    bencher.bytes = $input[$range].len() as u64;\n+                    let mut vec = $input.as_bytes().to_vec();\n+                    bencher.iter(|| {\n+                        black_box(&mut vec);\n+                        let $arg = black_box(&vec[$range]);\n+                        black_box($body)\n+                    })\n+                }\n+            )+\n+        }\n+    };\n+}\n+\n+benches! {\n+    fn case00_libcore(bytes: &[u8]) {\n+        bytes.is_ascii()\n+    }\n+\n+    fn case01_iter_all(bytes: &[u8]) {\n+        bytes.iter().all(|b| b.is_ascii())\n+    }\n+\n+    fn case02_align_to(bytes: &[u8]) {\n+        is_ascii_align_to(bytes)\n+    }\n+\n+    fn case03_align_to_unrolled(bytes: &[u8]) {\n+        is_ascii_align_to_unrolled(bytes)\n+    }\n+}\n+\n+// These are separate since it's easier to debug errors if they don't go through\n+// macro expansion first.\n+fn is_ascii_align_to(bytes: &[u8]) -> bool {\n+    if bytes.len() < core::mem::size_of::<usize>() {\n+        return bytes.iter().all(|b| b.is_ascii());\n+    }\n+    // SAFETY: transmuting a sequence of `u8` to `usize` is always fine\n+    let (head, body, tail) = unsafe { bytes.align_to::<usize>() };\n+    head.iter().all(|b| b.is_ascii())\n+        && body.iter().all(|w| !contains_nonascii(*w))\n+        && tail.iter().all(|b| b.is_ascii())\n+}\n+\n+fn is_ascii_align_to_unrolled(bytes: &[u8]) -> bool {\n+    if bytes.len() < core::mem::size_of::<usize>() {\n+        return bytes.iter().all(|b| b.is_ascii());\n+    }\n+    // SAFETY: transmuting a sequence of `u8` to `[usize; 2]` is always fine\n+    let (head, body, tail) = unsafe { bytes.align_to::<[usize; 2]>() };\n+    head.iter().all(|b| b.is_ascii())\n+        && body.iter().all(|w| !contains_nonascii(w[0] | w[1]))\n+        && tail.iter().all(|b| b.is_ascii())\n+}\n+\n+#[inline]\n+fn contains_nonascii(v: usize) -> bool {\n+    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+    (NONASCII_MASK & v) != 0\n+}"}]}