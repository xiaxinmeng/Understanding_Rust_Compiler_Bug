{"sha": "e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NTJlMjkyOWQ3MmEyMGVkMGNlYjA5YzQ4YjZjZDc2YjBhOWE4OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-15T02:13:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-15T02:13:55Z"}, "message": "Auto merge of #62670 - estebank:extern-fn-with-body, r=petrochenkov\n\nDetect `fn` with a body in an `extern` block\n\nFix #62109.", "tree": {"sha": "4b6417029a49ea992ebae70f3ae7209da01d78ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b6417029a49ea992ebae70f3ae7209da01d78ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "html_url": "https://github.com/rust-lang/rust/commit/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d82fd9ecd3e65a313b0e0bdd24de127d4b566156", "url": "https://api.github.com/repos/rust-lang/rust/commits/d82fd9ecd3e65a313b0e0bdd24de127d4b566156", "html_url": "https://github.com/rust-lang/rust/commit/d82fd9ecd3e65a313b0e0bdd24de127d4b566156"}, {"sha": "f2a6a4e5afbe61cded2793e55f821e14c6708c78", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a6a4e5afbe61cded2793e55f821e14c6708c78", "html_url": "https://github.com/rust-lang/rust/commit/f2a6a4e5afbe61cded2793e55f821e14c6708c78"}], "stats": {"total": 106, "additions": 91, "deletions": 15}, "files": [{"sha": "7f4b9904cab82622567c790ddb754e316537e5db", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "patch": "@@ -742,7 +742,7 @@ impl<'a> Parser<'a> {\n             AstFragmentKind::ForeignItems => {\n                 let mut items = SmallVec::new();\n                 while self.token != token::Eof {\n-                    items.push(self.parse_foreign_item()?);\n+                    items.push(self.parse_foreign_item(DUMMY_SP)?);\n                 }\n                 AstFragment::ForeignItems(items)\n             }"}, {"sha": "676c87f9daa3d413e36b24167f59aa7cd4d55c03", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "patch": "@@ -15,6 +15,7 @@ use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::{debug, trace};\n+use std::mem;\n \n /// Creates a placeholder argument.\n crate fn dummy_arg(ident: Ident) -> Arg {\n@@ -783,6 +784,42 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n+    crate fn parse_semi_or_incorrect_foreign_fn_body(\n+        &mut self,\n+        ident: &Ident,\n+        extern_sp: Span,\n+    ) -> PResult<'a, ()> {\n+        if self.token != token::Semi {\n+            // this might be an incorrect fn definition (#62109)\n+            let parser_snapshot = self.clone();\n+            match self.parse_inner_attrs_and_block() {\n+                Ok((_, body)) => {\n+                    self.struct_span_err(ident.span, \"incorrect `fn` inside `extern` block\")\n+                        .span_label(ident.span, \"can't have a body\")\n+                        .span_label(body.span, \"this body is invalid here\")\n+                        .span_label(\n+                            extern_sp,\n+                            \"`extern` blocks define existing foreign functions and `fn`s \\\n+                             inside of them cannot have a body\")\n+                        .help(\"you might have meant to write a function accessible through ffi, \\\n+                               which can be done by writing `extern fn` outside of the \\\n+                               `extern` block\")\n+                        .note(\"for more information, visit \\\n+                               https://doc.rust-lang.org/std/keyword.extern.html\")\n+                        .emit();\n+                }\n+                Err(mut err) => {\n+                    err.cancel();\n+                    mem::replace(self, parser_snapshot);\n+                    self.expect(&token::Semi)?;\n+                }\n+            }\n+        } else {\n+            self.bump();\n+        }\n+        Ok(())\n+    }\n+\n     /// Consume alternative await syntaxes like `await <expr>`, `await? <expr>`, `await(<expr>)`\n     /// and `await { <expr> }`.\n     crate fn parse_incorrect_await_syntax("}, {"sha": "8968ca1793a4344b2a44c192e7139843aec62f7b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "patch": "@@ -4611,7 +4611,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a block. Inner attributes are allowed.\n-    fn parse_inner_attrs_and_block(&mut self) -> PResult<'a, (Vec<Attribute>, P<Block>)> {\n+    crate fn parse_inner_attrs_and_block(&mut self) -> PResult<'a, (Vec<Attribute>, P<Block>)> {\n         maybe_whole!(self, NtBlock, |x| (Vec::new(), x));\n \n         let lo = self.token.span;\n@@ -6698,15 +6698,20 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a function declaration from a foreign module.\n-    fn parse_item_foreign_fn(&mut self, vis: ast::Visibility, lo: Span, attrs: Vec<Attribute>)\n-                             -> PResult<'a, ForeignItem> {\n+    fn parse_item_foreign_fn(\n+        &mut self,\n+        vis: ast::Visibility,\n+        lo: Span,\n+        attrs: Vec<Attribute>,\n+        extern_sp: Span,\n+    ) -> PResult<'a, ForeignItem> {\n         self.expect_keyword(kw::Fn)?;\n \n         let (ident, mut generics) = self.parse_fn_header()?;\n         let decl = self.parse_fn_decl(true)?;\n         generics.where_clause = self.parse_where_clause()?;\n         let hi = self.token.span;\n-        self.expect(&token::Semi)?;\n+        self.parse_semi_or_incorrect_foreign_fn_body(&ident, extern_sp)?;\n         Ok(ast::ForeignItem {\n             ident,\n             attrs,\n@@ -6833,12 +6838,14 @@ impl<'a> Parser<'a> {\n     /// extern \"C\" {}\n     /// extern {}\n     /// ```\n-    fn parse_item_foreign_mod(&mut self,\n-                              lo: Span,\n-                              opt_abi: Option<Abi>,\n-                              visibility: Visibility,\n-                              mut attrs: Vec<Attribute>)\n-                              -> PResult<'a, P<Item>> {\n+    fn parse_item_foreign_mod(\n+        &mut self,\n+        lo: Span,\n+        opt_abi: Option<Abi>,\n+        visibility: Visibility,\n+        mut attrs: Vec<Attribute>,\n+        extern_sp: Span,\n+    ) -> PResult<'a, P<Item>> {\n         self.expect(&token::OpenDelim(token::Brace))?;\n \n         let abi = opt_abi.unwrap_or(Abi::C);\n@@ -6847,7 +6854,7 @@ impl<'a> Parser<'a> {\n \n         let mut foreign_items = vec![];\n         while !self.eat(&token::CloseDelim(token::Brace)) {\n-            foreign_items.push(self.parse_foreign_item()?);\n+            foreign_items.push(self.parse_foreign_item(extern_sp)?);\n         }\n \n         let prev_span = self.prev_span;\n@@ -7094,6 +7101,7 @@ impl<'a> Parser<'a> {\n         }\n \n         if self.eat_keyword(kw::Extern) {\n+            let extern_sp = self.prev_span;\n             if self.eat_keyword(kw::Crate) {\n                 return Ok(Some(self.parse_item_extern_crate(lo, visibility, attrs)?));\n             }\n@@ -7117,7 +7125,9 @@ impl<'a> Parser<'a> {\n                                         maybe_append(attrs, extra_attrs));\n                 return Ok(Some(item));\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n-                return Ok(Some(self.parse_item_foreign_mod(lo, opt_abi, visibility, attrs)?));\n+                return Ok(Some(\n+                    self.parse_item_foreign_mod(lo, opt_abi, visibility, attrs, extern_sp)?,\n+                ));\n             }\n \n             self.unexpected()?;\n@@ -7502,7 +7512,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a foreign item.\n-    crate fn parse_foreign_item(&mut self) -> PResult<'a, ForeignItem> {\n+    crate fn parse_foreign_item(&mut self, extern_sp: Span) -> PResult<'a, ForeignItem> {\n         maybe_whole!(self, NtForeignItem, |ni| ni);\n \n         let attrs = self.parse_outer_attributes()?;\n@@ -7527,7 +7537,7 @@ impl<'a> Parser<'a> {\n         }\n         // FOREIGN FUNCTION ITEM\n         if self.check_keyword(kw::Fn) {\n-            return Ok(self.parse_item_foreign_fn(visibility, lo, attrs)?);\n+            return Ok(self.parse_item_foreign_fn(visibility, lo, attrs, extern_sp)?);\n         }\n         // FOREIGN TYPE ITEM\n         if self.check_keyword(kw::Type) {"}, {"sha": "4cf563514ea601599b9cc8f0c96b6d3a1ad776c8", "filename": "src/test/ui/extern/extern-ffi-fn-with-body.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Ftest%2Fui%2Fextern%2Fextern-ffi-fn-with-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Ftest%2Fui%2Fextern%2Fextern-ffi-fn-with-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-ffi-fn-with-body.rs?ref=e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "patch": "@@ -0,0 +1,11 @@\n+extern \"C\" {\n+    fn foo() -> i32 { //~ ERROR incorrect `fn` inside `extern` block\n+        return 0;\n+    }\n+}\n+\n+extern \"C\" fn bar() -> i32 {\n+    return 0;\n+}\n+\n+fn main() {}"}, {"sha": "4ac3ce1f93eabd9ef87883d495f35288f9869a27", "filename": "src/test/ui/extern/extern-ffi-fn-with-body.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Ftest%2Fui%2Fextern%2Fextern-ffi-fn-with-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e452e2929d72a20ed0ceb09c48b6cd76b0a9a898/src%2Ftest%2Fui%2Fextern%2Fextern-ffi-fn-with-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-ffi-fn-with-body.stderr?ref=e452e2929d72a20ed0ceb09c48b6cd76b0a9a898", "patch": "@@ -0,0 +1,18 @@\n+error: incorrect `fn` inside `extern` block\n+  --> $DIR/extern-ffi-fn-with-body.rs:2:8\n+   |\n+LL |   extern \"C\" {\n+   |   ------ `extern` blocks define existing foreign functions and `fn`s inside of them cannot have a body\n+LL |       fn foo() -> i32 {\n+   |  ________^^^__________-\n+   | |        |\n+   | |        can't have a body\n+LL | |         return 0;\n+LL | |     }\n+   | |_____- this body is invalid here\n+   |\n+   = help: you might have meant to write a function accessible through ffi, which can be done by writing `extern fn` outside of the `extern` block\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to previous error\n+"}]}