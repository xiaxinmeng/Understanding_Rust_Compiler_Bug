{"sha": "0fdb7df32b0398f6cdac154c6c1c29e505147da6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZGI3ZGYzMmIwMzk4ZjZjZGFjMTU0YzZjMWMyOWU1MDUxNDdkYTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T23:12:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-25T23:16:05Z"}, "message": "avoid catching InterpError", "tree": {"sha": "731d96ba6e4449a807b9228d296a5022177d0c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731d96ba6e4449a807b9228d296a5022177d0c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fdb7df32b0398f6cdac154c6c1c29e505147da6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fdb7df32b0398f6cdac154c6c1c29e505147da6", "html_url": "https://github.com/rust-lang/rust/commit/0fdb7df32b0398f6cdac154c6c1c29e505147da6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fdb7df32b0398f6cdac154c6c1c29e505147da6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5fb9ae5b2ed3cb011ada9dc1e8633aa0927f279", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fb9ae5b2ed3cb011ada9dc1e8633aa0927f279", "html_url": "https://github.com/rust-lang/rust/commit/a5fb9ae5b2ed3cb011ada9dc1e8633aa0927f279"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "ada02ceb5cbf3cc910d319039ef80e1ab628fa5c", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0fdb7df32b0398f6cdac154c6c1c29e505147da6/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fdb7df32b0398f6cdac154c6c1c29e505147da6/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=0fdb7df32b0398f6cdac154c6c1c29e505147da6", "patch": "@@ -367,7 +367,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         let bytes = self.get_bytes_with_undef_and_ptr(cx, ptr, size)?;\n         // Undef check happens *after* we established that the alignment is correct.\n         // We must not return `Ok()` for unaligned pointers!\n-        if self.check_defined(ptr, size).is_err() {\n+        if self.is_defined(ptr, size).is_err() {\n             // This inflates undefined bytes to the entire scalar, even if only a few\n             // bytes are undefined.\n             return Ok(ScalarMaybeUndef::Undef);\n@@ -552,13 +552,19 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n }\n \n /// Undefined bytes.\n-impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n+impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n+    /// Checks whether the given range  is entirely defined.\n+    ///\n+    /// Returns `Ok(())` if it's defined. Otherwise returns the index of the byte\n+    /// at which the first undefined access begins.\n+    fn is_defined(&self, ptr: Pointer<Tag>, size: Size) -> Result<(), Size> {\n+        self.undef_mask.is_range_defined(ptr.offset, ptr.offset + size) // `Size` addition\n+    }\n+\n     /// Checks that a range of bytes is defined. If not, returns the `ReadUndefBytes`\n     /// error which will report the first byte which is undefined.\n-    #[inline]\n     fn check_defined(&self, ptr: Pointer<Tag>, size: Size) -> InterpResult<'tcx> {\n-        self.undef_mask\n-            .is_range_defined(ptr.offset, ptr.offset + size) // `Size` addition\n+        self.is_defined(ptr, size)\n             .or_else(|idx| throw_ub!(InvalidUndefBytes(Some(Pointer::new(ptr.alloc_id, idx)))))\n     }\n "}]}