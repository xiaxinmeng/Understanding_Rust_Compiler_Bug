{"sha": "bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYmIxZjVjZTFlNmE4NWEwMzIxOTc2N2NmYzVjOWJhYjNmN2JmOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-27T15:41:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-27T15:41:51Z"}, "message": "Auto merge of #46479 - bkchr:termination_trait, r=arielb1\n\nImplements RFC 1937: `?` in `main`\n\nThis is the first part of the RFC 1937 that supports new\n`Termination` trait in the rust `main` function.\n\nThanks @nikomatsakis, @arielb1 and all other people in the gitter channel for all your help!\n\nThe support for doctest and `#[test]` is still missing, bu as @nikomatsakis said, smaller pull requests are better :)", "tree": {"sha": "b72634f6bee5eb0e51d428fe53ecd1c28c11b907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b72634f6bee5eb0e51d428fe53ecd1c28c11b907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "html_url": "https://github.com/rust-lang/rust/commit/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63efff5a71269ae22b8769e2e6f9aaa2f940f823", "url": "https://api.github.com/repos/rust-lang/rust/commits/63efff5a71269ae22b8769e2e6f9aaa2f940f823", "html_url": "https://github.com/rust-lang/rust/commit/63efff5a71269ae22b8769e2e6f9aaa2f940f823"}, {"sha": "09f94bea4aca7696b58dd7e6668ca27d71908984", "url": "https://api.github.com/repos/rust-lang/rust/commits/09f94bea4aca7696b58dd7e6668ca27d71908984", "html_url": "https://github.com/rust-lang/rust/commit/09f94bea4aca7696b58dd7e6668ca27d71908984"}], "stats": {"total": 688, "additions": 575, "deletions": 113}, "files": [{"sha": "dca676130b9a7bfca693a2d2e788cc680d3dbe66", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -338,6 +338,8 @@ language_item_table! {\n     U128ShloFnLangItem,              \"u128_shlo\",               u128_shlo_fn;\n     I128ShroFnLangItem,              \"i128_shro\",               i128_shro_fn;\n     U128ShroFnLangItem,              \"u128_shro\",               u128_shro_fn;\n+\n+    TerminationTraitLangItem,        \"termination\",             termination;\n }\n \n impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {"}, {"sha": "64f405e0f24b67a03d1ed19769d4317060bc06e3", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -155,11 +155,19 @@ impl CodeStats {\n \n                     // Include field alignment in output only if it caused padding injection\n                     if min_offset != offset {\n-                        let pad = offset - min_offset;\n-                        println!(\"print-type-size {}padding: {} bytes\",\n-                                 indent, pad);\n-                        println!(\"print-type-size {}field `.{}`: {} bytes, alignment: {} bytes\",\n-                                 indent, name, size, align);\n+                        if offset > min_offset {\n+                            let pad = offset - min_offset;\n+                            println!(\"print-type-size {}padding: {} bytes\",\n+                                     indent, pad);\n+                            println!(\"print-type-size {}field `.{}`: {} bytes, \\\n+                                      alignment: {} bytes\",\n+                                     indent, name, size, align);\n+                        } else {\n+                            println!(\"print-type-size {}field `.{}`: {} bytes, \\\n+                                      offset: {} bytes, \\\n+                                      alignment: {} bytes\",\n+                                     indent, name, size, offset, align);\n+                        }\n                     } else {\n                         println!(\"print-type-size {}field `.{}`: {} bytes\",\n                                  indent, name, size);"}, {"sha": "10fa379924b1f6f53665f1bd492a777748e8e1cc", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 61, "deletions": 22, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -194,11 +194,12 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n-use rustc::middle::lang_items::{ExchangeMallocFnLangItem};\n+use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::traits;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Substs, Kind};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n+use rustc::session::config;\n use rustc::mir::{self, Location};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::MonoItem;\n@@ -212,6 +213,8 @@ use rustc_data_structures::bitvec::BitVector;\n \n use syntax::attr;\n \n+use std::iter;\n+\n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum MonoItemCollectionMode {\n     Eager,\n@@ -329,6 +332,8 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             tcx.hir.local_def_id(node_id)\n         });\n \n+        debug!(\"collect_roots: entry_fn = {:?}\", entry_fn);\n+\n         let mut visitor = RootCollector {\n             tcx,\n             mode,\n@@ -951,16 +956,8 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 // actually used somewhere. Just declaring them is insufficient.\n             }\n             hir::ItemFn(..) => {\n-                let tcx = self.tcx;\n-                let def_id = tcx.hir.local_def_id(item.id);\n-\n-                if self.is_root(def_id) {\n-                    debug!(\"RootCollector: ItemFn({})\",\n-                           def_id_to_string(tcx, def_id));\n-\n-                    let instance = Instance::mono(tcx, def_id);\n-                    self.output.push(MonoItem::Fn(instance));\n-                }\n+                let def_id = self.tcx.hir.local_def_id(item.id);\n+                self.push_if_root(def_id);\n             }\n         }\n     }\n@@ -973,16 +970,8 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         match ii.node {\n             hir::ImplItemKind::Method(hir::MethodSig { .. }, _) => {\n-                let tcx = self.tcx;\n-                let def_id = tcx.hir.local_def_id(ii.id);\n-\n-                if self.is_root(def_id) {\n-                    debug!(\"RootCollector: MethodImplItem({})\",\n-                           def_id_to_string(tcx, def_id));\n-\n-                    let instance = Instance::mono(tcx, def_id);\n-                    self.output.push(MonoItem::Fn(instance));\n-                }\n+                let def_id = self.tcx.hir.local_def_id(ii.id);\n+                self.push_if_root(def_id);\n             }\n             _ => { /* Nothing to do here */ }\n         }\n@@ -1003,6 +992,56 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n             }\n         }\n     }\n+\n+    /// If `def_id` represents a root, then push it onto the list of\n+    /// outputs. (Note that all roots must be monomorphic.)\n+    fn push_if_root(&mut self, def_id: DefId) {\n+        if self.is_root(def_id) {\n+            debug!(\"RootCollector::push_if_root: found root def_id={:?}\", def_id);\n+\n+            let instance = Instance::mono(self.tcx, def_id);\n+            self.output.push(create_fn_mono_item(instance));\n+\n+            self.push_extra_entry_roots(def_id);\n+        }\n+    }\n+\n+    /// As a special case, when/if we encounter the\n+    /// `main()` function, we also have to generate a\n+    /// monomorphized copy of the start lang item based on\n+    /// the return type of `main`. This is not needed when\n+    /// the user writes their own `start` manually.\n+    fn push_extra_entry_roots(&mut self, def_id: DefId) {\n+        if self.entry_fn != Some(def_id) {\n+            return;\n+        }\n+\n+        if self.tcx.sess.entry_type.get() != Some(config::EntryMain) {\n+            return;\n+        }\n+\n+        let start_def_id = match self.tcx.lang_items().require(StartFnLangItem) {\n+            Ok(s) => s,\n+            Err(err) => self.tcx.sess.fatal(&err),\n+        };\n+        let main_ret_ty = self.tcx.fn_sig(def_id).output();\n+\n+        // Given that `main()` has no arguments,\n+        // then its return type cannot have\n+        // late-bound regions, since late-bound\n+        // regions must appear in the argument\n+        // listing.\n+        let main_ret_ty = main_ret_ty.no_late_bound_regions().unwrap();\n+\n+        let start_instance = Instance::resolve(\n+            self.tcx,\n+            ty::ParamEnv::empty(traits::Reveal::All),\n+            start_def_id,\n+            self.tcx.mk_substs(iter::once(Kind::from(main_ret_ty)))\n+        ).unwrap();\n+\n+        self.output.push(create_fn_mono_item(start_instance));\n+    }\n }\n \n fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {"}, {"sha": "55c194ae7a58482f1e0a1cb3d6fbc52aee7fb8cb", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -305,14 +305,36 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n                                             .or_insert_with(make_codegen_unit);\n \n+        let mut can_be_internalized = true;\n         let (linkage, visibility) = match trans_item.explicit_linkage(tcx) {\n             Some(explicit_linkage) => (explicit_linkage, Visibility::Default),\n             None => {\n                 match trans_item {\n                     MonoItem::Fn(ref instance) => {\n                         let visibility = match instance.def {\n                             InstanceDef::Item(def_id) => {\n-                                if def_id.is_local() {\n+                                // The `start_fn` lang item is actually a\n+                                // monomorphized instance of a function in the\n+                                // standard library, used for the `main`\n+                                // function. We don't want to export it so we\n+                                // tag it with `Hidden` visibility but this\n+                                // symbol is only referenced from the actual\n+                                // `main` symbol which we unfortunately don't\n+                                // know anything about during\n+                                // partitioning/collection. As a result we\n+                                // forcibly keep this symbol out of the\n+                                // `internalization_candidates` set.\n+                                //\n+                                // FIXME: eventually we don't want to always\n+                                // force this symbol to have hidden\n+                                // visibility, it should indeed be a candidate\n+                                // for internalization, but we have to\n+                                // understand that it's referenced from the\n+                                // `main` symbol we'll generate later.\n+                                if tcx.lang_items().start_fn() == Some(def_id) {\n+                                    can_be_internalized = false;\n+                                    Visibility::Hidden\n+                                } else if def_id.is_local() {\n                                     if tcx.is_exported_symbol(def_id) {\n                                         Visibility::Default\n                                     } else {\n@@ -346,7 +368,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n             }\n         };\n-        if visibility == Visibility::Hidden {\n+        if visibility == Visibility::Hidden && can_be_internalized {\n             internalization_candidates.insert(trans_item);\n         }\n "}, {"sha": "680821d6d681eb46523c8f7f3f7a8f2274beceaa", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -44,6 +44,7 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf};\n use rustc::ty::maps::Providers;\n use rustc::dep_graph::{DepNode, DepConstructor};\n+use rustc::ty::subst::Kind;\n use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::session::config::{self, NoDebugInfo};\n@@ -79,6 +80,7 @@ use std::str;\n use std::sync::Arc;\n use std::time::{Instant, Duration};\n use std::i32;\n+use std::iter;\n use std::sync::mpsc;\n use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n@@ -540,18 +542,26 @@ fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n \n     let et = ccx.sess().entry_type.get().unwrap();\n     match et {\n-        config::EntryMain => create_entry_fn(ccx, span, main_llfn, true),\n-        config::EntryStart => create_entry_fn(ccx, span, main_llfn, false),\n+        config::EntryMain => create_entry_fn(ccx, span, main_llfn, main_def_id, true),\n+        config::EntryStart => create_entry_fn(ccx, span, main_llfn, main_def_id, false),\n         config::EntryNone => {}    // Do nothing.\n     }\n \n-    fn create_entry_fn(ccx: &CrateContext,\n+    fn create_entry_fn<'ccx>(ccx: &'ccx CrateContext,\n                        sp: Span,\n                        rust_main: ValueRef,\n+                       rust_main_def_id: DefId,\n                        use_start_lang_item: bool) {\n-        // Signature of native main(), corresponding to C's `int main(int, char **)`\n         let llfty = Type::func(&[Type::c_int(ccx), Type::i8p(ccx).ptr_to()], &Type::c_int(ccx));\n \n+        let main_ret_ty = ccx.tcx().fn_sig(rust_main_def_id).output();\n+        // Given that `main()` has no arguments,\n+        // then its return type cannot have\n+        // late-bound regions, since late-bound\n+        // regions must appear in the argument\n+        // listing.\n+        let main_ret_ty = main_ret_ty.no_late_bound_regions().unwrap();\n+\n         if declare::get_defined_value(ccx, \"main\").is_some() {\n             // FIXME: We should be smart and show a better diagnostic here.\n             ccx.sess().struct_span_err(sp, \"entry symbol `main` defined multiple times\")\n@@ -577,8 +587,8 @@ fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = ccx.tcx().require_lang_item(StartFnLangItem);\n-            let start_instance = Instance::mono(ccx.tcx(), start_def_id);\n-            let start_fn = callee::get_fn(ccx, start_instance);\n+            let start_fn = callee::resolve_and_get_fn(ccx, start_def_id, ccx.tcx().mk_substs(\n+                iter::once(Kind::from(main_ret_ty))));\n             (start_fn, vec![bld.pointercast(rust_main, Type::i8p(ccx).ptr_to()),\n                             arg_argc, arg_argv])\n         } else {\n@@ -587,8 +597,6 @@ fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n         };\n \n         let result = bld.call(start_fn, &args, None);\n-\n-        // Return rust start function's result from native main()\n         bld.ret(bld.intcast(result, Type::c_int(ccx), true));\n     }\n }"}, {"sha": "7a49c3549abdfa8e10c3de97258930acf72228ca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -96,14 +96,14 @@ use rustc::middle::region;\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode};\n use rustc::ty::{ParamTy, LvaluePreference, NoPreference, PreferMutLvalue};\n-use rustc::ty::{self, Ty, TyCtxt, Visibility};\n+use rustc::ty::{self, Ty, TyCtxt, Visibility, ToPredicate};\n use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::maps::Providers;\n use rustc::ty::util::{Representability, IntTypeExt};\n use errors::{DiagnosticBuilder, DiagnosticId};\n use require_c_abi_if_variadic;\n-use session::{CompileIncomplete, Session};\n+use session::{CompileIncomplete, config, Session};\n use TypeAndSubsts;\n use lint;\n use util::common::{ErrorReported, indenter};\n@@ -115,6 +115,7 @@ use std::collections::hash_map::Entry;\n use std::cmp;\n use std::fmt::Display;\n use std::mem::replace;\n+use std::iter;\n use std::ops::{self, Deref};\n use syntax::abi::Abi;\n use syntax::ast;\n@@ -1064,6 +1065,30 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     }\n     fcx.demand_suptype(span, ret_ty, actual_return_ty);\n \n+    if fcx.tcx.sess.features.borrow().termination_trait {\n+        // If the termination trait language item is activated, check that the main return type\n+        // implements the termination trait.\n+        if let Some(term_id) = fcx.tcx.lang_items().termination() {\n+            if let Some((id, _)) = *fcx.tcx.sess.entry_fn.borrow() {\n+                if id == fn_id {\n+                    match fcx.sess().entry_type.get() {\n+                        Some(config::EntryMain) => {\n+                            let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n+                            let trait_ref = ty::TraitRef::new(term_id, substs);\n+                            let cause = traits::ObligationCause::new(\n+                                span, fn_id, ObligationCauseCode::MainFunctionType);\n+\n+                            inherited.register_predicate(\n+                                traits::Obligation::new(\n+                                    cause, param_env, trait_ref.to_predicate()));\n+                        },\n+                        _ => {},\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     (fcx, gen_ty)\n }\n "}, {"sha": "0b2f59abf4f78a900147de85db016ad29871f8fe", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -116,6 +116,7 @@ use syntax::abi::Abi;\n use syntax_pos::Span;\n \n use std::iter;\n+\n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n mod diagnostics;\n@@ -200,10 +201,22 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n                 _ => ()\n             }\n+\n+            let actual = tcx.fn_sig(main_def_id);\n+            let expected_return_type = if tcx.lang_items().termination().is_some()\n+                && tcx.sess.features.borrow().termination_trait {\n+                // we take the return type of the given main function, the real check is done\n+                // in `check_fn`\n+                actual.output().skip_binder()\n+            } else {\n+                // standard () main return type\n+                tcx.mk_nil()\n+            };\n+\n             let se_ty = tcx.mk_fn_ptr(ty::Binder(\n                 tcx.mk_fn_sig(\n                     iter::empty(),\n-                    tcx.mk_nil(),\n+                    expected_return_type,\n                     false,\n                     hir::Unsafety::Normal,\n                     Abi::Rust\n@@ -214,7 +227,7 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 tcx,\n                 &ObligationCause::new(main_span, main_id, ObligationCauseCode::MainFunctionType),\n                 se_ty,\n-                tcx.mk_fn_ptr(tcx.fn_sig(main_def_id)));\n+                tcx.mk_fn_ptr(actual));\n         }\n         _ => {\n             span_bug!(main_span,"}, {"sha": "171c108e3aa55cb15cf4cbcf88b13f1e45565363", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -308,6 +308,7 @@\n #![feature(str_char)]\n #![feature(str_internals)]\n #![feature(str_utf16)]\n+#![feature(termination_trait)]\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n@@ -499,6 +500,11 @@ mod memchr;\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n pub mod rt;\n+// The trait to support returning arbitrary types in the main function\n+mod termination;\n+\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+pub use self::termination::Termination;\n \n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`"}, {"sha": "e2c1bba50c4091458fc9e01461c1d21907a44384", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -26,7 +26,57 @@\n // Reexport some of our utilities which are expected by other crates.\n pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n-#[cfg(not(test))]\n+// To reduce the generated code of the new `lang_start`, this function is doing\n+// the real work.\n+#[cfg(not(any(test, stage0)))]\n+fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n+                       argc: isize, argv: *const *const u8) -> isize {\n+    use panic;\n+    use sys;\n+    use sys_common;\n+    use sys_common::thread_info;\n+    use thread::Thread;\n+    #[cfg(not(feature = \"backtrace\"))]\n+    use mem;\n+\n+    sys::init();\n+\n+    unsafe {\n+        let main_guard = sys::thread::guard::init();\n+        sys::stack_overflow::init();\n+\n+        // Next, set up the current Thread with the guard information we just\n+        // created. Note that this isn't necessary in general for new threads,\n+        // but we just do this to name the main thread and to give it correct\n+        // info about the stack bounds.\n+        let thread = Thread::new(Some(\"main\".to_owned()));\n+        thread_info::set(main_guard, thread);\n+\n+        // Store our args if necessary in a squirreled away location\n+        sys::args::init(argc, argv);\n+\n+        // Let's run some code!\n+        #[cfg(feature = \"backtrace\")]\n+        let exit_code = panic::catch_unwind(|| {\n+            ::sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n+        });\n+        #[cfg(not(feature = \"backtrace\"))]\n+        let exit_code = panic::catch_unwind(move || main());\n+\n+        sys_common::cleanup();\n+        exit_code.unwrap_or(101) as isize\n+    }\n+}\n+\n+#[cfg(not(any(test, stage0)))]\n+#[lang = \"start\"]\n+fn lang_start<T: ::termination::Termination + 'static>\n+    (main: fn() -> T, argc: isize, argv: *const *const u8) -> isize\n+{\n+    lang_start_internal(&move || main().report(), argc, argv)\n+}\n+\n+#[cfg(all(not(test), stage0))]\n #[lang = \"start\"]\n fn lang_start(main: fn(), argc: isize, argv: *const *const u8) -> isize {\n     use panic;"}, {"sha": "36cbce2df75b522b2cbf0b27afce88968d0bc6c9", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -128,7 +128,7 @@ fn filter_frames(frames: &[Frame],\n /// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`.\n #[inline(never)]\n pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n-    where F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+    where F: FnOnce() -> T, F: Send, T: Send\n {\n     f()\n }"}, {"sha": "61137ba4922996ee10880c7dbf8df35c37e1c76a", "filename": "src/libstd/termination.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibstd%2Ftermination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibstd%2Ftermination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftermination.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use error::Error;\n+#[cfg(target_arch = \"wasm32\")]\n+mod exit {\n+    pub const SUCCESS: i32 = 0;\n+    pub const FAILURE: i32 = 1;\n+}\n+#[cfg(not(target_arch = \"wasm32\"))]\n+mod exit {\n+    use libc;\n+    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n+    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n+}\n+\n+/// A trait for implementing arbitrary return types in the `main` function.\n+///\n+/// The c-main function only supports to return integers as return type.\n+/// So, every type implementing the `Termination` trait has to be converted\n+/// to an integer.\n+///\n+/// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n+/// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n+#[cfg_attr(not(any(stage0, test)), lang = \"termination\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+#[rustc_on_unimplemented =\n+  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n+pub trait Termination {\n+    /// Is called to get the representation of the value as status code.\n+    /// This status code is returned to the operating system.\n+    fn report(self) -> i32;\n+}\n+\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+impl Termination for () {\n+    fn report(self) -> i32 { exit::SUCCESS }\n+}\n+\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+impl<T: Termination, E: Error> Termination for Result<T, E> {\n+    fn report(self) -> i32 {\n+        match self {\n+            Ok(val) => val.report(),\n+            Err(err) => {\n+                print_error(err);\n+                exit::FAILURE\n+            }\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+fn print_error<E: Error>(err: E) {\n+    eprintln!(\"Error: {}\", err.description());\n+\n+    if let Some(ref err) = err.cause() {\n+        eprintln!(\"Caused by: {}\", err.description());\n+    }\n+}\n+\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+impl Termination for ! {\n+    fn report(self) -> i32 { unreachable!(); }\n+}\n+\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+impl Termination for bool {\n+    fn report(self) -> i32 {\n+        if self { exit::SUCCESS } else { exit::FAILURE }\n+    }\n+}\n+\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n+impl Termination for i32 {\n+    fn report(self) -> i32 {\n+        self\n+    }\n+}"}, {"sha": "7ae360678cd50e265524ed9dc0d1cdbab401eaee", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -444,6 +444,9 @@ declare_features! (\n \n     // Nested `impl Trait`\n     (active, nested_impl_trait, \"1.24.0\", Some(34511)),\n+\n+    // Termination trait in main (RFC 1937)\n+    (active, termination_trait, \"1.24.0\", Some(43301)),\n );\n \n declare_features! ("}, {"sha": "320be27819812960490598bf1cb21bde455e0ab0", "filename": "src/test/codegen-units/item-collection/cross-crate-closures.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-closures.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -17,12 +17,14 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n // aux-build:cgu_extern_closures.rs\n extern crate cgu_extern_closures;\n \n-//~ TRANS_ITEM fn cross_crate_closures::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn cross_crate_closures::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n \n     //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn[0]\n     //~ TRANS_ITEM fn cgu_extern_closures::inlined_fn[0]::{{closure}}[0]\n@@ -35,6 +37,8 @@ fn main() {\n     // Nothing should be generated for this call, we just link to the instance\n     // in the extern crate.\n     let _ = cgu_extern_closures::non_inlined_fn(6, 7);\n+\n+    0\n }\n \n //~ TRANS_ITEM drop-glue i8"}, {"sha": "bcb3b7b1dadf485c491efec11b63b8f97729433a", "filename": "src/test/codegen-units/item-collection/cross-crate-generic-functions.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-generic-functions.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,13 +12,14 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n // aux-build:cgu_generic_function.rs\n extern crate cgu_generic_function;\n \n-//~ TRANS_ITEM fn cross_crate_generic_functions::main[0]\n-fn main()\n-{\n+//~ TRANS_ITEM fn cross_crate_generic_functions::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn cgu_generic_function::bar[0]<u32>\n     //~ TRANS_ITEM fn cgu_generic_function::foo[0]<u32>\n     let _ = cgu_generic_function::foo(1u32);\n@@ -29,4 +30,6 @@ fn main()\n \n     // This should not introduce a codegen item\n     let _ = cgu_generic_function::exported_but_not_generic(3);\n+\n+    0\n }"}, {"sha": "910ae000848e59860888af9490fa827dc5459c3f", "filename": "src/test/codegen-units/item-collection/cross-crate-trait-method.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fcross-crate-trait-method.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,15 +12,16 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n // aux-build:cgu_export_trait_method.rs\n extern crate cgu_export_trait_method;\n \n use cgu_export_trait_method::Trait;\n \n-//~ TRANS_ITEM fn cross_crate_trait_method::main[0]\n-fn main()\n-{\n+//~ TRANS_ITEM fn cross_crate_trait_method::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     // The object code of these methods is contained in the external crate, so\n     // calling them should *not* introduce codegen items in the current crate.\n     let _: (u32, u32) = Trait::without_default_impl(0);\n@@ -55,4 +56,6 @@ fn main()\n     let _: (char, char) = Trait::without_default_impl_generic('c');\n     //~ TRANS_ITEM fn cgu_export_trait_method::{{impl}}[0]::without_default_impl_generic[0]<bool>\n     let _: (char, bool) = Trait::without_default_impl_generic(false);\n+\n+    0\n }"}, {"sha": "52af81650329cdfe3064d0d90f335b3febe269e4", "filename": "src/test/codegen-units/item-collection/drop_in_place_intrinsic.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fdrop_in_place_intrinsic.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,8 @@\n // compile-flags:-Zprint-trans-items=eager\n // compile-flags:-Zinline-in-all-cgus\n \n+#![feature(start)]\n+\n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<drop_in_place_intrinsic::StructWithDtor[0]> @@ drop_in_place_intrinsic0[Internal]\n struct StructWithDtor(u32);\n \n@@ -20,13 +22,16 @@ impl Drop for StructWithDtor {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM fn drop_in_place_intrinsic::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn drop_in_place_intrinsic::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n \n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<[drop_in_place_intrinsic::StructWithDtor[0]; 2]> @@ drop_in_place_intrinsic0[Internal]\n     let x = [StructWithDtor(0), StructWithDtor(1)];\n \n     drop_slice_in_place(&x);\n+\n+    0\n }\n \n //~ TRANS_ITEM fn drop_in_place_intrinsic::drop_slice_in_place[0]"}, {"sha": "65707c1aa4d65ce2b344962ef684be9637486a50", "filename": "src/test/codegen-units/item-collection/function-as-argument.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ffunction-as-argument.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n fn take_fn_once<T1, T2, F: FnOnce(T1, T2)>(f: F, x: T1, y: T2) {\n     (f)(x, y)\n@@ -23,8 +24,9 @@ fn take_fn_pointer<T1, T2>(f: fn(T1, T2), x: T1, y: T2) {\n     (f)(x, y)\n }\n \n-//~ TRANS_ITEM fn function_as_argument::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn function_as_argument::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n \n     //~ TRANS_ITEM fn function_as_argument::take_fn_once[0]<u32, &str, fn(u32, &str)>\n     //~ TRANS_ITEM fn function_as_argument::function[0]<u32, &str>\n@@ -43,4 +45,6 @@ fn main() {\n     //~ TRANS_ITEM fn function_as_argument::take_fn_pointer[0]<f32, i64>\n     //~ TRANS_ITEM fn function_as_argument::function[0]<f32, i64>\n     take_fn_pointer(function, 0f32, 0i64);\n+\n+    0\n }"}, {"sha": "d3d9aa3aefc77313a933939236db2973cc81d712", "filename": "src/test/codegen-units/item-collection/generic-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-drop-glue.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n struct StructWithDrop<T1, T2> {\n     x: T1,\n@@ -53,8 +54,9 @@ impl Drop for NonGenericWithDrop {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM fn generic_drop_glue::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn generic_drop_glue::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<generic_drop_glue::StructWithDrop[0]<i8, char>> @@ generic_drop_glue0[Internal]\n     //~ TRANS_ITEM fn generic_drop_glue::{{impl}}[0]::drop[0]<i8, char>\n     let _ = StructWithDrop { x: 0i8, y: 'a' }.x;\n@@ -94,4 +96,6 @@ fn main() {\n         EnumNoDrop::A(x) => x,\n         EnumNoDrop::B(x) => x as f64\n     };\n+\n+    0\n }"}, {"sha": "8efe4b2762a564a31de7260955c1e121bb0d6360", "filename": "src/test/codegen-units/item-collection/generic-functions.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-functions.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n fn foo1<T1>(a: T1) -> (T1, u32) {\n     (a, 1)\n@@ -31,8 +32,9 @@ pub fn lifetime_only<'a>(a: &'a u32) -> &'a u32 {\n     a\n }\n \n-//~ TRANS_ITEM fn generic_functions::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn generic_functions::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn generic_functions::foo1[0]<i32>\n     let _ = foo1(2i32);\n     //~ TRANS_ITEM fn generic_functions::foo1[0]<i64>\n@@ -59,4 +61,6 @@ fn main() {\n     let _ = foo3(0i16, \"a\", 2usize);\n     //~ TRANS_ITEM fn generic_functions::foo3[0]<char, (), ()>\n     let _ = foo3('v', (), ());\n+\n+    0\n }"}, {"sha": "d1ee8ee624c28cbdbaa309677b7556a872eb964e", "filename": "src/test/codegen-units/item-collection/generic-impl.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fgeneric-impl.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n struct Struct<T> {\n     x: T,\n@@ -50,9 +51,9 @@ impl<'a> LifeTimeOnly<'a> {\n     pub fn non_instantiated<T>(&self) {}\n }\n \n-\n-//~ TRANS_ITEM fn generic_impl::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn generic_impl::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<i32>\n     //~ TRANS_ITEM fn generic_impl::id[0]<i32>\n     //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::get[0]<i32, i16>\n@@ -76,4 +77,6 @@ fn main() {\n     //~ TRANS_ITEM fn generic_impl::{{impl}}[0]::new[0]<generic_impl::Struct[0]<&str>>\n     //~ TRANS_ITEM fn generic_impl::id[0]<generic_impl::Struct[0]<&str>>\n     let _ = (Struct::new(Struct::new(\"str\")).f)(Struct::new(\"str\"));\n+\n+    0\n }"}, {"sha": "c07d26c3f8d8b7693d117a8264474df39093e37c", "filename": "src/test/codegen-units/item-collection/impl-in-non-instantiated-generic.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fimpl-in-non-instantiated-generic.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n trait SomeTrait {\n     fn foo(&self);\n@@ -28,7 +29,10 @@ pub fn generic_function<T>(x: T) -> (T, i32) {\n     (x, 0)\n }\n \n-//~ TRANS_ITEM fn impl_in_non_instantiated_generic::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn impl_in_non_instantiated_generic::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     0i64.foo();\n+\n+    0\n }"}, {"sha": "2e1138ef1283ef119f8d772f70f0e147700c8192", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n trait Trait {\n     fn foo(&self) -> u32;\n@@ -28,8 +29,9 @@ impl<T> Trait for Struct<T> {\n     fn bar(&self) {}\n }\n \n-//~ TRANS_ITEM fn instantiation_through_vtable::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn instantiation_through_vtable::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let s1 = Struct { _a: 0u32 };\n \n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<instantiation_through_vtable::Struct[0]<u32>> @@ instantiation_through_vtable0[Internal]\n@@ -42,4 +44,6 @@ fn main() {\n     //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::foo[0]<u64>\n     //~ TRANS_ITEM fn instantiation_through_vtable::{{impl}}[0]::bar[0]<u64>\n     let _ = &s1 as &Trait;\n+\n+    0\n }"}, {"sha": "04b54de3ce23e207fd6e2a50fbdee51c1934eddd", "filename": "src/test/codegen-units/item-collection/items-within-generic-items.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fitems-within-generic-items.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n fn generic_fn<T>(a: T) -> (T, i32) {\n     //~ TRANS_ITEM fn items_within_generic_items::generic_fn[0]::nested_fn[0]\n@@ -31,12 +32,15 @@ fn generic_fn<T>(a: T) -> (T, i32) {\n     return (a, x + nested_fn(0));\n }\n \n-//~ TRANS_ITEM fn items_within_generic_items::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn items_within_generic_items::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn items_within_generic_items::generic_fn[0]<i64>\n     let _ = generic_fn(0i64);\n     //~ TRANS_ITEM fn items_within_generic_items::generic_fn[0]<u16>\n     let _ = generic_fn(0u16);\n     //~ TRANS_ITEM fn items_within_generic_items::generic_fn[0]<i8>\n     let _ = generic_fn(0i8);\n+\n+    0\n }"}, {"sha": "f0121d56cec6068c338e188d34f9c5888bbe1c88", "filename": "src/test/codegen-units/item-collection/non-generic-closures.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-closures.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -17,6 +17,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn non_generic_closures::temporary[0]\n fn temporary() {\n@@ -52,12 +53,15 @@ fn assigned_to_variable_executed_directly() {\n     f(4);\n }\n \n-//~ TRANS_ITEM fn non_generic_closures::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn non_generic_closures::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     temporary();\n     assigned_to_variable_but_not_executed();\n     assigned_to_variable_executed_directly();\n     assigned_to_variable_executed_indirectly();\n+\n+    0\n }\n \n //~ TRANS_ITEM fn non_generic_closures::run_closure[0]"}, {"sha": "bf084aa96eafec1de7874c0b7d9ff3924210a6a0", "filename": "src/test/codegen-units/item-collection/non-generic-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-drop-glue.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<non_generic_drop_glue::StructWithDrop[0]> @@ non_generic_drop_glue0[Internal]\n struct StructWithDrop {\n@@ -42,8 +43,9 @@ enum EnumNoDrop {\n     A(i32)\n }\n \n-//~ TRANS_ITEM fn non_generic_drop_glue::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn non_generic_drop_glue::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _ = StructWithDrop { x: 0 }.x;\n     let _ = StructNoDrop { x: 0 }.x;\n     let _ = match EnumWithDrop::A(0) {\n@@ -52,4 +54,6 @@ fn main() {\n     let _ = match EnumNoDrop::A(0) {\n         EnumNoDrop::A(x) => x\n     };\n+\n+    0\n }"}, {"sha": "8c487db5c96111a3772642ea137f76cdaec23706", "filename": "src/test/codegen-units/item-collection/non-generic-functions.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fnon-generic-functions.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn non_generic_functions::foo[0]\n fn foo() {\n@@ -69,11 +70,14 @@ impl Struct {\n     }\n }\n \n-//~ TRANS_ITEM fn non_generic_functions::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn non_generic_functions::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     foo();\n     bar();\n     Struct::foo();\n     let x = Struct { _x: 0 };\n     x.bar();\n+\n+    0\n }"}, {"sha": "5ff7c3480b12653c7b3b8272d12e62a577dc823b", "filename": "src/test/codegen-units/item-collection/static-init.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatic-init.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // compile-flags:-Zprint-trans-items=eager\n+// ignore-tidy-linelength\n+\n+#![feature(start)]\n \n pub static FN : fn() = foo::<i32>;\n \n@@ -17,6 +20,9 @@ pub fn foo<T>() { }\n //~ TRANS_ITEM fn static_init::foo[0]<i32>\n //~ TRANS_ITEM static static_init::FN[0]\n \n-fn main() { }\n+//~ TRANS_ITEM fn static_init::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    0\n+}\n \n-//~ TRANS_ITEM fn static_init::main[0]"}, {"sha": "11df1da3a78b959b2dc510e2ad0639cf1b2e0ffa", "filename": "src/test/codegen-units/item-collection/statics-and-consts.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Fstatics-and-consts.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n static STATIC1: i64 = {\n     const STATIC1_CONST1: i64 = 2;\n@@ -47,9 +48,13 @@ fn foo() {\n     };\n }\n \n-fn main() {\n+//~ TRANS_ITEM fn statics_and_consts::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     foo();\n     let _ = STATIC1;\n+\n+    0\n }\n \n //~ TRANS_ITEM static statics_and_consts::STATIC1[0]\n@@ -58,5 +63,3 @@ fn main() {\n //~ TRANS_ITEM static statics_and_consts::foo[0]::STATIC2[0]\n //~ TRANS_ITEM static statics_and_consts::foo[0]::STATIC2[1]\n //~ TRANS_ITEM static statics_and_consts::foo[0]::STATIC2[2]\n-\n-//~ TRANS_ITEM fn statics_and_consts::main[0]"}, {"sha": "8eb33dd647f64cf872faa721f8914ad8557b9feb", "filename": "src/test/codegen-units/item-collection/trait-implementations.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-implementations.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n pub trait SomeTrait {\n     fn foo(&self);\n@@ -55,8 +56,9 @@ impl<T> SomeGenericTrait<T> for f32 {\n     fn bar<T2>(&self, _: T, _: T2) {}\n }\n \n-//~ TRANS_ITEM fn trait_implementations::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn trait_implementations::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n    //~ TRANS_ITEM fn trait_implementations::{{impl}}[1]::bar[0]<char>\n    0i32.bar('x');\n \n@@ -77,4 +79,6 @@ fn main() {\n \n    //~ TRANS_ITEM fn trait_implementations::{{impl}}[3]::bar[0]<&str, &str>\n    0f32.bar(\"&str\", \"&str\");\n+\n+   0\n }"}, {"sha": "10b216303087ce30bb3072c2ef2c9b31436416f0", "filename": "src/test/codegen-units/item-collection/trait-method-as-argument.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-as-argument.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n trait Trait : Sized {\n     fn foo(self) -> Self { self }\n@@ -36,8 +37,9 @@ fn take_foo_mut<T, F: FnMut(T) -> T>(mut f: F, arg: T) -> T {\n     (f)(arg)\n }\n \n-//~ TRANS_ITEM fn trait_method_as_argument::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn trait_method_as_argument::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_once[0]<u32, fn(u32) -> u32>\n     //~ TRANS_ITEM fn trait_method_as_argument::{{impl}}[0]::foo[0]\n     //~ TRANS_ITEM fn core::ops[0]::function[0]::FnOnce[0]::call_once[0]<fn(u32) -> u32, (u32)>\n@@ -63,4 +65,6 @@ fn main() {\n     //~ TRANS_ITEM fn trait_method_as_argument::take_foo_mut[0]<char, fn(char) -> char>\n     //~ TRANS_ITEM fn core::ops[0]::function[0]::FnMut[0]::call_mut[0]<fn(u32) -> u32, (u32)>\n     take_foo_mut(Trait::foo, 'c');\n+\n+    0\n }"}, {"sha": "a6ae3765b2ed70d17e50762281cefbefaa40099b", "filename": "src/test/codegen-units/item-collection/trait-method-default-impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftrait-method-default-impl.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,6 +12,7 @@\n // compile-flags:-Zprint-trans-items=eager\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n trait SomeTrait {\n     fn foo(&self) { }\n@@ -46,8 +47,9 @@ impl<T1> SomeGenericTrait<T1> for u32 {\n     // since nothing is monomorphic here, nothing should be generated unless used somewhere.\n }\n \n-//~ TRANS_ITEM fn trait_method_default_impl::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn trait_method_default_impl::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn trait_method_default_impl::SomeTrait[0]::bar[0]<i8, char>\n     let _ = 1i8.bar('c');\n \n@@ -65,4 +67,6 @@ fn main() {\n \n     //~ TRANS_ITEM fn trait_method_default_impl::SomeGenericTrait[0]::bar[0]<u32, i16, ()>\n     0u32.bar(0i16, ());\n+\n+    0\n }"}, {"sha": "57cd10187a2679fc25f9b34f1d6525d4f8d7f8a4", "filename": "src/test/codegen-units/item-collection/transitive-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftransitive-drop-glue.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::Root[0]> @@ transitive_drop_glue0[Internal]\n struct Root(Intermediate);\n@@ -34,9 +35,9 @@ impl<T> Drop for LeafGen<T> {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM fn transitive_drop_glue::main[0]\n-fn main() {\n-\n+//~ TRANS_ITEM fn transitive_drop_glue::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _ = Root(Intermediate(Leaf));\n \n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::RootGen[0]<u32>> @@ transitive_drop_glue0[Internal]\n@@ -50,4 +51,6 @@ fn main() {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<transitive_drop_glue::LeafGen[0]<i16>> @@ transitive_drop_glue0[Internal]\n     //~ TRANS_ITEM fn transitive_drop_glue::{{impl}}[1]::drop[0]<i16>\n     let _ = RootGen(IntermediateGen(LeafGen(0i16)));\n+\n+    0\n }"}, {"sha": "a5f2409b8aea3ab4f023ccc70ea69fda85e9bbe1", "filename": "src/test/codegen-units/item-collection/tuple-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Ftuple-drop-glue.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -13,6 +13,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![deny(dead_code)]\n+#![feature(start)]\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<tuple_drop_glue::Dropped[0]> @@ tuple_drop_glue0[Internal]\n struct Dropped;\n@@ -22,12 +23,15 @@ impl Drop for Dropped {\n     fn drop(&mut self) {}\n }\n \n-//~ TRANS_ITEM fn tuple_drop_glue::main[0]\n-fn main() {\n+//~ TRANS_ITEM fn tuple_drop_glue::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<(u32, tuple_drop_glue::Dropped[0])> @@ tuple_drop_glue0[Internal]\n     let x = (0u32, Dropped);\n \n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<(i16, (tuple_drop_glue::Dropped[0], bool))> @@ tuple_drop_glue0[Internal]\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<(tuple_drop_glue::Dropped[0], bool)> @@ tuple_drop_glue0[Internal]\n     let x = (0i16, (Dropped, true));\n+\n+    0\n }"}, {"sha": "87d2581e1f81b76808e8f7a67be8e41b9b829466", "filename": "src/test/codegen-units/item-collection/unsizing.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funsizing.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -15,6 +15,7 @@\n #![deny(dead_code)]\n #![feature(coerce_unsized)]\n #![feature(unsize)]\n+#![feature(start)]\n \n use std::marker::Unsize;\n use std::ops::CoerceUnsized;\n@@ -53,9 +54,9 @@ struct Wrapper<T: ?Sized>(*const T);\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n \n-//~ TRANS_ITEM fn unsizing::main[0]\n-fn main()\n-{\n+//~ TRANS_ITEM fn unsizing::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     // simple case\n     let bool_sized = &true;\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<bool> @@ unsizing0[Internal]\n@@ -83,4 +84,6 @@ fn main()\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<u32> @@ unsizing0[Internal]\n     //~ TRANS_ITEM fn unsizing::{{impl}}[3]::foo[0]\n     let _wrapper_sized = wrapper_sized as Wrapper<Trait>;\n+\n+    0\n }"}, {"sha": "aa01289de592cec8ee0a307016d6d04dc2dd2fcc", "filename": "src/test/codegen-units/partitioning/methods-are-with-self-type.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fmethods-are-with-self-type.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -19,6 +19,7 @@\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/methods-are-with-self-type\n \n #![allow(dead_code)]\n+#![feature(start)]\n \n struct SomeType;\n \n@@ -63,9 +64,9 @@ mod type2 {\n     pub struct Struct;\n }\n \n-//~ TRANS_ITEM fn methods_are_with_self_type::main[0]\n-fn main()\n-{\n+//~ TRANS_ITEM fn methods_are_with_self_type::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn methods_are_with_self_type::mod1[0]::{{impl}}[1]::method[0]<u32, u64> @@ methods_are_with_self_type.volatile[WeakODR]\n     SomeGenericType(0u32, 0u64).method();\n     //~ TRANS_ITEM fn methods_are_with_self_type::mod1[0]::{{impl}}[1]::associated_fn[0]<char, &str> @@ methods_are_with_self_type.volatile[WeakODR]\n@@ -80,6 +81,8 @@ fn main()\n     type1::Struct.default();\n     //~ TRANS_ITEM fn methods_are_with_self_type::Trait[0]::default[0]<methods_are_with_self_type::type2[0]::Struct[0]> @@ methods_are_with_self_type-type2.volatile[WeakODR]\n     type2::Struct.default();\n+\n+    0\n }\n \n //~ TRANS_ITEM drop-glue i8"}, {"sha": "d0acddda63714b9aae34e7609118f0cb0a756758", "filename": "src/test/codegen-units/partitioning/vtable-through-const.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fvtable-through-const.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -18,6 +18,8 @@\n // This test case makes sure, that references made through constants are\n // recorded properly in the InliningMap.\n \n+#![feature(start)]\n+\n mod mod1 {\n     pub trait Trait1 {\n         fn do_something(&self) {}\n@@ -38,7 +40,7 @@ mod mod1 {\n \n     fn id<T>(x: T) -> T { x }\n \n-    // These are referenced, so they produce trans-items (see main())\n+    // These are referenced, so they produce trans-items (see start())\n     pub const TRAIT1_REF: &'static Trait1 = &0u32 as &Trait1;\n     pub const TRAIT1_GEN_REF: &'static Trait1Gen<u8> = &0u32 as &Trait1Gen<u8>;\n     pub const ID_CHAR: fn(char) -> char = id::<char>;\n@@ -68,8 +70,9 @@ mod mod1 {\n     pub const ID_I64: fn(i64) -> i64 = id::<i64>;\n }\n \n-//~ TRANS_ITEM fn vtable_through_const::main[0] @@ vtable_through_const[Internal]\n-fn main() {\n+//~ TRANS_ITEM fn vtable_through_const::start[0]\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<u32> @@ vtable_through_const[Internal]\n \n     // Since Trait1::do_something() is instantiated via its default implementation,\n@@ -90,4 +93,6 @@ fn main() {\n \n     //~ TRANS_ITEM fn vtable_through_const::mod1[0]::id[0]<char> @@ vtable_through_const-mod1.volatile[External]\n     mod1::ID_CHAR('x');\n+\n+    0\n }"}, {"sha": "5a56445b64e5717dbf280c2f7b72f275c0456188", "filename": "src/test/compile-fail/feature-gate-termination_trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() -> i32 { //~ ERROR main function has wrong type [E0580]\n+    0\n+}"}, {"sha": "a63162cf73d1c4171f3c0f93f29126df96c719e3", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -7,8 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+#![feature(termination_trait)]\n \n fn main() -> char {\n-//~^ ERROR: main function has wrong type [E0580]\n+//~^ ERROR: the trait bound `char: std::Termination` is not satisfied\n     ' '\n }"}, {"sha": "788c38c55be0a65bd167226d9a7342e84f4fddcd", "filename": "src/test/compile-fail/termination-trait-not-satisfied.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcompile-fail%2Ftermination-trait-not-satisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fcompile-fail%2Ftermination-trait-not-satisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftermination-trait-not-satisfied.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(termination_trait)]\n+\n+struct ReturnType {}\n+\n+fn main() -> ReturnType { //~ ERROR `ReturnType: std::Termination` is not satisfied\n+    ReturnType {}\n+}"}, {"sha": "5b62c1b062673f648c6f8d7f3ea40e0103f51138", "filename": "src/test/run-make/sepcomp-inlining/foo.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-inlining%2Ffoo.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(start)]\n+\n #[inline]\n fn inlined() -> u32 {\n     1234\n@@ -29,7 +31,10 @@ mod b {\n     }\n }\n \n-fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     a::f();\n     b::f();\n+\n+    0\n }"}, {"sha": "5e534da012875f934d609642bc96780d37efb425", "filename": "src/test/run-pass/termination-trait-for-empty.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Frun-pass%2Ftermination-trait-for-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Frun-pass%2Ftermination-trait-for-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftermination-trait-for-empty.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,4 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() -> i32 { 0 } //~ ERROR E0580\n+#![feature(termination_trait)]\n+\n+fn main() {}", "previous_filename": "src/test/compile-fail/E0580.rs"}, {"sha": "fa7cb023b447c171431642072eb2160b59185b72", "filename": "src/test/run-pass/termination-trait-for-i32.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Frun-pass%2Ftermination-trait-for-i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Frun-pass%2Ftermination-trait-for-i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftermination-trait-for-i32.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(termination_trait)]\n+\n+fn main() -> i32 {\n+    0\n+}"}, {"sha": "751db0fb50082a8635f5135399efb87994e73ac9", "filename": "src/test/run-pass/termination-trait-for-result.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Frun-pass%2Ftermination-trait-for-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Frun-pass%2Ftermination-trait-for-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftermination-trait-for-result.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(termination_trait)]\n+\n+use std::io::Error;\n+\n+fn main() -> Result<(), Error> {\n+    Ok(())\n+}"}, {"sha": "56c05f566c9abc4ddd117ce1bedc29f0d2447008", "filename": "src/test/ui/print_type_sizes/anonymous.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fanonymous.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -15,7 +15,10 @@\n // that one cannot control the sizes of these types with the same sort\n // of enum-variant manipulation tricks.\n \n-pub fn main() {\n+#![feature(start)]\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _byte: u8 = 0;\n     let _word: usize = 0;\n     let _tuple: (u8, usize)= (0, 0);\n@@ -25,4 +28,6 @@ pub fn main() {\n \n     fn id(x: u8) -> u8 { x };\n     fn bye(_: u8) -> ! { loop { } }\n+\n+    0\n }"}, {"sha": "d0e5bd1d92abfd07dd9c2d9b860ae781035c0200", "filename": "src/test/ui/print_type_sizes/generics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fgenerics.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -15,6 +15,8 @@\n // monomorphized, in the MIR of the original function in which they\n // occur, to have their size reported.\n \n+#![feature(start)]\n+\n // In an ad-hoc attempt to avoid the injection of unwinding code\n // (which clutters the output of `-Z print-type-sizes` with types from\n // `unwind::libunwind`):\n@@ -66,9 +68,11 @@ pub fn f1<T:Copy>(x: T) {\n         Pair::new(FiftyBytes::new(), FiftyBytes::new());\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _b: Pair<u8> = Pair::new(0, 0);\n     let _s: Pair<SevenBytes> = Pair::new(SevenBytes::new(), SevenBytes::new());\n     let _z: ZeroSized = ZeroSized;\n     f1::<SevenBytes>(SevenBytes::new());\n+    0\n }"}, {"sha": "a50b28f3c4952ffaad472a7e28c2139a9716a1d2", "filename": "src/test/ui/print_type_sizes/multiple_types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fmultiple_types.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -14,6 +14,8 @@\n // This file illustrates that when multiple structural types occur in\n // a function, every one of them is included in the output.\n \n+#![feature(start)]\n+\n pub struct SevenBytes([u8;  7]);\n pub struct FiftyBytes([u8; 50]);\n \n@@ -22,8 +24,10 @@ pub enum Enum {\n     Large(FiftyBytes),\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _e: Enum;\n     let _f: FiftyBytes;\n     let _s: SevenBytes;\n+    0\n }"}, {"sha": "7f234e243e9265b00dbe1059e6b45193d4d34276", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -21,6 +21,7 @@\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n \n+#![feature(start)]\n #![feature(nonzero)]\n #![allow(dead_code)]\n \n@@ -76,7 +77,8 @@ pub enum Enum4<A, B, C, D> {\n     Four(D)\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _x: MyOption<NonZero<u32>> = Default::default();\n     let _y: EmbeddedDiscr = Default::default();\n     let _z: MyOption<IndirectNonZero<u32>> = Default::default();\n@@ -87,4 +89,5 @@ pub fn main() {\n     let _e: Enum4<(), char, (), ()> = Enum4::One(());\n     let _f: Enum4<(), (), bool, ()> = Enum4::One(());\n     let _g: Enum4<(), (), (), MyOption<u8>> = Enum4::One(());\n+    0\n }"}, {"sha": "d9b90260364b2aa270f9c4023270c2ad1fcab2e3", "filename": "src/test/ui/print_type_sizes/no_duplicates.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fno_duplicates.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -15,12 +15,16 @@\n // (even if multiple functions), it is only printed once in the\n // print-type-sizes output.\n \n+#![feature(start)]\n+\n pub struct SevenBytes([u8; 7]);\n \n pub fn f1() {\n     let _s: SevenBytes = SevenBytes([0; 7]);\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _s: SevenBytes = SevenBytes([0; 7]);\n+    0\n }"}, {"sha": "a4288f67899a2289bea39489d77b409fcba7389a", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -20,6 +20,7 @@\n // padding and overall computed sizes can be quite different.\n \n #![allow(dead_code)]\n+#![feature(start)]\n \n #[derive(Default)]\n #[repr(packed)]\n@@ -42,7 +43,9 @@ struct Padded {\n     d: u8,\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _c: Packed = Default::default();\n     let _d: Padded = Default::default();\n+    0\n }"}, {"sha": "b4661efdd27a249739394f55ca28fc5fc158a700", "filename": "src/test/ui/print_type_sizes/padding.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpadding.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -19,6 +19,7 @@\n // aligned (while on most it is 8-byte aligned) and so the resulting\n // padding and overall computed sizes can be quite different.\n \n+#![feature(start)]\n #![allow(dead_code)]\n \n struct S {\n@@ -37,4 +38,7 @@ enum E2 {\n     B(S),\n }\n \n-fn main() { }\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    0\n+}"}, {"sha": "108b8dbba0198f10905ff645436a046d635dda9d", "filename": "src/test/ui/print_type_sizes/repr-align.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Frepr-align.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -20,6 +20,7 @@\n // padding and overall computed sizes can be quite different.\n #![feature(attr_literals)]\n #![feature(repr_align)]\n+#![feature(start)]\n #![allow(dead_code)]\n \n #[repr(align(16))]\n@@ -39,6 +40,8 @@ struct S {\n     d: i8,\n }\n \n-fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _s: S = Default::default();\n+    0\n }"}, {"sha": "4d0396903e555d507861c3de9fc6e9a77b2cd56a", "filename": "src/test/ui/print_type_sizes/uninhabited.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Funinhabited.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -12,8 +12,11 @@\n // must-compile-successfully\n \n #![feature(never_type)]\n+#![feature(start)]\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _x: Option<!> = None;\n     let _y: Result<u32, !> = Ok(42);\n+    0\n }"}, {"sha": "e4d54162e73af5bcb93e31775259ff9d990f948d", "filename": "src/test/ui/print_type_sizes/variants.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fvariants.rs?ref=bfbb1f5ce1e6a85a03219767cfc5c9bab3f7bf9e", "patch": "@@ -19,6 +19,8 @@\n // 2. For an enum, the print-type-sizes output will also include the\n //    size of each variant.\n \n+#![feature(start)]\n+\n pub struct SevenBytes([u8;  7]);\n pub struct FiftyBytes([u8; 50]);\n \n@@ -27,6 +29,8 @@ pub enum Enum {\n     Large(FiftyBytes),\n }\n \n-pub fn main() {\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n     let _e: Enum;\n+    0\n }"}]}