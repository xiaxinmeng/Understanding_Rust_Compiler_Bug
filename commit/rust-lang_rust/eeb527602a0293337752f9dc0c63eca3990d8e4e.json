{"sha": "eeb527602a0293337752f9dc0c63eca3990d8e4e", "node_id": "C_kwDOAAsO6NoAKGVlYjUyNzYwMmEwMjkzMzM3NzUyZjlkYzBjNjNlY2EzOTkwZDhlNGU", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-05T03:39:37Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-04-25T17:44:49Z"}, "message": "Add deny lint to prevent untranslatable diagnostics using static strings", "tree": {"sha": "9d15d6c747c03cea895a8103a00d0852894e7c39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d15d6c747c03cea895a8103a00d0852894e7c39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb527602a0293337752f9dc0c63eca3990d8e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb527602a0293337752f9dc0c63eca3990d8e4e", "html_url": "https://github.com/rust-lang/rust/commit/eeb527602a0293337752f9dc0c63eca3990d8e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb527602a0293337752f9dc0c63eca3990d8e4e/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7aa20517c80161a2ffe7c0c25fc2e0140c43c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7aa20517c80161a2ffe7c0c25fc2e0140c43c90", "html_url": "https://github.com/rust-lang/rust/commit/a7aa20517c80161a2ffe7c0c25fc2e0140c43c90"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "3c6dbb466db7aec804d666fd4fe02a35a180640c", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=eeb527602a0293337752f9dc0c63eca3990d8e4e", "patch": "@@ -99,6 +99,8 @@ lint_diag_out_of_impl =\n \n lint_untranslatable_diag = diagnostics should be created using translatable messages\n \n+lint_trivial_untranslatable_diag = diagnostic with static strings only\n+\n lint_bad_opt_access = {$msg}\n \n lint_cstring_ptr = getting the inner pointer of a temporary `CString`"}, {"sha": "595b50c4063ca206167bc14efa7d818b87fe1d58", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=eeb527602a0293337752f9dc0c63eca3990d8e4e", "patch": "@@ -4,6 +4,7 @@\n use crate::lints::{\n     BadOptAccessDiag, DefaultHashTypesDiag, DiagOutOfImpl, LintPassByHand, NonExistentDocKeyword,\n     QueryInstability, TyQualified, TykindDiag, TykindKind, UntranslatableDiag,\n+    UntranslatableDiagnosticTrivial,\n };\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n@@ -366,7 +367,15 @@ declare_tool_lint! {\n     report_in_external_macro: true\n }\n \n-declare_lint_pass!(Diagnostics => [ UNTRANSLATABLE_DIAGNOSTIC, DIAGNOSTIC_OUTSIDE_OF_IMPL ]);\n+declare_tool_lint! {\n+    /// The `untranslatable_diagnostic_trivial` lint detects diagnostics created using only static strings.\n+    pub rustc::UNTRANSLATABLE_DIAGNOSTIC_TRIVIAL,\n+    Deny,\n+    \"prevent creation of diagnostics which cannot be translated, which use only static strings\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(Diagnostics => [ UNTRANSLATABLE_DIAGNOSTIC, DIAGNOSTIC_OUTSIDE_OF_IMPL, UNTRANSLATABLE_DIAGNOSTIC_TRIVIAL ]);\n \n impl LateLintPass<'_> for Diagnostics {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n@@ -423,6 +432,75 @@ impl LateLintPass<'_> for Diagnostics {\n     }\n }\n \n+impl EarlyLintPass for Diagnostics {\n+    #[allow(unused_must_use)]\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n+        // Looking for a straight chain of method calls from 'struct_span_err' to 'emit'.\n+        let ast::StmtKind::Semi(expr) = &stmt.kind else {\n+            return;\n+        };\n+        let ast::ExprKind::MethodCall(meth) = &expr.kind else {\n+            return;\n+        };\n+        if meth.seg.ident.name != sym::emit || !meth.args.is_empty() {\n+            return;\n+        }\n+        let mut segments = vec![];\n+        let mut cur = &meth.receiver;\n+        let fake = &[].into();\n+        loop {\n+            match &cur.kind {\n+                ast::ExprKind::Call(func, args) => {\n+                    if let ast::ExprKind::Path(_, path) = &func.kind {\n+                        segments.push((path.segments.last().unwrap().ident.name, args))\n+                    }\n+                    break;\n+                }\n+                ast::ExprKind::MethodCall(method) => {\n+                    segments.push((method.seg.ident.name, &method.args));\n+                    cur = &method.receiver;\n+                }\n+                ast::ExprKind::MacCall(mac) => {\n+                    segments.push((mac.path.segments.last().unwrap().ident.name, fake));\n+                    break;\n+                }\n+                _ => {\n+                    break;\n+                }\n+            }\n+        }\n+        segments.reverse();\n+        if segments.is_empty() {\n+            return;\n+        }\n+        if segments[0].0.as_str() != \"struct_span_err\" {\n+            return;\n+        }\n+        if !segments.iter().all(|(name, args)| {\n+            let arg = match name.as_str() {\n+                \"struct_span_err\" | \"span_note\" | \"span_label\" | \"span_help\" => &args[1],\n+                \"note\" | \"help\" => &args[0],\n+                _ => {\n+                    return false;\n+                }\n+            };\n+            if let ast::ExprKind::Lit(lit) = arg.kind\n+                && let ast::token::LitKind::Str = lit.kind {\n+                    true\n+            } else {\n+                false\n+            }\n+        }) {\n+            return;\n+        }\n+        cx.emit_spanned_lint(\n+            UNTRANSLATABLE_DIAGNOSTIC_TRIVIAL,\n+            stmt.span,\n+            UntranslatableDiagnosticTrivial,\n+        );\n+    }\n+}\n+\n declare_tool_lint! {\n     /// The `bad_opt_access` lint detects accessing options by field instead of\n     /// the wrapper function."}, {"sha": "319eb2ea445ed3c93e8fede7cdf3fad7c0bb2738", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=eeb527602a0293337752f9dc0c63eca3990d8e4e", "patch": "@@ -518,6 +518,7 @@ fn register_internals(store: &mut LintStore) {\n     store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(|_| Box::new(TyTyKind));\n     store.register_lints(&Diagnostics::get_lints());\n+    store.register_early_pass(|| Box::new(Diagnostics));\n     store.register_late_pass(|_| Box::new(Diagnostics));\n     store.register_lints(&BadOptAccess::get_lints());\n     store.register_late_pass(|_| Box::new(BadOptAccess));"}, {"sha": "848f6a9ecb532286cb1b7844a689c0901f7636e7", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=eeb527602a0293337752f9dc0c63eca3990d8e4e", "patch": "@@ -820,6 +820,10 @@ pub struct DiagOutOfImpl;\n #[diag(lint_untranslatable_diag)]\n pub struct UntranslatableDiag;\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_trivial_untranslatable_diag)]\n+pub struct UntranslatableDiagnosticTrivial;\n+\n #[derive(LintDiagnostic)]\n #[diag(lint_bad_opt_access)]\n pub struct BadOptAccessDiag<'a> {"}, {"sha": "abf19c30e3deba5febfb3c59c10a6cbc1b7501df", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb527602a0293337752f9dc0c63eca3990d8e4e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=eeb527602a0293337752f9dc0c63eca3990d8e4e", "patch": "@@ -651,6 +651,7 @@ symbols! {\n         edition_panic,\n         eh_catch_typeinfo,\n         eh_personality,\n+        emit,\n         emit_enum,\n         emit_enum_variant,\n         emit_enum_variant_arg,"}]}