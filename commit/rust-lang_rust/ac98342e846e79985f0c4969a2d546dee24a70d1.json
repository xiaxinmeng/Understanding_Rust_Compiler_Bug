{"sha": "ac98342e846e79985f0c4969a2d546dee24a70d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOTgzNDJlODQ2ZTc5OTg1ZjBjNDk2OWEyZDU0NmRlZTI0YTcwZDE=", "commit": {"author": {"name": "John Wrenn", "email": "john_wrenn@brown.edu", "date": "2019-05-09T21:08:55Z"}, "committer": {"name": "John Wrenn", "email": "john_wrenn@brown.edu", "date": "2019-06-21T15:00:10Z"}, "message": "Implement arbitrary_enum_discriminant", "tree": {"sha": "8c2ff20debabdd8f9c9f7476f1b2d3868192f6cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c2ff20debabdd8f9c9f7476f1b2d3868192f6cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac98342e846e79985f0c4969a2d546dee24a70d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac98342e846e79985f0c4969a2d546dee24a70d1", "html_url": "https://github.com/rust-lang/rust/commit/ac98342e846e79985f0c4969a2d546dee24a70d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac98342e846e79985f0c4969a2d546dee24a70d1/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38cd9489f75f4a4387296ee304e2287f7c32c211", "url": "https://api.github.com/repos/rust-lang/rust/commits/38cd9489f75f4a4387296ee304e2287f7c32c211", "html_url": "https://github.com/rust-lang/rust/commit/38cd9489f75f4a4387296ee304e2287f7c32c211"}], "stats": {"total": 383, "additions": 328, "deletions": 55}, "files": [{"sha": "e0bb782270e22821f416ac44a45d91236e985ffd", "filename": "src/doc/unstable-book/src/language-features/arbitrary-enum-discriminant.md", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -0,0 +1,37 @@\n+# `arbitrary_enum_discriminant`\n+\n+The tracking issue for this feature is: [#60553]\n+\n+[#60553]: https://github.com/rust-lang/rust/issues/60553\n+\n+------------------------\n+\n+The `arbitrary_enum_discriminant` feature permits tuple-like and\n+struct-like enum variants with `#[repr(<int-type>)]` to have explicit discriminants.\n+\n+## Examples\n+\n+```rust\n+#![feature(arbitrary_enum_discriminant)]\n+\n+#[allow(dead_code)]\n+#[repr(u8)]\n+enum Enum {\n+    Unit = 3,\n+    Tuple(u16) = 2,\n+    Struct {\n+        a: u8,\n+        b: u16,\n+    } = 1,\n+}\n+\n+impl Enum {\n+    fn tag(&self) -> u8 {\n+        unsafe { *(self as *const Self as *const u8) }\n+    }\n+}\n+\n+assert_eq!(3, Enum::Unit.tag());\n+assert_eq!(2, Enum::Tuple(5).tag());\n+assert_eq!(1, Enum::Struct{a: 7, b: 11}.tag());\n+```"}, {"sha": "8e02a625526fac922051ad135e1aa4f5046c4a3b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -1936,6 +1936,25 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n         }\n     }\n \n+    if tcx.adt_def(def_id).repr.int.is_none() && tcx.features().arbitrary_enum_discriminant {\n+        let is_unit =\n+            |var: &hir::Variant| match var.node.data {\n+                hir::VariantData::Unit(..) => true,\n+                _ => false\n+            };\n+\n+        let has_disr = |var: &hir::Variant| var.node.disr_expr.is_some();\n+        let has_non_units = vs.iter().any(|var| !is_unit(var));\n+        let disr_units = vs.iter().any(|var| is_unit(&var) && has_disr(&var));\n+        let disr_non_unit = vs.iter().any(|var| !is_unit(&var) && has_disr(&var));\n+\n+        if disr_non_unit || (disr_units && has_non_units) {\n+            let mut err = struct_span_err!(tcx.sess, sp, E0732,\n+                                           \"`#[repr(inttype)]` must be specified\");\n+            err.emit();\n+        }\n+    }\n+\n     let mut disr_vals: Vec<Discr<'tcx>> = Vec::with_capacity(vs.len());\n     for ((_, discr), v) in def.discriminants(tcx).zip(vs) {\n         // Check for duplicate discriminant values"}, {"sha": "d61cef7f858d66d9f22b0b5ae4bc9f3500234f8f", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -4733,6 +4733,38 @@ if there are multiple variants, it is not clear how the enum should be\n represented.\n \"##,\n \n+E0732: r##\"\n+An `enum` with a discriminant must specify a `#[repr(inttype)]`.\n+\n+A `#[repr(inttype)]` must be provided on an `enum` if it has a non-unit\n+variant with a discriminant, or where there are both unit variants with\n+discriminants and non-unit variants. This restriction ensures that there\n+is a well-defined way to extract a variant's discriminant from a value;\n+for instance:\n+\n+```\n+#![feature(arbitrary_enum_discriminant)]\n+\n+#[repr(u8)]\n+enum Enum {\n+    Unit = 3,\n+    Tuple(u16) = 2,\n+    Struct {\n+        a: u8,\n+        b: u16,\n+    } = 1,\n+}\n+\n+fn discriminant(v : &Enum) -> u8 {\n+    unsafe { *(v as *const Enum as *const u8) }\n+}\n+\n+assert_eq!(3, discriminant(&Enum::Unit));\n+assert_eq!(2, discriminant(&Enum::Tuple(5)));\n+assert_eq!(1, discriminant(&Enum::Struct{a: 7, b: 11}));\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "caac27d69f41bca8da8a8422a78d8d3a2e912fed", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -25,13 +25,14 @@ use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n use crate::parse::{token, ParseSess};\n+use crate::parse::parser::Parser;\n use crate::symbol::{Symbol, sym};\n use crate::tokenstream::TokenTree;\n \n use errors::{Applicability, DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::debug;\n use lazy_static::lazy_static;\n \n@@ -566,6 +567,9 @@ declare_features! (\n     // #[repr(transparent)] on unions.\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n \n+    // Allows explicit discriminants on non-unit enum variants.\n+    (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------\n@@ -1705,20 +1709,20 @@ pub fn emit_feature_err(\n     feature_err(sess, feature, span, issue, explain).emit();\n }\n \n-pub fn feature_err<'a>(\n+pub fn feature_err<'a, S: Into<MultiSpan>>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n-    span: Span,\n+    span: S,\n     issue: GateIssue,\n     explain: &str,\n ) -> DiagnosticBuilder<'a> {\n     leveled_feature_err(sess, feature, span, issue, explain, GateStrength::Hard)\n }\n \n-fn leveled_feature_err<'a>(\n+fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n     sess: &'a ParseSess,\n     feature: Symbol,\n-    span: Span,\n+    span: S,\n     issue: GateIssue,\n     explain: &str,\n     level: GateStrength,\n@@ -2033,6 +2037,29 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemKind::Enum(ast::EnumDef{ref variants, ..}, ..) => {\n+                for variant in variants {\n+                    match (&variant.node.data, &variant.node.disr_expr) {\n+                        (ast::VariantData::Unit(..), _) => {},\n+                        (_, Some(disr_expr)) =>\n+                            gate_feature_post!(\n+                                &self,\n+                                arbitrary_enum_discriminant,\n+                                disr_expr.value.span,\n+                                \"discriminants on non-unit variants are experimental\"),\n+                        _ => {},\n+                    }\n+                }\n+\n+                let has_feature = self.context.features.arbitrary_enum_discriminant;\n+                if !has_feature && !i.span.allows_unstable(sym::arbitrary_enum_discriminant) {\n+                    Parser::maybe_report_invalid_custom_discriminants(\n+                        self.context.parse_sess,\n+                        &variants,\n+                    );\n+                }\n+            }\n+\n             ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,"}, {"sha": "07fe521edb03788fe343baaceb440d892703805e", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -2,7 +2,7 @@ use crate::ast::{\n     self, Arg, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind, VariantData,\n };\n-use crate::parse::{SeqSep, PResult, Parser};\n+use crate::parse::{SeqSep, PResult, Parser, ParseSess};\n use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType};\n use crate::parse::token::{self, TokenKind};\n use crate::print::pprust;\n@@ -539,37 +539,47 @@ impl<'a> Parser<'a> {\n     }\n \n     crate fn maybe_report_invalid_custom_discriminants(\n-        &mut self,\n-        discriminant_spans: Vec<Span>,\n+        sess: &ParseSess,\n         variants: &[Spanned<ast::Variant_>],\n     ) {\n         let has_fields = variants.iter().any(|variant| match variant.node.data {\n             VariantData::Tuple(..) | VariantData::Struct(..) => true,\n             VariantData::Unit(..) => false,\n         });\n \n+        let discriminant_spans = variants.iter().filter(|variant| match variant.node.data {\n+            VariantData::Tuple(..) | VariantData::Struct(..) => false,\n+            VariantData::Unit(..) => true,\n+        })\n+        .filter_map(|variant| variant.node.disr_expr.as_ref().map(|c| c.value.span))\n+        .collect::<Vec<_>>();\n+\n         if !discriminant_spans.is_empty() && has_fields {\n-            let mut err = self.struct_span_err(\n+            let mut err = crate::feature_gate::feature_err(\n+                sess,\n+                sym::arbitrary_enum_discriminant,\n                 discriminant_spans.clone(),\n-                \"custom discriminant values are not allowed in enums with fields\",\n+                crate::feature_gate::GateIssue::Language,\n+                \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n             );\n             for sp in discriminant_spans {\n-                err.span_label(sp, \"invalid custom discriminant\");\n+                err.span_label(sp, \"disallowed custom discriminant\");\n             }\n             for variant in variants.iter() {\n-                if let VariantData::Struct(fields, ..) | VariantData::Tuple(fields, ..) =\n-                    &variant.node.data\n-                {\n-                    let fields = if fields.len() > 1 {\n-                        \"fields\"\n-                    } else {\n-                        \"a field\"\n-                    };\n-                    err.span_label(\n-                        variant.span,\n-                        &format!(\"variant with {fields} defined here\", fields = fields),\n-                    );\n-\n+                match &variant.node.data {\n+                    VariantData::Struct(..) => {\n+                        err.span_label(\n+                            variant.span,\n+                            \"struct variant defined here\",\n+                        );\n+                    }\n+                    VariantData::Tuple(..) => {\n+                        err.span_label(\n+                            variant.span,\n+                            \"tuple variant defined here\",\n+                        );\n+                    }\n+                    VariantData::Unit(..) => {}\n                 }\n             }\n             err.emit();"}, {"sha": "2718ddded29cd43af510e928186fb2b06ff5f8bd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -6963,36 +6963,34 @@ impl<'a> Parser<'a> {\n     /// Parses the part of an enum declaration following the `{`.\n     fn parse_enum_def(&mut self, _generics: &ast::Generics) -> PResult<'a, EnumDef> {\n         let mut variants = Vec::new();\n-        let mut any_disr = vec![];\n         while self.token != token::CloseDelim(token::Brace) {\n             let variant_attrs = self.parse_outer_attributes()?;\n             let vlo = self.token.span;\n \n-            let struct_def;\n-            let mut disr_expr = None;\n             self.eat_bad_pub();\n             let ident = self.parse_ident()?;\n-            if self.check(&token::OpenDelim(token::Brace)) {\n+\n+            let struct_def = if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n                 let (fields, recovered) = self.parse_record_struct_body()?;\n-                struct_def = VariantData::Struct(fields, recovered);\n+                VariantData::Struct(fields, recovered)\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n-                struct_def = VariantData::Tuple(\n+                VariantData::Tuple(\n                     self.parse_tuple_struct_body()?,\n                     ast::DUMMY_NODE_ID,\n-                );\n-            } else if self.eat(&token::Eq) {\n-                disr_expr = Some(AnonConst {\n+                )\n+            } else {\n+                VariantData::Unit(ast::DUMMY_NODE_ID)\n+            };\n+\n+            let disr_expr = if self.eat(&token::Eq) {\n+                Some(AnonConst {\n                     id: ast::DUMMY_NODE_ID,\n                     value: self.parse_expr()?,\n-                });\n-                if let Some(sp) = disr_expr.as_ref().map(|c| c.value.span) {\n-                    any_disr.push(sp);\n-                }\n-                struct_def = VariantData::Unit(ast::DUMMY_NODE_ID);\n+                })\n             } else {\n-                struct_def = VariantData::Unit(ast::DUMMY_NODE_ID);\n-            }\n+                None\n+            };\n \n             let vr = ast::Variant_ {\n                 ident,\n@@ -7020,7 +7018,6 @@ impl<'a> Parser<'a> {\n             }\n         }\n         self.expect(&token::CloseDelim(token::Brace))?;\n-        self.maybe_report_invalid_custom_discriminants(any_disr, &variants);\n \n         Ok(ast::EnumDef { variants })\n     }"}, {"sha": "a015b66738282025661b899d66c4d4f7e3c2dac1", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -135,6 +135,7 @@ symbols! {\n         always,\n         and,\n         any,\n+        arbitrary_enum_discriminant,\n         arbitrary_self_types,\n         Arguments,\n         ArgumentV1,"}, {"sha": "4da7b5ab24b29fce0decbe9110aab24c77fdf972", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -0,0 +1,9 @@\n+#![crate_type=\"lib\"]\n+#![feature(arbitrary_enum_discriminant)]\n+\n+enum Enum {\n+//~^ ERROR `#[repr(inttype)]` must be specified\n+  Unit = 1,\n+  Tuple() = 2,\n+  Struct{} = 3,\n+}"}, {"sha": "2db5372da0c6edcb498b03472725b84e1698cb4b", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -0,0 +1,14 @@\n+error[E0732]: `#[repr(inttype)]` must be specified\n+  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:4:1\n+   |\n+LL | / enum Enum {\n+LL | |\n+LL | |   Unit = 1,\n+LL | |   Tuple() = 2,\n+LL | |   Struct{} = 3,\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0732`."}, {"sha": "f2270602d87ebce98a3f9cbd0438dbf96b1967e2", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -0,0 +1,56 @@\n+// run-pass\n+#![feature(arbitrary_enum_discriminant, const_raw_ptr_deref, test)]\n+\n+extern crate test;\n+\n+use test::black_box;\n+\n+#[allow(dead_code)]\n+#[repr(u8)]\n+enum Enum {\n+    Unit = 3,\n+    Tuple(u16) = 2,\n+    Struct {\n+        a: u8,\n+        b: u16,\n+    } = 1,\n+}\n+\n+impl Enum {\n+    const unsafe fn tag(&self) -> u8 {\n+        *(self as *const Self as *const u8)\n+    }\n+}\n+\n+#[allow(dead_code)]\n+#[repr(u8)]\n+enum FieldlessEnum {\n+    Unit = 3,\n+    Tuple() = 2,\n+    Struct {} = 1,\n+}\n+\n+fn main() {\n+    const UNIT: Enum = Enum::Unit;\n+    const TUPLE: Enum = Enum::Tuple(5);\n+    const STRUCT: Enum = Enum::Struct{a: 7, b: 11};\n+\n+    // Ensure discriminants are correct during runtime execution\n+    assert_eq!(3, unsafe { black_box(UNIT).tag() });\n+    assert_eq!(2, unsafe { black_box(TUPLE).tag() });\n+    assert_eq!(1, unsafe { black_box(STRUCT).tag() });\n+\n+    // Ensure discriminants are correct during CTFE\n+    const UNIT_TAG: u8 = unsafe { UNIT.tag() };\n+    const TUPLE_TAG: u8 = unsafe { TUPLE.tag() };\n+    const STRUCT_TAG: u8 = unsafe { STRUCT.tag() };\n+\n+    assert_eq!(3, UNIT_TAG);\n+    assert_eq!(2, TUPLE_TAG);\n+    assert_eq!(1, STRUCT_TAG);\n+\n+    // Ensure `as` conversions are correct\n+    assert_eq!(3, FieldlessEnum::Unit as u8);\n+    assert_eq!(2, FieldlessEnum::Tuple() as u8);\n+    assert_eq!(1, FieldlessEnum::Struct{} as u8);\n+}"}, {"sha": "daef2de87a9c2f4af3e8bb1d9a117c9765b0bdbb", "filename": "src/test/ui/enum-discriminant/discriminant_value-wrapper.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -1,3 +1,4 @@\n+// run-pass\n use std::mem;\n \n enum ADT {", "previous_filename": "src/test/run-pass/discriminant_value-wrapper.rs"}, {"sha": "b7000015c71db5cb1efccf0e2e3ae74f16841831", "filename": "src/test/ui/enum-discriminant/discriminant_value.rs", "status": "renamed", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -1,5 +1,6 @@\n+// run-pass\n #![allow(stable_features)]\n-#![feature(core, core_intrinsics)]\n+#![feature(arbitrary_enum_discriminant, core, core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;\n@@ -38,6 +39,17 @@ enum NullablePointer {\n \n static CONST : u32 = 0xBEEF;\n \n+#[allow(dead_code)]\n+#[repr(isize)]\n+enum Mixed {\n+    Unit = 3,\n+    Tuple(u16) = 2,\n+    Struct {\n+        a: u8,\n+        b: u16,\n+    } = 1,\n+}\n+\n pub fn main() {\n     unsafe {\n \n@@ -64,5 +76,9 @@ pub fn main() {\n \n         assert_eq!(discriminant_value(&10), 0);\n         assert_eq!(discriminant_value(&\"test\"), 0);\n+\n+        assert_eq!(3, discriminant_value(&Mixed::Unit));\n+        assert_eq!(2, discriminant_value(&Mixed::Tuple(5)));\n+        assert_eq!(1, discriminant_value(&Mixed::Struct{a: 7, b: 11}));\n     }\n }", "previous_filename": "src/test/run-pass/discriminant_value.rs"}, {"sha": "3e90af4d36af3fddc8a6de00a048e8ff1eb9d4be", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type=\"lib\"]\n+\n+enum Enum {\n+  Unit = 1,\n+  //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n+  Tuple() = 2,\n+  //~^ ERROR discriminants on non-unit variants are experimental\n+  Struct{} = 3,\n+  //~^ ERROR discriminants on non-unit variants are experimental\n+}"}, {"sha": "f50ed2c184dafcad4e883b546dba0bf9d16c56df", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -0,0 +1,36 @@\n+error[E0658]: discriminants on non-unit variants are experimental\n+  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:6:13\n+   |\n+LL |   Tuple() = 2,\n+   |             ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = help: add #![feature(arbitrary_enum_discriminant)] to the crate attributes to enable\n+\n+error[E0658]: discriminants on non-unit variants are experimental\n+  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:8:14\n+   |\n+LL |   Struct{} = 3,\n+   |              ^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = help: add #![feature(arbitrary_enum_discriminant)] to the crate attributes to enable\n+\n+error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n+  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:4:10\n+   |\n+LL |   Unit = 1,\n+   |          ^ disallowed custom discriminant\n+LL |\n+LL |   Tuple() = 2,\n+   |   ----------- tuple variant defined here\n+LL |\n+LL |   Struct{} = 3,\n+   |   ------------ struct variant defined here\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = help: add #![feature(arbitrary_enum_discriminant)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7bf0e64f2c0a30eecf3963b7bee955d7059ce399", "filename": "src/test/ui/parser/issue-17383.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -1,6 +1,6 @@\n enum X {\n     A = 3,\n-    //~^ ERROR custom discriminant values are not allowed in enums with fields\n+    //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n     B(usize)\n }\n "}, {"sha": "486c4055807c9e4eef14e1a19e4488e6f9c306dd", "filename": "src/test/ui/parser/issue-17383.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -1,11 +1,15 @@\n-error: custom discriminant values are not allowed in enums with fields\n+error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n   --> $DIR/issue-17383.rs:2:9\n    |\n LL |     A = 3,\n-   |         ^ invalid custom discriminant\n+   |         ^ disallowed custom discriminant\n LL |\n LL |     B(usize)\n-   |     -------- variant with a field defined here\n+   |     -------- tuple variant defined here\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = help: add #![feature(arbitrary_enum_discriminant)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a9cfdd549c752233f40a6608474f7a9d362ee375", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -1,6 +1,6 @@\n enum Color {\n     Red = 0xff0000,\n-    //~^ ERROR custom discriminant values are not allowed in enums with fields\n+    //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n     Green = 0x00ff00,\n     Blue = 0x0000ff,\n     Black = 0x000000,"}, {"sha": "13b46c6e8b3e5990fe96310e8ce063bbeda6ebce", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac98342e846e79985f0c4969a2d546dee24a70d1/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr?ref=ac98342e846e79985f0c4969a2d546dee24a70d1", "patch": "@@ -1,21 +1,25 @@\n-error: custom discriminant values are not allowed in enums with fields\n+error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n   --> $DIR/tag-variant-disr-non-nullary.rs:2:11\n    |\n LL |     Red = 0xff0000,\n-   |           ^^^^^^^^ invalid custom discriminant\n+   |           ^^^^^^^^ disallowed custom discriminant\n LL |\n LL |     Green = 0x00ff00,\n-   |             ^^^^^^^^ invalid custom discriminant\n+   |             ^^^^^^^^ disallowed custom discriminant\n LL |     Blue = 0x0000ff,\n-   |            ^^^^^^^^ invalid custom discriminant\n+   |            ^^^^^^^^ disallowed custom discriminant\n LL |     Black = 0x000000,\n-   |             ^^^^^^^^ invalid custom discriminant\n+   |             ^^^^^^^^ disallowed custom discriminant\n LL |     White = 0xffffff,\n-   |             ^^^^^^^^ invalid custom discriminant\n+   |             ^^^^^^^^ disallowed custom discriminant\n LL |     Other(usize),\n-   |     ------------ variant with a field defined here\n+   |     ------------ tuple variant defined here\n LL |     Other2(usize, usize),\n-   |     -------------------- variant with fields defined here\n+   |     -------------------- tuple variant defined here\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/60553\n+   = help: add #![feature(arbitrary_enum_discriminant)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}]}