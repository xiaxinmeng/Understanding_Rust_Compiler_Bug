{"sha": "b3a427d8733a549b11f9bc88eceb31c857851411", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYTQyN2Q4NzMzYTU0OWIxMWY5YmM4OGVjZWIzMWM4NTc4NTE0MTE=", "commit": {"author": {"name": "Daniel Smith", "email": "daniel.smith@datadoghq.com", "date": "2020-09-28T17:29:37Z"}, "committer": {"name": "Daniel Smith", "email": "daniel.smith@datadoghq.com", "date": "2020-10-21T15:04:26Z"}, "message": "Add another test case", "tree": {"sha": "1b7e0ab9f1fa40f5bedd78ed491f00fbf1ffddd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b7e0ab9f1fa40f5bedd78ed491f00fbf1ffddd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3a427d8733a549b11f9bc88eceb31c857851411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a427d8733a549b11f9bc88eceb31c857851411", "html_url": "https://github.com/rust-lang/rust/commit/b3a427d8733a549b11f9bc88eceb31c857851411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3a427d8733a549b11f9bc88eceb31c857851411/comments", "author": null, "committer": null, "parents": [{"sha": "0f4abbf99a6f1ed783ea6935c83427c2aef95144", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4abbf99a6f1ed783ea6935c83427c2aef95144", "html_url": "https://github.com/rust-lang/rust/commit/0f4abbf99a6f1ed783ea6935c83427c2aef95144"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "88841597bb60bf5bc8a8bff346fdfc9391a40cfe", "filename": "tests/ui/await_holding_refcell_ref.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3a427d8733a549b11f9bc88eceb31c857851411/tests%2Fui%2Fawait_holding_refcell_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3a427d8733a549b11f9bc88eceb31c857851411/tests%2Fui%2Fawait_holding_refcell_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_refcell_ref.rs?ref=b3a427d8733a549b11f9bc88eceb31c857851411", "patch": "@@ -39,6 +39,20 @@ async fn also_bad(x: &RefCell<u32>) -> u32 {\n     first + second + third\n }\n \n+async fn less_bad(x: &RefCell<u32>) -> u32 {\n+    let first = baz().await;\n+\n+    let b = x.borrow_mut();\n+\n+    let second = baz().await;\n+\n+    drop(b);\n+\n+    let third = baz().await;\n+\n+    first + second + third\n+}\n+\n async fn not_good(x: &RefCell<u32>) -> u32 {\n     let first = baz().await;\n \n@@ -66,6 +80,7 @@ fn main() {\n     bad(&rc);\n     bad_mut(&rc);\n     also_bad(&rc);\n+    less_bad(&rc);\n     not_good(&rc);\n     block_bad(&rc);\n }"}, {"sha": "b504f0454913634969cb11a6ced5b3fc5e9fb2f9", "filename": "tests/ui/await_holding_refcell_ref.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b3a427d8733a549b11f9bc88eceb31c857851411/tests%2Fui%2Fawait_holding_refcell_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3a427d8733a549b11f9bc88eceb31c857851411/tests%2Fui%2Fawait_holding_refcell_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fawait_holding_refcell_ref.stderr?ref=b3a427d8733a549b11f9bc88eceb31c857851411", "patch": "@@ -46,32 +46,50 @@ LL | | }\n    | |_^\n \n error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n-  --> $DIR/await_holding_refcell_ref.rs:46:13\n+  --> $DIR/await_holding_refcell_ref.rs:45:9\n+   |\n+LL |     let b = x.borrow_mut();\n+   |         ^\n+   |\n+note: these are all the await points this ref is held through\n+  --> $DIR/await_holding_refcell_ref.rs:45:5\n+   |\n+LL | /     let b = x.borrow_mut();\n+LL | |\n+LL | |     let second = baz().await;\n+LL | |\n+...  |\n+LL | |     first + second + third\n+LL | | }\n+   | |_^\n+\n+error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n+  --> $DIR/await_holding_refcell_ref.rs:60:13\n    |\n LL |         let b = x.borrow_mut();\n    |             ^\n    |\n note: these are all the await points this ref is held through\n-  --> $DIR/await_holding_refcell_ref.rs:46:9\n+  --> $DIR/await_holding_refcell_ref.rs:60:9\n    |\n LL | /         let b = x.borrow_mut();\n LL | |         baz().await\n LL | |     };\n    | |_____^\n \n error: this RefCell Ref is held across an 'await' point. Consider ensuring the Ref is dropped before calling await.\n-  --> $DIR/await_holding_refcell_ref.rs:58:13\n+  --> $DIR/await_holding_refcell_ref.rs:72:13\n    |\n LL |         let b = x.borrow_mut();\n    |             ^\n    |\n note: these are all the await points this ref is held through\n-  --> $DIR/await_holding_refcell_ref.rs:58:9\n+  --> $DIR/await_holding_refcell_ref.rs:72:9\n    |\n LL | /         let b = x.borrow_mut();\n LL | |         baz().await\n LL | |     }\n    | |_____^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}]}