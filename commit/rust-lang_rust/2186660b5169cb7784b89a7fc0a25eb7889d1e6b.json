{"sha": "2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODY2NjBiNTE2OWNiNzc4NGI4OWE3ZmMwYTI1ZWI3ODg5ZDFlNmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-16T17:19:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-11-30T18:38:08Z"}, "message": "Update the bootstrap compiler\n\nNow that we've got a beta build, let's use it!", "tree": {"sha": "57da88baf1858763e63eff44c92a4322b2b56195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57da88baf1858763e63eff44c92a4322b2b56195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "html_url": "https://github.com/rust-lang/rust/commit/2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e373b47872872a2ce61c5b02f4dd96d90d046ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e373b47872872a2ce61c5b02f4dd96d90d046ee", "html_url": "https://github.com/rust-lang/rust/commit/8e373b47872872a2ce61c5b02f4dd96d90d046ee"}], "stats": {"total": 589, "additions": 30, "deletions": 559}, "files": [{"sha": "acb36b2f7da6cc8b5cb9129415b1c978764d726d", "filename": "mk/crates.mk", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -65,7 +65,7 @@ HOST_CRATES := syntax syntax_ext proc_macro_tokens proc_macro_plugin syntax_pos\n TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n \n DEPS_core :=\n-DEPS_compiler_builtins := core\n+DEPS_compiler_builtins := core native:compiler-rt\n DEPS_alloc := core libc alloc_system\n DEPS_alloc_system := core libc\n DEPS_alloc_jemalloc := core libc native:jemalloc\n@@ -79,11 +79,7 @@ DEPS_panic_unwind := libc alloc unwind\n DEPS_unwind := libc\n \n RUSTFLAGS_compiler_builtins := -lstatic=compiler-rt\n-\n-# FIXME(stage0): change this to just `RUSTFLAGS_panic_abort := ...`\n-RUSTFLAGS1_panic_abort := -C panic=abort\n-RUSTFLAGS2_panic_abort := -C panic=abort\n-RUSTFLAGS3_panic_abort := -C panic=abort\n+RUSTFLAGS_panic_abort := -C panic=abort\n \n DEPS_std := core libc rand alloc collections compiler_builtins rustc_unicode \\\n \tnative:backtrace \\"}, {"sha": "49fdfc4118df5cb3b263d16c6bcdf437c9d3c911", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -372,15 +372,12 @@ CFG_INFO := $(info cfg: disabling unstable features (CFG_DISABLE_UNSTABLE_FEATUR\n # Turn on feature-staging\n export CFG_DISABLE_UNSTABLE_FEATURES\n # Subvert unstable feature lints to do the self-build\n-export RUSTC_BOOTSTRAP=1\n endif\n ifdef CFG_MUSL_ROOT\n export CFG_MUSL_ROOT\n endif\n \n-# FIXME: Transitionary measure to bootstrap using the old bootstrap logic.\n-# Remove this once the bootstrap compiler uses the new login in Issue #36548.\n-export RUSTC_BOOTSTRAP_KEY=62b3e239\n+export RUSTC_BOOTSTRAP := 1\n \n ######################################################################\n # Per-stage targets and runner\n@@ -443,10 +440,7 @@ endif\n TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HSREQ$(1)_H_$(3)) \\\n \t$$(foreach obj,$$(REQUIRED_OBJECTS_$(2)),\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj)) \\\n-\t$$(TLIB0_T_$(2)_H_$(3))/$$(call CFG_STATIC_LIB_NAME_$(2),compiler-rt)\n-# ^ This copies `libcompiler-rt.a` to the stage0 sysroot\n-# ^ TODO(stage0) update this to not copy `libcompiler-rt.a` to stage0\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj))\n \n # Prerequisites for a working stageN compiler and libraries, for a specific\n # target"}, {"sha": "bff6ef206775c3e8c10c8b952fc893755d36d48c", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -45,7 +45,6 @@ dependencies = [\n  \"gcc 0.3.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"md5 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -172,11 +171,6 @@ name = \"log\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"md5\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"num_cpus\"\n version = \"0.2.13\"\n@@ -686,7 +680,6 @@ dependencies = [\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"044d1360593a78f5c8e5e710beccdc24ab71d1f01bc19a29bcacdba22e8475d8\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n-\"checksum md5 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a5539a8dee9b4ae308c9c406a379838b435a8f2c84cf9fedc6d5a576be9888db\"\n \"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n \"checksum rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6159e4e6e559c81bd706afe9c8fd68f547d3e851ce12e76b1de7914bab61691b\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\""}, {"sha": "8fb5c70c41bf1a3c8bc6d7db934bc1c25e9b7a4e", "filename": "src/Cargo.toml", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -11,3 +11,20 @@ members = [\n   \"tools/rustbook\",\n   \"tools/tidy\",\n ]\n+\n+# Curiously, compiletest will segfault if compiled with opt-level=3 on 64-bit\n+# MSVC when running the compile-fail test suite when a should-fail test panics.\n+# But hey if this is removed and it gets past the bots, sounds good to me.\n+[profile.release]\n+opt-level = 2\n+[profile.bench]\n+opt-level = 2\n+\n+# These options are controlled from our rustc wrapper script, so turn them off\n+# here and have them controlled elsewhere.\n+[profile.dev]\n+debug = false\n+debug-assertions = false\n+[profile.test]\n+debug = false\n+debug-assertions = false"}, {"sha": "35f8fb43f7b562b6321bcd5e3fe1ef425b7aca89", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -29,4 +29,3 @@ getopts = \"0.2\"\n rustc-serialize = \"0.3\"\n gcc = \"0.3.38\"\n libc = \"0.2\"\n-md5 = \"0.1\""}, {"sha": "b2341f5978704d828d10cfa0e2e8b140b33cae07", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -20,7 +20,6 @@ use std::io::prelude::*;\n use std::process::Command;\n \n use build_helper::output;\n-use md5;\n \n use Build;\n \n@@ -91,20 +90,4 @@ pub fn collect(build: &mut Build) {\n         build.ver_hash = Some(ver_hash);\n         build.short_ver_hash = Some(short_ver_hash);\n     }\n-\n-    // Calculate this compiler's bootstrap key, which is currently defined as\n-    // the first 8 characters of the md5 of the release string.\n-    let key = md5::compute(build.release.as_bytes());\n-    build.bootstrap_key = format!(\"{:02x}{:02x}{:02x}{:02x}\",\n-                                  key[0], key[1], key[2], key[3]);\n-\n-    // Slurp up the stage0 bootstrap key as we're bootstrapping from an\n-    // otherwise stable compiler.\n-    let mut s = String::new();\n-    t!(t!(File::open(build.src.join(\"src/stage0.txt\"))).read_to_string(&mut s));\n-    if let Some(line) = s.lines().find(|l| l.starts_with(\"rustc_key\")) {\n-        if let Some(key) = line.split(\": \").nth(1) {\n-            build.bootstrap_key_stage0 = key.to_string();\n-        }\n-    }\n }"}, {"sha": "b67eab38f5dd255462e744991b7accb9a8223d3a", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -220,7 +220,7 @@ pub fn compiletest(build: &Build,\n             }\n         }\n     }\n-    build.add_bootstrap_key(&mut cmd);\n+    cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n     cmd.arg(\"--adb-path\").arg(\"adb\");\n     cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);"}, {"sha": "b268686ca6c3b15dcb7c52655263eb4c1728e123", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -120,8 +120,8 @@ fn build_startup_objects(build: &Build, target: &str, into: &Path) {\n     for file in t!(fs::read_dir(build.src.join(\"src/rtstartup\"))) {\n         let file = t!(file);\n         let mut cmd = Command::new(&compiler_path);\n-        build.add_bootstrap_key(&mut cmd);\n-        build.run(cmd.arg(\"--target\").arg(target)\n+        build.run(cmd.env(\"RUSTC_BOOTSTRAP\", \"1\")\n+                     .arg(\"--target\").arg(target)\n                      .arg(\"--emit=obj\")\n                      .arg(\"--out-dir\").arg(into)\n                      .arg(file.path()));"}, {"sha": "590c967d147f237a9304d10d643c2b3ffac7e7b4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -22,7 +22,6 @@ extern crate cmake;\n extern crate filetime;\n extern crate gcc;\n extern crate getopts;\n-extern crate md5;\n extern crate num_cpus;\n extern crate rustc_serialize;\n extern crate toml;\n@@ -120,8 +119,6 @@ pub struct Build {\n     version: String,\n     package_vers: String,\n     local_rebuild: bool,\n-    bootstrap_key: String,\n-    bootstrap_key_stage0: String,\n \n     // Probed tools at runtime\n     lldb_version: Option<String>,\n@@ -205,8 +202,6 @@ impl Build {\n             ver_date: None,\n             version: String::new(),\n             local_rebuild: local_rebuild,\n-            bootstrap_key: String::new(),\n-            bootstrap_key_stage0: String::new(),\n             package_vers: String::new(),\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n@@ -438,7 +433,8 @@ impl Build {\n              .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n-        self.add_bootstrap_key(&mut cargo);\n+        // Enable usage of unstable features\n+        cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n         // Specify some various options for build scripts used throughout\n         // the build.\n@@ -655,14 +651,6 @@ impl Build {\n         add_lib_path(vec![self.rustc_libdir(compiler)], cmd);\n     }\n \n-    /// Adds the compiler's bootstrap key to the environment of `cmd`.\n-    fn add_bootstrap_key(&self, cmd: &mut Command) {\n-        cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n-        // FIXME: Transitionary measure to bootstrap using the old bootstrap logic.\n-        // Remove this once the bootstrap compiler uses the new login in Issue #36548.\n-        cmd.env(\"RUSTC_BOOTSTRAP_KEY\", \"62b3e239\");\n-    }\n-\n     /// Returns the compiler's libdir where it stores the dynamic libraries that\n     /// it itself links against.\n     ///"}, {"sha": "9834fca5fdc78d80561bf609587f11835aedc549", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -89,7 +89,6 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(never_type)]\n #![feature(prelude_import)]\n "}, {"sha": "220051c9d35eabde71d89e0580c0c22aba62c1cb", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -295,7 +295,6 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(str_escape)]\n-#![cfg_attr(stage0, feature(question_mark))]\n \n use self::LabelText::*;\n "}, {"sha": "7c26b710a53cb3710b5ff9dce2fe1b4c406d5314", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -31,7 +31,6 @@\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![cfg_attr(stage0, feature(item_like_imports))]\n #![feature(libc)]\n #![feature(nonzero)]\n@@ -41,7 +40,6 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![cfg_attr(test, feature(test))]\n \n extern crate arena;"}, {"sha": "3dc577b3c647acc3a4339ff672053580930a47a2", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -36,7 +36,6 @@\n #![feature(rand)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![cfg_attr(test, feature(rand))]\n \n extern crate syntax;"}, {"sha": "1ff232da427fcbfcc8b5ce3c056313d2f52d5922", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -19,14 +19,12 @@\n \n #![allow(non_camel_case_types)]\n \n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(associated_consts)]\n #![feature(nonzero)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "7a6cc4937232d9bc118b37df3e332bfc4d6f2e10", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -22,12 +22,10 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n "}, {"sha": "f667ff23b27a60ce35f04d46ca81de6d272cb50e", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -25,7 +25,6 @@\n \n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(question_mark))]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "b79eca0c22d7e1a2f2156d9d7c40e5a941cc8913", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -24,14 +24,12 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(question_mark))]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "d7c15f550e0409c30016fafec266b2070525e86c", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -21,7 +21,6 @@\n #![allow(unused_attributes)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(range_contains)]\n #![feature(libc)]\n #![feature(unicode)]"}, {"sha": "b72766bccea21500dbd2a273ec1343949dcb293d", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -19,8 +19,6 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(rand)]"}, {"sha": "6c9a3e99a0458029e11ff4ecd56adbbd65bbda5b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -31,7 +31,6 @@\n #![cfg_attr(test, feature(test))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "0229776c9483375c4b3782a4849246990ea11a61", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -24,11 +24,11 @@\n \n #![feature(associated_consts)]\n #![feature(box_syntax)]\n+#![feature(concat_idents)]\n #![feature(libc)]\n #![feature(link_args)]\n-#![feature(staged_api)]\n #![feature(linked_from)]\n-#![feature(concat_idents)]\n+#![feature(staged_api)]\n \n extern crate libc;\n "}, {"sha": "56f3cfc12c97f8a3c2bf9bf78982119ecbc85768", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -20,10 +20,8 @@\n #![feature(box_patterns)]\n #![feature(conservative_impl_trait)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_lib)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "617bd81d96a2c90f3f83fe1c86d1ca8651b9ac20", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -22,12 +22,10 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![feature(associated_consts)]\n #![feature(box_patterns)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![cfg_attr(stage0, feature(item_like_imports))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(question_mark))]\n \n #[macro_use] extern crate log;\n extern crate graphviz as dot;"}, {"sha": "525d49ddd820c7c1fd6ea1a1d8a3c0a3b4d0b77e", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -23,7 +23,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(staged_api)]\n #![feature(rustc_private)]"}, {"sha": "1071203af2bc5bb0a810e933f7cdbda3644aaf9c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -17,7 +17,6 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "0259e5bedae30f6b91909d71c3825b087daa0897", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -19,7 +19,6 @@\n \n #![feature(associated_consts)]\n #![feature(borrow_state)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "7a2b74c06db8a8154ca524902b891820aedd49ef", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -18,7 +18,6 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(custom_attribute)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![allow(unused_attributes)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "0e7ead30a933a7e10dc1f118b537b034218f8192", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -29,7 +29,6 @@\n #![feature(cell_extras)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![allow(unused_attributes)]\n #![feature(libc)]\n #![feature(quote)]\n@@ -38,7 +37,6 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(unicode)]\n-#![cfg_attr(stage0, feature(question_mark))]\n \n use rustc::dep_graph::WorkProduct;\n "}, {"sha": "dfa662590297f2c3349792d4397061a0f0135e4e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -77,12 +77,10 @@ This API is completely unstable and subject to change.\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(question_mark))]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "5073baa420e82e0715bac825086b3aad64cffaf1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -20,15 +20,13 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(libc)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(test)]\n #![feature(unicode)]\n-#![cfg_attr(stage0, feature(question_mark))]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "d432ed42066a13a08cf91600a4ef2c4286629030", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -35,7 +35,6 @@ Core encoding and decoding interfaces.\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(unicode)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![cfg_attr(test, feature(test))]\n \n // test harness access"}, {"sha": "8132b1392602f1e70c5d7abdcde0916ffa3c1a30", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -249,7 +249,6 @@\n #![feature(const_fn)]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(dropck_parametricity)]\n #![feature(float_extras)]\n #![feature(float_from_str_radix)]\n@@ -276,7 +275,6 @@\n #![feature(panic_unwind)]\n #![feature(placement_in_syntax)]\n #![feature(prelude_import)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(rand)]\n #![feature(raw)]\n #![feature(repr_simd)]"}, {"sha": "3e8dfda4a9a58463db0d9495a922f3707f2e8b4f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -32,10 +32,8 @@\n #![feature(staged_api)]\n #![feature(str_escape)]\n #![feature(unicode)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(specialization)]\n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n \n extern crate core;\n extern crate serialize;"}, {"sha": "66d6c0570ace70d4910c80257345353d6571841b", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -19,7 +19,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n-#![cfg_attr(stage0, feature(dotdot_in_tuple_patterns))]\n #![feature(proc_macro_lib)]\n #![feature(proc_macro_internals)]\n #![feature(rustc_private)]"}, {"sha": "44067b3132c1d64e467a3d1f3aad7c962993b6ba", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -27,7 +27,6 @@\n #![allow(unused_attributes)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(specialization)]\n \n use std::cell::{Cell, RefCell};"}, {"sha": "01daa938142b149ba1ff0b9abc455b709281c1ee", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -59,7 +59,6 @@\n #![cfg_attr(windows, feature(libc))]\n // Handle rustfmt skips\n #![feature(custom_attribute)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![allow(unused_attributes)]\n \n use std::io::prelude::*;"}, {"sha": "142ae86c6a30da5fa40eacd443adc857ed5e9e7b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -38,7 +38,6 @@\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(question_mark))]\n #![feature(panic_unwind)]\n \n extern crate getopts;"}, {"sha": "dce1a0a8ec8587743d234b14c38a226e2663f372", "filename": "src/rustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.toml?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -11,17 +11,6 @@ path = \"rustc.rs\"\n name = \"rustdoc\"\n path = \"rustdoc.rs\"\n \n-[profile.release]\n-opt-level = 2\n-[profile.bench]\n-opt-level = 2\n-\n-# These options are controlled from our rustc wrapper script, so turn them off\n-# here and have them controlled elsewhere.\n-[profile.dev]\n-debug = false\n-debug-assertions = false\n-\n # All optional dependencies so the features passed to this Cargo.toml select\n # what should actually be built.\n [dependencies]"}, {"sha": "18680dc4fd9a1853dc39f04b3439ca453ea615de", "filename": "src/rustc/std_shim/Cargo.toml", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -28,17 +28,6 @@ authors = [\"The Rust Project Developers\"]\n name = \"std_shim\"\n path = \"lib.rs\"\n \n-[profile.release]\n-opt-level = 2\n-[profile.bench]\n-opt-level = 2\n-\n-# These options are controlled from our rustc wrapper script, so turn them off\n-# here and have them controlled elsewhere.\n-[profile.dev]\n-debug = false\n-debug-assertions = false\n-\n [dependencies]\n std = { path = \"../../libstd\" }\n core = { path = \"../../libcore\" }"}, {"sha": "ac7842770f5bb8b3ab4bdb90d1148bbc5c1958da", "filename": "src/rustc/test_shim/Cargo.toml", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Frustc%2Ftest_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Frustc%2Ftest_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ftest_shim%2FCargo.toml?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -12,16 +12,5 @@ authors = [\"The Rust Project Developers\"]\n name = \"test_shim\"\n path = \"lib.rs\"\n \n-[profile.release]\n-opt-level = 2\n-[profile.bench]\n-opt-level = 2\n-\n-# These options are controlled from our rustc wrapper script, so turn them off\n-# here and have them controlled elsewhere.\n-[profile.dev]\n-debug = false\n-debug-assertions = false\n-\n [dependencies]\n test = { path = \"../../libtest\" }"}, {"sha": "223974186b1df2af6ef194454b629c924c4e858e", "filename": "src/stage0.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -12,5 +12,5 @@\n # tarball for a stable release you'll likely see `1.x.0-$date` where `1.x.0` was\n # released on `$date`\n \n-rustc: beta-2016-09-28\n-cargo: nightly-2016-09-26\n+rustc: beta-2016-11-16\n+cargo: nightly-2016-11-16"}, {"sha": "227b695635dcec6c67ae13513a0114d09237759a", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -4,12 +4,6 @@ name = \"compiletest\"\n version = \"0.0.0\"\n build = \"build.rs\"\n \n-# Curiously, this will segfault if compiled with opt-level=3 on 64-bit MSVC when\n-# running the compile-fail test suite when a should-fail test panics. But hey if\n-# this is removed and it gets past the bots, sounds good to me.\n-[profile.release]\n-opt-level = 2\n-\n [dependencies]\n log = \"0.3\"\n env_logger = { version = \"0.3.5\", default-features = false }"}, {"sha": "d8681c9d6ed2440d5561bad140f5a4b19d65d022", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2186660b5169cb7784b89a7fc0a25eb7889d1e6b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=2186660b5169cb7784b89a7fc0a25eb7889d1e6b", "patch": "@@ -16,8 +16,6 @@\n #![feature(test)]\n #![feature(libc)]\n \n-#![cfg_attr(stage0, feature(question_mark))]\n-\n #![deny(warnings)]\n \n extern crate libc;"}, {"sha": "5d44203c12cf8f652299aeca068ddbfb99b9ae40", "filename": "src/vendor/md5/.cargo-checksum.json", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2F.cargo-checksum.json", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2F.cargo-checksum.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2F.cargo-checksum.json?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee", "patch": "@@ -1 +0,0 @@\n-{\"files\":{\".cargo-ok\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\".gitignore\":\"944bf600c6230664922a011cbca026699969f2f89f6c7ff689835836ccd7b1de\",\".travis.yml\":\"3d7b50e89ac6ecc0c3a31273c1785a905aa528ccf70503973bf34fa49537519f\",\"Cargo.toml\":\"7ed65153877c1057bac21ad6483ae2f6feb7713da2516f788528c81c222e1686\",\"LICENSE.txt\":\"2362080adc3f0fb1a071ffe7dc5557cbb420058f319e284d53213a1e05687242\",\"README.md\":\"f96785f9a0782f425cde37f0e4ec577f1097f92c38af291509e3953c20e9b87f\",\"benches/lib.rs\":\"7ae37fded40473821a1e0d898d3e978efddfd1a2d2efcd550b84089932c8db23\",\"src/lib.rs\":\"208c67b843ebbc02be1649dd40235088bf87d00c1a336a162118b4f352a03cb0\"},\"package\":\"a5539a8dee9b4ae308c9c406a379838b435a8f2c84cf9fedc6d5a576be9888db\"}\n\\ No newline at end of file"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/vendor/md5/.cargo-ok", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2F.cargo-ok", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2F.cargo-ok", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2F.cargo-ok?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee"}, {"sha": "fa8d85ac52f19959d6fc9942c265708b4b3c2b04", "filename": "src/vendor/md5/.gitignore", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2F.gitignore?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee", "patch": "@@ -1,2 +0,0 @@\n-Cargo.lock\n-target"}, {"sha": "f68b0f3293bfd87b41a324a84f4e7ec4926f2d53", "filename": "src/vendor/md5/.travis.yml", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2F.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2F.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2F.travis.yml?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee", "patch": "@@ -1,11 +0,0 @@\n-language: rust\n-sudo: required\n-\n-after_success: curl https://stainless-steel.github.io/travis/after_success.sh | bash\n-\n-env:\n-  global:\n-    secure: wq8fhRMctnvAck7rhva9151pveqKYK9uER9Dytdz1UIzWGbtuS5vpGdgc7txW/xtdyuLGbioPvziCvFvoQbGd3NfWpRM1fo4AIwaOxFpKgPPywgFrlBtqp1XmBmJUaAxcwMtQCbY7f0Q48ycQZsmuXRQSkMEXlXURNh8us96MP5Rm9B4UndArVUe/tEXqy8SNKFMHqKja6okvDg03hRDtfQtk8lu1+QkguA5Zd0tpNBw9UjxoUn/FL0yCP0hq0VP6It680hRAJmhpJ8XRayGvbb+PX2VZNcgHpMxtsoY2zAR5j+I6mVwjC8VMIeUMQQbu6yUeFrDQYpBC9d4syRupluNLLzbxzl3Pb6yUYjT6deniRJA5H4Bs5V68a5/wTaapmqkAUIZKiPYpQr4L0MGSyHvLuWf1L3WdOmJkUvsPUIJExqEpNFRhEPIc7a5ZcyzeFFYRTa1VnMaNlLB0ZP5fF5Mgjmh0cvq88LnrSZI9t3obJMD4F0GKLuI2tJM57WWCHETWziAtQ2h2Cx8J/tivH/zT78yrkzl4tX5garFG4C2OWDdyhX/8zFG197RYKb9fI802um9FHXO6fpq1G3GUH8sZhDZYn3MeexGvbKI0Rb48toBl7EjbPaIuE/PE4O0UoK5WJqJCS2lBgZMs64phcRef7/sRHga4znBea75TTI=\n-\n-notifications:\n-  email: false"}, {"sha": "30e221473a8bc36c68afbcea7d62f096d529bd32", "filename": "src/vendor/md5/Cargo.toml", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2FCargo.toml?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee", "patch": "@@ -1,9 +0,0 @@\n-[package]\n-name = \"md5\"\n-version = \"0.1.1\"\n-authors = [\"Ivan Ukhov <ivan.ukhov@gmail.com>\"]\n-license = \"MIT\"\n-repository = \"https://github.com/stainless-steel/md5\"\n-homepage = \"https://github.com/stainless-steel/md5\"\n-documentation = \"https://stainless-steel.github.io/md5\"\n-description = \"The package provides the MD5 hash function.\""}, {"sha": "73b5827524faf8cd05b0c7e769734321711781f8", "filename": "src/vendor/md5/LICENSE.txt", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2FLICENSE.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2FLICENSE.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2FLICENSE.txt?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee", "patch": "@@ -1,21 +0,0 @@\n-The MIT License (MIT)\n-\n-Copyright 2015 Ivan Ukhov\n-\n-Permission is hereby granted, free of charge, to any person obtaining a copy\n-of this software and associated documentation files (the \"Software\"), to deal\n-in the Software without restriction, including without limitation the rights\n-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n-copies of the Software, and to permit persons to whom the Software is\n-furnished to do so, subject to the following conditions:\n-\n-The above copyright notice and this permission notice shall be included in\n-all copies or substantial portions of the Software.\n-\n-THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n-THE SOFTWARE."}, {"sha": "6104556dc6f1ced129227e7cd9a9b10fa3bb0ab1", "filename": "src/vendor/md5/README.md", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2FREADME.md?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee", "patch": "@@ -1,19 +0,0 @@\n-# MD5 [![Version][version-img]][version-url] [![Status][status-img]][status-url]\n-\n-The package provides the [MD5][1] hash function.\n-\n-## [Documentation][doc]\n-\n-## Contributing\n-\n-1. Fork the project.\n-2. Implement your idea.\n-3. Open a pull request.\n-\n-[1]: https://en.wikipedia.org/wiki/MD5\n-\n-[version-img]: https://img.shields.io/crates/v/md5.svg\n-[version-url]: https://crates.io/crates/md5\n-[status-img]: https://travis-ci.org/stainless-steel/md5.svg?branch=master\n-[status-url]: https://travis-ci.org/stainless-steel/md5\n-[doc]: https://stainless-steel.github.io/md5"}, {"sha": "6e898085b0f9e64de379553f15b028ed5571e1a9", "filename": "src/vendor/md5/benches/lib.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2Fbenches%2Flib.rs?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee", "patch": "@@ -1,16 +0,0 @@\n-#![feature(test)]\n-\n-extern crate md5;\n-extern crate test;\n-\n-#[bench] fn compute_0001000(bencher: &mut test::Bencher) { compute(    1000, bencher); }\n-#[bench] fn compute_0010000(bencher: &mut test::Bencher) { compute(   10000, bencher); }\n-#[bench] fn compute_0100000(bencher: &mut test::Bencher) { compute(  100000, bencher); }\n-#[bench] fn compute_1000000(bencher: &mut test::Bencher) { compute(1_000000, bencher); }\n-\n-fn compute(size: usize, bencher: &mut test::Bencher) {\n-    let data = &vec![0xFFu8; size][..];\n-    bencher.iter(|| {\n-        test::black_box(md5::compute(data));\n-    });\n-}"}, {"sha": "5f28269ccea5337c691b1fe36026c10d1bba9172", "filename": "src/vendor/md5/src/lib.rs", "status": "removed", "additions": 0, "deletions": 340, "changes": 340, "blob_url": "https://github.com/rust-lang/rust/blob/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e373b47872872a2ce61c5b02f4dd96d90d046ee/src%2Fvendor%2Fmd5%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fmd5%2Fsrc%2Flib.rs?ref=8e373b47872872a2ce61c5b02f4dd96d90d046ee", "patch": "@@ -1,340 +0,0 @@\n-//! The [MD5][1] hash function.\n-//!\n-//! [1]: https://en.wikipedia.org/wiki/MD5\n-\n-// The implementation is based on:\n-// http://people.csail.mit.edu/rivest/Md5.c\n-\n-use std::convert::From;\n-use std::io::{Result, Write};\n-use std::mem;\n-\n-/// A digest.\n-pub type Digest = [u8; 16];\n-\n-/// A context.\n-#[derive(Copy)]\n-pub struct Context {\n-  handled: [u32; 2],\n-  buffer: [u32; 4],\n-  input: [u8; 64],\n-}\n-\n-impl Clone for Context {\n-    #[inline]\n-    fn clone(&self) -> Context { *self }\n-}\n-\n-const PADDING: [u8; 64] = [\n-    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-];\n-\n-impl Context {\n-    /// Create a context for computing a digest.\n-    #[inline]\n-    pub fn new() -> Context {\n-        Context {\n-            handled: [0, 0],\n-            buffer: [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476],\n-            input: unsafe { mem::uninitialized() },\n-        }\n-    }\n-\n-    /// Consume data.\n-    pub fn consume(&mut self, data: &[u8]) {\n-        let mut input: [u32; 16] = unsafe { mem::uninitialized() };\n-        let mut k = ((self.handled[0] >> 3) & 0x3F) as usize;\n-\n-        let length = data.len() as u32;\n-        if (self.handled[0] + (length << 3)) < self.handled[0] {\n-            self.handled[1] += 1;\n-        }\n-        self.handled[0] += length << 3;\n-        self.handled[1] += length >> 29;\n-\n-        for &value in data {\n-            self.input[k] = value;\n-            k += 1;\n-            if k != 0x40 {\n-                continue;\n-            }\n-            let mut j = 0;\n-            for i in 0..16 {\n-                input[i] = ((self.input[j + 3] as u32) << 24) |\n-                           ((self.input[j + 2] as u32) << 16) |\n-                           ((self.input[j + 1] as u32) <<  8) |\n-                           ((self.input[j    ] as u32)      );\n-                j += 4;\n-            }\n-            transform(&mut self.buffer, &input);\n-            k = 0;\n-        }\n-    }\n-\n-    /// Finalize and return the digest.\n-    pub fn compute(mut self) -> Digest {\n-        let mut input: [u32; 16] = unsafe { mem::uninitialized() };\n-        let k = ((self.handled[0] >> 3) & 0x3F) as usize;\n-\n-        input[14] = self.handled[0];\n-        input[15] = self.handled[1];\n-\n-        self.consume(&PADDING[..(if k < 56 { 56 - k } else { 120 - k })]);\n-\n-        let mut j = 0;\n-        for i in 0..14 {\n-            input[i] = ((self.input[j + 3] as u32) << 24) |\n-                       ((self.input[j + 2] as u32) << 16) |\n-                       ((self.input[j + 1] as u32) <<  8) |\n-                       ((self.input[j    ] as u32)      );\n-            j += 4;\n-        }\n-        transform(&mut self.buffer, &input);\n-\n-        let mut digest: Digest = unsafe { mem::uninitialized() };\n-\n-        let mut j = 0;\n-        for i in 0..4 {\n-            digest[j    ] = ((self.buffer[i]      ) & 0xFF) as u8;\n-            digest[j + 1] = ((self.buffer[i] >>  8) & 0xFF) as u8;\n-            digest[j + 2] = ((self.buffer[i] >> 16) & 0xFF) as u8;\n-            digest[j + 3] = ((self.buffer[i] >> 24) & 0xFF) as u8;\n-            j += 4;\n-        }\n-\n-        digest\n-    }\n-}\n-\n-impl Write for Context {\n-    #[inline]\n-    fn write(&mut self, data: &[u8]) -> Result<usize> {\n-        self.consume(data);\n-        Ok(data.len())\n-    }\n-\n-    #[inline]\n-    fn flush(&mut self) -> Result<()> {\n-        Ok(())\n-    }\n-}\n-\n-impl From<Context> for Digest {\n-    #[inline]\n-    fn from(context: Context) -> Digest {\n-        context.compute()\n-    }\n-}\n-\n-/// Compute the digest of data.\n-#[inline]\n-pub fn compute(data: &[u8]) -> Digest {\n-    let mut context = Context::new();\n-    context.consume(data);\n-    context.compute()\n-}\n-\n-fn transform(buffer: &mut [u32; 4], input: &[u32; 16]) {\n-    let (mut a, mut b, mut c, mut d) = (buffer[0], buffer[1], buffer[2], buffer[3]);\n-\n-    macro_rules! add(\n-        ($a:expr, $b:expr) => ($a.wrapping_add($b));\n-    );\n-    macro_rules! rotate(\n-        ($x:expr, $n:expr) => (($x << $n) | ($x >> (32 - $n)));\n-    );\n-\n-    {\n-        macro_rules! F(\n-            ($x:expr, $y:expr, $z:expr) => (($x & $y) | (!$x & $z));\n-        );\n-        macro_rules! T(\n-            ($a:expr, $b:expr, $c:expr, $d:expr, $x:expr, $s:expr, $ac:expr) => ({\n-                $a = add!(add!(add!($a, F!($b, $c, $d)), $x), $ac);\n-                $a = rotate!($a, $s);\n-                $a = add!($a, $b);\n-            });\n-        );\n-\n-        const S1: u32 =  7;\n-        const S2: u32 = 12;\n-        const S3: u32 = 17;\n-        const S4: u32 = 22;\n-\n-        T!(a, b, c, d, input[ 0], S1, 3614090360);\n-        T!(d, a, b, c, input[ 1], S2, 3905402710);\n-        T!(c, d, a, b, input[ 2], S3,  606105819);\n-        T!(b, c, d, a, input[ 3], S4, 3250441966);\n-        T!(a, b, c, d, input[ 4], S1, 4118548399);\n-        T!(d, a, b, c, input[ 5], S2, 1200080426);\n-        T!(c, d, a, b, input[ 6], S3, 2821735955);\n-        T!(b, c, d, a, input[ 7], S4, 4249261313);\n-        T!(a, b, c, d, input[ 8], S1, 1770035416);\n-        T!(d, a, b, c, input[ 9], S2, 2336552879);\n-        T!(c, d, a, b, input[10], S3, 4294925233);\n-        T!(b, c, d, a, input[11], S4, 2304563134);\n-        T!(a, b, c, d, input[12], S1, 1804603682);\n-        T!(d, a, b, c, input[13], S2, 4254626195);\n-        T!(c, d, a, b, input[14], S3, 2792965006);\n-        T!(b, c, d, a, input[15], S4, 1236535329);\n-    }\n-\n-    {\n-        macro_rules! F(\n-            ($x:expr, $y:expr, $z:expr) => (($x & $z) | ($y & !$z));\n-        );\n-        macro_rules! T(\n-            ($a:expr, $b:expr, $c:expr, $d:expr, $x:expr, $s:expr, $ac:expr) => ({\n-                $a = add!(add!(add!($a, F!($b, $c, $d)), $x), $ac);\n-                $a = rotate!($a, $s);\n-                $a = add!($a, $b);\n-            });\n-        );\n-\n-        const S1: u32 =  5;\n-        const S2: u32 =  9;\n-        const S3: u32 = 14;\n-        const S4: u32 = 20;\n-\n-        T!(a, b, c, d, input[ 1], S1, 4129170786);\n-        T!(d, a, b, c, input[ 6], S2, 3225465664);\n-        T!(c, d, a, b, input[11], S3,  643717713);\n-        T!(b, c, d, a, input[ 0], S4, 3921069994);\n-        T!(a, b, c, d, input[ 5], S1, 3593408605);\n-        T!(d, a, b, c, input[10], S2,   38016083);\n-        T!(c, d, a, b, input[15], S3, 3634488961);\n-        T!(b, c, d, a, input[ 4], S4, 3889429448);\n-        T!(a, b, c, d, input[ 9], S1,  568446438);\n-        T!(d, a, b, c, input[14], S2, 3275163606);\n-        T!(c, d, a, b, input[ 3], S3, 4107603335);\n-        T!(b, c, d, a, input[ 8], S4, 1163531501);\n-        T!(a, b, c, d, input[13], S1, 2850285829);\n-        T!(d, a, b, c, input[ 2], S2, 4243563512);\n-        T!(c, d, a, b, input[ 7], S3, 1735328473);\n-        T!(b, c, d, a, input[12], S4, 2368359562);\n-    }\n-\n-    {\n-        macro_rules! F(\n-            ($x:expr, $y:expr, $z:expr) => ($x ^ $y ^ $z);\n-        );\n-        macro_rules! T(\n-            ($a:expr, $b:expr, $c:expr, $d:expr, $x:expr, $s:expr, $ac:expr) => ({\n-                $a = add!(add!(add!($a, F!($b, $c, $d)), $x), $ac);\n-                $a = rotate!($a, $s);\n-                $a = add!($a, $b);\n-            });\n-        );\n-\n-        const S1: u32 =  4;\n-        const S2: u32 = 11;\n-        const S3: u32 = 16;\n-        const S4: u32 = 23;\n-\n-        T!(a, b, c, d, input[ 5], S1, 4294588738);\n-        T!(d, a, b, c, input[ 8], S2, 2272392833);\n-        T!(c, d, a, b, input[11], S3, 1839030562);\n-        T!(b, c, d, a, input[14], S4, 4259657740);\n-        T!(a, b, c, d, input[ 1], S1, 2763975236);\n-        T!(d, a, b, c, input[ 4], S2, 1272893353);\n-        T!(c, d, a, b, input[ 7], S3, 4139469664);\n-        T!(b, c, d, a, input[10], S4, 3200236656);\n-        T!(a, b, c, d, input[13], S1,  681279174);\n-        T!(d, a, b, c, input[ 0], S2, 3936430074);\n-        T!(c, d, a, b, input[ 3], S3, 3572445317);\n-        T!(b, c, d, a, input[ 6], S4,   76029189);\n-        T!(a, b, c, d, input[ 9], S1, 3654602809);\n-        T!(d, a, b, c, input[12], S2, 3873151461);\n-        T!(c, d, a, b, input[15], S3,  530742520);\n-        T!(b, c, d, a, input[ 2], S4, 3299628645);\n-    }\n-\n-    {\n-        macro_rules! F(\n-            ($x:expr, $y:expr, $z:expr) => ($y ^ ($x | !$z));\n-        );\n-        macro_rules! T(\n-            ($a:expr, $b:expr, $c:expr, $d:expr, $x:expr, $s:expr, $ac:expr) => ({\n-                $a = add!(add!(add!($a, F!($b, $c, $d)), $x), $ac);\n-                $a = rotate!($a, $s);\n-                $a = add!($a, $b);\n-            });\n-        );\n-\n-        const S1: u32 =  6;\n-        const S2: u32 = 10;\n-        const S3: u32 = 15;\n-        const S4: u32 = 21;\n-\n-        T!(a, b, c, d, input[ 0], S1, 4096336452);\n-        T!(d, a, b, c, input[ 7], S2, 1126891415);\n-        T!(c, d, a, b, input[14], S3, 2878612391);\n-        T!(b, c, d, a, input[ 5], S4, 4237533241);\n-        T!(a, b, c, d, input[12], S1, 1700485571);\n-        T!(d, a, b, c, input[ 3], S2, 2399980690);\n-        T!(c, d, a, b, input[10], S3, 4293915773);\n-        T!(b, c, d, a, input[ 1], S4, 2240044497);\n-        T!(a, b, c, d, input[ 8], S1, 1873313359);\n-        T!(d, a, b, c, input[15], S2, 4264355552);\n-        T!(c, d, a, b, input[ 6], S3, 2734768916);\n-        T!(b, c, d, a, input[13], S4, 1309151649);\n-        T!(a, b, c, d, input[ 4], S1, 4149444226);\n-        T!(d, a, b, c, input[11], S2, 3174756917);\n-        T!(c, d, a, b, input[ 2], S3,  718787259);\n-        T!(b, c, d, a, input[ 9], S4, 3951481745);\n-    }\n-\n-    buffer[0] = add!(buffer[0], a);\n-    buffer[1] = add!(buffer[1], b);\n-    buffer[2] = add!(buffer[2], c);\n-    buffer[3] = add!(buffer[3], d);\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    macro_rules! digest(\n-        ($string:expr) => ({\n-            let mut context = ::Context::new();\n-            context.consume($string.as_bytes());\n-            let mut digest = String::with_capacity(2 * 16);\n-            for x in &context.compute()[..] {\n-                digest.push_str(&format!(\"{:02x}\", x));\n-            }\n-            digest\n-        });\n-    );\n-\n-    #[test]\n-    fn compute() {\n-        let inputs = [\n-            \"\",\n-            \"a\",\n-            \"abc\",\n-            \"message digest\",\n-            \"abcdefghijklmnopqrstuvwxyz\",\n-            \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n-            \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\n-        ];\n-\n-        let outputs = [\n-            \"d41d8cd98f00b204e9800998ecf8427e\",\n-            \"0cc175b9c0f1b6a831c399e269772661\",\n-            \"900150983cd24fb0d6963f7d28e17f72\",\n-            \"f96b697d7cb7938d525a2f31aaf161d0\",\n-            \"c3fcd3d76192e4007dfb496cca67e13b\",\n-            \"d174ab98d277d9f5a5611c2c9f419d9f\",\n-            \"57edf4a22be3c955ac49da2e2107b67a\",\n-        ];\n-\n-        for (input, &output) in inputs.iter().zip(outputs.iter()) {\n-            assert_eq!(&digest!(input)[..], output);\n-        }\n-    }\n-}"}]}