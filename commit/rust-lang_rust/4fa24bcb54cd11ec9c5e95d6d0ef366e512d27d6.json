{"sha": "4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "node_id": "C_kwDOAAsO6NoAKDRmYTI0YmNiNTRjZDExZWM5YzVlOTVkNmQwZWYzNjZlNTEyZDI3ZDY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-03-14T10:28:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-14T23:45:47Z"}, "message": "rustc: Stricter checking for #[link] attributes", "tree": {"sha": "b4cdd23b4393d38383b89a25650f34dabf1ec378", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4cdd23b4393d38383b89a25650f34dabf1ec378"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "html_url": "https://github.com/rust-lang/rust/commit/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b3681bf621bc0de91ffab711b2350068b4c466", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b3681bf621bc0de91ffab711b2350068b4c466", "html_url": "https://github.com/rust-lang/rust/commit/70b3681bf621bc0de91ffab711b2350068b4c466"}], "stats": {"total": 1309, "additions": 774, "deletions": 535}, "files": [{"sha": "2774bda24f1484ba824e5f20b975ec2017ac1a45", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -396,37 +396,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n         }\n \n-        // Check for unstable modifiers on `#[link(..)]` attribute\n-        if attr.has_name(sym::link) {\n-            for nested_meta in attr.meta_item_list().unwrap_or_default() {\n-                if nested_meta.has_name(sym::modifiers) {\n-                    if let Some(modifiers) = nested_meta.value_str() {\n-                        for modifier in modifiers.as_str().split(',') {\n-                            if let Some(modifier) = modifier.strip_prefix(&['+', '-']) {\n-                                macro_rules! gate_modifier { ($($name:literal => $feature:ident)*) => {\n-                                    $(if modifier == $name {\n-                                        let msg = concat!(\"`#[link(modifiers=\\\"\", $name, \"\\\")]` is unstable\");\n-                                        gate_feature_post!(\n-                                            self,\n-                                            $feature,\n-                                            nested_meta.name_value_literal_span().unwrap(),\n-                                            msg\n-                                        );\n-                                    })*\n-                                }}\n-\n-                                gate_modifier!(\n-                                    \"bundle\" => native_link_modifiers_bundle\n-                                    \"verbatim\" => native_link_modifiers_verbatim\n-                                    \"as-needed\" => native_link_modifiers_as_needed\n-                                );\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n         // Emit errors for non-staged-api crates.\n         if !self.features.staged_api {\n             if attr.has_name(sym::rustc_deprecated)"}, {"sha": "437dacaff22ec4c027dfab0b5c7709f7d91ad0f2", "filename": "compiler/rustc_error_codes/src/error_codes/E0455.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0455.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0455.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0455.md?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,6 +1,11 @@\n+Some linking kinds are target-specific and not supported on all platforms.\n+\n Linking with `kind=framework` is only supported when targeting macOS,\n as frameworks are specific to that operating system.\n \n+Similarly, `kind=raw-dylib` is only supported when targeting Windows-like\n+platforms.\n+\n Erroneous code example:\n \n ```ignore (should-compile_fail-but-cannot-doctest-conditionally-without-macos)"}, {"sha": "1b280cba44f5331891078b046a0b8de89713ca16", "filename": "compiler/rustc_error_codes/src/error_codes/E0458.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0458.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0458.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0458.md?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -12,3 +12,4 @@ Please specify a valid \"kind\" value, from one of the following:\n * static\n * dylib\n * framework\n+* raw-dylib"}, {"sha": "2d13675e61550ff349cf5eee6415368273ca9f62", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,7 +1,9 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n+#![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(generators)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(nll)]\n #![feature(once_cell)]"}, {"sha": "628516fa13827673f49fdfb6c71c4b410d62423b", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 274, "deletions": 240, "changes": 514, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::CRATE_NODE_ID;\n+use rustc_ast::{NestedMetaItem, CRATE_NODE_ID};\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n@@ -9,8 +9,7 @@ use rustc_session::cstore::{DllCallingConvention, DllImport, NativeLib};\n use rustc_session::parse::feature_err;\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n-use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n@@ -51,310 +50,346 @@ impl<'tcx> Collector<'tcx> {\n \n         // Process all of the #[link(..)]-style arguments\n         let sess = &self.tcx.sess;\n+        let features = self.tcx.features();\n         for m in self.tcx.hir().attrs(it.hir_id()).iter().filter(|a| a.has_name(sym::link)) {\n             let Some(items) = m.meta_item_list() else {\n                 continue;\n             };\n-            let mut lib = NativeLib {\n-                name: None,\n-                kind: NativeLibKind::Unspecified,\n-                cfg: None,\n-                foreign_module: Some(it.def_id.to_def_id()),\n-                wasm_import_module: None,\n-                verbatim: None,\n-                dll_imports: Vec::new(),\n-            };\n-            let mut kind_specified = false;\n \n+            let mut name = None;\n+            let mut kind = None;\n+            let mut modifiers = None;\n+            let mut cfg = None;\n+            let mut wasm_import_module = None;\n             for item in items.iter() {\n-                if item.has_name(sym::kind) {\n-                    kind_specified = true;\n-                    let Some(kind) = item.value_str() else {\n-                        continue; // skip like historical compilers\n-                    };\n-                    lib.kind = match kind.as_str() {\n-                        \"static\" => NativeLibKind::Static { bundle: None, whole_archive: None },\n-                        \"static-nobundle\" => {\n-                            sess.struct_span_warn(\n-                                item.span(),\n-                                \"library kind `static-nobundle` has been superseded by specifying \\\n-                                modifier `-bundle` with library kind `static`\",\n-                            )\n-                            .emit();\n-                            if !self.tcx.features().static_nobundle {\n-                                feature_err(\n-                                    &self.tcx.sess.parse_sess,\n-                                    sym::static_nobundle,\n-                                    item.span(),\n-                                    \"kind=\\\"static-nobundle\\\" is unstable\",\n-                                )\n-                                .emit();\n-                            }\n-                            NativeLibKind::Static { bundle: Some(false), whole_archive: None }\n+                match item.name_or_empty() {\n+                    sym::name => {\n+                        if name.is_some() {\n+                            let msg = \"multiple `name` arguments in a single `#[link]` attribute\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n                         }\n-                        \"dylib\" => NativeLibKind::Dylib { as_needed: None },\n-                        \"framework\" => NativeLibKind::Framework { as_needed: None },\n-                        \"raw-dylib\" => NativeLibKind::RawDylib,\n-                        k => {\n-                            struct_span_err!(sess, item.span(), E0458, \"unknown kind: `{}`\", k)\n-                                .span_label(item.span(), \"unknown kind\")\n-                                .span_label(m.span, \"\")\n+                        let Some(link_name) = item.value_str() else {\n+                            let msg = \"link name must be of the form `name = \\\"string\\\"`\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        };\n+                        let span = item.name_value_literal_span().unwrap();\n+                        if link_name.is_empty() {\n+                            struct_span_err!(sess, span, E0454, \"link name must not be empty\")\n+                                .span_label(span, \"empty link name\")\n                                 .emit();\n-                            NativeLibKind::Unspecified\n                         }\n-                    };\n-                } else if item.has_name(sym::name) {\n-                    lib.name = item.value_str();\n-                } else if item.has_name(sym::cfg) {\n-                    let Some(cfg) = item.meta_item_list() else {\n-                        continue; // skip like historical compilers\n-                    };\n-                    if cfg.is_empty() {\n-                        sess.span_err(item.span(), \"`cfg()` must have an argument\");\n-                    } else if let cfg @ Some(..) = cfg[0].meta_item() {\n-                        lib.cfg = cfg.cloned();\n-                    } else {\n-                        sess.span_err(cfg[0].span(), \"invalid argument for `cfg(..)`\");\n+                        name = Some((link_name, span));\n                     }\n-                } else if item.has_name(sym::wasm_import_module) {\n-                    match item.value_str() {\n-                        Some(s) => lib.wasm_import_module = Some(s),\n-                        None => {\n-                            let msg = \"must be of the form `#[link(wasm_import_module = \\\"...\\\")]`\";\n+                    sym::kind => {\n+                        if kind.is_some() {\n+                            let msg = \"multiple `kind` arguments in a single `#[link]` attribute\";\n                             sess.span_err(item.span(), msg);\n+                            continue;\n                         }\n-                    }\n-                } else {\n-                    // currently, like past compilers, ignore unknown\n-                    // directives here.\n-                }\n-            }\n-\n-            // Do this outside the above loop so we don't depend on modifiers coming\n-            // after kinds\n-            let mut modifiers_count = 0;\n-            for item in items.iter().filter(|item| item.has_name(sym::modifiers)) {\n-                if let Some(modifiers) = item.value_str() {\n-                    modifiers_count += 1;\n-                    let span = item.name_value_literal_span().unwrap();\n-                    let mut has_duplicate_modifiers = false;\n-                    for modifier in modifiers.as_str().split(',') {\n-                        let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n-                            Some(m) => (m, modifier.starts_with('+')),\n-                            None => {\n-                                // Note: this error also excludes the case with empty modifier\n-                                // string, like `modifiers = \"\"`.\n-                                sess.span_err(\n-                                    span,\n-                                    \"invalid linking modifier syntax, expected '+' or '-' prefix \\\n-                                    before one of: bundle, verbatim, whole-archive, as-needed\",\n-                                );\n-                                continue;\n-                            }\n+                        let Some(link_kind) = item.value_str() else {\n+                            let msg = \"link kind must be of the form `kind = \\\"string\\\"`\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n                         };\n \n-                        match (modifier, &mut lib.kind) {\n-                            (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n-                                if bundle.is_some() {\n-                                    has_duplicate_modifiers = true;\n-                                }\n-                                *bundle = Some(value);\n-                            }\n-                            (\"bundle\", _) => {\n-                                sess.span_err(\n+                        let span = item.name_value_literal_span().unwrap();\n+                        let link_kind = match link_kind.as_str() {\n+                            \"static\" => NativeLibKind::Static { bundle: None, whole_archive: None },\n+                            \"static-nobundle\" => {\n+                                sess.struct_span_warn(\n                                     span,\n-                                    \"bundle linking modifier is only compatible with \\\n-                                `static` linking kind\",\n-                                );\n-                            }\n-\n-                            (\"verbatim\", _) => {\n-                                if lib.verbatim.is_some() {\n-                                    has_duplicate_modifiers = true;\n+                                    \"link kind `static-nobundle` has been superseded by specifying \\\n+                                     modifier `-bundle` with link kind `static`\",\n+                                )\n+                                .emit();\n+                                if !features.static_nobundle {\n+                                    feature_err(\n+                                        &sess.parse_sess,\n+                                        sym::static_nobundle,\n+                                        span,\n+                                        \"link kind `static-nobundle` is unstable\",\n+                                    )\n+                                    .emit();\n                                 }\n-                                lib.verbatim = Some(value);\n+                                NativeLibKind::Static { bundle: Some(false), whole_archive: None }\n                             }\n-\n-                            (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n-                                if whole_archive.is_some() {\n-                                    has_duplicate_modifiers = true;\n+                            \"dylib\" => NativeLibKind::Dylib { as_needed: None },\n+                            \"framework\" => {\n+                                if !sess.target.is_like_osx {\n+                                    struct_span_err!(\n+                                        sess,\n+                                        span,\n+                                        E0455,\n+                                        \"link kind `framework` is only supported on Apple targets\"\n+                                    )\n+                                    .emit();\n                                 }\n-                                *whole_archive = Some(value);\n+                                NativeLibKind::Framework { as_needed: None }\n                             }\n-                            (\"whole-archive\", _) => {\n-                                sess.span_err(\n-                                    span,\n-                                    \"whole-archive linking modifier is only compatible with \\\n-                                `static` linking kind\",\n-                                );\n-                            }\n-\n-                            (\"as-needed\", NativeLibKind::Dylib { as_needed })\n-                            | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n-                                if as_needed.is_some() {\n-                                    has_duplicate_modifiers = true;\n+                            \"raw-dylib\" => {\n+                                if !sess.target.is_like_windows {\n+                                    struct_span_err!(\n+                                        sess,\n+                                        span,\n+                                        E0455,\n+                                        \"link kind `raw-dylib` is only supported on Windows targets\"\n+                                    )\n+                                    .emit();\n+                                } else if !features.raw_dylib {\n+                                    feature_err(\n+                                        &sess.parse_sess,\n+                                        sym::raw_dylib,\n+                                        span,\n+                                        \"link kind `raw-dylib` is unstable\",\n+                                    )\n+                                    .emit();\n                                 }\n-                                *as_needed = Some(value);\n+                                NativeLibKind::RawDylib\n                             }\n-                            (\"as-needed\", _) => {\n-                                sess.span_err(\n-                                    span,\n-                                    \"as-needed linking modifier is only compatible with \\\n-                                `dylib` and `framework` linking kinds\",\n-                                );\n-                            }\n-\n-                            _ => {\n-                                sess.span_err(\n-                                    span,\n-                                    &format!(\n-                                        \"unrecognized linking modifier `{}`, expected one \\\n-                                    of: bundle, verbatim, whole-archive, as-needed\",\n-                                        modifier\n-                                    ),\n+                            kind => {\n+                                let msg = format!(\n+                                    \"unknown link kind `{kind}`, expected one of: \\\n+                                     static, dylib, framework, raw-dylib\"\n                                 );\n+                                struct_span_err!(sess, span, E0458, \"{}\", msg)\n+                                    .span_label(span, \"unknown link kind\")\n+                                    .emit();\n+                                continue;\n                             }\n+                        };\n+                        kind = Some(link_kind);\n+                    }\n+                    sym::modifiers => {\n+                        if modifiers.is_some() {\n+                            let msg =\n+                                \"multiple `modifiers` arguments in a single `#[link]` attribute\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        }\n+                        let Some(link_modifiers) = item.value_str() else {\n+                            let msg = \"link modifiers must be of the form `modifiers = \\\"string\\\"`\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        };\n+                        modifiers = Some((link_modifiers, item.name_value_literal_span().unwrap()));\n+                    }\n+                    sym::cfg => {\n+                        if cfg.is_some() {\n+                            let msg = \"multiple `cfg` arguments in a single `#[link]` attribute\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        }\n+                        let Some(link_cfg) = item.meta_item_list() else {\n+                            let msg = \"link cfg must be of the form `cfg(/* predicate */)`\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        };\n+                        let [NestedMetaItem::MetaItem(link_cfg)] = link_cfg else {\n+                            let msg = \"link cfg must have a single predicate argument\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        };\n+                        if !features.link_cfg {\n+                            feature_err(\n+                                &sess.parse_sess,\n+                                sym::link_cfg,\n+                                item.span(),\n+                                \"link cfg is unstable\",\n+                            )\n+                            .emit();\n+                        }\n+                        cfg = Some(link_cfg.clone());\n+                    }\n+                    sym::wasm_import_module => {\n+                        if wasm_import_module.is_some() {\n+                            let msg = \"multiple `wasm_import_module` arguments \\\n+                                       in a single `#[link]` attribute\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n                         }\n+                        let Some(link_wasm_import_module) = item.value_str() else {\n+                            let msg = \"wasm import module must be of the form \\\n+                                       `wasm_import_module = \\\"string\\\"`\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        };\n+                        wasm_import_module = Some((link_wasm_import_module, item.span()));\n                     }\n-                    if has_duplicate_modifiers {\n-                        let msg =\n-                            \"same modifier is used multiple times in a single `modifiers` argument\";\n+                    _ => {\n+                        let msg = \"unexpected `#[link]` argument, expected one of: \\\n+                                   name, kind, modifiers, cfg, wasm_import_module\";\n                         sess.span_err(item.span(), msg);\n                     }\n-                } else {\n-                    let msg = \"must be of the form `#[link(modifiers = \\\"...\\\")]`\";\n-                    sess.span_err(item.span(), msg);\n                 }\n             }\n \n-            if modifiers_count > 1 {\n-                let msg = \"multiple `modifiers` arguments in a single `#[link]` attribute\";\n-                sess.span_err(m.span, msg);\n+            // Do this outside the above loop so we don't depend on modifiers coming after kinds\n+            let mut verbatim = None;\n+            if let Some((modifiers, span)) = modifiers {\n+                for modifier in modifiers.as_str().split(',') {\n+                    let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n+                        Some(m) => (m, modifier.starts_with('+')),\n+                        None => {\n+                            sess.span_err(\n+                                span,\n+                                \"invalid linking modifier syntax, expected '+' or '-' prefix \\\n+                                before one of: bundle, verbatim, whole-archive, as-needed\",\n+                            );\n+                            continue;\n+                        }\n+                    };\n+\n+                    macro report_unstable_modifier($feature: ident) {\n+                        if !features.$feature {\n+                            feature_err(\n+                                &sess.parse_sess,\n+                                sym::$feature,\n+                                span,\n+                                &format!(\"linking modifier `{modifier}` is unstable\"),\n+                            )\n+                            .emit();\n+                        }\n+                    }\n+                    let assign_modifier = |dst: &mut Option<bool>| {\n+                        if dst.is_some() {\n+                            let msg = format!(\n+                                \"multiple `{modifier}` modifiers in a single `modifiers` argument\"\n+                            );\n+                            sess.span_err(span, &msg);\n+                        } else {\n+                            *dst = Some(value);\n+                        }\n+                    };\n+                    match (modifier, &mut kind) {\n+                        (\"bundle\", Some(NativeLibKind::Static { bundle, .. })) => {\n+                            report_unstable_modifier!(native_link_modifiers_bundle);\n+                            assign_modifier(bundle)\n+                        }\n+                        (\"bundle\", _) => {\n+                            sess.span_err(\n+                                span,\n+                                \"linking modifier `bundle` is only compatible with \\\n+                                 `static` linking kind\",\n+                            );\n+                        }\n+\n+                        (\"verbatim\", _) => {\n+                            report_unstable_modifier!(native_link_modifiers_verbatim);\n+                            assign_modifier(&mut verbatim)\n+                        }\n+\n+                        (\"whole-archive\", Some(NativeLibKind::Static { whole_archive, .. })) => {\n+                            assign_modifier(whole_archive)\n+                        }\n+                        (\"whole-archive\", _) => {\n+                            sess.span_err(\n+                                span,\n+                                \"linking modifier `whole-archive` is only compatible with \\\n+                                 `static` linking kind\",\n+                            );\n+                        }\n+\n+                        (\"as-needed\", Some(NativeLibKind::Dylib { as_needed }))\n+                        | (\"as-needed\", Some(NativeLibKind::Framework { as_needed })) => {\n+                            report_unstable_modifier!(native_link_modifiers_as_needed);\n+                            assign_modifier(as_needed)\n+                        }\n+                        (\"as-needed\", _) => {\n+                            sess.span_err(\n+                                span,\n+                                \"linking modifier `as-needed` is only compatible with \\\n+                                 `dylib` and `framework` linking kinds\",\n+                            );\n+                        }\n+\n+                        _ => {\n+                            sess.span_err(\n+                                span,\n+                                format!(\n+                                    \"unknown linking modifier `{modifier}`, expected one of: \\\n+                                     bundle, verbatim, whole-archive, as-needed\"\n+                                ),\n+                            );\n+                        }\n+                    }\n+                }\n             }\n \n-            // In general we require #[link(name = \"...\")] but we allow\n-            // #[link(wasm_import_module = \"...\")] without the `name`.\n-            let requires_name = kind_specified || lib.wasm_import_module.is_none();\n-            if lib.name.is_none() && requires_name {\n+            if let Some((_, span)) = wasm_import_module {\n+                if name.is_some() || kind.is_some() || modifiers.is_some() || cfg.is_some() {\n+                    let msg = \"`wasm_import_module` is incompatible with \\\n+                               other arguments in `#[link]` attributes\";\n+                    sess.span_err(span, msg);\n+                }\n+            } else if name.is_none() {\n                 struct_span_err!(\n                     sess,\n                     m.span,\n                     E0459,\n-                    \"`#[link(...)]` specified without \\\n-                                  `name = \\\"foo\\\"`\"\n+                    \"`#[link]` attribute requires a `name = \\\"string\\\"` argument\"\n                 )\n                 .span_label(m.span, \"missing `name` argument\")\n                 .emit();\n             }\n \n-            if lib.kind == NativeLibKind::RawDylib {\n-                lib.dll_imports.extend(\n+            let dll_imports = match kind {\n+                Some(NativeLibKind::RawDylib) => {\n+                    if let Some((name, span)) = name && name.as_str().contains('\\0') {\n+                        sess.span_err(\n+                            span,\n+                            \"link name must not contain NUL characters if link kind is `raw-dylib`\",\n+                        );\n+                    }\n                     foreign_mod_items\n                         .iter()\n-                        .map(|child_item| self.build_dll_import(abi, child_item)),\n-                );\n-            }\n-\n-            self.register_native_lib(Some(m.span), lib);\n-        }\n-    }\n-\n-    fn register_native_lib(&mut self, span: Option<Span>, lib: NativeLib) {\n-        if lib.name.as_ref().map_or(false, |&s| s == kw::Empty) {\n-            match span {\n-                Some(span) => {\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        span,\n-                        E0454,\n-                        \"`#[link(name = \\\"\\\")]` given with empty name\"\n-                    )\n-                    .span_label(span, \"empty name given\")\n-                    .emit();\n-                }\n-                None => {\n-                    self.tcx.sess.err(\"empty library name given via `-l`\");\n-                }\n-            }\n-            return;\n-        }\n-        let is_osx = self.tcx.sess.target.is_like_osx;\n-        if matches!(lib.kind, NativeLibKind::Framework { .. }) && !is_osx {\n-            let msg = \"native frameworks are only available on macOS targets\";\n-            match span {\n-                Some(span) => {\n-                    struct_span_err!(self.tcx.sess, span, E0455, \"{}\", msg).emit();\n-                }\n-                None => {\n-                    self.tcx.sess.err(msg);\n+                        .map(|child_item| self.build_dll_import(abi, child_item))\n+                        .collect()\n                 }\n-            }\n-        }\n-        if lib.cfg.is_some() && !self.tcx.features().link_cfg {\n-            feature_err(\n-                &self.tcx.sess.parse_sess,\n-                sym::link_cfg,\n-                span.unwrap(),\n-                \"kind=\\\"link_cfg\\\" is unstable\",\n-            )\n-            .emit();\n-        }\n-        // this just unwraps lib.name; we already established that it isn't empty above.\n-        if let (NativeLibKind::RawDylib, Some(lib_name)) = (lib.kind, lib.name) {\n-            let Some(span) = span else {\n-                bug!(\"raw-dylib libraries are not supported on the command line\");\n+                _ => Vec::new(),\n             };\n-\n-            if !self.tcx.sess.target.options.is_like_windows {\n-                self.tcx.sess.span_fatal(\n-                    span,\n-                    \"`#[link(...)]` with `kind = \\\"raw-dylib\\\"` only supported on Windows\",\n-                );\n-            }\n-\n-            if lib_name.as_str().contains('\\0') {\n-                self.tcx.sess.span_err(span, \"library name may not contain NUL characters\");\n-            }\n-\n-            if !self.tcx.features().raw_dylib {\n-                feature_err(\n-                    &self.tcx.sess.parse_sess,\n-                    sym::raw_dylib,\n-                    span,\n-                    \"kind=\\\"raw-dylib\\\" is unstable\",\n-                )\n-                .emit();\n-            }\n+            self.libs.push(NativeLib {\n+                name: name.map(|(name, _)| name),\n+                kind: kind.unwrap_or(NativeLibKind::Unspecified),\n+                cfg,\n+                foreign_module: Some(it.def_id.to_def_id()),\n+                wasm_import_module: wasm_import_module.map(|(name, _)| name),\n+                verbatim,\n+                dll_imports,\n+            });\n         }\n-\n-        self.libs.push(lib);\n     }\n \n     // Process libs passed on the command line\n     fn process_command_line(&mut self) {\n         // First, check for errors\n         let mut renames = FxHashSet::default();\n         for lib in &self.tcx.sess.opts.libs {\n+            if let NativeLibKind::Framework { .. } = lib.kind && !self.tcx.sess.target.is_like_osx {\n+                // Cannot check this when parsing options because the target is not yet available.\n+                self.tcx.sess.err(\"library kind `framework` is only supported on Apple targets\");\n+            }\n             if let Some(ref new_name) = lib.new_name {\n                 let any_duplicate = self\n                     .libs\n                     .iter()\n                     .filter_map(|lib| lib.name.as_ref())\n                     .any(|n| n.as_str() == lib.name);\n                 if new_name.is_empty() {\n-                    self.tcx.sess.err(&format!(\n+                    self.tcx.sess.err(format!(\n                         \"an empty renaming target was specified for library `{}`\",\n                         lib.name\n                     ));\n                 } else if !any_duplicate {\n-                    self.tcx.sess.err(&format!(\n+                    self.tcx.sess.err(format!(\n                         \"renaming of the library `{}` was specified, \\\n                                                 however this crate contains no `#[link(...)]` \\\n                                                 attributes referencing this library\",\n                         lib.name\n                     ));\n                 } else if !renames.insert(&lib.name) {\n-                    self.tcx.sess.err(&format!(\n+                    self.tcx.sess.err(format!(\n                         \"multiple renamings were \\\n                                                 specified for library `{}`\",\n                         lib.name\n@@ -404,16 +439,15 @@ impl<'tcx> Collector<'tcx> {\n             if existing.is_empty() {\n                 // Add if not found\n                 let new_name: Option<&str> = passed_lib.new_name.as_deref();\n-                let lib = NativeLib {\n+                self.libs.push(NativeLib {\n                     name: Some(Symbol::intern(new_name.unwrap_or(&passed_lib.name))),\n                     kind: passed_lib.kind,\n                     cfg: None,\n                     foreign_module: None,\n                     wasm_import_module: None,\n                     verbatim: passed_lib.verbatim,\n                     dll_imports: Vec::new(),\n-                };\n-                self.register_native_lib(None, lib);\n+                });\n             } else {\n                 // Move all existing libraries with the same name to the\n                 // end of the command line."}, {"sha": "3d60d336c732115c16aa519f89e367b194a24562", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -23,6 +23,7 @@ use rustc_session::lint::builtin::{\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::spec::abi::Abi;\n use std::collections::hash_map::Entry;\n \n pub(crate) fn target_from_impl_item<'tcx>(\n@@ -1317,22 +1318,27 @@ impl CheckAttrVisitor<'_> {\n \n     /// Checks if `#[link]` is applied to an item other than a foreign module.\n     fn check_link(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n-        match target {\n-            Target::ForeignMod => {}\n-            _ => {\n-                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-                    let mut diag = lint.build(\"attribute should be applied to an `extern` block\");\n-                    diag.warn(\n-                        \"this was previously accepted by the compiler but is \\\n-                         being phased out; it will become a hard error in \\\n-                         a future release!\",\n-                    );\n+        if target == Target::ForeignMod\n+            && let hir::Node::Item(item) = self.tcx.hir().get(hir_id)\n+            && let Item { kind: ItemKind::ForeignMod { abi, .. }, .. } = item\n+            && !matches!(abi, Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic)\n+        {\n+            return;\n+        }\n \n-                    diag.span_label(span, \"not an `extern` block\");\n-                    diag.emit();\n-                });\n+        self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+            let mut diag =\n+                lint.build(\"attribute should be applied to an `extern` block with non-Rust ABI\");\n+            diag.warn(\n+                \"this was previously accepted by the compiler but is \\\n+                 being phased out; it will become a hard error in \\\n+                 a future release!\",\n+            );\n+            if target != Target::ForeignMod {\n+                diag.span_label(span, \"not an `extern` block\");\n             }\n-        }\n+            diag.emit();\n+        });\n     }\n \n     /// Checks if `#[link_name]` is applied to an item other than a foreign function or static."}, {"sha": "e1e398a06ed42c6f091505c5724cb13cfeef8016", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 45, "deletions": 59, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1937,33 +1937,27 @@ fn parse_native_lib_kind(\n     };\n \n     let kind = match kind {\n-        \"dylib\" => NativeLibKind::Dylib { as_needed: None },\n-        \"framework\" => NativeLibKind::Framework { as_needed: None },\n         \"static\" => NativeLibKind::Static { bundle: None, whole_archive: None },\n         \"static-nobundle\" => {\n             early_warn(\n                 error_format,\n                 \"library kind `static-nobundle` has been superseded by specifying \\\n-                `-bundle` on library kind `static`. Try `static:-bundle`\",\n+                 modifier `-bundle` with library kind `static`. Try `static:-bundle`\",\n             );\n-            if modifiers.is_some() {\n-                early_error(\n-                    error_format,\n-                    \"linking modifier can't be used with library kind `static-nobundle`\",\n-                )\n-            }\n             if !nightly_options::match_is_nightly_build(matches) {\n                 early_error(\n                     error_format,\n-                    \"library kind `static-nobundle` are currently unstable and only accepted on \\\n-                the nightly compiler\",\n+                    \"library kind `static-nobundle` is unstable \\\n+                     and only accepted on the nightly compiler\",\n                 );\n             }\n             NativeLibKind::Static { bundle: Some(false), whole_archive: None }\n         }\n-        s => early_error(\n+        \"dylib\" => NativeLibKind::Dylib { as_needed: None },\n+        \"framework\" => NativeLibKind::Framework { as_needed: None },\n+        _ => early_error(\n             error_format,\n-            &format!(\"unknown library kind `{s}`, expected one of dylib, framework, or static\"),\n+            &format!(\"unknown library kind `{kind}`, expected one of: static, dylib, framework\"),\n         ),\n     };\n     match modifiers {\n@@ -1978,94 +1972,83 @@ fn parse_native_lib_modifiers(\n     error_format: ErrorOutputType,\n     matches: &getopts::Matches,\n ) -> (NativeLibKind, Option<bool>) {\n-    let report_unstable_modifier = |modifier| {\n-        if !nightly_options::is_unstable_enabled(matches) {\n-            let why = if nightly_options::match_is_nightly_build(matches) {\n-                \" and only accepted on the nightly compiler\"\n-            } else {\n-                \", the `-Z unstable-options` flag must also be passed to use it\"\n-            };\n-            early_error(\n-                error_format,\n-                &format!(\"{modifier} linking modifier is currently unstable{why}\"),\n-            )\n-        }\n-    };\n-\n-    let mut has_duplicate_modifiers = false;\n     let mut verbatim = None;\n     for modifier in modifiers.split(',') {\n         let (modifier, value) = match modifier.strip_prefix(&['+', '-']) {\n             Some(m) => (m, modifier.starts_with('+')),\n             None => early_error(\n                 error_format,\n                 \"invalid linking modifier syntax, expected '+' or '-' prefix \\\n-                    before one of: bundle, verbatim, whole-archive, as-needed\",\n+                 before one of: bundle, verbatim, whole-archive, as-needed\",\n             ),\n         };\n \n+        let report_unstable_modifier = || {\n+            if !nightly_options::is_unstable_enabled(matches) {\n+                let why = if nightly_options::match_is_nightly_build(matches) {\n+                    \" and only accepted on the nightly compiler\"\n+                } else {\n+                    \", the `-Z unstable-options` flag must also be passed to use it\"\n+                };\n+                early_error(\n+                    error_format,\n+                    &format!(\"linking modifier `{modifier}` is unstable{why}\"),\n+                )\n+            }\n+        };\n+        let assign_modifier = |dst: &mut Option<bool>| {\n+            if dst.is_some() {\n+                let msg = format!(\"multiple `{modifier}` modifiers in a single `-l` option\");\n+                early_error(error_format, &msg)\n+            } else {\n+                *dst = Some(value);\n+            }\n+        };\n         match (modifier, &mut kind) {\n             (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n-                report_unstable_modifier(modifier);\n-                if bundle.is_some() {\n-                    has_duplicate_modifiers = true;\n-                }\n-                *bundle = Some(value);\n+                report_unstable_modifier();\n+                assign_modifier(bundle)\n             }\n             (\"bundle\", _) => early_error(\n                 error_format,\n-                \"bundle linking modifier is only compatible with \\\n-                    `static` linking kind\",\n+                \"linking modifier `bundle` is only compatible with `static` linking kind\",\n             ),\n \n             (\"verbatim\", _) => {\n-                report_unstable_modifier(modifier);\n-                if verbatim.is_some() {\n-                    has_duplicate_modifiers = true;\n-                }\n-                verbatim = Some(value);\n+                report_unstable_modifier();\n+                assign_modifier(&mut verbatim)\n             }\n \n             (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n-                if whole_archive.is_some() {\n-                    has_duplicate_modifiers = true;\n-                }\n-                *whole_archive = Some(value);\n+                assign_modifier(whole_archive)\n             }\n             (\"whole-archive\", _) => early_error(\n                 error_format,\n-                \"whole-archive linking modifier is only compatible with \\\n-                    `static` linking kind\",\n+                \"linking modifier `whole-archive` is only compatible with `static` linking kind\",\n             ),\n \n             (\"as-needed\", NativeLibKind::Dylib { as_needed })\n             | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n-                report_unstable_modifier(modifier);\n-                if as_needed.is_some() {\n-                    has_duplicate_modifiers = true;\n-                }\n-                *as_needed = Some(value);\n+                report_unstable_modifier();\n+                assign_modifier(as_needed)\n             }\n             (\"as-needed\", _) => early_error(\n                 error_format,\n-                \"as-needed linking modifier is only compatible with \\\n-                    `dylib` and `framework` linking kinds\",\n+                \"linking modifier `as-needed` is only compatible with \\\n+                 `dylib` and `framework` linking kinds\",\n             ),\n \n             // Note: this error also excludes the case with empty modifier\n             // string, like `modifiers = \"\"`.\n             _ => early_error(\n                 error_format,\n                 &format!(\n-                    \"unrecognized linking modifier `{modifier}`, expected one \\\n-                    of: bundle, verbatim, whole-archive, as-needed\"\n+                    \"unknown linking modifier `{modifier}`, expected one \\\n+                     of: bundle, verbatim, whole-archive, as-needed\"\n                 ),\n             ),\n         }\n     }\n-    if has_duplicate_modifiers {\n-        report_unstable_modifier(\"duplicating\")\n-    }\n \n     (kind, verbatim)\n }\n@@ -2093,6 +2076,9 @@ fn parse_libs(matches: &getopts::Matches, error_format: ErrorOutputType) -> Vec<\n                 None => (name, None),\n                 Some((name, new_name)) => (name.to_string(), Some(new_name.to_owned())),\n             };\n+            if name.is_empty() {\n+                early_error(error_format, \"library name must not be empty\");\n+            }\n             NativeLib { name, new_name, kind, verbatim }\n         })\n         .collect()"}, {"sha": "d80e4f2086995725f9e6f03cd4efcda13d2c649d", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -52,7 +52,8 @@ where `KIND` may be one of:\n If the kind is specified, then linking modifiers can be attached to it.\n Modifiers are specified as a comma-delimited string with each modifier prefixed with\n either a `+` or `-` to indicate that the modifier is enabled or disabled, respectively.\n-The last boolean value specified for a given modifier wins. \\\n+Specifying multiple `modifiers` arguments in a single `link` attribute,\n+or multiple identical modifiers in the same `modifiers` argument is not currently supported. \\\n Example: `-l static:+whole-archive=mylib`.\n \n The kind of library and the modifiers can also be specified in a [`#[link]`"}, {"sha": "7113d913cd0fa49b9f3cb972f42258d7c19073d0", "filename": "src/test/ui/empty/empty-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,4 @@\n-#[link(name = \"\")] //~ ERROR: given with empty name\n+#[link(name = \"\")] //~ ERROR: link name must not be empty\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "adcf3670d1d7189757dae64a9264aa3e88ff01ef", "filename": "src/test/ui/empty/empty-linkname.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0454]: `#[link(name = \"\")]` given with empty name\n-  --> $DIR/empty-linkname.rs:1:1\n+error[E0454]: link name must not be empty\n+  --> $DIR/empty-linkname.rs:1:15\n    |\n LL | #[link(name = \"\")]\n-   | ^^^^^^^^^^^^^^^^^^ empty name given\n+   |               ^^ empty link name\n \n error: aborting due to previous error\n "}, {"sha": "b9a506fee830a71eff8598441d26f08562c0fbf5", "filename": "src/test/ui/error-codes/E0454.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0454]: `#[link(name = \"\")]` given with empty name\n-  --> $DIR/E0454.rs:1:1\n+error[E0454]: link name must not be empty\n+  --> $DIR/E0454.rs:1:15\n    |\n LL | #[link(name = \"\")] extern \"C\" {}\n-   | ^^^^^^^^^^^^^^^^^^ empty name given\n+   |               ^^ empty link name\n \n error: aborting due to previous error\n "}, {"sha": "e641bba541ee0249f6e9041db506fa3f7eedb87f", "filename": "src/test/ui/error-codes/E0458.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,12 +1,10 @@\n-error[E0458]: unknown kind: `wonderful_unicorn`\n-  --> $DIR/E0458.rs:1:8\n+error[E0458]: unknown link kind `wonderful_unicorn`, expected one of: static, dylib, framework, raw-dylib\n+  --> $DIR/E0458.rs:1:15\n    |\n LL | #[link(kind = \"wonderful_unicorn\")] extern \"C\" {}\n-   | -------^^^^^^^^^^^^^^^^^^^^^^^^^^--\n-   |        |\n-   |        unknown kind\n+   |               ^^^^^^^^^^^^^^^^^^^ unknown link kind\n \n-error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n+error[E0459]: `#[link]` attribute requires a `name = \"string\"` argument\n   --> $DIR/E0458.rs:1:1\n    |\n LL | #[link(kind = \"wonderful_unicorn\")] extern \"C\" {}"}, {"sha": "8f0dd25e0309a4cdc826af85d093215e3e9d02b9", "filename": "src/test/ui/error-codes/E0459.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,4 @@\n-error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n+error[E0459]: `#[link]` attribute requires a `name = \"string\"` argument\n   --> $DIR/E0459.rs:1:1\n    |\n LL | #[link(kind = \"dylib\")] extern \"C\" {}"}, {"sha": "8f47d596521d9dba2162d3ec70069ff494b629dc", "filename": "src/test/ui/feature-gates/feature-gate-link_cfg.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-link_cfg.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: kind=\"link_cfg\" is unstable\n-  --> $DIR/feature-gate-link_cfg.rs:1:1\n+error[E0658]: link cfg is unstable\n+  --> $DIR/feature-gate-link_cfg.rs:1:22\n    |\n LL | #[link(name = \"foo\", cfg(foo))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^\n    |\n    = note: see issue #37406 <https://github.com/rust-lang/rust/issues/37406> for more information\n    = help: add `#![feature(link_cfg)]` to the crate attributes to enable"}, {"sha": "132bc6ab04af2dc0f1cae3e9c6486e0302cf465a", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,5 +1,5 @@\n-#[link(name = \"foo\", modifiers = \"+as-needed\")]\n-//~^ ERROR: `#[link(modifiers=\"as-needed\")]` is unstable\n+#[link(name = \"foo\", kind = \"dylib\", modifiers = \"+as-needed\")]\n+//~^ ERROR: linking modifier `as-needed` is unstable\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "2ef6a1c040424a80a254e4c62e002279b2ccbfce", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_as_needed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_as_needed.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: `#[link(modifiers=\"as-needed\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_as_needed.rs:1:34\n+error[E0658]: linking modifier `as-needed` is unstable\n+  --> $DIR/feature-gate-native_link_modifiers_as_needed.rs:1:50\n    |\n-LL | #[link(name = \"foo\", modifiers = \"+as-needed\")]\n-   |                                  ^^^^^^^^^^^^\n+LL | #[link(name = \"foo\", kind = \"dylib\", modifiers = \"+as-needed\")]\n+   |                                                  ^^^^^^^^^^^^\n    |\n    = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n    = help: add `#![feature(native_link_modifiers_as_needed)]` to the crate attributes to enable"}, {"sha": "743bcc9a1b3818ed29989cbc0ddeaf63babd1e67", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle-3.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,2 +1,2 @@\n-error: bundle linking modifier is currently unstable and only accepted on the nightly compiler\n+error: linking modifier `bundle` is unstable and only accepted on the nightly compiler\n "}, {"sha": "c1d5a31aaa4dfe8c715ef80be6b9cf52791416c0", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,5 +1,5 @@\n-#[link(name = \"foo\", modifiers = \"+bundle\")]\n-//~^ ERROR: `#[link(modifiers=\"bundle\")]` is unstable\n+#[link(name = \"foo\", kind = \"static\", modifiers = \"+bundle\")]\n+//~^ ERROR: linking modifier `bundle` is unstable\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "dcaa7fcc64f02bb7d5ce4f6f1337b8a48182417e", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_bundle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_bundle.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: `#[link(modifiers=\"bundle\")]` is unstable\n-  --> $DIR/feature-gate-native_link_modifiers_bundle.rs:1:34\n+error[E0658]: linking modifier `bundle` is unstable\n+  --> $DIR/feature-gate-native_link_modifiers_bundle.rs:1:51\n    |\n-LL | #[link(name = \"foo\", modifiers = \"+bundle\")]\n-   |                                  ^^^^^^^^^\n+LL | #[link(name = \"foo\", kind = \"static\", modifiers = \"+bundle\")]\n+   |                                                   ^^^^^^^^^\n    |\n    = note: see issue #81490 <https://github.com/rust-lang/rust/issues/81490> for more information\n    = help: add `#![feature(native_link_modifiers_bundle)]` to the crate attributes to enable"}, {"sha": "7b09195dc3fb0c4a4c56b21d67ece79bb8dd2c00", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_verbatim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,5 +1,5 @@\n #[link(name = \"foo\", modifiers = \"+verbatim\")]\n-//~^ ERROR: `#[link(modifiers=\"verbatim\")]` is unstable\n+//~^ ERROR: linking modifier `verbatim` is unstable\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "3bfbeb8db35fe3d4ba6b51f9f52366fa079244a3", "filename": "src/test/ui/feature-gates/feature-gate-native_link_modifiers_verbatim.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-native_link_modifiers_verbatim.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[link(modifiers=\"verbatim\")]` is unstable\n+error[E0658]: linking modifier `verbatim` is unstable\n   --> $DIR/feature-gate-native_link_modifiers_verbatim.rs:1:34\n    |\n LL | #[link(name = \"foo\", modifiers = \"+verbatim\")]"}, {"sha": "f894f517b38df9ea27b4253b17ab415371466fb3", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,6 +1,6 @@\n // only-windows\n #[link(name = \"foo\", kind = \"raw-dylib\")]\n-//~^ ERROR: kind=\"raw-dylib\" is unstable\n+//~^ ERROR: link kind `raw-dylib` is unstable\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "ca7a61f64134fbdfec16007fa2782ae7b0051316", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: kind=\"raw-dylib\" is unstable\n-  --> $DIR/feature-gate-raw-dylib.rs:2:1\n+error[E0658]: link kind `raw-dylib` is unstable\n+  --> $DIR/feature-gate-raw-dylib.rs:2:29\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^\n    |\n    = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n    = help: add `#![feature(raw_dylib)]` to the crate attributes to enable"}, {"sha": "782d9e39456159362ccdda5da977d900254f7d52", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle-2.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,2 +1,2 @@\n-warning: library kind `static-nobundle` has been superseded by specifying `-bundle` on library kind `static`. Try `static:-bundle`\n+warning: library kind `static-nobundle` has been superseded by specifying modifier `-bundle` with library kind `static`. Try `static:-bundle`\n "}, {"sha": "50f1b7ff3fc48f67282591054f9c440c8d75001c", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,6 +1,6 @@\n #[link(name = \"foo\", kind = \"static-nobundle\")]\n-//~^ WARNING: library kind `static-nobundle` has been superseded by specifying modifier `-bundle` with library kind `static`\n-//~^^ ERROR: kind=\"static-nobundle\" is unstable\n+//~^ WARNING: link kind `static-nobundle` has been superseded by specifying modifier `-bundle` with link kind `static`\n+//~^^ ERROR: link kind `static-nobundle` is unstable\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "094661aeb57af9ce3f0426507f94643f0700d9a0", "filename": "src/test/ui/feature-gates/feature-gate-static-nobundle.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-static-nobundle.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,14 +1,14 @@\n-warning: library kind `static-nobundle` has been superseded by specifying modifier `-bundle` with library kind `static`\n-  --> $DIR/feature-gate-static-nobundle.rs:1:22\n+warning: link kind `static-nobundle` has been superseded by specifying modifier `-bundle` with link kind `static`\n+  --> $DIR/feature-gate-static-nobundle.rs:1:29\n    |\n LL | #[link(name = \"foo\", kind = \"static-nobundle\")]\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^\n \n-error[E0658]: kind=\"static-nobundle\" is unstable\n-  --> $DIR/feature-gate-static-nobundle.rs:1:22\n+error[E0658]: link kind `static-nobundle` is unstable\n+  --> $DIR/feature-gate-static-nobundle.rs:1:29\n    |\n LL | #[link(name = \"foo\", kind = \"static-nobundle\")]\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #37403 <https://github.com/rust-lang/rust/issues/37403> for more information\n    = help: add `#![feature(static_nobundle)]` to the crate attributes to enable"}, {"sha": "d8d2eca570e3241480d009746fc8e1eefbc05aad", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -581,6 +581,10 @@ mod link {\n     //~^ WARN attribute should be applied to an `extern` block\n     //~| WARN this was previously accepted\n     //~| NOTE not an `extern` block\n+\n+    #[link()] extern \"Rust\" {}\n+    //~^ WARN attribute should be applied to an `extern` block\n+    //~| WARN this was previously accepted\n }\n \n struct StructForDeprecated;"}, {"sha": "cf9f89d8fde2524b5283ff934571e4132816a262", "filename": "src/test/ui/feature-gates/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 68, "deletions": 60, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -310,7 +310,7 @@ LL | | }\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to an `extern` block\n+warning: attribute should be applied to an `extern` block with non-Rust ABI\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:554:1\n    |\n LL |   #[link()]\n@@ -328,55 +328,55 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n warning: `#[must_use]` has no effect when applied to a module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:601:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:605:1\n    |\n LL | #[must_use]\n    | ^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:614:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:618:1\n    |\n LL | #[windows_subsystem = \"windows\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:654:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:658:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:673:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:677:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:1\n    |\n LL | #[no_builtins]\n    | ^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:731:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:735:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -407,7 +407,7 @@ LL | #![cold]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to an `extern` block\n+warning: attribute should be applied to an `extern` block with non-Rust ABI\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n    |\n LL | #![link()]\n@@ -863,300 +863,308 @@ LL |     #[link_section = \"1800\"] impl S { }\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to an `extern` block\n+warning: attribute should be applied to an `extern` block with non-Rust ABI\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:560:17\n    |\n LL |     mod inner { #![link()] }\n    |     ------------^^^^^^^^^^-- not an `extern` block\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to an `extern` block\n+warning: attribute should be applied to an `extern` block with non-Rust ABI\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:565:5\n    |\n LL |     #[link()] fn f() { }\n    |     ^^^^^^^^^ ---------- not an `extern` block\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to an `extern` block\n+warning: attribute should be applied to an `extern` block with non-Rust ABI\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:570:5\n    |\n LL |     #[link()] struct S;\n    |     ^^^^^^^^^ --------- not an `extern` block\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to an `extern` block\n+warning: attribute should be applied to an `extern` block with non-Rust ABI\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:575:5\n    |\n LL |     #[link()] type T = S;\n    |     ^^^^^^^^^ ----------- not an `extern` block\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n-warning: attribute should be applied to an `extern` block\n+warning: attribute should be applied to an `extern` block with non-Rust ABI\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:580:5\n    |\n LL |     #[link()] impl S { }\n    |     ^^^^^^^^^ ---------- not an `extern` block\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n+warning: attribute should be applied to an `extern` block with non-Rust ABI\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:585:5\n+   |\n+LL |     #[link()] extern \"Rust\" {}\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n warning: `#[must_use]` has no effect when applied to a module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:603:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:607:17\n    |\n LL |     mod inner { #![must_use] }\n    |                 ^^^^^^^^^^^^\n \n warning: `#[must_use]` has no effect when applied to a type alias\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:609:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:613:5\n    |\n LL |     #[must_use] type T = S;\n    |     ^^^^^^^^^^^\n \n warning: `#[must_use]` has no effect when applied to an item\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:611:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:615:5\n    |\n LL |     #[must_use] impl S { }\n    |     ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:617:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:621:17\n    |\n LL |     mod inner { #![windows_subsystem=\"windows\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:620:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:624:5\n    |\n LL |     #[windows_subsystem = \"windows\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:623:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:627:5\n    |\n LL |     #[windows_subsystem = \"windows\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:626:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:630:5\n    |\n LL |     #[windows_subsystem = \"windows\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:629:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:633:5\n    |\n LL |     #[windows_subsystem = \"windows\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:638:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:642:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:641:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:645:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:644:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:648:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:650:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:654:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:657:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:661:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:666:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:670:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:669:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:673:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:682:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:686:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:702:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:17\n    |\n LL |     mod inner { #![no_builtins] }\n    |                 ^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n    |\n LL |     #[no_builtins] fn f() { }\n    |     ^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n    |\n LL |     #[no_builtins] struct S;\n    |     ^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n    |\n LL |     #[no_builtins] type T = S;\n    |     ^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:731:5\n    |\n LL |     #[no_builtins] impl S { }\n    |     ^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:734:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:738:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:746:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1169,5 +1177,5 @@ LL | #![feature(rust1)]\n    |\n    = note: `#[warn(stable_features)]` on by default\n \n-warning: 172 warnings emitted\n+warning: 173 warnings emitted\n "}, {"sha": "1a210887154f45ac177b3691c8717ebbe2ea9426", "filename": "src/test/ui/issues/issue-43925.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43925.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,4 @@\n-#[link(name = \"foo\", cfg(\"rlib\"))] //~ ERROR invalid argument for `cfg(..)`\n+#[link(name = \"foo\", cfg(\"rlib\"))] //~ ERROR link cfg must have a single predicate argument\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "b0ad25063de83d3629da45991e44548ee51361ad", "filename": "src/test/ui/issues/issue-43925.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43925.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,8 +1,8 @@\n-error: invalid argument for `cfg(..)`\n-  --> $DIR/issue-43925.rs:1:26\n+error: link cfg must have a single predicate argument\n+  --> $DIR/issue-43925.rs:1:22\n    |\n LL | #[link(name = \"foo\", cfg(\"rlib\"))]\n-   |                          ^^^^^^\n+   |                      ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6d3003552dc0dfc244ae14c981910a2a512bc212", "filename": "src/test/ui/issues/issue-43926.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fissues%2Fissue-43926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fissues%2Fissue-43926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43926.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,4 @@\n-#[link(name = \"foo\", cfg())] //~ ERROR `cfg()` must have an argument\n+#[link(name = \"foo\", cfg())] //~ ERROR link cfg must have a single predicate argument\n extern \"C\" {}\n \n fn main() {}"}, {"sha": "f67f91a6bd3d80645f7bf596f0db9b793a49673d", "filename": "src/test/ui/issues/issue-43926.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fissues%2Fissue-43926.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fissues%2Fissue-43926.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43926.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,4 @@\n-error: `cfg()` must have an argument\n+error: link cfg must have a single predicate argument\n   --> $DIR/issue-43926.rs:1:22\n    |\n LL | #[link(name = \"foo\", cfg())]"}, {"sha": "43fe8c11d7c48bd5e500b7dfafaa158fcf952523", "filename": "src/test/ui/linkage-attr/bad-extern-link-attrs.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70b3681bf621bc0de91ffab711b2350068b4c466/src%2Ftest%2Fui%2Flinkage-attr%2Fbad-extern-link-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b3681bf621bc0de91ffab711b2350068b4c466/src%2Ftest%2Fui%2Flinkage-attr%2Fbad-extern-link-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fbad-extern-link-attrs.rs?ref=70b3681bf621bc0de91ffab711b2350068b4c466", "patch": "@@ -1,7 +0,0 @@\n-#[link()] //~ ERROR: specified without `name =\n-#[link(name = \"\")] //~ ERROR: with empty name\n-#[link(name = \"foo\")]\n-#[link(name = \"foo\", kind = \"bar\")] //~ ERROR: unknown kind\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "525c605a9cf6722026301272898cfa509a3d37a1", "filename": "src/test/ui/linkage-attr/bad-extern-link-attrs.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70b3681bf621bc0de91ffab711b2350068b4c466/src%2Ftest%2Fui%2Flinkage-attr%2Fbad-extern-link-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b3681bf621bc0de91ffab711b2350068b4c466/src%2Ftest%2Fui%2Flinkage-attr%2Fbad-extern-link-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fbad-extern-link-attrs.stderr?ref=70b3681bf621bc0de91ffab711b2350068b4c466", "patch": "@@ -1,24 +0,0 @@\n-error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n-  --> $DIR/bad-extern-link-attrs.rs:1:1\n-   |\n-LL | #[link()]\n-   | ^^^^^^^^^ missing `name` argument\n-\n-error[E0454]: `#[link(name = \"\")]` given with empty name\n-  --> $DIR/bad-extern-link-attrs.rs:2:1\n-   |\n-LL | #[link(name = \"\")]\n-   | ^^^^^^^^^^^^^^^^^^ empty name given\n-\n-error[E0458]: unknown kind: `bar`\n-  --> $DIR/bad-extern-link-attrs.rs:4:22\n-   |\n-LL | #[link(name = \"foo\", kind = \"bar\")]\n-   | ---------------------^^^^^^^^^^^^--\n-   |                      |\n-   |                      unknown kind\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0454, E0458, E0459.\n-For more information about an error, try `rustc --explain E0454`."}, {"sha": "b9a835fb5e92148ea5fed701b09cfa3196a712bd", "filename": "src/test/ui/linkage-attr/link-attr-validation-early.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -0,0 +1,8 @@\n+// Top-level ill-formed\n+#[link] //~ ERROR attribute must be of the form\n+        //~| WARN this was previously accepted\n+#[link = \"foo\"] //~ ERROR attribute must be of the form\n+                //~| WARN this was previously accepted\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "d36601ed0b49b44981941cbe896b7daa64ace4ad", "filename": "src/test/ui/linkage-attr/link-attr-validation-early.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -0,0 +1,21 @@\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\")]`\n+  --> $DIR/link-attr-validation-early.rs:2:1\n+   |\n+LL | #[link]\n+   | ^^^^^^^\n+   |\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\")]`\n+  --> $DIR/link-attr-validation-early.rs:4:1\n+   |\n+LL | #[link = \"foo\"]\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b454fbd0ed117f88b223d13fc0f261d3fd326930", "filename": "src/test/ui/linkage-attr/link-attr-validation-late.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -0,0 +1,40 @@\n+#![feature(native_link_modifiers_verbatim)]\n+#![feature(link_cfg)]\n+\n+// Top-level ill-formed\n+#[link(name = \"...\", \"literal\")] //~ ERROR unexpected `#[link]` argument\n+#[link(name = \"...\", unknown)] //~ ERROR unexpected `#[link]` argument\n+extern \"C\" {}\n+\n+// Duplicate arguments\n+#[link(name = \"foo\", name = \"bar\")] //~ ERROR multiple `name` arguments\n+#[link(name = \"...\", kind = \"dylib\", kind = \"bar\")] //~ ERROR multiple `kind` arguments\n+#[link(name = \"...\", modifiers = \"+verbatim\", modifiers = \"bar\")] //~ ERROR multiple `modifiers` arguments\n+#[link(name = \"...\", cfg(FALSE), cfg(FALSE))] //~ ERROR multiple `cfg` arguments\n+#[link(wasm_import_module = \"foo\", wasm_import_module = \"bar\")] //~ ERROR multiple `wasm_import_module` arguments\n+extern \"C\" {}\n+\n+// Ill-formed arguments\n+#[link(name)] //~ ERROR link name must be of the form `name = \"string\"`\n+              //~| ERROR `#[link]` attribute requires a `name = \"string\"` argument\n+#[link(name())] //~ ERROR link name must be of the form `name = \"string\"`\n+              //~| ERROR `#[link]` attribute requires a `name = \"string\"` argument\n+#[link(name = \"...\", kind)] //~ ERROR link kind must be of the form `kind = \"string\"`\n+#[link(name = \"...\", kind())] //~ ERROR link kind must be of the form `kind = \"string\"`\n+#[link(name = \"...\", modifiers)] //~ ERROR link modifiers must be of the form `modifiers = \"string\"`\n+#[link(name = \"...\", modifiers())] //~ ERROR link modifiers must be of the form `modifiers = \"string\"`\n+#[link(name = \"...\", cfg)] //~ ERROR link cfg must be of the form `cfg(/* predicate */)`\n+#[link(name = \"...\", cfg = \"literal\")] //~ ERROR link cfg must be of the form `cfg(/* predicate */)`\n+#[link(name = \"...\", cfg(\"literal\"))] //~ ERROR link cfg must have a single predicate argument\n+#[link(name = \"...\", wasm_import_module)] //~ ERROR wasm import module must be of the form `wasm_import_module = \"string\"`\n+#[link(name = \"...\", wasm_import_module())] //~ ERROR wasm import module must be of the form `wasm_import_module = \"string\"`\n+extern \"C\" {}\n+\n+// Basic modifier validation\n+#[link(name = \"...\", modifiers = \"\")] //~ ERROR invalid linking modifier syntax, expected '+' or '-' prefix\n+#[link(name = \"...\", modifiers = \"no-plus-minus\")] //~ ERROR invalid linking modifier syntax, expected '+' or '-' prefix\n+#[link(name = \"...\", modifiers = \"+unknown\")] //~ ERROR unknown linking modifier `unknown`\n+#[link(name = \"...\", modifiers = \"+verbatim,+verbatim\")] //~ ERROR multiple `verbatim` modifiers\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "bb08f9a4c029fd00b8133ff0416a0d541b03aef9", "filename": "src/test/ui/linkage-attr/link-attr-validation-late.stderr", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -0,0 +1,147 @@\n+error: unexpected `#[link]` argument, expected one of: name, kind, modifiers, cfg, wasm_import_module\n+  --> $DIR/link-attr-validation-late.rs:5:22\n+   |\n+LL | #[link(name = \"...\", \"literal\")]\n+   |                      ^^^^^^^^^\n+\n+error: unexpected `#[link]` argument, expected one of: name, kind, modifiers, cfg, wasm_import_module\n+  --> $DIR/link-attr-validation-late.rs:6:22\n+   |\n+LL | #[link(name = \"...\", unknown)]\n+   |                      ^^^^^^^\n+\n+error: multiple `name` arguments in a single `#[link]` attribute\n+  --> $DIR/link-attr-validation-late.rs:10:22\n+   |\n+LL | #[link(name = \"foo\", name = \"bar\")]\n+   |                      ^^^^^^^^^^^^\n+\n+error: multiple `kind` arguments in a single `#[link]` attribute\n+  --> $DIR/link-attr-validation-late.rs:11:38\n+   |\n+LL | #[link(name = \"...\", kind = \"dylib\", kind = \"bar\")]\n+   |                                      ^^^^^^^^^^^^\n+\n+error: multiple `modifiers` arguments in a single `#[link]` attribute\n+  --> $DIR/link-attr-validation-late.rs:12:47\n+   |\n+LL | #[link(name = \"...\", modifiers = \"+verbatim\", modifiers = \"bar\")]\n+   |                                               ^^^^^^^^^^^^^^^^^\n+\n+error: multiple `cfg` arguments in a single `#[link]` attribute\n+  --> $DIR/link-attr-validation-late.rs:13:34\n+   |\n+LL | #[link(name = \"...\", cfg(FALSE), cfg(FALSE))]\n+   |                                  ^^^^^^^^^^\n+\n+error: multiple `wasm_import_module` arguments in a single `#[link]` attribute\n+  --> $DIR/link-attr-validation-late.rs:14:36\n+   |\n+LL | #[link(wasm_import_module = \"foo\", wasm_import_module = \"bar\")]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: link name must be of the form `name = \"string\"`\n+  --> $DIR/link-attr-validation-late.rs:18:8\n+   |\n+LL | #[link(name)]\n+   |        ^^^^\n+\n+error[E0459]: `#[link]` attribute requires a `name = \"string\"` argument\n+  --> $DIR/link-attr-validation-late.rs:18:1\n+   |\n+LL | #[link(name)]\n+   | ^^^^^^^^^^^^^ missing `name` argument\n+\n+error: link name must be of the form `name = \"string\"`\n+  --> $DIR/link-attr-validation-late.rs:20:8\n+   |\n+LL | #[link(name())]\n+   |        ^^^^^^\n+\n+error[E0459]: `#[link]` attribute requires a `name = \"string\"` argument\n+  --> $DIR/link-attr-validation-late.rs:20:1\n+   |\n+LL | #[link(name())]\n+   | ^^^^^^^^^^^^^^^ missing `name` argument\n+\n+error: link kind must be of the form `kind = \"string\"`\n+  --> $DIR/link-attr-validation-late.rs:22:22\n+   |\n+LL | #[link(name = \"...\", kind)]\n+   |                      ^^^^\n+\n+error: link kind must be of the form `kind = \"string\"`\n+  --> $DIR/link-attr-validation-late.rs:23:22\n+   |\n+LL | #[link(name = \"...\", kind())]\n+   |                      ^^^^^^\n+\n+error: link modifiers must be of the form `modifiers = \"string\"`\n+  --> $DIR/link-attr-validation-late.rs:24:22\n+   |\n+LL | #[link(name = \"...\", modifiers)]\n+   |                      ^^^^^^^^^\n+\n+error: link modifiers must be of the form `modifiers = \"string\"`\n+  --> $DIR/link-attr-validation-late.rs:25:22\n+   |\n+LL | #[link(name = \"...\", modifiers())]\n+   |                      ^^^^^^^^^^^\n+\n+error: link cfg must be of the form `cfg(/* predicate */)`\n+  --> $DIR/link-attr-validation-late.rs:26:22\n+   |\n+LL | #[link(name = \"...\", cfg)]\n+   |                      ^^^\n+\n+error: link cfg must be of the form `cfg(/* predicate */)`\n+  --> $DIR/link-attr-validation-late.rs:27:22\n+   |\n+LL | #[link(name = \"...\", cfg = \"literal\")]\n+   |                      ^^^^^^^^^^^^^^^\n+\n+error: link cfg must have a single predicate argument\n+  --> $DIR/link-attr-validation-late.rs:28:22\n+   |\n+LL | #[link(name = \"...\", cfg(\"literal\"))]\n+   |                      ^^^^^^^^^^^^^^\n+\n+error: wasm import module must be of the form `wasm_import_module = \"string\"`\n+  --> $DIR/link-attr-validation-late.rs:29:22\n+   |\n+LL | #[link(name = \"...\", wasm_import_module)]\n+   |                      ^^^^^^^^^^^^^^^^^^\n+\n+error: wasm import module must be of the form `wasm_import_module = \"string\"`\n+  --> $DIR/link-attr-validation-late.rs:30:22\n+   |\n+LL | #[link(name = \"...\", wasm_import_module())]\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+\n+error: invalid linking modifier syntax, expected '+' or '-' prefix before one of: bundle, verbatim, whole-archive, as-needed\n+  --> $DIR/link-attr-validation-late.rs:34:34\n+   |\n+LL | #[link(name = \"...\", modifiers = \"\")]\n+   |                                  ^^\n+\n+error: invalid linking modifier syntax, expected '+' or '-' prefix before one of: bundle, verbatim, whole-archive, as-needed\n+  --> $DIR/link-attr-validation-late.rs:35:34\n+   |\n+LL | #[link(name = \"...\", modifiers = \"no-plus-minus\")]\n+   |                                  ^^^^^^^^^^^^^^^\n+\n+error: unknown linking modifier `unknown`, expected one of: bundle, verbatim, whole-archive, as-needed\n+  --> $DIR/link-attr-validation-late.rs:36:34\n+   |\n+LL | #[link(name = \"...\", modifiers = \"+unknown\")]\n+   |                                  ^^^^^^^^^^\n+\n+error: multiple `verbatim` modifiers in a single `modifiers` argument\n+  --> $DIR/link-attr-validation-late.rs:37:34\n+   |\n+LL | #[link(name = \"...\", modifiers = \"+verbatim,+verbatim\")]\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 24 previous errors\n+\n+For more information about this error, try `rustc --explain E0459`."}, {"sha": "bc9b6be029429bcebd1b88e9b235311df101c52f", "filename": "src/test/ui/manual/manual-link-bad-form.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-form.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-form.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-form.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-l static=\n-// error-pattern: empty library name given via `-l`\n+// error-pattern: library name must not be empty\n \n fn main() {\n }"}, {"sha": "7fd7a1066b49bf82adbe74e23c8971f3334a35b1", "filename": "src/test/ui/manual/manual-link-bad-form.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-form.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-form.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-form.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,2 @@\n-error: empty library name given via `-l`\n-\n-error: aborting due to previous error\n+error: library name must not be empty\n "}, {"sha": "d1609338db666755db148ed46d448ff9630f2adb", "filename": "src/test/ui/manual/manual-link-bad-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-kind.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-l bar=foo\n-// error-pattern: unknown library kind `bar`, expected one of dylib, framework, or static\n+// error-pattern: unknown library kind `bar`, expected one of: static, dylib, framework\n \n fn main() {\n }"}, {"sha": "86146956699f3f7d0cf8b8de1cffbf075d235fe9", "filename": "src/test/ui/manual/manual-link-bad-kind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-bad-kind.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,2 +1,2 @@\n-error: unknown library kind `bar`, expected one of dylib, framework, or static\n+error: unknown library kind `bar`, expected one of: static, dylib, framework\n "}, {"sha": "57c5966e96048e6ded09cedaf7a952c504994ebb", "filename": "src/test/ui/manual/manual-link-framework.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-framework.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-framework.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-framework.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,7 +1,7 @@\n // ignore-macos\n // ignore-ios\n // compile-flags:-l framework=foo\n-// error-pattern: native frameworks are only available on macOS targets\n+// error-pattern: library kind `framework` is only supported on Apple targets\n \n fn main() {\n }"}, {"sha": "de045d56c9ccd79c3c5ef7372fb64bb1c6192150", "filename": "src/test/ui/manual/manual-link-framework.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-framework.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-framework.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-framework.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,4 +1,4 @@\n-error: native frameworks are only available on macOS targets\n+error: library kind `framework` is only supported on Apple targets\n \n error: aborting due to previous error\n "}, {"sha": "7a40186d504c688a6940449ce9c15cd6c5bea0c5", "filename": "src/test/ui/manual/manual-link-unsupported-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:-l raw-dylib=foo\n-// error-pattern: unknown library kind `raw-dylib`, expected one of dylib, framework, or static\n+// error-pattern: unknown library kind `raw-dylib`, expected one of: static, dylib, framework\n \n fn main() {\n }"}, {"sha": "4965c0af5f241579c384bda9a6e733b81bf8df60", "filename": "src/test/ui/manual/manual-link-unsupported-kind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,2 +1,2 @@\n-error: unknown library kind `raw-dylib`, expected one of dylib, framework, or static\n+error: unknown library kind `raw-dylib`, expected one of: static, dylib, framework\n "}, {"sha": "086d8cff95770277b0497e47eb849bd3daeac8b1", "filename": "src/test/ui/native-library-link-flags/empty-kind-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,6 +1,6 @@\n // Unspecified kind should fail with an error\n \n // compile-flags: -l =mylib\n-// error-pattern: unknown library kind ``, expected one of dylib, framework, or static\n+// error-pattern: unknown library kind ``, expected one of: static, dylib, framework\n \n fn main() {}"}, {"sha": "37846c0b06f69bb7d8a7a6b4571b5b4c001edca5", "filename": "src/test/ui/native-library-link-flags/empty-kind-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-1.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,2 +1,2 @@\n-error: unknown library kind ``, expected one of dylib, framework, or static\n+error: unknown library kind ``, expected one of: static, dylib, framework\n "}, {"sha": "45ec8ec85e3017a66345a60cede3a0d3a63dce9b", "filename": "src/test/ui/native-library-link-flags/empty-kind-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,6 +1,6 @@\n // Unspecified kind should fail with an error\n \n // compile-flags: -l :+bundle=mylib\n-// error-pattern: unknown library kind ``, expected one of dylib, framework, or static\n+// error-pattern: unknown library kind ``, expected one of: static, dylib, framework\n \n fn main() {}"}, {"sha": "37846c0b06f69bb7d8a7a6b4571b5b4c001edca5", "filename": "src/test/ui/native-library-link-flags/empty-kind-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fempty-kind-2.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,2 +1,2 @@\n-error: unknown library kind ``, expected one of dylib, framework, or static\n+error: unknown library kind ``, expected one of: static, dylib, framework\n "}, {"sha": "aa5b59c5b6f9e07c7330a755d903e6b50ba17eea", "filename": "src/test/ui/native-library-link-flags/modifiers-override-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override-2.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,2 +1,2 @@\n-error: duplicating linking modifier is currently unstable and only accepted on the nightly compiler\n+error: multiple `whole-archive` modifiers in a single `-l` option\n "}, {"sha": "3912ac9f13d6c64265d68d82aa8e3c27ec3f01c4", "filename": "src/test/ui/native-library-link-flags/modifiers-override.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -3,12 +3,13 @@\n #![feature(native_link_modifiers_bundle)]\n \n #[link(name = \"foo\")]\n-#[link( //~ ERROR multiple `modifiers` arguments in a single `#[link]` attribute\n+#[link(\n     name = \"bar\",\n     kind = \"static\",\n     modifiers = \"+whole-archive,-whole-archive\",\n-    //~^ ERROR same modifier is used multiple times in a single `modifiers` argument\n+    //~^ ERROR multiple `whole-archive` modifiers in a single `modifiers` argument\n     modifiers = \"+bundle\"\n+    //~^ ERROR multiple `modifiers` arguments in a single `#[link]` attribute\n )]\n extern \"C\" {}\n //~^ ERROR overriding linking modifiers from command line is not supported"}, {"sha": "55362910e71c6df009fbe2aa83781d06a3252da4", "filename": "src/test/ui/native-library-link-flags/modifiers-override.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnative-library-link-flags%2Fmodifiers-override.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,29 +1,23 @@\n-error: same modifier is used multiple times in a single `modifiers` argument\n-  --> $DIR/modifiers-override.rs:9:5\n+error: multiple `modifiers` arguments in a single `#[link]` attribute\n+  --> $DIR/modifiers-override.rs:11:5\n    |\n-LL |     modifiers = \"+whole-archive,-whole-archive\",\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     modifiers = \"+bundle\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: multiple `modifiers` arguments in a single `#[link]` attribute\n-  --> $DIR/modifiers-override.rs:6:1\n+error: multiple `whole-archive` modifiers in a single `modifiers` argument\n+  --> $DIR/modifiers-override.rs:9:17\n    |\n-LL | / #[link(\n-LL | |     name = \"bar\",\n-LL | |     kind = \"static\",\n-LL | |     modifiers = \"+whole-archive,-whole-archive\",\n-LL | |\n-LL | |     modifiers = \"+bundle\"\n-LL | | )]\n-   | |__^\n+LL |     modifiers = \"+whole-archive,-whole-archive\",\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: overriding linking modifiers from command line is not supported\n-  --> $DIR/modifiers-override.rs:13:1\n+  --> $DIR/modifiers-override.rs:14:1\n    |\n LL | extern \"C\" {}\n    | ^^^^^^^^^^^^^\n \n error: overriding linking modifiers from command line is not supported\n-  --> $DIR/modifiers-override.rs:13:1\n+  --> $DIR/modifiers-override.rs:14:1\n    |\n LL | extern \"C\" {}\n    | ^^^^^^^^^^^^^"}, {"sha": "958183ec0d73eea33e81cca48308c663a1535937", "filename": "src/test/ui/osx-frameworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fosx-frameworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fosx-frameworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fosx-frameworks.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -2,6 +2,6 @@\n \n #[link(name = \"foo\", kind = \"framework\")]\n extern \"C\" {}\n-//~^^ ERROR: native frameworks are only available on macOS\n+//~^^ ERROR: link kind `framework` is only supported on Apple targets\n \n fn main() {}"}, {"sha": "e4a5c98dc5cd512b8488ea65416c6dbf757666ab", "filename": "src/test/ui/osx-frameworks.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fosx-frameworks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fosx-frameworks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fosx-frameworks.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,8 +1,8 @@\n-error[E0455]: native frameworks are only available on macOS targets\n-  --> $DIR/osx-frameworks.rs:3:1\n+error[E0455]: link kind `framework` is only supported on Apple targets\n+  --> $DIR/osx-frameworks.rs:3:29\n    |\n LL | #[link(name = \"foo\", kind = \"framework\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "30f4db7180eced7a44d2af43a6c67693dffe3ea1", "filename": "src/test/ui/rfc-1717-dllimport/rename-modifiers.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-modifiers.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -l dylib=foo:bar\n+// error-pattern: overriding linking modifiers from command line is not supported\n+\n+#![feature(native_link_modifiers_as_needed)]\n+\n+#![crate_type = \"lib\"]\n+\n+#[link(name = \"foo\", kind = \"dylib\", modifiers = \"-as-needed\")]\n+extern \"C\" {}"}, {"sha": "bee639bf26cb5838205cf9a98ae609278d9ff671", "filename": "src/test/ui/rfc-1717-dllimport/rename-modifiers.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-modifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-modifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1717-dllimport%2Frename-modifiers.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -0,0 +1,8 @@\n+error: overriding linking modifiers from command line is not supported\n+  --> $DIR/rename-modifiers.rs:9:1\n+   |\n+LL | extern \"C\" {}\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5856b18aa160c6c7bf99634d0daba4d08dbd4043", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-windows-only.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -3,5 +3,5 @@\n #![feature(raw_dylib)]\n //~^ WARNING: the feature `raw_dylib` is incomplete\n #[link(name = \"foo\", kind = \"raw-dylib\")]\n-//~^ ERROR: `#[link(...)]` with `kind = \"raw-dylib\"` only supported on Windows\n+//~^ ERROR: link kind `raw-dylib` is only supported on Windows targets\n extern \"C\" {}"}, {"sha": "600aac81a35932d0a6b4abd5db6dff38c47f6f87", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-windows-only.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -7,11 +7,12 @@ LL | #![feature(raw_dylib)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n \n-error: `#[link(...)]` with `kind = \"raw-dylib\"` only supported on Windows\n-  --> $DIR/raw-dylib-windows-only.rs:5:1\n+error[E0455]: link kind `raw-dylib` is only supported on Windows targets\n+  --> $DIR/raw-dylib-windows-only.rs:5:29\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0455`."}, {"sha": "bff08847d37dd3e8355bb29d3e9ca40898458492", "filename": "src/test/ui/wasm/wasm-import-module.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.rs?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,3 +1,5 @@\n+#![feature(link_cfg)]\n+\n #[link(name = \"...\", wasm_import_module)] //~ ERROR: must be of the form\n extern \"C\" {}\n \n@@ -7,4 +9,13 @@ extern \"C\" {}\n #[link(name = \"...\", wasm_import_module())] //~ ERROR: must be of the form\n extern \"C\" {}\n \n+#[link(wasm_import_module = \"foo\", name = \"bar\")] //~ ERROR: `wasm_import_module` is incompatible with other arguments\n+extern \"C\" {}\n+\n+#[link(wasm_import_module = \"foo\", kind = \"dylib\")] //~ ERROR: `wasm_import_module` is incompatible with other arguments\n+extern \"C\" {}\n+\n+#[link(wasm_import_module = \"foo\", cfg(FALSE))] //~ ERROR: `wasm_import_module` is incompatible with other arguments\n+extern \"C\" {}\n+\n fn main() {}"}, {"sha": "e792c33e91a9d23893d033b50a298d1f0501e4b7", "filename": "src/test/ui/wasm/wasm-import-module.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm%2Fwasm-import-module.stderr?ref=4fa24bcb54cd11ec9c5e95d6d0ef366e512d27d6", "patch": "@@ -1,20 +1,38 @@\n-error: must be of the form `#[link(wasm_import_module = \"...\")]`\n-  --> $DIR/wasm-import-module.rs:1:22\n+error: wasm import module must be of the form `wasm_import_module = \"string\"`\n+  --> $DIR/wasm-import-module.rs:3:22\n    |\n LL | #[link(name = \"...\", wasm_import_module)]\n    |                      ^^^^^^^^^^^^^^^^^^\n \n-error: must be of the form `#[link(wasm_import_module = \"...\")]`\n-  --> $DIR/wasm-import-module.rs:4:22\n+error: wasm import module must be of the form `wasm_import_module = \"string\"`\n+  --> $DIR/wasm-import-module.rs:6:22\n    |\n LL | #[link(name = \"...\", wasm_import_module(x))]\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n \n-error: must be of the form `#[link(wasm_import_module = \"...\")]`\n-  --> $DIR/wasm-import-module.rs:7:22\n+error: wasm import module must be of the form `wasm_import_module = \"string\"`\n+  --> $DIR/wasm-import-module.rs:9:22\n    |\n LL | #[link(name = \"...\", wasm_import_module())]\n    |                      ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: `wasm_import_module` is incompatible with other arguments in `#[link]` attributes\n+  --> $DIR/wasm-import-module.rs:12:8\n+   |\n+LL | #[link(wasm_import_module = \"foo\", name = \"bar\")]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `wasm_import_module` is incompatible with other arguments in `#[link]` attributes\n+  --> $DIR/wasm-import-module.rs:15:8\n+   |\n+LL | #[link(wasm_import_module = \"foo\", kind = \"dylib\")]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `wasm_import_module` is incompatible with other arguments in `#[link]` attributes\n+  --> $DIR/wasm-import-module.rs:18:8\n+   |\n+LL | #[link(wasm_import_module = \"foo\", cfg(FALSE))]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}]}