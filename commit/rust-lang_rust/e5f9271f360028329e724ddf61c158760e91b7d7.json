{"sha": "e5f9271f360028329e724ddf61c158760e91b7d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZjkyNzFmMzYwMDI4MzI5ZTcyNGRkZjYxYzE1ODc2MGU5MWI3ZDc=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-04-03T02:35:11Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-04-07T18:52:00Z"}, "message": "Stablize `non_ascii_idents` feature.", "tree": {"sha": "fecd1285409b5dbd46e6bc807ac2302375b03e1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fecd1285409b5dbd46e6bc807ac2302375b03e1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5f9271f360028329e724ddf61c158760e91b7d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f9271f360028329e724ddf61c158760e91b7d7", "html_url": "https://github.com/rust-lang/rust/commit/e5f9271f360028329e724ddf61c158760e91b7d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5f9271f360028329e724ddf61c158760e91b7d7/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9cdcccfa8321363999a43ee30a18b3aadbc20de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9cdcccfa8321363999a43ee30a18b3aadbc20de", "html_url": "https://github.com/rust-lang/rust/commit/e9cdcccfa8321363999a43ee30a18b3aadbc20de"}], "stats": {"total": 709, "additions": 163, "deletions": 546}, "files": [{"sha": "ff88789bd16c1ae06da95c90eb5164694b3301d4", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -8,7 +8,7 @@ use rustc_feature::{Features, GateIssue};\n use rustc_session::parse::{feature_err, feature_err_issue};\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n use tracing::debug;\n@@ -320,17 +320,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn visit_name(&mut self, sp: Span, name: Symbol) {\n-        if !name.as_str().is_ascii() {\n-            gate_feature_post!(\n-                &self,\n-                non_ascii_idents,\n-                self.sess.parse_sess.source_map().guess_head_span(sp),\n-                \"non-ascii idents are not fully supported\"\n-            );\n-        }\n-    }\n-\n     fn visit_item(&mut self, i: &'a ast::Item) {\n         match i.kind {\n             ast::ItemKind::ForeignMod(ref foreign_module) => {"}, {"sha": "3178bf21919e855e029d920c1c87056bc7b7d179", "filename": "compiler/rustc_error_codes/src/error_codes/E0554.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0554.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0554.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0554.md?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -4,8 +4,8 @@ beta compilers will not comply.\n Erroneous code example:\n \n ```ignore (depends on release channel)\n-#![feature(non_ascii_idents)] // error: `#![feature]` may not be used on the\n-                              //        stable release channel\n+#![feature(lang_items)] // error: `#![feature]` may not be used on the\n+                        //        stable release channel\n ```\n \n If you need the feature, make sure to use a nightly release of the compiler"}, {"sha": "acddb69aaba56cd8d62571c1c29881afa52b43e0", "filename": "compiler/rustc_error_codes/src/error_codes/E0754.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0754.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0754.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0754.md?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -3,7 +3,6 @@ A non-ASCII identifier was used in an invalid context.\n Erroneous code examples:\n \n ```compile_fail,E0754\n-# #![feature(non_ascii_idents)]\n \n mod \u0159\u0173\u015b\u0165; // error!\n \n@@ -17,8 +16,6 @@ Non-ASCII can be used as module names if it is inlined or if a `#[path]`\n attribute is specified. For example:\n \n ```\n-# #![feature(non_ascii_idents)]\n-\n mod \u0159\u0173\u015b\u0165 { // ok!\n     const IS_GREAT: bool = true;\n }"}, {"sha": "e8642a52749c46201ee0e1c7116fd919c33e32e1", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -279,6 +279,8 @@ declare_features! (\n     (accepted, unsafe_block_in_unsafe_fn, \"1.52.0\", Some(71668), None),\n     /// Allows the use of or-patterns (e.g., `0 | 1`).\n     (accepted, or_patterns, \"1.53.0\", Some(54883), None),\n+    /// Allows defining identifiers beyond ASCII.\n+    (accepted, non_ascii_idents, \"1.53.0\", Some(55467), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "193a71f83045009a6a5da209455e842a0efdeb65", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -258,9 +258,6 @@ declare_features! (\n     // feature-group-start: actual feature gates\n     // -------------------------------------------------------------------------\n \n-    /// Allows defining identifiers beyond ASCII.\n-    (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n-\n     /// Allows using `#[plugin_registrar]` on functions.\n     (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n "}, {"sha": "301e607fc58ada7bb586eafb47bdb994895224bc", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -10,7 +10,6 @@ declare_lint! {\n     ///\n     /// ```rust,compile_fail\n     /// # #![allow(unused)]\n-    /// #![feature(non_ascii_idents)]\n     /// #![deny(non_ascii_idents)]\n     /// fn main() {\n     ///     let f\u00f6\u00f6 = 1;\n@@ -21,14 +20,11 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// Currently on stable Rust, identifiers must contain ASCII characters.\n-    /// The [`non_ascii_idents`] nightly-only feature allows identifiers to\n-    /// contain non-ASCII characters. This lint allows projects that wish to\n-    /// retain the limit of only using ASCII characters to switch this lint to\n-    /// \"forbid\" (for example to ease collaboration or for security reasons).\n+    /// This lint allows projects that wish to retain the limit of only using\n+    /// ASCII characters to switch this lint to \"forbid\" (for example to ease\n+    /// collaboration or for security reasons).\n     /// See [RFC 2457] for more details.\n     ///\n-    /// [`non_ascii_idents`]: https://doc.rust-lang.org/nightly/unstable-book/language-features/non-ascii-idents.html\n     /// [RFC 2457]: https://github.com/rust-lang/rfcs/blob/master/text/2457-non-ascii-idents.md\n     pub NON_ASCII_IDENTS,\n     Allow,\n@@ -44,18 +40,15 @@ declare_lint! {\n     ///\n     /// ```rust\n     /// # #![allow(unused)]\n-    /// #![feature(non_ascii_idents)]\n     /// const \u00b5: f64 = 0.000001;\n     /// ```\n     ///\n     /// {{produces}}\n     ///\n     /// ### Explanation\n     ///\n-    /// With the [`non_ascii_idents`] nightly-only feature enabled,\n-    /// identifiers are allowed to use non-ASCII characters. This lint warns\n-    /// about using characters which are not commonly used, and may cause\n-    /// visual confusion.\n+    /// This lint warns about using characters which are not commonly used, and may\n+    /// cause visual confusion.\n     ///\n     /// This lint is triggered by identifiers that contain a codepoint that is\n     /// not part of the set of \"Allowed\" codepoints as described by [Unicode\u00ae\n@@ -66,7 +59,6 @@ declare_lint! {\n     /// that if you \"forbid\" this lint that existing code may fail in the\n     /// future.\n     ///\n-    /// [`non_ascii_idents`]: https://doc.rust-lang.org/nightly/unstable-book/language-features/non-ascii-idents.html\n     /// [TR39Allowed]: https://www.unicode.org/reports/tr39/#General_Security_Profile\n     pub UNCOMMON_CODEPOINTS,\n     Warn,\n@@ -81,8 +73,6 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(non_ascii_idents)]\n-    ///\n     /// // Latin Capital Letter E With Caron\n     /// pub const \u011a: i32 = 1;\n     /// // Latin Capital Letter E With Breve\n@@ -93,10 +83,8 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// With the [`non_ascii_idents`] nightly-only feature enabled,\n-    /// identifiers are allowed to use non-ASCII characters. This lint warns\n-    /// when different identifiers may appear visually similar, which can\n-    /// cause confusion.\n+    /// This lint warns when different identifiers may appear visually similar,\n+    /// which can cause confusion.\n     ///\n     /// The confusable detection algorithm is based on [Unicode\u00ae Technical\n     /// Standard #39 Unicode Security Mechanisms Section 4 Confusable\n@@ -110,7 +98,6 @@ declare_lint! {\n     /// Beware that if you \"forbid\" this lint that existing code may fail in\n     /// the future.\n     ///\n-    /// [`non_ascii_idents`]: https://doc.rust-lang.org/nightly/unstable-book/language-features/non-ascii-idents.html\n     /// [TR39Confusable]: https://www.unicode.org/reports/tr39/#Confusable_Detection\n     pub CONFUSABLE_IDENTS,\n     Warn,\n@@ -127,8 +114,6 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// #![feature(non_ascii_idents)]\n-    ///\n     /// // The Japanese katakana character \u30a8 can be confused with the Han character \u5de5.\n     /// const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n     /// ```\n@@ -137,10 +122,8 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// With the [`non_ascii_idents`] nightly-only feature enabled,\n-    /// identifiers are allowed to use non-ASCII characters. This lint warns\n-    /// when characters between different scripts may appear visually similar,\n-    /// which can cause confusion.\n+    /// This lint warns when characters between different scripts may appear\n+    /// visually similar, which can cause confusion.\n     ///\n     /// If the crate contains other identifiers in the same script that have\n     /// non-confusable characters, then this lint will *not* be issued. For\n@@ -152,8 +135,6 @@ declare_lint! {\n     /// Note that the set of confusable characters may change over time.\n     /// Beware that if you \"forbid\" this lint that existing code may fail in\n     /// the future.\n-    ///\n-    /// [`non_ascii_idents`]: https://doc.rust-lang.org/nightly/unstable-book/language-features/non-ascii-idents.html\n     pub MIXED_SCRIPT_CONFUSABLES,\n     Warn,\n     \"detects Unicode scripts whose mixed script confusables codepoints are solely used\","}, {"sha": "847f25ecab132e7603d110d1aacec26c5eb3e97d", "filename": "src/doc/unstable-book/src/language-features/non-ascii-idents.md", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,48 +0,0 @@\n-# `non_ascii_idents`\n-\n-The tracking issue for this feature is: [#55467]\n-\n-[#55467]: https://github.com/rust-lang/rust/issues/55467\n-\n-------------------------\n-\n-The `non_ascii_idents` feature adds support for non-ASCII identifiers.\n-\n-## Examples\n-\n-```rust\n-#![feature(non_ascii_idents)]\n-\n-const \u03b5: f64 = 0.00001f64;\n-const \u03a0: f64 = 3.14f64;\n-```\n-\n-## Changes to the language reference\n-\n-> **<sup>Lexer:<sup>**\\\n-> IDENTIFIER :\\\n-> &nbsp;&nbsp; &nbsp;&nbsp; XID_start XID_continue<sup>\\*</sup>\\\n-> &nbsp;&nbsp; | `_` XID_continue<sup>+</sup>\n-\n-An identifier is any nonempty Unicode string of the following form:\n-\n-Either\n-\n-   * The first character has property [`XID_start`]\n-   * The remaining characters have property [`XID_continue`]\n-\n-Or\n-\n-   * The first character is `_`\n-   * The identifier is more than one character, `_` alone is not an identifier\n-   * The remaining characters have property [`XID_continue`]\n-\n-that does _not_ occur in the set of [strict keywords].\n-\n-> **Note**: [`XID_start`] and [`XID_continue`] as character properties cover the\n-> character ranges used to form the more familiar C and Java language-family\n-> identifiers.\n-\n-[`XID_start`]:  http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=\n-[`XID_continue`]: http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=\n-[strict keywords]: ../../reference/keywords.md#strict-keywords"}, {"sha": "5c68a88f2fb1b2a2ece9b009a61d5c57e9450c55", "filename": "src/test/debuginfo/multi-byte-chars.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -2,8 +2,6 @@\n \n // compile-flags:-g\n \n-#![feature(non_ascii_idents)]\n-\n // This test checks whether debuginfo generation can handle multi-byte UTF-8\n // characters at the end of a block. There's no need to do anything in the\n // debugger -- just make sure that the compiler doesn't crash."}, {"sha": "3301e7a18d11ab1e2ab597829ffa221daa05e109", "filename": "src/test/ui/codemap_tests/unicode_2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,3 @@\n-#![feature(non_ascii_idents)]\n-\n fn main() {\n     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7); //~ ERROR invalid width\n     let _ = (\"\uc544\u3042\", 1i42); //~ ERROR invalid width"}, {"sha": "a776a4a1e7e1392d4ab08e69e6946876ca7d8120", "filename": "src/test/ui/codemap_tests/unicode_2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,21 +1,21 @@\n error: invalid width `7` for integer literal\n-  --> $DIR/unicode_2.rs:4:25\n+  --> $DIR/unicode_2.rs:2:25\n    |\n LL |     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7);\n    |                     ^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error: invalid width `42` for integer literal\n-  --> $DIR/unicode_2.rs:5:20\n+  --> $DIR/unicode_2.rs:3:20\n    |\n LL |     let _ = (\"\uc544\u3042\", 1i42);\n    |                      ^^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error[E0425]: cannot find value `a\u0310\u00e9` in this scope\n-  --> $DIR/unicode_2.rs:6:13\n+  --> $DIR/unicode_2.rs:4:13\n    |\n LL |     let _ = a\u0310e\u0301;\n    |             ^^ not found in this scope"}, {"sha": "524ad3c83fcbc8dff8b7845671096b4d4bd9dd06", "filename": "src/test/ui/feature-gates/feature-gate-non_ascii_idents.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,34 +0,0 @@\n-extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n-\n-use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n-\n-mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n-    pub fn bar() {}\n-}\n-\n-fn b\u00e4r( //~ ERROR non-ascii idents\n-    b\u00e4z: isize //~ ERROR non-ascii idents\n-    ) {\n-    let _\u00f6: isize; //~ ERROR non-ascii idents\n-\n-    match (1, 2) {\n-        (_\u00e4, _) => {} //~ ERROR non-ascii idents\n-    }\n-}\n-\n-struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n-    f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n-}\n-\n-enum B\u00e4r { //~ ERROR non-ascii idents\n-    B\u00e4z { //~ ERROR non-ascii idents\n-        q\u00fcx: isize //~ ERROR non-ascii idents\n-    }\n-}\n-\n-extern \"C\" {\n-    fn q\u00fcx();  //~ ERROR non-ascii idents\n-    //~^ ERROR items in `extern` blocks\n-}\n-\n-fn main() {}"}, {"sha": "c712acee37f9453cec580a07d4a0fb4237a5b791", "filename": "src/test/ui/feature-gates/feature-gate-non_ascii_idents.stderr", "status": "removed", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,130 +0,0 @@\n-error: items in `extern` blocks cannot use non-ascii identifiers\n-  --> $DIR/feature-gate-non_ascii_idents.rs:30:8\n-   |\n-LL | extern \"C\" {\n-   | ---------- in this `extern` block\n-LL |     fn q\u00fcx();\n-   |        ^^^\n-   |\n-   = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:1:22\n-   |\n-LL | extern crate core as b\u00e4z;\n-   |                      ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:3:5\n-   |\n-LL | use f\u00f6\u00f6::bar;\n-   |     ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:5:5\n-   |\n-LL | mod f\u00f6\u00f6 {\n-   |     ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:9:4\n-   |\n-LL | fn b\u00e4r(\n-   |    ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:10:5\n-   |\n-LL |     b\u00e4z: isize\n-   |     ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:12:9\n-   |\n-LL |     let _\u00f6: isize;\n-   |         ^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:15:10\n-   |\n-LL |         (_\u00e4, _) => {}\n-   |          ^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:19:8\n-   |\n-LL | struct F\u00f6\u00f6 {\n-   |        ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:20:5\n-   |\n-LL |     f\u00f6\u00f6: isize\n-   |     ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:23:6\n-   |\n-LL | enum B\u00e4r {\n-   |      ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:24:5\n-   |\n-LL |     B\u00e4z {\n-   |     ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:25:9\n-   |\n-LL |         q\u00fcx: isize\n-   |         ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/feature-gate-non_ascii_idents.rs:30:8\n-   |\n-LL |     fn q\u00fcx();\n-   |        ^^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error: aborting due to 14 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "386de88bc3d62cb26ec5ab56e3ecec6a1bf5be8b", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.rs", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,48 +1,22 @@\n-// `#[macro_export] macro_rules` that doesn't originate from macro expansions can be placed\n-// into the root module soon enough to act as usual items and shadow globs and preludes.\n+// Crate-local macro expanded `macro_export` macros cannot be accessed with module-relative paths.\n \n-#![feature(decl_macro)]\n-\n-// `macro_export` shadows globs\n-use inner1::*;\n-\n-mod inner1 {\n-    pub macro exported() {}\n-}\n-\n-exported!();\n-\n-mod deep {\n-    fn deep() {\n-        type Deeper = [u8; {\n-            #[macro_export]\n-            macro_rules! exported {\n-                () => ( struct \u0411; ) //~ ERROR non-ascii idents are not fully supported\n-            }\n-\n-            0\n-        }];\n+macro_rules! define_exported { () => {\n+    #[macro_export]\n+    macro_rules! exported {\n+        () => ()\n     }\n-}\n+}}\n \n-// `macro_export` shadows std prelude\n-fn main() {\n-    panic!();\n-}\n+define_exported!();\n \n-mod inner3 {\n-    #[macro_export]\n-    macro_rules! panic {\n-        () => ( struct \u0413; ) //~ ERROR non-ascii idents are not fully supported\n-    }\n+mod m {\n+    use exported;\n+    //~^ ERROR macro-expanded `macro_export` macros from the current crate cannot\n+    //~| WARN this was previously accepted\n }\n \n-// `macro_export` shadows builtin macros\n-include!();\n-\n-mod inner4 {\n-    #[macro_export]\n-    macro_rules! include {\n-        () => ( struct \u0414; ) //~ ERROR non-ascii idents are not fully supported\n-    }\n+fn main() {\n+    ::exported!();\n+    //~^ ERROR macro-expanded `macro_export` macros from the current crate cannot\n+    //~| WARN this was previously accepted\n }"}, {"sha": "5cc6fa1e40a8844f5d1bba9b2bf0e90497a0ba8f", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,42 +1,43 @@\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/local-modularized-tricky-fail-2.rs:20:32\n+error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n+  --> $DIR/local-modularized-tricky-fail-2.rs:13:9\n    |\n-LL | exported!();\n-   | ------------ in this macro invocation\n-...\n-LL |                 () => ( struct \u0411; )\n-   |                                ^\n+LL |     use exported;\n+   |         ^^^^^^^^\n    |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/local-modularized-tricky-fail-2.rs:36:24\n+   = note: `#[deny(macro_expanded_macro_exports_accessed_by_absolute_paths)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #52234 <https://github.com/rust-lang/rust/issues/52234>\n+note: the macro is defined here\n+  --> $DIR/local-modularized-tricky-fail-2.rs:5:5\n    |\n-LL |     panic!();\n-   |     --------- in this macro invocation\n+LL | /     macro_rules! exported {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n ...\n-LL |         () => ( struct \u0413; )\n-   |                        ^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+LL |   define_exported!();\n+   |   ------------------- in this macro invocation\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/local-modularized-tricky-fail-2.rs:46:24\n+error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n+  --> $DIR/local-modularized-tricky-fail-2.rs:19:5\n    |\n-LL | include!();\n-   | ----------- in this macro invocation\n-...\n-LL |         () => ( struct \u0414; )\n-   |                        ^\n+LL |     ::exported!();\n+   |     ^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #52234 <https://github.com/rust-lang/rust/issues/52234>\n+note: the macro is defined here\n+  --> $DIR/local-modularized-tricky-fail-2.rs:5:5\n    |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+LL | /     macro_rules! exported {\n+LL | |         () => ()\n+LL | |     }\n+   | |_____^\n+...\n+LL |   define_exported!();\n+   |   ------------------- in this macro invocation\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "386de88bc3d62cb26ec5ab56e3ecec6a1bf5be8b", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.rs?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,22 +0,0 @@\n-// Crate-local macro expanded `macro_export` macros cannot be accessed with module-relative paths.\n-\n-macro_rules! define_exported { () => {\n-    #[macro_export]\n-    macro_rules! exported {\n-        () => ()\n-    }\n-}}\n-\n-define_exported!();\n-\n-mod m {\n-    use exported;\n-    //~^ ERROR macro-expanded `macro_export` macros from the current crate cannot\n-    //~| WARN this was previously accepted\n-}\n-\n-fn main() {\n-    ::exported!();\n-    //~^ ERROR macro-expanded `macro_export` macros from the current crate cannot\n-    //~| WARN this was previously accepted\n-}"}, {"sha": "4494a88a5cf9524b4a219ed74ba0cb27daf132b7", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,43 +0,0 @@\n-error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n-  --> $DIR/local-modularized-tricky-fail-3.rs:13:9\n-   |\n-LL |     use exported;\n-   |         ^^^^^^^^\n-   |\n-   = note: `#[deny(macro_expanded_macro_exports_accessed_by_absolute_paths)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #52234 <https://github.com/rust-lang/rust/issues/52234>\n-note: the macro is defined here\n-  --> $DIR/local-modularized-tricky-fail-3.rs:5:5\n-   |\n-LL | /     macro_rules! exported {\n-LL | |         () => ()\n-LL | |     }\n-   | |_____^\n-...\n-LL |   define_exported!();\n-   |   ------------------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n-  --> $DIR/local-modularized-tricky-fail-3.rs:19:5\n-   |\n-LL |     ::exported!();\n-   |     ^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #52234 <https://github.com/rust-lang/rust/issues/52234>\n-note: the macro is defined here\n-  --> $DIR/local-modularized-tricky-fail-3.rs:5:5\n-   |\n-LL | /     macro_rules! exported {\n-LL | |         () => ()\n-LL | |     }\n-   | |_____^\n-...\n-LL |   define_exported!();\n-   |   ------------------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "b52ddaf89549e715e3889351c3ebc2c216836c0a", "filename": "src/test/ui/imports/local-modularized-tricky-pass-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass-1.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "previous_filename": "src/test/ui/imports/local-modularized-tricky-pass.rs"}, {"sha": "d5efbdf78af0fbb2419375d8b3550510b4db6dc2", "filename": "src/test/ui/imports/local-modularized-tricky-pass-2.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-pass-2.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -0,0 +1,50 @@\n+// check-pass\n+//\n+// `#[macro_export] macro_rules` that doesn't originate from macro expansions can be placed\n+// into the root module soon enough to act as usual items and shadow globs and preludes.\n+\n+#![feature(decl_macro)]\n+\n+// `macro_export` shadows globs\n+use inner1::*;\n+\n+mod inner1 {\n+    pub macro exported() {}\n+}\n+\n+exported!();\n+\n+mod deep {\n+    fn deep() {\n+        type Deeper = [u8; {\n+            #[macro_export]\n+            macro_rules! exported {\n+                () => ( struct \u0411; )\n+            }\n+\n+            0\n+        }];\n+    }\n+}\n+\n+// `macro_export` shadows std prelude\n+fn main() {\n+    panic!();\n+}\n+\n+mod inner3 {\n+    #[macro_export]\n+    macro_rules! panic {\n+        () => ( struct \u0413; )\n+    }\n+}\n+\n+// `macro_export` shadows builtin macros\n+include!();\n+\n+mod inner4 {\n+    #[macro_export]\n+    macro_rules! include {\n+        () => ( struct \u0414; )\n+    }\n+}"}, {"sha": "e4320b7dac592c41f7e035e0eee544410314ef8b", "filename": "src/test/ui/issues/issue-44023.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fissues%2Fissue-44023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fissues%2Fissue-44023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,3 @@\n-#![feature(non_ascii_idents)]\n-\n pub fn main () {}\n \n fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types"}, {"sha": "9e97012416a94dcad1a33d3210de7d85f070e0b8", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-44023.rs:5:36\n+  --> $DIR/issue-44023.rs:3:36\n    |\n LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n    |    ------------------------        ^^^^^ expected `isize`, found `()`"}, {"sha": "9f0c87dcaa61c74d23c8fb70d67339d806017faf", "filename": "src/test/ui/lint/lint-non-snake-case-no-lowercase-equivalent.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-non-snake-case-no-lowercase-equivalent.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -3,7 +3,6 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(non_ascii_idents)]\n #![deny(non_snake_case)]\n \n // This name is neither upper nor lower case"}, {"sha": "527d0ea943285ada57066bb4056fc7c230d21490", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,7 +1,6 @@\n #![allow(dead_code)]\n \n #![forbid(non_camel_case_types)]\n-#![feature(non_ascii_idents)]\n \n // Some scripts (e.g., hiragana) don't have a concept of\n // upper/lowercase"}, {"sha": "6c2aa225e602e942d49e7e61293e28330ccdfc0f", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error: type `\u03c7a` should have an upper camel case name\n-  --> $DIR/lint-nonstandard-style-unicode-1.rs:15:8\n+  --> $DIR/lint-nonstandard-style-unicode-1.rs:14:8\n    |\n LL | struct \u03c7a;\n    |        ^^ help: convert the identifier to upper camel case: `\u03a7a`\n@@ -11,37 +11,37 @@ LL | #![forbid(non_camel_case_types)]\n    |           ^^^^^^^^^^^^^^^^^^^^\n \n error: type `__\u03c7a` should have an upper camel case name\n-  --> $DIR/lint-nonstandard-style-unicode-1.rs:23:8\n+  --> $DIR/lint-nonstandard-style-unicode-1.rs:22:8\n    |\n LL | struct __\u03c7a;\n    |        ^^^^ help: convert the identifier to upper camel case: `\u03a7a`\n \n error: type `\u5bf9__\u5426` should have an upper camel case name\n-  --> $DIR/lint-nonstandard-style-unicode-1.rs:28:8\n+  --> $DIR/lint-nonstandard-style-unicode-1.rs:27:8\n    |\n LL | struct \u5bf9__\u5426;\n    |        ^^^^^^ help: convert the identifier to upper camel case: `\u5bf9_\u5426`\n \n error: type `\u30d2__\u03c7` should have an upper camel case name\n-  --> $DIR/lint-nonstandard-style-unicode-1.rs:31:8\n+  --> $DIR/lint-nonstandard-style-unicode-1.rs:30:8\n    |\n LL | struct \u30d2__\u03c7;\n    |        ^^^^^ help: convert the identifier to upper camel case: `\u30d2\u03a7`\n \n error: type `Hello_\u4f60\u597d` should have an upper camel case name\n-  --> $DIR/lint-nonstandard-style-unicode-1.rs:37:8\n+  --> $DIR/lint-nonstandard-style-unicode-1.rs:36:8\n    |\n LL | struct Hello_\u4f60\u597d;\n    |        ^^^^^^^^^^ help: convert the identifier to upper camel case: `Hello\u4f60\u597d`\n \n error: type `Hello_World` should have an upper camel case name\n-  --> $DIR/lint-nonstandard-style-unicode-1.rs:40:8\n+  --> $DIR/lint-nonstandard-style-unicode-1.rs:39:8\n    |\n LL | struct Hello_World;\n    |        ^^^^^^^^^^^ help: convert the identifier to upper camel case: `HelloWorld`\n \n error: type `\u4f60_\u04df` should have an upper camel case name\n-  --> $DIR/lint-nonstandard-style-unicode-1.rs:43:8\n+  --> $DIR/lint-nonstandard-style-unicode-1.rs:42:8\n    |\n LL | struct \u4f60_\u04df;\n    |        ^^^^ help: convert the identifier to upper camel case: `\u4f60\u04de`"}, {"sha": "9690be5908b7376499a2a0d275ac02d846693849", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,7 +1,6 @@\n #![allow(dead_code)]\n \n #![forbid(non_snake_case)]\n-#![feature(non_ascii_idents)]\n \n // Some scripts (e.g., hiragana) don't have a concept of\n // upper/lowercase"}, {"sha": "8eb0654e0a1933039e769de68b266fc571629e77", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-2.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error: function `\u0426` should have a snake case name\n-  --> $DIR/lint-nonstandard-style-unicode-2.rs:18:4\n+  --> $DIR/lint-nonstandard-style-unicode-2.rs:17:4\n    |\n LL | fn \u0426() {}\n    |    ^ help: convert the identifier to snake case: `\u0446`\n@@ -11,7 +11,7 @@ LL | #![forbid(non_snake_case)]\n    |           ^^^^^^^^^^^^^^\n \n error: function `\u5206__\u9694` should have a snake case name\n-  --> $DIR/lint-nonstandard-style-unicode-2.rs:23:4\n+  --> $DIR/lint-nonstandard-style-unicode-2.rs:22:4\n    |\n LL | fn \u5206__\u9694() {}\n    |    ^^^^^^ help: convert the identifier to snake case: `\u5206_\u9694`"}, {"sha": "9175be7a0f49d4f1046b3af86437c31ba6ea3c62", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-3.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,7 +1,6 @@\n #![allow(dead_code)]\n \n #![forbid(non_upper_case_globals)]\n-#![feature(non_ascii_idents)]\n \n // Some scripts (e.g., hiragana) don't have a concept of\n // upper/lowercase"}, {"sha": "970e6b838ada00eec7d852775851992e6b82f92f", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-3.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error: static variable `\u03c4\u03b5\u03c7` should have an upper case name\n-  --> $DIR/lint-nonstandard-style-unicode-3.rs:18:8\n+  --> $DIR/lint-nonstandard-style-unicode-3.rs:17:8\n    |\n LL | static \u03c4\u03b5\u03c7: f32 = 3.14159265;\n    |        ^^^ help: convert the identifier to upper case: `\u03a4\u0395\u03a7`"}, {"sha": "e7da825ae36d1587a151ff69833f9f4921568930", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,4 +1,3 @@\n-#![feature(non_ascii_idents)]\n #![deny(confusable_idents)]\n #![allow(uncommon_codepoints, non_upper_case_globals)]\n "}, {"sha": "e9906c83d126c1efffb28568aa074d76a8e6d2c9", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-confusable-idents.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-confusable-idents.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error: identifier pair considered confusable between `\uff53` and `s`\n-  --> $DIR/lint-confusable-idents.rs:9:9\n+  --> $DIR/lint-confusable-idents.rs:8:9\n    |\n LL | const \uff53: usize = 42;\n    |       -- this is where the previous identifier occurred\n@@ -8,13 +8,13 @@ LL |     let s = \"rust\";\n    |         ^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-confusable-idents.rs:2:9\n+  --> $DIR/lint-confusable-idents.rs:1:9\n    |\n LL | #![deny(confusable_idents)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: identifier pair considered confusable between `s_s` and `\uff53_\uff53`\n-  --> $DIR/lint-confusable-idents.rs:10:9\n+  --> $DIR/lint-confusable-idents.rs:9:9\n    |\n LL | const s_s: usize = 42;\n    |       --- this is where the previous identifier occurred"}, {"sha": "f62c8a19031dc01c0aa9255afe744d37af051208", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables-2.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(non_ascii_idents)]\n #![deny(mixed_script_confusables)]\n \n struct \u0391ctuallyNotLatin;"}, {"sha": "7ee9c41f6a09184b50f64445b1a5f0dce193cf82", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,4 +1,3 @@\n-#![feature(non_ascii_idents)]\n #![deny(mixed_script_confusables)]\n \n struct \u0391ctuallyNotLatin;"}, {"sha": "4018b381fb8c5ba37f2120d0f2b58a2c54e64d78", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-mixed-script-confusables.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-mixed-script-confusables.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,19 +1,19 @@\n error: The usage of Script Group `Greek` in this crate consists solely of mixed script confusables\n-  --> $DIR/lint-mixed-script-confusables.rs:4:8\n+  --> $DIR/lint-mixed-script-confusables.rs:3:8\n    |\n LL | struct \u0391ctuallyNotLatin;\n    |        ^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-mixed-script-confusables.rs:2:9\n+  --> $DIR/lint-mixed-script-confusables.rs:1:9\n    |\n LL | #![deny(mixed_script_confusables)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: The usage includes '\u0391' (U+0391).\n    = note: Please recheck to make sure their usages are indeed what you want.\n \n error: The usage of Script Group `Cyrillic` in this crate consists solely of mixed script confusables\n-  --> $DIR/lint-mixed-script-confusables.rs:11:5\n+  --> $DIR/lint-mixed-script-confusables.rs:10:5\n    |\n LL | mod \u0440\u043e\u0440\u0435 {\n    |     ^^^^\n@@ -22,7 +22,7 @@ LL | mod \u0440\u043e\u0440\u0435 {\n    = note: Please recheck to make sure their usages are indeed what you want.\n \n error: The usage of Script Group `Japanese, Katakana` in this crate consists solely of mixed script confusables\n-  --> $DIR/lint-mixed-script-confusables.rs:13:11\n+  --> $DIR/lint-mixed-script-confusables.rs:12:11\n    |\n LL |     const \u30a8: &'static str = \"\u30a2\u30a4\u30a6\";\n    |           ^^"}, {"sha": "8ae1744096dded8021b9e245a03391b1b886c406", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-non-ascii-idents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,4 +1,3 @@\n-#![feature(non_ascii_idents)]\n #![deny(non_ascii_idents)]\n \n const \u05d7\u05dc\u05d5\u05d3\u05d4: usize = 2; //~ ERROR identifier contains non-ASCII characters"}, {"sha": "8ed7f093ce340a86ae2aa893d580635d145ceb5d", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-non-ascii-idents.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-non-ascii-idents.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,23 +1,23 @@\n error: identifier contains non-ASCII characters\n-  --> $DIR/lint-non-ascii-idents.rs:4:7\n+  --> $DIR/lint-non-ascii-idents.rs:3:7\n    |\n LL | const \u05d7\u05dc\u05d5\u05d3\u05d4: usize = 2;\n    |       ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-non-ascii-idents.rs:2:9\n+  --> $DIR/lint-non-ascii-idents.rs:1:9\n    |\n LL | #![deny(non_ascii_idents)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: identifier contains non-ASCII characters\n-  --> $DIR/lint-non-ascii-idents.rs:6:4\n+  --> $DIR/lint-non-ascii-idents.rs:5:4\n    |\n LL | fn co\u00f6peration() {}\n    |    ^^^^^^^^^^^\n \n error: identifier contains non-ASCII characters\n-  --> $DIR/lint-non-ascii-idents.rs:9:9\n+  --> $DIR/lint-non-ascii-idents.rs:8:9\n    |\n LL |     let na\u00efvet\u00e9 = 2;\n    |         ^^^^^^^"}, {"sha": "81a3427a10274b223cd68fe389c6bd2c74696821", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-uncommon-codepoints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,4 +1,3 @@\n-#![feature(non_ascii_idents)]\n #![deny(uncommon_codepoints)]\n \n const \u00b5: f64 = 0.000001; //~ ERROR identifier contains uncommon Unicode codepoints"}, {"sha": "d435282a6e855cca8c9b571bb9d59113da71e33d", "filename": "src/test/ui/lint/rfc-2457-non-ascii-idents/lint-uncommon-codepoints.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frfc-2457-non-ascii-idents%2Flint-uncommon-codepoints.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,23 +1,23 @@\n error: identifier contains uncommon Unicode codepoints\n-  --> $DIR/lint-uncommon-codepoints.rs:4:7\n+  --> $DIR/lint-uncommon-codepoints.rs:3:7\n    |\n LL | const \u00b5: f64 = 0.000001;\n    |       ^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-uncommon-codepoints.rs:2:9\n+  --> $DIR/lint-uncommon-codepoints.rs:1:9\n    |\n LL | #![deny(uncommon_codepoints)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: identifier contains uncommon Unicode codepoints\n-  --> $DIR/lint-uncommon-codepoints.rs:6:4\n+  --> $DIR/lint-uncommon-codepoints.rs:5:4\n    |\n LL | fn d\u0133kstra() {}\n    |    ^^^^^^^\n \n error: identifier contains uncommon Unicode codepoints\n-  --> $DIR/lint-uncommon-codepoints.rs:9:9\n+  --> $DIR/lint-uncommon-codepoints.rs:8:9\n    |\n LL |     let \u31fb\u31f2\u31f3 = \"rust\";\n    |         ^^^^^^"}, {"sha": "761be61fa07f64ae823de69faad3186bea5068a7", "filename": "src/test/ui/lint/special-upper-lower-cases.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -5,7 +5,6 @@\n \n // check-pass\n \n-#![feature(non_ascii_idents)]\n #![allow(uncommon_codepoints, unused)]\n \n struct \ud835\udd5f\ud835\udd60\ud835\udd65\ud835\udd52\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d;"}, {"sha": "2aa13c33be3a6478f153bc73e0d2c60607f92350", "filename": "src/test/ui/lint/special-upper-lower-cases.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fspecial-upper-lower-cases.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,27 +1,27 @@\n warning: type `\ud835\udd5f\ud835\udd60\ud835\udd65\ud835\udd52\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d` should have an upper camel case name\n-  --> $DIR/special-upper-lower-cases.rs:11:8\n+  --> $DIR/special-upper-lower-cases.rs:10:8\n    |\n LL | struct \ud835\udd5f\ud835\udd60\ud835\udd65\ud835\udd52\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d;\n    |        ^^^^^^^^^ should have an UpperCamelCase name\n    |\n    = note: `#[warn(non_camel_case_types)]` on by default\n \n warning: type `\ud835\udd5f\ud835\udd60\ud835\udd65_\ud835\udd52_\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d` should have an upper camel case name\n-  --> $DIR/special-upper-lower-cases.rs:15:8\n+  --> $DIR/special-upper-lower-cases.rs:14:8\n    |\n LL | struct \ud835\udd5f\ud835\udd60\ud835\udd65_\ud835\udd52_\ud835\udd54\ud835\udd52\ud835\udd5e\ud835\udd56\ud835\udd5d;\n    |        ^^^^^^^^^^^ should have an UpperCamelCase name\n \n warning: static variable `\ud835\uddfb\ud835\uddfc\ud835\uddfb\ud835\ude02\ud835\uddfd\ud835\uddfd\ud835\uddf2\ud835\uddff\ud835\uddf0\ud835\uddee\ud835\ude00\ud835\uddf2` should have an upper case name\n-  --> $DIR/special-upper-lower-cases.rs:18:8\n+  --> $DIR/special-upper-lower-cases.rs:17:8\n    |\n LL | static \ud835\uddfb\ud835\uddfc\ud835\uddfb\ud835\ude02\ud835\uddfd\ud835\uddfd\ud835\uddf2\ud835\uddff\ud835\uddf0\ud835\uddee\ud835\ude00\ud835\uddf2: i32 = 1;\n    |        ^^^^^^^^^^^^ should have an UPPER_CASE name\n    |\n    = note: `#[warn(non_upper_case_globals)]` on by default\n \n warning: variable `\ud835\udce2\ud835\udcdd\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcda\ud835\udcd4\ud835\udce2` should have a snake case name\n-  --> $DIR/special-upper-lower-cases.rs:22:9\n+  --> $DIR/special-upper-lower-cases.rs:21:9\n    |\n LL |     let \ud835\udce2\ud835\udcdd\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcd0\ud835\udcda\ud835\udcd4\ud835\udce2 = 1;\n    |         ^^^^^^^^^ should have a snake_case name"}, {"sha": "37d04c5d65f0672a71b347dae1dd28c093bf1941", "filename": "src/test/ui/parser/issue-48508.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fparser%2Fissue-48508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fparser%2Fissue-48508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-48508.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -10,7 +10,6 @@\n // ignore-pretty issue #37195\n // ignore-asmjs wasm2js does not support source maps yet\n \n-#![feature(non_ascii_idents)]\n #![allow(uncommon_codepoints)]\n \n #[path = \"issue-48508-aux.rs\"]"}, {"sha": "7e7995d6724eb5432a36cb59d3ae4ce145497820", "filename": "src/test/ui/parser/multibyte-char-use-seperator-issue-80134.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -4,9 +4,7 @@ fn main() {\n     (()\u00e9);\n     //~^ ERROR: expected one of `)`, `,`, `.`, `?`, or an operator\n     //~| ERROR: cannot find value `\u00e9` in this scope\n-    //~| ERROR: non-ascii idents are not fully supported\n     (()\u6c37);\n     //~^ ERROR: expected one of `)`, `,`, `.`, `?`, or an operator\n     //~| ERROR: cannot find value `\u6c37` in this scope\n-    //~| ERROR: non-ascii idents are not fully supported\n }"}, {"sha": "21e71aa121560dc16d013e64f69f1a4fed5502e8", "filename": "src/test/ui/parser/multibyte-char-use-seperator-issue-80134.stderr", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -8,7 +8,7 @@ LL |     (()\u00e9);\n    |        help: missing `,`\n \n error: expected one of `)`, `,`, `.`, `?`, or an operator, found `\u6c37`\n-  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:8:8\n+  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:7:8\n    |\n LL |     (()\u6c37);\n    |        -^\n@@ -23,30 +23,11 @@ LL |     (()\u00e9);\n    |        ^ not found in this scope\n \n error[E0425]: cannot find value `\u6c37` in this scope\n-  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:8:8\n+  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:7:8\n    |\n LL |     (()\u6c37);\n    |        ^^ not found in this scope\n \n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:4:8\n-   |\n-LL |     (()\u00e9);\n-   |        ^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:8:8\n-   |\n-LL |     (()\u6c37);\n-   |        ^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0425, E0658.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "c07ba54af40325fa4ca2d7bd1ce1641219fe43ec", "filename": "src/test/ui/rfc-2457/crate_name_nonascii_forbidden-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-1.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,3 @@\n-#![feature(non_ascii_idents)]\n-\n extern crate \u044c\u0430\u0433; //~ ERROR cannot load a crate with a non-ascii name `\u044c\u0430\u0433`\n \n fn main() {}"}, {"sha": "a8f3abe599eb27d88f44ac207c758a2af78f1482", "filename": "src/test/ui/rfc-2457/crate_name_nonascii_forbidden-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-1.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error: cannot load a crate with a non-ascii name `\u044c\u0430\u0433`\n-  --> $DIR/crate_name_nonascii_forbidden-1.rs:3:1\n+  --> $DIR/crate_name_nonascii_forbidden-1.rs:1:1\n    |\n LL | extern crate \u044c\u0430\u0433;\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "f8e033937c607442bb442342807225f9ce24eb9d", "filename": "src/test/ui/rfc-2457/crate_name_nonascii_forbidden-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-2.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,6 +1,5 @@\n // compile-flags:--extern \u043c\u0443_\u0441\u0433\u0430\u0442\u0435\n // edition:2018\n-#![feature(non_ascii_idents)]\n \n use \u043c\u0443_\u0441\u0433\u0430\u0442\u0435::baz; //~  ERROR cannot load a crate with a non-ascii name `\u043c\u0443_\u0441\u0433\u0430\u0442\u0435`\n "}, {"sha": "05fc4fb22ad1ea6075c4811ae5e32c31a058dfd1", "filename": "src/test/ui/rfc-2457/crate_name_nonascii_forbidden-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fcrate_name_nonascii_forbidden-2.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error: cannot load a crate with a non-ascii name `\u043c\u0443_\u0441\u0433\u0430\u0442\u0435`\n-  --> $DIR/crate_name_nonascii_forbidden-2.rs:5:5\n+  --> $DIR/crate_name_nonascii_forbidden-2.rs:4:5\n    |\n LL | use \u043c\u0443_\u0441\u0433\u0430\u0442\u0435::baz;\n    |     ^^^^^^^^"}, {"sha": "ad6825404306a2f1f3440ebca24341b46ad8ed7b", "filename": "src/test/ui/rfc-2457/extern_block_nonascii_forbidden.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,4 @@\n #![feature(extern_types)]\n-#![feature(non_ascii_idents)]\n \n extern \"C\" {\n     type \u4e00; //~ items in `extern` blocks cannot use non-ascii identifiers"}, {"sha": "ab8832e91631582a9751289e63a98eba1e519c68", "filename": "src/test/ui/rfc-2457/extern_block_nonascii_forbidden.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fextern_block_nonascii_forbidden.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error: items in `extern` blocks cannot use non-ascii identifiers\n-  --> $DIR/extern_block_nonascii_forbidden.rs:5:10\n+  --> $DIR/extern_block_nonascii_forbidden.rs:4:10\n    |\n LL | extern \"C\" {\n    | ---------- in this `extern` block\n@@ -9,7 +9,7 @@ LL |     type \u4e00;\n    = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n \n error: items in `extern` blocks cannot use non-ascii identifiers\n-  --> $DIR/extern_block_nonascii_forbidden.rs:6:8\n+  --> $DIR/extern_block_nonascii_forbidden.rs:5:8\n    |\n LL | extern \"C\" {\n    | ---------- in this `extern` block\n@@ -20,7 +20,7 @@ LL |     fn \u4e8c();\n    = note: This limitation may be lifted in the future; see issue #83942 <https://github.com/rust-lang/rust/issues/83942> for more information\n \n error: items in `extern` blocks cannot use non-ascii identifiers\n-  --> $DIR/extern_block_nonascii_forbidden.rs:7:12\n+  --> $DIR/extern_block_nonascii_forbidden.rs:6:12\n    |\n LL | extern \"C\" {\n    | ---------- in this `extern` block"}, {"sha": "1023fee37d5dd812c1862a009a8558d75b6ca199", "filename": "src/test/ui/rfc-2457/idents-normalized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fidents-normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fidents-normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fidents-normalized.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(non_ascii_idents)]\n \n struct R\u00e9sum\u00e9; // ['LATIN SMALL LETTER E WITH ACUTE']\n "}, {"sha": "e949e2319c1c48ebd4937528dd6bee1d3d750e04", "filename": "src/test/ui/rfc-2457/mod_file_nonascii_forbidden.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,3 @@\n-#![feature(non_ascii_idents)]\n-\n mod \u0159\u0173\u015b\u0165; //~ trying to load file for\n //~^ file not found for\n "}, {"sha": "e857a1e60e5fefb4be8b315bbaf99f982521764f", "filename": "src/test/ui/rfc-2457/mod_file_nonascii_forbidden.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_forbidden.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,13 +1,13 @@\n error[E0583]: file not found for module `\u0159\u0173\u015b\u0165`\n-  --> $DIR/mod_file_nonascii_forbidden.rs:3:1\n+  --> $DIR/mod_file_nonascii_forbidden.rs:1:1\n    |\n LL | mod \u0159\u0173\u015b\u0165;\n    | ^^^^^^^^^\n    |\n    = help: to create the module `\u0159\u0173\u015b\u0165`, create file \"$DIR/\u0159\u0173\u015b\u0165.rs\"\n \n error[E0754]: trying to load file for module `\u0159\u0173\u015b\u0165` with non-ascii identifier name\n-  --> $DIR/mod_file_nonascii_forbidden.rs:3:5\n+  --> $DIR/mod_file_nonascii_forbidden.rs:1:5\n    |\n LL | mod \u0159\u0173\u015b\u0165;\n    |     ^^^^"}, {"sha": "94327846d616937df09d9cae6c5f74672a8c95f5", "filename": "src/test/ui/rfc-2457/mod_file_nonascii_with_path_allowed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_with_path_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_with_path_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_file_nonascii_with_path_allowed.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(non_ascii_idents)]\n \n #[path=\"auxiliary/mod_file_nonascii_with_path_allowed-aux.rs\"]\n mod \u0159\u0173\u015b\u0165;"}, {"sha": "e1d836b7c3e34b7c6b735eab396c3d8f5ac8fe42", "filename": "src/test/ui/rfc-2457/mod_inline_nonascii_allowed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fmod_inline_nonascii_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fmod_inline_nonascii_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fmod_inline_nonascii_allowed.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(non_ascii_idents)]\n \n mod \u0159\u0173\u015b\u0165 {\n     const IS_GREAT: bool = true;"}, {"sha": "0325d6436abcb4d20d3dc13ef11cee14273ec510", "filename": "src/test/ui/rfc-2457/no_mangle_nonascii_forbidden.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,3 @@\n-#![feature(non_ascii_idents)]\n-\n #[no_mangle]\n pub fn \u0159\u0173\u015b\u0165() {}  //~ `#[no_mangle]` requires ASCII identifier\n "}, {"sha": "b4b2b0c7ee001022dd3eedd26b67779dd2ea60cb", "filename": "src/test/ui/rfc-2457/no_mangle_nonascii_forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,5 +1,5 @@\n error[E0754]: `#[no_mangle]` requires ASCII identifier\n-  --> $DIR/no_mangle_nonascii_forbidden.rs:4:1\n+  --> $DIR/no_mangle_nonascii_forbidden.rs:2:1\n    |\n LL | pub fn \u0159\u0173\u015b\u0165() {}\n    | ^^^^^^^^^^^^^"}, {"sha": "206744a58fde41554ccc68bb59714102bb4e940d", "filename": "src/test/ui/utf8_idents-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Futf8_idents-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Futf8_idents-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents-rpass.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -2,8 +2,6 @@\n //\n #![allow(non_snake_case)]\n \n-#![feature(non_ascii_idents)]\n-\n pub fn main() {\n     let \u03b5 = 0.00001f64;\n     let \u03a0 = 3.14f64;"}, {"sha": "1f6326dd94b5ce31450ff3700ff81d3662495a75", "filename": "src/test/ui/utf8_idents.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f9271f360028329e724ddf61c158760e91b7d7/src%2Ftest%2Fui%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.rs?ref=e5f9271f360028329e724ddf61c158760e91b7d7", "patch": "@@ -1,15 +1,16 @@\n-#![allow(mixed_script_confusables)]\n+// check-pass\n+//\n+#![allow(mixed_script_confusables, non_camel_case_types)]\n \n fn foo<\n-    '\u03b2, //~ ERROR non-ascii idents are not fully supported\n-    \u03b3  //~ ERROR non-ascii idents are not fully supported\n-       //~^ WARN type parameter `\u03b3` should have an upper camel case name\n+    '\u03b2,\n+    \u03b3\n >() {}\n \n struct X {\n-    \u03b4: usize //~ ERROR non-ascii idents are not fully supported\n+    \u03b4: usize\n }\n \n pub fn main() {\n-    let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported\n+    let \u03b1 = 0.00001f64;\n }"}, {"sha": "2fc0b1c39effb54f6766d3f6f0b8cd413dbae562", "filename": "src/test/ui/utf8_idents.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9cdcccfa8321363999a43ee30a18b3aadbc20de/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=e9cdcccfa8321363999a43ee30a18b3aadbc20de", "patch": "@@ -1,47 +0,0 @@\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/utf8_idents.rs:4:5\n-   |\n-LL |     '\u03b2,\n-   |     ^^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/utf8_idents.rs:5:5\n-   |\n-LL |     \u03b3\n-   |     ^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/utf8_idents.rs:10:5\n-   |\n-LL |     \u03b4: usize\n-   |     ^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-error[E0658]: non-ascii idents are not fully supported\n-  --> $DIR/utf8_idents.rs:14:9\n-   |\n-LL |     let \u03b1 = 0.00001f64;\n-   |         ^\n-   |\n-   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n-   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n-\n-warning: type parameter `\u03b3` should have an upper camel case name\n-  --> $DIR/utf8_idents.rs:5:5\n-   |\n-LL |     \u03b3\n-   |     ^ help: convert the identifier to upper camel case: `\u0393`\n-   |\n-   = note: `#[warn(non_camel_case_types)]` on by default\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0658`."}]}