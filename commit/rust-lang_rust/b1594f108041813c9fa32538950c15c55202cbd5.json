{"sha": "b1594f108041813c9fa32538950c15c55202cbd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNTk0ZjEwODA0MTgxM2M5ZmEzMjUzODk1MGMxNWM1NTIwMmNiZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-26T17:09:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T17:09:32Z"}, "message": "Merge #3727\n\n3727: Introduce ra_proc_macro r=matklad a=edwin0cheng\n\nThis PR implemented:\r\n\r\n1.  Reading dylib path of proc-macro crate from cargo check , similar to how `OUTDIR` is obtained.\r\n2.  Added a new crate `ra_proc_macro` and implement the foot-work for reading result from external proc-macro expander. \r\n3. Added a struct `ProcMacroClient` , which will be responsible to the client side communication to the External process.\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "cef1e662a7acf2807422e7c232014c5326ac37b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cef1e662a7acf2807422e7c232014c5326ac37b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1594f108041813c9fa32538950c15c55202cbd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefOHMCRBK7hj4Ov3rIwAAdHIIAC2Z4KOg1vi2FEYnbdaz70UO\nIONSH+pER9Mau89ue6qr0wnHO5NMaiCzN1mtJgV+HsyoLuy+yWtaHgDEW3bR6aAx\nnyQSwDY8K7hGHFD/b53fR9otXHDrH9Up5jicCLUgx6dviTVWF0qj11Mw9ICYDKws\n0uy8vF2wNAQ4MKTCT85GMTkGjRjo1FbIo1rjypjrRdj6xVbDyG+r0cKqXh/OqCPs\n39iUNUR9iXdPwwIuVnuxswPPUkoCpzBnZ/lVBhgdWXLiCBHWDE0t1sfXR4VlO1OA\njdmIw7gIeOEvicNNdVx50TlCAz5hXaqG4SWzUzSKbjkY/MenvADhJ6vKIYsM+sU=\n=8dgQ\n-----END PGP SIGNATURE-----\n", "payload": "tree cef1e662a7acf2807422e7c232014c5326ac37b6\nparent 20c110e57f24aa54154942ee40921e9129fbc595\nparent db162df264a222021dbc7f1f93af94029f3948d9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585242572 +0000\ncommitter GitHub <noreply@github.com> 1585242572 +0000\n\nMerge #3727\n\n3727: Introduce ra_proc_macro r=matklad a=edwin0cheng\n\nThis PR implemented:\r\n\r\n1.  Reading dylib path of proc-macro crate from cargo check , similar to how `OUTDIR` is obtained.\r\n2.  Added a new crate `ra_proc_macro` and implement the foot-work for reading result from external proc-macro expander. \r\n3. Added a struct `ProcMacroClient` , which will be responsible to the client side communication to the External process.\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1594f108041813c9fa32538950c15c55202cbd5", "html_url": "https://github.com/rust-lang/rust/commit/b1594f108041813c9fa32538950c15c55202cbd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1594f108041813c9fa32538950c15c55202cbd5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20c110e57f24aa54154942ee40921e9129fbc595", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c110e57f24aa54154942ee40921e9129fbc595", "html_url": "https://github.com/rust-lang/rust/commit/20c110e57f24aa54154942ee40921e9129fbc595"}, {"sha": "db162df264a222021dbc7f1f93af94029f3948d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/db162df264a222021dbc7f1f93af94029f3948d9", "html_url": "https://github.com/rust-lang/rust/commit/db162df264a222021dbc7f1f93af94029f3948d9"}], "stats": {"total": 297, "additions": 259, "deletions": 38}, "files": [{"sha": "3bb1df05b8cd6fee39a2603570ed84b47d9ca2fb", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -928,6 +928,7 @@ dependencies = [\n  \"ra_cfg\",\n  \"ra_prof\",\n  \"ra_syntax\",\n+ \"ra_tt\",\n  \"relative-path\",\n  \"rustc-hash\",\n  \"salsa\",\n@@ -1081,6 +1082,13 @@ dependencies = [\n  \"drop_bomb\",\n ]\n \n+[[package]]\n+name = \"ra_proc_macro\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"ra_tt\",\n+]\n+\n [[package]]\n name = \"ra_prof\"\n version = \"0.1.0\"\n@@ -1102,6 +1110,7 @@ dependencies = [\n  \"ra_cargo_watch\",\n  \"ra_cfg\",\n  \"ra_db\",\n+ \"ra_proc_macro\",\n  \"rustc-hash\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "8ab409158c43131d5df39dc348476cb8bd7204a8", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -15,4 +15,5 @@ rustc-hash = \"1.1.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_prof = { path = \"../ra_prof\" }\n+ra_tt = { path = \"../ra_tt\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "7777ce81e78f74d7f75d490b735802f3e681798b", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -70,6 +70,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n             meta.cfg,\n             meta.env,\n             Default::default(),\n+            Default::default(),\n         );\n         crate_graph\n     } else {\n@@ -81,6 +82,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         crate_graph\n     };\n@@ -130,6 +132,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n                 meta.cfg,\n                 meta.env,\n                 Default::default(),\n+                Default::default(),\n             );\n             let prev = crates.insert(krate.clone(), crate_id);\n             assert!(prev.is_none());\n@@ -167,6 +170,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n     } else {\n         for (from, to) in crate_deps {"}, {"sha": "5ddce98c650efb1fc261f961b75c68feb89acf93", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -10,6 +10,7 @@ use std::{\n     fmt, ops,\n     path::{Path, PathBuf},\n     str::FromStr,\n+    sync::Arc,\n };\n \n use ra_cfg::CfgOptions;\n@@ -19,6 +20,7 @@ use rustc_hash::FxHashSet;\n \n use crate::{RelativePath, RelativePathBuf};\n use fmt::Display;\n+use ra_tt::TokenExpander;\n \n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n@@ -115,6 +117,22 @@ impl Display for CrateName {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct ProcMacroId(pub u32);\n+\n+#[derive(Debug, Clone)]\n+pub struct ProcMacro {\n+    pub name: SmolStr,\n+    pub expander: Arc<dyn TokenExpander>,\n+}\n+\n+impl Eq for ProcMacro {}\n+impl PartialEq for ProcMacro {\n+    fn eq(&self, other: &ProcMacro) -> bool {\n+        self.name == other.name && Arc::ptr_eq(&self.expander, &other.expander)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct CrateData {\n     pub root_file_id: FileId,\n@@ -127,6 +145,7 @@ pub struct CrateData {\n     pub env: Env,\n     pub extern_source: ExternSource,\n     pub dependencies: Vec<Dependency>,\n+    pub proc_macro: Vec<ProcMacro>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -166,14 +185,19 @@ impl CrateGraph {\n         cfg_options: CfgOptions,\n         env: Env,\n         extern_source: ExternSource,\n+        proc_macro: Vec<(SmolStr, Arc<dyn ra_tt::TokenExpander>)>,\n     ) -> CrateId {\n+        let proc_macro =\n+            proc_macro.into_iter().map(|(name, it)| ProcMacro { name, expander: it }).collect();\n+\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,\n             display_name,\n             cfg_options,\n             env,\n             extern_source,\n+            proc_macro,\n             dependencies: Vec::new(),\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n@@ -345,6 +369,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -353,6 +378,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -361,6 +387,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -377,6 +404,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -385,6 +413,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -393,6 +422,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -408,6 +438,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -416,6 +447,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)"}, {"sha": "a06f59c140d7b23ea5dce62849ebbbb97f5468dd", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -12,7 +12,7 @@ pub use crate::{\n     cancellation::Canceled,\n     input::{\n         CrateGraph, CrateId, CrateName, Dependency, Edition, Env, ExternSource, ExternSourceId,\n-        FileId, SourceRoot, SourceRootId,\n+        FileId, ProcMacroId, SourceRoot, SourceRootId,\n     },\n };\n pub use relative_path::{RelativePath, RelativePathBuf};"}, {"sha": "8fe3f8617fbd13e0b1febeb1767be929b137f4bd", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -11,7 +11,7 @@ use hir_expand::{\n     HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n };\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateId, FileId};\n+use ra_db::{CrateId, FileId, ProcMacroId};\n use ra_syntax::ast;\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n@@ -53,6 +53,16 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> Cr\n     }\n \n     let cfg_options = &crate_graph[def_map.krate].cfg_options;\n+    let proc_macros = &crate_graph[def_map.krate].proc_macro;\n+    let proc_macros = proc_macros\n+        .iter()\n+        .enumerate()\n+        .map(|(idx, it)| {\n+            // FIXME: a hacky way to create a Name from string.\n+            let name = tt::Ident { text: it.name.clone(), id: tt::TokenId::unspecified() };\n+            (name.as_name(), ProcMacroExpander::new(def_map.krate, ProcMacroId(idx as u32)))\n+        })\n+        .collect();\n \n     let mut collector = DefCollector {\n         db,\n@@ -65,9 +75,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> Cr\n         unexpanded_attribute_macros: Vec::new(),\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n-\n-        // FIXME: pass proc-macro from crate-graph\n-        proc_macros: Default::default(),\n+        proc_macros,\n     };\n     collector.collect();\n     collector.finish()"}, {"sha": "4d270e0def6cd44cf090ecc1f09bd07808b641ba", "filename": "crates/ra_hir_expand/src/proc_macro.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -1,33 +1,32 @@\n //! Proc Macro Expander stub\n \n-use crate::{db::AstDatabase, LazyMacroId, MacroCallKind, MacroCallLoc};\n-use ra_db::CrateId;\n+use crate::{db::AstDatabase, LazyMacroId};\n+use ra_db::{CrateId, ProcMacroId};\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n     krate: CrateId,\n+    proc_macro_id: ProcMacroId,\n }\n \n impl ProcMacroExpander {\n-    pub fn new(krate: CrateId) -> ProcMacroExpander {\n-        ProcMacroExpander { krate }\n+    pub fn new(krate: CrateId, proc_macro_id: ProcMacroId) -> ProcMacroExpander {\n+        ProcMacroExpander { krate, proc_macro_id }\n     }\n \n     pub fn expand(\n         &self,\n         db: &dyn AstDatabase,\n-        id: LazyMacroId,\n-        _tt: &tt::Subtree,\n+        _id: LazyMacroId,\n+        tt: &tt::Subtree,\n     ) -> Result<tt::Subtree, mbe::ExpandError> {\n-        let loc: MacroCallLoc = db.lookup_intern_macro(id);\n-        let name = match loc.kind {\n-            MacroCallKind::FnLike(_) => return Err(mbe::ExpandError::ConversionError),\n-            MacroCallKind::Attr(_, name) => name,\n-        };\n+        let krate_graph = db.crate_graph();\n+        let proc_macro = krate_graph[self.krate]\n+            .proc_macro\n+            .get(self.proc_macro_id.0 as usize)\n+            .clone()\n+            .ok_or_else(|| mbe::ExpandError::ConversionError)?;\n \n-        log::debug!(\"Proc-macro-expanding name = {}\", name);\n-\n-        // Return nothing for now\n-        return Ok(tt::Subtree::default());\n+        proc_macro.expander.expand(&tt, None).map_err(mbe::ExpandError::from)\n     }\n }"}, {"sha": "e43414985f67ffc62f4d0a82120e2a3daf9df511", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -213,6 +213,7 @@ impl Analysis {\n             cfg_options,\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);"}, {"sha": "2c13f206a17ce87905bfe667fb50b5187acaedfc", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -103,6 +103,7 @@ impl MockAnalysis {\n                     cfg_options,\n                     Env::default(),\n                     Default::default(),\n+                    Default::default(),\n                 ));\n             } else if path.ends_with(\"/lib.rs\") {\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n@@ -113,6 +114,7 @@ impl MockAnalysis {\n                     cfg_options,\n                     Env::default(),\n                     Default::default(),\n+                    Default::default(),\n                 );\n                 if let Some(root_crate) = root_crate {\n                     crate_graph"}, {"sha": "958b92bed55abaf0d4c5d32961e3523b537b6317", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -137,6 +137,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let mut change = AnalysisChange::new();\n         change.set_crate_graph(crate_graph);"}, {"sha": "535b7daa07a61f018960bc7e63da71ed4e87edfe", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -28,6 +28,13 @@ pub enum ExpandError {\n     BindingError(String),\n     ConversionError,\n     InvalidRepeat,\n+    ProcMacroError(tt::ExpansionError),\n+}\n+\n+impl From<tt::ExpansionError> for ExpandError {\n+    fn from(it: tt::ExpansionError) -> Self {\n+        ExpandError::ProcMacroError(it)\n+    }\n }\n \n pub use crate::syntax_bridge::{"}, {"sha": "bc2c37296d16e632948edc774d98a03497488014", "filename": "crates/ra_proc_macro/Cargo.toml", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_proc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_proc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2FCargo.toml?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -0,0 +1,12 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_proc_macro\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+publish = false\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+ra_tt = { path = \"../ra_tt\" }"}, {"sha": "5e21dd4872576b7f586fc17afc981605219123cb", "filename": "crates/ra_proc_macro/src/lib.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_proc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_proc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro%2Fsrc%2Flib.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -0,0 +1,59 @@\n+//! Client-side Proc-Macro crate\n+//!\n+//! We separate proc-macro expanding logic to an extern program to allow\n+//! different implementations (e.g. wasm or dylib loading). And this crate\n+//! is used to provide basic infrastructure  for communication between two\n+//! processes: Client (RA itself), Server (the external program)\n+\n+use ra_tt::{SmolStr, Subtree};\n+use std::{\n+    path::{Path, PathBuf},\n+    sync::Arc,\n+};\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct ProcMacroProcessExpander {\n+    process: Arc<ProcMacroProcessSrv>,\n+    name: SmolStr,\n+}\n+\n+impl ra_tt::TokenExpander for ProcMacroProcessExpander {\n+    fn expand(\n+        &self,\n+        _subtree: &Subtree,\n+        _attr: Option<&Subtree>,\n+    ) -> Result<Subtree, ra_tt::ExpansionError> {\n+        // FIXME: do nothing for now\n+        Ok(Subtree::default())\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct ProcMacroProcessSrv {\n+    path: PathBuf,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ProcMacroClient {\n+    Process { process: Arc<ProcMacroProcessSrv> },\n+    Dummy,\n+}\n+\n+impl ProcMacroClient {\n+    pub fn extern_process(process_path: &Path) -> ProcMacroClient {\n+        let process = ProcMacroProcessSrv { path: process_path.into() };\n+        ProcMacroClient::Process { process: Arc::new(process) }\n+    }\n+\n+    pub fn dummy() -> ProcMacroClient {\n+        ProcMacroClient::Dummy\n+    }\n+\n+    pub fn by_dylib_path(\n+        &self,\n+        _dylib_path: &Path,\n+    ) -> Vec<(SmolStr, Arc<dyn ra_tt::TokenExpander>)> {\n+        // FIXME: return empty for now\n+        vec![]\n+    }\n+}"}, {"sha": "cdcdd63c911a831805d3ad7de933f6949441bf43", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -17,6 +17,7 @@ ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n+ra_proc_macro =  { path = \"../ra_proc_macro\" }\n \n serde = { version = \"1.0.104\", features = [\"derive\"] }\n serde_json = \"1.0.48\""}, {"sha": "291594e2a2cbb7383ef523ca2924191e275fac40", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -83,6 +83,7 @@ pub struct PackageData {\n     pub edition: Edition,\n     pub features: Vec<String>,\n     pub out_dir: Option<PathBuf>,\n+    pub proc_macro_dylib_path: Option<PathBuf>,\n }\n \n #[derive(Debug, Clone)]\n@@ -158,8 +159,11 @@ impl CargoWorkspace {\n         })?;\n \n         let mut out_dir_by_id = FxHashMap::default();\n+        let mut proc_macro_dylib_paths = FxHashMap::default();\n         if cargo_features.load_out_dirs_from_check {\n-            out_dir_by_id = load_out_dirs(cargo_toml, cargo_features);\n+            let resources = load_extern_resources(cargo_toml, cargo_features);\n+            out_dir_by_id = resources.out_dirs;\n+            proc_macro_dylib_paths = resources.proc_dylib_paths;\n         }\n \n         let mut pkg_by_id = FxHashMap::default();\n@@ -183,6 +187,7 @@ impl CargoWorkspace {\n                 dependencies: Vec::new(),\n                 features: Vec::new(),\n                 out_dir: out_dir_by_id.get(&id).cloned(),\n+                proc_macro_dylib_path: proc_macro_dylib_paths.get(&id).cloned(),\n             });\n             let pkg_data = &mut packages[pkg];\n             pkg_by_id.insert(id, pkg);\n@@ -246,10 +251,13 @@ impl CargoWorkspace {\n     }\n }\n \n-pub fn load_out_dirs(\n-    cargo_toml: &Path,\n-    cargo_features: &CargoFeatures,\n-) -> FxHashMap<PackageId, PathBuf> {\n+#[derive(Debug, Clone, Default)]\n+pub struct ExternResources {\n+    out_dirs: FxHashMap<PackageId, PathBuf>,\n+    proc_dylib_paths: FxHashMap<PackageId, PathBuf>,\n+}\n+\n+pub fn load_extern_resources(cargo_toml: &Path, cargo_features: &CargoFeatures) -> ExternResources {\n     let mut args: Vec<String> = vec![\n         \"check\".to_string(),\n         \"--message-format=json\".to_string(),\n@@ -267,14 +275,21 @@ pub fn load_out_dirs(\n         args.extend(cargo_features.features.iter().cloned());\n     }\n \n-    let mut acc = FxHashMap::default();\n+    let mut acc = ExternResources::default();\n     let res = run_cargo(&args, cargo_toml.parent(), &mut |message| {\n         match message {\n             Message::BuildScriptExecuted(BuildScript { package_id, out_dir, .. }) => {\n-                acc.insert(package_id, out_dir);\n+                acc.out_dirs.insert(package_id, out_dir);\n             }\n \n-            Message::CompilerArtifact(_) => (),\n+            Message::CompilerArtifact(message) => {\n+                if message.target.kind.contains(&\"proc-macro\".to_string()) {\n+                    let package_id = message.package_id;\n+                    if let Some(filename) = message.filenames.get(0) {\n+                        acc.proc_dylib_paths.insert(package_id, filename.clone());\n+                    }\n+                }\n+            }\n             Message::CompilerMessage(_) => (),\n             Message::Unknown => (),\n         }"}, {"sha": "b030c8a6a18f3e8de67afa626e4d662ac1e7dd71", "filename": "crates/ra_project_model/src/json_project.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -23,6 +23,7 @@ pub struct Crate {\n     pub(crate) atom_cfgs: FxHashSet<String>,\n     pub(crate) key_value_cfgs: FxHashMap<String, String>,\n     pub(crate) out_dir: Option<PathBuf>,\n+    pub(crate) proc_macro_dylib_path: Option<PathBuf>,\n }\n \n #[derive(Clone, Copy, Debug, Deserialize)]"}, {"sha": "444d3bb3f05f2c9ab6d6d42a695f3dcbc9187225", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -23,6 +23,7 @@ pub use crate::{\n     json_project::JsonProject,\n     sysroot::Sysroot,\n };\n+pub use ra_proc_macro::ProcMacroClient;\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct CargoTomlNotFoundError {\n@@ -173,6 +174,29 @@ impl ProjectWorkspace {\n         }\n     }\n \n+    pub fn proc_macro_dylib_paths(&self) -> Vec<PathBuf> {\n+        match self {\n+            ProjectWorkspace::Json { project } => {\n+                let mut proc_macro_dylib_paths = Vec::with_capacity(project.crates.len());\n+                for krate in &project.crates {\n+                    if let Some(out_dir) = &krate.proc_macro_dylib_path {\n+                        proc_macro_dylib_paths.push(out_dir.to_path_buf());\n+                    }\n+                }\n+                proc_macro_dylib_paths\n+            }\n+            ProjectWorkspace::Cargo { cargo, sysroot: _sysroot } => {\n+                let mut proc_macro_dylib_paths = Vec::with_capacity(cargo.packages().len());\n+                for pkg in cargo.packages() {\n+                    if let Some(dylib_path) = &cargo[pkg].proc_macro_dylib_path {\n+                        proc_macro_dylib_paths.push(dylib_path.to_path_buf());\n+                    }\n+                }\n+                proc_macro_dylib_paths\n+            }\n+        }\n+    }\n+\n     pub fn n_packages(&self) -> usize {\n         match self {\n             ProjectWorkspace::Json { project } => project.crates.len(),\n@@ -186,6 +210,7 @@ impl ProjectWorkspace {\n         &self,\n         default_cfg_options: &CfgOptions,\n         extern_source_roots: &FxHashMap<PathBuf, ExternSourceId>,\n+        proc_macro_client: &ProcMacroClient,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n     ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n@@ -219,7 +244,10 @@ impl ProjectWorkspace {\n                                 extern_source.set_extern_path(&out_dir, extern_source_id);\n                             }\n                         }\n-\n+                        let proc_macro = krate\n+                            .proc_macro_dylib_path\n+                            .clone()\n+                            .map(|it| proc_macro_client.by_dylib_path(&it));\n                         // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         crates.insert(\n                             crate_id,\n@@ -231,6 +259,7 @@ impl ProjectWorkspace {\n                                 cfg_options,\n                                 env,\n                                 extern_source,\n+                                proc_macro.unwrap_or_default(),\n                             ),\n                         );\n                     }\n@@ -270,6 +299,8 @@ impl ProjectWorkspace {\n \n                         let env = Env::default();\n                         let extern_source = ExternSource::default();\n+                        let proc_macro = vec![];\n+\n                         let crate_id = crate_graph.add_crate_root(\n                             file_id,\n                             Edition::Edition2018,\n@@ -280,6 +311,7 @@ impl ProjectWorkspace {\n                             cfg_options,\n                             env,\n                             extern_source,\n+                            proc_macro,\n                         );\n                         sysroot_crates.insert(krate, crate_id);\n                     }\n@@ -327,13 +359,20 @@ impl ProjectWorkspace {\n                                     extern_source.set_extern_path(&out_dir, extern_source_id);\n                                 }\n                             }\n+                            let proc_macro = cargo[pkg]\n+                                .proc_macro_dylib_path\n+                                .as_ref()\n+                                .map(|it| proc_macro_client.by_dylib_path(&it))\n+                                .unwrap_or_default();\n+\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n                                 Some(CrateName::normalize_dashes(&cargo[pkg].name)),\n                                 cfg_options,\n                                 env,\n                                 extern_source,\n+                                proc_macro.clone(),\n                             );\n                             if cargo[tgt].kind == TargetKind::Lib {\n                                 lib_tgt = Some((crate_id, cargo[tgt].name.clone()));"}, {"sha": "1015ce0a60d9e8e746282056cfcab6ba5cd188e1", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -14,9 +14,12 @@ macro_rules! impl_froms {\n     }\n }\n \n-use std::fmt;\n+use std::{\n+    fmt::{self, Debug},\n+    panic::RefUnwindSafe,\n+};\n \n-use smol_str::SmolStr;\n+pub use smol_str::SmolStr;\n \n /// Represents identity of the token.\n ///\n@@ -184,3 +187,11 @@ impl Subtree {\n }\n \n pub mod buffer;\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub enum ExpansionError {}\n+\n+pub trait TokenExpander: Debug + Send + Sync + RefUnwindSafe {\n+    fn expand(&self, subtree: &Subtree, attrs: Option<&Subtree>)\n+        -> Result<Subtree, ExpansionError>;\n+}"}, {"sha": "832f04226c35432c69aa55ea389f187aa3a7b4f7", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -7,7 +7,9 @@ use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{ExternSourceId, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost};\n-use ra_project_model::{get_rustc_cfg_options, CargoFeatures, PackageRoot, ProjectWorkspace};\n+use ra_project_model::{\n+    get_rustc_cfg_options, CargoFeatures, PackageRoot, ProcMacroClient, ProjectWorkspace,\n+};\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n \n@@ -67,7 +69,9 @@ pub(crate) fn load_cargo(\n             (source_root_id, project_root)\n         })\n         .collect::<FxHashMap<_, _>>();\n-    let host = load(&source_roots, ws, &mut vfs, receiver, extern_dirs);\n+\n+    let proc_macro_client = ProcMacroClient::dummy();\n+    let host = load(&source_roots, ws, &mut vfs, receiver, extern_dirs, &proc_macro_client);\n     Ok((host, source_roots))\n }\n \n@@ -77,6 +81,7 @@ pub(crate) fn load(\n     vfs: &mut Vfs,\n     receiver: Receiver<VfsTask>,\n     extern_dirs: FxHashSet<PathBuf>,\n+    proc_macro_client: &ProcMacroClient,\n ) -> AnalysisHost {\n     let lru_cap = std::env::var(\"RA_LRU_CAP\").ok().and_then(|it| it.parse::<usize>().ok());\n     let mut host = AnalysisHost::new(lru_cap);\n@@ -143,12 +148,16 @@ pub(crate) fn load(\n         opts\n     };\n \n-    let crate_graph =\n-        ws.to_crate_graph(&default_cfg_options, &extern_source_roots, &mut |path: &Path| {\n+    let crate_graph = ws.to_crate_graph(\n+        &default_cfg_options,\n+        &extern_source_roots,\n+        proc_macro_client,\n+        &mut |path: &Path| {\n             let vfs_file = vfs.load(path);\n             log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n             vfs_file.map(vfs_file_to_id)\n-        });\n+        },\n+    );\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n     analysis_change.set_crate_graph(crate_graph);\n "}, {"sha": "de85bb0178756c423e526a3cd3c12f3953206cf7", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1594f108041813c9fa32538950c15c55202cbd5/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=b1594f108041813c9fa32538950c15c55202cbd5", "patch": "@@ -16,7 +16,7 @@ use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayHintsOptions, LibraryData,\n     SourceRootId,\n };\n-use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n+use ra_project_model::{get_rustc_cfg_options, ProcMacroClient, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n \n@@ -150,9 +150,19 @@ impl WorldState {\n             vfs_file.map(|f| FileId(f.0))\n         };\n \n+        let proc_macro_client =\n+            ProcMacroClient::extern_process(std::path::Path::new(\"ra_proc_macro_srv\"));\n+\n         workspaces\n             .iter()\n-            .map(|ws| ws.to_crate_graph(&default_cfg_options, &extern_source_roots, &mut load))\n+            .map(|ws| {\n+                ws.to_crate_graph(\n+                    &default_cfg_options,\n+                    &extern_source_roots,\n+                    &proc_macro_client,\n+                    &mut load,\n+                )\n+            })\n             .for_each(|graph| {\n                 crate_graph.extend(graph);\n             });"}]}