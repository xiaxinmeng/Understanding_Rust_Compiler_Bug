{"sha": "1e73811fbe634efec90a3e009a84fd8dda9f5697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNzM4MTFmYmU2MzRlZmVjOTBhM2UwMDlhODRmZDhkZGE5ZjU2OTc=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-09T17:57:55Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-14T00:01:46Z"}, "message": "vscode: amend server installation logic to account for nightlies", "tree": {"sha": "c87cff735a65fcc1c8d6c46d2dd8a9148f359c24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c87cff735a65fcc1c8d6c46d2dd8a9148f359c24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e73811fbe634efec90a3e009a84fd8dda9f5697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e73811fbe634efec90a3e009a84fd8dda9f5697", "html_url": "https://github.com/rust-lang/rust/commit/1e73811fbe634efec90a3e009a84fd8dda9f5697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e73811fbe634efec90a3e009a84fd8dda9f5697/comments", "author": null, "committer": null, "parents": [{"sha": "601fc9d1abf52c16356d49b6c540b31718e62b88", "url": "https://api.github.com/repos/rust-lang/rust/commits/601fc9d1abf52c16356d49b6c540b31718e62b88", "html_url": "https://github.com/rust-lang/rust/commit/601fc9d1abf52c16356d49b6c540b31718e62b88"}], "stats": {"total": 109, "additions": 57, "deletions": 52}, "files": [{"sha": "c4d84b4439eec89f906f7f0a3b155b1d7e52f502", "filename": "editors/code/src/commands/server_version.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e73811fbe634efec90a3e009a84fd8dda9f5697/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1e73811fbe634efec90a3e009a84fd8dda9f5697/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts?ref=1e73811fbe634efec90a3e009a84fd8dda9f5697", "patch": "@@ -5,7 +5,7 @@ import { spawnSync } from 'child_process';\n \n export function serverVersion(ctx: Ctx): Cmd {\n     return async () => {\n-        const binaryPath = await ensureServerBinary(ctx.config.serverSource);\n+        const binaryPath = await ensureServerBinary(ctx.config);\n \n         if (binaryPath == null) {\n             throw new Error(\n@@ -18,4 +18,3 @@ export function serverVersion(ctx: Ctx): Cmd {\n         vscode.window.showInformationMessage('rust-analyzer version : ' + version);\n     };\n }\n-"}, {"sha": "345f30d4763d1abf88c2c7048843f0ddbb51b215", "filename": "editors/code/src/installation/server.ts", "status": "modified", "additions": 48, "deletions": 49, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/1e73811fbe634efec90a3e009a84fd8dda9f5697/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1e73811fbe634efec90a3e009a84fd8dda9f5697/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts?ref=1e73811fbe634efec90a3e009a84fd8dda9f5697", "patch": "@@ -1,14 +1,16 @@\n import * as vscode from \"vscode\";\n import * as path from \"path\";\n-import { promises as dns } from \"dns\";\n import { spawnSync } from \"child_process\";\n \n import { ArtifactSource } from \"./interfaces\";\n import { fetchArtifactReleaseInfo } from \"./fetch_artifact_release_info\";\n-import { downloadArtifact } from \"./download_artifact\";\n+import { downloadArtifactWithProgressUi } from \"./downloads\";\n import { log, assert } from \"../util\";\n+import { Config, NIGHTLY_TAG } from \"../config\";\n+\n+export async function ensureServerBinary(config: Config): Promise<null | string> {\n+    const source = config.serverSource;\n \n-export async function ensureServerBinary(source: null | ArtifactSource): Promise<null | string> {\n     if (!source) {\n         vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n@@ -35,18 +37,11 @@ export async function ensureServerBinary(source: null | ArtifactSource): Promise\n             return null;\n         }\n         case ArtifactSource.Type.GithubRelease: {\n-            const prebuiltBinaryPath = path.join(source.dir, source.file);\n-\n-            const installedVersion: null | string = getServerVersion(source.storage);\n-            const requiredVersion: string = source.tag;\n-\n-            log.debug(\"Installed version:\", installedVersion, \"required:\", requiredVersion);\n-\n-            if (isBinaryAvailable(prebuiltBinaryPath) && installedVersion === requiredVersion) {\n-                return prebuiltBinaryPath;\n+            if (!shouldDownloadServer(source, config)) {\n+                return path.join(source.dir, source.file);\n             }\n \n-            if (source.askBeforeDownload) {\n+            if (config.askBeforeDownload) {\n                 const userResponse = await vscode.window.showInformationMessage(\n                     `Language server version ${source.tag} for rust-analyzer is not installed. ` +\n                     \"Do you want to download it now?\",\n@@ -55,38 +50,53 @@ export async function ensureServerBinary(source: null | ArtifactSource): Promise\n                 if (userResponse !== \"Download now\") return null;\n             }\n \n-            if (!await downloadServer(source)) return null;\n-\n-            return prebuiltBinaryPath;\n+            return await downloadServer(source, config);\n         }\n     }\n }\n \n-async function downloadServer(source: ArtifactSource.GithubRelease): Promise<boolean> {\n+function shouldDownloadServer(\n+    source: ArtifactSource.GithubRelease,\n+    config: Config\n+): boolean {\n+    if (!isBinaryAvailable(path.join(source.dir, source.file))) return true;\n+\n+    const installed = {\n+        tag: config.serverReleaseTag.get(),\n+        date: config.serverReleaseDate.get()\n+    };\n+    const required = {\n+        tag: source.tag,\n+        date: config.installedNightlyExtensionReleaseDate.get()\n+    };\n+\n+    log.debug(\"Installed server:\", installed, \"required:\", required);\n+\n+    if (required.tag !== NIGHTLY_TAG || installed.tag !== NIGHTLY_TAG) {\n+        return required.tag !== installed.tag;\n+    }\n+\n+    assert(required.date !== null, \"Extension release date should have been saved during its installation\");\n+    assert(installed.date !== null, \"Server release date should have been saved during its installation\");\n+\n+    return installed.date.getTime() !== required.date.getTime();\n+}\n+\n+async function downloadServer(\n+    source: ArtifactSource.GithubRelease,\n+    config: Config,\n+): Promise<null | string> {\n     try {\n         const releaseInfo = await fetchArtifactReleaseInfo(source.repo, source.file, source.tag);\n \n-        await downloadArtifact(releaseInfo, source.file, source.dir, \"language server\");\n-        await setServerVersion(source.storage, releaseInfo.releaseName);\n+        await downloadArtifactWithProgressUi(releaseInfo, source.file, source.dir, \"language server\");\n+        await Promise.all([\n+            config.serverReleaseTag.set(releaseInfo.releaseName),\n+            config.serverReleaseDate.set(releaseInfo.releaseDate)\n+        ]);\n     } catch (err) {\n-        vscode.window.showErrorMessage(\n-            `Failed to download language server from ${source.repo.name} ` +\n-            `GitHub repository: ${err.message}`\n-        );\n-\n-        log.error(err);\n-\n-        dns.resolve('example.com').then(\n-            addrs => log.debug(\"DNS resolution for example.com was successful\", addrs),\n-            err => {\n-                log.error(\n-                    \"DNS resolution for example.com failed, \" +\n-                    \"there might be an issue with Internet availability\"\n-                );\n-                log.error(err);\n-            }\n-        );\n-        return false;\n+        log.downloadError(err, \"language server\", source.repo.name);\n+        return null;\n     }\n \n     const binaryPath = path.join(source.dir, source.file);\n@@ -101,7 +111,7 @@ async function downloadServer(source: ArtifactSource.GithubRelease): Promise<boo\n         \"Rust analyzer language server was successfully installed \ud83e\udd80\"\n     );\n \n-    return true;\n+    return binaryPath;\n }\n \n function isBinaryAvailable(binaryPath: string): boolean {\n@@ -115,14 +125,3 @@ function isBinaryAvailable(binaryPath: string): boolean {\n \n     return res.status === 0;\n }\n-\n-function getServerVersion(storage: vscode.Memento): null | string {\n-    const version = storage.get<null | string>(\"server-version\", null);\n-    log.debug(\"Get server-version:\", version);\n-    return version;\n-}\n-\n-async function setServerVersion(storage: vscode.Memento, version: string): Promise<void> {\n-    log.debug(\"Set server-version:\", version);\n-    await storage.update(\"server-version\", version.toString());\n-}"}, {"sha": "ee67c750c1b13c6f6362e499f57760694a0df3f5", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e73811fbe634efec90a3e009a84fd8dda9f5697/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1e73811fbe634efec90a3e009a84fd8dda9f5697/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=1e73811fbe634efec90a3e009a84fd8dda9f5697", "patch": "@@ -8,6 +8,7 @@ import { activateHighlighting } from './highlighting';\n import { ensureServerBinary } from './installation/server';\n import { Config } from './config';\n import { log } from './util';\n+import { ensureProperExtensionVersion } from './installation/extension';\n \n let ctx: Ctx | undefined;\n \n@@ -34,7 +35,13 @@ export async function activate(context: vscode.ExtensionContext) {\n \n     const config = new Config(context);\n \n-    const serverPath = await ensureServerBinary(config.serverSource);\n+    vscode.workspace.onDidChangeConfiguration(() => ensureProperExtensionVersion(config));\n+\n+    // Don't await the user response here, otherwise we will block the lsp server bootstrap\n+    void ensureProperExtensionVersion(config);\n+\n+    const serverPath = await ensureServerBinary(config);\n+\n     if (serverPath == null) {\n         throw new Error(\n             \"Rust Analyzer Language Server is not available. \" +"}]}