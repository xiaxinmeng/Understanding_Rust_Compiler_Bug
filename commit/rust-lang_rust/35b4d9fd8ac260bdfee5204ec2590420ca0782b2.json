{"sha": "35b4d9fd8ac260bdfee5204ec2590420ca0782b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YjRkOWZkOGFjMjYwYmRmZWU1MjA0ZWMyNTkwNDIwY2EwNzgyYjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-29T07:36:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-29T07:36:59Z"}, "message": "print usage information on invalid command", "tree": {"sha": "a895fae849a287ddbbd9285e5fdcc5017a135f76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a895fae849a287ddbbd9285e5fdcc5017a135f76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35b4d9fd8ac260bdfee5204ec2590420ca0782b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35b4d9fd8ac260bdfee5204ec2590420ca0782b2", "html_url": "https://github.com/rust-lang/rust/commit/35b4d9fd8ac260bdfee5204ec2590420ca0782b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35b4d9fd8ac260bdfee5204ec2590420ca0782b2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf9f26401f8a41880203918ffbbfcac4ae5f16ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9f26401f8a41880203918ffbbfcac4ae5f16ac", "html_url": "https://github.com/rust-lang/rust/commit/bf9f26401f8a41880203918ffbbfcac4ae5f16ac"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "d683a08530083e8ceeabf49bc881e68e8e4909d1", "filename": "miri", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/35b4d9fd8ac260bdfee5204ec2590420ca0782b2/miri", "raw_url": "https://github.com/rust-lang/rust/raw/35b4d9fd8ac260bdfee5204ec2590420ca0782b2/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=35b4d9fd8ac260bdfee5204ec2590420ca0782b2", "patch": "@@ -1,37 +1,38 @@\n #!/bin/sh\n-## Usage\n-#\n-# COMMANDS\n-#\n-# ./miri install <flags>:\n-# Installs the miri driver and cargo-miri. <flags> are passed to `cargo\n-# install`.  Sets up the rpath such that the installed binary should work in any\n-# working directory.\n-#\n-# ./miri build <flags>:\n-# Just build miri.  <flags> are passed to `cargo build`.\n-#\n-# ./miri test <flags>:\n-# Build miri, set up a sysroot and then run the test suite. <flags> are passed\n-# to the final `cargo test` invocation.\n-#\n-# ./miri run <flags>:\n-# Build miri, set up a sysroot and then run the driver with the given <flags>.\n-#\n-# All commands also exist in a \"-debug\" variant (e.g. \"./miri run-debug\n-# <flags>\") which uses debug builds instead of release builds, for faster build\n-# times and slower execution times.\n-#\n-# ENVIRONMENT VARIABLES\n-#\n-# MIRI_SYSROOT:\n-# If already set, the \"sysroot setup\" step is skipped.\n-#\n-# CARGO_EXTRA_FLAGS:\n-# Pass extra flags to all cargo invocations.\n+set -e\n+USAGE=$(cat <<\"EOF\"\n+  COMMANDS\n+\n+./miri install <flags>:\n+Installs the miri driver and cargo-miri. <flags> are passed to `cargo\n+install`.  Sets up the rpath such that the installed binary should work in any\n+working directory.\n+\n+./miri build <flags>:\n+Just build miri.  <flags> are passed to `cargo build`.\n+\n+./miri test <flags>:\n+Build miri, set up a sysroot and then run the test suite. <flags> are passed\n+to the final `cargo test` invocation.\n+\n+./miri run <flags>:\n+Build miri, set up a sysroot and then run the driver with the given <flags>.\n+\n+All commands also exist in a \"-debug\" variant (e.g. \"./miri run-debug\n+<flags>\") which uses debug builds instead of release builds, for faster build\n+times and slower execution times.\n+\n+  ENVIRONMENT VARIABLES\n+\n+MIRI_SYSROOT:\n+If already set, the \"sysroot setup\" step is skipped.\n+\n+CARGO_EXTRA_FLAGS:\n+Pass extra flags to all cargo invocations.\n+EOF\n+)\n \n ## Preparation\n-set -e\n # I'd love to use `jq` for parsing the JSON properly, but macOS is totally underequipped for this kind of work.\n TARGET=$(rustc --print target-spec-json -Z unstable-options | grep llvm-target | cut -d '\"' -f 4)\n SYSROOT=$(rustc --print sysroot)\n@@ -135,4 +136,9 @@ run|run-debug)\n     # Then run the actual command.\n     exec cargo run $CARGO_BUILD_FLAGS \"$@\"\n     ;;\n+*)\n+    echo \"Unknown command: $COMMAND\"\n+    echo\n+    echo \"$USAGE\"\n+    exit 1\n esac"}]}