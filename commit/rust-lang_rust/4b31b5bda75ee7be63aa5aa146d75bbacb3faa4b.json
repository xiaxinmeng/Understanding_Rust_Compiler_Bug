{"sha": "4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzFiNWJkYTc1ZWU3YmU2M2FhNWFhMTQ2ZDc1YmJhY2IzZmFhNGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T14:27:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-23T17:16:09Z"}, "message": "Rollup merge of #49030 - Zoxc:misc, r=michaelwoerister\n\nMisc changes from my parallel rustc branch\n\nr? @michaelwoerister", "tree": {"sha": "8d9dd13645c9c9ba1856c365de32002dfbe2452e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d9dd13645c9c9ba1856c365de32002dfbe2452e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "html_url": "https://github.com/rust-lang/rust/commit/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f74d01cf29adc11b1bda3ca73537c49dcbb60c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/f74d01cf29adc11b1bda3ca73537c49dcbb60c52", "html_url": "https://github.com/rust-lang/rust/commit/f74d01cf29adc11b1bda3ca73537c49dcbb60c52"}, {"sha": "e09c2ff3f85b428cd8283a7f7d9b38843bbc95a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09c2ff3f85b428cd8283a7f7d9b38843bbc95a9", "html_url": "https://github.com/rust-lang/rust/commit/e09c2ff3f85b428cd8283a7f7d9b38843bbc95a9"}], "stats": {"total": 125, "additions": 60, "deletions": 65}, "files": [{"sha": "19a7576b7ceac4ed1abd99d739a9c89751ebb46b", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -19,7 +19,7 @@ use graphviz::IntoCow;\n use syntax_pos::Span;\n \n use std::borrow::Cow;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ConstEvalErr<'tcx>>;\n \n@@ -52,7 +52,7 @@ impl<'tcx> ConstVal<'tcx> {\n #[derive(Clone, Debug)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub kind: Rc<ErrKind<'tcx>>,\n+    pub kind: Lrc<ErrKind<'tcx>>,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "af1d2c77c28a867bf40460843ebb964cffef6772", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -15,7 +15,7 @@ use std::iter::FromIterator;\n use traits::query::CanonicalTyGoal;\n use ty::{self, Ty, TyCtxt};\n use ty::subst::Kind;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set\n@@ -183,13 +183,13 @@ impl_stable_hash_for!(struct DropckOutlivesResult<'tcx> {\n \n impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, DropckOutlivesResult<'tcx>> {\n     // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Rc<Canonical<'gcx, QueryResult<'gcx, DropckOutlivesResult<'gcx>>>>;\n+    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, DropckOutlivesResult<'gcx>>>>;\n \n     fn intern(\n         _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n         value: Canonical<'gcx, Self::Lifted>,\n     ) -> Self::Canonicalized {\n-        Rc::new(value)\n+        Lrc::new(value)\n     }\n }\n "}, {"sha": "63f50cff4c2ad2c01a37626d52bfe00d9a5e8b25", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -17,7 +17,7 @@ use infer::at::At;\n use infer::canonical::{Canonical, Canonicalize, QueryResult};\n use middle::const_val::ConstVal;\n use mir::interpret::GlobalId;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use traits::query::CanonicalProjectionGoal;\n use traits::project::Normalized;\n@@ -259,13 +259,13 @@ impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ty::ParamEnvAnd<'tcx, ty::Pr\n \n impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, NormalizationResult<'tcx>> {\n     // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Rc<Canonical<'gcx, QueryResult<'gcx, NormalizationResult<'gcx>>>>;\n+    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, NormalizationResult<'gcx>>>>;\n \n     fn intern(\n         _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n         value: Canonical<'gcx, Self::Lifted>,\n     ) -> Self::Canonicalized {\n-        Rc::new(value)\n+        Lrc::new(value)\n     }\n }\n "}, {"sha": "966c96e594fc4d1781f927b0cbb713a222dc58c6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -161,12 +161,12 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n                  -> Ty<'tcx> {\n         let ty = {\n             let mut interner = self.type_.borrow_mut();\n-            let global_interner = global_interners.map(|interners| {\n-                interners.type_.borrow_mut()\n-            });\n             if let Some(&Interned(ty)) = interner.get(&st) {\n                 return ty;\n             }\n+            let global_interner = global_interners.map(|interners| {\n+                interners.type_.borrow_mut()\n+            });\n             if let Some(ref interner) = global_interner {\n                 if let Some(&Interned(ty)) = interner.get(&st) {\n                     return ty;\n@@ -1010,17 +1010,16 @@ impl<'tcx> InterpretInterner<'tcx> {\n     }\n }\n \n-impl<'tcx> GlobalCtxt<'tcx> {\n+impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Get the global TyCtxt.\n-    pub fn global_tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n+    #[inline]\n+    pub fn global_tcx(self) -> TyCtxt<'a, 'gcx, 'gcx> {\n         TyCtxt {\n-            gcx: self,\n-            interners: &self.global_interners\n+            gcx: self.gcx,\n+            interners: &self.gcx.global_interners,\n         }\n     }\n-}\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n         self.global_arenas.generics.alloc(generics)\n     }\n@@ -1081,12 +1080,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self,\n         alloc: interpret::Allocation,\n     ) -> &'gcx interpret::Allocation {\n-        if let Some(alloc) = self.interpret_interner.inner.borrow().allocs.get(&alloc) {\n+        let allocs = &mut self.interpret_interner.inner.borrow_mut().allocs;\n+        if let Some(alloc) = allocs.get(&alloc) {\n             return alloc;\n         }\n \n         let interned = self.global_arenas.const_allocs.alloc(alloc);\n-        if let Some(prev) = self.interpret_interner.inner.borrow_mut().allocs.replace(interned) {\n+        if let Some(prev) = allocs.replace(interned) {\n             bug!(\"Tried to overwrite interned Allocation: {:#?}\", prev)\n         }\n         interned\n@@ -1113,24 +1113,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn intern_stability(self, stab: attr::Stability) -> &'gcx attr::Stability {\n-        if let Some(st) = self.stability_interner.borrow().get(&stab) {\n+        let mut stability_interner = self.stability_interner.borrow_mut();\n+        if let Some(st) = stability_interner.get(&stab) {\n             return st;\n         }\n \n         let interned = self.global_interners.arena.alloc(stab);\n-        if let Some(prev) = self.stability_interner.borrow_mut().replace(interned) {\n+        if let Some(prev) = stability_interner.replace(interned) {\n             bug!(\"Tried to overwrite interned Stability: {:?}\", prev)\n         }\n         interned\n     }\n \n     pub fn intern_layout(self, layout: LayoutDetails) -> &'gcx LayoutDetails {\n-        if let Some(layout) = self.layout_interner.borrow().get(&layout) {\n+        let mut layout_interner = self.layout_interner.borrow_mut();\n+        if let Some(layout) = layout_interner.get(&layout) {\n             return layout;\n         }\n \n         let interned = self.global_arenas.layout.alloc(layout);\n-        if let Some(prev) = self.layout_interner.borrow_mut().replace(interned) {\n+        if let Some(prev) = layout_interner.replace(interned) {\n             bug!(\"Tried to overwrite interned Layout: {:?}\", prev)\n         }\n         interned"}, {"sha": "3fc20508ad7ee0d901f064752870cdffaed364a2", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -18,6 +18,7 @@ use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n+use rustc_data_structures::sync::Lrc;\n use mir::interpret;\n \n use std::rc::Rc;\n@@ -465,7 +466,7 @@ impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n         tcx.lift(&*self.kind).map(|kind| {\n             ConstEvalErr {\n                 span: self.span,\n-                kind: Rc::new(kind),\n+                kind: Lrc::new(kind),\n             }\n         })\n     }"}, {"sha": "bf0b3726bb301a46f13a6d07b993ea2084ed154d", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -76,6 +76,14 @@ pub mod flock;\n pub mod sync;\n pub mod owning_ref;\n \n+pub struct OnDrop<F: Fn()>(pub F);\n+\n+impl<F: Fn()> Drop for OnDrop<F> {\n+      fn drop(&mut self) {\n+            (self.0)();\n+      }\n+}\n+\n // See comments in src/librustc/lib.rs\n #[doc(hidden)]\n pub fn __noop_fix_for_27438() {}"}, {"sha": "184ef1369761cb181501960b2484197037a14d46", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -26,11 +26,6 @@\n //!\n //! `MTLock` is a mutex which disappears if cfg!(parallel_queries) is false.\n //!\n-//! `rustc_global!` gives us a way to declare variables which are intended to be\n-//! global for the current rustc session. This currently maps to thread-locals,\n-//! since rustdoc uses the rustc libraries in multiple threads.\n-//! These globals should eventually be moved into the `Session` structure.\n-//!\n //! `rustc_erase_owner!` erases a OwningRef owner into Erased or Erased + Send + Sync\n //! depending on the value of cfg!(parallel_queries).\n \n@@ -228,31 +223,6 @@ pub fn assert_sync<T: ?Sized + Sync>() {}\n pub fn assert_send_val<T: ?Sized + Send>(_t: &T) {}\n pub fn assert_send_sync_val<T: ?Sized + Sync + Send>(_t: &T) {}\n \n-#[macro_export]\n-#[allow_internal_unstable]\n-macro_rules! rustc_global {\n-    // empty (base case for the recursion)\n-    () => {};\n-\n-    // process multiple declarations\n-    ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = $init:expr; $($rest:tt)*) => (\n-        thread_local!($(#[$attr])* $vis static $name: $t = $init);\n-        rustc_global!($($rest)*);\n-    );\n-\n-    // handle a single declaration\n-    ($(#[$attr:meta])* $vis:vis static $name:ident: $t:ty = $init:expr) => (\n-        thread_local!($(#[$attr])* $vis static $name: $t = $init);\n-    );\n-}\n-\n-#[macro_export]\n-macro_rules! rustc_access_global {\n-    ($name:path, $callback:expr) => {\n-        $name.with($callback)\n-    }\n-}\n-\n impl<T: Copy + Debug> Debug for LockCell<T> {\n     fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n         f.debug_struct(\"LockCell\")\n@@ -363,6 +333,13 @@ impl<T> Lock<T> {\n     }\n }\n \n+impl<T: Default> Default for Lock<T> {\n+    #[inline]\n+    fn default() -> Self {\n+        Lock::new(T::default())\n+    }\n+}\n+\n // FIXME: Probably a bad idea\n impl<T: Clone> Clone for Lock<T> {\n     #[inline]"}, {"sha": "87219511e6ff3a3608649989039983a33babe49e", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -14,7 +14,7 @@ use super::{Place, EvalContext, StackPopCleanup, ValTy, PlaceExtra, Memory};\n \n use std::fmt;\n use std::error::Error;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n \n pub fn mk_borrowck_eval_cx<'a, 'mir, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -485,7 +485,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do match-check before building MIR\n         if tcx.check_match(def_id).is_err() {\n             return Err(ConstEvalErr {\n-                kind: Rc::new(CheckMatchError),\n+                kind: Lrc::new(CheckMatchError),\n                 span,\n             });\n         }\n@@ -497,7 +497,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         // Do not continue into miri if typeck errors occurred; it will fail horribly\n         if tables.tainted_by_errors {\n             return Err(ConstEvalErr {\n-                kind: Rc::new(TypeckError),\n+                kind: Lrc::new(TypeckError),\n                 span,\n             });\n         }"}, {"sha": "1fe2f87128abddcb099554aefea8df2fe6acb03b", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -16,14 +16,14 @@ use rustc::traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResu\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::ty::subst::Subst;\n use rustc::util::nodemap::FxHashSet;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use syntax::codemap::{Span, DUMMY_SP};\n use util;\n \n crate fn dropck_outlives<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalTyGoal<'tcx>,\n-) -> Result<Rc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n     debug!(\"dropck_outlives(goal={:#?})\", goal);\n \n     tcx.infer_ctxt().enter(|ref infcx| {"}, {"sha": "62d5ef11551c0a044f3da4c499957bd51c911fac", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -14,15 +14,15 @@ use rustc::traits::{self, FulfillmentContext, Normalized, ObligationCause,\n use rustc::traits::query::{CanonicalProjectionGoal, NoSolution, normalize::NormalizationResult};\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use rustc::util::common::CellUsizeExt;\n-use std::rc::Rc;\n+use rustc_data_structures::sync::Lrc;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::DUMMY_SP;\n use util;\n \n crate fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n-) -> Result<Rc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);\n \n     tcx.sess.perf_stats.normalize_projection_ty.increment();"}, {"sha": "5a7b7e9ceca5c68f6e79b136bb94be07ef0cc5ef", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -184,8 +184,12 @@ impl SpanData {\n     }\n }\n \n-// The interner in thread-local, so `Span` shouldn't move between threads.\n+// The interner is pointed to by a thread local value which is only set on the main thread\n+// with parallelization is disabled. So we don't allow Span to transfer between threads\n+// to avoid panics and other errors, even though it would be memory safe to do so.\n+#[cfg(not(parallel_queries))]\n impl !Send for Span {}\n+#[cfg(not(parallel_queries))]\n impl !Sync for Span {}\n \n impl PartialOrd for Span {"}, {"sha": "098eafef2585c146a751ce2fb9c382d4466d52f1", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -83,8 +83,12 @@ impl Decodable for Ident {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Symbol(u32);\n \n-// The interner in thread-local, so `Symbol` shouldn't move between threads.\n+// The interner is pointed to by a thread local value which is only set on the main thread\n+// with parallelization is disabled. So we don't allow Symbol to transfer between threads\n+// to avoid panics and other errors, even though it would be memory safe to do so.\n+#[cfg(not(parallel_queries))]\n impl !Send for Symbol { }\n+#[cfg(not(parallel_queries))]\n impl !Sync for Symbol { }\n \n impl Symbol {"}, {"sha": "798c214bc471569468aaaeabba782560d838263a", "filename": "src/test/run-pass-fulldeps/issue-35829.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs?ref=4b31b5bda75ee7be63aa5aa146d75bbacb3faa4b", "patch": "@@ -20,8 +20,7 @@ use syntax::ext::expand::ExpansionConfig;\n use syntax::parse::ParseSess;\n use syntax::codemap::{FilePathMapping, dummy_spanned};\n use syntax::print::pprust::expr_to_string;\n-use syntax::ast::{Expr, ExprKind, LitKind, StrStyle, RangeLimits};\n-use syntax::symbol::Symbol;\n+use syntax::ast::{ExprKind, LitKind, RangeLimits};\n use syntax::ptr::P;\n \n use rustc_data_structures::sync::Lrc;"}]}