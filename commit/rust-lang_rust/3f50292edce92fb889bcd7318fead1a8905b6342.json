{"sha": "3f50292edce92fb889bcd7318fead1a8905b6342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTAyOTJlZGNlOTJmYjg4OWJjZDczMThmZWFkMWE4OTA1YjYzNDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-04T18:47:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-04T18:47:46Z"}, "message": "edit Mutex comment", "tree": {"sha": "7afad0ac402cf5cdc995b1c1ddf0faeb449f0a75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7afad0ac402cf5cdc995b1c1ddf0faeb449f0a75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f50292edce92fb889bcd7318fead1a8905b6342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f50292edce92fb889bcd7318fead1a8905b6342", "html_url": "https://github.com/rust-lang/rust/commit/3f50292edce92fb889bcd7318fead1a8905b6342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f50292edce92fb889bcd7318fead1a8905b6342/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40a6b8c339376b7879016d5d2a015b6ac43c4c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a6b8c339376b7879016d5d2a015b6ac43c4c0c", "html_url": "https://github.com/rust-lang/rust/commit/40a6b8c339376b7879016d5d2a015b6ac43c4c0c"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "45c600f75f5cf577a03b4bfda78c5be6f275f275", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f50292edce92fb889bcd7318fead1a8905b6342/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f50292edce92fb889bcd7318fead1a8905b6342/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=3f50292edce92fb889bcd7318fead1a8905b6342", "patch": "@@ -30,13 +30,15 @@ impl Mutex {\n         // a type of PTHREAD_MUTEX_DEFAULT, which has undefined behavior if you\n         // try to re-lock it from the same thread when you already hold a lock\n         // (https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_init.html).\n+        // This is the case even if PTHREAD_MUTEX_DEFAULT == PTHREAD_MUTEX_NORMAL\n+        // (https://github.com/rust-lang/rust/issues/33770#issuecomment-220847521) -- in that\n+        // case, `pthread_mutexattr_settype(PTHREAD_MUTEX_DEFAULT)` will of course be the same\n+        // as setting it to `PTHREAD_MUTEX_NORMAL`, but not setting any mode will result in\n+        // a Mutex where re-locking is UB.\n         //\n         // In practice, glibc takes advantage of this undefined behavior to\n         // implement hardware lock elision, which uses hardware transactional\n-        // memory to avoid acquiring the lock.\n-        // This is the case even if PTHREAD_MUTEX_DEFAULT == PTHREAD_MUTEX_NORMAL\n-        // (https://github.com/rust-lang/rust/issues/33770#issuecomment-220847521).\n-        // As a consequence, while a transaction is in\n+        // memory to avoid acquiring the lock. While a transaction is in\n         // progress, the lock appears to be unlocked. This isn't a problem for\n         // other threads since the transactional memory will abort if a conflict\n         // is detected, however no abort is generated when re-locking from the"}]}