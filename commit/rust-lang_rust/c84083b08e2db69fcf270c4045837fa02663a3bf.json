{"sha": "c84083b08e2db69fcf270c4045837fa02663a3bf", "node_id": "C_kwDOAAsO6NoAKGM4NDA4M2IwOGUyZGI2OWZjZjI3MGM0MDQ1ODM3ZmEwMjY2M2EzYmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T18:15:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T18:15:06Z"}, "message": "Auto merge of #101086 - cjgillot:thir-param, r=oli-obk\n\nCompute information about function parameters on THIR\n\nThis avoids some manipulation of typeck results while building MIR.", "tree": {"sha": "277677faf6f1f7a00a808329f8d15cfd05f77829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/277677faf6f1f7a00a808329f8d15cfd05f77829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c84083b08e2db69fcf270c4045837fa02663a3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c84083b08e2db69fcf270c4045837fa02663a3bf", "html_url": "https://github.com/rust-lang/rust/commit/c84083b08e2db69fcf270c4045837fa02663a3bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c84083b08e2db69fcf270c4045837fa02663a3bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce51982b8550c782ded466c1abff0d2b2e21c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce51982b8550c782ded466c1abff0d2b2e21c4e", "html_url": "https://github.com/rust-lang/rust/commit/1ce51982b8550c782ded466c1abff0d2b2e21c4e"}, {"sha": "ce9daa2f914dd48adef4e9e661391f6cb40e9893", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9daa2f914dd48adef4e9e661391f6cb40e9893", "html_url": "https://github.com/rust-lang/rust/commit/ce9daa2f914dd48adef4e9e661391f6cb40e9893"}], "stats": {"total": 1595, "additions": 680, "deletions": 915}, "files": [{"sha": "8d4c38d3a8e8c3bf8944de3d40f52982608d7aaf", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -360,7 +360,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 diag.span_label(upvar_span, \"captured outer variable\");\n                 diag.span_label(\n-                    self.body.span,\n+                    self.infcx.tcx.def_span(def_id),\n                     format!(\"captured by this `{closure_kind}` closure\"),\n                 );\n "}, {"sha": "6b5014fa9099706786a5a0d95860df421839e483", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -9,10 +9,7 @@ use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::{\n     hir::place::PlaceBase,\n-    mir::{\n-        self, BindingForm, ClearCrossCrate, ImplicitSelfKind, Local, LocalDecl, LocalInfo,\n-        LocalKind, Location,\n-    },\n+    mir::{self, BindingForm, ClearCrossCrate, Local, LocalDecl, LocalInfo, LocalKind, Location},\n };\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n@@ -312,7 +309,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     && !matches!(\n                         decl.local_info,\n                         Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n-                            ImplicitSelfKind::MutRef\n+                            hir::ImplicitSelfKind::MutRef\n                         ))))\n                     )\n                 {\n@@ -973,6 +970,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         let hir = self.infcx.tcx.hir();\n         let closure_id = self.mir_hir_id();\n+        let closure_span = self.infcx.tcx.def_span(self.mir_def_id());\n         let fn_call_id = hir.get_parent_node(closure_id);\n         let node = hir.get(fn_call_id);\n         let def_id = hir.enclosing_body_owner(fn_call_id);\n@@ -1024,7 +1022,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if let Some(span) = arg {\n                     err.span_label(span, \"change this to accept `FnMut` instead of `Fn`\");\n                     err.span_label(func.span, \"expects `Fn` instead of `FnMut`\");\n-                    err.span_label(self.body.span, \"in this closure\");\n+                    err.span_label(closure_span, \"in this closure\");\n                     look_at_return = false;\n                 }\n             }\n@@ -1050,7 +1048,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         sig.decl.output.span(),\n                         \"change this to return `FnMut` instead of `Fn`\",\n                     );\n-                    err.span_label(self.body.span, \"in this closure\");\n+                    err.span_label(closure_span, \"in this closure\");\n                 }\n                 _ => {}\n             }\n@@ -1074,7 +1072,7 @@ fn mut_borrow_of_mutable_ref(local_decl: &LocalDecl<'_>, local_name: Option<Symb\n             //\n             // Deliberately fall into this case for all implicit self types,\n             // so that we don't fall in to the next case with them.\n-            *kind == mir::ImplicitSelfKind::MutRef\n+            *kind == hir::ImplicitSelfKind::MutRef\n         }\n         _ if Some(kw::SelfLower) == local_name => {\n             // Otherwise, check if the name is the `self` keyword - in which case"}, {"sha": "12b2481cc7907ba6ec21a707632428a17945efeb", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -389,8 +389,9 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     // viewing the intraprocedural state, the -Zdump-mir output is\n     // better.\n \n+    let def_span = tcx.def_span(body.source.def_id());\n     let mut err = if let Some(closure_region_requirements) = closure_region_requirements {\n-        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"external requirements\");\n+        let mut err = tcx.sess.diagnostic().span_note_diag(def_span, \"external requirements\");\n \n         regioncx.annotate(tcx, &mut err);\n \n@@ -409,7 +410,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n \n         err\n     } else {\n-        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"no external requirements\");\n+        let mut err = tcx.sess.diagnostic().span_note_diag(def_span, \"no external requirements\");\n         regioncx.annotate(tcx, &mut err);\n \n         err"}, {"sha": "037cbc1be9adf03cff6287cb6c5b5de3353a6541", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -2661,7 +2661,7 @@ pub struct FnDecl<'hir> {\n }\n \n /// Represents what type of implicit self a function has, if any.\n-#[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum ImplicitSelfKind {\n     /// Represents a `fn x(self);`.\n     Imm,"}, {"sha": "9a6d34c8ddd30f7ab003996c8ae7f8c0a262b783", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n-use rustc_hir::{self, GeneratorKind};\n+use rustc_hir::{self, GeneratorKind, ImplicitSelfKind};\n use rustc_hir::{self as hir, HirId};\n use rustc_session::Session;\n use rustc_target::abi::{Size, VariantIdx};\n@@ -653,22 +653,6 @@ pub enum BindingForm<'tcx> {\n     RefForGuard,\n }\n \n-/// Represents what type of implicit self a function has, if any.\n-#[derive(Clone, Copy, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n-pub enum ImplicitSelfKind {\n-    /// Represents a `fn x(self);`.\n-    Imm,\n-    /// Represents a `fn x(mut self);`.\n-    Mut,\n-    /// Represents a `fn x(&self);`.\n-    ImmRef,\n-    /// Represents a `fn x(&mut self);`.\n-    MutRef,\n-    /// Represents when a function does not have a self argument or\n-    /// when a function has a `self: X` argument.\n-    None,\n-}\n-\n TrivialTypeTraversalAndLiftImpls! { BindingForm<'tcx>, }\n \n mod binding_form_impl {"}, {"sha": "165b9103968d04cc9d6d1375ff28ed0062cc3ec4", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -73,11 +73,29 @@ macro_rules! thir_with_elements {\n     }\n }\n \n+pub const UPVAR_ENV_PARAM: ParamId = ParamId::from_u32(0);\n+\n thir_with_elements! {\n     arms: ArmId => Arm<'tcx> => \"a{}\",\n     blocks: BlockId => Block => \"b{}\",\n     exprs: ExprId => Expr<'tcx> => \"e{}\",\n     stmts: StmtId => Stmt<'tcx> => \"s{}\",\n+    params: ParamId => Param<'tcx> => \"p{}\",\n+}\n+\n+/// Description of a type-checked function parameter.\n+#[derive(Clone, Debug, HashStable)]\n+pub struct Param<'tcx> {\n+    /// The pattern that appears in the parameter list, or None for implicit parameters.\n+    pub pat: Option<Box<Pat<'tcx>>>,\n+    /// The possibly inferred type.\n+    pub ty: Ty<'tcx>,\n+    /// Span of the explicitly provided type, or None if inferred for closures.\n+    pub ty_span: Option<Span>,\n+    /// Whether this param is `self`, and how it is bound.\n+    pub self_kind: Option<hir::ImplicitSelfKind>,\n+    /// HirId for lints.\n+    pub hir_id: Option<hir::HirId>,\n }\n \n #[derive(Copy, Clone, Debug, HashStable)]\n@@ -548,6 +566,15 @@ impl<'tcx> Pat<'tcx> {\n     pub fn wildcard_from_ty(ty: Ty<'tcx>) -> Self {\n         Pat { ty, span: DUMMY_SP, kind: PatKind::Wild }\n     }\n+\n+    pub fn simple_ident(&self) -> Option<Symbol> {\n+        match self.kind {\n+            PatKind::Binding { name, mode: BindingMode::ByValue, subpattern: None, .. } => {\n+                Some(name)\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, HashStable)]"}, {"sha": "b1cb9b9f084a46790e7dc8c74d2c5cc25b6183de", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             _ => {\n                 let place_builder = unpack!(block = self.as_place_builder(block, initializer));\n-                self.place_into_pattern(block, irrefutable_pat, place_builder, true)\n+                self.place_into_pattern(block, &irrefutable_pat, place_builder, true)\n             }\n         }\n     }"}, {"sha": "25c4e51cb9255c6d256058140b93000e2b912f79", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 224, "deletions": 373, "changes": 597, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -1,16 +1,14 @@\n-use crate::build;\n pub(crate) use crate::build::expr::as_constant::lit_to_mir_constant;\n use crate::build::expr::as_place::PlaceBuilder;\n use crate::build::scope::DropKind;\n-use crate::thir::pattern::pat_from_hir;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GeneratorKind, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n@@ -19,8 +17,9 @@ use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::*;\n-use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, LocalVarId, PatKind, Thir};\n-use rustc_middle::ty::subst::Subst;\n+use rustc_middle::thir::{\n+    self, BindingMode, Expr, ExprId, LintLevel, LocalVarId, Param, ParamId, PatKind, Thir,\n+};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable, TypeckResults};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -48,9 +47,7 @@ pub(crate) fn mir_built<'tcx>(\n \n /// Construct the MIR for a given `DefId`.\n fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n-    let id = tcx.hir().local_def_id_to_hir_id(def.did);\n     let body_owner_kind = tcx.hir().body_owner_kind(def.did);\n-    let typeck_results = tcx.typeck_opt_const_arg(def);\n \n     // Ensure unsafeck and abstract const building is ran before we steal the THIR.\n     // We can't use `ensure()` for `thir_abstract_const` as it doesn't compute the query\n@@ -67,246 +64,42 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n         }\n     }\n \n-    // Figure out what primary body this item has.\n-    let (body_id, return_ty_span, span_with_body) = match tcx.hir().get(id) {\n-        Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Closure(hir::Closure { fn_decl, body, .. }),\n-            ..\n-        }) => (*body, fn_decl.output.span(), None),\n-        Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),\n-            span,\n-            ..\n-        })\n-        | Node::ImplItem(hir::ImplItem {\n-            kind: hir::ImplItemKind::Fn(hir::FnSig { decl, .. }, body_id),\n-            span,\n-            ..\n-        })\n-        | Node::TraitItem(hir::TraitItem {\n-            kind: hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitFn::Provided(body_id)),\n-            span,\n-            ..\n-        }) => {\n-            // Use the `Span` of the `Item/ImplItem/TraitItem` as the body span,\n-            // since the def span of a function does not include the body\n-            (*body_id, decl.output.span(), Some(*span))\n-        }\n-        Node::Item(hir::Item {\n-            kind: hir::ItemKind::Static(ty, _, body_id) | hir::ItemKind::Const(ty, body_id),\n-            ..\n-        })\n-        | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, body_id), .. })\n-        | Node::TraitItem(hir::TraitItem {\n-            kind: hir::TraitItemKind::Const(ty, Some(body_id)),\n-            ..\n-        }) => (*body_id, ty.span, None),\n-        Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => {\n-            (*body, tcx.hir().span(*hir_id), None)\n-        }\n-\n-        _ => span_bug!(tcx.hir().span(id), \"can't build MIR for {:?}\", def.did),\n-    };\n-\n-    // If we don't have a specialized span for the body, just use the\n-    // normal def span.\n-    let span_with_body = span_with_body.unwrap_or_else(|| tcx.hir().span(id));\n-\n-    tcx.infer_ctxt().enter(|infcx| {\n-        let body = if let Some(error_reported) = typeck_results.tainted_by_errors {\n-            build::construct_error(&infcx, def, id, body_id, body_owner_kind, error_reported)\n-        } else if body_owner_kind.is_fn_or_closure() {\n-            // fetch the fully liberated fn signature (that is, all bound\n-            // types/lifetimes replaced)\n-            let fn_sig = typeck_results.liberated_fn_sigs()[id];\n-            let fn_def_id = tcx.hir().local_def_id(id);\n-\n-            let safety = match fn_sig.unsafety {\n-                hir::Unsafety::Normal => Safety::Safe,\n-                hir::Unsafety::Unsafe => Safety::FnUnsafe,\n-            };\n-\n-            let body = tcx.hir().body(body_id);\n-            let (thir, expr) = tcx\n-                .thir_body(def)\n-                .unwrap_or_else(|_| (tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0)));\n+    let body = match tcx.thir_body(def) {\n+        Err(error_reported) => construct_error(tcx, def.did, body_owner_kind, error_reported),\n+        Ok((thir, expr)) => {\n             // We ran all queries that depended on THIR at the beginning\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();\n-            let ty = tcx.type_of(fn_def_id);\n-            let mut abi = fn_sig.abi;\n-            let implicit_argument = match ty.kind() {\n-                ty::Closure(..) => {\n-                    // HACK(eddyb) Avoid having RustCall on closures,\n-                    // as it adds unnecessary (and wrong) auto-tupling.\n-                    abi = Abi::Rust;\n-                    vec![ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None)]\n-                }\n-                ty::Generator(..) => {\n-                    let gen_ty = tcx.typeck_body(body_id).node_type(id);\n-\n-                    // The resume argument may be missing, in that case we need to provide it here.\n-                    // It will always be `()` in this case.\n-                    if body.params.is_empty() {\n-                        vec![\n-                            ArgInfo(gen_ty, None, None, None),\n-                            ArgInfo(tcx.mk_unit(), None, None, None),\n-                        ]\n-                    } else {\n-                        vec![ArgInfo(gen_ty, None, None, None)]\n-                    }\n-                }\n-                _ => vec![],\n-            };\n \n-            let explicit_arguments = body.params.iter().enumerate().map(|(index, arg)| {\n-                let owner_id = tcx.hir().body_owner(body_id);\n-                let opt_ty_info;\n-                let self_arg;\n-                if let Some(ref fn_decl) = tcx.hir().fn_decl_by_hir_id(owner_id) {\n-                    opt_ty_info = fn_decl\n-                        .inputs\n-                        .get(index)\n-                        // Make sure that inferred closure args have no type span\n-                        .and_then(|ty| if arg.pat.span != ty.span { Some(ty.span) } else { None });\n-                    self_arg = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n-                        match fn_decl.implicit_self {\n-                            hir::ImplicitSelfKind::Imm => Some(ImplicitSelfKind::Imm),\n-                            hir::ImplicitSelfKind::Mut => Some(ImplicitSelfKind::Mut),\n-                            hir::ImplicitSelfKind::ImmRef => Some(ImplicitSelfKind::ImmRef),\n-                            hir::ImplicitSelfKind::MutRef => Some(ImplicitSelfKind::MutRef),\n-                            _ => None,\n-                        }\n-                    } else {\n-                        None\n-                    };\n-                } else {\n-                    opt_ty_info = None;\n-                    self_arg = None;\n-                }\n-\n-                // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n-                // (as it's created inside the body itself, not passed in from outside).\n-                let ty = if fn_sig.c_variadic && index == fn_sig.inputs().len() {\n-                    let va_list_did = tcx.require_lang_item(LangItem::VaList, Some(arg.span));\n-\n-                    tcx.bound_type_of(va_list_did).subst(tcx, &[tcx.lifetimes.re_erased.into()])\n-                } else {\n-                    fn_sig.inputs()[index]\n-                };\n-\n-                ArgInfo(ty, opt_ty_info, Some(&arg), self_arg)\n-            });\n-\n-            let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n-\n-            let (yield_ty, return_ty) = if body.generator_kind.is_some() {\n-                let gen_ty = tcx.typeck_body(body_id).node_type(id);\n-                let gen_sig = match gen_ty.kind() {\n-                    ty::Generator(_, gen_substs, ..) => gen_substs.as_generator().sig(),\n-                    _ => span_bug!(tcx.hir().span(id), \"generator w/o generator type: {:?}\", ty),\n-                };\n-                (Some(gen_sig.yield_ty), gen_sig.return_ty)\n+            if body_owner_kind.is_fn_or_closure() {\n+                construct_fn(tcx, def, &thir, expr)\n             } else {\n-                (None, fn_sig.output())\n-            };\n-\n-            let mut mir = build::construct_fn(\n-                &thir,\n-                &infcx,\n-                def,\n-                id,\n-                arguments,\n-                safety,\n-                abi,\n-                return_ty,\n-                return_ty_span,\n-                body,\n-                expr,\n-                span_with_body,\n-            );\n-            if yield_ty.is_some() {\n-                mir.generator.as_mut().unwrap().yield_ty = yield_ty;\n+                construct_const(tcx, def, &thir, expr)\n             }\n-            mir\n-        } else {\n-            // Get the revealed type of this const. This is *not* the adjusted\n-            // type of its body, which may be a subtype of this type. For\n-            // example:\n-            //\n-            // fn foo(_: &()) {}\n-            // static X: fn(&'static ()) = foo;\n-            //\n-            // The adjusted type of the body of X is `for<'a> fn(&'a ())` which\n-            // is not the same as the type of X. We need the type of the return\n-            // place to be the type of the constant because NLL typeck will\n-            // equate them.\n-\n-            let return_ty = typeck_results.node_type(id);\n-\n-            let (thir, expr) = tcx\n-                .thir_body(def)\n-                .unwrap_or_else(|_| (tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0)));\n-            // We ran all queries that depended on THIR at the beginning\n-            // of `mir_build`, so now we can steal it\n-            let thir = thir.steal();\n-\n-            let span_with_body = span_with_body.to(tcx.hir().span(body_id.hir_id));\n-\n-            build::construct_const(\n-                &thir,\n-                &infcx,\n-                expr,\n-                def,\n-                id,\n-                return_ty,\n-                return_ty_span,\n-                span_with_body,\n-            )\n-        };\n+        }\n+    };\n \n-        lints::check(tcx, &body);\n-\n-        // The borrow checker will replace all the regions here with its own\n-        // inference variables. There's no point having non-erased regions here.\n-        // The exception is `body.user_type_annotations`, which is used unmodified\n-        // by borrow checking.\n-        debug_assert!(\n-            !(body.local_decls.has_free_regions()\n-                || body.basic_blocks.has_free_regions()\n-                || body.var_debug_info.has_free_regions()\n-                || body.yield_ty().has_free_regions()),\n-            \"Unexpected free regions in MIR: {:?}\",\n-            body,\n-        );\n+    lints::check(tcx, &body);\n+\n+    // The borrow checker will replace all the regions here with its own\n+    // inference variables. There's no point having non-erased regions here.\n+    // The exception is `body.user_type_annotations`, which is used unmodified\n+    // by borrow checking.\n+    debug_assert!(\n+        !(body.local_decls.has_free_regions()\n+            || body.basic_blocks.has_free_regions()\n+            || body.var_debug_info.has_free_regions()\n+            || body.yield_ty().has_free_regions()),\n+        \"Unexpected free regions in MIR: {:?}\",\n+        body,\n+    );\n \n-        body\n-    })\n+    body\n }\n \n ///////////////////////////////////////////////////////////////////////////\n // BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-fn liberated_closure_env_ty(\n-    tcx: TyCtxt<'_>,\n-    closure_expr_id: hir::HirId,\n-    body_id: hir::BodyId,\n-) -> Ty<'_> {\n-    let closure_ty = tcx.typeck_body(body_id).node_type(closure_expr_id);\n-\n-    let ty::Closure(closure_def_id, closure_substs) = *closure_ty.kind() else {\n-        bug!(\"closure expr does not have closure type: {:?}\", closure_ty);\n-    };\n-\n-    let bound_vars =\n-        tcx.mk_bound_variable_kinds(std::iter::once(ty::BoundVariableKind::Region(ty::BrEnv)));\n-    let br =\n-        ty::BoundRegion { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind: ty::BrEnv };\n-    let env_region = ty::ReLateBound(ty::INNERMOST, br);\n-    let closure_env_ty = tcx.closure_env_ty(closure_def_id, closure_substs, env_region).unwrap();\n-    tcx.erase_late_bound_regions(ty::Binder::bind_with_vars(closure_env_ty, bound_vars))\n-}\n-\n #[derive(Debug, PartialEq, Eq)]\n enum BlockFrame {\n     /// Evaluation is currently within a statement.\n@@ -364,7 +157,7 @@ struct BlockContext(Vec<BlockFrame>);\n \n struct Builder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n+    infcx: InferCtxt<'a, 'tcx>,\n     typeck_results: &'tcx TypeckResults<'tcx>,\n     region_scope_tree: &'tcx region::ScopeTree,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -636,148 +429,212 @@ macro_rules! unpack {\n ///////////////////////////////////////////////////////////////////////////\n /// the main entry point for building MIR for a function\n \n-struct ArgInfo<'tcx>(\n-    Ty<'tcx>,\n-    Option<Span>,\n-    Option<&'tcx hir::Param<'tcx>>,\n-    Option<ImplicitSelfKind>,\n-);\n-\n-fn construct_fn<'tcx, A>(\n-    thir: &Thir<'tcx>,\n-    infcx: &InferCtxt<'_, 'tcx>,\n+fn construct_fn<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     fn_def: ty::WithOptConstParam<LocalDefId>,\n-    fn_id: hir::HirId,\n-    arguments: A,\n-    safety: Safety,\n-    abi: Abi,\n-    return_ty: Ty<'tcx>,\n-    return_ty_span: Span,\n-    body: &'tcx hir::Body<'tcx>,\n+    thir: &Thir<'tcx>,\n     expr: ExprId,\n-    span_with_body: Span,\n-) -> Body<'tcx>\n-where\n-    A: Iterator<Item = ArgInfo<'tcx>>,\n-{\n-    let arguments: Vec<_> = arguments.collect();\n-\n-    let tcx = infcx.tcx;\n-    let span = tcx.hir().span(fn_id);\n-\n-    let mut builder = Builder::new(\n-        thir,\n-        infcx,\n-        fn_def,\n-        fn_id,\n-        span_with_body,\n-        arguments.len(),\n-        safety,\n-        return_ty,\n-        return_ty_span,\n-        body.generator_kind,\n-    );\n+) -> Body<'tcx> {\n+    let span = tcx.def_span(fn_def.did);\n+    let fn_id = tcx.hir().local_def_id_to_hir_id(fn_def.did);\n+    let generator_kind = tcx.generator_kind(fn_def.did);\n \n-    let call_site_scope =\n-        region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::CallSite };\n-    let arg_scope =\n-        region::Scope { id: body.value.hir_id.local_id, data: region::ScopeData::Arguments };\n-    let source_info = builder.source_info(span);\n-    let call_site_s = (call_site_scope, source_info);\n-    unpack!(builder.in_scope(call_site_s, LintLevel::Inherited, |builder| {\n-        let arg_scope_s = (arg_scope, source_info);\n-        // Attribute epilogue to function's closing brace\n-        let fn_end = span_with_body.shrink_to_hi();\n-        let return_block =\n-            unpack!(builder.in_breakable_scope(None, Place::return_place(), fn_end, |builder| {\n-                Some(builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n-                    builder.args_and_body(\n-                        START_BLOCK,\n-                        fn_def.did,\n-                        &arguments,\n-                        arg_scope,\n-                        &thir[expr],\n-                    )\n-                }))\n-            }));\n-        let source_info = builder.source_info(fn_end);\n-        builder.cfg.terminate(return_block, source_info, TerminatorKind::Return);\n-        builder.build_drop_trees();\n-        return_block.unit()\n-    }));\n+    // Figure out what primary body this item has.\n+    let body_id = tcx.hir().body_owned_by(fn_def.did);\n+    let span_with_body = tcx.hir().span_with_body(fn_id);\n+    let return_ty_span = tcx\n+        .hir()\n+        .fn_decl_by_hir_id(fn_id)\n+        .unwrap_or_else(|| span_bug!(span, \"can't build MIR for {:?}\", fn_def.did))\n+        .output\n+        .span();\n+\n+    // fetch the fully liberated fn signature (that is, all bound\n+    // types/lifetimes replaced)\n+    let typeck_results = tcx.typeck_opt_const_arg(fn_def);\n+    let fn_sig = typeck_results.liberated_fn_sigs()[fn_id];\n+\n+    let safety = match fn_sig.unsafety {\n+        hir::Unsafety::Normal => Safety::Safe,\n+        hir::Unsafety::Unsafe => Safety::FnUnsafe,\n+    };\n+\n+    let mut abi = fn_sig.abi;\n+    if let DefKind::Closure = tcx.def_kind(fn_def.did) {\n+        // HACK(eddyb) Avoid having RustCall on closures,\n+        // as it adds unnecessary (and wrong) auto-tupling.\n+        abi = Abi::Rust;\n+    }\n+\n+    let arguments = &thir.params;\n+\n+    let (yield_ty, return_ty) = if generator_kind.is_some() {\n+        let gen_ty = arguments[thir::UPVAR_ENV_PARAM].ty;\n+        let gen_sig = match gen_ty.kind() {\n+            ty::Generator(_, gen_substs, ..) => gen_substs.as_generator().sig(),\n+            _ => {\n+                span_bug!(span, \"generator w/o generator type: {:?}\", gen_ty)\n+            }\n+        };\n+        (Some(gen_sig.yield_ty), gen_sig.return_ty)\n+    } else {\n+        (None, fn_sig.output())\n+    };\n \n-    let spread_arg = if abi == Abi::RustCall {\n+    let mut body = tcx.infer_ctxt().enter(|infcx| {\n+        let mut builder = Builder::new(\n+            thir,\n+            infcx,\n+            fn_def,\n+            fn_id,\n+            span_with_body,\n+            arguments.len(),\n+            safety,\n+            return_ty,\n+            return_ty_span,\n+            generator_kind,\n+        );\n+\n+        let call_site_scope =\n+            region::Scope { id: body_id.hir_id.local_id, data: region::ScopeData::CallSite };\n+        let arg_scope =\n+            region::Scope { id: body_id.hir_id.local_id, data: region::ScopeData::Arguments };\n+        let source_info = builder.source_info(span);\n+        let call_site_s = (call_site_scope, source_info);\n+        unpack!(builder.in_scope(call_site_s, LintLevel::Inherited, |builder| {\n+            let arg_scope_s = (arg_scope, source_info);\n+            // Attribute epilogue to function's closing brace\n+            let fn_end = span_with_body.shrink_to_hi();\n+            let return_block = unpack!(builder.in_breakable_scope(\n+                None,\n+                Place::return_place(),\n+                fn_end,\n+                |builder| {\n+                    Some(builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n+                        builder.args_and_body(\n+                            START_BLOCK,\n+                            fn_def.did,\n+                            arguments,\n+                            arg_scope,\n+                            &thir[expr],\n+                        )\n+                    }))\n+                }\n+            ));\n+            let source_info = builder.source_info(fn_end);\n+            builder.cfg.terminate(return_block, source_info, TerminatorKind::Return);\n+            builder.build_drop_trees();\n+            return_block.unit()\n+        }));\n+\n+        builder.finish()\n+    });\n+\n+    body.spread_arg = if abi == Abi::RustCall {\n         // RustCall pseudo-ABI untuples the last argument.\n         Some(Local::new(arguments.len()))\n     } else {\n         None\n     };\n-\n-    let mut body = builder.finish();\n-    body.spread_arg = spread_arg;\n+    if yield_ty.is_some() {\n+        body.generator.as_mut().unwrap().yield_ty = yield_ty;\n+    }\n     body\n }\n \n fn construct_const<'a, 'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n     thir: &'a Thir<'tcx>,\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n     expr: ExprId,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-    hir_id: hir::HirId,\n-    const_ty: Ty<'tcx>,\n-    const_ty_span: Span,\n-    span: Span,\n ) -> Body<'tcx> {\n-    let mut builder = Builder::new(\n-        thir,\n-        infcx,\n-        def,\n-        hir_id,\n-        span,\n-        0,\n-        Safety::Safe,\n-        const_ty,\n-        const_ty_span,\n-        None,\n-    );\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n \n-    let mut block = START_BLOCK;\n-    unpack!(block = builder.expr_into_dest(Place::return_place(), block, &thir[expr]));\n+    // Figure out what primary body this item has.\n+    let (span, const_ty_span) = match tcx.hir().get(hir_id) {\n+        Node::Item(hir::Item {\n+            kind: hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _),\n+            span,\n+            ..\n+        })\n+        | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, _), span, .. })\n+        | Node::TraitItem(hir::TraitItem {\n+            kind: hir::TraitItemKind::Const(ty, Some(_)),\n+            span,\n+            ..\n+        }) => (*span, ty.span),\n+        Node::AnonConst(_) => {\n+            let span = tcx.def_span(def.did);\n+            (span, span)\n+        }\n+        _ => span_bug!(tcx.def_span(def.did), \"can't build MIR for {:?}\", def.did),\n+    };\n \n-    let source_info = builder.source_info(span);\n-    builder.cfg.terminate(block, source_info, TerminatorKind::Return);\n+    // Get the revealed type of this const. This is *not* the adjusted\n+    // type of its body, which may be a subtype of this type. For\n+    // example:\n+    //\n+    // fn foo(_: &()) {}\n+    // static X: fn(&'static ()) = foo;\n+    //\n+    // The adjusted type of the body of X is `for<'a> fn(&'a ())` which\n+    // is not the same as the type of X. We need the type of the return\n+    // place to be the type of the constant because NLL typeck will\n+    // equate them.\n+    let typeck_results = tcx.typeck_opt_const_arg(def);\n+    let const_ty = typeck_results.node_type(hir_id);\n \n-    builder.build_drop_trees();\n+    tcx.infer_ctxt().enter(|infcx| {\n+        let mut builder = Builder::new(\n+            thir,\n+            infcx,\n+            def,\n+            hir_id,\n+            span,\n+            0,\n+            Safety::Safe,\n+            const_ty,\n+            const_ty_span,\n+            None,\n+        );\n+\n+        let mut block = START_BLOCK;\n+        unpack!(block = builder.expr_into_dest(Place::return_place(), block, &thir[expr]));\n+\n+        let source_info = builder.source_info(span);\n+        builder.cfg.terminate(block, source_info, TerminatorKind::Return);\n+\n+        builder.build_drop_trees();\n \n-    builder.finish()\n+        builder.finish()\n+    })\n }\n \n /// Construct MIR for an item that has had errors in type checking.\n ///\n /// This is required because we may still want to run MIR passes on an item\n /// with type errors, but normal MIR construction can't handle that in general.\n-fn construct_error<'a, 'tcx>(\n-    infcx: &'a InferCtxt<'a, 'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-    hir_id: hir::HirId,\n-    body_id: hir::BodyId,\n+fn construct_error<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: LocalDefId,\n     body_owner_kind: hir::BodyOwnerKind,\n     err: ErrorGuaranteed,\n ) -> Body<'tcx> {\n-    let tcx = infcx.tcx;\n-    let span = tcx.hir().span(hir_id);\n+    let span = tcx.def_span(def);\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def);\n+    let generator_kind = tcx.generator_kind(def);\n+\n     let ty = tcx.ty_error();\n-    let generator_kind = tcx.hir().body(body_id).generator_kind;\n     let num_params = match body_owner_kind {\n-        hir::BodyOwnerKind::Fn => tcx.hir().fn_decl_by_hir_id(hir_id).unwrap().inputs.len(),\n+        hir::BodyOwnerKind::Fn => tcx.fn_sig(def).inputs().skip_binder().len(),\n         hir::BodyOwnerKind::Closure => {\n-            if generator_kind.is_some() {\n-                // Generators have an implicit `self` parameter *and* a possibly\n-                // implicit resume parameter.\n-                2\n-            } else {\n-                // The implicit self parameter adds another local in MIR.\n-                1 + tcx.hir().fn_decl_by_hir_id(hir_id).unwrap().inputs.len()\n+            let ty = tcx.type_of(def);\n+            match ty.kind() {\n+                ty::Closure(_, substs) => {\n+                    1 + substs.as_closure().sig().inputs().skip_binder().len()\n+                }\n+                ty::Generator(..) => 2,\n+                _ => bug!(\"expected closure or generator, found {ty:?}\"),\n             }\n         }\n         hir::BodyOwnerKind::Const => 0,\n@@ -808,7 +665,7 @@ fn construct_error<'a, 'tcx>(\n     cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n \n     let mut body = Body::new(\n-        MirSource::item(def.did.to_def_id()),\n+        MirSource::item(def.to_def_id()),\n         cfg.basic_blocks,\n         source_scopes,\n         local_decls,\n@@ -826,7 +683,7 @@ fn construct_error<'a, 'tcx>(\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn new(\n         thir: &'a Thir<'tcx>,\n-        infcx: &'a InferCtxt<'a, 'tcx>,\n+        infcx: InferCtxt<'a, 'tcx>,\n         def: ty::WithOptConstParam<LocalDefId>,\n         hir_id: hir::HirId,\n         span: Span,\n@@ -916,20 +773,21 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         mut block: BasicBlock,\n         fn_def_id: LocalDefId,\n-        arguments: &[ArgInfo<'tcx>],\n+        arguments: &IndexVec<ParamId, Param<'tcx>>,\n         argument_scope: region::Scope,\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<()> {\n         // Allocate locals for the function arguments\n-        for &ArgInfo(ty, _, arg_opt, _) in arguments.iter() {\n+        for param in arguments.iter() {\n             let source_info =\n-                SourceInfo::outermost(arg_opt.map_or(self.fn_span, |arg| arg.pat.span));\n-            let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n+                SourceInfo::outermost(param.pat.as_ref().map_or(self.fn_span, |pat| pat.span));\n+            let arg_local =\n+                self.local_decls.push(LocalDecl::with_source_info(param.ty, source_info));\n \n             // If this is a simple binding pattern, give debuginfo a nice name.\n-            if let Some(arg) = arg_opt && let Some(ident) = arg.pat.simple_ident() {\n+            if let Some(ref pat) = param.pat && let Some(name) = pat.simple_ident() {\n                 self.var_debug_info.push(VarDebugInfo {\n-                    name: ident.name,\n+                    name,\n                     source_info,\n                     value: VarDebugInfoContents::Place(arg_local.into()),\n                 });\n@@ -1002,32 +860,28 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let mut scope = None;\n         // Bind the argument patterns\n-        for (index, arg_info) in arguments.iter().enumerate() {\n+        for (index, param) in arguments.iter().enumerate() {\n             // Function arguments always get the first Local indices after the return place\n             let local = Local::new(index + 1);\n             let place = Place::from(local);\n-            let &ArgInfo(_, opt_ty_info, arg_opt, ref self_binding) = arg_info;\n \n             // Make sure we drop (parts of) the argument even when not matched on.\n             self.schedule_drop(\n-                arg_opt.as_ref().map_or(expr.span, |arg| arg.pat.span),\n+                param.pat.as_ref().map_or(expr.span, |pat| pat.span),\n                 argument_scope,\n                 local,\n                 DropKind::Value,\n             );\n \n-            let Some(arg) = arg_opt else {\n+            let Some(ref pat) = param.pat else {\n                 continue;\n             };\n-            let pat = match tcx.hir().get(arg.pat.hir_id) {\n-                Node::Pat(pat) => pat,\n-                node => bug!(\"pattern became {:?}\", node),\n-            };\n-            let pattern = pat_from_hir(tcx, self.param_env, self.typeck_results, pat);\n             let original_source_scope = self.source_scope;\n-            let span = pattern.span;\n-            self.set_correct_source_scope_for_arg(arg.hir_id, original_source_scope, span);\n-            match pattern.kind {\n+            let span = pat.span;\n+            if let Some(arg_hir_id) = param.hir_id {\n+                self.set_correct_source_scope_for_arg(arg_hir_id, original_source_scope, span);\n+            }\n+            match pat.kind {\n                 // Don't introduce extra copies for simple bindings\n                 PatKind::Binding {\n                     mutability,\n@@ -1038,16 +892,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } => {\n                     self.local_decls[local].mutability = mutability;\n                     self.local_decls[local].source_info.scope = self.source_scope;\n-                    self.local_decls[local].local_info = if let Some(kind) = self_binding {\n+                    self.local_decls[local].local_info = if let Some(kind) = param.self_kind {\n                         Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(\n-                            BindingForm::ImplicitSelf(*kind),\n+                            BindingForm::ImplicitSelf(kind),\n                         ))))\n                     } else {\n                         let binding_mode = ty::BindingMode::BindByValue(mutability);\n                         Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n                             VarBindingForm {\n                                 binding_mode,\n-                                opt_ty_info,\n+                                opt_ty_info: param.ty_span,\n                                 opt_match_place: Some((None, span)),\n                                 pat_span: span,\n                             },\n@@ -1059,15 +913,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     scope = self.declare_bindings(\n                         scope,\n                         expr.span,\n-                        &pattern,\n+                        &pat,\n                         matches::ArmHasGuard(false),\n                         Some((Some(&place), span)),\n                     );\n                     let place_builder = PlaceBuilder::from(local);\n-                    unpack!(\n-                        block =\n-                            self.place_into_pattern(block, pattern.as_ref(), place_builder, false)\n-                    );\n+                    unpack!(block = self.place_into_pattern(block, &pat, place_builder, false));\n                 }\n             }\n             self.source_scope = original_source_scope;"}, {"sha": "3ef1b263ffd655d73ef4effe8f78741657b3b138", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 108, "deletions": 6, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -8,12 +8,14 @@ use crate::thir::util::UserAnnotatedTyHelpers;\n use rustc_data_structures::steal::Steal;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::lang_items::LangItem;\n use rustc_hir::HirId;\n use rustc_hir::Node;\n use rustc_middle::middle::region;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::{self, RvalueScopes, TyCtxt};\n+use rustc_middle::ty::{self, RvalueScopes, Subst, TyCtxt};\n use rustc_span::Span;\n \n pub(crate) fn thir_body<'tcx>(\n@@ -27,6 +29,26 @@ pub(crate) fn thir_body<'tcx>(\n         return Err(reported);\n     }\n     let expr = cx.mirror_expr(&body.value);\n+\n+    let owner_id = hir.local_def_id_to_hir_id(owner_def.did);\n+    if let Some(ref fn_decl) = hir.fn_decl_by_hir_id(owner_id) {\n+        let closure_env_param = cx.closure_env_param(owner_def.did, owner_id);\n+        let explicit_params = cx.explicit_params(owner_id, fn_decl, body);\n+        cx.thir.params = closure_env_param.into_iter().chain(explicit_params).collect();\n+\n+        // The resume argument may be missing, in that case we need to provide it here.\n+        // It will always be `()` in this case.\n+        if tcx.def_kind(owner_def.did) == DefKind::Generator && body.params.is_empty() {\n+            cx.thir.params.push(Param {\n+                ty: tcx.mk_unit(),\n+                pat: None,\n+                ty_span: None,\n+                self_kind: None,\n+                hir_id: None,\n+            });\n+        }\n+    }\n+\n     Ok((tcx.alloc_steal_thir(cx.thir), expr))\n }\n \n@@ -44,11 +66,11 @@ struct Cx<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     thir: Thir<'tcx>,\n \n-    pub(crate) param_env: ty::ParamEnv<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n \n-    pub(crate) region_scope_tree: &'tcx region::ScopeTree,\n-    pub(crate) typeck_results: &'tcx ty::TypeckResults<'tcx>,\n-    pub(crate) rvalue_scopes: &'tcx RvalueScopes,\n+    region_scope_tree: &'tcx region::ScopeTree,\n+    typeck_results: &'tcx ty::TypeckResults<'tcx>,\n+    rvalue_scopes: &'tcx RvalueScopes,\n \n     /// When applying adjustments to the expression\n     /// with the given `HirId`, use the given `Span`,\n@@ -78,13 +100,93 @@ impl<'tcx> Cx<'tcx> {\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    pub(crate) fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Box<Pat<'tcx>> {\n+    fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Box<Pat<'tcx>> {\n         let p = match self.tcx.hir().get(p.hir_id) {\n             Node::Pat(p) => p,\n             node => bug!(\"pattern became {:?}\", node),\n         };\n         pat_from_hir(self.tcx, self.param_env, self.typeck_results(), p)\n     }\n+\n+    fn closure_env_param(&self, owner_def: LocalDefId, owner_id: HirId) -> Option<Param<'tcx>> {\n+        match self.tcx.def_kind(owner_def) {\n+            DefKind::Closure => {\n+                let closure_ty = self.typeck_results.node_type(owner_id);\n+\n+                let ty::Closure(closure_def_id, closure_substs) = *closure_ty.kind() else {\n+                    bug!(\"closure expr does not have closure type: {:?}\", closure_ty);\n+                };\n+\n+                let bound_vars = self.tcx.mk_bound_variable_kinds(std::iter::once(\n+                    ty::BoundVariableKind::Region(ty::BrEnv),\n+                ));\n+                let br = ty::BoundRegion {\n+                    var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n+                    kind: ty::BrEnv,\n+                };\n+                let env_region = ty::ReLateBound(ty::INNERMOST, br);\n+                let closure_env_ty =\n+                    self.tcx.closure_env_ty(closure_def_id, closure_substs, env_region).unwrap();\n+                let liberated_closure_env_ty = self.tcx.erase_late_bound_regions(\n+                    ty::Binder::bind_with_vars(closure_env_ty, bound_vars),\n+                );\n+                let env_param = Param {\n+                    ty: liberated_closure_env_ty,\n+                    pat: None,\n+                    ty_span: None,\n+                    self_kind: None,\n+                    hir_id: None,\n+                };\n+\n+                Some(env_param)\n+            }\n+            DefKind::Generator => {\n+                let gen_ty = self.typeck_results.node_type(owner_id);\n+                let gen_param =\n+                    Param { ty: gen_ty, pat: None, ty_span: None, self_kind: None, hir_id: None };\n+                Some(gen_param)\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    fn explicit_params<'a>(\n+        &'a mut self,\n+        owner_id: HirId,\n+        fn_decl: &'tcx hir::FnDecl<'tcx>,\n+        body: &'tcx hir::Body<'tcx>,\n+    ) -> impl Iterator<Item = Param<'tcx>> + 'a {\n+        let fn_sig = self.typeck_results.liberated_fn_sigs()[owner_id];\n+\n+        body.params.iter().enumerate().map(move |(index, param)| {\n+            let ty_span = fn_decl\n+                .inputs\n+                .get(index)\n+                // Make sure that inferred closure args have no type span\n+                .and_then(|ty| if param.pat.span != ty.span { Some(ty.span) } else { None });\n+\n+            let self_kind = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n+                Some(fn_decl.implicit_self)\n+            } else {\n+                None\n+            };\n+\n+            // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n+            // (as it's created inside the body itself, not passed in from outside).\n+            let ty = if fn_decl.c_variadic && index == fn_decl.inputs.len() {\n+                let va_list_did = self.tcx.require_lang_item(LangItem::VaList, Some(param.span));\n+\n+                self.tcx\n+                    .bound_type_of(va_list_did)\n+                    .subst(self.tcx, &[self.tcx.lifetimes.re_erased.into()])\n+            } else {\n+                fn_sig.inputs()[index]\n+            };\n+\n+            let pat = self.pattern_from_hir(param.pat);\n+            Param { pat: Some(pat), ty, ty_span, self_kind, hir_id: Some(param.hir_id) }\n+        })\n+    }\n }\n \n impl<'tcx> UserAnnotatedTyHelpers<'tcx> for Cx<'tcx> {"}, {"sha": "2c131a26d3a41d5f4bf9c715059d31cd120c2c2b", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -29,22 +29,22 @@ use rustc_span::{Span, Symbol};\n use std::cmp::Ordering;\n \n #[derive(Clone, Debug)]\n-pub(crate) enum PatternError {\n+enum PatternError {\n     AssocConstInPattern(Span),\n     ConstParamInPattern(Span),\n     StaticInPattern(Span),\n     NonConstPath(Span),\n }\n \n-pub(crate) struct PatCtxt<'a, 'tcx> {\n-    pub(crate) tcx: TyCtxt<'tcx>,\n-    pub(crate) param_env: ty::ParamEnv<'tcx>,\n-    pub(crate) typeck_results: &'a ty::TypeckResults<'tcx>,\n-    pub(crate) errors: Vec<PatternError>,\n+struct PatCtxt<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    typeck_results: &'a ty::TypeckResults<'tcx>,\n+    errors: Vec<PatternError>,\n     include_lint_checks: bool,\n }\n \n-pub(crate) fn pat_from_hir<'a, 'tcx>(\n+pub(super) fn pat_from_hir<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n@@ -61,20 +61,20 @@ pub(crate) fn pat_from_hir<'a, 'tcx>(\n }\n \n impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n-    pub(crate) fn new(\n+    fn new(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         typeck_results: &'a ty::TypeckResults<'tcx>,\n     ) -> Self {\n         PatCtxt { tcx, param_env, typeck_results, errors: vec![], include_lint_checks: false }\n     }\n \n-    pub(crate) fn include_lint_checks(&mut self) -> &mut Self {\n+    fn include_lint_checks(&mut self) -> &mut Self {\n         self.include_lint_checks = true;\n         self\n     }\n \n-    pub(crate) fn lower_pattern(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Box<Pat<'tcx>> {\n+    fn lower_pattern(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Box<Pat<'tcx>> {\n         // When implicit dereferences have been inserted in this pattern, the unadjusted lowered\n         // pattern has the type that results *after* dereferencing. For example, in this code:\n         //\n@@ -627,15 +627,15 @@ impl<'tcx> UserAnnotatedTyHelpers<'tcx> for PatCtxt<'_, 'tcx> {\n     }\n }\n \n-pub(crate) trait PatternFoldable<'tcx>: Sized {\n+trait PatternFoldable<'tcx>: Sized {\n     fn fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.super_fold_with(folder)\n     }\n \n     fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self;\n }\n \n-pub(crate) trait PatternFolder<'tcx>: Sized {\n+trait PatternFolder<'tcx>: Sized {\n     fn fold_pattern(&mut self, pattern: &Pat<'tcx>) -> Pat<'tcx> {\n         pattern.super_fold_with(self)\n     }"}, {"sha": "887e6572930669053b7d5de98996d47255f8c0ed", "filename": "compiler/rustc_smir/src/mir.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/compiler%2Frustc_smir%2Fsrc%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Fmir.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -1,10 +1,10 @@\n+pub use crate::very_unstable::hir::ImplicitSelfKind;\n pub use crate::very_unstable::middle::mir::{\n     visit::MutVisitor, AggregateKind, AssertKind, BasicBlock, BasicBlockData, BinOp, BindingForm,\n     BlockTailInfo, Body, BorrowKind, CastKind, ClearCrossCrate, Constant, ConstantKind,\n-    CopyNonOverlapping, Coverage, FakeReadCause, Field, GeneratorInfo, ImplicitSelfKind,\n-    InlineAsmOperand, Local, LocalDecl, LocalInfo, LocalKind, Location, MirPhase, MirSource,\n-    NullOp, Operand, Place, PlaceRef, ProjectionElem, ProjectionKind, Promoted, RetagKind, Rvalue,\n-    Safety, SourceInfo, SourceScope, SourceScopeData, SourceScopeLocalData, Statement,\n-    StatementKind, UnOp, UserTypeProjection, UserTypeProjections, VarBindingForm, VarDebugInfo,\n-    VarDebugInfoContents,\n+    CopyNonOverlapping, Coverage, FakeReadCause, Field, GeneratorInfo, InlineAsmOperand, Local,\n+    LocalDecl, LocalInfo, LocalKind, Location, MirPhase, MirSource, NullOp, Operand, Place,\n+    PlaceRef, ProjectionElem, ProjectionKind, Promoted, RetagKind, Rvalue, Safety, SourceInfo,\n+    SourceScope, SourceScopeData, SourceScopeLocalData, Statement, StatementKind, UnOp,\n+    UserTypeProjection, UserTypeProjections, VarBindingForm, VarDebugInfo, VarDebugInfoContents,\n };"}, {"sha": "9d70ccdef032fc04a5af73a5493b9d4fa549957b", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -27,11 +27,11 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant1\", scope: [[GEN]],\n-// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: file: [[FILE]], line: 18,\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant2\", scope: [[GEN]],\n-// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: file: [[FILE]], line: 18,\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant3\", scope: [[GEN]],"}, {"sha": "3ec860f2cbc0681370b27d30788be1699d2fe1af", "filename": "src/test/codegen/generator-debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -33,11 +33,11 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n-// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: file: [[FILE]], line: 18,\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n-// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: file: [[FILE]], line: 18,\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],"}, {"sha": "f3f5c39bc17d9011156db51ac4a886721374d77a", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -40,11 +40,11 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n           StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:44\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:45\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:44\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:45\n       }\n - }\n - "}, {"sha": "90920fbe7f8052287fa6c22b781ef231b0e2923a", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -12,6 +12,6 @@ static BOP: &i32 = {\n         _1 = &_2;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n         _0 = &(*_1);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n         StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:22: +0:23\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:23\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:24\n     }\n }"}, {"sha": "a4caa20874e2003a8ff130face952f2e899aaf13", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -42,11 +42,11 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n           StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:55\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:56\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:55\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:56\n       }\n   }\n - "}, {"sha": "c718138b6b37ea3d1b535b4ec85e0b6a28874034", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -15,70 +15,70 @@\n } */\n \n fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 10:17]) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n-    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n+    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:18: +0:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     scope 1 {\n-        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n+        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:13: +2:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:14: +2:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb2: {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb3: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb5 (cleanup): {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb6: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb7: {\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb8: {\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb9: {\n-        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb10: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb11: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n }"}, {"sha": "3184343f207b39ad2a752f885be4a8e4f6a552a0", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -3,122 +3,122 @@\n fn main::{closure#0}(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 22:18], _2: ()) -> ()\n yields ()\n  {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 22:19\n-    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +0:19\n+    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n+    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n+    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n     scope 1 {\n-        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n         scope 2 {\n-            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n-        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n-        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _5 = yield(move _6) -> [resume: bb1, drop: bb6]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:17: +1:23\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n+        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:17: +2:23\n+        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        _5 = yield(move _6) -> [resume: bb1, drop: bb6]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb10]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n+        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n+        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb10]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n+        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n                                          // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +6:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb4: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb5, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb5, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb5: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:18: +0:18\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:6: +6:6\n     }\n \n     bb6: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_3) -> [return: bb7, unwind: bb15]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_3) -> [return: bb7, unwind: bb15]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb7: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb8, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb8, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb8: {\n-        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +0:18\n+        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +6:6\n     }\n \n     bb9 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n         goto -> bb12;                    // scope 2 at no-location\n     }\n \n     bb10 (cleanup): {\n-        goto -> bb11;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        goto -> bb11;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n     }\n \n     bb11 (cleanup): {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n         goto -> bb12;                    // scope 2 at no-location\n     }\n \n     bb12 (cleanup): {\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        goto -> bb13;                    // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        goto -> bb13;                    // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb13 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb14 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +0:18\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +6:6\n     }\n \n     bb15 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n }"}, {"sha": "07aeeaae012c977347f890d04624bab2b8f685bd", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -16,69 +16,69 @@\n \n fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]>, _2: u8) -> GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n-    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n-    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:21:9: 24:10\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n-    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:23:13: 23:21\n-    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:25: 19:25\n+    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n+    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:+2:9: +5:10\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n+    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:+4:13: +4:21\n+    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:25: +0:25\n     let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n-    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n     scope 1 {\n-        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n     }\n \n     bb1: {\n-        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n-        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n+        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        nop;                             // scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n+        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:+1:18: +1:25\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n     }\n \n     bb2: {\n-        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        return;                          // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        return;                          // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:17: 22:18\n-        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:18: 22:19\n-        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n-        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n+        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:17: +3:18\n+        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:18: +3:19\n+        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n+        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n                                          // mir::Constant\n                                          // + span: $DIR/generator-tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:21: 23:22\n-        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:21:14: 24:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n+        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:21: +4:22\n+        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:+2:14: +5:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n     }\n \n     bb5: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n     }\n \n     bb6: {\n-        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n     }\n }"}, {"sha": "a2234e7c1effd472892064bf4f6beca3eca3b2cc", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -19,8 +19,8 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n             debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:+0:17: +0:18\n             let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n             let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n-            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:17\n-            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:17\n+            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n         }\n     }\n "}, {"sha": "0b992e3c32ad14d446680a027fcd6e56ad46ec71", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -29,10 +29,10 @@\n +         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n +         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:15:9: 15:9\n +         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n-+         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +     }\n   \n       bb0: {\n@@ -75,9 +75,9 @@\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n       }\n   \n -     bb3: {\n@@ -98,7 +98,7 @@\n +     }\n + \n +     bb3: {\n-+         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n +         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n +         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n@@ -126,23 +126,23 @@\n +     }\n + \n +     bb7: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:8: 15:8\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:41: 15:41\n +     }\n + \n +     bb8: {\n-+         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +     }\n + \n +     bb9: {\n-+         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n       }\n   }\n   "}, {"sha": "44b1a267b34344f73c78ce8a4567e5e705d019cf", "filename": "src/test/mir-opt/retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -3,20 +3,20 @@\n fn main::{closure#0}(_1: &[closure@main::{closure#0}], _2: &i32) -> &i32 {\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:+0:32: +0:33\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:+0:44: +0:48\n-    let _3: &i32;                        // in scope 0 at $DIR/retag.rs:42:13: 42:15\n+    let _3: &i32;                        // in scope 0 at $DIR/retag.rs:+1:13: +1:15\n     scope 1 {\n-        debug _y => _3;                  // in scope 1 at $DIR/retag.rs:42:13: 42:15\n+        debug _y => _3;                  // in scope 1 at $DIR/retag.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:+0:31: +0:48\n+        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:+0:31: +3:6\n         Retag([fn entry] _2);            // scope 0 at $DIR/retag.rs:+0:32: +0:33\n-        StorageLive(_3);                 // scope 0 at $DIR/retag.rs:42:13: 42:15\n-        _3 = _2;                         // scope 0 at $DIR/retag.rs:42:18: 42:19\n-        Retag(_3);                       // scope 0 at $DIR/retag.rs:42:18: 42:19\n-        _0 = _2;                         // scope 1 at $DIR/retag.rs:43:9: 43:10\n-        Retag(_0);                       // scope 1 at $DIR/retag.rs:43:9: 43:10\n-        StorageDead(_3);                 // scope 0 at $DIR/retag.rs:44:5: 44:6\n-        return;                          // scope 0 at $DIR/retag.rs:+0:48: +0:48\n+        StorageLive(_3);                 // scope 0 at $DIR/retag.rs:+1:13: +1:15\n+        _3 = _2;                         // scope 0 at $DIR/retag.rs:+1:18: +1:19\n+        Retag(_3);                       // scope 0 at $DIR/retag.rs:+1:18: +1:19\n+        _0 = _2;                         // scope 1 at $DIR/retag.rs:+2:9: +2:10\n+        Retag(_0);                       // scope 1 at $DIR/retag.rs:+2:9: +2:10\n+        StorageDead(_3);                 // scope 0 at $DIR/retag.rs:+3:5: +3:6\n+        return;                          // scope 0 at $DIR/retag.rs:+3:6: +3:6\n     }\n }"}, {"sha": "e50067ea25ef4864ad2ebc2835fd1feacc4232c5", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -198,6 +198,6 @@ static XXX: &Foo = {\n         _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:28: +18:2\n         StorageDead(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n         StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n-        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:1: +18:2\n+        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:1: +18:3\n     }\n }"}, {"sha": "5579d25a14fda49d16badc9f1123b158acf62adc", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -5,6 +5,6 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 =\n \n     bb0: {\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:+0:38: +0:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:39\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:40\n     }\n }"}, {"sha": "e463099a5ee4795186d28aab4710755993fabb4e", "filename": "src/test/run-make/coverage-reports/expected_show_coverage.closure.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -37,7 +37,7 @@\n    37|      0|            countdown = 10;\n    38|      0|        }\n    39|      0|        \"alt string 2\".to_owned()\n-   40|       |    };\n+   40|      0|    };\n    41|      1|    println!(\n    42|      1|        \"The string or alt: {}\"\n    43|      1|        ,\n@@ -79,7 +79,7 @@\n    79|      0|            countdown = 10;\n    80|      1|        }\n    81|      1|        \"alt string 4\".to_owned()\n-   82|       |    };\n+   82|      1|    };\n    83|      1|    println!(\n    84|      1|        \"The string or alt: {}\"\n    85|      1|        ,\n@@ -101,7 +101,7 @@\n   101|      0|            countdown = 10;\n   102|      5|        }\n   103|      5|        format!(\"'{}'\", val)\n-  104|       |    };\n+  104|      5|    };\n   105|      1|    println!(\n   106|      1|        \"Repeated, quoted string: {:?}\"\n   107|      1|        ,\n@@ -125,7 +125,7 @@\n   125|      0|            countdown = 10;\n   126|      0|        }\n   127|      0|        \"closure should be unused\".to_owned()\n-  128|       |    };\n+  128|      0|    };\n   129|       |\n   130|      1|    let mut countdown = 10;\n   131|      1|    let _short_unused_closure = | _unused_arg: u8 | countdown += 1;\n@@ -177,7 +177,7 @@\n   173|      0|            println!(\n   174|      0|                \"not called: {}\",\n   175|      0|                if is_true { \"check\" } else { \"me\" }\n-  176|       |            )\n+  176|      0|            )\n   177|       |    ;\n   178|       |\n   179|      1|    let short_used_not_covered_closure_line_break_block_embedded_branch =\n@@ -187,7 +187,7 @@\n   183|      0|                \"not called: {}\",\n   184|      0|                if is_true { \"check\" } else { \"me\" }\n   185|       |            )\n-  186|       |        }\n+  186|      0|        }\n   187|       |    ;\n   188|       |\n   189|      1|    let short_used_covered_closure_line_break_no_block_embedded_branch =\n@@ -196,7 +196,7 @@\n   192|      1|                \"not called: {}\",\n   193|      1|                if is_true { \"check\" } else { \"me\" }\n                                                             ^0\n-  194|       |            )\n+  194|      1|            )\n   195|       |    ;\n   196|       |\n   197|      1|    let short_used_covered_closure_line_break_block_embedded_branch =\n@@ -207,7 +207,7 @@\n   202|      1|                if is_true { \"check\" } else { \"me\" }\n                                                             ^0\n   203|       |            )\n-  204|       |        }\n+  204|      1|        }\n   205|       |    ;\n   206|       |\n   207|      1|    if is_false {"}, {"sha": "0fb3808ff2e30d33359a29183fc59ec2dc1fb937", "filename": "src/test/run-make/coverage-reports/expected_show_coverage.generator.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.generator.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.generator.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.generator.txt?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -18,7 +18,7 @@\n    17|      1|    let mut generator = || {\n    18|      1|        yield get_u32(is_true);\n    19|      1|        return \"foo\";\n-   20|       |    };\n+   20|      1|    };\n    21|       |\n    22|      1|    match Pin::new(&mut generator).resume(()) {\n    23|      1|        GeneratorState::Yielded(Ok(1)) => {}"}, {"sha": "a59fe1146f480c6388ca8d8493ed4bd97d63837e", "filename": "src/test/run-make/coverage-reports/expected_show_coverage.inline-dead.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.inline-dead.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.inline-dead.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.inline-dead.txt?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -6,7 +6,7 @@\n     6|      1|\n     7|      1|    let f = |x: bool| {\n     8|       |        debug_assert!(\n-    9|       |            x\n+    9|      0|            x\n    10|       |        );\n    11|      1|    };\n    12|      1|    f(false);"}, {"sha": "748343885de1d42c476c6003797732806f6cf20b", "filename": "src/test/run-make/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -61,12 +61,12 @@\n    46|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    47|      4|}\n   ------------------\n-  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   47|      2|}\n   ------------------\n-  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   47|      2|}"}, {"sha": "6e2f23ee77b8df0426ef4aba9b09bdb20dfc6d32", "filename": "src/test/run-make/coverage-reports/expected_show_coverage.yield.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.yield.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.yield.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.yield.txt?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -8,7 +8,7 @@\n     8|      1|    let mut generator = || {\n     9|      1|        yield 1;\n    10|      1|        return \"foo\"\n-   11|       |    };\n+   11|      1|    };\n    12|       |\n    13|      1|    match Pin::new(&mut generator).resume(()) {\n    14|      1|        GeneratorState::Yielded(1) => {}\n@@ -24,7 +24,7 @@\n    24|      1|        yield 2;\n    25|      0|        yield 3;\n    26|      0|        return \"foo\"\n-   27|       |    };\n+   27|      0|    };\n    28|       |\n    29|      1|    match Pin::new(&mut generator).resume(()) {\n    30|      1|        GeneratorState::Yielded(1) => {}"}, {"sha": "c4cd9c2a49fd7562bee5c160cdba4580ecec8a5c", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -2,13 +2,13 @@ error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n   --> $DIR/defaults-cyclic-fail.rs:5:5\n    |\n LL |     const A: u8 = Self::B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n note: cycle used when const-evaluating + checking `main::promoted[1]`\n   --> $DIR/defaults-cyclic-fail.rs:16:16"}, {"sha": "c8c57bccb5017a10e9474af25f94b1eaf9981636", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -13,7 +13,7 @@ note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 11:19>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |"}, {"sha": "76ed8d4a6e864a5ed8533370358f39b1ef915b02", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -13,7 +13,7 @@ note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |"}, {"sha": "6a98f08f3d3aeeaffd11f1f5f96e2e445e276406", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -13,7 +13,7 @@ note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 11:28>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |"}, {"sha": "9ac6c984cb0cdd8fedb3f9883455c20c40e68d65", "filename": "src/test/ui/consts/issue-36163.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -8,7 +8,7 @@ note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Foo::B::{constant#0}`, completing the cycle\n note: cycle used when simplifying constant for the type system `Foo::B::{constant#0}`\n   --> $DIR/issue-36163.rs:4:9"}, {"sha": "b6e28364768ec8589e63aba93ad0a12a843dc48c", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -29,6 +29,11 @@ note: ...which requires building MIR for `cycle1`...\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building THIR for `cycle1`...\n+  --> $DIR/auto-trait-leak.rs:12:1\n+   |\n+LL | fn cycle1() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle1`...\n   --> $DIR/auto-trait-leak.rs:14:5\n    |\n@@ -65,6 +70,11 @@ note: ...which requires building MIR for `cycle2`...\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building THIR for `cycle2`...\n+  --> $DIR/auto-trait-leak.rs:19:1\n+   |\n+LL | fn cycle2() -> impl Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n   --> $DIR/auto-trait-leak.rs:20:5\n    |"}, {"sha": "4856418ed600229d153ce311781e0b01196b158c", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -2,7 +2,7 @@ error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which immediately requires const-evaluating + checking `FOO` again\n note: cycle used when const-evaluating + checking `main::{constant#0}`"}, {"sha": "074939f68a889737ece861b367bd267718387bec", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -2,13 +2,13 @@ error[E0391]: cycle detected when const-evaluating + checking `A`\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `A`, completing the cycle\n note: cycle used when simplifying constant for the type system `A`\n   --> $DIR/issue-23302-3.rs:1:1"}, {"sha": "59b848ea85ce1a78e5c4def7b67b180c66334e4f", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -22,14 +22,8 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n note: no external requirements\n   --> $DIR/escape-argument-callee.rs:20:1\n    |\n-LL | / fn test() {\n-LL | |     let x = 44;\n-LL | |     let mut p = &x;\n-LL | |\n-...  |\n-LL | |     deref(p);\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "ff4e8e590e5a69c13f345c45e75ddbba3be8b124", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -13,14 +13,8 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n note: no external requirements\n   --> $DIR/escape-argument.rs:20:1\n    |\n-LL | / fn test() {\n-LL | |     let x = 44;\n-LL | |     let mut p = &x;\n-LL | |\n-...  |\n-LL | |     deref(p);\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "4fbd5eb19a56c4168c9986709e685bb8ba949ae1", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -29,14 +29,8 @@ LL |         let mut closure = || {\n note: no external requirements\n   --> $DIR/escape-upvar-nested.rs:13:1\n    |\n-LL | / fn test() {\n-LL | |     let x = 44;\n-LL | |     let mut p = &x;\n-LL | |\n-...  |\n-LL | |     deref(p);\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "bc1ceac5bf01ebd42936b90e5dc75fda23231b05", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -15,14 +15,8 @@ LL |         let mut closure = || p = &y;\n note: no external requirements\n   --> $DIR/escape-upvar-ref.rs:17:1\n    |\n-LL | / fn test() {\n-LL | |     let x = 44;\n-LL | |     let mut p = &x;\n-LL | |\n-...  |\n-LL | |     deref(p);\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "0d94fca2823e5aa74b0fed3ed1ab842b08d22dba", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -27,14 +27,8 @@ LL |             demand_y(x, y, p)\n note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:38:1\n    |\n-LL | / fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell<&'c u32>) {\n-LL | |     establish_relationships(\n-LL | |         cell_a,\n-LL | |         cell_b,\n-...  |\n-LL | |     );\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell<&'c u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "435a5353340daabd14b26371e7b9e4b39573813a", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -17,14 +17,8 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n note: no external requirements\n   --> $DIR/propagate-approximated-ref.rs:42:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "6aafbe42c496cc7e87d3c58082a7caa78dd30b18", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -23,14 +23,8 @@ LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:18:1\n    |\n-LL | / fn case1() {\n-LL | |     let a = 0;\n-LL | |     let cell = Cell::new(&a);\n-LL | |     foo(cell, |cell_a, cell_x| {\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+LL | fn case1() {\n+   | ^^^^^^^^^^\n    |\n    = note: defining type: case1\n \n@@ -51,14 +45,8 @@ LL |     foo(cell, |cell_a, cell_x| {\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:28:1\n    |\n-LL | / fn case2() {\n-LL | |     let a = 0;\n-LL | |     let cell = Cell::new(&a);\n-LL | |\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+LL | fn case2() {\n+   | ^^^^^^^^^^\n    |\n    = note: defining type: case2\n "}, {"sha": "c95907ea75e5ad1d05f275882185bbfc2e38f7b4", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -17,14 +17,8 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:31:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |\n-LL | |\n-...  |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "db58d9d6f1a3c1a6e6894d31dc2eabc8fa251f36", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -17,14 +17,8 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:34:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |\n-LL | |\n-...  |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "be5f1e5ef1a687028afd0f9c49831d6f744b97d5", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -17,14 +17,8 @@ LL |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n note: no external requirements\n   --> $DIR/propagate-approximated-val.rs:35:1\n    |\n-LL | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(outlives1, outlives2, x.get())\n-LL | |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "d18db97be5789f4200f4364a85b822c9eb708ef6", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -16,14 +16,8 @@ LL |         |_outlives1, _outlives2, x, y| {\n note: no external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:39:1\n    |\n-LL | / fn supply<'a>(cell_a: Cell<&'a u32>) {\n-LL | |     establish_relationships(\n-LL | |         cell_a,\n-LL | |         |_outlives1, _outlives2, x, y| {\n-...  |\n-LL | |     );\n-LL | | }\n-   | |_^\n+LL | fn supply<'a>(cell_a: Cell<&'a u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "e6f88de4ee8d98083a1fccbac11f51f484c241f7", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -26,14 +26,8 @@ LL |         demand_y(x, y, x.get())\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:34:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "5f5fce77137c1159a416469e6355ef62c64ea3e6", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -26,14 +26,8 @@ LL |         demand_y(x, y, x.get())\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:38:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "750b08bbe855cf0e404846a3917398f8e346db1d", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -18,11 +18,7 @@ note: no external requirements\n LL | / fn supply<'a, T>(value: T)\n LL | | where\n LL | |     T: Trait<'a>,\n-LL | | {\n-...  |\n-LL | |     });\n-LL | | }\n-   | |_^\n+   | |_________________^\n    |\n    = note: defining type: supply::<'_#1r, T>\n "}, {"sha": "da89071eabda9f1f28215d268150b5e0fda2d258", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -22,11 +22,8 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:10:1\n    |\n-LL | / fn test() {\n-LL | |     expect_sig(|a, b| b); // ought to return `a`\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "ee1f7b64bb231aed0836b6f00b12b137dcb0370d", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -18,11 +18,7 @@ note: no external requirements\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: Iterator,\n-LL | | {\n-LL | |     with_signature(x, |mut y| Box::new(y.next()))\n-LL | |\n-LL | | }\n-   | |_^\n+   | |________________^\n    |\n    = note: defining type: no_region::<'_#1r, T>\n \n@@ -55,10 +51,7 @@ note: no external requirements\n LL | / fn correct_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: 'a + Iterator,\n-LL | | {\n-LL | |     with_signature(x, |mut y| Box::new(y.next()))\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: correct_region::<'_#1r, T>\n \n@@ -82,11 +75,7 @@ note: no external requirements\n LL | / fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: 'b + Iterator,\n-LL | | {\n-LL | |     with_signature(x, |mut y| Box::new(y.next()))\n-LL | |\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>\n \n@@ -120,10 +109,7 @@ LL | / fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: 'b + Iterator,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(x, |mut y| Box::new(y.next()))\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>\n "}, {"sha": "4e57dfad794e3c3cc003a7a93392ba68ebcf8709", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -20,11 +20,7 @@ note: no external requirements\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n-LL | | {\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n@@ -74,10 +70,7 @@ LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n@@ -126,10 +119,7 @@ LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n@@ -155,10 +145,8 @@ LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+LL | |     'b: 'a,\n+   | |___________^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n "}, {"sha": "250c796e2c71e373b406aa29e5f3eb8073d1bf54", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -19,11 +19,7 @@ note: no external requirements\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n@@ -61,10 +57,7 @@ LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n@@ -102,10 +95,7 @@ LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n@@ -130,10 +120,7 @@ LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n@@ -157,11 +144,7 @@ note: no external requirements\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'a>,\n-LL | | {\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: one_region::<'_#1r, T>\n "}, {"sha": "b27186b05373521487d45eda3a1d5001db9b52d0", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -17,10 +17,7 @@ note: no external requirements\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n@@ -43,10 +40,7 @@ LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n@@ -69,10 +63,7 @@ LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n@@ -95,10 +86,7 @@ LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n@@ -120,11 +108,7 @@ note: no external requirements\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'a>,\n-LL | | {\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: one_region::<'_#1r, T>\n "}, {"sha": "0195a693e5ffb45d6aad2aba93bfe3aad6888a97", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -19,11 +19,7 @@ note: no external requirements\n LL | / fn no_relationships_late<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |\n-LL | | }\n-   | |_^\n+   | |________________________^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>\n \n@@ -57,10 +53,7 @@ LL | / fn no_relationships_early<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'a: 'a,\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>\n \n@@ -94,10 +87,7 @@ LL | / fn projection_outlives<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     T::AssocType: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>\n \n@@ -122,10 +112,7 @@ LL | / fn elements_outlive1<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>\n \n@@ -150,10 +137,7 @@ LL | / fn elements_outlive2<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'c: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>\n \n@@ -178,11 +162,7 @@ note: no external requirements\n LL | / fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'b>,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |\n-LL | | }\n-   | |_^\n+   | |________________________^\n    |\n    = note: defining type: two_regions::<'_#1r, T>\n \n@@ -220,10 +200,7 @@ LL | / fn two_regions_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'b>,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>\n \n@@ -247,11 +224,7 @@ note: no external requirements\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'a, 'a>,\n-LL | | {\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |________________________^\n    |\n    = note: defining type: one_region::<'_#1r, T>\n "}, {"sha": "5d9a044d107f9ba409166a377709d04d1027d1ed", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -15,11 +15,8 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:22:1\n    |\n-LL | / fn generic<T>(value: T) {\n-LL | |     let cell = Cell::new(&());\n-LL | |     twice(cell, value, |a, b| invoke(a, b));\n-LL | | }\n-   | |_^\n+LL | fn generic<T>(value: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: generic::<T>\n \n@@ -41,11 +38,8 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:28:1\n    |\n-LL | / fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n-LL | |     twice(cell, value, |a, b| invoke(a, b));\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: generic_fail::<T>\n "}, {"sha": "50d9e3aabe2d43cc1ec96e3c43ca004b6f3a5895", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -18,11 +18,7 @@ note: no external requirements\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>\n LL | | where\n LL | |     T: Debug,\n-LL | | {\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |_____________^\n    |\n    = note: defining type: no_region::<'_#1r, T>\n "}, {"sha": "14c55e32a3ebe83f2f67e11d2cbe0f953c75d5aa", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -16,14 +16,8 @@ LL |     with_signature(a, b, |x, y| {\n note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:26:1\n    |\n-LL | / fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n-LL | |     with_signature(a, b, |x, y| {\n-LL | |\n-LL | |         //\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+LL | fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_region::<T>\n \n@@ -65,11 +59,7 @@ note: no external requirements\n LL | / fn correct_region<'a, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n LL | |     T: 'a,\n-LL | | {\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+   | |__________^\n    |\n    = note: defining type: correct_region::<'_#1r, T>\n \n@@ -94,11 +84,7 @@ note: no external requirements\n LL | / fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n LL | |     T: 'b,\n-LL | | {\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+   | |__________^\n    |\n    = note: defining type: wrong_region::<'_#1r, T>\n \n@@ -139,10 +125,7 @@ LL | / fn outlives_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n LL | |     T: 'b,\n LL | |     'b: 'a,\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>\n "}, {"sha": "3326fa521fc9cea4efc8e4d26b039fb90f1c7663", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -30,14 +30,15 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n ...\n LL |             SomeEnum::SomeVariant(Cell::new(&c)),\n    |                                   ----------^^-\n    |                                   |         |\n    |                                   |         borrowed value does not live long enough\n    |                                   argument requires that `c` is borrowed for `'a`\n+...\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9664fb9f548317ea13151a99abb06665b64ab03b", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct-calls.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -28,28 +28,28 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n ...\n LL |         f(&c);\n    |         --^^-\n    |         | |\n    |         | borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-struct-calls.rs:53:11\n    |\n LL |     let f = SomeStruct::<&'a u32>;\n    |         - lifetime `'1` appears in the type of `f`\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n-LL |         let c = 66;\n+...\n LL |         f(&c);\n    |         --^^-\n    |         | |\n    |         | borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'1`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e0640da39e2b62fb3211d3c89e7fdab35b910ab9", "filename": "src/test/ui/nll/user-annotations/fns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -28,14 +28,14 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n-LL |         let c = 66;\n+...\n LL |         some_fn::<&'a u32>(&c);\n    |         -------------------^^-\n    |         |                  |\n    |         |                  borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "10447e45a6d422de9a6ad372f19bf5083a0a1f77", "filename": "src/test/ui/nll/user-annotations/method-call.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -29,14 +29,13 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n ...\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n-LL |         let c = 66;\n LL |         a.method::<&'a u32>(b,  &c);\n    |         ------------------------^^-\n    |         |                       |\n    |         |                       borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e7851833e93b23a7f77a130197e6dd19f2dfb33d", "filename": "src/test/ui/nll/user-annotations/method-ufcs-3.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -29,14 +29,13 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n ...\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n-LL |         let c = 66;\n LL |         <_ as Bazoom<_>>::method::<&'a u32>(&a, b, &c);\n    |         -------------------------------------------^^-\n    |         |                                          |\n    |         |                                          borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a227cc583d68d0c8c4bcb47d3f4f817f781210c8", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -71,9 +71,8 @@ error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:22:12\n    |\n LL |     fn fun(a @ b: U) {}\n-   |            ^----\n-   |            |   |\n-   |            |   value moved here\n+   |            ^   - value moved here\n+   |            |\n    |            value used here after move\n    |            move occurs because value has type `U`, which does not implement the `Copy` trait\n "}, {"sha": "b2f22fe86388ecd93479326255d4e84db2cfcb29", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -314,9 +314,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n-   |           ^^^^^----\n-   |           |       |\n-   |           |       value moved here\n+   |           ^^^^^   - value moved here\n+   |           |\n    |           value borrowed here after move\n    |           move occurs because value has type `U`, which does not implement the `Copy` trait\n "}, {"sha": "8546b4bb477349d7b29391a5e64824efc6e20e07", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -434,9 +434,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-   |                      --------^^^^^^^^^----\n-   |                      |       |           |\n-   |                      |       |           value moved here\n+   |                      -----   ^^^^^^^^^   - value moved here\n+   |                      |       |\n    |                      |       value borrowed here after move\n    |                      move occurs because value has type `U`, which does not implement the `Copy` trait\n "}, {"sha": "384a57b2ee092a37fcd0333d9d07888e2bdea156", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -328,9 +328,8 @@ error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-   |                      ------------^^^^^^^^^----\n-   |                      |           |           |\n-   |                      |           |           value moved here\n+   |                      ---------   ^^^^^^^^^   - value moved here\n+   |                      |           |\n    |                      |           value borrowed here after move\n    |                      move occurs because value has type `U`, which does not implement the `Copy` trait\n "}, {"sha": "5fcdfca18d69eb5a16946593be7fcf53a7a0e443", "filename": "src/test/ui/thir-tree.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c84083b08e2db69fcf270c4045837fa02663a3bf/src%2Ftest%2Fui%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-tree.stdout?ref=c84083b08e2db69fcf270c4045837fa02663a3bf", "patch": "@@ -54,5 +54,6 @@ Thir {\n         },\n     ],\n     stmts: [],\n+    params: [],\n }\n "}]}