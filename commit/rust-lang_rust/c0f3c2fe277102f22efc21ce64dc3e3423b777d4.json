{"sha": "c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZjNjMmZlMjc3MTAyZjIyZWZjMjFjZTY0ZGMzZTM0MjNiNzc3ZDQ=", "commit": {"author": {"name": "lyj", "email": "lyj@everton", "date": "2021-06-03T06:56:34Z"}, "committer": {"name": "lyj", "email": "lyj@everton", "date": "2021-06-04T02:44:34Z"}, "message": "correct lint", "tree": {"sha": "9bef2a66a2d20a59eb8b72e1fd6de0d216c4c64b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bef2a66a2d20a59eb8b72e1fd6de0d216c4c64b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "html_url": "https://github.com/rust-lang/rust/commit/c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/comments", "author": null, "committer": null, "parents": [{"sha": "84c511facf6534394eaab76299c2953fcf47e76f", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c511facf6534394eaab76299c2953fcf47e76f", "html_url": "https://github.com/rust-lang/rust/commit/84c511facf6534394eaab76299c2953fcf47e76f"}], "stats": {"total": 137, "additions": 127, "deletions": 10}, "files": [{"sha": "4fb2ce8dfc8255384f19b9fba782c2be0e54f410", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "patch": "@@ -2611,6 +2611,7 @@ Released 2018-09-13\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n [`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n [`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n+[`rc_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure"}, {"sha": "2b999da15ca9abd4c77ffdff52db7772ec840c3f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "patch": "@@ -931,6 +931,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         types::LINKEDLIST,\n         types::OPTION_OPTION,\n         types::RC_BUFFER,\n+        types::RC_MUTEX,\n         types::REDUNDANT_ALLOCATION,\n         types::TYPE_COMPLEXITY,\n         types::VEC_BOX,\n@@ -1027,6 +1028,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(strings::STRING_TO_STRING),\n         LintId::of(strings::STR_TO_STRING),\n         LintId::of(types::RC_BUFFER),\n+        LintId::of(types::RC_MUTEX),\n         LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n         LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n         LintId::of(verbose_file_reads::VERBOSE_FILE_READS),"}, {"sha": "07dec2de8279801609f372022bbe7372f9489810", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "patch": "@@ -3,11 +3,11 @@ mod box_vec;\n mod linked_list;\n mod option_option;\n mod rc_buffer;\n+mod rc_mutex;\n mod redundant_allocation;\n mod type_complexity;\n mod utils;\n mod vec_box;\n-mod rc_mutex;\n \n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n@@ -252,18 +252,50 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// TODO\n+    /// **What it does:** Checks for `Rc<Mutex<T>>`.\n+    ///\n+    /// **Why is this bad?** `Rc<Mutex<T>>` may introduce a deadlock in single thread. Consider\n+    /// using `Rc<RefCell<T>>` instead.\n+    /// ```rust\n+    /// fn main() {\n+    ///     use std::rc::Rc;\n+    ///     use std::sync::Mutex;\n+    ///\n+    ///     let a: Rc<Mutex<i32>> = Rc::new(Mutex::new(1));\n+    ///     let a_clone = a.clone();\n+    ///     let mut data = a.lock().unwrap();\n+    ///     println!(\"{:?}\", *a_clone.lock().unwrap());\n+    ///     *data = 10;\n+    ///  }\n+    /// ```\n+    ///\n+    /// **Known problems:** `Rc<RefCell<T>>` may panic in runtime.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// use std::rc::Rc;\n+    /// use std::sync::Mutex;\n+    /// fn foo(interned: Rc<Mutex<i32>>) { ... }\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust,ignore\n+    /// use std::rc::Rc;\n+    /// use std::cell::RefCell\n+    /// fn foo(interned: Rc<RefCell<i32>>) { ... }\n+    /// ```\n     pub RC_MUTEX,\n     restriction,\n-    \"usage of Mutex inside Rc\"\n+    \"usage of `Rc<Mutex<T>>`\"\n }\n \n pub struct Types {\n     vec_box_size_threshold: u64,\n     type_complexity_threshold: u64,\n }\n \n-impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, TYPE_COMPLEXITY,RC_MUTEX]);\n+impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, RC_MUTEX, TYPE_COMPLEXITY]);\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {"}, {"sha": "122df01d15321c9b0c622398143720fea6e2bdb4", "filename": "clippy_lints/src/types/rc_mutex.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs?ref=c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "patch": "@@ -1,20 +1,24 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::{ get_qpath_generic_tys,is_ty_param_diagnostic_item};\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{get_qpath_generic_tys, is_ty_param_diagnostic_item};\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{self as hir, def_id::DefId, QPath};\n+use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n-// use rustc_middle::ty::Adt;\n \n use super::RC_MUTEX;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n-    if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n-        if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym!(mutex_type)) {\n+    if_chain! {\n+        if cx.tcx.is_diagnostic_item(sym::Rc, def_id) ;\n+        if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym!(mutex_type)) ;\n+        if let TyKind::Path(ref qpath_inner)=ty.kind;\n+\n+        then{\n             let mut applicability = Applicability::MachineApplicable;\n \n-            let inner_span = match get_qpath_generic_tys(qpath).skip(1).next() {\n+            let inner_span = match get_qpath_generic_tys(qpath_inner).next() {\n                 Some(ty) => ty.span,\n                 None => return false,\n             };"}, {"sha": "b36b1d0914bd2979d908954cc893bee6e27cb9e1", "filename": "tests/ui/rc_mutex.fixed", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/tests%2Fui%2Frc_mutex.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/tests%2Fui%2Frc_mutex.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.fixed?ref=c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "patch": "@@ -0,0 +1,28 @@\n+// run-rustfix\n+#![warn(clippy::rc_mutex)]\n+#![allow(unused_imports)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Mutex;\n+\n+pub struct MyStruct {}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+pub fn test1<T>(foo: Rc<RefCell<T>>) {}\n+\n+pub fn test2(foo: Rc<RefCell<MyEnum>>) {}\n+\n+pub fn test3(foo: Rc<RefCell<SubT<usize>>>) {}\n+\n+fn main() {}"}, {"sha": "e6ec4549de9fab021c92fb98be7c9317a38638e4", "filename": "tests/ui/rc_mutex.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/tests%2Fui%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/tests%2Fui%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.rs?ref=c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "patch": "@@ -0,0 +1,28 @@\n+// run-rustfix\n+#![warn(clippy::rc_mutex)]\n+#![allow(unused_imports)]\n+#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n+#![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use std::sync::Mutex;\n+\n+pub struct MyStruct {}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+pub fn test1<T>(foo: Rc<Mutex<T>>) {}\n+\n+pub fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+\n+pub fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n+\n+fn main() {}"}, {"sha": "ad0340dcf55627cb78c3a999d72613119c37791f", "filename": "tests/ui/rc_mutex.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/tests%2Fui%2Frc_mutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0f3c2fe277102f22efc21ce64dc3e3423b777d4/tests%2Fui%2Frc_mutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.stderr?ref=c0f3c2fe277102f22efc21ce64dc3e3423b777d4", "patch": "@@ -0,0 +1,22 @@\n+error: you seem to be trying to use `Rc<Mutex<T>>`. Consider using `Rc<RefCell<T>>`\n+  --> $DIR/rc_mutex.rs:22:22\n+   |\n+LL | pub fn test1<T>(foo: Rc<Mutex<T>>) {}\n+   |                      ^^^^^^^^^^^^ help: try: `Rc<RefCell<T>>`\n+   |\n+   = note: `-D clippy::rc-mutex` implied by `-D warnings`\n+\n+error: you seem to be trying to use `Rc<Mutex<T>>`. Consider using `Rc<RefCell<T>>`\n+  --> $DIR/rc_mutex.rs:24:19\n+   |\n+LL | pub fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+   |                   ^^^^^^^^^^^^^^^^^ help: try: `Rc<RefCell<MyEnum>>`\n+\n+error: you seem to be trying to use `Rc<Mutex<T>>`. Consider using `Rc<RefCell<T>>`\n+  --> $DIR/rc_mutex.rs:26:19\n+   |\n+LL | pub fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `Rc<RefCell<SubT<usize>>>`\n+\n+error: aborting due to 3 previous errors\n+"}]}