{"sha": "631896dc1996d239a532b0ce02d5fe886660149e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTg5NmRjMTk5NmQyMzlhNTMyYjBjZTAyZDVmZTg4NjY2MDE0OWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-20T20:35:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-20T20:35:51Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "2cc34760c310fdc65830ea29123c553b02adc790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cc34760c310fdc65830ea29123c553b02adc790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/631896dc1996d239a532b0ce02d5fe886660149e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/631896dc1996d239a532b0ce02d5fe886660149e", "html_url": "https://github.com/rust-lang/rust/commit/631896dc1996d239a532b0ce02d5fe886660149e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/631896dc1996d239a532b0ce02d5fe886660149e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eace6afed224e57708b9fd9c7e11542c480b7562", "url": "https://api.github.com/repos/rust-lang/rust/commits/eace6afed224e57708b9fd9c7e11542c480b7562", "html_url": "https://github.com/rust-lang/rust/commit/eace6afed224e57708b9fd9c7e11542c480b7562"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "d3af4ab1c7467574d076cd6c654c6c1a08181127", "filename": "src/doc/reference.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/631896dc1996d239a532b0ce02d5fe886660149e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/631896dc1996d239a532b0ce02d5fe886660149e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=631896dc1996d239a532b0ce02d5fe886660149e", "patch": "@@ -485,7 +485,7 @@ Examples of integer literals of various forms:\n ```\n 123is;                             // type isize\n 123us;                             // type usize\n-123_us                             // type usize\n+123_us;                            // type usize\n 0xff_u8;                           // type u8\n 0o70_i16;                          // type i16\n 0b1111_1111_1001_0000_i32;         // type i32\n@@ -1500,11 +1500,11 @@ Constants should in general be preferred over statics, unless large amounts of\n data are being stored, or single-address and mutability properties are required.\n \n ```\n-use std::sync::atomic::{AtomicUint, Ordering, ATOMIC_USIZE_INIT};;\n+use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n \n // Note that ATOMIC_USIZE_INIT is a *const*, but it may be used to initialize a\n // static. This static can be modified, so it is not placed in read-only memory.\n-static COUNTER: AtomicUint = ATOMIC_USIZE_INIT;\n+static COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;\n \n // This table is a candidate to be placed in read-only memory.\n static TABLE: &'static [usize] = &[1, 2, 3, /* ... */];\n@@ -3437,8 +3437,8 @@ fn is_symmetric(list: &[u32]) -> bool {\n }\n \n fn main() {\n-    let sym     = &[0us, 1, 4, 2, 4, 1, 0];\n-    let not_sym = &[0us, 1, 7, 2, 4, 1, 0];\n+    let sym     = &[0, 1, 4, 2, 4, 1, 0];\n+    let not_sym = &[0, 1, 7, 2, 4, 1, 0];\n     assert!(is_symmetric(sym));\n     assert!(!is_symmetric(not_sym));\n }"}, {"sha": "dd376fe9e10e8db308bbf19ae056b8f956f5b15b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/631896dc1996d239a532b0ce02d5fe886660149e/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/631896dc1996d239a532b0ce02d5fe886660149e/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=631896dc1996d239a532b0ce02d5fe886660149e", "patch": "@@ -253,10 +253,8 @@ pub fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n     let bytes = match File::open(path).read_to_end() {\n         Ok(bytes) => bytes,\n         Err(e) => {\n-            let error_msg = e.desc;\n             err(&format!(\"couldn't read {:?}: {}\",\n-                        path.display(),\n-                        error_msg)[]);\n+                        path.display(), e)[]);\n             unreachable!()\n         }\n     };"}]}