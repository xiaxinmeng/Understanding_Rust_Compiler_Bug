{"sha": "5c68dd6b59cd5006a96280217bc88a6e26f90f1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNjhkZDZiNTljZDUwMDZhOTYyODAyMTdiYzg4YTZlMjZmOTBmMWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T07:53:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T07:53:54Z"}, "message": "Better tests for completion scoring", "tree": {"sha": "d8dce79c52d266d9a79edfa673b5e315d195d304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8dce79c52d266d9a79edfa673b5e315d195d304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c68dd6b59cd5006a96280217bc88a6e26f90f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c68dd6b59cd5006a96280217bc88a6e26f90f1f", "html_url": "https://github.com/rust-lang/rust/commit/5c68dd6b59cd5006a96280217bc88a6e26f90f1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c68dd6b59cd5006a96280217bc88a6e26f90f1f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaba2300fb14360a00e75da1916b11fd99c0afce", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaba2300fb14360a00e75da1916b11fd99c0afce", "html_url": "https://github.com/rust-lang/rust/commit/aaba2300fb14360a00e75da1916b11fd99c0afce"}], "stats": {"total": 253, "additions": 61, "deletions": 192}, "files": [{"sha": "477d6f6f6429516afab081a77182734555c61bd3", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c68dd6b59cd5006a96280217bc88a6e26f90f1f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c68dd6b59cd5006a96280217bc88a6e26f90f1f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=5c68dd6b59cd5006a96280217bc88a6e26f90f1f", "patch": "@@ -95,7 +95,7 @@ impl fmt::Debug for CompletionItem {\n     }\n }\n \n-#[derive(Debug, Clone, Copy)]\n+#[derive(Debug, Clone, Copy, Ord, PartialOrd, Eq, PartialEq)]\n pub enum CompletionScore {\n     /// If only type match\n     TypeMatch,"}, {"sha": "ee810b59f3b1abad2de0a7eb6dcced559fe8392a", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 56, "deletions": 190, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/5c68dd6b59cd5006a96280217bc88a6e26f90f1f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c68dd6b59cd5006a96280217bc88a6e26f90f1f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=5c68dd6b59cd5006a96280217bc88a6e26f90f1f", "patch": "@@ -461,19 +461,49 @@ fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static s\n \n #[cfg(test)]\n mod tests {\n+    use std::cmp::Reverse;\n+\n     use expect::{expect, Expect};\n     use test_utils::mark;\n \n-    use crate::completion::{\n-        test_utils::{check_edit, check_edit_with_config, do_completion},\n-        CompletionConfig, CompletionKind,\n+    use crate::{\n+        completion::{\n+            test_utils::{\n+                check_edit, check_edit_with_config, do_completion, get_all_completion_items,\n+            },\n+            CompletionConfig, CompletionKind,\n+        },\n+        CompletionScore,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = do_completion(ra_fixture, CompletionKind::Reference);\n         expect.assert_debug_eq(&actual);\n     }\n \n+    fn check_scores(ra_fixture: &str, expect: Expect) {\n+        fn display_score(score: Option<CompletionScore>) -> &'static str {\n+            match score {\n+                Some(CompletionScore::TypeMatch) => \"[type]\",\n+                Some(CompletionScore::TypeAndNameMatch) => \"[type+name]\",\n+                None => \"[]\".into(),\n+            }\n+        }\n+\n+        let mut completions = get_all_completion_items(ra_fixture, &CompletionConfig::default());\n+        completions.sort_by_key(|it| (Reverse(it.score()), it.label().to_string()));\n+        let actual = completions\n+            .into_iter()\n+            .filter(|it| it.completion_kind == CompletionKind::Reference)\n+            .map(|it| {\n+                let tag = it.kind().unwrap().tag();\n+                let score = display_score(it.score());\n+                format!(\"{} {} {}\\n\", tag, it.label(), score)\n+            })\n+            .collect::<String>();\n+        expect.assert_eq(&actual);\n+    }\n+\n     #[test]\n     fn enum_detail_includes_record_fields() {\n         check(\n@@ -902,244 +932,80 @@ fn main() { frobnicate!(); }\n     }\n \n     #[test]\n-    fn active_param_type_match() {\n+    fn active_param_score() {\n         mark::check!(active_param_type_match);\n-        check(\n-            r#\"\n-struct S { foo: i64, bar: u32, baz: () }\n-fn test(x: u32) { }\n-fn foo(s: S) { test(s.<|>) }\n-\"#,\n-            expect![[r#\"\n-                [\n-                    CompletionItem {\n-                        label: \"bar\",\n-                        source_range: 83..83,\n-                        delete: 83..83,\n-                        insert: \"bar\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                        score: TypeMatch,\n-                    },\n-                    CompletionItem {\n-                        label: \"baz\",\n-                        source_range: 83..83,\n-                        delete: 83..83,\n-                        insert: \"baz\",\n-                        kind: Field,\n-                        detail: \"()\",\n-                    },\n-                    CompletionItem {\n-                        label: \"foo\",\n-                        source_range: 83..83,\n-                        delete: 83..83,\n-                        insert: \"foo\",\n-                        kind: Field,\n-                        detail: \"i64\",\n-                    },\n-                ]\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn active_param_type_and_name_match() {\n-        check(\n+        check_scores(\n             r#\"\n struct S { foo: i64, bar: u32, baz: u32 }\n fn test(bar: u32) { }\n fn foo(s: S) { test(s.<|>) }\n \"#,\n             expect![[r#\"\n-                [\n-                    CompletionItem {\n-                        label: \"bar\",\n-                        source_range: 86..86,\n-                        delete: 86..86,\n-                        insert: \"bar\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                        score: TypeAndNameMatch,\n-                    },\n-                    CompletionItem {\n-                        label: \"baz\",\n-                        source_range: 86..86,\n-                        delete: 86..86,\n-                        insert: \"baz\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                        score: TypeMatch,\n-                    },\n-                    CompletionItem {\n-                        label: \"foo\",\n-                        source_range: 86..86,\n-                        delete: 86..86,\n-                        insert: \"foo\",\n-                        kind: Field,\n-                        detail: \"i64\",\n-                    },\n-                ]\n+                fd bar [type+name]\n+                fd baz [type]\n+                fd foo []\n             \"#]],\n         );\n     }\n \n     #[test]\n-    fn record_field_type_match() {\n+    fn record_field_scores() {\n         mark::check!(record_field_type_match);\n-        check(\n+        check_scores(\n             r#\"\n struct A { foo: i64, bar: u32, baz: u32 }\n struct B { x: (), y: f32, bar: u32 }\n fn foo(a: A) { B { bar: a.<|> }; }\n \"#,\n             expect![[r#\"\n-                [\n-                    CompletionItem {\n-                        label: \"bar\",\n-                        source_range: 105..105,\n-                        delete: 105..105,\n-                        insert: \"bar\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                        score: TypeAndNameMatch,\n-                    },\n-                    CompletionItem {\n-                        label: \"baz\",\n-                        source_range: 105..105,\n-                        delete: 105..105,\n-                        insert: \"baz\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                        score: TypeMatch,\n-                    },\n-                    CompletionItem {\n-                        label: \"foo\",\n-                        source_range: 105..105,\n-                        delete: 105..105,\n-                        insert: \"foo\",\n-                        kind: Field,\n-                        detail: \"i64\",\n-                    },\n-                ]\n+                fd bar [type+name]\n+                fd baz [type]\n+                fd foo []\n             \"#]],\n         )\n     }\n \n     #[test]\n-    fn record_field_type_match_and_fn_call() {\n-        check(\n+    fn record_field_and_call_scores() {\n+        check_scores(\n             r#\"\n struct A { foo: i64, bar: u32, baz: u32 }\n struct B { x: (), y: f32, bar: u32 }\n fn f(foo: i64) {  }\n fn foo(a: A) { B { bar: f(a.<|>) }; }\n \"#,\n             expect![[r#\"\n-                [\n-                    CompletionItem {\n-                        label: \"bar\",\n-                        source_range: 127..127,\n-                        delete: 127..127,\n-                        insert: \"bar\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                    },\n-                    CompletionItem {\n-                        label: \"baz\",\n-                        source_range: 127..127,\n-                        delete: 127..127,\n-                        insert: \"baz\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                    },\n-                    CompletionItem {\n-                        label: \"foo\",\n-                        source_range: 127..127,\n-                        delete: 127..127,\n-                        insert: \"foo\",\n-                        kind: Field,\n-                        detail: \"i64\",\n-                        score: TypeAndNameMatch,\n-                    },\n-                ]\n+                fd foo [type+name]\n+                fd bar []\n+                fd baz []\n             \"#]],\n         );\n-        check(\n+        check_scores(\n             r#\"\n struct A { foo: i64, bar: u32, baz: u32 }\n struct B { x: (), y: f32, bar: u32 }\n fn f(foo: i64) {  }\n fn foo(a: A) { f(B { bar: a.<|> }); }\n \"#,\n             expect![[r#\"\n-                [\n-                    CompletionItem {\n-                        label: \"bar\",\n-                        source_range: 127..127,\n-                        delete: 127..127,\n-                        insert: \"bar\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                        score: TypeAndNameMatch,\n-                    },\n-                    CompletionItem {\n-                        label: \"baz\",\n-                        source_range: 127..127,\n-                        delete: 127..127,\n-                        insert: \"baz\",\n-                        kind: Field,\n-                        detail: \"u32\",\n-                        score: TypeMatch,\n-                    },\n-                    CompletionItem {\n-                        label: \"foo\",\n-                        source_range: 127..127,\n-                        delete: 127..127,\n-                        insert: \"foo\",\n-                        kind: Field,\n-                        detail: \"i64\",\n-                    },\n-                ]\n+                fd bar [type+name]\n+                fd baz [type]\n+                fd foo []\n             \"#]],\n         );\n     }\n \n     #[test]\n     fn prioritize_exact_ref_match() {\n-        check(\n+        check_scores(\n             r#\"\n struct WorldSnapshot { _f: () };\n fn go(world: &WorldSnapshot) { go(w<|>) }\n \"#,\n             expect![[r#\"\n-                [\n-                    CompletionItem {\n-                        label: \"WorldSnapshot\",\n-                        source_range: 67..68,\n-                        delete: 67..68,\n-                        insert: \"WorldSnapshot\",\n-                        kind: Struct,\n-                    },\n-                    CompletionItem {\n-                        label: \"go(\u2026)\",\n-                        source_range: 67..68,\n-                        delete: 67..68,\n-                        insert: \"go(${1:world})$0\",\n-                        kind: Function,\n-                        lookup: \"go\",\n-                        detail: \"fn go(world: &WorldSnapshot)\",\n-                        trigger_call_info: true,\n-                    },\n-                    CompletionItem {\n-                        label: \"world\",\n-                        source_range: 67..68,\n-                        delete: 67..68,\n-                        insert: \"world\",\n-                        kind: Binding,\n-                        detail: \"&WorldSnapshot\",\n-                        score: TypeAndNameMatch,\n-                    },\n-                ]\n+                bn world [type+name]\n+                st WorldSnapshot []\n+                fn go(\u2026) []\n             \"#]],\n         );\n     }"}, {"sha": "cbae1da859a41c14818b448c1ff972be9200958b", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c68dd6b59cd5006a96280217bc88a6e26f90f1f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c68dd6b59cd5006a96280217bc88a6e26f90f1f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=5c68dd6b59cd5006a96280217bc88a6e26f90f1f", "patch": "@@ -92,7 +92,10 @@ pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -\n         .unwrap();\n }\n \n-fn get_all_completion_items(code: &str, options: &CompletionConfig) -> Vec<CompletionItem> {\n+pub(crate) fn get_all_completion_items(\n+    code: &str,\n+    options: &CompletionConfig,\n+) -> Vec<CompletionItem> {\n     let (analysis, position) = analysis_and_position(code);\n     analysis.completions(options, position).unwrap().unwrap().into()\n }"}]}