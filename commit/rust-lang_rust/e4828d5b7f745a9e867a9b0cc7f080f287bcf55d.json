{"sha": "e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODI4ZDViN2Y3NDVhOWU4NjdhOWIwY2M3ZjA4MGYyODdiY2Y1NWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-16T19:33:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-16T19:33:39Z"}, "message": "Auto merge of #89019 - Manishearth:rollup-5qp8a5s, r=Manishearth\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #88292 (Enable --generate-link-to-definition for rustc's docs)\n - #88729 (Recover from `Foo(a: 1, b: 2)`)\n - #88875 (cleanup(rustc_trait_selection): remove vestigial code from rustc_on_unimplemented)\n - #88892 (Move object safety suggestions to the end of the error)\n - #88928 (Document the closure arguments for `reduce`.)\n - #88976 (Clean up and add doc comments for CStr)\n - #88983 (Allow calling `get_body_with_borrowck_facts` without `-Z polonius`)\n - #88985 (Update clobber_abi list to include k[1-7] regs)\n - #88986 (Update the backtrace crate)\n - #89009 (Fix typo in `break` docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "837d5a6af879d2c33d1fa6893081164599073523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/837d5a6af879d2c33d1fa6893081164599073523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "html_url": "https://github.com/rust-lang/rust/commit/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237bb5e0088782945d2c3146e4907e3a5e9c7c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/237bb5e0088782945d2c3146e4907e3a5e9c7c2c", "html_url": "https://github.com/rust-lang/rust/commit/237bb5e0088782945d2c3146e4907e3a5e9c7c2c"}, {"sha": "d9fa3561b67893268b2e90d74d4c0a3212e20d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9fa3561b67893268b2e90d74d4c0a3212e20d4f", "html_url": "https://github.com/rust-lang/rust/commit/d9fa3561b67893268b2e90d74d4c0a3212e20d4f"}], "stats": {"total": 316, "additions": 210, "deletions": 106}, "files": [{"sha": "4333038a6f936618c6f683dd6b4230fbd104a15a", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -14,16 +14,16 @@ pub use super::{\n };\n \n /// This function computes Polonius facts for the given body. It makes a copy of\n-/// the body because it needs to regenerate the region identifiers.\n+/// the body because it needs to regenerate the region identifiers. This function\n+/// should never be invoked during a typical compilation session due to performance\n+/// issues with Polonius.\n ///\n /// Note:\n /// *   This function will panic if the required body was already stolen. This\n ///     can, for example, happen when requesting a body of a `const` function\n ///     because they are evaluated during typechecking. The panic can be avoided\n ///     by overriding the `mir_borrowck` query. You can find a complete example\n ///     that shows how to do this at `src/test/run-make/obtain-borrowck/`.\n-/// *   This function will also panic if computation of Polonius facts\n-///     (`-Zpolonius` flag) is not enabled.\n ///\n /// *   Polonius is highly unstable, so expect regular changes in its signature or other details.\n pub fn get_body_with_borrowck_facts<'tcx>("}, {"sha": "b3b7d7e02ccef068b444607116f3058a20ba0f10", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -154,11 +154,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     debug!(\"do_mir_borrowck(def = {:?})\", def);\n \n-    assert!(\n-        !return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius,\n-        \"borrowck facts can be requested only when Polonius is enabled\"\n-    );\n-\n     let tcx = infcx.tcx;\n     let param_env = tcx.param_env(def.did);\n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n@@ -235,6 +230,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let borrow_set =\n         Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));\n \n+    let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;\n+\n     // Compute non-lexical lifetimes.\n     let nll::NllOutput {\n         regioncx,\n@@ -254,6 +251,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         &mdpe.move_data,\n         &borrow_set,\n         &upvars,\n+        use_polonius,\n     );\n \n     // Dump MIR results into a file, if that is enabled. This let us"}, {"sha": "477b049b07596cda7b1c7eed0399d82fdf7938cb", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -164,8 +164,10 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n     move_data: &MoveData<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n     upvars: &[Upvar<'tcx>],\n+    use_polonius: bool,\n ) -> NllOutput<'tcx> {\n-    let mut all_facts = AllFacts::enabled(infcx.tcx).then_some(AllFacts::default());\n+    let mut all_facts =\n+        (use_polonius || AllFacts::enabled(infcx.tcx)).then_some(AllFacts::default());\n \n     let universal_regions = Rc::new(universal_regions);\n \n@@ -281,7 +283,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n             all_facts.write_to_dir(dir_path, location_table).unwrap();\n         }\n \n-        if infcx.tcx.sess.opts.debugging_opts.polonius {\n+        if use_polonius {\n             let algorithm =\n                 env::var(\"POLONIUS_ALGORITHM\").unwrap_or_else(|_| String::from(\"Hybrid\"));\n             let algorithm = Algorithm::from_str(&algorithm).unwrap();"}, {"sha": "363cc72b52c3e5bc46483c5b94f796bde701144f", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -72,7 +72,7 @@ pub(super) fn parse(\n                                             // this with just `span.edition()`. A\n                                             // `SyntaxContext::root()` from the current crate will\n                                             // have the edition of the current crate, and a\n-                                            // `SyntaxxContext::root()` from a foreign crate will\n+                                            // `SyntaxContext::root()` from a foreign crate will\n                                             // have the edition of that crate (which we manually\n                                             // retrieve via the `edition` parameter).\n                                             if span.ctxt() == SyntaxContext::root() {"}, {"sha": "9dbfa3a850ba848d505e469ac4edf8ee44f33f3b", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -83,10 +83,6 @@ pub fn report_object_safety_error(\n                     messages.push(msg.clone());\n                 }\n             }\n-            if trait_span.is_some() {\n-                // Only provide the help if its a local trait, otherwise it's not actionable.\n-                violation.solution(&mut err);\n-            }\n         }\n     }\n     let has_multi_span = !multi_span.is_empty();\n@@ -104,5 +100,13 @@ pub fn report_object_safety_error(\n          to be resolvable dynamically; for more information visit \\\n          <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n     );\n+    if trait_span.is_some() {\n+        let mut reported_violations: Vec<_> = reported_violations.into_iter().collect();\n+        reported_violations.sort();\n+        for violation in reported_violations {\n+            // Only provide the help if its a local trait, otherwise it's not actionable.\n+            violation.solution(&mut err);\n+        }\n+    }\n     err\n }"}, {"sha": "fc88b95bc67cd08a8cbf48b675f355de52c2e004", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -730,7 +730,7 @@ pub struct ImplSourceTraitAliasData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, HashStable, PartialOrd, Ord)]\n pub enum ObjectSafetyViolation {\n     /// `Self: Sized` declared on the trait.\n     SizedSelf(SmallVec<[Span; 1]>),\n@@ -879,7 +879,7 @@ impl ObjectSafetyViolation {\n }\n \n /// Reasons a method might not be object-safe.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, PartialOrd, Ord)]\n pub enum MethodViolationCode {\n     /// e.g., `fn foo()`\n     StaticMethod(Option<(&'static str, Span)>, Span, bool /* has args */),"}, {"sha": "72c4e27cbeabfbcffd5b98f98810512604e31d3f", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -28,8 +28,8 @@ pub use self::drop_flag_effects::{\n     on_lookup_result_bits,\n };\n pub use self::framework::{\n-    fmt, lattice, visit_results, Analysis, AnalysisDomain, Backward, Direction, Engine, Forward,\n-    GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor, ResultsRefCursor,\n+    fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, Direction, Engine,\n+    Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor, ResultsRefCursor,\n     ResultsVisitable, ResultsVisitor,\n };\n "}, {"sha": "bfd0de85438d1044778c9e142601abf61317e64d", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -76,7 +76,7 @@ mod unreachable_prop;\n use rustc_const_eval::transform::check_consts;\n use rustc_const_eval::transform::promote_consts;\n use rustc_const_eval::transform::validate;\n-use rustc_const_eval::transform::MirPass;\n+pub use rustc_const_eval::transform::MirPass;\n use rustc_mir_dataflow::rustc_peek;\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "737f1d9cbb15e0f55269c63c22b891063764b7d8", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 91, "deletions": 10, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -907,6 +907,12 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn look_ahead_type_ascription_as_field(&mut self) -> bool {\n+        self.look_ahead(1, |t| t.is_ident())\n+            && self.look_ahead(2, |t| t == &token::Colon)\n+            && self.look_ahead(3, |t| t.can_begin_expr())\n+    }\n+\n     fn parse_dot_suffix_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n         match self.token.uninterpolate().kind {\n             token::Ident(..) => self.parse_dot_suffix(base, lo),\n@@ -1056,12 +1062,76 @@ impl<'a> Parser<'a> {\n \n     /// Parse a function call expression, `expr(...)`.\n     fn parse_fn_call_expr(&mut self, lo: Span, fun: P<Expr>) -> P<Expr> {\n-        let seq = self.parse_paren_expr_seq().map(|args| {\n+        let snapshot = if self.token.kind == token::OpenDelim(token::Paren)\n+            && self.look_ahead_type_ascription_as_field()\n+        {\n+            Some((self.clone(), fun.kind.clone()))\n+        } else {\n+            None\n+        };\n+        let open_paren = self.token.span;\n+\n+        let mut seq = self.parse_paren_expr_seq().map(|args| {\n             self.mk_expr(lo.to(self.prev_token.span), self.mk_call(fun, args), AttrVec::new())\n         });\n+        if let Some(expr) =\n+            self.maybe_recover_struct_lit_bad_delims(lo, open_paren, &mut seq, snapshot)\n+        {\n+            return expr;\n+        }\n         self.recover_seq_parse_error(token::Paren, lo, seq)\n     }\n \n+    /// If we encounter a parser state that looks like the user has written a `struct` literal with\n+    /// parentheses instead of braces, recover the parser state and provide suggestions.\n+    fn maybe_recover_struct_lit_bad_delims(\n+        &mut self,\n+        lo: Span,\n+        open_paren: Span,\n+        seq: &mut PResult<'a, P<Expr>>,\n+        snapshot: Option<(Self, ExprKind)>,\n+    ) -> Option<P<Expr>> {\n+        match (seq.as_mut(), snapshot) {\n+            (Err(ref mut err), Some((mut snapshot, ExprKind::Path(None, path)))) => {\n+                let name = pprust::path_to_string(&path);\n+                snapshot.bump(); // `(`\n+                match snapshot.parse_struct_fields(path.clone(), false, token::Paren) {\n+                    Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {\n+                        // We have are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n+                        // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.\n+                        *self = snapshot;\n+                        let close_paren = self.prev_token.span;\n+                        let span = lo.to(self.prev_token.span);\n+                        err.cancel();\n+                        self.struct_span_err(\n+                            span,\n+                            \"invalid `struct` delimiters or `fn` call arguments\",\n+                        )\n+                        .multipart_suggestion(\n+                            &format!(\"if `{}` is a struct, use braces as delimiters\", name),\n+                            vec![(open_paren, \" { \".to_string()), (close_paren, \" }\".to_string())],\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .multipart_suggestion(\n+                            &format!(\"if `{}` is a function, use the arguments directly\", name),\n+                            fields\n+                                .into_iter()\n+                                .map(|field| (field.span.until(field.expr.span), String::new()))\n+                                .collect(),\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n+                        return Some(self.mk_expr_err(span));\n+                    }\n+                    Ok(_) => {}\n+                    Err(mut err) => err.emit(),\n+                }\n+            }\n+            _ => {}\n+        }\n+        None\n+    }\n+\n     /// Parse an indexing expression `expr[...]`.\n     fn parse_index_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {\n         self.bump(); // `[`\n@@ -2374,14 +2444,12 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n-    /// Precondition: already parsed the '{'.\n-    pub(super) fn parse_struct_expr(\n+    pub(super) fn parse_struct_fields(\n         &mut self,\n-        qself: Option<ast::QSelf>,\n         pth: ast::Path,\n-        attrs: AttrVec,\n         recover: bool,\n-    ) -> PResult<'a, P<Expr>> {\n+        close_delim: token::DelimToken,\n+    ) -> PResult<'a, (Vec<ExprField>, ast::StructRest, bool)> {\n         let mut fields = Vec::new();\n         let mut base = ast::StructRest::None;\n         let mut recover_async = false;\n@@ -2393,11 +2461,11 @@ impl<'a> Parser<'a> {\n             e.note(\"for more on editions, read https://doc.rust-lang.org/edition-guide\");\n         };\n \n-        while self.token != token::CloseDelim(token::Brace) {\n+        while self.token != token::CloseDelim(close_delim) {\n             if self.eat(&token::DotDot) {\n                 let exp_span = self.prev_token.span;\n                 // We permit `.. }` on the left-hand side of a destructuring assignment.\n-                if self.check(&token::CloseDelim(token::Brace)) {\n+                if self.check(&token::CloseDelim(close_delim)) {\n                     self.sess.gated_spans.gate(sym::destructuring_assignment, self.prev_token.span);\n                     base = ast::StructRest::Rest(self.prev_token.span.shrink_to_hi());\n                     break;\n@@ -2438,7 +2506,7 @@ impl<'a> Parser<'a> {\n                 }\n             };\n \n-            match self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)]) {\n+            match self.expect_one_of(&[token::Comma], &[token::CloseDelim(close_delim)]) {\n                 Ok(_) => {\n                     if let Some(f) = parsed_field.or(recovery_field) {\n                         // Only include the field if there's no parse error for the field name.\n@@ -2469,8 +2537,21 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         }\n+        Ok((fields, base, recover_async))\n+    }\n \n-        let span = pth.span.to(self.token.span);\n+    /// Precondition: already parsed the '{'.\n+    pub(super) fn parse_struct_expr(\n+        &mut self,\n+        qself: Option<ast::QSelf>,\n+        pth: ast::Path,\n+        attrs: AttrVec,\n+        recover: bool,\n+    ) -> PResult<'a, P<Expr>> {\n+        let lo = pth.span;\n+        let (fields, base, recover_async) =\n+            self.parse_struct_fields(pth.clone(), recover, token::Brace)?;\n+        let span = lo.to(self.token.span);\n         self.expect(&token::CloseDelim(token::Brace))?;\n         let expr = if recover_async {\n             ExprKind::Err"}, {"sha": "d14feecbbdf1d7c025b886cb738c853bf3b7ff6f", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -934,7 +934,6 @@ symbols! {\n         panic_unwind,\n         panicking,\n         param_attrs,\n-        parent_trait,\n         partial_cmp,\n         partial_ord,\n         passes,"}, {"sha": "6128c119b6b765568a68dc692cccdfca332c368f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -154,9 +154,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 flags.push((sym::from_method, Some(method.to_string())));\n             }\n         }\n-        if let Some((t, _)) = self.get_parent_trait_ref(&obligation.cause.code) {\n-            flags.push((sym::parent_trait, Some(t)));\n-        }\n \n         if let Some(k) = obligation.cause.span.desugaring_kind() {\n             flags.push((sym::from_desugaring, None));"}, {"sha": "cc89bb66f91b2b4a640b0b525ca5d753e3346d7e", "filename": "library/backtrace", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fbacktrace?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -1 +1 @@\n-Subproject commit 4f925f8d81dfa57067537217e501e1dff7433491\n+Subproject commit cc89bb66f91b2b4a640b0b525ca5d753e3346d7e"}, {"sha": "b0a9d9f5ef5c9c6f192bf097cae32984d267e3bc", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -2172,8 +2172,9 @@ pub trait Iterator {\n     /// If the iterator is empty, returns [`None`]; otherwise, returns the\n     /// result of the reduction.\n     ///\n+    /// The reducing function is a closure with two arguments: an 'accumulator', and an element.\n     /// For iterators with at least one element, this is the same as [`fold()`]\n-    /// with the first element of the iterator as the initial value, folding\n+    /// with the first element of the iterator as the initial accumulator value, folding\n     /// every subsequent element into it.\n     ///\n     /// [`fold()`]: Iterator::fold\n@@ -2187,8 +2188,8 @@ pub trait Iterator {\n     ///     where I: Iterator,\n     ///           I::Item: Ord,\n     /// {\n-    ///     iter.reduce(|a, b| {\n-    ///         if a >= b { a } else { b }\n+    ///     iter.reduce(|accum, item| {\n+    ///         if accum >= item { accum } else { item }\n     ///     })\n     /// }\n     /// let a = [10, 20, 5, -23, 0];"}, {"sha": "3b9175503080c1e330b2b65a2d67ba420b101a19", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -915,6 +915,7 @@ impl From<CString> for Box<CStr> {\n \n #[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]\n impl<'a> From<CString> for Cow<'a, CStr> {\n+    /// Converts a [`CString`] into an owned [`Cow`] without copying or allocating.\n     #[inline]\n     fn from(s: CString) -> Cow<'a, CStr> {\n         Cow::Owned(s)\n@@ -923,6 +924,7 @@ impl<'a> From<CString> for Cow<'a, CStr> {\n \n #[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]\n impl<'a> From<&'a CStr> for Cow<'a, CStr> {\n+    /// Converts a [`CStr`] into a borrowed [`Cow`] without copying or allocating.\n     #[inline]\n     fn from(s: &'a CStr) -> Cow<'a, CStr> {\n         Cow::Borrowed(s)\n@@ -931,6 +933,7 @@ impl<'a> From<&'a CStr> for Cow<'a, CStr> {\n \n #[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]\n impl<'a> From<&'a CString> for Cow<'a, CStr> {\n+    /// Converts a `&`[`CString`] into a borrowed [`Cow`] without copying or allocating.\n     #[inline]\n     fn from(s: &'a CString) -> Cow<'a, CStr> {\n         Cow::Borrowed(s.as_c_str())"}, {"sha": "2e93807037464af71fddb3fe7c9004b5b2fcca23", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -77,7 +77,7 @@ mod as_keyword {}\n ///     '_inner: for j in 1..=200 {\n ///         println!(\"    inner iteration (j): {}\", j);\n ///         if j >= 3 {\n-///             // breaks from inner loop, let's outer loop continue.\n+///             // breaks from inner loop, lets outer loop continue.\n ///             break;\n ///         }\n ///         if i >= 2 {"}, {"sha": "b7478d83955de872732821b8503f1288f07faa76", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -589,6 +589,7 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"-Zunstable-options\");\n         cargo.rustdocflag(\"-Znormalize-docs\");\n         cargo.rustdocflag(\"--show-type-layout\");\n+        cargo.rustdocflag(\"--generate-link-to-definition\");\n         compile::rustc_cargo(builder, &mut cargo, target);\n         cargo.arg(\"-Zunstable-options\");\n         cargo.arg(\"-Zskip-rustdoc-fingerprint\");"}, {"sha": "ccaf6e8733e0c2e2987f8f58b7f2eb23fad3f23e", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -804,9 +804,9 @@ The following ABIs can be used with `clobber_abi`:\n \n | Architecture | ABI name | Clobbered registers |\n | ------------ | -------- | ------------------- |\n-| x86-32 | `\"C\"`, `\"system\"`, `\"efiapi\"`, `\"cdecl\"`, `\"stdcall\"`, `\"fastcall\"` | `ax`, `cx`, `dx`, `xmm[0-7]`, `mm[0-7]`, `st([0-7])` |\n-| x86-64 | `\"C\"`, `\"system\"` (on Windows), `\"efiapi\"`, `\"win64\"` | `ax`, `cx`, `dx`, `r[8-11]`, `xmm[0-31]`, `mm[0-7]`, `st([0-7])` |\n-| x86-64 | `\"C\"`, `\"system\"` (on non-Windows), `\"sysv64\"` | `ax`, `cx`, `dx`, `si`, `di`, `r[8-11]`, `xmm[0-31]`, `mm[0-7]`, `st([0-7])` |\n+| x86-32 | `\"C\"`, `\"system\"`, `\"efiapi\"`, `\"cdecl\"`, `\"stdcall\"`, `\"fastcall\"` | `ax`, `cx`, `dx`, `xmm[0-7]`, `mm[0-7]`, `k[1-7]`, `st([0-7])` |\n+| x86-64 | `\"C\"`, `\"system\"` (on Windows), `\"efiapi\"`, `\"win64\"` | `ax`, `cx`, `dx`, `r[8-11]`, `xmm[0-31]`, `mm[0-7]`, `k[1-7]`, `st([0-7])` |\n+| x86-64 | `\"C\"`, `\"system\"` (on non-Windows), `\"sysv64\"` | `ax`, `cx`, `dx`, `si`, `di`, `r[8-11]`, `xmm[0-31]`, `mm[0-7]`, `k[1-7]`, `st([0-7])` |\n | AArch64 | `\"C\"`, `\"system\"`, `\"efiapi\"` | `x[0-17]`, `x30`, `v[0-31]`, `p[0-15]`, `ffr` |\n | ARM | `\"C\"`, `\"system\"`, `\"efiapi\"`, `\"aapcs\"` | `r[0-3]`, `r12`, `r14`, `s[0-15]`, `d[0-7]`, `d[16-31]` |\n | RISC-V | `\"C\"`, `\"system\"`, `\"efiapi\"` | `x1`, `x[5-7]`, `x[10-17]`, `x[28-31]`, `f[0-7]`, `f[10-17]`, `f[28-31]`, `v[0-31]` |"}, {"sha": "fc949f24948574619af48ab1e4a0ddd21541bea7", "filename": "src/test/ui/associated-consts/associated-const-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Trait` cannot be made into an object\n LL | impl dyn Trait {\n    |      ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n-   = help: consider moving `N` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/associated-const-in-trait.rs:6:11\n    |\n LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     const N: usize;\n    |           ^ ...because it contains this associated `const`\n+   = help: consider moving `N` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "7b158f1d754740ad1500dbaf5f7146e48085e045", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -21,14 +21,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | impl dyn Bar {}\n    |      ^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-48027.rs:2:11\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n+   = help: consider moving `X` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9090c1b6bcfb38f80ddf8628b5c388a679e72af", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n    |                        ^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n    |\n-   = help: consider moving `eq` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:6:43\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n    |       -------------                       ^^^^ ...because method `eq` references the `Self` type in this parameter\n    |       |\n    |       this trait cannot be made into an object...\n+   = help: consider moving `eq` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "4e1d71f154558857424588c3d100d5591912d63c", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL | fn use_dyn(v: &dyn Foo) {\n    |                ^^^^^^^ `Foo` cannot be made into an object\n    |\n-   = help: consider moving `test` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-err-ret.rs:8:23\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn test(&self) -> [u8; bar::<Self>()];\n    |                       ^^^^^^^^^^^^^^^^^^^ ...because method `test` references the `Self` type in its return type\n+   = help: consider moving `test` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "3773d6f5234b0ca88cc8aafef6e7598d02733606", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Trait` cannot be made into an object\n LL | fn call_foo(x: Box<dyn Trait>) {\n    |                    ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/E0038.rs:2:22\n    |\n LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     fn foo(&self) -> Self;\n    |                      ^^^^ ...because method `foo` references the `Self` type in its return type\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "72cb4cc843cc42b746e5f30127a4d0913256ce3b", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -40,29 +40,29 @@ error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n LL | fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n    |                                       ^^^^^^^^^^^^^^^^^^ `NonObjectSafe3` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:11:8\n    |\n LL | trait NonObjectSafe3 {\n    |       -------------- this trait cannot be made into an object...\n LL |     fn foo<T>(&self);\n    |        ^^^ ...because method `foo` has generic type parameters\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:35\n    |\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe4` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:15:22\n    |\n LL | trait NonObjectSafe4 {\n    |       -------------- this trait cannot be made into an object...\n LL |     fn foo(&self, s: &Self);\n    |                      ^^^^^ ...because method `foo` references the `Self` type in this parameter\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:16"}, {"sha": "a55642490f975eda5797eef92446e1f5986b2859", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL | fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n-   = help: consider moving `A` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/gat-in-trait-path.rs:5:10\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     type A<'a> where Self: 'a;\n    |          ^ ...because it contains the generic associated type `A`\n+   = help: consider moving `A` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "7dd1bdf891eb572599764d9928fbbd4994cabe14", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `X` cannot be made into an object\n LL | fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n    |                       ^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n    |\n-   = help: consider moving `Y` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-67510-pass.rs:4:10\n    |\n LL | trait X {\n    |       - this trait cannot be made into an object...\n LL |     type Y<'a>;\n    |          ^ ...because it contains the generic associated type `Y`\n+   = help: consider moving `Y` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "0a7eb5dde6009838b44af2b5c6ff9bc75bdb03bb", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -20,29 +20,29 @@ error[E0038]: the trait `SuperTrait` cannot be made into an object\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n-   = help: consider moving `SubType` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-76535.rs:6:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n LL |     type SubType<'a>: SubTrait;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n+   = help: consider moving `SubType` to another trait\n \n error[E0038]: the trait `SuperTrait` cannot be made into an object\n   --> $DIR/issue-76535.rs:36:57\n    |\n LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n    |\n-   = help: consider moving `SubType` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-76535.rs:6:10\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n LL |     type SubType<'a>: SubTrait;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n+   = help: consider moving `SubType` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n    = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n "}, {"sha": "17dd0ff4a0c94088a5bc09ecf56ed22a5a644bee", "filename": "src/test/ui/generic-associated-types/issue-78671.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-78671.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -20,14 +20,14 @@ error[E0038]: the trait `CollectionFamily` cannot be made into an object\n LL |     Box::new(Family) as &dyn CollectionFamily<Member=usize>\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CollectionFamily` cannot be made into an object\n    |\n-   = help: consider moving `Member` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-78671.rs:4:10\n    |\n LL | trait CollectionFamily {\n    |       ---------------- this trait cannot be made into an object...\n LL |     type Member<T>;\n    |          ^^^^^^ ...because it contains the generic associated type `Member`\n+   = help: consider moving `Member` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6f856a97e7257fcc8c5a9795e024846ff4159f9", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -20,29 +20,29 @@ error[E0038]: the trait `MapLike` cannot be made into an object\n LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n-   = help: consider moving `VRefCont` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-79422.rs:20:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n LL |     type VRefCont<'a>: RefCont<'a, V>;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n+   = help: consider moving `VRefCont` to another trait\n \n error[E0038]: the trait `MapLike` cannot be made into an object\n   --> $DIR/issue-79422.rs:41:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n    |\n-   = help: consider moving `VRefCont` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-79422.rs:20:10\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n LL |     type VRefCont<'a>: RefCont<'a, V>;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n+   = help: consider moving `VRefCont` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`\n    = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n "}, {"sha": "5ab37910207ca8d78abbf0b45e13733af78a8bf5", "filename": "src/test/ui/generic-associated-types/trait-objects.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `StreamingIterator` cannot be made into an object\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n    |\n-   = help: consider moving `Item` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/trait-objects.rs:4:10\n    |\n LL | trait StreamingIterator {\n    |       ----------------- this trait cannot be made into an object...\n LL |     type Item<'a> where Self: 'a;\n    |          ^^^^ ...because it contains the generic associated type `Item`\n+   = help: consider moving `Item` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "b9e27873636c3302c567ca2d8b9037d59ab4cf5d", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | fn foo(b: &dyn Bar) {\n    |            ^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-18959.rs:1:20\n    |\n LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }\n    |                    ^^^ ...because method `foo` has generic type parameters\n LL | pub trait Bar: Foo { }\n    |           --- this trait cannot be made into an object...\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "7b37e1f95dcc654da9b864e543b211b3c480a990", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,7 +4,6 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     let test: &mut dyn Bar = &mut thing;\n    |               ^^^^^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-19538.rs:2:8\n    |\n@@ -13,14 +12,14 @@ LL |     fn foo<T>(&self, val: T);\n ...\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n+   = help: consider moving `foo` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n LL |     let test: &mut dyn Bar = &mut thing;\n    |                              ^^^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-19538.rs:2:8\n    |\n@@ -29,6 +28,7 @@ LL |     fn foo<T>(&self, val: T);\n ...\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n+   = help: consider moving `foo` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&mut dyn Bar>` for `&mut Thing`\n    = note: required by cast to type `&mut dyn Bar`\n "}, {"sha": "c70cd8b5077a924fa9ef52a5f988d7a31ff0b1ef", "filename": "src/test/ui/issues/issue-34255-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -6,5 +6,5 @@ enum Test {\n \n fn main() {\n     Test::Drill(field: 42);\n-    //~^ ERROR expected type, found\n+    //~^ ERROR invalid `struct` delimiters or `fn` call arguments\n }"}, {"sha": "fbff75e37d9f0864ff0630fbf99acbe6b6f058dd", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -1,13 +1,18 @@\n-error: expected type, found `42`\n-  --> $DIR/issue-34255-1.rs:8:24\n+error: invalid `struct` delimiters or `fn` call arguments\n+  --> $DIR/issue-34255-1.rs:8:5\n    |\n LL |     Test::Drill(field: 42);\n-   |                      - ^^ expected type\n-   |                      |\n-   |                      tried to parse a type due to this type ascription\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+help: if `Test::Drill` is a struct, use braces as delimiters\n+   |\n+LL |     Test::Drill { field: 42 };\n+   |                 ~           ~\n+help: if `Test::Drill` is a function, use the arguments directly\n+   |\n+LL -     Test::Drill(field: 42);\n+LL +     Test::Drill(42);\n+   | \n \n error: aborting due to previous error\n "}, {"sha": "9dd144fee24a68550116fb5ebf82292c0cc3607b", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-associated-consts.rs:9:11\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n+   = help: consider moving `X` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "9ba3b251e66034d207640e2cadd95609a8c6f07c", "filename": "src/test/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     t\n    |     ^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-associated-consts.rs:9:11\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n+   = help: consider moving `X` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "345950f1ae670cb473598f10e32a51c4d7d09d94", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,29 +4,29 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n+   = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:24:39\n    |\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n    |                                       ^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n+   = help: consider moving `bar` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "86355627c796f9040d82f9c48686c4518f2771a8", "filename": "src/test/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     t\n    |     ^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n@@ -21,14 +21,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     t as &dyn Bar\n    |     ^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-generics.rs:10:8\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}, {"sha": "f91c9b9856055778e20bbf4ae4d39fa5f1fe1caf", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,29 +4,29 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:11:22\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n    |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n+   = help: consider moving `bar` to another trait\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:28:30\n    |\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    |                              ^^^^^^^^ `Baz` cannot be made into an object\n    |\n-   = help: consider moving `baz` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:15:22\n    |\n LL | trait Baz {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n    |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n+   = help: consider moving `baz` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f48628c9d1111fd24e5d847bb4b6855f6075cfa7", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL |     t\n    |     ^ `Bar` cannot be made into an object\n    |\n-   = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:11:22\n    |\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n    |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n+   = help: consider moving `bar` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n \n@@ -21,14 +21,14 @@ error[E0038]: the trait `Baz` cannot be made into an object\n LL |     t\n    |     ^ `Baz` cannot be made into an object\n    |\n-   = help: consider moving `baz` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-mentions-Self.rs:15:22\n    |\n LL | trait Baz {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n    |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n+   = help: consider moving `baz` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<&dyn Baz>` for `&T`\n    = note: required by cast to type `&dyn Baz`\n "}, {"sha": "a5b7e83a016223848f319673aea1dacefdf8ce17", "filename": "src/test/ui/parser/issue-44406.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-44406.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -1,10 +1,10 @@\n macro_rules! foo {\n     ($rest: tt) => {\n-        bar(baz: $rest)\n+        bar(baz: $rest) //~ ERROR invalid `struct` delimiters or `fn` call arguments\n     }\n }\n \n fn main() {\n-    foo!(true); //~ ERROR expected type, found keyword\n+    foo!(true);\n     //~^ ERROR expected identifier, found keyword\n }"}, {"sha": "862026408ef7f8d9db8a9631a37f9b2f98c70f4e", "filename": "src/test/ui/parser/issue-44406.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-44406.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -9,17 +9,25 @@ help: you can escape reserved keywords to use them as identifiers\n LL |     foo!(r#true);\n    |          ~~~~~~\n \n-error: expected type, found keyword `true`\n-  --> $DIR/issue-44406.rs:8:10\n+error: invalid `struct` delimiters or `fn` call arguments\n+  --> $DIR/issue-44406.rs:3:9\n    |\n LL |         bar(baz: $rest)\n-   |                - help: try using a semicolon: `;`\n+   |         ^^^^^^^^^^^^^^^\n ...\n LL |     foo!(true);\n-   |          ^^^^ expected type\n+   |     ----------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: if `bar` is a struct, use braces as delimiters\n+   |\n+LL |         bar {  }\n+   |             ~\n+help: if `bar` is a function, use the arguments directly\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+LL -         bar(baz: $rest)\n+LL +         bar(true);\n+   | \n \n error: aborting due to 2 previous errors\n "}, {"sha": "e8887147cbc863a9debfa7ac8b91547874034b16", "filename": "src/test/ui/parser/recover-from-bad-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.rs?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -5,7 +5,7 @@ enum Enum {\n \n fn main() {\n     let x = Enum::Foo(a: 3, b: 4);\n-    //~^ ERROR expected type, found `3`\n+    //~^ ERROR invalid `struct` delimiters or `fn` call arguments\n     match x {\n         Enum::Foo(a, b) => {}\n         //~^ ERROR expected tuple struct or tuple variant, found struct variant `Enum::Foo`"}, {"sha": "8cb71069bdaaca5f3c08eaf17b521e68bc255d7f", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -1,13 +1,18 @@\n-error: expected type, found `3`\n-  --> $DIR/recover-from-bad-variant.rs:7:26\n+error: invalid `struct` delimiters or `fn` call arguments\n+  --> $DIR/recover-from-bad-variant.rs:7:13\n    |\n LL |     let x = Enum::Foo(a: 3, b: 4);\n-   |                        - ^ expected type\n-   |                        |\n-   |                        tried to parse a type due to this type ascription\n+   |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+help: if `Enum::Foo` is a struct, use braces as delimiters\n+   |\n+LL |     let x = Enum::Foo { a: 3, b: 4 };\n+   |                       ~            ~\n+help: if `Enum::Foo` is a function, use the arguments directly\n+   |\n+LL -     let x = Enum::Foo(a: 3, b: 4);\n+LL +     let x = Enum::Foo(3, 4);\n+   | \n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9"}, {"sha": "54f19fe9da445bc476004b244b5c1e8950e4f753", "filename": "src/test/ui/suggestions/object-unsafe-trait-references-self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,8 +4,6 @@ error[E0038]: the trait `Trait` cannot be made into an object\n LL | fn bar(x: &dyn Trait) {}\n    |            ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n-   = help: consider moving `baz` to another trait\n-   = help: consider moving `bat` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-references-self.rs:2:22\n    |\n@@ -15,6 +13,8 @@ LL |     fn baz(&self, _: Self) {}\n    |                      ^^^^ ...because method `baz` references the `Self` type in this parameter\n LL |     fn bat(&self) -> Self {}\n    |                      ^^^^ ...because method `bat` references the `Self` type in its return type\n+   = help: consider moving `baz` to another trait\n+   = help: consider moving `bat` to another trait\n \n error[E0038]: the trait `Other` cannot be made into an object\n   --> $DIR/object-unsafe-trait-references-self.rs:10:12"}, {"sha": "ef5d5cdff8f4b14f2d4df31bd715af7d70e71444", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -127,9 +127,6 @@ error[E0038]: the trait `assoc_const::C` cannot be made into an object\n LL |     <dyn C>::A;\n    |      ^^^^^ `assoc_const::C` cannot be made into an object\n    |\n-   = help: consider moving `C` to another trait\n-   = help: consider moving `B` to another trait\n-   = help: consider moving `A` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/item-privacy.rs:25:15\n    |\n@@ -143,6 +140,9 @@ LL |     pub trait C: A + B {\n    |               - this trait cannot be made into an object...\n LL |         const C: u8 = 0;\n    |               ^ ...because it contains this associated `const`\n+   = help: consider moving `C` to another trait\n+   = help: consider moving `A` to another trait\n+   = help: consider moving `B` to another trait\n \n error[E0223]: ambiguous associated type\n   --> $DIR/item-privacy.rs:115:12"}, {"sha": "d943b48fd0082115045e051a5f884cf56b545fe3", "filename": "src/test/ui/traits/test-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftest-2.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -32,8 +32,6 @@ error[E0038]: the trait `bar` cannot be made into an object\n LL |     (box 10 as Box<dyn bar>).dup();\n    |                ^^^^^^^^^^^^ `bar` cannot be made into an object\n    |\n-   = help: consider moving `dup` to another trait\n-   = help: consider moving `blah` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/test-2.rs:4:30\n    |\n@@ -42,15 +40,15 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       |                      |\n    |       |                      ...because method `dup` references the `Self` type in its return type\n    |       this trait cannot be made into an object...\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n \n error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/test-2.rs:13:6\n    |\n LL |     (box 10 as Box<dyn bar>).dup();\n    |      ^^^^^^ `bar` cannot be made into an object\n    |\n-   = help: consider moving `dup` to another trait\n-   = help: consider moving `blah` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/test-2.rs:4:30\n    |\n@@ -59,6 +57,8 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       |                      |\n    |       |                      ...because method `dup` references the `Self` type in its return type\n    |       this trait cannot be made into an object...\n+   = help: consider moving `dup` to another trait\n+   = help: consider moving `blah` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn bar>>` for `Box<{integer}>`\n    = note: required by cast to type `Box<dyn bar>`\n "}, {"sha": "8a296dc7ee6e12506d7c5f12cd1f4d7507886786", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -16,14 +16,14 @@ error[E0038]: the trait `MyAdd` cannot be made into an object\n LL |     let y = x as dyn MyAdd<i32>;\n    |                  ^^^^^^^^^^^^^^ `MyAdd` cannot be made into an object\n    |\n-   = help: consider moving `add` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:6:55\n    |\n LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n    |       -----                                           ^^^^ ...because method `add` references the `Self` type in its return type\n    |       |\n    |       this trait cannot be made into an object...\n+   = help: consider moving `add` to another trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c924cd87997e137a864a6e5cc73d37b983e1743b", "filename": "src/test/ui/wf/issue-87495.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-87495.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `T` cannot be made into an object\n LL |     const CONST: (bool, dyn T);\n    |                         ^^^^^ `T` cannot be made into an object\n    |\n-   = help: consider moving `CONST` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-87495.rs:4:11\n    |\n LL | trait T {\n    |       - this trait cannot be made into an object...\n LL |     const CONST: (bool, dyn T);\n    |           ^^^^^ ...because it contains this associated `const`\n+   = help: consider moving `CONST` to another trait\n \n error: aborting due to previous error\n "}, {"sha": "64969fbe3203e0af8fdbccb7c85968c92f9e7a97", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4828d5b7f745a9e867a9b0cc7f080f287bcf55d/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=e4828d5b7f745a9e867a9b0cc7f080f287bcf55d", "patch": "@@ -4,14 +4,14 @@ error[E0038]: the trait `A` cannot be made into an object\n LL |     let _x: &dyn A;\n    |             ^^^^^^ `A` cannot be made into an object\n    |\n-   = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-object-safe.rs:5:23\n    |\n LL | trait A {\n    |       - this trait cannot be made into an object...\n LL |     fn foo(&self, _x: &Self);\n    |                       ^^^^^ ...because method `foo` references the `Self` type in this parameter\n+   = help: consider moving `foo` to another trait\n \n error: aborting due to previous error\n "}]}