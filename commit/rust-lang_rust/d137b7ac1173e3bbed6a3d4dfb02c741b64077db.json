{"sha": "d137b7ac1173e3bbed6a3d4dfb02c741b64077db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzdiN2FjMTE3M2UzYmJlZDZhM2Q0ZGZiMDJjNzQxYjY0MDc3ZGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-25T22:28:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:52:34Z"}, "message": "review comments", "tree": {"sha": "a5b7cd6dfbcef1d2734831beb08d3d7b6b03c1a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5b7cd6dfbcef1d2734831beb08d3d7b6b03c1a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d137b7ac1173e3bbed6a3d4dfb02c741b64077db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d137b7ac1173e3bbed6a3d4dfb02c741b64077db", "html_url": "https://github.com/rust-lang/rust/commit/d137b7ac1173e3bbed6a3d4dfb02c741b64077db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d137b7ac1173e3bbed6a3d4dfb02c741b64077db/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eb29d1a441a47ea45970c01332ebe157dba7039", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb29d1a441a47ea45970c01332ebe157dba7039", "html_url": "https://github.com/rust-lang/rust/commit/0eb29d1a441a47ea45970c01332ebe157dba7039"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "214e7d066eabc9714f656edd7ce528adb0061f49", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d137b7ac1173e3bbed6a3d4dfb02c741b64077db/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d137b7ac1173e3bbed6a3d4dfb02c741b64077db/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d137b7ac1173e3bbed6a3d4dfb02c741b64077db", "patch": "@@ -176,7 +176,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n         _ => None,\n     };\n-    check_bare_self_trait_by_name(tcx, &trait_item);\n+    check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n@@ -195,7 +195,7 @@ fn could_be_self(trait_name: Ident, ty: &hir::Ty<'_>) -> bool {\n \n /// Detect when an object unsafe trait is referring to itself in one of its associated items.\n /// When this is done, suggest using `Self` instead.\n-fn check_bare_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem<'_>) {\n+fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem<'_>) {\n     let (trait_name, trait_def_id) = match tcx.hir().get(tcx.hir().get_parent_item(item.hir_id)) {\n         hir::Node::Item(item) => match item.kind {\n             hir::ItemKind::Trait(..) => (item.ident, tcx.hir().local_def_id(item.hir_id)),\n@@ -230,17 +230,18 @@ fn check_bare_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem<'_>) {\n             return;\n         }\n         let sugg = trait_should_be_self.iter().map(|span| (*span, \"Self\".to_string())).collect();\n-        let mut err = tcx.sess.struct_span_err(\n-            trait_should_be_self,\n-            \"associated item referring to unboxed trait object for its own trait\",\n-        );\n-        err.span_label(trait_name.span, \"in this trait\");\n-        err.multipart_suggestion(\n-            \"you might have meant to use `Self` to refer to the materialized type\",\n-            sugg,\n-            Applicability::MachineApplicable,\n-        );\n-        err.emit();\n+        tcx.sess\n+            .struct_span_err(\n+                trait_should_be_self,\n+                \"associated item referring to unboxed trait object for its own trait\",\n+            )\n+            .span_label(trait_name.span, \"in this trait\")\n+            .multipart_suggestion(\n+                \"you might have meant to use `Self` to refer to the implementing type\",\n+                sugg,\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n     }\n }\n "}, {"sha": "f1c1a6bb9728b9ed2d2275e4996372b1521c51c6", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d137b7ac1173e3bbed6a3d4dfb02c741b64077db/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d137b7ac1173e3bbed6a3d4dfb02c741b64077db/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr?ref=d137b7ac1173e3bbed6a3d4dfb02c741b64077db", "patch": "@@ -6,7 +6,7 @@ LL | trait A: Sized {\n LL |     fn f(a: A) -> A;\n    |             ^     ^\n    |\n-help: you might have meant to use `Self` to refer to the materialized type\n+help: you might have meant to use `Self` to refer to the implementing type\n    |\n LL |     fn f(a: Self) -> Self;\n    |             ^^^^     ^^^^\n@@ -29,7 +29,7 @@ LL | trait B {\n LL |     fn f(a: B) -> B;\n    |             ^     ^\n    |\n-help: you might have meant to use `Self` to refer to the materialized type\n+help: you might have meant to use `Self` to refer to the implementing type\n    |\n LL |     fn f(a: Self) -> Self;\n    |             ^^^^     ^^^^"}]}