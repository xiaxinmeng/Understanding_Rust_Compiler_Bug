{"sha": "7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZjEwMmE2ODVkZTI1MGVlZWNjNzdlYjhhNmQ4MmNkMjVjMWQ4YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-02T09:05:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-02T09:05:45Z"}, "message": "auto merge of #8927 : thestinger/rust/repr, r=huonw", "tree": {"sha": "405d5a8e5fc03aed0c7979debf4cb9c4d75b30a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/405d5a8e5fc03aed0c7979debf4cb9c4d75b30a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "html_url": "https://github.com/rust-lang/rust/commit/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3dd30afe64f2d9f10a68ebc178ce22d8c90075", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3dd30afe64f2d9f10a68ebc178ce22d8c90075", "html_url": "https://github.com/rust-lang/rust/commit/6a3dd30afe64f2d9f10a68ebc178ce22d8c90075"}, {"sha": "67a8ea521a81bbc7e2cab893d778eaaa8d34bb6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a8ea521a81bbc7e2cab893d778eaaa8d34bb6c", "html_url": "https://github.com/rust-lang/rust/commit/67a8ea521a81bbc7e2cab893d778eaaa8d34bb6c"}], "stats": {"total": 141, "additions": 91, "deletions": 50}, "files": [{"sha": "45f2830dafee9d8b1eb8c7822788925c767b7daa", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "patch": "@@ -51,6 +51,10 @@ impl Reflector {\n         C_int(self.bcx.ccx(), i)\n     }\n \n+    pub fn c_bool(&mut self, b: bool) -> ValueRef {\n+        C_bool(b)\n+    }\n+\n     pub fn c_slice(&mut self, s: @str) -> ValueRef {\n         // We're careful to not use first class aggregates here because that\n         // will kick us off fast isel. (Issue #4352.)\n@@ -146,6 +150,7 @@ impl Reflector {\n     // Entrypoint\n     pub fn visit_ty(&mut self, t: ty::t) {\n         let bcx = self.bcx;\n+        let tcx = bcx.ccx().tcx;\n         debug!(\"reflect::visit_ty %s\", ty_to_str(bcx.ccx().tcx, t));\n \n         match ty::get(t).sty {\n@@ -248,17 +253,20 @@ impl Reflector {\n           }\n \n           ty::ty_struct(did, ref substs) => {\n-              let bcx = self.bcx;\n-              let tcx = bcx.ccx().tcx;\n               let fields = ty::struct_fields(tcx, did, substs);\n+              let mut named_fields = false;\n+              if !fields.is_empty() {\n+                  named_fields = fields[0].ident != special_idents::unnamed_field;\n+              }\n \n               let extra = ~[self.c_slice(ty_to_str(tcx, t).to_managed()),\n+                            self.c_bool(named_fields),\n                             self.c_uint(fields.len())] + self.c_size_and_align(t);\n               do self.bracketed(\"class\", extra) |this| {\n                   for (i, field) in fields.iter().enumerate() {\n                       let extra = ~[this.c_uint(i),\n-                                    this.c_slice(\n-                                        bcx.ccx().sess.str_of(field.ident))]\n+                                    this.c_slice(bcx.ccx().sess.str_of(field.ident)),\n+                                    this.c_bool(named_fields)]\n                           + this.c_mt(&field.mt);\n                       this.visit(\"class_field\", extra);\n                   }\n@@ -270,7 +278,6 @@ impl Reflector {\n           // let the visitor tell us if it wants to visit only a particular\n           // variant?\n           ty::ty_enum(did, ref substs) => {\n-            let bcx = self.bcx;\n             let ccx = bcx.ccx();\n             let repr = adt::represent_type(bcx.ccx(), t);\n             let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n@@ -336,8 +343,12 @@ impl Reflector {\n             }\n           }\n \n-          // Miscallaneous extra types\n-          ty::ty_trait(_, _, _, _, _) => self.leaf(\"trait\"),\n+          ty::ty_trait(_, _, _, _, _) => {\n+              let extra = [self.c_slice(ty_to_str(tcx, t).to_managed())];\n+              self.visit(\"trait\", extra);\n+          }\n+\n+          // Miscellaneous extra types\n           ty::ty_infer(_) => self.leaf(\"infer\"),\n           ty::ty_err => self.leaf(\"err\"),\n           ty::ty_param(ref p) => {"}, {"sha": "91e3719e3d0532c79eb6c0c753a09339f524033b", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "patch": "@@ -331,25 +331,28 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint) -> bool {\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n         self.align(align);\n-        if ! self.inner.visit_enter_class(name, n_fields, sz, align) {\n+        if ! self.inner.visit_enter_class(name, named_fields, n_fields, sz, align) {\n             return false;\n         }\n         true\n     }\n \n-    fn visit_class_field(&mut self, i: uint, name: &str, mtbl: uint, inner: *TyDesc) -> bool {\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool, mtbl: uint,\n+                         inner: *TyDesc) -> bool {\n         unsafe { self.align((*inner).align); }\n-        if ! self.inner.visit_class_field(i, name, mtbl, inner) {\n+        if ! self.inner.visit_class_field(i, name, named, mtbl, inner) {\n             return false;\n         }\n         unsafe { self.bump((*inner).size); }\n         true\n     }\n \n-    fn visit_leave_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint) -> bool {\n-        if ! self.inner.visit_leave_class(name, n_fields, sz, align) {\n+    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n+        if ! self.inner.visit_leave_class(name, named_fields, n_fields, sz, align) {\n             return false;\n         }\n         true\n@@ -450,9 +453,9 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_trait(&mut self) -> bool {\n+    fn visit_trait(&mut self, name: &str) -> bool {\n         self.align_to::<@TyVisitor>();\n-        if ! self.inner.visit_trait() { return false; }\n+        if ! self.inner.visit_trait(name) { return false; }\n         self.bump_past::<@TyVisitor>();\n         true\n     }"}, {"sha": "31f5b6f5208601a6b64d25d70f0ad0acfae512f2", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "patch": "@@ -413,31 +413,40 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, name: &str, n_fields: uint,\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint,\n                          _sz: uint, _align: uint) -> bool {\n         self.writer.write(name.as_bytes());\n         if n_fields != 0 {\n-            self.writer.write(['{' as u8]);\n+            if named_fields {\n+                self.writer.write(['{' as u8]);\n+            } else {\n+                self.writer.write(['(' as u8]);\n+            }\n         }\n         true\n     }\n \n-    fn visit_class_field(&mut self, i: uint, name: &str,\n-                         mtbl: uint, inner: *TyDesc) -> bool {\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,\n+                         _mtbl: uint, inner: *TyDesc) -> bool {\n         if i != 0 {\n             self.writer.write(\", \".as_bytes());\n         }\n-        self.write_mut_qualifier(mtbl);\n-        self.writer.write(name.as_bytes());\n-        self.writer.write(\": \".as_bytes());\n+        if named {\n+            self.writer.write(name.as_bytes());\n+            self.writer.write(\": \".as_bytes());\n+        }\n         self.visit_inner(inner);\n         true\n     }\n \n-    fn visit_leave_class(&mut self, _name: &str, n_fields: uint,\n+    fn visit_leave_class(&mut self, _name: &str, named_fields: bool, n_fields: uint,\n                          _sz: uint, _align: uint) -> bool {\n         if n_fields != 0 {\n-            self.writer.write(['}' as u8]);\n+            if named_fields {\n+                self.writer.write(['}' as u8]);\n+            } else {\n+                self.writer.write([')' as u8]);\n+            }\n         }\n         true\n     }\n@@ -552,21 +561,31 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n     }\n \n     fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,\n-                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n+                      _n_inputs: uint, _retstyle: uint) -> bool {\n+        self.writer.write(\"fn(\".as_bytes());\n+        true\n+    }\n \n     fn visit_fn_input(&mut self, _i: uint, _mode: uint, _inner: *TyDesc) -> bool {\n+        // FIXME: #8917: should print out the parameter types here, separated by commas\n         true\n     }\n \n     fn visit_fn_output(&mut self, _retstyle: uint, _inner: *TyDesc) -> bool {\n+        self.writer.write(\")\".as_bytes());\n+        // FIXME: #8917: should print out the output type here, as `-> T`\n         true\n     }\n \n     fn visit_leave_fn(&mut self, _purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n \n-    fn visit_trait(&mut self) -> bool { true }\n+    fn visit_trait(&mut self, name: &str) -> bool {\n+        self.writer.write(name.as_bytes());\n+        true\n+    }\n+\n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n     fn visit_type(&mut self) -> bool { true }\n@@ -597,6 +616,7 @@ struct P {a: int, b: float}\n \n #[test]\n fn test_repr() {\n+    use prelude::*;\n     use str;\n     use str::Str;\n     use rt::io::Decorator;\n@@ -654,6 +674,12 @@ fn test_repr() {\n     exact_test(&(10u64, ~\"hello\"),\n                \"(10u64, ~\\\"hello\\\")\");\n \n+    exact_test(&(&println), \"&fn()\");\n+    exact_test(&(~5 as ~ToStr), \"~to_str::ToStr:Send\");\n+\n     struct Foo;\n     exact_test(&(~[Foo, Foo]), \"~[repr::test_repr::Foo, repr::test_repr::Foo]\");\n+\n+    struct Bar(int, int);\n+    exact_test(&(Bar(2, 2)), \"repr::test_repr::Bar(2, 2)\");\n }"}, {"sha": "fbd5bdaf587e72b69be35df51c0c76888fbc3068", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "patch": "@@ -220,11 +220,11 @@ pub trait TyVisitor {\n     fn visit_leave_rec(&mut self, n_fields: uint,\n                        sz: uint, align: uint) -> bool;\n \n-    fn visit_enter_class(&mut self, name: &str, n_fields: uint,\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint,\n                          sz: uint, align: uint) -> bool;\n-    fn visit_class_field(&mut self, i: uint, name: &str,\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,\n                          mtbl: uint, inner: *TyDesc) -> bool;\n-    fn visit_leave_class(&mut self, name: &str, n_fields: uint,\n+    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint,\n                          sz: uint, align: uint) -> bool;\n \n     fn visit_enter_tup(&mut self, n_fields: uint,\n@@ -256,7 +256,7 @@ pub trait TyVisitor {\n     fn visit_leave_fn(&mut self, purity: uint, proto: uint,\n                       n_inputs: uint, retstyle: uint) -> bool;\n \n-    fn visit_trait(&mut self) -> bool;\n+    fn visit_trait(&mut self, name: &str) -> bool;\n     fn visit_param(&mut self, i: uint) -> bool;\n     fn visit_self(&mut self) -> bool;\n     fn visit_type(&mut self) -> bool;"}, {"sha": "c9d61be6b0ebf0eba6b1bfb0f42fd25c5e66c42a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "patch": "@@ -436,7 +436,7 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"blk\",                // 26\n         \"static\",             // 27\n         \"__foreign_mod__\",    // 28\n-        \"__field__\",          // 29\n+        \"<unnamed_field>\",    // 29\n         \"C\",                  // 30\n         \"Self\",               // 31\n "}, {"sha": "762b8dcb38f45585205b9571e7343810fda1f6f5", "filename": "src/test/debug-info/tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-struct.rs?ref=7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "patch": "@@ -34,7 +34,8 @@\n \n \n // This test case mainly makes sure that no field names are generated for tuple structs (as opposed\n-// to all fields having the name \"__field__\"). Otherwise they are handled the same a normal structs.\n+// to all fields having the name \"<unnamed_field>\"). Otherwise they are handled the same a normal\n+// structs.\n \n struct NoPadding16(u16, i16);\n struct NoPadding32(i32, f32, u32);"}, {"sha": "2d9f4a2ff6f6d9192ca0e756acfe018fb3a0156a", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "patch": "@@ -317,26 +317,26 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_enter_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint)\n-                      -> bool {\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n         self.align(align);\n-        if ! self.inner.visit_enter_class(name, n_fields, sz, align) {\n+        if ! self.inner.visit_enter_class(name, named_fields, n_fields, sz, align) {\n             return false;\n         }\n         true\n     }\n \n-    fn visit_class_field(&mut self, i: uint, name: &str,\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,\n                          mtbl: uint, inner: *TyDesc) -> bool {\n-        if ! self.inner.visit_class_field(i, name, mtbl, inner) {\n+        if ! self.inner.visit_class_field(i, name, named, mtbl, inner) {\n             return false;\n         }\n         true\n     }\n \n-    fn visit_leave_class(&mut self, name: &str, n_fields: uint, sz: uint, align: uint)\n-                      -> bool {\n-        if ! self.inner.visit_leave_class(name, n_fields, sz, align) {\n+    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n+        if ! self.inner.visit_leave_class(name, named_fields, n_fields, sz, align) {\n             return false;\n         }\n         true\n@@ -428,9 +428,9 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_trait(&mut self) -> bool {\n+    fn visit_trait(&mut self, name: &str) -> bool {\n         self.align_to::<@TyVisitor>();\n-        if ! self.inner.visit_trait() { return false; }\n+        if ! self.inner.visit_trait(name) { return false; }\n         self.bump_past::<@TyVisitor>();\n         true\n     }\n@@ -565,13 +565,13 @@ impl TyVisitor for my_visitor {\n     fn visit_leave_rec(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_class(&mut self, _name: &str, _n_fields: uint,\n+    fn visit_enter_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n-    fn visit_class_field(&mut self, _i: uint, _name: &str,\n+    fn visit_class_field(&mut self, _i: uint, _name: &str, _named: bool,\n                          _mtbl: uint, inner: *TyDesc) -> bool {\n         self.visit_inner(inner)\n     }\n-    fn visit_leave_class(&mut self, _name: &str, _n_fields: uint,\n+    fn visit_leave_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_tup(&mut self, _n_fields: uint,\n@@ -616,7 +616,7 @@ impl TyVisitor for my_visitor {\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n \n-    fn visit_trait(&mut self) -> bool { true }\n+    fn visit_trait(&mut self, _name: &str) -> bool { true }\n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n     fn visit_type(&mut self) -> bool { true }"}, {"sha": "b3d81d9c51102ac5430bd92bbc874eb1ad57007a", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ff102a685de250eeecc77eb8a6d82cd25c1d8a5/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=7ff102a685de250eeecc77eb8a6d82cd25c1d8a5", "patch": "@@ -99,11 +99,11 @@ impl TyVisitor for MyVisitor {\n     fn visit_leave_rec(&mut self, _n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n \n-    fn visit_enter_class(&mut self, _name: &str, _n_fields: uint,\n+    fn visit_enter_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n-    fn visit_class_field(&mut self, _i: uint, _name: &str,\n+    fn visit_class_field(&mut self, _i: uint, _name: &str, _named: bool,\n                          _mtbl: uint, _inner: *TyDesc) -> bool { true }\n-    fn visit_leave_class(&mut self, _name: &str, _n_fields: uint,\n+    fn visit_leave_class(&mut self, _name: &str, _named_fields: bool, _n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_tup(&mut self, _n_fields: uint,\n@@ -139,7 +139,7 @@ impl TyVisitor for MyVisitor {\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n \n-    fn visit_trait(&mut self) -> bool { true }\n+    fn visit_trait(&mut self, _name: &str) -> bool { true }\n     fn visit_param(&mut self, _i: uint) -> bool { true }\n     fn visit_self(&mut self) -> bool { true }\n     fn visit_type(&mut self) -> bool { true }"}]}