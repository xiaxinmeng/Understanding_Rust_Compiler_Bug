{"sha": "a8387aef8c378a771686878062e544af4d5e2245", "node_id": "C_kwDOAAsO6NoAKGE4Mzg3YWVmOGMzNzhhNzcxNjg2ODc4MDYyZTU0NGFmNGQ1ZTIyNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-02T07:41:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-02T07:41:25Z"}, "message": "Auto merge of #89450 - usbalbin:const_try_revert, r=oli-obk\n\nRevert #86853\n\nShould fix issue found in #89432", "tree": {"sha": "73a414fc32b27a31d81935e4e63b8bf15e504ec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a414fc32b27a31d81935e4e63b8bf15e504ec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8387aef8c378a771686878062e544af4d5e2245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8387aef8c378a771686878062e544af4d5e2245", "html_url": "https://github.com/rust-lang/rust/commit/a8387aef8c378a771686878062e544af4d5e2245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8387aef8c378a771686878062e544af4d5e2245/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e1211081239be62a5d0bb3bbcb29a9f14621c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1211081239be62a5d0bb3bbcb29a9f14621c81", "html_url": "https://github.com/rust-lang/rust/commit/6e1211081239be62a5d0bb3bbcb29a9f14621c81"}, {"sha": "6a0c97aa5c31131a1d7c89b1a6d632c7a10744ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0c97aa5c31131a1d7c89b1a6d632c7a10744ab", "html_url": "https://github.com/rust-lang/rust/commit/6a0c97aa5c31131a1d7c89b1a6d632c7a10744ab"}], "stats": {"total": 75, "additions": 17, "deletions": 58}, "files": [{"sha": "1e512af48051ed9dc7c5627ed29aef8b0906506f", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=a8387aef8c378a771686878062e544af4d5e2245", "patch": "@@ -532,10 +532,9 @@ where\n \n // From implies Into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n-impl<T, U> const Into<U> for T\n+impl<T, U> Into<U> for T\n where\n-    U: ~const From<T>,\n+    U: From<T>,\n {\n     fn into(self) -> U {\n         U::from(self)\n@@ -544,8 +543,7 @@ where\n \n // From (and thus Into) is reflexive\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n-impl<T> const From<T> for T {\n+impl<T> From<T> for T {\n     fn from(t: T) -> T {\n         t\n     }"}, {"sha": "2230461b5f4b59ea0aba60578cfb759e58b6dedb", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a8387aef8c378a771686878062e544af4d5e2245", "patch": "@@ -82,7 +82,6 @@\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_heap)]\n-#![feature(const_convert)]\n #![feature(const_inherent_unchecked_arith)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_intrinsic_copy)]"}, {"sha": "94d892dd787a6874579ae7db1e405a5a1efbfcc6", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=a8387aef8c378a771686878062e544af4d5e2245", "patch": "@@ -2019,8 +2019,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n-impl<T> const ops::Try for Option<T> {\n+impl<T> ops::Try for Option<T> {\n     type Output = T;\n     type Residual = Option<convert::Infallible>;\n \n@@ -2039,8 +2038,7 @@ impl<T> const ops::Try for Option<T> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n-impl<T> const ops::FromResidual for Option<T> {\n+impl<T> ops::FromResidual for Option<T> {\n     #[inline]\n     fn from_residual(residual: Option<convert::Infallible>) -> Self {\n         match residual {"}, {"sha": "4a300f857e9ed9dd4623ca07c983dc6f0f5b6cb5", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=a8387aef8c378a771686878062e544af4d5e2245", "patch": "@@ -1889,8 +1889,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n-impl<T, E> const ops::Try for Result<T, E> {\n+impl<T, E> ops::Try for Result<T, E> {\n     type Output = T;\n     type Residual = Result<convert::Infallible, E>;\n \n@@ -1909,10 +1908,7 @@ impl<T, E> const ops::Try for Result<T, E> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n-impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>\n-    for Result<T, F>\n-{\n+impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {\n     #[inline]\n     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {\n         match residual {"}, {"sha": "f1048f4cf09cb1750d01338132af025d885c3fad", "filename": "library/core/tests/convert.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/library%2Fcore%2Ftests%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/library%2Fcore%2Ftests%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconvert.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -1,16 +0,0 @@\n-#[test]\n-fn convert() {\n-    const fn from(x: i32) -> i32 {\n-        i32::from(x)\n-    }\n-\n-    const FOO: i32 = from(42);\n-    assert_eq!(FOO, 42);\n-\n-    const fn into(x: Vec<String>) -> Vec<String> {\n-        x.into()\n-    }\n-\n-    const BAR: Vec<String> = into(Vec::new());\n-    assert_eq!(BAR, Vec::<String>::new());\n-}"}, {"sha": "cd3aed4cd28f81a7d90c9f7fc15cfb2a99d97d19", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8387aef8c378a771686878062e544af4d5e2245/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=a8387aef8c378a771686878062e544af4d5e2245", "patch": "@@ -9,13 +9,12 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n-#![feature(const_convert)]\n #![feature(const_maybe_uninit_assume_init)]\n-#![feature(const_num_from_num)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]\n #![feature(const_trait_impl)]\n+#![feature(const_num_from_num)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n@@ -84,7 +83,6 @@ mod char;\n mod clone;\n mod cmp;\n mod const_ptr;\n-mod convert;\n mod fmt;\n mod hash;\n mod intrinsics;"}, {"sha": "fd2cfa442d3f68aebabded6ee8a71fa439255a79", "filename": "src/test/ui/consts/not_const_clusure_in_const.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8387aef8c378a771686878062e544af4d5e2245/src%2Ftest%2Fui%2Fconsts%2Fnot_const_clusure_in_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8387aef8c378a771686878062e544af4d5e2245/src%2Ftest%2Fui%2Fconsts%2Fnot_const_clusure_in_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnot_const_clusure_in_const.rs?ref=a8387aef8c378a771686878062e544af4d5e2245", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+\n+const _FOO: fn() -> String = || \"foo\".into();\n+\n+pub fn bar() -> fn() -> String {\n+    || \"bar\".into()\n+}\n+\n+fn main(){}"}, {"sha": "fe43b132cbd7fb63e96a80b6c6b0464f16ca5a89", "filename": "src/test/ui/consts/try-operator.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftry-operator.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -1,23 +0,0 @@\n-// run-pass\n-\n-#![feature(try_trait_v2)]\n-#![feature(const_trait_impl)]\n-#![feature(const_try)]\n-#![feature(const_convert)]\n-\n-fn main() {\n-    const fn result() -> Result<bool, ()> {\n-        Err(())?;\n-        Ok(true)\n-    }\n-\n-    const FOO: Result<bool, ()> = result();\n-    assert_eq!(Err(()), FOO);\n-\n-    const fn option() -> Option<()> {\n-        None?;\n-        Some(())\n-    }\n-    const BAR: Option<()> = option();\n-    assert_eq!(None, BAR);\n-}"}]}