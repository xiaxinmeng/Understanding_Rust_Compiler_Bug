{"sha": "9982de6397197a63a093e7b79851d1915ef783d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ODJkZTYzOTcxOTdhNjNhMDkzZTdiNzk4NTFkMTkxNWVmNzgzZDc=", "commit": {"author": {"name": "Eduard Bopp", "email": "eduard.bopp@aepsil0n.de", "date": "2014-02-18T12:40:25Z"}, "committer": {"name": "Eduard Bopp", "email": "eduard.bopp@aepsil0n.de", "date": "2014-02-22T15:32:48Z"}, "message": "Warn about unnecessary parentheses upon assignment\n\nCloses #12366.\n\nParentheses around assignment statements such as\n\n    let mut a = (0);\n    a = (1);\n    a += (2);\n\nare not necessary and therefore an unnecessary_parens warning is raised when\nstatements like this occur.\n\nThe warning mechanism was refactored along the way to allow for code reuse\nbetween the routines for checking expressions and statements.\n\nCode had to be adopted throughout the compiler and standard libraries to comply\nwith this modification of the lint.", "tree": {"sha": "fb770270ad79bc8936bfab1ae47d044204b2af5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb770270ad79bc8936bfab1ae47d044204b2af5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9982de6397197a63a093e7b79851d1915ef783d7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9982de6397197a63a093e7b79851d1915ef783d7", "html_url": "https://github.com/rust-lang/rust/commit/9982de6397197a63a093e7b79851d1915ef783d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9982de6397197a63a093e7b79851d1915ef783d7/comments", "author": {"login": "milibopp", "id": 3098430, "node_id": "MDQ6VXNlcjMwOTg0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3098430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milibopp", "html_url": "https://github.com/milibopp", "followers_url": "https://api.github.com/users/milibopp/followers", "following_url": "https://api.github.com/users/milibopp/following{/other_user}", "gists_url": "https://api.github.com/users/milibopp/gists{/gist_id}", "starred_url": "https://api.github.com/users/milibopp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milibopp/subscriptions", "organizations_url": "https://api.github.com/users/milibopp/orgs", "repos_url": "https://api.github.com/users/milibopp/repos", "events_url": "https://api.github.com/users/milibopp/events{/privacy}", "received_events_url": "https://api.github.com/users/milibopp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "milibopp", "id": 3098430, "node_id": "MDQ6VXNlcjMwOTg0MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/3098430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milibopp", "html_url": "https://github.com/milibopp", "followers_url": "https://api.github.com/users/milibopp/followers", "following_url": "https://api.github.com/users/milibopp/following{/other_user}", "gists_url": "https://api.github.com/users/milibopp/gists{/gist_id}", "starred_url": "https://api.github.com/users/milibopp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milibopp/subscriptions", "organizations_url": "https://api.github.com/users/milibopp/orgs", "repos_url": "https://api.github.com/users/milibopp/repos", "events_url": "https://api.github.com/users/milibopp/events{/privacy}", "received_events_url": "https://api.github.com/users/milibopp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c48babe546751c6ad252cf7c292394aab693af30", "url": "https://api.github.com/repos/rust-lang/rust/commits/c48babe546751c6ad252cf7c292394aab693af30", "html_url": "https://github.com/rust-lang/rust/commit/c48babe546751c6ad252cf7c292394aab693af30"}], "stats": {"total": 85, "additions": 51, "deletions": 34}, "files": [{"sha": "3558166128b284408705de9c50bf1593eba7311a", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -407,11 +407,8 @@ fn get_metadata_section_imp(os: Os, filename: &Path) -> Option<MetadataBlob> {\n                 debug!(\"checking {} bytes of metadata-version stamp\",\n                        vlen);\n                 let minsz = cmp::min(vlen, csz);\n-                let mut version_ok = false;\n-                vec::raw::buf_as_slice(cvbuf, minsz, |buf0| {\n-                    version_ok = (buf0 ==\n-                                  encoder::metadata_encoding_version);\n-                });\n+                let version_ok = vec::raw::buf_as_slice(cvbuf, minsz,\n+                    |buf0| buf0 == encoder::metadata_encoding_version);\n                 if !version_ok { return None; }\n \n                 let cvbuf1 = cvbuf.offset(vlen as int);"}, {"sha": "9714da3abf58dcacbea699959e7775d749250b07", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -95,11 +95,10 @@ impl<'a> GuaranteeLifetimeContext<'a> {\n                 let base_scope = self.scope(base);\n \n                 // L-Deref-Managed-Imm-User-Root\n-                let omit_root = (\n+                let omit_root =\n                     self.bccx.is_subregion_of(self.loan_region, base_scope) &&\n                     self.is_rvalue_or_immutable(base) &&\n-                    !self.is_moved(base)\n-                );\n+                    !self.is_moved(base);\n \n                 if !omit_root {\n                     // L-Deref-Managed-Imm-Compiler-Root"}, {"sha": "8a504f07b7393df32edcf33f5083bbefa1e42708", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -891,7 +891,7 @@ fn bitwise(out_vec: &mut [uint], in_vec: &[uint], op: |uint, uint| -> uint)\n         let old_val = *out_elt;\n         let new_val = op(old_val, *in_elt);\n         *out_elt = new_val;\n-        changed |= (old_val != new_val);\n+        changed |= old_val != new_val;\n     }\n     changed\n }"}, {"sha": "911b6df10a67dab2b8667a6197a01517ba5b7e67", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -1167,22 +1167,41 @@ fn check_pat_non_uppercase_statics(cx: &Context, p: &ast::Pat) {\n     }\n }\n \n-fn check_unnecessary_parens(cx: &Context, e: &ast::Expr) {\n+fn check_unnecessary_parens_core(cx: &Context, value: &ast::Expr, msg: &str) {\n+    match value.node {\n+        ast::ExprParen(_) => {\n+            cx.span_lint(UnnecessaryParens, value.span,\n+                         format!(\"unnecessary parentheses around {}\", msg))\n+        }\n+        _ => {}\n+    }\n+}\n+\n+fn check_unnecessary_parens_expr(cx: &Context, e: &ast::Expr) {\n     let (value, msg) = match e.node {\n         ast::ExprIf(cond, _, _) => (cond, \"`if` condition\"),\n         ast::ExprWhile(cond, _) => (cond, \"`while` condition\"),\n         ast::ExprMatch(head, _) => (head, \"`match` head expression\"),\n         ast::ExprRet(Some(value)) => (value, \"`return` value\"),\n+        ast::ExprAssign(_, value) => (value, \"assigned value\"),\n+        ast::ExprAssignOp(_, _, _, value) => (value, \"assigned value\"),\n         _ => return\n     };\n+    check_unnecessary_parens_core(cx, value, msg);\n+}\n \n-    match value.node {\n-        ast::ExprParen(_) => {\n-            cx.span_lint(UnnecessaryParens, value.span,\n-                         format!(\"unnecessary parentheses around {}\", msg))\n-        }\n-        _ => {}\n-    }\n+fn check_unnecessary_parens_stmt(cx: &Context, s: &ast::Stmt) {\n+    let (value, msg) = match s.node {\n+        ast::StmtDecl(decl, _) => match decl.node {\n+            ast::DeclLocal(local) => match local.init {\n+                Some(value) => (value, \"assigned value\"),\n+                None => return\n+            },\n+            _ => return\n+        },\n+        _ => return\n+    };\n+    check_unnecessary_parens_core(cx, value, msg);\n }\n \n fn check_unused_unsafe(cx: &Context, e: &ast::Expr) {\n@@ -1534,7 +1553,7 @@ impl<'a> Visitor<()> for Context<'a> {\n \n         check_while_true_expr(self, e);\n         check_stability(self, e);\n-        check_unnecessary_parens(self, e);\n+        check_unnecessary_parens_expr(self, e);\n         check_unused_unsafe(self, e);\n         check_unsafe_block(self, e);\n         check_unnecessary_allocation(self, e);\n@@ -1549,6 +1568,7 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_stmt(&mut self, s: &ast::Stmt, _: ()) {\n         check_path_statement(self, s);\n         check_unused_result(self, s);\n+        check_unnecessary_parens_stmt(self, s);\n \n         visit::walk_stmt(self, s, ());\n     }"}, {"sha": "488287e1c683e4171278f9ad1754703fd9b2cb9f", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -143,10 +143,8 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n             // This is a bit unfortunate.\n \n             let idx = psubsts.tys.len() - num_method_ty_params;\n-            let substs =\n-                (psubsts.tys.slice(0, idx) +\n-                 &[psubsts.self_ty.unwrap()] +\n-                 psubsts.tys.tailn(idx));\n+            let substs = psubsts.tys.slice(0, idx) +\n+                &[psubsts.self_ty.unwrap()] + psubsts.tys.tailn(idx);\n             debug!(\"static default: changed substitution to {}\",\n                    substs.repr(ccx.tcx));\n "}, {"sha": "aa53ea59901eb82a6cb30e4e143a620884b1bac0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -2293,8 +2293,8 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                        bounds: BuiltinBounds)\n                        -> TypeContents {\n         // These are the type contents of the (opaque) interior\n-        let contents = (TC::ReachesMutable.when(mutbl == ast::MutMutable) |\n-                        kind_bounds_to_contents(cx, bounds, []));\n+        let contents = TC::ReachesMutable.when(mutbl == ast::MutMutable) |\n+            kind_bounds_to_contents(cx, bounds, []);\n \n         match store {\n             UniqTraitStore => {"}, {"sha": "b7e1e5a8da7d863b02f919347cf695e6ccd3079f", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -674,7 +674,7 @@ pub mod writer {\n             let last_size_pos = self.size_positions.pop().unwrap();\n             let cur_pos = try!(self.writer.tell());\n             try!(self.writer.seek(last_size_pos as i64, io::SeekSet));\n-            let size = (cur_pos as uint - last_size_pos - 4);\n+            let size = cur_pos as uint - last_size_pos - 4;\n             write_sized_vuint(self.writer, size, 4u);\n             try!(self.writer.seek(cur_pos as i64, io::SeekSet));\n "}, {"sha": "fdd81179325eb1a7b66a37493c13a546b0cf96a3", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -119,7 +119,7 @@ pub mod win32 {\n                 } else if k == n &&\n                           libc::GetLastError() ==\n                           libc::ERROR_INSUFFICIENT_BUFFER as DWORD {\n-                    n *= (2 as DWORD);\n+                    n *= 2 as DWORD;\n                 } else if k >= n {\n                     n = k;\n                 } else {\n@@ -225,7 +225,7 @@ pub fn env_as_bytes() -> ~[(~[u8],~[u8])] {\n             for p in input.iter() {\n                 let vs: ~[&[u8]] = p.splitn(1, |b| *b == '=' as u8).collect();\n                 let key = vs[0].to_owned();\n-                let val = (if vs.len() < 2 { ~[] } else { vs[1].to_owned() });\n+                let val = if vs.len() < 2 { ~[] } else { vs[1].to_owned() };\n                 pairs.push((key, val));\n             }\n             pairs"}, {"sha": "82e4d08d077799fee9e1a3208ffdc6b3d66eac49", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -202,7 +202,7 @@ impl AbiSet {\n     }\n \n     pub fn add(&mut self, abi: Abi) {\n-        self.bits |= (1 << abi.index());\n+        self.bits |= 1 << abi.index();\n     }\n \n     pub fn each(&self, op: |abi: Abi| -> bool) -> bool {"}, {"sha": "c436dc018e7f8233a454d74b4b1aaab5d9f585ae", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -1224,6 +1224,6 @@ mod test {\n             },\n         };\n         // doesn't matter which encoder we use....\n-        let _f = (&e as &serialize::Encodable<json::Encoder>);\n+        let _f = &e as &serialize::Encodable<json::Encoder>;\n     }\n }"}, {"sha": "8cf0f128d222d0d6cf5efd98cabfb0da7ca75d52", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -329,7 +329,7 @@ fn highlight_lines(cm: &codemap::CodeMap,\n         for _ in range(0, skip) { s.push_char(' '); }\n         let orig = fm.get_line(lines.lines[0] as int);\n         for pos in range(0u, left-skip) {\n-            let curChar = (orig[pos] as char);\n+            let curChar = orig[pos] as char;\n             // Whenever a tab occurs on the previous line, we insert one on\n             // the error-point-squiggly-line as well (instead of a space).\n             // That way the squiggly line will usually appear in the correct"}, {"sha": "dfb6d6b1a882535619e5aa678d558bf886fde491", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -259,7 +259,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                             ' ' => flags.space = true,\n                             '.' => fstate = FormatStatePrecision,\n                             '0'..'9' => {\n-                                flags.width = (cur as uint - '0' as uint);\n+                                flags.width = cur as uint - '0' as uint;\n                                 fstate = FormatStateWidth;\n                             }\n                             _ => unreachable!()\n@@ -359,7 +359,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                         flags.space = true;\n                     }\n                     (FormatStateFlags,'0'..'9') => {\n-                        flags.width = (cur as uint - '0' as uint);\n+                        flags.width = cur as uint - '0' as uint;\n                         *fstate = FormatStateWidth;\n                     }\n                     (FormatStateFlags,'.') => {"}, {"sha": "eba922ac7b8b96ec9b28131fad7767733d3d3308", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -1047,7 +1047,7 @@ impl MetricMap {\n             let r = match selfmap.find(k) {\n                 None => MetricRemoved,\n                 Some(v) => {\n-                    let delta = (v.value - vold.value);\n+                    let delta = v.value - vold.value;\n                     let noise = match noise_pct {\n                         None => f64::max(vold.noise.abs(), v.noise.abs()),\n                         Some(pct) => vold.value * pct / 100.0"}, {"sha": "4bbe38bd213dce0e750fa03b3c3405b3cd66a918", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -296,7 +296,7 @@ impl Uuid {\n     ///\n     /// This represents the algorithm used to generate the contents\n     pub fn get_version(&self) -> Option<UuidVersion> {\n-        let v = (self.bytes[6] >> 4);\n+        let v = self.bytes[6] >> 4;\n         match v {\n             1 => Some(Version1Mac),\n             2 => Some(Version2Dce),"}, {"sha": "528fc2f64b49be7b1a682f9b2afa1f5aac309f1a", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9982de6397197a63a093e7b79851d1915ef783d7/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9982de6397197a63a093e7b79851d1915ef783d7/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=9982de6397197a63a093e7b79851d1915ef783d7", "patch": "@@ -22,4 +22,7 @@ fn main() {\n     match (true) { //~ ERROR unnecessary parentheses around `match` head expression\n         _ => {}\n     }\n+    let mut _a = (0); //~ ERROR unnecessary parentheses around assigned value\n+    _a = (0); //~ ERROR unnecessary parentheses around assigned value\n+    _a += (1); //~ ERROR unnecessary parentheses around assigned value\n }"}]}