{"sha": "38f39ac540d2a8b42c650e3aae9eaa715d47c554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZjM5YWM1NDBkMmE4YjQyYzY1MGUzYWFlOWVhYTcxNWQ0N2M1NTQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-25T00:40:17Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-25T01:40:16Z"}, "message": "expose find_mut in the Map trait", "tree": {"sha": "4c21510053d0949fdccd721272416da9b4f5adda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c21510053d0949fdccd721272416da9b4f5adda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38f39ac540d2a8b42c650e3aae9eaa715d47c554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38f39ac540d2a8b42c650e3aae9eaa715d47c554", "html_url": "https://github.com/rust-lang/rust/commit/38f39ac540d2a8b42c650e3aae9eaa715d47c554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38f39ac540d2a8b42c650e3aae9eaa715d47c554/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f4a00e88fc374b2b3096789a11bf429d42c3a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f4a00e88fc374b2b3096789a11bf429d42c3a9", "html_url": "https://github.com/rust-lang/rust/commit/f0f4a00e88fc374b2b3096789a11bf429d42c3a9"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "e20821b919b6cf24ffcf19bc12830537c3290d50", "filename": "src/libcore/container.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=38f39ac540d2a8b42c650e3aae9eaa715d47c554", "patch": "@@ -42,7 +42,7 @@ pub trait Map<K, V>: Mutable {\n     fn find(&self, key: &K) -> Option<&'self V>;\n \n     /// Return a mutable reference to the value corresponding to the key\n-    //fn find_mut(&mut self, key: &K) -> Option<&'self mut V>;\n+    fn find_mut(&mut self, key: &K) -> Option<&'self mut V>;\n \n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did"}, {"sha": "8c290553a45994608b6ba937c7ebec7197c6fcde", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=38f39ac540d2a8b42c650e3aae9eaa715d47c554", "patch": "@@ -355,6 +355,17 @@ pub mod linear {\n             }\n         }\n \n+        /// Return a mutable reference to the value corresponding to the key\n+        fn find_mut(&mut self, k: &K) -> Option<&'self mut V> {\n+            let idx = match self.bucket_for_key(k) {\n+                FoundEntry(idx) => idx,\n+                TableFull | FoundHole(_) => return None\n+            };\n+            unsafe {  // FIXME(#4903)---requires flow-sensitive borrow checker\n+                Some(::cast::transmute_mut_region(self.mut_value_for_bucket(idx)))\n+            }\n+        }\n+\n         /// Insert a key-value pair into the map. An existing value for a\n         /// key is replaced by the new value. Return true if the key did\n         /// not already exist in the map.\n@@ -419,17 +430,6 @@ pub mod linear {\n             old_value\n         }\n \n-        /// Return a mutable reference to the value corresponding to the key\n-        fn find_mut(&mut self, k: &K) -> Option<&'self mut V> {\n-            let idx = match self.bucket_for_key(k) {\n-                FoundEntry(idx) => idx,\n-                TableFull | FoundHole(_) => return None\n-            };\n-            unsafe {  // FIXME(#4903)---requires flow-sensitive borrow checker\n-                Some(::cast::transmute_mut_region(self.mut_value_for_bucket(idx)))\n-            }\n-        }\n-\n         /// Return the value corresponding to the key in the map, or insert\n         /// and return the value if it doesn't exist.\n         fn find_or_insert(&mut self, k: K, v: V) -> &'self V {"}, {"sha": "5921ae5b3f588477c39e1e7ae8078f25d9c07302", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=38f39ac540d2a8b42c650e3aae9eaa715d47c554", "patch": "@@ -111,6 +111,12 @@ impl<T> Map<uint, T> for TrieMap<T> {\n         }\n     }\n \n+    /// Return a mutable reference to the value corresponding to the key\n+    #[inline(always)]\n+    fn find_mut(&mut self, key: &uint) -> Option<&'self mut T> {\n+        find_mut(&mut self.root.children[chunk(*key, 0)], *key, 1)\n+    }\n+\n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did\n     /// not already exist in the map.\n@@ -153,12 +159,6 @@ pub impl<T> TrieMap<T> {\n     fn each_value_reverse(&self, f: &fn(&T) -> bool) {\n         self.each_reverse(|&(_, v)| f(v))\n     }\n-\n-    /// Return a mutable reference to the value corresponding to the key\n-    #[inline(always)]\n-    fn find_mut(&mut self, key: &uint) -> Option<&'self mut T> {\n-        find_mut(&mut self.root.children[chunk(*key, 0)], *key, 1)\n-    }\n }\n \n pub struct TrieSet {"}, {"sha": "4ad8d38b072b15d48dc39397fd0336a7f46c2d60", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=38f39ac540d2a8b42c650e3aae9eaa715d47c554", "patch": "@@ -108,6 +108,18 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n         }\n     }\n \n+    /// Return a mutable reference to the value corresponding to the key\n+    fn find_mut(&mut self, key: &uint) -> Option<&'self mut V> {\n+        if *key < self.v.len() {\n+            match self.v[*key] {\n+              Some(ref mut value) => Some(value),\n+              None => None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did\n     /// not already exist in the map.\n@@ -140,18 +152,6 @@ pub impl<V> SmallIntMap<V> {\n     fn get(&self, key: &uint) -> &'self V {\n         self.find(key).expect(\"key not present\")\n     }\n-\n-    /// Return a mutable reference to the value corresponding to the key\n-    fn find_mut(&mut self, key: &uint) -> Option<&'self mut V> {\n-        if *key < self.v.len() {\n-            match self.v[*key] {\n-              Some(ref mut value) => Some(value),\n-              None => None\n-            }\n-        } else {\n-            None\n-        }\n-    }\n }\n \n pub impl<V:Copy> SmallIntMap<V> {"}, {"sha": "fccf58ddb6f74a79b81553acc6fd9ccddcba30a0", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=38f39ac540d2a8b42c650e3aae9eaa715d47c554", "patch": "@@ -152,6 +152,12 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n         }\n     }\n \n+    /// Return a mutable reference to the value corresponding to the key\n+    #[inline(always)]\n+    fn find_mut(&mut self, key: &K) -> Option<&'self mut V> {\n+        find_mut(&mut self.root, key)\n+    }\n+\n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did\n     /// not already exist in the map.\n@@ -189,12 +195,6 @@ pub impl<K: TotalOrd, V> TreeMap<K, V> {\n     fn iter(&self) -> TreeMapIterator<'self, K, V> {\n         TreeMapIterator{stack: ~[], node: &self.root}\n     }\n-\n-    /// Return a mutable reference to the value corresponding to the key\n-    #[inline(always)]\n-    fn find_mut(&mut self, key: &K) -> Option<&'self mut V> {\n-        find_mut(&mut self.root, key)\n-    }\n }\n \n /// Lazy forward iterator over a map"}, {"sha": "281d520be0f60a211403f577db5392ccfd9d074f", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f39ac540d2a8b42c650e3aae9eaa715d47c554/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=38f39ac540d2a8b42c650e3aae9eaa715d47c554", "patch": "@@ -98,6 +98,8 @@ impl<T> Map<int, T> for cat<T> {\n         }\n     }\n \n+    fn find_mut(&mut self, k: &int) -> Option<&'self mut T> { fail!() }\n+\n     fn remove(&mut self, k: &int) -> bool {\n         if self.find(k).is_some() {\n             self.meows -= *k; true"}]}