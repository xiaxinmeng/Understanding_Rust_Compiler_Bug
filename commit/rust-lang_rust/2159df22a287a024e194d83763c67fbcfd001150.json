{"sha": "2159df22a287a024e194d83763c67fbcfd001150", "node_id": "C_kwDOAAsO6NoAKDIxNTlkZjIyYTI4N2EwMjRlMTk0ZDgzNzYzYzY3ZmJjZmQwMDExNTA", "commit": {"author": {"name": "Fernando Fernandez Mancera", "email": "ffmancera@riseup.net", "date": "2022-10-30T10:50:00Z"}, "committer": {"name": "Fernando Fernandez Mancera", "email": "ffmancera@riseup.net", "date": "2022-10-30T11:01:39Z"}, "message": "Mention const and lifetime parameters in error E0207\n\nError Index for E0207 must mention const and lifetime parameters. In\naddition, add code examples for these situations.\n\nFixes #80862", "tree": {"sha": "8b0f3a04a19bce613267b43b077a329288537a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b0f3a04a19bce613267b43b077a329288537a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2159df22a287a024e194d83763c67fbcfd001150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2159df22a287a024e194d83763c67fbcfd001150", "html_url": "https://github.com/rust-lang/rust/commit/2159df22a287a024e194d83763c67fbcfd001150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2159df22a287a024e194d83763c67fbcfd001150/comments", "author": {"login": "ffmancera", "id": 25457779, "node_id": "MDQ6VXNlcjI1NDU3Nzc5", "avatar_url": "https://avatars.githubusercontent.com/u/25457779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ffmancera", "html_url": "https://github.com/ffmancera", "followers_url": "https://api.github.com/users/ffmancera/followers", "following_url": "https://api.github.com/users/ffmancera/following{/other_user}", "gists_url": "https://api.github.com/users/ffmancera/gists{/gist_id}", "starred_url": "https://api.github.com/users/ffmancera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ffmancera/subscriptions", "organizations_url": "https://api.github.com/users/ffmancera/orgs", "repos_url": "https://api.github.com/users/ffmancera/repos", "events_url": "https://api.github.com/users/ffmancera/events{/privacy}", "received_events_url": "https://api.github.com/users/ffmancera/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ffmancera", "id": 25457779, "node_id": "MDQ6VXNlcjI1NDU3Nzc5", "avatar_url": "https://avatars.githubusercontent.com/u/25457779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ffmancera", "html_url": "https://github.com/ffmancera", "followers_url": "https://api.github.com/users/ffmancera/followers", "following_url": "https://api.github.com/users/ffmancera/following{/other_user}", "gists_url": "https://api.github.com/users/ffmancera/gists{/gist_id}", "starred_url": "https://api.github.com/users/ffmancera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ffmancera/subscriptions", "organizations_url": "https://api.github.com/users/ffmancera/orgs", "repos_url": "https://api.github.com/users/ffmancera/repos", "events_url": "https://api.github.com/users/ffmancera/events{/privacy}", "received_events_url": "https://api.github.com/users/ffmancera/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c836a904e5a421712db311421c5266f9ce71c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c836a904e5a421712db311421c5266f9ce71c0", "html_url": "https://github.com/rust-lang/rust/commit/68c836a904e5a421712db311421c5266f9ce71c0"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "95e7c9fc76ce2bf00c081a386e488c4dfcf05b6e", "filename": "compiler/rustc_error_codes/src/error_codes/E0207.md", "status": "modified", "additions": 71, "deletions": 4, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2159df22a287a024e194d83763c67fbcfd001150/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md", "raw_url": "https://github.com/rust-lang/rust/raw/2159df22a287a024e194d83763c67fbcfd001150/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0207.md?ref=2159df22a287a024e194d83763c67fbcfd001150", "patch": "@@ -1,4 +1,5 @@\n-A type parameter that is specified for `impl` is not constrained.\n+A type, const or lifetime parameter that is specified for `impl` is not\n+constrained.\n \n Erroneous code example:\n \n@@ -14,15 +15,18 @@ impl<T: Default> Foo {\n }\n ```\n \n-Any type parameter of an `impl` must meet at least one of\n-the following criteria:\n+Any type or const parameter of an `impl` must meet at least one of the\n+following criteria:\n \n  - it appears in the _implementing type_ of the impl, e.g. `impl<T> Foo<T>`\n  - for a trait impl, it appears in the _implemented trait_, e.g.\n    `impl<T> SomeTrait<T> for Foo`\n  - it is bound as an associated type, e.g. `impl<T, U> SomeTrait for T\n    where T: AnotherTrait<AssocType=U>`\n \n+Any unconstrained lifetime parameter of an `impl` is not supported if the\n+lifetime parameter is used by an associated type.\n+\n ### Error example 1\n \n Suppose we have a struct `Foo` and we would like to define some methods for it.\n@@ -32,7 +36,6 @@ The problem is that the parameter `T` does not appear in the implementing type\n (`Foo`) of the impl. In this case, we can fix the error by moving the type\n parameter from the `impl` to the method `get`:\n \n-\n ```\n struct Foo;\n \n@@ -128,6 +131,70 @@ impl<T: Default> Maker<Foo<T>> for FooMaker {\n }\n ```\n \n+### Error example 3\n+\n+Suppose we have a struct `Foo` and we would like to define some methods for it.\n+The following code example has a definition which leads to a compiler error:\n+\n+```compile_fail,E0207\n+struct Foo;\n+\n+impl<const T: i32> Foo {\n+    // error: the const parameter `T` is not constrained by the impl trait, self\n+    // type, or predicates [E0207]\n+    fn get(&self) -> i32 {\n+        i32::default()\n+    }\n+}\n+```\n+\n+The problem is that the const parameter `T` does not appear in the implementing\n+type (`Foo`) of the impl. In this case, we can fix the error by moving the type\n+parameter from the `impl` to the method `get`:\n+\n+\n+```\n+struct Foo;\n+\n+// Move the const parameter from the impl to the method\n+impl Foo {\n+    fn get<const T: i32>(&self) -> i32 {\n+        i32::default()\n+    }\n+}\n+```\n+\n+### Error example 4\n+\n+Suppose we have a struct `Foo` and a struct `Bar` that uses lifetime `'a`. We\n+would like to implement trait `Contains` for `Foo`. The trait `Contains` have\n+the associated type `B`. The following code example has a definition which\n+leads to a compiler error:\n+\n+```compile_fail,E0207\n+struct Foo;\n+struct Bar<'a>;\n+\n+trait Contains {\n+    type B;\n+\n+    fn get(&self) -> i32;\n+}\n+\n+impl<'a> Contains for Foo {\n+    type B = Bar<'a>;\n+\n+    // error: the lifetime parameter `'a` is not constrained by the impl trait,\n+    // self type, or predicates [E0207]\n+    fn get(&self) -> i32 {\n+        i32::default()\n+    }\n+}\n+```\n+\n+Please note that unconstrained lifetime parameters are not supported if they are\n+being used by an associated type.\n+\n ### Additional information\n \n For more information, please see [RFC 447]."}]}