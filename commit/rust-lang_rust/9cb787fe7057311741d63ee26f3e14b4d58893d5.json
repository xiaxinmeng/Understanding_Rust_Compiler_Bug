{"sha": "9cb787fe7057311741d63ee26f3e14b4d58893d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYjc4N2ZlNzA1NzMxMTc0MWQ2M2VlMjZmM2UxNGI0ZDU4ODkzZDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T09:23:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T09:23:53Z"}, "message": "Implement and test simd_shuffle*", "tree": {"sha": "b3be5f8a24304257e0f138a39be3a0855c1fa33c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3be5f8a24304257e0f138a39be3a0855c1fa33c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cb787fe7057311741d63ee26f3e14b4d58893d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb787fe7057311741d63ee26f3e14b4d58893d5", "html_url": "https://github.com/rust-lang/rust/commit/9cb787fe7057311741d63ee26f3e14b4d58893d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cb787fe7057311741d63ee26f3e14b4d58893d5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b89476c3aa8ae96d544684218f772223b18031", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b89476c3aa8ae96d544684218f772223b18031", "html_url": "https://github.com/rust-lang/rust/commit/76b89476c3aa8ae96d544684218f772223b18031"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "9da701d44696ec560eba21bdb1cc48a8f64b308d", "filename": "example/std_example.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9cb787fe7057311741d63ee26f3e14b4d58893d5/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb787fe7057311741d63ee26f3e14b4d58893d5/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=9cb787fe7057311741d63ee26f3e14b4d58893d5", "patch": "@@ -59,12 +59,60 @@ unsafe fn test_simd() {\n     let or = _mm_or_si128(x, y);\n     let cmp_eq = _mm_cmpeq_epi8(y, y);\n     let cmp_lt = _mm_cmplt_epi8(y, y);\n-    let shl = _mm_slli_si128(y, 1);\n \n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(or), [7, 7, 7, 7, 7, 7, 7, 7]);\n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_eq), [0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]);\n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_lt), [0, 0, 0, 0, 0, 0, 0, 0]);\n-    assert_eq!(std::mem::transmute::<_, [u16; 8]>(or), [7, 7, 7, 7, 7, 7, 7, 0]);\n+\n+    test_mm_slli_si128();\n+}\n+\n+#[target_feature(enable = \"sse2\")]\n+unsafe fn test_mm_slli_si128() {\n+    use std::arch::x86_64::*;\n+\n+    #[rustfmt::skip]\n+    let a = _mm_setr_epi8(\n+        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n+    );\n+    let r = _mm_slli_si128(a, 1);\n+    let e = _mm_setr_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n+    assert_eq_m128i(r, e);\n+\n+    #[rustfmt::skip]\n+    let a = _mm_setr_epi8(\n+        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n+    );\n+    let r = _mm_slli_si128(a, 15);\n+    let e = _mm_setr_epi8(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);\n+    assert_eq_m128i(r, e);\n+\n+    #[rustfmt::skip]\n+    let a = _mm_setr_epi8(\n+        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n+    );\n+    let r = _mm_slli_si128(a, 16);\n+    assert_eq_m128i(r, _mm_set1_epi8(0));\n+\n+    #[rustfmt::skip]\n+    let a = _mm_setr_epi8(\n+        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n+    );\n+    let r = _mm_slli_si128(a, -1);\n+    assert_eq_m128i(_mm_set1_epi8(0), r);\n+\n+    #[rustfmt::skip]\n+    let a = _mm_setr_epi8(\n+        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\n+    );\n+    let r = _mm_slli_si128(a, -0x80000000);\n+    assert_eq_m128i(r, _mm_set1_epi8(0));\n+}\n+\n+fn assert_eq_m128i(x: std::arch::x86_64::__m128i, y: std::arch::x86_64::__m128i) {\n+    unsafe {\n+        assert_eq!(std::mem::transmute::<_, [u8; 16]>(x), std::mem::transmute::<_, [u8; 16]>(x));\n+    }\n }\n \n #[derive(PartialEq)]"}, {"sha": "251299dcdbe5539869bdcebc559f32954000f89f", "filename": "src/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cb787fe7057311741d63ee26f3e14b4d58893d5/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cb787fe7057311741d63ee26f3e14b4d58893d5/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=9cb787fe7057311741d63ee26f3e14b4d58893d5", "patch": "@@ -877,10 +877,15 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 assert!(idx < total_len, \"idx {} out of range 0..{}\", idx, total_len);\n             }\n \n-\n-\n-            println!(\"{:?}\", indexes);\n-            unimplemented!();\n+            for (out_idx, in_idx) in indexes.into_iter().enumerate() {\n+                let in_lane = if in_idx < lane_count {\n+                    x.value_field(fx, mir::Field::new(in_idx.try_into().unwrap()))\n+                } else {\n+                    y.value_field(fx, mir::Field::new((in_idx - lane_count).try_into().unwrap()))\n+                };\n+                let out_lane = ret.place_field(fx, mir::Field::new(out_idx));\n+                out_lane.write_cvalue(fx, in_lane);\n+            }\n         };\n \n         simd_add, (c x, c y) {"}]}