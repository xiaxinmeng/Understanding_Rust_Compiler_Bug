{"sha": "d4196a76739f8ad7d27e7d227495fef7589067fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MTk2YTc2NzM5ZjhhZDdkMjdlN2QyMjc0OTVmZWY3NTg5MDY3ZmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-11T08:12:26Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-19T15:55:18Z"}, "message": "start cleaning up subst mess\n\nfix an ICE\n\nfix method name", "tree": {"sha": "51986676f8794dd435a17868e03fd8302faf3448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51986676f8794dd435a17868e03fd8302faf3448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4196a76739f8ad7d27e7d227495fef7589067fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4196a76739f8ad7d27e7d227495fef7589067fd", "html_url": "https://github.com/rust-lang/rust/commit/d4196a76739f8ad7d27e7d227495fef7589067fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4196a76739f8ad7d27e7d227495fef7589067fd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdff9189556bb7de2b9a8a72344c9d8ec6099fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdff9189556bb7de2b9a8a72344c9d8ec6099fcd", "html_url": "https://github.com/rust-lang/rust/commit/cdff9189556bb7de2b9a8a72344c9d8ec6099fcd"}], "stats": {"total": 96, "additions": 38, "deletions": 58}, "files": [{"sha": "d570b754c8749f563eeae2b0a60afe44ca09a39c", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=d4196a76739f8ad7d27e7d227495fef7589067fd", "patch": "@@ -67,7 +67,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::Closure(def_id, substs) => {\n-                        let substs = self.subst_and_normalize_erasing_regions(substs)?;\n+                        let substs = self.subst_from_frame_and_normalize_erasing_regions(substs)?;\n                         let instance = ty::Instance::resolve_closure(\n                             *self.tcx,\n                             def_id,"}, {"sha": "d00411548e92b323f488d17be0ca19676785a8b6", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 27, "deletions": 51, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=d4196a76739f8ad7d27e7d227495fef7589067fd", "patch": "@@ -9,7 +9,7 @@ use rustc::mir;\n use rustc::ty::layout::{\n     self, Size, Align, HasDataLayout, LayoutOf, TyLayout\n };\n-use rustc::ty::subst::{Subst, SubstsRef};\n+use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::query::TyCtxtAt;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -291,41 +291,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ty.is_freeze(*self.tcx, self.param_env, DUMMY_SP)\n     }\n \n-    pub(super) fn subst_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n-        &self,\n-        substs: T,\n-    ) -> InterpResult<'tcx, T> {\n-        match self.stack.last() {\n-            Some(frame) => Ok(self.tcx.subst_and_normalize_erasing_regions(\n-                frame.instance.substs,\n-                self.param_env,\n-                &substs,\n-            )),\n-            None => if substs.needs_subst() {\n-                throw_inval!(TooGeneric)\n-            } else {\n-                Ok(substs)\n-            },\n-        }\n-    }\n-\n-    pub(super) fn resolve(\n-        &self,\n-        def_id: DefId,\n-        substs: SubstsRef<'tcx>\n-    ) -> InterpResult<'tcx, ty::Instance<'tcx>> {\n-        trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n-        trace!(\"param_env: {:#?}\", self.param_env);\n-        let substs = self.subst_and_normalize_erasing_regions(substs)?;\n-        trace!(\"substs: {:#?}\", substs);\n-        ty::Instance::resolve(\n-            *self.tcx,\n-            self.param_env,\n-            def_id,\n-            substs,\n-        ).ok_or_else(|| err_inval!(TooGeneric).into())\n-    }\n-\n     pub fn load_mir(\n         &self,\n         instance: ty::InstanceDef<'tcx>,\n@@ -349,12 +314,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    pub(super) fn monomorphize<T: TypeFoldable<'tcx> + Subst<'tcx>>(\n+    /// Call this on things you got out of the MIR (so it is as generic as the current\n+    /// stack rameframe), to bring it into the proper environment for this interpreter.\n+    pub(super) fn subst_from_frame_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n         &self,\n         t: T,\n     ) -> InterpResult<'tcx, T> {\n         match self.stack.last() {\n-            Some(frame) => Ok(self.monomorphize_with_substs(t, frame.instance.substs)?),\n+            Some(frame) => Ok(self.tcx.subst_and_normalize_erasing_regions(\n+                frame.instance.substs,\n+                self.param_env,\n+                &t,\n+            )),\n             None => if t.needs_subst() {\n                 throw_inval!(TooGeneric)\n             } else {\n@@ -363,20 +334,21 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    fn monomorphize_with_substs<T: TypeFoldable<'tcx> + Subst<'tcx>>(\n+    /// The `substs` are assumed to already be in our interpreter \"universe\" (param_env).\n+    pub(super) fn resolve(\n         &self,\n-        t: T,\n+        def_id: DefId,\n         substs: SubstsRef<'tcx>\n-    ) -> InterpResult<'tcx, T> {\n-        // miri doesn't care about lifetimes, and will choke on some crazy ones\n-        // let's simply get rid of them\n-        let substituted = t.subst(*self.tcx, substs);\n-\n-        if substituted.needs_subst() {\n-            throw_inval!(TooGeneric)\n-        }\n-\n-        Ok(self.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substituted))\n+    ) -> InterpResult<'tcx, ty::Instance<'tcx>> {\n+        trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n+        trace!(\"param_env: {:#?}\", self.param_env);\n+        trace!(\"substs: {:#?}\", substs);\n+        ty::Instance::resolve(\n+            *self.tcx,\n+            self.param_env,\n+            def_id,\n+            substs,\n+        ).ok_or_else(|| err_inval!(TooGeneric).into())\n     }\n \n     pub fn layout_of_local(\n@@ -391,7 +363,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             None => {\n                 let layout = crate::interpret::operand::from_known_layout(layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n-                    let local_ty = self.monomorphize_with_substs(local_ty, frame.instance.substs)?;\n+                    let local_ty = self.tcx.subst_and_normalize_erasing_regions(\n+                        frame.instance.substs,\n+                        self.param_env,\n+                        &local_ty,\n+                    );\n                     self.layout_of(local_ty)\n                 })?;\n                 if let Some(state) = frame.locals.get(local) {"}, {"sha": "f0559b13c334d6c9e22ed51aadb24ff54b8a078e", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=d4196a76739f8ad7d27e7d227495fef7589067fd", "patch": "@@ -540,6 +540,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     // Used when the miri-engine runs into a constant and for extracting information from constants\n     // in patterns via the `const_eval` module\n+    /// The `val` and `layout` are assumed to already be in our interpreter\n+    /// \"universe\" (param_env).\n     crate fn eval_const_to_op(\n         &self,\n         val: &'tcx ty::Const<'tcx>,\n@@ -552,7 +554,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Early-return cases.\n         match val.val {\n             ConstValue::Param(_) =>\n-                // FIXME(oli-obk): try to monomorphize\n                 throw_inval!(TooGeneric),\n             ConstValue::Unevaluated(def_id, substs) => {\n                 let instance = self.resolve(def_id, substs)?;\n@@ -565,7 +566,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         // Other cases need layout.\n         let layout = from_known_layout(layout, || {\n-            self.layout_of(self.monomorphize(val.ty)?)\n+            self.layout_of(val.ty)\n         })?;\n         let op = match val.val {\n             ConstValue::ByRef { alloc, offset } => {"}, {"sha": "71b9c83d615c8250c10a5b830d4a92d16ba21b5c", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=d4196a76739f8ad7d27e7d227495fef7589067fd", "patch": "@@ -640,8 +640,11 @@ where\n                         // their layout on return.\n                         PlaceTy {\n                             place: *return_place,\n-                            layout: self\n-                                .layout_of(self.monomorphize(self.frame().body.return_ty())?)?,\n+                            layout: self.layout_of(\n+                                self.subst_from_frame_and_normalize_erasing_regions(\n+                                    self.frame().body.return_ty()\n+                                )?\n+                            )?,\n                         }\n                     }\n                     None => throw_unsup!(InvalidNullPointerUsage),"}, {"sha": "5a9cf888c93c769cdd9b8d927ab24adcaaf0d39a", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=d4196a76739f8ad7d27e7d227495fef7589067fd", "patch": "@@ -254,7 +254,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             NullaryOp(mir::NullOp::SizeOf, ty) => {\n-                let ty = self.monomorphize(ty)?;\n+                let ty = self.subst_from_frame_and_normalize_erasing_regions(ty)?;\n                 let layout = self.layout_of(ty)?;\n                 assert!(!layout.is_unsized(),\n                         \"SizeOf nullary MIR operator called for unsized type\");"}, {"sha": "940a7bbdcce6ea65c0929f26e8e4b70059ddaca1", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4196a76739f8ad7d27e7d227495fef7589067fd/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=d4196a76739f8ad7d27e7d227495fef7589067fd", "patch": "@@ -77,7 +77,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         for (i, method) in methods.iter().enumerate() {\n             if let Some((def_id, substs)) = *method {\n                 // resolve for vtable: insert shims where needed\n-                let substs = self.subst_and_normalize_erasing_regions(substs)?;\n+                let substs = self.subst_from_frame_and_normalize_erasing_regions(substs)?;\n                 let instance = ty::Instance::resolve_for_vtable(\n                     *self.tcx,\n                     self.param_env,"}]}