{"sha": "d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZTBkMmY1M2RkNjliZjEwYjQyNjA3NjBlNWZiYWRkYzc3YzJhM2Q=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-18T14:43:43Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-21T13:25:58Z"}, "message": "supply substs to anon consts in defaults", "tree": {"sha": "b248f895c4123eac71e18ea2ec91c9c65e42266a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b248f895c4123eac71e18ea2ec91c9c65e42266a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "html_url": "https://github.com/rust-lang/rust/commit/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312b4fdfd281a5ebd740acaf88cc82c47225be23", "url": "https://api.github.com/repos/rust-lang/rust/commits/312b4fdfd281a5ebd740acaf88cc82c47225be23", "html_url": "https://github.com/rust-lang/rust/commit/312b4fdfd281a5ebd740acaf88cc82c47225be23"}], "stats": {"total": 133, "additions": 62, "deletions": 71}, "files": [{"sha": "62a1584d16be0754ecfe1b32319b5810edca2994", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -513,7 +513,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id).into()\n+                            tcx.const_param_default(param.def_id)\n+                                .subst_spanned(tcx, substs.unwrap(), Some(self.span))\n+                                .into()\n                         } else {\n                             if infer_args {\n                                 self.astconv.ct_infer(ty, Some(param), self.span).into()"}, {"sha": "a50f8e1c655996fef3a7f50d24e7509314ac67c8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1446,7 +1446,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default, .. } => {\n                         if !infer_args && has_default {\n-                            tcx.const_param_default(param.def_id).into()\n+                            tcx.const_param_default(param.def_id)\n+                                .subst_spanned(tcx, substs.unwrap(), Some(self.span))\n+                                .into()\n                         } else {\n                             self.fcx.var_for_def(self.span, param)\n                         }"}, {"sha": "927d8c57191a74316662ceeba0a30475d2118553", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1316,29 +1316,31 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n-struct AnonConstInParamListDetector {\n-    in_param_list: bool,\n-    found_anon_const_in_list: bool,\n+struct AnonConstInParamTyDetector {\n+    in_param_ty: bool,\n+    found_anon_const_in_param_ty: bool,\n     ct: HirId,\n }\n \n-impl<'v> Visitor<'v> for AnonConstInParamListDetector {\n+impl<'v> Visitor<'v> for AnonConstInParamTyDetector {\n     type Map = intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n     fn visit_generic_param(&mut self, p: &'v hir::GenericParam<'v>) {\n-        let prev = self.in_param_list;\n-        self.in_param_list = true;\n-        intravisit::walk_generic_param(self, p);\n-        self.in_param_list = prev;\n+        if let GenericParamKind::Const { ref ty, default: _ } = p.kind {\n+            let prev = self.in_param_ty;\n+            self.in_param_ty = true;\n+            self.visit_ty(ty);\n+            self.in_param_ty = prev;\n+        }\n     }\n \n     fn visit_anon_const(&mut self, c: &'v hir::AnonConst) {\n-        if self.in_param_list && self.ct == c.hir_id {\n-            self.found_anon_const_in_list = true;\n+        if self.in_param_ty && self.ct == c.hir_id {\n+            self.found_anon_const_in_param_ty = true;\n         } else {\n             intravisit::walk_anon_const(self, c)\n         }\n@@ -1366,27 +1368,24 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             let parent_def_id = tcx.hir().local_def_id(parent_id);\n \n-            let mut in_param_list = false;\n+            let mut in_param_ty = false;\n             for (_parent, node) in tcx.hir().parent_iter(hir_id) {\n                 if let Some(generics) = node.generics() {\n-                    let mut visitor = AnonConstInParamListDetector {\n-                        in_param_list: false,\n-                        found_anon_const_in_list: false,\n+                    let mut visitor = AnonConstInParamTyDetector {\n+                        in_param_ty: false,\n+                        found_anon_const_in_param_ty: false,\n                         ct: hir_id,\n                     };\n \n                     visitor.visit_generics(generics);\n-                    in_param_list = visitor.found_anon_const_in_list;\n+                    in_param_ty = visitor.found_anon_const_in_param_ty;\n                     break;\n                 }\n             }\n \n-            if in_param_list {\n+            if in_param_ty {\n                 // We do not allow generic parameters in anon consts if we are inside\n-                // of a param list.\n-                //\n-                // This affects both default type bindings, e.g. `struct<T, U = [u8; std::mem::size_of::<T>()]>(T, U)`,\n-                // and the types of const parameters, e.g. `struct V<const N: usize, const M: [u8; N]>();`.\n+                // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n             } else if tcx.lazy_normalization() {\n                 // HACK(eddyb) this provides the correct generics when"}, {"sha": "e0e2b6c69f28062230e181bbfe87ac2ed6fa89cd", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.full.stderr", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.full.stderr?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1,16 +1,18 @@\n-error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/complex-generic-default-expr.rs:9:62\n+error: constant expression depends on a generic parameter\n+  --> $DIR/complex-generic-default-expr.rs:6:34\n+   |\n+LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+   |                                  ^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/complex-generic-default-expr.rs:10:21\n    |\n LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n-   |            -                                                 ^ doesn't have a size known at compile-time\n-   |            |\n-   |            this type parameter needs to be `std::marker::Sized`\n-   | \n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |                     ^^^^^^^^^\n    |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n+   = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "58abd8db9f09fe3760d9168817a9a84b4f4186d5", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:10:47\n+  --> $DIR/complex-generic-default-expr.rs:6:47\n    |\n LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    |                                               ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-generic-default-expr.rs:13:62\n+  --> $DIR/complex-generic-default-expr.rs:10:62\n    |\n LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n    |                                                              ^ cannot perform const operation using `T`"}, {"sha": "a7b712f7b4b863652f1dd4d91a88d4090eb1075e", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.rs?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1,17 +1,14 @@\n-// revisions: min\n-// FIXME(const_generics): add the `full` revision,\n-// currently causes an ICE as we don't supply substs to\n-// anon consts in the parameter listing, as that would\n-// cause that anon const to reference itself.\n+// revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n-//[min]~^ ERROR generic parameters may not be used in const operations\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n \n struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n-//[min]~^ ERROR generic parameters may not be used in const operations\n-//[full]~^^ ERROR the size for values of type `T` cannot be known at compilation time\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n \n fn main() {}"}, {"sha": "59ac261f44fd5bcea26ce74777c3eeb4494885d2", "filename": "src/test/ui/const-generics/defaults/const-param-as-default-value.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-as-default-value.rs?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -8,7 +8,16 @@ fn foo<const N: usize>() -> Foo<N> {\n     Foo(x, x)\n }\n \n+// To check that we actually apply the correct substs for const param defaults.\n+fn concrete_foo() -> Foo<13> {\n+    Foo(Default::default(), Default::default())\n+}\n+\n+\n fn main() {\n     let val = foo::<13>();\n     assert_eq!(val.0, val.1);\n+\n+    let val = concrete_foo();\n+    assert_eq!(val.0, val.1);\n }"}, {"sha": "3f534ca0308ba819fea027149bd265ac76192829", "filename": "src/test/ui/const-generics/defaults/const-param-in-ty-defaults.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-param-in-ty-defaults.rs?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1,10 +1,6 @@\n // run-pass\n #![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n-// FIXME(const_generics_defaults): while we can allow this,\n-// we probably won't easily allow this with more complex const operations.\n-//\n-// So we have to make a conscious decision here when stabilizing a relaxed parameter ordering.\n struct Foo<const N: usize, T = [u8; N]>(T);\n \n impl<const N: usize> Foo<N> {"}, {"sha": "e8fd9e7769b791b70195e575b9348912b4bc86fb", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.full.stderr", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1,31 +1,17 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:10:12\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:10:21\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:21\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |                     ^ defaulted generic parameters cannot be forward declared\n \n-error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:6:44\n-   |\n-LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-   |            -                               ^ doesn't have a size known at compile-time\n-   |            |\n-   |            this type parameter needs to be `std::marker::Sized`\n-   | \n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0128, E0277.\n-For more information about an error, try `rustc --explain E0128`.\n+For more information about this error, try `rustc --explain E0128`."}, {"sha": "5fa6423306c5a5e7cac46e25c983fa404d4d6363", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1,13 +1,13 @@\n error: generic parameters with a default must be trailing\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:10:12\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |            ^\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:6:44\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:5:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ cannot perform const operation using `T`\n@@ -16,7 +16,7 @@ LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n-  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:10:21\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:21\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |                     ^ defaulted generic parameters cannot be forward declared"}, {"sha": "76c1b84aef557864846ab7f9695be49113ac3561", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=d3e0d2f53dd69bf10b4260760e5fbaddc77c2a3d", "patch": "@@ -1,11 +1,9 @@\n // revisions: full min\n-\n #![cfg_attr(full, feature(const_generics))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-//[full]~^ ERROR the size for values of type `T` cannot be known at compilation time\n-//[min]~^^ ERROR generic parameters may not be used in const operations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n struct Bar<T = [u8; N], const N: usize>(T);\n //~^ ERROR generic parameters with a default cannot use forward declared identifiers"}]}