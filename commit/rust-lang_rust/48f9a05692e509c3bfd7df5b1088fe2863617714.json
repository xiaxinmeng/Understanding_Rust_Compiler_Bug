{"sha": "48f9a05692e509c3bfd7df5b1088fe2863617714", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZjlhMDU2OTJlNTA5YzNiZmQ3ZGY1YjEwODhmZTI4NjM2MTc3MTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-25T08:36:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-25T08:36:19Z"}, "message": "Merge #5531\n\n5531: Add rustc-perf to metrics r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "80f2d6a55aca6d66ff5b36c9166fd49fb76ef97b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80f2d6a55aca6d66ff5b36c9166fd49fb76ef97b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48f9a05692e509c3bfd7df5b1088fe2863617714", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfG+8DCRBK7hj4Ov3rIwAAdHIIAJA9iBxWW5b+ARzrAjngQA3k\nRJx1o0XeiNsRseyQBSFu1+65QnScSQWqVYhtjP07IBkDFftNKz106xanumvgCNuV\nMcO0qV662Rsfl8fzpMwVoMd0/Wvv4XD95CZm/BnJCVbfRIBxBIU4CSQWLIhRSft2\nyo88WR+jl5c5pBVM5rMVAq6eRa7yZpnXTSifQYKdxziP2rt1J7T3H8k+EfB8ul8j\nqsL3bXpi9wRwoFbb5FcGSUX0WbBdbZsns+txeICQl8Auvfcw6h4l/dd2BuxJsk7T\nn1iqrFBmBxccRvXiDmsnUh4FVVFmNneGriEwfmeX0W7aZRuIDvPRTJxLp4W0bB8=\n=FUH9\n-----END PGP SIGNATURE-----\n", "payload": "tree 80f2d6a55aca6d66ff5b36c9166fd49fb76ef97b\nparent 0a4e90c0f855df29eb60445bf68ab959c59914ed\nparent 451edcc09866d43def7db88d5d9c139a96ead58e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595666179 +0000\ncommitter GitHub <noreply@github.com> 1595666179 +0000\n\nMerge #5531\n\n5531: Add rustc-perf to metrics r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48f9a05692e509c3bfd7df5b1088fe2863617714", "html_url": "https://github.com/rust-lang/rust/commit/48f9a05692e509c3bfd7df5b1088fe2863617714", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48f9a05692e509c3bfd7df5b1088fe2863617714/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a4e90c0f855df29eb60445bf68ab959c59914ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4e90c0f855df29eb60445bf68ab959c59914ed", "html_url": "https://github.com/rust-lang/rust/commit/0a4e90c0f855df29eb60445bf68ab959c59914ed"}, {"sha": "451edcc09866d43def7db88d5d9c139a96ead58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/451edcc09866d43def7db88d5d9c139a96ead58e", "html_url": "https://github.com/rust-lang/rust/commit/451edcc09866d43def7db88d5d9c139a96ead58e"}], "stats": {"total": 132, "additions": 102, "deletions": 30}, "files": [{"sha": "745345fac0162a1d7a4adf4c3acd0ca106babab6", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48f9a05692e509c3bfd7df5b1088fe2863617714/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9a05692e509c3bfd7df5b1088fe2863617714/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=48f9a05692e509c3bfd7df5b1088fe2863617714", "patch": "@@ -31,6 +31,12 @@ impl fmt::Display for MemoryUsage {\n #[derive(Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n pub struct Bytes(usize);\n \n+impl Bytes {\n+    pub fn megabytes(self) -> usize {\n+        self.0 / 1024 / 1024\n+    }\n+}\n+\n impl fmt::Display for Bytes {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let bytes = self.0;"}, {"sha": "a9b9c8923bad3d766e01b6f1bd782b033d02d18c", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48f9a05692e509c3bfd7df5b1088fe2863617714/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9a05692e509c3bfd7df5b1088fe2863617714/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=48f9a05692e509c3bfd7df5b1088fe2863617714", "patch": "@@ -74,3 +74,10 @@ fn read_stdin() -> Result<String> {\n     std::io::stdin().read_to_string(&mut buff)?;\n     Ok(buff)\n }\n+\n+fn report_metric(metric: &str, value: u64, unit: &str) {\n+    if std::env::var(\"RA_METRICS\").is_err() {\n+        return;\n+    }\n+    println!(\"METRIC:{}:{}:{}\", metric, value, unit)\n+}"}, {"sha": "10327ebb93bc753ec77a6dce83c17e0e359c7c17", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/48f9a05692e509c3bfd7df5b1088fe2863617714/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9a05692e509c3bfd7df5b1088fe2863617714/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=48f9a05692e509c3bfd7df5b1088fe2863617714", "patch": "@@ -3,26 +3,27 @@\n \n use std::{path::Path, time::Instant};\n \n-use itertools::Itertools;\n-use rand::{seq::SliceRandom, thread_rng};\n-use rayon::prelude::*;\n-use rustc_hash::FxHashSet;\n-\n use hir::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     original_range, AssocItem, Crate, HasSource, HirDisplay, ModuleDef,\n };\n use hir_def::FunctionId;\n use hir_ty::{Ty, TypeWalk};\n+use itertools::Itertools;\n use ra_db::{\n     salsa::{self, ParallelDatabase},\n     SourceDatabaseExt,\n };\n use ra_syntax::AstNode;\n+use rand::{seq::SliceRandom, thread_rng};\n+use rayon::prelude::*;\n+use rustc_hash::FxHashSet;\n use stdx::format_to;\n \n use crate::{\n-    cli::{load_cargo::load_cargo, progress_report::ProgressReport, Result, Verbosity},\n+    cli::{\n+        load_cargo::load_cargo, progress_report::ProgressReport, report_metric, Result, Verbosity,\n+    },\n     print_memory_usage,\n };\n \n@@ -48,7 +49,7 @@ pub fn analysis_stats(\n     let db_load_time = Instant::now();\n     let (host, vfs) = load_cargo(path, load_output_dirs, with_proc_macro)?;\n     let db = host.raw_database();\n-    println!(\"Database loaded {:?}\", db_load_time.elapsed());\n+    eprintln!(\"Database loaded {:?}\", db_load_time.elapsed());\n     let analysis_time = Instant::now();\n     let mut num_crates = 0;\n     let mut visited_modules = FxHashSet::default();\n@@ -74,7 +75,7 @@ pub fn analysis_stats(\n         visit_queue.shuffle(&mut thread_rng());\n     }\n \n-    println!(\"Crates in this dir: {}\", num_crates);\n+    eprintln!(\"Crates in this dir: {}\", num_crates);\n     let mut num_decls = 0;\n     let mut funcs = Vec::new();\n     while let Some(module) = visit_queue.pop() {\n@@ -98,10 +99,15 @@ pub fn analysis_stats(\n             }\n         }\n     }\n-    println!(\"Total modules found: {}\", visited_modules.len());\n-    println!(\"Total declarations: {}\", num_decls);\n-    println!(\"Total functions: {}\", funcs.len());\n-    println!(\"Item Collection: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n+    eprintln!(\"Total modules found: {}\", visited_modules.len());\n+    eprintln!(\"Total declarations: {}\", num_decls);\n+    eprintln!(\"Total functions: {}\", funcs.len());\n+    let item_collection_memory = ra_prof::memory_usage();\n+    eprintln!(\n+        \"Item Collection: {:?}, {}\",\n+        analysis_time.elapsed(),\n+        item_collection_memory.allocated\n+    );\n \n     if randomize {\n         funcs.shuffle(&mut thread_rng());\n@@ -123,7 +129,11 @@ pub fn analysis_stats(\n                 snap.0.infer(f_id.into());\n             })\n             .count();\n-        println!(\"Parallel Inference: {:?}, {}\", inference_time.elapsed(), ra_prof::memory_usage());\n+        eprintln!(\n+            \"Parallel Inference: {:?}, {}\",\n+            inference_time.elapsed(),\n+            ra_prof::memory_usage().allocated\n+        );\n     }\n \n     let inference_time = Instant::now();\n@@ -260,20 +270,31 @@ pub fn analysis_stats(\n         bar.inc(1);\n     }\n     bar.finish_and_clear();\n-    println!(\"Total expressions: {}\", num_exprs);\n-    println!(\n+    eprintln!(\"Total expressions: {}\", num_exprs);\n+    eprintln!(\n         \"Expressions of unknown type: {} ({}%)\",\n         num_exprs_unknown,\n         if num_exprs > 0 { num_exprs_unknown * 100 / num_exprs } else { 100 }\n     );\n-    println!(\n+    eprintln!(\n         \"Expressions of partially unknown type: {} ({}%)\",\n         num_exprs_partially_unknown,\n         if num_exprs > 0 { num_exprs_partially_unknown * 100 / num_exprs } else { 100 }\n     );\n-    println!(\"Type mismatches: {}\", num_type_mismatches);\n-    println!(\"Inference: {:?}, {}\", inference_time.elapsed(), ra_prof::memory_usage());\n-    println!(\"Total: {:?}, {}\", analysis_time.elapsed(), ra_prof::memory_usage());\n+    eprintln!(\"Type mismatches: {}\", num_type_mismatches);\n+\n+    let inference_time = inference_time.elapsed();\n+    let total_memory = ra_prof::memory_usage();\n+    eprintln!(\n+        \"Inference: {:?}, {}\",\n+        inference_time,\n+        total_memory.allocated - item_collection_memory.allocated\n+    );\n+\n+    let analysis_time = analysis_time.elapsed();\n+    eprintln!(\"Total: {:?}, {}\", analysis_time, total_memory);\n+    report_metric(\"total time\", analysis_time.as_millis() as u64, \"ms\");\n+    report_metric(\"total memory\", total_memory.allocated.megabytes() as u64, \"MB\");\n \n     if memory_usage {\n         print_memory_usage(host, vfs);"}, {"sha": "ed37992cd342200002967f5e73e3d20ff0929ba5", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48f9a05692e509c3bfd7df5b1088fe2863617714/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9a05692e509c3bfd7df5b1088fe2863617714/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=48f9a05692e509c3bfd7df5b1088fe2863617714", "patch": "@@ -86,6 +86,6 @@ fn print_memory_usage(mut host: AnalysisHost, vfs: Vfs) {\n     mem.push((\"Remaining\".into(), ra_prof::memory_usage().allocated));\n \n     for (name, bytes) in mem {\n-        println!(\"{:>8} {}\", bytes, name);\n+        eprintln!(\"{:>8} {}\", bytes, name);\n     }\n }"}, {"sha": "9ac3fa51d06e51c952de07437d15a394e7e11f59", "filename": "xtask/src/metrics.rs", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/48f9a05692e509c3bfd7df5b1088fe2863617714/xtask%2Fsrc%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9a05692e509c3bfd7df5b1088fe2863617714/xtask%2Fsrc%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmetrics.rs?ref=48f9a05692e509c3bfd7df5b1088fe2863617714", "patch": "@@ -3,14 +3,15 @@ use std::{\n     env,\n     fmt::{self, Write as _},\n     io::Write as _,\n+    path::Path,\n     time::{Instant, SystemTime, UNIX_EPOCH},\n };\n \n use anyhow::{bail, format_err, Result};\n \n-use crate::not_bash::{fs2, pushd, rm_rf, run};\n+use crate::not_bash::{fs2, pushd, pushenv, rm_rf, run};\n \n-type Unit = &'static str;\n+type Unit = String;\n \n pub struct MetricsCmd {\n     pub dry_run: bool,\n@@ -22,9 +23,21 @@ impl MetricsCmd {\n         if !self.dry_run {\n             rm_rf(\"./target/release\")?;\n         }\n+        if !Path::new(\"./target/rustc-perf\").exists() {\n+            fs2::create_dir_all(\"./target/rustc-perf\")?;\n+            run!(\"git clone https://github.com/rust-lang/rustc-perf.git ./target/rustc-perf\")?;\n+        }\n+        {\n+            let _d = pushd(\"./target/rustc-perf\");\n+            run!(\"git reset --hard 1d9288b0da7febf2599917da1b57dc241a1af033\")?;\n+        }\n+\n+        let _env = pushenv(\"RA_METRICS\", \"1\");\n \n         metrics.measure_build()?;\n         metrics.measure_analysis_stats_self()?;\n+        metrics.measure_analysis_stats(\"ripgrep\")?;\n+        metrics.measure_analysis_stats(\"webrender\")?;\n \n         if !self.dry_run {\n             let _d = pushd(\"target\");\n@@ -46,23 +59,47 @@ impl MetricsCmd {\n \n impl Metrics {\n     fn measure_build(&mut self) -> Result<()> {\n+        eprintln!(\"\\nMeasuring build\");\n         run!(\"cargo fetch\")?;\n \n         let time = Instant::now();\n         run!(\"cargo build --release --package rust-analyzer --bin rust-analyzer\")?;\n         let time = time.elapsed();\n-        self.report(\"build\", time.as_millis() as u64, \"ms\");\n+        self.report(\"build\", time.as_millis() as u64, \"ms\".into());\n         Ok(())\n     }\n     fn measure_analysis_stats_self(&mut self) -> Result<()> {\n-        let time = Instant::now();\n-        run!(\"./target/release/rust-analyzer analysis-stats .\")?;\n-        let time = time.elapsed();\n-        self.report(\"analysis-stats/self\", time.as_millis() as u64, \"ms\");\n+        self.measure_analysis_stats_path(\"self\", &\".\")\n+    }\n+    fn measure_analysis_stats(&mut self, bench: &str) -> Result<()> {\n+        self.measure_analysis_stats_path(\n+            bench,\n+            &format!(\"./target/rustc-perf/collector/benchmarks/{}\", bench),\n+        )\n+    }\n+    fn measure_analysis_stats_path(&mut self, name: &str, path: &str) -> Result<()> {\n+        eprintln!(\"\\nMeasuring analysis-stats/{}\", name);\n+        let output = run!(\"./target/release/rust-analyzer analysis-stats --quiet {}\", path)?;\n+        for (metric, value, unit) in parse_metrics(&output) {\n+            self.report(&format!(\"analysis-stats/{}/{}\", name, metric), value, unit.into());\n+        }\n         Ok(())\n     }\n }\n \n+fn parse_metrics(output: &str) -> Vec<(&str, u64, &str)> {\n+    output\n+        .lines()\n+        .filter_map(|it| {\n+            let entry = it.split(':').collect::<Vec<_>>();\n+            match entry.as_slice() {\n+                [\"METRIC\", name, value, unit] => Some((*name, value.parse().unwrap(), *unit)),\n+                _ => None,\n+            }\n+        })\n+        .collect()\n+}\n+\n #[derive(Debug)]\n struct Metrics {\n     host: Host,\n@@ -111,11 +148,11 @@ impl Metrics {\n             json.field(\"metrics\");\n             json.begin_object();\n             {\n-                for (k, &(value, unit)) in &self.metrics {\n+                for (k, (value, unit)) in &self.metrics {\n                     json.field(k);\n                     json.begin_array();\n                     {\n-                        json.number(value as f64);\n+                        json.number(*value as f64);\n                         json.string(unit);\n                     }\n                     json.end_array();"}, {"sha": "ef811e5bf34b0853be200495017d031e76712335", "filename": "xtask/src/not_bash.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48f9a05692e509c3bfd7df5b1088fe2863617714/xtask%2Fsrc%2Fnot_bash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f9a05692e509c3bfd7df5b1088fe2863617714/xtask%2Fsrc%2Fnot_bash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fnot_bash.rs?ref=48f9a05692e509c3bfd7df5b1088fe2863617714", "patch": "@@ -186,7 +186,8 @@ impl Env {\n     fn pushd(&mut self, dir: PathBuf) {\n         let dir = self.cwd().join(dir);\n         self.pushd_stack.push(dir);\n-        env::set_current_dir(self.cwd()).unwrap();\n+        env::set_current_dir(self.cwd())\n+            .unwrap_or_else(|err| panic!(\"Failed to set cwd to {}: {}\", self.cwd().display(), err));\n     }\n     fn popd(&mut self) {\n         self.pushd_stack.pop().unwrap();"}]}