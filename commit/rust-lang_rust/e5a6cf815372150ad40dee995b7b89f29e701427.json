{"sha": "e5a6cf815372150ad40dee995b7b89f29e701427", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YTZjZjgxNTM3MjE1MGFkNDBkZWU5OTViN2I4OWYyOWU3MDE0Mjc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-05T23:33:58Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-05T23:38:08Z"}, "message": "Various small code review improvements", "tree": {"sha": "68d63fbccd0f5b6c4432aadf98566f428e6fba9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68d63fbccd0f5b6c4432aadf98566f428e6fba9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5a6cf815372150ad40dee995b7b89f29e701427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a6cf815372150ad40dee995b7b89f29e701427", "html_url": "https://github.com/rust-lang/rust/commit/e5a6cf815372150ad40dee995b7b89f29e701427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5a6cf815372150ad40dee995b7b89f29e701427/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e3e5ab2c81f238ea4e731f55eac79b74d9d84c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3e5ab2c81f238ea4e731f55eac79b74d9d84c3", "html_url": "https://github.com/rust-lang/rust/commit/8e3e5ab2c81f238ea4e731f55eac79b74d9d84c3"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "6866fc2acfe8e15e1b213c6158b0a8533d05817f", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e5a6cf815372150ad40dee995b7b89f29e701427/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a6cf815372150ad40dee995b7b89f29e701427/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=e5a6cf815372150ad40dee995b7b89f29e701427", "patch": "@@ -1,3 +1,4 @@\n+use std::ops::Index;\n use std::sync::Arc;\n \n use rustc_hash::FxHashMap;\n@@ -44,14 +45,6 @@ pub struct BodySyntaxMapping {\n }\n \n impl Body {\n-    pub fn expr(&self, expr: ExprId) -> &Expr {\n-        &self.exprs[expr]\n-    }\n-\n-    pub fn pat(&self, pat: PatId) -> &Pat {\n-        &self.pats[pat]\n-    }\n-\n     pub fn args(&self) -> &[PatId] {\n         &self.args\n     }\n@@ -61,6 +54,22 @@ impl Body {\n     }\n }\n \n+impl Index<ExprId> for Body {\n+    type Output = Expr;\n+\n+    fn index(&self, expr: ExprId) -> &Expr {\n+        &self.exprs[expr]\n+    }\n+}\n+\n+impl Index<PatId> for Body {\n+    type Output = Pat;\n+\n+    fn index(&self, pat: PatId) -> &Pat {\n+        &self.pats[pat]\n+    }\n+}\n+\n impl BodySyntaxMapping {\n     pub fn expr_syntax(&self, expr: ExprId) -> Option<LocalSyntaxPtr> {\n         self.expr_syntax_mapping_back.get(&expr).cloned()\n@@ -377,11 +386,7 @@ impl ExprCollector {\n                         syntax_ptr,\n                     )\n                 } else {\n-                    let condition = if let Some(condition) = e.condition() {\n-                        self.collect_expr_opt(condition.expr())\n-                    } else {\n-                        self.exprs.alloc(Expr::Missing)\n-                    };\n+                    let condition = self.collect_expr_opt(e.condition().and_then(|c| c.expr()));\n                     let then_branch = self.collect_block_opt(e.then_branch());\n                     let else_branch = e.else_branch().map(|e| self.collect_block(e));\n                     self.alloc_expr("}, {"sha": "0a12f0b35b66108cf8bd799cf8ff00aa368164bd", "filename": "crates/ra_hir/src/function/scope.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5a6cf815372150ad40dee995b7b89f29e701427/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a6cf815372150ad40dee995b7b89f29e701427/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs?ref=e5a6cf815372150ad40dee995b7b89f29e701427", "patch": "@@ -66,8 +66,7 @@ impl FnScopes {\n             .scope_chain_for(context_expr)\n             .flat_map(|scope| self.entries(scope).iter())\n             .filter(|entry| shadowed.insert(entry.name()))\n-            .filter(|entry| entry.name() == &name)\n-            .nth(0);\n+            .find(|entry| entry.name() == &name);\n         ret\n     }\n \n@@ -84,7 +83,7 @@ impl FnScopes {\n         })\n     }\n     fn add_bindings(&mut self, body: &Body, scope: ScopeId, pat: PatId) {\n-        match body.pat(pat) {\n+        match &body[pat] {\n             Pat::Bind { name } => self.scopes[scope].entries.push(ScopeEntry {\n                 name: name.clone(),\n                 pat,\n@@ -96,7 +95,7 @@ impl FnScopes {\n         let body = Arc::clone(&self.body);\n         params\n             .into_iter()\n-            .for_each(|it| self.add_bindings(&body, scope, *it));\n+            .for_each(|pat| self.add_bindings(&body, scope, *pat));\n     }\n     fn set_scope(&mut self, node: ExprId, scope: ScopeId) {\n         self.scope_for.insert(node, scope);\n@@ -218,8 +217,7 @@ impl ScopesWithSyntaxMapping {\n         node.ancestors()\n             .map(LocalSyntaxPtr::new)\n             .filter_map(|ptr| self.syntax_mapping.syntax_expr(ptr))\n-            .filter_map(|it| self.scopes.scope_for(it))\n-            .next()\n+            .find_map(|it| self.scopes.scope_for(it))\n     }\n }\n \n@@ -264,7 +262,7 @@ fn compute_block_scopes(\n \n fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut FnScopes, scope: ScopeId) {\n     scopes.set_scope(expr, scope);\n-    match body.expr(expr) {\n+    match &body[expr] {\n         Expr::Block { statements, tail } => {\n             compute_block_scopes(&statements, *tail, body, scopes, scope);\n         }"}, {"sha": "29a3960e9190b0919f0c812c2465ad7f54a8523e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5a6cf815372150ad40dee995b7b89f29e701427/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a6cf815372150ad40dee995b7b89f29e701427/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=e5a6cf815372150ad40dee995b7b89f29e701427", "patch": "@@ -92,12 +92,10 @@ pub fn function_from_position(\n     position: FilePosition,\n ) -> Cancelable<Option<Function>> {\n     let file = db.source_file(position.file_id);\n-    let fn_def = if let Some(f) = find_node_at_offset::<ast::FnDef>(file.syntax(), position.offset)\n-    {\n-        f\n-    } else {\n-        return Ok(None);\n-    };\n+    let fn_def = ctry!(find_node_at_offset::<ast::FnDef>(\n+        file.syntax(),\n+        position.offset\n+    ));\n     function_from_source(db, position.file_id, fn_def)\n }\n "}]}