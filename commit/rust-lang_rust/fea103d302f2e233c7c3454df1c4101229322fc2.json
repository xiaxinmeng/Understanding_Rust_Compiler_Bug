{"sha": "fea103d302f2e233c7c3454df1c4101229322fc2", "node_id": "C_kwDOAAsO6NoAKGZlYTEwM2QzMDJmMmUyMzNjN2MzNDU0ZGYxYzQxMDEyMjkzMjJmYzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-20T22:53:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-20T22:53:47Z"}, "message": "Auto merge of #8150 - flip1995:clippy_utils_test, r=xFrednet\n\nTest clippy_utils in CI\n\nr? `@xFrednet` Since you did the last refactor of the `str_utils` functions in #7873\n\nchangelog: Make sure tests in `clippy_utils` are passing by testing it in CI", "tree": {"sha": "29d70c1c2f6f5eca9b6958bac935f309b589ee04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d70c1c2f6f5eca9b6958bac935f309b589ee04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fea103d302f2e233c7c3454df1c4101229322fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fea103d302f2e233c7c3454df1c4101229322fc2", "html_url": "https://github.com/rust-lang/rust/commit/fea103d302f2e233c7c3454df1c4101229322fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fea103d302f2e233c7c3454df1c4101229322fc2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "790513056f8fc6aad10f479454d449da2892d284", "url": "https://api.github.com/repos/rust-lang/rust/commits/790513056f8fc6aad10f479454d449da2892d284", "html_url": "https://github.com/rust-lang/rust/commit/790513056f8fc6aad10f479454d449da2892d284"}, {"sha": "eb473987737b9851dca20ea46dc3ec7eba4d2ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb473987737b9851dca20ea46dc3ec7eba4d2ebd", "html_url": "https://github.com/rust-lang/rust/commit/eb473987737b9851dca20ea46dc3ec7eba4d2ebd"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "3d8c39408a924b5601d27262e8cb91811cfc8456", "filename": ".github/workflows/clippy.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea103d302f2e233c7c3454df1c4101229322fc2/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/fea103d302f2e233c7c3454df1c4101229322fc2/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=fea103d302f2e233c7c3454df1c4101229322fc2", "patch": "@@ -58,6 +58,10 @@ jobs:\n       run: cargo test --features deny-warnings,internal-lints,metadata-collector-lint\n       working-directory: clippy_lints\n \n+    - name: Test clippy_utils\n+      run: cargo test --features deny-warnings,internal-lints,metadata-collector-lint\n+      working-directory: clippy_utils\n+\n     - name: Test rustc_tools_util\n       run: cargo test --features deny-warnings\n       working-directory: rustc_tools_util"}, {"sha": "8b644aa28176b6e4fc44de9dcf81b3c8cd09dc58", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fea103d302f2e233c7c3454df1c4101229322fc2/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/fea103d302f2e233c7c3454df1c4101229322fc2/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=fea103d302f2e233c7c3454df1c4101229322fc2", "patch": "@@ -121,6 +121,10 @@ jobs:\n       run: cargo test --features deny-warnings,internal-lints,metadata-collector-lint\n       working-directory: clippy_lints\n \n+    - name: Test clippy_utils\n+      run: cargo test --features deny-warnings,internal-lints,metadata-collector-lint\n+      working-directory: clippy_utils\n+\n     - name: Test rustc_tools_util\n       run: cargo test --features deny-warnings\n       working-directory: rustc_tools_util"}, {"sha": "76f4408573bbc5d20f5e4628c8e6fedd295ec678", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fea103d302f2e233c7c3454df1c4101229322fc2/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea103d302f2e233c7c3454df1c4101229322fc2/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=fea103d302f2e233c7c3454df1c4101229322fc2", "patch": "@@ -156,18 +156,18 @@ pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n /// instead.\n ///\n /// Examples:\n-/// ```ignore\n+/// ```\n /// let abc = 1;\n /// //        ^ output\n /// let def = abc;\n-/// dbg!(def)\n+/// dbg!(def);\n /// //   ^^^ input\n ///\n /// // or...\n /// let abc = 1;\n /// let def = abc + 2;\n /// //        ^^^^^^^ output\n-/// dbg!(def)\n+/// dbg!(def);\n /// //   ^^^ input\n /// ```\n pub fn expr_or_init<'a, 'b, 'tcx: 'b>(cx: &LateContext<'tcx>, mut expr: &'a Expr<'b>) -> &'a Expr<'b> {\n@@ -1136,7 +1136,7 @@ pub fn find_macro_calls(names: &[&str], body: &Body<'_>) -> Vec<Span> {\n \n /// Extends the span to the beginning of the spans line, incl. whitespaces.\n ///\n-/// ```rust,ignore\n+/// ```rust\n ///        let x = ();\n /// //             ^^\n /// // will be converted to\n@@ -1337,7 +1337,7 @@ pub fn is_adjusted(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     cx.typeck_results().adjustments().get(e.hir_id).is_some()\n }\n \n-/// Returns the pre-expansion span if is this comes from an expansion of the\n+/// Returns the pre-expansion span if this comes from an expansion of the\n /// macro `name`.\n /// See also [`is_direct_expn_of`].\n #[must_use]\n@@ -1364,7 +1364,8 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// of the macro `name`.\n /// The difference with [`is_expn_of`] is that in\n /// ```rust\n-/// # macro_rules! foo { ($e:tt) => { $e } }; macro_rules! bar { ($e:expr) => { $e } }\n+/// # macro_rules! foo { ($name:tt!$args:tt) => { $name!$args } }\n+/// # macro_rules! bar { ($e:expr) => { $e } }\n /// foo!(bar!(42));\n /// ```\n /// `42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only\n@@ -1905,7 +1906,9 @@ pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n \n /// Check if parent of a hir node is a trait implementation block.\n /// For example, `f` in\n-/// ```rust,ignore\n+/// ```rust\n+/// # struct S;\n+/// # trait Trait { fn f(); }\n /// impl Trait for S {\n ///     fn f() {}\n /// }"}, {"sha": "6dc52bf23254414022dc4df214cd864f8a0bcc36", "filename": "clippy_utils/src/str_utils.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fea103d302f2e233c7c3454df1c4101229322fc2/clippy_utils%2Fsrc%2Fstr_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea103d302f2e233c7c3454df1c4101229322fc2/clippy_utils%2Fsrc%2Fstr_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fstr_utils.rs?ref=fea103d302f2e233c7c3454df1c4101229322fc2", "patch": "@@ -15,6 +15,7 @@ impl StrIndex {\n /// Returns the index of the character after the first camel-case component of `s`.\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{camel_case_until, StrIndex};\n /// assert_eq!(camel_case_until(\"AbcDef\"), StrIndex::new(6, 6));\n /// assert_eq!(camel_case_until(\"ABCD\"), StrIndex::new(0, 0));\n /// assert_eq!(camel_case_until(\"AbcDD\"), StrIndex::new(3, 3));\n@@ -55,9 +56,10 @@ pub fn camel_case_until(s: &str) -> StrIndex {\n     }\n }\n \n-/// Returns index of the last camel-case component of `s`.\n+/// Returns index of the first camel-case component of `s`.\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{camel_case_start, StrIndex};\n /// assert_eq!(camel_case_start(\"AbcDef\"), StrIndex::new(0, 0));\n /// assert_eq!(camel_case_start(\"abcDef\"), StrIndex::new(3, 3));\n /// assert_eq!(camel_case_start(\"ABCD\"), StrIndex::new(4, 4));\n@@ -69,9 +71,9 @@ pub fn camel_case_start(s: &str) -> StrIndex {\n     let char_count = s.chars().count();\n     let range = 0..char_count;\n     let mut iter = range.rev().zip(s.char_indices().rev());\n-    if let Some((char_index, (_, first))) = iter.next() {\n+    if let Some((_, (_, first))) = iter.next() {\n         if !first.is_lowercase() {\n-            return StrIndex::new(char_index, s.len());\n+            return StrIndex::new(char_count, s.len());\n         }\n     } else {\n         return StrIndex::new(char_count, s.len());\n@@ -116,6 +118,7 @@ impl StrCount {\n /// Returns the number of chars that match from the start\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{count_match_start, StrCount};\n /// assert_eq!(count_match_start(\"hello_mouse\", \"hello_penguin\"), StrCount::new(6, 6));\n /// assert_eq!(count_match_start(\"hello_clippy\", \"bye_bugs\"), StrCount::new(0, 0));\n /// assert_eq!(count_match_start(\"hello_world\", \"hello_world\"), StrCount::new(11, 11));\n@@ -141,6 +144,7 @@ pub fn count_match_start(str1: &str, str2: &str) -> StrCount {\n /// Returns the number of chars and bytes that match from the end\n ///\n /// ```\n+/// # use clippy_utils::str_utils::{count_match_end, StrCount};\n /// assert_eq!(count_match_end(\"hello_cat\", \"bye_cat\"), StrCount::new(4, 4));\n /// assert_eq!(count_match_end(\"if_item_thing\", \"enum_value\"), StrCount::new(0, 0));\n /// assert_eq!(count_match_end(\"Clippy\", \"Clippy\"), StrCount::new(6, 6));"}]}