{"sha": "b0ee41064ce76126775077dc34c6b97122d98d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZWU0MTA2NGNlNzYxMjY3NzUwNzdkYzM0YzZiOTcxMjJkOThkNTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-15T00:05:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-15T00:05:17Z"}, "message": "Minimize pointless logging during walk.", "tree": {"sha": "86891bd2aa746a10416278872542c9492e41ee8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86891bd2aa746a10416278872542c9492e41ee8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0ee41064ce76126775077dc34c6b97122d98d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ee41064ce76126775077dc34c6b97122d98d50", "html_url": "https://github.com/rust-lang/rust/commit/b0ee41064ce76126775077dc34c6b97122d98d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0ee41064ce76126775077dc34c6b97122d98d50/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0da083c5b36e88f280264f57d966257250b10dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0da083c5b36e88f280264f57d966257250b10dc", "html_url": "https://github.com/rust-lang/rust/commit/d0da083c5b36e88f280264f57d966257250b10dc"}], "stats": {"total": 227, "additions": 129, "deletions": 98}, "files": [{"sha": "f8b82c122b4e0a3f1ec11d114d1d0116fdfad36b", "filename": "src/boot/me/alias.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Falias.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Falias.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Falias.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -118,7 +118,8 @@ let process_crate\n          Walk.empty_visitor);\n     |]\n   in\n-    run_passes cx \"alias\" path passes (log cx \"%s\") crate\n+    run_passes cx \"alias\" path passes\n+      cx.ctxt_sess.Session.sess_log_alias log crate\n ;;\n \n (*"}, {"sha": "61aa846a50c5db237a851bd9c189f03eff494ae6", "filename": "src/boot/me/dead.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fdead.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fdead.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdead.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -106,7 +106,8 @@ let process_crate\n     |]\n   in\n \n-    run_passes cx \"dead\" path passes (log cx \"%s\") crate;\n+    run_passes cx \"dead\" path passes\n+      cx.ctxt_sess.Session.sess_log_dead log crate;\n     ()\n ;;\n "}, {"sha": "f1d51f167ca0d6295e5033dd61983eb0c1a86909", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -1450,7 +1450,7 @@ let dwarf_visitor\n \n   let iso_stack = Stack.create () in\n \n-  let path_name _ = Fmt.fmt_to_str Ast.fmt_name (Walk.path_to_name path) in\n+  let path_name _ = Fmt.fmt_to_str Ast.fmt_name (path_to_name path) in\n \n   let (abbrev_table:(abbrev, int) Hashtbl.t) = Hashtbl.create 0 in\n \n@@ -2547,7 +2547,8 @@ let process_crate\n   in\n \n     log cx \"emitting DWARF records\";\n-    run_passes cx \"dwarf\" path passes (log cx \"%s\") crate;\n+    run_passes cx \"dwarf\" path passes\n+      cx.ctxt_sess.Session.sess_log_dwarf log crate;\n \n     (* Terminate the tables. *)\n     {"}, {"sha": "9ddef63d10329b3f2475d4578057ae91fe24a6f1", "filename": "src/boot/me/effect.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Feffect.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Feffect.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Feffect.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -328,7 +328,8 @@ let process_crate\n           else err (Some id) \"auth clause in crate refers to non-item\"\n   in\n     Hashtbl.iter auth_effect crate.node.Ast.crate_auth;\n-    run_passes cx \"effect\" path passes (log cx \"%s\") crate\n+    run_passes cx \"effect\" path passes\n+      cx.ctxt_sess.Session.sess_log_effect log crate\n ;;\n \n (*"}, {"sha": "dcb03f210e8dbc1a1f63a1f479ac9f21de69693a", "filename": "src/boot/me/layout.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Flayout.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Flayout.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Flayout.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -456,7 +456,8 @@ let process_crate\n          Walk.empty_visitor)\n     |];\n   in\n-    run_passes cx \"layout\" path passes (log cx \"%s\") crate\n+    run_passes cx \"layout\" path passes\n+      cx.ctxt_sess.Session.sess_log_layout log crate\n ;;\n \n "}, {"sha": "1fbb82233ff43675d4096fa8c8ffada8ae563d47", "filename": "src/boot/me/loop.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Floop.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Floop.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Floop.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -148,8 +148,8 @@ let process_crate\n     |]\n   in\n \n-    run_passes cx \"loop\" path passes (log cx \"%s\") crate;\n-    ()\n+    run_passes cx \"loop\" path passes\n+      cx.ctxt_sess.Session.sess_log_loop log crate\n ;;\n \n "}, {"sha": "2c2b1b4b60948518143b717f5a829dc6aa273c56", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -167,7 +167,7 @@ let all_item_collecting_visitor\n     Array.iter (fun p -> htab_put cx.ctxt_all_defns p.id\n                   (DEFN_ty_param p.node)) p;\n     htab_put cx.ctxt_all_defns i.id (DEFN_item i.node);\n-    htab_put cx.ctxt_all_item_names i.id (Walk.path_to_name path);\n+    htab_put cx.ctxt_all_item_names i.id (path_to_name path);\n     log cx \"collected item #%d: %s\" (int_of_node i.id) n;\n     begin\n       match i.node.Ast.decl_item with\n@@ -191,14 +191,14 @@ let all_item_collecting_visitor\n \n   let visit_obj_fn_pre obj ident fn =\n     htab_put cx.ctxt_all_defns fn.id (DEFN_obj_fn (obj.id, fn.node));\n-    htab_put cx.ctxt_all_item_names fn.id (Walk.path_to_name path);\n+    htab_put cx.ctxt_all_item_names fn.id (path_to_name path);\n     note_header fn.id fn.node.Ast.fn_input_slots;\n     inner.Walk.visit_obj_fn_pre obj ident fn\n   in\n \n   let visit_obj_drop_pre obj b =\n     htab_put cx.ctxt_all_defns b.id (DEFN_obj_drop obj.id);\n-    htab_put cx.ctxt_all_item_names b.id (Walk.path_to_name path);\n+    htab_put cx.ctxt_all_item_names b.id (path_to_name path);\n     inner.Walk.visit_obj_drop_pre obj b\n   in\n \n@@ -210,7 +210,7 @@ let all_item_collecting_visitor\n               htab_put cx.ctxt_all_defns id\n                 (DEFN_loop_body (Stack.top items));\n               htab_put cx.ctxt_all_item_names id\n-                (Walk.path_to_name path);\n+                (path_to_name path);\n         | _ -> ()\n     end;\n     inner.Walk.visit_stmt_pre s;\n@@ -1035,14 +1035,14 @@ let process_crate\n       export_referencing_visitor cx Walk.empty_visitor\n     |]\n   in\n-\n+  let log_flag = cx.ctxt_sess.Session.sess_log_resolve in\n     log cx \"running primary resolve passes\";\n-    run_passes cx \"resolve collect\" path passes_0 (log cx \"%s\") crate;\n+    run_passes cx \"resolve collect\" path passes_0 log_flag log crate;\n     resolve_recursion cx node_to_references recursive_tag_groups;\n     log cx \"running secondary resolve passes\";\n-    run_passes cx \"resolve bind\" path passes_1 (log cx \"%s\") crate;\n+    run_passes cx \"resolve bind\" path passes_1 log_flag log crate;\n     log cx \"running tertiary resolve passes\";\n-    run_passes cx \"resolve patterns\" path passes_2 (log cx \"%s\") crate;\n+    run_passes cx \"resolve patterns\" path passes_2 log_flag log crate;\n \n     iflog cx\n       begin"}, {"sha": "9bf3b964f0e95fc2786172c08d7d6bcd4fb59397", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 94, "deletions": 3, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -1506,6 +1506,97 @@ let unreferenced_required_item_ignoring_visitor\n         Walk.visit_obj_drop_post = visit_obj_drop_post; }\n ;;\n \n+let rec name_of ncs =\n+  match ncs with\n+      [] -> bug () \"Walk.name_of_ncs: empty path\"\n+    | [(Ast.COMP_ident i)] -> Ast.NAME_base (Ast.BASE_ident i)\n+    | [(Ast.COMP_app x)] -> Ast.NAME_base (Ast.BASE_app x)\n+    | [(Ast.COMP_idx _)] ->\n+        bug () \"Walk.name_of_ncs: path-name contains COMP_idx\"\n+    | nc::ncs -> Ast.NAME_ext (name_of ncs, nc)\n+;;\n+\n+let path_to_name\n+    (path:Ast.name_component Stack.t)\n+    : Ast.name =\n+  name_of (stk_elts_from_top path)\n+;;\n+\n+let mod_item_logging_visitor\n+    (cx:ctxt)\n+    (log_flag:bool)\n+    (log:ctxt -> ('a, unit, string, unit) format4 -> 'a)\n+    (pass:int)\n+    (path:Ast.name_component Stack.t)\n+    (inner:Walk.visitor)\n+    : Walk.\n+visitor =\n+  let entering _ =\n+    if log_flag\n+    then\n+      log cx \"pass %d: entering %a\"\n+        pass Ast.sprintf_name (path_to_name path)\n+  in\n+  let entered _ =\n+    if log_flag\n+    then\n+      log cx \"pass %d: entered %a\"\n+        pass Ast.sprintf_name (path_to_name path)\n+  in\n+  let leaving _ =\n+    if log_flag\n+    then\n+      log cx \"pass %d: leaving %a\"\n+        pass Ast.sprintf_name (path_to_name path)\n+  in\n+  let left _ =\n+    if log_flag\n+    then\n+      log cx \"pass %d: left %a\"\n+        pass Ast.sprintf_name (path_to_name path)\n+  in\n+\n+  let visit_mod_item_pre name params item =\n+    entering();\n+    inner.Walk.visit_mod_item_pre name params item;\n+    entered();\n+  in\n+  let visit_mod_item_post name params item =\n+    leaving();\n+    inner.Walk.visit_mod_item_post name params item;\n+    left();\n+  in\n+  let visit_obj_fn_pre obj ident fn =\n+    entering();\n+    inner.Walk.visit_obj_fn_pre obj ident fn;\n+    entered();\n+  in\n+  let visit_obj_fn_post obj ident fn =\n+    leaving();\n+    inner.Walk.visit_obj_fn_post obj ident fn;\n+    left();\n+  in\n+  let visit_obj_drop_pre obj b =\n+    entering();\n+    inner.Walk.visit_obj_drop_pre obj b;\n+    entered();\n+  in\n+  let visit_obj_drop_post obj fn =\n+    leaving();\n+    inner.Walk.visit_obj_drop_post obj fn;\n+    left();\n+  in\n+    { inner with\n+        Walk.visit_mod_item_pre = visit_mod_item_pre;\n+        Walk.visit_mod_item_post = visit_mod_item_post;\n+        Walk.visit_obj_fn_pre = visit_obj_fn_pre;\n+        Walk.visit_obj_fn_post = visit_obj_fn_post;\n+        Walk.visit_obj_drop_pre = visit_obj_drop_pre;\n+        Walk.visit_obj_drop_post = visit_obj_drop_post;\n+    }\n+;;\n+\n+\n \n (* Generic lookup, used for slots, items, types, etc. *)\n \n@@ -1752,14 +1843,14 @@ let run_passes\n     (name:string)\n     (path:Ast.name_component Stack.t)\n     (passes:Walk.visitor array)\n-    (log:string->unit)\n+    (log_flag:bool)\n+    (log:ctxt -> ('a, unit, string, unit) format4 -> 'a)\n     (crate:Ast.crate)\n     : unit =\n   let do_pass i pass =\n-    let logger s = log (Printf.sprintf \"pass %d: %s\" i s) in\n       Walk.walk_crate\n         (Walk.path_managing_visitor path\n-           (Walk.mod_item_logging_visitor logger path pass))\n+           (mod_item_logging_visitor cx log_flag log i path pass))\n         crate\n   in\n   let sess = cx.ctxt_sess in"}, {"sha": "46be9326ef4469e1c199b9caaf20f237acc82e16", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -225,7 +225,7 @@ let trans_visitor\n   let epilogue_jumps = Stack.create() in\n \n   let path_name (_:unit) : string =\n-    string_of_name (Walk.path_to_name path)\n+    string_of_name (path_to_name path)\n   in\n \n   let based (reg:Il.reg) : Il.mem =\n@@ -4632,7 +4632,7 @@ let trans_visitor\n       trans_crate_rel_static_string_frag (string_of_name_component nc)\n     in\n       trans_crate_rel_data_operand\n-        (DATA_name (Walk.name_of ncs))\n+        (DATA_name (name_of ncs))\n         (fun _ -> Asm.SEQ (Array.append\n                              (Array.map f (Array.of_list ncs))\n                              [| Asm.WORD (word_ty_mach, Asm.IMM 0L) |]))\n@@ -5030,7 +5030,7 @@ let fixup_assigning_visitor\n     : Walk.visitor =\n \n   let path_name (_:unit) : string =\n-    Fmt.fmt_to_str Ast.fmt_name (Walk.path_to_name path)\n+    Fmt.fmt_to_str Ast.fmt_name (path_to_name path)\n   in\n \n   let enter_file_for id =\n@@ -5128,11 +5128,8 @@ let process_crate\n          (fixup_assigning_visitor cx path\n             Walk.empty_visitor));\n       (unreferenced_required_item_ignoring_visitor cx\n-         (Walk.mod_item_logging_visitor\n-            (log cx \"translation pass: %s\")\n-            path\n-            (trans_visitor cx path\n-               Walk.empty_visitor)))\n+         (trans_visitor cx path\n+            Walk.empty_visitor))\n     |];\n   in\n     log cx \"translating crate\";\n@@ -5141,7 +5138,8 @@ let process_crate\n           None -> ()\n         | Some m -> log cx \"with main fn %s\" m\n     end;\n-    run_passes cx \"trans\" path passes (log cx \"%s\") crate;\n+    run_passes cx \"trans\" path passes\n+      cx.ctxt_sess.Session.sess_log_trans log crate;\n ;;\n \n (*"}, {"sha": "9110743bf8b6c5e0f54d516c57c65d56b9fd228e", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -1408,7 +1408,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n     in\n \n     let path_name (_:unit) : string =\n-      string_of_name (Walk.path_to_name path)\n+      string_of_name (path_to_name path)\n     in\n \n     let visit_mod_item_post n p mod_item =\n@@ -1562,9 +1562,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         Hashtbl.iter init_mod_dict cx.ctxt_all_defns;\n         Walk.walk_crate\n           (Walk.path_managing_visitor path\n-             (Walk.mod_item_logging_visitor\n-                (log cx \"typechecking pass: %s\")\n-                path\n+             (mod_item_logging_visitor cx\n+                cx.ctxt_sess.Session.sess_log_type log 0 path\n                 (visitor cx Walk.empty_visitor)))\n           crate;\n "}, {"sha": "b935864f6f1894c50085ce9dbf780fdb851a9a49", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -1199,10 +1199,11 @@ let process_crate\n          Walk.empty_visitor)\n     |]\n   in\n-    run_passes cx \"typestate setup\" path setup_passes (log cx \"%s\") crate;\n+  let log_flag = cx.ctxt_sess.Session.sess_log_typestate in\n+    run_passes cx \"typestate setup\" path setup_passes log_flag log crate;\n     run_dataflow cx constr_id graph;\n-    run_passes cx \"typestate verify\" path verify_passes (log cx \"%s\") crate;\n-    run_passes cx \"typestate aux\" path aux_passes (log cx \"%s\") crate\n+    run_passes cx \"typestate verify\" path verify_passes log_flag log crate;\n+    run_passes cx \"typestate aux\" path aux_passes log_flag log crate\n ;;\n \n "}, {"sha": "bb774c018d8da711e23f313bd2c83f721e80cac3", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b0ee41064ce76126775077dc34c6b97122d98d50/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=b0ee41064ce76126775077dc34c6b97122d98d50", "patch": "@@ -123,69 +123,6 @@ let path_managing_visitor\n     }\n ;;\n \n-let rec name_of ncs =\n-  match ncs with\n-      [] -> bug () \"Walk.name_of_ncs: empty path\"\n-    | [(Ast.COMP_ident i)] -> Ast.NAME_base (Ast.BASE_ident i)\n-    | [(Ast.COMP_app x)] -> Ast.NAME_base (Ast.BASE_app x)\n-    | [(Ast.COMP_idx _)] ->\n-        bug () \"Walk.name_of_ncs: path-name contains COMP_idx\"\n-    | nc::ncs -> Ast.NAME_ext (name_of ncs, nc)\n-;;\n-\n-let path_to_name\n-    (path:Ast.name_component Stack.t)\n-    : Ast.name =\n-  name_of (stk_elts_from_top path)\n-;;\n-\n-\n-let mod_item_logging_visitor\n-    (logfn:string->unit)\n-    (path:Ast.name_component Stack.t)\n-    (inner:visitor)\n-    : visitor =\n-  let path_name _ = Fmt.fmt_to_str Ast.fmt_name (path_to_name path) in\n-  let visit_mod_item_pre name params item =\n-    logfn (Printf.sprintf \"entering %s\" (path_name()));\n-    inner.visit_mod_item_pre name params item;\n-    logfn (Printf.sprintf \"entered %s\" (path_name()));\n-  in\n-  let visit_mod_item_post name params item =\n-    logfn (Printf.sprintf \"leaving %s\" (path_name()));\n-    inner.visit_mod_item_post name params item;\n-    logfn (Printf.sprintf \"left %s\" (path_name()));\n-  in\n-  let visit_obj_fn_pre obj ident fn =\n-    logfn (Printf.sprintf \"entering %s\" (path_name()));\n-    inner.visit_obj_fn_pre obj ident fn;\n-    logfn (Printf.sprintf \"entered %s\" (path_name()));\n-  in\n-  let visit_obj_fn_post obj ident fn =\n-    logfn (Printf.sprintf \"leaving %s\" (path_name()));\n-    inner.visit_obj_fn_post obj ident fn;\n-    logfn (Printf.sprintf \"left %s\" (path_name()));\n-  in\n-  let visit_obj_drop_pre obj b =\n-    logfn (Printf.sprintf \"entering %s\" (path_name()));\n-    inner.visit_obj_drop_pre obj b;\n-    logfn (Printf.sprintf \"entered %s\" (path_name()));\n-  in\n-  let visit_obj_drop_post obj fn =\n-    logfn (Printf.sprintf \"leaving %s\" (path_name()));\n-    inner.visit_obj_drop_post obj fn;\n-    logfn (Printf.sprintf \"left %s\" (path_name()));\n-  in\n-    { inner with\n-        visit_mod_item_pre = visit_mod_item_pre;\n-        visit_mod_item_post = visit_mod_item_post;\n-        visit_obj_fn_pre = visit_obj_fn_pre;\n-        visit_obj_fn_post = visit_obj_fn_post;\n-        visit_obj_drop_pre = visit_obj_drop_pre;\n-        visit_obj_drop_post = visit_obj_drop_post;\n-    }\n-;;\n-\n \n let walk_bracketed\n     (pre:'a -> unit)"}]}