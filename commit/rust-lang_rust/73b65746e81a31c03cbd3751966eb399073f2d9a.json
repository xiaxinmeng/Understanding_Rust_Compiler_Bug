{"sha": "73b65746e81a31c03cbd3751966eb399073f2d9a", "node_id": "C_kwDOAAsO6NoAKDczYjY1NzQ2ZTgxYTMxYzAzY2JkMzc1MTk2NmViMzk5MDczZjJkOWE", "commit": {"author": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-04-20T07:58:14Z"}, "committer": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-04-27T08:58:18Z"}, "message": "Fix Unreadable non-UTF-8 output on localized MSVC\n\nFixes #35785 by converting non UTF-8 linker output to Unicode using the OEM code page.\n\nBefore:\n\n```text\n  = note: Non-UTF-8 output: LINK : fatal error LNK1181: cannot open input file \\'m\\x84rchenhaft.obj\\'\\r\\n\n```\n\nAfter:\n\n```text\n   = note: LINK : fatal error LNK1181: cannot open input file 'm\u00e4rchenhaft.obj'\n\n```\n\nThe difference is more dramatic if using a non-ascii language pack for Visual Studio.", "tree": {"sha": "1fcd1b5a9af1555174c30ed2a2bff3ffc3495bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fcd1b5a9af1555174c30ed2a2bff3ffc3495bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73b65746e81a31c03cbd3751966eb399073f2d9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmRKOSoACgkQcTRy8vRW\nJ97jnBAAmgn9L9viZk9w7Z1riL4GOlUO90goWGhqGMWYrc58d+VXzzv5OMCkXxfL\nJMXVcI5LbseLeEOzdD+jB4jnegxRxxJk4P2waezeNk9EOsnj/0Q7krLwqlnZh6GP\na2ZQn1Y+aBF2OodCSjsCLhvZCPGdY17WWZCHZJ9CqN2o7c0d2XggyLxfz6Y+iBXG\nRiiFUeutAuq2mRf8TPd6/kT8iR867bMU6Z8xkh9a8frCi9PBp12RBRTLZe/G+HAH\ntdH6r3Tbn9+JGy9qDdHeLwT40+8GT2mr+kvG409usxMsDsL5OpTf4tyZa5BfbGJI\n9yBd7OquhwXIGRHEbeM7j/kEgRSt43Gy25tHoDDI+LcZsDpF2ruif3i80i/Lhcw0\npfPg5dtqtzSgLU01vIjY3l7FBj0zWYIfJevUhBWMdyw9GStdpK6JFI/OoVt7/an1\naSBbGqJLVlIyf+YJcTBlamaHisiQxbsxcT3nWcJv+qk4pJbH7itnEPgyoRQlC07p\n1y1IT7bk18ewddeoztgHyhEg/3WsstKmEtzqwtwLIiV3hJCzKmRmWANUuRbzctwa\nh3ed5A45/ZPbEhDVBjVykBb9prp9JqtUdxjc9nLzlKmNqzW54Crytwkn4MmFBpDx\nBeO4Nur4VJkNDpTwdF0c2XP8X95HAgXaFBsDmAuajmCyoTEiNtw=\n=eA4W\n-----END PGP SIGNATURE-----", "payload": "tree 1fcd1b5a9af1555174c30ed2a2bff3ffc3495bbe\nparent 8b8110e1469d459a196f6feb60d82dec48c3cfc2\nauthor Chris Denton <chris@chrisdenton.dev> 1681977494 +0100\ncommitter Chris Denton <chris@chrisdenton.dev> 1682585898 +0100\n\nFix Unreadable non-UTF-8 output on localized MSVC\n\nFixes #35785 by converting non UTF-8 linker output to Unicode using the OEM code page.\n\nBefore:\n\n```text\n  = note: Non-UTF-8 output: LINK : fatal error LNK1181: cannot open input file \\'m\\x84rchenhaft.obj\\'\\r\\n\n```\n\nAfter:\n\n```text\n   = note: LINK : fatal error LNK1181: cannot open input file 'm\u00e4rchenhaft.obj'\n\n```\n\nThe difference is more dramatic if using a non-ascii language pack for Visual Studio.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73b65746e81a31c03cbd3751966eb399073f2d9a", "html_url": "https://github.com/rust-lang/rust/commit/73b65746e81a31c03cbd3751966eb399073f2d9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73b65746e81a31c03cbd3751966eb399073f2d9a/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8110e1469d459a196f6feb60d82dec48c3cfc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8110e1469d459a196f6feb60d82dec48c3cfc2", "html_url": "https://github.com/rust-lang/rust/commit/8b8110e1469d459a196f6feb60d82dec48c3cfc2"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "cd319574f79775d760aa98a36a8eb49574b388e5", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73b65746e81a31c03cbd3751966eb399073f2d9a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/73b65746e81a31c03cbd3751966eb399073f2d9a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=73b65746e81a31c03cbd3751966eb399073f2d9a", "patch": "@@ -3250,6 +3250,7 @@ dependencies = [\n  \"tempfile\",\n  \"thorin-dwp\",\n  \"tracing\",\n+ \"windows 0.46.0\",\n ]\n \n [[package]]"}, {"sha": "4f73b731f5a2a96d0248105ffeaafbfbd8c95021", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b65746e81a31c03cbd3751966eb399073f2d9a/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/73b65746e81a31c03cbd3751966eb399073f2d9a/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=73b65746e81a31c03cbd3751966eb399073f2d9a", "patch": "@@ -49,3 +49,7 @@ libc = \"0.2.50\"\n version = \"0.30.1\"\n default-features = false\n features = [\"read_core\", \"elf\", \"macho\", \"pe\", \"unaligned\", \"archive\", \"write\"]\n+\n+[target.'cfg(windows)'.dependencies.windows]\n+version = \"0.46.0\"\n+features = [\"Win32_Globalization\"]"}, {"sha": "feab57e98208fa38ffed3571a431a2696392423d", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/73b65746e81a31c03cbd3751966eb399073f2d9a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b65746e81a31c03cbd3751966eb399073f2d9a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=73b65746e81a31c03cbd3751966eb399073f2d9a", "patch": "@@ -857,7 +857,7 @@ fn link_natively<'a>(\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n-                let escaped_output = escape_string(&output);\n+                let escaped_output = escape_linker_output(&output, flavor);\n                 // FIXME: Add UI tests for this error.\n                 let err = errors::LinkingFailed {\n                     linker_path: &linker_path,\n@@ -1049,6 +1049,59 @@ fn escape_string(s: &[u8]) -> String {\n     }\n }\n \n+#[cfg(not(windows))]\n+fn escape_linker_output(s: &[u8], _flavour: LinkerFlavor) -> String {\n+    escape_string(s)\n+}\n+\n+/// If the output of the msvc linker is not UTF-8 and the host is Windows,\n+/// then try to convert the string from the OEM encoding.\n+#[cfg(windows)]\n+fn escape_linker_output(s: &[u8], flavour: LinkerFlavor) -> String {\n+    // This only applies to the actual MSVC linker.\n+    if flavour != LinkerFlavor::Msvc(Lld::No) {\n+        return escape_string(s);\n+    }\n+    match str::from_utf8(s) {\n+        Ok(s) => return s.to_owned(),\n+        Err(_) if s.len() <= i32::MAX as usize => {\n+            use windows::Win32::Globalization::{\n+                GetLocaleInfoEx, MultiByteToWideChar, CP_OEMCP, LOCALE_IUSEUTF8LEGACYOEMCP,\n+                LOCALE_NAME_SYSTEM_DEFAULT, LOCALE_RETURN_NUMBER, MB_ERR_INVALID_CHARS,\n+            };\n+            // Get the legacy system OEM code page.\n+            let code_page = unsafe {\n+                let mut cp: u32 = 0;\n+                // We're using the `LOCALE_RETURN_NUMBER` flag to return a u32.\n+                // But the API requires us to pass the data as though it's a [u16] string.\n+                let len = std::mem::size_of::<u32>() / std::mem::size_of::<u16>();\n+                let data = std::slice::from_raw_parts_mut(&mut cp as *mut u32 as *mut u16, len);\n+                let len_written = GetLocaleInfoEx(\n+                    LOCALE_NAME_SYSTEM_DEFAULT,\n+                    LOCALE_IUSEUTF8LEGACYOEMCP | LOCALE_RETURN_NUMBER,\n+                    Some(data),\n+                );\n+                if len_written as usize == len { cp } else { CP_OEMCP }\n+            };\n+            // Error if the string is not valid for the expected code page.\n+            let flags = MB_ERR_INVALID_CHARS;\n+            // Call MultiByteToWideChar twice.\n+            // First to calculate the length then to convert the string.\n+            let mut len = unsafe { MultiByteToWideChar(code_page, flags, s, None) };\n+            if len > 0 {\n+                let mut utf16 = vec![0; len as usize];\n+                len = unsafe { MultiByteToWideChar(code_page, flags, s, Some(&mut utf16)) };\n+                if len > 0 {\n+                    return String::from_utf16_lossy(&utf16[..len as usize]);\n+                }\n+            }\n+        }\n+        _ => {}\n+    };\n+    // The string is not UTF-8 and isn't valid for the OEM code page\n+    format!(\"Non-UTF-8 output: {}\", s.escape_ascii())\n+}\n+\n fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n     // On macOS the runtimes are distributed as dylibs which should be linked to\n     // both executables and dynamic shared objects. Everywhere else the runtimes"}, {"sha": "3fb2842d694cce774286c87070ce2fdf189be0d9", "filename": "tests/ui/native-library-link-flags/msvc-non-utf8-output.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73b65746e81a31c03cbd3751966eb399073f2d9a/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b65746e81a31c03cbd3751966eb399073f2d9a/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs?ref=73b65746e81a31c03cbd3751966eb399073f2d9a", "patch": "@@ -0,0 +1,6 @@\n+// build-fail\n+// compile-flags:-C link-arg=m\u00e4rchenhaft\n+// only-msvc\n+// error-pattern:= note: LINK : fatal error LNK1181:\n+// normalize-stderr-test \"(\\s*\\|\\n)\\s*= note: .*\\n\" -> \"$1\"\n+pub fn main() {}"}, {"sha": "f843aad782c30f3bf3c9c6ef26cf08ce8c31e7ed", "filename": "tests/ui/native-library-link-flags/msvc-non-utf8-output.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73b65746e81a31c03cbd3751966eb399073f2d9a/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73b65746e81a31c03cbd3751966eb399073f2d9a/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr?ref=73b65746e81a31c03cbd3751966eb399073f2d9a", "patch": "@@ -0,0 +1,7 @@\n+error: linking with `link.exe` failed: exit code: 1181\n+   |\n+   = note: LINK : fatal error LNK1181: cannot open input file 'm\u00e4rchenhaft.obj'\n+           \n+\n+error: aborting due to previous error\n+"}]}