{"sha": "9ab36037a45814b642d7e9641d2f95788ce37d6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjM2MDM3YTQ1ODE0YjY0MmQ3ZTk2NDFkMmY5NTc4OGNlMzdkNmI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-14T23:32:20Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T13:47:19Z"}, "message": "--bless bindings-after-at tests", "tree": {"sha": "ec8bb3a4ce6ffdb258bd86ba434e042667ef4ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec8bb3a4ce6ffdb258bd86ba434e042667ef4ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab36037a45814b642d7e9641d2f95788ce37d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab36037a45814b642d7e9641d2f95788ce37d6b", "html_url": "https://github.com/rust-lang/rust/commit/9ab36037a45814b642d7e9641d2f95788ce37d6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab36037a45814b642d7e9641d2f95788ce37d6b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ac7ea127bbef189f71befafbb7faf3489a9d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ac7ea127bbef189f71befafbb7faf3489a9d41", "html_url": "https://github.com/rust-lang/rust/commit/10ac7ea127bbef189f71befafbb7faf3489a9d41"}], "stats": {"total": 565, "additions": 498, "deletions": 67}, "files": [{"sha": "67c89c7293c43d1698ea9982a2a672476b0d9478", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=9ab36037a45814b642d7e9641d2f95788ce37d6b", "patch": "@@ -695,7 +695,7 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n             };\n             let msg = &format!(\n                 \"cannot borrow `{}` as {} because it is also borrowed as {}\",\n-                name, primary, also,\n+                name, also, primary,\n             );\n             let mut err = sess.struct_span_err(pat.span, msg);\n             err.span_label(binding_span, &format!(\"{} borrow occurs here\", primary));"}, {"sha": "7a4fe96b21330616ea1fea9dd768f619d4b9e337", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=9ab36037a45814b642d7e9641d2f95788ce37d6b", "patch": "@@ -29,16 +29,20 @@ fn main() {\n     drop(a);\n     drop(b);\n \n-    let ref a @ box ref mut b = Box::new(NC); // FIXME: This should not compile.\n-    let ref a @ box ref mut b = Box::new(NC); // FIXME: This should not compile.\n+    let ref a @ box ref mut b = Box::new(NC);\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    let ref a @ box ref mut b = Box::new(NC);\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n     *b = NC;\n     let ref a @ box ref mut b = Box::new(NC);\n-    //~^ ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     *b = NC;\n     drop(a);\n \n     let ref mut a @ box ref b = Box::new(NC);\n-    //~^ ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n     *a = Box::new(NC);\n     drop(b);\n }"}, {"sha": "7bb2379968e5d6f5a4dedf697866b96a8ebed9bb", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=9ab36037a45814b642d7e9641d2f95788ce37d6b", "patch": "@@ -27,6 +27,42 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         |           by-move pattern here\n    |         by-ref pattern here\n \n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:32:9\n+   |\n+LL |     let ref a @ box ref mut b = Box::new(NC);\n+   |         -----^^^^^^^---------\n+   |         |           |\n+   |         |           mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:34:9\n+   |\n+LL |     let ref a @ box ref mut b = Box::new(NC);\n+   |         -----^^^^^^^---------\n+   |         |           |\n+   |         |           mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:37:9\n+   |\n+LL |     let ref a @ box ref mut b = Box::new(NC);\n+   |         -----^^^^^^^---------\n+   |         |           |\n+   |         |           mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+   |\n+LL |     let ref mut a @ box ref b = Box::new(NC);\n+   |         ---------^^^^^^^-----\n+   |         |               |\n+   |         |               immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-at-and-box.rs:11:18\n    |\n@@ -46,7 +82,7 @@ LL |     let a @ box b = Box::new(C);\n    |         value moved here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:35:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:37:21\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ------------^^^^^^^^^\n@@ -58,18 +94,18 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:40:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:43:25\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ----------------^^^^^\n    |         |               |\n    |         |               immutable borrow occurs here\n    |         mutable borrow occurs here\n-LL |\n+...\n LL |     *a = Box::new(NC);\n    |     -- mutable borrow later used here\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0007, E0009, E0382, E0502.\n For more information about an error, try `rustc --explain E0007`."}, {"sha": "35dddfdbb1fbb22cc89419b2b6def23ff927bc01", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=9ab36037a45814b642d7e9641d2f95788ce37d6b", "patch": "@@ -9,7 +9,8 @@ enum Option<T> {\n fn main() {\n     match &mut Some(1) {\n         ref mut z @ &mut Some(ref a) => {\n-        //~^ ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n+        //~^ ERROR cannot borrow `z` as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n             **z = None;\n             println!(\"{}\", *a);\n         }\n@@ -18,30 +19,38 @@ fn main() {\n \n     struct U;\n \n-    let ref a @ ref mut b = U; // FIXME: This should not compile.\n-    let ref mut a @ ref b = U; // FIXME: This should not compile.\n-    let ref a @ (ref mut b, ref mut c) = (U, U); // FIXME: This should not compile.\n-    let ref mut a @ (ref b, ref c) = (U, U); // FIXME: This should not compile.\n+    let ref a @ ref mut b = U;\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    let ref mut a @ ref b = U;\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    let ref a @ (ref mut b, ref mut c) = (U, U);\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    let ref mut a @ (ref b, ref c) = (U, U);\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n \n-    // FIXME: Seems like we have a soundness hole here.\n     let ref mut a @ ref b = U;\n-    *a = U; // We are mutating...\n-    drop(b); // ..but at the same time we are holding a live shared borrow.\n-    // FIXME: Inverted; seems like the same issue exists here as well.\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    *a = U;\n+    drop(b);\n     let ref a @ ref mut b = U;\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n     *b = U;\n     drop(a);\n \n     match Ok(U) {\n         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n-            *a = Err(U); // FIXME: ^ should not compile.\n+            //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+            //~| ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+            *a = Err(U);\n             drop(b);\n         }\n     }\n \n     match Ok(U) {\n         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n-            //~^ ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+            //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+            //~| ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+            //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n             //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n             *b = U;\n             drop(a);\n@@ -50,38 +59,50 @@ fn main() {\n \n     match Ok(U) {\n         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n-        //~^ ERROR cannot assign to `*b`, as it is immutable for the pattern guard\n+        //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+        //~| ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+        //~| ERROR cannot assign to `*b`, as it is immutable for the pattern guard\n         _ => {}\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n-        //~^ ERROR cannot assign to `*a`, as it is immutable for the pattern guard\n+        //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot assign to `*a`, as it is immutable for the pattern guard\n         _ => {}\n     }\n     match Ok(U) {\n         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n-        //~^ ERROR cannot move out of `b` in pattern guard\n+        //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+        //~| ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+        //~| ERROR cannot move out of `b` in pattern guard\n         _ => {}\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n-        //~^ ERROR cannot move out of `a` in pattern guard\n+        //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+        //~| ERROR cannot move out of `a` in pattern guard\n         _ => {}\n     }\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n-    *b = U; // FIXME: ^ should not compile.\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    *b = U;\n     *c = U;\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n-    //~^ ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     *b = U;\n     drop(a);\n \n     let ref a @ (ref mut b, ref mut c) = (U, U);\n-    *b = U; //~^ ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    *b = U; //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     *c = U; //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n     drop(a);\n-    let ref mut a @ (ref b, ref c) = (U, U); // FIXME: This should not compile.\n+    let ref mut a @ (ref b, ref c) = (U, U);\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n }"}, {"sha": "7059f3c7caa8c627e82e42cd24055662703bb5da", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 225, "deletions": 12, "changes": 237, "blob_url": "https://github.com/rust-lang/rust/blob/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=9ab36037a45814b642d7e9641d2f95788ce37d6b", "patch": "@@ -6,6 +6,219 @@ LL | #![feature(bindings_after_at)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n+error: cannot borrow `z` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:9\n+   |\n+LL |         ref mut z @ &mut Some(ref a) => {\n+   |         ---------^^^^^^^^^^^^^-----^\n+   |         |                     |\n+   |         |                     immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:9\n+   |\n+LL |     let ref a @ ref mut b = U;\n+   |         -----^^^---------\n+   |         |       |\n+   |         |       mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:9\n+   |\n+LL |     let ref mut a @ ref b = U;\n+   |         ---------^^^-----\n+   |         |           |\n+   |         |           immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:9\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         -----^^^^---------^^---------^\n+   |         |        |          |\n+   |         |        |          mutable borrow occurs here\n+   |         |        mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:9\n+   |\n+LL |     let ref mut a @ (ref b, ref c) = (U, U);\n+   |         ---------^^^^-----^^-----^\n+   |         |            |      |\n+   |         |            |      immutable borrow occurs here\n+   |         |            immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:9\n+   |\n+LL |     let ref mut a @ ref b = U;\n+   |         ---------^^^-----\n+   |         |           |\n+   |         |           immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n+   |\n+LL |     let ref a @ ref mut b = U;\n+   |         -----^^^---------\n+   |         |       |\n+   |         |       mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n+   |         ---------^^^^^^-----^\n+   |         |              |\n+   |         |              immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:33\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n+   |                                 ---------^^^^^^^-----^\n+   |                                 |               |\n+   |                                 |               immutable borrow occurs here\n+   |                                 mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:9\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n+   |         -----^^^^^^---------^\n+   |         |          |\n+   |         |          mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:33\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n+   |                                 -----^^^^^^^---------^\n+   |                                 |           |\n+   |                                 |           mutable borrow occurs here\n+   |                                 immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:9\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n+   |         -----^^^^^^---------^\n+   |         |          |\n+   |         |          mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:33\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n+   |                                 -----^^^^^^^---------^\n+   |                                 |           |\n+   |                                 |           mutable borrow occurs here\n+   |                                 immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:9\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n+   |         ---------^^^^^^-----^\n+   |         |              |\n+   |         |              immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:33\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n+   |                                 ---------^^^^^^^-----^\n+   |                                 |               |\n+   |                                 |               immutable borrow occurs here\n+   |                                 mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:9\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n+   |         -----^^^^^^---------^\n+   |         |          |\n+   |         |          mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:33\n+   |\n+LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n+   |                                 -----^^^^^^^---------^\n+   |                                 |           |\n+   |                                 |           mutable borrow occurs here\n+   |                                 immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:9\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n+   |         ---------^^^^^^-----^\n+   |         |              |\n+   |         |              immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:33\n+   |\n+LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n+   |                                 ---------^^^^^^^-----^\n+   |                                 |               |\n+   |                                 |               immutable borrow occurs here\n+   |                                 mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         -----^^^^---------^^---------^\n+   |         |        |          |\n+   |         |        |          mutable borrow occurs here\n+   |         |        mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:9\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         -----^^^^---------^^---------^\n+   |         |        |          |\n+   |         |        |          mutable borrow occurs here\n+   |         |        mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:9\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         -----^^^^---------^^---------^\n+   |         |        |          |\n+   |         |        |          mutable borrow occurs here\n+   |         |        mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:106:9\n+   |\n+LL |     let ref mut a @ (ref b, ref c) = (U, U);\n+   |         ---------^^^^-----^^-----^\n+   |         |            |      |\n+   |         |            |      immutable borrow occurs here\n+   |         |            immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:11:31\n    |\n@@ -14,12 +227,12 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         |                     |\n    |         |                     immutable borrow occurs here\n    |         mutable borrow occurs here\n-LL |\n+...\n LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -31,7 +244,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -43,39 +256,39 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:52:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:57:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:62:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -87,7 +300,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -99,7 +312,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -111,7 +324,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -122,7 +335,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n LL |     drop(a);\n    |          - immutable borrow later used here\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 34 previous errors\n \n Some errors have detailed explanations: E0502, E0507, E0594.\n For more information about an error, try `rustc --explain E0502`."}, {"sha": "f76d9ce73cf258c4fc2935d0a68d2ad9da905634", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=9ab36037a45814b642d7e9641d2f95788ce37d6b", "patch": "@@ -7,20 +7,32 @@ fn main() {\n     struct U;\n \n     let ref mut a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `_` as mutable more than once at a time\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~| ERROR cannot borrow `_` as mutable more than once at a time\n     drop(a);\n-    let ref mut a @ ref mut b = U; // FIXME: This should not compile.\n+    let ref mut a @ ref mut b = U;\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n     drop(b);\n-    let ref mut a @ ref mut b = U; // FIXME: This should not compile.\n+    let ref mut a @ ref mut b = U;\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n \n     let ref mut a @ ref mut b = U;\n-    //~^ ERROR cannot borrow `_` as mutable more than once at a time\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+    //~| ERROR cannot borrow `_` as mutable more than once at a time\n     *a = U;\n-    let ref mut a @ ref mut b = U; // FIXME: This should not compile.\n+    let ref mut a @ ref mut b = U;\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n     *b = U;\n \n-    let ref mut a @ (ref mut b, [ref mut c, ref mut d]) = (U, [U, U]);\n-    // FIXME: This should not compile.\n+    let ref mut a @ (\n+    //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+        ref mut b,\n+        [\n+            ref mut c,\n+            ref mut d,\n+            ref e,\n+        ]\n+    ) = (U, [U, U, U]);\n \n     let a @ (ref mut b, ref mut c) = (U, U);\n     //~^ ERROR cannot bind by-move with sub-bindings\n@@ -39,18 +51,22 @@ fn main() {\n \n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-            // FIXME: This should not compile.\n+            //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+            //~| ERROR cannot borrow `a` as mutable more than once at a time\n         }\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+            //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+            //~| ERROR cannot borrow `a` as mutable more than once at a time\n             *b = U;\n-            // FIXME: This should not compile.\n         }\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-            //~^ ERROR cannot borrow `_` as mutable more than once at a time\n+            //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+            //~| ERROR cannot borrow `a` as mutable more than once at a time\n+            //~| ERROR cannot borrow `_` as mutable more than once at a time\n             //~| ERROR cannot borrow `_` as mutable more than once at a time\n             *a = Err(U);\n \n@@ -60,7 +76,9 @@ fn main() {\n     }\n     match Ok(U) {\n         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n-            //~^ ERROR cannot borrow `_` as mutable more than once at a time\n+            //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+            //~| ERROR cannot borrow `a` as mutable more than once at a time\n+            //~| ERROR cannot borrow `_` as mutable more than once at a time\n             //~| ERROR cannot borrow `_` as mutable more than once at a time\n             drop(a);\n         }"}, {"sha": "e8176342a0c458184a2170d16681cd269b226077", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 155, "deletions": 16, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ab36037a45814b642d7e9641d2f95788ce37d6b/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=9ab36037a45814b642d7e9641d2f95788ce37d6b", "patch": "@@ -6,30 +6,169 @@ LL | #![feature(bindings_after_at)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:9:9\n+   |\n+LL |     let ref mut a @ ref mut b = U;\n+   |         ---------^^^---------\n+   |         |           |\n+   |         |           another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n+   |\n+LL |     let ref mut a @ ref mut b = U;\n+   |         ---------^^^---------\n+   |         |           |\n+   |         |           another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:16:9\n+   |\n+LL |     let ref mut a @ ref mut b = U;\n+   |         ---------^^^---------\n+   |         |           |\n+   |         |           another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:19:9\n+   |\n+LL |     let ref mut a @ ref mut b = U;\n+   |         ---------^^^---------\n+   |         |           |\n+   |         |           another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:9\n+   |\n+LL |     let ref mut a @ ref mut b = U;\n+   |         ---------^^^---------\n+   |         |           |\n+   |         |           another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:27:9\n+   |\n+LL |       let ref mut a @ (\n+   |           ^--------\n+   |           |\n+   |  _________first mutable borrow occurs here\n+   | |\n+LL | |\n+LL | |         ref mut b,\n+   | |         --------- another mutable borrow occurs here\n+LL | |         [\n+LL | |             ref mut c,\n+   | |             --------- another mutable borrow occurs here\n+LL | |             ref mut d,\n+   | |             --------- another mutable borrow occurs here\n+LL | |             ref e,\n+   | |             ----- also borrowed as immutable here\n+LL | |         ]\n+LL | |     ) = (U, [U, U, U]);\n+   | |_____^\n+\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:37:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:33:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:45:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:48:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:9\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |         ---------^^^^^^---------^\n+   |         |              |\n+   |         |              another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:37\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |                                     ---------^^^^^^^---------^\n+   |                                     |               |\n+   |                                     |               another mutable borrow occurs here\n+   |                                     first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:59:9\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |         ---------^^^^^^---------^\n+   |         |              |\n+   |         |              another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:59:37\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |                                     ---------^^^^^^^---------^\n+   |                                     |               |\n+   |                                     |               another mutable borrow occurs here\n+   |                                     first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |         ---------^^^^^^---------^\n+   |         |              |\n+   |         |              another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:37\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |                                     ---------^^^^^^^---------^\n+   |                                     |               |\n+   |                                     |               another mutable borrow occurs here\n+   |                                     first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |         ---------^^^^^^---------^\n+   |         |              |\n+   |         |              another mutable borrow occurs here\n+   |         first mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n+   |\n+LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n+   |                                     ---------^^^^^^^---------^\n+   |                                     |               |\n+   |                                     |               another mutable borrow occurs here\n+   |                                     first mutable borrow occurs here\n+\n error[E0499]: cannot borrow `_` as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:9:21\n    |\n@@ -38,24 +177,24 @@ LL |     let ref mut a @ ref mut b = U;\n    |         |           |\n    |         |           second mutable borrow occurs here\n    |         first mutable borrow occurs here\n-LL |\n+...\n LL |     drop(a);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:16:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:19:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n    |         |           |\n    |         |           second mutable borrow occurs here\n    |         first mutable borrow occurs here\n-LL |\n+...\n LL |     *a = U;\n    |     ------ first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:25\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:37:25\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -64,7 +203,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:21\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ------------^--   -------- move occurs because value has type `&mut (main::U, [main::U; 2])`, which does not implement the `Copy` trait\n@@ -73,7 +212,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:33:18\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:45:18\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut main::U`, which does not implement the `Copy` trait\n@@ -82,7 +221,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:36:30\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:48:30\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (main::U, main::U)`, which does not implement the `Copy` trait\n@@ -91,7 +230,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         value moved here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:52:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -103,7 +242,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:52:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -115,7 +254,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:62:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -127,7 +266,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:62:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -138,7 +277,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n LL |             drop(a);\n    |                  - first borrow later used here\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 28 previous errors\n \n Some errors have detailed explanations: E0007, E0382, E0499.\n For more information about an error, try `rustc --explain E0007`."}]}