{"sha": "cd6459e7b389f1127200e83f99da45fc96b01589", "node_id": "C_kwDOAAsO6NoAKGNkNjQ1OWU3YjM4OWYxMTI3MjAwZTgzZjk5ZGE0NWZjOTZiMDE1ODk", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-17T16:39:31Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-17T16:39:31Z"}, "message": "Make \"Remove dbg!()\" assist work on selections", "tree": {"sha": "336b5e40dd7e6e4ce4b5ff8c10adcf066d5c3f3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336b5e40dd7e6e4ce4b5ff8c10adcf066d5c3f3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd6459e7b389f1127200e83f99da45fc96b01589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6459e7b389f1127200e83f99da45fc96b01589", "html_url": "https://github.com/rust-lang/rust/commit/cd6459e7b389f1127200e83f99da45fc96b01589", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd6459e7b389f1127200e83f99da45fc96b01589/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cf5c2230df89c8a35c92af6d34a90e6f15ef3fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf5c2230df89c8a35c92af6d34a90e6f15ef3fc", "html_url": "https://github.com/rust-lang/rust/commit/9cf5c2230df89c8a35c92af6d34a90e6f15ef3fc"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "99ae60e07bcfa7283e274fbdcd5d91743052c4c2", "filename": "crates/ide-assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/cd6459e7b389f1127200e83f99da45fc96b01589/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6459e7b389f1127200e83f99da45fc96b01589/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=cd6459e7b389f1127200e83f99da45fc96b01589", "patch": "@@ -1,7 +1,7 @@\n use itertools::Itertools;\n use syntax::{\n     ast::{self, AstNode, AstToken},\n-    match_ast, NodeOrToken, SyntaxElement, TextSize, T,\n+    match_ast, NodeOrToken, SyntaxElement, TextRange, TextSize, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -22,7 +22,36 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n-    let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n+    let macro_calls = if ctx.has_empty_selection() {\n+        vec![ctx.find_node_at_offset::<ast::MacroCall>()?]\n+    } else {\n+        ctx.covering_element()\n+            .as_node()?\n+            .descendants()\n+            .filter(|node| ctx.selection_trimmed().contains_range(node.text_range()))\n+            .filter_map(ast::MacroCall::cast)\n+            .collect()\n+    };\n+\n+    let replacements =\n+        macro_calls.into_iter().filter_map(compute_dbg_replacement).collect::<Vec<_>>();\n+    if replacements.is_empty() {\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"remove_dbg\", AssistKind::Refactor),\n+        \"Remove dbg!()\",\n+        ctx.selection_trimmed(),\n+        |builder| {\n+            for (range, text) in replacements {\n+                builder.replace(range, text);\n+            }\n+        },\n+    )\n+}\n+\n+fn compute_dbg_replacement(macro_call: ast::MacroCall) -> Option<(TextRange, String)> {\n     let tt = macro_call.token_tree()?;\n     let r_delim = NodeOrToken::Token(tt.right_delimiter_token()?);\n     if macro_call.path()?.segment()?.name_ref()?.text() != \"dbg\"\n@@ -41,7 +70,7 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n \n     let macro_expr = ast::MacroExpr::cast(macro_call.syntax().parent()?)?;\n     let parent = macro_expr.syntax().parent()?;\n-    let (range, text) = match &*input_expressions {\n+    Some(match &*input_expressions {\n         // dbg!()\n         [] => {\n             match_ast! {\n@@ -107,10 +136,6 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n         }\n         // dbg!(expr0, expr1, ...)\n         exprs => (macro_call.syntax().text_range(), format!(\"({})\", exprs.iter().format(\", \"))),\n-    };\n-\n-    acc.add(AssistId(\"remove_dbg\", AssistKind::Refactor), \"Remove dbg!()\", range, |builder| {\n-        builder.replace(range, text);\n     })\n }\n \n@@ -238,4 +263,28 @@ fn foo() {\n         check(r#\"$0dbg!(0, 1)\"#, r#\"(0, 1)\"#);\n         check(r#\"$0dbg!(0, (1, 2))\"#, r#\"(0, (1, 2))\"#);\n     }\n+\n+    #[test]\n+    fn test_range() {\n+        check(\n+            r#\"\n+fn f() {\n+    dbg!(0) + $0dbg!(1);\n+    dbg!(())$0\n+}\n+\"#,\n+            r#\"\n+fn f() {\n+    dbg!(0) + 1;\n+    ()\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_range_partial() {\n+        check_assist_not_applicable(remove_dbg, r#\"$0dbg$0!(0)\"#);\n+        check_assist_not_applicable(remove_dbg, r#\"$0dbg!(0$0)\"#);\n+    }\n }"}]}