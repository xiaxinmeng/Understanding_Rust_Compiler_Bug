{"sha": "7200da0217f99e929e58d0b40483097db37270ac", "node_id": "C_kwDOAAsO6NoAKDcyMDBkYTAyMTdmOTllOTI5ZTU4ZDBiNDA0ODMwOTdkYjM3MjcwYWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T00:59:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T00:59:08Z"}, "message": "Auto merge of #93873 - Stovent:big-ints, r=m-ou-se\n\nReimplement `carrying_add` and `borrowing_sub` for signed integers.\n\nAs per the discussion in #85532, this PR reimplements `carrying_add` and `borrowing_sub` for signed integers.\n\nIt also adds unit tests for both unsigned and signed integers, emphasing on the behaviours of the methods.", "tree": {"sha": "7de091d4c73a0768fa2080bfb6e2235ff66b2a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de091d4c73a0768fa2080bfb6e2235ff66b2a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7200da0217f99e929e58d0b40483097db37270ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7200da0217f99e929e58d0b40483097db37270ac", "html_url": "https://github.com/rust-lang/rust/commit/7200da0217f99e929e58d0b40483097db37270ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7200da0217f99e929e58d0b40483097db37270ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6861df8368a35ef3814e0c379754bb4c7013401", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6861df8368a35ef3814e0c379754bb4c7013401", "html_url": "https://github.com/rust-lang/rust/commit/c6861df8368a35ef3814e0c379754bb4c7013401"}, {"sha": "b998d82d8d098ee0e5127123543f5720965c6648", "url": "https://api.github.com/repos/rust-lang/rust/commits/b998d82d8d098ee0e5127123543f5720965c6648", "html_url": "https://github.com/rust-lang/rust/commit/b998d82d8d098ee0e5127123543f5720965c6648"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "e7deb728d15d893cce10a6a96909a258f11a0365", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7200da0217f99e929e58d0b40483097db37270ac/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200da0217f99e929e58d0b40483097db37270ac/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=7200da0217f99e929e58d0b40483097db37270ac", "patch": "@@ -1518,6 +1518,51 @@ macro_rules! int_impl {\n             (a as Self, b)\n         }\n \n+        /// Calculates `self + rhs + carry` without the ability to overflow.\n+        ///\n+        /// Performs \"signed ternary addition\" which takes in an extra bit to add, and may return an\n+        /// additional bit of overflow. This signed function is used only on the highest-ordered data,\n+        /// for which the signed overflow result indicates whether the big integer overflowed or not.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, false), (7, false));\")]\n+        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, true), (8, false));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), (\", stringify!($SelfT), \"::MIN, true));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(0, true), (\", stringify!($SelfT), \"::MIN, true));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, true), (\", stringify!($SelfT), \"::MIN + 1, true));\")]\n+        #[doc = concat!(\"assert_eq!(\",\n+            stringify!($SelfT), \"::MAX.carrying_add(\", stringify!($SelfT), \"::MAX, true), \",\n+            \"(-1, true));\"\n+        )]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.carrying_add(-1, true), (\", stringify!($SelfT), \"::MIN, false));\")]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".carrying_add(\", stringify!($SelfT), \"::MAX, true), (\", stringify!($SelfT), \"::MIN, true));\")]\n+        /// ```\n+        ///\n+        /// If `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        #[doc = concat!(\"assert_eq!(5_\", stringify!($SelfT), \".carrying_add(2, false), 5_\", stringify!($SelfT), \".overflowing_add(2));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), \", stringify!($SelfT), \"::MAX.overflowing_add(1));\")]\n+        /// ```\n+        #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n+        #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn carrying_add(self, rhs: Self, carry: bool) -> (Self, bool) {\n+            // note: longer-term this should be done via an intrinsic.\n+            // note: no intermediate overflow is required (https://github.com/rust-lang/rust/issues/85532#issuecomment-1032214946).\n+            let (a, b) = self.overflowing_add(rhs);\n+            let (c, d) = a.overflowing_add(carry as $SelfT);\n+            (c, b != d)\n+        }\n+\n         /// Calculates `self` + `rhs` with an unsigned `rhs`\n         ///\n         /// Returns a tuple of the addition along with a boolean indicating\n@@ -1569,6 +1614,39 @@ macro_rules! int_impl {\n             (a as Self, b)\n         }\n \n+        /// Calculates `self - rhs - borrow` without the ability to overflow.\n+        ///\n+        /// Performs \"signed ternary subtraction\" which takes in an extra bit to subtract, and may return an\n+        /// additional bit of overflow. This signed function is used only on the highest-ordered data,\n+        /// for which the signed overflow result indicates whether the big integer overflowed or not.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, false), (3, false));\")]\n+        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, true), (2, false));\")]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, false), (-1, false));\")]\n+        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, true), (-2, false));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.borrowing_sub(1, true), (\", stringify!($SelfT), \"::MAX - 1, true));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.borrowing_sub(-1, false), (\", stringify!($SelfT), \"::MIN, true));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.borrowing_sub(-1, true), (\", stringify!($SelfT), \"::MAX, false));\")]\n+        /// ```\n+        #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n+        #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn borrowing_sub(self, rhs: Self, borrow: bool) -> (Self, bool) {\n+            // note: longer-term this should be done via an intrinsic.\n+            // note: no intermediate overflow is required (https://github.com/rust-lang/rust/issues/85532#issuecomment-1032214946).\n+            let (a, b) = self.overflowing_sub(rhs);\n+            let (c, d) = a.overflowing_sub(borrow as $SelfT);\n+            (c, b != d)\n+        }\n+\n         /// Calculates `self` - `rhs` with an unsigned `rhs`\n         ///\n         /// Returns a tuple of the subtraction along with a boolean indicating"}, {"sha": "4a0e162bc4a50b7c2584cbba730c68297caa0483", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7200da0217f99e929e58d0b40483097db37270ac/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200da0217f99e929e58d0b40483097db37270ac/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=7200da0217f99e929e58d0b40483097db37270ac", "patch": "@@ -3,6 +3,7 @@\n #![feature(array_methods)]\n #![feature(array_windows)]\n #![feature(bench_black_box)]\n+#![feature(bigint_helper_methods)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n #![feature(const_black_box)]"}, {"sha": "18c55e43aac81958d897a9e85141f7483eb24387", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7200da0217f99e929e58d0b40483097db37270ac/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200da0217f99e929e58d0b40483097db37270ac/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=7200da0217f99e929e58d0b40483097db37270ac", "patch": "@@ -338,6 +338,32 @@ macro_rules! int_module {\n                 assert_eq!(MIN.checked_next_multiple_of(-3), None);\n                 assert_eq!(MIN.checked_next_multiple_of(-1), Some(MIN));\n             }\n+\n+            #[test]\n+            fn test_carrying_add() {\n+                assert_eq!($T::MAX.carrying_add(1, false), ($T::MIN, true));\n+                assert_eq!($T::MAX.carrying_add(0, true), ($T::MIN, true));\n+                assert_eq!($T::MAX.carrying_add(1, true), ($T::MIN + 1, true));\n+                assert_eq!($T::MAX.carrying_add(-1, false), ($T::MAX - 1, false));\n+                assert_eq!($T::MAX.carrying_add(-1, true), ($T::MAX, false)); // no intermediate overflow\n+                assert_eq!($T::MIN.carrying_add(-1, false), ($T::MAX, true));\n+                assert_eq!($T::MIN.carrying_add(-1, true), ($T::MIN, false)); // no intermediate overflow\n+                assert_eq!((0 as $T).carrying_add($T::MAX, true), ($T::MIN, true));\n+                assert_eq!((0 as $T).carrying_add($T::MIN, true), ($T::MIN + 1, false));\n+            }\n+\n+            #[test]\n+            fn test_borrowing_sub() {\n+                assert_eq!($T::MIN.borrowing_sub(1, false), ($T::MAX, true));\n+                assert_eq!($T::MIN.borrowing_sub(0, true), ($T::MAX, true));\n+                assert_eq!($T::MIN.borrowing_sub(1, true), ($T::MAX - 1, true));\n+                assert_eq!($T::MIN.borrowing_sub(-1, false), ($T::MIN + 1, false));\n+                assert_eq!($T::MIN.borrowing_sub(-1, true), ($T::MIN, false)); // no intermediate overflow\n+                assert_eq!($T::MAX.borrowing_sub(-1, false), ($T::MIN, true));\n+                assert_eq!($T::MAX.borrowing_sub(-1, true), ($T::MAX, false)); // no intermediate overflow\n+                assert_eq!((0 as $T).borrowing_sub($T::MIN, false), ($T::MIN, true));\n+                assert_eq!((0 as $T).borrowing_sub($T::MIN, true), ($T::MAX, false));\n+            }\n         }\n     };\n }"}, {"sha": "15ae9f2324f6c8a29605576e793f9609571f42ab", "filename": "library/core/tests/num/uint_macros.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7200da0217f99e929e58d0b40483097db37270ac/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7200da0217f99e929e58d0b40483097db37270ac/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=7200da0217f99e929e58d0b40483097db37270ac", "patch": "@@ -230,6 +230,28 @@ macro_rules! uint_module {\n                 assert_eq!((1 as $T).checked_next_multiple_of(0), None);\n                 assert_eq!(MAX.checked_next_multiple_of(2), None);\n             }\n+\n+            #[test]\n+            fn test_carrying_add() {\n+                assert_eq!($T::MAX.carrying_add(1, false), (0, true));\n+                assert_eq!($T::MAX.carrying_add(0, true), (0, true));\n+                assert_eq!($T::MAX.carrying_add(1, true), (1, true));\n+\n+                assert_eq!($T::MIN.carrying_add($T::MAX, false), ($T::MAX, false));\n+                assert_eq!($T::MIN.carrying_add(0, true), (1, false));\n+                assert_eq!($T::MIN.carrying_add($T::MAX, true), (0, true));\n+            }\n+\n+            #[test]\n+            fn test_borrowing_sub() {\n+                assert_eq!($T::MIN.borrowing_sub(1, false), ($T::MAX, true));\n+                assert_eq!($T::MIN.borrowing_sub(0, true), ($T::MAX, true));\n+                assert_eq!($T::MIN.borrowing_sub(1, true), ($T::MAX - 1, true));\n+\n+                assert_eq!($T::MAX.borrowing_sub($T::MAX, false), (0, false));\n+                assert_eq!($T::MAX.borrowing_sub(0, true), ($T::MAX - 1, false));\n+                assert_eq!($T::MAX.borrowing_sub($T::MAX, true), ($T::MAX, true));\n+            }\n         }\n     };\n }"}]}