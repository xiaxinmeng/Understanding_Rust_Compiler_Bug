{"sha": "5892b40859b65dd520ae92f7570069adaf313a8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTJiNDA4NTliNjVkZDUyMGFlOTJmNzU3MDA2OWFkYWYzMTNhOGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-01T10:22:38Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-02T08:27:58Z"}, "message": "Rename AstBuilder::expr_int -> AstBuilder::expr_isize", "tree": {"sha": "50151f9db04bb346da56122db92c4ff1c93adb92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50151f9db04bb346da56122db92c4ff1c93adb92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5892b40859b65dd520ae92f7570069adaf313a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5892b40859b65dd520ae92f7570069adaf313a8f", "html_url": "https://github.com/rust-lang/rust/commit/5892b40859b65dd520ae92f7570069adaf313a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5892b40859b65dd520ae92f7570069adaf313a8f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4957ecce3ede95c4415dbcc7a136f9d4ebd5cb4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4957ecce3ede95c4415dbcc7a136f9d4ebd5cb4e", "html_url": "https://github.com/rust-lang/rust/commit/4957ecce3ede95c4415dbcc7a136f9d4ebd5cb4e"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "354a0bff74998bbcc3c21d93f7d379d0db0f41d3", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5892b40859b65dd520ae92f7570069adaf313a8f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892b40859b65dd520ae92f7570069adaf313a8f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=5892b40859b65dd520ae92f7570069adaf313a8f", "patch": "@@ -146,7 +146,7 @@ pub trait AstBuilder {\n     fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr>;\n \n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr>;\n-    fn expr_int(&self, sp: Span, i: isize) -> P<ast::Expr>;\n+    fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr>;\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr>;\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr>;\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr>;\n@@ -698,7 +698,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs)))\n     }\n-    fn expr_int(&self, sp: Span, i: isize) -> P<ast::Expr> {\n+    fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs,\n                                                                   ast::Sign::new(i))))\n     }"}, {"sha": "339e535cdcd9f9de9b41b0aa25a29b31c591db48", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5892b40859b65dd520ae92f7570069adaf313a8f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892b40859b65dd520ae92f7570069adaf313a8f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=5892b40859b65dd520ae92f7570069adaf313a8f", "patch": "@@ -380,7 +380,7 @@ impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n                   mitem: &ast::MetaItem,\n-                  item: &'a     ast::Item,\n+                  item: &'a ast::Item,\n                   push: &mut FnMut(P<ast::Item>))\n     {\n         let newitem = match item.node {\n@@ -1407,7 +1407,9 @@ impl<'a> TraitDef<'a> {\n                              struct_def: &'a StructDef,\n                              prefix: &str,\n                              mutbl: ast::Mutability)\n-                             -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n+                             -> (P<ast::Pat>, Vec<(Span, Option<Ident>,\n+                                                   P<Expr>,\n+                                                   &'a [ast::Attribute])>) {\n         if struct_def.fields.is_empty() {\n             return (cx.pat_enum(self.span, struct_path, vec![]), vec![]);\n         }\n@@ -1445,7 +1447,8 @@ impl<'a> TraitDef<'a> {\n         // struct_type is definitely not Unknown, since struct_def.fields\n         // must be nonempty to reach here\n         let pattern = if struct_type == Record {\n-            let field_pats = subpats.into_iter().zip(ident_expr.iter()).map(|(pat, &(_, id, _, _))| {\n+            let field_pats = subpats.into_iter().zip(ident_expr.iter())\n+                                    .map(|(pat, &(_, id, _, _))| {\n                 // id is guaranteed to be Some\n                 codemap::Spanned {\n                     span: pat.span,"}, {"sha": "78381395dc92c0963e3782082a24fc47469ecaab", "filename": "src/test/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5892b40859b65dd520ae92f7570069adaf313a8f/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892b40859b65dd520ae92f7570069adaf313a8f/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=5892b40859b65dd520ae92f7570069adaf313a8f", "patch": "@@ -55,7 +55,7 @@ fn expand(cx: &mut ExtCtxt,\n                 ret_ty: Literal(Path::new_local(\"isize\")),\n                 attributes: vec![],\n                 combine_substructure: combine_substructure(box |cx, span, substr| {\n-                    let zero = cx.expr_int(span, 0);\n+                    let zero = cx.expr_isize(span, 0);\n                     cs_fold(false,\n                             |cx, span, subexpr, field, _| {\n                                 cx.expr_binary(span, ast::BiAdd, subexpr,"}, {"sha": "445aa743a77feb7f3f40fa5850ef42846feec4ad", "filename": "src/test/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5892b40859b65dd520ae92f7570069adaf313a8f/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5892b40859b65dd520ae92f7570069adaf313a8f/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=5892b40859b65dd520ae92f7570069adaf313a8f", "patch": "@@ -66,13 +66,14 @@ fn expand(cx: &mut ExtCtxt,\n \n // Mostly copied from syntax::ext::deriving::hash\n /// Defines how the implementation for `trace()` is to be generated\n-fn totalsum_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<ast::Expr> {\n+fn totalsum_substructure(cx: &mut ExtCtxt, trait_span: Span,\n+                         substr: &Substructure) -> P<ast::Expr> {\n     let fields = match *substr.fields {\n         Struct(ref fs) | EnumMatching(_, _, ref fs) => fs,\n         _ => cx.span_bug(trait_span, \"impossible substructure\")\n     };\n \n-    fields.iter().fold(cx.expr_int(trait_span, 0), |acc, ref item| {\n+    fields.iter().fold(cx.expr_isize(trait_span, 0), |acc, ref item| {\n         if item.attrs.iter().find(|a| a.check_name(\"ignore\")).is_some() {\n             acc\n         } else {"}]}