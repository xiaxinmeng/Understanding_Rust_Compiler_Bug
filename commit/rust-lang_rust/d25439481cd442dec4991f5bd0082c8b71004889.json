{"sha": "d25439481cd442dec4991f5bd0082c8b71004889", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNTQzOTQ4MWNkNDQyZGVjNDk5MWY1YmQwMDgyYzhiNzEwMDQ4ODk=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-27T10:52:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-27T10:52:46Z"}, "message": "Rollup merge of #87427 - RalfJung:no-mir-for, r=oli-obk\n\nget rid of NoMirFor error variant\n\nThe only place where we throw that error, it is very quickly caught again and turned into a different error. So raise that other error immediately.", "tree": {"sha": "27e2c876cc7fd6f612143e693e5cef0afdcc5fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e2c876cc7fd6f612143e693e5cef0afdcc5fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d25439481cd442dec4991f5bd0082c8b71004889", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg/+V+CRBK7hj4Ov3rIwAAxcUIAK8Os7zKMFYp+0FGvF/bAYSn\nqSieQy4jLsciffH0ion+weKSNAGBmnVnmX/4HxD/+lvDBoDFbsJ/UtUKhOSfsNsa\n4VtoO8umyFgL280oqwH1WeiIGrh76+CLZ5eNILUzq3Vfz9tT9FSRP2kbTaIbMlbm\nW2WrfKrl3PPOKxWdXsFPTCJRGyuvfUbP8CP4j1fjcDiyj4AmIszOX0jL5zPCgvCN\n+pFKSXnqXmLwBODko1JSMeDh2xH3D6CVxCHlobMVMDOrffihVWz0dmjrzFRxpimQ\nIpaPKO6Z2KihbwADe3kzGEH2/y7TjlloYybEly8U0rm52TwkJBc1Gs6dHb2Okgk=\n=B61D\n-----END PGP SIGNATURE-----\n", "payload": "tree 27e2c876cc7fd6f612143e693e5cef0afdcc5fbf\nparent 90f6d7becb6bce73b8a8a709c76c23554f859770\nparent 3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e\nauthor Yuki Okushi <jtitor@2k36.org> 1627383166 +0900\ncommitter GitHub <noreply@github.com> 1627383166 +0900\n\nRollup merge of #87427 - RalfJung:no-mir-for, r=oli-obk\n\nget rid of NoMirFor error variant\n\nThe only place where we throw that error, it is very quickly caught again and turned into a different error. So raise that other error immediately.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d25439481cd442dec4991f5bd0082c8b71004889", "html_url": "https://github.com/rust-lang/rust/commit/d25439481cd442dec4991f5bd0082c8b71004889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d25439481cd442dec4991f5bd0082c8b71004889/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f6d7becb6bce73b8a8a709c76c23554f859770", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f6d7becb6bce73b8a8a709c76c23554f859770", "html_url": "https://github.com/rust-lang/rust/commit/90f6d7becb6bce73b8a8a709c76c23554f859770"}, {"sha": "3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e", "html_url": "https://github.com/rust-lang/rust/commit/3b9f8116a2d82ad2a0c10f5cc7d45fb344d77f0e"}], "stats": {"total": 22, "additions": 4, "deletions": 18}, "files": [{"sha": "dad23d6255afb02bea6df68af3f8362837924634", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d25439481cd442dec4991f5bd0082c8b71004889/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25439481cd442dec4991f5bd0082c8b71004889/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=d25439481cd442dec4991f5bd0082c8b71004889", "patch": "@@ -402,8 +402,6 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n pub enum UnsupportedOpInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n-    /// Could not find MIR for a function.\n-    NoMirFor(DefId),\n     /// Encountered a pointer where we needed raw bytes.\n     ReadPointerAsBytes,\n     //\n@@ -421,7 +419,6 @@ impl fmt::Display for UnsupportedOpInfo {\n         match self {\n             Unsupported(ref msg) => write!(f, \"{}\", msg),\n             ReadExternStatic(did) => write!(f, \"cannot read from extern static ({:?})\", did),\n-            NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n             ThreadLocalStatic(did) => write!(f, \"cannot access thread local static ({:?})\", did),\n         }"}, {"sha": "daaf68c1d2bd5bb4c11d1d556e5bfb70be370e75", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d25439481cd442dec4991f5bd0082c8b71004889/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25439481cd442dec4991f5bd0082c8b71004889/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=d25439481cd442dec4991f5bd0082c8b71004889", "patch": "@@ -212,7 +212,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 if ecx.tcx.is_ctfe_mir_available(def.did) {\n                     Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n                 } else {\n-                    throw_unsup!(NoMirFor(def.did))\n+                    let path = ecx.tcx.def_path_str(def.did);\n+                    Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))\n+                        .into())\n                 }\n             }\n             _ => Ok(ecx.tcx.instance_mir(instance)),\n@@ -247,20 +249,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             }\n         }\n         // This is a const fn. Call it.\n-        Ok(Some(match ecx.load_mir(instance.def, None) {\n-            Ok(body) => body,\n-            Err(err) => {\n-                if let err_unsup!(NoMirFor(did)) = err.kind() {\n-                    let path = ecx.tcx.def_path_str(*did);\n-                    return Err(ConstEvalErrKind::NeedsRfc(format!(\n-                        \"calling extern function `{}`\",\n-                        path\n-                    ))\n-                    .into());\n-                }\n-                return Err(err);\n-            }\n-        }))\n+        Ok(Some(ecx.load_mir(instance.def, None)?))\n     }\n \n     fn call_intrinsic("}]}