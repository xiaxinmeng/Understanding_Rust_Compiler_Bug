{"sha": "4a13bcb4fbd2a305ebc6906960a00f72342295a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMTNiY2I0ZmJkMmEzMDVlYmM2OTA2OTYwYTAwZjcyMzQyMjk1YTk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-19T22:32:51Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-28T05:28:23Z"}, "message": "groundwork: use `resolve_identifier` instead of `resolve_path` to classify ident patterns", "tree": {"sha": "1aed7e97049c79046a993b18e11af51725003e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aed7e97049c79046a993b18e11af51725003e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a13bcb4fbd2a305ebc6906960a00f72342295a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a13bcb4fbd2a305ebc6906960a00f72342295a9", "html_url": "https://github.com/rust-lang/rust/commit/4a13bcb4fbd2a305ebc6906960a00f72342295a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a13bcb4fbd2a305ebc6906960a00f72342295a9/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc15f2b96bad1c03fde93640b2d092600b0bf0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc15f2b96bad1c03fde93640b2d092600b0bf0c", "html_url": "https://github.com/rust-lang/rust/commit/2dc15f2b96bad1c03fde93640b2d092600b0bf0c"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "00d6bc69bdf513f65f9ef5410f7cc3a0597ac951", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a13bcb4fbd2a305ebc6906960a00f72342295a9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a13bcb4fbd2a305ebc6906960a00f72342295a9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4a13bcb4fbd2a305ebc6906960a00f72342295a9", "patch": "@@ -2287,24 +2287,25 @@ impl<'a> Resolver<'a> {\n                 PatKind::Ident(bmode, ref ident, ref opt_pat) => {\n                     // First try to resolve the identifier as some existing\n                     // entity, then fall back to a fresh binding.\n-                    let resolution = if let Ok(resolution) = self.resolve_path(pat.id,\n-                                &Path::from_ident(ident.span, ident.node), 0, ValueNS) {\n+                    let local_def = self.resolve_identifier(ident.node, ValueNS, true);\n+                    let resolution = if let Some(LocalDef { def, .. }) = local_def {\n                         let always_binding = !pat_src.is_refutable() || opt_pat.is_some() ||\n                                              bmode != BindingMode::ByValue(Mutability::Immutable);\n-                        match resolution.base_def {\n+                        match def {\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) if !always_binding => {\n                                 // A constant, unit variant, etc pattern.\n-                                resolution\n+                                PathResolution::new(def)\n                             }\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) | Def::Static(..) => {\n                                 // A fresh binding that shadows something unacceptable.\n+                                let kind_name = PathResolution::new(def).kind_name();\n                                 resolve_error(\n                                     self,\n                                     ident.span,\n                                     ResolutionError::BindingShadowsSomethingUnacceptable(\n-                                        pat_src.descr(), resolution.kind_name(), ident.node.name)\n+                                        pat_src.descr(), kind_name, ident.node.name)\n                                 );\n                                 err_path_resolution()\n                             }"}]}