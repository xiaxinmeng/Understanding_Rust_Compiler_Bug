{"sha": "b3f308bec555ba08a002e31d833913946700734c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjMwOGJlYzU1NWJhMDhhMDAyZTMxZDgzMzkxMzk0NjcwMDczNGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-13T20:35:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-04-14T04:06:56Z"}, "message": "add initial code re: slices to borrowing, improve ty_to_str", "tree": {"sha": "fb5cbabc59652567ef4268d06a1600257d9f32f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb5cbabc59652567ef4268d06a1600257d9f32f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f308bec555ba08a002e31d833913946700734c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f308bec555ba08a002e31d833913946700734c", "html_url": "https://github.com/rust-lang/rust/commit/b3f308bec555ba08a002e31d833913946700734c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f308bec555ba08a002e31d833913946700734c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85e48840d5a0a49ae3e6c87e69105443f20a7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85e48840d5a0a49ae3e6c87e69105443f20a7a7", "html_url": "https://github.com/rust-lang/rust/commit/d85e48840d5a0a49ae3e6c87e69105443f20a7a7"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "ec8f7e17e354185cf0c3be28fefcd869c180fac1", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3f308bec555ba08a002e31d833913946700734c/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f308bec555ba08a002e31d833913946700734c/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=b3f308bec555ba08a002e31d833913946700734c", "patch": "@@ -790,6 +790,13 @@ impl assignment for infer_ctxt {\n                a_bnd.to_str(self), b_bnd.to_str(self)];\n         let _r = indenter();\n \n+        fn is_borrowable(v: ty::vstore) -> bool {\n+            alt v {\n+              ty::vstore_fixed(_) | ty::vstore_uniq | ty::vstore_box { true }\n+              ty::vstore_slice(_) { false }\n+            }\n+        }\n+\n         alt (a_bnd, b_bnd) {\n           (some(a_bnd), some(b_bnd)) {\n             alt (ty::get(a_bnd).struct, ty::get(b_bnd).struct) {\n@@ -801,6 +808,12 @@ impl assignment for infer_ctxt {\n                 let nr_b = ty::mk_uniq(self.tcx, mt_b);\n                 self.crosspolinate(encl_node_id, a, nr_b, r_b)\n               }\n+              (ty::ty_evec(mt_a, vs_a),\n+               ty::ty_evec(mt_b, ty::vstore_slice(r_b)))\n+              if is_borrowable(vs_a) {\n+                let nr_b = ty::mk_evec(self.tcx, mt_b, vs_a);\n+                self.crosspolinate(encl_node_id, a, nr_b, r_b)\n+              }\n               _ {\n                 self.sub_tys(a, b)\n               }"}, {"sha": "6bc79f48d1c5379d6f60cad4f9030a796ee7d945", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b3f308bec555ba08a002e31d833913946700734c/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f308bec555ba08a002e31d833913946700734c/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=b3f308bec555ba08a002e31d833913946700734c", "patch": "@@ -13,8 +13,8 @@ import driver::session::session;\n fn bound_region_to_str(_cx: ctxt, br: bound_region) -> str {\n     alt br {\n       br_anon          { \"&\" }\n-      br_param(_, str) { #fmt[\"&%s.\", str] }\n-      br_self          { \"&self.\" }\n+      br_param(_, str) { #fmt[\"&%s\", str] }\n+      br_self          { \"&self\" }\n     }\n }\n \n@@ -47,14 +47,14 @@ fn re_scope_id_to_str(cx: ctxt, node_id: ast::node_id) -> str {\n \n fn region_to_str(cx: ctxt, region: region) -> str {\n     alt region {\n-      re_scope(node_id) { #fmt[\"&%s.\", re_scope_id_to_str(cx, node_id)] }\n+      re_scope(node_id) { #fmt[\"&%s\", re_scope_id_to_str(cx, node_id)] }\n       re_bound(br) { bound_region_to_str(cx, br) }\n       re_free(id, br) { #fmt[\"{%d} %s\", id, bound_region_to_str(cx, br)] }\n \n       // These two should not be seen by end-users (very often, anyhow):\n-      re_var(id)    { #fmt(\"&%s.\", id.to_str()) }\n-      re_default    { \"&(default).\" }\n-      re_static     { \"&static.\" }\n+      re_var(id)    { #fmt(\"&%s\", id.to_str()) }\n+      re_default    { \"&(default)\" }\n+      re_static     { \"&static\" }\n     }\n }\n \n@@ -67,6 +67,15 @@ fn mt_to_str(cx: ctxt, m: mt) -> str {\n     ret mstr + ty_to_str(cx, m.ty);\n }\n \n+fn vstore_to_str(cx: ctxt, vs: ty::vstore) -> str {\n+    alt vs {\n+      ty::vstore_fixed(n) { #fmt[\"%u\", n] }\n+      ty::vstore_uniq { \"~\" }\n+      ty::vstore_box { \"@\" }\n+      ty::vstore_slice(r) { region_to_str(cx, r) }\n+    }\n+}\n+\n fn ty_to_str(cx: ctxt, typ: t) -> str {\n     fn fn_input_to_str(cx: ctxt, input: {mode: ast::mode, ty: t}) ->\n        str {\n@@ -152,7 +161,14 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       ty_box(tm) { \"@\" + mt_to_str(cx, tm) }\n       ty_uniq(tm) { \"~\" + mt_to_str(cx, tm) }\n       ty_ptr(tm) { \"*\" + mt_to_str(cx, tm) }\n-      ty_rptr(r, tm) { region_to_str(cx, r) + mt_to_str(cx, tm) }\n+      ty_rptr(r, tm) {\n+        let rs = region_to_str(cx, r);\n+        if str::len(rs) == 1u {\n+            rs + mt_to_str(cx, tm)\n+        } else {\n+            rs + \".\" + mt_to_str(cx, tm)\n+        }\n+      }\n       ty_vec(tm) { \"[\" + mt_to_str(cx, tm) + \"]\" }\n       ty_type { \"type\" }\n       ty_rec(elems) {\n@@ -179,7 +195,16 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         let base = ast_map::path_to_str(path);\n         parameterized(cx, base, tps)\n       }\n-      _ { ty_to_short_str(cx, typ) }\n+      ty_evec(mt, vs) {\n+        #fmt[\"[%s]/%s\", mt_to_str(cx, mt),\n+             vstore_to_str(cx, vs)]\n+      }\n+      ty_estr(vs) { #fmt[\"str/%s\", vstore_to_str(cx, vs)] }\n+      ty_opaque_box { \"@?\" }\n+      ty_constr(t, _) { \"@?\" }\n+      ty_opaque_closure_ptr(ck_block) { \"closure&\" }\n+      ty_opaque_closure_ptr(ck_box) { \"closure@\" }\n+      ty_opaque_closure_ptr(ck_uniq) { \"closure~\" }\n     }\n }\n "}]}