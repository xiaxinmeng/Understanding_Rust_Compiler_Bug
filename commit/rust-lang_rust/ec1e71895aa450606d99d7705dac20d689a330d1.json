{"sha": "ec1e71895aa450606d99d7705dac20d689a330d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMWU3MTg5NWFhNDUwNjA2ZDk5ZDc3MDVkYWMyMGQ2ODlhMzMwZDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T17:01:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T20:33:36Z"}, "message": "turn cast_immediate into its own function", "tree": {"sha": "6b897f1f6f92ddae1d40e28892629764ce3aa4a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b897f1f6f92ddae1d40e28892629764ce3aa4a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec1e71895aa450606d99d7705dac20d689a330d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1e71895aa450606d99d7705dac20d689a330d1", "html_url": "https://github.com/rust-lang/rust/commit/ec1e71895aa450606d99d7705dac20d689a330d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec1e71895aa450606d99d7705dac20d689a330d1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48b87c6f275069e5c885b54e3d968056a5563db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/48b87c6f275069e5c885b54e3d968056a5563db9", "html_url": "https://github.com/rust-lang/rust/commit/48b87c6f275069e5c885b54e3d968056a5563db9"}], "stats": {"total": 89, "additions": 54, "deletions": 35}, "files": [{"sha": "7e752e2edc4a438c1f9c59213021fca9f49b0fa5", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e71895aa450606d99d7705dac20d689a330d1/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e71895aa450606d99d7705dac20d689a330d1/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=ec1e71895aa450606d99d7705dac20d689a330d1", "patch": "@@ -11,7 +11,7 @@ use rustc::mir::interpret::{\n };\n use rustc::mir::CastKind;\n \n-use super::{InterpCx, Machine, PlaceTy, OpTy, Immediate, FnVal};\n+use super::{InterpCx, Machine, PlaceTy, OpTy, ImmTy, Immediate, FnVal};\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     fn type_is_fat_ptr(&self, ty: Ty<'tcx>) -> bool {\n@@ -37,40 +37,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Misc | Pointer(PointerCast::MutToConstPointer) => {\n                 let src = self.read_immediate(src)?;\n-\n-                if self.type_is_fat_ptr(src.layout.ty) {\n-                    match (*src, self.type_is_fat_ptr(dest.layout.ty)) {\n-                        // pointers to extern types\n-                        (Immediate::Scalar(_),_) |\n-                        // slices and trait objects to other slices/trait objects\n-                        (Immediate::ScalarPair(..), true) => {\n-                            // No change to immediate\n-                            self.write_immediate(*src, dest)?;\n-                        }\n-                        // slices and trait objects to thin pointers (dropping the metadata)\n-                        (Immediate::ScalarPair(data, _), false) => {\n-                            self.write_scalar(data, dest)?;\n-                        }\n-                    }\n-                } else {\n-                    match src.layout.variants {\n-                        layout::Variants::Single { index } => {\n-                            if let Some(discr) =\n-                                src.layout.ty.discriminant_for_variant(*self.tcx, index)\n-                            {\n-                                // Cast from a univariant enum\n-                                assert!(src.layout.is_zst());\n-                                return self.write_scalar(\n-                                    Scalar::from_uint(discr.val, dest.layout.size),\n-                                    dest);\n-                            }\n-                        }\n-                        layout::Variants::Multiple { .. } => {},\n-                    }\n-\n-                    let dest_val = self.cast_scalar(src.to_scalar()?, src.layout, dest.layout)?;\n-                    self.write_scalar(dest_val, dest)?;\n-                }\n+                let res = self.cast_immediate(src, dest.layout)?;\n+                self.write_immediate(res, dest)?;\n             }\n \n             Pointer(PointerCast::ReifyFnPointer) => {\n@@ -126,6 +94,43 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    fn cast_immediate(\n+        &self,\n+        src: ImmTy<'tcx, M::PointerTag>,\n+        dest_layout: TyLayout<'tcx>,\n+    ) -> InterpResult<'tcx, Immediate<M::PointerTag>> {\n+        if self.type_is_fat_ptr(src.layout.ty) {\n+            return match (*src, self.type_is_fat_ptr(dest_layout.ty)) {\n+                // pointers to extern types\n+                (Immediate::Scalar(_),_) |\n+                // slices and trait objects to other slices/trait objects\n+                (Immediate::ScalarPair(..), true) => {\n+                    // No change to immediate\n+                    Ok(*src)\n+                }\n+                // slices and trait objects to thin pointers (dropping the metadata)\n+                (Immediate::ScalarPair(data, _), false) => {\n+                    Ok(data.into())\n+                }\n+            };\n+        } else {\n+            match src.layout.variants {\n+                layout::Variants::Single { index } => {\n+                    if let Some(discr) =\n+                        src.layout.ty.discriminant_for_variant(*self.tcx, index)\n+                    {\n+                        // Cast from a univariant enum\n+                        assert!(src.layout.is_zst());\n+                        return Ok(Scalar::from_uint(discr.val, dest_layout.size).into());\n+                    }\n+                }\n+                layout::Variants::Multiple { .. } => {},\n+            }\n+\n+            return Ok(self.cast_scalar(src.to_scalar()?, src.layout, dest_layout)?.into());\n+        }\n+    }\n+\n     fn cast_scalar(\n         &self,\n         val: Scalar<M::PointerTag>,"}, {"sha": "4742d53d0ba4aeb818e00949f8f97f6a22c4f5eb", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e71895aa450606d99d7705dac20d689a330d1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e71895aa450606d99d7705dac20d689a330d1/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=ec1e71895aa450606d99d7705dac20d689a330d1", "patch": "@@ -32,6 +32,20 @@ pub enum Immediate<Tag=(), Id=AllocId> {\n     ScalarPair(ScalarMaybeUndef<Tag, Id>, ScalarMaybeUndef<Tag, Id>),\n }\n \n+impl<Tag> From<ScalarMaybeUndef<Tag>> for Immediate<Tag> {\n+    #[inline(always)]\n+    fn from(val: ScalarMaybeUndef<Tag>) -> Self {\n+        Immediate::Scalar(val)\n+    }\n+}\n+\n+impl<Tag> From<Scalar<Tag>> for Immediate<Tag> {\n+    #[inline(always)]\n+    fn from(val: Scalar<Tag>) -> Self {\n+        Immediate::Scalar(val.into())\n+    }\n+}\n+\n impl<'tcx, Tag> Immediate<Tag> {\n     #[inline]\n     pub fn from_scalar(val: Scalar<Tag>) -> Self {"}]}