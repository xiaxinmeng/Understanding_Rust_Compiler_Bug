{"sha": "52c33804af9c85121fe8b65166e11ac2d1feee97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzMzODA0YWY5Yzg1MTIxZmU4YjY1MTY2ZTExYWMyZDFmZWVlOTc=", "commit": {"author": {"name": "Diggory Hardy", "email": "git@dhardy.name", "date": "2017-05-09T11:30:26Z"}, "committer": {"name": "Diggory Hardy", "email": "git@dhardy.name", "date": "2017-05-09T11:30:26Z"}, "message": "loop_break_value: add documentation for book", "tree": {"sha": "61b48875dbb37682921632df2a3e825af400d521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b48875dbb37682921632df2a3e825af400d521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c33804af9c85121fe8b65166e11ac2d1feee97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c33804af9c85121fe8b65166e11ac2d1feee97", "html_url": "https://github.com/rust-lang/rust/commit/52c33804af9c85121fe8b65166e11ac2d1feee97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c33804af9c85121fe8b65166e11ac2d1feee97/comments", "author": {"login": "dhardy", "id": 134893, "node_id": "MDQ6VXNlcjEzNDg5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/134893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhardy", "html_url": "https://github.com/dhardy", "followers_url": "https://api.github.com/users/dhardy/followers", "following_url": "https://api.github.com/users/dhardy/following{/other_user}", "gists_url": "https://api.github.com/users/dhardy/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhardy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhardy/subscriptions", "organizations_url": "https://api.github.com/users/dhardy/orgs", "repos_url": "https://api.github.com/users/dhardy/repos", "events_url": "https://api.github.com/users/dhardy/events{/privacy}", "received_events_url": "https://api.github.com/users/dhardy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dhardy", "id": 134893, "node_id": "MDQ6VXNlcjEzNDg5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/134893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhardy", "html_url": "https://github.com/dhardy", "followers_url": "https://api.github.com/users/dhardy/followers", "following_url": "https://api.github.com/users/dhardy/following{/other_user}", "gists_url": "https://api.github.com/users/dhardy/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhardy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhardy/subscriptions", "organizations_url": "https://api.github.com/users/dhardy/orgs", "repos_url": "https://api.github.com/users/dhardy/repos", "events_url": "https://api.github.com/users/dhardy/events{/privacy}", "received_events_url": "https://api.github.com/users/dhardy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bedd7da3d28d69520f33ac6a585df87ef1373a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/bedd7da3d28d69520f33ac6a585df87ef1373a26", "html_url": "https://github.com/rust-lang/rust/commit/bedd7da3d28d69520f33ac6a585df87ef1373a26"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "23527cfe8bd95a4914fcaee7e2f0ede663f72829", "filename": "src/doc/unstable-book/src/language-features/loop-break-value.md", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/52c33804af9c85121fe8b65166e11ac2d1feee97/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/52c33804af9c85121fe8b65166e11ac2d1feee97/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md?ref=52c33804af9c85121fe8b65166e11ac2d1feee97", "patch": "@@ -4,7 +4,89 @@ The tracking issue for this feature is: [#37339]\n \n [#37339]: https://github.com/rust-lang/rust/issues/37339\n \n+Documentation to be appended to section 3.6 of the book: Loops (after \"Loop Labels\", or before if\n+the \"Break\" section is moved). If this is deemed too complex a feature this early in the book, it\n+could also be moved to a new section (please advise). This would allow examples breaking with\n+non-primitive types, references, and discussion of coercion (probably unnecessary however).\n+\n ------------------------\n \n+### Loops as expressions\n+\n+Like everything else in Rust, loops are expressions; for example, the following is perfectly legal,\n+if rather useless:\n+\n+```rust\n+let result = for n in 1..4 {\n+    println!(\"Hello, {}\", n);\n+};\n+assert_eq!(result, ());\n+```\n+\n+Until now, all the loops you have seen evaluate to either `()` or `!`, the latter being special\n+syntax for \"no value\", meaning the loop never exits. A `loop` can instead evaluate to\n+a useful value via *break with value*:\n+\n+```rust\n+// Find the first square number over 1000:\n+let mut n = 1;\n+let square = loop {\n+    if n * n > 1000 {\n+        break n * n;\n+    }\n+    n += 1;\n+};\n+```\n+\n+The evaluation type may be specified externally:\n+\n+```rust\n+// Declare that value returned is unsigned 64-bit:\n+let n: u64 = loop {\n+    break 1;\n+};\n+```\n+\n+It is an error if types do not agree, either between a \"break\" value and an external requirement,\n+or between multiple \"break\" values:\n+\n+```rust\n+loop {\n+    if random_bool() {\n+        break 1u32;\n+    } else {\n+        break 0u8;  // error: types do not agree\n+    }\n+};\n+\n+let n: i32 = loop {\n+    break 0u32; // error: type does not agree with external requirement\n+};\n+```\n+\n+For now, breaking with a value is only possible with `loop`; the same functionality may\n+some day be added to `for` and `while` (this would require some new syntax like\n+`while f() { break 1; } default { break 0; }`).\n+\n+#### Break: label, value\n+\n+Four forms of `break` are available, where EXPR is some expression which evaluates to a value:\n+\n+1.  `break;`\n+2.  `break 'label;`\n+3.  `break EXPR;`\n+4.  `break 'label EXPR;`\n+\n+When no value is given, the value `()` is assumed, thus `break;` is equivalent to `break ();`.\n \n+Using a label allows returning a value from an inner loop:\n \n+```rust\n+let result = 'outer: loop {\n+    for n in 1..10 {\n+        if n > 4 {\n+            break 'outer n;\n+        }\n+    }\n+};\n+```"}]}