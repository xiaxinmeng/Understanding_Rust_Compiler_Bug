{"sha": "04a7675d222bcba021886bd5f21d7c6b33273811", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YTc2NzVkMjIyYmNiYTAyMTg4NmJkNWYyMWQ3YzZiMzMyNzM4MTE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-28T03:24:08Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-08T22:53:41Z"}, "message": "For loops in save-analysis", "tree": {"sha": "5408bd89f8d8719ba827283ee026c71699865282", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5408bd89f8d8719ba827283ee026c71699865282"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a7675d222bcba021886bd5f21d7c6b33273811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a7675d222bcba021886bd5f21d7c6b33273811", "html_url": "https://github.com/rust-lang/rust/commit/04a7675d222bcba021886bd5f21d7c6b33273811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a7675d222bcba021886bd5f21d7c6b33273811/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20083c1e1f6916eb79e3d967c1c9ab63342c71ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/20083c1e1f6916eb79e3d967c1c9ab63342c71ae", "html_url": "https://github.com/rust-lang/rust/commit/20083c1e1f6916eb79e3d967c1c9ab63342c71ae"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "c0021bdc06051d0731caf4a838100adfa7ee7441", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/04a7675d222bcba021886bd5f21d7c6b33273811/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a7675d222bcba021886bd5f21d7c6b33273811/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=04a7675d222bcba021886bd5f21d7c6b33273811", "patch": "@@ -796,6 +796,35 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             _ => visit::walk_pat(self, p),\n         }\n     }\n+\n+\n+    fn process_var_decl(&mut self, p: &ast::Pat, value: String) {\n+        // The local could declare multiple new vars, we must walk the\n+        // pattern and collect them all.\n+        let mut collector = PathCollector::new();\n+        collector.visit_pat(&p);\n+        self.visit_pat(&p);\n+\n+        for &(id, ref p, immut, _) in &collector.collected_paths {\n+            let value = if immut == ast::MutImmutable {\n+                value.to_string()\n+            } else {\n+                \"<mutable>\".to_string()\n+            };\n+            let types = self.tcx.node_types();\n+            let typ = types.get(&id).unwrap().to_string();\n+            // Get the span only for the name of the variable (I hope the path\n+            // is only ever a variable name, but who knows?).\n+            let sub_span = self.span.span_for_last_ident(p.span);\n+            // Rust uses the id of the pattern for var lookups, so we'll use it too.\n+            self.fmt.variable_str(p.span,\n+                                  sub_span,\n+                                  id,\n+                                  &path_to_string(p),\n+                                  &value,\n+                                  &typ);\n+        }\n+    }\n }\n \n impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n@@ -1103,6 +1132,12 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                 // walk the body\n                 self.nest(ex.id, |v| v.visit_block(&**body));\n             }\n+            ast::ExprForLoop(ref pattern, ref subexpression, ref block, _) => {\n+                let value = self.span.snippet(mk_sp(ex.span.lo, subexpression.span.hi));\n+                self.process_var_decl(pattern, value);\n+                visit::walk_expr(self, subexpression);\n+                visit::walk_block(self, block);\n+            }\n             _ => {\n                 visit::walk_expr(self, ex)\n             }\n@@ -1180,31 +1215,12 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n             return\n         }\n \n-        // The local could declare multiple new vars, we must walk the\n-        // pattern and collect them all.\n-        let mut collector = PathCollector::new();\n-        collector.visit_pat(&l.pat);\n-        self.visit_pat(&l.pat);\n-\n         let value = self.span.snippet(l.span);\n-\n-        for &(id, ref p, immut, _) in &collector.collected_paths {\n-            let value = if immut == ast::MutImmutable {\n-                value.to_string()\n-            } else {\n-                \"<mutable>\".to_string()\n-            };\n-            let types = self.tcx.node_types();\n-            let typ = types.get(&id).unwrap().to_string();\n-            // Get the span only for the name of the variable (I hope the path\n-            // is only ever a variable name, but who knows?).\n-            let sub_span = self.span.span_for_last_ident(p.span);\n-            // Rust uses the id of the pattern for var lookups, so we'll use it too.\n-            self.fmt.variable_str(p.span, sub_span, id, &path_to_string(p), &value, &typ);\n-        }\n+        self.process_var_decl(&l.pat, value);\n \n         // Just walk the initialiser and type (don't want to walk the pattern again).\n         walk_list!(self, visit_ty, &l.ty);\n         walk_list!(self, visit_expr, &l.init);\n     }\n }\n+"}]}