{"sha": "46ebd57c42439b3aedcb160f70b022a4f59f4afa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZWJkNTdjNDI0MzliM2FlZGNiMTYwZjcwYjAyMmE0ZjU5ZjRhZmE=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-08T23:20:26Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-15T23:50:10Z"}, "message": "moved instrument_coverage pass, optimized scalar, added FIXME", "tree": {"sha": "2a5b485593b8e9a970858665d80fc67d3d7614d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a5b485593b8e9a970858665d80fc67d3d7614d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46ebd57c42439b3aedcb160f70b022a4f59f4afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46ebd57c42439b3aedcb160f70b022a4f59f4afa", "html_url": "https://github.com/rust-lang/rust/commit/46ebd57c42439b3aedcb160f70b022a4f59f4afa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46ebd57c42439b3aedcb160f70b022a4f59f4afa/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e49a9ec59f7950efa9950b65c10f9b3f3a4b6b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e49a9ec59f7950efa9950b65c10f9b3f3a4b6b2", "html_url": "https://github.com/rust-lang/rust/commit/7e49a9ec59f7950efa9950b65c10f9b3f3a4b6b2"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "95465939070a0e62a6e8a9749df0386fa67fc890", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46ebd57c42439b3aedcb160f70b022a4f59f4afa/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ebd57c42439b3aedcb160f70b022a4f59f4afa/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=46ebd57c42439b3aedcb160f70b022a4f59f4afa", "patch": "@@ -148,6 +148,11 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                         caller_fn_path\n                     );\n \n+                    // FIXME(richkadel): (1) Replace raw function name with mangled function name;\n+                    // (2) Replace hardcoded `1234` in `hash` with a computed hash (as discussed in)\n+                    // the MCP (compiler-team/issues/278); and replace the hardcoded `1` for\n+                    // `num_counters` with the actual number of counters per function (when the\n+                    // changes are made to inject more than one counter per function).\n                     let (fn_name, _len_val) = self.const_str(Symbol::intern(&caller_fn_path));\n                     let index = args[0].immediate();\n                     let hash = self.const_u64(1234);"}, {"sha": "27abe813b067dba96cbc99177759f4eb78707c05", "filename": "src/librustc_mir/transform/instrument_coverage.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46ebd57c42439b3aedcb160f70b022a4f59f4afa/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ebd57c42439b3aedcb160f70b022a4f59f4afa/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstrument_coverage.rs?ref=46ebd57c42439b3aedcb160f70b022a4f59f4afa", "patch": "@@ -7,6 +7,7 @@ use rustc_middle::ty::Ty;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n+use rustc_target::abi;\n \n pub struct InstrumentCoverage;\n \n@@ -25,7 +26,7 @@ impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n }\n \n // The first counter (start of the function) is index zero.\n-const INIT_FUNCTION_COUNTER: u128 = 0;\n+const INIT_FUNCTION_COUNTER: u32 = 0;\n \n /// Injects calls to placeholder function `count_code_region()`.\n // FIXME(richkadel): As a first step, counters are only injected at the top of each function.\n@@ -35,7 +36,8 @@ pub fn instrument_coverage<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n     let count_code_region_fn =\n         function_handle(tcx, span, tcx.lang_items().count_code_region_fn().unwrap());\n-    let counter_index = const_int_operand(tcx, span, tcx.types.u32, INIT_FUNCTION_COUNTER);\n+    let counter_index =\n+        const_int_operand(tcx, span, tcx.types.u32, Scalar::from_u32(INIT_FUNCTION_COUNTER));\n \n     let mut patch = MirPatch::new(body);\n \n@@ -77,17 +79,24 @@ fn const_int_operand<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     span: Span,\n     ty: Ty<'tcx>,\n-    val: u128,\n+    val: Scalar,\n ) -> Operand<'tcx> {\n-    let param_env_and_ty = ty::ParamEnv::empty().and(ty);\n-    let size = tcx\n-        .layout_of(param_env_and_ty)\n-        .unwrap_or_else(|e| panic!(\"could not compute layout for {:?}: {:?}\", ty, e))\n-        .size;\n+    debug_assert!({\n+        let param_env_and_ty = ty::ParamEnv::empty().and(ty);\n+        let type_size = tcx\n+            .layout_of(param_env_and_ty)\n+            .unwrap_or_else(|e| panic!(\"could not compute layout for {:?}: {:?}\", ty, e))\n+            .size;\n+        let scalar_size = abi::Size::from_bytes(match val {\n+            Scalar::Raw { size, .. } => size,\n+            _ => panic!(\"Invalid scalar type {:?}\", val),\n+        });\n+        scalar_size == type_size\n+    });\n     Operand::Constant(box Constant {\n         span,\n         user_ty: None,\n-        literal: ty::Const::from_scalar(tcx, Scalar::from_uint(val, size), ty),\n+        literal: ty::Const::from_scalar(tcx, val, ty),\n     })\n }\n "}, {"sha": "846ed1f86d8d6ab996bd664edc191aaa460331f9", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46ebd57c42439b3aedcb160f70b022a4f59f4afa/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ebd57c42439b3aedcb160f70b022a4f59f4afa/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=46ebd57c42439b3aedcb160f70b022a4f59f4afa", "patch": "@@ -289,6 +289,10 @@ fn mir_validated(\n             // What we need to run borrowck etc.\n             &promote_pass,\n             &simplify::SimplifyCfg::new(\"qualify-consts\"),\n+            // If the `instrument-coverage` option is enabled, analyze the CFG, identify each\n+            // conditional branch, construct a coverage map to be passed to LLVM, and inject counters\n+            // where needed.\n+            &instrument_coverage::InstrumentCoverage,\n         ]],\n     );\n \n@@ -338,10 +342,6 @@ fn run_post_borrowck_cleanup_passes<'tcx>(\n         // `AddRetag` needs to run after `ElaborateDrops`. Otherwise it should run fairly late,\n         // but before optimizations begin.\n         &add_retag::AddRetag,\n-        // If the `instrument-coverage` option is enabled, analyze the CFG, identify each\n-        // conditional branch, construct a coverage map to be passed to LLVM, and inject counters\n-        // where needed.\n-        &instrument_coverage::InstrumentCoverage,\n         &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n     ];\n "}]}