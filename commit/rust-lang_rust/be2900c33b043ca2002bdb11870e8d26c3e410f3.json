{"sha": "be2900c33b043ca2002bdb11870e8d26c3e410f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMjkwMGMzM2IwNDNjYTIwMDJiZGIxMTg3MGU4ZDI2YzNlNDEwZjM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-05-15T20:48:35Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-05-15T20:48:35Z"}, "message": "Make is_global true for latebound regions", "tree": {"sha": "340c980121a7073060ea49a7020fddfb897c09d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/340c980121a7073060ea49a7020fddfb897c09d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2900c33b043ca2002bdb11870e8d26c3e410f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2900c33b043ca2002bdb11870e8d26c3e410f3", "html_url": "https://github.com/rust-lang/rust/commit/be2900c33b043ca2002bdb11870e8d26c3e410f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2900c33b043ca2002bdb11870e8d26c3e410f3/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc8ce4c139d9f75557fdccad0795d0a149f29d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8ce4c139d9f75557fdccad0795d0a149f29d68", "html_url": "https://github.com/rust-lang/rust/commit/dc8ce4c139d9f75557fdccad0795d0a149f29d68"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "94ee39470772fe7165cb5f803d3da602aedf38a1", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=be2900c33b043ca2002bdb11870e8d26c3e410f3", "patch": "@@ -330,7 +330,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n         ty::Predicate::Trait(ref data) => {\n             let trait_obligation = obligation.with(data.clone());\n \n-            if data.is_global() {\n+            if data.is_global() && !data.has_late_bound_regions() {\n                 // no type variables present, can use evaluation for better caching.\n                 // FIXME: consider caching errors too.\n                 if selcx.infcx().predicate_must_hold(&obligation) {"}, {"sha": "e913f8f568adab3ecb0a07747bee4ba01c5a1b67", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=be2900c33b043ca2002bdb11870e8d26c3e410f3", "patch": "@@ -79,7 +79,7 @@ impl FlagComputation {\n             }\n \n             &ty::TyParam(ref p) => {\n-                self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 if p.is_self() {\n                     self.add_flags(TypeFlags::HAS_SELF);\n                 } else {\n@@ -89,7 +89,7 @@ impl FlagComputation {\n \n             &ty::TyGenerator(_, ref substs, _) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n-                self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_substs(&substs.substs);\n             }\n \n@@ -101,12 +101,12 @@ impl FlagComputation {\n \n             &ty::TyClosure(_, ref substs) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n-                self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n                 self.add_substs(&substs.substs);\n             }\n \n             &ty::TyInfer(infer) => {\n-                self.add_flags(TypeFlags::HAS_LOCAL_NAMES); // it might, right?\n+                self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES); // it might, right?\n                 self.add_flags(TypeFlags::HAS_TY_INFER);\n                 match infer {\n                     ty::FreshTy(_) |"}, {"sha": "a1f9fd76b02dcefd79a9b55fc047414336e0b801", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=be2900c33b043ca2002bdb11870e8d26c3e410f3", "patch": "@@ -116,10 +116,14 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n \n     /// Indicates whether this value references only 'global'\n     /// types/lifetimes that are the same regardless of what fn we are\n-    /// in. This is used for caching. Errs on the side of returning\n-    /// false.\n+    /// in. This is used for caching.\n     fn is_global(&self) -> bool {\n-        !self.has_type_flags(TypeFlags::HAS_LOCAL_NAMES)\n+        !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)\n+    }\n+\n+    /// True if there are any late-bound regions\n+    fn has_late_bound_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)\n     }\n }\n "}, {"sha": "01dbef06792cf2fd6405d372ca36ffda7529c0d7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=be2900c33b043ca2002bdb11870e8d26c3e410f3", "patch": "@@ -441,7 +441,7 @@ bitflags! {\n \n         // true if there are \"names\" of types and regions and so forth\n         // that are local to a particular fn\n-        const HAS_LOCAL_NAMES    = 1 << 10;\n+        const HAS_FREE_LOCAL_NAMES    = 1 << 10;\n \n         // Present if the type belongs in a local type context.\n         // Only set for TyInfer other than Fresh.\n@@ -455,6 +455,10 @@ bitflags! {\n         // ought to be true only for the results of canonicalization.\n         const HAS_CANONICAL_VARS = 1 << 13;\n \n+        /// Does this have any `ReLateBound` regions? Used to check\n+        /// if a global bound is safe to evaluate.\n+        const HAS_RE_LATE_BOUND = 1 << 14;\n+\n         const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |\n                                    TypeFlags::HAS_SELF.bits |\n                                    TypeFlags::HAS_RE_EARLY_BOUND.bits;\n@@ -472,9 +476,10 @@ bitflags! {\n                                   TypeFlags::HAS_TY_ERR.bits |\n                                   TypeFlags::HAS_PROJECTION.bits |\n                                   TypeFlags::HAS_TY_CLOSURE.bits |\n-                                  TypeFlags::HAS_LOCAL_NAMES.bits |\n+                                  TypeFlags::HAS_FREE_LOCAL_NAMES.bits |\n                                   TypeFlags::KEEP_IN_LOCAL_TCX.bits |\n-                                  TypeFlags::HAS_CANONICAL_VARS.bits;\n+                                  TypeFlags::HAS_CANONICAL_VARS.bits |\n+                                  TypeFlags::HAS_RE_LATE_BOUND.bits;\n     }\n }\n "}, {"sha": "b0eb8ecab250661c81aea89f4bd3caec3457c87b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=be2900c33b043ca2002bdb11870e8d26c3e410f3", "patch": "@@ -1268,7 +1268,9 @@ impl RegionKind {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_SKOL;\n             }\n-            ty::ReLateBound(..) => { }\n+            ty::ReLateBound(..) => {\n+                flags = flags | TypeFlags::HAS_RE_LATE_BOUND;\n+            }\n             ty::ReEarlyBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_EARLY_BOUND;\n@@ -1291,8 +1293,8 @@ impl RegionKind {\n         }\n \n         match *self {\n-            ty::ReStatic | ty::ReEmpty | ty::ReErased => (),\n-            _ => flags = flags | TypeFlags::HAS_LOCAL_NAMES,\n+            ty::ReStatic | ty::ReEmpty | ty::ReErased | ty::ReLateBound(..) => (),\n+            _ => flags = flags | TypeFlags::HAS_FREE_LOCAL_NAMES,\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);"}, {"sha": "0b1e9081a725e6696f04bd967ad4d1fa080336f1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=be2900c33b043ca2002bdb11870e8d26c3e410f3", "patch": "@@ -1637,7 +1637,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n                     Subtype(..) |\n                     ConstEvaluatable(..) => continue,\n                 };\n-                if !predicate.is_global() {\n+                if predicate.is_global() {\n                     cx.span_lint(\n                         TRIVIAL_BOUNDS,\n                         item.span,"}, {"sha": "21f6f62517ba638e9c226d6015d38a935be5b5eb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2900c33b043ca2002bdb11870e8d26c3e410f3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=be2900c33b043ca2002bdb11870e8d26c3e410f3", "patch": "@@ -683,8 +683,8 @@ fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n     let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);\n \n     for pred in implied_obligations {\n-        // HAS_LOCAL_NAMES is used to match the existing behvaiour.\n-        if !pred.has_type_flags(ty::TypeFlags::HAS_LOCAL_NAMES) {\n+        // Match the existing behavior.\n+        if pred.is_global() && !pred.has_late_bound_regions() {\n             let obligation = traits::Obligation::new(\n                 traits::ObligationCause::new(\n                     span,"}]}