{"sha": "571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MTM2OWFmMWJlMGMwYTdjYzA5YWMzY2YyY2Q2Y2ZjN2RhNjVjZmY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T22:18:11Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T23:50:50Z"}, "message": "Rustup to rustc 1.16.0-nightly (468227129 2017-01-03): Borrow and spelling fixes", "tree": {"sha": "e5a49a0a4afb103f162e258980b245031718da1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5a49a0a4afb103f162e258980b245031718da1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "html_url": "https://github.com/rust-lang/rust/commit/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "043732797693ea757c8608416fd8591702225106", "url": "https://api.github.com/repos/rust-lang/rust/commits/043732797693ea757c8608416fd8591702225106", "html_url": "https://github.com/rust-lang/rust/commit/043732797693ea757c8608416fd8591702225106"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "efea48e64040c374823b99844baad723e9aef8ad", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -57,7 +57,8 @@ struct ExVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         if let ExprClosure(_, _, eid, _) = expr.node {\n-            let expr = self.cx.tcx.map.body(eid).value;\n+            let body = self.cx.tcx.map.body(eid);\n+            let expr = &body.value;\n             if matches!(expr.node, ExprBlock(_)) {\n                 self.found_block = Some(&expr);\n                 return;"}, {"sha": "03eb0fd0540db792c68a3b33be57831c23740313", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -260,9 +260,9 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             ExprLit(ref lit) => Some(lit_to_constant(&lit.node)),\n             ExprArray(ref vec) => self.multi(vec).map(Constant::Vec),\n             ExprTup(ref tup) => self.multi(tup).map(Constant::Tuple),\n-            ExprRepeat(ref value, numberId) => {\n+            ExprRepeat(ref value, number_id) => {\n                 if let Some(lcx) = self.lcx {\n-                    self.binop_apply(value, &lcx.tcx.map.body(numberId).value, |v, n| Some(Constant::Repeat(Box::new(v), n.as_u64() as usize)))\n+                    self.binop_apply(value, &lcx.tcx.map.body(number_id).value, |v, n| Some(Constant::Repeat(Box::new(v), n.as_u64() as usize)))\n                 } else {\n                     None\n                 }"}, {"sha": "5168b4abb9d77412f12ce737fc4ec20effcf45cf", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -42,9 +42,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n         if let ItemEnum(ref def, _) = item.node {\n             for var in &def.variants {\n                 let variant = &var.node;\n-                if let Some(bodyId) = variant.disr_expr {\n+                if let Some(body_id) = variant.disr_expr {\n                     use rustc_const_eval::*;\n-                    let bad = match eval_const_expr_partial(cx.tcx, &cx.tcx.map.body(bodyId).value, EvalHint::ExprTypeChecked, None) {\n+                    let bad = match eval_const_expr_partial(cx.tcx, &cx.tcx.map.body(body_id).value, EvalHint::ExprTypeChecked, None) {\n                         Ok(ConstVal::Integral(Usize(Us64(i)))) => i as u32 as u64 != i,\n                         Ok(ConstVal::Integral(Isize(Is64(i)))) => i as i32 as i64 != i,\n                         _ => false,"}, {"sha": "c00ab3d0e637eb61c6d5f5c8fc92c31ba76d8b0e", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaPass {\n fn check_closure(cx: &LateContext, expr: &Expr) {\n     if let ExprClosure(_, ref decl, eid, _) = expr.node {\n         let body = cx.tcx.map.body(eid);\n-        let ex = body.value;\n+        let ref ex = body.value;\n         if let ExprCall(ref caller, ref args) = ex.node {\n             if args.len() != decl.inputs.len() {\n                 // Not the same number of arguments, there"}, {"sha": "24e4337399659b8c71a068bc736e700a37e9af1e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx> Functions {\n }\n \n fn raw_ptr_arg(arg: &hir::Arg, ty: &hir::Ty) -> Option<hir::def_id::DefId> {\n-    if let (&hir::PatKind::Binding(_, def_id, _, _), hir::TyPtr(_)) = (&arg.pat.node, ty.node) {\n+    if let (&hir::PatKind::Binding(_, def_id, _, _), &hir::TyPtr(_)) = (&arg.pat.node, &ty.node) {\n         Some(def_id)\n     } else {\n         None"}, {"sha": "0e37ca0fec1f08ee2264be695f01f12019bd30fc", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -637,8 +637,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         let item = cx.tcx.map.expect_item(parent);\n         if_let_chain! {[\n             let hir::ImplItemKind::Method(ref sig, id) = implitem.node,\n-            let body = cx.tcx.map.body(id),\n-            let Some(first_arg) = iter_input_pats(&sig.decl, body).next(),\n+            let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.map.body(id)).next(),\n             let hir::ItemImpl(_, _, _, None, _, _) = item.node,\n         ], {\n             // check missing trait implementations"}, {"sha": "e9208a13cf4172a6eb1f7b40cee66d9db5c2e734", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -341,9 +341,9 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n     match ty.node {\n         TyObjectSum(ref sty, _) |\n         TySlice(ref sty) => check_ty(cx, sty, bindings),\n-        TyArray(ref fty, bodyId) => {\n+        TyArray(ref fty, body_id) => {\n             check_ty(cx, fty, bindings);\n-            check_expr(cx, &cx.tcx.map.body(bodyId).value, bindings);\n+            check_expr(cx, &cx.tcx.map.body(body_id).value, bindings);\n         },\n         TyPtr(MutTy { ty: ref mty, .. }) |\n         TyRptr(_, MutTy { ty: ref mty, .. }) => check_ty(cx, mty, bindings),\n@@ -352,7 +352,7 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n                 check_ty(cx, t, bindings)\n             }\n         },\n-        TyTypeof(bodyId) => check_expr(cx, &cx.tcx.map.body(bodyId).value, bindings),\n+        TyTypeof(body_id) => check_expr(cx, &cx.tcx.map.body(body_id).value, bindings),\n         _ => (),\n     }\n }"}, {"sha": "454a0813507793f50576373cf60b7d483007d147", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n                 !self.ignore_fn && l_name.node == r_name.node && over(l_tys, r_tys, |l, r| self.eq_ty(l, r)) &&\n                 self.eq_exprs(l_args, r_args)\n             },\n-            (&ExprRepeat(ref le, llId), &ExprRepeat(ref re, rlId)) => self.eq_expr(le, re) && self.eq_expr(&self.cx.tcx.map.body(llId).value, &self.cx.tcx.map.body(rlId).value),\n+            (&ExprRepeat(ref le, ll_id), &ExprRepeat(ref re, rl_id)) => self.eq_expr(le, re) && self.eq_expr(&self.cx.tcx.map.body(ll_id).value, &self.cx.tcx.map.body(rl_id).value),\n             (&ExprRet(ref l), &ExprRet(ref r)) => both(l, r, |l, r| self.eq_expr(l, r)),\n             (&ExprPath(ref l), &ExprPath(ref r)) => self.eq_qpath(l, r),\n             (&ExprStruct(ref l_path, ref lf, ref lo), &ExprStruct(ref r_path, ref rf, ref ro)) => {\n@@ -211,7 +211,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     fn eq_ty(&self, left: &Ty, right: &Ty) -> bool {\n         match (&left.node, &right.node) {\n             (&TySlice(ref l_vec), &TySlice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n-            (&TyArray(ref lt, llId), &TyArray(ref rt, rlId)) => self.eq_ty(lt, rt) && self.eq_expr(&self.cx.tcx.map.body(llId).value, &self.cx.tcx.map.body(rlId).value),\n+            (&TyArray(ref lt, ll_id), &TyArray(ref rt, rl_id)) => self.eq_ty(lt, rt) && self.eq_expr(&self.cx.tcx.map.body(ll_id).value, &self.cx.tcx.map.body(rl_id).value),\n             (&TyPtr(ref l_mut), &TyPtr(ref r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty),\n             (&TyRptr(_, ref l_rmut), &TyRptr(_, ref r_rmut)) => {\n                 l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(&*l_rmut.ty, &*r_rmut.ty)\n@@ -424,11 +424,11 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_name(&name.node);\n                 self.hash_exprs(args);\n             },\n-            ExprRepeat(ref e, lId) => {\n+            ExprRepeat(ref e, l_id) => {\n                 let c: fn(_, _) -> _ = ExprRepeat;\n                 c.hash(&mut self.s);\n                 self.hash_expr(e);\n-                self.hash_expr(&self.cx.tcx.map.body(lId).value);\n+                self.hash_expr(&self.cx.tcx.map.body(l_id).value);\n             },\n             ExprRet(ref e) => {\n                 let c: fn(_) -> _ = ExprRet;"}, {"sha": "d9667d9115d33f9f6a73e7f472679bbbfc0bafa4", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -60,9 +60,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             println!(\"default\");\n         }\n         match item.node {\n-            hir::ImplItemKind::Const(_, bodyId) => {\n+            hir::ImplItemKind::Const(_, body_id) => {\n                 println!(\"associated constant\");\n-                print_expr(cx, &cx.tcx.map.body(bodyId).value, 1);\n+                print_expr(cx, &cx.tcx.map.body(body_id).value, 1);\n             },\n             hir::ImplItemKind::Method(..) => println!(\"method\"),\n             hir::ImplItemKind::Type(_) => println!(\"associated type\"),\n@@ -324,12 +324,12 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n                 print_expr(cx, base, indent + 1);\n             }\n         },\n-        hir::ExprRepeat(ref val, bodyId) => {\n+        hir::ExprRepeat(ref val, body_id) => {\n             println!(\"{}Repeat, {}\", ind, ty);\n             println!(\"{}value:\", ind);\n             print_expr(cx, val, indent + 1);\n             println!(\"{}repeat count:\", ind);\n-            print_expr(cx, &cx.tcx.map.body(bodyId).value, indent + 1);\n+            print_expr(cx, &cx.tcx.map.body(body_id).value, indent + 1);\n         },\n     }\n }"}, {"sha": "ea7a654ed1f7d0eb7b4c72290699b7359e8e3b21", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=571369af1be0c0a7cc09ac3cf2cd6cfc7da65cff", "patch": "@@ -106,15 +106,15 @@ impl LintPass for LintWithoutLintPass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let ItemStatic(ref ty, MutImmutable, bodyId) = item.node {\n+        if let ItemStatic(ref ty, MutImmutable, body_id) = item.node {\n             if is_lint_ref_type(ty) {\n                 self.declared_lints.insert(item.name, item.span);\n             } else if is_lint_array_type(ty) && item.vis == Visibility::Inherited && item.name == \"ARRAY\" {\n                 let mut collector = LintCollector {\n                     output: &mut self.registered_lints,\n                     cx: cx,\n                 };\n-                collector.visit_expr(&cx.tcx.map.body(bodyId).value);\n+                collector.visit_expr(&cx.tcx.map.body(body_id).value);\n             }\n         }\n     }"}]}