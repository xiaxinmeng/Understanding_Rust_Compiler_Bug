{"sha": "c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzOGIxMjdkODQ2M2I1OTViNWRmOTNmM2I4YzQ0NjJkMzlkN2NkMGI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-11T01:47:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-14T19:19:44Z"}, "message": "Remove redundant explanatory `note` for type parameters", "tree": {"sha": "6fdca6717b3eaf1c299880d2afad05e82e2f820d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fdca6717b3eaf1c299880d2afad05e82e2f820d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "html_url": "https://github.com/rust-lang/rust/commit/c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d989796b478764e1a535951b56d150ab42f1d891", "url": "https://api.github.com/repos/rust-lang/rust/commits/d989796b478764e1a535951b56d150ab42f1d891", "html_url": "https://github.com/rust-lang/rust/commit/d989796b478764e1a535951b56d150ab42f1d891"}], "stats": {"total": 104, "additions": 6, "deletions": 98}, "files": [{"sha": "4ade1ce91632fa0dd2990af51730514870f06944", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -376,7 +376,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             // If it has a custom `#[rustc_on_unimplemented]`\n                             // error message, let's display it as the label!\n                             err.span_label(span, s.as_str());\n-                            err.help(&explanation);\n+                            if !matches!(trait_ref.skip_binder().self_ty().kind, ty::Param(_)) {\n+                                // When the self type is a type param We don't need to \"the trait\n+                                // `std::marker::Sized` is not implemented for `T`\" as we will point\n+                                // at the type param with a label to suggest constraining it.\n+                                err.help(&explanation);\n+                            }\n                         } else {\n                             err.span_label(span, explanation);\n                         }"}, {"sha": "2ba854eac4665b86159b74cdba0b37d188b39ed2", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -21,7 +21,6 @@ LL | trait UncheckedCopy: Sized {\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n-   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n@@ -50,7 +49,6 @@ LL | trait UncheckedCopy: Sized {\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n-   = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider further restricting `Self`\n    |\n@@ -69,7 +67,6 @@ LL |     + Display = Self;\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n-   = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider restricting type parameter `T`\n    |\n@@ -105,7 +102,6 @@ LL |     + AddAssign<&'static str>\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n-   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}"}, {"sha": "d4fd0ca98ee548820fae161aed6e3ac19e85ae5f", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -21,7 +21,6 @@ LL | trait UncheckedCopy: Sized {\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n-   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n@@ -50,7 +49,6 @@ LL | trait UncheckedCopy: Sized {\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n-   = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider further restricting `Self`\n    |\n@@ -69,7 +67,6 @@ LL |     + Display = Self;\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n    |\n-   = help: the trait `std::fmt::Display` is not implemented for `T`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n help: consider restricting type parameter `T`\n    |\n@@ -105,7 +102,6 @@ LL |     + AddAssign<&'static str>\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n    |\n-   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::AddAssign<&'static str>> UncheckedCopy for T {}"}, {"sha": "be3b61665b11f50c33f4db77704dbe1d97ec381c", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -6,7 +6,6 @@ LL | trait MyTrait {\n LL |     type This = Self;\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL | trait MyTrait: std::marker::Sized {"}, {"sha": "7813d3b6596bffa58a619d196e67db7fbd39f6a7", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self>\n LL | pub trait Add<Rhs = Self> {\n    |               --- required by this bound in `std::ops::Add`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + std::marker::Sized {}"}, {"sha": "2166420070a07a1898b3156ef6ea1c068ce9bf8b", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL |\n LL |     async { (ty, ty1) }\n    |     ------------------- this returned value is of type `impl std::future::Future`\n    |\n-   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `U`\n note: captured value is not `Send`\n   --> $DIR/issue-70818.rs:6:18\n    |"}, {"sha": "fd3999ae6fbeca92d9edcacbfed3794ebf0da4e2", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n help: consider further restricting this bound\n    |\n LL | fn foo<T:'static + std::marker::Send>() {"}, {"sha": "623252a8c11399ff4bd0f9de920133d772dd0301", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `impl Sized` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `impl Sized`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n@@ -18,7 +17,6 @@ error[E0277]: `T` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `T`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n@@ -32,7 +30,6 @@ error[E0277]: `T` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `T`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n@@ -46,7 +43,6 @@ error[E0277]: `Y` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?} {:?}\", x, y);\n    |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `Y`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `Y`\n@@ -60,7 +56,6 @@ error[E0277]: `X` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `X`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n@@ -74,7 +69,6 @@ error[E0277]: `X` doesn't implement `std::fmt::Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `X`\n    = note: required by `std::fmt::Debug::fmt`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `X`"}, {"sha": "7ff986ec38109d78b3829d5cff702a0f851bf95a", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL |\n LL | impl <T: Sync+'static> Foo for (T,) { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n-   = help: within `(T,)`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `(T,)`\n help: consider further restricting this bound\n    |\n@@ -23,7 +22,6 @@ LL | trait Foo : Send+Sync { }\n LL | impl <T: Send> Foo for (T,T) { }\n    |                ^^^ `T` cannot be shared between threads safely\n    |\n-   = help: within `(T, T)`, the trait `std::marker::Sync` is not implemented for `T`\n    = note: required because it appears within the type `(T, T)`\n help: consider further restricting this bound\n    |"}, {"sha": "9ee045edfe546fc2a4f4259b8e01bb6787c6fdac", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n    |                                                          ---- required by this bound in `trait_superkinds_in_metadata::RequiresRequiresShareAndSend`\n    |\n-   = help: within `X<T>`, the trait `std::marker::Send` is not implemented for `T`\n    = note: required because it appears within the type `X<T>`\n help: consider further restricting this bound\n    |"}, {"sha": "ad80b3fa8d11f39b97a2ad145e7162d0a988ec65", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL |\n LL | impl <T: Sync+'static> Foo for T { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }"}, {"sha": "273eae995538a7dc0b62ce3b833d9fb5d9967437", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL | struct X<F> where F: FnOnce() + 'static + Send {\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n    |                      ^^^^ `F` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `F`\n help: consider further restricting this bound\n    |\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + std::marker::Send {"}, {"sha": "7df29d5a098a02896f34bdf666fa479421c7b764", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `F`\n help: consider further restricting this bound\n    |\n LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {"}, {"sha": "da8ead885c8987002b18994fc327451918645e78", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -6,7 +6,6 @@ LL | fn test1<T: ?Sized + Foo>(t: &T) {\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n@@ -17,7 +16,6 @@ LL | fn test2<T: ?Sized + Foo>(t: &T) {\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time"}, {"sha": "2fab7ffb66050b103e6a3a301dc897edfeb1a626", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -16,7 +16,6 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n help: consider restricting type parameter `T`\n    |"}, {"sha": "186e142138be2fe93c23b464061d224cac0acef2", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -16,7 +16,6 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n help: consider restricting type parameter `T`\n    |"}, {"sha": "d16bdcbbb6b00d859da406fb85c4247487512801", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -16,7 +16,6 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n help: consider restricting type parameter `T`\n    |"}, {"sha": "72c42917c83c92a53cd953e56ac28ba32510fee9", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -16,7 +16,6 @@ LL |     type F<'a>: Fn() -> u32;\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n-   = help: the trait `std::ops::Fn<()>` is not implemented for `T`\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }\n help: consider restricting type parameter `T`\n    |"}, {"sha": "cbaa7507244a391cd4e70748b86b5e0ca8589f56", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL | trait From<Src> {\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n    |                                                 ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self>, Self: std::marker::Sized {"}, {"sha": "96696fabd9338fa2cdaa7c227e4188cfb03e6156", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -6,7 +6,6 @@ LL | pub struct Bad<T: ?Sized> {\n LL |     data: T,\n    |           ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "de1810e99aac6c6f859a17b8d23c38442319afb7", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -4,7 +4,6 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = help: unsized locals are gated as an unstable feature\n help: consider further restricting `Self`\n    |"}, {"sha": "eb400cf061547ed13b5ca8c4cb518c0d6cf789d5", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n@@ -31,7 +30,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`"}, {"sha": "ab9dfc9b8a7795bfc0f4d6fdd07353633fdbab1c", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -4,7 +4,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n@@ -31,7 +30,6 @@ error[E0277]: `T` cannot be sent between threads safely\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`"}, {"sha": "98bf9923823d7d7f34ceb588c6ebd262b6c8b1b0", "filename": "src/test/ui/lazy_normalization_consts/feature-gate-lazy_normalization_consts.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | fn test<T>() {\n LL |     let _: [u8; sof::<T>()];\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | pub const fn sof<T: ?Sized>() -> usize {"}, {"sha": "e143747d637ee0292c2ee79aed7ba4e340f73c61", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL | fn is_zen<T: Zen>(_: T) {}\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n@@ -25,7 +24,6 @@ LL | fn is_zen<T: Zen>(_: T) {}\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n-   = help: the trait `std::marker::Sync` is not implemented for `T`\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`"}, {"sha": "3da8725d88a0caa6c900fbbf7fd1a413bb577703", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -24,7 +24,6 @@ LL |     type U<'a>: PartialEq<&'a Self>;\n LL |     default type U<'a> = &'a T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T == T`\n    |\n-   = help: the trait `std::cmp::PartialEq` is not implemented for `T`\n    = note: required because of the requirements on the impl of `std::cmp::PartialEq` for `&'a T`\n help: consider further restricting this bound\n    |"}, {"sha": "f4c0d0f96c428af0922d047fb84ee5c1049b6422", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | struct Struct5<T: ?Sized>{\n LL |     _t: X<T>,\n    |         ^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n    |\n@@ -27,7 +26,6 @@ LL |     fn func1() -> Struct1<Self>;\n LL | struct Struct1<T>{\n    |                - required by this bound in `Struct1`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL |     fn func1() -> Struct1<Self> where Self: std::marker::Sized;\n@@ -46,7 +44,6 @@ LL |     fn func2<'a>() -> Struct2<'a, Self>;\n LL | struct Struct2<'a, T>{\n    |                    - required by this bound in `Struct2`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL |     fn func2<'a>() -> Struct2<'a, Self> where Self: std::marker::Sized;\n@@ -65,7 +62,6 @@ LL |     fn func3() -> Struct3<Self>;\n LL | struct Struct3<T>{\n    |                - required by this bound in `Struct3`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:14:16\n    |\n@@ -87,7 +83,6 @@ LL |     fn func4() -> Struct4<Self>;\n LL | struct Struct4<T>{\n    |                - required by this bound in `Struct4`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Self`\n help: consider further restricting `Self`\n    |\n LL |     fn func4() -> Struct4<Self> where Self: std::marker::Sized;"}, {"sha": "33af13d943f74d97d6fd393355c594eb0721b3b2", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `impl Sync` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `impl Sync`\n help: consider further restricting this bound\n    |\n LL | fn use_impl_sync(val: impl Sync + std::marker::Send) {\n@@ -22,7 +21,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider further restricting this bound\n    |\n LL | fn use_where<S>(val: S) where S: Sync + std::marker::Send {\n@@ -37,7 +35,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider further restricting this bound\n    |\n LL | fn use_bound<S: Sync + std::marker::Send>(val: S) {\n@@ -52,7 +49,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider further restricting this bound\n    |\n LL |     Sync + std::marker::Send\n@@ -67,7 +63,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider further restricting this bound\n    |\n LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug + std::marker::Send {\n@@ -82,7 +77,6 @@ LL | fn is_send<T: Send>(val: T) {}\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `S`\n help: consider restricting type parameter `S`\n    |\n LL | fn use_unbound<S: std::marker::Send>(val: S) {"}, {"sha": "86a313baa5c385ad1fd47b4bf4c7ddd4a5767f86", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -11,8 +11,6 @@ LL |     mem::size_of::<U>();\n    |\n LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `U`\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:10:5\n@@ -28,7 +26,6 @@ LL |     mem::size_of::<Misc<U>>();\n LL | pub const fn size_of<T>() -> usize {\n    |                      - required by this bound in `std::mem::size_of`\n    |\n-   = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n    = note: required because it appears within the type `Misc<U>`\n \n error[E0277]: the trait bound `u64: std::convert::From<T>` is not satisfied"}, {"sha": "28e30cbdd9d967c8782cc09adbd547de6fd338ab", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -19,7 +19,6 @@ LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n LL |     5u32\n    |     ---- this returned value is of type `u32`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `U`\n    = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `U`\n    |\n@@ -35,7 +34,6 @@ LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n LL |     5u32\n    |     ---- this returned value is of type `u32`\n    |\n-   = help: the trait `std::fmt::Debug` is not implemented for `V`\n    = note: the return type of a function must have a statically known size\n help: consider restricting type parameter `V`\n    |"}, {"sha": "7398b48a238d1c7c31022c78a39a13fa2f0a3fb4", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL |     is_send::<T>()\n LL | fn is_send<T:Send>() {\n    |              ---- required by this bound in `is_send`\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n help: consider restricting type parameter `T`\n    |\n LL | fn foo<T: std::marker::Send>() {"}, {"sha": "d7224e46add3dfc85d005e2026802aeb26175c6e", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -6,7 +6,6 @@ LL | union Foo<T: ?Sized> {\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: no field of a union may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -26,7 +25,6 @@ LL | struct Foo2<T: ?Sized> {\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -46,7 +44,6 @@ LL | enum Foo3<T: ?Sized> {\n LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "19978ae24cacb75094e17314ebb342ff3f91ab4c", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,8 +7,6 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        -                    ^ doesn't have a size known at compile-time\n    |        |\n    |        this type parameter needs to be `std::marker::Sized`\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n \n error: aborting due to previous error\n "}, {"sha": "fdfdb9b4e2a5b636be8a0c62a44aac7d0adfa57b", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n help: you could relax the implicit `Sized` bound on `U` if it were used through indirection like `&U` or `Box<U>`\n   --> $DIR/unsized-enum.rs:4:10\n    |"}, {"sha": "742abc39209e66aafe5a40a17ad1c52cad6d69e5", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `W`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -28,7 +27,6 @@ LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n LL |     VB{x: X},\n    |           ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -49,7 +47,6 @@ LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -70,7 +67,6 @@ LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n LL |     VD{u: isize, x: Z},\n    |                     ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "50b54593f3aa149460594ac2bb50cfb207e10d95", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | impl<X: ?Sized> S5<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:11\n    |"}, {"sha": "0c8529bf1a9af43148872913ca3876254ebf5e74", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `T`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/unsized-struct.rs:4:12\n    |\n@@ -29,7 +28,6 @@ LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n    = note: required because it appears within the type `Bar<T>`\n \n error: aborting due to 2 previous errors"}, {"sha": "4514208a90dc9a5cfe0955dc0c94fc73193c1485", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:11\n    |"}, {"sha": "f48d4ef9f14617b98ffb8ef017c49dbf9f5516b6", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T2<Z: ?Sized> {"}, {"sha": "ddddae4eaba57cf51d1094b02b3e0d5066210125", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL |     f2::<X>(x);\n LL | fn f2<X>(x: &X) {\n    |       - required by this bound in `f2`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f2<X: ?Sized>(x: &X) {\n@@ -26,7 +25,6 @@ LL |     f4::<X>(x);\n LL | fn f4<X: T>(x: &X) {\n    |       - required by this bound in `f4`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f4<X: T + ?Sized>(x: &X) {\n@@ -43,7 +41,6 @@ LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n-   = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: required because it appears within the type `S<X>`\n help: consider relaxing the implicit `Sized` restriction\n    |\n@@ -58,7 +55,6 @@ LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: required because it appears within the type `S<X>`\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -70,7 +66,6 @@ LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n    = note: tuples must have a statically known size to be initialized\n@@ -86,7 +81,6 @@ LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n help: consider relaxing the implicit `Sized` restriction"}, {"sha": "80cf4baeab794768b792266c6247156d917a8a57", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -6,7 +6,6 @@ LL | struct S1<X: ?Sized> {\n LL |     f1: X,\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -27,7 +26,6 @@ LL |     f: isize,\n LL |     g: X,\n    |        ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: only the last field of a struct may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -83,7 +81,6 @@ LL | enum E<X: ?Sized> {\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size\n@@ -103,7 +100,6 @@ LL | enum F<X: ?Sized> {\n LL |     V2{f1: X, f: isize},\n    |            ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: no field of an enum variant may have a dynamically sized type\n    = help: change the field's type to have a statically known size\n help: borrowed types always have a statically known size"}, {"sha": "f045bfe2444bc8490d32292336a78a2337d879a7", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -7,7 +7,6 @@ LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -20,7 +19,6 @@ LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n@@ -32,7 +30,6 @@ LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Z`\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -43,7 +40,6 @@ LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -56,7 +52,6 @@ LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = note: only the last element of a tuple may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -67,7 +62,6 @@ LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -80,7 +74,6 @@ LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -93,7 +86,6 @@ LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -105,7 +97,6 @@ LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -118,7 +109,6 @@ LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -131,7 +121,6 @@ LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -143,7 +132,6 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |       |\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = help: unsized locals are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n@@ -158,7 +146,6 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       |\n    |       this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n    = help: unsized locals are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |"}, {"sha": "7dbddd4ed24430579ccc44e484b859a91482cb3a", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c38b127d8463b595b5df93f3b8c4462d39d7cd0b/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=c38b127d8463b595b5df93f3b8c4462d39d7cd0b", "patch": "@@ -9,7 +9,6 @@ LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `X`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T1<Z: T + ?Sized> {"}]}