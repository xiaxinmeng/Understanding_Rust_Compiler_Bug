{"sha": "8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZDdlNTY4NWVlMzhhZjBkMWM2MjgwOGM0ZWFmODMwMWYzYTBkYjg=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-03-12T02:08:49Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-03-31T14:16:37Z"}, "message": "Fix new problem from rebase and a little cleanup", "tree": {"sha": "9e10acb3e9cfce56aeb76abd8eeaf78832c5a619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e10acb3e9cfce56aeb76abd8eeaf78832c5a619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8", "html_url": "https://github.com/rust-lang/rust/commit/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d5efa9f040d2638318f9e8b96eab718ef664e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d5efa9f040d2638318f9e8b96eab718ef664e3c", "html_url": "https://github.com/rust-lang/rust/commit/6d5efa9f040d2638318f9e8b96eab718ef664e3c"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "819399141b9e65b9a3dd86137072a2a272cf2214", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8", "patch": "@@ -820,7 +820,8 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match r {\n             ty::ReLateBound(index, _br) if *index == self.binder_index => {\n-                bug!(\"{:?} {:?}\", index, _br)\n+                // If you hit this, you should be using `Binder::bind_with_vars` or `Binder::rebind`\n+                bug!(\"Trying to collect bound vars with a bound region: {:?} {:?}\", index, _br)\n             }\n \n             _ => (),\n@@ -870,19 +871,19 @@ impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n         match *t.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n                 if self.bound_vars.len() <= bound_ty.var.as_usize() {\n-                    panic!(\"Not enough bound vars: {:?} not found in {:?}\", t, self.bound_vars);\n+                    bug!(\"Not enough bound vars: {:?} not found in {:?}\", t, self.bound_vars);\n                 }\n                 let list_var = self.bound_vars[bound_ty.var.as_usize()];\n                 match list_var {\n                     ty::BoundVariableKind::Ty(kind) => {\n                         if kind != bound_ty.kind {\n-                            panic!(\n+                            bug!(\n                                 \"Mismatched type kinds: {:?} doesn't var in list {:?}\",\n                                 bound_ty.kind, list_var\n                             );\n                         }\n                     }\n-                    _ => panic!(\n+                    _ => bug!(\n                         \"Mismatched bound variable kinds! Expected type, found {:?}\",\n                         list_var\n                     ),\n@@ -899,19 +900,19 @@ impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => {\n                 if self.bound_vars.len() <= br.var.as_usize() {\n-                    panic!(\"Not enough bound vars: {:?} not found in {:?}\", *br, self.bound_vars);\n+                    bug!(\"Not enough bound vars: {:?} not found in {:?}\", *br, self.bound_vars);\n                 }\n                 let list_var = self.bound_vars[br.var.as_usize()];\n                 match list_var {\n                     ty::BoundVariableKind::Region(kind) => {\n                         if kind != br.kind {\n-                            panic!(\n+                            bug!(\n                                 \"Mismatched region kinds: {:?} doesn't match var ({:?}) in list ({:?})\",\n                                 br.kind, list_var, self.bound_vars\n                             );\n                         }\n                     }\n-                    _ => panic!(\n+                    _ => bug!(\n                         \"Mismatched bound variable kinds! Expected region, found {:?}\",\n                         list_var\n                     ),"}, {"sha": "68a923a55eb0f8ad20091271ee6f9544dac2f40f", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8", "patch": "@@ -1487,7 +1487,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         if let (Some((expr, _)), Some((fn_decl, _, _))) =\n             (expression, fcx.get_node_fn_decl(parent_item))\n         {\n-            fcx.suggest_missing_return_expr(&mut err, expr, fn_decl, expected, found);\n+            fcx.suggest_missing_return_expr(&mut err, expr, fn_decl, expected, found, parent_id);\n         }\n \n         if let (Some(sp), Some(fn_output)) = (fcx.ret_coercion_span.get(), fn_output) {"}, {"sha": "6112a5fdc91d6e9ef01a31d5ae8c5828b7e67c1d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=8ad7e5685ee38af0d1c62808c4eaf8301f3a0db8", "patch": "@@ -55,7 +55,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             pointing_at_return_type =\n                 self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n-            self.suggest_missing_return_expr(err, expr, &fn_decl, expected, found);\n+            let fn_id = self.tcx.hir().get_return_block(blk_id).unwrap();\n+            self.suggest_missing_return_expr(err, expr, &fn_decl, expected, found, fn_id);\n         }\n         pointing_at_return_type\n     }\n@@ -479,14 +480,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fn_decl: &hir::FnDecl<'_>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n+        id: hir::HirId,\n     ) {\n         if !expected.is_unit() {\n             return;\n         }\n         let found = self.resolve_vars_with_obligations(found);\n         if let hir::FnRetTy::Return(ty) = fn_decl.output {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, ty);\n-            let ty = self.tcx.erase_late_bound_regions(Binder::bind(ty, self.tcx));\n+            let bound_vars = self.tcx.late_bound_vars(id);\n+            let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n             let ty = self.normalize_associated_types_in(expr.span, ty);\n             if self.can_coerce(found, ty) {\n                 err.multipart_suggestion("}]}