{"sha": "57ec63c76c97028b6627289caec3c6a83cea92a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZWM2M2M3NmM5NzAyOGI2NjI3Mjg5Y2FlYzNjNmE4M2NlYTkyYTc=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-05-05T15:01:20Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-05-05T15:01:20Z"}, "message": "Add tests for by-ref binding", "tree": {"sha": "3adac8341eb9b26340d6c6bfbc80b14271ffc334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3adac8341eb9b26340d6c6bfbc80b14271ffc334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57ec63c76c97028b6627289caec3c6a83cea92a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57ec63c76c97028b6627289caec3c6a83cea92a7", "html_url": "https://github.com/rust-lang/rust/commit/57ec63c76c97028b6627289caec3c6a83cea92a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57ec63c76c97028b6627289caec3c6a83cea92a7/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "121caa927bc4dace0df64f728f62fbce42a15fe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/121caa927bc4dace0df64f728f62fbce42a15fe9", "html_url": "https://github.com/rust-lang/rust/commit/121caa927bc4dace0df64f728f62fbce42a15fe9"}], "stats": {"total": 290, "additions": 289, "deletions": 1}, "files": [{"sha": "c2b59eecb999304092f9ca8ccbea128017293d6d", "filename": "src/test/ui/async-await/drop-order-for-async-fn-parameters-by-ref-binding.rs", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/57ec63c76c97028b6627289caec3c6a83cea92a7/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ec63c76c97028b6627289caec3c6a83cea92a7/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs?ref=57ec63c76c97028b6627289caec3c6a83cea92a7", "patch": "@@ -0,0 +1,271 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![feature(async_await, await_macro)]\n+\n+// Test that the drop order for parameters in a fn and async fn matches up. Also test that\n+// parameters (used or unused) are not dropped until the async fn completes execution.\n+// See also #54716.\n+\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::sync::Arc;\n+use std::rc::Rc;\n+use std::task::Context;\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+/// Check that unused bindings are dropped after the function is polled.\n+async fn foo_async(ref mut x: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn foo_sync(ref mut x: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns are dropped after the function is polled.\n+async fn bar_async(ref mut x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn bar_sync(ref mut x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns within more complex patterns are dropped after the function\n+/// is polled.\n+async fn baz_async((ref mut x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn baz_sync((ref mut x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore and unused bindings within and outwith more complex patterns are dropped\n+/// after the function is polled.\n+async fn foobar_async(ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn foobar_sync(ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    /// Check that unused bindings are dropped after the method is polled.\n+    async fn foo_async(ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foo_sync(ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method is polled.\n+    async fn bar_async(ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn bar_sync(ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// is polled.\n+    async fn baz_async((ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn baz_sync((ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method is polled.\n+    async fn foobar_async(\n+        ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foobar_sync(\n+        ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+struct Bar<'a>(PhantomData<&'a ()>);\n+\n+impl<'a> Bar<'a> {\n+    /// Check that unused bindings are dropped after the method with self is polled.\n+    async fn foo_async(&'a self, ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foo_sync(&'a self, ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method with self is polled.\n+    async fn bar_async(&'a self, ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn bar_sync(&'a self, ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// with self is polled.\n+    async fn baz_async(&'a self, (ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn baz_sync(&'a self, (ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method with self is polled.\n+    async fn foobar_async(\n+        &'a self, ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foobar_sync(\n+        &'a self, ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+fn assert_drop_order_after_poll<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    g: impl FnOnce(DropOrderListPtr),\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let _ = fut.as_mut().poll(&mut cx);\n+\n+    let expected_order = Rc::new(RefCell::new(Vec::new()));\n+    g(expected_order.clone());\n+\n+    assert_eq!(*actual_order.borrow(), *expected_order.borrow());\n+}\n+\n+fn main() {\n+    // Free functions (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods w/out self (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| Foo::foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| Foo::foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| Foo::bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| Foo::bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| Foo::baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| Foo::baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            Foo::foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            Foo::foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods (see doc comment on function for what it tests).\n+    let b = Bar(Default::default());\n+    assert_drop_order_after_poll(|l| b.foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| b.foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| b.bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| b.bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| b.baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| b.baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            b.foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            b.foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+}"}, {"sha": "bcdb8878eb5d225333dfc6f15c6da9d61f4be331", "filename": "src/test/ui/async-await/drop-order-locals-are-hidden.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/57ec63c76c97028b6627289caec3c6a83cea92a7/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ec63c76c97028b6627289caec3c6a83cea92a7/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs?ref=57ec63c76c97028b6627289caec3c6a83cea92a7", "patch": "@@ -8,4 +8,9 @@ async fn foobar_async(x: u32, (a, _, _c): (u32, u32, u32), _: u32, _y: u32) {\n     assert_eq!(__arg2, 4); //~ ERROR cannot find value `__arg2` in this scope [E0425]\n }\n \n+async fn baz_async(ref mut x: u32, ref y: u32) {\n+    assert_eq!(__arg0, 1); //~ ERROR cannot find value `__arg0` in this scope [E0425]\n+    assert_eq!(__arg1, 2); //~ ERROR cannot find value `__arg1` in this scope [E0425]\n+}\n+\n fn main() {}"}, {"sha": "484e1f4f4269ede5589f301a640046ca957eed2d", "filename": "src/test/ui/async-await/drop-order-locals-are-hidden.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57ec63c76c97028b6627289caec3c6a83cea92a7/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/57ec63c76c97028b6627289caec3c6a83cea92a7/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr?ref=57ec63c76c97028b6627289caec3c6a83cea92a7", "patch": "@@ -10,6 +10,18 @@ error[E0425]: cannot find value `__arg2` in this scope\n LL |     assert_eq!(__arg2, 4);\n    |                ^^^^^^ not found in this scope\n \n-error: aborting due to 2 previous errors\n+error[E0425]: cannot find value `__arg0` in this scope\n+  --> $DIR/drop-order-locals-are-hidden.rs:12:16\n+   |\n+LL |     assert_eq!(__arg0, 1);\n+   |                ^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `__arg1` in this scope\n+  --> $DIR/drop-order-locals-are-hidden.rs:13:16\n+   |\n+LL |     assert_eq!(__arg1, 2);\n+   |                ^^^^^^ not found in this scope\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}