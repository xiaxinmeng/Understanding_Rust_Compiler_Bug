{"sha": "6372a6d7c271c58bc56dd35a2f58599d5429b39a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNzJhNmQ3YzI3MWM1OGJjNTZkZDM1YTJmNTg1OTlkNTQyOWIzOWE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-29T15:19:29Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-01T19:09:58Z"}, "message": "Improve diagnostics for pattern bindings that illegally shadow items.\n\nImprove unused import detection.", "tree": {"sha": "51444b9d7fc6639f540f26da192d4b87362566fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51444b9d7fc6639f540f26da192d4b87362566fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6372a6d7c271c58bc56dd35a2f58599d5429b39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6372a6d7c271c58bc56dd35a2f58599d5429b39a", "html_url": "https://github.com/rust-lang/rust/commit/6372a6d7c271c58bc56dd35a2f58599d5429b39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6372a6d7c271c58bc56dd35a2f58599d5429b39a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c706b57c863506e9ecee8e9006dbde84f9155c", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c706b57c863506e9ecee8e9006dbde84f9155c", "html_url": "https://github.com/rust-lang/rust/commit/07c706b57c863506e9ecee8e9006dbde84f9155c"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "93c6dd09e07b83d2c450f2b97f223b6d8c828b29", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=6372a6d7c271c58bc56dd35a2f58599d5429b39a", "patch": "@@ -17,7 +17,6 @@\n //!   - not reference the erased type `Self` except for in this receiver;\n //!   - not have generic type parameters\n \n-use super::supertraits;\n use super::elaborate_predicates;\n \n use hir::def_id::DefId;"}, {"sha": "84ebfad9ff2e96f2e51a651f7b18f24d04d78277", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6372a6d7c271c58bc56dd35a2f58599d5429b39a", "patch": "@@ -158,7 +158,7 @@ enum ResolutionError<'a> {\n     /// error E0435: attempt to use a non-constant value in a constant\n     AttemptToUseNonConstantValueInConstant,\n     /// error E0530: X bindings cannot shadow Ys\n-    BindingShadowsSomethingUnacceptable(&'a str, &'a str, Name),\n+    BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n     /// error E0531: unresolved pattern path kind `name`\n     PatPathUnresolved(&'a str, &'a Path),\n     /// error E0532: expected pattern path kind, found another pattern path kind\n@@ -422,17 +422,16 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              E0435,\n                              \"attempt to use a non-constant value in a constant\")\n         }\n-        ResolutionError::BindingShadowsSomethingUnacceptable(what_binding, shadows_what, name) => {\n+        ResolutionError::BindingShadowsSomethingUnacceptable(what_binding, name, binding) => {\n+            let shadows_what = PathResolution::new(binding.def().unwrap()).kind_name();\n             let mut err = struct_span_err!(resolver.session,\n                                            span,\n                                            E0530,\n                                            \"{}s cannot shadow {}s\", what_binding, shadows_what);\n             err.span_label(span, &format!(\"cannot be named the same as a {}\", shadows_what));\n-            if let Success(binding) = resolver.current_module.resolve_name(name, ValueNS, true) {\n-                let participle = if binding.is_import() { \"imported\" } else { \"defined\" };\n-                err.span_label(binding.span, &format!(\"a {} `{}` is {} here\",\n-                                                      shadows_what, name, participle));\n-            }\n+            let participle = if binding.is_import() { \"imported\" } else { \"defined\" };\n+            let msg = &format!(\"a {} `{}` is {} here\", shadows_what, name, participle);\n+            err.span_label(binding.span, msg);\n             err\n         }\n         ResolutionError::PatPathUnresolved(expected_what, path) => {\n@@ -712,12 +711,16 @@ impl<'a> LexicalScopeBinding<'a> {\n         }\n     }\n \n-    fn module(self) -> Option<Module<'a>> {\n+    fn item(self) -> Option<&'a NameBinding<'a>> {\n         match self {\n-            LexicalScopeBinding::Item(binding) => binding.module(),\n+            LexicalScopeBinding::Item(binding) => Some(binding),\n             _ => None,\n         }\n     }\n+\n+    fn module(self) -> Option<Module<'a>> {\n+        self.item().and_then(NameBinding::module)\n+    }\n }\n \n /// The link from a module up to its nearest parent node.\n@@ -2316,16 +2319,17 @@ impl<'a> Resolver<'a> {\n                 PatKind::Ident(bmode, ref ident, ref opt_pat) => {\n                     // First try to resolve the identifier as some existing\n                     // entity, then fall back to a fresh binding.\n-                    let resolution = self.resolve_identifier(ident.node, ValueNS, true)\n-                                         .map(|local_def| PathResolution::new(local_def.def))\n-                                         .and_then(|resolution| {\n+                    let binding = self.resolve_ident_in_lexical_scope(ident.node, ValueNS, false)\n+                                      .and_then(LexicalScopeBinding::item);\n+                    let resolution = binding.and_then(NameBinding::def).and_then(|def| {\n                         let always_binding = !pat_src.is_refutable() || opt_pat.is_some() ||\n                                              bmode != BindingMode::ByValue(Mutability::Immutable);\n-                        match resolution.base_def {\n+                        match def {\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) if !always_binding => {\n                                 // A constant, unit variant, etc pattern.\n-                                Some(resolution)\n+                                self.record_use(ident.node.name, ValueNS, binding.unwrap());\n+                                Some(PathResolution::new(def))\n                             }\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) | Def::Static(..) => {\n@@ -2334,7 +2338,7 @@ impl<'a> Resolver<'a> {\n                                     self,\n                                     ident.span,\n                                     ResolutionError::BindingShadowsSomethingUnacceptable(\n-                                        pat_src.descr(), resolution.kind_name(), ident.node.name)\n+                                        pat_src.descr(), ident.node.name, binding.unwrap())\n                                 );\n                                 None\n                             }"}, {"sha": "639cdb135bd78705ce8a3b7a0b59b0c336c7d336", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=6372a6d7c271c58bc56dd35a2f58599d5429b39a", "patch": "@@ -18,7 +18,7 @@ use self::utils::{DIB, span_start, create_DIArray, is_node_local_to_unit};\n use self::namespace::mangled_name_of_item;\n use self::type_names::compute_debuginfo_type_name;\n use self::metadata::{type_metadata, diverging_type_metadata};\n-use self::metadata::{file_metadata, scope_metadata, TypeMap};\n+use self::metadata::{file_metadata, TypeMap};\n use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n \n use llvm;"}, {"sha": "11003067070f4e99b01f9cdfd1a55cd4253b4c75", "filename": "src/test/compile-fail/const-pattern-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs?ref=6372a6d7c271c58bc56dd35a2f58599d5429b39a", "patch": "@@ -25,4 +25,5 @@ fn main() {\n                //~^ NOTE cannot be named the same as a constant\n     let d = 4; //~ ERROR let bindings cannot shadow constants\n                //~^ NOTE cannot be named the same as a constant\n+    fn f() {} // Check that the `NOTE`s still work with an item here (c.f. issue #35115).\n }"}, {"sha": "239f380e6c4abb6e0d673f26a153980e48eaea72", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6372a6d7c271c58bc56dd35a2f58599d5429b39a/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=6372a6d7c271c58bc56dd35a2f58599d5429b39a", "patch": "@@ -79,6 +79,13 @@ fn g() {\n     }\n }\n \n+// c.f. issue #35135\n+#[allow(unused_variables)]\n+fn h() {\n+    use test2::foo; //~ ERROR unused import\n+    let foo = 0;\n+}\n+\n fn main() {\n     cal(foo::Point{x:3, y:9});\n     let mut a = 3;"}]}