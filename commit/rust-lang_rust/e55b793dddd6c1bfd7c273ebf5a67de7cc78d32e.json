{"sha": "e55b793dddd6c1bfd7c273ebf5a67de7cc78d32e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NWI3OTNkZGRkNmMxYmZkN2MyNzNlYmY1YTY3ZGU3Y2M3OGQzMmU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-27T22:33:29Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-27T22:33:29Z"}, "message": "save-analysis: give the correct fully qualified name for fields in struct variants", "tree": {"sha": "5a461ff703a8b0ad9dfb39e92dda2b46dcccd01c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a461ff703a8b0ad9dfb39e92dda2b46dcccd01c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55b793dddd6c1bfd7c273ebf5a67de7cc78d32e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55b793dddd6c1bfd7c273ebf5a67de7cc78d32e", "html_url": "https://github.com/rust-lang/rust/commit/e55b793dddd6c1bfd7c273ebf5a67de7cc78d32e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55b793dddd6c1bfd7c273ebf5a67de7cc78d32e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc", "html_url": "https://github.com/rust-lang/rust/commit/35a6f6247ba930425b5ffb8e6f33fbbe1da278cc"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "303bc79bc50a0b28ca71fddace7510a8d86d2abb", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e55b793dddd6c1bfd7c273ebf5a67de7cc78d32e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55b793dddd6c1bfd7c273ebf5a67de7cc78d32e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=e55b793dddd6c1bfd7c273ebf5a67de7cc78d32e", "patch": "@@ -636,7 +636,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                         item.id);\n \n                     for field in struct_def.fields.iter() {\n-                        self.process_struct_field_def(field, enum_name[], variant.node.id);\n+                        self.process_struct_field_def(field, qualname[], variant.node.id);\n                         self.visit_ty(&*field.node.ty);\n                     }\n                 }\n@@ -1422,8 +1422,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n             let def_map = self.analysis.ty_cx.def_map.borrow();\n             if !def_map.contains_key(&id) {\n                 self.sess.span_bug(p.span,\n-                                   format!(\"def_map has no key for {} in visit_arm\",\n-                                           id)[]);\n+                                   format!(\"def_map has no key for {} in visit_arm\", id)[]);\n             }\n             let def = &(*def_map)[id];\n             match *def {\n@@ -1433,16 +1432,15 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                                                             path_to_string(p)[],\n                                                             value[],\n                                                             \"\"),\n-                def::DefVariant(_,id,_) => self.fmt.ref_str(ref_kind,\n-                                                            p.span,\n-                                                            sub_span,\n-                                                            id,\n-                                                            self.cur_scope),\n+                def::DefVariant(_, id ,_) => self.fmt.ref_str(ref_kind,\n+                                                              p.span,\n+                                                              sub_span,\n+                                                              id,\n+                                                              self.cur_scope),\n                 // FIXME(nrc) what is this doing here?\n                 def::DefStatic(_, _) => {}\n                 def::DefConst(..) => {}\n-                _ => error!(\"unexpected definition kind when processing collected paths: {}\",\n-                            *def)\n+                _ => error!(\"unexpected definition kind when processing collected paths: {}\", *def)\n             }\n         }\n         self.collected_paths.clear();"}]}