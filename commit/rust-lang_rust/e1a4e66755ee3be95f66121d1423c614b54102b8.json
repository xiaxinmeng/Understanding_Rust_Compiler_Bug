{"sha": "e1a4e66755ee3be95f66121d1423c614b54102b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTRlNjY3NTVlZTNiZTk1ZjY2MTIxZDE0MjNjNjE0YjU0MTAyYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-26T07:30:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-26T07:30:38Z"}, "message": "auto merge of #5109 : bstrie/rust/decapclause, r=pcwalton\n\nI also deleted a test that would be entirely useless without capture clauses.", "tree": {"sha": "cf36b9b96745c85473e4aad41b1d4687a58d6d12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf36b9b96745c85473e4aad41b1d4687a58d6d12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a4e66755ee3be95f66121d1423c614b54102b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a4e66755ee3be95f66121d1423c614b54102b8", "html_url": "https://github.com/rust-lang/rust/commit/e1a4e66755ee3be95f66121d1423c614b54102b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a4e66755ee3be95f66121d1423c614b54102b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40ffaeaea8f434d59f5dffbe8fc7be958a625e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ffaeaea8f434d59f5dffbe8fc7be958a625e03", "html_url": "https://github.com/rust-lang/rust/commit/40ffaeaea8f434d59f5dffbe8fc7be958a625e03"}, {"sha": "abc4ea2001c24f3a1e3d9edf3bebb1b2bb8629ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc4ea2001c24f3a1e3d9edf3bebb1b2bb8629ec", "html_url": "https://github.com/rust-lang/rust/commit/abc4ea2001c24f3a1e3d9edf3bebb1b2bb8629ec"}], "stats": {"total": 73, "additions": 20, "deletions": 53}, "files": [{"sha": "853b1408050272634f053cd913138e7559656a80", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 38, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e1a4e66755ee3be95f66121d1423c614b54102b8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a4e66755ee3be95f66121d1423c614b54102b8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e1a4e66755ee3be95f66121d1423c614b54102b8", "patch": "@@ -748,18 +748,6 @@ pub impl Parser {\n         }\n     }\n \n-    fn parse_capture_item_or(parse_arg_fn: fn(Parser) -> arg_or_capture_item)\n-        -> arg_or_capture_item\n-    {\n-        if self.eat_keyword(~\"copy\") {\n-            // XXX outdated syntax now that moves-based-on-type has gone in\n-            self.parse_ident();\n-            either::Right(())\n-        } else {\n-            parse_arg_fn(self)\n-        }\n-    }\n-\n     // This version of parse arg doesn't necessarily require\n     // identifier names.\n     fn parse_arg_general(require_name: bool) -> arg {\n@@ -788,32 +776,26 @@ pub impl Parser {\n         either::Left(self.parse_arg_general(true))\n     }\n \n-    fn parse_arg_or_capture_item() -> arg_or_capture_item {\n-        self.parse_capture_item_or(|p| p.parse_arg())\n-    }\n-\n     fn parse_fn_block_arg() -> arg_or_capture_item {\n-        do self.parse_capture_item_or |p| {\n-            let m = p.parse_arg_mode();\n-            let is_mutbl = self.eat_keyword(~\"mut\");\n-            let pat = p.parse_pat(false);\n-            let t = if p.eat(token::COLON) {\n-                p.parse_ty(false)\n-            } else {\n-                @Ty {\n-                    id: p.get_id(),\n-                    node: ty_infer,\n-                    span: mk_sp(p.span.lo, p.span.hi),\n-                }\n-            };\n-            either::Left(ast::arg {\n-                mode: m,\n-                is_mutbl: is_mutbl,\n-                ty: t,\n-                pat: pat,\n-                id: p.get_id()\n-            })\n-        }\n+        let m = self.parse_arg_mode();\n+        let is_mutbl = self.eat_keyword(~\"mut\");\n+        let pat = self.parse_pat(false);\n+        let t = if self.eat(token::COLON) {\n+            self.parse_ty(false)\n+        } else {\n+            @Ty {\n+                id: self.get_id(),\n+                node: ty_infer,\n+                span: mk_sp(self.span.lo, self.span.hi),\n+            }\n+        };\n+        either::Left(ast::arg {\n+            mode: m,\n+            is_mutbl: is_mutbl,\n+            ty: t,\n+            pat: pat,\n+            id: self.get_id()\n+        })\n     }\n \n     fn maybe_parse_fixed_vstore_with_star() -> Option<uint> {\n@@ -1722,7 +1704,7 @@ pub impl Parser {\n \n         // if we want to allow fn expression argument types to be inferred in\n         // the future, just have to change parse_arg to parse_fn_block_arg.\n-        let decl = self.parse_fn_decl(|p| p.parse_arg_or_capture_item());\n+        let decl = self.parse_fn_decl(|p| p.parse_arg());\n \n         let body = self.parse_block();\n "}, {"sha": "e26a8ae11fdb22f73474390bea60bb0562d75223", "filename": "src/test/run-pass/cap-clause-not-used.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40ffaeaea8f434d59f5dffbe8fc7be958a625e03/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ffaeaea8f434d59f5dffbe8fc7be958a625e03/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs?ref=40ffaeaea8f434d59f5dffbe8fc7be958a625e03", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// error-pattern: warning: Captured variable 'y' not used in closure\n-pub fn main() {\n-    let x = 5;\n-    let _y = fn~(copy x) { };\n-}"}]}