{"sha": "7e5a186c1fe585aac95019addc963bf74cb112ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNWExODZjMWZlNTg1YWFjOTUwMTlhZGRjOTYzYmY3NGNiMTEyYWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-17T14:42:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-17T14:42:41Z"}, "message": "Introduce separate hir::BinaryOp\n\nUnlike ast::BinOp, it has significantly more structure to it, so it's\neasier to, say, handle all assignment-like operations in the same way.", "tree": {"sha": "3ece58abec006c824f38e8470f67229bc7c6acdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ece58abec006c824f38e8470f67229bc7c6acdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e5a186c1fe585aac95019addc963bf74cb112ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5a186c1fe585aac95019addc963bf74cb112ae", "html_url": "https://github.com/rust-lang/rust/commit/7e5a186c1fe585aac95019addc963bf74cb112ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e5a186c1fe585aac95019addc963bf74cb112ae/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8919aa8065c31d55050a6bfe10b574fc71bcec09", "url": "https://api.github.com/repos/rust-lang/rust/commits/8919aa8065c31d55050a6bfe10b574fc71bcec09", "html_url": "https://github.com/rust-lang/rust/commit/8919aa8065c31d55050a6bfe10b574fc71bcec09"}], "stats": {"total": 171, "additions": 96, "deletions": 75}, "files": [{"sha": "ea3fa4417df37b51ae91157d4f5d454238637dca", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a186c1fe585aac95019addc963bf74cb112ae/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a186c1fe585aac95019addc963bf74cb112ae/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=7e5a186c1fe585aac95019addc963bf74cb112ae", "patch": "@@ -257,7 +257,44 @@ pub enum Expr {\n     Literal(Literal),\n }\n \n-pub use ra_syntax::ast::BinOp as BinaryOp;\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum BinaryOp {\n+    LogicOp(LogicOp),\n+    ArithOp(ArithOp),\n+    CmpOp(CmpOp),\n+    Assignment { op: Option<ArithOp> },\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum LogicOp {\n+    And,\n+    Or,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum CmpOp {\n+    Equal,\n+    NotEqual,\n+    Less,\n+    LessOrEqual,\n+    Greater,\n+    GreaterOrEqual,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum ArithOp {\n+    Add,\n+    Mul,\n+    Sub,\n+    Div,\n+    Rem,\n+    Shl,\n+    Shr,\n+    BitXor,\n+    BitOr,\n+    BitAnd,\n+}\n+\n pub use ra_syntax::ast::PrefixOp as UnaryOp;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Array {\n@@ -791,7 +828,7 @@ where\n             ast::ExprKind::BinExpr(e) => {\n                 let lhs = self.collect_expr_opt(e.lhs());\n                 let rhs = self.collect_expr_opt(e.rhs());\n-                let op = e.op_kind();\n+                let op = e.op_kind().map(BinaryOp::from);\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n             ast::ExprKind::TupleExpr(e) => {\n@@ -1038,6 +1075,42 @@ where\n     }\n }\n \n+impl From<ast::BinOp> for BinaryOp {\n+    fn from(ast_op: ast::BinOp) -> Self {\n+        match ast_op {\n+            ast::BinOp::BooleanOr => BinaryOp::LogicOp(LogicOp::Or),\n+            ast::BinOp::BooleanAnd => BinaryOp::LogicOp(LogicOp::And),\n+            ast::BinOp::EqualityTest => BinaryOp::CmpOp(CmpOp::Equal),\n+            ast::BinOp::NegatedEqualityTest => BinaryOp::CmpOp(CmpOp::NotEqual),\n+            ast::BinOp::LesserEqualTest => BinaryOp::CmpOp(CmpOp::LessOrEqual),\n+            ast::BinOp::GreaterEqualTest => BinaryOp::CmpOp(CmpOp::GreaterOrEqual),\n+            ast::BinOp::LesserTest => BinaryOp::CmpOp(CmpOp::Less),\n+            ast::BinOp::GreaterTest => BinaryOp::CmpOp(CmpOp::Greater),\n+            ast::BinOp::Addition => BinaryOp::ArithOp(ArithOp::Add),\n+            ast::BinOp::Multiplication => BinaryOp::ArithOp(ArithOp::Mul),\n+            ast::BinOp::Subtraction => BinaryOp::ArithOp(ArithOp::Sub),\n+            ast::BinOp::Division => BinaryOp::ArithOp(ArithOp::Div),\n+            ast::BinOp::Remainder => BinaryOp::ArithOp(ArithOp::Rem),\n+            ast::BinOp::LeftShift => BinaryOp::ArithOp(ArithOp::Shl),\n+            ast::BinOp::RightShift => BinaryOp::ArithOp(ArithOp::Shr),\n+            ast::BinOp::BitwiseXor => BinaryOp::ArithOp(ArithOp::BitXor),\n+            ast::BinOp::BitwiseOr => BinaryOp::ArithOp(ArithOp::BitOr),\n+            ast::BinOp::BitwiseAnd => BinaryOp::ArithOp(ArithOp::BitAnd),\n+            ast::BinOp::Assignment => BinaryOp::Assignment { op: None },\n+            ast::BinOp::AddAssign => BinaryOp::Assignment { op: Some(ArithOp::Add) },\n+            ast::BinOp::DivAssign => BinaryOp::Assignment { op: Some(ArithOp::Div) },\n+            ast::BinOp::MulAssign => BinaryOp::Assignment { op: Some(ArithOp::Mul) },\n+            ast::BinOp::RemAssign => BinaryOp::Assignment { op: Some(ArithOp::Rem) },\n+            ast::BinOp::ShlAssign => BinaryOp::Assignment { op: Some(ArithOp::Shl) },\n+            ast::BinOp::ShrAssign => BinaryOp::Assignment { op: Some(ArithOp::Shr) },\n+            ast::BinOp::SubAssign => BinaryOp::Assignment { op: Some(ArithOp::Sub) },\n+            ast::BinOp::BitOrAssign => BinaryOp::Assignment { op: Some(ArithOp::BitOr) },\n+            ast::BinOp::BitAndAssign => BinaryOp::Assignment { op: Some(ArithOp::BitAnd) },\n+            ast::BinOp::BitXorAssign => BinaryOp::Assignment { op: Some(ArithOp::BitXor) },\n+        }\n+    }\n+}\n+\n pub(crate) fn body_with_source_map_query(\n     db: &impl HirDatabase,\n     def: DefWithBody,"}, {"sha": "33bfd095239d75f70773ad8395e9188dbe3fdfbd", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a186c1fe585aac95019addc963bf74cb112ae/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a186c1fe585aac95019addc963bf74cb112ae/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=7e5a186c1fe585aac95019addc963bf74cb112ae", "patch": "@@ -1265,9 +1265,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::BinaryOp { lhs, rhs, op } => match op {\n                 Some(op) => {\n                     let lhs_expectation = match op {\n-                        BinaryOp::BooleanAnd | BinaryOp::BooleanOr => {\n-                            Expectation::has_type(Ty::simple(TypeCtor::Bool))\n-                        }\n+                        BinaryOp::LogicOp(..) => Expectation::has_type(Ty::simple(TypeCtor::Bool)),\n                         _ => Expectation::none(),\n                     };\n                     let lhs_ty = self.infer_expr(*lhs, &lhs_expectation);"}, {"sha": "1d089f1b081dd496507e47fd2531e0082a1c57b1", "filename": "crates/ra_hir/src/ty/op.rs", "status": "modified", "additions": 20, "deletions": 64, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a186c1fe585aac95019addc963bf74cb112ae/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a186c1fe585aac95019addc963bf74cb112ae/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fop.rs?ref=7e5a186c1fe585aac95019addc963bf74cb112ae", "patch": "@@ -1,52 +1,30 @@\n use super::{InferTy, Ty, TypeCtor};\n-use crate::{expr::BinaryOp, ty::ApplicationTy};\n+use crate::{\n+    expr::{BinaryOp, CmpOp},\n+    ty::ApplicationTy,\n+};\n \n pub(super) fn binary_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n     match op {\n-        BinaryOp::BooleanOr\n-        | BinaryOp::BooleanAnd\n-        | BinaryOp::EqualityTest\n-        | BinaryOp::NegatedEqualityTest\n-        | BinaryOp::LesserEqualTest\n-        | BinaryOp::GreaterEqualTest\n-        | BinaryOp::LesserTest\n-        | BinaryOp::GreaterTest => Ty::simple(TypeCtor::Bool),\n-        BinaryOp::Assignment\n-        | BinaryOp::AddAssign\n-        | BinaryOp::SubAssign\n-        | BinaryOp::DivAssign\n-        | BinaryOp::MulAssign\n-        | BinaryOp::RemAssign\n-        | BinaryOp::ShrAssign\n-        | BinaryOp::ShlAssign\n-        | BinaryOp::BitAndAssign\n-        | BinaryOp::BitOrAssign\n-        | BinaryOp::BitXorAssign => Ty::unit(),\n-        BinaryOp::Addition\n-        | BinaryOp::Subtraction\n-        | BinaryOp::Multiplication\n-        | BinaryOp::Division\n-        | BinaryOp::Remainder\n-        | BinaryOp::LeftShift\n-        | BinaryOp::RightShift\n-        | BinaryOp::BitwiseAnd\n-        | BinaryOp::BitwiseOr\n-        | BinaryOp::BitwiseXor => match rhs_ty {\n+        BinaryOp::LogicOp(_) | BinaryOp::CmpOp(_) => Ty::simple(TypeCtor::Bool),\n+        BinaryOp::Assignment { .. } => Ty::unit(),\n+        BinaryOp::ArithOp(_) => match rhs_ty {\n             Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n                 TypeCtor::Int(..) | TypeCtor::Float(..) => rhs_ty,\n                 _ => Ty::Unknown,\n             },\n             Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => rhs_ty,\n             _ => Ty::Unknown,\n         },\n-        BinaryOp::RangeRightOpen | BinaryOp::RangeRightClosed => Ty::Unknown,\n     }\n }\n \n pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n     match op {\n-        BinaryOp::BooleanAnd | BinaryOp::BooleanOr => Ty::simple(TypeCtor::Bool),\n-        BinaryOp::Assignment | BinaryOp::EqualityTest => match lhs_ty {\n+        BinaryOp::LogicOp(..) => Ty::simple(TypeCtor::Bool),\n+        BinaryOp::Assignment { op: None }\n+        | BinaryOp::CmpOp(CmpOp::Equal)\n+        | BinaryOp::CmpOp(CmpOp::NotEqual) => match lhs_ty {\n             Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n                 TypeCtor::Int(..)\n                 | TypeCtor::Float(..)\n@@ -58,37 +36,15 @@ pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n             Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n             _ => Ty::Unknown,\n         },\n-        BinaryOp::LesserEqualTest\n-        | BinaryOp::GreaterEqualTest\n-        | BinaryOp::LesserTest\n-        | BinaryOp::GreaterTest\n-        | BinaryOp::AddAssign\n-        | BinaryOp::SubAssign\n-        | BinaryOp::DivAssign\n-        | BinaryOp::MulAssign\n-        | BinaryOp::RemAssign\n-        | BinaryOp::ShrAssign\n-        | BinaryOp::ShlAssign\n-        | BinaryOp::BitAndAssign\n-        | BinaryOp::BitOrAssign\n-        | BinaryOp::BitXorAssign\n-        | BinaryOp::Addition\n-        | BinaryOp::Subtraction\n-        | BinaryOp::Multiplication\n-        | BinaryOp::Division\n-        | BinaryOp::Remainder\n-        | BinaryOp::LeftShift\n-        | BinaryOp::RightShift\n-        | BinaryOp::BitwiseAnd\n-        | BinaryOp::BitwiseOr\n-        | BinaryOp::BitwiseXor => match lhs_ty {\n-            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n-                TypeCtor::Int(..) | TypeCtor::Float(..) => lhs_ty,\n+        BinaryOp::CmpOp(_) | BinaryOp::Assignment { op: Some(_) } | BinaryOp::ArithOp(_) => {\n+            match lhs_ty {\n+                Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n+                    TypeCtor::Int(..) | TypeCtor::Float(..) => lhs_ty,\n+                    _ => Ty::Unknown,\n+                },\n+                Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n                 _ => Ty::Unknown,\n-            },\n-            Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n-            _ => Ty::Unknown,\n-        },\n-        _ => Ty::Unknown,\n+            }\n+        }\n     }\n }"}, {"sha": "cf5b6f2510e05f230604e43a1dba834e9043acd4", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e5a186c1fe585aac95019addc963bf74cb112ae/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5a186c1fe585aac95019addc963bf74cb112ae/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=7e5a186c1fe585aac95019addc963bf74cb112ae", "patch": "@@ -102,10 +102,6 @@ pub enum BinOp {\n     BitwiseOr,\n     /// The `&` operator for bitwise AND\n     BitwiseAnd,\n-    /// The `..` operator for right-open ranges\n-    RangeRightOpen,\n-    /// The `..=` operator for right-closed ranges\n-    RangeRightClosed,\n     /// The `=` operator for assignment\n     Assignment,\n     /// The `+=` operator for assignment after addition\n@@ -152,8 +148,6 @@ impl ast::BinExpr {\n                 T![^] => BinOp::BitwiseXor,\n                 T![|] => BinOp::BitwiseOr,\n                 T![&] => BinOp::BitwiseAnd,\n-                T![..] => BinOp::RangeRightOpen,\n-                T![..=] => BinOp::RangeRightClosed,\n                 T![=] => BinOp::Assignment,\n                 T![+=] => BinOp::AddAssign,\n                 T![/=] => BinOp::DivAssign,"}]}