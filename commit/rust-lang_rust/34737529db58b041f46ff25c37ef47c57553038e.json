{"sha": "34737529db58b041f46ff25c37ef47c57553038e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzM3NTI5ZGI1OGIwNDFmNDZmZjI1YzM3ZWY0N2M1NzU1MzAzOGU=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-12-02T19:45:01Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-12-02T19:45:01Z"}, "message": "Merge pull request #667 from Marwes/alias_where\n\nFix missed edgecases in formatting of type aliases", "tree": {"sha": "e27156c091c5e3b59c990533dd54f365552f7aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27156c091c5e3b59c990533dd54f365552f7aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34737529db58b041f46ff25c37ef47c57553038e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34737529db58b041f46ff25c37ef47c57553038e", "html_url": "https://github.com/rust-lang/rust/commit/34737529db58b041f46ff25c37ef47c57553038e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34737529db58b041f46ff25c37ef47c57553038e/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e677f058051ab2dd09480d0347607b42e00b7668", "url": "https://api.github.com/repos/rust-lang/rust/commits/e677f058051ab2dd09480d0347607b42e00b7668", "html_url": "https://github.com/rust-lang/rust/commit/e677f058051ab2dd09480d0347607b42e00b7668"}, {"sha": "a6b0d475f4c7c52c097dd62b48395798b38ef4cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b0d475f4c7c52c097dd62b48395798b38ef4cd", "html_url": "https://github.com/rust-lang/rust/commit/a6b0d475f4c7c52c097dd62b48395798b38ef4cd"}], "stats": {"total": 75, "additions": 70, "deletions": 5}, "files": [{"sha": "6af01bd1af11ac4f35a7497a4dcec4cc8a35d37c", "filename": "src/items.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/34737529db58b041f46ff25c37ef47c57553038e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34737529db58b041f46ff25c37ef47c57553038e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=34737529db58b041f46ff25c37ef47c57553038e", "patch": "@@ -455,6 +455,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n         let generics_str = try_opt!(rewrite_generics(context,\n                                                      generics,\n                                                      offset,\n+                                                     context.config.max_width,\n                                                      offset + result.len(),\n                                                      mk_sp(lo, hi)));\n         result.push_str(&generics_str);\n@@ -686,6 +687,7 @@ fn format_tuple_struct(context: &RewriteContext,\n             let generics_str = try_opt!(rewrite_generics(context,\n                                                          generics,\n                                                          offset,\n+                                                         context.config.max_width,\n                                                          offset + header_str.len(),\n                                                          mk_sp(span.lo, body_lo)));\n             result.push_str(&generics_str);\n@@ -763,19 +765,38 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(span_after(span, \"type\", context.codemap), ty.span.lo);\n+    let generics_width = context.config.max_width - \" =\".len();\n     let generics_str = try_opt!(rewrite_generics(context,\n                                                  generics,\n                                                  indent,\n+                                                 generics_width,\n                                                  generics_indent,\n                                                  generics_span));\n \n     result.push_str(&generics_str);\n+\n+    let where_budget = try_opt!(context.config\n+                                       .max_width\n+                                       .checked_sub(last_line_width(&result)));\n+    let where_clause_str = try_opt!(rewrite_where_clause(context,\n+                                                         &generics.where_clause,\n+                                                         context.config,\n+                                                         context.config.item_brace_style,\n+                                                         indent,\n+                                                         where_budget,\n+                                                         context.config.where_density,\n+                                                         \"=\",\n+                                                         Some(span.hi)));\n+    result.push_str(&where_clause_str);\n     result.push_str(\" = \");\n \n     let line_width = last_line_width(&result);\n-    let budget = try_opt!(context.config\n-                                 .max_width\n-                                 .checked_sub(indent.width() + line_width + \";\".len()));\n+    // This checked_sub may fail as the extra space after '=' is not taken into account\n+    // In that case the budget is set to 0 which will make ty.rewrite retry on a new line\n+    let budget = context.config\n+                        .max_width\n+                        .checked_sub(indent.width() + line_width + \";\".len())\n+                        .unwrap_or(0);\n     let type_indent = indent + line_width;\n     // Try to fit the type on the same line\n     let ty_str = try_opt!(ty.rewrite(context, budget, type_indent)\n@@ -1031,6 +1052,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let generics_str = try_opt!(rewrite_generics(context,\n                                                  generics,\n                                                  indent,\n+                                                 context.config.max_width,\n                                                  generics_indent,\n                                                  generics_span));\n     result.push_str(&generics_str);\n@@ -1366,6 +1388,7 @@ fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> bool {\n fn rewrite_generics(context: &RewriteContext,\n                     generics: &ast::Generics,\n                     offset: Indent,\n+                    width: usize,\n                     generics_offset: Indent,\n                     span: Span)\n                     -> Option<String> {\n@@ -1384,7 +1407,7 @@ fn rewrite_generics(context: &RewriteContext,\n         BlockIndentStyle::Visual => generics_offset + 1,\n     };\n \n-    let h_budget = context.config.max_width - generics_offset.width() - 2;\n+    let h_budget = try_opt!(width.checked_sub(generics_offset.width() + 2));\n     // FIXME: might need to insert a newline if the generics are really long.\n \n     // Strings for the generics.\n@@ -1483,6 +1506,8 @@ fn rewrite_where_clause(context: &RewriteContext,\n             BraceStyle::PreferSameLine => 2,\n             BraceStyle::SameLineWhere => 0,\n         }\n+    } else if terminator == \"=\" {\n+        2\n     } else {\n         terminator.len()\n     };\n@@ -1510,7 +1535,12 @@ fn format_generics(context: &RewriteContext,\n                    generics_offset: Indent,\n                    span: Span)\n                    -> Option<String> {\n-    let mut result = try_opt!(rewrite_generics(context, generics, offset, generics_offset, span));\n+    let mut result = try_opt!(rewrite_generics(context,\n+                                               generics,\n+                                               offset,\n+                                               context.config.max_width,\n+                                               generics_offset,\n+                                               span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));"}, {"sha": "e4429bb8ddf1f53753af864c15098cdf1efae465", "filename": "tests/source/type_alias.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34737529db58b041f46ff25c37ef47c57553038e/tests%2Fsource%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34737529db58b041f46ff25c37ef47c57553038e/tests%2Fsource%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype_alias.rs?ref=34737529db58b041f46ff25c37ef47c57553038e", "patch": "@@ -9,8 +9,19 @@ pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAM\n \n pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<Test>;\n \n+pub type Exactly100CharsToEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> = Vec<i32>;\n+\n+pub type GenericsFitButNotEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A1, B, C> = Vec<i32>;\n+\n pub type CommentTest< /* Lifetime */ 'a\n             ,\n         // Type\n         T\n                     > = ();\n+\n+\n+pub type WithWhereClause<LONGPARAMETERNAME, T> where T: Clone, LONGPARAMETERNAME: Clone + Eq + OtherTrait = Option<T>;\n+\n+pub type Exactly100CharstoEqualWhereTest<T, U, PARAMET> where T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;\n+\n+pub type Exactly101CharstoEqualWhereTest<T, U, PARAMETE> where T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;"}, {"sha": "d175aa60a6740166252fafa40d4ee43f8d7f6c1a", "filename": "tests/target/type_alias.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34737529db58b041f46ff25c37ef47c57553038e/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34737529db58b041f46ff25c37ef47c57553038e/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=34737529db58b041f46ff25c37ef47c57553038e", "patch": "@@ -22,6 +22,30 @@ pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAM\n pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> =\n     Vec<Test>;\n \n+pub type Exactly100CharsToEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> =\n+    Vec<i32>;\n+\n+pub type GenericsFitButNotEqualTest<'a,\n+                                    'b,\n+                                    'c,\n+                                    'd,\n+                                    LONGPARAMETERNAME,\n+                                    LONGPARAMETERNAME,\n+                                    A1,\n+                                    B,\n+                                    C> = Vec<i32>;\n+\n pub type CommentTest<// Lifetime\n                      'a, // Type\n                      T> = ();\n+\n+\n+pub type WithWhereClause<LONGPARAMETERNAME, T>\n+    where T: Clone,\n+          LONGPARAMETERNAME: Clone + Eq + OtherTrait = Option<T>;\n+\n+pub type Exactly100CharstoEqualWhereTest<T, U, PARAMET> where T: Clone + Ord + Eq + SomeOtherTrait =\n+    Option<T>;\n+\n+pub type Exactly101CharstoEqualWhereTest<T, U, PARAMETE>\n+    where T: Clone + Ord + Eq + SomeOtherTrait = Option<T>;"}]}