{"sha": "7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e", "node_id": "C_kwDOAAsO6NoAKDdmYzZiMGM5ZjM5MGJkZmVmZWI0ODRhNDVhNGU3ZmFjYTJkMzNkMWU", "commit": {"author": {"name": "ch-iv", "email": "icheppy101@gmail.com", "date": "2022-11-08T14:27:32Z"}, "committer": {"name": "Vincenzo Palazzo", "email": "vincenzopalazzodev@gmail.com", "date": "2022-12-19T14:46:44Z"}, "message": "docs: improve pin docs\n\nCo-authored-by: <@ch-iv>", "tree": {"sha": "3bc8766b70ed3e64751cfd32ca076d2fe37b9af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc8766b70ed3e64751cfd32ca076d2fe37b9af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE3eMWwQll8j3M3QQgi23CuHC4DV8FAmOgeZkACgkQi23CuHC4\nDV+UyBAAuQiRYQcBBt+ZiNvLSGm2TRDEcGmjqGPqHYj9vItaY4IDrn1DvSBGHx74\n9qTIGGSOInucFD0TUIIMatfY0KGLgQxEa8mAZo3M7uT6cndi0mwzFVfcgj6GH9gx\n8AsUQjHAC6fQU3PDMTCN7jTijrd/L8D6n+RePJqUG4iao3AR0G8dyRx+ORFOX1tN\nzJrAD4iSMJv764WJg4esMZhi01cPXe8BQIH+I64t6wmYYCX6FVXxjLUipzIcLZ1s\nRG5shUF6TWsyuVS8DEJoKddHnK85y2vIrmQaMV0Pdd8Ba9MBupVg5SeDvUBsaKD+\nFCsGLuHxgOyZCAPaa8HTpgP7ibYUBF+mFw868XTou3lnS+W6XsOEfcSoywkUj19g\nCRdZdwXevv/WEBHjfkXHm4JXFBmN8A6p8hsXQg7vDTzDVcVi8XW7xzkoNYp6Q97T\nTyCc4+cQQ/Y1q3dR1+Z1RDBLafvJyGiuhfu+Bm8117cAggLEYkqMY2nhElifl55s\nbGvHpW3j7YqwhnXP6zN/thgcpbg3u+MsEG3q8rdkjzcVYtJ83YKBgwDtKOtG+s/l\nZBXPt1q0JE9ni2OXhV46kQK1rk99Mhj2pzdHy25Q5d4DWM3V1vFlFRtlCb07dHNE\nB1BGeY2EM8na4u0UyB79oDFt/jVTtkvffUmA6kmDHkKXWVq+s9E=\n=a+is\n-----END PGP SIGNATURE-----", "payload": "tree 3bc8766b70ed3e64751cfd32ca076d2fe37b9af5\nparent 4653c93e4442d88bf3278067183c8fdc0be74a1f\nauthor ch-iv <icheppy101@gmail.com> 1667917652 -0500\ncommitter Vincenzo Palazzo <vincenzopalazzodev@gmail.com> 1671461204 +0100\n\ndocs: improve pin docs\n\nCo-authored-by: <@ch-iv>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e", "html_url": "https://github.com/rust-lang/rust/commit/7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e/comments", "author": {"login": "ch-iv", "id": 108201575, "node_id": "U_kgDOBnMGZw", "avatar_url": "https://avatars.githubusercontent.com/u/108201575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ch-iv", "html_url": "https://github.com/ch-iv", "followers_url": "https://api.github.com/users/ch-iv/followers", "following_url": "https://api.github.com/users/ch-iv/following{/other_user}", "gists_url": "https://api.github.com/users/ch-iv/gists{/gist_id}", "starred_url": "https://api.github.com/users/ch-iv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ch-iv/subscriptions", "organizations_url": "https://api.github.com/users/ch-iv/orgs", "repos_url": "https://api.github.com/users/ch-iv/repos", "events_url": "https://api.github.com/users/ch-iv/events{/privacy}", "received_events_url": "https://api.github.com/users/ch-iv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vincenzopalazzo", "id": 17150045, "node_id": "MDQ6VXNlcjE3MTUwMDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17150045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vincenzopalazzo", "html_url": "https://github.com/vincenzopalazzo", "followers_url": "https://api.github.com/users/vincenzopalazzo/followers", "following_url": "https://api.github.com/users/vincenzopalazzo/following{/other_user}", "gists_url": "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vincenzopalazzo/subscriptions", "organizations_url": "https://api.github.com/users/vincenzopalazzo/orgs", "repos_url": "https://api.github.com/users/vincenzopalazzo/repos", "events_url": "https://api.github.com/users/vincenzopalazzo/events{/privacy}", "received_events_url": "https://api.github.com/users/vincenzopalazzo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4653c93e4442d88bf3278067183c8fdc0be74a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4653c93e4442d88bf3278067183c8fdc0be74a1f", "html_url": "https://github.com/rust-lang/rust/commit/4653c93e4442d88bf3278067183c8fdc0be74a1f"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "3f8acc8505ff10fa608f432fd466fd35d7d65f36", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=7fc6b0c9f390bdfefeb484a45a4e7faca2d33d1e", "patch": "@@ -485,6 +485,16 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// Unlike `Pin::new_unchecked`, this method is safe because the pointer\n     /// `P` dereferences to an [`Unpin`] type, which cancels the pinning guarantees.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// // We can pin the value, since it doesn't care about being moved\n+    /// let mut pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// ```\n     #[inline(always)]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n@@ -496,8 +506,20 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n \n     /// Unwraps this `Pin<P>` returning the underlying pointer.\n     ///\n-    /// This requires that the data inside this `Pin` is [`Unpin`] so that we\n+    /// This requires that the data inside this `Pin` implements [`Unpin`] so that we\n     /// can ignore the pinning invariants when unwrapping it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// let pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// // Unwrap the pin to get a reference to the value\n+    /// let r = Pin::into_inner(pinned);\n+    /// assert_eq!(*r, 5);\n+    /// ```\n     #[inline(always)]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n@@ -707,6 +729,18 @@ impl<P: DerefMut> Pin<P> {\n     ///\n     /// This overwrites pinned data, but that is okay: its destructor gets\n     /// run before being overwritten, so no pinning guarantee is violated.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// let mut val: u8 = 5;\n+    /// let mut pinned: Pin<&mut u8> = Pin::new(&mut val);\n+    /// println!(\"{}\", pinned); // 5\n+    /// pinned.as_mut().set(10);\n+    /// println!(\"{}\", pinned); // 10\n+    /// ```\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn set(&mut self, value: P::Target)"}]}