{"sha": "b7290a0642246d95bc18b6dc70bd4f1f423e8a47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MjkwYTA2NDIyNDZkOTViYzE4YjZkYzcwYmQ0ZjFmNDIzZThhNDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-02T16:24:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T16:24:30Z"}, "message": "Rollup merge of #64850 - Mark-Simulacrum:dedup-dep-node, r=michaelwoerister\n\nRemove inlines from DepNode code", "tree": {"sha": "a61b95d0256de536b8cb119fcb0ae2e5f1448334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a61b95d0256de536b8cb119fcb0ae2e5f1448334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7290a0642246d95bc18b6dc70bd4f1f423e8a47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlM8+CRBK7hj4Ov3rIwAAdHIIAFxgFpFbDgRDKQzG3ogwEjma\n+asd9vskAQnqgwPXu5ydZHjDPi0gdUlsSmuK9QoXBBj8kM5toVhl1ssJ/1EO2bUl\nvsp5FdOW0MBmXzRp9cp7FTuzJc+kmHDJu3/yWaXIPpi5R9Yp/OTA2lraSArcHodf\nVPN1wVK+3r9b/YmGM0diLXZkM9DCxmB/4nxuuirN9ft+XLnwc0ZcXdRXRE6TYm1P\nNW/RaySffTZQ5v4aKNSk6WID1ko/ZY8uo0HpBqYuKOI/2OElfD3n4SrulQYAut7K\nBR8iSkoUj/8pJytd1Mpv6OGGYZtwAVqcjroEXslLwiOiNEywu1rKk6IkZBsTfz8=\n=ZI6h\n-----END PGP SIGNATURE-----\n", "payload": "tree a61b95d0256de536b8cb119fcb0ae2e5f1448334\nparent 18d0c03a13c323c0a87ea1e344cdd9290fec0f28\nparent 675ed489d5a9254e694498a4fc07813778fb3880\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570033470 +0200\ncommitter GitHub <noreply@github.com> 1570033470 +0200\n\nRollup merge of #64850 - Mark-Simulacrum:dedup-dep-node, r=michaelwoerister\n\nRemove inlines from DepNode code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7290a0642246d95bc18b6dc70bd4f1f423e8a47", "html_url": "https://github.com/rust-lang/rust/commit/b7290a0642246d95bc18b6dc70bd4f1f423e8a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7290a0642246d95bc18b6dc70bd4f1f423e8a47/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d0c03a13c323c0a87ea1e344cdd9290fec0f28", "html_url": "https://github.com/rust-lang/rust/commit/18d0c03a13c323c0a87ea1e344cdd9290fec0f28"}, {"sha": "675ed489d5a9254e694498a4fc07813778fb3880", "url": "https://api.github.com/repos/rust-lang/rust/commits/675ed489d5a9254e694498a4fc07813778fb3880", "html_url": "https://github.com/rust-lang/rust/commit/675ed489d5a9254e694498a4fc07813778fb3880"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "0686bec0621f450c4e02f95fef3b51cda870adaf", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b7290a0642246d95bc18b6dc70bd4f1f423e8a47/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7290a0642246d95bc18b6dc70bd4f1f423e8a47/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b7290a0642246d95bc18b6dc70bd4f1f423e8a47", "patch": "@@ -114,7 +114,6 @@ macro_rules! define_dep_nodes {\n \n         impl DepKind {\n             #[allow(unreachable_code)]\n-            #[inline]\n             pub fn can_reconstruct_query_key<$tcx>(&self) -> bool {\n                 match *self {\n                     $(\n@@ -150,7 +149,6 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            #[inline(always)]\n             pub fn is_eval_always(&self) -> bool {\n                 match *self {\n                     $(\n@@ -199,7 +197,6 @@ macro_rules! define_dep_nodes {\n \n         impl DepNode {\n             #[allow(unreachable_code, non_snake_case)]\n-            #[inline(always)]\n             pub fn new<'tcx>(tcx: TyCtxt<'tcx>,\n                                        dep: DepConstructor<'tcx>)\n                                        -> DepNode\n@@ -219,14 +216,16 @@ macro_rules! define_dep_nodes {\n                                     hash\n                                 };\n \n-                                if cfg!(debug_assertions) &&\n-                                   !dep_node.kind.can_reconstruct_query_key() &&\n-                                   (tcx.sess.opts.debugging_opts.incremental_info ||\n-                                    tcx.sess.opts.debugging_opts.query_dep_graph)\n+                                #[cfg(debug_assertions)]\n                                 {\n-                                    tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n-                                        arg.to_debug_str(tcx)\n-                                    });\n+                                    if !dep_node.kind.can_reconstruct_query_key() &&\n+                                    (tcx.sess.opts.debugging_opts.incremental_info ||\n+                                        tcx.sess.opts.debugging_opts.query_dep_graph)\n+                                    {\n+                                        tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n+                                            arg.to_debug_str(tcx)\n+                                        });\n+                                    }\n                                 }\n \n                                 return dep_node;\n@@ -242,14 +241,16 @@ macro_rules! define_dep_nodes {\n                                     hash\n                                 };\n \n-                                if cfg!(debug_assertions) &&\n-                                   !dep_node.kind.can_reconstruct_query_key() &&\n-                                   (tcx.sess.opts.debugging_opts.incremental_info ||\n-                                    tcx.sess.opts.debugging_opts.query_dep_graph)\n+                                #[cfg(debug_assertions)]\n                                 {\n-                                    tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n-                                        tupled_args.to_debug_str(tcx)\n-                                    });\n+                                    if !dep_node.kind.can_reconstruct_query_key() &&\n+                                    (tcx.sess.opts.debugging_opts.incremental_info ||\n+                                        tcx.sess.opts.debugging_opts.query_dep_graph)\n+                                    {\n+                                        tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n+                                            tupled_args.to_debug_str(tcx)\n+                                        });\n+                                    }\n                                 }\n \n                                 return dep_node;\n@@ -267,7 +268,6 @@ macro_rules! define_dep_nodes {\n             /// Construct a DepNode from the given DepKind and DefPathHash. This\n             /// method will assert that the given DepKind actually requires a\n             /// single DefId/DefPathHash parameter.\n-            #[inline(always)]\n             pub fn from_def_path_hash(kind: DepKind,\n                                       def_path_hash: DefPathHash)\n                                       -> DepNode {\n@@ -281,7 +281,6 @@ macro_rules! define_dep_nodes {\n             /// Creates a new, parameterless DepNode. This method will assert\n             /// that the DepNode corresponding to the given DepKind actually\n             /// does not require any parameters.\n-            #[inline(always)]\n             pub fn new_no_params(kind: DepKind) -> DepNode {\n                 debug_assert!(!kind.has_params());\n                 DepNode {\n@@ -300,7 +299,6 @@ macro_rules! define_dep_nodes {\n             /// DepNode. Condition (2) might not be fulfilled if a DepNode\n             /// refers to something from the previous compilation session that\n             /// has been removed.\n-            #[inline]\n             pub fn extract_def_id(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n                 if self.kind.can_reconstruct_query_key() {\n                     let def_path_hash = DefPathHash(self.hash);\n@@ -386,14 +384,12 @@ impl fmt::Debug for DepNode {\n \n \n impl DefPathHash {\n-    #[inline(always)]\n     pub fn to_dep_node(self, kind: DepKind) -> DepNode {\n         DepNode::from_def_path_hash(kind, self)\n     }\n }\n \n impl DefId {\n-    #[inline(always)]\n     pub fn to_dep_node(self, tcx: TyCtxt<'_>, kind: DepKind) -> DepNode {\n         DepNode::from_def_path_hash(kind, tcx.def_path_hash(self))\n     }"}]}