{"sha": "5a4601fea56502e4f50df046c4205e678397599b", "node_id": "C_kwDOAAsO6NoAKDVhNDYwMWZlYTU2NTAyZTRmNTBkZjA0NmM0MjA1ZTY3ODM5NzU5OWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-17T17:37:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-19T16:26:16Z"}, "message": "use opaque_ty_origin_unchecked instead of destructuring HIR", "tree": {"sha": "52a9c4e46a1637598549df1db2de3a87838430f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a9c4e46a1637598549df1db2de3a87838430f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4601fea56502e4f50df046c4205e678397599b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4601fea56502e4f50df046c4205e678397599b", "html_url": "https://github.com/rust-lang/rust/commit/5a4601fea56502e4f50df046c4205e678397599b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4601fea56502e4f50df046c4205e678397599b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "html_url": "https://github.com/rust-lang/rust/commit/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee"}], "stats": {"total": 18, "additions": 5, "deletions": 13}, "files": [{"sha": "508903049db805e25941aea35347d7c2a3feac28", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a4601fea56502e4f50df046c4205e678397599b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4601fea56502e4f50df046c4205e678397599b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=5a4601fea56502e4f50df046c4205e678397599b", "patch": "@@ -227,17 +227,9 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                     let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n                     // Check that RPITs are only constrained in their outermost\n                     // function, otherwise report a mismatched types error.\n-                    if let hir::Node::Item(hir::Item {\n-                        kind:\n-                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n-                                origin:\n-                                    hir::OpaqueTyOrigin::AsyncFn(parent)\n-                                    | hir::OpaqueTyOrigin::FnReturn(parent),\n-                                ..\n-                            }),\n-                        ..\n-                    }) = infcx.tcx.hir().get_by_def_id(opaque_type_key.def_id.expect_local()) &&\n-                        parent.to_def_id() != body.source.def_id()\n+                    if let OpaqueTyOrigin::FnReturn(parent) | OpaqueTyOrigin::AsyncFn(parent)\n+                            = infcx.opaque_ty_origin_unchecked(opaque_type_key.def_id, hidden_type.span)\n+                        && parent.to_def_id() != body.source.def_id()\n                     {\n                         infcx\n                             .report_mismatched_types(\n@@ -247,7 +239,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                                         body.source.def_id().expect_local(),\n                                     ),\n                                 ),\n-                                infcx.tcx.mk_opaque(opaque_type_key.def_id, opaque_type_key.substs),\n+                                infcx.tcx.mk_opaque(opaque_type_key.def_id.to_def_id(), opaque_type_key.substs),\n                                 hidden_type.ty,\n                                 ty::error::TypeError::Mismatch,\n                             )"}, {"sha": "81c3bf5d441f847a3513948e433991a23a31a88e", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4601fea56502e4f50df046c4205e678397599b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4601fea56502e4f50df046c4205e678397599b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=5a4601fea56502e4f50df046c4205e678397599b", "patch": "@@ -433,7 +433,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"trace\")]\n-    fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n+    pub fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n         let origin = match self.tcx.hir().expect_item(def_id).kind {\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n             ref itemkind => {"}]}