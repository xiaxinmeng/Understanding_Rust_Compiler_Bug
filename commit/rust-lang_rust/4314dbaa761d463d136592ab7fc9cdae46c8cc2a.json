{"sha": "4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMTRkYmFhNzYxZDQ2M2QxMzY1OTJhYjdmYzljZGFlNDZjOGNjMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-04T01:06:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-04T01:06:25Z"}, "message": "Auto merge of #58090 - ljedrz:HirIdification_phase_2, r=Zoxc\n\nHirIdification: add key HirId methods\n\nThis is another PR in a series dedicated to `HirId`-ification, i.e. deprecating `ast::NodeId`s after the AST > HIR lowering process. The bigger proof of concept can be seen in #57578.\n\n**Phase 2**: add key `HirId` methods mirroring the `NodeId` ones.\n\nThese should be counterparts of the most widely used `Hir` methods using `NodeId`s. Note that this expands `hir::map::Definitions` with an additional `hir_to_def_index` map (with the intention of later removing `node_to_def_index`).\n\nAs a bonus there is also a small cleanup commit removing unnecessary calls to `node_to_hir_id` where `HirId` is already available.\n\nr? @Zoxc\nCc @varkor", "tree": {"sha": "29094006de0a323d69e8279b96b1237b1445351c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29094006de0a323d69e8279b96b1237b1445351c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "html_url": "https://github.com/rust-lang/rust/commit/4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6fac4225f4ea4881e9146f0a14f2cd36b8ac22f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fac4225f4ea4881e9146f0a14f2cd36b8ac22f", "html_url": "https://github.com/rust-lang/rust/commit/f6fac4225f4ea4881e9146f0a14f2cd36b8ac22f"}, {"sha": "272f4dfff6d0a6ae172e3efbef7d563ea088f6fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd", "html_url": "https://github.com/rust-lang/rust/commit/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd"}], "stats": {"total": 142, "additions": 125, "deletions": 17}, "files": [{"sha": "669c2998d1cb27bd694fcbc1cbea84113a6365bf", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -99,7 +99,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     }\n \n     fn stmt(&mut self, stmt: &hir::Stmt, pred: CFGIndex) -> CFGIndex {\n-        let hir_id = self.tcx.hir().node_to_hir_id(stmt.id);\n         let exit = match stmt.node {\n             hir::StmtKind::Local(ref local) => {\n                 let init_exit = self.opt_expr(&local.init, pred);\n@@ -113,7 +112,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.expr(&expr, pred)\n             }\n         };\n-        self.add_ast_node(hir_id.local_id, &[exit])\n+        self.add_ast_node(stmt.hir_id.local_id, &[exit])\n     }\n \n     fn pat(&mut self, pat: &hir::Pat, pred: CFGIndex) -> CFGIndex {"}, {"sha": "9c4fa9e1272878fbe63170974b9cd6e92656f851", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -1,5 +1,6 @@\n use super::*;\n use dep_graph::{DepGraph, DepKind, DepNodeIndex};\n+use hir;\n use hir::def_id::{LOCAL_CRATE, CrateNum};\n use hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc_data_structures::svh::Svh;\n@@ -28,6 +29,8 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     /// The parent of this node\n     parent_node: NodeId,\n \n+    parent_hir: hir::HirId,\n+\n     // These fields keep track of the currently relevant DepNodes during\n     // the visitor's traversal.\n     current_dep_node_owner: DefIndex,\n@@ -145,6 +148,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             source_map: sess.source_map(),\n             map: repeat(None).take(sess.current_node_id_count()).collect(),\n             parent_node: CRATE_NODE_ID,\n+            parent_hir: hir::CRATE_HIR_ID,\n             current_signature_dep_index: root_mod_sig_dep_index,\n             current_full_dep_index: root_mod_full_dep_index,\n             current_dep_node_owner: CRATE_DEF_INDEX,\n@@ -156,6 +160,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         };\n         collector.insert_entry(CRATE_NODE_ID, Entry {\n             parent: CRATE_NODE_ID,\n+            parent_hir: hir::CRATE_HIR_ID,\n             dep_node: root_mod_sig_dep_index,\n             node: Node::Crate,\n         });\n@@ -226,6 +231,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     fn insert(&mut self, span: Span, id: NodeId, node: Node<'hir>) {\n         let entry = Entry {\n             parent: self.parent_node,\n+            parent_hir: self.parent_hir,\n             dep_node: if self.currently_in_body {\n                 self.current_full_dep_index\n             } else {"}, {"sha": "4c622adefbdb15a6ad8ee3dd6496c0ac3206be8c", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -467,6 +467,21 @@ impl Definitions {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    #[inline]\n+    pub fn as_local_hir_id(&self, def_id: DefId) -> Option<hir::HirId> {\n+        if def_id.krate == LOCAL_CRATE {\n+            let hir_id = self.def_index_to_hir_id(def_id.index);\n+            if hir_id != hir::DUMMY_HIR_ID {\n+                Some(hir_id)\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     #[inline]\n     pub fn node_to_hir_id(&self, node_id: ast::NodeId) -> hir::HirId {\n         self.node_to_hir_id[node_id]"}, {"sha": "977ab05b20932e11749b3204e8e9a117b16bf106", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -40,6 +40,7 @@ pub const REGULAR_SPACE: DefIndexAddressSpace = DefIndexAddressSpace::High;\n #[derive(Copy, Clone, Debug)]\n pub struct Entry<'hir> {\n     parent: NodeId,\n+    parent_hir: HirId,\n     dep_node: DepNodeIndex,\n     node: Node<'hir>,\n }\n@@ -208,6 +209,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn read_by_hir_id(&self, hir_id: HirId) {\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.read(node_id);\n+    }\n+\n     #[inline]\n     pub fn definitions(&self) -> &'hir Definitions {\n         self.definitions\n@@ -224,6 +231,11 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn def_path_from_hir_id(&self, id: HirId) -> DefPath {\n+        self.def_path(self.local_def_id_from_hir_id(id))\n+    }\n+\n     pub fn def_path(&self, def_id: DefId) -> DefPath {\n         assert!(def_id.is_local());\n         self.definitions.def_path(def_id.index)\n@@ -237,6 +249,23 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    #[inline]\n+    pub fn local_def_id_from_hir_id(&self, hir_id: HirId) -> DefId {\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.opt_local_def_id(node_id).unwrap_or_else(|| {\n+            bug!(\"local_def_id_from_hir_id: no entry for `{:?}`, which has a map of `{:?}`\",\n+                 hir_id, self.find_entry(node_id))\n+        })\n+    }\n+\n+    // FIXME(@ljedrz): replace the NodeId variant\n+    #[inline]\n+    pub fn opt_local_def_id_from_hir_id(&self, hir_id: HirId) -> Option<DefId> {\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.definitions.opt_local_def_id(node_id)\n+    }\n+\n     #[inline]\n     pub fn opt_local_def_id(&self, node: NodeId) -> Option<DefId> {\n         self.definitions.opt_local_def_id(node)\n@@ -247,6 +276,12 @@ impl<'hir> Map<'hir> {\n         self.definitions.as_local_node_id(def_id)\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    #[inline]\n+    pub fn as_local_hir_id(&self, def_id: DefId) -> Option<HirId> {\n+        self.definitions.as_local_hir_id(def_id)\n+    }\n+\n     #[inline]\n     pub fn hir_to_node_id(&self, hir_id: HirId) -> NodeId {\n         self.hir_to_node_id[&hir_id]\n@@ -566,6 +601,12 @@ impl<'hir> Map<'hir> {\n         self.find(id).unwrap_or_else(|| bug!(\"couldn't find node id {} in the AST map\", id))\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn get_by_hir_id(&self, id: HirId) -> Node<'hir> {\n+        let node_id = self.hir_to_node_id(id);\n+        self.get(node_id)\n+    }\n+\n     pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {\n         self.as_local_node_id(id).map(|id| self.get(id)) // read recorded by `get`\n     }\n@@ -613,6 +654,12 @@ impl<'hir> Map<'hir> {\n         result\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn find_by_hir_id(&self, hir_id: HirId) -> Option<Node<'hir>> {\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.find(node_id)\n+    }\n+\n     /// Similar to `get_parent`; returns the parent node-id, or own `id` if there is\n     /// no parent. Note that the parent may be `CRATE_NODE_ID`, which is not itself\n     /// present in the map -- so passing the return value of get_parent_node to\n@@ -633,6 +680,13 @@ impl<'hir> Map<'hir> {\n         self.find_entry(id).and_then(|x| x.parent_node()).unwrap_or(id)\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn get_parent_node_by_hir_id(&self, id: HirId) -> HirId {\n+        let node_id = self.hir_to_node_id(id);\n+        let parent_node_id = self.get_parent_node(node_id);\n+        self.node_to_hir_id(parent_node_id)\n+    }\n+\n     /// Check if the node is an argument. An argument is a local variable whose\n     /// immediate parent is an item or a closure.\n     pub fn is_argument(&self, id: NodeId) -> bool {\n@@ -757,6 +811,13 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn get_parent_item(&self, id: HirId) -> HirId {\n+        let node_id = self.hir_to_node_id(id);\n+        let parent_node_id = self.get_parent(node_id);\n+        self.node_to_hir_id(parent_node_id)\n+    }\n+\n     /// Returns the `DefId` of `id`'s nearest module parent, or `id` itself if no\n     /// module parent is in this map.\n     pub fn get_module_parent(&self, id: NodeId) -> DefId {\n@@ -814,6 +875,12 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn expect_item_by_hir_id(&self, id: HirId) -> &'hir Item {\n+        let node_id = self.hir_to_node_id(id);\n+        self.expect_item(node_id)\n+    }\n+\n     pub fn expect_impl_item(&self, id: NodeId) -> &'hir ImplItem {\n         match self.find(id) {\n             Some(Node::ImplItem(item)) => item,\n@@ -960,13 +1027,28 @@ impl<'hir> Map<'hir> {\n         node_id_to_string(self, id, true)\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn hir_to_string(&self, id: HirId) -> String {\n+        hir_id_to_string(self, id, true)\n+    }\n+\n     pub fn node_to_user_string(&self, id: NodeId) -> String {\n         node_id_to_string(self, id, false)\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn hir_to_user_string(&self, id: HirId) -> String {\n+        hir_id_to_string(self, id, false)\n+    }\n+\n     pub fn node_to_pretty_string(&self, id: NodeId) -> String {\n         print::to_string(self, |s| s.print_node(self.get(id)))\n     }\n+\n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn hir_to_pretty_string(&self, id: HirId) -> String {\n+        print::to_string(self, |s| s.print_node(self.get_by_hir_id(id)))\n+    }\n }\n \n pub struct NodesMatchingSuffix<'a, 'hir:'a> {\n@@ -1310,6 +1392,12 @@ fn node_id_to_string(map: &Map<'_>, id: NodeId, include_id: bool) -> String {\n     }\n }\n \n+// FIXME(@ljedrz): replace the NodeId variant\n+fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n+    let node_id = map.hir_to_node_id(id);\n+    node_id_to_string(map, node_id, include_id)\n+}\n+\n pub fn describe_def(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<Def> {\n     if let Some(node_id) = tcx.hir().as_local_node_id(def_id) {\n         tcx.hir().describe_def(node_id)"}, {"sha": "ebaef4977f400b413507b88de9f6c0352511901a", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n \n             hir::TyKind::Rptr(ref lifetime, _) => {\n                 // the lifetime of the TyRptr\n-                let hir_id = self.tcx.hir().node_to_hir_id(lifetime.id);\n+                let hir_id = lifetime.hir_id;\n                 match (self.tcx.named_region(hir_id), self.bound_region) {\n                     // Find the index of the anonymous region that was part of the\n                     // error. We will then search the function parameters for a bound\n@@ -221,8 +221,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {\n-        let hir_id = self.tcx.hir().node_to_hir_id(lifetime.id);\n-        match (self.tcx.named_region(hir_id), self.bound_region) {\n+        match (self.tcx.named_region(lifetime.hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n             (Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)), ty::BrAnon(br_index)) => {\n                 if debruijn_index == self.current_index && anon_index == br_index {"}, {"sha": "db52cc3074b9a2c3d4b4808814051d2b59210d2e", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -840,7 +840,7 @@ fn resolve_pat<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, pat: &\n }\n \n fn resolve_stmt<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, stmt: &'tcx hir::Stmt) {\n-    let stmt_id = visitor.tcx.hir().node_to_hir_id(stmt.id).local_id;\n+    let stmt_id = stmt.hir_id.local_id;\n     debug!(\"resolve_stmt(stmt.id={:?})\", stmt_id);\n \n     // Every statement will clean up the temporaries created during"}, {"sha": "adb7e1fb3e32279c27c8568f9c63317057d50024", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -1,3 +1,4 @@\n+use hir;\n use hir::map::DefPathData;\n use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use ty::{self, DefIdTree, Ty, TyCtxt};\n@@ -76,6 +77,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.item_path_str(self.hir().local_def_id(id))\n     }\n \n+    // FIXME(@ljedrz): replace the NodeId variant\n+    pub fn hir_path_str(self, id: hir::HirId) -> String {\n+        self.item_path_str(self.hir().local_def_id_from_hir_id(id))\n+    }\n+\n     /// Returns a string identifying this def-id. This string is\n     /// suitable for user output. It always begins with a crate identifier.\n     pub fn absolute_item_path_str(self, def_id: DefId) -> String {"}, {"sha": "518ae978ae17adcbf2422c364bedd4ccc6e576da", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -46,7 +46,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 -> Vec<StmtRef<'tcx>> {\n     let mut result = vec![];\n     for (index, stmt) in stmts.iter().enumerate() {\n-        let hir_id = cx.tcx.hir().node_to_hir_id(stmt.id);\n+        let hir_id = stmt.hir_id;\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n         let stmt_span = StatementSpan(cx.tcx.hir().span(stmt.id));\n         match stmt.node {"}, {"sha": "8da0b6dcbeac3b36ea87c838b44491f817d88929", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -114,8 +114,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             tcx.hir().name(tcx.hir().as_local_node_id(def_id).unwrap()).as_interned_str()\n         };\n \n-        let hir_id = tcx.hir().node_to_hir_id(lifetime.id);\n-        let r = match tcx.named_region(hir_id) {\n+        let r = match tcx.named_region(lifetime.hir_id) {\n             Some(rl::Region::Static) => {\n                 tcx.types.re_static\n             }\n@@ -1145,8 +1144,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             self.ast_region_to_region(lifetime, None)\n         } else {\n             self.compute_object_lifetime_bound(span, existential_predicates).unwrap_or_else(|| {\n-                let hir_id = tcx.hir().node_to_hir_id(lifetime.id);\n-                if tcx.named_region(hir_id).is_some() {\n+                if tcx.named_region(lifetime.hir_id).is_some() {\n                     self.ast_region_to_region(lifetime, None)\n                 } else {\n                     self.re_infer(span, None).unwrap_or_else(|| {"}, {"sha": "9dc74c5d63a4e2f4eb24f2f1c4eb2ecf87ee0092", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -814,8 +814,7 @@ fn has_late_bound_regions<'a, 'tcx>(\n                 return;\n             }\n \n-            let hir_id = self.tcx.hir().node_to_hir_id(lt.id);\n-            match self.tcx.named_region(hir_id) {\n+            match self.tcx.named_region(lt.hir_id) {\n                 Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n                 Some(rl::Region::LateBound(debruijn, _, _))\n                 | Some(rl::Region::LateBoundAnon(debruijn, _)) if debruijn < self.outer_index => {}\n@@ -841,8 +840,7 @@ fn has_late_bound_regions<'a, 'tcx>(\n         };\n         for param in &generics.params {\n             if let GenericParamKind::Lifetime { .. } = param.kind {\n-                let hir_id = tcx.hir().node_to_hir_id(param.id);\n-                if tcx.is_late_bound(hir_id) {\n+                if tcx.is_late_bound(param.hir_id) {\n                     return Some(param.span);\n                 }\n             }"}, {"sha": "116e46df3c10a3915f6e4779f24fde1309163e2c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314dbaa761d463d136592ab7fc9cdae46c8cc2a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4314dbaa761d463d136592ab7fc9cdae46c8cc2a", "patch": "@@ -1210,8 +1210,7 @@ impl Lifetime {\n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &DocContext) -> Lifetime {\n         if self.id != ast::DUMMY_NODE_ID {\n-            let hir_id = cx.tcx.hir().node_to_hir_id(self.id);\n-            let def = cx.tcx.named_region(hir_id);\n+            let def = cx.tcx.named_region(self.hir_id);\n             match def {\n                 Some(rl::Region::EarlyBound(_, node_id, _)) |\n                 Some(rl::Region::LateBound(_, node_id, _)) |"}]}