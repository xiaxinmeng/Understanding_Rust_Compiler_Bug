{"sha": "35884fe16889b39d4be43cf8effc3bdf843c6f12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ODg0ZmUxNjg4OWIzOWQ0YmU0M2NmOGVmZmMzYmRmODQzYzZmMTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T01:23:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T19:57:12Z"}, "message": "parse extern consts", "tree": {"sha": "c9d96a9b030337918d88626ee48bb3c7bebb3060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d96a9b030337918d88626ee48bb3c7bebb3060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35884fe16889b39d4be43cf8effc3bdf843c6f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35884fe16889b39d4be43cf8effc3bdf843c6f12", "html_url": "https://github.com/rust-lang/rust/commit/35884fe16889b39d4be43cf8effc3bdf843c6f12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35884fe16889b39d4be43cf8effc3bdf843c6f12/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d2264463162291f5cb3391c98d7bc95ec17d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d2264463162291f5cb3391c98d7bc95ec17d87", "html_url": "https://github.com/rust-lang/rust/commit/f8d2264463162291f5cb3391c98d7bc95ec17d87"}], "stats": {"total": 142, "additions": 98, "deletions": 44}, "files": [{"sha": "e0db8606bc203148b37dcaa5d5814e729cfaf34e", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -683,6 +683,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n+                ForeignItemKind::Const(ref t, _) => {\n+                    // For recovery purposes.\n+                    let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n+                    hir::ForeignItemKind::Static(ty, Mutability::Not)\n+                }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"macro shouldn't exist here\"),\n             },"}, {"sha": "8efd50ad0987efbd559cf6c2641cc49c3e43632f", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -533,6 +533,20 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    fn error_foreign_const(&self, ident: Ident, span: Span) {\n+        self.err_handler()\n+            .struct_span_err(ident.span, \"extern items cannot be `const`\")\n+            .span_suggestion(\n+                span.with_hi(ident.span.lo()),\n+                \"try using a static value\",\n+                \"static \".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .span_label(self.current_extern_span(), \"in this `extern` block\")\n+            .note(MORE_EXTERN)\n+            .emit();\n+    }\n+\n     /// Reject C-varadic type unless the function is foreign,\n     /// or free and `unsafe extern \"C\"` semantically.\n     fn check_c_varadic_type(&self, fk: FnKind<'a>) {\n@@ -989,6 +1003,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ForeignItemKind::Static(_, _, body) => {\n                 self.check_foreign_kind_bodyless(fi.ident, \"static\", body.as_ref().map(|b| b.span));\n             }\n+            ForeignItemKind::Const(..) => {\n+                self.error_foreign_const(fi.ident, fi.span);\n+            }\n             ForeignItemKind::Macro(..) => {}\n         }\n "}, {"sha": "d4de2c937583db5ba44005bf7d444a9f76521fae", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -400,7 +400,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ForeignItemKind::TyAlias(..) => {\n                 gate_feature_post!(&self, extern_types, i.span, \"extern types are experimental\");\n             }\n-            ast::ForeignItemKind::Macro(..) => {}\n+            ast::ForeignItemKind::Macro(..) | ast::ForeignItemKind::Const(..) => {}\n         }\n \n         visit::walk_foreign_item(self, i)"}, {"sha": "410600e495778c395bb6689c25311ac3a569cf25", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -1023,6 +1023,9 @@ impl<'a> State<'a> {\n             ast::ForeignItemKind::Fn(sig, gen, body) => {\n                 self.print_fn_full(sig, item.ident, gen, &item.vis, body.as_deref(), &item.attrs);\n             }\n+            ast::ForeignItemKind::Const(ty, body) => {\n+                self.print_item_const(item.ident, None, ty, body.as_deref(), &item.vis);\n+            }\n             ast::ForeignItemKind::Static(ty, mutbl, body) => {\n                 self.print_item_const(item.ident, Some(*mutbl), ty, body.as_deref(), &item.vis);\n             }"}, {"sha": "5fcd72090ec87f88a37459aeff2414b0dcda160d", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -880,19 +880,12 @@ impl<'a> Parser<'a> {\n         } else if self.is_static_global() {\n             // FOREIGN STATIC ITEM\n             self.bump(); // `static`\n-            self.parse_item_foreign_static()?\n-        } else if self.token.is_keyword(kw::Const) {\n-            // Treat `const` as `static` for error recovery, but don't add it to expected tokens.\n-            self.bump(); // `const`\n-            self.struct_span_err(self.prev_span, \"extern items cannot be `const`\")\n-                .span_suggestion(\n-                    self.prev_span,\n-                    \"try using a static value\",\n-                    \"static\".to_owned(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n-            self.parse_item_foreign_static()?\n+            let mutbl = self.parse_mutability();\n+            let (ident, ty, expr) = self.parse_item_const_common(Some(mutbl))?;\n+            (ident, ForeignItemKind::Static(ty, mutbl, expr))\n+        } else if self.eat_keyword(kw::Const) {\n+            let (ident, ty, expr) = self.parse_item_const_common(None)?;\n+            (ident, ForeignItemKind::Const(ty, expr))\n         } else if self.isnt_macro_invocation() {\n             return Err(self.missing_assoc_item_kind_err(\"extern\", self.prev_span));\n         } else if self.token.is_path_start() {\n@@ -906,14 +899,6 @@ impl<'a> Parser<'a> {\n         Ok(P(self.mk_item(lo, ident, kind, vis, attrs)))\n     }\n \n-    /// Parses a static item from a foreign module.\n-    /// Assumes that the `static` keyword is already parsed.\n-    fn parse_item_foreign_static(&mut self) -> PResult<'a, (Ident, ForeignItemKind)> {\n-        let mutbl = self.parse_mutability();\n-        let (ident, ty, expr) = self.parse_item_const_common(Some(mutbl))?;\n-        Ok((ident, ForeignItemKind::Static(ty, mutbl, expr)))\n-    }\n-\n     /// Parses a type from a foreign module.\n     fn parse_item_foreign_type(&mut self) -> PResult<'a, (Ident, ForeignItemKind)> {\n         let (ident, kind) = self.parse_assoc_ty()?;"}, {"sha": "1f622b80e8e2ec3c33fb13f6e4708fe114a5da0c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -826,7 +826,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             ForeignItemKind::Fn(..) => {\n                 (Res::Def(DefKind::Fn, self.r.definitions.local_def_id(item.id)), ValueNS)\n             }\n-            ForeignItemKind::Static(..) => {\n+            ForeignItemKind::Static(..) | ForeignItemKind::Const(..) => {\n                 (Res::Def(DefKind::Static, self.r.definitions.local_def_id(item.id)), ValueNS)\n             }\n             ForeignItemKind::TyAlias(..) => {"}, {"sha": "68559c0446aed51fa23223cfbb1a20ad27a6165d", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -443,7 +443,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n             }\n-            ForeignItemKind::Static(..) => {\n+            ForeignItemKind::Const(..) | ForeignItemKind::Static(..) => {\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });"}, {"sha": "6a3abf4fbf5f342a94180b90a29c3940ae410f93", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -1534,7 +1534,7 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                     self.visit_ty(&ret_ty);\n                 }\n             }\n-            ast::ForeignItemKind::Static(ref ty, _, _) => {\n+            ast::ForeignItemKind::Const(ref ty, _) | ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 if let Some(var_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(var_data, DefData, item.span);\n                     self.dumper.dump_def(&access, var_data);"}, {"sha": "d244370ae2c11dfe44e640a22de524c04f1b30dd", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -151,7 +151,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.clone(), self),\n                 }))\n             }\n-            ast::ForeignItemKind::Static(ref ty, _, _) => {\n+            ast::ForeignItemKind::Const(ref ty, _) | ast::ForeignItemKind::Static(ref ty, _, _) => {\n                 filter!(self.span_utils, item.ident.span);\n \n                 let id = id_from_node_id(item.id, self);"}, {"sha": "3c68124ad40f7d9ed4e8247248a2d9d32be94cc8", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -792,6 +792,7 @@ impl Sig for ast::ForeignItem {\n \n                 Ok(Signature { text: text, defs: defs, refs: vec![] })\n             }\n+            ast::ForeignItemKind::Const(..) => Err(\"foreign const\"),\n             ast::ForeignItemKind::Macro(..) => Err(\"macro\"),\n         }\n     }"}, {"sha": "5041d43b16c087c878dd19c3b0906b74166d8964", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -2605,6 +2605,9 @@ pub type ForeignItem = Item<ForeignItemKind>;\n /// An item within an `extern` block.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ForeignItemKind {\n+    /// A constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n+    /// If `def` is parsed, then the constant is provided, and otherwise required.\n+    Const(P<Ty>, Option<P<Expr>>),\n     /// A static item (`static FOO: u8`).\n     Static(P<Ty>, Mutability, Option<P<Expr>>),\n     /// A function.\n@@ -2619,6 +2622,7 @@ impl ForeignItemKind {\n     pub fn descriptive_variant(&self) -> &str {\n         match *self {\n             ForeignItemKind::Fn(..) => \"foreign function\",\n+            ForeignItemKind::Const(..) => \"foreign const item\",\n             ForeignItemKind::Static(..) => \"foreign static item\",\n             ForeignItemKind::TyAlias(..) => \"foreign type\",\n             ForeignItemKind::Macro(..) => \"macro in foreign module\","}, {"sha": "ffc42340dba64a6605c975bda4affd62a390073d", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -1046,7 +1046,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n             visitor.visit_generics(generics);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        ForeignItemKind::Static(ty, _, body) => {\n+        ForeignItemKind::Const(ty, body) | ForeignItemKind::Static(ty, _, body) => {\n             visitor.visit_ty(ty);\n             visit_opt(body, |body| visitor.visit_expr(body));\n         }"}, {"sha": "5a21eb55528d05a9bf161e37db17da44e9aa971e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -534,7 +534,8 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n             let kind = FnKind::Fn(FnCtxt::Foreign, item.ident, sig, &item.vis, body.as_deref());\n             visitor.visit_fn(kind, item.span, item.id);\n         }\n-        ForeignItemKind::Static(ref typ, _, ref body) => {\n+        ForeignItemKind::Const(ref typ, ref body)\n+        | ForeignItemKind::Static(ref typ, _, ref body) => {\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_expr, body);\n         }"}, {"sha": "97e11381c6f7821aa1d5c81e77448216ce5f56c0", "filename": "src/test/ui/extern/extern-const.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -1,8 +1,14 @@\n error: extern items cannot be `const`\n-  --> $DIR/extern-const.rs:16:5\n+  --> $DIR/extern-const.rs:16:11\n    |\n+LL | extern \"C\" {\n+   | ---------- in this `extern` block\n LL |     const rust_dbg_static_mut: libc::c_int;\n-   |     ^^^^^ help: try using a static value: `static`\n+   |     ------^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: try using a static value: `static`\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n \n error: aborting due to previous error\n "}, {"sha": "d28b64142826cfffe6fea6f3481f6e3d98cef384", "filename": "src/test/ui/parser/foreign-const-semantic-fail.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -0,0 +1,8 @@\n+fn main() {}\n+\n+extern {\n+    const A: isize;\n+    //~^ ERROR extern items cannot be `const`\n+    const B: isize = 42;\n+    //~^ ERROR extern items cannot be `const`\n+}"}, {"sha": "799a795c5939a33ffa87e086189b1558105c4335", "filename": "src/test/ui/parser/foreign-const-semantic-fail.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -0,0 +1,27 @@\n+error: extern items cannot be `const`\n+  --> $DIR/foreign-const-semantic-fail.rs:4:11\n+   |\n+LL | extern {\n+   | ------ in this `extern` block\n+LL |     const A: isize;\n+   |     ------^\n+   |     |\n+   |     help: try using a static value: `static`\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: extern items cannot be `const`\n+  --> $DIR/foreign-const-semantic-fail.rs:6:11\n+   |\n+LL | extern {\n+   | ------ in this `extern` block\n+...\n+LL |     const B: isize = 42;\n+   |     ------^\n+   |     |\n+   |     help: try using a static value: `static`\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bacef8e71d62e4bfe8454c11dc58a2311650c8b5", "filename": "src/test/ui/parser/foreign-const-syntactic-pass.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35884fe16889b39d4be43cf8effc3bdf843c6f12/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-pass.rs?ref=35884fe16889b39d4be43cf8effc3bdf843c6f12", "patch": "@@ -0,0 +1,11 @@\n+// Syntactically, a `const` item inside an `extern { ... }` block is allowed.\n+\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+extern {\n+    const A: isize;\n+    const B: isize = 42;\n+}"}, {"sha": "71c22e62f8e4bd25bfadd34881106fec6033848b", "filename": "src/test/ui/parser/removed-syntax-extern-const.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-extern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-extern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-extern-const.rs?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1,6 +0,0 @@\n-extern {\n-    const i: isize;\n-    //~^ ERROR extern items cannot be `const`\n-}\n-\n-fn main() {}"}, {"sha": "2bccbd91452f62a7276305f9b3c7fbfdceb57533", "filename": "src/test/ui/parser/removed-syntax-extern-const.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-extern-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8d2264463162291f5cb3391c98d7bc95ec17d87/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-extern-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-extern-const.stderr?ref=f8d2264463162291f5cb3391c98d7bc95ec17d87", "patch": "@@ -1,8 +0,0 @@\n-error: extern items cannot be `const`\n-  --> $DIR/removed-syntax-extern-const.rs:2:5\n-   |\n-LL |     const i: isize;\n-   |     ^^^^^ help: try using a static value: `static`\n-\n-error: aborting due to previous error\n-"}]}