{"sha": "1f2585f4792dc6d390c67906d8bde4ac9cdef2e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMjU4NWY0NzkyZGM2ZDM5MGM2NzkwNmQ4YmRlNGFjOWNkZWYyZTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T01:01:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-31T01:01:20Z"}, "message": "Teach trans to access object fields.", "tree": {"sha": "9ee2d163228045d189727e161e0ff2c4eabcf46e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ee2d163228045d189727e161e0ff2c4eabcf46e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2585f4792dc6d390c67906d8bde4ac9cdef2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2585f4792dc6d390c67906d8bde4ac9cdef2e3", "html_url": "https://github.com/rust-lang/rust/commit/1f2585f4792dc6d390c67906d8bde4ac9cdef2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2585f4792dc6d390c67906d8bde4ac9cdef2e3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9676fb2d0ad8867aa90d946deb23fd6c5dd33bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/9676fb2d0ad8867aa90d946deb23fd6c5dd33bce", "html_url": "https://github.com/rust-lang/rust/commit/9676fb2d0ad8867aa90d946deb23fd6c5dd33bce"}], "stats": {"total": 114, "additions": 100, "deletions": 14}, "files": [{"sha": "7119fa11fd330568e8e2b46a361827c96d28f4f4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 100, "deletions": 14, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/1f2585f4792dc6d390c67906d8bde4ac9cdef2e3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2585f4792dc6d390c67906d8bde4ac9cdef2e3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1f2585f4792dc6d390c67906d8bde4ac9cdef2e3", "patch": "@@ -68,6 +68,7 @@ state type crate_ctxt = rec(session.session sess,\n                             hashmap[ast.def_id, @ast.item] items,\n                             hashmap[ast.def_id, @tag_info] tags,\n                             hashmap[@ty.t, ValueRef] tydescs,\n+                            vec[ast.obj_field] obj_fields,\n                             @glue_fns glues,\n                             namegen names,\n                             str path);\n@@ -77,6 +78,7 @@ state type fn_ctxt = rec(ValueRef llfn,\n                          mutable option.t[ValueRef] llself,\n                          mutable option.t[ValueRef] llretptr,\n                          hashmap[ast.def_id, ValueRef] llargs,\n+                         hashmap[ast.def_id, ValueRef] llobjfields,\n                          hashmap[ast.def_id, ValueRef] lllocals,\n                          hashmap[ast.def_id, ValueRef] lltydescs,\n                          @crate_ctxt ccx);\n@@ -1667,6 +1669,10 @@ fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt)\n                     check (cx.fcx.lllocals.contains_key(did));\n                     ret lval_mem(cx, cx.fcx.lllocals.get(did));\n                 }\n+                case (ast.def_obj_field(?did)) {\n+                    check (cx.fcx.llobjfields.contains_key(did));\n+                    ret lval_mem(cx, cx.fcx.llobjfields.get(did));\n+                }\n                 case (ast.def_fn(?did)) {\n                     check (cx.fcx.ccx.item_ids.contains_key(did));\n                     ret lval_val(cx, cx.fcx.ccx.item_ids.get(did));\n@@ -2382,15 +2388,17 @@ fn new_fn_ctxt(@crate_ctxt cx,\n \n     let ValueRef lltaskptr = llvm.LLVMGetParam(llfndecl, 0u);\n \n-    let hashmap[ast.def_id, ValueRef] lllocals = new_def_hash[ValueRef]();\n     let hashmap[ast.def_id, ValueRef] llargs = new_def_hash[ValueRef]();\n+    let hashmap[ast.def_id, ValueRef] llobjfields = new_def_hash[ValueRef]();\n+    let hashmap[ast.def_id, ValueRef] lllocals = new_def_hash[ValueRef]();\n     let hashmap[ast.def_id, ValueRef] lltydescs = new_def_hash[ValueRef]();\n \n     ret @rec(llfn=llfndecl,\n              lltaskptr=lltaskptr,\n              mutable llself=none[ValueRef],\n              mutable llretptr=none[ValueRef],\n              llargs=llargs,\n+             llobjfields=llobjfields,\n              lllocals=lllocals,\n              lltydescs=lltydescs,\n              ccx=cx);\n@@ -2434,16 +2442,31 @@ fn create_llargs_for_fn_args(&@fn_ctxt cx,\n     }\n }\n \n-\n // Recommended LLVM style, strange though this is, is to copy from args to\n // allocas immediately upon entry; this permits us to GEP into structures we\n // were passed and whatnot. Apparently mem2reg will mop up.\n \n-fn copy_args_to_allocas(@block_ctxt cx, vec[ast.arg] args,\n-                        vec[ty.arg] arg_tys) {\n+impure fn copy_args_to_allocas(@block_ctxt cx,\n+                               option.t[TypeRef] ty_self,\n+                               vec[ast.arg] args,\n+                               vec[ty.arg] arg_tys) {\n \n     let uint arg_n = 0u;\n \n+    alt (cx.fcx.llself) {\n+        case (some[ValueRef](?self_v)) {\n+            alt (ty_self) {\n+                case (some[TypeRef](?self_t)) {\n+                    auto alloca = cx.build.Alloca(self_t);\n+                    cx.build.Store(self_v, alloca);\n+                    cx.fcx.llself = some[ValueRef](alloca);\n+                }\n+            }\n+        }\n+        case (_) {\n+        }\n+    }\n+\n     for (ast.arg aarg in args) {\n         if (aarg.mode != ast.alias) {\n             auto arg_t = type_of_arg(cx.fcx.ccx, arg_tys.(arg_n));\n@@ -2481,19 +2504,66 @@ fn ret_ty_of_fn(ast.ann ann) -> @ty.t {\n     fail;\n }\n \n+fn create_llobjfields_for_fields(@block_ctxt cx, ValueRef llself) {\n+\n+    let vec[TypeRef] llfield_tys = vec();\n+\n+    for (ast.obj_field f in cx.fcx.ccx.obj_fields) {\n+        llfield_tys += node_type(cx.fcx.ccx, f.ann);\n+    }\n+\n+    let TypeRef llfields_ty = T_struct(llfield_tys);\n+    let TypeRef lltydesc_ty = T_ptr(T_tydesc());\n+    let TypeRef llobj_body_ty = T_struct(vec(lltydesc_ty,\n+                                             llfields_ty));\n+    let TypeRef llobj_box_ty = T_ptr(T_box(llobj_body_ty));\n+\n+    auto box_cell =\n+        cx.build.GEP(llself,\n+                     vec(C_int(0),\n+                         C_int(abi.obj_field_box)));\n+\n+    auto box_ptr = cx.build.Load(box_cell);\n+\n+    box_ptr = cx.build.PointerCast(box_ptr, llobj_box_ty);\n+\n+    auto obj_fields = cx.build.GEP(box_ptr,\n+                                   vec(C_int(0),\n+                                       C_int(abi.box_rc_field_body),\n+                                       C_int(abi.obj_body_elt_fields)));\n+\n+    let int i = 0;\n+    for (ast.obj_field f in cx.fcx.ccx.obj_fields) {\n+        let ValueRef llfield = cx.build.GEP(obj_fields,\n+                                            vec(C_int(0),\n+                                                C_int(i)));\n+        cx.fcx.llobjfields.insert(f.id, llfield);\n+        i += 1;\n+    }\n+}\n+\n impure fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n+                   option.t[TypeRef] ty_self,\n                    &vec[ast.ty_param] ty_params, &ast.ann ann) {\n \n     auto llfndecl = cx.item_ids.get(fid);\n     cx.item_names.insert(cx.path, llfndecl);\n \n     auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n-    create_llargs_for_fn_args(fcx, none[TypeRef], ret_ty_of_fn(ann),\n+    create_llargs_for_fn_args(fcx, ty_self, ret_ty_of_fn(ann),\n                               f.inputs, ty_params);\n-\n     auto bcx = new_top_block_ctxt(fcx);\n \n-    copy_args_to_allocas(bcx, f.inputs, arg_tys_of_fn(ann));\n+    copy_args_to_allocas(bcx, ty_self, f.inputs,\n+                         arg_tys_of_fn(ann));\n+\n+    alt (fcx.llself) {\n+        case (some[ValueRef](?llself)) {\n+            create_llobjfields_for_fields(bcx, llself);\n+        }\n+        case (_) {\n+        }\n+    }\n \n     auto res = trans_block(bcx, f.body);\n     if (!is_terminated(res.bcx)) {\n@@ -2507,7 +2577,15 @@ impure fn trans_vtbl(@crate_ctxt cx, TypeRef self_ty,\n                      &ast._obj ob,\n                      &vec[ast.ty_param] ty_params) -> ValueRef {\n     let vec[ValueRef] methods = vec();\n-    for (@ast.method m in ob.methods) {\n+\n+    fn meth_lteq(&@ast.method a, &@ast.method b) -> bool {\n+        ret _str.lteq(a.node.ident, b.node.ident);\n+    }\n+\n+    auto meths = std.sort.merge_sort[@ast.method](bind meth_lteq(_,_),\n+                                                  ob.methods);\n+\n+    for (@ast.method m in meths) {\n \n         auto llfnty = T_nil();\n         alt (node_ann_type(cx, m.node.ann).struct) {\n@@ -2518,11 +2596,15 @@ impure fn trans_vtbl(@crate_ctxt cx, TypeRef self_ty,\n             }\n         }\n \n-        let str s = cx.names.next(\"_rust_method\") + \".\" + cx.path;\n+        let @crate_ctxt mcx = @rec(path=cx.path + \".\" + m.node.ident\n+                                   with *cx);\n+\n+        let str s = cx.names.next(\"_rust_method\") + \".\" + mcx.path;\n         let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llfnty);\n         cx.item_ids.insert(m.node.id, llfn);\n \n-        trans_fn(cx, m.node.meth, m.node.id, ty_params, m.node.ann);\n+        trans_fn(mcx, m.node.meth, m.node.id, some[TypeRef](self_ty),\n+                 ty_params, m.node.ann);\n         methods += llfn;\n     }\n     auto vtbl = C_struct(methods);\n@@ -2556,7 +2638,7 @@ impure fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n     auto bcx = new_top_block_ctxt(fcx);\n \n     let vec[ty.arg] arg_tys = arg_tys_of_fn(ann);\n-    copy_args_to_allocas(bcx, fn_args, arg_tys);\n+    copy_args_to_allocas(bcx, none[TypeRef], fn_args, arg_tys);\n \n     auto llself_ty = type_of(cx, ret_ty_of_fn(ann));\n     auto pair = bcx.build.Alloca(llself_ty);\n@@ -2664,7 +2746,7 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n     auto bcx = new_top_block_ctxt(fcx);\n \n     auto arg_tys = arg_tys_of_fn(variant.ann);\n-    copy_args_to_allocas(bcx, fn_args, arg_tys);\n+    copy_args_to_allocas(bcx, none[TypeRef], fn_args, arg_tys);\n \n     auto info = cx.tags.get(tag_id);\n \n@@ -2707,10 +2789,11 @@ impure fn trans_item(@crate_ctxt cx, &ast.item item) {\n     alt (item.node) {\n         case (ast.item_fn(?name, ?f, ?tps, ?fid, ?ann)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n-            trans_fn(sub_cx, f, fid, tps, ann);\n+            trans_fn(sub_cx, f, fid, none[TypeRef], tps, ann);\n         }\n         case (ast.item_obj(?name, ?ob, ?tps, ?oid, ?ann)) {\n-            auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n+            auto sub_cx = @rec(path=cx.path + \".\" + name,\n+                               obj_fields=ob.fields with *cx);\n             trans_obj(sub_cx, ob, oid, tps, ann);\n         }\n         case (ast.item_mod(?name, ?m, _)) {\n@@ -2927,6 +3010,7 @@ fn trans_exit_task_glue(@crate_ctxt cx) {\n                     mutable llself=none[ValueRef],\n                     mutable llretptr=none[ValueRef],\n                     llargs=new_def_hash[ValueRef](),\n+                    llobjfields=new_def_hash[ValueRef](),\n                     lllocals=new_def_hash[ValueRef](),\n                     lltydescs=new_def_hash[ValueRef](),\n                     ccx=cx);\n@@ -3097,6 +3181,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output,\n     auto hasher = ty.hash_ty;\n     auto eqer = ty.eq_ty;\n     auto tydescs = map.mk_hashmap[@ty.t,ValueRef](hasher, eqer);\n+    let vec[ast.obj_field] obj_fields = vec();\n \n     auto cx = @rec(sess = sess,\n                    llmod = llmod,\n@@ -3108,6 +3193,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output,\n                    items = new_def_hash[@ast.item](),\n                    tags = new_def_hash[@tag_info](),\n                    tydescs = tydescs,\n+                   obj_fields = obj_fields,\n                    glues = glues,\n                    names = namegen(0),\n                    path = \"_rust\");"}]}