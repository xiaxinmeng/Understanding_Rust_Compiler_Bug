{"sha": "fafb18e0c45b60bacd08e2d8c8932401181dafbc", "node_id": "C_kwDOAAsO6NoAKGZhZmIxOGUwYzQ1YjYwYmFjZDA4ZTJkOGM4OTMyNDAxMTgxZGFmYmM", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-01T20:44:10Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-01T20:44:10Z"}, "message": "fixup warnings", "tree": {"sha": "bbf832f376d3c6a232f1753e88d56d7ad945c5aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbf832f376d3c6a232f1753e88d56d7ad945c5aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fafb18e0c45b60bacd08e2d8c8932401181dafbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzFiEEYSWD6p+RIeSP1N2eF81cKtrg00QFAmOx8JoVHGV6cmFzdXJl\nQG91dGxvb2suY29tAAoJEBfNXCra4NNE4NYQAKSWjIPWsZ+jGRVJk0krtQThfNF9\noPB67gxEtXOHhiZJGEvvJKeoy96G1m/EpAHygOfBGwrgDsAAXPdzdqCdeTvBXWR/\nL37sbWCGQTuKb5Qrtepkjol8qtRHTBUrjoByUSfojW6eAGAT+xzS03YR/LoFdSSZ\nk0D+WgtwSPUUaPQtXebnuUuMQQFGP9BIqz5AeT+HCJGBlY9k1zm0o2zjzv17PyxJ\nRJ/kBKQmm+LA6v+XGG1Qsd7aNXP7UsdpAprde7weva5NTpF0Bk5cjcFAh7BZ2Wy9\nNNgWPErqXGrb6/ya7Y4fvy/QNbT3XtRTEvbHrY8Z02cOKdr/xb8HhgcMAGm/CdAq\ny7PbuihlHtahvXqD8LkmaABihqEYMsGrt4wnk3YfWUtUs7O1C6g14bmVRnfyMZ5S\ncmC3wWY76CfxhyqnE/wqH4lZgd73PvJQuK0Jk7Ykj6kjP3t3WlbvLas1molmb11K\nX7VaKdp9mg0w3N1UEaGjAK6EgBT4L0sAPgRaO+n55sFXENpkUTrj5fld5G0gUCK0\nCAD+sMqoWEZ7NYT5c2WBfQv/DZVpc7L261vmecCp2o10vJmvSSUHsWWAhpn5awER\nLVW0mOwu7+khOPCO8SSN5RL/Qu3JrWyqY403KaIyCmPZGxyLpf75YEkhbJsl/Gh3\nk/vGigOcnkiluQDf\n=h+Vc\n-----END PGP SIGNATURE-----", "payload": "tree bbf832f376d3c6a232f1753e88d56d7ad945c5aa\nparent def1b7cb9ab99565cb3dc08d88035fd9cdb3c22a\nauthor Ezra Shaw <ezrasure@outlook.com> 1672605850 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1672605850 +1300\n\nfixup warnings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fafb18e0c45b60bacd08e2d8c8932401181dafbc", "html_url": "https://github.com/rust-lang/rust/commit/fafb18e0c45b60bacd08e2d8c8932401181dafbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fafb18e0c45b60bacd08e2d8c8932401181dafbc/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def1b7cb9ab99565cb3dc08d88035fd9cdb3c22a", "url": "https://api.github.com/repos/rust-lang/rust/commits/def1b7cb9ab99565cb3dc08d88035fd9cdb3c22a", "html_url": "https://github.com/rust-lang/rust/commit/def1b7cb9ab99565cb3dc08d88035fd9cdb3c22a"}], "stats": {"total": 125, "additions": 53, "deletions": 72}, "files": [{"sha": "ac87e4797c59594d705a9565d31728d62bef2705", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 52, "deletions": 71, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/fafb18e0c45b60bacd08e2d8c8932401181dafbc/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafb18e0c45b60bacd08e2d8c8932401181dafbc/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=fafb18e0c45b60bacd08e2d8c8932401181dafbc", "patch": "@@ -37,21 +37,29 @@ const IGNORE_UI_TEST_CHECK: &[&str] = &[\n     \"E0729\", \"E0789\",\n ];\n \n-pub fn check(root_path: &Path, search_paths: &[&Path], bad: &mut bool) {\n+macro_rules! verbose_print {\n+    ($verbose:expr, $($fmt:tt)*) => {\n+        if $verbose {\n+            println!(\"{}\", format_args!($($fmt)*));\n+        }\n+    };\n+}\n+\n+pub fn check(root_path: &Path, search_paths: &[&Path], verbose: bool, bad: &mut bool) {\n     let mut errors = Vec::new();\n \n     // Stage 1: create list\n-    let error_codes = extract_error_codes(root_path, &mut errors);\n+    let error_codes = extract_error_codes(root_path, &mut errors, verbose);\n     println!(\"Found {} error codes\", error_codes.len());\n \n     // Stage 2: check list has docs\n-    let no_longer_emitted = check_error_codes_docs(root_path, &error_codes, &mut errors);\n+    let no_longer_emitted = check_error_codes_docs(root_path, &error_codes, &mut errors, verbose);\n \n     // Stage 3: check list has UI tests\n-    check_error_codes_tests(root_path, &error_codes, &mut errors);\n+    check_error_codes_tests(root_path, &error_codes, &mut errors, verbose);\n \n     // Stage 4: check list is emitted by compiler\n-    check_error_codes_used(search_paths, &error_codes, &mut errors, &no_longer_emitted);\n+    check_error_codes_used(search_paths, &error_codes, &mut errors, &no_longer_emitted, verbose);\n \n     // Print any errors.\n     for error in errors {\n@@ -60,16 +68,14 @@ pub fn check(root_path: &Path, search_paths: &[&Path], bad: &mut bool) {\n }\n \n /// Stage 1: Parses a list of error codes from `error_codes.rs`.\n-fn extract_error_codes(root_path: &Path, errors: &mut Vec<String>) -> Vec<String> {\n+fn extract_error_codes(root_path: &Path, errors: &mut Vec<String>, verbose: bool) -> Vec<String> {\n     let path = root_path.join(Path::new(ERROR_CODES_PATH));\n     let file =\n         fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"failed to read `{path:?}`: {e}\"));\n \n     let mut error_codes = Vec::new();\n     let mut reached_undocumented_codes = false;\n \n-    let mut undocumented_count = 0;\n-\n     for line in file.lines() {\n         let line = line.trim();\n \n@@ -115,7 +121,7 @@ fn extract_error_codes(root_path: &Path, errors: &mut Vec<String>) -> Vec<String\n             }\n             .to_string();\n \n-            undocumented_count += 1;\n+            verbose_print!(verbose, \"warning: Error code `{}` is undocumented.\", err_code);\n \n             if error_codes.contains(&err_code) {\n                 errors.push(format!(\"Found duplicate error code: `{}`\", err_code));\n@@ -128,11 +134,6 @@ fn extract_error_codes(root_path: &Path, errors: &mut Vec<String>) -> Vec<String\n         }\n     }\n \n-    println!(\n-        \"WARNING: {} error codes are undocumented. This *will* become a hard error.\",\n-        undocumented_count\n-    );\n-\n     error_codes\n }\n \n@@ -141,13 +142,10 @@ fn check_error_codes_docs(\n     root_path: &Path,\n     error_codes: &[String],\n     errors: &mut Vec<String>,\n+    verbose: bool,\n ) -> Vec<String> {\n     let docs_path = root_path.join(Path::new(ERROR_DOCS_PATH));\n \n-    let mut emit_ignore_warning = 0;\n-    let mut emit_no_longer_warning = 0;\n-    let mut emit_no_code_warning = 0;\n-\n     let mut no_longer_emitted_codes = Vec::new();\n \n     walk(&docs_path, &mut |_| false, &mut |entry, contents| {\n@@ -179,14 +177,25 @@ fn check_error_codes_docs(\n         // `has_test.1` checks whether the error code has a proper (definitely tested) doctest.\n         let has_test = check_explanation_has_doctest(&contents, &err_code);\n         if has_test.2 {\n-            emit_ignore_warning += 1;\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{err_code}` uses the ignore header. This should not be used, add the error code to the \\\n+                `IGNORE_DOCTEST_CHECK` constant instead.\"\n+            );\n         }\n         if has_test.3 {\n             no_longer_emitted_codes.push(err_code.to_owned());\n-            emit_no_longer_warning += 1;\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{err_code}` is no longer emitted and should be removed entirely.\"\n+            );\n         }\n         if !has_test.0 {\n-            emit_no_code_warning += 1;\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{err_code}` doesn't have a code example, all error codes are expected to have one \\\n+                (even if untested).\"\n+            );\n         }\n \n         let test_ignored = IGNORE_DOCTEST_CHECK.contains(&err_code);\n@@ -206,25 +215,6 @@ fn check_error_codes_docs(\n         }\n     });\n \n-    if emit_ignore_warning > 0 {\n-        println!(\n-            \"WARNING: {emit_ignore_warning} error codes use the ignore header. This should not be used, add the error codes to the \\\n-            `IGNORE_DOCTEST_CHECK` constant instead. This *will* become a hard error.\"\n-        );\n-    }\n-    if emit_no_code_warning > 0 {\n-        println!(\n-            \"WARNING: {emit_ignore_warning} error codes don't have a code example, all error codes are expected \\\n-            to have one (even if untested). This *will* become a hard error.\"\n-        );\n-    }\n-    if emit_no_longer_warning > 0 {\n-        println!(\n-            \"WARNING: {emit_no_longer_warning} error codes are no longer emitted and should be removed entirely. \\\n-            This *will* become a hard error.\"\n-        );\n-    }\n-\n     no_longer_emitted_codes\n }\n \n@@ -266,18 +256,22 @@ fn check_explanation_has_doctest(explanation: &str, err_code: &str) -> (bool, bo\n }\n \n // Stage 3: Checks that each error code has a UI test in the correct directory\n-fn check_error_codes_tests(root_path: &Path, error_codes: &[String], errors: &mut Vec<String>) {\n+fn check_error_codes_tests(\n+    root_path: &Path,\n+    error_codes: &[String],\n+    errors: &mut Vec<String>,\n+    verbose: bool,\n+) {\n     let tests_path = root_path.join(Path::new(ERROR_TESTS_PATH));\n \n-    // Some warning counters, this whole thing is clunky but'll be removed eventually.\n-    let mut no_ui_test = 0;\n-    let mut no_error_code_in_test = 0;\n-\n     for code in error_codes {\n         let test_path = tests_path.join(format!(\"{}.stderr\", code));\n \n         if !test_path.exists() && !IGNORE_UI_TEST_CHECK.contains(&code.as_str()) {\n-            no_ui_test += 1;\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{code}` needs to have at least one UI test in the `src/test/ui/error-codes/` directory`!\"\n+            );\n             continue;\n         }\n         if IGNORE_UI_TEST_CHECK.contains(&code.as_str()) {\n@@ -292,8 +286,9 @@ fn check_error_codes_tests(root_path: &Path, error_codes: &[String], errors: &mu\n         let file = match fs::read_to_string(&test_path) {\n             Ok(file) => file,\n             Err(err) => {\n-                println!(\n-                    \"WARNING: Failed to read UI test file (`{}`) for `{code}` but the file exists. The test is assumed to work:\\n{err}\",\n+                verbose_print!(\n+                    verbose,\n+                    \"warning: Failed to read UI test file (`{}`) for `{code}` but the file exists. The test is assumed to work:\\n{err}\",\n                     test_path.display()\n                 );\n                 continue;\n@@ -314,22 +309,12 @@ fn check_error_codes_tests(root_path: &Path, error_codes: &[String], errors: &mu\n         }\n \n         if !found_code {\n-            no_error_code_in_test += 1;\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code {code}`` has a UI test file, but doesn't contain its own error code!\"\n+            );\n         }\n     }\n-\n-    if no_error_code_in_test > 0 {\n-        println!(\n-            \"WARNING: {no_error_code_in_test} error codes have a UI test file, but don't contain their own error code!\"\n-        );\n-    }\n-\n-    if no_ui_test > 0 {\n-        println!(\n-            \"WARNING: {no_ui_test} error codes need to have at least one UI test in the `src/test/ui/error-codes/` directory`! \\\n-            This *will* become a hard error.\"\n-        );\n-    }\n }\n \n /// Stage 4: Search `compiler/` and ensure that every error code is actually used by the compiler and that no undocumented error codes exist.\n@@ -338,6 +323,7 @@ fn check_error_codes_used(\n     error_codes: &[String],\n     errors: &mut Vec<String>,\n     no_longer_emitted: &[String],\n+    verbose: bool,\n ) {\n     // We want error codes which match the following cases:\n     //\n@@ -380,21 +366,16 @@ fn check_error_codes_used(\n         }\n     });\n \n-    let mut used_when_shouldnt = 0;\n-\n     for code in error_codes {\n         if !found_codes.contains(code) && !no_longer_emitted.contains(code) {\n             errors.push(format!(\"Error code `{code}` exists, but is not emitted by the compiler!\"))\n         }\n \n         if found_codes.contains(code) && no_longer_emitted.contains(code) {\n-            used_when_shouldnt += 1;\n+            verbose_print!(\n+                verbose,\n+                \"warning: Error code `{code}` is used when it's marked as \\\"no longer emitted\\\"\"\n+            );\n         }\n     }\n-\n-    if used_when_shouldnt > 0 {\n-        println!(\n-            \"WARNING: {used_when_shouldnt} error codes are used when they are marked as \\\"no longer emitted\\\"\"\n-        );\n-    }\n }"}, {"sha": "a7b7cc9fa6c595faafa7a8047aee8ea5d78e47d3", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fafb18e0c45b60bacd08e2d8c8932401181dafbc/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fafb18e0c45b60bacd08e2d8c8932401181dafbc/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=fafb18e0c45b60bacd08e2d8c8932401181dafbc", "patch": "@@ -80,7 +80,7 @@ fn main() {\n         check!(mir_opt_tests, &src_path, bless);\n \n         // Checks that only make sense for the compiler.\n-        check!(error_codes, &root_path, &[&compiler_path, &librustdoc_path]);\n+        check!(error_codes, &root_path, &[&compiler_path, &librustdoc_path], verbose);\n \n         // Checks that only make sense for the std libs.\n         check!(pal, &library_path);"}]}