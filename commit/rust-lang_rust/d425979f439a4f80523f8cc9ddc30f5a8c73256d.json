{"sha": "d425979f439a4f80523f8cc9ddc30f5a8c73256d", "node_id": "C_kwDOAAsO6NoAKGQ0MjU5NzlmNDM5YTRmODA1MjNmOGNjOWRkYzMwZjVhOGM3MzI1NmQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-27T10:05:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-27T10:05:35Z"}, "message": "Rollup merge of #99783 - notriddle:notriddle/clean-trait-removal, r=GuillaumeGomez\n\nrustdoc: remove Clean trait impls for more items\n\nFollow up to #99638 and\t#99672", "tree": {"sha": "503082d8fe9f6b9937b8c686b84991cd87f7777d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503082d8fe9f6b9937b8c686b84991cd87f7777d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d425979f439a4f80523f8cc9ddc30f5a8c73256d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4Q3vCRBK7hj4Ov3rIwAA6lYIAAB0WCqEvX6HIxX91dtshY+x\nU25E/ZA+I8PoAOb5QfLEOf8WqKKniO8hrhFgQ2iUF/7bqnmsHNg16iMqWmRq7MV4\n3kqW9AgYj4ppKeCaBvv4xnYovmOctxCxWfPe9/51kTRDY3felHwIJjwH42rrTd2K\nqv4QHAPIM6Y0La03HdKYAChnTDGD1vlPO466oMDTT4A2gEoZZUwTTI78M+oHBiDi\ngUMANYZQ9L98EBHSMSjCTwQqWgsLqXiYDBP2Mg9yoC8W0wYCe9P1dSJpWJyohJJk\nxIxYQuRqPxwAgKN48bVa0sE18iA4zuOrtek/1d9pLT43pnIevEyfCtI96JiDTLg=\n=6flX\n-----END PGP SIGNATURE-----\n", "payload": "tree 503082d8fe9f6b9937b8c686b84991cd87f7777d\nparent faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1\nparent 9dcf1d9c1a5184f861c299f4e793169445460a24\nauthor Yuki Okushi <jtitor@2k36.org> 1658916335 +0900\ncommitter GitHub <noreply@github.com> 1658916335 +0900\n\nRollup merge of #99783 - notriddle:notriddle/clean-trait-removal, r=GuillaumeGomez\n\nrustdoc: remove Clean trait impls for more items\n\nFollow up to #99638 and\t#99672\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d425979f439a4f80523f8cc9ddc30f5a8c73256d", "html_url": "https://github.com/rust-lang/rust/commit/d425979f439a4f80523f8cc9ddc30f5a8c73256d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d425979f439a4f80523f8cc9ddc30f5a8c73256d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1", "html_url": "https://github.com/rust-lang/rust/commit/faa6f6b159c2148bf09e740cb4868bf5dc0c1fb1"}, {"sha": "9dcf1d9c1a5184f861c299f4e793169445460a24", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dcf1d9c1a5184f861c299f4e793169445460a24", "html_url": "https://github.com/rust-lang/rust/commit/9dcf1d9c1a5184f861c299f4e793169445460a24"}], "stats": {"total": 119, "additions": 61, "deletions": 58}, "files": [{"sha": "2f3ca41723d8558ff9c3570576103d4dee5571f2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 61, "deletions": 58, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/d425979f439a4f80523f8cc9ddc30f5a8c73256d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d425979f439a4f80523f8cc9ddc30f5a8c73256d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d425979f439a4f80523f8cc9ddc30f5a8c73256d", "patch": "@@ -327,10 +327,12 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n         let bound_predicate = self.kind();\n         match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(pred) => bound_predicate.rebind(pred).clean(cx),\n-            ty::PredicateKind::RegionOutlives(pred) => pred.clean(cx),\n-            ty::PredicateKind::TypeOutlives(pred) => pred.clean(cx),\n-            ty::PredicateKind::Projection(pred) => Some(pred.clean(cx)),\n+            ty::PredicateKind::Trait(pred) => {\n+                clean_poly_trait_predicate(bound_predicate.rebind(pred), cx)\n+            }\n+            ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred, cx),\n+            ty::PredicateKind::TypeOutlives(pred) => clean_type_outlives_predicate(pred, cx),\n+            ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n             ty::PredicateKind::ConstEvaluatable(..) => None,\n             ty::PredicateKind::WellFormed(..) => None,\n \n@@ -344,57 +346,56 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::PolyTraitPredicate<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n-        if self.skip_binder().constness == ty::BoundConstness::ConstIfConst\n-            && Some(self.skip_binder().def_id()) == cx.tcx.lang_items().destruct_trait()\n-        {\n-            return None;\n-        }\n-\n-        let poly_trait_ref = self.map_bound(|pred| pred.trait_ref);\n-        Some(WherePredicate::BoundPredicate {\n-            ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n-            bounds: vec![poly_trait_ref.clean(cx)],\n-            bound_params: Vec::new(),\n-        })\n+fn clean_poly_trait_predicate<'tcx>(\n+    pred: ty::PolyTraitPredicate<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n+    if pred.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+        && Some(pred.skip_binder().def_id()) == cx.tcx.lang_items().destruct_trait()\n+    {\n+        return None;\n     }\n-}\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>>\n-    for ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>\n-{\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        let ty::OutlivesPredicate(a, b) = self;\n+    let poly_trait_ref = pred.map_bound(|pred| pred.trait_ref);\n+    Some(WherePredicate::BoundPredicate {\n+        ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n+        bounds: vec![poly_trait_ref.clean(cx)],\n+        bound_params: Vec::new(),\n+    })\n+}\n \n-        if a.is_empty() && b.is_empty() {\n-            return None;\n-        }\n+fn clean_region_outlives_predicate<'tcx>(\n+    pred: ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    let ty::OutlivesPredicate(a, b) = pred;\n \n-        Some(WherePredicate::RegionPredicate {\n-            lifetime: a.clean(cx).expect(\"failed to clean lifetime\"),\n-            bounds: vec![GenericBound::Outlives(b.clean(cx).expect(\"failed to clean bounds\"))],\n-        })\n+    if a.is_empty() && b.is_empty() {\n+        return None;\n     }\n-}\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>>\n-    for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>\n-{\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        let ty::OutlivesPredicate(ty, lt) = self;\n+    Some(WherePredicate::RegionPredicate {\n+        lifetime: a.clean(cx).expect(\"failed to clean lifetime\"),\n+        bounds: vec![GenericBound::Outlives(b.clean(cx).expect(\"failed to clean bounds\"))],\n+    })\n+}\n \n-        if lt.is_empty() {\n-            return None;\n-        }\n+fn clean_type_outlives_predicate<'tcx>(\n+    pred: ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    let ty::OutlivesPredicate(ty, lt) = pred;\n \n-        Some(WherePredicate::BoundPredicate {\n-            ty: clean_middle_ty(*ty, cx, None),\n-            bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))],\n-            bound_params: Vec::new(),\n-        })\n+    if lt.is_empty() {\n+        return None;\n     }\n+\n+    Some(WherePredicate::BoundPredicate {\n+        ty: clean_middle_ty(ty, cx, None),\n+        bounds: vec![GenericBound::Outlives(lt.clean(cx).expect(\"failed to clean lifetimes\"))],\n+        bound_params: Vec::new(),\n+    })\n }\n \n impl<'tcx> Clean<'tcx, Term> for ty::Term<'tcx> {\n@@ -418,10 +419,14 @@ impl<'tcx> Clean<'tcx, Term> for hir::Term<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, WherePredicate> for ty::ProjectionPredicate<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> WherePredicate {\n-        let ty::ProjectionPredicate { projection_ty, term } = self;\n-        WherePredicate::EqPredicate { lhs: projection_ty.clean(cx), rhs: term.clean(cx) }\n+fn clean_projection_predicate<'tcx>(\n+    pred: ty::ProjectionPredicate<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> WherePredicate {\n+    let ty::ProjectionPredicate { projection_ty, term } = pred;\n+    WherePredicate::EqPredicate {\n+        lhs: clean_projection(projection_ty, cx, None),\n+        rhs: term.clean(cx),\n     }\n }\n \n@@ -447,12 +452,6 @@ fn clean_projection<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Type> for ty::ProjectionTy<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Type {\n-        clean_projection(*self, cx, None)\n-    }\n-}\n-\n fn compute_should_show_cast(self_def_id: Option<DefId>, trait_: &Path, self_type: &Type) -> bool {\n     !trait_.segments.is_empty()\n         && self_def_id\n@@ -734,8 +733,12 @@ fn clean_ty_generics<'tcx>(\n                             .filter(|b| !b.is_sized_bound(cx)),\n                     );\n \n-                    let proj = projection\n-                        .map(|p| (p.skip_binder().projection_ty.clean(cx), p.skip_binder().term));\n+                    let proj = projection.map(|p| {\n+                        (\n+                            clean_projection(p.skip_binder().projection_ty, cx, None),\n+                            p.skip_binder().term,\n+                        )\n+                    });\n                     if let Some(((_, trait_did, name), rhs)) = proj\n                         .as_ref()\n                         .and_then(|(lhs, rhs): &(Type, _)| Some((lhs.projection()?, rhs)))"}]}