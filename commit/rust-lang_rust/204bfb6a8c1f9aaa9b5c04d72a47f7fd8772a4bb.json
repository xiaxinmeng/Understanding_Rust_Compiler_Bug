{"sha": "204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "node_id": "C_kwDOAAsO6NoAKDIwNGJmYjZhOGMxZjlhYWE5YjVjMDRkNzJhNDdmN2ZkODc3MmE0YmI", "commit": {"author": {"name": "DonoughLiu", "email": "ldm2993593805@163.com", "date": "2023-06-09T19:21:39Z"}, "committer": {"name": "DonoughLiu", "email": "ldm2993593805@163.com", "date": "2023-06-09T19:39:24Z"}, "message": "Support 128-bit enum variant in debuginfo codegen", "tree": {"sha": "f0b12fd79eb83e8cd45f5401c4357d7e01e7c4f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b12fd79eb83e8cd45f5401c4357d7e01e7c4f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "html_url": "https://github.com/rust-lang/rust/commit/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397641f3bd4f4211d0a1e9ada8d477bf495735b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/397641f3bd4f4211d0a1e9ada8d477bf495735b2", "html_url": "https://github.com/rust-lang/rust/commit/397641f3bd4f4211d0a1e9ada8d477bf495735b2"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "b62f4676f70b6c13a1265f50898a47a8f1c53b6c", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "patch": "@@ -108,6 +108,10 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.const_uint(self.type_u64(), i)\n     }\n \n+    fn const_u128(&self, i: u128) -> RValue<'gcc> {\n+        self.const_uint_big(self.type_u128(), i)\n+    }\n+\n     fn const_usize(&self, i: u64) -> RValue<'gcc> {\n         let bit_size = self.data_layout().pointer_size.bits();\n         if bit_size < 64 {\n@@ -254,7 +258,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         // SIMD builtins require a constant value.\n         self.bitcast_if_needed(value, typ)\n     }\n-    \n+\n     fn const_ptr_byte_offset(&self, base_addr: Self::Value, offset: abi::Size) -> Self::Value {\n         self.context.new_array_access(None, base_addr, self.const_usize(offset.bytes())).get_address(None)\n     }"}, {"sha": "a2db59bd6c47be7a09f63f7ab66a2976558f6419", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "patch": "@@ -168,6 +168,10 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.const_uint(self.type_i64(), i)\n     }\n \n+    fn const_u128(&self, i: u128) -> &'ll Value {\n+        self.const_uint_big(self.type_i128(), i)\n+    }\n+\n     fn const_usize(&self, i: u64) -> &'ll Value {\n         let bit_size = self.data_layout().pointer_size.bits();\n         if bit_size < 64 {"}, {"sha": "bede63373b1b09ed4ddaf9a78e1da7f6ddd086d3", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "patch": "@@ -429,7 +429,7 @@ pub fn type_di_node<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll D\n         return existing_di_node;\n     }\n \n-    debug!(\"type_di_node: {:?}\", t);\n+    debug!(\"type_di_node: {:?} kind: {:?}\", t, t.kind());\n \n     let DINodeCreationResult { di_node, already_stored_in_typemap } = match *t.kind() {\n         ty::Never | ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) => {"}, {"sha": "666b9762f5a76e900a0a5b6f7d30ad6c5c011c3d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/native.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fnative.rs?ref=204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "patch": "@@ -412,13 +412,7 @@ fn build_enum_variant_member_di_node<'ll, 'tcx>(\n             enum_type_and_layout.size.bits(),\n             enum_type_and_layout.align.abi.bits() as u32,\n             Size::ZERO.bits(),\n-            discr_value.opt_single_val().map(|value| {\n-                // NOTE(eddyb) do *NOT* remove this assert, until\n-                // we pass the full 128-bit value to LLVM, otherwise\n-                // truncation will be silent and remain undetected.\n-                assert_eq!(value as u64 as u128, value);\n-                cx.const_u64(value as u64)\n-            }),\n+            discr_value.opt_single_val().map(|value| cx.const_u128(value)),\n             DIFlags::FlagZero,\n             variant_member_info.variant_struct_type_di_node,\n         )"}, {"sha": "d6e9bfce1a4fc86cb6bb93f1a5239f9840ef4893", "filename": "compiler/rustc_codegen_ssa/src/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fconsts.rs?ref=204bfb6a8c1f9aaa9b5c04d72a47f7fd8772a4bb", "patch": "@@ -15,6 +15,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_i32(&self, i: i32) -> Self::Value;\n     fn const_u32(&self, i: u32) -> Self::Value;\n     fn const_u64(&self, i: u64) -> Self::Value;\n+    fn const_u128(&self, i: u128) -> Self::Value;\n     fn const_usize(&self, i: u64) -> Self::Value;\n     fn const_u8(&self, i: u8) -> Self::Value;\n     fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;"}]}