{"sha": "5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "node_id": "C_kwDOAAsO6NoAKDU2MzNlODYzYmQ5YjYxMzBiZTBiZWYzZmZjZWI2ZTFiY2EwZWJiNTY", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-05-16T04:27:31Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-09-15T19:06:45Z"}, "message": "Remove feature gate from let else suggestion\n\nThe let else suggestion added by 0d92752b8aac53e033541d04fc7d9677d8bca227\ndoes not need a feature gate any more.", "tree": {"sha": "cefa61a65595b2b0f10836a8c9bcf2c7c2e88bbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cefa61a65595b2b0f10836a8c9bcf2c7c2e88bbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "html_url": "https://github.com/rust-lang/rust/commit/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bca3cf7e86b522f58d9a60b4d1c29a34f9483e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca3cf7e86b522f58d9a60b4d1c29a34f9483e7e", "html_url": "https://github.com/rust-lang/rust/commit/bca3cf7e86b522f58d9a60b4d1c29a34f9483e7e"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "d45b886903bbf757464894a79d4fb58504bc14fa", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -491,8 +491,8 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                     err.span_suggestion_verbose(\n                         semi_span.shrink_to_lo(),\n                         &format!(\n-                            \"alternatively, on nightly, you might want to use \\\n-                             `#![feature(let_else)]` to handle the variant{} that {} matched\",\n+                            \"alternatively, you might want to use \\\n+                             let else to handle the variant{} that {} matched\",\n                             pluralize!(witnesses.len()),\n                             match witnesses.len() {\n                                 1 => \"isn't\","}, {"sha": "adf782743680585351833aca7b4d6dcf872307dc", "filename": "src/test/ui/empty/empty-never-array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-never-array.stderr?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -18,7 +18,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let u = if let Helper::U(u) = Helper::T(t, []) { u } else { todo!() };\n    |     ++++++++++                                     ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Helper::U(u) = Helper::T(t, []) else { todo!() };\n    |                                         ++++++++++++++++"}, {"sha": "de8e6bac486c1238b985e7b76b0c5ddcd1d59722", "filename": "src/test/ui/error-codes/E0005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0005.stderr?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -19,7 +19,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let y = if let Some(y) = x { y } else { todo!() };\n    |     ++++++++++                 ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Some(y) = x else { todo!() };\n    |                     ++++++++++++++++"}, {"sha": "5ced344f13f38b510154bea9a586113f923a3fe8", "filename": "src/test/ui/feature-gates/feature-gate-exhaustive-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exhaustive-patterns.stderr?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -19,7 +19,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let _x = if let Ok(_x) = foo() { _x } else { todo!() };\n    |     +++++++++++                    +++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Ok(_x) = foo() else { todo!() };\n    |                        ++++++++++++++++"}, {"sha": "20f2f09500aa213cbcad6d46cc6d4ce021d46689", "filename": "src/test/ui/pattern/usefulness/issue-31561.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -21,7 +21,7 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     let y = if let Thing::Foo(y) = Thing::Foo(1) { y } else { todo!() };\n    |     ++++++++++                                   ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variants that aren't matched\n+help: alternatively, you might want to use let else to handle the variants that aren't matched\n    |\n LL |     let Thing::Foo(y) = Thing::Foo(1) else { todo!() };\n    |                                       ++++++++++++++++"}, {"sha": "678c9b2ab58c3df7d42a7a249f81512832a1fe79", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-defined-here.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-defined-here.stderr?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -187,7 +187,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let _x = if let Opt::Some(ref _x) = e { _x } else { todo!() };\n    |     +++++++++++                           +++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Opt::Some(ref _x) = e else { todo!() };\n    |                               ++++++++++++++++"}, {"sha": "321ee0a36942ed3e7482d71e55a213fdd7fbe2f6", "filename": "src/test/ui/recursion/recursive-types-are-not-uninhabited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-types-are-not-uninhabited.stderr?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -19,7 +19,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let x = if let Ok(x) = res { x } else { todo!() };\n    |     ++++++++++                 ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Ok(x) = res else { todo!() };\n    |                     ++++++++++++++++"}, {"sha": "32f287a18188c33c7fb8964d309c2aa993c5c10e", "filename": "src/test/ui/uninhabited/uninhabited-irrefutable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-irrefutable.stderr?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -18,7 +18,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let (_y, _z) = if let Foo::D(_y, _z) = x { (_y, _z) } else { todo!() };\n    |     +++++++++++++++++                        +++++++++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Foo::D(_y, _z) = x else { todo!() };\n    |                            ++++++++++++++++"}, {"sha": "c7882963407f707b03e986b06fb2ca70f430ebb1", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5633e863bd9b6130be0bef3ffceb6e1bca0ebb56/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=5633e863bd9b6130be0bef3ffceb6e1bca0ebb56", "patch": "@@ -122,7 +122,7 @@ help: you might want to use `if let` to ignore the variant that isn't matched\n    |\n LL |     let x = if let Ok(x) = x { x } else { todo!() };\n    |     ++++++++++               ++++++++++++++++++++++\n-help: alternatively, on nightly, you might want to use `#![feature(let_else)]` to handle the variant that isn't matched\n+help: alternatively, you might want to use let else to handle the variant that isn't matched\n    |\n LL |     let Ok(x) = x else { todo!() };\n    |                   ++++++++++++++++"}]}