{"sha": "81533ff737f2d71c7518188b71fbafd73e0d1434", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNTMzZmY3MzdmMmQ3MWM3NTE4MTg4YjcxZmJhZmQ3M2UwZDE0MzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-12T00:31:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T23:33:06Z"}, "message": "add pass to check that unsafe fns cannot be used as values", "tree": {"sha": "d54f0bdfb58697031e4d92dab2bce94ada1cd871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d54f0bdfb58697031e4d92dab2bce94ada1cd871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81533ff737f2d71c7518188b71fbafd73e0d1434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81533ff737f2d71c7518188b71fbafd73e0d1434", "html_url": "https://github.com/rust-lang/rust/commit/81533ff737f2d71c7518188b71fbafd73e0d1434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81533ff737f2d71c7518188b71fbafd73e0d1434/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e39db5a100b5c65f50b658362a5796ae6b2a5411", "url": "https://api.github.com/repos/rust-lang/rust/commits/e39db5a100b5c65f50b658362a5796ae6b2a5411", "html_url": "https://github.com/rust-lang/rust/commit/e39db5a100b5c65f50b658362a5796ae6b2a5411"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "84409978bda36927a0df01849bbc3c37640fe83e", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81533ff737f2d71c7518188b71fbafd73e0d1434/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81533ff737f2d71c7518188b71fbafd73e0d1434/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=81533ff737f2d71c7518188b71fbafd73e0d1434", "patch": "@@ -5,7 +5,7 @@ import metadata::{creader, cstore};\n import syntax::parse::{parser, token};\n import syntax::{ast, codemap};\n import front::attr;\n-import middle::{trans, resolve, freevars, kind, ty, typeck};\n+import middle::{trans, resolve, freevars, kind, ty, typeck, unsafeck};\n import middle::tstate::ck;\n import syntax::print::{pp, pprust};\n import util::{ppaux, common, filesearch};\n@@ -129,6 +129,8 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n              bind freevars::annotate_freevars(def_map, crate));\n     let ty_cx = ty::mk_ctxt(sess, def_map, ext_map, ast_map, freevars);\n     time(time_passes, \"typechecking\", bind typeck::check_crate(ty_cx, crate));\n+    time(time_passes, \"unsafechecking\",\n+         bind unsafeck::unsafeck_crate(ty_cx, crate));\n     time(time_passes, \"alt checking\",\n          bind middle::check_alt::check_crate(ty_cx, crate));\n     if sess.get_opts().run_typestate {"}, {"sha": "251258f11a8b0ea29cdfa5f3283c5f4f9d0520b3", "filename": "src/comp/middle/unsafeck.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/81533ff737f2d71c7518188b71fbafd73e0d1434/src%2Fcomp%2Fmiddle%2Funsafeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81533ff737f2d71c7518188b71fbafd73e0d1434/src%2Fcomp%2Fmiddle%2Funsafeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Funsafeck.rs?ref=81533ff737f2d71c7518188b71fbafd73e0d1434", "patch": "@@ -0,0 +1,72 @@\n+import syntax::ast;\n+import syntax::visit;\n+import std::option::some;\n+import syntax::print::pprust::{expr_to_str, path_to_str};\n+\n+export unsafeck_crate;\n+\n+type unsafe_ctx = {\n+    tcx: ty::ctxt,\n+    unsafe_fn_legal: bool\n+};\n+\n+fn unsafeck_view_item(_vi: @ast::view_item,\n+                      _ctx: unsafe_ctx,\n+                      _v: visit::vt<unsafe_ctx>) {\n+    // Ignore paths that appear in use, import, etc\n+}\n+\n+fn unsafeck_expr(expr: @ast::expr,\n+                 ctx: unsafe_ctx,\n+                 v: visit::vt<unsafe_ctx>) {\n+    alt expr.node {\n+      ast::expr_path(path) {\n+        if !ctx.unsafe_fn_legal {\n+            alt ctx.tcx.def_map.find(expr.id) {\n+              some(ast::def_fn(_, ast::unsafe_fn.)) |\n+              some(ast::def_native_fn(_, ast::unsafe_fn.)) {\n+                log_err (\"expr=\", expr_to_str(expr));\n+                ctx.tcx.sess.span_fatal(\n+                    expr.span,\n+                    \"unsafe functions can only be called\");\n+              }\n+\n+              _ {}\n+            }\n+        }\n+      }\n+\n+      ast::expr_call(f, args) {\n+        let f_ctx = {unsafe_fn_legal: true with ctx};\n+        visit::visit_expr(f, f_ctx, v);\n+\n+        let args_ctx = {unsafe_fn_legal: false with ctx};\n+        visit::visit_exprs(args, args_ctx, v);\n+      }\n+\n+      _ {\n+        let subctx = {unsafe_fn_legal: false with ctx};\n+        visit::visit_expr(expr, subctx, v);\n+      }\n+    }\n+}\n+\n+fn unsafeck_crate(tcx: ty::ctxt, crate: @ast::crate) {\n+    let visit =\n+        visit::mk_vt(\n+            @{visit_expr: unsafeck_expr,\n+              visit_view_item: unsafeck_view_item\n+                  with *visit::default_visitor()});\n+    let ctx = {tcx: tcx, unsafe_fn_legal: false};\n+    visit::visit_crate(*crate, ctx, visit);\n+}\n+\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "2f861155e1cab0fc4e585a9922c7b701180b7ddc", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81533ff737f2d71c7518188b71fbafd73e0d1434/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/81533ff737f2d71c7518188b71fbafd73e0d1434/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=81533ff737f2d71c7518188b71fbafd73e0d1434", "patch": "@@ -25,6 +25,7 @@ mod middle {\n     mod ast_map;\n     mod resolve;\n     mod typeck;\n+    mod unsafeck;\n     mod check_alt;\n     mod mut;\n     mod alias;"}, {"sha": "e2fa46b0374f8f7a74490241f26f16b38fc61cf2", "filename": "src/test/compile-fail/unsafe-fn-used-as-value.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81533ff737f2d71c7518188b71fbafd73e0d1434/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81533ff737f2d71c7518188b71fbafd73e0d1434/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-used-as-value.rs?ref=81533ff737f2d71c7518188b71fbafd73e0d1434", "patch": "@@ -0,0 +1,9 @@\n+// -*- rust -*-\n+// error-pattern: unsafe functions can only be called\n+\n+unsafe fn f() { ret; }\n+\n+fn main() {\n+    let x = f;\n+    x();\n+}"}]}