{"sha": "3712bb68c4f76161b54dcade7c1497b3ffc32e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTJiYjY4YzRmNzYxNjFiNTRkY2FkZTdjMTQ5N2IzZmZjMzJlMTE=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-10-25T08:01:27Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-10-25T08:01:27Z"}, "message": "Mention park guarantee", "tree": {"sha": "dd9c3f390a2110af06a7cbcf0cc66c4ce21536b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd9c3f390a2110af06a7cbcf0cc66c4ce21536b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3712bb68c4f76161b54dcade7c1497b3ffc32e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3712bb68c4f76161b54dcade7c1497b3ffc32e11", "html_url": "https://github.com/rust-lang/rust/commit/3712bb68c4f76161b54dcade7c1497b3ffc32e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3712bb68c4f76161b54dcade7c1497b3ffc32e11/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2bbfeadcce08a4b8ce02b66906ecc542cc9df39", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bbfeadcce08a4b8ce02b66906ecc542cc9df39", "html_url": "https://github.com/rust-lang/rust/commit/c2bbfeadcce08a4b8ce02b66906ecc542cc9df39"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "bdb941cff5219ff4be1b15412209ed7170a7e9c1", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3712bb68c4f76161b54dcade7c1497b3ffc32e11/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3712bb68c4f76161b54dcade7c1497b3ffc32e11/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=3712bb68c4f76161b54dcade7c1497b3ffc32e11", "patch": "@@ -469,6 +469,10 @@ fn wait(state_and_queue: &AtomicUsize, current_state: usize) {\n     // dangling reference). Guard against spurious wakeups by reparking\n     // ourselves until we are signaled.\n     while !node.signaled.load(Ordering::Acquire) {\n+        // If the managing thread happens to signal and unpark us before we can\n+        // park ourselves, the result could be this thread never gets unparked.\n+        // Luckily `park` comes with the guarantee that if it got an `unpark`\n+        // just before on an unparked thread is does not park.\n         thread::park();\n     }\n }"}]}