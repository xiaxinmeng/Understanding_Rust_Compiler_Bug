{"sha": "17b8ca952baf5d32ef6e9653b0eda6516386400c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YjhjYTk1MmJhZjVkMzJlZjZlOTY1M2IwZWRhNjUxNjM4NjQwMGM=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2020-10-30T21:27:00Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2020-10-30T21:31:04Z"}, "message": "Pull theme picker keyboard code into main.js\n\nMost of the code in mod.rs should be code that really needs to have\nthe list of available themes inlined into it.", "tree": {"sha": "1ff504d03badb0362a39d642531b97fbfb61b9d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ff504d03badb0362a39d642531b97fbfb61b9d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b8ca952baf5d32ef6e9653b0eda6516386400c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b8ca952baf5d32ef6e9653b0eda6516386400c", "html_url": "https://github.com/rust-lang/rust/commit/17b8ca952baf5d32ef6e9653b0eda6516386400c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b8ca952baf5d32ef6e9653b0eda6516386400c/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90c7c634e39944873a031624c4fb1dc0aa776e3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c7c634e39944873a031624c4fb1dc0aa776e3a", "html_url": "https://github.com/rust-lang/rust/commit/90c7c634e39944873a031624c4fb1dc0aa776e3a"}], "stats": {"total": 110, "additions": 59, "deletions": 51}, "files": [{"sha": "5ac0ffcfbf1c2d18b50928006dd82d54cd7b0acc", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/17b8ca952baf5d32ef6e9653b0eda6516386400c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b8ca952baf5d32ef6e9653b0eda6516386400c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=17b8ca952baf5d32ef6e9653b0eda6516386400c", "patch": "@@ -807,58 +807,8 @@ function handleThemeButtonsBlur(e) {{\n     }}\n }}\n \n-function handleThemeKeyDown(e) {{\n-    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) {{ return; }}\n-    if (!themePicker.parentNode.contains(e.target)) {{ return; }}\n-    var active = document.activeElement;\n-    switch (e.key) {{\n-        case \"ArrowUp\":\n-            e.preventDefault();\n-            if (active.previousElementSibling && e.target.id !== \"theme-picker\") {{\n-                active.previousElementSibling.focus();\n-            }} else {{\n-                showThemeButtonState();\n-                themes.lastElementChild.focus();\n-            }}\n-            break;\n-        case \"ArrowDown\":\n-            e.preventDefault();\n-            if (active.nextElementSibling && e.target.id !== \"theme-picker\") {{\n-                active.nextElementSibling.focus();\n-            }} else {{\n-                showThemeButtonState();\n-                themes.firstElementChild.focus();\n-            }}\n-            break;\n-        case \"Enter\":\n-        case \"Return\":\n-        case \"Space\":\n-            if (e.target.id === \"theme-picker\" && themes.style.display === \"none\") {{\n-                e.preventDefault();\n-                showThemeButtonState();\n-                themes.firstElementChild.focus();\n-            }}\n-            break;\n-        case \"Home\":\n-            e.preventDefault();\n-            themes.firstElementChild.focus();\n-            break;\n-        case \"End\":\n-            e.preventDefault();\n-            themes.lastElementChild.focus();\n-            break;\n-        // The escape key is handled in main.js, instead of here, for two reasons:\n-        //\n-        // 1 Escape should close the menu, even if it's not focused.\n-        // 2 The escape event handler is bound to both keydown and keypress, to work\n-        //   around browser inconsistencies. That sort of logic doesn't apply to the\n-        //   rest of these keybindings.\n-    }}\n-}};\n-\n themePicker.onclick = switchThemeButtonState;\n themePicker.onblur = handleThemeButtonsBlur;\n-document.addEventListener(\"keydown\", handleThemeKeyDown);\n {}.forEach(function(item) {{\n     var but = document.createElement(\"button\");\n     but.textContent = item;"}, {"sha": "de4792a5bd2f7fa12c890a5fe0cf86c7e28cf825", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/17b8ca952baf5d32ef6e9653b0eda6516386400c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/17b8ca952baf5d32ef6e9653b0eda6516386400c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=17b8ca952baf5d32ef6e9653b0eda6516386400c", "patch": "@@ -4,7 +4,7 @@\n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass */\n /* global onEachLazy, hasOwnProperty, removeClass, updateLocalStorage */\n-/* global hideThemeButtonState */\n+/* global hideThemeButtonState, showThemeButtonState */\n \n if (!String.prototype.startsWith) {\n     String.prototype.startsWith = function(searchString, position) {\n@@ -48,6 +48,14 @@ function getSearchElement() {\n     return document.getElementById(\"search\");\n }\n \n+function getThemesElement() {\n+    return document.getElementById(\"theme-choices\");\n+}\n+\n+function getThemePickerElement() {\n+    return document.getElementById(\"theme-picker\");\n+}\n+\n // Sets the focus on the search bar at the top of the page\n function focusSearchBar() {\n     getSearchInput().focus();\n@@ -406,7 +414,57 @@ function defocusSearchBar() {\n             case \"?\":\n                 displayHelp(true, ev);\n                 break;\n+\n+            default:\n+                var themePicker = getThemePickerElement();\n+                if (themePicker.parentNode.contains(ev.target)) {\n+                    handleThemeKeyDown(ev);\n+                }\n+            }\n+        }\n+    }\n+\n+    function handleThemeKeyDown(ev) {\n+        var active = document.activeElement;\n+        var themes = getThemesElement();\n+        switch (getVirtualKey(ev)) {\n+        case \"ArrowUp\":\n+            ev.preventDefault();\n+            if (active.previousElementSibling && ev.target.id !== \"theme-picker\") {\n+                active.previousElementSibling.focus();\n+            } else {\n+                showThemeButtonState();\n+                themes.lastElementChild.focus();\n             }\n+            break;\n+        case \"ArrowDown\":\n+            ev.preventDefault();\n+            if (active.nextElementSibling && ev.target.id !== \"theme-picker\") {\n+                active.nextElementSibling.focus();\n+            } else {\n+                showThemeButtonState();\n+                themes.firstElementChild.focus();\n+            }\n+            break;\n+        case \"Enter\":\n+        case \"Return\":\n+        case \"Space\":\n+            if (ev.target.id === \"theme-picker\" && themes.style.display === \"none\") {\n+                ev.preventDefault();\n+                showThemeButtonState();\n+                themes.firstElementChild.focus();\n+            }\n+            break;\n+        case \"Home\":\n+            ev.preventDefault();\n+            themes.firstElementChild.focus();\n+            break;\n+        case \"End\":\n+            ev.preventDefault();\n+            themes.lastElementChild.focus();\n+            break;\n+        // The escape key is handled in handleEscape, not here,\n+        // so that pressing escape will close the menu even if it isn't focused\n         }\n     }\n "}]}