{"sha": "8a26266f6586f765ebdfbc0304e4976bfff28895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMjYyNjZmNjU4NmY3NjVlYmRmYmMwMzA0ZTQ5NzZiZmZmMjg4OTU=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-11-16T19:19:25Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-11-23T05:19:53Z"}, "message": "Change Mut::map to Mut::with", "tree": {"sha": "191599686d5d655cb895d422d17045fe56451b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191599686d5d655cb895d422d17045fe56451b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a26266f6586f765ebdfbc0304e4976bfff28895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a26266f6586f765ebdfbc0304e4976bfff28895", "html_url": "https://github.com/rust-lang/rust/commit/8a26266f6586f765ebdfbc0304e4976bfff28895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a26266f6586f765ebdfbc0304e4976bfff28895/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb39cc3ae6db7effb17902d0cff0a737aef15101", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb39cc3ae6db7effb17902d0cff0a737aef15101", "html_url": "https://github.com/rust-lang/rust/commit/bb39cc3ae6db7effb17902d0cff0a737aef15101"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "98177b3cdf5767b8c57a5c5a53773bba65c30259", "filename": "src/libstd/mutable.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a26266f6586f765ebdfbc0304e4976bfff28895/src%2Flibstd%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a26266f6586f765ebdfbc0304e4976bfff28895/src%2Flibstd%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmutable.rs?ref=8a26266f6586f765ebdfbc0304e4976bfff28895", "patch": "@@ -118,7 +118,7 @@ impl<T> Mut<T> {\n     ///\n     /// Fails if the value is currently mutably borrowed.\n     #[inline]\n-    pub fn map<U>(&self, blk: |&T| -> U) -> U {\n+    pub fn with<U>(&self, blk: |&T| -> U) -> U {\n         let ptr = self.borrow();\n         blk(ptr.get())\n     }\n@@ -129,7 +129,7 @@ impl<T> Mut<T> {\n     ///\n     /// Fails if the value is currently borrowed.\n     #[inline]\n-    pub fn map_mut<U>(&self, blk: |&mut T| -> U) -> U {\n+    pub fn with_mut<U>(&self, blk: |&mut T| -> U) -> U {\n         let mut ptr = self.borrow_mut();\n         blk(ptr.get())\n     }\n@@ -260,39 +260,39 @@ mod test {\n     }\n \n     #[test]\n-    fn map_ok() {\n+    fn with_ok() {\n         let x = Mut::new(0);\n-        assert_eq!(1, x.map(|x| *x+1));\n+        assert_eq!(1, x.with(|x| *x+1));\n     }\n \n     #[test]\n     #[should_fail]\n-    fn mut_borrow_map() {\n+    fn mut_borrow_with() {\n         let x = Mut::new(0);\n         let _b1 = x.borrow_mut();\n-        x.map(|x| *x+1);\n+        x.with(|x| *x+1);\n     }\n \n     #[test]\n-    fn borrow_map() {\n+    fn borrow_with() {\n         let x = Mut::new(0);\n         let _b1 = x.borrow();\n-        assert_eq!(1, x.map(|x| *x+1));\n+        assert_eq!(1, x.with(|x| *x+1));\n     }\n \n     #[test]\n-    fn map_mut_ok() {\n+    fn with_mut_ok() {\n         let x = Mut::new(0);\n-        x.map_mut(|x| *x += 1);\n+        x.with_mut(|x| *x += 1);\n         let b = x.borrow();\n         assert_eq!(1, *b.get());\n     }\n \n     #[test]\n     #[should_fail]\n-    fn borrow_map_mut() {\n+    fn borrow_with_mut() {\n         let x = Mut::new(0);\n         let _b = x.borrow();\n-        x.map_mut(|x| *x += 1);\n+        x.with_mut(|x| *x += 1);\n     }\n }"}, {"sha": "4cb2c79219482eb9e7c79029ce330b825ac5e662", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a26266f6586f765ebdfbc0304e4976bfff28895/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a26266f6586f765ebdfbc0304e4976bfff28895/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=8a26266f6586f765ebdfbc0304e4976bfff28895", "patch": "@@ -111,20 +111,20 @@ mod test_rc {\n     fn test_clone() {\n         let x = Rc::from_send(Mut::new(5));\n         let y = x.clone();\n-        do x.borrow().map_mut |inner| {\n+        do x.borrow().with_mut |inner| {\n             *inner = 20;\n         }\n-        assert_eq!(y.borrow().map(|v| *v), 20);\n+        assert_eq!(y.borrow().with(|v| *v), 20);\n     }\n \n     #[test]\n     fn test_deep_clone() {\n         let x = Rc::from_send(Mut::new(5));\n         let y = x.deep_clone();\n-        do x.borrow().map_mut |inner| {\n+        do x.borrow().with_mut |inner| {\n             *inner = 20;\n         }\n-        assert_eq!(y.borrow().map(|v| *v), 5);\n+        assert_eq!(y.borrow().with(|v| *v), 5);\n     }\n \n     #[test]"}, {"sha": "7441d0d3edcca4d14883d0c5641e51d10d21866c", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a26266f6586f765ebdfbc0304e4976bfff28895/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a26266f6586f765ebdfbc0304e4976bfff28895/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=8a26266f6586f765ebdfbc0304e4976bfff28895", "patch": "@@ -506,7 +506,7 @@ impl<T: Send> GenericPort<T> for Port<T> {\n \n impl<T: Send> Peekable<T> for Port<T> {\n     fn peek(&self) -> bool {\n-        self.next.map_mut(|p| p.get_mut_ref().peek())\n+        self.next.with_mut(|p| p.get_mut_ref().peek())\n     }\n }\n \n@@ -517,7 +517,7 @@ impl<T: Send> Peekable<T> for Port<T> {\n impl<'self, T: Send> SelectInner for &'self Port<T> {\n     #[inline]\n     fn optimistic_check(&mut self) -> bool {\n-        do self.next.map_mut |pone| { pone.get_mut_ref().optimistic_check() }\n+        do self.next.with_mut |pone| { pone.get_mut_ref().optimistic_check() }\n     }\n \n     #[inline]\n@@ -528,7 +528,7 @@ impl<'self, T: Send> SelectInner for &'self Port<T> {\n \n     #[inline]\n     fn unblock_from(&mut self) -> bool {\n-        do self.next.map_mut |pone| { pone.get_mut_ref().unblock_from() }\n+        do self.next.with_mut |pone| { pone.get_mut_ref().unblock_from() }\n     }\n }\n "}]}