{"sha": "2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYmMzM2FhZjA0OWJkMTRkODYyMzMzYTI5MTRiYzc4YjRiZDRmMjQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-27T08:56:02Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-14T16:06:52Z"}, "message": "typeck: track any errors injected during writeback and taint tables appropriately.", "tree": {"sha": "fc58cf44e80f807cb3effec2d8cd8639a6cfd83a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc58cf44e80f807cb3effec2d8cd8639a6cfd83a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "html_url": "https://github.com/rust-lang/rust/commit/2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bbc33aaf049bd14d862333a2914bc78b4bd4f24/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba72b15666b2491415aec703a02c2364fe5e2790", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba72b15666b2491415aec703a02c2364fe5e2790", "html_url": "https://github.com/rust-lang/rust/commit/ba72b15666b2491415aec703a02c2364fe5e2790"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "f9100300e3add1043fbee8964fd47838b8a78c70", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2bbc33aaf049bd14d862333a2914bc78b4bd4f24/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbc33aaf049bd14d862333a2914bc78b4bd4f24/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.tables.upvar_list =\n             mem::replace(&mut self.tables.borrow_mut().upvar_list, Default::default());\n \n-        wbcx.tables.tainted_by_errors = self.is_tainted_by_errors();\n+        wbcx.tables.tainted_by_errors |= self.is_tainted_by_errors();\n \n         debug!(\"writeback: tables for {:?} are {:#?}\", item_def_id, wbcx.tables);\n \n@@ -578,14 +578,21 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n-    fn resolve<T>(&self, x: &T, span: &dyn Locatable) -> T\n+    fn resolve<T>(&mut self, x: &T, span: &dyn Locatable) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let x = x.fold_with(&mut Resolver::new(self.fcx, span, self.body));\n+        let mut resolver = Resolver::new(self.fcx, span, self.body);\n+        let x = x.fold_with(&mut resolver);\n         if cfg!(debug_assertions) && x.needs_infer() {\n             span_bug!(span.to_span(self.fcx.tcx), \"writeback: `{:?}` has inference variables\", x);\n         }\n+\n+        // We may have introduced e.g. `ty::Error`, if inference failed, make sure\n+        // to mark the `TypeckTables` as tainted in that case, so that downstream\n+        // users of the tables don't produce extra errors, or worse, ICEs.\n+        self.tables.tainted_by_errors |= resolver.replaced_with_error;\n+\n         x\n     }\n }\n@@ -613,6 +620,9 @@ struct Resolver<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     span: &'cx dyn Locatable,\n     body: &'tcx hir::Body<'tcx>,\n+\n+    /// Set to `true` if any `Ty` or `ty::Const` had to be replaced with an `Error`.\n+    replaced_with_error: bool,\n }\n \n impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n@@ -621,7 +631,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         span: &'cx dyn Locatable,\n         body: &'tcx hir::Body<'tcx>,\n     ) -> Resolver<'cx, 'tcx> {\n-        Resolver { tcx: fcx.tcx, infcx: fcx, span, body }\n+        Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }\n     }\n \n     fn report_error(&self, t: Ty<'tcx>) {\n@@ -644,6 +654,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 self.report_error(t);\n+                self.replaced_with_error = true;\n                 self.tcx().types.err\n             }\n         }\n@@ -661,6 +672,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 // FIXME: we'd like to use `self.report_error`, but it doesn't yet\n                 // accept a &'tcx ty::Const.\n+                self.replaced_with_error = true;\n                 self.tcx().consts.err\n             }\n         }"}, {"sha": "02305191f6ebc4eb1abb47e6969b4ca30df2a9af", "filename": "src/test/ui/issues/issue-66706.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bbc33aaf049bd14d862333a2914bc78b4bd4f24/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bbc33aaf049bd14d862333a2914bc78b4bd4f24/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs?ref=2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "patch": "@@ -10,4 +10,17 @@ fn b() {\n     //~^ ERROR expected identifier, found reserved identifier `_`\n }\n \n+fn c() {\n+    [0; [|&_: _ &_| {}; 0 ].len()]\n+    //~^ ERROR expected `,`, found `&`\n+    //~| ERROR mismatched types\n+}\n+\n+fn d() {\n+    [0; match [|f @ &ref _| () ] {} ]\n+    //~^ ERROR expected identifier, found reserved identifier `_`\n+    //~| ERROR `match` is not allowed in a `const`\n+    //~| ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "ea461cc5d03fade0436ed69a1ff6a9c53a1465d3", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2bbc33aaf049bd14d862333a2914bc78b4bd4f24/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bbc33aaf049bd14d862333a2914bc78b4bd4f24/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=2bbc33aaf049bd14d862333a2914bc78b4bd4f24", "patch": "@@ -12,6 +12,29 @@ error: expected identifier, found reserved identifier `_`\n LL |     [0; [|f @ &ref _| {} ; 0 ].len() ];\n    |                    ^ expected identifier, found reserved identifier\n \n+error: expected `,`, found `&`\n+  --> $DIR/issue-66706.rs:14:17\n+   |\n+LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n+   |                -^ expected `,`\n+   |                |\n+   |                help: missing `,`\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-66706.rs:20:26\n+   |\n+LL |     [0; match [|f @ &ref _| () ] {} ]\n+   |                          ^ expected identifier, found reserved identifier\n+\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/issue-66706.rs:20:9\n+   |\n+LL |     [0; match [|f @ &ref _| () ] {} ]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n error[E0282]: type annotations needed\n   --> $DIR/issue-66706.rs:2:11\n    |\n@@ -26,7 +49,23 @@ LL | fn a() {\n LL |     [0; [|_: _ &_| ()].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n-error: aborting due to 4 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66706.rs:14:5\n+   |\n+LL | fn c() {\n+   |        - help: try adding a return type: `-> [{integer}; _]`\n+LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66706.rs:20:5\n+   |\n+LL | fn d() {\n+   |        - help: try adding a return type: `-> [{integer}; _]`\n+LL |     [0; match [|f @ &ref _| () ] {} ]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n+\n+error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0282, E0308.\n+Some errors have detailed explanations: E0282, E0308, E0658.\n For more information about an error, try `rustc --explain E0282`."}]}