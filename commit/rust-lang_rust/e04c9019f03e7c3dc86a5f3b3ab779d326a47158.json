{"sha": "e04c9019f03e7c3dc86a5f3b3ab779d326a47158", "node_id": "C_kwDOAAsO6NoAKGUwNGM5MDE5ZjAzZTdjM2RjODZhNWYzYjNhYjc3OWQzMjZhNDcxNTg", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-08T06:09:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-08T06:09:20Z"}, "message": "Rollup merge of #110827 - compiler-errors:issue-110761-followup, r=cjgillot\n\nFix lifetime suggestion for type aliases with objects in them\n\nFixes an issue identified in https://github.com/rust-lang/rust/issues/110761#issuecomment-1520678479\n\nThis suggestion, like many other borrowck suggestions, are very fragile and there are other ways to trigger strange behavior even after this PR, so this is just a small improvement and not a total rework :skull:", "tree": {"sha": "a2e35ab44506ba10379f692113d544da20496a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e35ab44506ba10379f692113d544da20496a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e04c9019f03e7c3dc86a5f3b3ab779d326a47158", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWJIQCRBK7hj4Ov3rIwAAAIoIADrng2x9edLtmPZtr6Ebax6p\nHzzee+HTxxCkExYWuzIxsGbPPJcVdaePCyVA11DieHGACA8uyLxchHcICXhVh7uw\nh92cWcUzHgu9URRoi297g8h6n6IrlQ5RXr7JqyhhduEe3QXmlxtQOuA4aRaL6QEs\nYhhGgpr2maiSfKY7h6wAuZw/nF6+jIEbG1PTJI7UPpp1bP0bt5jZ8wTajtJnLaKt\n4SMtLnIoms2IlSC4xFmx0PwlDpDWWii4jIbiTvQKQs20rf6bz8aneiyEicRxTsMV\npLhzMYehV22CrV9cZz4nnb7Ow4/3p4C8YD+5LyLvYuylKIQQ2v14Q6vA6cMIwhI=\n=7ucO\n-----END PGP SIGNATURE-----\n", "payload": "tree a2e35ab44506ba10379f692113d544da20496a57\nparent 71a1ac2c9aabac5435036021374dc231c99e0a90\nparent 183f1a6a7048e1d35521941c23ec43078ea0a038\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683526160 +0530\ncommitter GitHub <noreply@github.com> 1683526160 +0530\n\nRollup merge of #110827 - compiler-errors:issue-110761-followup, r=cjgillot\n\nFix lifetime suggestion for type aliases with objects in them\n\nFixes an issue identified in https://github.com/rust-lang/rust/issues/110761#issuecomment-1520678479\n\nThis suggestion, like many other borrowck suggestions, are very fragile and there are other ways to trigger strange behavior even after this PR, so this is just a small improvement and not a total rework :skull:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e04c9019f03e7c3dc86a5f3b3ab779d326a47158", "html_url": "https://github.com/rust-lang/rust/commit/e04c9019f03e7c3dc86a5f3b3ab779d326a47158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a1ac2c9aabac5435036021374dc231c99e0a90", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a1ac2c9aabac5435036021374dc231c99e0a90", "html_url": "https://github.com/rust-lang/rust/commit/71a1ac2c9aabac5435036021374dc231c99e0a90"}, {"sha": "183f1a6a7048e1d35521941c23ec43078ea0a038", "url": "https://api.github.com/repos/rust-lang/rust/commits/183f1a6a7048e1d35521941c23ec43078ea0a038", "html_url": "https://github.com/rust-lang/rust/commit/183f1a6a7048e1d35521941c23ec43078ea0a038"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "8ec872e205792b909a67e4bfec76711045c9ce2f", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=e04c9019f03e7c3dc86a5f3b3ab779d326a47158", "patch": "@@ -845,7 +845,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let Some((alias_tys, alias_span)) = self\n+            let Some((alias_tys, alias_span, lt_addition_span)) = self\n                 .infcx\n                 .tcx\n                 .return_type_impl_or_dyn_traits_with_type_alias(suitable_region.def_id) else { return; };\n@@ -858,10 +858,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ()\n                 }\n                 if let TyKind::TraitObject(_, lt, _) = alias_ty.kind {\n-                    spans_suggs.push((lt.ident.span.shrink_to_hi(), \" + 'a\".to_string()));\n+                    if lt.ident.name == kw::Empty {\n+                        spans_suggs.push((lt.ident.span.shrink_to_hi(), \" + 'a\".to_string()));\n+                    } else {\n+                        spans_suggs.push((lt.ident.span, \"'a\".to_string()));\n+                    }\n                 }\n             }\n-            spans_suggs.push((alias_span.shrink_to_hi(), \"<'a>\".to_string()));\n+\n+            if let Some(lt_addition_span) = lt_addition_span {\n+                spans_suggs.push((lt_addition_span, \"'a, \".to_string()));\n+            } else {\n+                spans_suggs.push((alias_span.shrink_to_hi(), \"<'a>\".to_string()));\n+            }\n+\n             diag.multipart_suggestion_verbose(\n                 format!(\n                     \"to declare that the trait object {captures}, you can add a lifetime parameter `'a` in the type alias\""}, {"sha": "c255057287953056423cf2518b7f0ac019b888fe", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e04c9019f03e7c3dc86a5f3b3ab779d326a47158", "patch": "@@ -1093,11 +1093,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         v.0\n     }\n \n-    /// Given a `DefId` for an `fn`, return all the `dyn` and `impl` traits in its return type and associated alias span when type alias is used\n+    /// Given a `DefId` for an `fn`, return all the `dyn` and `impl` traits in\n+    /// its return type, and the associated alias span when type alias is used,\n+    /// along with a span for lifetime suggestion (if there are existing generics).\n     pub fn return_type_impl_or_dyn_traits_with_type_alias(\n         self,\n         scope_def_id: LocalDefId,\n-    ) -> Option<(Vec<&'tcx hir::Ty<'tcx>>, Span)> {\n+    ) -> Option<(Vec<&'tcx hir::Ty<'tcx>>, Span, Option<Span>)> {\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n         let mut v = TraitObjectVisitor(vec![], self.hir());\n         // when the return type is a type alias\n@@ -1111,7 +1113,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         {\n             v.visit_ty(alias_ty);\n             if !v.0.is_empty() {\n-                return Some((v.0, alias_generics.span));\n+                return Some((v.0, alias_generics.span, alias_generics.span_for_lifetime_suggestion()));\n             }\n         }\n         return None;"}, {"sha": "c9e043577ed6d90b652644371c59fb02a11b6b7b", "filename": "tests/ui/borrowck/suggest-lt-on-ty-alias-w-generics.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs?ref=e04c9019f03e7c3dc86a5f3b3ab779d326a47158", "patch": "@@ -0,0 +1,11 @@\n+type Lazy<T> = Box<dyn Fn() -> T + 'static>;\n+\n+fn test(x: &i32) -> Lazy<i32> {\n+    Box::new(|| {\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR closure may outlive the current function\n+        *x\n+    })\n+}\n+\n+fn main() {}"}, {"sha": "28b4b4aa290d522efa9ed664aefa656ee872e382", "filename": "tests/ui/borrowck/suggest-lt-on-ty-alias-w-generics.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e04c9019f03e7c3dc86a5f3b3ab779d326a47158/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr?ref=e04c9019f03e7c3dc86a5f3b3ab779d326a47158", "patch": "@@ -0,0 +1,43 @@\n+error: lifetime may not live long enough\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:5\n+   |\n+LL |   fn test(x: &i32) -> Lazy<i32> {\n+   |              - let's call the lifetime of this reference `'1`\n+LL | /     Box::new(|| {\n+LL | |\n+LL | |\n+LL | |         *x\n+LL | |     })\n+   | |______^ returning this value requires that `'1` must outlive `'static`\n+   |\n+help: to declare that the trait object captures data from argument `x`, you can add a lifetime parameter `'a` in the type alias\n+   |\n+LL | type Lazy<'a, T> = Box<dyn Fn() -> T + 'a>;\n+   |           +++                          ~~\n+\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:14\n+   |\n+LL |     Box::new(|| {\n+   |              ^^ may outlive borrowed value `x`\n+...\n+LL |         *x\n+   |         -- `x` is borrowed here\n+   |\n+note: closure is returned here\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:5\n+   |\n+LL | /     Box::new(|| {\n+LL | |\n+LL | |\n+LL | |         *x\n+LL | |     })\n+   | |______^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     Box::new(move || {\n+   |              ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0373`."}]}