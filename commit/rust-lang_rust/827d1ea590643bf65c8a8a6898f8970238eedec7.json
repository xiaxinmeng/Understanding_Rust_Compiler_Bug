{"sha": "827d1ea590643bf65c8a8a6898f8970238eedec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyN2QxZWE1OTA2NDNiZjY1YzhhOGE2ODk4Zjg5NzAyMzhlZWRlYzc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-26T01:34:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-26T01:34:41Z"}, "message": "Rollup merge of #83456 - notriddle:vec-from-docs, r=JohnTitor\n\nAdd docs for Vec::from functions\n\nPart of #51430", "tree": {"sha": "e0571c2b10b150f98909f811422abcbe393287a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0571c2b10b150f98909f811422abcbe393287a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/827d1ea590643bf65c8a8a6898f8970238eedec7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgXToyCRBK7hj4Ov3rIwAAdHIIALHQAvfSK1DPVVM61eZsBF6a\nyH/j+i66L8a3xXNKSLQQIvHV2jcRK/kvkSNk+t6AQMZ8d8AiRvVV+bny84XQM5N3\nroUmSYveUJ/fR9FQOSYT6y/8DNwppxZDwEn4f9a9gA38a4SJ1Z3d2Qq7D0R0FhzG\nCo96eSfUR3JeVzFqLR1ENjBQNzHu+yA05xSIvDI/UM4WMSyoOJICssTYV+VsleRR\nouUQAaePTLNiMoAW4LZmeVHzBOX5yQ0tAZEJ3ok9THTwqJwnyamdp7ufO5R+znAH\nOnTKGJmErqw+26K5yJtzWIeryrdOZs8QTafqAoclnmswBvD1RhpbRJVoPXvY7Nw=\n=OwGn\n-----END PGP SIGNATURE-----\n", "payload": "tree e0571c2b10b150f98909f811422abcbe393287a4\nparent a054fd83a17632223a582164063b2261a26a5d3d\nparent ef1bd5776d9ba162a275772a8a31fa9d6b463e0a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616722481 +0100\ncommitter GitHub <noreply@github.com> 1616722481 +0100\n\nRollup merge of #83456 - notriddle:vec-from-docs, r=JohnTitor\n\nAdd docs for Vec::from functions\n\nPart of #51430\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/827d1ea590643bf65c8a8a6898f8970238eedec7", "html_url": "https://github.com/rust-lang/rust/commit/827d1ea590643bf65c8a8a6898f8970238eedec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/827d1ea590643bf65c8a8a6898f8970238eedec7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a054fd83a17632223a582164063b2261a26a5d3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a054fd83a17632223a582164063b2261a26a5d3d", "html_url": "https://github.com/rust-lang/rust/commit/a054fd83a17632223a582164063b2261a26a5d3d"}, {"sha": "ef1bd5776d9ba162a275772a8a31fa9d6b463e0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1bd5776d9ba162a275772a8a31fa9d6b463e0a", "html_url": "https://github.com/rust-lang/rust/commit/ef1bd5776d9ba162a275772a8a31fa9d6b463e0a"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "ff93c772b5b81f35ab681c3e9827de485a6ba0fc", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/827d1ea590643bf65c8a8a6898f8970238eedec7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827d1ea590643bf65c8a8a6898f8970238eedec7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=827d1ea590643bf65c8a8a6898f8970238eedec7", "patch": "@@ -2712,6 +2712,13 @@ impl<T, A: Allocator> AsMut<[T]> for Vec<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> From<&[T]> for Vec<T> {\n+    /// Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Vec::from(&[1, 2, 3][..]), vec![1, 2, 3]);\n+    /// ```\n     #[cfg(not(test))]\n     fn from(s: &[T]) -> Vec<T> {\n         s.to_vec()\n@@ -2724,6 +2731,13 @@ impl<T: Clone> From<&[T]> for Vec<T> {\n \n #[stable(feature = \"vec_from_mut\", since = \"1.19.0\")]\n impl<T: Clone> From<&mut [T]> for Vec<T> {\n+    /// Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Vec::from(&mut [1, 2, 3][..]), vec![1, 2, 3]);\n+    /// ```\n     #[cfg(not(test))]\n     fn from(s: &mut [T]) -> Vec<T> {\n         s.to_vec()\n@@ -2740,6 +2754,13 @@ impl<T, const N: usize> From<[T; N]> for Vec<T> {\n     fn from(s: [T; N]) -> Vec<T> {\n         <[T]>::into_vec(box s)\n     }\n+    /// Allocate a `Vec<T>` and move `s`'s items into it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n+    /// ```\n     #[cfg(test)]\n     fn from(s: [T; N]) -> Vec<T> {\n         crate::slice::into_vec(box s)\n@@ -2751,6 +2772,20 @@ impl<'a, T> From<Cow<'a, [T]>> for Vec<T>\n where\n     [T]: ToOwned<Owned = Vec<T>>,\n {\n+    /// Convert a clone-on-write slice into a vector.\n+    ///\n+    /// If `s` already owns a `Vec<T>`, it will be returned directly.\n+    /// If `s` is borrowing a slice, a new `Vec<T>` will be allocated and\n+    /// filled by cloning `s`'s items into it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # use std::borrow::Cow;\n+    /// let o: Cow<[i32]> = Cow::Owned(vec![1, 2, 3]);\n+    /// let b: Cow<[i32]> = Cow::Borrowed(&[1, 2, 3]);\n+    /// assert_eq!(Vec::from(o), Vec::from(b));\n+    /// ```\n     fn from(s: Cow<'a, [T]>) -> Vec<T> {\n         s.into_owned()\n     }\n@@ -2760,6 +2795,15 @@ where\n #[cfg(not(test))]\n #[stable(feature = \"vec_from_box\", since = \"1.18.0\")]\n impl<T, A: Allocator> From<Box<[T], A>> for Vec<T, A> {\n+    /// Convert a boxed slice into a vector by transferring ownership of\n+    /// the existing heap allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let b: Box<[i32]> = vec![1, 2, 3].into_boxed_slice();\n+    /// assert_eq!(Vec::from(b), vec![1, 2, 3]);\n+    /// ```\n     fn from(s: Box<[T], A>) -> Self {\n         let len = s.len();\n         Self { buf: RawVec::from_box(s), len }\n@@ -2770,13 +2814,30 @@ impl<T, A: Allocator> From<Box<[T], A>> for Vec<T, A> {\n #[cfg(not(test))]\n #[stable(feature = \"box_from_vec\", since = \"1.20.0\")]\n impl<T, A: Allocator> From<Vec<T, A>> for Box<[T], A> {\n+    /// Convert a vector into a boxed slice.\n+    ///\n+    /// If `v` has excess capacity, its items will be moved into a\n+    /// newly-allocated buffer with exactly the right capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n+    /// ```\n     fn from(v: Vec<T, A>) -> Self {\n         v.into_boxed_slice()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<&str> for Vec<u8> {\n+    /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Vec::from(\"123\"), vec![b'1', b'2', b'3']);\n+    /// ```\n     fn from(s: &str) -> Vec<u8> {\n         From::from(s.as_bytes())\n     }"}]}