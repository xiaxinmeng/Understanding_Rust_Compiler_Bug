{"sha": "2722522fac927b9bd7c512f993e63afd3754cf4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MjI1MjJmYWM5MjdiOWJkN2M1MTJmOTkzZTYzYWZkMzc1NGNmNGU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-11T19:09:57Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T13:38:03Z"}, "message": "rename `Predicate` to `PredicateKind`, introduce alias", "tree": {"sha": "a8aae1aed4460b39f21b0bbfae416e1519b17c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8aae1aed4460b39f21b0bbfae416e1519b17c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2722522fac927b9bd7c512f993e63afd3754cf4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2722522fac927b9bd7c512f993e63afd3754cf4e", "html_url": "https://github.com/rust-lang/rust/commit/2722522fac927b9bd7c512f993e63afd3754cf4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2722522fac927b9bd7c512f993e63afd3754cf4e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cb1f5972dffd7614199a828ecba140606e6e65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb1f5972dffd7614199a828ecba140606e6e65e", "html_url": "https://github.com/rust-lang/rust/commit/6cb1f5972dffd7614199a828ecba140606e6e65e"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "2c2965433fd0e96ddb30f760c30239aeca5bafde", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2722522fac927b9bd7c512f993e63afd3754cf4e/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2722522fac927b9bd7c512f993e63afd3754cf4e/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=2722522fac927b9bd7c512f993e63afd3754cf4e", "patch": "@@ -3,7 +3,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Opaque, Predicate::Trait, ToPolyTraitRef};\n+use rustc_middle::ty::{Opaque, PredicateKind::Trait, ToPolyTraitRef};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;"}, {"sha": "79c21d9bc0a6424e16d10d0ddcf927db1e1e4158", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2722522fac927b9bd7c512f993e63afd3754cf4e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2722522fac927b9bd7c512f993e63afd3754cf4e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2722522fac927b9bd7c512f993e63afd3754cf4e", "patch": "@@ -18,7 +18,7 @@ use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Predicate, Ty};\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n@@ -1497,7 +1497,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                 // one of the associated types must be Self\n                 for predicate in cx.tcx.predicates_of(def_id).predicates {\n                     match predicate {\n-                        (Predicate::Projection(poly_projection_predicate), _) => {\n+                        (ty::PredicateKind::Projection(poly_projection_predicate), _) => {\n                             let binder = poly_projection_predicate.ty();\n                             let associated_type = binder.skip_binder();\n "}, {"sha": "8f94f143bae71e7c0362f911e15d6b88234bfefb", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2722522fac927b9bd7c512f993e63afd3754cf4e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2722522fac927b9bd7c512f993e63afd3754cf4e/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=2722522fac927b9bd7c512f993e63afd3754cf4e", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds.iter().copied())\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n-                if let ty::Predicate::Trait(poly_trait_ref, _) = obligation.predicate {\n+                if let ty::PredicateKind::Trait(poly_trait_ref, _) = obligation.predicate {\n                     if poly_trait_ref.def_id() == sized_trait || poly_trait_ref.skip_binder().has_escaping_bound_vars()\n                     {\n                         return None;"}, {"sha": "3f5693d7e6809cacbab0c21a37f03164da79be55", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2722522fac927b9bd7c512f993e63afd3754cf4e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2722522fac927b9bd7c512f993e63afd3754cf4e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=2722522fac927b9bd7c512f993e63afd3754cf4e", "patch": "@@ -1299,7 +1299,7 @@ pub fn is_must_use_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> boo\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n-                if let ty::Predicate::Trait(ref poly_trait_predicate, _) = predicate {\n+                if let ty::PredicateKind::Trait(ref poly_trait_predicate, _) = predicate {\n                     if must_use_attr(&cx.tcx.get_attrs(poly_trait_predicate.skip_binder().trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}]}