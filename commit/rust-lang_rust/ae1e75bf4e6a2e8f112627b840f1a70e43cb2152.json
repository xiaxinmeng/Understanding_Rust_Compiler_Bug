{"sha": "ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMWU3NWJmNGU2YTJlOGYxMTI2MjdiODQwZjFhNzBlNDNjYjIxNTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-15T17:19:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-15T17:19:26Z"}, "message": "Rollup merge of #68212 - csmoe:temp, r=estebank\n\nSuggest to shorten temporary lifetime during method call inside generator\n\nCloses https://github.com/rust-lang/rust/issues/67376\n![image](https://user-images.githubusercontent.com/35686186/72364752-f6b1e400-3731-11ea-8ec9-8297ba4c6c77.png)\n\nr? @estebank\ncc @tmandry @nikomatsakis", "tree": {"sha": "f628389f1c1a85033807391045327c97f910603a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f628389f1c1a85033807391045327c97f910603a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeH0meCRBK7hj4Ov3rIwAAdHIIAGvZpxzCRr5EmPG3eV1pCj17\nlD6RQoxlke76/X77U7/21oDN5CJ4sZOACGZxYDeTMkSQWjaNDoEiuANf5/MpVfnU\n3Hp57tJHg/MDa4dZE131v3XCFrj9Ih/2/RNAM8rwasBrOahpmIrRE29/UHprv+pG\nFMrTKxhAOjswJrx4qLUIgyNUFLdrCbp+9/GJml5CHyK+v1P7ExkFjhvpTkUmN9UX\nXUjELH2UCebbvoo+b95zxJn7hMwYtZHkqHJQvh2j8WdP5wpHeLB1is/t76/di8+T\noKrl7sn1NKbr0yBpmWd9al+FWC0dJsdykqUzuFSvYalXhgXJNe2MzwsyNfICJFQ=\n=+8Ib\n-----END PGP SIGNATURE-----\n", "payload": "tree f628389f1c1a85033807391045327c97f910603a\nparent 1b7b8cbed32987eda783dae0739b9e52edc8db5e\nparent 4eb47ded54610300c54291aee74d5585a711e75b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1579108766 +0530\ncommitter GitHub <noreply@github.com> 1579108766 +0530\n\nRollup merge of #68212 - csmoe:temp, r=estebank\n\nSuggest to shorten temporary lifetime during method call inside generator\n\nCloses https://github.com/rust-lang/rust/issues/67376\n![image](https://user-images.githubusercontent.com/35686186/72364752-f6b1e400-3731-11ea-8ec9-8297ba4c6c77.png)\n\nr? @estebank\ncc @tmandry @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "html_url": "https://github.com/rust-lang/rust/commit/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b7b8cbed32987eda783dae0739b9e52edc8db5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7b8cbed32987eda783dae0739b9e52edc8db5e", "html_url": "https://github.com/rust-lang/rust/commit/1b7b8cbed32987eda783dae0739b9e52edc8db5e"}, {"sha": "4eb47ded54610300c54291aee74d5585a711e75b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb47ded54610300c54291aee74d5585a711e75b", "html_url": "https://github.com/rust-lang/rust/commit/4eb47ded54610300c54291aee74d5585a711e75b"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "c1df1149bbdfc234b9fda7db231d2e51b655b2d3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "patch": "@@ -2479,19 +2479,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n                 eq\n             })\n-            .map(|ty::GeneratorInteriorTypeCause { span, scope_span, .. }| {\n-                (span, source_map.span_to_snippet(*span), scope_span)\n+            .map(|ty::GeneratorInteriorTypeCause { span, scope_span, expr, .. }| {\n+                (span, source_map.span_to_snippet(*span), scope_span, expr)\n             });\n+\n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: target_ty={:?} \\\n                 generator_interior_types={:?} target_span={:?}\",\n             target_ty, tables.generator_interior_types, target_span\n         );\n-        if let Some((target_span, Ok(snippet), scope_span)) = target_span {\n+        if let Some((target_span, Ok(snippet), scope_span, expr)) = target_span {\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 *target_span,\n                 scope_span,\n+                *expr,\n                 snippet,\n                 generator_did,\n                 last_generator,\n@@ -2514,6 +2516,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n+        expr: Option<hir::HirId>,\n         snippet: String,\n         first_generator: DefId,\n         last_generator: Option<DefId>,\n@@ -2549,6 +2552,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // not implemented.\n         let is_send = self.tcx.is_diagnostic_item(sym::send_trait, trait_ref.def_id);\n         let is_sync = self.tcx.is_diagnostic_item(sym::sync_trait, trait_ref.def_id);\n+        let hir = self.tcx.hir();\n         let trait_explanation = if is_send || is_sync {\n             let (trait_name, trait_verb) =\n                 if is_send { (\"`Send`\", \"sent\") } else { (\"`Sync`\", \"shared\") };\n@@ -2564,8 +2568,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             let message = if let Some(name) = last_generator\n                 .and_then(|generator_did| self.tcx.parent(generator_did))\n-                .and_then(|parent_did| self.tcx.hir().as_local_hir_id(parent_did))\n-                .and_then(|parent_hir_id| self.tcx.hir().opt_name(parent_hir_id))\n+                .and_then(|parent_did| hir.as_local_hir_id(parent_did))\n+                .and_then(|parent_hir_id| hir.opt_name(parent_hir_id))\n             {\n                 format!(\"future returned by `{}` is not {}\", name, trait_name)\n             } else {\n@@ -2581,7 +2585,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         // Look at the last interior type to get a span for the `.await`.\n-        let await_span = tables.generator_interior_types.iter().map(|i| i.span).last().unwrap();\n+        let await_span = tables.generator_interior_types.iter().map(|t| t.span).last().unwrap();\n         let mut span = MultiSpan::from_span(await_span);\n         span.push_span_label(\n             await_span,\n@@ -2606,6 +2610,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ),\n         );\n \n+        if let Some(expr_id) = expr {\n+            let expr = hir.expect_expr(expr_id);\n+            let is_ref = tables.expr_adjustments(expr).iter().any(|adj| adj.is_region_borrow());\n+            let parent = hir.get_parent_node(expr_id);\n+            if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n+                let method_span = hir.span(parent);\n+                if tables.is_method_call(e) && is_ref {\n+                    err.span_help(\n+                        method_span,\n+                        \"consider moving this method call into a `let` \\\n+                        binding to create a shorter lived borrow\",\n+                    );\n+                }\n+            }\n+        }\n+\n         // Add a note for the item obligation that remains - normally a note pointing to the\n         // bound that introduced the obligation (e.g. `T: Send`).\n         debug!(\"note_obligation_cause_for_async_await: next_code={:?}\", next_code);"}, {"sha": "db034d1618cea6cb35659e1792760e3418c47e5a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "patch": "@@ -81,6 +81,15 @@ pub struct Adjustment<'tcx> {\n     pub target: Ty<'tcx>,\n }\n \n+impl Adjustment<'tcx> {\n+    pub fn is_region_borrow(&self) -> bool {\n+        match self.kind {\n+            Adjust::Borrow(AutoBorrow::Ref(..)) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum Adjust<'tcx> {\n     /// Go from ! to any type."}, {"sha": "ef776c88a8f7cd85859c809c59c46a90cb56a37d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "patch": "@@ -315,15 +315,16 @@ pub struct ResolvedOpaqueTy<'tcx> {\n ///\n /// Here, we would store the type `T`, the span of the value `x`, and the \"scope-span\" for\n /// the scope that contains `x`.\n-#[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, PartialEq)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(RustcEncodable, RustcDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n     pub ty: Ty<'tcx>,\n     /// Span of the binding that was captured.\n     pub span: Span,\n     /// Span of the scope of the captured binding.\n     pub scope_span: Option<Span>,\n+    /// Expr which the type evaluated from.\n+    pub expr: Option<hir::HirId>,\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug)]\n@@ -436,7 +437,7 @@ pub struct TypeckTables<'tcx> {\n     /// entire variable.\n     pub upvar_list: ty::UpvarListMap,\n \n-    /// Stores the type, span and optional scope span of all types\n+    /// Stores the type, expression, span and optional scope span of all types\n     /// that are live across the yield of this generator (if a generator).\n     pub generator_interior_types: Vec<GeneratorInteriorTypeCause<'tcx>>,\n }"}, {"sha": "fc02d17a50f373d9752e07d95014bfa6fcb7e954", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "patch": "@@ -97,6 +97,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                         span: source_span,\n                         ty: &ty,\n                         scope_span,\n+                        expr: expr.map(|e| e.hir_id),\n                     })\n                     .or_insert(entries);\n             }\n@@ -164,17 +165,25 @@ pub fn resolve_interior<'a, 'tcx>(\n     // which means that none of the regions inside relate to any other, even if\n     // typeck had previously found constraints that would cause them to be related.\n     let mut counter = 0;\n-    let types = fcx.tcx.fold_regions(&types, &mut false, |_, current_depth| {\n+    let fold_types: Vec<_> = types.iter().map(|(t, _)| t.ty).collect();\n+    let folded_types = fcx.tcx.fold_regions(&fold_types, &mut false, |_, current_depth| {\n         counter += 1;\n         fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n     });\n \n     // Store the generator types and spans into the tables for this generator.\n-    let interior_types = types.iter().map(|t| t.0.clone()).collect::<Vec<_>>();\n-    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = interior_types;\n+    let types = types\n+        .into_iter()\n+        .zip(&folded_types)\n+        .map(|((mut interior_cause, _), ty)| {\n+            interior_cause.ty = ty;\n+            interior_cause\n+        })\n+        .collect();\n+    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = types;\n \n     // Extract type components\n-    let type_list = fcx.tcx.mk_type_list(types.into_iter().map(|t| (t.0).ty));\n+    let type_list = fcx.tcx.mk_type_list(folded_types.iter());\n \n     let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind(type_list));\n "}, {"sha": "77d0885c38d58a75c4624102d11dd7d638573a35", "filename": "src/test/ui/async-await/issue-64130-4-async-move.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-4-async-move.stderr?ref=ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "patch": "@@ -16,6 +16,11 @@ LL |                 let _x = get().await;\n ...\n LL |     }\n    |     - `client` is later dropped here\n+help: consider moving this method call into a `let` binding to create a shorter lived borrow\n+  --> $DIR/issue-64130-4-async-move.rs:19:15\n+   |\n+LL |         match client.status() {\n+   |               ^^^^^^^^^^^^^^^\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "18d9012b3acf69410ce744320a54424a2c066471", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "patch": "@@ -20,7 +20,7 @@ LL |     fn assert_sync<T: Sync>(_: T) {}\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ future returned by `main` is not `Sync`\n    |\n-   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n+   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, (), ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n note: future is not `Sync` as this value is used across an yield\n   --> $DIR/not-send-sync.rs:12:9\n    |"}, {"sha": "15a028f60ae1154208e9c9e7ded2a4d65be10130", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae1e75bf4e6a2e8f112627b840f1a70e43cb2152/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr?ref=ae1e75bf4e6a2e8f112627b840f1a70e43cb2152", "patch": "@@ -76,7 +76,7 @@ error[E0720]: opaque type expands to a recursive type\n LL | fn generator_capture() -> impl Sized {\n    |                           ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:26 x:impl Sized {()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:26 x:impl Sized {(), ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:53:26\n@@ -92,7 +92,7 @@ error[E0720]: opaque type expands to a recursive type\n LL | fn generator_hold() -> impl Sized {\n    |                        ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:58:5: 62:6 {impl Sized, ()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:58:5: 62:6 {impl Sized, (), ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:69:26"}]}