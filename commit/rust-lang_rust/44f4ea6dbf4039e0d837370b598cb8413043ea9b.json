{"sha": "44f4ea6dbf4039e0d837370b598cb8413043ea9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjRlYTZkYmY0MDM5ZTBkODM3MzcwYjU5OGNiODQxMzA0M2VhOWI=", "commit": {"author": {"name": "Fran\u00e7ois Mockers", "email": "mockersf@gmail.com", "date": "2018-05-29T00:17:55Z"}, "committer": {"name": "Fran\u00e7ois Mockers", "email": "mockersf@gmail.com", "date": "2018-05-29T19:28:52Z"}, "message": "adding to pedantic a lint that check for multiple inherent implementations", "tree": {"sha": "2eea826dd20337e2fa9e1519d5ad4afe2ea28697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eea826dd20337e2fa9e1519d5ad4afe2ea28697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f4ea6dbf4039e0d837370b598cb8413043ea9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f4ea6dbf4039e0d837370b598cb8413043ea9b", "html_url": "https://github.com/rust-lang/rust/commit/44f4ea6dbf4039e0d837370b598cb8413043ea9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f4ea6dbf4039e0d837370b598cb8413043ea9b/comments", "author": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "400aab92325de2aa65a2c724c3b5f4337bca11c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/400aab92325de2aa65a2c724c3b5f4337bca11c0", "html_url": "https://github.com/rust-lang/rust/commit/400aab92325de2aa65a2c724c3b5f4337bca11c0"}], "stats": {"total": 169, "additions": 169, "deletions": 0}, "files": [{"sha": "fb01f46949d7e852581c83640449dd893ceff5b0", "filename": "clippy_lints/src/inherent_impl.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/44f4ea6dbf4039e0d837370b598cb8413043ea9b/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f4ea6dbf4039e0d837370b598cb8413043ea9b/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=44f4ea6dbf4039e0d837370b598cb8413043ea9b", "patch": "@@ -0,0 +1,95 @@\n+//! lint on inherent implementations\n+\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use std::collections::HashMap;\n+use std::default::Default;\n+use syntax_pos::Span;\n+\n+/// **What it does:** Checks for multiple inherent implementations of a struct\n+///\n+/// **Why is this bad?** Splitting the implementation of a type makes the code harder to navigate.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// struct X;\n+/// impl X {\n+///     fn one() {}\n+/// }\n+/// impl X {\n+///     fn other() {}\n+/// }\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// struct X;\n+/// impl X {\n+///     fn one() {}\n+///     fn other() {}\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub MULTIPLE_INHERENT_IMPL,\n+    pedantic,\n+    \"Multiple inherent impl that could be grouped\"\n+}\n+\n+pub struct Pass {\n+    impls: HashMap<def_id::DefId, (Span, Generics)>,\n+}\n+\n+impl Default for Pass {\n+    fn default() -> Self {\n+        Pass { impls: HashMap::new() }\n+    }\n+}\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MULTIPLE_INHERENT_IMPL)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+        if let Item_::ItemImpl(_, _, _, ref generics, None, _, _) = item.node {\n+            // Remember for each inherent implementation encoutered its span and generics\n+            self.impls\n+                .insert(item.hir_id.owner_def_id(), (item.span, generics.clone()));\n+        }\n+    }\n+\n+    fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx Crate) {\n+        if let Some(item) = krate.items.values().nth(0) {\n+            // Retrieve all inherent implementations from the crate, grouped by type\n+            for impls in cx\n+                .tcx\n+                .crate_inherent_impls(item.hir_id.owner_def_id().krate)\n+                .inherent_impls\n+                .values()\n+            {\n+                // Filter out implementations that have generic params (type or lifetime)\n+                let mut impl_spans = impls\n+                    .iter()\n+                    .filter_map(|impl_def| self.impls.get(impl_def))\n+                    .filter(|(_, generics)| generics.params.len() == 0)\n+                    .map(|(span, _)| span);\n+                if let Some(initial_span) = impl_spans.nth(0) {\n+                    impl_spans.for_each(|additional_span| {\n+                        cx.span_lint_note(\n+                            MULTIPLE_INHERENT_IMPL,\n+                            *additional_span,\n+                            \"Multiple implementations of this structure\",\n+                            *initial_span,\n+                            \"First implementation here\",\n+                        )\n+                    })\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "3b00e4fba486d66397036da2bdbcccf670cae5f7", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44f4ea6dbf4039e0d837370b598cb8413043ea9b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f4ea6dbf4039e0d837370b598cb8413043ea9b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=44f4ea6dbf4039e0d837370b598cb8413043ea9b", "patch": "@@ -138,6 +138,7 @@ pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod infallible_destructuring_match;\n pub mod infinite_iter;\n+pub mod inherent_impl;\n pub mod inline_fn_without_body;\n pub mod int_plus_one;\n pub mod invalid_ref;\n@@ -416,6 +417,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box multiple_crate_versions::Pass);\n     reg.register_late_lint_pass(box map_unit_fn::Pass);\n     reg.register_late_lint_pass(box infallible_destructuring_match::Pass);\n+    reg.register_late_lint_pass(box inherent_impl::Pass::default());\n \n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n@@ -452,6 +454,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::STUTTER,\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n+        inherent_impl::MULTIPLE_INHERENT_IMPL,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         matches::SINGLE_MATCH_ELSE,\n         methods::FILTER_MAP,"}, {"sha": "9e10dbade4e3d415d57021e821f4106da93a4b37", "filename": "tests/ui/impl.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/44f4ea6dbf4039e0d837370b598cb8413043ea9b/tests%2Fui%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f4ea6dbf4039e0d837370b598cb8413043ea9b/tests%2Fui%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.rs?ref=44f4ea6dbf4039e0d837370b598cb8413043ea9b", "patch": "@@ -0,0 +1,36 @@\n+#![allow(dead_code)]\n+#![warn(multiple_inherent_impl)]\n+\n+struct MyStruct;\n+\n+impl MyStruct {\n+    fn first() {}\n+}\n+\n+impl MyStruct {\n+    fn second() {}\n+}\n+\n+impl<'a> MyStruct {\n+    fn lifetimed() {}\n+}\n+\n+mod submod {\n+    struct MyStruct;\n+    impl MyStruct {\n+        fn other() {}\n+    }\n+\n+    impl super::MyStruct {\n+        fn third() {}\n+    }\n+}\n+\n+use std::fmt;\n+impl fmt::Debug for MyStruct {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"MyStruct {{ }}\")\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "95e627cd50905042e0cb1858f7ed119ede93a4a3", "filename": "tests/ui/impl.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/44f4ea6dbf4039e0d837370b598cb8413043ea9b/tests%2Fui%2Fimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44f4ea6dbf4039e0d837370b598cb8413043ea9b/tests%2Fui%2Fimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.stderr?ref=44f4ea6dbf4039e0d837370b598cb8413043ea9b", "patch": "@@ -0,0 +1,35 @@\n+error: Multiple implementations of this structure\n+  --> $DIR/impl.rs:10:1\n+   |\n+10 | / impl MyStruct {\n+11 | |     fn second() {}\n+12 | | }\n+   | |_^\n+   |\n+   = note: `-D multiple-inherent-impl` implied by `-D warnings`\n+note: First implementation here\n+  --> $DIR/impl.rs:6:1\n+   |\n+6  | / impl MyStruct {\n+7  | |     fn first() {}\n+8  | | }\n+   | |_^\n+\n+error: Multiple implementations of this structure\n+  --> $DIR/impl.rs:24:5\n+   |\n+24 | /     impl super::MyStruct {\n+25 | |         fn third() {}\n+26 | |     }\n+   | |_____^\n+   |\n+note: First implementation here\n+  --> $DIR/impl.rs:6:1\n+   |\n+6  | / impl MyStruct {\n+7  | |     fn first() {}\n+8  | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}]}