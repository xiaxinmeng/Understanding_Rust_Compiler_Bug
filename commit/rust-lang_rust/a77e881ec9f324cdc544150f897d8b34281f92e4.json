{"sha": "a77e881ec9f324cdc544150f897d8b34281f92e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3N2U4ODFlYzlmMzI0Y2RjNTQ0MTUwZjg5N2Q4YjM0MjgxZjkyZTQ=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-06-16T23:16:34Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-09T13:10:00Z"}, "message": "should_impl_trait - ignore methods with lifetime params", "tree": {"sha": "0e9b7dfbe27eee9193306d4f57ef4984b0656b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e9b7dfbe27eee9193306d4f57ef4984b0656b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77e881ec9f324cdc544150f897d8b34281f92e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77e881ec9f324cdc544150f897d8b34281f92e4", "html_url": "https://github.com/rust-lang/rust/commit/a77e881ec9f324cdc544150f897d8b34281f92e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77e881ec9f324cdc544150f897d8b34281f92e4/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c46de012fe73fb57662085c02ef921e2e5b93c", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c46de012fe73fb57662085c02ef921e2e5b93c", "html_url": "https://github.com/rust-lang/rust/commit/70c46de012fe73fb57662085c02ef921e2e5b93c"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "3009aa3a64e9f9c007df6faa4add82890dde3202", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a77e881ec9f324cdc544150f897d8b34281f92e4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e881ec9f324cdc544150f897d8b34281f92e4/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a77e881ec9f324cdc544150f897d8b34281f92e4", "patch": "@@ -1497,11 +1497,20 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 if cx.access_levels.is_exported(impl_item.hir_id) {\n                 // check missing trait implementations\n                     for &(method_name, n_args, fn_header, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n+                        let no_lifetime_params = || {\n+                            impl_item.generics.params.iter().filter(|p| match p.kind {\n+                               hir::GenericParamKind::Lifetime { .. } => true,\n+                               _ => false,\n+                            }).count() == 0\n+                        };\n                         if name == method_name &&\n                             sig.decl.inputs.len() == n_args &&\n                             out_type.matches(cx, &sig.decl.output) &&\n                             self_kind.matches(cx, self_ty, first_arg_ty) &&\n-                            fn_header_equals(*fn_header, sig.header) {\n+                            fn_header_equals(*fn_header, sig.header) &&\n+                            // ignore methods with lifetime params, risk of false positive\n+                            no_lifetime_params()\n+                             {\n                             span_lint(cx, SHOULD_IMPLEMENT_TRAIT, impl_item.span, &format!(\n                                 \"defining a method called `{}` on this type; consider implementing \\\n                                 the `{}` trait or choosing a less ambiguous name\", name, trait_name));"}, {"sha": "3b267b0dab2fecdecc02566181460e3b2d0b518d", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a77e881ec9f324cdc544150f897d8b34281f92e4/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e881ec9f324cdc544150f897d8b34281f92e4/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a77e881ec9f324cdc544150f897d8b34281f92e4", "patch": "@@ -10,6 +10,7 @@\n     clippy::non_ascii_literal,\n     clippy::new_without_default,\n     clippy::needless_pass_by_value,\n+    clippy::needless_lifetimes,\n     clippy::print_stdout,\n     clippy::must_use_candidate,\n     clippy::use_self,\n@@ -82,6 +83,10 @@ impl T {\n     fn new(self) -> Self {\n         unimplemented!();\n     }\n+\n+    pub fn next<'b>(&'b mut self) -> Option<&'b mut T> {\n+        unimplemented!();\n+    }\n }\n \n pub struct T1;"}, {"sha": "9b8ecaed6921b92f6938fd1d933fe7c13a438362", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a77e881ec9f324cdc544150f897d8b34281f92e4/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a77e881ec9f324cdc544150f897d8b34281f92e4/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=a77e881ec9f324cdc544150f897d8b34281f92e4", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:39:5\n+  --> $DIR/methods.rs:40:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:169:5\n+  --> $DIR/methods.rs:174:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -19,7 +19,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:188:13\n+  --> $DIR/methods.rs:193:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -28,7 +28,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:191:13\n+  --> $DIR/methods.rs:196:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -38,33 +38,33 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:208:22\n+  --> $DIR/methods.rs:213:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:209:20\n+  --> $DIR/methods.rs:214:20\n    |\n LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:210:20\n+  --> $DIR/methods.rs:215:20\n    |\n LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:211:22\n+  --> $DIR/methods.rs:216:22\n    |\n LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:214:13\n+  --> $DIR/methods.rs:219:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -74,13 +74,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:220:22\n+  --> $DIR/methods.rs:225:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:223:13\n+  --> $DIR/methods.rs:228:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -90,13 +90,13 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:229:22\n+  --> $DIR/methods.rs:234:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:232:13\n+  --> $DIR/methods.rs:237:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^"}]}