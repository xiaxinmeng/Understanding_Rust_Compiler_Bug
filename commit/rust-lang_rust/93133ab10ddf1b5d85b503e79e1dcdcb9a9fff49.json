{"sha": "93133ab10ddf1b5d85b503e79e1dcdcb9a9fff49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTMzYWIxMGRkZjFiNWQ4NWI1MDNlNzllMWRjZGNiOWE5ZmZmNDk=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-07-18T11:12:07Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-07-21T13:17:42Z"}, "message": "Doc for ast::Path", "tree": {"sha": "7ecc714fe586a905aa34aeae732d594bf37dc849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ecc714fe586a905aa34aeae732d594bf37dc849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93133ab10ddf1b5d85b503e79e1dcdcb9a9fff49", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93133ab10ddf1b5d85b503e79e1dcdcb9a9fff49", "html_url": "https://github.com/rust-lang/rust/commit/93133ab10ddf1b5d85b503e79e1dcdcb9a9fff49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93133ab10ddf1b5d85b503e79e1dcdcb9a9fff49/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b6216943eebbf17e6ea5641a0f32976633c4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b6216943eebbf17e6ea5641a0f32976633c4f2", "html_url": "https://github.com/rust-lang/rust/commit/c4b6216943eebbf17e6ea5641a0f32976633c4f2"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "6ba3facb0929a4bcac2bf980acbe4dc5eefc1796", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93133ab10ddf1b5d85b503e79e1dcdcb9a9fff49/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93133ab10ddf1b5d85b503e79e1dcdcb9a9fff49/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=93133ab10ddf1b5d85b503e79e1dcdcb9a9fff49", "patch": "@@ -30,9 +30,9 @@ pub struct ident { name: Name, ctxt: SyntaxContext }\n /// Construct an identifier with the given name and an empty context:\n pub fn new_ident(name: Name) -> ident { ident {name: name, ctxt: empty_ctxt}}\n \n-// a SyntaxContext represents a chain of macro-expandings\n-// and renamings. Each macro expansion corresponds to\n-// a fresh uint\n+/// A SyntaxContext represents a chain of macro-expandings\n+/// and renamings. Each macro expansion corresponds to\n+/// a fresh uint\n \n // I'm representing this syntax context as an index into\n // a table, in order to work around a compiler bug\n@@ -70,11 +70,10 @@ pub enum SyntaxContext_ {\n     IllegalCtxt()\n }\n \n-// a name is a part of an identifier, representing a string\n-// or gensym. It's the result of interning.\n+/// A name is a part of an identifier, representing a string or gensym. It's\n+/// the result of interning.\n pub type Name = uint;\n-// a mark represents a unique id associated\n-// with a macro expansion\n+/// A mark represents a unique id associated with a macro expansion\n pub type Mrk = uint;\n \n impl<S:Encoder> Encodable<S> for ident {\n@@ -90,7 +89,7 @@ impl<D:Decoder> Decodable<D> for ident {\n     }\n }\n \n-// Functions may or may not have names.\n+/// Function name (not all functions have names)\n pub type fn_ident = Option<ident>;\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n@@ -107,9 +106,14 @@ pub struct Lifetime {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub struct Path {\n     span: span,\n+    /// A `::foo` path, is relative to the crate root rather than current\n+    /// module (like paths in an import).\n     global: bool,\n+    /// The segments in the path (the things separated by ::)\n     idents: ~[ident],\n+    /// \"Region parameter\", currently only one lifetime is allowed in a path.\n     rp: Option<Lifetime>,\n+    /// These are the type parameters, ie, the `a, b` in `foo::bar::<a, b>`\n     types: ~[Ty],\n }\n "}]}