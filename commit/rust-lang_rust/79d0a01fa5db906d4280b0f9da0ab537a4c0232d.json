{"sha": "79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZDBhMDFmYTVkYjkwNmQ0MjgwYjBmOWRhMGFiNTM3YTRjMDIzMmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-26T16:27:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-26T16:27:44Z"}, "message": "Merge pull request #415 from RalfJung/cargo-miri\n\ntest `cargo miri` output", "tree": {"sha": "a7f5ead8529541a382526185bff3a1d02b57e3ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f5ead8529541a382526185bff3a1d02b57e3ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbWfaBCRBK7hj4Ov3rIwAAdHIIAJypz94G2DX470zyoHJ7+5WF\nq4IRNLuhzIrQ5rJCtZr4GGEaC3MyEcAZ1jYtZrtgu8oq9jQ+1d/nUtRxY91K8CpP\nwkLgA6bgMvrirowq+pCY+Be8Gkk1ovvMjfvn6s8KpObrjdsBkmf44UKC8YLDr72O\n7zK5UMBQaTk1TsgASXWDBxJl7Wyiv9h8smhTDZB7Bi1v6WZmiEtrsGOkNUtuwGC3\neQDeMnwsDxs9uf020MZsrzXkkAR1a7J3R7Jnu6pyfeQvD1qOclMY8kcsnlX4vsTJ\nkM62gN403OjM0Tg2RcJ6leKuUoY2vl6Jv4g+V9qencL7kYkczMiG5hw06l0M6Bo=\n=Pi1H\n-----END PGP SIGNATURE-----\n", "payload": "tree a7f5ead8529541a382526185bff3a1d02b57e3ec\nparent 8a6d6f0c95fc831c2ddc54d87d7fce2282cb48f5\nparent e2c1b7008642cfea12b347ed3dc4a7dd0e1f0ad0\nauthor Ralf Jung <post@ralfj.de> 1532622464 +0200\ncommitter GitHub <noreply@github.com> 1532622464 +0200\n\nMerge pull request #415 from RalfJung/cargo-miri\n\ntest `cargo miri` output"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "html_url": "https://github.com/rust-lang/rust/commit/79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6d6f0c95fc831c2ddc54d87d7fce2282cb48f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6d6f0c95fc831c2ddc54d87d7fce2282cb48f5", "html_url": "https://github.com/rust-lang/rust/commit/8a6d6f0c95fc831c2ddc54d87d7fce2282cb48f5"}, {"sha": "e2c1b7008642cfea12b347ed3dc4a7dd0e1f0ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c1b7008642cfea12b347ed3dc4a7dd0e1f0ad0", "html_url": "https://github.com/rust-lang/rust/commit/e2c1b7008642cfea12b347ed3dc4a7dd0e1f0ad0"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "d05661a484874beca3479e09270018ddefd89dc0", "filename": ".travis.yml", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "patch": "@@ -30,9 +30,19 @@ script:\n   RUST_BACKTRACE=1 cargo test --release --all-features --all &&\n   cargo install --all-features --force\n - |\n-  # Test cargo miri\n+  # Test `cargo miri`\n   cd cargo-miri-test &&\n-  cargo miri &&\n+  if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n+    MIRI_SYSROOT=~/.xargo/HOST cargo miri -q -- -Zmiri-start-fn\n+  else\n+    MIRI_SYSROOT=~/.xargo/HOST cargo miri -q -- -Zmiri-start-fn >stdout.real 2>stderr.real &&\n+    cat stdout.real stderr.real &&\n+    # Test `cargo miri` output. Not on mac because output redirecting doesn't\n+    # work. There is no error. It just stops CI.\n+    diff -u stdout.ref stdout.real &&\n+    diff -u stderr.ref stderr.real\n+  fi &&\n+  # Test `cargo miri test`\n   #cargo miri test &&\n   cd ..\n - |"}, {"sha": "56f307a7fb1331742bd7b9536eea235af055f636", "filename": "cargo-miri-test/.gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/cargo-miri-test%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/cargo-miri-test%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2F.gitignore?ref=79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "patch": "@@ -0,0 +1 @@\n+*.real"}, {"sha": "3fb265f6a7ba95608cd2f1342c0b09cb71a9d645", "filename": "cargo-miri-test/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/cargo-miri-test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/cargo-miri-test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Fsrc%2Fmain.rs?ref=79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "patch": "@@ -6,4 +6,6 @@ fn main() {\n     let buf = &[1,2,3,4];\n     let n = <BigEndian as ByteOrder>::read_u32(buf);\n     assert_eq!(n, 0x01020304);\n+    //println!(\"{:#x}\", n); FIXME enable once memrchr works in miri\n+    eprintln!(\"standard error\");\n }"}, {"sha": "aa7d1a2bdec7dcd036b35446c26da4ed483f080c", "filename": "cargo-miri-test/stderr.ref", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/cargo-miri-test%2Fstderr.ref", "raw_url": "https://github.com/rust-lang/rust/raw/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/cargo-miri-test%2Fstderr.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Fstderr.ref?ref=79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "patch": "@@ -0,0 +1 @@\n+standard error"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "cargo-miri-test/stdout.ref", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/cargo-miri-test%2Fstdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/cargo-miri-test%2Fstdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Fstdout.ref?ref=79d0a01fa5db906d4280b0f9da0ab537a4c0232d"}, {"sha": "9dfff9f5539829256228a3ab4e390e801b609d0a", "filename": "src/fn_call.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "patch": "@@ -612,7 +612,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n \n             // Stub out all the other pthread calls to just return 0\n             link_name if link_name.starts_with(\"pthread_\") => {\n-                info!(\"ignoring C ABI call: {}\", link_name);\n+                debug!(\"ignoring C ABI call: {}\", link_name);\n                 self.write_null(dest, dest_ty)?;\n             }\n \n@@ -759,7 +759,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n         match &path[..] {\n             // A Rust function is missing, which means we are running with MIR missing for libstd (or other dependencies).\n             // Still, we can make many things mostly work by \"emulating\" or ignoring some functions.\n-            \"std::io::_print\" => {\n+            \"std::io::_print\" |\n+            \"std::io::_eprint\" => {\n                 warn!(\n                     \"Ignoring output.  To run programs that print, make sure you have a libstd with full MIR.\"\n                 );"}, {"sha": "82a2144a337ded071212f909089a1e803e25b3b1", "filename": "tests/compiletest.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d0a01fa5db906d4280b0f9da0ab537a4c0232d/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "patch": "@@ -8,7 +8,6 @@ use colored::*;\n use std::slice::SliceConcatExt;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n-use std::env;\n \n macro_rules! eprintln {\n     ($($arg:tt)*) => {\n@@ -111,9 +110,6 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n         // For now, only validate without optimizations.  Inlining breaks validation.\n         flags.push(\"-Zmir-emit-validate=1\".to_owned());\n     }\n-    // Control miri logging. This is okay despite concurrent test execution as all tests\n-    // will set this env var to the same value.\n-    env::set_var(\"MIRI_LOG\", \"warn\");\n     config.target_rustcflags = Some(flags.join(\" \"));\n     compiletest::run_tests(&config);\n }"}]}