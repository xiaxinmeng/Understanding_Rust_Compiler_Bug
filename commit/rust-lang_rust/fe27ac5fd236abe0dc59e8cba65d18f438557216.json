{"sha": "fe27ac5fd236abe0dc59e8cba65d18f438557216", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjdhYzVmZDIzNmFiZTBkYzU5ZThjYmE2NWQxOGY0Mzg1NTcyMTY=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-09-27T23:15:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-27T23:15:33Z"}, "message": "Merge pull request #1237 from Manishearth/rustup\n\nRustup to *rustc 1.13.0-nightly (d0623cf7b 2016-09-26)* and bump to 0.0.91", "tree": {"sha": "82624f6befc9273e8911072000303f1fdf678a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82624f6befc9273e8911072000303f1fdf678a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe27ac5fd236abe0dc59e8cba65d18f438557216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe27ac5fd236abe0dc59e8cba65d18f438557216", "html_url": "https://github.com/rust-lang/rust/commit/fe27ac5fd236abe0dc59e8cba65d18f438557216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe27ac5fd236abe0dc59e8cba65d18f438557216/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6361c875094a98cbf2b93898d8de326478277d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/6361c875094a98cbf2b93898d8de326478277d53", "html_url": "https://github.com/rust-lang/rust/commit/6361c875094a98cbf2b93898d8de326478277d53"}, {"sha": "ec27062bb623195ac6fd5005e6f2b1fd6b99666a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec27062bb623195ac6fd5005e6f2b1fd6b99666a", "html_url": "https://github.com/rust-lang/rust/commit/ec27062bb623195ac6fd5005e6f2b1fd6b99666a"}], "stats": {"total": 134, "additions": 70, "deletions": 64}, "files": [{"sha": "bc8a0a14ffb3106ccf3e1947e891f1d418c39107", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.91 \u2014 2016-09-28\n+* Rustup to *rustc 1.13.0-nightly (d0623cf7b 2016-09-26)*\n+\n ## 0.0.90 \u2014 2016-09-09\n * Rustup to *rustc 1.13.0-nightly (f1f40f850 2016-09-09)*\n "}, {"sha": "ce3a60c05bee2f197e8d4e9a0e499c6a139a7c33", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.90\"\n+version = \"0.0.91\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -25,7 +25,7 @@ test = false\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.90\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.91\", path = \"clippy_lints\" }\n # end automatic update\n \n [dev-dependencies]"}, {"sha": "7d08732ee275e08a008b3fd192f8461a510206e6", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.90\"\n+version = \"0.0.91\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "fc15be2476a19d7daf5785c141b080c393151cec", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -4,7 +4,6 @@ use rustc::hir::*;\n use rustc::hir::def::Def;\n use rustc::hir::map::Node::NodeItem;\n use rustc::lint::{LateLintPass, LintPass, LateContext, LintArray, LintContext};\n-use rustc::middle::cstore::DefLike;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use utils::span_lint;\n@@ -61,7 +60,7 @@ impl EnumGlobUse {\n                     } else {\n                         let child = cx.sess().cstore.item_children(def.full_def().def_id());\n                         if let Some(child) = child.first() {\n-                            if let DefLike::DlDef(Def::Variant(..)) = child.def {\n+                            if let Some(Def::Variant(..)) = cx.tcx.sess.cstore.describe_def(child.def_id) {\n                                 span_lint(cx, ENUM_GLOB_USE, item.span, \"don't use glob imports for enum variants\");\n                             }\n                         }"}, {"sha": "68dff35533206a8477084846b892a24eb8d06f6e", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::def_id::DefId;\n-use rustc::ty::{self, MethodTraitItemId, ImplOrTraitItemId};\n+use rustc::ty::{self, ImplOrTraitItem};\n use rustc::hir::*;\n use syntax::ast::{Lit, LitKind, Name};\n use syntax::codemap::{Span, Spanned};\n@@ -184,37 +184,33 @@ fn check_len_zero(cx: &LateContext, span: Span, name: &Name, args: &[P<Expr>], l\n /// Check if this type has an `is_empty` method.\n fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n     /// Get an `ImplOrTraitItem` and return true if it matches `is_empty(self)`.\n-    fn is_is_empty(cx: &LateContext, id: &ImplOrTraitItemId) -> bool {\n-        if let MethodTraitItemId(def_id) = *id {\n-            if let ty::MethodTraitItem(ref method) = cx.tcx.impl_or_trait_item(def_id) {\n-                method.name.as_str() == \"is_empty\" && method.fty.sig.skip_binder().inputs.len() == 1\n-            } else {\n-                false\n-            }\n+    fn is_is_empty(item: &ImplOrTraitItem) -> bool {\n+        if let ty::MethodTraitItem(ref method) = *item {\n+            method.name.as_str() == \"is_empty\" && method.fty.sig.skip_binder().inputs.len() == 1\n         } else {\n             false\n         }\n     }\n \n     /// Check the inherent impl's items for an `is_empty(self)` method.\n-    fn has_is_empty_impl(cx: &LateContext, id: &DefId) -> bool {\n-        let impl_items = cx.tcx.impl_items.borrow();\n-        cx.tcx.inherent_impls.borrow().get(id).map_or(false, |ids| {\n-            ids.iter().any(|iid| impl_items.get(iid).map_or(false, |iids| iids.iter().any(|i| is_is_empty(cx, i))))\n+    fn has_is_empty_impl(cx: &LateContext, id: DefId) -> bool {\n+        cx.tcx.inherent_impls.borrow()[&id].iter().any(|imp| {\n+            cx.tcx.impl_or_trait_items(*imp).iter().any(|item| {\n+                is_is_empty(&cx.tcx.impl_or_trait_item(*item))\n+            })\n         })\n     }\n \n     let ty = &walk_ptrs_ty(cx.tcx.expr_ty(expr));\n     match ty.sty {\n         ty::TyTrait(_) => {\n             cx.tcx\n-              .trait_item_def_ids\n-              .borrow()\n-              .get(&ty.ty_to_def_id().expect(\"trait impl not found\"))\n-              .map_or(false, |ids| ids.iter().any(|i| is_is_empty(cx, i)))\n+              .impl_or_trait_items(ty.ty_to_def_id().expect(\"trait impl not found\"))\n+              .iter()\n+              .any(|item| is_is_empty(&cx.tcx.impl_or_trait_item(*item)))\n         }\n-        ty::TyProjection(_) => ty.ty_to_def_id().map_or(false, |id| has_is_empty_impl(cx, &id)),\n-        ty::TyAdt(id, _) => has_is_empty_impl(cx, &id.did),\n+        ty::TyProjection(_) => ty.ty_to_def_id().map_or(false, |id| has_is_empty_impl(cx, id)),\n+        ty::TyAdt(id, _) => has_is_empty_impl(cx, id.did),\n         ty::TyArray(..) | ty::TyStr => true,\n         _ => false,\n     }"}, {"sha": "8c033a2d4ab40dc03bdb0ba107a2415cef9ecda9", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -755,7 +755,10 @@ impl<'v, 't> Visitor<'v> for VarVisitor<'v, 't> {\n                     if let Some(def) = def_map.get(&seqexpr.id) {\n                         match def.base_def {\n                             Def::Local(..) | Def::Upvar(..) => {\n-                                let extent = self.cx.tcx.region_maps.var_scope(def.base_def.var_id());\n+                                let def_id = def.base_def.def_id();\n+                                let node_id = self.cx.tcx.map.as_local_node_id(def_id).unwrap();\n+\n+                                let extent = self.cx.tcx.region_maps.var_scope(node_id);\n                                 self.indexed.insert(seqvar.segments[0].name, Some(extent));\n                                 return;  // no need to walk further\n                             }\n@@ -1040,7 +1043,8 @@ impl<'v, 't> Visitor<'v> for InitializeVisitor<'v, 't> {\n \n fn var_def_id(cx: &LateContext, expr: &Expr) -> Option<NodeId> {\n     if let Some(path_res) = cx.tcx.def_map.borrow().get(&expr.id) {\n-        if let Def::Local(_, node_id) = path_res.base_def {\n+        if let Def::Local(def_id) = path_res.base_def {\n+            let node_id = cx.tcx.map.as_local_node_id(def_id).expect(\"That DefId should be valid\");\n             return Some(node_id);\n         }\n     }"}, {"sha": "afe9a6fee0beafacba9ab13f69ecd37528d6f61a", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -443,7 +443,9 @@ fn in_attributes_expansion(cx: &LateContext, expr: &Expr) -> bool {\n /// Test whether `def` is a variable defined outside a macro.\n fn non_macro_local(cx: &LateContext, def: &def::Def) -> bool {\n     match *def {\n-        def::Def::Local(_, id) | def::Def::Upvar(_, id, _, _) => {\n+        def::Def::Local(id) | def::Def::Upvar(id, _, _) => {\n+            let id = cx.tcx.map.as_local_node_id(id).expect(\"That DefId should be valid\");\n+\n             if let Some(span) = cx.tcx.map.opt_span(id) {\n                 !in_macro(cx, span)\n             } else {"}, {"sha": "897df4e617017a738d37308e2783287e1927961c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -127,18 +127,21 @@ declare_lint! {\n fn check_let_unit(cx: &LateContext, decl: &Decl) {\n     if let DeclLocal(ref local) = decl.node {\n         let bindtype = &cx.tcx.pat_ty(&local.pat).sty;\n-        if *bindtype == ty::TyTuple(&[]) {\n-            if in_external_macro(cx, decl.span) || in_macro(cx, local.pat.span) {\n-                return;\n-            }\n-            if higher::is_from_for_desugar(decl) {\n-                return;\n+        match *bindtype {\n+            ty::TyTuple(slice) if slice.is_empty() => {\n+                if in_external_macro(cx, decl.span) || in_macro(cx, local.pat.span) {\n+                    return;\n+                }\n+                if higher::is_from_for_desugar(decl) {\n+                    return;\n+                }\n+                span_lint(cx,\n+                          LET_UNIT_VALUE,\n+                          decl.span,\n+                          &format!(\"this let-binding has unit value. Consider omitting `let {} =`\",\n+                                   snippet(cx, local.pat.span, \"..\")));\n             }\n-            span_lint(cx,\n-                      LET_UNIT_VALUE,\n-                      decl.span,\n-                      &format!(\"this let-binding has unit value. Consider omitting `let {} =`\",\n-                               snippet(cx, local.pat.span, \"..\")));\n+            _ => (),\n         }\n     }\n }\n@@ -193,18 +196,23 @@ impl LateLintPass for UnitCmp {\n         }\n         if let ExprBinary(ref cmp, ref left, _) = expr.node {\n             let op = cmp.node;\n-            let sty = &cx.tcx.expr_ty(left).sty;\n-            if *sty == ty::TyTuple(&[]) && op.is_comparison() {\n-                let result = match op {\n-                    BiEq | BiLe | BiGe => \"true\",\n-                    _ => \"false\",\n-                };\n-                span_lint(cx,\n-                          UNIT_CMP,\n-                          expr.span,\n-                          &format!(\"{}-comparison of unit values detected. This will always be {}\",\n-                                   op.as_str(),\n-                                   result));\n+            if op.is_comparison() {\n+                let sty = &cx.tcx.expr_ty(left).sty;\n+                match *sty {\n+                    ty::TyTuple(slice) if slice.is_empty() => {\n+                        let result = match op {\n+                            BiEq | BiLe | BiGe => \"true\",\n+                            _ => \"false\",\n+                        };\n+                        span_lint(cx,\n+                                  UNIT_CMP,\n+                                  expr.span,\n+                                  &format!(\"{}-comparison of unit values detected. This will always be {}\",\n+                                           op.as_str(),\n+                                           result));\n+                    }\n+                    _ => ()\n+                }\n             }\n         }\n     }"}, {"sha": "0f5afde9508102622a8efb6ed2cd161aa4a28486", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -1,9 +1,8 @@\n use reexport::*;\n use rustc::hir::*;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::hir::map::Node;\n use rustc::lint::{LintContext, LateContext, Level, Lint};\n-use rustc::middle::cstore;\n use rustc::session::Session;\n use rustc::traits::Reveal;\n use rustc::traits;\n@@ -216,13 +215,14 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n \n /// Get the definition associated to a path.\n /// TODO: investigate if there is something more efficient for that.\n-pub fn path_to_def(cx: &LateContext, path: &[&str]) -> Option<cstore::DefLike> {\n+pub fn path_to_def(cx: &LateContext, path: &[&str]) -> Option<def::Def> {\n     let cstore = &cx.tcx.sess.cstore;\n \n     let crates = cstore.crates();\n     let krate = crates.iter().find(|&&krate| cstore.crate_name(krate) == path[0]);\n     if let Some(krate) = krate {\n-        let mut items = cstore.crate_top_level_items(*krate);\n+        let krate = DefId { krate: *krate, index: CRATE_DEF_INDEX };\n+        let mut items = cstore.item_children(krate);\n         let mut path_it = path.iter().skip(1).peekable();\n \n         loop {\n@@ -234,16 +234,10 @@ pub fn path_to_def(cx: &LateContext, path: &[&str]) -> Option<cstore::DefLike> {\n             for item in &mem::replace(&mut items, vec![]) {\n                 if item.name.as_str() == *segment {\n                     if path_it.peek().is_none() {\n-                        return Some(item.def);\n+                        return cx.tcx.sess.cstore.describe_def(item.def_id);\n                     }\n \n-                    let def_id = match item.def {\n-                        cstore::DefLike::DlDef(def) => def.def_id(),\n-                        cstore::DefLike::DlImpl(def_id) => def_id,\n-                        _ => panic!(\"Unexpected {:?}\", item.def),\n-                    };\n-\n-                    items = cstore.item_children(def_id);\n+                    items = cstore.item_children(item.def_id);\n                     break;\n                 }\n             }\n@@ -261,7 +255,7 @@ pub fn get_trait_def_id(cx: &LateContext, path: &[&str]) -> Option<DefId> {\n     };\n \n     match def {\n-        cstore::DlDef(def::Def::Trait(trait_id)) => Some(trait_id),\n+        def::Def::Trait(trait_id) => Some(trait_id),\n         _ => None,\n     }\n }"}, {"sha": "4639e4739352229b95b2a8ace7aae02a6a4058a6", "filename": "tests/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe27ac5fd236abe0dc59e8cba65d18f438557216/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe27ac5fd236abe0dc59e8cba65d18f438557216/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=fe27ac5fd236abe0dc59e8cba65d18f438557216", "patch": "@@ -9,7 +9,7 @@ extern crate syntax;\n use clippy_lints::consts::{constant_simple, Constant, FloatWidth};\n use rustc_const_math::ConstInt;\n use rustc::hir::*;\n-use syntax::ast::{LitIntType, LitKind, StrStyle};\n+use syntax::ast::{LitIntType, LitKind, NodeId, StrStyle};\n use syntax::codemap::{Spanned, COMMAND_LINE_SP};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n@@ -24,7 +24,7 @@ fn spanned<T>(t: T) -> Spanned<T> {\n \n fn expr(n: Expr_) -> Expr {\n     Expr {\n-        id: 1,\n+        id: NodeId::new(1),\n         node: n,\n         span: COMMAND_LINE_SP,\n         attrs: ThinVec::new(),"}]}