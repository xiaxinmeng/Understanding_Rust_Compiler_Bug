{"sha": "4e63ab6fc11ab942052c485ed121a606f0a7d319", "node_id": "C_kwDOAAsO6NoAKDRlNjNhYjZmYzExYWI5NDIwNTJjNDg1ZWQxMjFhNjA2ZjBhN2QzMTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-31T03:54:25Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-31T04:57:25Z"}, "message": "Improve `with_source_map`.\n\nRename `with_source_map` as `set_source_map`. Because `with` functions\n(e.g. `with_session_globals`, `scoped_tls::ScopedKey::with`) are for\n*getting* a value for the duration of a closure, and `set` functions\n(e.g. `set_session_globals_then` `scoped_tls::ScopedKey::with`) are for\n*setting* a value for the duration of a closure.\n\nAlso fix up the comment, which is wrong:\n- The bit about `TyCtxt` is wrong.\n- `span_debug1` doesn't exist any more.\n- There's only one level of fallback, not two.\n\n(This is effectively a follow-up to the changes in #93936.)\n\nAlso add a comment explaining that `SessionGlobals::source_map` should\nonly be used when absolutely necessary.", "tree": {"sha": "658326a708adcad8e7d9675aad98398905221dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/658326a708adcad8e7d9675aad98398905221dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e63ab6fc11ab942052c485ed121a606f0a7d319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e63ab6fc11ab942052c485ed121a606f0a7d319", "html_url": "https://github.com/rust-lang/rust/commit/4e63ab6fc11ab942052c485ed121a606f0a7d319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e63ab6fc11ab942052c485ed121a606f0a7d319/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f049d5df10fc169d12ae825b5a5e78e47a0195bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f049d5df10fc169d12ae825b5a5e78e47a0195bd", "html_url": "https://github.com/rust-lang/rust/commit/f049d5df10fc169d12ae825b5a5e78e47a0195bd"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "be7fa9378ca66262fb20559c24836813b7b0e6f2", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e63ab6fc11ab942052c485ed121a606f0a7d319/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e63ab6fc11ab942052c485ed121a606f0a7d319/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=4e63ab6fc11ab942052c485ed121a606f0a7d319", "patch": "@@ -292,7 +292,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 override_queries: config.override_queries,\n             };\n \n-            rustc_span::with_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n+            rustc_span::set_source_map(compiler.sess.parse_sess.clone_source_map(), move || {\n                 let r = {\n                     let _sess_abort_error = OnDrop(|| {\n                         compiler.sess.finish_diagnostics(registry);"}, {"sha": "e14760aa01885207faa7a3bfd4fbc3a7fcf7ec54", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4e63ab6fc11ab942052c485ed121a606f0a7d319/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e63ab6fc11ab942052c485ed121a606f0a7d319/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=4e63ab6fc11ab942052c485ed121a606f0a7d319", "patch": "@@ -87,6 +87,14 @@ pub struct SessionGlobals {\n     symbol_interner: symbol::Interner,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n+\n+    /// A reference to the source map in the `Session`. It's an `Option`\n+    /// because it can't be initialized until `Session` is created, which\n+    /// happens after `SessionGlobals`. `set_source_map` does the\n+    /// initialization.\n+    ///\n+    /// This field should only be used in places where the `Session` is truly\n+    /// not available, such as `<Span as Debug>::fmt`.\n     source_map: Lock<Option<Lrc<SourceMap>>>,\n }\n \n@@ -1013,16 +1021,9 @@ impl<D: Decoder> Decodable<D> for Span {\n     }\n }\n \n-/// Calls the provided closure, using the provided `SourceMap` to format\n-/// any spans that are debug-printed during the closure's execution.\n-///\n-/// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`\n-/// (see `rustc_interface::callbacks::span_debug1`). However, some parts\n-/// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before\n-/// a `TyCtxt` is available. In this case, we fall back to\n-/// the `SourceMap` provided to this function. If that is not available,\n-/// we fall back to printing the raw `Span` field values.\n-pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n+/// Insert `source_map` into the session globals for the duration of the\n+/// closure's execution.\n+pub fn set_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {\n     with_session_globals(|session_globals| {\n         *session_globals.source_map.borrow_mut() = Some(source_map);\n     });\n@@ -1041,6 +1042,8 @@ pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) ->\n \n impl fmt::Debug for Span {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Use the global `SourceMap` to print the span. If that's not\n+        // available, fall back to printing the raw values.\n         with_session_globals(|session_globals| {\n             if let Some(source_map) = &*session_globals.source_map.borrow() {\n                 write!(f, \"{} ({:?})\", source_map.span_to_diagnostic_string(*self), self.ctxt())"}]}