{"sha": "3d0b0e66afdfaa519d8855b338b35b4605775945", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMGIwZTY2YWZkZmFhNTE5ZDg4NTViMzM4YjM1YjQ2MDU3NzU5NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-28T11:54:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-28T11:54:07Z"}, "message": "Auto merge of #5774 - ThibsG:FixNewRetNoSelf, r=ebroto\n\nFix FP in `new_ret_no_self`: trigger in trait def instead of impl block\n\nLint in trait def instead of impl block.\n\nFixes: #5435\n\nchangelog: none", "tree": {"sha": "d1137afdf114ced0916df4b6096723f0836da0eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1137afdf114ced0916df4b6096723f0836da0eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d0b0e66afdfaa519d8855b338b35b4605775945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0b0e66afdfaa519d8855b338b35b4605775945", "html_url": "https://github.com/rust-lang/rust/commit/3d0b0e66afdfaa519d8855b338b35b4605775945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d0b0e66afdfaa519d8855b338b35b4605775945/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c5e9edb5db8723b15573eb6ebe183fddbc5d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c5e9edb5db8723b15573eb6ebe183fddbc5d33", "html_url": "https://github.com/rust-lang/rust/commit/07c5e9edb5db8723b15573eb6ebe183fddbc5d33"}, {"sha": "73b1ee1a614aaad7dd43958280ff4a444c8b737e", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b1ee1a614aaad7dd43958280ff4a444c8b737e", "html_url": "https://github.com/rust-lang/rust/commit/73b1ee1a614aaad7dd43958280ff4a444c8b737e"}], "stats": {"total": 260, "additions": 230, "deletions": 30}, "files": [{"sha": "9996df69470f0e9242548fb8f41a1e93f93067a4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 59, "deletions": 26, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3d0b0e66afdfaa519d8855b338b35b4605775945/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0b0e66afdfaa519d8855b338b35b4605775945/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3d0b0e66afdfaa519d8855b338b35b4605775945", "patch": "@@ -15,24 +15,24 @@ use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n+use rustc_hir::{TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n \n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro, is_copy,\n-    is_ctor_or_promotable_const_function, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n-    match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, paths,\n-    remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n-    span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then, sugg, walk_ptrs_ty,\n-    walk_ptrs_ty_depth, SpanlessEq,\n+    contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait, in_macro,\n+    is_copy, is_ctor_or_promotable_const_function, is_expn_of, is_type_diagnostic_item, iter_input_pats,\n+    last_path_segment, match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls,\n+    method_chain_args, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    span_lint_and_then, sugg, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -724,6 +724,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n+    /// In an impl block:\n     /// ```rust\n     /// # struct Foo;\n     /// # struct NotAFoo;\n@@ -736,25 +737,40 @@ declare_clippy_lint! {\n     ///\n     /// ```rust\n     /// # struct Foo;\n-    /// # struct FooError;\n+    /// struct Bar(Foo);\n     /// impl Foo {\n-    ///     // Good. Return type contains `Self`\n-    ///     fn new() -> Result<Foo, FooError> {\n-    ///         # Ok(Foo)\n+    ///     // Bad. The type name must contain `Self`\n+    ///     fn new() -> Bar {\n+    /// # Bar(Foo)\n     ///     }\n     /// }\n     /// ```\n     ///\n     /// ```rust\n     /// # struct Foo;\n-    /// struct Bar(Foo);\n+    /// # struct FooError;\n     /// impl Foo {\n-    ///     // Bad. The type name must contain `Self`.\n-    ///     fn new() -> Bar {\n-    ///         # Bar(Foo)\n+    ///     // Good. Return type contains `Self`\n+    ///     fn new() -> Result<Foo, FooError> {\n+    /// # Ok(Foo)\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// Or in a trait definition:\n+    /// ```rust\n+    /// pub trait Trait {\n+    ///     // Bad. The type name must contain `Self`\n+    ///     fn new();\n+    /// }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// pub trait Trait {\n+    ///     // Good. Return type contains `Self`\n+    ///     fn new() -> Self;\n+    /// }\n+    /// ```\n     pub NEW_RET_NO_SELF,\n     style,\n     \"not returning type containing `Self` in a `new` method\"\n@@ -1631,19 +1647,16 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             }\n         }\n \n+        // if this impl block implements a trait, lint in trait definition instead\n+        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            return;\n+        }\n+\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id);\n \n-            let contains_self_ty = |ty: Ty<'tcx>| {\n-                ty.walk().any(|inner| match inner.unpack() {\n-                    GenericArgKind::Type(inner_ty) => TyS::same_type(self_ty, inner_ty),\n-\n-                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n-                })\n-            };\n-\n             // walk the return type and check for Self (this does not check associated types)\n-            if contains_self_ty(ret_ty) {\n+            if contains_ty(ret_ty, self_ty) {\n                 return;\n             }\n \n@@ -1653,7 +1666,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n                     if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n                         // walk the associated type and check for Self\n-                        if contains_self_ty(projection_predicate.ty) {\n+                        if contains_ty(projection_predicate.ty, self_ty) {\n                             return;\n                         }\n                     }\n@@ -1670,6 +1683,26 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             }\n         }\n     }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n+        if_chain! {\n+            if !in_external_macro(cx.tcx.sess, item.span);\n+            if item.ident.name == sym!(new);\n+            if let TraitItemKind::Fn(_, _) = item.kind;\n+            let ret_ty = return_ty(cx, item.hir_id);\n+            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+            if !contains_ty(ret_ty, self_ty);\n+\n+            then {\n+                span_lint(\n+                    cx,\n+                    NEW_RET_NO_SELF,\n+                    item.span,\n+                    \"methods called `new` usually return `Self`\",\n+                );\n+            }\n+        }\n+    }\n }\n \n /// Checks for the `OR_FUN_CALL` lint."}, {"sha": "82005257115642072aa4c26858eeda9532904075", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d0b0e66afdfaa519d8855b338b35b4605775945/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0b0e66afdfaa519d8855b338b35b4605775945/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3d0b0e66afdfaa519d8855b338b35b4605775945", "patch": "@@ -42,7 +42,8 @@ use rustc_hir::{\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::{self, layout::IntegerExt, subst::GenericArg, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n+use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n use rustc_mir::const_eval;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n@@ -866,6 +867,14 @@ pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx>\n     cx.tcx.erase_late_bound_regions(&ret_ty)\n }\n \n+/// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n+pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n+    ty.walk().any(|inner| match inner.unpack() {\n+        GenericArgKind::Type(inner_ty) => ty::TyS::same_type(other_ty, inner_ty),\n+        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+    })\n+}\n+\n /// Returns `true` if the given type is an `unsafe` function.\n pub fn type_is_unsafe_function<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.kind {"}, {"sha": "e82873629a54b0de91ad1068fff7d552001fe81b", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 132, "deletions": 2, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/3d0b0e66afdfaa519d8855b338b35b4605775945/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0b0e66afdfaa519d8855b338b35b4605775945/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=3d0b0e66afdfaa519d8855b338b35b4605775945", "patch": "@@ -137,9 +137,9 @@ impl MutPointerReturnerOk {\n     }\n }\n \n-struct MutPointerReturnerOk2;\n+struct ConstPointerReturnerOk2;\n \n-impl MutPointerReturnerOk2 {\n+impl ConstPointerReturnerOk2 {\n     // should not trigger lint\n     pub fn new() -> *const Self {\n         unimplemented!();\n@@ -210,3 +210,133 @@ impl<'a> WithLifetime<'a> {\n         unimplemented!();\n     }\n }\n+\n+mod issue5435 {\n+    struct V;\n+\n+    pub trait TraitRetSelf {\n+        // should not trigger lint\n+        fn new() -> Self;\n+    }\n+\n+    pub trait TraitRet {\n+        // should trigger lint as we are in trait definition\n+        fn new() -> String;\n+    }\n+    pub struct StructRet;\n+    impl TraitRet for StructRet {\n+        // should not trigger lint as we are in the impl block\n+        fn new() -> String {\n+            unimplemented!();\n+        }\n+    }\n+\n+    pub trait TraitRet2 {\n+        // should trigger lint\n+        fn new(_: String) -> String;\n+    }\n+\n+    trait TupleReturnerOk {\n+        // should not trigger lint\n+        fn new() -> (Self, u32)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait TupleReturnerOk2 {\n+        // should not trigger lint (it doesn't matter which element in the tuple is Self)\n+        fn new() -> (u32, Self)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait TupleReturnerOk3 {\n+        // should not trigger lint (tuple can contain multiple Self)\n+        fn new() -> (Self, Self)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait TupleReturnerBad {\n+        // should trigger lint\n+        fn new() -> (u32, u32) {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait MutPointerReturnerOk {\n+        // should not trigger lint\n+        fn new() -> *mut Self\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait ConstPointerReturnerOk2 {\n+        // should not trigger lint\n+        fn new() -> *const Self\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait MutPointerReturnerBad {\n+        // should trigger lint\n+        fn new() -> *mut V {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait GenericReturnerOk {\n+        // should not trigger lint\n+        fn new() -> Option<Self>\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait NestedReturnerOk {\n+        // should not trigger lint\n+        fn new() -> (Option<Self>, u32)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait NestedReturnerOk2 {\n+        // should not trigger lint\n+        fn new() -> ((Self, u32), u32)\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+\n+    trait NestedReturnerOk3 {\n+        // should not trigger lint\n+        fn new() -> Option<(Self, u32)>\n+        where\n+            Self: Sized,\n+        {\n+            unimplemented!();\n+        }\n+    }\n+}"}, {"sha": "8217bc6187f93aa5cfce1ddbc5ce7ed4788b6173", "filename": "tests/ui/new_ret_no_self.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d0b0e66afdfaa519d8855b338b35b4605775945/tests%2Fui%2Fnew_ret_no_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d0b0e66afdfaa519d8855b338b35b4605775945/tests%2Fui%2Fnew_ret_no_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.stderr?ref=3d0b0e66afdfaa519d8855b338b35b4605775945", "patch": "@@ -48,5 +48,33 @@ LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n-error: aborting due to 6 previous errors\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:224:9\n+   |\n+LL |         fn new() -> String;\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:236:9\n+   |\n+LL |         fn new(_: String) -> String;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:271:9\n+   |\n+LL | /         fn new() -> (u32, u32) {\n+LL | |             unimplemented!();\n+LL | |         }\n+   | |_________^\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/new_ret_no_self.rs:298:9\n+   |\n+LL | /         fn new() -> *mut V {\n+LL | |             unimplemented!();\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 10 previous errors\n "}]}