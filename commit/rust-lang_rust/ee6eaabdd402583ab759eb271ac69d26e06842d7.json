{"sha": "ee6eaabdd402583ab759eb271ac69d26e06842d7", "node_id": "C_kwDOAAsO6NoAKGVlNmVhYWJkZDQwMjU4M2FiNzU5ZWIyNzFhYzY5ZDI2ZTA2ODQyZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-11T06:29:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-11T06:29:04Z"}, "message": "Auto merge of #96931 - JohnTitor:rollup-3um8o4j, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #96543 (Remove hacks in `make_token_stream`.)\n - #96887 (rustdoc: correct path to type alias methods)\n - #96896 (Add regression test for #68408)\n - #96900 (Fix js error)\n - #96903 (Use lifetimes on type-alias-impl-trait used in function signatures to infer output type lifetimes)\n - #96916 (simplify length count)\n - #96925 (Fix issue #95151)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9794dde2f6169492971376420fe5e6ce0712c0f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9794dde2f6169492971376420fe5e6ce0712c0f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee6eaabdd402583ab759eb271ac69d26e06842d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6eaabdd402583ab759eb271ac69d26e06842d7", "html_url": "https://github.com/rust-lang/rust/commit/ee6eaabdd402583ab759eb271ac69d26e06842d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee6eaabdd402583ab759eb271ac69d26e06842d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b862b438dbffb959ef4e9643148ecd05b8da4d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b862b438dbffb959ef4e9643148ecd05b8da4d8a", "html_url": "https://github.com/rust-lang/rust/commit/b862b438dbffb959ef4e9643148ecd05b8da4d8a"}, {"sha": "514b585757126a09785765bc5177299cd5bb5e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/514b585757126a09785765bc5177299cd5bb5e2d", "html_url": "https://github.com/rust-lang/rust/commit/514b585757126a09785765bc5177299cd5bb5e2d"}], "stats": {"total": 150, "additions": 92, "deletions": 58}, "files": [{"sha": "a2a450d76f18a25606874d34332a1a20b1872d69", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -1349,7 +1349,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n-            if let ty::Projection(..) | ty::Opaque(..) = t.kind() {\n+            if let ty::Projection(..) = t.kind() {\n                 return ControlFlow::CONTINUE;\n             }\n         }"}, {"sha": "512d4daf3436b40ab60d5db88fa1cfc325e48389", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -485,7 +485,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n             }) {\n                 let merged_prefix_len = self.curr_original_span.lo() - self.curr().span.lo();\n                 let after_macro_bang =\n-                    merged_prefix_len + BytePos(visible_macro.as_str().bytes().count() as u32 + 1);\n+                    merged_prefix_len + BytePos(visible_macro.as_str().len() as u32 + 1);\n                 let mut macro_name_cov = self.curr().clone();\n                 self.curr_mut().span =\n                     self.curr().span.with_lo(self.curr().span.lo() + after_macro_bang);"}, {"sha": "66db5bf9d7cf2266bc08294892cb82c77b9100df", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -388,12 +388,6 @@ impl<'a> Parser<'a> {\n /// Converts a flattened iterator of tokens (including open and close delimiter tokens)\n /// into a `TokenStream`, creating a `TokenTree::Delimited` for each matching pair\n /// of open and close delims.\n-// FIXME(#67062): Currently, we don't parse `Invisible`-delimited groups correctly,\n-// which can cause us to end up with mismatched `Invisible` delimiters in our\n-// captured tokens. This function contains several hacks to work around this -\n-// essentially, we throw away mismatched `Invisible` delimiters when we encounter them.\n-// Once we properly parse `Invisible` delimiters, they can be captured just like any\n-// other tokens, and these hacks can be removed.\n fn make_token_stream(\n     mut iter: impl Iterator<Item = (FlatToken, Spacing)>,\n     break_last_token: bool,\n@@ -412,35 +406,10 @@ fn make_token_stream(\n                 stack.push(FrameData { open_delim_sp: Some((delim, span)), inner: vec![] });\n             }\n             FlatToken::Token(Token { kind: TokenKind::CloseDelim(delim), span }) => {\n-                // HACK: If we encounter a mismatched `Invisible` delimiter at the top\n-                // level, just ignore it.\n-                if matches!(delim, Delimiter::Invisible)\n-                    && (stack.len() == 1\n-                        || !matches!(\n-                            stack.last_mut().unwrap().open_delim_sp.unwrap().0,\n-                            Delimiter::Invisible\n-                        ))\n-                {\n-                    token_and_spacing = iter.next();\n-                    continue;\n-                }\n                 let frame_data = stack\n                     .pop()\n                     .unwrap_or_else(|| panic!(\"Token stack was empty for token: {:?}\", token));\n \n-                // HACK: If our current frame has a mismatched opening `Invisible` delimiter,\n-                // merge our current frame with the one above it. That is, transform\n-                // `[ { < first second } third ]` into `[ { first second } third ]`\n-                if !matches!(delim, Delimiter::Invisible)\n-                    && matches!(frame_data.open_delim_sp.unwrap().0, Delimiter::Invisible)\n-                {\n-                    stack.last_mut().unwrap().inner.extend(frame_data.inner);\n-                    // Process our closing delimiter again, this time at the previous\n-                    // frame in the stack\n-                    token_and_spacing = Some((token, spacing));\n-                    continue;\n-                }\n-\n                 let (open_delim, open_sp) = frame_data.open_delim_sp.unwrap();\n                 assert_eq!(\n                     open_delim, delim,\n@@ -472,13 +441,6 @@ fn make_token_stream(\n         }\n         token_and_spacing = iter.next();\n     }\n-    // HACK: If we don't have a closing `Invisible` delimiter for our last\n-    // frame, merge the frame with the top-level frame. That is,\n-    // turn `< first second` into `first second`\n-    if stack.len() == 2 && stack[1].open_delim_sp.unwrap().0 == Delimiter::Invisible {\n-        let temp_buf = stack.pop().unwrap();\n-        stack.last_mut().unwrap().inner.extend(temp_buf.inner);\n-    }\n     let mut final_buf = stack.pop().expect(\"Missing final buf!\");\n     if break_last_token {\n         let (last_token, spacing) = final_buf.inner.pop().unwrap();"}, {"sha": "369650edd57d0e4ccab84d313f6c0b03904dd8f3", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -2109,8 +2109,7 @@ impl<'a> Parser<'a> {\n                     brace_depth -= 1;\n                     continue;\n                 }\n-            } else if self.token == token::Eof || self.eat(&token::CloseDelim(Delimiter::Invisible))\n-            {\n+            } else if self.token == token::Eof {\n                 return;\n             } else {\n                 self.bump();"}, {"sha": "9dc30d8a18925f3e5b8e84bba554dc4333e692c0", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -288,14 +288,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             // for where the type was defined. On the other\n                             // hand, `paths` always has the right\n                             // information if present.\n-                            Some(&(\n-                                ref fqp,\n-                                ItemType::Trait\n-                                | ItemType::Struct\n-                                | ItemType::Union\n-                                | ItemType::Enum,\n-                            )) => Some(&fqp[..fqp.len() - 1]),\n-                            Some(..) => Some(&*self.cache.stack),\n+                            Some(&(ref fqp, _)) => Some(&fqp[..fqp.len() - 1]),\n                             None => None,\n                         };\n                         ((Some(*last), path), true)"}, {"sha": "0f4d842f4336d98a2e5c02248b984ce54d3ed12e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -331,7 +331,6 @@ li {\n nav.sub {\n \tposition: relative;\n \tfont-size: 1rem;\n-\ttext-transform: uppercase;\n }\n \n .sub-container {"}, {"sha": "15e3bdf47b2b182912d40cea85701ebb0d1ac95d", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -1,5 +1,5 @@\n // From rust:\n-/* global search, sourcesIndex */\n+/* global sourcesIndex */\n \n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass, onEachLazy, removeClass, browserSupportsHistoryApi */\n@@ -69,7 +69,6 @@ function createDirEntry(elem, parent, fullPath, currentFile, hasFoundFile) {\n             files.appendChild(file);\n         }\n     }\n-    search.fullPath = fullPath;\n     children.appendChild(files);\n     parent.appendChild(name);\n     parent.appendChild(children);"}, {"sha": "0066a38eaa5409d32c867f86a4998ca8a77f811f", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -15,6 +15,5 @@ assert-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\", \"opacity\": 1})\n assert-css: (\".sidebar > *:not(#sidebar-toggle)\", {\"visibility\": \"hidden\", \"opacity\": 0})\n // Let's expand the sidebar now.\n click: \"#sidebar-toggle\"\n-// Because of the transition CSS, better wait a second before checking.\n+// Because of the transition CSS, we check by using `wait-for-css` instead of `assert-css`.\n wait-for-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\", \"opacity\": 1})\n-assert-css: (\".sidebar > *:not(#sidebar-toggle)\", {\"visibility\": \"visible\", \"opacity\": 1})"}, {"sha": "fd228a59099e9e68297c95944718d2899b700371", "filename": "src/test/rustdoc-js-std/asrawfd.js", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Frustdoc-js-std%2Fasrawfd.js", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Frustdoc-js-std%2Fasrawfd.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fasrawfd.js?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -0,0 +1,14 @@\n+// ignore-order\n+\n+const QUERY = 'RawFd::as_raw_fd';\n+\n+const EXPECTED = {\n+    'others': [\n+        // Reproduction test for https://github.com/rust-lang/rust/issues/78724\n+        // Validate that type alias methods get the correct path.\n+        { 'path': 'std::os::unix::io::AsRawFd', 'name': 'as_raw_fd' },\n+        { 'path': 'std::os::wasi::io::AsRawFd', 'name': 'as_raw_fd' },\n+        { 'path': 'std::os::linux::process::PidFd', 'name': 'as_raw_fd' },\n+        { 'path': 'std::os::unix::io::RawFd', 'name': 'as_raw_fd' },\n+    ],\n+};"}, {"sha": "334761badcab1f45a2ea48157f4ea6fc125454db", "filename": "src/test/rustdoc-js/foreign-type-path.js", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Frustdoc-js%2Fforeign-type-path.js", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Frustdoc-js%2Fforeign-type-path.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fforeign-type-path.js?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -0,0 +1,9 @@\n+const QUERY = 'MyForeignType::my_method';\n+\n+const EXPECTED = {\n+    'others': [\n+        // Test case for https://github.com/rust-lang/rust/pull/96887#pullrequestreview-967154358\n+        // Validates that the parent path for a foreign type method is correct.\n+        { 'path': 'foreign_type_path::aaaaaaa::MyForeignType', 'name': 'my_method' },\n+    ],\n+};"}, {"sha": "83400104ea77ea489f522d3e60470ecbd0a25bca", "filename": "src/test/rustdoc-js/foreign-type-path.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Frustdoc-js%2Fforeign-type-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Frustdoc-js%2Fforeign-type-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fforeign-type-path.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -0,0 +1,13 @@\n+#![feature(extern_types)]\n+\n+pub mod aaaaaaa {\n+\n+    extern {\n+        pub type MyForeignType;\n+    }\n+\n+    impl MyForeignType {\n+        pub fn my_method() {}\n+    }\n+\n+}"}, {"sha": "7ee6b5d72889f74c84c8a8d0ccfad51298a67e4f", "filename": "src/test/ui/lint/dead-code/issue-68408-false-positive.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-68408-false-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-68408-false-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-68408-false-positive.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+// Make sure we don't have any false positives here.\n+\n+#![deny(dead_code)]\n+\n+enum X {\n+    A { _a: () },\n+    B { _b: () },\n+}\n+impl X {\n+    fn a() -> X {\n+        X::A { _a: () }\n+    }\n+    fn b() -> Self {\n+        Self::B { _b: () }\n+    }\n+}\n+\n+fn main() {\n+    let (_, _) = (X::a(), X::b());\n+}"}, {"sha": "6ca09fac819d8b7a3225c9bd6205f0c7597a2148", "filename": "src/test/ui/rfc-2091-track-caller/macro-declaration.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fmacro-declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fmacro-declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fmacro-declaration.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+// See https://github.com/rust-lang/rust/issues/95151\n+#[track_caller]\n+macro_rules! _foo {\n+    () => {};\n+}\n+\n+fn main() {\n+}"}, {"sha": "c32174288ee684069c391825a168785e6c0d8aef", "filename": "src/test/ui/type-alias-impl-trait/constrain_inputs.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fconstrain_inputs.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+mod foo {\n+    type Ty<'a> = impl Sized;\n+    fn defining(s: &str) -> Ty<'_> { s }\n+    fn execute(ty: Ty<'_>) -> &str { todo!() }\n+}\n+\n+mod bar {\n+    type Ty<'a> = impl FnOnce() -> &'a str;\n+    fn defining(s: &str) -> Ty<'_> { move || s }\n+    fn execute(ty: Ty<'_>) -> &str { ty() }\n+}\n+\n+fn main() {}"}, {"sha": "67f3985926e2f0a9af26fd4d0ab6f5bfdd6bd20d", "filename": "src/tools/rustfmt/src/parse/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6eaabdd402583ab759eb271ac69d26e06842d7/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs?ref=ee6eaabdd402583ab759eb271ac69d26e06842d7", "patch": "@@ -79,9 +79,7 @@ fn check_keyword<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n     for &keyword in RUST_KW.iter() {\n         if parser.token.is_keyword(keyword)\n             && parser.look_ahead(1, |t| {\n-                t.kind == TokenKind::Eof\n-                    || t.kind == TokenKind::Comma\n-                    || t.kind == TokenKind::CloseDelim(Delimiter::Invisible)\n+                t.kind == TokenKind::Eof || t.kind == TokenKind::Comma\n             })\n         {\n             parser.bump();"}]}