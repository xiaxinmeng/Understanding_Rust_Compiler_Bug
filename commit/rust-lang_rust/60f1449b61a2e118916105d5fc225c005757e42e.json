{"sha": "60f1449b61a2e118916105d5fc225c005757e42e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZjE0NDliNjFhMmUxMTg5MTYxMDVkNWZjMjI1YzAwNTc1N2U0MmU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-01T18:49:44Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-09T19:39:25Z"}, "message": "Add Iterator::partition_mut() and is_partitioned()\n\n`partition_mut()` swaps `&mut T` items in-place to satisfy the\npredicate, so all `true` items precede all `false` items. This requires\na `DoubleEndedIterator` so we can search from front and back for items\nthat need swapping.\n\n`is_partitioned()` checks whether the predicate is already satisfied.", "tree": {"sha": "b62731f26cdab0f6ed1e71444c72663295fd9683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62731f26cdab0f6ed1e71444c72663295fd9683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f1449b61a2e118916105d5fc225c005757e42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f1449b61a2e118916105d5fc225c005757e42e", "html_url": "https://github.com/rust-lang/rust/commit/60f1449b61a2e118916105d5fc225c005757e42e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f1449b61a2e118916105d5fc225c005757e42e/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "html_url": "https://github.com/rust-lang/rust/commit/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "b5835f19d74d6a49aa675909e7ca436a1b979a4f", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/60f1449b61a2e118916105d5fc225c005757e42e/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f1449b61a2e118916105d5fc225c005757e42e/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=60f1449b61a2e118916105d5fc225c005757e42e", "patch": "@@ -1472,6 +1472,11 @@ pub trait Iterator {\n     /// `partition()` returns a pair, all of the elements for which it returned\n     /// `true`, and all of the elements for which it returned `false`.\n     ///\n+    /// See also [`is_partitioned()`] and [`partition_mut()`].\n+    ///\n+    /// [`is_partitioned()`]: #method.is_partitioned\n+    /// [`partition_mut()`]: #method.partition_mut\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1506,6 +1511,72 @@ pub trait Iterator {\n         (left, right)\n     }\n \n+    /// Reorder the elements of this iterator *in-place* according to the given predicate,\n+    /// such that all those that return `true` precede all those that return `false`.\n+    ///\n+    /// The relative order of partitioned items is not maintained.\n+    ///\n+    /// See also [`is_partitioned()`] and [`partition()`].\n+    ///\n+    /// [`is_partitioned()`]: #method.is_partitioned\n+    /// [`partition()`]: #method.partition\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iter_partition_mut)]\n+    ///\n+    /// let mut a = [1, 2, 3, 4, 5, 6, 7];\n+    ///\n+    /// // partition in-place between evens and odds\n+    /// a.iter_mut().partition_mut(|&n| n % 2 == 0);\n+    ///\n+    /// assert!(a[..3].iter().all(|&n| n % 2 == 0)); // evens\n+    /// assert!(a[3..].iter().all(|&n| n % 2 == 1)); // odds\n+    /// ```\n+    #[unstable(feature = \"iter_partition_mut\", reason = \"new API\", issue = \"0\")]\n+    fn partition_mut<'a, T: 'a, P>(mut self, mut predicate: P)\n+    where\n+        Self: Sized + DoubleEndedIterator<Item = &'a mut T>,\n+        P: FnMut(&T) -> bool,\n+    {\n+        // Repeatedly find the first `false` and swap it with the last `true`.\n+        while let Some(head) = self.find(|x| !predicate(x)) {\n+            if let Some(tail) = self.rfind(|x| predicate(x)) {\n+                crate::mem::swap(head, tail);\n+            } else {\n+                break;\n+            }\n+        }\n+    }\n+\n+    /// Checks if the elements of this iterator are partitioned according to the given predicate,\n+    /// such that all those that return `true` precede all those that return `false`.\n+    ///\n+    /// See also [`partition()`] and [`partition_mut()`].\n+    ///\n+    /// [`partition()`]: #method.partition\n+    /// [`partition_mut()`]: #method.partition_mut\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iter_is_partitioned)]\n+    ///\n+    /// assert!(\"Iterator\".chars().is_partitioned(char::is_uppercase));\n+    /// assert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n+    /// ```\n+    #[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue = \"0\")]\n+    fn is_partitioned<P>(mut self, mut predicate: P) -> bool\n+    where\n+        Self: Sized,\n+        P: FnMut(Self::Item) -> bool,\n+    {\n+        // Either all items test `true`, or the first clause stops at `false`\n+        // and we check that there are no more `true` items after that.\n+        self.all(&mut predicate) || !self.any(predicate)\n+    }\n+\n     /// An iterator method that applies a function as long as it returns\n     /// successfully, producing a single, final value.\n     ///"}]}