{"sha": "b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYmY5ZWY1YWVmODFlZWM0YTFiMGUwMGZjMTc5ZTdhMGUxNzY2YjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-19T22:30:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-19T22:32:56Z"}, "message": "Break fold's circular reference during unwinding\n\nThis converts the AST fold into a resource that breaks it's own circular\nreference (just a temporary workaround until GC), so that failure during fold\nwill unwind correctly.\n\nIssue #936", "tree": {"sha": "5ebb7ff6e9943883ebd10cde9e4fb24bd5a39619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ebb7ff6e9943883ebd10cde9e4fb24bd5a39619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "html_url": "https://github.com/rust-lang/rust/commit/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939a9dd738e2766eea7d3e012350c0484cda5fbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/939a9dd738e2766eea7d3e012350c0484cda5fbb", "html_url": "https://github.com/rust-lang/rust/commit/939a9dd738e2766eea7d3e012350c0484cda5fbb"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "cdd95bd6313a9c37117f6077aa1037e5e4c43f3e", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "patch": "@@ -17,8 +17,6 @@ fn strip_unconfigured_items(crate: @ast::crate) -> @ast::crate {\n \n     let fold = fold::make_fold(precursor);\n     let res = @fold.fold_crate(*crate);\n-    // FIXME: This is necessary to break a circular reference\n-    fold::dummy_out(fold);\n     ret res;\n }\n "}, {"sha": "9aed642a2d5dd0d380c03a72baca2ce0af17cf54", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "patch": "@@ -47,8 +47,6 @@ fn modify_for_testing(crate: @ast::crate) -> @ast::crate {\n \n     let fold = fold::make_fold(precursor);\n     let res = @fold.fold_crate(*crate);\n-    // FIXME: This is necessary to break a circular reference\n-    fold::dummy_out(fold);\n     ret res;\n }\n "}, {"sha": "53b068243206ed5179229b9de4c72ac7b0864a7b", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "patch": "@@ -56,7 +56,6 @@ fn expand_crate(sess: session::session, c: @crate) -> @crate {\n             with *afp};\n     let f = make_fold(f_pre);\n     let res = @f.fold_crate(*c);\n-    dummy_out(f); //temporary: kill circular reference\n     ret res;\n \n }"}, {"sha": "c6b6056bbc46bf631fa1cb91cb3ab05a027e8f87", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "patch": "@@ -206,7 +206,6 @@ fn transcribe(cx: ext_ctxt, b: bindings, body: @expr) -> @expr {\n          new_span: bind new_span(cx, _) with *afp};\n     let f = make_fold(f_pre);\n     let result = f.fold_expr(body);\n-    dummy_out(f); //temporary: kill circular reference\n     ret result;\n }\n \n@@ -258,7 +257,6 @@ iter free_vars(b: bindings, e: @expr) -> ident {\n             with *default_ast_fold()};\n     let f = make_fold(f_pre);\n     f.fold_expr(e); // ignore result\n-    dummy_out(f);\n     for each id: ident in idents.keys() { put id; }\n }\n "}, {"sha": "23293adbd80df693636779147a263ee686d872ba", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "patch": "@@ -563,8 +563,13 @@ fn dummy_out(a: ast_fold) {\n          new_span: noop_span};\n }\n \n+// FIXME: Fold has a circular reference that has to be broken. With GC this\n+// can go away\n+resource foldres(f: ast_fold) {\n+    dummy_out(f);\n+}\n \n-fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n+fn make_fold(afp: ast_fold_precursor) -> @foldres {\n     let result: ast_fold =\n         @mutable {fold_crate: nf_crate_dummy,\n                   fold_crate_directive: nf_crate_directive_dummy,\n@@ -699,7 +704,7 @@ fn make_fold(afp: ast_fold_precursor) -> ast_fold {\n          map_exprs: afp.map_exprs,\n          new_id: afp.new_id,\n          new_span: afp.new_span};\n-    ret result;\n+    ret @foldres(result);\n }\n \n "}, {"sha": "95a78125aba0210372b588783e13dec3c23bed36", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=b1bf9ef5aef81eec4a1b0e00fc179e7a0e1766b6", "patch": "@@ -149,7 +149,6 @@ fn replace_expr_in_crate(crate: ast::crate, i: uint, newexpr: ast::expr) ->\n             with *fold::default_ast_fold()};\n     let af = fold::make_fold(afp);\n     let crate2: @ast::crate = @af.fold_crate(crate);\n-    fold::dummy_out(af); // work around a leak (https://github.com/graydon/rust/issues/651)\n     *crate2\n }\n \n@@ -170,7 +169,6 @@ fn replace_ty_in_crate(crate: ast::crate, i: uint, newty: ast::ty) ->\n             with *fold::default_ast_fold()};\n     let af = fold::make_fold(afp);\n     let crate2: @ast::crate = @af.fold_crate(crate);\n-    fold::dummy_out(af); // work around a leak (https://github.com/graydon/rust/issues/651)\n     *crate2\n }\n "}]}