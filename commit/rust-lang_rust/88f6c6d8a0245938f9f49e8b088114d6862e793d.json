{"sha": "88f6c6d8a0245938f9f49e8b088114d6862e793d", "node_id": "C_kwDOAAsO6NoAKDg4ZjZjNmQ4YTAyNDU5MzhmOWY0OWU4YjA4ODExNGQ2ODYyZTc5M2Q", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-07-08T16:06:18Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-07-20T11:11:39Z"}, "message": "Remove unused StableMap and StableSet types from rustc_data_structures", "tree": {"sha": "b7fe1673ec1dd989ffe2368d494f1e87a3102888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7fe1673ec1dd989ffe2368d494f1e87a3102888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f6c6d8a0245938f9f49e8b088114d6862e793d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f6c6d8a0245938f9f49e8b088114d6862e793d", "html_url": "https://github.com/rust-lang/rust/commit/88f6c6d8a0245938f9f49e8b088114d6862e793d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f6c6d8a0245938f9f49e8b088114d6862e793d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3", "html_url": "https://github.com/rust-lang/rust/commit/b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3"}], "stats": {"total": 254, "additions": 37, "deletions": 217}, "files": [{"sha": "4166b4fc2e5bc1972789ee12ffd3dedb46246311", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -4,8 +4,7 @@ use super::LoweringContext;\n \n use rustc_ast::ptr::P;\n use rustc_ast::*;\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};"}, {"sha": "07aba50f03b996c40680ca6c9d3f7cc4751dd43b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,6 +1,6 @@\n //! Error reporting machinery for lifetime errors.\n \n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;"}, {"sha": "0ed3e1fbe93f689a5d4119c3380e36c24b2eb1e3", "filename": "compiler/rustc_codegen_gcc/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fabi.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,6 +1,6 @@\n use gccjit::{ToLValue, ToRValue, Type};\n use rustc_codegen_ssa::traits::{AbiBuilderMethods, BaseTypeMethods};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::bug;\n use rustc_middle::ty::Ty;\n use rustc_target::abi::call::{CastTarget, FnAbi, PassMode, Reg, RegKind};"}, {"sha": "6221a7f6d935db0ff198c1f7d3996de543c0b6ae", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -30,7 +30,7 @@ use rustc_codegen_ssa::traits::{\n     OverflowOp,\n     StaticBuilderMethods,\n };\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_middle::ty::layout::{FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, HasTyCtxt, LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_span::Span;"}, {"sha": "265f45b72d1bf32ca45721b222244bbd127591a3", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -61,12 +61,10 @@ pub mod sip128;\n pub mod small_c_str;\n pub mod small_str;\n pub mod snapshot_map;\n-pub mod stable_map;\n pub mod svh;\n pub use ena::snapshot_vec;\n pub mod memmap;\n pub mod sorted_map;\n-pub mod stable_set;\n #[macro_use]\n pub mod stable_hasher;\n mod atomic_ref;"}, {"sha": "670452d0d8c5aeaf0ab37a6751697940975c0ab9", "filename": "compiler/rustc_data_structures/src/stable_map.rs", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_map.rs?ref=b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3", "patch": "@@ -1,100 +0,0 @@\n-pub use rustc_hash::FxHashMap;\n-use std::borrow::Borrow;\n-use std::collections::hash_map::Entry;\n-use std::fmt;\n-use std::hash::Hash;\n-\n-/// A deterministic wrapper around FxHashMap that does not provide iteration support.\n-///\n-/// It supports insert, remove, get and get_mut functions from FxHashMap.\n-/// It also allows to convert hashmap to a sorted vector with the method `into_sorted_vector()`.\n-#[derive(Clone)]\n-pub struct StableMap<K, V> {\n-    base: FxHashMap<K, V>,\n-}\n-\n-impl<K, V> Default for StableMap<K, V>\n-where\n-    K: Eq + Hash,\n-{\n-    fn default() -> StableMap<K, V> {\n-        StableMap::new()\n-    }\n-}\n-\n-impl<K, V> fmt::Debug for StableMap<K, V>\n-where\n-    K: Eq + Hash + fmt::Debug,\n-    V: fmt::Debug,\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}\", self.base)\n-    }\n-}\n-\n-impl<K, V> PartialEq for StableMap<K, V>\n-where\n-    K: Eq + Hash,\n-    V: PartialEq,\n-{\n-    fn eq(&self, other: &StableMap<K, V>) -> bool {\n-        self.base == other.base\n-    }\n-}\n-\n-impl<K, V> Eq for StableMap<K, V>\n-where\n-    K: Eq + Hash,\n-    V: Eq,\n-{\n-}\n-\n-impl<K, V> StableMap<K, V>\n-where\n-    K: Eq + Hash,\n-{\n-    pub fn new() -> StableMap<K, V> {\n-        StableMap { base: FxHashMap::default() }\n-    }\n-\n-    pub fn into_sorted_vector(self) -> Vec<(K, V)>\n-    where\n-        K: Ord + Copy,\n-    {\n-        let mut vector = self.base.into_iter().collect::<Vec<_>>();\n-        vector.sort_unstable_by_key(|pair| pair.0);\n-        vector\n-    }\n-\n-    pub fn entry(&mut self, k: K) -> Entry<'_, K, V> {\n-        self.base.entry(k)\n-    }\n-\n-    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>\n-    where\n-        K: Borrow<Q>,\n-        Q: Hash + Eq,\n-    {\n-        self.base.get(k)\n-    }\n-\n-    pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>\n-    where\n-        K: Borrow<Q>,\n-        Q: Hash + Eq,\n-    {\n-        self.base.get_mut(k)\n-    }\n-\n-    pub fn insert(&mut self, k: K, v: V) -> Option<V> {\n-        self.base.insert(k, v)\n-    }\n-\n-    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>\n-    where\n-        K: Borrow<Q>,\n-        Q: Hash + Eq,\n-    {\n-        self.base.remove(k)\n-    }\n-}"}, {"sha": "c7ca74f5fbd9d1243f1895b392451b6b4757fbd9", "filename": "compiler/rustc_data_structures/src/stable_set.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3/compiler%2Frustc_data_structures%2Fsrc%2Fstable_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_set.rs?ref=b8138db0ffbb7d29e5af2482c6eb0ef4e117d4a3", "patch": "@@ -1,77 +0,0 @@\n-pub use rustc_hash::FxHashSet;\n-use std::borrow::Borrow;\n-use std::fmt;\n-use std::hash::Hash;\n-\n-/// A deterministic wrapper around FxHashSet that does not provide iteration support.\n-///\n-/// It supports insert, remove, get functions from FxHashSet.\n-/// It also allows to convert hashset to a sorted vector with the method `into_sorted_vector()`.\n-#[derive(Clone)]\n-pub struct StableSet<T> {\n-    base: FxHashSet<T>,\n-}\n-\n-impl<T> Default for StableSet<T>\n-where\n-    T: Eq + Hash,\n-{\n-    fn default() -> StableSet<T> {\n-        StableSet::new()\n-    }\n-}\n-\n-impl<T> fmt::Debug for StableSet<T>\n-where\n-    T: Eq + Hash + fmt::Debug,\n-{\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{:?}\", self.base)\n-    }\n-}\n-\n-impl<T> PartialEq<StableSet<T>> for StableSet<T>\n-where\n-    T: Eq + Hash,\n-{\n-    fn eq(&self, other: &StableSet<T>) -> bool {\n-        self.base == other.base\n-    }\n-}\n-\n-impl<T> Eq for StableSet<T> where T: Eq + Hash {}\n-\n-impl<T: Hash + Eq> StableSet<T> {\n-    pub fn new() -> StableSet<T> {\n-        StableSet { base: FxHashSet::default() }\n-    }\n-\n-    pub fn into_sorted_vector(self) -> Vec<T>\n-    where\n-        T: Ord,\n-    {\n-        let mut vector = self.base.into_iter().collect::<Vec<_>>();\n-        vector.sort_unstable();\n-        vector\n-    }\n-\n-    pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>\n-    where\n-        T: Borrow<Q>,\n-        Q: Hash + Eq,\n-    {\n-        self.base.get(value)\n-    }\n-\n-    pub fn insert(&mut self, value: T) -> bool {\n-        self.base.insert(value)\n-    }\n-\n-    pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n-    where\n-        T: Borrow<Q>,\n-        Q: Hash + Eq,\n-    {\n-        self.base.remove(value)\n-    }\n-}"}, {"sha": "457208bf831beaaaf90305c78455c6a14f10852d", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -3,7 +3,7 @@ use crate::{\n     CodeSuggestion, DiagnosticMessage, EmissionGuarantee, Level, LintDiagnosticBuilder, MultiSpan,\n     SubdiagnosticMessage, Substitution, SubstitutionPart, SuggestionStyle,\n };\n-use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_error_messages::FluentValue;\n use rustc_hir as hir;\n use rustc_lint_defs::{Applicability, LintExpectationId};"}, {"sha": "93112199b6030d0b0349c24df41eb79208c2ac37", "filename": "compiler/rustc_hir/src/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,7 +1,7 @@\n use crate::def::{CtorOf, DefKind, Res};\n use crate::def_id::DefId;\n use crate::hir::{self, HirId, PatKind};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;"}, {"sha": "89d419bc8e90fe9c2e4da73a455a4f37b64e64a3", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -23,7 +23,7 @@\n //! was re-used.\n \n use rustc_ast as ast;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::mir::mono::CodegenUnitNameBuilder;\n use rustc_middle::ty::TyCtxt;"}, {"sha": "2f1853c441eee1cf469245e305a5fb48eb79c03d", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -3,7 +3,7 @@\n //! [work products]: WorkProduct\n \n use crate::persist::fs::*;\n-use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_fs_util::link_or_copy;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::Session;"}, {"sha": "893ca3cf79d70aab9dd4831073dded0785e04f21", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -6,7 +6,7 @@ use crate::infer::error_reporting::note_and_explain_region;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::ObligationCauseCode;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;"}, {"sha": "246d27be71cffa85e97c4b9c63f81b2457d9a4a1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -4,7 +4,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCauseCode, UnifyReceiverContext};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};"}, {"sha": "b6d41bedd56d83ebf80596799015a5c13436869d", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let trait_predicates = self.tcx.explicit_predicates_of(trait_item_def_id);\n                 let impl_predicates = self.tcx.explicit_predicates_of(impl_item_def_id);\n \n-                let impl_predicates: rustc_data_structures::stable_set::FxHashSet<_> =\n+                let impl_predicates: rustc_data_structures::fx::FxHashSet<_> =\n                     impl_predicates.predicates.into_iter().map(|(pred, _)| pred).collect();\n                 let clauses: Vec<_> = trait_predicates\n                     .predicates"}, {"sha": "dd9f8795f94ffe30de3c61918ca434a2fc08ed69", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -2,7 +2,7 @@\n \n use crate::mir::{Body, ConstantKind, Promoted};\n use crate::ty::{self, OpaqueHiddenType, Ty, TyCtxt};\n-use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;"}, {"sha": "b91c0c25782f410763a25aaf7da196cce73b824d", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,8 +1,8 @@\n //! Lazily compute the inverse of each `SwitchInt`'s switch targets. Modeled after\n //! `Predecessors`/`PredecessorCache`.\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::sync::OnceCell;\n use rustc_index::vec::IndexVec;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};"}, {"sha": "d54b8c599d954e1147d768fb9b083c4aaa5cfc6b", "filename": "compiler/rustc_middle/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n \n use crate::ty::{PolyTraitRef, TyCtxt};\n "}, {"sha": "2ab7eddcac922aaccf87115d90e0fb5a58d70c30", "filename": "compiler/rustc_mir_dataflow/src/un_derefer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fun_derefer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fun_derefer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fun_derefer.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n "}, {"sha": "30be64f5b2f2e98a32ee63aadaeb7fb35db8e5cb", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,7 +1,7 @@\n //! A pass that eliminates branches on uninhabited enum variants.\n \n use crate::MirPass;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::mir::{\n     BasicBlockData, Body, Local, Operand, Rvalue, StatementKind, SwitchTargets, Terminator,\n     TerminatorKind,"}, {"sha": "62a0f9fb03470129e369ec2830e2690c0369268e", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n use std::fmt;"}, {"sha": "0db3eb6fcac0cc69605d9779e4a91169d7c13aae", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::{sym, Symbol};\n use std::fmt;"}, {"sha": "e41bdc9a58c8a83daac727b4dcbfcefd2f827b79", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::{sym, Symbol};\n use std::fmt;"}, {"sha": "238c365093f085aa19d4bfd897398f33bae0f1ce", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,6 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::{RelocModel, Target};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n use std::fmt;"}, {"sha": "4d4d55de5f45791f9bb3e864aa63f513c4e936f4", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -47,7 +47,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n     // process it next. Because the resulting predicates aren't always\n     // guaranteed to be a subset of the original type, so we need to store the\n     // WF args we've computed in a set.\n-    let mut checked_wf_args = rustc_data_structures::stable_set::FxHashSet::default();\n+    let mut checked_wf_args = rustc_data_structures::fx::FxHashSet::default();\n     let mut wf_args = vec![ty.into()];\n \n     let mut implied_bounds = vec![];"}, {"sha": "eded7891682eaa009d91fdb2cfaf789f051dbaae", "filename": "compiler/rustc_ty_utils/src/representability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Frepresentability.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,5 +1,5 @@\n //! Check whether a type is representable.\n-use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;"}, {"sha": "ee249050cc64eeea515cf0b119db0aa4889c5e5b", "filename": "compiler/rustc_type_ir/src/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_type_ir%2Fsrc%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_type_ir%2Fsrc%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fcodec.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,6 +1,6 @@\n use crate::Interner;\n \n-use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::{Decoder, Encoder};\n \n /// The shorthand encoding uses an enum's variant index `usize`"}, {"sha": "6d0ae6ea4416d01e27f5bb4e2e60d3d833d03231", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -2,7 +2,7 @@ use super::potentially_plural_count;\n use crate::check::regionck::OutlivesEnvironmentExt;\n use crate::check::wfcheck;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};"}, {"sha": "67a89a69f65528f004b6f2ff0e2a80dfb8b0cbe4", "filename": "compiler/rustc_typeck/src/check/fallback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,9 +1,8 @@\n use crate::check::FnCtxt;\n use rustc_data_structures::{\n-    fx::FxHashMap,\n+    fx::{FxHashMap, FxHashSet},\n     graph::WithSuccessors,\n     graph::{iterate::DepthFirstSearch, vec_graph::VecGraph},\n-    stable_set::FxHashSet,\n };\n use rustc_middle::ty::{self, Ty};\n "}, {"sha": "871fc4a21f2a772ccbeb2c634b0b21c2e2700b69", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::AstConv;\n use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n \n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};"}, {"sha": "518cd7342366c09a1fce6eb4e8dd3db31554626b", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -17,8 +17,7 @@ use self::record_consumed_borrow::find_consumed_and_borrowed;\n use crate::check::FnCtxt;\n use hir::def_id::DefId;\n use hir::{Body, HirId, HirIdMap, Node};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;"}, {"sha": "a2c23db162b037414956a99403093dc11062d827", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -6,7 +6,7 @@ use hir::{\n     intravisit::{self, Visitor},\n     Body, Expr, ExprKind, Guard, HirId, LoopIdError,\n };\n-use rustc_data_structures::{fx::FxHashMap, stable_set::FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_index::vec::IndexVec;\n use rustc_middle::{"}, {"sha": "fa4d7cb772332f7b8ed222749d50bbe5c5a68c46", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -4,7 +4,7 @@ use crate::{\n     expr_use_visitor::{self, ExprUseVisitor},\n };\n use hir::{def_id::DefId, Body, HirId, HirIdMap};\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_middle::hir::place::{PlaceBase, Projection, ProjectionKind};\n use rustc_middle::ty::{ParamEnv, TyCtxt};"}, {"sha": "df94abbafb1bd7e9cb726c2935a074bd650c6a84", "filename": "compiler/rustc_typeck/src/check/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast::InlineAsmTemplatePiece;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_index::vec::Idx;"}, {"sha": "d49a6138f7a0271128718b66884f982da012d198", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -1,5 +1,5 @@\n use crate::outlives::outlives_bounds::InferCtxtExt as _;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::InferCtxt;"}, {"sha": "d175d7e0695430733578ae30629142150783f84d", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -49,8 +49,7 @@ use rustc_span::sym;\n use rustc_span::{BytePos, Pos, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n-use rustc_data_structures::stable_map::FxHashMap;\n-use rustc_data_structures::stable_set::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::Idx;\n use rustc_target::abi::VariantIdx;\n "}, {"sha": "d102fb45a8cbce446c3e77e239e66e85933a03c1", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -5,7 +5,7 @@\n use crate::check::FnCtxt;\n \n use hir::def_id::LocalDefId;\n-use rustc_data_structures::stable_map::FxHashMap;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;"}, {"sha": "1751249fa626d44f7f5cebe5b25963fe4d4c924f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88f6c6d8a0245938f9f49e8b088114d6862e793d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f6c6d8a0245938f9f49e8b088114d6862e793d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=88f6c6d8a0245938f9f49e8b088114d6862e793d", "patch": "@@ -4,7 +4,10 @@\n \n use pulldown_cmark::LinkType;\n use rustc_ast::util::comments::may_have_doc_links;\n-use rustc_data_structures::{fx::FxHashMap, intern::Interned, stable_set::FxHashSet};\n+use rustc_data_structures::{\n+    fx::{FxHashMap, FxHashSet},\n+    intern::Interned,\n+};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{DefKind, Namespace, PerNS};"}]}