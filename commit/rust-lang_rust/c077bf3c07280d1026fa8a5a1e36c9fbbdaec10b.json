{"sha": "c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNzdiZjNjMDcyODBkMTAyNmZhOGE1YTFlMzZjOWZiYmRhZWMxMGI=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-06-25T03:34:10Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-24T17:37:36Z"}, "message": "Rename SimdArray to Vector, remove its generic parameter, and remove LanesAtMost32", "tree": {"sha": "5b1f8ec8a7f4dfb6c380337469e4d65114f0a468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b1f8ec8a7f4dfb6c380337469e4d65114f0a468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "html_url": "https://github.com/rust-lang/rust/commit/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "732b7edfab46b33e3861172eb867b139a9425574", "url": "https://api.github.com/repos/rust-lang/rust/commits/732b7edfab46b33e3861172eb867b139a9425574", "html_url": "https://github.com/rust-lang/rust/commit/732b7edfab46b33e3861172eb867b139a9425574"}], "stats": {"total": 955, "additions": 450, "deletions": 505}, "files": [{"sha": "25c53097bebe08853237b2d929f9b5ba92ac4567", "filename": "crates/core_simd/src/array.rs", "status": "removed", "additions": 0, "deletions": 253, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Farray.rs?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -1,253 +0,0 @@\n-use crate::intrinsics;\n-use crate::masks::*;\n-use crate::vector::ptr::{SimdConstPtr, SimdMutPtr};\n-use crate::vector::*;\n-\n-/// A representation of a vector as an \"array\" with indices, implementing\n-/// operations applicable to any vector type based solely on \"having lanes\",\n-/// and describing relationships between vector and scalar types.\n-pub trait SimdArray<const LANES: usize>: crate::LanesAtMost32\n-where\n-    SimdUsize<LANES>: crate::LanesAtMost32,\n-    SimdIsize<LANES>: crate::LanesAtMost32,\n-    MaskSize<LANES>: crate::Mask,\n-    Self: Sized,\n-{\n-    /// The scalar type in every lane of this vector type.\n-    type Scalar: Copy + Sized;\n-    /// The number of lanes for this vector.\n-    const LANES: usize = LANES;\n-\n-    /// Generates a SIMD vector with the same value in every lane.\n-    #[must_use]\n-    fn splat(val: Self::Scalar) -> Self;\n-\n-    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n-    /// If an index is out of bounds, that lane instead selects the value from the \"or\" vector.\n-    /// ```\n-    /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n-    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n-    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n-    /// let alt = SimdI32::from_array([-5, -4, -3, -2]);\n-    ///\n-    /// let result = SimdI32::<4>::gather_or(&vec, idxs, alt); // Note the lane that is out-of-bounds.\n-    /// assert_eq!(result, SimdI32::from_array([-5, 13, 10, 15]));\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    fn gather_or(slice: &[Self::Scalar], idxs: SimdUsize<LANES>, or: Self) -> Self {\n-        Self::gather_select(slice, MaskSize::splat(true), idxs, or)\n-    }\n-\n-    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n-    /// Out-of-bounds indices instead use the default value for that lane (0).\n-    /// ```\n-    /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n-    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n-    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n-    ///\n-    /// let result = SimdI32::<4>::gather_or_default(&vec, idxs); // Note the lane that is out-of-bounds.\n-    /// assert_eq!(result, SimdI32::from_array([0, 13, 10, 15]));\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    fn gather_or_default(slice: &[Self::Scalar], idxs: SimdUsize<LANES>) -> Self\n-    where\n-        Self::Scalar: Default,\n-    {\n-        Self::gather_or(slice, idxs, Self::splat(Self::Scalar::default()))\n-    }\n-\n-    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n-    /// Out-of-bounds or masked indices instead select the value from the \"or\" vector.\n-    /// ```\n-    /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n-    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n-    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n-    /// let alt = SimdI32::from_array([-5, -4, -3, -2]);\n-    /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n-    ///\n-    /// let result = SimdI32::<4>::gather_select(&vec, mask, idxs, alt); // Note the lane that is out-of-bounds.\n-    /// assert_eq!(result, SimdI32::from_array([-5, 13, 10, -2]));\n-    /// ```\n-    #[must_use]\n-    #[inline]\n-    fn gather_select(\n-        slice: &[Self::Scalar],\n-        mask: MaskSize<LANES>,\n-        idxs: SimdUsize<LANES>,\n-        or: Self,\n-    ) -> Self {\n-        let mask = (mask & idxs.lanes_lt(SimdUsize::splat(slice.len()))).to_int();\n-        let base_ptr = SimdConstPtr::splat(slice.as_ptr());\n-        // Ferris forgive me, I have done pointer arithmetic here.\n-        let ptrs = base_ptr.wrapping_add(idxs);\n-        // SAFETY: The ptrs have been bounds-masked to prevent memory-unsafe reads insha'allah\n-        unsafe { intrinsics::simd_gather(or, ptrs, mask) }\n-    }\n-\n-    /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n-    /// Out-of-bounds indices are not written.\n-    /// `scatter` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n-    /// ```\n-    /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n-    /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n-    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n-    /// let vals = SimdI32::from_array([-27, 82, -41, 124]);\n-    ///\n-    /// vals.scatter(&mut vec, idxs); // index 0 receives two writes.\n-    /// assert_eq!(vec, vec![124, 11, 12, 82, 14, 15, 16, 17, 18]);\n-    /// ```\n-    #[inline]\n-    fn scatter(self, slice: &mut [Self::Scalar], idxs: SimdUsize<LANES>) {\n-        self.scatter_select(slice, MaskSize::splat(true), idxs)\n-    }\n-\n-    /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n-    /// Out-of-bounds or masked indices are not written.\n-    /// `scatter_select` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n-    /// ```\n-    /// # #![feature(portable_simd)]\n-    /// # use core_simd::*;\n-    /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n-    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n-    /// let vals = SimdI32::from_array([-27, 82, -41, 124]);\n-    /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n-    ///\n-    /// vals.scatter_select(&mut vec, mask, idxs); // index 0's second write is masked, thus omitted.\n-    /// assert_eq!(vec, vec![-41, 11, 12, 82, 14, 15, 16, 17, 18]);\n-    /// ```\n-    #[inline]\n-    fn scatter_select(\n-        self,\n-        slice: &mut [Self::Scalar],\n-        mask: MaskSize<LANES>,\n-        idxs: SimdUsize<LANES>,\n-    ) {\n-        // We must construct our scatter mask before we derive a pointer!\n-        let mask = (mask & idxs.lanes_lt(SimdUsize::splat(slice.len()))).to_int();\n-        // SAFETY: This block works with *mut T derived from &mut 'a [T],\n-        // which means it is delicate in Rust's borrowing model, circa 2021:\n-        // &mut 'a [T] asserts uniqueness, so deriving &'a [T] invalidates live *mut Ts!\n-        // Even though this block is largely safe methods, it must be almost exactly this way\n-        // to prevent invalidating the raw ptrs while they're live.\n-        // Thus, entering this block requires all values to use being already ready:\n-        // 0. idxs we want to write to, which are used to construct the mask.\n-        // 1. mask, which depends on an initial &'a [T] and the idxs.\n-        // 2. actual values to scatter (self).\n-        // 3. &mut [T] which will become our base ptr.\n-        unsafe {\n-            // Now Entering \u2622\ufe0f *mut T Zone\n-            let base_ptr = SimdMutPtr::splat(slice.as_mut_ptr());\n-            // Ferris forgive me, I have done pointer arithmetic here.\n-            let ptrs = base_ptr.wrapping_add(idxs);\n-            // The ptrs have been bounds-masked to prevent memory-unsafe writes insha'allah\n-            intrinsics::simd_scatter(self, ptrs, mask)\n-            // Cleared \u2622\ufe0f *mut T Zone\n-        }\n-    }\n-}\n-\n-macro_rules! impl_simdarray_for {\n-    ($simd:ident {type Scalar = $scalar:ident;}) => {\n-        impl<const LANES: usize> SimdArray<LANES> for $simd<LANES>\n-            where SimdUsize<LANES>: crate::LanesAtMost32,\n-            SimdIsize<LANES>: crate::LanesAtMost32,\n-            MaskSize<LANES>: crate::Mask,\n-            Self: crate::LanesAtMost32,\n-        {\n-            type Scalar = $scalar;\n-\n-            #[must_use]\n-            #[inline]\n-            fn splat(val: Self::Scalar) -> Self {\n-                [val; LANES].into()\n-            }\n-        }\n-    };\n-\n-    ($simd:ident $impl:tt) => {\n-        impl<const LANES: usize> SimdArray<LANES> for $simd<LANES>\n-            where SimdUsize<LANES>: crate::LanesAtMost32,\n-            SimdIsize<LANES>: crate::LanesAtMost32,\n-            MaskSize<LANES>: crate::Mask,\n-            Self: crate::LanesAtMost32,\n-        $impl\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdUsize {\n-        type Scalar = usize;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdIsize {\n-        type Scalar = isize;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdI8 {\n-        type Scalar = i8;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdI16 {\n-        type Scalar = i16;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdI32 {\n-        type Scalar = i32;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdI64 {\n-        type Scalar = i64;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdU8 {\n-        type Scalar = u8;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdU16 {\n-        type Scalar = u16;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdU32 {\n-        type Scalar = u32;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdU64 {\n-        type Scalar = u64;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdF32 {\n-        type Scalar = f32;\n-    }\n-}\n-\n-impl_simdarray_for! {\n-    SimdF64 {\n-        type Scalar = f64;\n-    }\n-}"}, {"sha": "c3bf07fc43209132920508b9f95cbef37baceae1", "filename": "crates/core_simd/src/comparisons.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -1,12 +1,12 @@\n-use crate::LanesAtMost32;\n+use crate::Vector;\n \n macro_rules! implement_mask_ops {\n     { $($vector:ident => $mask:ident ($inner_ty:ident),)* } => {\n         $(\n             impl<const LANES: usize> crate::$vector<LANES>\n             where\n-                crate::$vector<LANES>: LanesAtMost32,\n-                crate::$inner_ty<LANES>: LanesAtMost32,\n+                crate::$vector<LANES>: Vector,\n+                crate::$inner_ty<LANES>: Vector,\n                 crate::$mask<LANES>: crate::Mask,\n             {\n                 /// Test if each lane is equal to the corresponding lane in `other`."}, {"sha": "7721b87ecc0bcfba4862d8b1342f3a5757897790", "filename": "crates/core_simd/src/first.rs", "status": "modified", "additions": 148, "deletions": 12, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Ffirst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Ffirst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffirst.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -1,7 +1,7 @@\n /// Implements common traits on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n macro_rules! impl_vector {\n     { $name:ident, $type:ty } => {\n-        impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> $name<LANES> where Self: crate::Vector {\n             /// Construct a SIMD vector by setting all lanes to the given value.\n             pub const fn splat(value: $type) -> Self {\n                 Self([value; LANES])\n@@ -44,31 +44,167 @@ macro_rules! impl_vector {\n             }\n         }\n \n-        impl<const LANES: usize> Copy for $name<LANES> where Self: crate::LanesAtMost32 {}\n+        impl<const LANES: usize> $name<LANES>\n+        where\n+            Self: crate::Vector,\n+            crate::MaskSize<LANES>: crate::Mask,\n+            crate::SimdIsize<LANES>: crate::Vector,\n+            crate::SimdUsize<LANES>: crate::Vector,\n+        {\n+            /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+            /// If an index is out of bounds, that lane instead selects the value from the \"or\" vector.\n+            /// ```\n+            /// # #![feature(portable_simd)]\n+            /// # use core_simd::*;\n+            /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+            /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+            /// let alt = SimdI32::from_array([-5, -4, -3, -2]);\n+            ///\n+            /// let result = SimdI32::<4>::gather_or(&vec, idxs, alt); // Note the lane that is out-of-bounds.\n+            /// assert_eq!(result, SimdI32::from_array([-5, 13, 10, 15]));\n+            /// ```\n+            #[must_use]\n+            #[inline]\n+            pub fn gather_or(slice: &[$type], idxs: crate::SimdUsize<LANES>, or: Self) -> Self {\n+                Self::gather_select(slice, crate::MaskSize::splat(true), idxs, or)\n+            }\n+\n+            /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+            /// Out-of-bounds indices instead use the default value for that lane (0).\n+            /// ```\n+            /// # #![feature(portable_simd)]\n+            /// # use core_simd::*;\n+            /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+            /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+            ///\n+            /// let result = SimdI32::<4>::gather_or_default(&vec, idxs); // Note the lane that is out-of-bounds.\n+            /// assert_eq!(result, SimdI32::from_array([0, 13, 10, 15]));\n+            /// ```\n+            #[must_use]\n+            #[inline]\n+            pub fn gather_or_default(slice: &[$type], idxs: crate::SimdUsize<LANES>) -> Self {\n+                Self::gather_or(slice, idxs, Self::splat(<$type>::default()))\n+            }\n+\n+            /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+            /// Out-of-bounds or masked indices instead select the value from the \"or\" vector.\n+            /// ```\n+            /// # #![feature(portable_simd)]\n+            /// # use core_simd::*;\n+            /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+            /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+            /// let alt = SimdI32::from_array([-5, -4, -3, -2]);\n+            /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n+            ///\n+            /// let result = SimdI32::<4>::gather_select(&vec, mask, idxs, alt); // Note the lane that is out-of-bounds.\n+            /// assert_eq!(result, SimdI32::from_array([-5, 13, 10, -2]));\n+            /// ```\n+            #[must_use]\n+            #[inline]\n+            pub fn gather_select(\n+                slice: &[$type],\n+                mask: crate::MaskSize<LANES>,\n+                idxs: crate::SimdUsize<LANES>,\n+                or: Self,\n+            ) -> Self\n+            {\n+                let mask = (mask & idxs.lanes_lt(crate::SimdUsize::splat(slice.len()))).to_int();\n+                let base_ptr = crate::vector::ptr::SimdConstPtr::splat(slice.as_ptr());\n+                // Ferris forgive me, I have done pointer arithmetic here.\n+                let ptrs = base_ptr.wrapping_add(idxs);\n+                // SAFETY: The ptrs have been bounds-masked to prevent memory-unsafe reads insha'allah\n+                unsafe { crate::intrinsics::simd_gather(or, ptrs, mask) }\n+            }\n+\n+            /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n+            /// Out-of-bounds indices are not written.\n+            /// `scatter` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n+            /// ```\n+            /// # #![feature(portable_simd)]\n+            /// # use core_simd::*;\n+            /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+            /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n+            /// let vals = SimdI32::from_array([-27, 82, -41, 124]);\n+            ///\n+            /// vals.scatter(&mut vec, idxs); // index 0 receives two writes.\n+            /// assert_eq!(vec, vec![124, 11, 12, 82, 14, 15, 16, 17, 18]);\n+            /// ```\n+            #[inline]\n+            pub fn scatter(self, slice: &mut [$type], idxs: crate::SimdUsize<LANES>) {\n+                self.scatter_select(slice, crate::MaskSize::splat(true), idxs)\n+            }\n+\n+            /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n+            /// Out-of-bounds or masked indices are not written.\n+            /// `scatter_select` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n+            /// ```\n+            /// # #![feature(portable_simd)]\n+            /// # use core_simd::*;\n+            /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+            /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n+            /// let vals = SimdI32::from_array([-27, 82, -41, 124]);\n+            /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n+            ///\n+            /// vals.scatter_select(&mut vec, mask, idxs); // index 0's second write is masked, thus omitted.\n+            /// assert_eq!(vec, vec![-41, 11, 12, 82, 14, 15, 16, 17, 18]);\n+            /// ```\n+            #[inline]\n+            pub fn scatter_select(\n+                self,\n+                slice: &mut [$type],\n+                mask: crate::MaskSize<LANES>,\n+                idxs: crate::SimdUsize<LANES>,\n+            )\n+            {\n+                // We must construct our scatter mask before we derive a pointer!\n+                let mask = (mask & idxs.lanes_lt(crate::SimdUsize::splat(slice.len()))).to_int();\n+                // SAFETY: This block works with *mut T derived from &mut 'a [T],\n+                // which means it is delicate in Rust's borrowing model, circa 2021:\n+                // &mut 'a [T] asserts uniqueness, so deriving &'a [T] invalidates live *mut Ts!\n+                // Even though this block is largely safe methods, it must be almost exactly this way\n+                // to prevent invalidating the raw ptrs while they're live.\n+                // Thus, entering this block requires all values to use being already ready:\n+                // 0. idxs we want to write to, which are used to construct the mask.\n+                // 1. mask, which depends on an initial &'a [T] and the idxs.\n+                // 2. actual values to scatter (self).\n+                // 3. &mut [T] which will become our base ptr.\n+                unsafe {\n+                    // Now Entering \u2622\ufe0f *mut T Zone\n+                    let base_ptr = crate::vector::ptr::SimdMutPtr::splat(slice.as_mut_ptr());\n+                    // Ferris forgive me, I have done pointer arithmetic here.\n+                    let ptrs = base_ptr.wrapping_add(idxs);\n+                    // The ptrs have been bounds-masked to prevent memory-unsafe writes insha'allah\n+                    crate::intrinsics::simd_scatter(self, ptrs, mask)\n+                    // Cleared \u2622\ufe0f *mut T Zone\n+                }\n+            }\n+        }\n+\n+        impl<const LANES: usize> Copy for $name<LANES> where Self: crate::Vector {}\n \n-        impl<const LANES: usize> Clone for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> Clone for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn clone(&self) -> Self {\n                 *self\n             }\n         }\n \n-        impl<const LANES: usize> Default for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> Default for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn default() -> Self {\n                 Self::splat(<$type>::default())\n             }\n         }\n \n-        impl<const LANES: usize> PartialEq for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> PartialEq for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn eq(&self, other: &Self) -> bool {\n                 // TODO use SIMD equality\n                 self.to_array() == other.to_array()\n             }\n         }\n \n-        impl<const LANES: usize> PartialOrd for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> PartialOrd for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n                 // TODO use SIMD equalitya\n@@ -77,43 +213,43 @@ macro_rules! impl_vector {\n         }\n \n         // array references\n-        impl<const LANES: usize> AsRef<[$type; LANES]> for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> AsRef<[$type; LANES]> for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn as_ref(&self) -> &[$type; LANES] {\n                 &self.0\n             }\n         }\n \n-        impl<const LANES: usize> AsMut<[$type; LANES]> for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> AsMut<[$type; LANES]> for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn as_mut(&mut self) -> &mut [$type; LANES] {\n                 &mut self.0\n             }\n         }\n \n         // slice references\n-        impl<const LANES: usize> AsRef<[$type]> for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> AsRef<[$type]> for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn as_ref(&self) -> &[$type] {\n                 &self.0\n             }\n         }\n \n-        impl<const LANES: usize> AsMut<[$type]> for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> AsMut<[$type]> for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn as_mut(&mut self) -> &mut [$type] {\n                 &mut self.0\n             }\n         }\n \n         // vector/array conversion\n-        impl<const LANES: usize> From<[$type; LANES]> for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> From<[$type; LANES]> for $name<LANES> where Self: crate::Vector {\n             fn from(array: [$type; LANES]) -> Self {\n                 Self(array)\n             }\n         }\n \n-        impl <const LANES: usize> From<$name<LANES>> for [$type; LANES] where $name<LANES>: crate::LanesAtMost32 {\n+        impl <const LANES: usize> From<$name<LANES>> for [$type; LANES] where $name<LANES>: crate::Vector {\n             fn from(vector: $name<LANES>) -> Self {\n                 vector.to_array()\n             }"}, {"sha": "554aa91a5f0c807e6efd1e1a1c821b782319dcf3", "filename": "crates/core_simd/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -35,7 +35,7 @@ macro_rules! impl_fmt_trait {\n             $( // repeat trait\n                 impl<const LANES: usize> core::fmt::$trait for crate::$type<LANES>\n                 where\n-                    Self: crate::LanesAtMost32,\n+                    Self: crate::Vector,\n                 {\n                     fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n                         $format(self.as_ref(), f)"}, {"sha": "460c061be69fe47e31b3a1fe545725665cdfa863", "filename": "crates/core_simd/src/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fiter.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -2,7 +2,7 @@ macro_rules! impl_traits {\n     { $type:ident } => {\n         impl<const LANES: usize> core::iter::Sum<Self> for crate::$type<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n+            Self: crate::Vector,\n         {\n             fn sum<I: core::iter::Iterator<Item = Self>>(iter: I) -> Self {\n                 iter.fold(Default::default(), core::ops::Add::add)\n@@ -11,7 +11,7 @@ macro_rules! impl_traits {\n \n         impl<const LANES: usize> core::iter::Product<Self> for crate::$type<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n+            Self: crate::Vector,\n         {\n             fn product<I: core::iter::Iterator<Item = Self>>(iter: I) -> Self {\n                 iter.fold(Default::default(), core::ops::Mul::mul)\n@@ -20,7 +20,7 @@ macro_rules! impl_traits {\n \n         impl<'a, const LANES: usize> core::iter::Sum<&'a Self> for crate::$type<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n+            Self: crate::Vector,\n         {\n             fn sum<I: core::iter::Iterator<Item = &'a Self>>(iter: I) -> Self {\n                 iter.fold(Default::default(), core::ops::Add::add)\n@@ -29,7 +29,7 @@ macro_rules! impl_traits {\n \n         impl<'a, const LANES: usize> core::iter::Product<&'a Self> for crate::$type<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n+            Self: crate::Vector,\n         {\n             fn product<I: core::iter::Iterator<Item = &'a Self>>(iter: I) -> Self {\n                 iter.fold(Default::default(), core::ops::Mul::mul)"}, {"sha": "2d84b1306ea5a50f3b43f0644d4a00d8b3eed17f", "filename": "crates/core_simd/src/lanes_at_most_32.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_32.rs?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -1,54 +0,0 @@\n-/// Implemented for vectors that are supported by the implementation.\n-pub trait LanesAtMost32: sealed::Sealed {\n-    #[doc(hidden)]\n-    type BitMask: Into<u64>;\n-}\n-\n-mod sealed {\n-    pub trait Sealed {}\n-}\n-\n-macro_rules! impl_for {\n-    { $name:ident } => {\n-        impl<const LANES: usize> sealed::Sealed for $name<LANES>\n-        where\n-            $name<LANES>: LanesAtMost32,\n-        {}\n-\n-        impl LanesAtMost32 for $name<1> {\n-            type BitMask = u8;\n-        }\n-        impl LanesAtMost32 for $name<2> {\n-            type BitMask = u8;\n-        }\n-        impl LanesAtMost32 for $name<4> {\n-            type BitMask = u8;\n-        }\n-        impl LanesAtMost32 for $name<8> {\n-            type BitMask = u8;\n-        }\n-        impl LanesAtMost32 for $name<16> {\n-            type BitMask = u16;\n-        }\n-        impl LanesAtMost32 for $name<32> {\n-            type BitMask = u32;\n-        }\n-    }\n-}\n-\n-use crate::*;\n-\n-impl_for! { SimdU8 }\n-impl_for! { SimdU16 }\n-impl_for! { SimdU32 }\n-impl_for! { SimdU64 }\n-impl_for! { SimdUsize }\n-\n-impl_for! { SimdI8 }\n-impl_for! { SimdI16 }\n-impl_for! { SimdI32 }\n-impl_for! { SimdI64 }\n-impl_for! { SimdIsize }\n-\n-impl_for! { SimdF32 }\n-impl_for! { SimdF64 }"}, {"sha": "eb580dcf14d883b5a339e1f826019419fa035859", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -35,14 +35,8 @@ mod vendor;\n \n mod math;\n \n-mod lanes_at_most_32;\n-pub use lanes_at_most_32::LanesAtMost32;\n-\n mod masks;\n pub use masks::*;\n \n mod vector;\n pub use vector::*;\n-\n-mod array;\n-pub use array::SimdArray;"}, {"sha": "a64750a623f7b1586b39fde00feb29d44b26edd0", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -3,11 +3,11 @@ use core::marker::PhantomData;\n \n /// Helper trait for limiting int conversion types\n pub trait ConvertToInt {}\n-impl<const LANES: usize> ConvertToInt for crate::SimdI8<LANES> where Self: crate::LanesAtMost32 {}\n-impl<const LANES: usize> ConvertToInt for crate::SimdI16<LANES> where Self: crate::LanesAtMost32 {}\n-impl<const LANES: usize> ConvertToInt for crate::SimdI32<LANES> where Self: crate::LanesAtMost32 {}\n-impl<const LANES: usize> ConvertToInt for crate::SimdI64<LANES> where Self: crate::LanesAtMost32 {}\n-impl<const LANES: usize> ConvertToInt for crate::SimdIsize<LANES> where Self: crate::LanesAtMost32 {}\n+impl<const LANES: usize> ConvertToInt for crate::SimdI8<LANES> where Self: crate::Vector {}\n+impl<const LANES: usize> ConvertToInt for crate::SimdI16<LANES> where Self: crate::Vector {}\n+impl<const LANES: usize> ConvertToInt for crate::SimdI32<LANES> where Self: crate::Vector {}\n+impl<const LANES: usize> ConvertToInt for crate::SimdI64<LANES> where Self: crate::Vector {}\n+impl<const LANES: usize> ConvertToInt for crate::SimdIsize<LANES> where Self: crate::Vector {}\n \n /// A mask where each lane is represented by a single bit.\n #[repr(transparent)]\n@@ -80,7 +80,7 @@ impl<T: Mask, const LANES: usize> BitMask<T, LANES> {\n     #[inline]\n     pub unsafe fn from_int_unchecked<V>(value: V) -> Self\n     where\n-        V: crate::LanesAtMost32,\n+        V: crate::Vector,\n     {\n         // TODO remove the transmute when rustc is more flexible\n         assert_eq!(\n@@ -184,8 +184,8 @@ macro_rules! impl_from {\n         $(\n         impl<const LANES: usize> From<$from<crate::$from<LANES>, LANES>> for $to<crate::$to<LANES>, LANES>\n         where\n-            crate::$from_inner<LANES>: crate::LanesAtMost32,\n-            crate::$to_inner<LANES>: crate::LanesAtMost32,\n+            crate::$from_inner<LANES>: crate::Vector,\n+            crate::$to_inner<LANES>: crate::Vector,\n             crate::$from<LANES>: crate::Mask,\n             crate::$to<LANES>: crate::Mask,\n         {"}, {"sha": "f083284df8fa3b1e3156537a8556d3e1da9f4163", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -14,18 +14,18 @@ macro_rules! define_mask {\n         #[repr(transparent)]\n         pub struct $name<T: Mask, const $lanes: usize>(crate::$type<$lanes2>, PhantomData<T>)\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32;\n+            crate::$type<LANES>: crate::Vector;\n \n         impl_full_mask_reductions! { $name, $type }\n \n         impl<T: Mask, const LANES: usize> Copy for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {}\n \n         impl<T: Mask, const LANES: usize> Clone for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             #[inline]\n             fn clone(&self) -> Self {\n@@ -35,7 +35,7 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> PartialEq for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             fn eq(&self, other: &Self) -> bool {\n                 self.0 == other.0\n@@ -44,7 +44,7 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> PartialOrd for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n                 self.0.partial_cmp(&other.0)\n@@ -53,12 +53,12 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> Eq for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {}\n \n         impl<T: Mask, const LANES: usize> Ord for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n                 self.0.cmp(&other.0)\n@@ -67,7 +67,7 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             pub fn splat(value: bool) -> Self {\n                 Self(\n@@ -154,7 +154,7 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> core::convert::From<$name<T, LANES>> for crate::$type<LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             fn from(value: $name<T, LANES>) -> Self {\n                 value.0\n@@ -163,7 +163,7 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> core::ops::BitAnd for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             type Output = Self;\n             #[inline]\n@@ -174,7 +174,7 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> core::ops::BitOr for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             type Output = Self;\n             #[inline]\n@@ -185,7 +185,7 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> core::ops::BitXor for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             type Output = Self;\n             #[inline]\n@@ -196,7 +196,7 @@ macro_rules! define_mask {\n \n         impl<T: Mask, const LANES: usize> core::ops::Not for $name<T, LANES>\n         where\n-            crate::$type<LANES>: crate::LanesAtMost32,\n+            crate::$type<LANES>: crate::Vector,\n         {\n             type Output = Self;\n             #[inline]\n@@ -242,8 +242,8 @@ macro_rules! impl_from {\n         $(\n         impl<const LANES: usize, T, U> From<$from<T, LANES>> for $to<U, LANES>\n         where\n-            crate::$from_inner<LANES>: crate::LanesAtMost32,\n-            crate::$to_inner<LANES>: crate::LanesAtMost32,\n+            crate::$from_inner<LANES>: crate::Vector,\n+            crate::$to_inner<LANES>: crate::Vector,\n             T: crate::Mask,\n             U: crate::Mask,\n         {"}, {"sha": "43e689d45bc78d91ffd47e678c8fec35d27f3082", "filename": "crates/core_simd/src/masks/mod.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -12,7 +12,7 @@\n )]\n mod mask_impl;\n \n-use crate::{LanesAtMost32, SimdI16, SimdI32, SimdI64, SimdI8, SimdIsize};\n+use crate::{SimdI16, SimdI32, SimdI64, SimdI8, SimdIsize, Vector};\n \n mod sealed {\n     pub trait Sealed {}\n@@ -38,12 +38,12 @@ macro_rules! define_opaque_mask {\n         #[allow(non_camel_case_types)]\n         pub struct $name<const LANES: usize>($inner_ty)\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask;\n \n         impl<const LANES: usize> sealed::Sealed for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {}\n         impl Mask for $name<1> {\n@@ -75,7 +75,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             /// Construct a mask by setting all lanes to the given value.\n@@ -188,7 +188,7 @@ macro_rules! define_opaque_mask {\n         // vector/array conversion\n         impl<const LANES: usize> From<[bool; LANES]> for $name<LANES>\n         where\n-            $bits_ty<LANES>: crate::LanesAtMost32,\n+            $bits_ty<LANES>: crate::Vector,\n             Self: Mask,\n         {\n             fn from(array: [bool; LANES]) -> Self {\n@@ -198,7 +198,7 @@ macro_rules! define_opaque_mask {\n \n         impl <const LANES: usize> From<$name<LANES>> for [bool; LANES]\n         where\n-            $bits_ty<LANES>: crate::LanesAtMost32,\n+            $bits_ty<LANES>: crate::Vector,\n             $name<LANES>: Mask,\n         {\n             fn from(vector: $name<LANES>) -> Self {\n@@ -208,13 +208,13 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> Copy for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {}\n \n         impl<const LANES: usize> Clone for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -225,7 +225,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> Default for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -236,7 +236,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> PartialEq for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -247,7 +247,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> PartialOrd for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -258,7 +258,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::fmt::Debug for $name<LANES>\n         where\n-            $bits_ty<LANES>: crate::LanesAtMost32,\n+            $bits_ty<LANES>: crate::Vector,\n             Self: Mask,\n         {\n             fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {\n@@ -270,7 +270,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitAnd for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             type Output = Self;\n@@ -282,7 +282,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitAnd<bool> for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             type Output = Self;\n@@ -294,7 +294,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitAnd<$name<LANES>> for bool\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             $name<LANES>: Mask,\n         {\n             type Output = $name<LANES>;\n@@ -306,7 +306,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitOr for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             type Output = Self;\n@@ -318,7 +318,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitOr<bool> for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             type Output = Self;\n@@ -330,7 +330,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitOr<$name<LANES>> for bool\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             $name<LANES>: Mask,\n         {\n             type Output = $name<LANES>;\n@@ -342,7 +342,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitXor for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             type Output = Self;\n@@ -354,7 +354,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitXor<bool> for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             type Output = Self;\n@@ -366,7 +366,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitXor<$name<LANES>> for bool\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             $name<LANES>: Mask,\n         {\n             type Output = $name<LANES>;\n@@ -378,7 +378,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::Not for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             type Output = $name<LANES>;\n@@ -390,7 +390,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitAndAssign for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -401,7 +401,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitAndAssign<bool> for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -412,7 +412,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitOrAssign for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -423,7 +423,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitOrAssign<bool> for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -434,7 +434,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitXorAssign for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -445,7 +445,7 @@ macro_rules! define_opaque_mask {\n \n         impl<const LANES: usize> core::ops::BitXorAssign<bool> for $name<LANES>\n         where\n-            $bits_ty<LANES>: LanesAtMost32,\n+            $bits_ty<LANES>: Vector,\n             Self: Mask,\n         {\n             #[inline]\n@@ -555,8 +555,8 @@ macro_rules! impl_from {\n         $(\n         impl<const LANES: usize> From<$from<LANES>> for $to<LANES>\n         where\n-            crate::$from_inner<LANES>: crate::LanesAtMost32,\n-            crate::$to_inner<LANES>: crate::LanesAtMost32,\n+            crate::$from_inner<LANES>: crate::Vector,\n+            crate::$to_inner<LANES>: crate::Vector,\n             $from<LANES>: Mask,\n             Self: Mask,\n         {"}, {"sha": "cc03308711369031cf2f441e026c06a8096beaa2", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -1,6 +1,6 @@\n macro_rules! impl_uint_arith {\n     ($(($name:ident, $n:ident)),+) => {\n-        $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n+        $( impl<const LANES: usize> $name<LANES> where Self: crate::Vector {\n \n             /// Lanewise saturating add.\n             ///\n@@ -44,7 +44,7 @@ macro_rules! impl_uint_arith {\n \n macro_rules! impl_int_arith {\n     ($(($name:ident, $n:ident)),+) => {\n-        $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n+        $( impl<const LANES: usize> $name<LANES> where Self: crate::Vector {\n \n             /// Lanewise saturating add.\n             ///"}, {"sha": "a41782a1464f75423e4a58e50a05832a69f4e362", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -1,4 +1,4 @@\n-use crate::LanesAtMost32;\n+use crate::Vector;\n \n /// Checks if the right-hand side argument of a left- or right-shift would cause overflow.\n fn invalid_shift_rhs<T>(rhs: T) -> bool\n@@ -16,7 +16,7 @@ macro_rules! impl_ref_ops {\n     {\n         impl<const $lanes:ident: usize> core::ops::$trait:ident<$rhs:ty> for $type:ty\n         where\n-            $($bound:path: LanesAtMost32,)*\n+            $($bound:path: Vector,)*\n         {\n             type Output = $output:ty;\n \n@@ -26,7 +26,7 @@ macro_rules! impl_ref_ops {\n     } => {\n         impl<const $lanes: usize> core::ops::$trait<$rhs> for $type\n         where\n-            $($bound: LanesAtMost32,)*\n+            $($bound: Vector,)*\n         {\n             type Output = $output;\n \n@@ -36,7 +36,7 @@ macro_rules! impl_ref_ops {\n \n         impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for $type\n         where\n-            $($bound: LanesAtMost32,)*\n+            $($bound: Vector,)*\n         {\n             type Output = <$type as core::ops::$trait<$rhs>>::Output;\n \n@@ -48,7 +48,7 @@ macro_rules! impl_ref_ops {\n \n         impl<const $lanes: usize> core::ops::$trait<$rhs> for &'_ $type\n         where\n-            $($bound: LanesAtMost32,)*\n+            $($bound: Vector,)*\n         {\n             type Output = <$type as core::ops::$trait<$rhs>>::Output;\n \n@@ -60,7 +60,7 @@ macro_rules! impl_ref_ops {\n \n         impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for &'_ $type\n         where\n-            $($bound: LanesAtMost32,)*\n+            $($bound: Vector,)*\n         {\n             type Output = <$type as core::ops::$trait<$rhs>>::Output;\n \n@@ -75,23 +75,23 @@ macro_rules! impl_ref_ops {\n     {\n         impl<const $lanes:ident: usize> core::ops::$trait:ident<$rhs:ty> for $type:ty\n         where\n-            $($bound:path: LanesAtMost32,)*\n+            $($bound:path: Vector,)*\n         {\n             $(#[$attrs:meta])*\n             fn $fn:ident(&mut $self_tok:ident, $rhs_arg:ident: $rhs_arg_ty:ty) $body:tt\n         }\n     } => {\n         impl<const $lanes: usize> core::ops::$trait<$rhs> for $type\n         where\n-            $($bound: LanesAtMost32,)*\n+            $($bound: Vector,)*\n         {\n             $(#[$attrs])*\n             fn $fn(&mut $self_tok, $rhs_arg: $rhs_arg_ty) $body\n         }\n \n         impl<const $lanes: usize> core::ops::$trait<&'_ $rhs> for $type\n         where\n-            $($bound: LanesAtMost32,)*\n+            $($bound: Vector,)*\n         {\n             $(#[$attrs])*\n             fn $fn(&mut $self_tok, $rhs_arg: &$rhs_arg_ty) {\n@@ -104,23 +104,23 @@ macro_rules! impl_ref_ops {\n     {\n         impl<const $lanes:ident: usize> core::ops::$trait:ident for $type:ty\n         where\n-            $($bound:path: LanesAtMost32,)*\n+            $($bound:path: Vector,)*\n         {\n             type Output = $output:ty;\n             fn $fn:ident($self_tok:ident) -> Self::Output $body:tt\n         }\n     } => {\n         impl<const $lanes: usize> core::ops::$trait for $type\n         where\n-            $($bound: LanesAtMost32,)*\n+            $($bound: Vector,)*\n         {\n             type Output = $output;\n             fn $fn($self_tok) -> Self::Output $body\n         }\n \n         impl<const $lanes: usize> core::ops::$trait for &'_ $type\n         where\n-            $($bound: LanesAtMost32,)*\n+            $($bound: Vector,)*\n         {\n             type Output = <$type as core::ops::$trait>::Output;\n             fn $fn($self_tok) -> Self::Output {\n@@ -167,7 +167,7 @@ macro_rules! impl_op {\n         impl_ref_ops! {\n             impl<const LANES: usize> core::ops::Not for crate::$type<LANES>\n             where\n-                crate::$type<LANES>: LanesAtMost32,\n+                crate::$type<LANES>: Vector,\n             {\n                 type Output = Self;\n                 fn not(self) -> Self::Output {\n@@ -181,7 +181,7 @@ macro_rules! impl_op {\n         impl_ref_ops! {\n             impl<const LANES: usize> core::ops::Neg for crate::$type<LANES>\n             where\n-                crate::$type<LANES>: LanesAtMost32,\n+                crate::$type<LANES>: Vector,\n             {\n                 type Output = Self;\n                 fn neg(self) -> Self::Output {\n@@ -194,7 +194,7 @@ macro_rules! impl_op {\n     { impl Index for $type:ident, $scalar:ty } => {\n         impl<I, const LANES: usize> core::ops::Index<I> for crate::$type<LANES>\n         where\n-            Self: LanesAtMost32,\n+            Self: Vector,\n             I: core::slice::SliceIndex<[$scalar]>,\n         {\n             type Output = I::Output;\n@@ -206,7 +206,7 @@ macro_rules! impl_op {\n \n         impl<I, const LANES: usize> core::ops::IndexMut<I> for crate::$type<LANES>\n         where\n-            Self: LanesAtMost32,\n+            Self: Vector,\n             I: core::slice::SliceIndex<[$scalar]>,\n         {\n             fn index_mut(&mut self, index: I) -> &mut Self::Output {\n@@ -221,7 +221,7 @@ macro_rules! impl_op {\n         impl_ref_ops! {\n             impl<const LANES: usize> core::ops::$trait<Self> for crate::$type<LANES>\n             where\n-                crate::$type<LANES>: LanesAtMost32,\n+                crate::$type<LANES>: Vector,\n             {\n                 type Output = Self;\n \n@@ -237,7 +237,7 @@ macro_rules! impl_op {\n         impl_ref_ops! {\n             impl<const LANES: usize> core::ops::$trait<$scalar> for crate::$type<LANES>\n             where\n-                crate::$type<LANES>: LanesAtMost32,\n+                crate::$type<LANES>: Vector,\n             {\n                 type Output = Self;\n \n@@ -251,7 +251,7 @@ macro_rules! impl_op {\n         impl_ref_ops! {\n             impl<const LANES: usize> core::ops::$trait<crate::$type<LANES>> for $scalar\n             where\n-                crate::$type<LANES>: LanesAtMost32,\n+                crate::$type<LANES>: Vector,\n             {\n                 type Output = crate::$type<LANES>;\n \n@@ -265,7 +265,7 @@ macro_rules! impl_op {\n         impl_ref_ops! {\n             impl<const LANES: usize> core::ops::$assign_trait<Self> for crate::$type<LANES>\n             where\n-                crate::$type<LANES>: LanesAtMost32,\n+                crate::$type<LANES>: Vector,\n             {\n                 #[inline]\n                 fn $assign_trait_fn(&mut self, rhs: Self) {\n@@ -279,7 +279,7 @@ macro_rules! impl_op {\n         impl_ref_ops! {\n             impl<const LANES: usize> core::ops::$assign_trait<$scalar> for crate::$type<LANES>\n             where\n-                crate::$type<LANES>: LanesAtMost32,\n+                crate::$type<LANES>: Vector,\n             {\n                 #[inline]\n                 fn $assign_trait_fn(&mut self, rhs: $scalar) {\n@@ -325,7 +325,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Div<Self> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = Self;\n \n@@ -353,7 +353,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Div<$scalar> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = Self;\n \n@@ -376,7 +376,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Div<crate::$vector<LANES>> for $scalar\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = crate::$vector<LANES>;\n \n@@ -390,7 +390,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::DivAssign<Self> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         #[inline]\n                         fn div_assign(&mut self, rhs: Self) {\n@@ -402,7 +402,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::DivAssign<$scalar> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         #[inline]\n                         fn div_assign(&mut self, rhs: $scalar) {\n@@ -415,7 +415,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Rem<Self> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = Self;\n \n@@ -443,7 +443,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Rem<$scalar> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = Self;\n \n@@ -466,7 +466,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Rem<crate::$vector<LANES>> for $scalar\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = crate::$vector<LANES>;\n \n@@ -480,7 +480,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::RemAssign<Self> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         #[inline]\n                         fn rem_assign(&mut self, rhs: Self) {\n@@ -492,7 +492,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::RemAssign<$scalar> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         #[inline]\n                         fn rem_assign(&mut self, rhs: $scalar) {\n@@ -505,7 +505,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Shl<Self> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = Self;\n \n@@ -527,7 +527,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Shl<$scalar> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = Self;\n \n@@ -546,7 +546,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::ShlAssign<Self> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         #[inline]\n                         fn shl_assign(&mut self, rhs: Self) {\n@@ -558,7 +558,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::ShlAssign<$scalar> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         #[inline]\n                         fn shl_assign(&mut self, rhs: $scalar) {\n@@ -570,7 +570,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Shr<Self> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = Self;\n \n@@ -592,7 +592,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::Shr<$scalar> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         type Output = Self;\n \n@@ -611,7 +611,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::ShrAssign<Self> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         #[inline]\n                         fn shr_assign(&mut self, rhs: Self) {\n@@ -623,7 +623,7 @@ macro_rules! impl_unsigned_int_ops {\n                 impl_ref_ops! {\n                     impl<const LANES: usize> core::ops::ShrAssign<$scalar> for crate::$vector<LANES>\n                     where\n-                        crate::$vector<LANES>: LanesAtMost32,\n+                        crate::$vector<LANES>: Vector,\n                     {\n                         #[inline]\n                         fn shr_assign(&mut self, rhs: $scalar) {"}, {"sha": "548d280b22b50a82e27b76e53f47eea178c6a123", "filename": "crates/core_simd/src/reduction.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Freduction.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -2,7 +2,7 @@ macro_rules! impl_integer_reductions {\n     { $name:ident, $scalar:ty } => {\n         impl<const LANES: usize> crate::$name<LANES>\n         where\n-            Self: crate::LanesAtMost32\n+            Self: crate::Vector\n         {\n             /// Horizontal wrapping add.  Returns the sum of the lanes of the vector, with wrapping addition.\n             #[inline]\n@@ -56,7 +56,7 @@ macro_rules! impl_float_reductions {\n     { $name:ident, $scalar:ty } => {\n         impl<const LANES: usize> crate::$name<LANES>\n         where\n-            Self: crate::LanesAtMost32\n+            Self: crate::Vector\n         {\n \n             /// Horizontal add.  Returns the sum of the lanes of the vector.\n@@ -106,7 +106,7 @@ macro_rules! impl_full_mask_reductions {\n     { $name:ident, $bits_ty:ident } => {\n         impl<T: crate::Mask, const LANES: usize> $name<T, LANES>\n         where\n-            crate::$bits_ty<LANES>: crate::LanesAtMost32\n+            crate::$bits_ty<LANES>: crate::Vector\n         {\n             #[inline]\n             pub fn any(self) -> bool {\n@@ -125,7 +125,7 @@ macro_rules! impl_opaque_mask_reductions {\n     { $name:ident, $bits_ty:ident } => {\n         impl<const LANES: usize> $name<LANES>\n         where\n-            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+            crate::$bits_ty<LANES>: crate::Vector,\n             $name<LANES>: crate::Mask,\n         {\n             /// Returns true if any lane is set, or false otherwise."}, {"sha": "5cd7a898eaf4091893465da6e88c332b7ff43500", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -5,7 +5,7 @@ macro_rules! implement {\n         #[cfg(feature = \"std\")]\n         impl<const LANES: usize> crate::$type<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n+            Self: crate::Vector,\n         {\n             /// Returns the smallest integer greater than or equal to each lane.\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n@@ -45,8 +45,8 @@ macro_rules! implement {\n \n         impl<const LANES: usize> crate::$type<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n-            crate::$int_type<LANES>: crate::LanesAtMost32,\n+            Self: crate::Vector,\n+            crate::$int_type<LANES>: crate::Vector,\n         {\n             /// Rounds toward zero and converts to the same-width integer type, assuming that\n             /// the value is finite and fits in that type."}, {"sha": "1558eb169351201c4f85e154d640a5ee4763c6c6", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -14,12 +14,12 @@ macro_rules! impl_select {\n         $mask:ident ($bits_ty:ident): $($type:ident),*\n     } => {\n         $(\n-        impl<const LANES: usize> Sealed for crate::$type<LANES> where Self: crate::LanesAtMost32 {}\n+        impl<const LANES: usize> Sealed for crate::$type<LANES> where Self: crate::Vector {}\n         impl<const LANES: usize> Select<crate::$mask<LANES>> for crate::$type<LANES>\n         where\n             crate::$mask<LANES>: crate::Mask,\n-            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n-            Self: crate::LanesAtMost32,\n+            crate::$bits_ty<LANES>: crate::Vector,\n+            Self: crate::Vector,\n         {\n             #[doc(hidden)]\n             #[inline]\n@@ -32,12 +32,12 @@ macro_rules! impl_select {\n         impl<const LANES: usize> Sealed for crate::$mask<LANES>\n         where\n             Self: crate::Mask,\n-            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+            crate::$bits_ty<LANES>: crate::Vector,\n         {}\n         impl<const LANES: usize> Select<Self> for crate::$mask<LANES>\n         where\n             Self: crate::Mask,\n-            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+            crate::$bits_ty<LANES>: crate::Vector,\n         {\n             #[doc(hidden)]\n             #[inline]\n@@ -49,7 +49,7 @@ macro_rules! impl_select {\n         impl<const LANES: usize> crate::$mask<LANES>\n         where\n             Self: crate::Mask,\n-            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+            crate::$bits_ty<LANES>: crate::Vector,\n         {\n             /// Choose lanes from two vectors.\n             ///"}, {"sha": "c4f112c9ee7e41883ce94d61300887c96595440c", "filename": "crates/core_simd/src/to_bytes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -18,11 +18,11 @@ pub trait ToBytes: Sealed {\n macro_rules! impl_to_bytes {\n     { $name:ident, $($int_width:literal -> $byte_width:literal),* } => {\n         $(\n-        impl Sealed for crate::$name<$int_width> where Self: crate::LanesAtMost32 {}\n+        impl Sealed for crate::$name<$int_width> where Self: crate::Vector {}\n         impl ToBytes for crate::$name<$int_width>\n         where\n-            Self: crate::LanesAtMost32,\n-            crate::SimdU8<$byte_width>: crate::LanesAtMost32,\n+            Self: crate::Vector,\n+            crate::SimdU8<$byte_width>: crate::Vector,\n         {\n             type Bytes = crate::SimdU8<$byte_width>;\n             fn to_bytes_impl(self) -> Self::Bytes {\n@@ -36,7 +36,7 @@ macro_rules! impl_to_bytes {\n \n         impl<const LANES: usize> crate::$name<LANES>\n         where\n-            Self: ToBytes + crate::LanesAtMost32,\n+            Self: ToBytes + crate::Vector,\n         {\n             /// Return the memory representation of this integer as a byte array in native byte\n             /// order."}, {"sha": "95214ea88642bfdd9efb10683a4941daba32229a", "filename": "crates/core_simd/src/vector.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732b7edfab46b33e3861172eb867b139a9425574/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=732b7edfab46b33e3861172eb867b139a9425574", "patch": "@@ -1,10 +0,0 @@\n-mod float;\n-mod int;\n-mod uint;\n-\n-pub use float::*;\n-pub use int::*;\n-pub use uint::*;\n-\n-// Vectors of pointers are not for public use at the current time.\n-pub(crate) mod ptr;"}, {"sha": "4b069a4fab838bbe0b4f6dfab2c57bff5424941d", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -10,8 +10,8 @@ macro_rules! impl_float_vector {\n \n         impl<const LANES: usize> $name<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n-            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+            Self: crate::Vector,\n+            crate::$bits_ty<LANES>: crate::Vector,\n         {\n             /// Raw transmutation to an unsigned integer vector type with the\n             /// same size and number of lanes.\n@@ -78,9 +78,9 @@ macro_rules! impl_float_vector {\n \n         impl<const LANES: usize> $name<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n-            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n-            crate::$mask_impl_ty<LANES>: crate::LanesAtMost32,\n+            Self: crate::Vector,\n+            crate::$bits_ty<LANES>: crate::Vector,\n+            crate::$mask_impl_ty<LANES>: crate::Vector,\n             crate::$mask_ty<LANES>: crate::Mask,\n         {\n             /// Returns true for each lane if it has a positive sign, including\n@@ -197,15 +197,15 @@ macro_rules! impl_float_vector {\n #[repr(simd)]\n pub struct SimdF32<const LANES: usize>([f32; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_float_vector! { SimdF32, f32, SimdU32, Mask32, SimdI32 }\n \n /// A SIMD vector of containing `LANES` `f64` values.\n #[repr(simd)]\n pub struct SimdF64<const LANES: usize>([f64; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_float_vector! { SimdF64, f64, SimdU64, Mask64, SimdI64 }\n "}, {"sha": "60b3f56d4c4a00e7337afa56736387f973a87991", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -6,17 +6,17 @@ macro_rules! impl_integer_vector {\n         impl_vector! { $name, $type }\n         impl_integer_reductions! { $name, $type }\n \n-        impl<const LANES: usize> Eq for $name<LANES> where Self: crate::LanesAtMost32 {}\n+        impl<const LANES: usize> Eq for $name<LANES> where Self: crate::Vector {}\n \n-        impl<const LANES: usize> Ord for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> Ord for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n                 // TODO use SIMD cmp\n                 self.to_array().cmp(other.as_ref())\n             }\n         }\n \n-        impl<const LANES: usize> core::hash::Hash for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> core::hash::Hash for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn hash<H>(&self, state: &mut H)\n             where\n@@ -28,8 +28,8 @@ macro_rules! impl_integer_vector {\n \n         impl<const LANES: usize> $name<LANES>\n         where\n-            Self: crate::LanesAtMost32,\n-            crate::$mask_impl_ty<LANES>: crate::LanesAtMost32,\n+            Self: crate::Vector,\n+            crate::$mask_impl_ty<LANES>: crate::Vector,\n             crate::$mask_ty<LANES>: crate::Mask,\n         {\n             /// Returns true for each positive lane and false if it is zero or negative.\n@@ -63,39 +63,39 @@ macro_rules! impl_integer_vector {\n #[repr(simd)]\n pub struct SimdIsize<const LANES: usize>([isize; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_integer_vector! { SimdIsize, isize, MaskSize, SimdIsize }\n \n /// A SIMD vector of containing `LANES` `i16` values.\n #[repr(simd)]\n pub struct SimdI16<const LANES: usize>([i16; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_integer_vector! { SimdI16, i16, Mask16, SimdI16 }\n \n /// A SIMD vector of containing `LANES` `i32` values.\n #[repr(simd)]\n pub struct SimdI32<const LANES: usize>([i32; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_integer_vector! { SimdI32, i32, Mask32, SimdI32 }\n \n /// A SIMD vector of containing `LANES` `i64` values.\n #[repr(simd)]\n pub struct SimdI64<const LANES: usize>([i64; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_integer_vector! { SimdI64, i64, Mask64, SimdI64 }\n \n /// A SIMD vector of containing `LANES` `i8` values.\n #[repr(simd)]\n pub struct SimdI8<const LANES: usize>([i8; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_integer_vector! { SimdI8, i8, Mask8, SimdI8 }\n "}, {"sha": "1af82d9c76ff1649e32a358093d70acc0be5e866", "filename": "crates/core_simd/src/vector/mod.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fmod.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -0,0 +1,132 @@\n+mod float;\n+mod int;\n+mod uint;\n+\n+pub use float::*;\n+pub use int::*;\n+pub use uint::*;\n+\n+// Vectors of pointers are not for public use at the current time.\n+pub(crate) mod ptr;\n+\n+mod sealed {\n+    pub trait Sealed {}\n+}\n+\n+/// A representation of a vector as an \"array\" with indices, implementing\n+/// operations applicable to any vector type based solely on \"having lanes\",\n+/// and describing relationships between vector and scalar types.\n+pub trait Vector: sealed::Sealed {\n+    /// The scalar type in every lane of this vector type.\n+    type Scalar: Copy + Sized;\n+\n+    /// The number of lanes for this vector.\n+    const LANES: usize;\n+\n+    // Implementation detail until the compiler can support bitmasks of any integer width\n+    #[doc(hidden)]\n+    type BitMask: Into<u64>;\n+\n+    /// Generates a SIMD vector with the same value in every lane.\n+    #[must_use]\n+    fn splat(val: Self::Scalar) -> Self;\n+\n+}\n+\n+macro_rules! impl_vector_for {\n+    ($simd:ident {type Scalar = $scalar:ident;}) => {\n+        impl_vector_for! { $simd<1> { type Scalar = $scalar; type BitMask = u8; } }\n+        impl_vector_for! { $simd<2> { type Scalar = $scalar; type BitMask = u8; } }\n+        impl_vector_for! { $simd<4> { type Scalar = $scalar; type BitMask = u8; } }\n+        impl_vector_for! { $simd<8> { type Scalar = $scalar; type BitMask = u8; } }\n+        impl_vector_for! { $simd<16> { type Scalar = $scalar; type BitMask = u16; } }\n+        impl_vector_for! { $simd<32> { type Scalar = $scalar; type BitMask = u32; } }\n+    };\n+    ($simd:ident<$lanes:literal> {type Scalar = $scalar:ident; type BitMask = $bitmask:ident; }) => {\n+        impl sealed::Sealed for $simd<$lanes> {}\n+\n+        impl Vector for $simd<$lanes> {\n+            type Scalar = $scalar;\n+            const LANES: usize = $lanes;\n+\n+            type BitMask = $bitmask;\n+\n+            #[inline]\n+            fn splat(val: Self::Scalar) -> Self {\n+                [val; $lanes].into()\n+            }\n+        }\n+    };\n+}\n+\n+impl_vector_for! {\n+    SimdUsize {\n+        type Scalar = usize;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdIsize {\n+        type Scalar = isize;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdI8 {\n+        type Scalar = i8;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdI16 {\n+        type Scalar = i16;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdI32 {\n+        type Scalar = i32;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdI64 {\n+        type Scalar = i64;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdU8 {\n+        type Scalar = u8;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdU16 {\n+        type Scalar = u16;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdU32 {\n+        type Scalar = u32;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdU64 {\n+        type Scalar = u64;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdF32 {\n+        type Scalar = f32;\n+    }\n+}\n+\n+impl_vector_for! {\n+    SimdF64 {\n+        type Scalar = f64;\n+    }\n+}"}, {"sha": "bdd5c24eac85e90ab5740a3d153ad771ea953f37", "filename": "crates/core_simd/src/vector/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -9,7 +9,7 @@ pub(crate) struct SimdConstPtr<T, const LANES: usize>([*const T; LANES]);\n \n impl<T, const LANES: usize> SimdConstPtr<T, LANES>\n where\n-    SimdUsize<LANES>: crate::LanesAtMost32,\n+    SimdUsize<LANES>: crate::Vector,\n     T: Sized,\n {\n     #[inline]\n@@ -35,7 +35,7 @@ pub(crate) struct SimdMutPtr<T, const LANES: usize>([*mut T; LANES]);\n \n impl<T, const LANES: usize> SimdMutPtr<T, LANES>\n where\n-    SimdUsize<LANES>: crate::LanesAtMost32,\n+    SimdUsize<LANES>: crate::Vector,\n     T: Sized,\n {\n     #[inline]"}, {"sha": "1340bec06f36c9237217dbc6d6fb70d781a9c125", "filename": "crates/core_simd/src/vector/uint.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -6,17 +6,17 @@ macro_rules! impl_unsigned_vector {\n         impl_vector! { $name, $type }\n         impl_integer_reductions! { $name, $type }\n \n-        impl<const LANES: usize> Eq for $name<LANES> where Self: crate::LanesAtMost32 {}\n+        impl<const LANES: usize> Eq for $name<LANES> where Self: crate::Vector {}\n \n-        impl<const LANES: usize> Ord for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> Ord for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n                 // TODO use SIMD cmp\n                 self.to_array().cmp(other.as_ref())\n             }\n         }\n \n-        impl<const LANES: usize> core::hash::Hash for $name<LANES> where Self: crate::LanesAtMost32 {\n+        impl<const LANES: usize> core::hash::Hash for $name<LANES> where Self: crate::Vector {\n             #[inline]\n             fn hash<H>(&self, state: &mut H)\n             where\n@@ -32,39 +32,39 @@ macro_rules! impl_unsigned_vector {\n #[repr(simd)]\n pub struct SimdUsize<const LANES: usize>([usize; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_unsigned_vector! { SimdUsize, usize }\n \n /// A SIMD vector of containing `LANES` `u16` values.\n #[repr(simd)]\n pub struct SimdU16<const LANES: usize>([u16; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_unsigned_vector! { SimdU16, u16 }\n \n /// A SIMD vector of containing `LANES` `u32` values.\n #[repr(simd)]\n pub struct SimdU32<const LANES: usize>([u32; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_unsigned_vector! { SimdU32, u32 }\n \n /// A SIMD vector of containing `LANES` `u64` values.\n #[repr(simd)]\n pub struct SimdU64<const LANES: usize>([u64; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_unsigned_vector! { SimdU64, u64 }\n \n /// A SIMD vector of containing `LANES` `u8` values.\n #[repr(simd)]\n pub struct SimdU8<const LANES: usize>([u8; LANES])\n where\n-    Self: crate::LanesAtMost32;\n+    Self: crate::Vector;\n \n impl_unsigned_vector! { SimdU8, u8 }\n "}, {"sha": "5691bf4538cee3059c1534f965dccd19b75786b0", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=c077bf3c07280d1026fa8a5a1e36c9fbbdaec10b", "patch": "@@ -335,18 +335,18 @@ macro_rules! test_lanes {\n \n                 fn implementation<const $lanes: usize>()\n                 where\n-                    core_simd::SimdU8<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdU16<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdU32<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdU64<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdUsize<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI8<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI16<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI32<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI64<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdIsize<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdF32<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdF64<$lanes>: core_simd::LanesAtMost32,\n+                    core_simd::SimdU8<$lanes>: core_simd::Vector,\n+                    core_simd::SimdU16<$lanes>: core_simd::Vector,\n+                    core_simd::SimdU32<$lanes>: core_simd::Vector,\n+                    core_simd::SimdU64<$lanes>: core_simd::Vector,\n+                    core_simd::SimdUsize<$lanes>: core_simd::Vector,\n+                    core_simd::SimdI8<$lanes>: core_simd::Vector,\n+                    core_simd::SimdI16<$lanes>: core_simd::Vector,\n+                    core_simd::SimdI32<$lanes>: core_simd::Vector,\n+                    core_simd::SimdI64<$lanes>: core_simd::Vector,\n+                    core_simd::SimdIsize<$lanes>: core_simd::Vector,\n+                    core_simd::SimdF32<$lanes>: core_simd::Vector,\n+                    core_simd::SimdF64<$lanes>: core_simd::Vector,\n                     core_simd::Mask8<$lanes>: core_simd::Mask,\n                     core_simd::Mask16<$lanes>: core_simd::Mask,\n                     core_simd::Mask32<$lanes>: core_simd::Mask,\n@@ -409,18 +409,18 @@ macro_rules! test_lanes_panic {\n \n                 fn implementation<const $lanes: usize>()\n                 where\n-                    core_simd::SimdU8<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdU16<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdU32<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdU64<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdUsize<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI8<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI16<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI32<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI64<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdIsize<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdF32<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdF64<$lanes>: core_simd::LanesAtMost32,\n+                    core_simd::SimdU8<$lanes>: core_simd::Vector,\n+                    core_simd::SimdU16<$lanes>: core_simd::Vector,\n+                    core_simd::SimdU32<$lanes>: core_simd::Vector,\n+                    core_simd::SimdU64<$lanes>: core_simd::Vector,\n+                    core_simd::SimdUsize<$lanes>: core_simd::Vector,\n+                    core_simd::SimdI8<$lanes>: core_simd::Vector,\n+                    core_simd::SimdI16<$lanes>: core_simd::Vector,\n+                    core_simd::SimdI32<$lanes>: core_simd::Vector,\n+                    core_simd::SimdI64<$lanes>: core_simd::Vector,\n+                    core_simd::SimdIsize<$lanes>: core_simd::Vector,\n+                    core_simd::SimdF32<$lanes>: core_simd::Vector,\n+                    core_simd::SimdF64<$lanes>: core_simd::Vector,\n                     core_simd::Mask8<$lanes>: core_simd::Mask,\n                     core_simd::Mask16<$lanes>: core_simd::Mask,\n                     core_simd::Mask32<$lanes>: core_simd::Mask,"}]}