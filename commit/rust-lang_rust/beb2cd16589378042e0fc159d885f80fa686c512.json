{"sha": "beb2cd16589378042e0fc159d885f80fa686c512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYjJjZDE2NTg5Mzc4MDQyZTBmYzE1OWQ4ODVmODBmYTY4NmM1MTI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-17T22:23:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-21T00:08:19Z"}, "message": "Remove what's left of resolve1", "tree": {"sha": "41c993460ffe0d600664cc12bfa132df3befb20f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41c993460ffe0d600664cc12bfa132df3befb20f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb2cd16589378042e0fc159d885f80fa686c512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb2cd16589378042e0fc159d885f80fa686c512", "html_url": "https://github.com/rust-lang/rust/commit/beb2cd16589378042e0fc159d885f80fa686c512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb2cd16589378042e0fc159d885f80fa686c512/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1615afe7046d7fe9ba3f390a462aecdd96d374cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1615afe7046d7fe9ba3f390a462aecdd96d374cb", "html_url": "https://github.com/rust-lang/rust/commit/1615afe7046d7fe9ba3f390a462aecdd96d374cb"}], "stats": {"total": 142, "additions": 37, "deletions": 105}, "files": [{"sha": "1222cfc2d6085c77be4af5eebd55f8765787e031", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -4,7 +4,7 @@ import session::{session, session_};\n import syntax::parse;\n import syntax::{ast, codemap};\n import syntax::attr;\n-import middle::{trans, resolve, freevars, kind, ty, typeck, lint};\n+import middle::{trans, freevars, kind, ty, typeck, lint};\n import syntax::print::{pp, pprust};\n import util::ppaux;\n import back::link;"}, {"sha": "002b4d97e23a3e79f7347fff3e9b018de3a5ad30", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -54,7 +54,7 @@ type maps = {\n     mutbl_map: middle::borrowck::mutbl_map,\n     root_map: middle::borrowck::root_map,\n     last_use_map: middle::liveness::last_use_map,\n-    impl_map: middle::resolve::impl_map,\n+    impl_map: middle::resolve3::ImplMap,\n     method_map: middle::typeck::method_map,\n     vtable_map: middle::typeck::vtable_map,\n };"}, {"sha": "6f9a47b98bbbc2c8ee61baad08a75f20ab9b6a0a", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -5,7 +5,7 @@ import std::map::hashmap;\n import dvec::{dvec, extensions};\n \n fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n-               def_map: resolve::def_map,\n+               def_map: resolve3::DefMap,\n                 method_map: typeck::method_map, tcx: ty::ctxt) {\n     visit::visit_crate(*crate, false, visit::mk_vt(@{\n         visit_item: |a,b,c| check_item(sess, ast_map, def_map, a, b, c),\n@@ -17,7 +17,8 @@ fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n     sess.abort_if_errors();\n }\n \n-fn check_item(sess: session, ast_map: ast_map::map, def_map: resolve::def_map,\n+fn check_item(sess: session, ast_map: ast_map::map,\n+              def_map: resolve3::DefMap,\n               it: @item, &&_is_const: bool, v: visit::vt<bool>) {\n     alt it.node {\n       item_const(_, ex) {\n@@ -54,7 +55,7 @@ fn check_pat(p: @pat, &&_is_const: bool, v: visit::vt<bool>) {\n     }\n }\n \n-fn check_expr(sess: session, def_map: resolve::def_map,\n+fn check_expr(sess: session, def_map: resolve3::DefMap,\n               method_map: typeck::method_map, tcx: ty::ctxt,\n               e: @expr, &&is_const: bool, v: visit::vt<bool>) {\n     if is_const {\n@@ -130,13 +131,13 @@ fn check_expr(sess: session, def_map: resolve::def_map,\n // Make sure a const item doesn't recursively refer to itself\n // FIXME: Should use the dependency graph when it's available (#1356)\n fn check_item_recursion(sess: session, ast_map: ast_map::map,\n-                        def_map: resolve::def_map, it: @item) {\n+                        def_map: resolve3::DefMap, it: @item) {\n \n     type env = {\n         root_it: @item,\n         sess: session,\n         ast_map: ast_map::map,\n-        def_map: resolve::def_map,\n+        def_map: resolve3::DefMap,\n         idstack: @dvec<node_id>,\n     };\n "}, {"sha": "d9765618d0f5589f6cb5dcf1522f8549e913d48f", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -6,7 +6,6 @@ import std::map::*;\n import option::*;\n import syntax::{ast, ast_util, visit};\n import syntax::ast::{serialize_span, deserialize_span};\n-import middle::resolve;\n import syntax::codemap::span;\n \n export annotate_freevars;\n@@ -31,7 +30,7 @@ type freevar_map = hashmap<ast::node_id, freevar_info>;\n // Since we want to be able to collect upvars in some arbitrary piece\n // of the AST, we take a walker function that we invoke with a visitor\n // in order to start the search.\n-fn collect_freevars(def_map: resolve::def_map, blk: ast::blk)\n+fn collect_freevars(def_map: resolve3::DefMap, blk: ast::blk)\n     -> freevar_info {\n     let seen = int_hash();\n     let refs = @mut ~[];\n@@ -86,7 +85,7 @@ fn collect_freevars(def_map: resolve::def_map, blk: ast::blk)\n // efficient as it fully recomputes the free variables at every\n // node of interest rather than building up the free variables in\n // one pass. This could be improved upon if it turns out to matter.\n-fn annotate_freevars(def_map: resolve::def_map, crate: @ast::crate) ->\n+fn annotate_freevars(def_map: resolve3::DefMap, crate: @ast::crate) ->\n    freevar_map {\n     let freevars = int_hash();\n "}, {"sha": "4056dc137d790e13dafa08ae6a76264a03a46de4", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -13,15 +13,15 @@ type pat_id_map = std::map::hashmap<ident, node_id>;\n \n // This is used because same-named variables in alternative patterns need to\n // use the node_id of their namesake in the first pattern.\n-fn pat_id_map(dm: resolve::def_map, pat: @pat) -> pat_id_map {\n+fn pat_id_map(dm: resolve3::DefMap, pat: @pat) -> pat_id_map {\n     let map = std::map::box_str_hash();\n     do pat_bindings(dm, pat) |p_id, _s, n| {\n       map.insert(path_to_ident(n), p_id);\n     };\n     ret map;\n }\n \n-fn pat_is_variant(dm: resolve::def_map, pat: @pat) -> bool {\n+fn pat_is_variant(dm: resolve3::DefMap, pat: @pat) -> bool {\n     alt pat.node {\n       pat_enum(_, _) { true }\n       pat_ident(_, none) {\n@@ -34,7 +34,7 @@ fn pat_is_variant(dm: resolve::def_map, pat: @pat) -> bool {\n     }\n }\n \n-fn pat_bindings(dm: resolve::def_map, pat: @pat,\n+fn pat_bindings(dm: resolve3::DefMap, pat: @pat,\n                 it: fn(node_id, span, @path)) {\n     do walk_pat(pat) |p| {\n         alt p.node {\n@@ -46,7 +46,7 @@ fn pat_bindings(dm: resolve::def_map, pat: @pat,\n     }\n }\n \n-fn pat_binding_ids(dm: resolve::def_map, pat: @pat) -> ~[node_id] {\n+fn pat_binding_ids(dm: resolve3::DefMap, pat: @pat) -> ~[node_id] {\n     let mut found = ~[];\n     pat_bindings(dm, pat, |b_id, _sp, _pt| vec::push(found, b_id) );\n     ret found;"}, {"sha": "1978a367fe5edcca65de252476ec909a1111dd93", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -161,7 +161,7 @@ type region_map = hashmap<ast::node_id, ast::node_id>;\n \n type ctxt = {\n     sess: session,\n-    def_map: resolve::def_map,\n+    def_map: resolve3::DefMap,\n     region_map: region_map,\n \n     // The parent scope is the innermost block, call, or alt\n@@ -384,8 +384,8 @@ fn resolve_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n     visit::visit_fn(fk, decl, body, sp, id, fn_cx, visitor);\n }\n \n-fn resolve_crate(sess: session, def_map: resolve::def_map, crate: @ast::crate)\n-        -> region_map {\n+fn resolve_crate(sess: session, def_map: resolve3::DefMap,\n+                 crate: @ast::crate) -> region_map {\n     let cx: ctxt = {sess: sess,\n                     def_map: def_map,\n                     region_map: int_hash(),\n@@ -429,7 +429,7 @@ type dep_map = hashmap<ast::node_id, @dvec<ast::node_id>>;\n type determine_rp_ctxt_ = {\n     sess: session,\n     ast_map: ast_map::map,\n-    def_map: resolve::def_map,\n+    def_map: resolve3::DefMap,\n     region_paramd_items: region_paramd_items,\n     dep_map: dep_map,\n     worklist: dvec<ast::node_id>,\n@@ -610,7 +610,7 @@ fn determine_rp_in_ty(ty: @ast::ty,\n \n fn determine_rp_in_crate(sess: session,\n                          ast_map: ast_map::map,\n-                         def_map: resolve::def_map,\n+                         def_map: resolve3::DefMap,\n                          crate: @ast::crate) -> region_paramd_items {\n     let cx = determine_rp_ctxt_(@{sess: sess,\n                                   ast_map: ast_map,"}, {"sha": "a7ffc9cd26d82b78a602b706ac7b7bf74a852ac4", "filename": "src/rustc/middle/resolve.rs", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1615afe7046d7fe9ba3f390a462aecdd96d374cb/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1615afe7046d7fe9ba3f390a462aecdd96d374cb/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=1615afe7046d7fe9ba3f390a462aecdd96d374cb", "patch": "@@ -1,67 +0,0 @@\n-import syntax::{ast, ast_util, codemap, ast_map};\n-import syntax::ast::*;\n-import ast::{ident, fn_ident, def, def_id, node_id};\n-import ast::{required, provided};\n-import syntax::ast_util::{local_def, def_id_of_def, new_def_hash,\n-                          class_item_ident, path_to_ident};\n-import pat_util::*;\n-\n-import syntax::attr;\n-import metadata::{csearch, cstore};\n-import driver::session::session;\n-import util::common::is_main_name;\n-import std::map::{int_hash, str_hash, box_str_hash, hashmap};\n-import vec::each;\n-import syntax::codemap::span;\n-import syntax::visit;\n-import visit::vt;\n-import std::{list};\n-import std::list::{list, nil, cons};\n-import option::{is_none, is_some};\n-import syntax::print::pprust::*;\n-import dvec::{dvec, extensions};\n-\n-export resolve_crate;\n-export def_map, ext_map, exp_map, impl_map;\n-export _impl, iscopes, method_info;\n-\n-// Resolving happens in two passes. The first pass collects defids of all\n-// (internal) imports and modules, so that they can be looked up when needed,\n-// and then uses this information to resolve the imports. The second pass\n-// locates all names (in expressions, types, and alt patterns) and resolves\n-// them, storing the resulting def in the AST nodes.\n-\n-/* foreign modules can't contain enums, and we don't store their ASTs because\n-   we only need to look at them to determine exports, which they can't\n-   control.*/\n-\n-type def_map = hashmap<node_id, def>;\n-type ext_map = hashmap<def_id, ~[ident]>;\n-type impl_map = hashmap<node_id, iscopes>;\n-type impl_cache = hashmap<def_id, option<@~[@_impl]>>;\n-\n-\n-// Impl resolution\n-\n-type method_info = {did: def_id, n_tps: uint, ident: ast::ident};\n-/* An _impl represents an implementation that's currently in scope.\n-   Its fields:\n-   * did: the def id of the class or impl item\n-   * ident: the name of the impl, unless it has no name (as in\n-   \"impl of X\") in which case the ident\n-   is the ident of the trait that's being implemented\n-   * methods: the item's methods\n-*/\n-type _impl = {did: def_id, ident: ast::ident, methods: ~[@method_info]};\n-type iscopes = @list<@~[@_impl]>;\n-\n-type exp = {reexp: bool, id: def_id};\n-type exp_map = hashmap<node_id, ~[exp]>;\n-\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:"}, {"sha": "9a2825ce4477d21ff373231d5452e51b2128614c", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -10,7 +10,7 @@ import syntax::ast_util::{dummy_sp, path_to_ident};\n import syntax::ast::def_id;\n import syntax::codemap::span;\n import syntax::print::pprust::pat_to_str;\n-import middle::resolve::def_map;\n+import middle::resolve3::DefMap;\n import back::abi;\n import std::map::hashmap;\n import dvec::{dvec, extensions};\n@@ -130,7 +130,7 @@ fn expand_nested_bindings(m: match, col: uint, val: ValueRef) -> match {\n \n type enter_pat = fn(@ast::pat) -> option<~[@ast::pat]>;\n \n-fn enter_match(dm: def_map, m: match, col: uint, val: ValueRef,\n+fn enter_match(dm: DefMap, m: match, col: uint, val: ValueRef,\n                e: enter_pat) -> match {\n     let mut result = ~[];\n     for vec::each(m) |br| {\n@@ -157,7 +157,7 @@ fn enter_match(dm: def_map, m: match, col: uint, val: ValueRef,\n     ret result;\n }\n \n-fn enter_default(dm: def_map, m: match, col: uint, val: ValueRef) -> match {\n+fn enter_default(dm: DefMap, m: match, col: uint, val: ValueRef) -> match {\n     do enter_match(dm, m, col, val) |p| {\n         alt p.node {\n           ast::pat_wild | ast::pat_rec(_, _) | ast::pat_tup(_) { some(~[]) }\n@@ -195,7 +195,7 @@ fn enter_opt(tcx: ty::ctxt, m: match, opt: opt, col: uint,\n     }\n }\n \n-fn enter_rec(dm: def_map, m: match, col: uint, fields: ~[ast::ident],\n+fn enter_rec(dm: DefMap, m: match, col: uint, fields: ~[ast::ident],\n              val: ValueRef) -> match {\n     let dummy = @{id: 0, node: ast::pat_wild, span: dummy_sp()};\n     do enter_match(dm, m, col, val) |p| {\n@@ -216,7 +216,7 @@ fn enter_rec(dm: def_map, m: match, col: uint, fields: ~[ast::ident],\n     }\n }\n \n-fn enter_tup(dm: def_map, m: match, col: uint, val: ValueRef,\n+fn enter_tup(dm: DefMap, m: match, col: uint, val: ValueRef,\n              n_elts: uint) -> match {\n     let dummy = @{id: 0, node: ast::pat_wild, span: dummy_sp()};\n     do enter_match(dm, m, col, val) |p| {\n@@ -227,7 +227,7 @@ fn enter_tup(dm: def_map, m: match, col: uint, val: ValueRef,\n     }\n }\n \n-fn enter_box(dm: def_map, m: match, col: uint, val: ValueRef) -> match {\n+fn enter_box(dm: DefMap, m: match, col: uint, val: ValueRef) -> match {\n     let dummy = @{id: 0, node: ast::pat_wild, span: dummy_sp()};\n     do enter_match(dm, m, col, val) |p| {\n         alt p.node {\n@@ -237,7 +237,7 @@ fn enter_box(dm: def_map, m: match, col: uint, val: ValueRef) -> match {\n     }\n }\n \n-fn enter_uniq(dm: def_map, m: match, col: uint, val: ValueRef) -> match {\n+fn enter_uniq(dm: DefMap, m: match, col: uint, val: ValueRef) -> match {\n     let dummy = @{id: 0, node: ast::pat_wild, span: dummy_sp()};\n     do enter_match(dm, m, col, val) |p| {\n         alt p.node {"}, {"sha": "951bcce910f08060b94d93a2e4891a5e9d044088", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -5450,7 +5450,7 @@ fn write_abi_version(ccx: @crate_ctxt) {\n }\n \n fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n-               output: ~str, emap: resolve::exp_map,\n+               output: ~str, emap: resolve3::ExportMap,\n                maps: astencode::maps)\n     -> (ModuleRef, link_meta) {\n     let sha = std::sha1::sha1();"}, {"sha": "77929bdd6a3c54f1586c961fc2ec671c389bae34", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -9,7 +9,7 @@ import std::map::{hashmap,set};\n import syntax::{ast, ast_map};\n import driver::session;\n import session::session;\n-import middle::{resolve, ty};\n+import middle::ty;\n import back::{link, abi, upcall};\n import syntax::codemap::span;\n import lib::llvm::{llvm, target_data, type_names, associate_type,\n@@ -87,7 +87,7 @@ type crate_ctxt = {\n      externs: hashmap<~str, ValueRef>,\n      intrinsics: hashmap<~str, ValueRef>,\n      item_vals: hashmap<ast::node_id, ValueRef>,\n-     exp_map: resolve::exp_map,\n+     exp_map: resolve3::ExportMap,\n      reachable: reachable::map,\n      item_symbols: hashmap<ast::node_id, ~str>,\n      mut main_fn: option<ValueRef>,"}, {"sha": "c5d68bfc35762058e55d8795dcd8323a43ddcb31", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -17,12 +17,12 @@ export map, find_reachable;\n \n type map = std::map::hashmap<node_id, ()>;\n \n-type ctx = {exp_map: resolve::exp_map,\n+type ctx = {exp_map: resolve3::ExportMap,\n             tcx: ty::ctxt,\n             method_map: typeck::method_map,\n             rmap: map};\n \n-fn find_reachable(crate_mod: _mod, exp_map: resolve::exp_map,\n+fn find_reachable(crate_mod: _mod, exp_map: resolve3::ExportMap,\n                   tcx: ty::ctxt, method_map: typeck::method_map) -> map {\n     let rmap = std::map::int_hash();\n     let cx = {exp_map: exp_map, tcx: tcx, method_map: method_map, rmap: rmap};"}, {"sha": "b183fef25143b7c25bc108c2490d9a947da8270f", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -224,7 +224,7 @@ type ctxt =\n       vecs_implicitly_copyable: bool,\n       cstore: metadata::cstore::cstore,\n       sess: session::session,\n-      def_map: resolve::def_map,\n+      def_map: resolve3::DefMap,\n \n       region_map: middle::region::region_map,\n       region_paramd_items: middle::region::region_paramd_items,\n@@ -502,7 +502,7 @@ fn new_ty_hash<V: copy>() -> map::hashmap<t, V> {\n }\n \n fn mk_ctxt(s: session::session,\n-           dm: resolve::def_map,\n+           dm: resolve3::DefMap,\n            amap: ast_map::map,\n            freevars: freevars::freevar_map,\n            region_map: middle::region::region_map,"}, {"sha": "f12bec35cfcc061c2d8408b7864a76057da9de15", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -154,7 +154,7 @@ type ty_param_substs_and_ty = {substs: ty::substs, ty: ty::t};\n \n type ty_table = hashmap<ast::def_id, ty::t>;\n \n-type crate_ctxt_ = {impl_map: resolve::impl_map,\n+type crate_ctxt_ = {impl_map: resolve3::ImplMap,\n                     trait_map: resolve3::TraitMap,\n                     method_map: method_map,\n                     vtable_map: vtable_map,\n@@ -291,7 +291,7 @@ fn check_for_main_fn(ccx: @crate_ctxt) {\n }\n \n fn check_crate(tcx: ty::ctxt,\n-               impl_map: resolve::impl_map,\n+               impl_map: resolve3::ImplMap,\n                trait_map: resolve3::TraitMap,\n                crate: @ast::crate)\n             -> (method_map, vtable_map) {"}, {"sha": "b9fd12becb6e375166b5f2600d8966737db4f58f", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -10,7 +10,7 @@ fn has_trait_bounds(tps: ~[ty::param_bounds]) -> bool {\n     })\n }\n \n-fn lookup_vtables(fcx: @fn_ctxt, isc: resolve::iscopes, sp: span,\n+fn lookup_vtables(fcx: @fn_ctxt, isc: resolve3::ImplScopes, sp: span,\n                   bounds: @~[ty::param_bounds], substs: ty::substs,\n                   allow_unsafe: bool) -> vtable_res {\n     let tcx = fcx.ccx.tcx;\n@@ -53,7 +53,7 @@ as if it has type <trait_ty>\n \n XXX: This doesn't use the coherence tables yet.\n */\n-fn lookup_vtable(fcx: @fn_ctxt, isc: resolve::iscopes, sp: span,\n+fn lookup_vtable(fcx: @fn_ctxt, isc: resolve3::ImplScopes, sp: span,\n                  ty: ty::t, trait_ty: ty::t, allow_unsafe: bool)\n     -> vtable_origin {\n "}, {"sha": "406c46cc6c6afb6fd135a186130798afb53261b9", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/beb2cd16589378042e0fc159d885f80fa686c512/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=beb2cd16589378042e0fc159d885f80fa686c512", "patch": "@@ -51,7 +51,6 @@ mod middle {\n         mod reachable;\n     }\n     mod ty;\n-    mod resolve;\n     mod resolve3;\n     mod typeck {\n         mod check {"}]}