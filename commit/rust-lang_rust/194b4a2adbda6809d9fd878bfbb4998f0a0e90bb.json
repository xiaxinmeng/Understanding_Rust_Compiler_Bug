{"sha": "194b4a2adbda6809d9fd878bfbb4998f0a0e90bb", "node_id": "C_kwDOAAsO6NoAKDE5NGI0YTJhZGJkYTY4MDlkOWZkODc4YmZiYjQ5OThmMGEwZTkwYmI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-05T16:37:44Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-12T17:14:17Z"}, "message": "Feed `crate_name` query", "tree": {"sha": "fc28c3cee81ebe563e6ba2938fc262b728aca6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc28c3cee81ebe563e6ba2938fc262b728aca6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb", "html_url": "https://github.com/rust-lang/rust/commit/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "408ae0fcb9d154691470ce8fc644394c20a97405", "url": "https://api.github.com/repos/rust-lang/rust/commits/408ae0fcb9d154691470ce8fc644394c20a97405", "html_url": "https://github.com/rust-lang/rust/commit/408ae0fcb9d154691470ce8fc644394c20a97405"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "82327af65e27343101be868d31dae9b8300f9d99", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=194b4a2adbda6809d9fd878bfbb4998f0a0e90bb", "patch": "@@ -823,7 +823,6 @@ pub fn create_global_ctxt<'tcx>(\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),\n                 queries.as_dyn(),\n                 rustc_query_impl::query_callbacks(arena),\n-                crate_name,\n                 outputs,\n             )\n         })\n@@ -834,6 +833,8 @@ pub fn create_global_ctxt<'tcx>(\n         let feed = tcx.feed_unit_query();\n         feed.resolver_for_lowering(tcx.arena.alloc(Steal::new(untracked_resolver_for_lowering)));\n         feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n+        let feed = tcx.feed_local_crate();\n+        feed.crate_name(crate_name);\n     });\n     qcx\n }"}, {"sha": "0b551b5a48289db8563fb3450b5e647ee28e5d04", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=194b4a2adbda6809d9fd878bfbb4998f0a0e90bb", "patch": "@@ -1673,7 +1673,7 @@ rustc_queries! {\n \n     /// Gets the name of the crate.\n     query crate_name(_: CrateNum) -> Symbol {\n-        eval_always\n+        feedable\n         desc { \"fetching what a crate is named\" }\n         separate_provide_extern\n     }"}, {"sha": "dbf8f4cbf3b4f20ca1fc93f8c663ef1ef529564e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b4a2adbda6809d9fd878bfbb4998f0a0e90bb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=194b4a2adbda6809d9fd878bfbb4998f0a0e90bb", "patch": "@@ -363,6 +363,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn feed_unit_query(self) -> TyCtxtFeed<'tcx, ()> {\n         TyCtxtFeed { tcx: self, key: () }\n     }\n+    pub fn feed_local_crate(self) -> TyCtxtFeed<'tcx, CrateNum> {\n+        TyCtxtFeed { tcx: self, key: LOCAL_CRATE }\n+    }\n }\n \n impl<'tcx, KEY: Copy> TyCtxtFeed<'tcx, KEY> {\n@@ -456,10 +459,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Merge this with `selection_cache`?\n     pub evaluation_cache: traits::EvaluationCache<'tcx>,\n \n-    /// The definite name of the current crate after taking into account\n-    /// attributes, commandline parameters, etc.\n-    crate_name: Symbol,\n-\n     /// Data layout specification for the current target.\n     pub data_layout: TargetDataLayout,\n \n@@ -597,7 +596,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n         query_kinds: &'tcx [DepKindStruct<'tcx>],\n-        crate_name: Symbol,\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = s.target.parse_data_layout().unwrap_or_else(|err| {\n@@ -629,7 +627,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             pred_rcache: Default::default(),\n             selection_cache: Default::default(),\n             evaluation_cache: Default::default(),\n-            crate_name,\n             data_layout,\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             output_filenames: Arc::new(output_filenames),\n@@ -807,7 +804,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // statements within the query system and we'd run into endless\n         // recursion otherwise.\n         let (crate_name, stable_crate_id) = if def_id.is_local() {\n-            (self.crate_name, self.sess.local_stable_crate_id())\n+            (self.crate_name(LOCAL_CRATE), self.sess.local_stable_crate_id())\n         } else {\n             let cstore = &*self.untracked.cstore;\n             (cstore.crate_name(def_id.krate), cstore.stable_crate_id(def_id.krate))\n@@ -2406,10 +2403,6 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n pub fn provide(providers: &mut ty::query::Providers) {\n     providers.module_reexports =\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n-    providers.crate_name = |tcx, id| {\n-        assert_eq!(id, LOCAL_CRATE);\n-        tcx.crate_name\n-    };\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.maybe_unused_extern_crates ="}]}