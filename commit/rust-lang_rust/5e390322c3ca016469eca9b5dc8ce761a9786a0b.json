{"sha": "5e390322c3ca016469eca9b5dc8ce761a9786a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzkwMzIyYzNjYTAxNjQ2OWVjYTliNWRjOGNlNzYxYTk3ODZhMGI=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-07-25T21:19:14Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-07-25T22:08:19Z"}, "message": "Rename infcx lifetimes in inference relations", "tree": {"sha": "919ea8fa641b2672a987c3cc1b306ac1ca158519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919ea8fa641b2672a987c3cc1b306ac1ca158519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e390322c3ca016469eca9b5dc8ce761a9786a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e390322c3ca016469eca9b5dc8ce761a9786a0b", "html_url": "https://github.com/rust-lang/rust/commit/5e390322c3ca016469eca9b5dc8ce761a9786a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e390322c3ca016469eca9b5dc8ce761a9786a0b/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdb0867493fd9b3b42d29ce3bbca75dbe6e278b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb0867493fd9b3b42d29ce3bbca75dbe6e278b9", "html_url": "https://github.com/rust-lang/rust/commit/cdb0867493fd9b3b42d29ce3bbca75dbe6e278b9"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "610e25e0f8a8d830d4a7af087a00e0cd0289f8de", "filename": "src/librustc/infer/bivariate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fbivariate.rs?ref=5e390322c3ca016469eca9b5dc8ce761a9786a0b", "patch": "@@ -32,20 +32,20 @@ use ty::{self, Ty, TyCtxt};\n use ty::TyVar;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n \n-pub struct Bivariate<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    fields: CombineFields<'a, 'gcx, 'tcx>\n+pub struct Bivariate<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>\n }\n \n-impl<'a, 'gcx, 'tcx> Bivariate<'a, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'a, 'gcx, 'tcx>) -> Bivariate<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> Bivariate<'infcx, 'gcx, 'tcx> {\n+    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>) -> Bivariate<'infcx, 'gcx, 'tcx> {\n         Bivariate { fields: fields }\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Bivariate<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Bivariate<'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Bivariate\" }\n \n-    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n "}, {"sha": "36ea228956d4c71e668d48cbbf3bc4e2f0a01231", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=5e390322c3ca016469eca9b5dc8ce761a9786a0b", "patch": "@@ -52,21 +52,21 @@ use syntax::ast;\n use syntax_pos::Span;\n \n #[derive(Clone)]\n-pub struct CombineFields<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    pub infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+pub struct CombineFields<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    pub infcx: &'infcx InferCtxt<'infcx, 'gcx, 'tcx>,\n     pub a_is_expected: bool,\n     pub trace: TypeTrace<'tcx>,\n     pub cause: Option<ty::relate::Cause>,\n     pub obligations: PredicateObligations<'tcx>,\n }\n \n-impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n     pub fn super_combine_tys<R>(&self,\n                                 relation: &mut R,\n                                 a: Ty<'tcx>,\n                                 b: Ty<'tcx>)\n                                 -> RelateResult<'tcx, Ty<'tcx>>\n-        where R: TypeRelation<'a, 'gcx, 'tcx>\n+        where R: TypeRelation<'infcx, 'gcx, 'tcx>\n     {\n         let a_is_expected = relation.a_is_expected();\n \n@@ -150,35 +150,35 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n-    pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n+    pub fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn switch_expected(&self) -> CombineFields<'a, 'gcx, 'tcx> {\n+    pub fn switch_expected(&self) -> CombineFields<'infcx, 'gcx, 'tcx> {\n         CombineFields {\n             a_is_expected: !self.a_is_expected,\n             ..(*self).clone()\n         }\n     }\n \n-    pub fn equate(&self) -> Equate<'a, 'gcx, 'tcx> {\n+    pub fn equate(&self) -> Equate<'infcx, 'gcx, 'tcx> {\n         Equate::new(self.clone())\n     }\n \n-    pub fn bivariate(&self) -> Bivariate<'a, 'gcx, 'tcx> {\n+    pub fn bivariate(&self) -> Bivariate<'infcx, 'gcx, 'tcx> {\n         Bivariate::new(self.clone())\n     }\n \n-    pub fn sub(&self) -> Sub<'a, 'gcx, 'tcx> {\n+    pub fn sub(&self) -> Sub<'infcx, 'gcx, 'tcx> {\n         Sub::new(self.clone())\n     }\n \n-    pub fn lub(&self) -> Lub<'a, 'gcx, 'tcx> {\n+    pub fn lub(&self) -> Lub<'infcx, 'gcx, 'tcx> {\n         Lub::new(self.clone())\n     }\n \n-    pub fn glb(&self) -> Glb<'a, 'gcx, 'tcx> {\n+    pub fn glb(&self) -> Glb<'infcx, 'gcx, 'tcx> {\n         Glb::new(self.clone())\n     }\n "}, {"sha": "f3dc44e8efd083c9e18736347f2eef146e49c0b6", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=5e390322c3ca016469eca9b5dc8ce761a9786a0b", "patch": "@@ -18,12 +18,12 @@ use ty::relate::{Relate, RelateResult, TypeRelation};\n use traits::PredicateObligations;\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n-pub struct Equate<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    fields: CombineFields<'a, 'gcx, 'tcx>\n+pub struct Equate<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>\n }\n \n-impl<'a, 'gcx, 'tcx> Equate<'a, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'a, 'gcx, 'tcx>) -> Equate<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> Equate<'infcx, 'gcx, 'tcx> {\n+    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>) -> Equate<'infcx, 'gcx, 'tcx> {\n         Equate { fields: fields }\n     }\n \n@@ -32,10 +32,10 @@ impl<'a, 'gcx, 'tcx> Equate<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Equate<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Equate<'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Equate\" }\n \n-    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n "}, {"sha": "51386083ab3c2e796e25e80d05ad024be4473dac", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=5e390322c3ca016469eca9b5dc8ce761a9786a0b", "patch": "@@ -18,12 +18,12 @@ use ty::relate::{Relate, RelateResult, TypeRelation};\n use traits::PredicateObligations;\n \n /// \"Greatest lower bound\" (common subtype)\n-pub struct Glb<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    fields: CombineFields<'a, 'gcx, 'tcx>\n+pub struct Glb<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>\n }\n \n-impl<'a, 'gcx, 'tcx> Glb<'a, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'a, 'gcx, 'tcx>) -> Glb<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> Glb<'infcx, 'gcx, 'tcx> {\n+    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>) -> Glb<'infcx, 'gcx, 'tcx> {\n         Glb { fields: fields }\n     }\n \n@@ -32,10 +32,10 @@ impl<'a, 'gcx, 'tcx> Glb<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Glb<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Glb\" }\n \n-    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n@@ -75,8 +75,8 @@ impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Glb<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> LatticeDir<'a, 'gcx, 'tcx> for Glb<'a, 'gcx, 'tcx> {\n-    fn infcx(&self) -> &'a InferCtxt<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx> for Glb<'infcx, 'gcx, 'tcx> {\n+    fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'gcx, 'tcx> {\n         self.fields.infcx\n     }\n "}, {"sha": "bd87c91dea58c13e40720c4bc158731b718a5392", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=5e390322c3ca016469eca9b5dc8ce761a9786a0b", "patch": "@@ -18,12 +18,12 @@ use ty::relate::{Relate, RelateResult, TypeRelation};\n use traits::PredicateObligations;\n \n /// \"Least upper bound\" (common supertype)\n-pub struct Lub<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    fields: CombineFields<'a, 'gcx, 'tcx>\n+pub struct Lub<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>\n }\n \n-impl<'a, 'gcx, 'tcx> Lub<'a, 'gcx, 'tcx> {\n-    pub fn new(fields: CombineFields<'a, 'gcx, 'tcx>) -> Lub<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> Lub<'infcx, 'gcx, 'tcx> {\n+    pub fn new(fields: CombineFields<'infcx, 'gcx, 'tcx>) -> Lub<'infcx, 'gcx, 'tcx> {\n         Lub { fields: fields }\n     }\n \n@@ -32,10 +32,10 @@ impl<'a, 'gcx, 'tcx> Lub<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Lub<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Lub\" }\n \n-    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> { self.fields.tcx() }\n+    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.tcx() }\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n@@ -75,8 +75,8 @@ impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Lub<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> LatticeDir<'a, 'gcx, 'tcx> for Lub<'a, 'gcx, 'tcx> {\n-    fn infcx(&self) -> &'a InferCtxt<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> LatticeDir<'infcx, 'gcx, 'tcx> for Lub<'infcx, 'gcx, 'tcx> {\n+    fn infcx(&self) -> &'infcx InferCtxt<'infcx, 'gcx, 'tcx> {\n         self.fields.infcx\n     }\n "}, {"sha": "404763b3bd30aa6c2efedb055cc4b0c878179aec", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e390322c3ca016469eca9b5dc8ce761a9786a0b/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=5e390322c3ca016469eca9b5dc8ce761a9786a0b", "patch": "@@ -19,12 +19,12 @@ use traits::PredicateObligations;\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n-pub struct Sub<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    fields: CombineFields<'a, 'gcx, 'tcx>,\n+pub struct Sub<'infcx, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n+    fields: CombineFields<'infcx, 'gcx, 'tcx>,\n }\n \n-impl<'a, 'gcx, 'tcx> Sub<'a, 'gcx, 'tcx> {\n-    pub fn new(f: CombineFields<'a, 'gcx, 'tcx>) -> Sub<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> Sub<'infcx, 'gcx, 'tcx> {\n+    pub fn new(f: CombineFields<'infcx, 'gcx, 'tcx>) -> Sub<'infcx, 'gcx, 'tcx> {\n         Sub { fields: f }\n     }\n \n@@ -33,9 +33,9 @@ impl<'a, 'gcx, 'tcx> Sub<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Sub<'a, 'gcx, 'tcx> {\n+impl<'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx> for Sub<'infcx, 'gcx, 'tcx> {\n     fn tag(&self) -> &'static str { \"Sub\" }\n-    fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> { self.fields.infcx.tcx }\n+    fn tcx(&self) -> TyCtxt<'infcx, 'gcx, 'tcx> { self.fields.infcx.tcx }\n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n     fn with_cause<F,R>(&mut self, cause: Cause, f: F) -> R"}]}