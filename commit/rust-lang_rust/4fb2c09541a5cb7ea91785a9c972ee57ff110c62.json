{"sha": "4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYjJjMDk1NDFhNWNiN2VhOTE3ODVhOWM5NzJlZTU3ZmYxMTBjNjI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-20T14:42:44Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-21T11:36:25Z"}, "message": "Avoid pointless allocas for \"nil\" return values\n\nBy using \"void\" instead of \"{}\" as the LLVM type for nil, we can avoid\nthe alloca/store/load sequence for the return value, resulting in less\nand simpler IR code.\n\nThis reduces compile times by about 10%.", "tree": {"sha": "23fa558787b23396089e6791b9c28f0eab02ec1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23fa558787b23396089e6791b9c28f0eab02ec1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "html_url": "https://github.com/rust-lang/rust/commit/4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc262d9aa742adadb92558a588aeaa57267fdee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc262d9aa742adadb92558a588aeaa57267fdee4", "html_url": "https://github.com/rust-lang/rust/commit/dc262d9aa742adadb92558a588aeaa57267fdee4"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "26d2df2e479551f19e184ac0d8eec81e0d1bda95", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "patch": "@@ -1653,7 +1653,9 @@ pub fn new_fn_ctxt_w_id(ccx: @mut CrateContext,\n     fcx.llenv = unsafe {\n           llvm::LLVMGetParam(llfndecl, fcx.env_arg_pos() as c_uint)\n     };\n-    fcx.llretptr = Some(make_return_pointer(fcx, substd_output_type));\n+    if !ty::type_is_nil(substd_output_type) {\n+        fcx.llretptr = Some(make_return_pointer(fcx, substd_output_type));\n+    }\n     fcx\n }\n \n@@ -1808,7 +1810,7 @@ pub fn build_return_block(fcx: fn_ctxt) {\n     let ret_cx = raw_block(fcx, false, fcx.llreturn);\n \n     // Return the value if this function immediate; otherwise, return void.\n-    if fcx.has_immediate_return_value {\n+    if fcx.llretptr.is_some() && fcx.has_immediate_return_value {\n         Ret(ret_cx, Load(ret_cx, fcx.llretptr.get()))\n     } else {\n         RetVoid(ret_cx)\n@@ -2340,8 +2342,7 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n             llvm::LLVMGetParam(llfdecl, env_arg as c_uint)\n         };\n         let args = ~[llenvarg];\n-        let llresult = Call(bcx, main_llfn, args);\n-        Store(bcx, llresult, fcx.llretptr.get());\n+        Call(bcx, main_llfn, args);\n \n         build_return(bcx);\n         finish_fn(fcx, lltop);"}, {"sha": "373980569c343af34fb687894aa8cc11d426fbba", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "patch": "@@ -179,16 +179,18 @@ impl FnType {\n             }\n         }\n \n-        let llretval = load_inbounds(bcx, llargbundle, [ 0, arg_tys.len() ]);\n-        let llretval = if self.ret_ty.cast {\n-            let retptr = BitCast(bcx, llretval, T_ptr(self.ret_ty.ty));\n-            Load(bcx, retptr)\n-        } else {\n-            Load(bcx, llretval)\n-        };\n-        let llretptr = BitCast(bcx,\n-                               bcx.fcx.llretptr.get(),\n-                               T_ptr(self.ret_ty.ty));\n-        Store(bcx, llretval, llretptr);\n+        if bcx.fcx.llretptr.is_some() {\n+            let llretval = load_inbounds(bcx, llargbundle, [ 0, arg_tys.len() ]);\n+            let llretval = if self.ret_ty.cast {\n+                let retptr = BitCast(bcx, llretval, T_ptr(self.ret_ty.ty));\n+                Load(bcx, retptr)\n+            } else {\n+                Load(bcx, llretval)\n+            };\n+            let llretptr = BitCast(bcx,\n+                                   bcx.fcx.llretptr.get(),\n+                                   T_ptr(self.ret_ty.ty));\n+            Store(bcx, llretval, llretptr);\n+        }\n     }\n }"}, {"sha": "da7c0d5272da8851c4bb94b37a1212ae9b1e51f6", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "patch": "@@ -60,6 +60,11 @@ impl ABIInfo for X86_ABIInfo {\n                 cast: false,\n                 ty: T_void(),\n             };\n+        } else if !ret_def {\n+            ret_ty = LLVMType {\n+                cast: false,\n+                ty: T_void()\n+            };\n         }\n \n         return FnType {"}, {"sha": "a8ff0bf54faf896af431ca348fd5ec7fc1a022f8", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "patch": "@@ -297,7 +297,10 @@ pub fn build_closure(bcx0: block,\n         // the right thing):\n         let ret_true = match bcx.fcx.loop_ret {\n             Some((_, retptr)) => retptr,\n-            None => bcx.fcx.llretptr.get()\n+            None => match bcx.fcx.llretptr {\n+                None => C_null(T_ptr(T_nil())),\n+                Some(retptr) => retptr,\n+            }\n         };\n         let ret_casted = PointerCast(bcx, ret_true, T_ptr(T_nil()));\n         let ret_datum = Datum {val: ret_casted, ty: ty::mk_nil(),"}, {"sha": "55436e5946ef5629bd930350c507b730d275ca9c", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "patch": "@@ -298,24 +298,27 @@ pub fn trans_cont(bcx: block, label_opt: Option<ident>) -> block {\n pub fn trans_ret(bcx: block, e: Option<@ast::expr>) -> block {\n     let _icx = bcx.insn_ctxt(\"trans_ret\");\n     let mut bcx = bcx;\n-    let retptr = match copy bcx.fcx.loop_ret {\n+    let dest = match copy bcx.fcx.loop_ret {\n       Some((flagptr, retptr)) => {\n         // This is a loop body return. Must set continue flag (our retptr)\n         // to false, return flag to true, and then store the value in the\n         // parent's retptr.\n         Store(bcx, C_bool(true), flagptr);\n         Store(bcx, C_bool(false), bcx.fcx.llretptr.get());\n-        match e {\n+        expr::SaveIn(match e {\n           Some(x) => PointerCast(bcx, retptr,\n                                  T_ptr(type_of(bcx.ccx(), expr_ty(bcx, x)))),\n           None => retptr\n-        }\n+        })\n+      }\n+      None => match bcx.fcx.llretptr {\n+        None => expr::Ignore,\n+        Some(retptr) => expr::SaveIn(retptr),\n       }\n-      None => bcx.fcx.llretptr.get()\n     };\n     match e {\n       Some(x) => {\n-        bcx = expr::trans_into(bcx, x, expr::SaveIn(retptr));\n+        bcx = expr::trans_into(bcx, x, dest);\n       }\n       _ => ()\n     }"}, {"sha": "9516a8b83ab3580d80fd877f462d8e2cd287dc6a", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "patch": "@@ -127,7 +127,7 @@ fn shim_types(ccx: @mut CrateContext, id: ast::node_id) -> ShimTypes {\n         llsig: llsig,\n         ret_def: ret_def,\n         bundle_ty: bundle_ty,\n-        shim_fn_ty: T_fn([T_ptr(bundle_ty)], T_nil()),\n+        shim_fn_ty: T_fn([T_ptr(bundle_ty)], T_void()),\n         fn_ty: fn_ty\n     }\n }\n@@ -170,7 +170,7 @@ fn build_shim_fn_(ccx: @mut CrateContext,\n     tie_up_header_blocks(fcx, lltop);\n \n     let ret_cx = raw_block(fcx, false, fcx.llreturn);\n-    Ret(ret_cx, C_null(T_nil()));\n+    RetVoid(ret_cx);\n \n     return llshimfn;\n }\n@@ -530,17 +530,21 @@ pub fn trans_foreign_mod(ccx: @mut CrateContext,\n \n                 store_inbounds(bcx, llargval, llargbundle, [0u, i]);\n             }\n-            let llretptr = bcx.fcx.llretptr.get();\n-            store_inbounds(bcx, llretptr, llargbundle, [0u, n]);\n+\n+            for bcx.fcx.llretptr.iter().advance |&retptr| {\n+                store_inbounds(bcx, retptr, llargbundle, [0u, n]);\n+            }\n         }\n \n         fn build_ret(bcx: block,\n                      shim_types: &ShimTypes,\n                      llargbundle: ValueRef) {\n             let _icx = bcx.insn_ctxt(\"foreign::wrap::build_ret\");\n             let arg_count = shim_types.fn_sig.inputs.len();\n-            let llretptr = load_inbounds(bcx, llargbundle, [0, arg_count]);\n-            Store(bcx, Load(bcx, llretptr), bcx.fcx.llretptr.get());\n+            for bcx.fcx.llretptr.iter().advance |&retptr| {\n+                let llretptr = load_inbounds(bcx, llargbundle, [0, arg_count]);\n+                Store(bcx, Load(bcx, llretptr), retptr);\n+            }\n             build_return(bcx);\n         }\n     }\n@@ -1294,7 +1298,7 @@ pub fn trans_foreign_fn(ccx: @mut CrateContext,\n                      shim_types: &ShimTypes,\n                      llargbundle: ValueRef,\n                      llretval: ValueRef) {\n-            if ty::type_is_immediate(shim_types.fn_sig.output) {\n+            if bcx.fcx.llretptr.is_some() && ty::type_is_immediate(shim_types.fn_sig.output) {\n                 // Write the value into the argument bundle.\n                 let arg_count = shim_types.fn_sig.inputs.len();\n                 let llretptr = load_inbounds(bcx,"}, {"sha": "058a6b9f48ef42a9ba23063b28560aa8445fced1", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb2c09541a5cb7ea91785a9c972ee57ff110c62/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=4fb2c09541a5cb7ea91785a9c972ee57ff110c62", "patch": "@@ -55,7 +55,7 @@ pub fn type_of_fn(cx: &mut CrateContext, inputs: &[ty::t], output: ty::t)\n         atys.push_all(type_of_explicit_args(cx, inputs));\n \n         // Use the output as the actual return value if it's immediate.\n-        if output_is_immediate {\n+        if output_is_immediate && !ty::type_is_nil(output) {\n             T_fn(atys, lloutputtype)\n         } else {\n             T_fn(atys, llvm::LLVMVoidTypeInContext(cx.llcx))\n@@ -352,7 +352,7 @@ pub fn llvm_type_name(cx: &CrateContext,\n }\n \n pub fn type_of_dtor(ccx: &mut CrateContext, self_ty: ty::t) -> TypeRef {\n-    T_fn([T_ptr(type_of(ccx, self_ty))] /* self */, T_nil())\n+    T_fn([T_ptr(type_of(ccx, self_ty))] /* self */, T_void())\n }\n \n pub fn type_of_rooted(ccx: &mut CrateContext, t: ty::t) -> TypeRef {\n@@ -364,5 +364,5 @@ pub fn type_of_rooted(ccx: &mut CrateContext, t: ty::t) -> TypeRef {\n \n pub fn type_of_glue_fn(ccx: &CrateContext) -> TypeRef {\n     let tydescpp = T_ptr(T_ptr(ccx.tydesc_type));\n-    return T_fn([T_ptr(T_nil()), tydescpp, T_ptr(T_i8())], T_nil());\n+    return T_fn([T_ptr(T_nil()), tydescpp, T_ptr(T_i8())], T_void());\n }"}]}