{"sha": "82a09b9a04cb72088e2ec0bd66810445efba5c2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYTA5YjlhMDRjYjcyMDg4ZTJlYzBiZDY2ODEwNDQ1ZWZiYTVjMmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T20:55:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:02:01Z"}, "message": "librustc: Remove `@mut` support from the parser", "tree": {"sha": "65c6cfdf535419182323133e8e524f177046e18d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c6cfdf535419182323133e8e524f177046e18d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82a09b9a04cb72088e2ec0bd66810445efba5c2e", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82a09b9a04cb72088e2ec0bd66810445efba5c2e", "html_url": "https://github.com/rust-lang/rust/commit/82a09b9a04cb72088e2ec0bd66810445efba5c2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82a09b9a04cb72088e2ec0bd66810445efba5c2e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88281290ffdf79d1c3700935a3116fb1a22f458f", "url": "https://api.github.com/repos/rust-lang/rust/commits/88281290ffdf79d1c3700935a3116fb1a22f458f", "html_url": "https://github.com/rust-lang/rust/commit/88281290ffdf79d1c3700935a3116fb1a22f458f"}], "stats": {"total": 133, "additions": 52, "deletions": 81}, "files": [{"sha": "fa0be72b83036570afa3fd0fe9d6f674588475b5", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -189,9 +189,8 @@ impl Visitor<()> for Context {\n \n     fn visit_expr(&mut self, e: @ast::Expr, _: ()) {\n         match e.node {\n-            ast::ExprUnary(_, ast::UnBox(..), _) |\n-            ast::ExprVstore(_, ast::ExprVstoreBox) |\n-            ast::ExprVstore(_, ast::ExprVstoreMutBox) => {\n+            ast::ExprUnary(_, ast::UnBox, _) |\n+            ast::ExprVstore(_, ast::ExprVstoreBox) => {\n                 self.gate_box(e.span);\n             }\n             _ => {}"}, {"sha": "c56a268c48fd318f43bb83090a1367c8604776ab", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -116,7 +116,7 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n     if is_const {\n         match e.node {\n           ExprUnary(_, UnDeref, _) => { }\n-          ExprUnary(_, UnBox(_), _) | ExprUnary(_, UnUniq, _) => {\n+          ExprUnary(_, UnBox, _) | ExprUnary(_, UnUniq, _) => {\n             sess.span_err(e.span,\n                           \"cannot do allocations in constant expressions\");\n             return;\n@@ -197,8 +197,7 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n                      immutable values\");\n           },\n           ExprVstore(_, ExprVstoreUniq) |\n-          ExprVstore(_, ExprVstoreBox) |\n-          ExprVstore(_, ExprVstoreMutBox) => {\n+          ExprVstore(_, ExprVstoreBox) => {\n               sess.span_err(e.span, \"cannot allocate vectors in constant expressions\")\n           },\n "}, {"sha": "20db51861d670b7f977020999f953a67502cb4fb", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -239,7 +239,6 @@ impl ConstEvalVisitor {\n                     ast::ExprVstoreSlice => self.classify(e),\n                     ast::ExprVstoreUniq |\n                     ast::ExprVstoreBox |\n-                    ast::ExprVstoreMutBox |\n                     ast::ExprVstoreMutSlice => non_const\n                 }\n             }"}, {"sha": "49e57306c1216eda24f64cca2e9c96e3d333f774", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -306,7 +306,7 @@ pub fn check_expr(cx: &mut Context, e: @Expr) {\n     }\n \n     match e.node {\n-        ExprUnary(_, UnBox(_), interior) => {\n+        ExprUnary(_, UnBox, interior) => {\n             let interior_type = ty::expr_ty(cx.tcx, interior);\n             let _ = check_durable(cx.tcx, interior_type, interior.span);\n         }"}, {"sha": "078932806247154d513eb636103f3d7a0009390f", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -1068,7 +1068,7 @@ fn check_unnecessary_allocation(cx: &Context, e: &ast::Expr) {\n             }\n         }\n         ast::ExprUnary(_, ast::UnUniq, _) |\n-        ast::ExprUnary(_, ast::UnBox(..), _) => BoxAllocation,\n+        ast::ExprUnary(_, ast::UnBox, _) => BoxAllocation,\n \n         _ => return\n     };"}, {"sha": "9c3a7f4f671c8d2132ca7e5bbed706587a147a23", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -377,9 +377,7 @@ fn const_expr_unadjusted(cx: @CrateContext,\n             let ty = ty::expr_ty(cx.tcx, e);\n             let is_float = ty::type_is_fp(ty);\n             return (match u {\n-              ast::UnBox(_)  |\n-              ast::UnUniq |\n-              ast::UnDeref  => {\n+              ast::UnBox | ast::UnUniq | ast::UnDeref => {\n                 let (dv, _dt) = const_deref(cx, te, ty, true);\n                 dv\n               }"}, {"sha": "640f9339a7d12cac173c6e8969b6c78485ed183a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -590,8 +590,7 @@ fn trans_rvalue_datum_unadjusted(bcx: @Block, expr: &ast::Expr) -> DatumBlock {\n         ast::ExprPath(_) | ast::ExprSelf => {\n             return trans_def_datum_unadjusted(bcx, expr, bcx.def(expr.id));\n         }\n-        ast::ExprVstore(contents, ast::ExprVstoreBox) |\n-        ast::ExprVstore(contents, ast::ExprVstoreMutBox) => {\n+        ast::ExprVstore(contents, ast::ExprVstoreBox) => {\n             return tvec::trans_uniq_or_managed_vstore(bcx, heap_managed,\n                                                       expr, contents);\n         }\n@@ -1406,9 +1405,8 @@ fn trans_unary_datum(bcx: @Block,\n             };\n             immediate_rvalue_bcx(bcx, llneg, un_ty)\n         }\n-        ast::UnBox(_) => {\n-            trans_boxed_expr(bcx, un_ty, sub_expr, sub_ty,\n-                             heap_managed)\n+        ast::UnBox => {\n+            trans_boxed_expr(bcx, un_ty, sub_expr, sub_ty, heap_managed)\n         }\n         ast::UnUniq => {\n             let heap  = heap_for_unique(bcx, un_ty);"}, {"sha": "3ae29eade7778a69aa14bc870fc7f27a8c1ceae0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -3257,7 +3257,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::ExprAddrOf(..) |\n         ast::ExprBinary(..) |\n         ast::ExprVstore(_, ast::ExprVstoreBox) |\n-        ast::ExprVstore(_, ast::ExprVstoreMutBox) |\n         ast::ExprVstore(_, ast::ExprVstoreUniq) => {\n             RvalueDatumExpr\n         }"}, {"sha": "746389c604429b3e324a8fdf620640e812f2ef5c", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -401,8 +401,8 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n     let typ = match ast_ty.node {\n       ast::ty_nil => ty::mk_nil(),\n       ast::ty_bot => ty::mk_bot(),\n-      ast::ty_box(ref mt) => {\n-        let mt = ast::mt { ty: mt.ty, mutbl: ast::MutImmutable };\n+      ast::ty_box(ty) => {\n+        let mt = ast::mt { ty: ty, mutbl: ast::MutImmutable };\n         mk_pointer(this, rscope, &mt, ty::vstore_box,\n                    |tmt| ty::mk_box(tcx, tmt.ty))\n       }"}, {"sha": "088104e84ef4184cbe88c9e30249edb2c313aa4f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -2628,15 +2628,12 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n           }\n           ast::ExprVec(ref args, mutbl) => {\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n-            let mutability;\n             let mut any_error = false;\n             let mut any_bot = false;\n-            match vst {\n-                ast::ExprVstoreMutBox | ast::ExprVstoreMutSlice => {\n-                    mutability = ast::MutMutable\n-                }\n-                _ => mutability = mutbl\n-            }\n+            let mutability = match vst {\n+                ast::ExprVstoreMutSlice => ast::MutMutable,\n+                _ => mutbl,\n+            };\n             let t: ty::t = fcx.infcx().next_ty_var();\n             for e in args.iter() {\n                 check_expr_has_type(fcx, *e, t);\n@@ -2650,11 +2647,9 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n             }\n             if any_error {\n                 ty::mk_err()\n-            }\n-            else if any_bot {\n+            } else if any_bot {\n                 ty::mk_bot()\n-            }\n-            else {\n+            } else {\n                 ty::mk_evec(tcx, ty::mt {ty: t, mutbl: mutability}, tt)\n             }\n           }\n@@ -2663,10 +2658,8 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n             let _ = ty::eval_repeat_count(fcx, count_expr);\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             let mutability = match vst {\n-                ast::ExprVstoreMutBox | ast::ExprVstoreMutSlice => {\n-                    ast::MutMutable\n-                }\n-                _ => mutbl\n+                ast::ExprVstoreMutSlice => ast::MutMutable,\n+                _ => mutbl,\n             };\n             let t: ty::t = fcx.infcx().next_ty_var();\n             check_expr_has_type(fcx, element, t);\n@@ -2741,7 +2734,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n       ast::ExprUnary(callee_id, unop, oprnd) => {\n         let exp_inner = unpack_expected(fcx, expected, |sty| {\n             match unop {\n-              ast::UnBox(_) | ast::UnUniq => match *sty {\n+              ast::UnBox | ast::UnUniq => match *sty {\n                 ty::ty_box(ty) => Some(ty),\n                 ty::ty_uniq(ref mt) => Some(mt.ty),\n                 _ => None\n@@ -2755,7 +2748,7 @@ pub fn check_expr_with_unifier(fcx: @FnCtxt,\n         if !ty::type_is_error(oprnd_t) &&\n               !ty::type_is_bot(oprnd_t) {\n             match unop {\n-                ast::UnBox(_) => {\n+                ast::UnBox => {\n                     oprnd_t = ty::mk_box(tcx, oprnd_t)\n                 }\n                 ast::UnUniq => {\n@@ -3920,7 +3913,7 @@ pub fn ast_expr_vstore_to_vstore(fcx: @FnCtxt,\n                               -> ty::vstore {\n     match v {\n         ast::ExprVstoreUniq => ty::vstore_uniq,\n-        ast::ExprVstoreBox | ast::ExprVstoreMutBox => ty::vstore_box,\n+        ast::ExprVstoreBox => ty::vstore_box,\n         ast::ExprVstoreSlice | ast::ExprVstoreMutSlice => {\n             let r = fcx.infcx().next_region_var(infer::AddrOfSlice(e.span));\n             ty::vstore_slice(r)"}, {"sha": "52dbba13ea8f5f6437f1eb0b3bb59487413d4586", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -594,7 +594,7 @@ pub enum Type {\n     /// aka ty_bot\n     Bottom,\n     Unique(~Type),\n-    Managed(Mutability, ~Type),\n+    Managed(~Type),\n     RawPointer(Mutability, ~Type),\n     BorrowedRef { lifetime: Option<Lifetime>, mutability: Mutability, type_: ~Type},\n     // region, raw, other boxes, mutable\n@@ -620,7 +620,7 @@ impl Clean<Type> for ast::Ty {\n             ty_rptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(), mutability: m.mutbl.clean(),\n                              type_: ~m.ty.clean()},\n-            ty_box(ref m) => Managed(m.mutbl.clean(), ~m.ty.clean()),\n+            ty_box(ty) => Managed(~ty.clean()),\n             ty_uniq(ty) => Unique(~ty.clean()),\n             ty_vec(ty) => Vector(~ty.clean()),\n             ty_fixed_length_vec(ty, ref e) => FixedVector(~ty.clean(),"}, {"sha": "b32ca03726103046e12939947969c25c13493961", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -340,13 +340,7 @@ impl fmt::Default for clean::Type {\n             clean::Unit => f.buf.write(\"()\".as_bytes()),\n             clean::Bottom => f.buf.write(\"!\".as_bytes()),\n             clean::Unique(ref t) => write!(f.buf, \"~{}\", **t),\n-            clean::Managed(m, ref t) => {\n-                write!(f.buf, \"@{}{}\",\n-                       match m {\n-                           clean::Mutable => \"mut \",\n-                           clean::Immutable => \"\",\n-                       }, **t)\n-            }\n+            clean::Managed(ref t) => write!(f.buf, \"@{}\", **t),\n             clean::RawPointer(m, ref t) => {\n                 write!(f.buf, \"*{}{}\",\n                        match m {"}, {"sha": "3523d63ef60dec88b3eb76f86390a4587391cc8f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -415,7 +415,6 @@ pub enum Vstore {\n pub enum ExprVstore {\n     ExprVstoreUniq,                 // ~[1,2,3,4]\n     ExprVstoreBox,                  // @[1,2,3,4]\n-    ExprVstoreMutBox,               // @mut [1,2,3,4]\n     ExprVstoreSlice,                // &[1,2,3,4]\n     ExprVstoreMutSlice,             // &mut [1,2,3,4]\n }\n@@ -444,7 +443,7 @@ pub enum BinOp {\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum UnOp {\n-    UnBox(Mutability),\n+    UnBox,\n     UnUniq,\n     UnDeref,\n     UnNot,\n@@ -875,7 +874,7 @@ pub struct TyBareFn {\n pub enum ty_ {\n     ty_nil,\n     ty_bot, /* bottom type */\n-    ty_box(mt),\n+    ty_box(P<Ty>),\n     ty_uniq(P<Ty>),\n     ty_vec(P<Ty>),\n     ty_fixed_length_vec(P<Ty>, @Expr),"}, {"sha": "f99fed517b18c58d1e37921038de8a49fb8ae3d8", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -137,13 +137,13 @@ pub fn is_shift_binop(b: BinOp) -> bool {\n     }\n }\n \n-pub fn unop_to_str(op: UnOp) -> ~str {\n+pub fn unop_to_str(op: UnOp) -> &'static str {\n     match op {\n-      UnBox(mt) => if mt == MutMutable { ~\"@mut \" } else { ~\"@\" },\n-      UnUniq => ~\"~\",\n-      UnDeref => ~\"*\",\n-      UnNot => ~\"!\",\n-      UnNeg => ~\"-\"\n+      UnBox => \"@\",\n+      UnUniq => \"~\",\n+      UnDeref => \"*\",\n+      UnNot => \"!\",\n+      UnNeg => \"-\",\n     }\n }\n "}, {"sha": "481472e8f0b1246a8da1cc3d17b75f0ddf202d37", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -54,7 +54,7 @@ pub trait AstBuilder {\n                lifetime: Option<ast::Lifetime>,\n                mutbl: ast::Mutability) -> P<ast::Ty>;\n     fn ty_uniq(&self, span: Span, ty: P<ast::Ty>) -> P<ast::Ty>;\n-    fn ty_box(&self, span: Span, ty: P<ast::Ty>, mutbl: ast::Mutability) -> P<ast::Ty>;\n+    fn ty_box(&self, span: Span, ty: P<ast::Ty>) -> P<ast::Ty>;\n \n     fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty>;\n     fn ty_infer(&self, sp: Span) -> P<ast::Ty>;\n@@ -311,12 +311,13 @@ impl AstBuilder for ExtCtxt {\n         self.ty(span,\n                 ast::ty_rptr(lifetime, self.ty_mt(ty, mutbl)))\n     }\n+\n     fn ty_uniq(&self, span: Span, ty: P<ast::Ty>) -> P<ast::Ty> {\n         self.ty(span, ast::ty_uniq(ty))\n     }\n-    fn ty_box(&self, span: Span,\n-                 ty: P<ast::Ty>, mutbl: ast::Mutability) -> P<ast::Ty> {\n-        self.ty(span, ast::ty_box(self.ty_mt(ty, mutbl)))\n+\n+    fn ty_box(&self, span: Span, ty: P<ast::Ty>) -> P<ast::Ty> {\n+        self.ty(span, ast::ty_box(ty))\n     }\n \n     fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty> {\n@@ -494,7 +495,7 @@ impl AstBuilder for ExtCtxt {\n     }\n \n     fn expr_managed(&self, sp: Span, e: @ast::Expr) -> @ast::Expr {\n-        self.expr_unary(sp, ast::UnBox(ast::MutImmutable), e)\n+        self.expr_unary(sp, ast::UnBox, e)\n     }\n \n     fn expr_field_access(&self, sp: Span, expr: @ast::Expr, ident: ast::Ident) -> @ast::Expr {"}, {"sha": "89bed626c1ed4d61e375ce5db5c238f591814beb", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -24,7 +24,7 @@ use opt_vec::OptVec;\n /// The types of pointers\n pub enum PtrTy<'a> {\n     Send, // ~\n-    Managed(ast::Mutability), // @[mut]\n+    Managed, // @\n     Borrowed(Option<&'a str>, ast::Mutability), // &['lifetime] [mut]\n }\n \n@@ -138,8 +138,8 @@ impl<'a> Ty<'a> {\n                     Send => {\n                         cx.ty_uniq(span, raw_ty)\n                     }\n-                    Managed(mutbl) => {\n-                        cx.ty_box(span, raw_ty, mutbl)\n+                    Managed => {\n+                        cx.ty_box(span, raw_ty)\n                     }\n                     Borrowed(ref lt, mutbl) => {\n                         let lt = mk_lifetime(cx, span, lt);\n@@ -251,7 +251,7 @@ pub fn get_explicit_self(cx: &ExtCtxt, span: Span, self_ptr: &Option<PtrTy>)\n                 span,\n                 match *ptr {\n                     Send => ast::sty_uniq(ast::MutImmutable),\n-                    Managed(mutbl) => ast::sty_box(mutbl),\n+                    Managed => ast::sty_box(ast::MutImmutable),\n                     Borrowed(ref lt, mutbl) => {\n                         let lt = lt.map(|s| cx.lifetime(span, cx.ident_of(s)));\n                         ast::sty_region(lt, mutbl)"}, {"sha": "dea30d181da2b742380b915b2c830a22643dccdf", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -238,7 +238,7 @@ pub trait ast_fold {\n     fn fold_ty(&mut self, t: P<Ty>) -> P<Ty> {\n         let node = match t.node {\n             ty_nil | ty_bot | ty_infer => t.node.clone(),\n-            ty_box(ref mt) => ty_box(fold_mt(mt, self)),\n+            ty_box(ty) => ty_box(self.fold_ty(ty)),\n             ty_uniq(ty) => ty_uniq(self.fold_ty(ty)),\n             ty_vec(ty) => ty_vec(self.fold_ty(ty)),\n             ty_ptr(ref mt) => ty_ptr(fold_mt(mt, self)),"}, {"sha": "40a2ef86e4fb96306f512b90ee7ca322225dea33", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -29,8 +29,7 @@ use ast::{ExprField, ExprFnBlock, ExprIf, ExprIndex};\n use ast::{ExprLit, ExprLogLevel, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc, ExprRepeat};\n use ast::{ExprRet, ExprSelf, ExprStruct, ExprTup, ExprUnary};\n-use ast::{ExprVec, ExprVstore, ExprVstoreMutBox};\n-use ast::{ExprVstoreSlice, ExprVstoreBox};\n+use ast::{ExprVec, ExprVstore, ExprVstoreSlice, ExprVstoreBox};\n use ast::{ExprVstoreMutSlice, ExprWhile, ExprForLoop, extern_fn, Field, fn_decl};\n use ast::{ExprVstoreUniq, Onceness, Once, Many};\n use ast::{foreign_item, foreign_item_static, foreign_item_fn, foreign_mod};\n@@ -1300,7 +1299,7 @@ impl Parser {\n         if sigil == OwnedSigil {\n             ty_uniq(self.parse_ty(false))\n         } else {\n-            ty_box(self.parse_mt())\n+            ty_box(self.parse_ty(false))\n         }\n     }\n \n@@ -2300,17 +2299,14 @@ impl Parser {\n           }\n           token::AT => {\n             self.bump();\n-            let m = self.parse_mutability();\n             let e = self.parse_prefix_expr();\n             hi = e.span.hi;\n             // HACK: turn @[...] into a @-evec\n             ex = match e.node {\n-              ExprVec(..) | ExprRepeat(..) if m == MutMutable =>\n-                ExprVstore(e, ExprVstoreMutBox),\n               ExprVec(..) |\n               ExprLit(@codemap::Spanned { node: lit_str(..), span: _}) |\n-              ExprRepeat(..) if m == MutImmutable => ExprVstore(e, ExprVstoreBox),\n-              _ => self.mk_unary(UnBox(m), e)\n+              ExprRepeat(..) => ExprVstore(e, ExprVstoreBox),\n+              _ => self.mk_unary(UnBox, e)\n             };\n           }\n           token::TILDE => {"}, {"sha": "15dfacc41f122aae6d407ff3a4cad4f948e3d4c2", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -422,7 +422,7 @@ pub fn print_type(s: &mut ps, ty: &ast::Ty) {\n     match ty.node {\n       ast::ty_nil => word(&mut s.s, \"()\"),\n       ast::ty_bot => word(&mut s.s, \"!\"),\n-      ast::ty_box(ref mt) => { word(&mut s.s, \"@\"); print_mt(s, mt); }\n+      ast::ty_box(ty) => { word(&mut s.s, \"@\"); print_type(s, ty); }\n       ast::ty_uniq(ty) => { word(&mut s.s, \"~\"); print_type(s, ty); }\n       ast::ty_vec(ty) => {\n         word(&mut s.s, \"[\");\n@@ -1083,10 +1083,6 @@ pub fn print_expr_vstore(s: &mut ps, t: ast::ExprVstore) {\n     match t {\n       ast::ExprVstoreUniq => word(&mut s.s, \"~\"),\n       ast::ExprVstoreBox => word(&mut s.s, \"@\"),\n-      ast::ExprVstoreMutBox => {\n-        word(&mut s.s, \"@\");\n-        word(&mut s.s, \"mut\");\n-      }\n       ast::ExprVstoreSlice => word(&mut s.s, \"&\"),\n       ast::ExprVstoreMutSlice => {\n         word(&mut s.s, \"&\");"}, {"sha": "29567ab94421388f021bc38b574063966a3daf55", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a09b9a04cb72088e2ec0bd66810445efba5c2e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=82a09b9a04cb72088e2ec0bd66810445efba5c2e", "patch": "@@ -302,10 +302,10 @@ pub fn skip_ty<E, V:Visitor<E>>(_: &mut V, _: &Ty, _: E) {\n \n pub fn walk_ty<E:Clone, V:Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n     match typ.node {\n-        ty_uniq(ty) | ty_vec(ty) => {\n+        ty_uniq(ty) | ty_vec(ty) | ty_box(ty) => {\n             visitor.visit_ty(ty, env)\n         }\n-        ty_box(ref mutable_type) | ty_ptr(ref mutable_type) => {\n+        ty_ptr(ref mutable_type) => {\n             visitor.visit_ty(mutable_type.ty, env)\n         }\n         ty_rptr(ref lifetime, ref mutable_type) => {"}]}