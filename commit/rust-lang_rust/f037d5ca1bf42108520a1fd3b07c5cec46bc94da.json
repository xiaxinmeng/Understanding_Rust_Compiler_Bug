{"sha": "f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMzdkNWNhMWJmNDIxMDg1MjBhMWZkM2IwN2M1Y2VjNDZiYzk0ZGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-18T07:22:19Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-28T19:37:58Z"}, "message": "Add more context to E0599 errors\n\nPoint at the intermediary unfullfilled trait bounds.", "tree": {"sha": "fc41848ba2c8e5ff0ad08f77e41bc226cbfc1362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc41848ba2c8e5ff0ad08f77e41bc226cbfc1362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "html_url": "https://github.com/rust-lang/rust/commit/f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaa02f599f651246d5d1b99e7a4c6fa8d04bc9dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa02f599f651246d5d1b99e7a4c6fa8d04bc9dc", "html_url": "https://github.com/rust-lang/rust/commit/eaa02f599f651246d5d1b99e7a4c6fa8d04bc9dc"}], "stats": {"total": 259, "additions": 203, "deletions": 56}, "files": [{"sha": "5c0caa48d0e7784d53354e6b4fed78734fc318a3", "filename": "src/librustc_infer/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnote.rs?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -645,8 +645,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     self.tcx.sess,\n                     span,\n                     E0491,\n-                    \"in type `{}`, reference has a longer lifetime \\\n-                                                than the data it references\",\n+                    \"in type `{}`, reference has a longer lifetime than the data it references\",\n                     self.ty_to_string(ty)\n                 );\n                 note_and_explain_region("}, {"sha": "0d6f8e9b7e6831e4f9f65f2ec776b44c68512835", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1404,15 +1404,40 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             // `potentially_unsatisfied_predicates`.\n                             return ProbeResult::NoMatch;\n                         } else {\n-                            // Some nested subobligation of this predicate\n-                            // failed.\n-                            //\n-                            // FIXME: try to find the exact nested subobligation\n-                            // and point at it rather than reporting the entire\n-                            // trait-ref?\n-                            result = ProbeResult::NoMatch;\n-                            let trait_ref = self.resolve_vars_if_possible(&trait_ref);\n-                            possibly_unsatisfied_predicates.push(trait_ref);\n+                            self.probe(|_| {\n+                                match self.select_trait_candidate(trait_ref) {\n+                                    Ok(Some(traits::VtableImpl(traits::VtableImplData {\n+                                        nested,\n+                                        ..\n+                                    }))) if !nested.is_empty() => {\n+                                        for obligation in nested {\n+                                            // Determine exactly which obligation wasn't met, so\n+                                            // that we can give more context in the error.\n+                                            if !self.predicate_may_hold(&obligation) {\n+                                                result = ProbeResult::NoMatch;\n+                                                if let Some(poly_trait_ref) =\n+                                                    obligation.predicate.to_opt_poly_trait_ref()\n+                                                {\n+                                                    let trait_ref = poly_trait_ref.clone();\n+                                                    let trait_ref = trait_ref.skip_binder();\n+                                                    possibly_unsatisfied_predicates\n+                                                        .push(*trait_ref);\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                    _ => {}\n+                                }\n+                                // Some nested subobligation of this predicate\n+                                // failed.\n+                                //\n+                                // FIXME: try to find the exact nested subobligation\n+                                // and point at it rather than reporting the entire\n+                                // trait-ref?\n+                                result = ProbeResult::NoMatch;\n+                                let trait_ref = self.resolve_vars_if_possible(&trait_ref);\n+                                possibly_unsatisfied_predicates.push(trait_ref);\n+                            });\n                         }\n                     }\n                     vec![]"}, {"sha": "bd87626b438d0e6ae1c976d7112e4540d64bfa82", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -394,6 +394,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     tcx.sess.diagnostic().struct_dummy()\n                 };\n \n+                // FIXME: Unify with unmet bound label.\n                 if let Some(def) = actual.ty_adt_def() {\n                     if let Some(full_sp) = tcx.hir().span_if_local(def.did) {\n                         let def_sp = tcx.sess.source_map().def_span(full_sp);\n@@ -535,16 +536,54 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 if !unsatisfied_predicates.is_empty() {\n+                    let mut bound_spans = vec![];\n                     let mut bound_list = unsatisfied_predicates\n                         .iter()\n-                        .map(|p| format!(\"`{} : {}`\", p.self_ty(), p.print_only_trait_path()))\n+                        .map(|p| {\n+                            let self_ty = p.self_ty();\n+                            match &self_ty.kind {\n+                                ty::Adt(def, _) => bound_spans.push((\n+                                    self.tcx.sess.source_map().def_span(self.tcx.def_span(def.did)),\n+                                    format!(\n+                                        \"this type doesn't satisfy the bound `{}`\",\n+                                        p.print_only_trait_path()\n+                                    ),\n+                                )),\n+                                ty::Dynamic(preds, _) => {\n+                                    for pred in *preds.skip_binder() {\n+                                        match pred {\n+                                            ty::ExistentialPredicate::Trait(tr) => bound_spans\n+                                                .push((\n+                                                    self.tcx\n+                                                        .sess\n+                                                        .source_map()\n+                                                        .def_span(self.tcx.def_span(tr.def_id)),\n+                                                    format!(\n+                                                        \"this trait doesn't satisfy the bound `{}`\",\n+                                                        p.print_only_trait_path()\n+                                                    ),\n+                                                )),\n+                                            ty::ExistentialPredicate::Projection(_)\n+                                            | ty::ExistentialPredicate::AutoTrait(_) => {}\n+                                        }\n+                                    }\n+                                }\n+                                _ => {}\n+                            };\n+                            format!(\"`{}: {}`\", p.self_ty(), p.print_only_trait_path())\n+                        })\n                         .collect::<Vec<_>>();\n                     bound_list.sort();\n                     bound_list.dedup(); // #35677\n+                    bound_spans.sort();\n+                    bound_spans.dedup(); // #35677\n+                    for (span, msg) in bound_spans.into_iter() {\n+                        err.span_label(span, &msg);\n+                    }\n                     let bound_list = bound_list.join(\"\\n\");\n                     err.note(&format!(\n-                        \"the method `{}` exists but the following trait bounds \\\n-                                       were not satisfied:\\n{}\",\n+                        \"the method `{}` exists but the following trait bounds were not \\\n+                         satisfied:\\n{}\",\n                         item_name, bound_list\n                     ));\n                 }"}, {"sha": "8836de0023c9d5370527f918b42cebcb27bc7d35", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -8,8 +8,8 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |                   ^^^^^^^^^ associated item not found in `Foo<A, B>`\n    |\n    = note: the method `HOST_SIZE` exists but the following trait bounds were not satisfied:\n-           `A : std::marker::Sized`\n-           `B : std::marker::Sized`\n+           `A: std::marker::Sized`\n+           `B: std::marker::Sized`\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/too_generic_eval_ice.rs:7:13"}, {"sha": "2746d8b7a14e19e1e62670e5d46c0742eef3e218", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -2,13 +2,20 @@ error[E0599]: no method named `clone` found for struct `Bar<NotClone>` in the cu\n   --> $DIR/derive-assoc-type-not-impl.rs:18:30\n    |\n LL | struct Bar<T: Foo> {\n-   | ------------------ method `clone` not found for this\n+   | ------------------\n+   | |\n+   | method `clone` not found for this\n+   | this type doesn't satisfy the bound `std::clone::Clone`\n+...\n+LL | struct NotClone;\n+   | ---------------- this type doesn't satisfy the bound `std::clone::Clone`\n ...\n LL |     Bar::<NotClone> { x: 1 }.clone();\n    |                              ^^^^^ method not found in `Bar<NotClone>`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `Bar<NotClone> : std::clone::Clone`\n+           `Bar<NotClone>: std::clone::Clone`\n+           `NotClone: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "d98302552cad411a7baed6b7d0a65276c0719a23", "filename": "src/test/ui/issues/issue-21596.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -7,7 +7,8 @@ LL |     println!(\"{}\", z.to_string());\n    = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\n    = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior\n    = note: the method `to_string` exists but the following trait bounds were not satisfied:\n-           `*const u8 : std::string::ToString`\n+           `*const u8: std::fmt::Display`\n+           `*const u8: std::string::ToString`\n \n error: aborting due to previous error\n "}, {"sha": "25be266c5289332cd74c311a2340060efc8c1bf9", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n use std::vec::IntoIter;\n \n pub fn get_tok(it: &mut IntoIter<u8>) {"}, {"sha": "77cb7fb0426e509b480a07b93e696a5b8208e390", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,21 +1,26 @@\n-error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]> as std::iter::Iterator>::Item == &_`\n-  --> $DIR/issue-31173.rs:10:10\n+error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item == &_`\n+  --> $DIR/issue-31173.rs:14:10\n    |\n LL |         .cloned()\n    |          ^^^^^^ expected `u8`, found reference\n    |\n    = note:   expected type `u8`\n            found reference `&_`\n \n-error[E0599]: no method named `collect` found for struct `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>` in the current scope\n-  --> $DIR/issue-31173.rs:14:10\n+error[E0599]: no method named `collect` found for struct `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>` in the current scope\n+  --> $DIR/issue-31173.rs:18:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method not found in `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>`\n+   |          ^^^^^^^ method not found in `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>`\n+   | \n+  ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n+   |\n+LL | pub struct Cloned<I> {\n+   | -------------------- this type doesn't satisfy the bound `std::iter::Iterator`\n    |\n    = note: the method `collect` exists but the following trait bounds were not satisfied:\n-           `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>> : std::iter::Iterator`\n-           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>> : std::iter::Iterator`\n+           `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+           `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "978221e502f80b11d5bb6c7ef7dc1d8fbf0a186e", "filename": "src/test/ui/issues/issue-35677.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -5,8 +5,8 @@ LL |     this.is_subset(other)\n    |          ^^^^^^^^^ method not found in `&std::collections::HashSet<T>`\n    |\n    = note: the method `is_subset` exists but the following trait bounds were not satisfied:\n-           `T : std::cmp::Eq`\n-           `T : std::hash::Hash`\n+           `T: std::cmp::Eq`\n+           `T: std::hash::Hash`\n \n error: aborting due to previous error\n "}, {"sha": "c6d9a8415dd6c4e7e9b053009fb07e5b65d26a43", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -5,7 +5,7 @@ LL |     let _result = &Some(42).as_deref();\n    |                             ^^^^^^^^ help: there is a method with a similar name: `as_ref`\n    |\n    = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n+           `{integer}: std::ops::Deref`\n \n error: aborting due to previous error\n "}, {"sha": "ae51052a22c3a48ff829b9c841b24dd54139a0ba", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -5,7 +5,7 @@ LL |     let _result = &mut Some(42).as_deref_mut();\n    |                                 ^^^^^^^^^^^^ method not found in `std::option::Option<{integer}>`\n    |\n    = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::DerefMut`\n+           `{integer}: std::ops::DerefMut`\n \n error: aborting due to previous error\n "}, {"sha": "3f7904a852165a40a952f79399ca2b660515e3dc", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -5,7 +5,7 @@ LL |     let _result = &Ok(42).as_deref();\n    |                           ^^^^^^^^ help: there is a method with a similar name: `as_ref`\n    |\n    = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n+           `{integer}: std::ops::Deref`\n \n error: aborting due to previous error\n "}, {"sha": "eb591b419ea82bb4957d2c6669e4a0da4f0efc42", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_err.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -5,7 +5,7 @@ LL |     let _result = &Err(41).as_deref_err();\n    |                            ^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut`\n    |\n    = note: the method `as_deref_err` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::Deref`\n+           `{integer}: std::ops::Deref`\n \n error: aborting due to previous error\n "}, {"sha": "115518dcf6760d0cfee515d8065c166fb6afae72", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -5,7 +5,7 @@ LL |     let _result = &mut Ok(42).as_deref_mut();\n    |                               ^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_err`\n    |\n    = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::DerefMut`\n+           `{integer}: std::ops::DerefMut`\n \n error: aborting due to previous error\n "}, {"sha": "49f4a16d8ae97b5a8e4277673946e495d8a613dc", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut_err.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -5,7 +5,7 @@ LL |     let _result = &mut Err(41).as_deref_mut_err();\n    |                                ^^^^^^^^^^^^^^^^ help: there is a method with a similar name: `as_deref_mut`\n    |\n    = note: the method `as_deref_mut_err` exists but the following trait bounds were not satisfied:\n-           `{integer} : std::ops::DerefMut`\n+           `{integer}: std::ops::DerefMut`\n \n error: aborting due to previous error\n "}, {"sha": "0c48e93347d850d4846301b3bdae55648711dc8a", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -35,13 +35,17 @@ error[E0599]: no method named `take` found for struct `Foo` in the current scope\n   --> $DIR/method-call-err-msg.rs:19:7\n    |\n LL | pub struct Foo;\n-   | --------------- method `take` not found for this\n+   | ---------------\n+   | |\n+   | method `take` not found for this\n+   | this type doesn't satisfy the bound `std::iter::Iterator`\n ...\n LL |      .take()\n    |       ^^^^ method not found in `Foo`\n    |\n    = note: the method `take` exists but the following trait bounds were not satisfied:\n-           `&mut Foo : std::iter::Iterator`\n+           `&mut Foo: std::iter::Iterator`\n+           `Foo: std::iter::Iterator`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following traits define an item `take`, perhaps you need to implement one of them:\n            candidate #1: `std::io::Read`"}, {"sha": "36211b4ce701d18082d0fb032feacda9856c2b7a", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n // Regression test for #36053. ICE was caused due to obligations\n // being added to a special, dedicated fulfillment cx during\n // a probe."}, {"sha": "2b8b2d82ec23cab47f2fba2c9f5ff4e926eac549", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,15 +1,21 @@\n-error[E0599]: no method named `count` found for struct `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` in the current scope\n-  --> $DIR/issue-36053-2.rs:7:55\n+error[E0599]: no method named `count` found for struct `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>` in the current scope\n+  --> $DIR/issue-36053-2.rs:11:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                                       ^^^^^ method not found in `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`\n+   |                                                       ^^^^^ method not found in `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>`\n+   | \n+  ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n+   |\n+LL | pub struct Filter<I, P> {\n+   | ----------------------- this type doesn't satisfy the bound `std::iter::Iterator`\n    |\n    = note: the method `count` exists but the following trait bounds were not satisfied:\n-           `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]> : std::iter::Iterator`\n-           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]> : std::iter::Iterator`\n+           `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+           `[closure@$DIR/issue-36053-2.rs:11:39: 11:53]: std::ops::FnMut<(&_,)>`\n+           `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-36053-2.rs:7:32\n+  --> $DIR/issue-36053-2.rs:11:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`"}, {"sha": "a7681f9af5b22db00288f6c20ae4d08744ffc2a6", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,11 +1,14 @@\n error[E0599]: no method named `unwrap` found for enum `std::result::Result<(), Foo>` in the current scope\n   --> $DIR/method-help-unsatisfied-bound.rs:5:7\n    |\n+LL | struct Foo;\n+   | ----------- this type doesn't satisfy the bound `std::fmt::Debug`\n+...\n LL |     a.unwrap();\n    |       ^^^^^^ method not found in `std::result::Result<(), Foo>`\n    |\n    = note: the method `unwrap` exists but the following trait bounds were not satisfied:\n-           `Foo : std::fmt::Debug`\n+           `Foo: std::fmt::Debug`\n \n error: aborting due to previous error\n "}, {"sha": "2d0caf1dd875599410d460f17b13cd103773dec7", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -2,13 +2,16 @@ error[E0599]: no method named `foo_one` found for struct `MyStruct` in the curre\n   --> $DIR/specialization-trait-not-implemented.rs:22:29\n    |\n LL | struct MyStruct;\n-   | ---------------- method `foo_one` not found for this\n+   | ----------------\n+   | |\n+   | method `foo_one` not found for this\n+   | this type doesn't satisfy the bound `Foo`\n ...\n LL |     println!(\"{}\", MyStruct.foo_one());\n    |                             ^^^^^^^ method not found in `MyStruct`\n    |\n    = note: the method `foo_one` exists but the following trait bounds were not satisfied:\n-           `MyStruct : Foo`\n+           `MyStruct: Foo`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `foo_one`, perhaps you need to implement it:\n            candidate #1: `Foo`"}, {"sha": "49a37498fd95522f413ca6f43e26f8cf87488409", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n use std::env::args;\n use std::fs::File;\n use std::io::{stdout, Write, BufWriter};"}, {"sha": "5de7295f4f4fa53b8e3dfab08980183f39f22293", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:29\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:29\n    |\n LL |     let fp = BufWriter::new(fp);\n    |                             ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -8,7 +8,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter::<W>::new`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -17,7 +17,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -26,13 +26,19 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter`\n \n error[E0599]: no method named `write_fmt` found for struct `std::io::BufWriter<&dyn std::io::Write>` in the current scope\n-  --> $DIR/mut-borrow-needed-by-trait.rs:22:5\n+  --> $DIR/mut-borrow-needed-by-trait.rs:26:5\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::io::BufWriter<&dyn std::io::Write>`\n+   | \n+  ::: $SRC_DIR/libstd/io/buffered.rs:LL:COL\n+   |\n+LL | pub struct BufWriter<W: Write> {\n+   | ------------------------------ this type doesn't satisfy the bound `std::io::Write`\n    |\n    = note: the method `write_fmt` exists but the following trait bounds were not satisfied:\n-           `std::io::BufWriter<&dyn std::io::Write> : std::io::Write`\n+           `&dyn std::io::Write: std::io::Write`\n+           `std::io::BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "289b680a46ea14300a3c7946b22b384cb9b31be6", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -11,13 +11,20 @@ error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the c\n   --> $DIR/union-derive-clone.rs:37:15\n    |\n LL | union U5<T> {\n-   | ----------- method `clone` not found for this\n+   | -----------\n+   | |\n+   | method `clone` not found for this\n+   | this type doesn't satisfy the bound `std::clone::Clone`\n+...\n+LL | struct CloneNoCopy;\n+   | ------------------- this type doesn't satisfy the bound `std::marker::Copy`\n ...\n LL |     let w = u.clone();\n    |               ^^^^^ method not found in `U5<CloneNoCopy>`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `U5<CloneNoCopy> : std::clone::Clone`\n+           `CloneNoCopy: std::marker::Copy`\n+           `U5<CloneNoCopy>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "bedaf27c2dddfc2325a521eb3c5a2416885139bd", "filename": "src/test/ui/unique-object-noncopyable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.rs?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "192558f6b09237a76990373d094a5fbbc09f7c57", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,11 +1,24 @@\n error[E0599]: no method named `clone` found for struct `std::boxed::Box<dyn Foo>` in the current scope\n-  --> $DIR/unique-object-noncopyable.rs:24:16\n+  --> $DIR/unique-object-noncopyable.rs:28:16\n    |\n+LL | trait Foo {\n+   | ---------\n+   | |\n+   | this trait doesn't satisfy the bound `std::clone::Clone`\n+   | this trait doesn't satisfy the bound `std::marker::Sized`\n+...\n LL |     let _z = y.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<dyn Foo>`\n+   | \n+  ::: $SRC_DIR/liballoc/boxed.rs:LL:COL\n+   |\n+LL | pub struct Box<T: ?Sized>(Unique<T>);\n+   | ------------------------------------- this type doesn't satisfy the bound `std::clone::Clone`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `std::boxed::Box<dyn Foo> : std::clone::Clone`\n+           `dyn Foo: std::clone::Clone`\n+           `dyn Foo: std::marker::Sized`\n+           `std::boxed::Box<dyn Foo>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "091b8a4386235647d9ea2f9911c1e02826a52e3f", "filename": "src/test/ui/unique-pinned-nocopy.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,3 +1,7 @@\n+// FIXME: missing sysroot spans (#53081)\n+// ignore-i586-unknown-linux-gnu\n+// ignore-i586-unknown-linux-musl\n+// ignore-i686-unknown-linux-musl\n #[derive(Debug)]\n struct R {\n   b: bool,"}, {"sha": "7c1bef072184bb30e565f03c0a8dc6d33af19fe9", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f037d5ca1bf42108520a1fd3b07c5cec46bc94da/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "patch": "@@ -1,11 +1,20 @@\n error[E0599]: no method named `clone` found for struct `std::boxed::Box<R>` in the current scope\n-  --> $DIR/unique-pinned-nocopy.rs:12:16\n+  --> $DIR/unique-pinned-nocopy.rs:16:16\n    |\n+LL | struct R {\n+   | -------- this type doesn't satisfy the bound `std::clone::Clone`\n+...\n LL |     let _j = i.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<R>`\n+   | \n+  ::: $SRC_DIR/liballoc/boxed.rs:LL:COL\n+   |\n+LL | pub struct Box<T: ?Sized>(Unique<T>);\n+   | ------------------------------------- this type doesn't satisfy the bound `std::clone::Clone`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `std::boxed::Box<R> : std::clone::Clone`\n+           `R: std::clone::Clone`\n+           `std::boxed::Box<R>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}]}