{"sha": "aaad8a209a239fdd9bb9d018768ecce66d83d1f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYWQ4YTIwOWEyMzlmZGQ5YmI5ZDAxODc2OGVjY2U2NmQ4M2QxZjU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-20T11:18:03Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-20T11:18:03Z"}, "message": "`mir::dataflow::sanity_check`: Factor out `fn is_rustc_peek` helper routine.", "tree": {"sha": "ffb460cf289df8a61b19ba0bfd912e2a354bb85f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb460cf289df8a61b19ba0bfd912e2a354bb85f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaad8a209a239fdd9bb9d018768ecce66d83d1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaad8a209a239fdd9bb9d018768ecce66d83d1f5", "html_url": "https://github.com/rust-lang/rust/commit/aaad8a209a239fdd9bb9d018768ecce66d83d1f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaad8a209a239fdd9bb9d018768ecce66d83d1f5/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "582f060a17d4b4a4e007db25548d01670bbdc496", "url": "https://api.github.com/repos/rust-lang/rust/commits/582f060a17d4b4a4e007db25548d01670bbdc496", "html_url": "https://github.com/rust-lang/rust/commit/582f060a17d4b4a4e007db25548d01670bbdc496"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "7c8a9a4aeb0f4cf52e9578a40486226c91efb219", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/sanity_check.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/aaad8a209a239fdd9bb9d018768ecce66d83d1f5/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaad8a209a239fdd9bb9d018768ecce66d83d1f5/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fsanity_check.rs?ref=aaad8a209a239fdd9bb9d018768ecce66d83d1f5", "patch": "@@ -10,6 +10,7 @@\n \n use syntax::abi::{Abi};\n use syntax::ast;\n+use syntax::codemap::Span;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::mir::repr::{self, Mir};\n@@ -58,34 +59,9 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     ref terminator,\n                                     is_cleanup: _ } = bb_data;\n \n-        let (args, span) = if let Some(repr::Terminator { ref kind, span, .. }) = *terminator {\n-            if let repr::TerminatorKind::Call { func: ref oper, ref args, .. } = *kind\n-            {\n-                if let repr::Operand::Constant(ref func) = *oper\n-                {\n-                    if let ty::TyFnDef(def_id, _, &ty::BareFnTy { abi, .. }) = func.ty.sty\n-                    {\n-                        let name = tcx.item_name(def_id);\n-                        if abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n-                            if name.as_str() == \"rustc_peek\" {\n-                                (args, span)\n-                            } else {\n-                                continue;\n-                            }\n-                        } else {\n-                            continue;\n-                        }\n-                    } else {\n-                        continue;\n-                    }\n-                } else {\n-                    continue;\n-                }\n-            } else {\n-                continue;\n-            }\n-        } else {\n-            continue;\n+        let (args, span) = match is_rustc_peek(tcx, terminator) {\n+            Some(args_and_span) => args_and_span,\n+            None => continue,\n         };\n         assert!(args.len() == 1);\n         let peek_arg_lval = match args[0] {\n@@ -162,4 +138,28 @@ pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                           rustc_peek expects input of \\\n                                           form `&expr`\"));\n     }\n+\n+}\n+\n+fn is_rustc_peek<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                           terminator: &'a Option<repr::Terminator<'tcx>>)\n+                           -> Option<(&'a [repr::Operand<'tcx>], Span)> {\n+    if let Some(repr::Terminator { ref kind, span, .. }) = *terminator {\n+        if let repr::TerminatorKind::Call { func: ref oper, ref args, .. } = *kind\n+        {\n+            if let repr::Operand::Constant(ref func) = *oper\n+            {\n+                if let ty::TyFnDef(def_id, _, &ty::BareFnTy { abi, .. }) = func.ty.sty\n+                {\n+                    let name = tcx.item_name(def_id);\n+                    if abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n+                        if name.as_str() == \"rustc_peek\" {\n+                            return Some((args, span));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return None;\n }"}]}