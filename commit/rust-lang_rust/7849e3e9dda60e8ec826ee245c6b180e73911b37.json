{"sha": "7849e3e9dda60e8ec826ee245c6b180e73911b37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NDllM2U5ZGRhNjBlOGVjODI2ZWUyNDVjNmIxODBlNzM5MTFiMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T21:40:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T21:40:34Z"}, "message": "Auto merge of #88435 - cjgillot:no-walk-crate, r=Aaron1011\n\nAvoid invoking the hir_crate query to traverse the HIR\n\nWalking the HIR tree is done using the `hir_crate` query. However, this is unnecessary, since `hir_owner(CRATE_DEF_ID)` provides the same information. Since depending on `hir_crate` forces dependents to always be executed, this leads to unnecessary work.\n\nBy splitting HIR and attributes visits, we can avoid an edge to `hir_crate` when trying to visit the HIR tree.", "tree": {"sha": "d10bb20b5a49755a917bc020cc1a55ccc6203ff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d10bb20b5a49755a917bc020cc1a55ccc6203ff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7849e3e9dda60e8ec826ee245c6b180e73911b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7849e3e9dda60e8ec826ee245c6b180e73911b37", "html_url": "https://github.com/rust-lang/rust/commit/7849e3e9dda60e8ec826ee245c6b180e73911b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7849e3e9dda60e8ec826ee245c6b180e73911b37/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e30b68353fe22b00f40d021e7914eeb78473b3c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e30b68353fe22b00f40d021e7914eeb78473b3c1", "html_url": "https://github.com/rust-lang/rust/commit/e30b68353fe22b00f40d021e7914eeb78473b3c1"}, {"sha": "d119a131374b973f0a1ae9d723c3a9ad518b8049", "url": "https://api.github.com/repos/rust-lang/rust/commits/d119a131374b973f0a1ae9d723c3a9ad518b8049", "html_url": "https://github.com/rust-lang/rust/commit/d119a131374b973f0a1ae9d723c3a9ad518b8049"}], "stats": {"total": 251, "additions": 118, "deletions": 133}, "files": [{"sha": "2dd49eba4427a8bd00305c8f7633fe3814c69ab7", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -32,7 +32,6 @@\n //! example generator inference, and possibly also HIR borrowck.\n \n use crate::hir::*;\n-use crate::hir_id::CRATE_HIR_ID;\n use crate::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use rustc_ast::walk_list;\n use rustc_ast::{Attribute, Label};\n@@ -477,17 +476,6 @@ pub trait Visitor<'v>: Sized {\n     }\n }\n \n-/// Walks the contents of a crate. See also `Crate::visit_all_items`.\n-pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n-    let top_mod = krate.module();\n-    visitor.visit_mod(top_mod, top_mod.inner, CRATE_HIR_ID);\n-    for (&id, attrs) in krate.attrs.iter() {\n-        for a in *attrs {\n-            visitor.visit_attribute(id, a)\n-        }\n-    }\n-}\n-\n pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod<'v>, mod_hir_id: HirId) {\n     visitor.visit_id(mod_hir_id);\n     for &item_id in module.item_ids {"}, {"sha": "c190391d2118098e18bbd0df6b5450f75ae10f7e", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -142,7 +142,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n         krate.visit_all_item_likes(&mut dirty_clean_visitor);\n \n         let mut all_attrs = FindAllAttrs { tcx, found_attrs: vec![] };\n-        intravisit::walk_crate(&mut all_attrs, krate);\n+        tcx.hir().walk_attributes(&mut all_attrs);\n \n         // Note that we cannot use the existing \"unused attribute\"-infrastructure\n         // here, since that is running before codegen. This is also the reason why"}, {"sha": "1d542db9b69c3eef068d2f40b1707f3038a0f5d9", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -464,10 +464,6 @@ pub fn lower_to_hir<'res, 'tcx>(\n         arena,\n     );\n \n-    if sess.opts.debugging_opts.hir_stats {\n-        hir_stats::print_hir_stats(&hir_crate);\n-    }\n-\n     sess.time(\"early_lint_checks\", || {\n         rustc_lint::check_ast_crate(\n             sess,"}, {"sha": "2070fd69d3f8eb7f59e75683e735b5ea2a774aba", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -451,9 +451,8 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         lint_callback!(cx, check_crate, krate);\n-\n-        hir_visit::walk_crate(cx, krate);\n-\n+        tcx.hir().walk_toplevel_module(cx);\n+        tcx.hir().walk_attributes(cx);\n         lint_callback!(cx, check_crate_post, krate);\n     })\n }"}, {"sha": "66966e589e48a5e234d7f80e0d00fea78671e2c5", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -37,7 +37,7 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n \n     let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), &store, true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n-    intravisit::walk_crate(&mut builder, krate);\n+    tcx.hir().walk_toplevel_module(&mut builder);\n     builder.levels.pop(push);\n \n     builder.levels.build_map()"}, {"sha": "e0b6039fe348f4bd0e24ed5581000ee9dec978b9", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -7,9 +7,9 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n-use rustc_hir::intravisit;\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n use rustc_index::vec::Idx;\n@@ -519,6 +519,22 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n+    pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {\n+        let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);\n+        visitor.visit_mod(top_mod, span, hir_id);\n+    }\n+\n+    /// Walks the attributes in a crate.\n+    pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {\n+        let krate = self.krate();\n+        for (&id, attrs) in krate.attrs.iter() {\n+            for a in *attrs {\n+                visitor.visit_attribute(id, a)\n+            }\n+        }\n+    }\n+\n     pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)\n     where\n         V: ItemLikeVisitor<'hir>,\n@@ -934,7 +950,8 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx IndexedHir<'tc\n         &tcx.untracked_resolutions.definitions,\n         hcx,\n     );\n-    intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n+    let top_mod = tcx.untracked_crate.module();\n+    collector.visit_mod(top_mod, top_mod.inner, CRATE_HIR_ID);\n \n     let map = collector.finalize_and_compute_crate_hash();\n     tcx.arena.alloc(map)"}, {"sha": "25ad00aaf1f753caa8f98f37224d898d5e1528ee", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -775,5 +775,5 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx, live_symbols };\n-    intravisit::walk_crate(&mut visitor, krate);\n+    tcx.hir().walk_toplevel_module(&mut visitor);\n }"}, {"sha": "18f61c6e1c1a787df5b6733e881d0db950c4f3f2", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -11,6 +11,10 @@ use rustc_middle::ty::TyCtxt;\n pub fn check_crate(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.assert_ignored();\n \n+    if tcx.sess.opts.debugging_opts.hir_stats {\n+        crate::hir_stats::print_hir_stats(tcx);\n+    }\n+\n     let errors = Lock::new(Vec::new());\n     let hir_map = tcx.hir();\n "}, {"sha": "d665c12f762c5baa49a0fb6974c847191d196f34", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -9,6 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::HirId;\n use rustc_middle::hir::map::Map;\n+use rustc_middle::ty::TyCtxt;\n use rustc_middle::util::common::to_readable_str;\n use rustc_span::Span;\n \n@@ -25,18 +26,19 @@ struct NodeData {\n }\n \n struct StatCollector<'k> {\n-    krate: Option<&'k hir::Crate<'k>>,\n+    krate: Option<Map<'k>>,\n     data: FxHashMap<&'static str, NodeData>,\n     seen: FxHashSet<Id>,\n }\n \n-pub fn print_hir_stats(krate: &hir::Crate<'_>) {\n+pub fn print_hir_stats(tcx: TyCtxt<'_>) {\n     let mut collector = StatCollector {\n-        krate: Some(krate),\n+        krate: Some(tcx.hir()),\n         data: FxHashMap::default(),\n         seen: FxHashSet::default(),\n     };\n-    hir_visit::walk_crate(&mut collector, krate);\n+    tcx.hir().walk_toplevel_module(&mut collector);\n+    tcx.hir().walk_attributes(&mut collector);\n     collector.print(\"HIR STATS\");\n }\n "}, {"sha": "ff8bd37238d6bc7db187fb58509da637e6919df1", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -6,7 +6,7 @@\n \n use rustc_ast::{Attribute, MetaItem, MetaItemKind};\n use rustc_errors::struct_span_err;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::lib_features::LibFeatures;\n use rustc_middle::ty::query::Providers;\n@@ -126,9 +126,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n \n fn get_lib_features(tcx: TyCtxt<'_>, (): ()) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n-    let krate = tcx.hir().krate();\n-\n-    intravisit::walk_crate(&mut collector, krate);\n+    tcx.hir().walk_attributes(&mut collector);\n     collector.lib_features\n }\n "}, {"sha": "b7e43b7785da602a170632beddb3ad53f0083155", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::map::Map;\n@@ -678,7 +679,6 @@ fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n         .collect();\n \n     {\n-        let krate = tcx.hir().krate();\n         let mut annotator = Annotator {\n             tcx,\n             index: &mut index,\n@@ -711,13 +711,13 @@ fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n \n         annotator.annotate(\n             CRATE_DEF_ID,\n-            krate.module().inner,\n+            tcx.hir().span(CRATE_HIR_ID),\n             None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n             InheritStability::No,\n-            |v| intravisit::walk_crate(v, krate),\n+            |v| tcx.hir().walk_toplevel_module(v),\n         );\n     }\n     index\n@@ -908,8 +908,8 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n-        missing.check_missing_stability(CRATE_DEF_ID, krate.module().inner);\n-        intravisit::walk_crate(&mut missing, krate);\n+        missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n+        tcx.hir().walk_toplevel_module(&mut missing);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }\n "}, {"sha": "35e25e52dc5f9f1e2fc12b492055eff4eeb9dbd3", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -2169,7 +2169,7 @@ fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {\n         changed: false,\n     };\n     loop {\n-        intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n+        tcx.hir().walk_toplevel_module(&mut visitor);\n         if visitor.changed {\n             visitor.changed = false;\n         } else {\n@@ -2192,11 +2192,11 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n         in_variant: false,\n         old_error_set: Default::default(),\n     };\n-    intravisit::walk_crate(&mut visitor, krate);\n+    tcx.hir().walk_toplevel_module(&mut visitor);\n \n     let has_pub_restricted = {\n         let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };\n-        intravisit::walk_crate(&mut pub_restricted_visitor, krate);\n+        tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);\n         pub_restricted_visitor.has_pub_restricted\n     };\n "}, {"sha": "08ed9ec73c87570147544a84ea217de9e448f281", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -1122,7 +1122,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n             },\n         );\n-        intravisit::walk_crate(self, krate);\n+        self.tcx.hir().walk_toplevel_module(self);\n     }\n \n     fn process_bounds(&mut self, bounds: hir::GenericBounds<'tcx>) {"}, {"sha": "c60d82d0cabc579e819b76f6cbac2049b53f818e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 34, "deletions": 67, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -6,8 +6,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc_hir::intravisit;\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1011,9 +1010,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         candidates: Vec<DefId>,\n     ) {\n         let module_did = self.tcx.parent_module(self.body_id);\n-        let module_id = self.tcx.hir().local_def_id_to_hir_id(module_did);\n-        let krate = self.tcx.hir().krate();\n-        let (span, found_use) = UsePlacementFinder::check(self.tcx, krate, module_id);\n+        let (span, found_use) = find_use_placement(self.tcx, module_did);\n         if let Some(span) = span {\n             let path_strings = candidates.iter().map(|did| {\n                 // Produce an additional newline to separate the new use statement\n@@ -1606,64 +1603,38 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     providers.all_traits = compute_all_traits;\n }\n \n-struct UsePlacementFinder<'tcx> {\n-    target_module: hir::HirId,\n-    span: Option<Span>,\n-    found_use: bool,\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl UsePlacementFinder<'tcx> {\n-    fn check(\n-        tcx: TyCtxt<'tcx>,\n-        krate: &'tcx hir::Crate<'tcx>,\n-        target_module: hir::HirId,\n-    ) -> (Option<Span>, bool) {\n-        let mut finder = UsePlacementFinder { target_module, span: None, found_use: false, tcx };\n-        intravisit::walk_crate(&mut finder, krate);\n-        (finder.span, finder.found_use)\n-    }\n-}\n-\n-impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n-    fn visit_mod(&mut self, module: &'tcx hir::Mod<'tcx>, _: Span, hir_id: hir::HirId) {\n-        if self.span.is_some() {\n-            return;\n-        }\n-        if hir_id != self.target_module {\n-            intravisit::walk_mod(self, module, hir_id);\n-            return;\n-        }\n-        // Find a `use` statement.\n-        for &item_id in module.item_ids {\n-            let item = self.tcx.hir().item(item_id);\n-            match item.kind {\n-                hir::ItemKind::Use(..) => {\n-                    // Don't suggest placing a `use` before the prelude\n-                    // import or other generated ones.\n-                    if !item.span.from_expansion() {\n-                        self.span = Some(item.span.shrink_to_lo());\n-                        self.found_use = true;\n-                        return;\n-                    }\n+fn find_use_placement<'tcx>(tcx: TyCtxt<'tcx>, target_module: LocalDefId) -> (Option<Span>, bool) {\n+    let mut span = None;\n+    let mut found_use = false;\n+    let (module, _, _) = tcx.hir().get_module(target_module);\n+\n+    // Find a `use` statement.\n+    for &item_id in module.item_ids {\n+        let item = tcx.hir().item(item_id);\n+        match item.kind {\n+            hir::ItemKind::Use(..) => {\n+                // Don't suggest placing a `use` before the prelude\n+                // import or other generated ones.\n+                if !item.span.from_expansion() {\n+                    span = Some(item.span.shrink_to_lo());\n+                    found_use = true;\n+                    break;\n                 }\n-                // Don't place `use` before `extern crate`...\n-                hir::ItemKind::ExternCrate(_) => {}\n-                // ...but do place them before the first other item.\n-                _ => {\n-                    if self.span.map_or(true, |span| item.span < span) {\n-                        if !item.span.from_expansion() {\n-                            self.span = Some(item.span.shrink_to_lo());\n-                            // Don't insert between attributes and an item.\n-                            let attrs = self.tcx.hir().attrs(item.hir_id());\n-                            // Find the first attribute on the item.\n-                            // FIXME: This is broken for active attributes.\n-                            for attr in attrs {\n-                                if !attr.span.is_dummy()\n-                                    && self.span.map_or(true, |span| attr.span < span)\n-                                {\n-                                    self.span = Some(attr.span.shrink_to_lo());\n-                                }\n+            }\n+            // Don't place `use` before `extern crate`...\n+            hir::ItemKind::ExternCrate(_) => {}\n+            // ...but do place them before the first other item.\n+            _ => {\n+                if span.map_or(true, |span| item.span < span) {\n+                    if !item.span.from_expansion() {\n+                        span = Some(item.span.shrink_to_lo());\n+                        // Don't insert between attributes and an item.\n+                        let attrs = tcx.hir().attrs(item.hir_id());\n+                        // Find the first attribute on the item.\n+                        // FIXME: This is broken for active attributes.\n+                        for attr in attrs {\n+                            if !attr.span.is_dummy() && span.map_or(true, |span| attr.span < span) {\n+                                span = Some(attr.span.shrink_to_lo());\n                             }\n                         }\n                     }\n@@ -1672,11 +1643,7 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n+    (span, found_use)\n }\n \n fn print_disambiguation_help("}, {"sha": "7f9afaae0eaa2675f8273aaf32af2ee7e9c5a53b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -691,7 +691,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     debug!(\"find_opaque_ty_constraints: scope={:?}\", scope);\n \n     if scope == hir::CRATE_HIR_ID {\n-        intravisit::walk_crate(&mut locator, tcx.hir().krate());\n+        tcx.hir().walk_toplevel_module(&mut locator);\n     } else {\n         debug!(\"find_opaque_ty_constraints: scope={:?}\", tcx.hir().get(scope));\n         match tcx.hir().get(scope) {"}, {"sha": "e6097f5cad7f30688168a3107bec371e08891826", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -116,7 +116,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n             let mut global_ctxt = queries.global_ctxt()?.take();\n \n             let collector = global_ctxt.enter(|tcx| {\n-                let krate = tcx.hir().krate();\n                 let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n \n                 let mut opts = scrape_test_config(crate_attrs);\n@@ -144,10 +143,8 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 hir_collector.visit_testable(\n                     \"\".to_string(),\n                     CRATE_HIR_ID,\n-                    krate.module().inner,\n-                    |this| {\n-                        intravisit::walk_crate(this, krate);\n-                    },\n+                    tcx.hir().span(CRATE_HIR_ID),\n+                    |this| tcx.hir().walk_toplevel_module(this),\n                 );\n \n                 collector"}, {"sha": "54476d9c9a459f19b34179f57caa25512baf5159", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -45,7 +45,7 @@ crate fn collect_spans_and_sources(\n \n     if include_sources {\n         if generate_link_to_definition {\n-            intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n+            tcx.hir().walk_toplevel_module(&mut visitor);\n         }\n         let (krate, sources) = sources::collect_local_sources(tcx, src_root, krate);\n         (krate, sources, visitor.matches)"}, {"sha": "46b128c08fef959a989826852a1d1c3bcb700124", "filename": "src/test/ui/coherence/coherence_inherent.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.stderr?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -5,8 +5,10 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use Lib::TheTrait;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use Lib::TheTrait;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "af0ef3b693262217f7581a2aaa07979df1e8bbbd", "filename": "src/test/ui/coherence/coherence_inherent_cc.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -5,8 +5,10 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use coherence_inherent_cc_lib::TheTrait;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use coherence_inherent_cc_lib::TheTrait;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0e9b63d6370d6738d2d3c51d9cdff0baea1077a9", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -23,9 +23,11 @@ LL |         ().clone()\n    |            ^^^^^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use std::clone::Clone;`\n    = note: this error originates in the macro `::bar::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use std::clone::Clone;\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "77ab6e589e07c00f7011a7bf38a5d21d6a34d79e", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -11,9 +11,11 @@ LL |     pub macro m() { ().f() }\n    |                        ^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use foo::T;`\n    = note: this error originates in the macro `::baz::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use foo::T;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "0ccf69dc0607615580af4d1ee77df8d12710ff69", "filename": "src/test/ui/issues/issue-10465.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -5,8 +5,10 @@ LL |             b.foo();\n    |               ^^^ method not found in `&B`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use a::A;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |         use a::A;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "eb4e43aaec35b4814876287c9268e0500e23c1dc", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -8,8 +8,10 @@ LL |         x.foobar();\n    |           ^^^^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use crate::foo::foobar::Foobar;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use crate::foo::foobar::Foobar;\n+   |\n \n error[E0599]: no method named `bar` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:28:7"}, {"sha": "e4662b430dccc7bdd9131fc4996955c95b5fde11", "filename": "src/test/ui/rust-2021/future-prelude-collision-shadow.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -15,9 +15,6 @@ LL |     fn try_into(self) -> Result<T, Self::Error>;\n    |        the method is available for `Rc<u8>` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n-           candidate #1: `use crate::m::TryIntoU32;`\n-           candidate #2: `use std::convert::TryInto;`\n help: consider wrapping the receiver expression with the appropriate type\n    |\n LL |         let _: u32 = Box::new(3u8).try_into().unwrap();\n@@ -34,6 +31,12 @@ help: consider wrapping the receiver expression with the appropriate type\n    |\n LL |         let _: u32 = Rc::new(3u8).try_into().unwrap();\n    |                      ++++++++   +\n+help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n+   |\n+LL |     use crate::m::TryIntoU32;\n+   |\n+LL |     use std::convert::TryInto;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7faede4e6d0a9ac40af902e954e3191861237f2b", "filename": "src/test/ui/underscore-imports/shadow.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7849e3e9dda60e8ec826ee245c6b180e73911b37/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr?ref=7849e3e9dda60e8ec826ee245c6b180e73911b37", "patch": "@@ -5,8 +5,10 @@ LL |         x.deref();\n    |           ^^^^^ method not found in `&()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n-           `use std::ops::Deref;`\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL |     use std::ops::Deref;\n+   |\n \n error: aborting due to previous error\n "}]}