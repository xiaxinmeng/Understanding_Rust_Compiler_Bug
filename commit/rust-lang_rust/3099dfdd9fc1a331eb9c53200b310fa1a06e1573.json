{"sha": "3099dfdd9fc1a331eb9c53200b310fa1a06e1573", "node_id": "C_kwDOAAsO6NoAKDMwOTlkZmRkOWZjMWEzMzFlYjljNTMyMDBiMzEwZmExYTA2ZTE1NzM", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-09-03T07:28:03Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-11-22T10:09:47Z"}, "message": "Forbid inlining `thread_local!`'s `__getit` function on Windows", "tree": {"sha": "77d5a5435e9ba2a652bf194f1a102bd2fbcf831d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77d5a5435e9ba2a652bf194f1a102bd2fbcf831d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3099dfdd9fc1a331eb9c53200b310fa1a06e1573", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCY3yf6wAKCRDXcz0dendf\nClFwAQDG4cDJFr7UGTP4myithIRJ0Z5N5sD2PJcAgjHghJ86CQD+MEe3DOascOuv\nBRL6fW9hoUAfGGYu6RhGdPWgrT7g3AU=\n=1HCz\n-----END PGP SIGNATURE-----", "payload": "tree 77d5a5435e9ba2a652bf194f1a102bd2fbcf831d\nparent 911cbf8e46f0f3b044c87fc5cbca922878db757b\nauthor Thom Chiovoloni <thom@shift.click> 1662190083 -0700\ncommitter Thom Chiovoloni <thom@shift.click> 1669111787 -0800\n\nForbid inlining `thread_local!`'s `__getit` function on Windows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3099dfdd9fc1a331eb9c53200b310fa1a06e1573", "html_url": "https://github.com/rust-lang/rust/commit/3099dfdd9fc1a331eb9c53200b310fa1a06e1573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3099dfdd9fc1a331eb9c53200b310fa1a06e1573/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911cbf8e46f0f3b044c87fc5cbca922878db757b", "url": "https://api.github.com/repos/rust-lang/rust/commits/911cbf8e46f0f3b044c87fc5cbca922878db757b", "html_url": "https://github.com/rust-lang/rust/commit/911cbf8e46f0f3b044c87fc5cbca922878db757b"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "154b608c0dc5c30cbc183117ac1ed847391f5cd0", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3099dfdd9fc1a331eb9c53200b310fa1a06e1573/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3099dfdd9fc1a331eb9c53200b310fa1a06e1573/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=3099dfdd9fc1a331eb9c53200b310fa1a06e1573", "patch": "@@ -181,7 +181,8 @@ macro_rules! thread_local {\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(windows), inline)] // see comments below\n+        #[cfg_attr(not(all(windows, target_thread_local)), inline)] // see comments below\n+        #[cfg_attr(all(windows, target_thread_local), inline(never))]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -294,12 +295,17 @@ macro_rules! __thread_local_inner {\n             fn __init() -> $t { $init }\n \n             // When reading this function you might ask \"why is this inlined\n-            // everywhere other than Windows?\", and that's a very reasonable\n-            // question to ask. The short story is that it segfaults rustc if\n-            // this function is inlined. The longer story is that Windows looks\n-            // to not support `extern` references to thread locals across DLL\n-            // boundaries. This appears to at least not be supported in the ABI\n-            // that LLVM implements.\n+            // everywhere other than Windows?\", and \"why must it not be inlined\n+            // on Windows?\" and these are very reasonable questions to ask.\n+            //\n+            // The short story is that Windows doesn't support referencing\n+            // `#[thread_local]` across DLL boundaries. The slightly longer\n+            // story is that each module (dll or exe) has its own separate set\n+            // of static thread locals, so if you try and reference a\n+            // `#[thread_local]` that comes from `crate1.dll` from within one of\n+            // `crate2.dll`'s functions, then it might give you a completely\n+            // different thread local than what you asked for (or it might just\n+            // crash).\n             //\n             // Because of this we never inline on Windows, but we do inline on\n             // other platforms (where external references to thread locals\n@@ -314,8 +320,9 @@ macro_rules! __thread_local_inner {\n             // Cargo question kinda). This means that, unfortunately, Windows\n             // gets the pessimistic path for now where it's never inlined.\n             //\n-            // The issue of \"should enable on Windows sometimes\" is #84933\n-            #[cfg_attr(not(windows), inline)]\n+            // The issue of \"should improve things on Windows\" is #84933\n+            #[cfg_attr(not(all(windows, target_thread_local)), inline)]\n+            #[cfg_attr(all(windows, target_thread_local), inline(never))]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}]}