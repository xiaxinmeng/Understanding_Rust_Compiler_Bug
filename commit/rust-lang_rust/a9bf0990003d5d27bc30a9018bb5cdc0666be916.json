{"sha": "a9bf0990003d5d27bc30a9018bb5cdc0666be916", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YmYwOTkwMDAzZDVkMjdiYzMwYTkwMThiYjVjZGMwNjY2YmU5MTY=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:27:20Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-02T15:17:21Z"}, "message": "middle: trans: adt: remove dead code", "tree": {"sha": "37a9fb54302e714721ac4f8279d3cca647181f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a9fb54302e714721ac4f8279d3cca647181f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9bf0990003d5d27bc30a9018bb5cdc0666be916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bf0990003d5d27bc30a9018bb5cdc0666be916", "html_url": "https://github.com/rust-lang/rust/commit/a9bf0990003d5d27bc30a9018bb5cdc0666be916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9bf0990003d5d27bc30a9018bb5cdc0666be916/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee82233a1e6d8b6af3d23a78e3c87ec0aa2545a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee82233a1e6d8b6af3d23a78e3c87ec0aa2545a6", "html_url": "https://github.com/rust-lang/rust/commit/ee82233a1e6d8b6af3d23a78e3c87ec0aa2545a6"}], "stats": {"total": 27, "additions": 0, "deletions": 27}, "files": [{"sha": "b42721b754b54f788f47c0f548871c6cbd9dc62a", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a9bf0990003d5d27bc30a9018bb5cdc0666be916/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9bf0990003d5d27bc30a9018bb5cdc0666be916/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=a9bf0990003d5d27bc30a9018bb5cdc0666be916", "patch": "@@ -644,25 +644,6 @@ pub fn num_args(r: &Repr, discr: Disr) -> uint {\n     }\n }\n \n-/// Access a field, at a point when the value's case is known.\n-pub fn deref_ty(ccx: &CrateContext, r: &Repr) -> ty::t {\n-    match *r {\n-        CEnum(..) => {\n-            ccx.sess().bug(\"deref of c-like enum\")\n-        }\n-        Univariant(ref st, _) => {\n-            *st.fields.get(0)\n-        }\n-        General(_, ref cases) => {\n-            assert!(cases.len() == 1);\n-            *cases.get(0).fields.get(0)\n-        }\n-        NullablePointer{ .. } => {\n-            ccx.sess().bug(\"deref of nullable ptr\")\n-        }\n-    }\n-}\n-\n /// Access a field, at a point when the value's case is known.\n pub fn trans_field_ptr(bcx: &Block, r: &Repr, val: ValueRef, discr: Disr,\n                        ix: uint) -> ValueRef {\n@@ -896,11 +877,3 @@ fn const_struct_field(ccx: &CrateContext, val: ValueRef, ix: uint)\n         real_ix = real_ix + 1;\n     }\n }\n-\n-/// Is it safe to bitcast a value to the one field of its one variant?\n-pub fn is_newtypeish(r: &Repr) -> bool {\n-    match *r {\n-        Univariant(ref st, false) => st.fields.len() == 1,\n-        _ => false\n-    }\n-}"}]}