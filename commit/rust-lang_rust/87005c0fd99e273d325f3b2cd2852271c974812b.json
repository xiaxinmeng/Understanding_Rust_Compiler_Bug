{"sha": "87005c0fd99e273d325f3b2cd2852271c974812b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MDA1YzBmZDk5ZTI3M2QzMjVmM2IyY2QyODUyMjcxYzk3NDgxMmI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-28T12:31:46Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-30T09:45:11Z"}, "message": "Remove unused field", "tree": {"sha": "ec8561a53356d61054cbf6766cf5117642dac49b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec8561a53356d61054cbf6766cf5117642dac49b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87005c0fd99e273d325f3b2cd2852271c974812b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87005c0fd99e273d325f3b2cd2852271c974812b", "html_url": "https://github.com/rust-lang/rust/commit/87005c0fd99e273d325f3b2cd2852271c974812b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87005c0fd99e273d325f3b2cd2852271c974812b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6641233b34fd910864131febb22f71777a7add6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6641233b34fd910864131febb22f71777a7add6a", "html_url": "https://github.com/rust-lang/rust/commit/6641233b34fd910864131febb22f71777a7add6a"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "530733d5f837ecf2a774b3890eec2fb4098815ad", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87005c0fd99e273d325f3b2cd2852271c974812b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87005c0fd99e273d325f3b2cd2852271c974812b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=87005c0fd99e273d325f3b2cd2852271c974812b", "patch": "@@ -177,9 +177,7 @@ enum ImplTraitContext {\n     /// Treat `impl Trait` as shorthand for a new universal generic parameter.\n     /// Example: `fn foo(x: impl Debug)`, where `impl Debug` is conceptually\n     /// equivalent to a fresh universal parameter like `fn foo<T: Debug>(x: T)`.\n-    ///\n-    /// We store a DefId here so we can look up necessary information later\n-    Universal(DefId),\n+    Universal,\n \n     /// Treat `impl Trait` as shorthand for a new universal existential parameter.\n     /// Example: `fn foo() -> impl Debug`, where `impl Debug` is conceptually\n@@ -803,7 +801,7 @@ impl<'a> LoweringContext<'a> {\n         let (in_band_defs, (mut lowered_generics, res)) = self.with_in_scope_lifetime_defs(\n             &generics.params,\n             |this| {\n-                let itctx = ImplTraitContext::Universal(parent_id);\n+                let itctx = ImplTraitContext::Universal;\n                 this.collect_in_band_defs(parent_id, anonymous_lifetime_mode, |this| {\n                     (this.lower_generics(generics, itctx), f(this))\n                 })\n@@ -1169,7 +1167,7 @@ impl<'a> LoweringContext<'a> {\n                             |this| this.lower_param_bounds(bounds, itctx),\n                         )\n                     }\n-                    ImplTraitContext::Universal(_def_id) => {\n+                    ImplTraitContext::Universal => {\n                         self.lower_node_id(def_node_id);\n                         // Add a definition for the in-band TyParam\n                         let def_index = self\n@@ -1875,8 +1873,8 @@ impl<'a> LoweringContext<'a> {\n         let inputs = decl.inputs\n             .iter()\n             .map(|arg| {\n-                if let Some(def_id) = fn_def_id {\n-                    self.lower_ty_direct(&arg.ty, ImplTraitContext::Universal(def_id))\n+                if fn_def_id.is_some() {\n+                    self.lower_ty_direct(&arg.ty, ImplTraitContext::Universal)\n                 } else {\n                     self.lower_ty_direct(&arg.ty, ImplTraitContext::Disallowed)\n                 }\n@@ -2527,9 +2525,9 @@ impl<'a> LoweringContext<'a> {\n         body: &Block,\n     ) -> hir::BodyId {\n         self.lower_body(Some(decl), |this| {\n-            if let IsAsync::Async(async_node_id) = asyncness {\n+            if let IsAsync::Async { closure_id, .. } = asyncness {\n                 let async_expr = this.make_async_expr(\n-                    CaptureBy::Value, async_node_id, None,\n+                    CaptureBy::Value, closure_id, None,\n                     |this| {\n                         let body = this.lower_block(body, false);\n                         this.expr_block(body, ThinVec::new())"}]}