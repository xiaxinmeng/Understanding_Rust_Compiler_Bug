{"sha": "86d445eda8ca2d884551fd0ac00a89e4bfe1cc81", "node_id": "C_kwDOAAsO6NoAKDg2ZDQ0NWVkYThjYTJkODg0NTUxZmQwYWMwMGE4OWU0YmZlMWNjODE", "commit": {"author": {"name": "AngelicosPhosphoros", "email": "xuzin.timur@gmail.com", "date": "2022-05-31T12:14:55Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-07-24T19:56:39Z"}, "message": "Support vec zero-alloc optimization for tuples and byte arrays\n\n* Implement IsZero trait for tuples up to 8 IsZero elements;\n* Implement IsZero for u8/i8, leading to implementation of it for arrays of them too;\n* Add more codegen tests for this optimization.\n* Lower size of array for IsZero trait because it fails to inline checks", "tree": {"sha": "5eb6cf1a2b94f8d044333665f2d233c0481786d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb6cf1a2b94f8d044333665f2d233c0481786d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81", "html_url": "https://github.com/rust-lang/rust/commit/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81/comments", "author": {"login": "AngelicosPhosphoros", "id": 13154246, "node_id": "MDQ6VXNlcjEzMTU0MjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/13154246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AngelicosPhosphoros", "html_url": "https://github.com/AngelicosPhosphoros", "followers_url": "https://api.github.com/users/AngelicosPhosphoros/followers", "following_url": "https://api.github.com/users/AngelicosPhosphoros/following{/other_user}", "gists_url": "https://api.github.com/users/AngelicosPhosphoros/gists{/gist_id}", "starred_url": "https://api.github.com/users/AngelicosPhosphoros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AngelicosPhosphoros/subscriptions", "organizations_url": "https://api.github.com/users/AngelicosPhosphoros/orgs", "repos_url": "https://api.github.com/users/AngelicosPhosphoros/repos", "events_url": "https://api.github.com/users/AngelicosPhosphoros/events{/privacy}", "received_events_url": "https://api.github.com/users/AngelicosPhosphoros/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3", "html_url": "https://github.com/rust-lang/rust/commit/b4151a41a0b275dee59ffbbc115e7bfc5be8a8c3"}], "stats": {"total": 199, "additions": 170, "deletions": 29}, "files": [{"sha": "92a32779b8e64b4866e0fb9a9707b10a51c6c261", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=86d445eda8ca2d884551fd0ac00a89e4bfe1cc81", "patch": "@@ -17,12 +17,14 @@ macro_rules! impl_is_zero {\n     };\n }\n \n+impl_is_zero!(i8, |x| x == 0); // It is needed to impl for arrays and tuples of i8.\n impl_is_zero!(i16, |x| x == 0);\n impl_is_zero!(i32, |x| x == 0);\n impl_is_zero!(i64, |x| x == 0);\n impl_is_zero!(i128, |x| x == 0);\n impl_is_zero!(isize, |x| x == 0);\n \n+impl_is_zero!(u8, |x| x == 0); // It is needed to impl for arrays and tuples of u8.\n impl_is_zero!(u16, |x| x == 0);\n impl_is_zero!(u32, |x| x == 0);\n impl_is_zero!(u64, |x| x == 0);\n@@ -54,15 +56,41 @@ unsafe impl<T: IsZero, const N: usize> IsZero for [T; N] {\n     fn is_zero(&self) -> bool {\n         // Because this is generated as a runtime check, it's not obvious that\n         // it's worth doing if the array is really long.  The threshold here\n-        // is largely arbitrary, but was picked because as of 2022-05-01 LLVM\n-        // can const-fold the check in `vec![[0; 32]; n]` but not in\n-        // `vec![[0; 64]; n]`: https://godbolt.org/z/WTzjzfs5b\n+        // is largely arbitrary, but was picked because as of 2022-07-01 LLVM\n+        // fails to const-fold the check in `vec![[1; 32]; n]`\n+        // See https://github.com/rust-lang/rust/pull/97581#issuecomment-1166628022\n         // Feel free to tweak if you have better evidence.\n \n-        N <= 32 && self.iter().all(IsZero::is_zero)\n+        N <= 16 && self.iter().all(IsZero::is_zero)\n     }\n }\n \n+// This is recursive macro.\n+macro_rules! impl_for_tuples {\n+    // Stopper\n+    () => {\n+        // No use for implementing for empty tuple because it is ZST.\n+    };\n+    ($first_arg:ident $(,$rest:ident)*) => {\n+        unsafe impl <$first_arg: IsZero, $($rest: IsZero,)*> IsZero for ($first_arg, $($rest,)*){\n+            #[inline]\n+            fn is_zero(&self) -> bool{\n+                // Destructure tuple to N references\n+                // Rust allows to hide generic params by local variable names.\n+                #[allow(non_snake_case)]\n+                let ($first_arg, $($rest,)*) = self;\n+\n+                $first_arg.is_zero()\n+                    $( && $rest.is_zero() )*\n+            }\n+        }\n+\n+        impl_for_tuples!($($rest),*);\n+    }\n+}\n+\n+impl_for_tuples!(A, B, C, D, E, F, G, H);\n+\n // `Option<&T>` and `Option<Box<T>>` are guaranteed to represent `None` as null.\n // For fat pointers, the bytes that would be the pointer metadata in the `Some`\n // variant are padding in the `None` variant, so ignoring them and"}, {"sha": "ff364c033ee98f4f09616d9bc7c317a77353b4a3", "filename": "library/alloc/src/vec/spec_from_elem.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs?ref=86d445eda8ca2d884551fd0ac00a89e4bfe1cc81", "patch": "@@ -1,6 +1,7 @@\n+use core::ptr;\n+\n use crate::alloc::Allocator;\n use crate::raw_vec::RawVec;\n-use core::ptr::{self};\n \n use super::{ExtendElement, IsZero, Vec};\n \n@@ -17,6 +18,18 @@ impl<T: Clone> SpecFromElem for T {\n     }\n }\n \n+impl<T: Clone + IsZero> SpecFromElem for T {\n+    #[inline]\n+    default fn from_elem<A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {\n+        if elem.is_zero() {\n+            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n+        }\n+        let mut v = Vec::with_capacity_in(n, alloc);\n+        v.extend_with(n, ExtendElement(elem));\n+        v\n+    }\n+}\n+\n impl SpecFromElem for i8 {\n     #[inline]\n     fn from_elem<A: Allocator>(elem: i8, n: usize, alloc: A) -> Vec<i8, A> {\n@@ -46,15 +59,3 @@ impl SpecFromElem for u8 {\n         }\n     }\n }\n-\n-impl<T: Clone + IsZero> SpecFromElem for T {\n-    #[inline]\n-    fn from_elem<A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {\n-        if elem.is_zero() {\n-            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };\n-        }\n-        let mut v = Vec::with_capacity_in(n, alloc);\n-        v.extend_with(n, ExtendElement(elem));\n-        v\n-    }\n-}"}, {"sha": "08302796c41a1e14a8cbdb124d6078442e857eb5", "filename": "src/test/codegen/vec-calloc.rs", "status": "modified", "additions": 124, "deletions": 12, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81/src%2Ftest%2Fcodegen%2Fvec-calloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d445eda8ca2d884551fd0ac00a89e4bfe1cc81/src%2Ftest%2Fcodegen%2Fvec-calloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-calloc.rs?ref=86d445eda8ca2d884551fd0ac00a89e4bfe1cc81", "patch": "@@ -4,29 +4,141 @@\n \n #![crate_type = \"lib\"]\n \n+// CHECK-LABEL: @vec_zero_bytes\n+#[no_mangle]\n+pub fn vec_zero_bytes(n: usize) -> Vec<u8> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+    // CHECK-NOT: call {{.*}}llvm.memset\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+    // CHECK-NOT: call {{.*}}llvm.memset\n+\n+    // CHECK: ret void\n+    vec![0; n]\n+}\n+\n+// CHECK-LABEL: @vec_one_bytes\n+#[no_mangle]\n+pub fn vec_one_bytes(n: usize) -> Vec<u8> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: call {{.*}}__rust_alloc(\n+    // CHECK: call {{.*}}llvm.memset\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: ret void\n+    vec![1; n]\n+}\n+\n // CHECK-LABEL: @vec_zero_scalar\n #[no_mangle]\n pub fn vec_zero_scalar(n: usize) -> Vec<i32> {\n-    // CHECK-NOT: __rust_alloc(\n-    // CHECK: __rust_alloc_zeroed(\n-    // CHECK-NOT: __rust_alloc(\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n     vec![0; n]\n }\n \n+// CHECK-LABEL: @vec_one_scalar\n+#[no_mangle]\n+pub fn vec_one_scalar(n: usize) -> Vec<i32> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: call {{.*}}__rust_alloc(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: ret void\n+    vec![1; n]\n+}\n+\n // CHECK-LABEL: @vec_zero_rgb48\n #[no_mangle]\n pub fn vec_zero_rgb48(n: usize) -> Vec<[u16; 3]> {\n-    // CHECK-NOT: __rust_alloc(\n-    // CHECK: __rust_alloc_zeroed(\n-    // CHECK-NOT: __rust_alloc(\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n     vec![[0, 0, 0]; n]\n }\n \n-// CHECK-LABEL: @vec_zero_array_32\n+// CHECK-LABEL: @vec_zero_array_16\n+#[no_mangle]\n+pub fn vec_zero_array_16(n: usize) -> Vec<[i64; 16]> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![[0_i64; 16]; n]\n+}\n+\n+// CHECK-LABEL: @vec_zero_tuple\n+#[no_mangle]\n+pub fn vec_zero_tuple(n: usize) -> Vec<(i16, u8, char)> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![(0, 0, '\\0'); n]\n+}\n+\n+// CHECK-LABEL: @vec_non_zero_tuple\n #[no_mangle]\n-pub fn vec_zero_array_32(n: usize) -> Vec<[i64; 32]> {\n-    // CHECK-NOT: __rust_alloc(\n-    // CHECK: __rust_alloc_zeroed(\n-    // CHECK-NOT: __rust_alloc(\n-    vec![[0_i64; 32]; n]\n+pub fn vec_non_zero_tuple(n: usize) -> Vec<(i16, u8, char)> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: call {{.*}}__rust_alloc(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK: ret void\n+    vec![(0, 0, 'A'); n]\n }"}]}