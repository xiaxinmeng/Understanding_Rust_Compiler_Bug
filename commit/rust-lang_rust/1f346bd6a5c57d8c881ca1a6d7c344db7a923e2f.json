{"sha": "1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "node_id": "C_kwDOAAsO6NoAKDFmMzQ2YmQ2YTVjNTdkOGM4ODFjYTFhNmQ3YzM0NGRiN2E5MjNlMmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-23T21:13:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-23T21:13:25Z"}, "message": "Rollup merge of #95225 - compiler-errors:impl-future-generator-ty, r=oli-obk\n\nremove `[async output]` from `impl Future` pretty-printing\n\nself-explanatory, guess it's not as helpful as I thought when I added it 4 months ago\nre https://github.com/rust-lang/rust/issues/95089#issuecomment-1075482851", "tree": {"sha": "9078ec12e740a1908961849e0afab4627a9a2f98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9078ec12e740a1908961849e0afab4627a9a2f98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiO412CRBK7hj4Ov3rIwAAOE4IAEwHq2/DlcV+BXiVyOmBMasN\nXcE2JtURSfwzf3hP2rO1FBccsbBYO1swSD7vXwpv4BiyX9kyZYzPFmySZ3hqpxp1\nRnX6BxCBJc0kEzO0FXjJJgMHqbi2xR3fFPrKqEJkVwooHMxzfrxEYtTPegKEkppS\nKvafZ9zlTF0aF8LB/RgL+oAyl8yBc0bFwNmrryETTejkFsOzcsBx7S+lQykjy/TB\nJigo9QyZL1Uz9CyVCbTDrXFPW3yXg88aVJ366j5S4vGJoZSc5eoNDRHRU15nIJrT\nNjklOC9CEEPbf8doCWKz3L+deGaUYU+s6U4UsqEYtQOWqk4cHiYgizvG9iCBEBY=\n=6YlH\n-----END PGP SIGNATURE-----\n", "payload": "tree 9078ec12e740a1908961849e0afab4627a9a2f98\nparent 23ef234bf765951e49805fbdad95f538ac33f2d8\nparent bdb4b1e923d7219690135490af5f63859a7086bc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1648070005 +0100\ncommitter GitHub <noreply@github.com> 1648070005 +0100\n\nRollup merge of #95225 - compiler-errors:impl-future-generator-ty, r=oli-obk\n\nremove `[async output]` from `impl Future` pretty-printing\n\nself-explanatory, guess it's not as helpful as I thought when I added it 4 months ago\nre https://github.com/rust-lang/rust/issues/95089#issuecomment-1075482851\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "html_url": "https://github.com/rust-lang/rust/commit/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ef234bf765951e49805fbdad95f538ac33f2d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ef234bf765951e49805fbdad95f538ac33f2d8", "html_url": "https://github.com/rust-lang/rust/commit/23ef234bf765951e49805fbdad95f538ac33f2d8"}, {"sha": "bdb4b1e923d7219690135490af5f63859a7086bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb4b1e923d7219690135490af5f63859a7086bc", "html_url": "https://github.com/rust-lang/rust/commit/bdb4b1e923d7219690135490af5f63859a7086bc"}], "stats": {"total": 73, "additions": 39, "deletions": 34}, "files": [{"sha": "fa2dad5ce25f054b05067cfdb7c3def2c772a9c8", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -41,6 +41,7 @@\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(once_cell)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]"}, {"sha": "5cfd9a5edfb19433adc7f512d26c6beff547ed09", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -896,44 +896,48 @@ pub trait PrettyPrinter<'tcx>:\n             );\n \n             if !generics.is_empty() || !assoc_items.is_empty() {\n-                p!(\"<\");\n                 let mut first = true;\n \n                 for ty in generics {\n-                    if !first {\n+                    if first {\n+                        p!(\"<\");\n+                        first = false;\n+                    } else {\n                         p!(\", \");\n                     }\n                     p!(print(trait_ref.rebind(*ty)));\n-                    first = false;\n                 }\n \n                 for (assoc_item_def_id, term) in assoc_items {\n-                    if !first {\n+                    // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks\n+                    if let Some(ty) = term.skip_binder().ty() &&\n+                       let ty::Projection(ty::ProjectionTy { item_def_id, .. }) = ty.kind() &&\n+                       Some(*item_def_id) == self.tcx().lang_items().generator_return() {\n+                        continue;\n+                    }\n+\n+                    if first {\n+                        p!(\"<\");\n+                        first = false;\n+                    } else {\n                         p!(\", \");\n                     }\n+\n                     p!(write(\"{} = \", self.tcx().associated_item(assoc_item_def_id).name));\n \n                     match term.skip_binder() {\n                         Term::Ty(ty) => {\n-                            // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks\n-                            if matches!(\n-                              ty.kind(), ty::Projection(ty::ProjectionTy { item_def_id, .. })\n-                              if Some(*item_def_id) == self.tcx().lang_items().generator_return()\n-                            ) {\n-                                p!(\"[async output]\")\n-                            } else {\n-                                p!(print(ty))\n-                            }\n+                            p!(print(ty))\n                         }\n                         Term::Const(c) => {\n                             p!(print(c));\n                         }\n                     };\n-\n-                    first = false;\n                 }\n \n-                p!(\">\");\n+                if !first {\n+                    p!(\">\");\n+                }\n             }\n \n             first = false;"}, {"sha": "f6c6f90a39378ad316b5ab9dc3915914b2094f88", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -24,7 +24,7 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n+    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "919904ce3b6a2fd64d19593e47a6288b29531d10", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -31,7 +31,7 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n@@ -47,7 +47,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;"}, {"sha": "79834ed7ec1a8fb08d64c5cbdbba08c9a13536ad", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -46,8 +46,8 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           the expected opaque type\n    |                                           the found opaque type\n    |\n-   = note: expected opaque type `impl Future<Output = [async output]>` (`async` closure body)\n-              found opaque type `impl Future<Output = [async output]>` (`async` closure body)\n+   = note: expected opaque type `impl Future` (`async` closure body)\n+              found opaque type `impl Future` (`async` closure body)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "19b90f1d878c71ef92d1675d684bd33c39f39a7f", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     spawn(async {\n    |     ^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:16\n    |"}, {"sha": "9682a7055e93c4fd16fdd7748c7e87d1853553ea", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -44,13 +44,13 @@ LL |     require_send(send_fut);\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n-   = note: required because it appears within the type `impl Future<Output = [async output]>`\n+   = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n-   = note: required because it appears within the type `impl Future<Output = [async output]>`\n+   = note: required because it appears within the type `impl Future`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |"}, {"sha": "cf023bd0f9705f6a223ada47cbe5045b417b1676", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(async {\n    |     ^^^^^^^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:35\n    |"}, {"sha": "a83b1d660c34cfb093860520095068a5e83ca7e6", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -14,7 +14,7 @@ LL | async fn foo() {\n    = note: required because it appears within the type `{ResumeTy, (NotSend,), impl Future<Output = ()>, ()}`\n    = note: required because it appears within the type `[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]>`\n-   = note: required because it appears within the type `impl Future<Output = [async output]>`\n+   = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future<Output = ()>`\n note: required by a bound in `gimme_send`\n   --> $DIR/partial-drop-partial-reinit.rs:10:18"}, {"sha": "3d62f059f37cdbc6e29b0081c36eaf676dda7eee", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -28,7 +28,7 @@ note: required by a bound in `from_generator`\n LL |     T: Generator<ResumeTy, Yield = ()>,\n    |                            ^^^^^^^^^^ required by this bound in `from_generator`\n \n-error[E0280]: the requirement `<impl Future<Output = [async output]> as Future>::Output == u32` is not satisfied\n+error[E0280]: the requirement `<impl Future as Future>::Output == u32` is not satisfied\n   --> $DIR/async.rs:7:25\n    |\n LL | async fn foo(x: u32) -> u32 {"}, {"sha": "3e607d4004e8510faee45646dcaba96535e78ce2", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == impl Stream<Item = Repr>`\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == impl Stream<Item = Repr>`\n   --> $DIR/issue-89008.rs:39:43\n    |\n LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;"}, {"sha": "1841d7b3d372d6cdc2067a6760a540313227d8e2", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -12,7 +12,7 @@ impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     fn foo<T>() -> Self::E {\n         //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-        //~| ERROR the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+        //~| ERROR the trait bound `impl Future: Copy` is not satisfied\n         async {}\n     }\n }"}, {"sha": "76122e60c4cb6eb5d952811a6b57e669c788bb89", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n   --> $DIR/issue-55872-2.rs:13:20\n    |\n LL |     fn foo<T>() -> Self::E {\n-   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n+   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-2.rs:13:28"}, {"sha": "86bde9a0cddab967e843d72c87f133d05165caef", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -15,7 +15,7 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n    = note: expected opaque type `impl Future<Output = u8>`\n-              found opaque type `impl Future<Output = [async output]>`\n+              found opaque type `impl Future`\n    = note: distinct uses of `impl Trait` result in different opaque types\n \n error: aborting due to previous error"}, {"sha": "91fed81eaeff6927e99aada93a1603a4ade43b93", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -4,7 +4,7 @@ error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:22]` cannot be used\n LL |         const { || {} } => {},\n    |         ^^^^^^^^^^^^^^^\n \n-error: `impl Future<Output = [async output]>` cannot be used in patterns\n+error: `impl Future` cannot be used in patterns\n   --> $DIR/non-structural-match-types.rs:12:9\n    |\n LL |         const { async {} } => {},"}, {"sha": "7ef4895249cec7218f08a5836b9dd9edc0d817c2", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=1f346bd6a5c57d8c881ca1a6d7c344db7a923e2f", "patch": "@@ -81,7 +81,7 @@ LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                             ------------------------------- the found opaque type\n    |\n    = note:   expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n-           found opaque type `impl Future<Output = [async output]>`\n+           found opaque type `impl Future`\n help: you need to pin and box this expression\n    |\n LL ~     Box::pin(async {"}]}