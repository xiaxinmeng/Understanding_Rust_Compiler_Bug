{"sha": "4b7130dfa191e94043fa84673c9cb57e7ff46f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNzEzMGRmYTE5MWU5NDA0M2ZhODQ2NzNjOWNiNTdlN2ZmNDZmNjM=", "commit": {"author": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2018-09-07T17:51:21Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2018-09-07T19:58:35Z"}, "message": "normalize_doc_attributes option: convert doc attributes to comments\n\nConvert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.", "tree": {"sha": "14438ef5e7f82ad57c76b7db7bc19caa9878fca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14438ef5e7f82ad57c76b7db7bc19caa9878fca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b7130dfa191e94043fa84673c9cb57e7ff46f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7130dfa191e94043fa84673c9cb57e7ff46f63", "html_url": "https://github.com/rust-lang/rust/commit/4b7130dfa191e94043fa84673c9cb57e7ff46f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b7130dfa191e94043fa84673c9cb57e7ff46f63/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ada5b51ccfd99a91055dfc3b411e83f2e0514d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ada5b51ccfd99a91055dfc3b411e83f2e0514d5", "html_url": "https://github.com/rust-lang/rust/commit/6ada5b51ccfd99a91055dfc3b411e83f2e0514d5"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "7f44fa5d3e87df9b593fc2cfedb59613b330b90b", "filename": "Configurations.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b7130dfa191e94043fa84673c9cb57e7ff46f63/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b7130dfa191e94043fa84673c9cb57e7ff46f63/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=4b7130dfa191e94043fa84673c9cb57e7ff46f63", "patch": "@@ -2188,6 +2188,32 @@ If you want to format code that requires edition 2018, add the following to your\n edition = \"2018\"\n ```\n \n+## `normalize_doc_attributes`\n+\n+Convert `#![doc]` and `#[doc]` attributes to `//!` and `///` doc comments.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `false` (default):\n+\n+```rust\n+#![doc = \"Example documentation\"]\n+\n+#[doc = \"Example item documentation\"]\n+pub enum Foo {}\n+```\n+\n+#### `true`:\n+\n+```rust\n+//! Example documentation\n+\n+/// Example item documentation\n+pub enum Foo {}\n+```\n+\n ## `emit_mode`\n \n Internal option"}, {"sha": "c7ee633ec4edd556181bbb467a994bd6ee35f9d6", "filename": "src/attr.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4b7130dfa191e94043fa84673c9cb57e7ff46f63/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7130dfa191e94043fa84673c9cb57e7ff46f63/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=4b7130dfa191e94043fa84673c9cb57e7ff46f63", "patch": "@@ -10,7 +10,7 @@\n \n //! Format attributes and meta items.\n \n-use comment::{contains_comment, rewrite_doc_comment};\n+use comment::{contains_comment, rewrite_doc_comment, CommentStyle};\n use config::lists::*;\n use config::IndentStyle;\n use expr::rewrite_literal;\n@@ -350,11 +350,34 @@ impl Rewrite for ast::Attribute {\n             if contains_comment(snippet) {\n                 return Some(snippet.to_owned());\n             }\n+\n+            let meta = self.meta();\n+\n+            // This attribute is possibly a doc attribute needing normalization to a doc comment\n+            if context.config.normalize_doc_attributes() {\n+                if let Some(ref meta) = meta {\n+                    if meta.check_name(\"doc\") {\n+                        if let Some(ref literal) = meta.value_str() {\n+                            let comment_style = match self.style {\n+                                ast::AttrStyle::Inner => CommentStyle::Doc,\n+                                ast::AttrStyle::Outer => CommentStyle::TripleSlash,\n+                            };\n+\n+                            let doc_comment = format!(\"{}{}\", comment_style.opener(), literal);\n+                            return rewrite_doc_comment(\n+                                &doc_comment,\n+                                shape.comment(context.config),\n+                                context.config,\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+\n             // 1 = `[`\n             let shape = shape.offset_left(prefix.len() + 1)?;\n             Some(\n-                self.meta()\n-                    .and_then(|meta| meta.rewrite(context, shape))\n+                meta.and_then(|meta| meta.rewrite(context, shape))\n                     .map_or_else(|| snippet.to_owned(), |rw| format!(\"{}[{}]\", prefix, rw)),\n             )\n         }"}, {"sha": "fca4ca98ddda8dff42277742e5e44c3a34202a44", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b7130dfa191e94043fa84673c9cb57e7ff46f63/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7130dfa191e94043fa84673c9cb57e7ff46f63/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=4b7130dfa191e94043fa84673c9cb57e7ff46f63", "patch": "@@ -107,6 +107,7 @@ create_config! {\n     blank_lines_lower_bound: usize, 0, false,\n         \"Minimum number of blank lines which must be put between items\";\n     edition: Edition, Edition::Edition2015, false, \"The edition of the parser (RFC 2052)\";\n+    normalize_doc_attributes: bool, false, false, \"Normalize doc attributes as doc comments\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";"}, {"sha": "f8f2b9566dc136a36c804d72bd6ef6b9c4ebb2c1", "filename": "tests/source/doc-attrib.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b7130dfa191e94043fa84673c9cb57e7ff46f63/tests%2Fsource%2Fdoc-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7130dfa191e94043fa84673c9cb57e7ff46f63/tests%2Fsource%2Fdoc-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fdoc-attrib.rs?ref=4b7130dfa191e94043fa84673c9cb57e7ff46f63", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-normalize_doc_attributes: true\n+\n+#![doc = \"Example doc attribute comment\"]\n+\n+// Long `#[doc = \"...\"]`\n+struct A { #[doc = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"] b: i32 }\n+\n+\n+#[doc = \"The `nodes` and `edges` method each return instantiations of `Cow<[T]>` to leave implementers the freedom to create entirely new vectors or to pass back slices into internally owned vectors.\"]\n+struct B { b: i32 }\n\\ No newline at end of file"}, {"sha": "5f77de07de32eb1a6a8767ab051b1d6fabe163bd", "filename": "tests/target/doc-attrib.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b7130dfa191e94043fa84673c9cb57e7ff46f63/tests%2Ftarget%2Fdoc-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7130dfa191e94043fa84673c9cb57e7ff46f63/tests%2Ftarget%2Fdoc-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fdoc-attrib.rs?ref=4b7130dfa191e94043fa84673c9cb57e7ff46f63", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-normalize_doc_attributes: true\n+\n+//! Example doc attribute comment\n+\n+// Long `#[doc = \"...\"]`\n+struct A {\n+    /// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n+    b: i32,\n+}\n+\n+/// The `nodes` and `edges` method each return instantiations of `Cow<[T]>` to\n+/// leave implementers the freedom to create entirely new vectors or to pass\n+/// back slices into internally owned vectors.\n+struct B {\n+    b: i32,\n+}"}]}