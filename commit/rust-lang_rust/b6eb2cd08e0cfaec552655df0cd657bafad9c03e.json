{"sha": "b6eb2cd08e0cfaec552655df0cd657bafad9c03e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZWIyY2QwOGUwY2ZhZWM1NTI2NTVkZjBjZDY1N2JhZmFkOWMwM2U=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-10T08:32:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-10T08:53:14Z"}, "message": "cargo miri: support foreign targets", "tree": {"sha": "d09b7fe09631e515ad5e9c651a8b947a41bb369f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d09b7fe09631e515ad5e9c651a8b947a41bb369f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6eb2cd08e0cfaec552655df0cd657bafad9c03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6eb2cd08e0cfaec552655df0cd657bafad9c03e", "html_url": "https://github.com/rust-lang/rust/commit/b6eb2cd08e0cfaec552655df0cd657bafad9c03e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6eb2cd08e0cfaec552655df0cd657bafad9c03e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84c1527e2d486437efa5e3851a2b4b421c99133", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84c1527e2d486437efa5e3851a2b4b421c99133", "html_url": "https://github.com/rust-lang/rust/commit/c84c1527e2d486437efa5e3851a2b4b421c99133"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "ca670df0f2034480a238c83a81f90833a4bdc377", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6eb2cd08e0cfaec552655df0cd657bafad9c03e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b6eb2cd08e0cfaec552655df0cd657bafad9c03e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b6eb2cd08e0cfaec552655df0cd657bafad9c03e", "patch": "@@ -36,6 +36,7 @@ required-features = [\"rustc_tests\"]\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n cargo_metadata = { version = \"0.6\", optional = true }\n directories = { version = \"1.0\", optional = true }\n+rustc_version = { version = \"0.2.3\", optional = true }\n env_logger = \"0.5\"\n log = \"0.4\"\n \n@@ -44,7 +45,7 @@ vergen = \"3\"\n \n [features]\n default = [\"cargo_miri\"]\n-cargo_miri = [\"cargo_metadata\", \"directories\"]\n+cargo_miri = [\"cargo_metadata\", \"directories\", \"rustc_version\"]\n rustc_tests = []\n \n [dev-dependencies]"}, {"sha": "68da028a81c64c1d73bae7d8ad3ffacbb19ef49f", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b6eb2cd08e0cfaec552655df0cd657bafad9c03e/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6eb2cd08e0cfaec552655df0cd657bafad9c03e/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=b6eb2cd08e0cfaec552655df0cd657bafad9c03e", "patch": "@@ -190,17 +190,28 @@ path = \"lib.rs\"\n         \"#).unwrap();\n     File::create(dir.join(\"lib.rs\")).unwrap();\n     // Run xargo\n-    if !Command::new(\"xargo\").arg(\"build\").arg(\"-q\")\n+    let target = get_arg_flag_value(\"--target\");\n+    let mut command = Command::new(\"xargo\");\n+    command.arg(\"build\").arg(\"-q\")\n         .current_dir(&dir)\n         .env(\"RUSTFLAGS\", miri::miri_default_args().join(\" \"))\n-        .env(\"XARGO_HOME\", dir.to_str().unwrap())\n-        .status().unwrap().success()\n+        .env(\"XARGO_HOME\", dir.to_str().unwrap());\n+    if let Some(ref target) = target {\n+        command.arg(\"--target\").arg(&target);\n+    }\n+    if !command.status().unwrap().success()\n     {\n         show_error(format!(\"Failed to run xargo\"));\n     }\n \n-    // That should be it!\n-    let sysroot = dir.join(\"HOST\");\n+    // That should be it!  But we need to figure out where xargo built stuff.\n+    // Unfortunately, it puts things into a different directory when the\n+    // architecture matches the host.\n+    let is_host = match target {\n+        None => true,\n+        Some(target) => target == rustc_version::version_meta().unwrap().host,\n+    };\n+    let sysroot = if is_host { dir.join(\"HOST\") } else { PathBuf::from(dir) };\n     std::env::set_var(\"MIRI_SYSROOT\", &sysroot);\n     if !ask_user {\n         println!(\"A libstd for miri is now available in `{}`\", sysroot.display());"}]}