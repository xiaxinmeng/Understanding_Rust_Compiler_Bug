{"sha": "a24ca036601f0bba22cb73fa9e90893f26779b26", "node_id": "C_kwDOAAsO6NoAKGEyNGNhMDM2NjAxZjBiYmEyMmNiNzNmYTllOTA4OTNmMjY3NzliMjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-12T10:14:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-12T10:14:29Z"}, "message": "Rollup merge of #97992 - m-ou-se:stabilize-scoped-threads, r=joshtriplett\n\nStabilize scoped threads.\n\nTracking issue: https://github.com/rust-lang/rust/issues/93203\n\nFCP finished here: https://github.com/rust-lang/rust/issues/93203#issuecomment-1152249466", "tree": {"sha": "2b504a9b85fc0349abaecadcb08644ebd47358e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b504a9b85fc0349abaecadcb08644ebd47358e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24ca036601f0bba22cb73fa9e90893f26779b26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJipbyFCRBK7hj4Ov3rIwAANt8IAFsVeelVt+1PpJs79ppq7Mcz\nJb1U9+5W4FzZnup7h18gV+dfosIxJZy46eAKv//laLCE+sZkv+aAmYfjTUMyEdj1\nYhDiUQVwSBhu6XGE85a2xHZ1SfgiRX2hsWHt259VrkwEMIshVqyuxHCQS+4JI4/A\nt5yg00IIr0LS8kSMxtJVpSFQ4x/YL4gsbjLULlvu3kLbCN0RkKFuO/wPZjiAryPx\nSlV8H+PjKahcI6pVgISLFDc0pqlzyEpblsRI3qlIuNmurFFV6kZrq8ARApD8Bqx1\no7hLypxD98Iiafr5BEYKGakA+g29TmX6RKoNfYRmNJK5cafnA0BNH5BrLYSB0lI=\n=FI6t\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b504a9b85fc0349abaecadcb08644ebd47358e6\nparent 265e0f0d4b89038052f80c0332608dda9d87af6b\nparent ae0a533b0b1f53a9fce48b51d2ff4cc9f3c41699\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655028869 +0200\ncommitter GitHub <noreply@github.com> 1655028869 +0200\n\nRollup merge of #97992 - m-ou-se:stabilize-scoped-threads, r=joshtriplett\n\nStabilize scoped threads.\n\nTracking issue: https://github.com/rust-lang/rust/issues/93203\n\nFCP finished here: https://github.com/rust-lang/rust/issues/93203#issuecomment-1152249466\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24ca036601f0bba22cb73fa9e90893f26779b26", "html_url": "https://github.com/rust-lang/rust/commit/a24ca036601f0bba22cb73fa9e90893f26779b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24ca036601f0bba22cb73fa9e90893f26779b26/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265e0f0d4b89038052f80c0332608dda9d87af6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/265e0f0d4b89038052f80c0332608dda9d87af6b", "html_url": "https://github.com/rust-lang/rust/commit/265e0f0d4b89038052f80c0332608dda9d87af6b"}, {"sha": "ae0a533b0b1f53a9fce48b51d2ff4cc9f3c41699", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0a533b0b1f53a9fce48b51d2ff4cc9f3c41699", "html_url": "https://github.com/rust-lang/rust/commit/ae0a533b0b1f53a9fce48b51d2ff4cc9f3c41699"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "cedeb27d6d95a3c26b496e8029872b05eb410241", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a24ca036601f0bba22cb73fa9e90893f26779b26/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24ca036601f0bba22cb73fa9e90893f26779b26/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=a24ca036601f0bba22cb73fa9e90893f26779b26", "patch": "@@ -350,7 +350,7 @@ impl AtomicBool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// #![feature(atomic_from_mut, inline_const)]\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let mut some_bools = [const { AtomicBool::new(false) }; 10];\n@@ -381,7 +381,7 @@ impl AtomicBool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_from_mut, scoped_threads)]\n+    /// #![feature(atomic_from_mut)]\n     /// use std::sync::atomic::{AtomicBool, Ordering};\n     ///\n     /// let mut some_bools = [false; 10];\n@@ -1015,7 +1015,7 @@ impl<T> AtomicPtr<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// #![feature(atomic_from_mut, inline_const)]\n     /// use std::ptr::null_mut;\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n@@ -1052,7 +1052,7 @@ impl<T> AtomicPtr<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(atomic_from_mut, scoped_threads)]\n+    /// #![feature(atomic_from_mut)]\n     /// use std::ptr::null_mut;\n     /// use std::sync::atomic::{AtomicPtr, Ordering};\n     ///\n@@ -1607,7 +1607,7 @@ macro_rules! atomic_int {\n             /// # Examples\n             ///\n             /// ```\n-            /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+            /// #![feature(atomic_from_mut, inline_const)]\n             #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n             ///\n             #[doc = concat!(\"let mut some_ints = [const { \", stringify!($atomic_type), \"::new(0) }; 10];\")]\n@@ -1640,7 +1640,7 @@ macro_rules! atomic_int {\n             /// # Examples\n             ///\n             /// ```\n-            /// #![feature(atomic_from_mut, scoped_threads)]\n+            /// #![feature(atomic_from_mut)]\n             #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n             ///\n             /// let mut some_ints = [0; 10];"}, {"sha": "f7af66ae5b51f77f68aff283b2e08c779af63c44", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a24ca036601f0bba22cb73fa9e90893f26779b26/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24ca036601f0bba22cb73fa9e90893f26779b26/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=a24ca036601f0bba22cb73fa9e90893f26779b26", "patch": "@@ -183,10 +183,10 @@ use crate::time::Duration;\n #[macro_use]\n mod local;\n \n-#[unstable(feature = \"scoped_threads\", issue = \"93203\")]\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n mod scoped;\n \n-#[unstable(feature = \"scoped_threads\", issue = \"93203\")]\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub use scoped::{scope, Scope, ScopedJoinHandle};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4fd076e4a2d4be477070e26855fe9deb4f66a1c2", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a24ca036601f0bba22cb73fa9e90893f26779b26/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24ca036601f0bba22cb73fa9e90893f26779b26/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=a24ca036601f0bba22cb73fa9e90893f26779b26", "patch": "@@ -9,6 +9,7 @@ use crate::sync::Arc;\n /// A scope to spawn scoped threads in.\n ///\n /// See [`scope`] for details.\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub struct Scope<'scope, 'env: 'scope> {\n     data: ScopeData,\n     /// Invariance over 'scope, to make sure 'scope cannot shrink,\n@@ -17,8 +18,6 @@ pub struct Scope<'scope, 'env: 'scope> {\n     /// Without invariance, this would compile fine but be unsound:\n     ///\n     /// ```compile_fail,E0373\n-    /// #![feature(scoped_threads)]\n-    ///\n     /// std::thread::scope(|s| {\n     ///     s.spawn(|| {\n     ///         let a = String::from(\"abcd\");\n@@ -33,6 +32,7 @@ pub struct Scope<'scope, 'env: 'scope> {\n /// An owned permission to join on a scoped thread (block on its termination).\n ///\n /// See [`Scope::spawn`] for details.\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub struct ScopedJoinHandle<'scope, T>(JoinInner<'scope, T>);\n \n pub(super) struct ScopeData {\n@@ -82,7 +82,6 @@ impl ScopeData {\n /// # Example\n ///\n /// ```\n-/// #![feature(scoped_threads)]\n /// use std::thread;\n ///\n /// let mut a = vec![1, 2, 3];\n@@ -126,6 +125,7 @@ impl ScopeData {\n ///\n /// The `'env: 'scope` bound is part of the definition of the `Scope` type.\n #[track_caller]\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub fn scope<'env, F, T>(f: F) -> T\n where\n     F: for<'scope> FnOnce(&'scope Scope<'scope, 'env>) -> T,\n@@ -183,6 +183,7 @@ impl<'scope, 'env> Scope<'scope, 'env> {\n     /// to recover from such errors.\n     ///\n     /// [`join`]: ScopedJoinHandle::join\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn spawn<F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>\n     where\n         F: FnOnce() -> T + Send + 'scope,\n@@ -207,7 +208,6 @@ impl Builder {\n     /// # Example\n     ///\n     /// ```\n-    /// #![feature(scoped_threads)]\n     /// use std::thread;\n     ///\n     /// let mut a = vec![1, 2, 3];\n@@ -240,6 +240,7 @@ impl Builder {\n     /// a.push(4);\n     /// assert_eq!(x, a.len());\n     /// ```\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn spawn_scoped<'scope, 'env, F, T>(\n         self,\n         scope: &'scope Scope<'scope, 'env>,\n@@ -259,8 +260,6 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(scoped_threads)]\n-    ///\n     /// use std::thread;\n     ///\n     /// thread::scope(|s| {\n@@ -271,6 +270,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     /// });\n     /// ```\n     #[must_use]\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn thread(&self) -> &Thread {\n         &self.0.thread\n     }\n@@ -292,8 +292,6 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(scoped_threads)]\n-    ///\n     /// use std::thread;\n     ///\n     /// thread::scope(|s| {\n@@ -303,6 +301,7 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     ///     assert!(t.join().is_err());\n     /// });\n     /// ```\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn join(self) -> Result<T> {\n         self.0.join()\n     }\n@@ -316,11 +315,13 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     ///\n     /// This function does not block. To block while waiting on the thread to finish,\n     /// use [`join`][Self::join].\n+    #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n     pub fn is_finished(&self) -> bool {\n         Arc::strong_count(&self.0.packet) == 1\n     }\n }\n \n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n impl fmt::Debug for Scope<'_, '_> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Scope\")\n@@ -331,6 +332,7 @@ impl fmt::Debug for Scope<'_, '_> {\n     }\n }\n \n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n impl<'scope, T> fmt::Debug for ScopedJoinHandle<'scope, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"ScopedJoinHandle\").finish_non_exhaustive()"}]}