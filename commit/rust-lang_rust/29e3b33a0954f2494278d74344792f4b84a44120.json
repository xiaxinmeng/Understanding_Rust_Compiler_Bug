{"sha": "29e3b33a0954f2494278d74344792f4b84a44120", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTNiMzNhMDk1NGYyNDk0Mjc4ZDc0MzQ0NzkyZjRiODRhNDQxMjA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-01T16:18:57Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:42Z"}, "message": "std::rand: make the windows OSRng more correct, remove some C++.\n\nThis lets the C++ code in the rt handle the (slightly) tricky parts of\nrandom number generation: e.g. error detection/handling, and using the\nvalues of the `#define`d options to the various functions.", "tree": {"sha": "5291470d03ec069c78c8003e45bb57619b387a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5291470d03ec069c78c8003e45bb57619b387a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e3b33a0954f2494278d74344792f4b84a44120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e3b33a0954f2494278d74344792f4b84a44120", "html_url": "https://github.com/rust-lang/rust/commit/29e3b33a0954f2494278d74344792f4b84a44120", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e3b33a0954f2494278d74344792f4b84a44120/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9706338d56599ea3073b5f8e93c2e769431a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9706338d56599ea3073b5f8e93c2e769431a48", "html_url": "https://github.com/rust-lang/rust/commit/fb9706338d56599ea3073b5f8e93c2e769431a48"}], "stats": {"total": 262, "additions": 110, "deletions": 152}, "files": [{"sha": "412e25bed4de2caacb2ef2336a98ceb10e0c8bf6", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29e3b33a0954f2494278d74344792f4b84a44120/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/29e3b33a0954f2494278d74344792f4b84a44120/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=29e3b33a0954f2494278d74344792f4b84a44120", "patch": "@@ -86,7 +86,6 @@ RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/sync/lock_and_signal.cpp \\\n               rt/sync/rust_thread.cpp \\\n               rt/rust_builtin.cpp \\\n-              rt/rust_rng.cpp \\\n               rt/rust_upcall.cpp \\\n               rt/rust_uv.cpp \\\n               rt/miniz.cpp \\"}, {"sha": "7a4e0aa95c6dbd394e148684e94ecbeada52c161", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/29e3b33a0954f2494278d74344792f4b84a44120/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e3b33a0954f2494278d74344792f4b84a44120/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=29e3b33a0954f2494278d74344792f4b84a44120", "patch": "@@ -19,12 +19,8 @@ use rand::reader::ReaderRng;\n #[cfg(unix)]\n use rt::io::{file, Open, Read};\n \n-#[cfg(windows)]\n-use ptr;\n #[cfg(windows)]\n use cast;\n-#[cfg(windows)]\n-use libc::{GetLastError, FALSE};\n \n /// A random number generator that retrieves randomness straight from\n /// the operating system. On Unix-like systems this reads from\n@@ -40,9 +36,6 @@ pub struct OSRng {\n /// `/dev/urandom`, on Windows this uses `CryptGenRandom`.\n ///\n /// This does not block.\n-///\n-/// XXX: it is unlikely that this is threadsafe with the use of\n-/// GetLastError.\n #[cfg(windows)]\n pub struct OSRng {\n     priv hcryptprov: raw::HCRYPTPROV\n@@ -60,12 +53,10 @@ impl OSRng {\n \n     /// Create a new `OSRng`.\n     #[cfg(windows)]\n+    #[fixed_stack_segment] #[inline(never)]\n     pub fn new() -> OSRng {\n-        let hcp = ptr::mut_null();\n-        // TODO these two 0 constants are incorrect!\n-        if unsafe { raw::CryptAcquireContext(hcp, ptr::null(), ptr::null(), 0, 0); } == FALSE {\n-            fail!(\"CryptAcquireContext failed with error %u\", unsafe {GetLastError()})\n-        }\n+        let mut hcp = 0;\n+        unsafe {raw::rust_win32_rand_acquire(&mut hcp)};\n \n         OSRng { hcryptprov: hcp }\n     }\n@@ -96,9 +87,12 @@ impl Rng for OSRng {\n         self.fill_bytes(v);\n         unsafe { cast::transmute(v) }\n     }\n+    #[fixed_stack_segment] #[inline(never)]\n     fn fill_bytes(&mut self, v: &mut [u8]) {\n-        if unsafe { raw::CryptGenRandom(self.hcryptprov, v.len(), v.unsafe_mut_ref(0)) } == FALSE {\n-            fail!(\"CryptGenRandom failed with error %u\", unsafe {GetLastError()})\n+        use libc::DWORD;\n+\n+        do v.as_mut_buf |ptr, len| {\n+            unsafe {raw::rust_win32_rand_gen(self.hcryptprov, len as DWORD, ptr)}\n         }\n     }\n }\n@@ -111,27 +105,24 @@ impl Drop for OSRng {\n     }\n \n     #[cfg(windows)]\n+    #[fixed_stack_segment] #[inline(never)]\n     fn drop(&mut self) {\n-        // TODO this 0 means?\n-        if unsafe { raw::CryptReleaseContext(self.hcryptprov, 0)} == FALSE {\n-            fail!(\"CryptReleaseContext failed with error %u\", unsafe {GetLastError()})\n-        }\n+        unsafe {raw::rust_win32_rand_release(self.hcryptprov)}\n     }\n }\n \n-#[abi = \"cdecl\"]\n #[cfg(windows)]\n mod raw {\n-    use libc::{LPCTSTR, DWORD, BOOL, BYTE};\n+    use libc::{c_long, DWORD, BYTE};\n+\n+    pub type HCRYPTPROV = c_long;\n \n-    enum HCRYPTPROV_opaque {}\n-    pub type HCRYPTPROV = *CRYPTPROV;\n+    // these functions are implemented so that they either succeed or\n+    // abort(), so we can just assume they work when we call them.\n     extern {\n-        pub fn CryptAcquireContext(phProv: *mut HCRYPTPROV,\n-                                   pszContainer: LPCTSTR, pszProvider: LPCTSTR,\n-                                   dwProvType: DWORD, dwFlags: DWORD) -> BOOL;\n-        pub fn CryptGenRandom(hProv: HCRYPTPROV, dwLen: DWORD, pbBuffer: *mut BYTE) -> BOOL;\n-        pub fn CryptReleaseContext(hProv: HCRYPTPROV, dwFlags: DWORD) -> BOOL;\n+        pub fn rust_win32_rand_acquire(phProv: *mut HCRYPTPROV);\n+        pub fn rust_win32_rand_gen(hProv: HCRYPTPROV, dwLen: DWORD, pbBuffer: *mut BYTE);\n+        pub fn rust_win32_rand_release(hProv: HCRYPTPROV);\n     }\n }\n "}, {"sha": "32a97100fa1f644a0abbc36273138f5ed103b1ca", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/29e3b33a0954f2494278d74344792f4b84a44120/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e3b33a0954f2494278d74344792f4b84a44120/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=29e3b33a0954f2494278d74344792f4b84a44120", "patch": "@@ -8,15 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use option::{Some, None};\n use rt::io::Reader;\n use rt::io::ReaderByteConversions;\n \n use rand::Rng;\n \n /// An RNG that reads random bytes straight from a `Reader`. This will\n-/// work best with an infinite reader, but this is not required. The\n-/// semantics of reading past the end of the reader are the same as\n-/// those of the `read` method of the inner `Reader`.\n+/// work best with an infinite reader, but this is not required.\n+///\n+/// It will fail if it there is insufficient data to fulfill a request.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::rand::reader;\n+/// use std::rt::io::mem;\n+///\n+/// fn main() {\n+///     let mut rng = reader::ReaderRng::new(mem::MemReader::new(~[1,2,3,4,5,6,7,8]));\n+///     println!(\"{}\", rng.gen::<uint>());\n+/// }\n+/// ```\n pub struct ReaderRng<R> {\n     priv reader: R\n }\n@@ -32,8 +45,6 @@ impl<R: Reader> ReaderRng<R> {\n \n impl<R: Reader> Rng for ReaderRng<R> {\n     fn next_u32(&mut self) -> u32 {\n-        // XXX which is better: consistency between big/little-endian\n-        // platforms, or speed.\n         if cfg!(target_endian=\"little\") {\n             self.reader.read_le_u32_()\n         } else {\n@@ -48,8 +59,13 @@ impl<R: Reader> Rng for ReaderRng<R> {\n         }\n     }\n     fn fill_bytes(&mut self, v: &mut [u8]) {\n-        // XXX: check that we filled `v``\n-        let _n = self.reader.read(v);\n+        if v.len() == 0 { return }\n+        match self.reader.read(v) {\n+            Some(n) if n == v.len() => return,\n+            Some(n) => fail2!(\"ReaderRng.fill_bytes could not fill buffer: \\\n+                              read {} out of {} bytes.\", n, v.len()),\n+            None => fail2!(\"ReaderRng.fill_bytes reached eof.\")\n+        }\n     }\n }\n \n@@ -91,4 +107,12 @@ mod test {\n \n         assert_eq!(v, w);\n     }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_reader_rng_insufficient_bytes() {\n+        let mut rng = ReaderRng::new(MemReader::new(~[]));\n+        let mut v = [0u8, .. 3];\n+        rng.fill_bytes(v);\n+    }\n }"}, {"sha": "618921f8e080b508f39f68860305f118020d72aa", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29e3b33a0954f2494278d74344792f4b84a44120/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e3b33a0954f2494278d74344792f4b84a44120/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=29e3b33a0954f2494278d74344792f4b84a44120", "patch": "@@ -26,7 +26,7 @@ use rt::local::Local;\n use rt::rtio::{RemoteCallback, PausibleIdleCallback};\n use borrow::{to_uint};\n use cell::Cell;\n-use rand::{SeedableRng, XorShiftRng, Rng, Rand};\n+use rand::{XorShiftRng, Rng, Rand};\n use iter::range;\n use vec::{OwnedVector};\n \n@@ -862,6 +862,7 @@ fn new_sched_rng() -> XorShiftRng {\n     use ptr::RawPtr;\n     use vec::MutableVector;\n     use iter::Iterator;\n+    use rand::SeedableRng;\n \n     // XXX: this could use io::native::file, when it works.\n     let file = do \"/dev/urandom\".with_c_str |name| {"}, {"sha": "d1d4286a7c62959228ee5b5ffe5afbaf82813f82", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/29e3b33a0954f2494278d74344792f4b84a44120/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/29e3b33a0954f2494278d74344792f4b84a44120/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=29e3b33a0954f2494278d74344792f4b84a44120", "patch": "@@ -15,7 +15,6 @@\n #include \"sync/lock_and_signal.h\"\n #include \"memory_region.h\"\n #include \"boxed_region.h\"\n-#include \"rust_rng.h\"\n #include \"vg/valgrind.h\"\n #include \"sp.h\"\n \n@@ -69,11 +68,6 @@ rust_env_pairs() {\n }\n #endif\n \n-extern \"C\" CDECL void\n-rand_gen_seed(uint8_t* dest, size_t size) {\n-    rng_gen_seed(dest, size);\n-}\n-\n extern \"C\" CDECL char*\n #if defined(__WIN32__)\n rust_list_dir_val(WIN32_FIND_DATA* entry_ptr) {\n@@ -654,6 +648,62 @@ rust_unset_sigprocmask() {\n \n #endif\n \n+#if defined(__WIN32__)\n+void\n+win32_require(LPCTSTR fn, BOOL ok) {\n+    if (!ok) {\n+        LPTSTR buf;\n+        DWORD err = GetLastError();\n+        FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n+                      FORMAT_MESSAGE_FROM_SYSTEM |\n+                      FORMAT_MESSAGE_IGNORE_INSERTS,\n+                      NULL, err,\n+                      MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n+                      (LPTSTR) &buf, 0, NULL );\n+        fprintf(stderr, \"%s failed with error %ld: %s\", fn, err, buf);\n+        LocalFree((HLOCAL)buf);\n+        abort();\n+    }\n+}\n+\n+extern \"C\" CDECL void\n+rust_win32_rand_acquire(HCRYPTPROV* phProv) {\n+    win32_require\n+        (_T(\"CryptAcquireContext\"),\n+         CryptAcquireContext(phProv, NULL, NULL, PROV_RSA_FULL,\n+                             CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n+\n+}\n+extern \"C\" CDECL void\n+rust_win32_rand_gen(HCRYPTPROV hProv, DWORD dwLen, BYTE* pbBuffer) {\n+    win32_require\n+        (_T(\"CryptGenRandom\"), CryptGenRandom(hProv, dwLen, pbBuffer));\n+}\n+extern \"C\" CDECL void\n+rust_win32_rand_release(HCRYPTPROV hProv) {\n+    win32_require\n+        (_T(\"CryptReleaseContext\"), CryptReleaseContext(hProv, 0));\n+}\n+\n+#else\n+\n+// these symbols are listed in rustrt.def.in, so they need to exist; but they\n+// should never be called.\n+\n+extern \"C\" CDECL void\n+rust_win32_rand_acquire() {\n+    abort();\n+}\n+extern \"C\" CDECL void\n+rust_win32_rand_gen() {\n+    abort();\n+}\n+extern \"C\" CDECL void\n+rust_win32_rand_release() {\n+    abort();\n+}\n+\n+#endif\n //\n // Local Variables:\n // mode: C++"}, {"sha": "89754f94b7096842e1076a92229b044762e34c19", "filename": "src/rt/rust_rng.cpp", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/fb9706338d56599ea3073b5f8e93c2e769431a48/src%2Frt%2Frust_rng.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fb9706338d56599ea3073b5f8e93c2e769431a48/src%2Frt%2Frust_rng.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.cpp?ref=fb9706338d56599ea3073b5f8e93c2e769431a48", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#include \"rust_globals.h\"\n-#include \"rust_rng.h\"\n-#include \"rust_util.h\"\n-\n-\n-#ifdef __WIN32__\n-void\n-win32_require(LPCTSTR fn, BOOL ok) {\n-    if (!ok) {\n-        LPTSTR buf;\n-        DWORD err = GetLastError();\n-        FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n-                      FORMAT_MESSAGE_FROM_SYSTEM |\n-                      FORMAT_MESSAGE_IGNORE_INSERTS,\n-                      NULL, err,\n-                      MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n-                      (LPTSTR) &buf, 0, NULL );\n-        fprintf(stderr, \"%s failed with error %ld: %s\", fn, err, buf);\n-        LocalFree((HLOCAL)buf);\n-        abort();\n-    }\n-}\n-#endif\n-\n-void\n-rng_gen_seed(uint8_t* dest, size_t size) {\n-#ifdef __WIN32__\n-    HCRYPTPROV hProv;\n-    win32_require\n-        (_T(\"CryptAcquireContext\"),\n-         CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL,\n-                             CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n-    win32_require\n-        (_T(\"CryptGenRandom\"), CryptGenRandom(hProv, size, (BYTE*) dest));\n-    win32_require\n-        (_T(\"CryptReleaseContext\"), CryptReleaseContext(hProv, 0));\n-#else\n-    int fd = open(\"/dev/urandom\", O_RDONLY);\n-    if (fd == -1) {\n-        fprintf(stderr, \"error opening /dev/urandom: %s\", strerror(errno));\n-        abort();\n-    }\n-    size_t amount = 0;\n-    do {\n-        ssize_t ret = read(fd, dest+amount, size-amount);\n-        if (ret < 0) {\n-            fprintf(stderr, \"error reading /dev/urandom: %s\", strerror(errno));\n-            abort();\n-        }\n-        else if (ret == 0) {\n-            fprintf(stderr, \"somehow hit eof reading from /dev/urandom\");\n-            abort();\n-        }\n-        amount += (size_t)ret;\n-    } while (amount < size);\n-    int ret = close(fd);\n-    if (ret != 0) {\n-        fprintf(stderr, \"error closing /dev/urandom: %s\", strerror(errno));\n-        // FIXME #3697: Why does this fail sometimes?\n-        // abort();\n-    }\n-#endif\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}, {"sha": "08335a6f73f79ab777bd6bd1ba71c66e710cfb36", "filename": "src/rt/rust_rng.h", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fb9706338d56599ea3073b5f8e93c2e769431a48/src%2Frt%2Frust_rng.h", "raw_url": "https://github.com/rust-lang/rust/raw/fb9706338d56599ea3073b5f8e93c2e769431a48/src%2Frt%2Frust_rng.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.h?ref=fb9706338d56599ea3073b5f8e93c2e769431a48", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_RNG_H\n-#define RUST_RNG_H\n-\n-void rng_gen_seed(uint8_t* dest, size_t size);\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//\n-\n-#endif"}, {"sha": "30f60c662e991c797fc436178fa605a47f2390d9", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29e3b33a0954f2494278d74344792f4b84a44120/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/29e3b33a0954f2494278d74344792f4b84a44120/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=29e3b33a0954f2494278d74344792f4b84a44120", "patch": "@@ -9,7 +9,6 @@ rust_localtime\n rust_timegm\n rust_mktime\n precise_time_ns\n-rand_gen_seed\n rust_path_is_dir\n rust_path_exists\n rust_get_stdin\n@@ -23,6 +22,9 @@ rust_log_console_off\n rust_should_log_console\n rust_unset_sigprocmask\n rust_env_pairs\n+rust_win32_rand_acquire\n+rust_win32_rand_gen\n+rust_win32_rand_release\n upcall_rust_personality\n upcall_call_shim_on_c_stack\n upcall_call_shim_on_rust_stack"}]}