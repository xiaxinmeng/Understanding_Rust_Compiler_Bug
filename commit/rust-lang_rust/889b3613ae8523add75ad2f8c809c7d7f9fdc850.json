{"sha": "889b3613ae8523add75ad2f8c809c7d7f9fdc850", "node_id": "C_kwDOAAsO6NoAKDg4OWIzNjEzYWU4NTIzYWRkNzVhZDJmOGM4MDljN2Q3ZjlmZGM4NTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T13:38:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T13:38:50Z"}, "message": "Auto merge of #8990 - tsoutsman:master, r=llogiq\n\nFix `let_undescore_lock` false-positive when binding without locking\n\nFixes #8486.\n\nchangelog: Fix `let_undescore_lock` false-positive when binding without locking.", "tree": {"sha": "5757811b1a96440c6e95ac4a0bb344c7a1f7cf90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5757811b1a96440c6e95ac4a0bb344c7a1f7cf90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/889b3613ae8523add75ad2f8c809c7d7f9fdc850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/889b3613ae8523add75ad2f8c809c7d7f9fdc850", "html_url": "https://github.com/rust-lang/rust/commit/889b3613ae8523add75ad2f8c809c7d7f9fdc850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/889b3613ae8523add75ad2f8c809c7d7f9fdc850/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b762ee330a1f6f366d2316aa999a541663bce1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b762ee330a1f6f366d2316aa999a541663bce1d", "html_url": "https://github.com/rust-lang/rust/commit/6b762ee330a1f6f366d2316aa999a541663bce1d"}, {"sha": "65f700fa894ba833251bfe0217dc4634b75ea6bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f700fa894ba833251bfe0217dc4634b75ea6bc", "html_url": "https://github.com/rust-lang/rust/commit/65f700fa894ba833251bfe0217dc4634b75ea6bc"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "176787497ebf2e655f93ba77b15e1c41436aa87a", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/889b3613ae8523add75ad2f8c809c7d7f9fdc850/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889b3613ae8523add75ad2f8c809c7d7f9fdc850/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=889b3613ae8523add75ad2f8c809c7d7f9fdc850", "patch": "@@ -99,12 +99,13 @@ declare_clippy_lint! {\n \n declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_DROP]);\n \n-const SYNC_GUARD_PATHS: [&[&str]; 5] = [\n+const SYNC_GUARD_PATHS: [&[&str]; 6] = [\n     &paths::MUTEX_GUARD,\n     &paths::RWLOCK_READ_GUARD,\n     &paths::RWLOCK_WRITE_GUARD,\n-    &paths::PARKING_LOT_RAWMUTEX,\n-    &paths::PARKING_LOT_RAWRWLOCK,\n+    &paths::PARKING_LOT_MUTEX_GUARD,\n+    &paths::PARKING_LOT_RWLOCK_READ_GUARD,\n+    &paths::PARKING_LOT_RWLOCK_WRITE_GUARD,\n ];\n \n impl<'tcx> LateLintPass<'tcx> for LetUnderscore {"}, {"sha": "ceef1d342e2042c67a521a3fcc7d246fdbe24086", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889b3613ae8523add75ad2f8c809c7d7f9fdc850/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889b3613ae8523add75ad2f8c809c7d7f9fdc850/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=889b3613ae8523add75ad2f8c809c7d7f9fdc850", "patch": "@@ -84,8 +84,6 @@ pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n pub const OS_STRING_AS_OS_STR: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsString\", \"as_os_str\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n-pub const PARKING_LOT_RAWMUTEX: [&str; 3] = [\"parking_lot\", \"raw_mutex\", \"RawMutex\"];\n-pub const PARKING_LOT_RAWRWLOCK: [&str; 3] = [\"parking_lot\", \"raw_rwlock\", \"RawRwLock\"];\n pub const PARKING_LOT_MUTEX_GUARD: [&str; 3] = [\"lock_api\", \"mutex\", \"MutexGuard\"];\n pub const PARKING_LOT_RWLOCK_READ_GUARD: [&str; 3] = [\"lock_api\", \"rwlock\", \"RwLockReadGuard\"];\n pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 3] = [\"lock_api\", \"rwlock\", \"RwLockWriteGuard\"];"}, {"sha": "7a7c4e9249952911d17b70a3935b86bb166effc5", "filename": "tests/ui/let_underscore_lock.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/889b3613ae8523add75ad2f8c809c7d7f9fdc850/tests%2Fui%2Flet_underscore_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889b3613ae8523add75ad2f8c809c7d7f9fdc850/tests%2Fui%2Flet_underscore_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.rs?ref=889b3613ae8523add75ad2f8c809c7d7f9fdc850", "patch": "@@ -13,6 +13,10 @@ fn main() {\n     let _ = rw.try_read();\n     let _ = rw.try_write();\n \n+    // These shouldn't throw an error.\n+    let _ = m;\n+    let _ = rw;\n+\n     use parking_lot::{lock_api::RawMutex, Mutex, RwLock};\n \n     let p_m: Mutex<()> = Mutex::const_new(RawMutex::INIT, ());\n@@ -24,4 +28,9 @@ fn main() {\n     let p_rw = RwLock::new(0);\n     let _ = p_rw.read();\n     let _ = p_rw.write();\n+\n+    // These shouldn't throw an error.\n+    let _ = p_m;\n+    let _ = p_m1;\n+    let _ = p_rw;\n }"}, {"sha": "4365b48fabb9c676f7b779b11e79d81df36f366f", "filename": "tests/ui/let_underscore_lock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/889b3613ae8523add75ad2f8c809c7d7f9fdc850/tests%2Fui%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/889b3613ae8523add75ad2f8c809c7d7f9fdc850/tests%2Fui%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_lock.stderr?ref=889b3613ae8523add75ad2f8c809c7d7f9fdc850", "patch": "@@ -48,31 +48,31 @@ LL |     let _ = rw.try_write();\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:19:5\n+  --> $DIR/let_underscore_lock.rs:23:5\n    |\n LL |     let _ = p_m.lock();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:22:5\n+  --> $DIR/let_underscore_lock.rs:26:5\n    |\n LL |     let _ = p_m1.lock();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:25:5\n+  --> $DIR/let_underscore_lock.rs:29:5\n    |\n LL |     let _ = p_rw.read();\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n error: non-binding let on a synchronization lock\n-  --> $DIR/let_underscore_lock.rs:26:5\n+  --> $DIR/let_underscore_lock.rs:30:5\n    |\n LL |     let _ = p_rw.write();\n    |     ^^^^^^^^^^^^^^^^^^^^^"}]}