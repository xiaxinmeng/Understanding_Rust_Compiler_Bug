{"sha": "9f1fdecb3c152b9ca0713f7c85589f9447f28961", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMWZkZWNiM2MxNTJiOWNhMDcxM2Y3Yzg1NTg5Zjk0NDdmMjg5NjE=", "commit": {"author": {"name": "Pazzaz", "email": "pazzaz.sundqvist@gmail.com", "date": "2018-07-22T20:15:29Z"}, "committer": {"name": "Pazzaz", "email": "pazzaz.sundqvist@gmail.com", "date": "2018-07-22T20:15:29Z"}, "message": "Simplify vecdeque append test", "tree": {"sha": "00976a8b5fb2913f4a03c28a293a90a3f66a42c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00976a8b5fb2913f4a03c28a293a90a3f66a42c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1fdecb3c152b9ca0713f7c85589f9447f28961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1fdecb3c152b9ca0713f7c85589f9447f28961", "html_url": "https://github.com/rust-lang/rust/commit/9f1fdecb3c152b9ca0713f7c85589f9447f28961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1fdecb3c152b9ca0713f7c85589f9447f28961/comments", "author": {"login": "Pazzaz", "id": 16006944, "node_id": "MDQ6VXNlcjE2MDA2OTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/16006944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pazzaz", "html_url": "https://github.com/Pazzaz", "followers_url": "https://api.github.com/users/Pazzaz/followers", "following_url": "https://api.github.com/users/Pazzaz/following{/other_user}", "gists_url": "https://api.github.com/users/Pazzaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pazzaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pazzaz/subscriptions", "organizations_url": "https://api.github.com/users/Pazzaz/orgs", "repos_url": "https://api.github.com/users/Pazzaz/repos", "events_url": "https://api.github.com/users/Pazzaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Pazzaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pazzaz", "id": 16006944, "node_id": "MDQ6VXNlcjE2MDA2OTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/16006944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pazzaz", "html_url": "https://github.com/Pazzaz", "followers_url": "https://api.github.com/users/Pazzaz/followers", "following_url": "https://api.github.com/users/Pazzaz/following{/other_user}", "gists_url": "https://api.github.com/users/Pazzaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pazzaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pazzaz/subscriptions", "organizations_url": "https://api.github.com/users/Pazzaz/orgs", "repos_url": "https://api.github.com/users/Pazzaz/repos", "events_url": "https://api.github.com/users/Pazzaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Pazzaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bc854b8c95ccf8e229d3982466b71ae778d04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bc854b8c95ccf8e229d3982466b71ae778d04e", "html_url": "https://github.com/rust-lang/rust/commit/24bc854b8c95ccf8e229d3982466b71ae778d04e"}], "stats": {"total": 106, "additions": 64, "deletions": 42}, "files": [{"sha": "6efd3d60060e96df17359b4dc9d4db099a25e231", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 64, "deletions": 42, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/9f1fdecb3c152b9ca0713f7c85589f9447f28961/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1fdecb3c152b9ca0713f7c85589f9447f28961/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=9f1fdecb3c152b9ca0713f7c85589f9447f28961", "patch": "@@ -929,53 +929,75 @@ fn test_append() {\n }\n \n #[test]\n-fn test_append_advanced() {\n-    fn check(\n-        a_push_back: usize,\n-        a_pop_back: usize,\n-        b_push_back: usize,\n-        b_pop_back: usize,\n-        a_push_front: usize,\n-        a_pop_front: usize,\n-        b_push_front: usize,\n-        b_pop_front: usize\n-    ) {\n-        let mut taken = 0;\n-        let mut a = VecDeque::new();\n-        let mut b = VecDeque::new();\n-        for n in (taken..).take(a_push_back) {\n-            a.push_back(n);\n+fn test_append_permutations() {\n+    fn construct_vec_deque(\n+        push_back: usize,\n+        pop_back: usize,\n+        push_front: usize,\n+        pop_front: usize,\n+    ) -> VecDeque<usize> {\n+        let mut out = VecDeque::new();\n+        for a in 0..push_back {\n+            out.push_back(a);\n         }\n-        taken += a_push_back;\n-        for n in (taken..).take(a_push_front) {\n-            a.push_front(n);\n+        for b in 0..push_front {\n+            out.push_front(push_back + b);\n         }\n-        taken += a_push_front;\n-        for n in (taken..).take(b_push_back) {\n-            b.push_back(n);\n+        for _ in 0..pop_back {\n+            out.pop_back();\n         }\n-        taken += b_push_back;\n-        for n in (taken..).take(b_push_front) {\n-            b.push_front(n);\n+        for _ in 0..pop_front {\n+            out.pop_front();\n         }\n-\n-        a.drain(..a_pop_back);\n-        a.drain(a_pop_front..);\n-        b.drain(..b_pop_back);\n-        b.drain(b_pop_front..);\n-        let checked = a.iter().chain(b.iter()).map(|&x| x).collect::<Vec<usize>>();\n-        a.append(&mut b);\n-        assert_eq!(a, checked);\n-        assert!(b.is_empty());\n+        out\n     }\n-    for a_push in 0..17 {\n-        for a_pop in 0..a_push {\n-            for b_push in 0..17 {\n-                for b_pop in 0..b_push {\n-                    check(a_push, a_pop, b_push, b_pop, 0, 0, 0, 0);\n-                    check(a_push, a_pop, b_push, b_pop, a_push, 0, 0, 0);\n-                    check(a_push, a_pop, b_push, b_pop, 0, 0, b_push, 0);\n-                    check(0, 0, 0, 0, a_push, a_pop, b_push, b_pop);\n+\n+    const MAX: usize = 5;\n+\n+    // Many different permutations of both the `VecDeque` getting appended to\n+    // and the one getting appended are generated to check `append`.\n+    // This ensures all 6 code paths of `append` are tested.\n+    for src_push_back in 0..MAX {\n+        for src_push_front in 0..MAX {\n+            // doesn't pop more values than are pushed\n+            for src_pop_back in 0..(src_push_back + src_push_front) {\n+                for src_pop_front in 0..(src_push_back + src_push_front - src_pop_back) {\n+\n+                    let src = construct_vec_deque(\n+                        src_push_back,\n+                        src_pop_back,\n+                        src_push_front,\n+                        src_pop_front,\n+                    );\n+\n+                    for dst_push_back in 0..MAX {\n+                        for dst_push_front in 0..MAX {\n+                            for dst_pop_back in 0..(dst_push_back + dst_push_front) {\n+                                for dst_pop_front\n+                                    in 0..(dst_push_back + dst_push_front - dst_pop_back)\n+                                {\n+                                    let mut dst = construct_vec_deque(\n+                                        dst_push_back,\n+                                        dst_pop_back,\n+                                        dst_push_front,\n+                                        dst_pop_front,\n+                                    );\n+                                    let mut src = src.clone();\n+\n+                                    // Assert that appending `src` to `dst` gives the same order\n+                                    // of values as iterating over both in sequence.\n+                                    let correct = dst\n+                                        .iter()\n+                                        .chain(src.iter())\n+                                        .cloned()\n+                                        .collect::<Vec<usize>>();\n+                                    dst.append(&mut src);\n+                                    assert_eq!(dst, correct);\n+                                    assert!(src.is_empty());\n+                                }\n+                            }\n+                        }\n+                    }\n                 }\n             }\n         }"}]}