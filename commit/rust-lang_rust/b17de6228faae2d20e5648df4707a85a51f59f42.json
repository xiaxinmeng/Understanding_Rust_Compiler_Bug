{"sha": "b17de6228faae2d20e5648df4707a85a51f59f42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxN2RlNjIyOGZhYWUyZDIwZTU2NDhkZjQ3MDdhODVhNTFmNTlmNDI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-02T12:45:00Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-02T12:45:00Z"}, "message": "Cargo fmt", "tree": {"sha": "a89a958f9566661aed9a71995c3aeb34f1b3ea4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a89a958f9566661aed9a71995c3aeb34f1b3ea4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17de6228faae2d20e5648df4707a85a51f59f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17de6228faae2d20e5648df4707a85a51f59f42", "html_url": "https://github.com/rust-lang/rust/commit/b17de6228faae2d20e5648df4707a85a51f59f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17de6228faae2d20e5648df4707a85a51f59f42/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "960fec898b643660b866ce050a30568f79344572", "url": "https://api.github.com/repos/rust-lang/rust/commits/960fec898b643660b866ce050a30568f79344572", "html_url": "https://github.com/rust-lang/rust/commit/960fec898b643660b866ce050a30568f79344572"}], "stats": {"total": 111, "additions": 65, "deletions": 46}, "files": [{"sha": "53e697d76ac57e32442e7f64218d33d8ac3e8726", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=b17de6228faae2d20e5648df4707a85a51f59f42", "patch": "@@ -133,8 +133,10 @@ fn format_crate(\n     let files: Vec<_> = targets\n         .into_iter()\n         .filter(|t| t.kind.should_format())\n-        .inspect(|t| if verbosity == Verbosity::Verbose {\n-            println!(\"[{:?}] {:?}\", t.kind, t.path)\n+        .inspect(|t| {\n+            if verbosity == Verbosity::Verbose {\n+                println!(\"[{:?}] {:?}\", t.kind, t.path)\n+            }\n         })\n         .map(|t| t.path)\n         .collect();"}, {"sha": "a35648de5c273eb121261eb355dcb2d577f81f8f", "filename": "src/chains.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=b17de6228faae2d20e5648df4707a85a51f59f42", "patch": "@@ -297,10 +297,12 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n \n // True if the chain is only `?`s.\n fn chain_only_try(exprs: &[ast::Expr]) -> bool {\n-    exprs.iter().all(|e| if let ast::ExprKind::Try(_) = e.node {\n-        true\n-    } else {\n-        false\n+    exprs.iter().all(|e| {\n+        if let ast::ExprKind::Try(_) = e.node {\n+            true\n+        } else {\n+            false\n+        }\n     })\n }\n "}, {"sha": "713ef4922d9ace02c2a80f2f40a71a8e4c6b54ea", "filename": "src/comment.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b17de6228faae2d20e5648df4707a85a51f59f42", "patch": "@@ -311,10 +311,12 @@ fn rewrite_comment_inner(\n             line\n         })\n         .map(|s| left_trim_comment_line(s, &style))\n-        .map(|line| if orig.starts_with(\"/*\") && line_breaks == 0 {\n-            line.trim_left()\n-        } else {\n-            line\n+        .map(|line| {\n+            if orig.starts_with(\"/*\") && line_breaks == 0 {\n+                line.trim_left()\n+            } else {\n+                line\n+            }\n         });\n \n     let mut result = opener.to_owned();"}, {"sha": "89cb29881bd3da74acd1de1bfeb7f266d5bf071b", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=b17de6228faae2d20e5648df4707a85a51f59f42", "patch": "@@ -1198,12 +1198,13 @@ impl<'a> ControlFlow<'a> {\n             context\n                 .codemap\n                 .span_after(mk_sp(lo, self.span.hi()), self.keyword.trim()),\n-            self.pat\n-                .map_or(cond_span.lo(), |p| if self.matcher.is_empty() {\n+            self.pat.map_or(cond_span.lo(), |p| {\n+                if self.matcher.is_empty() {\n                     p.span.lo()\n                 } else {\n                     context.codemap.span_before(self.span, self.matcher.trim())\n-                }),\n+                }\n+            }),\n         );\n \n         let between_kwd_cond_comment = extract_comment(between_kwd_cond, context, shape);\n@@ -2753,13 +2754,17 @@ where\n     if items.len() == 1 {\n         // 3 = \"(\" + \",)\"\n         let nested_shape = shape.sub_width(3)?.visual_indent(1);\n-        return items.next().unwrap().rewrite(context, nested_shape).map(\n-            |s| if context.config.spaces_within_parens() {\n-                format!(\"( {}, )\", s)\n-            } else {\n-                format!(\"({},)\", s)\n-            },\n-        );\n+        return items\n+            .next()\n+            .unwrap()\n+            .rewrite(context, nested_shape)\n+            .map(|s| {\n+                if context.config.spaces_within_parens() {\n+                    format!(\"( {}, )\", s)\n+                } else {\n+                    format!(\"({},)\", s)\n+                }\n+            });\n     }\n \n     let list_lo = context.codemap.span_after(span, \"(\");"}, {"sha": "4bd942d21c91966aa756c4d771f76d562ed7c7c2", "filename": "src/types.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=b17de6228faae2d20e5648df4707a85a51f59f42", "patch": "@@ -670,10 +670,12 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Paren(ref ty) => {\n                 let budget = shape.width.checked_sub(2)?;\n                 ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n-                    .map(|ty_str| if context.config.spaces_within_parens() {\n-                        format!(\"( {} )\", ty_str)\n-                    } else {\n-                        format!(\"({})\", ty_str)\n+                    .map(|ty_str| {\n+                        if context.config.spaces_within_parens() {\n+                            format!(\"( {} )\", ty_str)\n+                        } else {\n+                            format!(\"({})\", ty_str)\n+                        }\n                     })\n             }\n             ast::TyKind::Slice(ref ty) => {\n@@ -683,10 +685,12 @@ impl Rewrite for ast::Ty {\n                     shape.width.checked_sub(2)?\n                 };\n                 ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n-                    .map(|ty_str| if context.config.spaces_within_square_brackets() {\n-                        format!(\"[ {} ]\", ty_str)\n-                    } else {\n-                        format!(\"[{}]\", ty_str)\n+                    .map(|ty_str| {\n+                        if context.config.spaces_within_square_brackets() {\n+                            format!(\"[ {} ]\", ty_str)\n+                        } else {\n+                            format!(\"[{}]\", ty_str)\n+                        }\n                     })\n             }\n             ast::TyKind::Tup(ref items) => rewrite_tuple("}, {"sha": "32072acfc9e6d243b809e2b345ff34d626331860", "filename": "src/vertical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=b17de6228faae2d20e5648df4707a85a51f59f42", "patch": "@@ -191,13 +191,13 @@ fn struct_field_prefix_max_min_width<T: AlignedItem>(\n     fields\n         .iter()\n         .map(|field| {\n-            field\n-                .rewrite_prefix(context, shape)\n-                .and_then(|field_str| if field_str.contains('\\n') {\n+            field.rewrite_prefix(context, shape).and_then(|field_str| {\n+                if field_str.contains('\\n') {\n                     None\n                 } else {\n                     Some(field_str.len())\n-                })\n+                }\n+            })\n         })\n         .fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n             (Some((max_len, min_len)), Some(len)) => {"}, {"sha": "8a4f7302aa461bda7cd6c6d43d6f93e55bced801", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17de6228faae2d20e5648df4707a85a51f59f42/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=b17de6228faae2d20e5648df4707a85a51f59f42", "patch": "@@ -136,13 +136,15 @@ impl<'a> FmtVisitor<'a> {\n                     self.last_pos,\n                     attr_lo.unwrap_or(first_stmt.span.lo()),\n                 ));\n-                let len = CommentCodeSlices::new(&snippet).nth(0).and_then(\n-                    |(kind, _, s)| if kind == CodeCharKind::Normal {\n-                        s.rfind('\\n')\n-                    } else {\n-                        None\n-                    },\n-                );\n+                let len = CommentCodeSlices::new(&snippet)\n+                    .nth(0)\n+                    .and_then(|(kind, _, s)| {\n+                        if kind == CodeCharKind::Normal {\n+                            s.rfind('\\n')\n+                        } else {\n+                            None\n+                        }\n+                    });\n                 if let Some(len) = len {\n                     self.last_pos = self.last_pos + BytePos::from_usize(len);\n                 }"}, {"sha": "29332881c2fda3442ade8dd5f787c439c8b185a0", "filename": "tests/system.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b17de6228faae2d20e5648df4707a85a51f59f42/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17de6228faae2d20e5648df4707a85a51f59f42/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=b17de6228faae2d20e5648df4707a85a51f59f42", "patch": "@@ -446,15 +446,17 @@ struct CharsIgnoreNewlineRepr<'a>(Peekable<Chars<'a>>);\n impl<'a> Iterator for CharsIgnoreNewlineRepr<'a> {\n     type Item = char;\n     fn next(&mut self) -> Option<char> {\n-        self.0.next().map(|c| if c == '\\r' {\n-            if *self.0.peek().unwrap_or(&'\\0') == '\\n' {\n-                self.0.next();\n-                '\\n'\n+        self.0.next().map(|c| {\n+            if c == '\\r' {\n+                if *self.0.peek().unwrap_or(&'\\0') == '\\n' {\n+                    self.0.next();\n+                    '\\n'\n+                } else {\n+                    '\\r'\n+                }\n             } else {\n-                '\\r'\n+                c\n             }\n-        } else {\n-            c\n         })\n     }\n }"}]}