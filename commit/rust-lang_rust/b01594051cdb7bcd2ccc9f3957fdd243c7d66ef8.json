{"sha": "b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "node_id": "C_kwDOAAsO6NoAKGIwMTU5NDA1MWNkYjdiY2QyY2NjOWYzOTU3ZmRkMjQzYzdkNjZlZjg", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-06T19:33:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T19:33:19Z"}, "message": "Rollup merge of #89501 - Aaron1011:escaping-name-regions, r=davidtwco\n\nNote specific regions involved in 'borrowed data escapes' error\n\nFixes #67007\n\nCurrently, a 'borrowed data escapes' error does not mention\nthe specific lifetime involved (except indirectly through a suggestion\nabout adding a lifetime bound). We now explain the specific lifetime\nrelationship that failed to hold, which improves otherwise vague\nerror messages.", "tree": {"sha": "e3afc03853f17da880d84b9404a6d813f8b08c68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3afc03853f17da880d84b9404a6d813f8b08c68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXfn/CRBK7hj4Ov3rIwAArBEIAEe3ZtwJAxMhhrlMZKjJMGt3\nvICoAdi6DP05/urrmgL25TBuzArJ0Yuj5rySzIjpiIcjzJDAFiP+7LKtKZYy3mIV\nSAaIwPzcz405g2hJpOPcQCLVd1uz5t0HWeIIQR1LiS8j7f9faasgZrwm6RIByMrN\neDZTzLIf6kQ/0s2PDy4pECSisMbI3bWPK6ON4bJ1/vjWb51yQFQeY1XCIHp5KtKQ\n7o56YVyhhU/dAiWeDaNDfbDouwhQIP/AQrL4LfNbwV6vs0yXcGvYbMqfpwf8am02\nDt8iEmzZku3oHIh7i8Hhhyv1n48bDJe0pbY3zeia5I+wubxf8/95pE2CQj7mN0g=\n=lbfb\n-----END PGP SIGNATURE-----\n", "payload": "tree e3afc03853f17da880d84b9404a6d813f8b08c68\nparent b87a9a8a7c40484bc94515fd6d51e6e271ad4cb8\nparent 3c974adb4c4c6de497a36dec362af6c0928c7367\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633548799 -0700\ncommitter GitHub <noreply@github.com> 1633548799 -0700\n\nRollup merge of #89501 - Aaron1011:escaping-name-regions, r=davidtwco\n\nNote specific regions involved in 'borrowed data escapes' error\n\nFixes #67007\n\nCurrently, a 'borrowed data escapes' error does not mention\nthe specific lifetime involved (except indirectly through a suggestion\nabout adding a lifetime bound). We now explain the specific lifetime\nrelationship that failed to hold, which improves otherwise vague\nerror messages.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "html_url": "https://github.com/rust-lang/rust/commit/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b87a9a8a7c40484bc94515fd6d51e6e271ad4cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b87a9a8a7c40484bc94515fd6d51e6e271ad4cb8", "html_url": "https://github.com/rust-lang/rust/commit/b87a9a8a7c40484bc94515fd6d51e6e271ad4cb8"}, {"sha": "3c974adb4c4c6de497a36dec362af6c0928c7367", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c974adb4c4c6de497a36dec362af6c0928c7367", "html_url": "https://github.com/rust-lang/rust/commit/3c974adb4c4c6de497a36dec362af6c0928c7367"}], "stats": {"total": 248, "additions": 209, "deletions": 39}, "files": [{"sha": "11cdbe84accb7a2c4e4f4bcbd76d9f2830154678", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -498,6 +498,27 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             diag.span_label(*span, format!(\"`{}` escapes the {} body here\", fr_name, escapes_from));\n         }\n \n+        // Only show an extra note if we can find an 'error region' for both of the region\n+        // variables. This avoids showing a noisy note that just mentions 'synthetic' regions\n+        // that don't help the user understand the error.\n+        if self.to_error_region(errci.fr).is_some()\n+            && self.to_error_region(errci.outlived_fr).is_some()\n+        {\n+            let fr_region_name = self.give_region_a_name(errci.fr).unwrap();\n+            fr_region_name.highlight_region_name(&mut diag);\n+            let outlived_fr_region_name = self.give_region_a_name(errci.outlived_fr).unwrap();\n+            outlived_fr_region_name.highlight_region_name(&mut diag);\n+\n+            diag.span_label(\n+                *span,\n+                format!(\n+                    \"{}requires that `{}` must outlive `{}`\",\n+                    category.description(),\n+                    fr_region_name,\n+                    outlived_fr_region_name,\n+                ),\n+            );\n+        }\n         diag\n     }\n "}, {"sha": "786f621326049b7eb9cf1ccf62e3e8d5d186218a", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -20,9 +20,15 @@ error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-62097.rs:13:9\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n-   |                               ----- `self` is a reference that is only valid in the associated function body\n+   |                               -----\n+   |                               |\n+   |                               `self` is a reference that is only valid in the associated function body\n+   |                               let's call the lifetime of this reference `'1`\n LL |         foo(|| self.bar()).await;\n-   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the associated function body here\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `self` escapes the associated function body here\n+   |         argument requires that `'1` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "88c260b18cbb001aacac64cc9d47f6b35d7b141d", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -2,9 +2,14 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/dyn-trait.rs:20:5\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-   |                              - `x` is a reference that is only valid in the function body\n+   |                          --  - `x` is a reference that is only valid in the function body\n+   |                          |\n+   |                          lifetime `'a` defined here\n LL |     static_val(x);\n-   |     ^^^^^^^^^^^^^ `x` escapes the function body here\n+   |     ^^^^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "0e8f520353fbafc1b0ecbb06ee3ed0169a29ec2d", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -1,10 +1,19 @@\n error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-16683.rs:4:9\n    |\n+LL | trait T<'a> {\n+   |         -- lifetime `'a` defined here\n+LL |     fn a(&'a self) -> &'a bool;\n LL |     fn b(&self) {\n-   |          ----- `self` is a reference that is only valid in the associated function body\n+   |          -----\n+   |          |\n+   |          `self` is a reference that is only valid in the associated function body\n+   |          let's call the lifetime of this reference `'1`\n LL |         self.a();\n-   |         ^^^^^^^^ `self` escapes the associated function body here\n+   |         ^^^^^^^^\n+   |         |\n+   |         `self` escapes the associated function body here\n+   |         argument requires that `'1` must outlive `'a`\n \n error: aborting due to previous error\n "}, {"sha": "b929fdbf3687aa83839050fdbef148e43252f084", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -1,10 +1,19 @@\n error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/issue-17758.rs:7:9\n    |\n+LL | trait Foo<'a> {\n+   |           -- lifetime `'a` defined here\n+LL |     fn foo(&'a self);\n LL |     fn bar(&self) {\n-   |            ----- `self` is a reference that is only valid in the associated function body\n+   |            -----\n+   |            |\n+   |            `self` is a reference that is only valid in the associated function body\n+   |            let's call the lifetime of this reference `'1`\n LL |         self.foo();\n-   |         ^^^^^^^^^^ `self` escapes the associated function body here\n+   |         ^^^^^^^^^^\n+   |         |\n+   |         `self` escapes the associated function body here\n+   |         argument requires that `'1` must outlive `'a`\n \n error: aborting due to previous error\n "}, {"sha": "6f3f84096e4002c9b10d3188893e891606b99537", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -2,19 +2,29 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/lifetime-bound-will-change-warning.rs:34:5\n    |\n LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n-   |              - `x` is a reference that is only valid in the function body\n+   |          --  - `x` is a reference that is only valid in the function body\n+   |          |\n+   |          lifetime `'a` defined here\n LL |     // but ref_obj will not, so warn.\n LL |     ref_obj(x)\n-   |     ^^^^^^^^^^ `x` escapes the function body here\n+   |     ^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n    |\n LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n-   |                - `x` is a reference that is only valid in the function body\n+   |            --  - `x` is a reference that is only valid in the function body\n+   |            |\n+   |            lifetime `'a` defined here\n LL |     // same as test2, but cross crate\n LL |     lib::ref_obj(x)\n-   |     ^^^^^^^^^^^^^^^ `x` escapes the function body here\n+   |     ^^^^^^^^^^^^^^^\n+   |     |\n+   |     `x` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d77793291c5c53bafa231b757373d26ec9a3cc4b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -38,14 +38,19 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the function body\n+   |             --      ------ `cell_a` is a reference that is only valid in the function body\n+   |             |\n+   |             lifetime `'a` defined here\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n-   | |______^ `cell_a` escapes the function body here\n+   | |      ^\n+   | |      |\n+   | |______`cell_a` escapes the function body here\n+   |        argument requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "cc67270ad20c1761a9be5d97ac208153cbce3ab4", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -38,14 +38,19 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the function body\n+   |             --      ------ `cell_a` is a reference that is only valid in the function body\n+   |             |\n+   |             lifetime `'a` defined here\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n-   | |______^ `cell_a` escapes the function body here\n+   | |      ^\n+   | |      |\n+   | |______`cell_a` escapes the function body here\n+   |        argument requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "8c21737e05fe89fc74946acf1173a925a1b7fccf", "filename": "src/test/ui/nll/issue-67007-escaping-data.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.rs?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -0,0 +1,26 @@\n+// Regression test for issue #67007\n+// Ensures that we show information about the specific regions involved\n+\n+#![feature(nll)]\n+\n+// Covariant over 'a, invariant over 'tcx\n+struct FnCtxt<'a, 'tcx: 'a>(&'a (), *mut &'tcx ());\n+\n+impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    fn use_it(&self, _: &'tcx ()) {}\n+}\n+\n+struct Consumer<'tcx>(&'tcx ());\n+\n+impl<'tcx> Consumer<'tcx> {\n+    fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\n+        let other = self.use_fcx(fcx); //~ ERROR borrowed data\n+        fcx.use_it(other);\n+    }\n+\n+    fn use_fcx<'a>(&self, _: &FnCtxt<'a, 'tcx>) -> &'a () {\n+        &()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2834d6fb0d2143101de9401948683f4370afa20b", "filename": "src/test/ui/nll/issue-67007-escaping-data.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-67007-escaping-data.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -0,0 +1,21 @@\n+error[E0521]: borrowed data escapes outside of associated function\n+  --> $DIR/issue-67007-escaping-data.rs:17:21\n+   |\n+LL | impl<'tcx> Consumer<'tcx> {\n+   |      ---- lifetime `'tcx` defined here\n+LL |     fn bad_method<'a>(&self, fcx: &FnCtxt<'a, 'tcx>) {\n+   |                   --  -----  --- `fcx` is a reference that is only valid in the associated function body\n+   |                   |   |\n+   |                   |   `self` declared here, outside of the associated function body\n+   |                   lifetime `'a` defined here\n+LL |         let other = self.use_fcx(fcx);\n+   |                     ^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     `fcx` escapes the associated function body here\n+   |                     argument requires that `'a` must outlive `'tcx`\n+   |\n+   = help: consider adding the following bound: `'a: 'tcx`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "3b2017d2d03a1e8b467ad8088825eca4e6850b9b", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -92,13 +92,20 @@ LL |         self.x\n error[E0521]: borrowed data escapes outside of associated function\n   --> $DIR/outlives-suggestion-simple.rs:73:9\n    |\n+LL | impl<'a> Foo2<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     // should not produce outlives suggestions to name 'self\n LL |     fn get_bar(&self) -> Bar2 {\n    |                -----\n    |                |\n    |                `self` declared here, outside of the associated function body\n    |                `self` is a reference that is only valid in the associated function body\n+   |                let's call the lifetime of this reference `'1`\n LL |         Bar2::new(&self)\n-   |         ^^^^^^^^^^^^^^^^ `self` escapes the associated function body here\n+   |         ^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `self` escapes the associated function body here\n+   |         argument requires that `'1` must outlive `'a`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "20002e4591d1aeb0108e0e137b31935ebc53008b", "filename": "src/test/ui/nll/user-annotations/closure-substs.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -28,9 +28,14 @@ error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/closure-substs.rs:29:9\n    |\n LL |     |x: &i32, b: fn(&'static i32)| {\n-   |      - `x` is a reference that is only valid in the closure body\n+   |      -  - let's call the lifetime of this reference `'1`\n+   |      |\n+   |      `x` is a reference that is only valid in the closure body\n LL |         b(x);\n-   |         ^^^^ `x` escapes the closure body here\n+   |         ^^^^\n+   |         |\n+   |         `x` escapes the closure body here\n+   |         argument requires that `'1` must outlive `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "af20c5e5fc0dac1065f4ee1ba837969ec235dd1a", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.nll.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -15,9 +15,14 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/object-lifetime-default-mybox.rs:31:5\n    |\n LL | fn load2<'a>(ss: &MyBox<dyn SomeTrait + 'a>) -> MyBox<dyn SomeTrait + 'a> {\n-   |              -- `ss` is a reference that is only valid in the function body\n+   |          --  -- `ss` is a reference that is only valid in the function body\n+   |          |\n+   |          lifetime `'a` defined here\n LL |     load0(ss)\n-   |     ^^^^^^^^^ `ss` escapes the function body here\n+   |     ^^^^^^^^^\n+   |     |\n+   |     `ss` escapes the function body here\n+   |     argument requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "721dafac0be7664ecbd28e6cd77b50eeda3bb712", "filename": "src/test/ui/regions/issue-78262.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -2,8 +2,11 @@ error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/issue-78262.rs:14:26\n    |\n LL |     let f = |x: &dyn TT| x.func();\n-   |              -           ^^^^^^^^ `x` escapes the closure body here\n-   |              |\n+   |              -  -        ^^^^^^^^\n+   |              |  |        |\n+   |              |  |        `x` escapes the closure body here\n+   |              |  |        argument requires that `'1` must outlive `'static`\n+   |              |  let's call the lifetime of this reference `'1`\n    |              `x` is a reference that is only valid in the closure body\n \n error: aborting due to previous error"}, {"sha": "721dafac0be7664ecbd28e6cd77b50eeda3bb712", "filename": "src/test/ui/regions/issue-78262.polonius.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.polonius.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -2,8 +2,11 @@ error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/issue-78262.rs:14:26\n    |\n LL |     let f = |x: &dyn TT| x.func();\n-   |              -           ^^^^^^^^ `x` escapes the closure body here\n-   |              |\n+   |              -  -        ^^^^^^^^\n+   |              |  |        |\n+   |              |  |        `x` escapes the closure body here\n+   |              |  |        argument requires that `'1` must outlive `'static`\n+   |              |  let's call the lifetime of this reference `'1`\n    |              `x` is a reference that is only valid in the closure body\n \n error: aborting due to previous error"}, {"sha": "e220cbf55595630f7457e3c152d4a39881cfb791", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -2,10 +2,15 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/region-invariant-static-error-reporting.rs:15:9\n    |\n LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n-   |              - `x` is a reference that is only valid in the function body\n+   |          --  - `x` is a reference that is only valid in the function body\n+   |          |\n+   |          lifetime `'a` defined here\n LL |     let bad = if x.is_some() {\n LL |         x.unwrap()\n-   |         ^^^^^^^^^^ `x` escapes the function body here\n+   |         ^^^^^^^^^^\n+   |         |\n+   |         `x` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "83d6e13dc0a685d15b52d72c89f2aca0fc1a5a0b", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -2,12 +2,17 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:20:5\n    |\n LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n-   |                             -           - `b` is a reference that is only valid in the function body\n-   |                             |\n-   |                             `a` declared here, outside of the function body\n+   |            -- --            -           - `b` is a reference that is only valid in the function body\n+   |            |  |             |\n+   |            |  |             `a` declared here, outside of the function body\n+   |            |  lifetime `'b` defined here\n+   |            lifetime `'a` defined here\n LL |     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n LL |     f.method(b);\n-   |     ^^^^^^^^^^^ `b` escapes the function body here\n+   |     ^^^^^^^^^^^\n+   |     |\n+   |     `b` escapes the function body here\n+   |     argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n "}, {"sha": "a1ef32c5445b59c754ec1d149b1fcd016c55d6bf", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr?ref=b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "patch": "@@ -2,33 +2,53 @@ error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:20:9\n    |\n LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> + 'a {\n-   |                      --- `val` is a reference that is only valid in the function body\n+   |               --     --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n LL |         val.use_self::<T>()\n-   |         ^^^^^^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |         ^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:69:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-   |                   --- `val` is a reference that is only valid in the function body\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n LL |         val.use_self()\n-   |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |         ^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:88:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n-   |                   --- `val` is a reference that is only valid in the function body\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n LL |         val.use_self()\n-   |         ^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |         ^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n-   |                   --- `val` is a reference that is only valid in the function body\n+   |               --  --- `val` is a reference that is only valid in the function body\n+   |               |\n+   |               lifetime `'a` defined here\n LL |         MyTrait::use_self(val)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         `val` escapes the function body here\n+   |         argument requires that `'a` must outlive `'static`\n \n error: aborting due to 4 previous errors\n "}]}