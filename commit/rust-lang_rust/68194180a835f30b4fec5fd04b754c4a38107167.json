{"sha": "68194180a835f30b4fec5fd04b754c4a38107167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTk0MTgwYTgzNWYzMGI0ZmVjNWZkMDRiNzU0YzRhMzgxMDcxNjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-23T07:29:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-23T07:29:27Z"}, "message": "fix type renaming", "tree": {"sha": "8654e2cd9270f047ad835f94c853509a24dbce6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8654e2cd9270f047ad835f94c853509a24dbce6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68194180a835f30b4fec5fd04b754c4a38107167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68194180a835f30b4fec5fd04b754c4a38107167", "html_url": "https://github.com/rust-lang/rust/commit/68194180a835f30b4fec5fd04b754c4a38107167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68194180a835f30b4fec5fd04b754c4a38107167/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee7f22245d2f6279e3146210d7d3ba68da806f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7f22245d2f6279e3146210d7d3ba68da806f12", "html_url": "https://github.com/rust-lang/rust/commit/ee7f22245d2f6279e3146210d7d3ba68da806f12"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "d8afe0878998afe490d4b7b995d1d3ab35009860", "filename": "src/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68194180a835f30b4fec5fd04b754c4a38107167/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68194180a835f30b4fec5fd04b754c4a38107167/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=68194180a835f30b4fec5fd04b754c4a38107167", "patch": "@@ -60,7 +60,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 // Return None, as it doesn't make sense to return Some, because miri detects stack overflow itself.\n                 let (return_place, return_to_block) = destination.unwrap();\n                 match return_place.layout.ty.sty {\n-                    ty::TyAdt(ref adt_def, _) => {\n+                    ty::Adt(ref adt_def, _) => {\n                         assert!(adt_def.is_enum(), \"Unexpected return type for {}\", item_path);\n                         let none_variant_index = adt_def.variants.iter().position(|def| {\n                             def.name.as_str() == \"None\""}]}