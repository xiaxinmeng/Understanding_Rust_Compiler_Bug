{"sha": "af60cf407ca54d2ac594de67f73b188533b3297d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNjBjZjQwN2NhNTRkMmFjNTk0ZGU2N2Y3M2IxODg1MzNiMzI5N2Q=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-04T19:07:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-04T19:08:06Z"}, "message": "rt: Switch the AIO stuff to the C stack", "tree": {"sha": "44c61b6660e2837f67c939196fcc18502b926d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c61b6660e2837f67c939196fcc18502b926d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af60cf407ca54d2ac594de67f73b188533b3297d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af60cf407ca54d2ac594de67f73b188533b3297d", "html_url": "https://github.com/rust-lang/rust/commit/af60cf407ca54d2ac594de67f73b188533b3297d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af60cf407ca54d2ac594de67f73b188533b3297d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6335529c36ea029d4ce1fdb79c2bca99edf341b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6335529c36ea029d4ce1fdb79c2bca99edf341b4", "html_url": "https://github.com/rust-lang/rust/commit/6335529c36ea029d4ce1fdb79c2bca99edf341b4"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "5d7430a82ecfe4f5409323b19ca9cf33420b16f6", "filename": "src/lib/aio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af60cf407ca54d2ac594de67f73b188533b3297d/src%2Flib%2Faio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af60cf407ca54d2ac594de67f73b188533b3297d/src%2Flib%2Faio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Faio.rs?ref=af60cf407ca54d2ac594de67f73b188533b3297d", "patch": "@@ -5,7 +5,7 @@ import comm;\n import comm::{chan, port, send, recv};\n import net;\n \n-native \"rust\" mod rustrt {\n+native \"c-stack-cdecl\" mod rustrt {\n     type socket;\n     type server;\n     fn aio_init();"}, {"sha": "ed820b6ed3177e7c97e64aea9ad81c418975f5f0", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/af60cf407ca54d2ac594de67f73b188533b3297d/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/af60cf407ca54d2ac594de67f73b188533b3297d/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=af60cf407ca54d2ac594de67f73b188533b3297d", "patch": "@@ -50,7 +50,7 @@ struct socket_data : public task_owned<socket_data> {\n struct req_connect : public uv_connect_t, public task_owned<req_connect> {};\n struct req_write : public uv_write_t, public task_owned<req_write> {};\n \n-extern \"C\" CDECL void aio_close_socket(void *, socket_data *);\n+extern \"C\" CDECL void aio_close_socket(socket_data *);\n \n static uv_idle_s idle_handler;\n \n@@ -59,15 +59,15 @@ static void idle_callback(uv_idle_t* handle, int status) {\n   task->yield();\n }\n \n-extern \"C\" CDECL void aio_init(void *) {\n+extern \"C\" CDECL void aio_init() {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   iotask = task;\n   uv_idle_init(uv_default_loop(), &idle_handler);\n   uv_idle_start(&idle_handler, idle_callback);\n }\n \n-extern \"C\" CDECL void aio_run(void *) {\n+extern \"C\" CDECL void aio_run() {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   idle_handler.data = task;\n@@ -76,14 +76,13 @@ extern \"C\" CDECL void aio_run(void *) {\n \n void nop_close(uv_handle_t* handle) {}\n \n-extern \"C\" CDECL void aio_stop(void *) {\n+extern \"C\" CDECL void aio_stop() {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   uv_close((uv_handle_t*)&idle_handler, nop_close);\n }\n \n-static socket_data *make_socket(void *, rust_chan *chan) {\n-  rust_task *task = rust_scheduler::get_task();\n+static socket_data *make_socket(rust_task *task, rust_chan *chan) {\n   socket_data *data = new (task, \"make_socket\") socket_data;\n   if (!data ||\n       uv_tcp_init(uv_default_loop(), &data->socket)) {\n@@ -153,14 +152,14 @@ static void new_connection(uv_stream_t *socket, int status) {\n     return;\n   }\n   if (uv_accept(socket, (uv_stream_t*)&client->socket)) {\n-    aio_close_socket(client->task, client);\n+    aio_close_socket(client);\n     server->task->fail();\n     return;\n   }\n   server->chan->send(&client);\n }\n \n-extern \"C\" CDECL socket_data *aio_serve(void *, const char *ip, int port,\n+extern \"C\" CDECL socket_data *aio_serve(const char *ip, int port,\n                                         chan_handle *_chan) {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n@@ -172,7 +171,7 @@ extern \"C\" CDECL socket_data *aio_serve(void *, const char *ip, int port,\n     goto oom;\n   if (uv_tcp_bind(&server->socket, addr) ||\n       uv_listen((uv_stream_t*)&server->socket, 128, new_connection)) {\n-    aio_close_socket(task, server);\n+    aio_close_socket(server);\n     chan->deref();\n     return NULL;\n   }\n@@ -207,13 +206,13 @@ static void free_socket(uv_handle_t *handle) {\n   delete data;\n }\n \n-extern \"C\" CDECL void aio_close_socket(void *, socket_data *client) {\n+extern \"C\" CDECL void aio_close_socket(socket_data *client) {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   uv_close((uv_handle_t*)&client->socket, free_socket);\n }\n \n-extern \"C\" CDECL void aio_close_server(void *, socket_data *server,\n+extern \"C\" CDECL void aio_close_server(socket_data *server,\n                                        chan_handle *_chan) {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n@@ -225,11 +224,11 @@ extern \"C\" CDECL void aio_close_server(void *, socket_data *server,\n   server->chan->send(&null_client);\n   server->chan->deref();\n   server->chan = chan->clone(iotask);\n-  aio_close_socket(task, server);\n+  aio_close_socket(server);\n   chan->deref();\n }\n \n-extern \"C\" CDECL bool aio_is_null_client(void *, socket_data *server) {\n+extern \"C\" CDECL bool aio_is_null_client(socket_data *server) {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   return server == NULL;\n@@ -242,7 +241,7 @@ static void connection_complete(uv_connect_t *req, int status) {\n   free(req);\n }\n \n-extern \"C\" CDECL void aio_connect(void *, const char *host, int port,\n+extern \"C\" CDECL void aio_connect(const char *host, int port,\n                                   chan_handle *_chan) {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n@@ -266,7 +265,7 @@ extern \"C\" CDECL void aio_connect(void *, const char *host, int port,\n   }\n   free(req);\n oom_req:\n-  aio_close_socket(task, client);\n+  aio_close_socket(client);\n oom_client:\n   chan->deref();\n   task->fail();\n@@ -281,7 +280,7 @@ static void write_complete(uv_write_t *req, int status) {\n   free(req);\n }\n \n-extern \"C\" CDECL void aio_writedata(void *, socket_data *data, char *buf,\n+extern \"C\" CDECL void aio_writedata(socket_data *data, char *buf,\n                                     size_t size, chan_handle *_chan) {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n@@ -314,8 +313,7 @@ extern \"C\" CDECL void aio_writedata(void *, socket_data *data, char *buf,\n   task->fail();\n }\n \n-extern \"C\" CDECL void aio_read(void *, socket_data *data,\n-                               chan_handle *_chan) {\n+extern \"C\" CDECL void aio_read(socket_data *data, chan_handle *_chan) {\n   rust_task *task = rust_scheduler::get_task();\n   LOG_UPCALL_ENTRY(task);\n   rust_chan *reader = task->get_chan_by_handle(_chan);"}]}