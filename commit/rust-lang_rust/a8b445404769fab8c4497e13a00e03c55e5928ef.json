{"sha": "a8b445404769fab8c4497e13a00e03c55e5928ef", "node_id": "C_kwDOAAsO6NoAKGE4YjQ0NTQwNDc2OWZhYjhjNDQ5N2UxM2EwMGUwM2M1NWU1OTI4ZWY", "commit": {"author": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2022-08-07T18:40:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-07T18:40:41Z"}, "message": "Create armv4t_none_eabi.rs", "tree": {"sha": "095247ac2c070bdcbb630c93139430c1a5d00141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095247ac2c070bdcbb630c93139430c1a5d00141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b445404769fab8c4497e13a00e03c55e5928ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8AcpCRBK7hj4Ov3rIwAAL00IAK4Z/J6hMSert/zhwXlM6Vdc\nTQn1muaL9GKrow3bMtFFNY1Pr+/bpvm8ld/NV76CKQ8vgd/n+FR/0VvlftPBKDnh\nJbVzWGvMPwAQHw5sFLjJUaD3ol4wk3B2d0GYhuMNEkk+IMiqSrw4aaKTOdzyV5+t\nPyOvONm6/y02B0wwxLzRyytDaXU07pb5CNU2ooj2K0+blqML6vdrGvTh/dVG+bpV\n13A8ImalRfr6UJHXVZof4z1NfLgmYdKN20+eXqkCbbwLnIIaRGPb7ddqW1z/2Rmd\n4Fu/OjiiObZyEqtAkNwhPEGXMM4bJTCTyQ1nn3mUhwC/1fQq8G72HtCxCkF5FOo=\n=vr8I\n-----END PGP SIGNATURE-----\n", "payload": "tree 095247ac2c070bdcbb630c93139430c1a5d00141\nparent 5a9c3a2daa1cc2fa19adfbe5b3c61ba20ff6fb56\nauthor Lokathor <zefria@gmail.com> 1659897641 -0600\ncommitter GitHub <noreply@github.com> 1659897641 -0600\n\nCreate armv4t_none_eabi.rs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b445404769fab8c4497e13a00e03c55e5928ef", "html_url": "https://github.com/rust-lang/rust/commit/a8b445404769fab8c4497e13a00e03c55e5928ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b445404769fab8c4497e13a00e03c55e5928ef/comments", "author": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a9c3a2daa1cc2fa19adfbe5b3c61ba20ff6fb56", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9c3a2daa1cc2fa19adfbe5b3c61ba20ff6fb56", "html_url": "https://github.com/rust-lang/rust/commit/5a9c3a2daa1cc2fa19adfbe5b3c61ba20ff6fb56"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "a76ffe808c3b24a103d32ce30ab0523eedbf3ffb", "filename": "compiler/rustc_target/src/spec/armv4t_none_eabi.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a8b445404769fab8c4497e13a00e03c55e5928ef/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b445404769fab8c4497e13a00e03c55e5928ef/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_none_eabi.rs?ref=a8b445404769fab8c4497e13a00e03c55e5928ef", "patch": "@@ -0,0 +1,54 @@\n+//! Targets the ARMv4T, with code as `a32` code by default.\n+//!\n+//! Primarily of use for the GBA, but usable with other devices too.\n+//!\n+//! Please ping @Lokathor if changes are needed.\n+//!\n+//! This target profile assumes that you have the ARM binutils in your path\n+//! (specifically the linker, `arm-none-eabi-ld`). They can be obtained for free\n+//! for all major OSes from the ARM developer's website, and they may also be\n+//! available in your system's package manager. Unfortunately, the standard\n+//! linker that Rust uses (`lld`) only supports as far back as `ARMv5TE`, so we\n+//! must use the GNU `ld` linker.\n+//!\n+//! **Important:** This target profile **does not** specify a linker script. You\n+//! just get the default link script when you build a binary for this target.\n+//! The default link script is very likely wrong, so you should use\n+//! `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n+\n+use crate::spec::{cvs, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"armv4t-none-eabi\".into(),\n+        pointer_width: 32,\n+        arch: \"arm\".into(),\n+        /* Data layout args are '-' separated:\n+         * little endian\n+         * stack is 64-bit aligned (EABI)\n+         * pointers are 32-bit\n+         * i64 must be 64-bit aligned (EABI)\n+         * mangle names with ELF style\n+         * native integers are 32-bit\n+         * All other elements are default\n+         */\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        options: TargetOptions {\n+            abi: \"eabi\".into(),\n+            linker_flavor: LinkerFlavor::Ld,\n+            linker: Some(\"arm-none-eabi-ld\".into()),\n+            asm_args: cvs![\"-mthumb-interwork\", \"-march=armv4t\", \"-mlittle-endian\",],\n+            features: \"+soft-float,+strict-align\".into(),\n+            main_needs_argc_argv: false,\n+            atomic_cas: false,\n+            has_thumb_interworking: true,\n+            relocation_model: RelocModel::Static,\n+            panic_strategy: PanicStrategy::Abort,\n+            // from thumb_base, rust-lang/rust#44993.\n+            emit_debug_gdb_scripts: false,\n+            // from thumb_base, apparently gcc/clang give enums a minimum of 8 bits on no-os targets\n+            c_enum_min_bits: 8,\n+            ..Default::default()\n+        },\n+    }\n+}"}]}