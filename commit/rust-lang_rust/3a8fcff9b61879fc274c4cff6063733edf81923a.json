{"sha": "3a8fcff9b61879fc274c4cff6063733edf81923a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOGZjZmY5YjYxODc5ZmMyNzRjNGNmZjYwNjM3MzNlZGY4MTkyM2E=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-09-09T14:52:19Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-09-14T08:49:56Z"}, "message": "Rename --display-warnings to --display-doctest-warnings", "tree": {"sha": "cf761649c07f89edb34b7b23f77e3e952f342eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf761649c07f89edb34b7b23f77e3e952f342eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a8fcff9b61879fc274c4cff6063733edf81923a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8fcff9b61879fc274c4cff6063733edf81923a", "html_url": "https://github.com/rust-lang/rust/commit/3a8fcff9b61879fc274c4cff6063733edf81923a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a8fcff9b61879fc274c4cff6063733edf81923a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd17addad57e2aaf5dc6d3febe042ebb733bee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd17addad57e2aaf5dc6d3febe042ebb733bee3", "html_url": "https://github.com/rust-lang/rust/commit/1cd17addad57e2aaf5dc6d3febe042ebb733bee3"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "b55db452f124c52708d94cdbafb1789d538aa80f", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=3a8fcff9b61879fc274c4cff6063733edf81923a", "patch": "@@ -222,13 +222,13 @@ all these files are linked from every page, changing where they are can be cumbe\n specially cache them. This flag will rename all these files in the output to include the suffix in\n the filename. For example, `light.css` would become `light-suf.css` with the above command.\n \n-### `--display-warnings`: display warnings when documenting or running documentation tests\n+### `--display-doctest-warnings`: display warnings when documenting or running documentation tests\n \n Using this flag looks like this:\n \n ```bash\n-$ rustdoc src/lib.rs -Z unstable-options --display-warnings\n-$ rustdoc --test src/lib.rs -Z unstable-options --display-warnings\n+$ rustdoc src/lib.rs -Z unstable-options --display-doctest-warnings\n+$ rustdoc --test src/lib.rs -Z unstable-options --display-doctest-warnings\n ```\n \n The intent behind this flag is to allow the user to see warnings that occur within their library or"}, {"sha": "ac440a395155c8af38184c533367193eecf73a93", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=3a8fcff9b61879fc274c4cff6063733edf81923a", "patch": "@@ -137,7 +137,7 @@ crate struct Options {\n     crate manual_passes: Vec<String>,\n     /// Whether to display warnings during doc generation or while gathering doctests. By default,\n     /// all non-rustdoc-specific lints are allowed when generating docs.\n-    crate display_warnings: bool,\n+    crate display_doctest_warnings: bool,\n     /// Whether to run the `calculate-doc-coverage` pass, which counts the number of public items\n     /// with and without documentation.\n     crate show_coverage: bool,\n@@ -192,7 +192,7 @@ impl fmt::Debug for Options {\n             .field(\"persist_doctests\", &self.persist_doctests)\n             .field(\"default_passes\", &self.default_passes)\n             .field(\"manual_passes\", &self.manual_passes)\n-            .field(\"display_warnings\", &self.display_warnings)\n+            .field(\"display_doctest_warnings\", &self.display_doctest_warnings)\n             .field(\"show_coverage\", &self.show_coverage)\n             .field(\"crate_version\", &self.crate_version)\n             .field(\"render_options\", &self.render_options)\n@@ -632,7 +632,7 @@ impl Options {\n         let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n         let playground_url = matches.opt_str(\"playground-url\");\n         let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n-        let display_warnings = matches.opt_present(\"display-warnings\");\n+        let display_doctest_warnings = matches.opt_present(\"display-doctest-warnings\");\n         let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n         let resource_suffix = matches.opt_str(\"resource-suffix\").unwrap_or_default();\n         let enable_minification = !matches.opt_present(\"disable-minification\");\n@@ -696,7 +696,7 @@ impl Options {\n             test_args,\n             default_passes,\n             manual_passes,\n-            display_warnings,\n+            display_doctest_warnings,\n             show_coverage,\n             crate_version,\n             test_run_directory,"}, {"sha": "d86b3b785d1127c721513807525f43a5e75baafe", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3a8fcff9b61879fc274c4cff6063733edf81923a", "patch": "@@ -204,7 +204,6 @@ crate fn create_config(\n         lint_opts,\n         describe_lints,\n         lint_cap,\n-        display_warnings,\n         ..\n     }: RustdocOptions,\n ) -> rustc_interface::Config {\n@@ -237,7 +236,7 @@ crate fn create_config(\n         maybe_sysroot,\n         search_paths: libs,\n         crate_types,\n-        lint_opts: if !display_warnings { lint_opts } else { vec![] },\n+        lint_opts,\n         lint_cap,\n         cg: codegen_options,\n         externs,"}, {"sha": "dbeea9cddf3879af8b2ac43683d6e89dac7e199b", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3a8fcff9b61879fc274c4cff6063733edf81923a", "patch": "@@ -40,7 +40,7 @@ crate struct TestOptions {\n     crate no_crate_inject: bool,\n     /// Whether to emit compilation warnings when compiling doctests. Setting this will suppress\n     /// the default `#![allow(unused)]`.\n-    crate display_warnings: bool,\n+    crate display_doctest_warnings: bool,\n     /// Additional crate-level attributes to add to doctests.\n     crate attrs: Vec<String>,\n }\n@@ -72,7 +72,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         maybe_sysroot: options.maybe_sysroot.clone(),\n         search_paths: options.libs.clone(),\n         crate_types,\n-        lint_opts: if !options.display_warnings { lint_opts } else { vec![] },\n+        lint_opts: if !options.display_doctest_warnings { lint_opts } else { vec![] },\n         lint_cap: Some(options.lint_cap.unwrap_or_else(|| lint::Forbid)),\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n@@ -106,7 +106,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     };\n \n     let test_args = options.test_args.clone();\n-    let display_warnings = options.display_warnings;\n+    let display_doctest_warnings = options.display_doctest_warnings;\n     let nocapture = options.nocapture;\n     let externs = options.externs.clone();\n     let json_unused_externs = options.json_unused_externs;\n@@ -119,7 +119,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n \n                 let mut opts = scrape_test_config(crate_attrs);\n-                opts.display_warnings |= options.display_warnings;\n+                opts.display_doctest_warnings |= options.display_doctest_warnings;\n                 let enable_per_target_ignores = options.enable_per_target_ignores;\n                 let mut collector = Collector::new(\n                     tcx.crate_name(LOCAL_CRATE),\n@@ -163,7 +163,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n-    run_tests(test_args, nocapture, display_warnings, tests);\n+    run_tests(test_args, nocapture, display_doctest_warnings, tests);\n \n     // Collect and warn about unused externs, but only if we've gotten\n     // reports for each doctest\n@@ -209,22 +209,26 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n crate fn run_tests(\n     mut test_args: Vec<String>,\n     nocapture: bool,\n-    display_warnings: bool,\n+    display_doctest_warnings: bool,\n     tests: Vec<test::TestDescAndFn>,\n ) {\n     test_args.insert(0, \"rustdoctest\".to_string());\n     if nocapture {\n         test_args.push(\"--nocapture\".to_string());\n     }\n-    test::test_main(&test_args, tests, Some(test::Options::new().display_output(display_warnings)));\n+    test::test_main(\n+        &test_args,\n+        tests,\n+        Some(test::Options::new().display_output(display_doctest_warnings)),\n+    );\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n fn scrape_test_config(attrs: &[ast::Attribute]) -> TestOptions {\n     use rustc_ast_pretty::pprust;\n \n     let mut opts =\n-        TestOptions { no_crate_inject: false, display_warnings: false, attrs: Vec::new() };\n+        TestOptions { no_crate_inject: false, display_doctest_warnings: false, attrs: Vec::new() };\n \n     let test_attrs: Vec<_> = attrs\n         .iter()\n@@ -504,7 +508,7 @@ crate fn make_test(\n     let mut prog = String::new();\n     let mut supports_color = false;\n \n-    if opts.attrs.is_empty() && !opts.display_warnings {\n+    if opts.attrs.is_empty() && !opts.display_doctest_warnings {\n         // If there aren't any attributes supplied by #![doc(test(attr(...)))], then allow some\n         // lints that are commonly triggered in doctests. The crate-level test attributes are\n         // commonly used to make tests fail in case they trigger warnings, so having this there in"}, {"sha": "1851708096564380e3fab75ca8a3c1617e33ae59", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=3a8fcff9b61879fc274c4cff6063733edf81923a", "patch": "@@ -52,7 +52,8 @@ assert_eq!(2+2, 4);\n fn make_test_no_crate_inject() {\n     // Even if you do use the crate within the test, setting `opts.no_crate_inject` will skip\n     // adding it anyway.\n-    let opts = TestOptions { no_crate_inject: true, display_warnings: false, attrs: vec![] };\n+    let opts =\n+        TestOptions { no_crate_inject: true, display_doctest_warnings: false, attrs: vec![] };\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -215,10 +216,10 @@ assert_eq!(2+2, 4);\"\n }\n \n #[test]\n-fn make_test_display_warnings() {\n+fn make_test_display_doctest_warnings() {\n     // If the user is asking to display doctest warnings, suppress the default `allow(unused)`.\n     let mut opts = TestOptions::default();\n-    opts.display_warnings = true;\n+    opts.display_doctest_warnings = true;\n     let input = \"assert_eq!(2+2, 4);\";\n     let expected = \"fn main() {\n assert_eq!(2+2, 4);"}, {"sha": "f170561300cc2d6ef780b4ce0dde10286ab2aa00", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3a8fcff9b61879fc274c4cff6063733edf81923a", "patch": "@@ -419,8 +419,12 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"URL\",\n             )\n         }),\n-        unstable(\"display-warnings\", |o| {\n-            o.optflagmulti(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n+        unstable(\"display-doctest-warnings\", |o| {\n+            o.optflagmulti(\n+                \"\",\n+                \"display-doctest-warnings\",\n+                \"show warnings that originate in doctests\",\n+            )\n         }),\n         stable(\"crate-version\", |o| {\n             o.optopt(\"\", \"crate-version\", \"crate version to print into documentation\", \"VERSION\")"}, {"sha": "2ae4897dc349625ede4dad13463a0c876eb26e08", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8fcff9b61879fc274c4cff6063733edf81923a/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=3a8fcff9b61879fc274c4cff6063733edf81923a", "patch": "@@ -120,7 +120,7 @@ crate fn test(options: Options) -> Result<(), String> {\n         .map_err(|err| format!(\"{}: {}\", options.input.display(), err))?;\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n-    opts.display_warnings = options.display_warnings;\n+    opts.display_doctest_warnings = options.display_doctest_warnings;\n     let mut collector = Collector::new(\n         Symbol::intern(&options.input.display().to_string()),\n         options.clone(),\n@@ -138,7 +138,7 @@ crate fn test(options: Options) -> Result<(), String> {\n     crate::doctest::run_tests(\n         options.test_args,\n         options.nocapture,\n-        options.display_warnings,\n+        options.display_doctest_warnings,\n         collector.tests,\n     );\n     Ok(())"}]}