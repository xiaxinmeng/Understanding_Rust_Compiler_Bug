{"sha": "a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYTI1N2NjM2IyOWNiMTM0YjA1YTcyYWRiZmVmZjA4ZjFlN2E5OGM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-28T23:37:14Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-29T00:57:02Z"}, "message": "Demode iter::foldl and friends", "tree": {"sha": "0057d14c69772c162546eeb23fde82957c8f36ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0057d14c69772c162546eeb23fde82957c8f36ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "html_url": "https://github.com/rust-lang/rust/commit/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc60621364eef2fc20974ff4411f31099ed9595", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc60621364eef2fc20974ff4411f31099ed9595", "html_url": "https://github.com/rust-lang/rust/commit/fdc60621364eef2fc20974ff4411f31099ed9595"}], "stats": {"total": 89, "additions": 42, "deletions": 47}, "files": [{"sha": "4e08dd4c2f369a22f4dd3169c19fb2a23dd3d3eb", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -675,7 +675,7 @@ mod tests {\n     #[test]\n     fn test_dlist_foldl() {\n         let l = from_vec(vec::from_fn(101, |x|x));\n-        assert iter::foldl(l, 0, |accum,elem| accum+elem) == 5050;\n+        assert iter::foldl(&l, 0, |accum,elem| *accum+*elem) == 5050;\n     }\n     #[test]\n     fn test_dlist_break_early() {"}, {"sha": "a6acd1c040ef9684f7b0f65e80cb6685cbfabe88", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -16,8 +16,8 @@ impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n     pure fn eachi(blk: fn(uint, v: &A) -> bool) { iter::eachi(&self, blk) }\n     pure fn all(blk: fn(&A) -> bool) -> bool { iter::all(&self, blk) }\n     pure fn any(blk: fn(&A) -> bool) -> bool { iter::any(&self, blk) }\n-    pure fn foldl<B>(+b0: B, blk: fn(B, A) -> B) -> B {\n-        iter::foldl(self, move b0, blk)\n+    pure fn foldl<B>(+b0: B, blk: fn(&B, &A) -> B) -> B {\n+        iter::foldl(&self, move b0, blk)\n     }\n     pure fn position(f: fn(A) -> bool) -> Option<uint> {\n         iter::position(self, f)\n@@ -26,7 +26,7 @@ impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n \n impl<A: Eq> IMPL_T<A>: iter::EqIter<A> {\n     pure fn contains(x: &A) -> bool { iter::contains(self, x) }\n-    pure fn count(x: &A) -> uint { iter::count(self, x) }\n+    pure fn count(x: &A) -> uint { iter::count(&self, x) }\n }\n \n impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {\n@@ -36,7 +36,7 @@ impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {\n     pure fn map_to_vec<B>(op: fn(+v: A) -> B) -> ~[B] {\n         iter::map_to_vec(&self, op)\n     }\n-    pure fn to_vec() -> ~[A] { iter::to_vec(self) }\n+    pure fn to_vec() -> ~[A] { iter::to_vec(&self) }\n \n     pure fn flat_map_to_vec<B:Copy,IB:BaseIter<B>>(op: fn(+a: A) -> IB)\n         -> ~[B] {\n@@ -47,7 +47,7 @@ impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {\n }\n \n impl<A: Copy Ord> IMPL_T<A>: iter::CopyableOrderedIter<A> {\n-    pure fn min() -> A { iter::min(self) }\n-    pure fn max() -> A { iter::max(self) }\n+    pure fn min() -> A { iter::min(&self) }\n+    pure fn max() -> A { iter::max(&self) }\n }\n "}, {"sha": "77f9abe8e0b5b5e1d16925943bbbc250afd5cb4d", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -18,7 +18,7 @@ trait ExtendedIter<A> {\n     pure fn eachi(blk: fn(uint, v: &A) -> bool);\n     pure fn all(blk: fn(&A) -> bool) -> bool;\n     pure fn any(blk: fn(&A) -> bool) -> bool;\n-    pure fn foldl<B>(+b0: B, blk: fn(B, A) -> B) -> B;\n+    pure fn foldl<B>(+b0: B, blk: fn(&B, &A) -> B) -> B;\n     pure fn position(f: fn(A) -> bool) -> Option<uint>;\n }\n \n@@ -118,16 +118,17 @@ pure fn flat_map_to_vec<A:Copy,B:Copy,IA:BaseIter<A>,IB:BaseIter<B>>(\n     }\n }\n \n-pure fn foldl<A,B,IA:BaseIter<A>>(self: IA, +b0: B, blk: fn(B, A) -> B) -> B {\n+pure fn foldl<A,B,IA:BaseIter<A>>(self: &IA, +b0: B, blk: fn(&B, &A) -> B)\n+    -> B {\n     let mut b <- b0;\n     for self.each |a| {\n-        b = blk(b, *a);\n+        b = blk(&b, a);\n     }\n     move b\n }\n \n-pure fn to_vec<A:Copy,IA:BaseIter<A>>(self: IA) -> ~[A] {\n-    foldl::<A,~[A],IA>(self, ~[], |r, a| vec::append(copy r, ~[a]))\n+pure fn to_vec<A:Copy,IA:BaseIter<A>>(self: &IA) -> ~[A] {\n+    foldl::<A,~[A],IA>(self, ~[], |r, a| vec::append(*r, ~[*a]))\n }\n \n pure fn contains<A:Eq,IA:BaseIter<A>>(self: IA, x: &A) -> bool {\n@@ -137,12 +138,12 @@ pure fn contains<A:Eq,IA:BaseIter<A>>(self: IA, x: &A) -> bool {\n     return false;\n }\n \n-pure fn count<A:Eq,IA:BaseIter<A>>(self: IA, x: &A) -> uint {\n+pure fn count<A:Eq,IA:BaseIter<A>>(self: &IA, x: &A) -> uint {\n     do foldl(self, 0) |count, value| {\n-        if value == *x {\n-            count + 1\n+        if *value == *x {\n+            *count + 1\n         } else {\n-            count\n+            *count\n         }\n     }\n }\n@@ -170,33 +171,27 @@ pure fn repeat(times: uint, blk: fn() -> bool) {\n     }\n }\n \n-// XXX bad copies\n-pure fn min<A:Copy Ord,IA:BaseIter<A>>(self: IA) -> A {\n+pure fn min<A:Copy Ord,IA:BaseIter<A>>(self: &IA) -> A {\n     match do foldl::<A,Option<A>,IA>(self, None) |a, b| {\n         match a {\n-          Some(copy a_) if a_ < b => {\n-            // FIXME (#2005): Not sure if this is successfully optimized to\n-            // a move\n-            a\n+          &Some(a_) if a_ < *b => {\n+             *(move a)\n           }\n-          _ => Some(b)\n+          _ => Some(*b)\n         }\n     } {\n         Some(move val) => val,\n         None => fail ~\"min called on empty iterator\"\n     }\n }\n \n-// XXX bad copies\n-pure fn max<A:Copy Ord,IA:BaseIter<A>>(self: IA) -> A {\n+pure fn max<A:Copy Ord,IA:BaseIter<A>>(self: &IA) -> A {\n     match do foldl::<A,Option<A>,IA>(self, None) |a, b| {\n         match a {\n-          Some(copy a_) if a_ > b => {\n-            // FIXME (#2005): Not sure if this is successfully optimized to\n-            // a move.\n-            a\n+          &Some(a_) if a_ > *b => {\n+              *(move a)\n           }\n-          _ => Some(b)\n+          _ => Some(*b)\n         }\n     } {\n         Some(move val) => val,"}, {"sha": "66b1c0d95ec3d2e9876a67f74a2cf781fffb1fc4", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -1993,8 +1993,8 @@ impl<A> &[A]: iter::ExtendedIter<A> {\n     pure fn eachi(blk: fn(uint, v: &A) -> bool) { iter::eachi(&self, blk) }\n     pure fn all(blk: fn(&A) -> bool) -> bool { iter::all(&self, blk) }\n     pure fn any(blk: fn(&A) -> bool) -> bool { iter::any(&self, blk) }\n-    pure fn foldl<B>(+b0: B, blk: fn(B, A) -> B) -> B {\n-        iter::foldl(self, move b0, blk)\n+    pure fn foldl<B>(+b0: B, blk: fn(&B, &A) -> B) -> B {\n+        iter::foldl(&self, move b0, blk)\n     }\n     pure fn position(f: fn(A) -> bool) -> Option<uint> {\n         iter::position(self, f)\n@@ -2003,7 +2003,7 @@ impl<A> &[A]: iter::ExtendedIter<A> {\n \n impl<A: Eq> &[A]: iter::EqIter<A> {\n     pure fn contains(x: &A) -> bool { iter::contains(self, x) }\n-    pure fn count(x: &A) -> uint { iter::count(self, x) }\n+    pure fn count(x: &A) -> uint { iter::count(&self, x) }\n }\n \n impl<A: Copy> &[A]: iter::CopyableIter<A> {\n@@ -2013,7 +2013,7 @@ impl<A: Copy> &[A]: iter::CopyableIter<A> {\n     pure fn map_to_vec<B>(op: fn(+v: A) -> B) -> ~[B] {\n         iter::map_to_vec(&self, op)\n     }\n-    pure fn to_vec() -> ~[A] { iter::to_vec(self) }\n+    pure fn to_vec() -> ~[A] { iter::to_vec(&self) }\n \n     // FIXME--bug in resolve prevents this from working (#2611)\n     // fn flat_map_to_vec<B:copy,IB:base_iter<B>>(op: fn(A) -> IB) -> ~[B] {\n@@ -2024,8 +2024,8 @@ impl<A: Copy> &[A]: iter::CopyableIter<A> {\n }\n \n impl<A: Copy Ord> &[A]: iter::CopyableOrderedIter<A> {\n-    pure fn min() -> A { iter::min(self) }\n-    pure fn max() -> A { iter::max(self) }\n+    pure fn min() -> A { iter::min(&self) }\n+    pure fn max() -> A { iter::max(&self) }\n }\n // ___________________________________________________________________________\n "}, {"sha": "90762c5b7147e9ef0783b1950875ecc436c46d7c", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -1014,7 +1014,7 @@ impl Liveness {\n     fn propagate_through_opt_expr(opt_expr: Option<@expr>,\n                                   succ: LiveNode) -> LiveNode {\n         do opt_expr.foldl(succ) |succ, expr| {\n-            self.propagate_through_expr(expr, succ)\n+            self.propagate_through_expr(*expr, *succ)\n         }\n     }\n "}, {"sha": "ebc1645e3d82895dbcc28e4799a6d4f299709e6b", "filename": "src/rustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -364,8 +364,8 @@ fn combine_impl_and_methods_origins(bcx: block,\n \n     // Flatten out to find the number of vtables the method expects.\n     let m_vtables = m_boundss.foldl(0, |sum, m_bounds| {\n-        m_bounds.foldl(sum, |sum, m_bound| {\n-            sum + match m_bound {\n+        m_bounds.foldl(*sum, |sum, m_bound| {\n+            (*sum) + match (*m_bound) {\n                 ty::bound_copy | ty::bound_owned |\n                 ty::bound_send | ty::bound_const => 0,\n                 ty::bound_trait(_) => 1"}, {"sha": "973db90ff660ca639c464751c7579327d856a7e4", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -2137,25 +2137,25 @@ fn type_size(cx: ctxt, ty: t) -> uint {\n       }\n \n       ty_rec(flds) => {\n-        flds.foldl(0, |s, f| s + type_size(cx, f.mt.ty))\n+        flds.foldl(0, |s, f| *s + type_size(cx, f.mt.ty))\n       }\n \n       ty_class(did, ref substs) => {\n         let flds = class_items_as_fields(cx, did, substs);\n-        flds.foldl(0, |s, f| s + type_size(cx, f.mt.ty))\n+        flds.foldl(0, |s, f| *s + type_size(cx, f.mt.ty))\n       }\n \n       ty_tup(tys) => {\n-        tys.foldl(0, |s, t| s + type_size(cx, t))\n+        tys.foldl(0, |s, t| *s + type_size(cx, *t))\n       }\n \n       ty_enum(did, ref substs) => {\n         let variants = substd_enum_variants(cx, did, substs);\n         variants.foldl( // find max size of any variant\n             0,\n-            |m, v| uint::max(m,\n+            |m, v| uint::max(*m,\n                              // find size of this variant:\n-                             v.args.foldl(0, |s, a| s + type_size(cx, a))))\n+                             v.args.foldl(0, |s, a| *s + type_size(cx, *a))))\n       }\n \n       ty_param(_) | ty_self => {"}, {"sha": "4afb3ad78a635639ac7987d478256a552f7eb4e3", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -111,14 +111,14 @@ fn replace_bound_regions_in_fn_ty(\n \n         // For each type `ty` in `tys`...\n         do tys.foldl(isr) |isr, ty| {\n-            let mut isr = isr;\n+            let mut isr = *isr;\n \n             // Using fold_regions is inefficient, because it\n             // constructs new types, but it avoids code duplication in\n             // terms of locating all the regions within the various\n             // kinds of types.  This had already caused me several\n             // bugs so I decided to switch over.\n-            do ty::fold_regions(tcx, ty) |r, in_fn| {\n+            do ty::fold_regions(tcx, *ty) |r, in_fn| {\n                 if !in_fn { isr = append_isr(isr, to_r, r); }\n                 r\n             };"}, {"sha": "bbc1673f6864d47c12126500f6d64bfb42bad05d", "filename": "src/test/run-pass/iter-foldl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Ftest%2Frun-pass%2Fiter-foldl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a257cc3b29cb134b05a72adbfeff08f1e7a98c/src%2Ftest%2Frun-pass%2Fiter-foldl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-foldl.rs?ref=a3a257cc3b29cb134b05a72adbfeff08f1e7a98c", "patch": "@@ -1,4 +1,4 @@\n-fn add(&&x: float, &&y: uint) -> float { x + (y as float) }\n+fn add(x: &float, y: &uint) -> float { *x + ((*y) as float) }\n \n fn main() {\n     assert [1u, 3u]/_.foldl(20f, add) == 24f;"}]}