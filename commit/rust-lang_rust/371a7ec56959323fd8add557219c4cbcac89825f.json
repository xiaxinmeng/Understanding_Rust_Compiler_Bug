{"sha": "371a7ec56959323fd8add557219c4cbcac89825f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MWE3ZWM1Njk1OTMyM2ZkOGFkZDU1NzIxOWM0Y2JjYWM4OTgyNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-02T20:26:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-02T20:26:36Z"}, "message": "auto merge of #9675 : sfackler/rust/lint, r=alexcrichton\n\nCloses #9671", "tree": {"sha": "891a58dce818a99d94bbc16d326085c38d5728f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/891a58dce818a99d94bbc16d326085c38d5728f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371a7ec56959323fd8add557219c4cbcac89825f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371a7ec56959323fd8add557219c4cbcac89825f", "html_url": "https://github.com/rust-lang/rust/commit/371a7ec56959323fd8add557219c4cbcac89825f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371a7ec56959323fd8add557219c4cbcac89825f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "353578a7b36c003da8f5ac818a1554cdb652f9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/353578a7b36c003da8f5ac818a1554cdb652f9c2", "html_url": "https://github.com/rust-lang/rust/commit/353578a7b36c003da8f5ac818a1554cdb652f9c2"}, {"sha": "b7fe83d573d8073f7d663bee5c0b3e1493b9998d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fe83d573d8073f7d663bee5c0b3e1493b9998d", "html_url": "https://github.com/rust-lang/rust/commit/b7fe83d573d8073f7d663bee5c0b3e1493b9998d"}], "stats": {"total": 105, "additions": 93, "deletions": 12}, "files": [{"sha": "a997d49fdde9aef102070925355c3c5dc319cc10", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -85,13 +85,15 @@ use std::vec;\n \n /// Name of an option. Either a string or a single char.\n #[deriving(Clone, Eq)]\n+#[allow(missing_doc)]\n pub enum Name {\n     Long(~str),\n     Short(char),\n }\n \n /// Describes whether an option has an argument.\n #[deriving(Clone, Eq)]\n+#[allow(missing_doc)]\n pub enum HasArg {\n     Yes,\n     No,\n@@ -100,6 +102,7 @@ pub enum HasArg {\n \n /// Describes how often an option may occur.\n #[deriving(Clone, Eq)]\n+#[allow(missing_doc)]\n pub enum Occur {\n     Req,\n     Optional,\n@@ -141,6 +144,7 @@ pub struct Matches {\n /// The type returned when the command line does not conform to the\n /// expected format. Pass this value to <fail_str> to get an error message.\n #[deriving(Clone, Eq, ToStr)]\n+#[allow(missing_doc)]\n pub enum Fail_ {\n     ArgumentMissing(~str),\n     UnrecognizedOption(~str),\n@@ -151,6 +155,7 @@ pub enum Fail_ {\n \n /// The type of failure that occured.\n #[deriving(Eq)]\n+#[allow(missing_doc)]\n pub enum FailType {\n     ArgumentMissing_,\n     UnrecognizedOption_,"}, {"sha": "1e494a179134b53ca9031fe4af92e22189efdc98", "filename": "src/libextra/list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flist.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -13,12 +13,14 @@\n \n \n #[deriving(Clone, Eq)]\n+#[allow(missing_doc)]\n pub enum List<T> {\n     Cons(T, @List<T>),\n     Nil,\n }\n \n #[deriving(Eq)]\n+#[allow(missing_doc)]\n pub enum MutList<T> {\n     MutCons(T, @mut MutList<T>),\n     MutNil,"}, {"sha": "8c7d656f5413b49aa7c08a5dc691b6e650be2e0d", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -38,6 +38,7 @@ use std::to_str::ToStr;\n /// An identifier in the pre-release or build metadata. If the identifier can\n /// be parsed as a decimal value, it will be represented with `Numeric`.\n #[deriving(Clone, Eq)]\n+#[allow(missing_doc)]\n pub enum Identifier {\n     Numeric(uint),\n     AlphaNumeric(~str)"}, {"sha": "d7944bad5fa69290de8a13abdc70a3b0456a856a", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -39,6 +39,7 @@ enum FormatState {\n \n /// Types of parameters a capability can use\n #[deriving(Clone)]\n+#[allow(missing_doc)]\n pub enum Param {\n     String(~str),\n     Number(int)"}, {"sha": "a219b8fb5574c9ed42a5260d673cbe0b22cc550d", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -116,6 +116,7 @@ struct UuidFields {\n }\n \n /// Error details for string parsing failures\n+#[allow(missing_doc)]\n pub enum ParseError {\n     ErrorInvalidLength(uint),\n     ErrorInvalidCharacter(char, uint),"}, {"sha": "d1c88fb7d646a4501b8005443e6497cdf473d95c", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -1351,6 +1351,18 @@ impl MissingDocLintVisitor {\n         // otherwise, warn!\n         cx.span_lint(missing_doc, sp, msg);\n     }\n+\n+    fn check_struct(&mut self, cx: @mut Context, sdef: @ast::struct_def) {\n+                        for field in sdef.fields.iter() {\n+        match field.node.kind {\n+            ast::named_field(_, vis) if vis != ast::private => {\n+                self.check_attrs(cx, field.node.attrs, field.span,\n+                        \"missing documentation for a field\");\n+                }\n+                ast::unnamed_field | ast::named_field(*) => {}\n+            }\n+        }\n+    }\n }\n \n impl Visitor<@mut Context> for MissingDocLintVisitor {\n@@ -1395,35 +1407,49 @@ impl SubitemStoppableVisitor for MissingDocLintVisitor {\n     }\n \n     fn visit_item_action(&mut self, it:@ast::item, cx:@mut Context) {\n+            if it.vis != ast::public {\n+                return;\n+            }\n \n             match it.node {\n                 // Go ahead and match the fields here instead of using\n                 // visit_struct_field while we have access to the enclosing\n                 // struct's visibility\n-                ast::item_struct(sdef, _) if it.vis == ast::public => {\n+                ast::item_struct(sdef, _) => {\n                     self.check_attrs(cx, it.attrs, it.span,\n                                 \"missing documentation for a struct\");\n-                    for field in sdef.fields.iter() {\n-                        match field.node.kind {\n-                            ast::named_field(_, vis) if vis != ast::private => {\n-                                self.check_attrs(cx, field.node.attrs, field.span,\n-                                            \"missing documentation for a field\");\n-                            }\n-                            ast::unnamed_field | ast::named_field(*) => {}\n-                        }\n-                    }\n+                    self.check_struct(cx, sdef);\n                 }\n \n-                ast::item_trait(*) if it.vis == ast::public => {\n+                ast::item_trait(*) => {\n                     self.check_attrs(cx, it.attrs, it.span,\n                                 \"missing documentation for a trait\");\n                 }\n \n-                ast::item_fn(*) if it.vis == ast::public => {\n+                ast::item_fn(*) => {\n                     self.check_attrs(cx, it.attrs, it.span,\n                                 \"missing documentation for a function\");\n                 }\n \n+                ast::item_enum(ref edef, _) => {\n+                    self.check_attrs(cx, it.attrs, it.span,\n+                                \"missing documentation for an enum\");\n+                    for variant in edef.variants.iter() {\n+                        if variant.node.vis == ast::private {\n+                            continue;\n+                        }\n+\n+                        self.check_attrs(cx, variant.node.attrs, variant.span,\n+                                        \"missing documentation for a variant\");\n+                        match variant.node.kind {\n+                            ast::struct_variant_kind(sdef) => {\n+                                self.check_struct(cx, sdef);\n+                            }\n+                            _ => ()\n+                        }\n+                    }\n+                }\n+\n                 _ => {}\n             }\n     }"}, {"sha": "a95bd563a8123bde093fb0ea2f48f78796633d42", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -61,17 +61,20 @@ pub struct FormatSpec<'self> {\n \n /// Enum describing where an argument for a format can be located.\n #[deriving(Eq)]\n+#[allow(missing_doc)]\n pub enum Position<'self> {\n     ArgumentNext, ArgumentIs(uint), ArgumentNamed(&'self str)\n }\n \n /// Enum of alignments which are supported.\n #[deriving(Eq)]\n+#[allow(missing_doc)]\n pub enum Alignment { AlignLeft, AlignRight, AlignUnknown }\n \n /// Various flags which can be applied to format strings, the meaning of these\n /// flags is defined by the formatters themselves.\n #[deriving(Eq)]\n+#[allow(missing_doc)]\n pub enum Flag {\n     FlagSignPlus,\n     FlagSignMinus,\n@@ -82,6 +85,7 @@ pub enum Flag {\n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n #[deriving(Eq)]\n+#[allow(missing_doc)]\n pub enum Count {\n     CountIs(uint),\n     CountIsParam(uint),\n@@ -126,6 +130,7 @@ pub struct PluralArm<'self> {\n ///\n /// http://www.icu-project.org/apiref/icu4c/classicu_1_1PluralRules.html\n #[deriving(Eq, IterBytes)]\n+#[allow(missing_doc)]\n pub enum PluralKeyword {\n     Zero, One, Two, Few, Many\n }"}, {"sha": "c4d0523fdf4ba52deaabcb4a7dea29631c4489ba", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -59,6 +59,7 @@ use util;\n  */\n pub type Key<T> = &'static KeyValue<T>;\n \n+#[allow(missing_doc)]\n pub enum KeyValue<T> { Key }\n \n trait LocalData {}"}, {"sha": "5c7ae63d39181a9faa47d9ab5b250576669b30c2", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -56,6 +56,7 @@ use clone::DeepClone;\n \n /// The option type\n #[deriving(Clone, DeepClone, Eq)]\n+#[allow(missing_doc)]\n pub enum Option<T> {\n     None,\n     Some(T),"}, {"sha": "075c1abd25c6b58c855eab15b07c14b3323048de", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -22,6 +22,7 @@ use to_bytes::{IterBytes, Cb};\n /// A SendStr is a string that can hold either a ~str or a &'static str.\n /// This can be useful as an optimization when an allocation is sometimes\n /// needed but the common case is statically known.\n+#[allow(missing_doc)]\n pub enum SendStr {\n     SendStrOwned(~str),\n     SendStrStatic(&'static str)"}, {"sha": "e155089c31a0dcd7d93e90b19806ca9a1f8abfa7", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/371a7ec56959323fd8add557219c4cbcac89825f/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371a7ec56959323fd8add557219c4cbcac89825f/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=371a7ec56959323fd8add557219c4cbcac89825f", "patch": "@@ -77,6 +77,43 @@ mod a {\n     }\n }\n \n+enum Baz {\n+    BazA {\n+        a: int,\n+        priv b: int\n+    },\n+    BarB\n+}\n+\n+pub enum PubBaz { //~ ERROR: missing documentation\n+    PubBazA { //~ ERROR: missing documentation\n+        a: int, //~ ERROR: missing documentation\n+        priv b: int\n+    },\n+\n+    priv PubBazB\n+}\n+\n+/// dox\n+pub enum PubBaz2 {\n+    /// dox\n+    PubBaz2A {\n+        /// dox\n+        a: int,\n+        priv b: int\n+    },\n+    priv PubBaz2B\n+}\n+\n+#[allow(missing_doc)]\n+pub enum PubBaz3 {\n+    PubBaz3A {\n+        a: int,\n+        priv b: int\n+    },\n+    priv PubBaz3B\n+}\n+\n #[doc(hidden)]\n pub fn baz() {}\n "}]}