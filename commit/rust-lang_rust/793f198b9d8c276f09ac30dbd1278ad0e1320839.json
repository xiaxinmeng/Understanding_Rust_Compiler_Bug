{"sha": "793f198b9d8c276f09ac30dbd1278ad0e1320839", "node_id": "C_kwDOAAsO6NoAKDc5M2YxOThiOWQ4YzI3NmYwOWFjMzBkYmQxMjc4YWQwZTEzMjA4Mzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-16T11:54:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-16T11:54:55Z"}, "message": "Auto merge of #2489 - RalfJung:srw-merging, r=saethlin\n\nadd test that we do not merge neighboring SRW\n\nTurns out that interior_mut2 also already tests this, but that also involves `UnsafeCell` so the new test still seems more clear. Basically the new test is the same as the old except that it uses raw pointers rather than `&UnsafeCell`. (When the old test was written, raw pointers were still untagged, so no such test would have been possible.)\n\nI verified that both of these fail when we remove mutable references rather than disabling them.\nHere is the patch I used for that:\n\n<details>\n\n```diff\ndiff --git a/Cargo.toml b/Cargo.toml\nindex 208b3a76..f9d1b0ac 100644\n--- a/Cargo.toml\n+++ b/Cargo.toml\n`@@` -53,7 +53,7 `@@` name = \"compiletest\"\n harness = false\n\n [features]\n-default = [\"stack-cache\"]\n+default = []\n stack-cache = []\n\n # Be aware that this file is inside a workspace when used via the\ndiff --git a/src/lib.rs b/src/lib.rs\nindex ba337f28..2a3066f4 100644\n--- a/src/lib.rs\n+++ b/src/lib.rs\n`@@` -9,6 +9,7 `@@`\n #![feature(is_some_with)]\n #![feature(nonzero_ops)]\n #![feature(local_key_cell_methods)]\n+#![feature(drain_filter)]\n // Configure clippy and other lints\n #![allow(\n     clippy::collapsible_else_if,\ndiff --git a/src/stacked_borrows/stack.rs b/src/stacked_borrows/stack.rs\nindex 4a9a13d3..37246df7 100644\n--- a/src/stacked_borrows/stack.rs\n+++ b/src/stacked_borrows/stack.rs\n`@@` -351,6 +351,9 `@@` impl<'tcx> Stack {\n         #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n         self.verify_cache_consistency();\n\n+        // HACK -- now just delete all disabled things.\n+        self.borrows.drain_filter(|b| matches!(b.perm(), Permission::Disabled));\n+\n         Ok(())\n     }\n```\n\n</details>\n\nr? `@saethlin`", "tree": {"sha": "d81e955a18ba8e557610a4a98ac76fe72c9261c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81e955a18ba8e557610a4a98ac76fe72c9261c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/793f198b9d8c276f09ac30dbd1278ad0e1320839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/793f198b9d8c276f09ac30dbd1278ad0e1320839", "html_url": "https://github.com/rust-lang/rust/commit/793f198b9d8c276f09ac30dbd1278ad0e1320839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/793f198b9d8c276f09ac30dbd1278ad0e1320839/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a000764fb9a892d00a77207323b856ef07d44d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/a000764fb9a892d00a77207323b856ef07d44d36", "html_url": "https://github.com/rust-lang/rust/commit/a000764fb9a892d00a77207323b856ef07d44d36"}, {"sha": "db43ee5714900900a52ad5050b77993288472ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/db43ee5714900900a52ad5050b77993288472ce2", "html_url": "https://github.com/rust-lang/rust/commit/db43ee5714900900a52ad5050b77993288472ce2"}], "stats": {"total": 64, "additions": 58, "deletions": 6}, "files": [{"sha": "8189596dba7770562b8603c870117ed35fb46d0d", "filename": "ci.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/793f198b9d8c276f09ac30dbd1278ad0e1320839/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/793f198b9d8c276f09ac30dbd1278ad0e1320839/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=793f198b9d8c276f09ac30dbd1278ad0e1320839", "patch": "@@ -5,11 +5,12 @@ set -x\n # Determine configuration\n export RUSTFLAGS=\"-D warnings\"\n export CARGO_INCREMENTAL=0\n-export CARGO_EXTRA_FLAGS=\"--all-features\"\n \n # Prepare\n echo \"Build and install miri\"\n ./miri install # implicitly locked\n+./miri check --no-default-features # make sure this can be built\n+./miri check --all-features # and this, too\n ./miri build --all-targets --locked # the build that all the `./miri test` below will use\n echo\n "}, {"sha": "4a9a13d35b5278e7224b7f775f174b7fe9963404", "filename": "src/stacked_borrows/stack.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/793f198b9d8c276f09ac30dbd1278ad0e1320839/src%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793f198b9d8c276f09ac30dbd1278ad0e1320839/src%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fstack.rs?ref=793f198b9d8c276f09ac30dbd1278ad0e1320839", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> Stack {\n     /// Panics if any of the caching mechanisms have broken,\n     /// - The StackCache indices don't refer to the parallel items,\n     /// - There are no Unique items outside of first_unique..last_unique\n-    #[cfg(debug_assertions)]\n+    #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n     fn verify_cache_consistency(&self) {\n         // Only a full cache needs to be valid. Also see the comments in find_granting_cache\n         // and set_unknown_bottom.\n@@ -128,7 +128,7 @@ impl<'tcx> Stack {\n         tag: ProvenanceExtra,\n         exposed_tags: &FxHashSet<SbTag>,\n     ) -> Result<Option<usize>, ()> {\n-        #[cfg(debug_assertions)]\n+        #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n         self.verify_cache_consistency();\n \n         let ProvenanceExtra::Concrete(tag) = tag else {\n@@ -320,13 +320,14 @@ impl<'tcx> Stack {\n \n         if disable_start <= unique_range.end {\n             let lower = unique_range.start.max(disable_start);\n-            let upper = self.unique_range.end;\n+            let upper = unique_range.end;\n             for item in &mut self.borrows[lower..upper] {\n                 if item.perm() == Permission::Unique {\n                     log::trace!(\"access: disabling item {:?}\", item);\n                     visitor(*item)?;\n                     item.set_permission(Permission::Disabled);\n                     // Also update all copies of this item in the cache.\n+                    #[cfg(feature = \"stack-cache\")]\n                     for it in &mut self.cache.items {\n                         if it.tag() == item.tag() {\n                             it.set_permission(Permission::Disabled);\n@@ -347,7 +348,7 @@ impl<'tcx> Stack {\n             self.unique_range.end = self.unique_range.end.min(disable_start);\n         }\n \n-        #[cfg(debug_assertions)]\n+        #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n         self.verify_cache_consistency();\n \n         Ok(())\n@@ -402,7 +403,7 @@ impl<'tcx> Stack {\n             self.unique_range = 0..0;\n         }\n \n-        #[cfg(debug_assertions)]\n+        #[cfg(all(feature = \"stack-cache\", debug_assertions))]\n         self.verify_cache_consistency();\n         Ok(())\n     }"}, {"sha": "fed5cd26f4d63aba9d3ce4ada151c2473c957797", "filename": "tests/fail/stacked_borrows/disable_mut_does_not_merge_srw.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/793f198b9d8c276f09ac30dbd1278ad0e1320839/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793f198b9d8c276f09ac30dbd1278ad0e1320839/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.rs?ref=793f198b9d8c276f09ac30dbd1278ad0e1320839", "patch": "@@ -0,0 +1,22 @@\n+// This tests demonstrates the effect of 'Disabling' mutable references on reads, rather than\n+// removing them from the stack -- the latter would 'merge' neighboring SRW groups which we would\n+// like to avoid.\n+fn main() {\n+    unsafe {\n+        let mut mem = 0;\n+        let base = &mut mem as *mut i32; // the base pointer we build the rest of the stack on\n+        let raw = {\n+            let mutref = &mut *base;\n+            mutref as *mut i32\n+        };\n+        // In the stack, we now have [base, mutref, raw].\n+        // We do this in a weird way where `mutref` is out of scope here, just in case\n+        // Miri decides to get smart and argue that items for tags that are no longer\n+        // used by any pointer stored anywhere in the machine can be removed.\n+        let _val = *base;\n+        // now mutref is disabled\n+        *base = 1;\n+        // this should pop raw from the stack, since it is in a different SRW group\n+        let _val = *raw; //~ERROR: that tag does not exist in the borrow stack\n+    }\n+}"}, {"sha": "9f5182ae98ffdade95816253c4801942ba69c518", "filename": "tests/fail/stacked_borrows/disable_mut_does_not_merge_srw.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/793f198b9d8c276f09ac30dbd1278ad0e1320839/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/793f198b9d8c276f09ac30dbd1278ad0e1320839/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr?ref=793f198b9d8c276f09ac30dbd1278ad0e1320839", "patch": "@@ -0,0 +1,28 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/disable_mut_does_not_merge_srw.rs:LL:CC\n+   |\n+LL |         let _val = *raw;\n+   |                    ^^^^\n+   |                    |\n+   |                    attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a retag at offsets [0x0..0x4]\n+  --> $DIR/disable_mut_does_not_merge_srw.rs:LL:CC\n+   |\n+LL |             mutref as *mut i32\n+   |             ^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0x4]\n+  --> $DIR/disable_mut_does_not_merge_srw.rs:LL:CC\n+   |\n+LL |         *base = 1;\n+   |         ^^^^^^^^^\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/disable_mut_does_not_merge_srw.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}