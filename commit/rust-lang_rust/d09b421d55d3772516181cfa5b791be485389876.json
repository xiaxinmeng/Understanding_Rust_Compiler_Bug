{"sha": "d09b421d55d3772516181cfa5b791be485389876", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOWI0MjFkNTVkMzc3MjUxNjE4MWNmYTViNzkxYmU0ODUzODk4NzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-20T16:48:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-20T16:48:00Z"}, "message": "Shuffle around definitions in rust_shape.h\n\nTry to put out darwin tinderbox fire", "tree": {"sha": "5bb90a9790dc73f2a56410fecfa85140c5b69358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb90a9790dc73f2a56410fecfa85140c5b69358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09b421d55d3772516181cfa5b791be485389876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09b421d55d3772516181cfa5b791be485389876", "html_url": "https://github.com/rust-lang/rust/commit/d09b421d55d3772516181cfa5b791be485389876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09b421d55d3772516181cfa5b791be485389876/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0171913aad1b50c0f5d58ca014965b805d16eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0171913aad1b50c0f5d58ca014965b805d16eef", "html_url": "https://github.com/rust-lang/rust/commit/d0171913aad1b50c0f5d58ca014965b805d16eef"}], "stats": {"total": 220, "additions": 110, "deletions": 110}, "files": [{"sha": "f21e6d68ca7e80e3fa1fda68df87915fbff529f3", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 110, "deletions": 110, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/d09b421d55d3772516181cfa5b791be485389876/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/d09b421d55d3772516181cfa5b791be485389876/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=d09b421d55d3772516181cfa5b791be485389876", "patch": "@@ -244,6 +244,116 @@ struct type_param {\n };\n \n \n+// Pointer wrappers for data traversals\n+\n+class ptr {\n+private:\n+    uint8_t *p;\n+\n+public:\n+    template<typename T>\n+    struct data { typedef T t; };\n+\n+    ptr(uint8_t *in_p)\n+    : p(in_p) {}\n+\n+    ptr(uintptr_t in_p)\n+    : p((uint8_t *)in_p) {}\n+\n+    inline ptr operator+(const size_t amount) const {\n+        return make(p + amount);\n+    }\n+    inline ptr &operator+=(const size_t amount) { p += amount; return *this; }\n+    inline bool operator<(const ptr other) { return p < other.p; }\n+    inline ptr operator++() { ptr rv(*this); p++; return rv; }\n+    inline uint8_t operator*() { return *p; }\n+\n+    template<typename T>\n+    inline operator T *() { return (T *)p; }\n+\n+    inline operator uintptr_t() { return (uintptr_t)p; }\n+\n+    static inline ptr make(uint8_t *in_p) {\n+        ptr self(in_p);\n+        return self;\n+    }\n+};\n+\n+template<typename T>\n+static inline T\n+bump_dp(ptr &dp) {\n+    T x = *((T *)dp);\n+    dp += sizeof(T);\n+    return x;\n+}\n+\n+template<typename T>\n+static inline T\n+get_dp(ptr dp) {\n+    return *((T *)dp);\n+}\n+\n+\n+// Pointer pairs for structural comparison\n+\n+template<typename T>\n+class data_pair {\n+public:\n+    T fst, snd;\n+\n+    data_pair() {}\n+    data_pair(T &in_fst, T &in_snd) : fst(in_fst), snd(in_snd) {}\n+\n+    inline void operator=(const T rhs) { fst = snd = rhs; }\n+\n+    static data_pair<T> make(T &fst, T &snd) {\n+        data_pair<T> data(fst, snd);\n+        return data;\n+    }\n+};\n+\n+class ptr_pair {\n+public:\n+    uint8_t *fst, *snd;\n+\n+    template<typename T>\n+    struct data { typedef data_pair<T> t; };\n+\n+    ptr_pair(uint8_t *in_fst, uint8_t *in_snd) : fst(in_fst), snd(in_snd) {}\n+\n+    ptr_pair(data_pair<uint8_t *> &other) : fst(other.fst), snd(other.snd) {}\n+\n+    inline void operator=(uint8_t *rhs) { fst = snd = rhs; }\n+\n+    inline ptr_pair operator+(size_t n) const {\n+        return make(fst + n, snd + n);\n+    }\n+\n+    inline ptr_pair operator+=(size_t n) {\n+        fst += n; snd += n;\n+        return *this;\n+    }\n+\n+    inline ptr_pair operator-(size_t n) const {\n+        return make(fst - n, snd - n);\n+    }\n+\n+    inline bool operator<(const ptr_pair &other) const {\n+        return fst < other.fst && snd < other.snd;\n+    }\n+\n+    static inline ptr_pair make(uint8_t *fst, uint8_t *snd) {\n+        ptr_pair self(fst, snd);\n+        return self;\n+    }\n+\n+    static inline ptr_pair make(const data_pair<uint8_t *> &pair) {\n+        ptr_pair self(pair.fst, pair.snd);\n+        return self;\n+    }\n+};\n+\n+\n // Traversals\n \n #define WALK_NUMBER(c_type) \\\n@@ -555,116 +665,6 @@ class size_of : public ctxt<size_of> {\n     }\n };\n \n-\n-// Pointer wrappers for data traversals\n-\n-class ptr {\n-private:\n-    uint8_t *p;\n-\n-public:\n-    template<typename T>\n-    struct data { typedef T t; };\n-\n-    ptr(uint8_t *in_p)\n-    : p(in_p) {}\n-\n-    ptr(uintptr_t in_p)\n-    : p((uint8_t *)in_p) {}\n-\n-    inline ptr operator+(const size_t amount) const {\n-        return make(p + amount);\n-    }\n-    inline ptr &operator+=(const size_t amount) { p += amount; return *this; }\n-    inline bool operator<(const ptr other) { return p < other.p; }\n-    inline ptr operator++() { ptr rv(*this); p++; return rv; }\n-    inline uint8_t operator*() { return *p; }\n-\n-    template<typename T>\n-    inline operator T *() { return (T *)p; }\n-\n-    inline operator uintptr_t() { return (uintptr_t)p; }\n-\n-    static inline ptr make(uint8_t *in_p) {\n-        ptr self(in_p);\n-        return self;\n-    }\n-};\n-\n-template<typename T>\n-static inline T\n-bump_dp(ptr &dp) {\n-    T x = *((T *)dp);\n-    dp += sizeof(T);\n-    return x;\n-}\n-\n-template<typename T>\n-static inline T\n-get_dp(ptr dp) {\n-    return *((T *)dp);\n-}\n-\n-\n-// Pointer pairs for structural comparison\n-\n-template<typename T>\n-class data_pair {\n-public:\n-    T fst, snd;\n-\n-    data_pair() {}\n-    data_pair(T &in_fst, T &in_snd) : fst(in_fst), snd(in_snd) {}\n-\n-    inline void operator=(const T rhs) { fst = snd = rhs; }\n-\n-    static data_pair<T> make(T &fst, T &snd) {\n-        data_pair<T> data(fst, snd);\n-        return data;\n-    }\n-};\n-\n-class ptr_pair {\n-public:\n-    uint8_t *fst, *snd;\n-\n-    template<typename T>\n-    struct data { typedef data_pair<T> t; };\n-\n-    ptr_pair(uint8_t *in_fst, uint8_t *in_snd) : fst(in_fst), snd(in_snd) {}\n-\n-    ptr_pair(data_pair<uint8_t *> &other) : fst(other.fst), snd(other.snd) {}\n-\n-    inline void operator=(uint8_t *rhs) { fst = snd = rhs; }\n-\n-    inline ptr_pair operator+(size_t n) const {\n-        return make(fst + n, snd + n);\n-    }\n-\n-    inline ptr_pair operator+=(size_t n) {\n-        fst += n; snd += n;\n-        return *this;\n-    }\n-\n-    inline ptr_pair operator-(size_t n) const {\n-        return make(fst - n, snd - n);\n-    }\n-\n-    inline bool operator<(const ptr_pair &other) const {\n-        return fst < other.fst && snd < other.snd;\n-    }\n-\n-    static inline ptr_pair make(uint8_t *fst, uint8_t *snd) {\n-        ptr_pair self(fst, snd);\n-        return self;\n-    }\n-\n-    static inline ptr_pair make(const data_pair<uint8_t *> &pair) {\n-        ptr_pair self(pair.fst, pair.snd);\n-        return self;\n-    }\n-};\n-\n }   // end namespace shape\n \n "}]}