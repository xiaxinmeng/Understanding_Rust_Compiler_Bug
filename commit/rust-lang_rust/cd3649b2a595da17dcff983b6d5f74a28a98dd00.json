{"sha": "cd3649b2a595da17dcff983b6d5f74a28a98dd00", "node_id": "C_kwDOAAsO6NoAKGNkMzY0OWIyYTU5NWRhMTdkY2ZmOTgzYjZkNWY3NGEyOGE5OGRkMDA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-21T21:53:26Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-06T21:51:45Z"}, "message": "Only exclude locals if the place is not indirect.", "tree": {"sha": "5311e95d88561348216b61d6602a054349852cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5311e95d88561348216b61d6602a054349852cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3649b2a595da17dcff983b6d5f74a28a98dd00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3649b2a595da17dcff983b6d5f74a28a98dd00", "html_url": "https://github.com/rust-lang/rust/commit/cd3649b2a595da17dcff983b6d5f74a28a98dd00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3649b2a595da17dcff983b6d5f74a28a98dd00/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d59b8c997e31095732c9f9864e10d76daaeb42e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d59b8c997e31095732c9f9864e10d76daaeb42e", "html_url": "https://github.com/rust-lang/rust/commit/0d59b8c997e31095732c9f9864e10d76daaeb42e"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "6f4e7fd4682c171f15512954fa9ff773fe63812a", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd3649b2a595da17dcff983b6d5f74a28a98dd00/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3649b2a595da17dcff983b6d5f74a28a98dd00/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=cd3649b2a595da17dcff983b6d5f74a28a98dd00", "patch": "@@ -121,7 +121,9 @@ where\n                 // for now. See discussion on [#61069].\n                 //\n                 // [#61069]: https://github.com/rust-lang/rust/pull/61069\n-                self.trans.gen(dropped_place.local);\n+                if !dropped_place.is_indirect() {\n+                    self.trans.gen(dropped_place.local);\n+                }\n             }\n \n             TerminatorKind::Abort"}, {"sha": "8003da6bbd269ef78f6518bfad47830c6bd29437", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd3649b2a595da17dcff983b6d5f74a28a98dd00/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3649b2a595da17dcff983b6d5f74a28a98dd00/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=cd3649b2a595da17dcff983b6d5f74a28a98dd00", "patch": "@@ -35,6 +35,7 @@\n use std::fmt::{Debug, Formatter};\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n@@ -589,7 +590,7 @@ impl Map {\n     ) -> Self {\n         let mut map = Self::new();\n         let exclude = excluded_locals(body);\n-        map.register_with_filter(tcx, body, filter, &exclude);\n+        map.register_with_filter(tcx, body, filter, exclude);\n         debug!(\"registered {} places ({} nodes in total)\", map.value_count, map.places.len());\n         map\n     }\n@@ -600,12 +601,12 @@ impl Map {\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n         mut filter: impl FnMut(Ty<'tcx>) -> bool,\n-        exclude: &IndexVec<Local, bool>,\n+        exclude: BitSet<Local>,\n     ) {\n         // We use this vector as stack, pushing and popping projections.\n         let mut projection = Vec::new();\n         for (local, decl) in body.local_decls.iter_enumerated() {\n-            if !exclude[local] {\n+            if !exclude.contains(local) {\n                 self.register_with_filter_rec(tcx, local, &mut projection, decl.ty, &mut filter);\n             }\n         }\n@@ -823,26 +824,27 @@ pub fn iter_fields<'tcx>(\n }\n \n /// Returns all locals with projections that have their reference or address taken.\n-pub fn excluded_locals(body: &Body<'_>) -> IndexVec<Local, bool> {\n+pub fn excluded_locals(body: &Body<'_>) -> BitSet<Local> {\n     struct Collector {\n-        result: IndexVec<Local, bool>,\n+        result: BitSet<Local>,\n     }\n \n     impl<'tcx> Visitor<'tcx> for Collector {\n         fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n-            if context.is_borrow()\n+            if (context.is_borrow()\n                 || context.is_address_of()\n                 || context.is_drop()\n-                || context == PlaceContext::MutatingUse(MutatingUseContext::AsmOutput)\n+                || context == PlaceContext::MutatingUse(MutatingUseContext::AsmOutput))\n+                && !place.is_indirect()\n             {\n                 // A pointer to a place could be used to access other places with the same local,\n                 // hence we have to exclude the local completely.\n-                self.result[place.local] = true;\n+                self.result.insert(place.local);\n             }\n         }\n     }\n \n-    let mut collector = Collector { result: IndexVec::from_elem(false, &body.local_decls) };\n+    let mut collector = Collector { result: BitSet::new_empty(body.local_decls.len()) };\n     collector.visit_body(body);\n     collector.result\n }"}, {"sha": "3fb7836ed6867cfa203813632524d5214ed66186", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd3649b2a595da17dcff983b6d5f74a28a98dd00/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3649b2a595da17dcff983b6d5f74a28a98dd00/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=cd3649b2a595da17dcff983b6d5f74a28a98dd00", "patch": "@@ -1,5 +1,5 @@\n use crate::MirPass;\n-use rustc_index::bit_set::BitSet;\n+use rustc_index::bit_set::{BitSet, GrowableBitSet};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n@@ -26,10 +26,12 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n             debug!(?replacements);\n             let all_dead_locals = replace_flattened_locals(tcx, body, replacements);\n             if !all_dead_locals.is_empty() {\n-                for local in excluded.indices() {\n-                    excluded[local] |= all_dead_locals.contains(local);\n-                }\n-                excluded.raw.resize(body.local_decls.len(), false);\n+                excluded.union(&all_dead_locals);\n+                excluded = {\n+                    let mut growable = GrowableBitSet::from(excluded);\n+                    growable.ensure(body.local_decls.len());\n+                    growable.into()\n+                };\n             } else {\n                 break;\n             }\n@@ -44,11 +46,11 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n /// - the locals is a union or an enum;\n /// - the local's address is taken, and thus the relative addresses of the fields are observable to\n ///   client code.\n-fn escaping_locals(excluded: &IndexVec<Local, bool>, body: &Body<'_>) -> BitSet<Local> {\n+fn escaping_locals(excluded: &BitSet<Local>, body: &Body<'_>) -> BitSet<Local> {\n     let mut set = BitSet::new_empty(body.local_decls.len());\n     set.insert_range(RETURN_PLACE..=Local::from_usize(body.arg_count));\n     for (local, decl) in body.local_decls().iter_enumerated() {\n-        if decl.ty.is_union() || decl.ty.is_enum() || excluded[local] {\n+        if decl.ty.is_union() || decl.ty.is_enum() || excluded.contains(local) {\n             set.insert(local);\n         }\n     }\n@@ -172,7 +174,7 @@ fn replace_flattened_locals<'tcx>(\n     body: &mut Body<'tcx>,\n     replacements: ReplacementMap<'tcx>,\n ) -> BitSet<Local> {\n-    let mut all_dead_locals = BitSet::new_empty(body.local_decls.len());\n+    let mut all_dead_locals = BitSet::new_empty(replacements.fragments.len());\n     for (local, replacements) in replacements.fragments.iter_enumerated() {\n         if replacements.is_some() {\n             all_dead_locals.insert(local);"}]}