{"sha": "08a9f25245eb7cbc4f0952a8497808f94999b6b2", "node_id": "C_kwDOAAsO6NoAKDA4YTlmMjUyNDVlYjdjYmM0ZjA5NTJhODQ5NzgwOGY5NDk5OWI2YjI", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-06-18T09:16:40Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-06-18T09:16:40Z"}, "message": "remove redundant combinators between PO and RPO", "tree": {"sha": "a4d4a94747cbab442b2149e70dbec5886788f2a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d4a94747cbab442b2149e70dbec5886788f2a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a9f25245eb7cbc4f0952a8497808f94999b6b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a9f25245eb7cbc4f0952a8497808f94999b6b2", "html_url": "https://github.com/rust-lang/rust/commit/08a9f25245eb7cbc4f0952a8497808f94999b6b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a9f25245eb7cbc4f0952a8497808f94999b6b2/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f134101e69bcf52ffa36b9a713a38df80a3a9676", "url": "https://api.github.com/repos/rust-lang/rust/commits/f134101e69bcf52ffa36b9a713a38df80a3a9676", "html_url": "https://github.com/rust-lang/rust/commit/f134101e69bcf52ffa36b9a713a38df80a3a9676"}], "stats": {"total": 36, "additions": 6, "deletions": 30}, "files": [{"sha": "ec16a8470c412161ef6aeeb5ac4195748b21a401", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/08a9f25245eb7cbc4f0952a8497808f94999b6b2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a9f25245eb7cbc4f0952a8497808f94999b6b2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=08a9f25245eb7cbc4f0952a8497808f94999b6b2", "patch": "@@ -219,38 +219,13 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n /// - returns basic blocks in a postorder,\n /// - traverses the `BasicBlocks` CFG cache's reverse postorder backwards, and does not cache the\n ///   postorder itself.\n-pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> PostorderIter<'a, 'tcx> {\n-    let blocks = body.basic_blocks.reverse_postorder();\n-    let len = blocks.len();\n-    PostorderIter { body, blocks, idx: len }\n-}\n-\n-#[derive(Clone)]\n-pub struct PostorderIter<'a, 'tcx> {\n+pub fn postorder<'a, 'tcx>(\n     body: &'a Body<'tcx>,\n-    blocks: &'a [BasicBlock],\n-    idx: usize,\n+) -> impl Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> + ExactSizeIterator + DoubleEndedIterator\n+{\n+    reverse_postorder(body).rev()\n }\n \n-impl<'a, 'tcx> Iterator for PostorderIter<'a, 'tcx> {\n-    type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n-\n-    fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {\n-        if self.idx == 0 {\n-            return None;\n-        }\n-        self.idx -= 1;\n-\n-        self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        (self.idx, Some(self.idx))\n-    }\n-}\n-\n-impl<'a, 'tcx> ExactSizeIterator for PostorderIter<'a, 'tcx> {}\n-\n /// Reverse postorder traversal of a graph\n ///\n /// Reverse postorder is the reverse order of a postorder traversal.\n@@ -332,6 +307,7 @@ pub fn reachable_as_bitset(body: &Body<'_>) -> BitSet<BasicBlock> {\n /// - makes use of the `BasicBlocks` CFG cache's reverse postorder.\n pub fn reverse_postorder<'a, 'tcx>(\n     body: &'a Body<'tcx>,\n-) -> impl Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> + ExactSizeIterator {\n+) -> impl Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> + ExactSizeIterator + DoubleEndedIterator\n+{\n     body.basic_blocks.reverse_postorder().iter().map(|&bb| (bb, &body.basic_blocks[bb]))\n }"}]}