{"sha": "a1bb16fdc36f528e78aeb47b5a9612cbc807c844", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYmIxNmZkYzM2ZjUyOGU3OGFlYjQ3YjVhOTYxMmNiYzgwN2M4NDQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-05T17:55:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-05T17:55:06Z"}, "message": "Use dsl for declaring intrinsic codegen", "tree": {"sha": "502bee0b98c7634717bd7bf0b23b8a4e2620a773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/502bee0b98c7634717bd7bf0b23b8a4e2620a773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1bb16fdc36f528e78aeb47b5a9612cbc807c844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bb16fdc36f528e78aeb47b5a9612cbc807c844", "html_url": "https://github.com/rust-lang/rust/commit/a1bb16fdc36f528e78aeb47b5a9612cbc807c844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1bb16fdc36f528e78aeb47b5a9612cbc807c844/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd4bcb7a2c90a8447a7610572bafdd8fd822acf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4bcb7a2c90a8447a7610572bafdd8fd822acf5", "html_url": "https://github.com/rust-lang/rust/commit/cd4bcb7a2c90a8447a7610572bafdd8fd822acf5"}], "stats": {"total": 249, "additions": 126, "deletions": 123}, "files": [{"sha": "d20da83982e38a7f8d67294e6adce3a365a5b344", "filename": "src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1bb16fdc36f528e78aeb47b5a9612cbc807c844/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bb16fdc36f528e78aeb47b5a9612cbc807c844/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=a1bb16fdc36f528e78aeb47b5a9612cbc807c844", "patch": "@@ -481,7 +481,7 @@ pub fn codegen_terminator_call<'a, 'tcx: 'a>(\n         let sig = ty_fn_sig(fx.tcx, fn_ty);\n \n         if sig.abi == Abi::RustIntrinsic {\n-            crate::intrinsics::codegen_intrinsic_call(fx, def_id, substs, &args, destination);\n+            crate::intrinsics::codegen_intrinsic_call(fx, def_id, substs, args, destination);\n             return;\n         }\n     }"}, {"sha": "a75ef796342d7db172b3794627c666b9f370dbcf", "filename": "src/intrinsics.rs", "status": "modified", "additions": 125, "deletions": 122, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/a1bb16fdc36f528e78aeb47b5a9612cbc807c844/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bb16fdc36f528e78aeb47b5a9612cbc807c844/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=a1bb16fdc36f528e78aeb47b5a9612cbc807c844", "patch": "@@ -1,11 +1,54 @@\n \n use crate::prelude::*;\n \n+macro_rules! intrinsic_pat {\n+    (_) => {\n+        _\n+    };\n+    ($name:ident) => {\n+        stringify!($name)\n+    }\n+}\n+\n+macro_rules! intrinsic_arg {\n+    (c $fx:expr, $arg:ident) => {\n+        $arg\n+    };\n+    (v $fx:expr, $arg:ident) => {\n+        $arg.load_value($fx)\n+    };\n+}\n+\n+macro_rules! intrinsic_match {\n+    ($fx:expr, $intrinsic:expr, $args:expr, $(\n+        $($name:tt)|+ $(if $cond:expr)?, |$($a:ident $arg:ident),*| $content:block;\n+    )*) => {\n+        match $intrinsic {\n+            $(\n+                $(intrinsic_pat!($name))|* $(if $cond)? => {\n+                    if let [$($arg),*] = *$args {\n+                        #[allow(unused_parens)]\n+                        {\n+                            let ($($arg),*) = (\n+                                $(intrinsic_arg!($a $fx, $arg)),*\n+                            );\n+                            $content\n+                        }\n+                    } else {\n+                        bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n+                    }\n+                }\n+            )*\n+            _ => unimpl!(\"unsupported intrinsic {}\", $intrinsic),\n+        }\n+    };\n+}\n+\n pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     def_id: DefId,\n     substs: &'tcx Substs,\n-    args: &[CValue<'tcx>],\n+    args: Vec<CValue<'tcx>>,\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,\n ) {\n     let intrinsic = fx.tcx.item_name(def_id).as_str();\n@@ -31,78 +74,66 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n     let u64_layout = fx.layout_of(fx.tcx.types.u64);\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n-    match intrinsic {\n-        \"assume\" => {\n-            assert_eq!(args.len(), 1);\n-        }\n-        \"arith_offset\" => {\n-            assert_eq!(args.len(), 2);\n-            let base = args[0].load_value(fx);\n-            let offset = args[1].load_value(fx);\n+    intrinsic_match! {\n+        fx, intrinsic, args,\n+\n+        assume, |c _a| {};\n+        arith_offset, |v base, v offset| {\n             let res = fx.bcx.ins().iadd(base, offset);\n             let res = CValue::ByVal(res, ret.layout());\n             ret.write_cvalue(fx, res);\n-        }\n-        \"likely\" | \"unlikely\" => {\n-            assert_eq!(args.len(), 1);\n-            ret.write_cvalue(fx, args[0]);\n-        }\n-        \"copy\" | \"copy_nonoverlapping\" => {\n+        };\n+        likely | unlikely, |c a| {\n+            ret.write_cvalue(fx, a);\n+        };\n+        copy | copy_nonoverlapping, |v src, v dst, v count| {\n             let elem_ty = substs.type_at(0);\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n             let elem_size = fx\n                 .bcx\n                 .ins()\n                 .iconst(fx.module.pointer_type(), elem_size as i64);\n             assert_eq!(args.len(), 3);\n-            let src = args[0].load_value(fx);\n-            let dst = args[1].load_value(fx);\n-            let count = args[2].load_value(fx);\n             let byte_amount = fx.bcx.ins().imul(count, elem_size);\n \n             if intrinsic.ends_with(\"_nonoverlapping\") {\n                 fx.bcx.call_memcpy(fx.isa, dst, src, byte_amount);\n             } else {\n                 fx.bcx.call_memmove(fx.isa, dst, src, byte_amount);\n             }\n-        }\n-        \"discriminant_value\" => {\n-            assert_eq!(args.len(), 1);\n+        };\n+        discriminant_value, |c val| {\n             let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n             ret.write_cvalue(fx, discr);\n-        }\n-        \"size_of\" => {\n-            assert_eq!(args.len(), 0);\n+        };\n+        size_of, | | {\n             let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n             let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n             ret.write_cvalue(fx, size_of);\n-        }\n-        \"size_of_val\" => {\n-            assert_eq!(args.len(), 1);\n+        };\n+        size_of_val, |c ptr| {\n             let layout = fx.layout_of(substs.type_at(0));\n             let size = match &layout.ty.sty {\n                 _ if !layout.is_unsized() => fx\n                     .bcx\n                     .ins()\n                     .iconst(fx.module.pointer_type(), layout.size.bytes() as i64),\n                 ty::Slice(elem) => {\n-                    let len = args[0].load_value_pair(fx).1;\n+                    let len = ptr.load_value_pair(fx).1;\n                     let elem_size = fx.layout_of(elem).size.bytes();\n                     fx.bcx.ins().imul_imm(len, elem_size as i64)\n                 }\n-                ty::Dynamic(..) => crate::vtable::size_of_obj(fx, args[0]),\n+                ty::Dynamic(..) => crate::vtable::size_of_obj(fx, ptr),\n                 ty => bug!(\"size_of_val for unknown unsized type {:?}\", ty),\n             };\n             ret.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n-        }\n-        \"min_align_of\" => {\n-            assert_eq!(args.len(), 0);\n+        };\n+        min_align_of, | | {\n             let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n             let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n             ret.write_cvalue(fx, min_align);\n-        }\n-        \"min_align_of_val\" => {\n-            assert_eq!(args.len(), 1);\n+        };\n+        min_align_of_val, |c ptr| {\n             let layout = fx.layout_of(substs.type_at(0));\n             let align = match &layout.ty.sty {\n                 _ if !layout.is_unsized() => fx\n@@ -113,19 +144,17 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     let align = fx.layout_of(elem).align.abi() as i64;\n                     fx.bcx.ins().iconst(fx.module.pointer_type(), align)\n                 }\n-                ty::Dynamic(..) => crate::vtable::min_align_of_obj(fx, args[0]),\n+                ty::Dynamic(..) => crate::vtable::min_align_of_obj(fx, ptr),\n                 ty => unimplemented!(\"min_align_of_val for {:?}\", ty),\n             };\n             ret.write_cvalue(fx, CValue::ByVal(align, usize_layout));\n-        }\n-        \"type_id\" => {\n-            assert_eq!(args.len(), 0);\n+        };\n+        type_id, | | {\n             let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n             let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n             ret.write_cvalue(fx, type_id);\n-        }\n-        _ if intrinsic.starts_with(\"unchecked_\") => {\n-            assert_eq!(args.len(), 2);\n+        };\n+        _ if intrinsic.starts_with(\"unchecked_\"), |c x, c y| {\n             let bin_op = match intrinsic {\n                 \"unchecked_div\" => BinOp::Div,\n                 \"unchecked_rem\" => BinOp::Rem,\n@@ -137,26 +166,25 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 ty::Uint(_) => crate::base::trans_int_binop(\n                     fx,\n                     bin_op,\n-                    args[0],\n-                    args[1],\n+                    x,\n+                    y,\n                     ret.layout().ty,\n                     false,\n                 ),\n                 ty::Int(_) => crate::base::trans_int_binop(\n                     fx,\n                     bin_op,\n-                    args[0],\n-                    args[1],\n+                    x,\n+                    y,\n                     ret.layout().ty,\n                     true,\n                 ),\n                 _ => panic!(),\n             };\n             ret.write_cvalue(fx, res);\n-        }\n-        _ if intrinsic.ends_with(\"_with_overflow\") => {\n-            assert_eq!(args.len(), 2);\n-            assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+        };\n+        _ if intrinsic.ends_with(\"_with_overflow\"), |c x, c y| {\n+            assert_eq!(x.layout().ty, y.layout().ty);\n             let bin_op = match intrinsic {\n                 \"add_with_overflow\" => BinOp::Add,\n                 \"sub_with_overflow\" => BinOp::Sub,\n@@ -167,71 +195,65 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                 ty::Uint(_) => crate::base::trans_checked_int_binop(\n                     fx,\n                     bin_op,\n-                    args[0],\n-                    args[1],\n+                    x,\n+                    y,\n                     ret.layout().ty,\n                     false,\n                 ),\n                 ty::Int(_) => crate::base::trans_checked_int_binop(\n                     fx,\n                     bin_op,\n-                    args[0],\n-                    args[1],\n+                    x,\n+                    y,\n                     ret.layout().ty,\n                     true,\n                 ),\n                 _ => panic!(),\n             };\n             ret.write_cvalue(fx, res);\n-        }\n-        _ if intrinsic.starts_with(\"overflowing_\") => {\n-            assert_eq!(args.len(), 2);\n-            assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+        };\n+        _ if intrinsic.starts_with(\"overflowing_\"), |c x, c y| {\n+            assert_eq!(x.layout().ty, y.layout().ty);\n             let bin_op = match intrinsic {\n                 \"overflowing_add\" => BinOp::Add,\n                 \"overflowing_sub\" => BinOp::Sub,\n                 \"overflowing_mul\" => BinOp::Mul,\n                 _ => unimplemented!(\"intrinsic {}\", intrinsic),\n             };\n-            let res = match args[0].layout().ty.sty {\n+            let res = match x.layout().ty.sty {\n                 ty::Uint(_) => crate::base::trans_int_binop(\n                     fx,\n                     bin_op,\n-                    args[0],\n-                    args[1],\n+                    x,\n+                    y,\n                     ret.layout().ty,\n                     false,\n                 ),\n                 ty::Int(_) => crate::base::trans_int_binop(\n                     fx,\n                     bin_op,\n-                    args[0],\n-                    args[1],\n+                    x,\n+                    y,\n                     ret.layout().ty,\n                     true,\n                 ),\n                 _ => panic!(),\n             };\n             ret.write_cvalue(fx, res);\n-        }\n-        \"offset\" => {\n-            assert_eq!(args.len(), 2);\n-            let base = args[0].load_value(fx);\n-            let offset = args[1].load_value(fx);\n+        };\n+        offset, |v base, v offset| {\n             let res = fx.bcx.ins().iadd(base, offset);\n             ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n-        }\n-        \"transmute\" => {\n-            assert_eq!(args.len(), 1);\n+        };\n+        transmute, |c from| {\n             let src_ty = substs.type_at(0);\n             let dst_ty = substs.type_at(1);\n-            assert_eq!(args[0].layout().ty, src_ty);\n-            let addr = args[0].force_stack(fx);\n+            assert_eq!(from.layout().ty, src_ty);\n+            let addr = from.force_stack(fx);\n             let dst_layout = fx.layout_of(dst_ty);\n             ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n-        }\n-        \"init\" => {\n-            assert_eq!(args.len(), 0);\n+        };\n+        init, | | {\n             let ty = substs.type_at(0);\n             let layout = fx.layout_of(ty);\n             let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n@@ -247,9 +269,8 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n             let uninit_val = uninit_place.to_cvalue(fx);\n             ret.write_cvalue(fx, uninit_val);\n-        }\n-        \"uninit\" => {\n-            assert_eq!(args.len(), 0);\n+        };\n+        uninit, | | {\n             let ty = substs.type_at(0);\n             let layout = fx.layout_of(ty);\n             let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n@@ -261,33 +282,24 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n             let uninit_val = uninit_place.to_cvalue(fx);\n             ret.write_cvalue(fx, uninit_val);\n-        }\n-        \"ctlz\" | \"ctlz_nonzero\" => {\n-            assert_eq!(args.len(), 1);\n-            let arg = args[0].load_value(fx);\n+        };\n+        ctlz | ctlz_nonzero, |v arg| {\n             let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n             ret.write_cvalue(fx, res);\n-        }\n-        \"cttz\" | \"cttz_nonzero\" => {\n-            assert_eq!(args.len(), 1);\n-            let arg = args[0].load_value(fx);\n+        };\n+        cttz | cttz_nonzero, |v arg| {\n             let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n             ret.write_cvalue(fx, res);\n-        }\n-        \"ctpop\" => {\n-            assert_eq!(args.len(), 1);\n-            let arg = args[0].load_value(fx);\n+        };\n+        ctpop, |v arg| {\n             let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n             ret.write_cvalue(fx, res);\n-        }\n-        \"bitreverse\" => {\n-            assert_eq!(args.len(), 1);\n-            let arg = args[0].load_value(fx);\n+        };\n+        bitreverse, |v arg| {\n             let res = CValue::ByVal(fx.bcx.ins().bitrev(arg), args[0].layout());\n             ret.write_cvalue(fx, res);\n-        }\n-        \"needs_drop\" => {\n-            assert_eq!(args.len(), 0);\n+        };\n+        needs_drop, | | {\n             let ty = substs.type_at(0);\n             let needs_drop = if ty.needs_drop(fx.tcx, ParamEnv::reveal_all()) {\n                 1\n@@ -296,42 +308,33 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             };\n             let needs_drop = CValue::const_val(fx, fx.tcx.types.bool, needs_drop);\n             ret.write_cvalue(fx, needs_drop);\n-        }\n-        _ if intrinsic.starts_with(\"atomic_fence\") => {}\n-        _ if intrinsic.starts_with(\"atomic_singlethreadfence\") => {}\n-        _ if intrinsic.starts_with(\"atomic_load\") => {\n-            assert_eq!(args.len(), 1);\n+        };\n+        _ if intrinsic.starts_with(\"atomic_fence\"), | | {};\n+        _ if intrinsic.starts_with(\"atomic_singlethreadfence\"), | | {};\n+        _ if intrinsic.starts_with(\"atomic_load\"), |c ptr| {\n             let inner_layout =\n-                fx.layout_of(args[0].layout().ty.builtin_deref(true).unwrap().ty);\n-            let val = CValue::ByRef(args[0].load_value(fx), inner_layout);\n+                fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n+            let val = CValue::ByRef(ptr.load_value(fx), inner_layout);\n             ret.write_cvalue(fx, val);\n-        }\n-        _ if intrinsic.starts_with(\"atomic_store\") => {\n-            assert_eq!(args.len(), 2);\n-            let dest = CPlace::Addr(args[0].load_value(fx), None, args[1].layout());\n-            dest.write_cvalue(fx, args[1]);\n-        }\n-        _ if intrinsic.starts_with(\"atomic_xadd\") => {\n-            assert_eq!(args.len(), 2);\n+        };\n+        _ if intrinsic.starts_with(\"atomic_store\"), |v ptr, c val| {\n+            let dest = CPlace::Addr(ptr, None, val.layout());\n+            dest.write_cvalue(fx, val);\n+        };\n+        _ if intrinsic.starts_with(\"atomic_xadd\"), |v ptr, v amount| {\n             let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n-            let ptr = args[0].load_value(fx);\n-            let amount = args[1].load_value(fx);\n             let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n             let new = fx.bcx.ins().iadd(old, amount);\n             fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n             ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n-        }\n-        _ if intrinsic.starts_with(\"atomic_xsub\") => {\n-            assert_eq!(args.len(), 2);\n+        };\n+        _ if intrinsic.starts_with(\"atomic_xsub\"), |v ptr, v amount| {\n             let clif_ty = fx.cton_type(substs.type_at(0)).unwrap();\n-            let ptr = args[0].load_value(fx);\n-            let amount = args[1].load_value(fx);\n             let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n             let new = fx.bcx.ins().isub(old, amount);\n             fx.bcx.ins().store(MemFlags::new(), new, ptr, 0);\n             ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(substs.type_at(0))));\n-        }\n-        _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n+        };\n     }\n \n     if let Some((_, dest)) = destination {"}]}