{"sha": "b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MWIxZDM0MDcwNjhmYWQyZmMwZjRlMGNjN2RiOTJjYjM1ODliYzY=", "commit": {"author": {"name": "Victor Ding", "email": "victording@google.com", "date": "2019-11-29T03:31:09Z"}, "committer": {"name": "Victor Ding", "email": "victording@google.com", "date": "2019-11-29T03:31:09Z"}, "message": "Use LLVMAddAnalysisPasses instead of Rust's wrapper\n\nLLVM exposes a C API `LLVMAddAnalysisPasses` and hence Rust's own\nwrapper `LLVMRustAddAnalysisPasses` is not needed anymore.", "tree": {"sha": "ea8cc0f1166b144ba763c3b67fdc418e37718e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8cc0f1166b144ba763c3b67fdc418e37718e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6", "html_url": "https://github.com/rust-lang/rust/commit/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/comments", "author": null, "committer": null, "parents": [{"sha": "bbb664a99c0188fa756cbbb3a6c4e5d8825c372b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb664a99c0188fa756cbbb3a6c4e5d8825c372b", "html_url": "https://github.com/rust-lang/rust/commit/bbb664a99c0188fa756cbbb3a6c4e5d8825c372b"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "d0b065ccc848be75a982dc7f898d3f038a2257a8", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6", "patch": "@@ -541,7 +541,7 @@ pub(crate) fn run_pass_manager(cgcx: &CodegenContext<LlvmCodegenBackend>,\n     debug!(\"running the pass manager\");\n     unsafe {\n         let pm = llvm::LLVMCreatePassManager();\n-        llvm::LLVMRustAddAnalysisPasses(module.module_llvm.tm, pm, module.module_llvm.llmod());\n+        llvm::LLVMAddAnalysisPasses(module.module_llvm.tm, pm);\n \n         if config.verify_llvm_ir {\n             let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr().cast());"}, {"sha": "5dfb04a4436e6356f0b2774913efa6ae0de2615c", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6", "patch": "@@ -384,8 +384,8 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             // we'll get errors in LLVM.\n             let using_thin_buffers = config.bitcode_needed();\n             if !config.no_prepopulate_passes {\n-                llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n-                llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n+                llvm::LLVMAddAnalysisPasses(tm, fpm);\n+                llvm::LLVMAddAnalysisPasses(tm, mpm);\n                 let opt_level = to_llvm_opt_settings(opt_level).0;\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal ||\n                     (cgcx.lto != Lto::Fat && cgcx.opts.cg.linker_plugin_lto.enabled());\n@@ -509,7 +509,7 @@ pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             where F: FnOnce(&'ll mut PassManager<'ll>) -> R,\n         {\n             let cpm = llvm::LLVMCreatePassManager();\n-            llvm::LLVMRustAddAnalysisPasses(tm, cpm, llmod);\n+            llvm::LLVMAddAnalysisPasses(tm, cpm);\n             llvm::LLVMRustAddLibraryInfo(cpm, llmod, no_builtins);\n             f(cpm)\n         }"}, {"sha": "a49e863fa2185d2cd3ccdfbbc7a936d2c149ba9b", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6", "patch": "@@ -1341,6 +1341,8 @@ extern \"C\" {\n \n     pub fn LLVMInitializePasses();\n \n+    pub fn LLVMAddAnalysisPasses(T: &'a TargetMachine, PM: &PassManager<'a>);\n+\n     pub fn LLVMPassManagerBuilderCreate() -> &'static mut PassManagerBuilder;\n     pub fn LLVMPassManagerBuilderDispose(PMB: &'static mut PassManagerBuilder);\n     pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: &PassManagerBuilder, Value: Bool);\n@@ -1703,7 +1705,6 @@ extern \"C\" {\n                                        EmitStackSizeSection: bool)\n                                        -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n-    pub fn LLVMRustAddAnalysisPasses(T: &'a TargetMachine, PM: &PassManager<'a>, M: &'a Module);\n     pub fn LLVMRustAddBuilderLibraryInfo(PMB: &'a PassManagerBuilder,\n                                          M: &'a Module,\n                                          DisableSimplifyLibCalls: bool);"}, {"sha": "a116ed282acd1b306bba0b847f3b0226b205793a", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=b41b1d3407068fad2fc0f4e0cc7db92cb3589bc6", "patch": "@@ -445,17 +445,6 @@ extern \"C\" void LLVMRustDisposeTargetMachine(LLVMTargetMachineRef TM) {\n   delete unwrap(TM);\n }\n \n-// Unfortunately, LLVM doesn't expose a C API to add the corresponding analysis\n-// passes for a target to a pass manager. We export that functionality through\n-// this function.\n-extern \"C\" void LLVMRustAddAnalysisPasses(LLVMTargetMachineRef TM,\n-                                          LLVMPassManagerRef PMR,\n-                                          LLVMModuleRef M) {\n-  PassManagerBase *PM = unwrap(PMR);\n-  PM->add(\n-      createTargetTransformInfoWrapperPass(unwrap(TM)->getTargetIRAnalysis()));\n-}\n-\n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,"}]}