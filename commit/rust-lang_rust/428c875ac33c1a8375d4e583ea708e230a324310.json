{"sha": "428c875ac33c1a8375d4e583ea708e230a324310", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOGM4NzVhYzMzYzFhODM3NWQ0ZTU4M2VhNzA4ZTIzMGEzMjQzMTA=", "commit": {"author": {"name": "Julien Cretin", "email": "cretin@google.com", "date": "2017-11-11T23:30:46Z"}, "committer": {"name": "ia0", "email": "git@ia0.eu", "date": "2017-11-13T21:50:22Z"}, "message": "Add std::sync::mpsc::Receiver::recv_deadline()\n\nEssentially renames recv_max_until to recv_deadline (mostly copying recv_timeout\ndocumentation). This function is useful to avoid the often unnecessary call to\nInstant::now in recv_timeout (e.g. when the user already has a deadline). A\nconcrete example would be something along those lines:\n\n```rust\nuse std::sync::mpsc::Receiver;\nuse std::time::{Duration, Instant};\n\n/// Reads a batch of elements\n///\n/// Returns as soon as `max_size` elements have been received or `timeout` expires.\nfn recv_batch_timeout<T>(receiver: &Receiver<T>, timeout: Duration, max_size: usize) -> Vec<T> {\n    recv_batch_deadline(receiver, Instant::now() + timeout, max_size)\n}\n\n/// Reads a batch of elements\n///\n/// Returns as soon as `max_size` elements have been received or `deadline` is reached.\nfn recv_batch_deadline<T>(receiver: &Receiver<T>, deadline: Instant, max_size: usize) -> Vec<T> {\n    let mut result = Vec::new();\n    while let Ok(x) = receiver.recv_deadline(deadline) {\n        result.push(x);\n        if result.len() == max_size {\n            break;\n        }\n    }\n    result\n}\n```", "tree": {"sha": "2b66b0a90b237129e9ee4ddcfd8e146ff5418447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b66b0a90b237129e9ee4ddcfd8e146ff5418447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428c875ac33c1a8375d4e583ea708e230a324310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428c875ac33c1a8375d4e583ea708e230a324310", "html_url": "https://github.com/rust-lang/rust/commit/428c875ac33c1a8375d4e583ea708e230a324310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428c875ac33c1a8375d4e583ea708e230a324310/comments", "author": {"login": "ia0", "id": 969295, "node_id": "MDQ6VXNlcjk2OTI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/969295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ia0", "html_url": "https://github.com/ia0", "followers_url": "https://api.github.com/users/ia0/followers", "following_url": "https://api.github.com/users/ia0/following{/other_user}", "gists_url": "https://api.github.com/users/ia0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ia0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ia0/subscriptions", "organizations_url": "https://api.github.com/users/ia0/orgs", "repos_url": "https://api.github.com/users/ia0/repos", "events_url": "https://api.github.com/users/ia0/events{/privacy}", "received_events_url": "https://api.github.com/users/ia0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ia0", "id": 969295, "node_id": "MDQ6VXNlcjk2OTI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/969295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ia0", "html_url": "https://github.com/ia0", "followers_url": "https://api.github.com/users/ia0/followers", "following_url": "https://api.github.com/users/ia0/following{/other_user}", "gists_url": "https://api.github.com/users/ia0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ia0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ia0/subscriptions", "organizations_url": "https://api.github.com/users/ia0/orgs", "repos_url": "https://api.github.com/users/ia0/repos", "events_url": "https://api.github.com/users/ia0/events{/privacy}", "received_events_url": "https://api.github.com/users/ia0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bb4d1e758423dd10b517628401c1b2c2437715", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bb4d1e758423dd10b517628401c1b2c2437715", "html_url": "https://github.com/rust-lang/rust/commit/24bb4d1e758423dd10b517628401c1b2c2437715"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "6462c1b7976a9f1239998360eaed6d67de1961d2", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/428c875ac33c1a8375d4e583ea708e230a324310/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428c875ac33c1a8375d4e583ea708e230a324310/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=428c875ac33c1a8375d4e583ea708e230a324310", "patch": "@@ -1297,11 +1297,70 @@ impl<T> Receiver<T> {\n             Err(TryRecvError::Disconnected)\n                 => Err(RecvTimeoutError::Disconnected),\n             Err(TryRecvError::Empty)\n-                => self.recv_max_until(Instant::now() + timeout)\n+                => self.recv_deadline(Instant::now() + timeout)\n         }\n     }\n \n-    fn recv_max_until(&self, deadline: Instant) -> Result<T, RecvTimeoutError> {\n+    /// Attempts to wait for a value on this receiver, returning an error if the\n+    /// corresponding channel has hung up, or if `deadline` is reached.\n+    ///\n+    /// This function will always block the current thread if there is no data\n+    /// available and it's possible for more data to be sent. Once a message is\n+    /// sent to the corresponding [`Sender`][] (or [`SyncSender`]), then this\n+    /// receiver will wake up and return that message.\n+    ///\n+    /// If the corresponding [`Sender`] has disconnected, or it disconnects while\n+    /// this call is blocking, this call will wake up and return [`Err`] to\n+    /// indicate that no more messages can ever be received on this channel.\n+    /// However, since channels are buffered, messages sent before the disconnect\n+    /// will still be properly received.\n+    ///\n+    /// [`Sender`]: struct.Sender.html\n+    /// [`SyncSender`]: struct.SyncSender.html\n+    /// [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Successfully receiving value before reaching deadline:\n+    ///\n+    /// ```no_run\n+    /// use std::thread;\n+    /// use std::time::{Duration, Instant};\n+    /// use std::sync::mpsc;\n+    ///\n+    /// let (send, recv) = mpsc::channel();\n+    ///\n+    /// thread::spawn(move || {\n+    ///     send.send('a').unwrap();\n+    /// });\n+    ///\n+    /// assert_eq!(\n+    ///     recv.recv_deadline(Instant::now() + Duration::from_millis(400)),\n+    ///     Ok('a')\n+    /// );\n+    /// ```\n+    ///\n+    /// Receiving an error upon reaching deadline:\n+    ///\n+    /// ```no_run\n+    /// use std::thread;\n+    /// use std::time::{Duration, Instant};\n+    /// use std::sync::mpsc;\n+    ///\n+    /// let (send, recv) = mpsc::channel();\n+    ///\n+    /// thread::spawn(move || {\n+    ///     thread::sleep(Duration::from_millis(800));\n+    ///     send.send('a').unwrap();\n+    /// });\n+    ///\n+    /// assert_eq!(\n+    ///     recv.recv_deadline(Instant::now() + Duration::from_millis(400)),\n+    ///     Err(mpsc::RecvTimeoutError::Timeout)\n+    /// );\n+    /// ```\n+    #[stable(feature = \"mpsc_recv_deadline\", since = \"1.23.0\")]\n+    pub fn recv_deadline(&self, deadline: Instant) -> Result<T, RecvTimeoutError> {\n         use self::RecvTimeoutError::*;\n \n         loop {"}]}