{"sha": "121499a11990b9e8d7359f7f51a7bafb1a266002", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMTQ5OWExMTk5MGI5ZThkNzM1OWY3ZjUxYTdiYWZiMWEyNjYwMDI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-12T21:46:23Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-13T09:10:07Z"}, "message": "Don't promote to 'static the result of dereferences.", "tree": {"sha": "c0282d4de8caf7a708e91497c22aa5ba515f3e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0282d4de8caf7a708e91497c22aa5ba515f3e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121499a11990b9e8d7359f7f51a7bafb1a266002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121499a11990b9e8d7359f7f51a7bafb1a266002", "html_url": "https://github.com/rust-lang/rust/commit/121499a11990b9e8d7359f7f51a7bafb1a266002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121499a11990b9e8d7359f7f51a7bafb1a266002/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf081c8c54e92702f350fa30d77561540324401", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf081c8c54e92702f350fa30d77561540324401", "html_url": "https://github.com/rust-lang/rust/commit/6cf081c8c54e92702f350fa30d77561540324401"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "9c7df7e672b9fd6a03022f997abc0471f49b4f20", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/121499a11990b9e8d7359f7f51a7bafb1a266002/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121499a11990b9e8d7359f7f51a7bafb1a266002/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=121499a11990b9e8d7359f7f51a7bafb1a266002", "patch": "@@ -491,9 +491,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 this.add(Qualif::STATIC);\n                             }\n \n+                            this.add(Qualif::NOT_CONST);\n+\n                             let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n                             if let ty::TyRawPtr(_) = base_ty.sty {\n-                                this.add(Qualif::NOT_CONST);\n                                 if this.mode != Mode::Fn {\n                                     struct_span_err!(this.tcx.sess,\n                                         this.span, E0396,\n@@ -570,7 +571,38 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n         // Recurse through operands and places.\n-        self.super_rvalue(rvalue, location);\n+        if let Rvalue::Ref(region, kind, ref place) = *rvalue {\n+            let mut is_reborrow = false;\n+            if let Place::Projection(ref proj) = *place {\n+                if let ProjectionElem::Deref = proj.elem {\n+                    let base_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n+                    if let ty::TyRef(..) = base_ty.sty {\n+                        is_reborrow = true;\n+                    }\n+                }\n+            }\n+\n+            if is_reborrow {\n+                self.nest(|this| {\n+                    this.super_place(place, PlaceContext::Borrow {\n+                        region,\n+                        kind\n+                    }, location);\n+                    if !this.try_consume() {\n+                        return;\n+                    }\n+\n+                    if this.qualif.intersects(Qualif::STATIC_REF) {\n+                        this.qualif = this.qualif - Qualif::STATIC_REF;\n+                        this.add(Qualif::STATIC);\n+                    }\n+                });\n+            } else {\n+                self.super_rvalue(rvalue, location);\n+            }\n+        } else {\n+            self.super_rvalue(rvalue, location);\n+        }\n \n         match *rvalue {\n             Rvalue::Use(_) |"}, {"sha": "3efed7f1f5de1ed996d6caf28e628ff40b07efdb", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/121499a11990b9e8d7359f7f51a7bafb1a266002/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121499a11990b9e8d7359f7f51a7bafb1a266002/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=121499a11990b9e8d7359f7f51a7bafb1a266002", "patch": "@@ -352,14 +352,9 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         hir::ExprBox(_) => {\n             v.promotable = false;\n         }\n-        hir::ExprUnary(op, ref inner) => {\n-            match v.tables.node_id_to_type(inner.hir_id).sty {\n-                ty::TyRawPtr(_) => {\n-                    assert!(op == hir::UnDeref);\n-\n-                    v.promotable = false;\n-                }\n-                _ => {}\n+        hir::ExprUnary(op, _) => {\n+            if op == hir::UnDeref {\n+                v.promotable = false;\n             }\n         }\n         hir::ExprBinary(op, ref lhs, _) => {\n@@ -548,7 +543,8 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr) {\n     use rustc::ty::adjustment::*;\n \n-    for adjustment in v.tables.expr_adjustments(e) {\n+    let mut adjustments = v.tables.expr_adjustments(e).iter().peekable();\n+    while let Some(adjustment) = adjustments.next() {\n         match adjustment.kind {\n             Adjust::NeverToAny |\n             Adjust::ReifyFnPointer |\n@@ -558,11 +554,14 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n             Adjust::Borrow(_) |\n             Adjust::Unsize => {}\n \n-            Adjust::Deref(ref overloaded) => {\n-                if overloaded.is_some() {\n-                    v.promotable = false;\n-                    break;\n+            Adjust::Deref(_) => {\n+                if let Some(next_adjustment) = adjustments.peek() {\n+                    if let Adjust::Borrow(_) = next_adjustment.kind {\n+                        continue;\n+                    }\n                 }\n+                v.promotable = false;\n+                break;\n             }\n         }\n     }"}]}