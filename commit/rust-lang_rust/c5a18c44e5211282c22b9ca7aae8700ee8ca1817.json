{"sha": "c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YTE4YzQ0ZTUyMTEyODJjMjJiOWNhN2FhZTg3MDBlZThjYTE4MTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-11T14:36:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-11T14:36:27Z"}, "message": "Introduce hir::GenericParam\n\nUnlike existing hir::GenericParams, this is a global ID.", "tree": {"sha": "1b0f7c7b0f430d4174ca05e5464b3af98128bafe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b0f7c7b0f430d4174ca05e5464b3af98128bafe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "html_url": "https://github.com/rust-lang/rust/commit/c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff609cc49715571324b72d2bda60d56878466640", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff609cc49715571324b72d2bda60d56878466640", "html_url": "https://github.com/rust-lang/rust/commit/ff609cc49715571324b72d2bda60d56878466640"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "5a0bd0c192e886073816b3862ee7e45d73540a24", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     expr::{validation::ExprValidator, BindingAnnotation, Body, BodySourceMap, Pat, PatId},\n-    generics::HasGenericParams,\n+    generics::{GenericDef, HasGenericParams},\n     ids::{\n         AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n         TypeAliasId,\n@@ -1121,3 +1121,9 @@ impl Local {\n         src.map(|ast| ast.map(|it| it.cast().unwrap().to_node(&root), |it| it.to_node(&root)))\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct GenericParam {\n+    pub(crate) parent: GenericDef,\n+    pub(crate) idx: u32,\n+}"}, {"sha": "92d71b9e88f9fe505be5153bd943108ed4ea5e08", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "patch": "@@ -65,8 +65,8 @@ pub use crate::{\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-        EnumVariant, FieldSource, FnData, Function, HasBody, Local, MacroDef, Module, ModuleDef,\n-        ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+        EnumVariant, FieldSource, FnData, Function, GenericParam, HasBody, Local, MacroDef, Module,\n+        ModuleDef, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,"}, {"sha": "fe4211819edf4b912106d66af32cec1280c497c8", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "patch": "@@ -28,8 +28,8 @@ use crate::{\n     ids::LocationCtx,\n     resolve::{ScopeDef, TypeNs, ValueNs},\n     ty::method_resolution::{self, implements_trait},\n-    AssocItem, Const, DefWithBody, Either, Enum, FromSource, Function, HasBody, HirFileId, Local,\n-    MacroDef, Module, Name, Path, Resolver, Static, Struct, Ty,\n+    AssocItem, Const, DefWithBody, Either, Enum, FromSource, Function, GenericParam, HasBody,\n+    HirFileId, Local, MacroDef, Module, Name, Path, Resolver, Static, Struct, Ty,\n };\n \n fn try_get_resolver_for_node(\n@@ -107,7 +107,7 @@ pub enum PathResolution {\n     /// A local binding (only value namespace)\n     Local(Local),\n     /// A generic parameter\n-    GenericParam(u32),\n+    GenericParam(GenericParam),\n     SelfType(crate::ImplBlock),\n     Macro(MacroDef),\n     AssocItem(crate::AssocItem),\n@@ -227,7 +227,10 @@ impl SourceAnalyzer {\n     ) -> Option<PathResolution> {\n         let types = self.resolver.resolve_path_in_type_ns_fully(db, &path).map(|ty| match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it),\n-            TypeNs::GenericParam(it) => PathResolution::GenericParam(it),\n+            TypeNs::GenericParam(idx) => PathResolution::GenericParam(GenericParam {\n+                parent: self.resolver.generic_def().unwrap(),\n+                idx,\n+            }),\n             TypeNs::AdtSelfType(it) | TypeNs::Adt(it) => PathResolution::Def(it.into()),\n             TypeNs::EnumVariant(it) => PathResolution::Def(it.into()),\n             TypeNs::TypeAlias(it) => PathResolution::Def(it.into()),"}, {"sha": "ccd75278ae857b4fb59c58920714cf15db1c02e4", "filename": "crates/ra_ide_api/src/references/name_definition.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a18c44e5211282c22b9ca7aae8700ee8ca1817/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fname_definition.rs?ref=c5a18c44e5211282c22b9ca7aae8700ee8ca1817", "patch": "@@ -4,7 +4,8 @@\n //! Note that the reference search is possible for not all of the classified items.\n \n use hir::{\n-    Adt, AssocItem, HasSource, Local, MacroDef, Module, ModuleDef, StructField, Ty, VariantDef,\n+    Adt, AssocItem, GenericParam, HasSource, Local, MacroDef, Module, ModuleDef, StructField, Ty,\n+    VariantDef,\n };\n use ra_syntax::{ast, ast::VisibilityOwner};\n \n@@ -18,7 +19,7 @@ pub enum NameKind {\n     Def(ModuleDef),\n     SelfType(Ty),\n     Local(Local),\n-    GenericParam(u32),\n+    GenericParam(GenericParam),\n }\n \n #[derive(PartialEq, Eq)]"}]}