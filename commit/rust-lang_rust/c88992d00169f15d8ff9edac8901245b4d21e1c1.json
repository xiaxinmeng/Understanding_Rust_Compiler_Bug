{"sha": "c88992d00169f15d8ff9edac8901245b4d21e1c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODk5MmQwMDE2OWYxNWQ4ZmY5ZWRhYzg5MDEyNDViNGQyMWUxYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-07T08:41:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-07T08:41:07Z"}, "message": "Auto merge of #50000 - michaelwoerister:cross-lang-lto, r=alexcrichton\n\nAdd some groundwork for cross-language LTO.\n\nImplements part of #49879:\n- Adds a `-Z cross-lang-lto` flag to rustc\n- Makes sure that bitcode is embedded in object files if the flag is set.\n\nThis should already allow for using cross language LTO for staticlibs (where one has to invoke the linker manually anyway). However, `rustc` will not try to enable LTO for its own linker invocations yet.\n\nr? @alexcrichton", "tree": {"sha": "9562051a844a59b766d7245679d0dcfe1e14f408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9562051a844a59b766d7245679d0dcfe1e14f408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c88992d00169f15d8ff9edac8901245b4d21e1c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c88992d00169f15d8ff9edac8901245b4d21e1c1", "html_url": "https://github.com/rust-lang/rust/commit/c88992d00169f15d8ff9edac8901245b4d21e1c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c88992d00169f15d8ff9edac8901245b4d21e1c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b97705f9edb9aef64f417952c02b01dbf16bcea", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b97705f9edb9aef64f417952c02b01dbf16bcea", "html_url": "https://github.com/rust-lang/rust/commit/9b97705f9edb9aef64f417952c02b01dbf16bcea"}, {"sha": "0bf26bf9519025e2c89d1d51ba8c7fe52351675f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf26bf9519025e2c89d1d51ba8c7fe52351675f", "html_url": "https://github.com/rust-lang/rust/commit/0bf26bf9519025e2c89d1d51ba8c7fe52351675f"}], "stats": {"total": 177, "additions": 160, "deletions": 17}, "files": [{"sha": "650e09feb0e6340d2905bf4854aafbad44c6b084", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -835,7 +835,7 @@ test!(RunFailFullDepsPretty {\n     host: true\n });\n \n-default_test!(RunMake {\n+host_test!(RunMake {\n     path: \"src/test/run-make\",\n     mode: \"run-make\",\n     suite: \"run-make\"\n@@ -1022,7 +1022,7 @@ impl Step for Compiletest {\n \n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n-            if !builder.config.dry_run && suite == \"run-make-fulldeps\" {\n+            if !builder.config.dry_run && mode == \"run-make\" {\n                 let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n                 cmd.arg(\"--cc\").arg(builder.cc(target))\n@@ -1035,13 +1035,13 @@ impl Step for Compiletest {\n                 }\n             }\n         }\n-        if suite == \"run-make-fulldeps\" && !builder.config.llvm_enabled {\n+        if mode == \"run-make\" && !builder.config.llvm_enabled {\n             builder.info(\n                 &format!(\"Ignoring run-make test suite as they generally don't work without LLVM\"));\n             return;\n         }\n \n-        if suite != \"run-make-fulldeps\" {\n+        if mode != \"run-make\" {\n             cmd.arg(\"--cc\").arg(\"\")\n                .arg(\"--cxx\").arg(\"\")\n                .arg(\"--cflags\").arg(\"\")"}, {"sha": "220af6bd6e4af02b7c8df1f64a7f427379b1c1ab", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -10,6 +10,7 @@\n \n use std::fs;\n use std::env;\n+use std::iter;\n use std::path::PathBuf;\n use std::process::{Command, exit};\n \n@@ -593,7 +594,7 @@ impl<'a> Builder<'a> {\n     /// right location to run `compiler`.\n     fn prepare_tool_cmd(&self, compiler: Compiler, cmd: &mut Command) {\n         let host = &compiler.host;\n-        let mut paths: Vec<PathBuf> = vec![\n+        let mut lib_paths: Vec<PathBuf> = vec![\n             PathBuf::from(&self.sysroot_libdir(compiler, compiler.host)),\n             self.cargo_out(compiler, Mode::Tool, *host).join(\"deps\"),\n         ];\n@@ -610,11 +611,46 @@ impl<'a> Builder<'a> {\n                 }\n                 for path in env::split_paths(v) {\n                     if !curpaths.contains(&path) {\n-                        paths.push(path);\n+                        lib_paths.push(path);\n                     }\n                 }\n             }\n         }\n-        add_lib_path(paths, cmd);\n+\n+        // Add the llvm/bin directory to PATH since it contains lots of\n+        // useful, platform-independent tools\n+        if let Some(llvm_bin_path) = self.llvm_bin_path() {\n+            if host.contains(\"windows\") {\n+                // On Windows, PATH and the dynamic library path are the same,\n+                // so we just add the LLVM bin path to lib_path\n+                lib_paths.push(llvm_bin_path);\n+            } else {\n+                let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+                let new_path = env::join_paths(iter::once(llvm_bin_path)\n+                        .chain(env::split_paths(&old_path)))\n+                    .expect(\"Could not add LLVM bin path to PATH\");\n+                cmd.env(\"PATH\", new_path);\n+            }\n+        }\n+\n+        add_lib_path(lib_paths, cmd);\n+    }\n+\n+    fn llvm_bin_path(&self) -> Option<PathBuf> {\n+        if self.config.llvm_enabled && !self.config.dry_run {\n+            let llvm_config = self.ensure(native::Llvm {\n+                target: self.config.build,\n+                emscripten: false,\n+            });\n+\n+            // Add the llvm/bin directory to PATH since it contains lots of\n+            // useful, platform-independent tools\n+            let llvm_bin_path = llvm_config.parent()\n+                .expect(\"Expected llvm-config to be contained in directory\");\n+            assert!(llvm_bin_path.is_dir());\n+            Some(llvm_bin_path.to_path_buf())\n+        } else {\n+            None\n+        }\n     }\n }"}, {"sha": "83dac033f940863377bbba0a791903bb51c9cfa4", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -1295,6 +1295,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"make the current crate share its generic instantiations\"),\n     chalk: bool = (false, parse_bool, [TRACKED],\n           \"enable the experimental Chalk-based trait solving engine\"),\n+    cross_lang_lto: bool = (false, parse_bool, [TRACKED],\n+          \"generate build artifacts that are compatible with linker-based LTO.\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "b6fae3eaff23a64cfd0cf62f5a207790562d76e8", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -293,7 +293,8 @@ impl ModuleConfig {\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n         self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode;\n         let embed_bitcode = sess.target.target.options.embed_bitcode ||\n-            sess.opts.debugging_opts.embed_bitcode;\n+                            sess.opts.debugging_opts.embed_bitcode ||\n+                            sess.opts.debugging_opts.cross_lang_lto;\n         if embed_bitcode {\n             match sess.opts.optimize {\n                 config::OptLevel::No |\n@@ -841,13 +842,18 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext,\n         \"rustc.embedded.module\\0\".as_ptr() as *const _,\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n-    let section = if cgcx.opts.target_triple.triple().contains(\"-ios\") {\n+\n+    let is_apple = cgcx.opts.target_triple.triple().contains(\"-ios\") ||\n+                   cgcx.opts.target_triple.triple().contains(\"-darwin\");\n+\n+    let section = if is_apple {\n         \"__LLVM,__bitcode\\0\"\n     } else {\n         \".llvmbc\\0\"\n     };\n     llvm::LLVMSetSection(llglobal, section.as_ptr() as *const _);\n     llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n+    llvm::LLVMSetGlobalConstant(llglobal, llvm::True);\n \n     let llconst = C_bytes_in_context(llcx, &[]);\n     let llglobal = llvm::LLVMAddGlobal(\n@@ -856,7 +862,7 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext,\n         \"rustc.embedded.cmdline\\0\".as_ptr() as *const _,\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n-    let section = if cgcx.opts.target_triple.triple().contains(\"-ios\") {\n+    let section = if  is_apple {\n         \"__LLVM,__cmdline\\0\"\n     } else {\n         \".llvmcmd\\0\"\n@@ -1350,6 +1356,10 @@ fn execute_work_item(cgcx: &CodegenContext,\n             // settings.\n             let needs_lto = needs_lto && mtrans.kind != ModuleKind::Metadata;\n \n+            // Don't run LTO passes when cross-lang LTO is enabled. The linker\n+            // will do that for us in this case.\n+            let needs_lto = needs_lto && !cgcx.opts.debugging_opts.cross_lang_lto;\n+\n             if needs_lto {\n                 Ok(WorkItemResult::NeedsLTO(mtrans))\n             } else {"}, {"sha": "98b509cd81f5453e204d4625be5869acb619ee31", "filename": "src/test/run-make/cross-lang-lto/Makefile", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftest%2Frun-make%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftest%2Frun-make%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcross-lang-lto%2FMakefile?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -0,0 +1,53 @@\n+\n+# min-llvm-version 4.0\n+# ignore-mingw\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# This test makes sure that the expected .llvmbc sections for use by\n+# linker-based LTO are available in object files when compiling with\n+# -Z cross-lang-lto\n+\n+LLVMBC_SECTION_NAME=\\\\.llvmbc\n+\n+ifeq ($(UNAME),Darwin)\n+\tLLVMBC_SECTION_NAME=__bitcode\n+endif\n+\n+\n+OBJDUMP=llvm-objdump\n+SECTION_HEADERS=$(OBJDUMP) -section-headers\n+\n+BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto -Ccodegen-units=1\n+\n+BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto -Ccodegen-units=1 --emit=obj\n+\n+all: staticlib staticlib-fat-lto staticlib-thin-lto rlib exe cdylib rdylib\n+\n+staticlib: lib.rs\n+\t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib.a\n+\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\n+staticlib-fat-lto: lib.rs\n+\t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-fat-lto.a -Clto=fat\n+\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib-fat-lto.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\n+staticlib-thin-lto: lib.rs\n+\t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-thin-lto.a -Clto=thin\n+\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib-thin-lto.a | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\n+rlib: lib.rs\n+\t$(BUILD_LIB) --crate-type=rlib -o $(TMPDIR)/liblib.rlib\n+\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/liblib.rlib | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\n+cdylib: lib.rs\n+\t$(BUILD_LIB) --crate-type=cdylib --emit=obj -o $(TMPDIR)/cdylib.o\n+\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/cdylib.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\n+rdylib: lib.rs\n+\t$(BUILD_LIB) --crate-type=dylib --emit=obj -o $(TMPDIR)/rdylib.o\n+\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/rdylib.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]\n+\n+exe: lib.rs\n+\t$(BUILD_EXE) -o $(TMPDIR)/exe.o\n+\t[ \"$$($(SECTION_HEADERS) $(TMPDIR)/exe.o | grep -c $(LLVMBC_SECTION_NAME))\" -ne \"0\" ]"}, {"sha": "b2a5b946160f03edb827750e416e9f5576e2dffd", "filename": "src/test/run-make/cross-lang-lto/lib.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftest%2Frun-make%2Fcross-lang-lto%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftest%2Frun-make%2Fcross-lang-lto%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcross-lang-lto%2Flib.rs?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle]\n+pub extern \"C\" fn foo() {\n+    println!(\"abc\");\n+}"}, {"sha": "ccd34c9e4dbedc109152a91bc9bd0349c1b8a107", "filename": "src/test/run-make/cross-lang-lto/main.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftest%2Frun-make%2Fcross-lang-lto%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftest%2Frun-make%2Fcross-lang-lto%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcross-lang-lto%2Fmain.rs?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"Hello World\");\n+}"}, {"sha": "32980a513f6f94a8946693aa2a7cdae0c3ad45af", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -425,6 +425,15 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n     if testfile.is_dir() {\n         return;\n     }\n+\n+    let comment = if testfile.to_string_lossy().ends_with(\".rs\") {\n+        \"//\"\n+    } else {\n+        \"#\"\n+    };\n+\n+    let comment_with_brace = comment.to_string() + \"[\";\n+\n     let rdr = BufReader::new(File::open(testfile).unwrap());\n     for ln in rdr.lines() {\n         // Assume that any directives will be found before the first\n@@ -434,10 +443,11 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n         let ln = ln.trim();\n         if ln.starts_with(\"fn\") || ln.starts_with(\"mod\") {\n             return;\n-        } else if ln.starts_with(\"//[\") {\n+        } else if ln.starts_with(&comment_with_brace) {\n             // A comment like `//[foo]` is specific to revision `foo`\n             if let Some(close_brace) = ln.find(']') {\n-                let lncfg = &ln[3..close_brace];\n+                let open_brace = ln.find('[').unwrap();\n+                let lncfg = &ln[open_brace + 1 .. close_brace];\n                 let matches = match cfg {\n                     Some(s) => s == &lncfg[..],\n                     None => false,\n@@ -446,11 +456,11 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut FnMut(&str)) {\n                     it(ln[(close_brace + 1) ..].trim_left());\n                 }\n             } else {\n-                panic!(\"malformed condition directive: expected `//[foo]`, found `{}`\",\n-                       ln)\n+                panic!(\"malformed condition directive: expected `{}foo]`, found `{}`\",\n+                        comment_with_brace, ln)\n             }\n-        } else if ln.starts_with(\"//\") {\n-            it(ln[2..].trim_left());\n+        } else if ln.starts_with(comment) {\n+            it(ln[comment.len() ..].trim_left());\n         }\n     }\n     return;"}, {"sha": "e8b140978b51b5a621bf38473295bc5fd67a62bb", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c88992d00169f15d8ff9edac8901245b4d21e1c1/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=c88992d00169f15d8ff9edac8901245b4d21e1c1", "patch": "@@ -614,7 +614,12 @@ pub fn is_test(file_name: &OsString) -> bool {\n }\n \n pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn {\n-    let early_props = EarlyProps::from_file(config, &testpaths.file);\n+\n+    let early_props = if config.mode == Mode::RunMake {\n+        EarlyProps::from_file(config, &testpaths.file.join(\"Makefile\"))\n+    } else {\n+        EarlyProps::from_file(config, &testpaths.file)\n+    };\n \n     // The `should-fail` annotation doesn't apply to pretty tests,\n     // since we run the pretty printer across all tests by default."}]}