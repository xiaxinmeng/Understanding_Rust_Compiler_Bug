{"sha": "be305c2b1f4be31c66c3f646a85dc459d6ee5807", "node_id": "C_kwDOAAsO6NoAKGJlMzA1YzJiMWY0YmUzMWM2NmMzZjY0NmE4NWRjNDU5ZDZlZTU4MDc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-28T16:38:09Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-12T10:35:38Z"}, "message": "Introduce cargo_command helper", "tree": {"sha": "489d10e9c2a7a803a75eae7a5e1d6e28feabc51e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/489d10e9c2a7a803a75eae7a5e1d6e28feabc51e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be305c2b1f4be31c66c3f646a85dc459d6ee5807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be305c2b1f4be31c66c3f646a85dc459d6ee5807", "html_url": "https://github.com/rust-lang/rust/commit/be305c2b1f4be31c66c3f646a85dc459d6ee5807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be305c2b1f4be31c66c3f646a85dc459d6ee5807/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c677cba06b69510585e7ce1f21523857679f08b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c677cba06b69510585e7ce1f21523857679f08b8", "html_url": "https://github.com/rust-lang/rust/commit/c677cba06b69510585e7ce1f21523857679f08b8"}], "stats": {"total": 152, "additions": 81, "deletions": 71}, "files": [{"sha": "177b44d3141f190ebc621bc0a3ff491245fe71b5", "filename": "build_system/abi_checker.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Fabi_checker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Fabi_checker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_checker.rs?ref=be305c2b1f4be31c66c3f646a85dc459d6ee5807", "patch": "@@ -1,10 +1,9 @@\n use std::env;\n use std::path::Path;\n-use std::process::Command;\n \n use super::build_sysroot;\n use super::config;\n-use super::utils::spawn_and_wait;\n+use super::utils::{cargo_command, spawn_and_wait};\n use super::SysrootKind;\n \n pub(crate) fn run(\n@@ -38,14 +37,11 @@ pub(crate) fn run(\n     eprintln!(\"Running abi-checker\");\n     let mut abi_checker_path = env::current_dir().unwrap();\n     abi_checker_path.push(\"abi-checker\");\n-    env::set_current_dir(abi_checker_path.clone()).unwrap();\n+    env::set_current_dir(&abi_checker_path.clone()).unwrap();\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n \n-    let mut cmd = Command::new(\"cargo\");\n-    cmd.arg(\"run\");\n-    cmd.arg(\"--target\");\n-    cmd.arg(target_triple);\n+    let mut cmd = cargo_command(\"cargo\", \"run\", Some(target_triple), &abi_checker_path);\n     cmd.arg(\"--\");\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);"}, {"sha": "cda468bcfa2dfc2e0bfe494bd5a1a9414a97eed6", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=be305c2b1f4be31c66c3f646a85dc459d6ee5807", "patch": "@@ -1,17 +1,16 @@\n use std::env;\n-use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::path::PathBuf;\n \n use super::rustc_info::get_file_name;\n-use super::utils::is_ci;\n+use super::utils::{cargo_command, is_ci};\n \n pub(crate) fn build_backend(\n     channel: &str,\n     host_triple: &str,\n     use_unstable_features: bool,\n ) -> PathBuf {\n-    let mut cmd = Command::new(\"cargo\");\n-    cmd.arg(\"build\").arg(\"--target\").arg(host_triple);\n+    let source_dir = std::env::current_dir().unwrap();\n+    let mut cmd = cargo_command(\"cargo\", \"build\", Some(host_triple), &source_dir);\n \n     cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n \n@@ -42,7 +41,8 @@ pub(crate) fn build_backend(\n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n     super::utils::spawn_and_wait(cmd);\n \n-    Path::new(\"target\")\n+    source_dir\n+        .join(\"target\")\n         .join(host_triple)\n         .join(channel)\n         .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))"}, {"sha": "c2c81feb25a6b64c5b27ae942fc2ef00c57738b0", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=be305c2b1f4be31c66c3f646a85dc459d6ee5807", "patch": "@@ -3,7 +3,7 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n use super::rustc_info::{get_file_name, get_rustc_version, get_wrapper_file_name};\n-use super::utils::{spawn_and_wait, try_hard_link};\n+use super::utils::{cargo_command, spawn_and_wait, try_hard_link};\n use super::SysrootKind;\n \n pub(crate) fn build_sysroot(\n@@ -185,8 +185,7 @@ fn build_clif_sysroot_for_triple(\n     }\n \n     // Build sysroot\n-    let mut build_cmd = Command::new(\"cargo\");\n-    build_cmd.arg(\"build\").arg(\"--target\").arg(triple).current_dir(\"build_sysroot\");\n+    let mut build_cmd = cargo_command(\"cargo\", \"build\", Some(triple), Path::new(\"build_sysroot\"));\n     let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n     if channel == \"release\" {"}, {"sha": "83a76d3591d6803bc26ccbefdb27e6abd0f8dc9f", "filename": "build_system/prepare.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=be305c2b1f4be31c66c3f646a85dc459d6ee5807", "patch": "@@ -5,7 +5,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n-use super::utils::{copy_dir_recursively, spawn_and_wait};\n+use super::utils::{cargo_command, copy_dir_recursively, spawn_and_wait};\n \n pub(crate) fn prepare() {\n     prepare_sysroot();\n@@ -52,8 +52,7 @@ pub(crate) fn prepare() {\n     );\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let mut build_cmd = Command::new(\"cargo\");\n-    build_cmd.arg(\"build\").env_remove(\"CARGO_TARGET_DIR\").current_dir(\"simple-raytracer\");\n+    let build_cmd = cargo_command(\"cargo\", \"build\", None, Path::new(\"simple-raytracer\"));\n     spawn_and_wait(build_cmd);\n     fs::copy(\n         Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),"}, {"sha": "3f0d461fbe6c307579508e4539e8c2a5acc8ee56", "filename": "build_system/tests.rs", "status": "modified", "additions": 48, "deletions": 52, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=be305c2b1f4be31c66c3f646a85dc459d6ee5807", "patch": "@@ -1,7 +1,7 @@\n use super::build_sysroot;\n use super::config;\n use super::rustc_info::get_wrapper_file_name;\n-use super::utils::{spawn_and_wait, spawn_and_wait_with_input};\n+use super::utils::{cargo_command, spawn_and_wait, spawn_and_wait_with_input};\n use build_system::SysrootKind;\n use std::env;\n use std::ffi::OsStr;\n@@ -218,20 +218,14 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"test.rust-random/rand\", &|runner| {\n         runner.in_dir([\"rand\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo(\"clean\", []);\n \n             if runner.host_triple == runner.target_triple {\n                 eprintln!(\"[TEST] rust-random/rand\");\n-                runner.run_cargo([\"test\", \"--workspace\"]);\n+                runner.run_cargo(\"test\", [\"--workspace\"]);\n             } else {\n                 eprintln!(\"[AOT] rust-random/rand\");\n-                runner.run_cargo([\n-                    \"build\",\n-                    \"--workspace\",\n-                    \"--target\",\n-                    &runner.target_triple,\n-                    \"--tests\",\n-                ]);\n+                runner.run_cargo(\"build\", [\"--workspace\", \"--tests\"]);\n             }\n         });\n     }),\n@@ -247,11 +241,19 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n                 bench_compile.arg(\"--warmup\");\n                 bench_compile.arg(\"1\");\n                 bench_compile.arg(\"--prepare\");\n-                bench_compile.arg(format!(\"{:?}\", runner.cargo_command([\"clean\"])));\n+                bench_compile.arg(format!(\"{:?}\", runner.cargo_command(\"clean\", [])));\n \n                 bench_compile.arg(\"cargo build\");\n \n-                bench_compile.arg(format!(\"{:?}\", runner.cargo_command([\"build\"])));\n+                let cargo_clif = runner\n+                    .root_dir\n+                    .clone()\n+                    .join(\"build\")\n+                    .join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n+                let mut clif_build_cmd = cargo_command(cargo_clif, \"build\", None, Path::new(\".\"));\n+                clif_build_cmd.env(\"RUSTFLAGS\", &runner.rust_flags);\n+                bench_compile.arg(format!(\"{:?}\", clif_build_cmd));\n+\n                 spawn_and_wait(bench_compile);\n \n                 eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n@@ -265,51 +267,39 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n                 bench_run.arg(PathBuf::from(\"./raytracer_cg_clif\"));\n                 spawn_and_wait(bench_run);\n             } else {\n-                runner.run_cargo([\"clean\"]);\n+                runner.run_cargo(\"clean\", []);\n                 eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\");\n                 eprintln!(\"[COMPILE] ebobby/simple-raytracer\");\n-                runner.run_cargo([\"build\", \"--target\", &runner.target_triple]);\n+                runner.run_cargo(\"build\", []);\n                 eprintln!(\"[BENCH RUN] ebobby/simple-raytracer (skipped)\");\n             }\n         });\n     }),\n     TestCase::new(\"test.libcore\", &|runner| {\n         runner.in_dir([\"build_sysroot\", \"sysroot_src\", \"library\", \"core\", \"tests\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo(\"clean\", []);\n \n             if runner.host_triple == runner.target_triple {\n-                runner.run_cargo([\"test\"]);\n+                runner.run_cargo(\"test\", []);\n             } else {\n                 eprintln!(\"Cross-Compiling: Not running tests\");\n-                runner.run_cargo([\"build\", \"--target\", &runner.target_triple, \"--tests\"]);\n+                runner.run_cargo(\"build\", [\"--tests\"]);\n             }\n         });\n     }),\n     TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n         runner.in_dir([\"regex\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo(\"clean\", []);\n \n             // newer aho_corasick versions throw a deprecation warning\n             let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n \n-            let mut build_cmd = runner.cargo_command([\n-                \"build\",\n-                \"--example\",\n-                \"shootout-regex-dna\",\n-                \"--target\",\n-                &runner.target_triple,\n-            ]);\n+            let mut build_cmd = runner.cargo_command(\"build\", [\"--example\", \"shootout-regex-dna\"]);\n             build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n             spawn_and_wait(build_cmd);\n \n             if runner.host_triple == runner.target_triple {\n-                let mut run_cmd = runner.cargo_command([\n-                    \"run\",\n-                    \"--example\",\n-                    \"shootout-regex-dna\",\n-                    \"--target\",\n-                    &runner.target_triple,\n-                ]);\n+                let mut run_cmd = runner.cargo_command(\"run\", [\"--example\", \"shootout-regex-dna\"]);\n                 run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n \n                 let input =\n@@ -350,40 +340,42 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     }),\n     TestCase::new(\"test.regex\", &|runner| {\n         runner.in_dir([\"regex\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n+            runner.run_cargo(\"clean\", []);\n \n             // newer aho_corasick versions throw a deprecation warning\n             let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.rust_flags);\n \n             if runner.host_triple == runner.target_triple {\n-                let mut run_cmd = runner.cargo_command([\n+                let mut run_cmd = runner.cargo_command(\n                     \"test\",\n-                    \"--tests\",\n-                    \"--\",\n-                    \"--exclude-should-panic\",\n-                    \"--test-threads\",\n-                    \"1\",\n-                    \"-Zunstable-options\",\n-                    \"-q\",\n-                ]);\n+                    [\n+                        \"--tests\",\n+                        \"--\",\n+                        \"--exclude-should-panic\",\n+                        \"--test-threads\",\n+                        \"1\",\n+                        \"-Zunstable-options\",\n+                        \"-q\",\n+                    ],\n+                );\n                 run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n                 spawn_and_wait(run_cmd);\n             } else {\n                 eprintln!(\"Cross-Compiling: Not running tests\");\n                 let mut build_cmd =\n-                    runner.cargo_command([\"build\", \"--tests\", \"--target\", &runner.target_triple]);\n+                    runner.cargo_command(\"build\", [\"--tests\", \"--target\", &runner.target_triple]);\n                 build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n                 spawn_and_wait(build_cmd);\n             }\n         });\n     }),\n     TestCase::new(\"test.portable-simd\", &|runner| {\n         runner.in_dir([\"portable-simd\"], |runner| {\n-            runner.run_cargo([\"clean\"]);\n-            runner.run_cargo([\"build\", \"--all-targets\", \"--target\", &runner.target_triple]);\n+            runner.run_cargo(\"clean\", []);\n+            runner.run_cargo(\"build\", [\"--all-targets\", \"--target\", &runner.target_triple]);\n \n             if runner.host_triple == runner.target_triple {\n-                runner.run_cargo([\"test\", \"-q\"]);\n+                runner.run_cargo(\"test\", [\"-q\"]);\n             }\n         });\n     }),\n@@ -590,25 +582,29 @@ impl TestRunner {\n         spawn_and_wait(cmd);\n     }\n \n-    fn cargo_command<I, S>(&self, args: I) -> Command\n+    fn cargo_command<'a, I>(&self, subcommand: &str, args: I) -> Command\n     where\n-        I: IntoIterator<Item = S>,\n-        S: AsRef<OsStr>,\n+        I: IntoIterator<Item = &'a str>,\n     {\n         let mut cargo_clif = self.root_dir.clone();\n         cargo_clif.push(\"build\");\n         cargo_clif.push(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n \n-        let mut cmd = Command::new(cargo_clif);\n+        let mut cmd = cargo_command(\n+            cargo_clif,\n+            subcommand,\n+            if subcommand == \"clean\" { None } else { Some(&self.target_triple) },\n+            Path::new(\".\"),\n+        );\n         cmd.args(args);\n         cmd.env(\"RUSTFLAGS\", &self.rust_flags);\n         cmd\n     }\n \n-    fn run_cargo<'a, I>(&self, args: I)\n+    fn run_cargo<'a, I>(&self, subcommand: &str, args: I)\n     where\n         I: IntoIterator<Item = &'a str>,\n     {\n-        spawn_and_wait(self.cargo_command(args));\n+        spawn_and_wait(self.cargo_command(subcommand, args));\n     }\n }"}, {"sha": "4015a2beaba2279b80bd2f4bb3ab2c083caf048c", "filename": "build_system/utils.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be305c2b1f4be31c66c3f646a85dc459d6ee5807/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=be305c2b1f4be31c66c3f646a85dc459d6ee5807", "patch": "@@ -4,6 +4,26 @@ use std::io::Write;\n use std::path::Path;\n use std::process::{self, Command, Stdio};\n \n+pub(crate) fn cargo_command(\n+    cargo: impl AsRef<Path>,\n+    subcommand: &str,\n+    triple: Option<&str>,\n+    source_dir: &Path,\n+) -> Command {\n+    let mut cmd = Command::new(cargo.as_ref());\n+    cmd.arg(subcommand)\n+        .arg(\"--manifest-path\")\n+        .arg(source_dir.join(\"Cargo.toml\"))\n+        .arg(\"--target-dir\")\n+        .arg(source_dir.join(\"target\"));\n+\n+    if let Some(triple) = triple {\n+        cmd.arg(\"--target\").arg(triple);\n+    }\n+\n+    cmd\n+}\n+\n #[track_caller]\n pub(crate) fn try_hard_link(src: impl AsRef<Path>, dst: impl AsRef<Path>) {\n     let src = src.as_ref();"}]}