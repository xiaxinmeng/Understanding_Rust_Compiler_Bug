{"sha": "c4e74270819a7615a577c90f7616b422bc07eb21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZTc0MjcwODE5YTc2MTVhNTc3YzkwZjc2MTZiNDIyYmMwN2ViMjE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-31T17:20:18Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:35:55Z"}, "message": "Only store a LocalDefId in hir::MacroDef.", "tree": {"sha": "cabc3f0b62857bf3b08522c711275eaa6505a5d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cabc3f0b62857bf3b08522c711275eaa6505a5d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e74270819a7615a577c90f7616b422bc07eb21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e74270819a7615a577c90f7616b422bc07eb21", "html_url": "https://github.com/rust-lang/rust/commit/c4e74270819a7615a577c90f7616b422bc07eb21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e74270819a7615a577c90f7616b422bc07eb21/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff14cac621ce63d848abf615e45acd86fec32f50", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff14cac621ce63d848abf615e45acd86fec32f50", "html_url": "https://github.com/rust-lang/rust/commit/ff14cac621ce63d848abf615e45acd86fec32f50"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "5a1754751bfd96ccebc3f0a258ddb8f4f4e0f931", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -234,13 +234,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         if let ItemKind::MacroDef(MacroDef { ref body, macro_rules }) = i.kind {\n             if !macro_rules || self.sess.contains_name(&i.attrs, sym::macro_export) {\n-                let hir_id = self.lower_node_id(i.id);\n+                let def_id = self.lower_node_id(i.id).expect_owner();\n                 let body = P(self.lower_mac_args(body));\n                 self.exported_macros.push(hir::MacroDef {\n                     ident,\n                     vis,\n                     attrs,\n-                    hir_id,\n+                    def_id,\n                     span: i.span,\n                     ast: MacroDef { body, macro_rules },\n                 });"}, {"sha": "e95f31a1fe80e7c5fce2143442664c50a83506b6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -761,16 +761,22 @@ impl Crate<'_> {\n /// A macro definition, in this crate or imported from another.\n ///\n /// Not parsed directly, but created on macro import or `macro_rules!` expansion.\n-#[derive(Debug, HashStable_Generic)]\n+#[derive(Debug)]\n pub struct MacroDef<'hir> {\n     pub ident: Ident,\n     pub vis: Visibility<'hir>,\n     pub attrs: &'hir [Attribute],\n-    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub span: Span,\n     pub ast: ast::MacroDef,\n }\n \n+impl MacroDef<'_> {\n+    pub fn hir_id(&self) -> HirId {\n+        HirId::make_owner(self.def_id)\n+    }\n+}\n+\n /// A block of statements `{ .. }`, which may have a label (in this case the\n /// `targeted_by_break` field will be `true`) and may be `unsafe` by means of\n /// the `rules` being anything but `DefaultBlock`.\n@@ -2941,7 +2947,8 @@ impl<'hir> Node<'hir> {\n             Node::Item(Item { def_id, .. })\n             | Node::TraitItem(TraitItem { def_id, .. })\n             | Node::ImplItem(ImplItem { def_id, .. })\n-            | Node::ForeignItem(ForeignItem { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n+            | Node::ForeignItem(ForeignItem { def_id, .. })\n+            | Node::MacroDef(MacroDef { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n             Node::Field(StructField { hir_id, .. })\n             | Node::AnonConst(AnonConst { hir_id, .. })\n             | Node::Expr(Expr { hir_id, .. })\n@@ -2952,7 +2959,6 @@ impl<'hir> Node<'hir> {\n             | Node::Arm(Arm { hir_id, .. })\n             | Node::Block(Block { hir_id, .. })\n             | Node::Local(Local { hir_id, .. })\n-            | Node::MacroDef(MacroDef { hir_id, .. })\n             | Node::Lifetime(Lifetime { hir_id, .. })\n             | Node::Param(Param { hir_id, .. })\n             | Node::GenericParam(GenericParam { hir_id, .. }) => Some(*hir_id),"}, {"sha": "6a2719c2d66778ebeeed059a061bbd941c46ee34", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -489,7 +489,7 @@ pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n }\n \n pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef<'v>) {\n-    visitor.visit_id(macro_def.hir_id);\n+    visitor.visit_id(macro_def.hir_id());\n     visitor.visit_ident(macro_def.ident);\n     walk_list!(visitor, visit_attribute, macro_def.attrs);\n }"}, {"sha": "5fb4b8a58c210bd45eeb6de4d726d40dffc5399e", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -1,8 +1,8 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n use crate::hir::{\n-    BodyId, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem,\n-    TraitItemId, Ty, VisibilityKind,\n+    BodyId, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item, ItemId, MacroDef, Mod,\n+    TraitItem, TraitItemId, Ty, VisibilityKind,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n use rustc_span::def_id::{DefPathHash, LocalDefId};\n@@ -203,3 +203,17 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Item<'_> {\n         });\n     }\n }\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for MacroDef<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let MacroDef { ident, ref attrs, def_id: _, ref ast, ref vis, span } = *self;\n+\n+        hcx.hash_hir_item_like(|hcx| {\n+            ident.name.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+            ast.hash_stable(hcx, hasher);\n+            vis.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+        });\n+    }\n+}"}, {"sha": "cc5b7ef098756b078f91f67107898febc796a363", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -41,7 +41,7 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> LintLevelMap {\n     let push = builder.levels.push(&krate.item.attrs, &store, true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     for macro_def in krate.exported_macros {\n-        builder.levels.register_id(macro_def.hir_id);\n+        builder.levels.register_id(macro_def.hir_id());\n     }\n     intravisit::walk_crate(&mut builder, krate);\n     builder.levels.pop(push);"}, {"sha": "1306aa49dbc3c5198e603cf44e70db07d193a547", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -1494,7 +1494,7 @@ impl EncodeContext<'a, 'tcx> {\n \n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n-        let def_id = self.tcx.hir().local_def_id(macro_def.hir_id).to_def_id();\n+        let def_id = macro_def.def_id.to_def_id();\n         record!(self.tables.kind[def_id] <- EntryKind::MacroDef(self.lazy(macro_def.ast.clone())));\n         self.encode_ident_span(def_id, macro_def.ident);\n     }"}, {"sha": "b9fb3142c633e2d1d9dbf8fac4b2234178a3ee79", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -517,15 +517,15 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         // Exported macros are visited directly from the crate root,\n         // so they do not have `parent_node` set.\n         // Find the correct enclosing module from their DefKey.\n-        let def_key = self.definitions.def_key(macro_def.hir_id.owner);\n+        let def_key = self.definitions.def_key(macro_def.def_id);\n         let parent = def_key.parent.map_or(hir::CRATE_HIR_ID, |local_def_index| {\n             self.definitions.local_def_id_to_hir_id(LocalDefId { local_def_index })\n         });\n         self.with_parent(parent, |this| {\n-            this.with_dep_node_owner(macro_def.hir_id.owner, macro_def, |this, hash| {\n+            this.with_dep_node_owner(macro_def.def_id, macro_def, |this, hash| {\n                 this.insert_with_hash(\n                     macro_def.span,\n-                    macro_def.hir_id,\n+                    macro_def.hir_id(),\n                     Node::MacroDef(macro_def),\n                     hash,\n                 );"}, {"sha": "35f7fa0f6d74175cdb9a2565fbf7e4da14abacd3", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -500,7 +500,7 @@ impl<'hir> Map<'hir> {\n         V: Visitor<'hir>,\n     {\n         for id in self.krate().exported_macros {\n-            visitor.visit_macro_def(self.expect_macro_def(id.hir_id));\n+            visitor.visit_macro_def(self.expect_macro_def(id.hir_id()));\n         }\n     }\n "}, {"sha": "bf9b7e588bd4b471feec430408cb1fefb31da572", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -1155,7 +1155,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_macro_def(&mut self, macro_def: &'tcx hir::MacroDef<'tcx>) {\n         self.check_attributes(\n-            macro_def.hir_id,\n+            macro_def.hir_id(),\n             macro_def.attrs,\n             &macro_def.span,\n             Target::MacroDef,"}, {"sha": "29e99203fddc39dcecf33369ae3ac651ff310210", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -106,7 +106,7 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n     for m in tcx.hir().krate().exported_macros {\n-        collector.observe_item(m.attrs, m.hir_id);\n+        collector.observe_item(m.attrs, m.hir_id());\n     }\n \n     collector.items"}, {"sha": "e35ad10968d33a198fd1e696b3839bdd9a2db06f", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -246,7 +246,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'v hir::MacroDef<'v>) {\n-        self.record(\"MacroDef\", Id::Node(macro_def.hir_id), macro_def);\n+        self.record(\"MacroDef\", Id::Node(macro_def.hir_id()), macro_def);\n         hir_visit::walk_macro_def(self, macro_def)\n     }\n }"}, {"sha": "f538427efd9ff3433f14c2a018413f4ec44fb121", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -473,7 +473,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n         self.annotate(\n-            md.hir_id,\n+            md.hir_id(),\n             &md.attrs,\n             md.span,\n             AnnotationKind::Required,\n@@ -599,7 +599,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef<'tcx>) {\n-        self.check_missing_stability(md.hir_id, md.span);\n+        self.check_missing_stability(md.hir_id(), md.span);\n     }\n \n     // Note that we don't need to `check_missing_stability` for default generic parameters,"}, {"sha": "890493fa85387a2c946798835a4dc053e0d66756", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -867,14 +867,12 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             // `#[macro_export]`-ed `macro_rules!` are `Public` since they\n             // ignore their containing path to always appear at the crate root.\n             if md.ast.macro_rules {\n-                self.update(md.hir_id, Some(AccessLevel::Public));\n+                self.update(md.hir_id(), Some(AccessLevel::Public));\n             }\n             return;\n         }\n \n-        let macro_module_def_id =\n-            ty::DefIdTree::parent(self.tcx, self.tcx.hir().local_def_id(md.hir_id).to_def_id())\n-                .unwrap();\n+        let macro_module_def_id = ty::DefIdTree::parent(self.tcx, md.def_id.to_def_id()).unwrap();\n         let hir_id = macro_module_def_id\n             .as_local()\n             .map(|def_id| self.tcx.hir().local_def_id_to_hir_id(def_id));\n@@ -884,7 +882,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             _ => return,\n         };\n         let level = if md.vis.node.is_pub() { self.get(module_id) } else { None };\n-        let new_level = self.update(md.hir_id, level);\n+        let new_level = self.update(md.hir_id(), level);\n         if new_level.is_none() {\n             return;\n         }"}, {"sha": "99aea2e0c29dfdc0363762ae0d6d66198a97cf16", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -2291,7 +2291,7 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n             )\n         } else {\n             let vis = item.vis.clean(cx);\n-            let def_id = cx.tcx.hir().local_def_id(item.hir_id).to_def_id();\n+            let def_id = item.def_id.to_def_id();\n \n             if matchers.len() <= 1 {\n                 format!(\n@@ -2314,7 +2314,7 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n         };\n \n         Item::from_hir_id_and_parts(\n-            item.hir_id,\n+            item.hir_id(),\n             Some(name),\n             MacroItem(Macro { source, imported_from: None }),\n             cx,"}, {"sha": "c3b9fd5a1dd4284d681e0fdc726fe0cb11c43ffb", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -1112,7 +1112,7 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         self.visit_testable(\n             macro_def.ident.to_string(),\n             &macro_def.attrs,\n-            macro_def.hir_id,\n+            macro_def.hir_id(),\n             macro_def.span,\n             |_| (),\n         );"}, {"sha": "e92ea55caa7377b626beabc0fcada545bca63427", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4e74270819a7615a577c90f7616b422bc07eb21/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e74270819a7615a577c90f7616b422bc07eb21/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c4e74270819a7615a577c90f7616b422bc07eb21", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             // (since a direct parent isn't necessarily a module, c.f. #77828).\n             let macro_parent_def_id = {\n                 use rustc_middle::ty::DefIdTree;\n-                tcx.parent(tcx.hir().local_def_id(def.hir_id).to_def_id()).unwrap()\n+                tcx.parent(def.def_id.to_def_id()).unwrap()\n             };\n             let macro_parent_path = tcx.def_path(macro_parent_def_id);\n             // HACK: rustdoc has no way to lookup `doctree::Module`s by their HirId. Instead,"}]}