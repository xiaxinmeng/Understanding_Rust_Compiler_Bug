{"sha": "aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYWIxNGRkM2Y1ZTY2MDk3ZTVlZjNkYmExYTZiZmUzZmNhYjY4ZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-01T10:25:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-01T10:25:31Z"}, "message": "Auto merge of #31277 - DanielJCampbell:SpanEquality, r=nrc\n\nr? @nrc", "tree": {"sha": "6e91e68323cd48c761c1166c77bd62a59ab95bc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e91e68323cd48c761c1166c77bd62a59ab95bc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb", "html_url": "https://github.com/rust-lang/rust/commit/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14dc9fcc672b904245bc41732b5ca9a4f24436da", "url": "https://api.github.com/repos/rust-lang/rust/commits/14dc9fcc672b904245bc41732b5ca9a4f24436da", "html_url": "https://github.com/rust-lang/rust/commit/14dc9fcc672b904245bc41732b5ca9a4f24436da"}, {"sha": "e1be504068d827e4a8e42bf63a355fea9484ef5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1be504068d827e4a8e42bf63a355fea9484ef5d", "html_url": "https://github.com/rust-lang/rust/commit/e1be504068d827e4a8e42bf63a355fea9484ef5d"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "178e2a4d1bc7882d816188cebf605b148cb579d2", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'b, 'v, 'tcx> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n         // whether they're used or not. Also ignore imports with a dummy span\n         // because this means that they were generated in some fashion by the\n         // compiler and we don't need to consider them.\n-        if item.vis == hir::Public || item.span == DUMMY_SP {\n+        if item.vis == hir::Public || item.span.source_equal(&DUMMY_SP) {\n             return;\n         }\n "}, {"sha": "03dc25e1b3c2bd3617cb8e0449dd39a6f055397f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb", "patch": "@@ -356,7 +356,7 @@ pub fn pat_is_ident(pat: P<ast::Pat>) -> bool {\n // since I'm using this to replace ==, it seems appropriate\n // to compare the span, global, etc. fields as well.\n pub fn path_name_eq(a : &ast::Path, b : &ast::Path) -> bool {\n-    (a.span == b.span)\n+    (a.span.source_equal(&b.span))\n     && (a.global == b.global)\n     && (segments_name_eq(&a.segments[..], &b.segments[..]))\n }"}, {"sha": "9557310f318e9b4f3ef4cc9d04126c408a77eec3", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb", "patch": "@@ -123,7 +123,7 @@ impl Sub for CharPos {\n /// able to use many of the functions on spans in codemap and you cannot assume\n /// that the length of the span = hi - lo; there may be space in the BytePos\n /// range between files.\n-#[derive(Clone, Copy, Hash)]\n+#[derive(Clone, Copy, Hash, PartialEq, Eq)]\n pub struct Span {\n     pub lo: BytePos,\n     pub hi: BytePos,\n@@ -151,13 +151,21 @@ pub const COMMAND_LINE_SP: Span = Span { lo: BytePos(0),\n impl Span {\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n-        if self == DUMMY_SP { other } else { self }\n+        if self.source_equal(&DUMMY_SP) { other } else { self }\n     }\n \n     pub fn contains(self, other: Span) -> bool {\n         self.lo <= other.lo && other.hi <= self.hi\n     }\n \n+    /// Return true if the spans are equal with regards to the source text.\n+    ///\n+    /// Use this instead of `==` when either span could be generated code,\n+    /// and you only care that they point to the same bytes of source text.\n+    pub fn source_equal(&self, other: &Span) -> bool {\n+        self.lo == other.lo && self.hi == other.hi\n+    }\n+\n     /// Returns `Some(span)`, a union of `self` and `other`, on overlap.\n     pub fn merge(self, other: Span) -> Option<Span> {\n         if self.expn_id != other.expn_id {\n@@ -192,15 +200,6 @@ pub struct Spanned<T> {\n     pub span: Span,\n }\n \n-impl PartialEq for Span {\n-    fn eq(&self, other: &Span) -> bool {\n-        return (*self).lo == (*other).lo && (*self).hi == (*other).hi;\n-    }\n-    fn ne(&self, other: &Span) -> bool { !(*self).eq(other) }\n-}\n-\n-impl Eq for Span {}\n-\n impl Encodable for Span {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_struct(\"Span\", 2, |s| {\n@@ -940,7 +939,7 @@ impl CodeMap {\n     }\n \n     pub fn span_to_string(&self, sp: Span) -> String {\n-        if self.files.borrow().is_empty() && sp == DUMMY_SP {\n+        if self.files.borrow().is_empty() && sp.source_equal(&DUMMY_SP) {\n             return \"no-location\".to_string();\n         }\n \n@@ -1307,7 +1306,7 @@ impl CodeMap {\n                 expninfo.map_or(/* hit the top level */ true, |info| {\n \n                     let span_comes_from_this_expansion =\n-                        info.callee.span.map_or(span == info.call_site, |mac_span| {\n+                        info.callee.span.map_or(span.source_equal(&info.call_site), |mac_span| {\n                             mac_span.contains(span)\n                         });\n "}, {"sha": "7e0e17423de8c36ae782e09a1a6aca67989b2ce8", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=aaab14dd3f5e66097e5ef3dba1a6bfe3fcab68fb", "patch": "@@ -10,7 +10,7 @@\n \n use self::Destination::*;\n \n-use codemap::{self, COMMAND_LINE_SP, COMMAND_LINE_EXPN, DUMMY_SP, Pos, Span, MultiSpan};\n+use codemap::{self, COMMAND_LINE_SP, DUMMY_SP, Pos, Span, MultiSpan};\n use diagnostics;\n \n use errors::{Level, RenderSpan, CodeSuggestion, DiagnosticBuilder};\n@@ -175,9 +175,7 @@ impl EmitterWriter {\n         let msp = rsp.span();\n         let bounds = msp.to_span_bounds();\n \n-        // We cannot check equality directly with COMMAND_LINE_SP\n-        // since PartialEq is manually implemented to ignore the ExpnId\n-        let ss = if bounds.expn_id == COMMAND_LINE_EXPN {\n+        let ss = if bounds == COMMAND_LINE_SP {\n             \"<command line option>\".to_string()\n         } else if let EndSpan(_) = *rsp {\n             let span_end = Span { lo: bounds.hi, hi: bounds.hi, expn_id: bounds.expn_id};\n@@ -606,7 +604,7 @@ impl EmitterWriter {\n             };\n \n             // Don't print recursive invocations\n-            if span != last_span {\n+            if !span.source_equal(&last_span) {\n                 let mut diag_string = macro_decl_name;\n                 if let Some(def_site_span) = def_site_span {\n                     diag_string.push_str(&format!(\" (defined in {})\","}]}