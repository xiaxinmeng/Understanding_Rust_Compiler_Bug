{"sha": "9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMWIxMmI5NGFjMTE1Y2VmZDM5ZmU5ZTRhNmMyNGVkZmNlY2Q0ZjE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-10T19:32:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-10T19:32:53Z"}, "message": "Rollup merge of #66377 - XAMPPRocky:relnotes-1.40.0, r=Mark-Simulacrum\n\nUpdate RELEASES.md for 1.40.0\n\n### [Rendered](https://github.com/XAMPPRocky/rust/blob/relnotes-1.40.0/RELEASES.md)\n\nr? @Mark-Simulacrum\ncc @rust-lang/release", "tree": {"sha": "372c7d8387428e4463476ecfe5cebc88a84502c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372c7d8387428e4463476ecfe5cebc88a84502c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd7/LmCRBK7hj4Ov3rIwAAdHIIABVHkCsMR0QOcZ6INzXJPBWs\nO1tjecucZREW7BnNvMsuhqtxErL+eeSiglA/WiWa/Z5hwbTEaZcQ/he9c5TCCkuY\nvbYtNdb6EfWzDnL6J+rtci8ldK/xu5s++/7oCkkUTmbqVdMLotLw2P1qZjJmLFgd\nFZU3oKaGoIQ+Dflls7ap3Oigb1ywhQ6T+ekRibr8t8EcUhmZDSnpiPQvqlP7FMkp\n0wpJyxGqlFUoFrsrB2gq2j/O/T+3QHV5dpxw34X2rJDa/dFcByoovCsegWljCnF0\nv+HgypEBt/uRxchVM0/Pwub8WJXCq2nK0nTdetYfKOlLJcOZUI8ztwIFIm2Qwz4=\n=rD0O\n-----END PGP SIGNATURE-----\n", "payload": "tree 372c7d8387428e4463476ecfe5cebc88a84502c2\nparent 8960acf023d6739a601ae83cfc3d4ac30a85893e\nparent dbfb00c4de2bd2c071344729dd3609a963b2da4c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1576006373 +0900\ncommitter GitHub <noreply@github.com> 1576006373 +0900\n\nRollup merge of #66377 - XAMPPRocky:relnotes-1.40.0, r=Mark-Simulacrum\n\nUpdate RELEASES.md for 1.40.0\n\n### [Rendered](https://github.com/XAMPPRocky/rust/blob/relnotes-1.40.0/RELEASES.md)\n\nr? @Mark-Simulacrum\ncc @rust-lang/release\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1", "html_url": "https://github.com/rust-lang/rust/commit/9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8960acf023d6739a601ae83cfc3d4ac30a85893e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8960acf023d6739a601ae83cfc3d4ac30a85893e", "html_url": "https://github.com/rust-lang/rust/commit/8960acf023d6739a601ae83cfc3d4ac30a85893e"}, {"sha": "dbfb00c4de2bd2c071344729dd3609a963b2da4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfb00c4de2bd2c071344729dd3609a963b2da4c", "html_url": "https://github.com/rust-lang/rust/commit/dbfb00c4de2bd2c071344729dd3609a963b2da4c"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "5afc6f9bdc0cb9d9d24ce1698c34adcaa5e372b0", "filename": "RELEASES.md", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=9b1b12b94ac115cefd39fe9e4a6c24edfcecd4f1", "patch": "@@ -1,3 +1,140 @@\n+Version 1.40.0 (2019-12-19)\n+===========================\n+\n+Language\n+--------\n+- [You can now use tuple `struct`s and tuple `enum` variant's constructors in\n+  `const` contexts.][65188] e.g.\n+\n+  ```rust\n+  pub struct Point(i32, i32);\n+\n+  const ORIGIN: Point = {\n+      let constructor = Point;\n+\n+      constructor(0, 0)\n+  };\n+  ```\n+\n+- [You can now mark `struct`s, `enum`s, and `enum` variants with the `#[non_exhaustive]` attribute to\n+  indicate that there may be variants or fields added in the future.][64639]\n+  For example this requires adding a wild-card branch (`_ => {}`) to any match\n+  statements on a non-exhaustive `enum`. [(RFC 2008)]\n+- [You can now use function-like procedural macros in `extern` blocks and in\n+  type positions.][63931] e.g. `type Generated = macro!();`\n+- [Function-like and attribute procedural macros can now emit\n+  `macro_rules!` items, so you can now have your macros generate macros.][64035]\n+- [The `meta` pattern matcher in `macro_rules!` now correctly matches the modern\n+  attribute syntax.][63674] For example `(#[$m:meta])` now matches `#[attr]`,\n+  `#[attr{tokens}]`, `#[attr[tokens]]`, and `#[attr(tokens)]`.\n+\n+Compiler\n+--------\n+- [Added tier 3 support\\* for the\n+  `thumbv7neon-unknown-linux-musleabihf` target.][66103]\n+- [Added tier 3 support for the\n+  `aarch64-unknown-none-softfloat` target.][64589]\n+- [Added tier 3 support for the `mips64-unknown-linux-muslabi64`, and\n+  `mips64el-unknown-linux-muslabi64` targets.][65843]\n+\n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+  information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+- [The `is_power_of_two` method on unsigned numeric types is now a `const` function.][65092]\n+\n+Stabilized APIs\n+---------------\n+- [`BTreeMap::get_key_value`]\n+- [`HashMap::get_key_value`]\n+- [`Option::as_deref_mut`]\n+- [`Option::as_deref`]\n+- [`Option::flatten`]\n+- [`UdpSocket::peer_addr`]\n+- [`f32::to_be_bytes`]\n+- [`f32::to_le_bytes`]\n+- [`f32::to_ne_bytes`]\n+- [`f64::to_be_bytes`]\n+- [`f64::to_le_bytes`]\n+- [`f64::to_ne_bytes`]\n+- [`f32::from_be_bytes`]\n+- [`f32::from_le_bytes`]\n+- [`f32::from_ne_bytes`]\n+- [`f64::from_be_bytes`]\n+- [`f64::from_le_bytes`]\n+- [`f64::from_ne_bytes`]\n+- [`mem::take`]\n+- [`slice::repeat`]\n+- [`todo!`]\n+\n+Cargo\n+-----\n+- [Cargo will now always display warnings, rather than only on\n+  fresh builds.][cargo/7450]\n+- [Feature flags (except `--all-features`) passed to a virtual workspace will\n+  now produce an error.][cargo/7507] Previously these flags were ignored.\n+- [You can now publish `dev-dependencies` without including\n+  a `version`.][cargo/7333]\n+\n+Misc\n+----\n+- [You can now specify the `#[cfg(doctest)]` attribute to include an item only\n+  when running documentation tests with `rustdoc`.][63803]\n+\n+Compatibility Notes\n+-------------------\n+- [As previously announced, any previous NLL warnings in the 2015 edition are\n+  now hard errors.][64221]\n+- [The `include!` macro will now warn if it failed to include the\n+  entire file.][64284] The `include!` macro unintentionally only includes the\n+  first _expression_ in a file, and this can be unintuitive. This will become\n+  either a hard error in a future release, or the behavior may be fixed to include all expressions as expected.\n+- [Using `#[inline]` on function prototypes and consts now emits a warning under\n+  `unused_attribute` lint.][65294] Using `#[inline]` anywhere else inside traits\n+  or `extern` blocks now correctly emits a hard error.\n+  \n+[65294]: https://github.com/rust-lang/rust/pull/65294/\n+[66103]: https://github.com/rust-lang/rust/pull/66103/\n+[65843]: https://github.com/rust-lang/rust/pull/65843/\n+[65188]: https://github.com/rust-lang/rust/pull/65188/\n+[65092]: https://github.com/rust-lang/rust/pull/65092/\n+[64589]: https://github.com/rust-lang/rust/pull/64589/\n+[64639]: https://github.com/rust-lang/rust/pull/64639/\n+[64221]: https://github.com/rust-lang/rust/pull/64221/\n+[64284]: https://github.com/rust-lang/rust/pull/64284/\n+[63931]: https://github.com/rust-lang/rust/pull/63931/\n+[64035]: https://github.com/rust-lang/rust/pull/64035/\n+[63674]: https://github.com/rust-lang/rust/pull/63674/\n+[63803]: https://github.com/rust-lang/rust/pull/63803/\n+[cargo/7450]: https://github.com/rust-lang/cargo/pull/7450/\n+[cargo/7507]: https://github.com/rust-lang/cargo/pull/7507/\n+[cargo/7525]: https://github.com/rust-lang/cargo/pull/7525/\n+[cargo/7333]: https://github.com/rust-lang/cargo/pull/7333/\n+[(rfc 2008)]: https://rust-lang.github.io/rfcs/2008-non-exhaustive.html\n+[`f32::to_be_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_be_bytes\n+[`f32::to_le_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_le_bytes\n+[`f32::to_ne_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_ne_bytes\n+[`f64::to_be_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.to_be_bytes\n+[`f64::to_le_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.to_le_bytes\n+[`f64::to_ne_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.to_ne_bytes\n+[`f32::from_be_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.from_be_bytes\n+[`f32::from_le_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.from_le_bytes\n+[`f32::from_ne_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.from_ne_bytes\n+[`f64::from_be_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.from_be_bytes\n+[`f64::from_le_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.from_le_bytes\n+[`f64::from_ne_bytes`]: https://doc.rust-lang.org/std/primitive.f64.html#method.from_ne_bytes\n+[`option::flatten`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.flatten\n+[`option::as_deref`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref\n+[`option::as_deref_mut`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref_mut\n+[`hashmap::get_key_value`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_key_value\n+[`btreemap::get_key_value`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get_key_value\n+[`slice::repeat`]: https://doc.rust-lang.org/std/primitive.slice.html#method.repeat\n+[`mem::take`]: https://doc.rust-lang.org/std/mem/fn.take.html\n+[`udpsocket::peer_addr`]: https://doc.rust-lang.org/std/net/struct.UdpSocket.html#method.peer_addr\n+[`todo!`]: https://doc.rust-lang.org/std/macro.todo.html\n+\n+\n Version 1.39.0 (2019-11-07)\n ===========================\n "}]}