{"sha": "32691da3d92adf88ffe44b197e64b86dd00f1a67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNjkxZGEzZDkyYWRmODhmZmU0NGIxOTdlNjRiODZkZDAwZjFhNjc=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-06T12:15:57Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-06T12:15:57Z"}, "message": "run clippy_dev fmt\n\nThis seemed to overdo it a bit, affecting multiple submodules, and changing a file I didn't touch, so I didn't commit those changes", "tree": {"sha": "ca3b47865eecdf4ae1c2bf707d00de9c838d639e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca3b47865eecdf4ae1c2bf707d00de9c838d639e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32691da3d92adf88ffe44b197e64b86dd00f1a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32691da3d92adf88ffe44b197e64b86dd00f1a67", "html_url": "https://github.com/rust-lang/rust/commit/32691da3d92adf88ffe44b197e64b86dd00f1a67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32691da3d92adf88ffe44b197e64b86dd00f1a67/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007dc944da130158ba30a524356d680eb663b80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/007dc944da130158ba30a524356d680eb663b80f", "html_url": "https://github.com/rust-lang/rust/commit/007dc944da130158ba30a524356d680eb663b80f"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "7d707b8a0c857c5302d106ac5afcc46be4b25861", "filename": "src/tools/clippy/clippy_lints/src/transmute.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/32691da3d92adf88ffe44b197e64b86dd00f1a67/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32691da3d92adf88ffe44b197e64b86dd00f1a67/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs?ref=32691da3d92adf88ffe44b197e64b86dd00f1a67", "patch": "@@ -8,8 +8,8 @@ use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, GenericArg, Mutability, QPath, TyKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, cast::CastKind, Ty};\n-use rustc_span::DUMMY_SP;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::DUMMY_SP;\n use rustc_typeck::check::{cast::CastCheck, FnCtxt, Inherited};\n use std::borrow::Cow;\n \n@@ -698,18 +698,16 @@ fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx>, to: Ty<'\n /// a transmute. In certain cases, including some invalid casts from array\n /// references to pointers, this may cause additional errors to be emitted and/or\n /// ICE error messages. This function will panic if that occurs.\n-fn can_be_expressed_as_pointer_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> bool {\n+fn can_be_expressed_as_pointer_cast<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+) -> bool {\n     use CastKind::*;\n     matches!(\n         check_cast(cx, e, from_ty, to_ty),\n-        Some(\n-            PtrPtrCast\n-            | PtrAddrCast\n-            | AddrPtrCast\n-            | ArrayPtrCast\n-            | FnPtrPtrCast\n-            | FnPtrAddrCast\n-        )\n+        Some(PtrPtrCast | PtrAddrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast)\n     )\n }\n \n@@ -722,26 +720,18 @@ fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>\n     let local_def_id = hir_id.owner;\n \n     Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-        let fn_ctxt = FnCtxt::new(\n-            &inherited,\n-            cx.param_env,\n-            hir_id\n-        );\n+        let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, hir_id);\n \n         // If we already have errors, we can't be sure we can pointer cast.\n         assert!(\n-            !fn_ctxt.errors_reported_since_creation(), \n+            !fn_ctxt.errors_reported_since_creation(),\n             \"Newly created FnCtxt contained errors\"\n         );\n \n         if let Ok(check) = CastCheck::new(\n-            &fn_ctxt,\n-            e,\n-            from_ty,\n-            to_ty,\n+            &fn_ctxt, e, from_ty, to_ty,\n             // We won't show any error to the user, so we don't care what the span is here.\n-            DUMMY_SP,\n-            DUMMY_SP,\n+            DUMMY_SP, DUMMY_SP,\n         ) {\n             let res = check.do_check(&fn_ctxt);\n "}]}