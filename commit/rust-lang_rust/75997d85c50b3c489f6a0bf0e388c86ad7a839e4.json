{"sha": "75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OTk3ZDg1YzUwYjNjNDg5ZjZhMGJmMGUzODhjODZhZDdhODM5ZTQ=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-01-22T15:36:51Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-28T15:33:15Z"}, "message": "Check WF of predicates with defaults only if all params have defaults", "tree": {"sha": "ceff99d4d82fa6f9711f776c8ccc5c12ab3589ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceff99d4d82fa6f9711f776c8ccc5c12ab3589ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "html_url": "https://github.com/rust-lang/rust/commit/75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addc404d32b8b153f65b180c4bcdc5ccaaba2a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/addc404d32b8b153f65b180c4bcdc5ccaaba2a77", "html_url": "https://github.com/rust-lang/rust/commit/addc404d32b8b153f65b180c4bcdc5ccaaba2a77"}], "stats": {"total": 118, "additions": 64, "deletions": 54}, "files": [{"sha": "3ab2cd274b90ea98ad80a8d4998a9a0f6e00a6ec", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "patch": "@@ -1040,13 +1040,6 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n                 Predicate::ConstEvaluatable(def_id, const_substs.subst(tcx, substs)),\n         }\n     }\n-\n-    pub fn as_poly_trait_predicate(&self) -> Option<&PolyTraitPredicate<'tcx>> {\n-        match self {\n-            Predicate::Trait(trait_pred) => Some(trait_pred),\n-            _ => None\n-        }\n-    }\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "16115fa9be46aa450de5ffc9ee0cef1c292a6bd9", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "patch": "@@ -392,14 +392,13 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         // Check that trait predicates are WF when params are substituted by their defaults.\n         // We don't want to overly constrain the predicates that may be written but we\n         // want to catch obviously wrong cases such as `struct Foo<T: Copy = String>`\n-        // or cases that may cause backwards incompatibility such as a library going from\n-        // `pub struct Foo<T>` to `pub struct Foo<T, U = i32>` where U: Trait<T>`\n-        // which may break existing uses of Foo<T>.\n-        // Therefore the check we do is: If if all params appearing in the LHS of the predicate\n-        // have defaults then we verify that it is WF with all defaults substituted simultaneously.\n+        // or cases where defaults don't work together such as:\n+        // `struct Foo<T = i32, U = u8> where T: into<U>`\n+        // Therefore we check if a predicate in which all type params are defaulted\n+        // is WF with those defaults simultaneously substituted.\n         // For more examples see tests `defaults-well-formedness.rs` and `type-check-defaults.rs`.\n         //\n-        // First, we build the defaulted substitution.\n+        // First we build the defaulted substitution.\n         let mut defaulted_params = Vec::new();\n         let substs = ty::subst::Substs::for_item(fcx.tcx, def_id, |def, _| {\n                 // All regions are identity.\n@@ -414,33 +413,35 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                     fcx.tcx.type_of(def.def_id)\n                 }\n             });\n-        // In `trait Trait: Super`, checking `Self: Trait` or `Self: Super` is problematic.\n-        // We avoid those by skipping any predicates in trait declarations that contain `Self`,\n-        // which is excessive so we end up checking less than we could.\n-        for pred in predicates.predicates.iter()\n-                                         .filter_map(ty::Predicate::as_poly_trait_predicate)\n-                                         .filter(|p| !(is_trait && p.has_self_ty())) {\n-            let is_defaulted_param = |ty: ty::Ty| match ty.sty {\n-                                            ty::TyParam(p) => defaulted_params.contains(&p.idx),\n-                                            _ => false\n-                                          };\n-            // If there is a non-defaulted param in the LHS, don't check the substituted predicate.\n-            // `skip_binder()` is ok, we're only inspecting the type params.\n-            if !pred.skip_binder().self_ty().walk().all(is_defaulted_param) {\n+        let defaulted_params = &defaulted_params;\n+        // Now we build the substituted predicates.\n+        for &pred in predicates.predicates.iter() {\n+            struct HasNonDefaulted<'a> { defaulted_params: &'a Vec<u32> }\n+            impl<'tcx, 'a> ty::fold::TypeVisitor<'tcx> for HasNonDefaulted<'a> {\n+                fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+                    match t.sty {\n+                        ty::TyParam(p) => !self.defaulted_params.contains(&p.idx),\n+                        _ => t.super_visit_with(self)\n+                    }\n+                }\n+            }\n+            // If there is a non-defaulted param in the predicate, don't check it.\n+            if pred.visit_with(&mut HasNonDefaulted { defaulted_params }) {\n                 continue;\n             }\n             let substituted_pred = pred.subst(fcx.tcx, substs);\n-            // `skip_binder()` is ok, we're only inspecting for `has_self_ty()`.\n-            let substituted_lhs = substituted_pred.skip_binder().self_ty();\n             // In trait defs, don't check `Self: Sized` when `Self` is the default.\n-            let pred_is_sized = Some(pred.def_id()) == fcx.tcx.lang_items().sized_trait();\n-            if is_trait && substituted_lhs.has_self_ty() && pred_is_sized {\n-                continue;\n+            if let ty::Predicate::Trait(trait_pred) = substituted_pred {\n+                // `skip_binder()` is ok, we're only inspecting for `has_self_ty()`.\n+                let lhs_is_self = trait_pred.skip_binder().self_ty().has_self_ty();\n+                let pred_sized = Some(trait_pred.def_id()) == fcx.tcx.lang_items().sized_trait();\n+                if is_trait && lhs_is_self && pred_sized {\n+                    continue;\n+                }\n             }\n-            let pred = ty::Predicate::Trait(pred.subst(fcx.tcx, substs));\n-            // Avoid duplicates.\n-            if !predicates.predicates.contains(&pred) {\n-                substituted_predicates.push(pred);\n+            // Avoid duplication of predicates that contain no parameters, for example.\n+            if !predicates.predicates.contains(&substituted_pred) {\n+                substituted_predicates.push(substituted_pred);\n             }\n         }\n "}, {"sha": "6a7b1c51ccd285cf9f28733b10a21f2b07905d37", "filename": "src/test/run-pass/defaults-well-formedness.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs?ref=75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "patch": "@@ -11,11 +11,13 @@\n trait Trait<T> {}\n struct Foo<U, V=i32>(U, V) where U: Trait<V>;\n \n-trait Trait2 {}\n+trait Marker {}\n struct TwoParams<T, U>(T, U);\n-impl Trait2 for TwoParams<i32, i32> {}\n+impl Marker for TwoParams<i32, i32> {}\n // Check that defaults are substituted simultaneously.\n-struct IndividuallyBogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait2;\n+struct IndividuallyBogus<T = i32, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Marker;\n // Clauses with non-defaulted params are not checked.\n-struct NonDefaultedInClause<T, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Trait2;\n+struct NonDefaultedInClause<T, U = i32>(TwoParams<T, U>) where TwoParams<T, U>: Marker;\n+struct DefaultedLhs<U, V=i32>(U, V) where V: Trait<U>;\n+\n fn main() {}"}, {"sha": "ff3fb44bb264e8362d4298b60cdd13ac5fe17fb4", "filename": "src/test/ui/type-check-defaults.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.rs?ref=75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "patch": "@@ -37,11 +37,14 @@ trait Super<T: Copy> { }\n trait Base<T = String>: Super<T> { }\n //~^ error: the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n \n-trait Trait<T> {}\n-struct DefaultedLhs<U, V=i32>(U, V) where V: Trait<U>;\n-//~^ error: the trait bound `i32: Trait<U>` is not satisfied [E0277]\n+trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n+//~^ error: the trait bound `i32: std::ops::Add<u8>` is not satisfied [E0277]\n+\n+// Defaults must work together.\n+struct TwoParams<T = u32, U = i32>(T, U) where T: Bar<U>;\n+//~^ the trait bound `u32: Bar<i32>` is not satisfied [E0277]\n+trait Bar<V> {}\n+impl Bar<String> for u32 { }\n+impl Bar<i32> for String { }\n \n-// FIXME: Deal with projection predicates\n-// trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-// ~^ error: the trait bound `i32: std::ops::Add<u8>` is not satisfied [E0277]\n fn main() { }"}, {"sha": "412a7966f0aac4791471efc2678ca351a5be9c0d", "filename": "src/test/ui/type-check-defaults.stderr", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75997d85c50b3c489f6a0bf0e388c86ad7a839e4/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.stderr?ref=75997d85c50b3c489f6a0bf0e388c86ad7a839e4", "patch": "@@ -79,17 +79,28 @@ note: required by `Super`\n 36 | trait Super<T: Copy> { }\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `i32: Trait<U>` is not satisfied\n-  --> $DIR/type-check-defaults.rs:41:1\n+error[E0277]: the trait bound `i32: std::ops::Add<u8>` is not satisfied\n+  --> $DIR/type-check-defaults.rs:40:1\n    |\n-41 | struct DefaultedLhs<U, V=i32>(U, V) where V: Trait<U>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<U>` is not implemented for `i32`\n+40 | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u8`\n    |\n-note: required by `Trait`\n-  --> $DIR/type-check-defaults.rs:40:1\n+   = help: the trait `std::ops::Add<u8>` is not implemented for `i32`\n+   = note: required by `std::ops::Add`\n+\n+error[E0277]: the trait bound `u32: Bar<i32>` is not satisfied\n+  --> $DIR/type-check-defaults.rs:44:1\n+   |\n+44 | struct TwoParams<T = u32, U = i32>(T, U) where T: Bar<U>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bar<i32>` is not implemented for `u32`\n+   |\n+   = help: the following implementations were found:\n+             <u32 as Bar<std::string::String>>\n+note: required by `Bar`\n+  --> $DIR/type-check-defaults.rs:46:1\n    |\n-40 | trait Trait<T> {}\n-   | ^^^^^^^^^^^^^^\n+46 | trait Bar<V> {}\n+   | ^^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n "}]}