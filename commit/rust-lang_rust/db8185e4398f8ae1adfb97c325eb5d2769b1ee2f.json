{"sha": "db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODE4NWU0Mzk4ZjhhZTFhZGZiOTdjMzI1ZWI1ZDI3NjliMWVlMmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T15:01:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T15:01:06Z"}, "message": "print stacktrace when miri can't find the MIR for something", "tree": {"sha": "20a816687c28a098cae2cfa1a3e1eeeaec9f0ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a816687c28a098cae2cfa1a3e1eeeaec9f0ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX6omyAAoJEFbW7qD8Z6xGHfYP/0fydX7xP2uB3td0MMC6fQzq\nrxKNN2OBBtBVFW+I+pc/3O2+2PMvUKSrJsp9q6gE48Kodwb1leC9ZZmuqFMAPBuO\nJyJX5MPk3xdN63iivsbOp/pjVQlmP7ePVkfOiQKQXbyvUYryWU7s6C0LvW/c8WXV\nWxp3DT4uzUmnYfRGM+wR4h5uUPsJoz/jK8ies39vOKBO5MQvVKV2VwJjRwyXt0kt\nT6/aAS0bRCOL+vXWhJ+/BmgALz//N/80a1K9Gv8Q7kfWXGcMPhElykYrATzRV5Yf\nCdPVxUmfiMT0mgeQiw2ff7m+GWkVrOUE6sjna8fs3ecfeVJphHQE3lTdnoc/KoFz\n1pR/0jdpjDrJ1//rB9Xg3NDR7qC0dYCD1qtaVwKjy3Jzb3dqJkFzD8tRbibdvl6P\nkwdscrYAq0zOgMFWOmm9g1eN2/ChWEts6fq0Zs38Jcci+bWLcLl3+O7gUh0B1taS\n0EBpBHxN3VUqRs+NTapOUI2FBQQBqO3lFD77cIP5G/RO6m1VP6cY+FUwFQWW+GkZ\nkf5JhNz0EnREAb20tHJvTH+AMHk5iqHv/mjSb3kvtpBzI9dOBZgX4YR1naIQozFe\nGKckkDTff2i/39fjpfJaID968rIncmr1Mvp8mnnkSTNbkkbJ/HMscJjPM53l1YFD\nqv29FmRbdHh/M1SS1xNm\n=1niH\n-----END PGP SIGNATURE-----", "payload": "tree 20a816687c28a098cae2cfa1a3e1eeeaec9f0ee2\nparent 69aeaea01f9dfd9f0b0f11acb8619246f2928acf\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474988466 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474988466 +0200\n\nprint stacktrace when miri can't find the MIR for something"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "html_url": "https://github.com/rust-lang/rust/commit/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69aeaea01f9dfd9f0b0f11acb8619246f2928acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/69aeaea01f9dfd9f0b0f11acb8619246f2928acf", "html_url": "https://github.com/rust-lang/rust/commit/69aeaea01f9dfd9f0b0f11acb8619246f2928acf"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "a465ad62b9d422c2bfb20191b5334c5648d10c3b", "filename": "src/error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "patch": "@@ -9,6 +9,7 @@ use syntax::codemap::Span;\n #[derive(Clone, Debug)]\n pub enum EvalError<'tcx> {\n     FunctionPointerTyMismatch(&'tcx BareFnTy<'tcx>, &'tcx BareFnTy<'tcx>),\n+    NoMirFor(String),\n     DanglingPointerDeref,\n     InvalidMemoryAccess,\n     InvalidFunctionPointer,\n@@ -82,6 +83,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"array index out of bounds\",\n             EvalError::Math(..) =>\n                 \"mathematical operation failed\",\n+            EvalError::NoMirFor(..) =>\n+                \"mir not found\",\n             EvalError::InvalidChar(..) =>\n                 \"tried to interpret an invalid 32-bit value as a char\",\n             EvalError::OutOfMemory{..} =>\n@@ -113,6 +116,7 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"memory access of {}..{} outside bounds of allocation {} which has size {}\",\n                        ptr.offset, ptr.offset + size, ptr.alloc_id, allocation_size)\n             },\n+            EvalError::NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n             EvalError::FunctionPointerTyMismatch(expected, got) =>\n                 write!(f, \"tried to call a function of type {:?} through a function pointer of type {:?}\", expected, got),\n             EvalError::ArrayIndexOutOfBounds(span, len, index) =>"}, {"sha": "14f522d33705f3a74ef6c19a2fd77f7d10fc5333", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "patch": "@@ -267,22 +267,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         ty.is_sized(self.tcx, &self.tcx.empty_parameter_environment(), DUMMY_SP)\n     }\n \n-    pub fn load_mir(&self, def_id: DefId) -> CachedMir<'a, 'tcx> {\n+    pub fn load_mir(&self, def_id: DefId) -> EvalResult<'tcx, CachedMir<'a, 'tcx>> {\n+        trace!(\"load mir {:?}\", def_id);\n         if def_id.is_local() {\n-            CachedMir::Ref(self.mir_map.map.get(&def_id).unwrap())\n+            Ok(CachedMir::Ref(self.mir_map.map.get(&def_id).unwrap()))\n         } else {\n             let mut mir_cache = self.mir_cache.borrow_mut();\n             if let Some(mir) = mir_cache.get(&def_id) {\n-                return CachedMir::Owned(mir.clone());\n+                return Ok(CachedMir::Owned(mir.clone()));\n             }\n \n             let cs = &self.tcx.sess.cstore;\n-            let mir = cs.maybe_get_item_mir(self.tcx, def_id).unwrap_or_else(|| {\n-                panic!(\"no mir for `{}`\", self.tcx.item_path_str(def_id));\n-            });\n-            let cached = Rc::new(mir);\n-            mir_cache.insert(def_id, cached.clone());\n-            CachedMir::Owned(cached)\n+            match cs.maybe_get_item_mir(self.tcx, def_id) {\n+                Some(mir) => {\n+                    let cached = Rc::new(mir);\n+                    mir_cache.insert(def_id, cached.clone());\n+                    Ok(CachedMir::Owned(cached))\n+                },\n+                None => Err(EvalError::NoMirFor(self.tcx.item_path_str(def_id))),\n+            }\n         }\n     }\n "}, {"sha": "beecece0cb9d2e96c56988c7d18cb9bcc7228c8e", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "patch": "@@ -125,8 +125,8 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n         if self.ecx.statics.contains_key(&cid) {\n             return;\n         }\n-        let mir = self.ecx.load_mir(def_id);\n         self.try(|this| {\n+            let mir = this.ecx.load_mir(def_id)?;\n             let ptr = this.ecx.alloc_ret_ptr(mir.return_ty, substs)?;\n             this.ecx.statics.insert(cid.clone(), ptr);\n             let cleanup = if immutable && !mir.return_ty.type_contents(this.ecx.tcx).interior_unsafe() {"}, {"sha": "cd024d4c007dc253110157c840e10be6e195c721", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         (def_id, substs)\n                     };\n \n-                let mir = self.load_mir(resolved_def_id);\n+                let mir = self.load_mir(resolved_def_id)?;\n                 let (return_ptr, return_to_block) = match destination {\n                     Some((ptr, block)) => (Some(ptr), StackPopCleanup::Goto(block)),\n                     None => (None, StackPopCleanup::None),"}]}