{"sha": "3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOWMzZjkyY2NjMjA1NmU3M2E4ODg0MGFmZGU2YjlkZjBkYmY3ZWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-26T21:25:04Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-30T03:16:15Z"}, "message": "Format and fix rebase", "tree": {"sha": "4e6aa2e2f3beea84acb4f893c677fab5cf0e7e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6aa2e2f3beea84acb4f893c677fab5cf0e7e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec", "html_url": "https://github.com/rust-lang/rust/commit/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb52883690831a0bbb8b97d75eadc696dd2fd422", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb52883690831a0bbb8b97d75eadc696dd2fd422", "html_url": "https://github.com/rust-lang/rust/commit/fb52883690831a0bbb8b97d75eadc696dd2fd422"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "9916d1b8999f8f37e5249a8b00a13f50a5750985", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec", "patch": "@@ -2,12 +2,13 @@\n //! The main routine here is `ast_ty_to_ty()`; each use is parameterized by an\n //! instance of `AstConv`.\n \n+use crate::collect::PlaceholderHirTyCollector;\n use crate::hir::def::{CtorOf, DefKind, Res};\n use crate::hir::def_id::DefId;\n+use crate::hir::intravisit::Visitor;\n use crate::hir::print;\n use crate::hir::ptr::P;\n use crate::hir::{self, ExprKind, GenericArg, GenericArgs, HirVec};\n-use crate::hir::intravisit::Visitor;\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n@@ -16,7 +17,6 @@ use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n use errors::{Applicability, DiagnosticId};\n-use crate::collect::PlaceholderHirTyCollector;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n@@ -2786,11 +2786,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::Return(ref output) => {\n                 let mut visitor = PlaceholderHirTyCollector::new();\n                 visitor.visit_ty(output);\n-                let is_infer = if let hir::TyKind::Infer = output.kind {\n-                    true\n-                } else {\n-                    false\n-                };\n+                let is_infer = if let hir::TyKind::Infer = output.kind { true } else { false };\n                 if (is_infer || !visitor.0.is_empty()) && !self.allow_ty_infer() {\n                     output_placeholder_types.extend(visitor.0);\n                     tcx.types.err"}, {"sha": "fd173bfbb92671d120778e0b99a9f3bc20192289", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3a9c3f92ccc2056e73a88840afde6b9df0dbf7ec", "patch": "@@ -135,10 +135,13 @@ crate fn placeholder_type_error(\n ) {\n     if !placeholder_types.is_empty() {\n         let possible_names = [\"T\", \"K\", \"L\", \"A\", \"B\", \"C\"];\n-        let used_names = generics.iter().filter_map(|p| match p.name {\n-            hir::ParamName::Plain(ident) => Some(ident.name),\n-            _ => None,\n-        }).collect::<Vec<_>>();\n+        let used_names = generics\n+            .iter()\n+            .filter_map(|p| match p.name {\n+                hir::ParamName::Plain(ident) => Some(ident.name),\n+                _ => None,\n+            })\n+            .collect::<Vec<_>>();\n \n         let mut type_name = \"ParamName\";\n         for name in &possible_names {\n@@ -147,10 +150,9 @@ crate fn placeholder_type_error(\n                 break;\n             }\n         }\n-        \n-        let mut sugg: Vec<_> = placeholder_types.iter()\n-            .map(|sp| (*sp, type_name.to_string()))\n-            .collect();\n+\n+        let mut sugg: Vec<_> =\n+            placeholder_types.iter().map(|sp| (*sp, type_name.to_string())).collect();\n         if generics.is_empty() {\n             sugg.push((ident_span.shrink_to_hi(), format!(\"<{}>\", type_name)));\n         } else {"}]}