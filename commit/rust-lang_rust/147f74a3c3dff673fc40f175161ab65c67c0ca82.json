{"sha": "147f74a3c3dff673fc40f175161ab65c67c0ca82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0N2Y3NGEzYzNkZmY2NzNmYzQwZjE3NTE2MWFiNjVjNjdjMGNhODI=", "commit": {"author": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-08-28T23:22:12Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-08-30T03:05:34Z"}, "message": "Clean up the lowering of AST items", "tree": {"sha": "b8cacdf849414451c4c8ef34d8e8c30e4ed22979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8cacdf849414451c4c8ef34d8e8c30e4ed22979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/147f74a3c3dff673fc40f175161ab65c67c0ca82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/147f74a3c3dff673fc40f175161ab65c67c0ca82", "html_url": "https://github.com/rust-lang/rust/commit/147f74a3c3dff673fc40f175161ab65c67c0ca82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/147f74a3c3dff673fc40f175161ab65c67c0ca82/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9556d7a09a7e80e84430071b29d118f39dde8205", "url": "https://api.github.com/repos/rust-lang/rust/commits/9556d7a09a7e80e84430071b29d118f39dde8205", "html_url": "https://github.com/rust-lang/rust/commit/9556d7a09a7e80e84430071b29d118f39dde8205"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "8daeef0cbd95fbaa0e8c5f869fcf9eaf9079d84e", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/147f74a3c3dff673fc40f175161ab65c67c0ca82/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/147f74a3c3dff673fc40f175161ab65c67c0ca82/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=147f74a3c3dff673fc40f175161ab65c67c0ca82", "patch": "@@ -26,44 +26,43 @@ pub(super) struct ItemLowerer<'a, 'lowering, 'hir> {\n }\n \n impl ItemLowerer<'_, '_, '_> {\n-    fn with_trait_impl_ref(&mut self, impl_ref: &Option<TraitRef>, f: impl FnOnce(&mut Self)) {\n+    fn with_trait_impl_ref<T>(\n+        &mut self,\n+        impl_ref: &Option<TraitRef>,\n+        f: impl FnOnce(&mut Self) -> T,\n+    ) -> T {\n         let old = self.lctx.is_in_trait_impl;\n         self.lctx.is_in_trait_impl = impl_ref.is_some();\n-        f(self);\n+        let ret = f(self);\n         self.lctx.is_in_trait_impl = old;\n+        ret\n     }\n }\n \n impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n     fn visit_item(&mut self, item: &'a Item) {\n-        let mut item_hir_id = None;\n-        self.lctx.with_hir_id_owner(item.id, |lctx| {\n+        let hir_id = self.lctx.with_hir_id_owner(item.id, |lctx| {\n             lctx.without_in_scope_lifetime_defs(|lctx| {\n-                if let Some(hir_item) = lctx.lower_item(item) {\n-                    let id = lctx.insert_item(hir_item);\n-                    item_hir_id = Some(id);\n-                }\n+                let hir_item = lctx.lower_item(item);\n+                lctx.insert_item(hir_item)\n             })\n         });\n \n-        if let Some(hir_id) = item_hir_id {\n-            self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n-                let this = &mut ItemLowerer { lctx: this };\n-                match item.kind {\n-                    ItemKind::Mod(..) => {\n-                        let def_id = this.lctx.lower_node_id(item.id).expect_owner();\n-                        let old_current_module =\n-                            mem::replace(&mut this.lctx.current_module, def_id);\n-                        visit::walk_item(this, item);\n-                        this.lctx.current_module = old_current_module;\n-                    }\n-                    ItemKind::Impl(box ImplKind { ref of_trait, .. }) => {\n-                        this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n-                    }\n-                    _ => visit::walk_item(this, item),\n+        self.lctx.with_parent_item_lifetime_defs(hir_id, |this| {\n+            let this = &mut ItemLowerer { lctx: this };\n+            match item.kind {\n+                ItemKind::Mod(..) => {\n+                    let def_id = this.lctx.lower_node_id(item.id).expect_owner();\n+                    let old_current_module = mem::replace(&mut this.lctx.current_module, def_id);\n+                    visit::walk_item(this, item);\n+                    this.lctx.current_module = old_current_module;\n                 }\n-            });\n-        }\n+                ItemKind::Impl(box ImplKind { ref of_trait, .. }) => {\n+                    this.with_trait_impl_ref(of_trait, |this| visit::walk_item(this, item));\n+                }\n+                _ => visit::walk_item(this, item),\n+            }\n+        });\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'a>, sp: Span, _: NodeId) {\n@@ -113,7 +112,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn with_parent_item_lifetime_defs<T>(\n         &mut self,\n         parent_hir_id: hir::ItemId,\n-        f: impl FnOnce(&mut LoweringContext<'_, '_>) -> T,\n+        f: impl FnOnce(&mut Self) -> T,\n     ) -> T {\n         let old_len = self.in_scope_lifetimes.len();\n \n@@ -137,10 +136,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     // Clears (and restores) the `in_scope_lifetimes` field. Used when\n     // visiting nested items, which never inherit in-scope lifetimes\n     // from their surrounding environment.\n-    fn without_in_scope_lifetime_defs<T>(\n-        &mut self,\n-        f: impl FnOnce(&mut LoweringContext<'_, '_>) -> T,\n-    ) -> T {\n+    fn without_in_scope_lifetime_defs<T>(&mut self, f: impl FnOnce(&mut Self) -> T) -> T {\n         let old_in_scope_lifetimes = mem::replace(&mut self.in_scope_lifetimes, vec![]);\n \n         // this vector is only used when walking over impl headers,\n@@ -208,19 +204,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    pub fn lower_item(&mut self, i: &Item) -> Option<hir::Item<'hir>> {\n+    pub fn lower_item(&mut self, i: &Item) -> hir::Item<'hir> {\n         let mut ident = i.ident;\n         let mut vis = self.lower_visibility(&i.vis, None);\n         let hir_id = self.lower_node_id(i.id);\n         let attrs = self.lower_attrs(hir_id, &i.attrs);\n         let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, &mut vis, &i.kind);\n-        Some(hir::Item {\n+        hir::Item {\n             def_id: hir_id.expect_owner(),\n             ident: self.lower_ident(ident),\n             kind,\n             vis,\n             span: self.lower_span(i.span),\n-        })\n+        }\n     }\n \n     fn lower_item_kind("}]}