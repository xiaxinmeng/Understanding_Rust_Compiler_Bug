{"sha": "cd51523715a77a30660dfb46898eb407937ec9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNTE1MjM3MTVhNzdhMzA2NjBkZmI0Njg5OGViNDA3OTM3ZWM5ZDc=", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2018-09-01T03:57:46Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2018-09-01T19:19:04Z"}, "message": "tidy: Use chars for single-character patterns\n\nFixes the clippy \"single_char_pattern\" lint, and (marginally) improves\nperformance.", "tree": {"sha": "e8bb667026ca83d8a5efcd96fce320bd65592a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8bb667026ca83d8a5efcd96fce320bd65592a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd51523715a77a30660dfb46898eb407937ec9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd51523715a77a30660dfb46898eb407937ec9d7", "html_url": "https://github.com/rust-lang/rust/commit/cd51523715a77a30660dfb46898eb407937ec9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd51523715a77a30660dfb46898eb407937ec9d7/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "571a624aa92a0f1f1a0276d42262a6d2ad89ba7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/571a624aa92a0f1f1a0276d42262a6d2ad89ba7b", "html_url": "https://github.com/rust-lang/rust/commit/571a624aa92a0f1f1a0276d42262a6d2ad89ba7b"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "1f0379f1ea80b8ed6f10c5e719b9a494ddf9efa7", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=cd51523715a77a30660dfb46898eb407937ec9d7", "patch": "@@ -67,7 +67,7 @@ fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n     };\n     let mut lines = deps.lines().peekable();\n     while let Some(line) = lines.next() {\n-        if line.starts_with(\"[\") {\n+        if line.starts_with('[') {\n             break\n         }\n "}, {"sha": "9f55d6f9ad63613b628d400573a87498ae97f370", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=cd51523715a77a30660dfb46898eb407937ec9d7", "patch": "@@ -50,7 +50,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             }\n \n             let mut search = line;\n-            while let Some(i) = search.find(\"E\") {\n+            while let Some(i) = search.find('E') {\n                 search = &search[i + 1..];\n                 let code = if search.len() > 4 {\n                     search[..4].parse::<u32>()"}, {"sha": "74f3a41047a3248246f7b3ed1a00ab333659a6c2", "filename": "src/tools/tidy/src/extdeps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs?ref=cd51523715a77a30660dfb46898eb407937ec9d7", "patch": "@@ -38,7 +38,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n \n         // extract source value\n-        let parts: Vec<&str> = line.splitn(2, \"=\").collect();\n+        let parts: Vec<&str> = line.splitn(2, '=').collect();\n         let source = parts[1].trim();\n \n         // ensure source is whitelisted"}, {"sha": "c95f1c7b32a94e74ad9b11f8d53dc538fa3e97f3", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=cd51523715a77a30660dfb46898eb407937ec9d7", "patch": "@@ -75,7 +75,7 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n             return;\n         }\n \n-        let filen_underscore = filename.replace(\"-\",\"_\").replace(\".rs\",\"\");\n+        let filen_underscore = filename.replace('-',\"_\").replace(\".rs\",\"\");\n         let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);\n \n         contents.truncate(0);\n@@ -332,11 +332,11 @@ fn map_lib_features(base_src_path: &Path,\n                     f.tracking_issue = find_attr_val(line, \"issue\")\n                     .map(|s| s.parse().unwrap());\n                 }\n-                if line.ends_with(\"]\") {\n+                if line.ends_with(']') {\n                     mf(Ok((name, f.clone())), file, i + 1);\n-                } else if !line.ends_with(\",\") && !line.ends_with(\"\\\\\") {\n+                } else if !line.ends_with(',') && !line.ends_with('\\\\') {\n                     // We need to bail here because we might have missed the\n-                    // end of a stability attribute above because the \"]\"\n+                    // end of a stability attribute above because the ']'\n                     // might not have been at the end of the line.\n                     // We could then get into the very unfortunate situation that\n                     // we continue parsing the file assuming the current stability\n@@ -394,7 +394,7 @@ fn map_lib_features(base_src_path: &Path,\n                 has_gate_test: false,\n                 tracking_issue,\n             };\n-            if line.contains(\"]\") {\n+            if line.contains(']') {\n                 mf(Ok((feature_name, feature)), file, i + 1);\n             } else {\n                 becoming_feature = Some((feature_name.to_owned(), feature));"}, {"sha": "33cd8b5dcd9ab1565616a1a02fb6410740dd0fc0", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd51523715a77a30660dfb46898eb407937ec9d7/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=cd51523715a77a30660dfb46898eb407937ec9d7", "patch": "@@ -69,7 +69,7 @@ fn line_is_url(line: &str) -> bool {\n             (EXP_COMMENT_START, \"//!\") => state = EXP_LINK_LABEL_OR_URL,\n \n             (EXP_LINK_LABEL_OR_URL, w)\n-                if w.len() >= 4 && w.starts_with(\"[\") && w.ends_with(\"]:\")\n+                if w.len() >= 4 && w.starts_with('[') && w.ends_with(\"]:\")\n                 => state = EXP_URL,\n \n             (EXP_LINK_LABEL_OR_URL, w)\n@@ -128,13 +128,13 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 && !long_line_is_ok(line) {\n                     err(&format!(\"line longer than {} chars\", COLS));\n             }\n-            if line.contains(\"\\t\") && !skip_tab {\n+            if line.contains('\\t') && !skip_tab {\n                 err(\"tab character\");\n             }\n-            if !skip_end_whitespace && (line.ends_with(\" \") || line.ends_with(\"\\t\")) {\n+            if !skip_end_whitespace && (line.ends_with(' ') || line.ends_with('\\t')) {\n                 err(\"trailing whitespace\");\n             }\n-            if line.contains(\"\\r\") && !skip_cr {\n+            if line.contains('\\r') && !skip_cr {\n                 err(\"CR character\");\n             }\n             if filename != \"style.rs\" {"}]}