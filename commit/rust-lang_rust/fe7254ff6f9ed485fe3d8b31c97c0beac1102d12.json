{"sha": "fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "node_id": "C_kwDOAAsO6NoAKGZlNzI1NGZmNmY5ZWQ0ODVmZTNkOGIzMWM5N2MwYmVhYzExMDJkMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-30T16:57:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-30T16:57:24Z"}, "message": "Auto merge of #8576 - smoelius:crate_in_macro_def, r=llogiq\n\nAdd `crate_in_macro_def` lint\n\nThis PR adds a lint to check for `crate` as opposed to `$crate` used in a macro definition.\n\nI think this can close #4798. That issue focused on the case where the macro author \"imports something into said macro.\"\n\nBut I think use of `crate` is likely to be a bug whether it appears in a `use` statement or not. There could be some use case I am failing to see, though. (cc: `@nilscript` `@flip1995)`\n\nchangelog: `crate_in_macro_def`", "tree": {"sha": "ecea6b02274553d0458bc098b13cd62f23a6efeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecea6b02274553d0458bc098b13cd62f23a6efeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "html_url": "https://github.com/rust-lang/rust/commit/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7c253d398a5c469b656924fbd51748f1814183", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7c253d398a5c469b656924fbd51748f1814183", "html_url": "https://github.com/rust-lang/rust/commit/df7c253d398a5c469b656924fbd51748f1814183"}, {"sha": "aaf04dc0431aaf4be9f3125dd9cfcb80f2ae7e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf04dc0431aaf4be9f3125dd9cfcb80f2ae7e25", "html_url": "https://github.com/rust-lang/rust/commit/aaf04dc0431aaf4be9f3125dd9cfcb80f2ae7e25"}], "stats": {"total": 253, "additions": 253, "deletions": 0}, "files": [{"sha": "1d1e081e839aaffd4a42a48234f840e4429ea8e5", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -3229,6 +3229,7 @@ Released 2018-09-13\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n+[`crate_in_macro_def`]: https://rust-lang.github.io/rust-clippy/master/index.html#crate_in_macro_def\n [`create_dir`]: https://rust-lang.github.io/rust-clippy/master/index.html#create_dir\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n [`dbg_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro"}, {"sha": "fc141b4a6e3afcc3874b5c776be3cfb88303bdfc", "filename": "clippy_lints/src/crate_in_macro_def.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -0,0 +1,125 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use rustc_ast::ast::{AttrKind, Attribute, Item, ItemKind};\n+use rustc_ast::token::{Token, TokenKind};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{symbol::sym, Span};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for use of `crate` as opposed to `$crate` in a macro definition.\n+    ///\n+    /// ### Why is this bad?\n+    /// `crate` refers to the macro call's crate, whereas `$crate` refers to the macro definition's\n+    /// crate. Rarely is the former intended. See:\n+    /// https://doc.rust-lang.org/reference/macros-by-example.html#hygiene\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// #[macro_export]\n+    /// macro_rules! print_message {\n+    ///     () => {\n+    ///         println!(\"{}\", crate::MESSAGE);\n+    ///     };\n+    /// }\n+    /// pub const MESSAGE: &str = \"Hello!\";\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[macro_export]\n+    /// macro_rules! print_message {\n+    ///     () => {\n+    ///         println!(\"{}\", $crate::MESSAGE);\n+    ///     };\n+    /// }\n+    /// pub const MESSAGE: &str = \"Hello!\";\n+    /// ```\n+    ///\n+    /// Note that if the use of `crate` is intentional, an `allow` attribute can be applied to the\n+    /// macro definition, e.g.:\n+    /// ```rust,ignore\n+    /// #[allow(clippy::crate_in_macro_def)]\n+    /// macro_rules! ok { ... crate::foo ... }\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub CRATE_IN_MACRO_DEF,\n+    suspicious,\n+    \"using `crate` in a macro definition\"\n+}\n+declare_lint_pass!(CrateInMacroDef => [CRATE_IN_MACRO_DEF]);\n+\n+impl EarlyLintPass for CrateInMacroDef {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if_chain! {\n+            if item.attrs.iter().any(is_macro_export);\n+            if let ItemKind::MacroDef(macro_def) = &item.kind;\n+            let tts = macro_def.body.inner_tokens();\n+            if let Some(span) = contains_unhygienic_crate_reference(&tts);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    CRATE_IN_MACRO_DEF,\n+                    span,\n+                    \"`crate` references the macro call's crate\",\n+                    \"to reference the macro definition's crate, use\",\n+                    String::from(\"$crate\"),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_macro_export(attr: &Attribute) -> bool {\n+    if_chain! {\n+        if let AttrKind::Normal(attr_item, _) = &attr.kind;\n+        if let [segment] = attr_item.path.segments.as_slice();\n+        then {\n+            segment.ident.name == sym::macro_export\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+fn contains_unhygienic_crate_reference(tts: &TokenStream) -> Option<Span> {\n+    let mut prev_is_dollar = false;\n+    let mut cursor = tts.trees();\n+    while let Some(curr) = cursor.next() {\n+        if_chain! {\n+            if !prev_is_dollar;\n+            if let Some(span) = is_crate_keyword(&curr);\n+            if let Some(next) = cursor.look_ahead(0);\n+            if is_token(next, &TokenKind::ModSep);\n+            then {\n+                return Some(span);\n+            }\n+        }\n+        if let TokenTree::Delimited(_, _, tts) = &curr {\n+            let span = contains_unhygienic_crate_reference(tts);\n+            if span.is_some() {\n+                return span;\n+            }\n+        }\n+        prev_is_dollar = is_token(&curr, &TokenKind::Dollar);\n+    }\n+    None\n+}\n+\n+fn is_crate_keyword(tt: &TokenTree) -> Option<Span> {\n+    if_chain! {\n+        if let TokenTree::Token(Token { kind: TokenKind::Ident(symbol, _), span }) = tt;\n+        if symbol.as_str() == \"crate\";\n+        then { Some(*span) } else { None }\n+    }\n+}\n+\n+fn is_token(tt: &TokenTree, kind: &TokenKind) -> bool {\n+    if let TokenTree::Token(Token { kind: other, .. }) = tt {\n+        kind == other\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "1fb3ca1fd9b2bca6f1effc925338f4d8bb11f3c1", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -37,6 +37,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(comparison_chain::COMPARISON_CHAIN),\n     LintId::of(copies::IFS_SAME_COND),\n     LintId::of(copies::IF_SAME_THEN_ELSE),\n+    LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n     LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n     LintId::of(dereference::NEEDLESS_BORROW),\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),"}, {"sha": "e3161795139df7a57224ef6ef7fb0af864ea8dea", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -97,6 +97,7 @@ store.register_lints(&[\n     copies::IF_SAME_THEN_ELSE,\n     copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n     copy_iterator::COPY_ITERATOR,\n+    crate_in_macro_def::CRATE_IN_MACRO_DEF,\n     create_dir::CREATE_DIR,\n     dbg_macro::DBG_MACRO,\n     default::DEFAULT_TRAIT_ACCESS,"}, {"sha": "0707e4f8f3d1053c8f19bc9ed249c3539f5bb478", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -9,6 +9,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n+    LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n     LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),"}, {"sha": "c8b57956b1b6254489af8895c51bc88206daeeba", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -190,6 +190,7 @@ mod collapsible_match;\n mod comparison_chain;\n mod copies;\n mod copy_iterator;\n+mod crate_in_macro_def;\n mod create_dir;\n mod dbg_macro;\n mod default;\n@@ -867,6 +868,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             ignore_publish: cargo_ignore_publish,\n         })\n     });\n+    store.register_early_pass(|| Box::new(crate_in_macro_def::CrateInMacroDef));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "9fc594be311e2fd23fe01dfc552b2ff703f1c483", "filename": "tests/ui/crate_in_macro_def.fixed", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/tests%2Fui%2Fcrate_in_macro_def.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/tests%2Fui%2Fcrate_in_macro_def.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_in_macro_def.fixed?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+#![warn(clippy::crate_in_macro_def)]\n+\n+mod hygienic {\n+    #[macro_export]\n+    macro_rules! print_message_hygienic {\n+        () => {\n+            println!(\"{}\", $crate::hygienic::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+mod unhygienic {\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic {\n+        () => {\n+            println!(\"{}\", $crate::unhygienic::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+mod unhygienic_intentionally {\n+    // For cases where the use of `crate` is intentional, applying `allow` to the macro definition\n+    // should suppress the lint.\n+    #[allow(clippy::crate_in_macro_def)]\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic_intentionally {\n+        () => {\n+            println!(\"{}\", crate::CALLER_PROVIDED_MESSAGE);\n+        };\n+    }\n+}\n+\n+#[macro_use]\n+mod not_exported {\n+    macro_rules! print_message_not_exported {\n+        () => {\n+            println!(\"{}\", crate::not_exported::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+fn main() {\n+    print_message_hygienic!();\n+    print_message_unhygienic!();\n+    print_message_unhygienic_intentionally!();\n+    print_message_not_exported!();\n+}\n+\n+pub const CALLER_PROVIDED_MESSAGE: &str = \"Hello!\";"}, {"sha": "ac456108e4ab15fb842d210c5605dcb9d3342122", "filename": "tests/ui/crate_in_macro_def.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/tests%2Fui%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/tests%2Fui%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_in_macro_def.rs?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+#![warn(clippy::crate_in_macro_def)]\n+\n+mod hygienic {\n+    #[macro_export]\n+    macro_rules! print_message_hygienic {\n+        () => {\n+            println!(\"{}\", $crate::hygienic::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+mod unhygienic {\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic {\n+        () => {\n+            println!(\"{}\", crate::unhygienic::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+mod unhygienic_intentionally {\n+    // For cases where the use of `crate` is intentional, applying `allow` to the macro definition\n+    // should suppress the lint.\n+    #[allow(clippy::crate_in_macro_def)]\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic_intentionally {\n+        () => {\n+            println!(\"{}\", crate::CALLER_PROVIDED_MESSAGE);\n+        };\n+    }\n+}\n+\n+#[macro_use]\n+mod not_exported {\n+    macro_rules! print_message_not_exported {\n+        () => {\n+            println!(\"{}\", crate::not_exported::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n+fn main() {\n+    print_message_hygienic!();\n+    print_message_unhygienic!();\n+    print_message_unhygienic_intentionally!();\n+    print_message_not_exported!();\n+}\n+\n+pub const CALLER_PROVIDED_MESSAGE: &str = \"Hello!\";"}, {"sha": "9ac5937dcc0634da7cdbd4f1fa2db106e175391d", "filename": "tests/ui/crate_in_macro_def.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/tests%2Fui%2Fcrate_in_macro_def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe7254ff6f9ed485fe3d8b31c97c0beac1102d12/tests%2Fui%2Fcrate_in_macro_def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_in_macro_def.stderr?ref=fe7254ff6f9ed485fe3d8b31c97c0beac1102d12", "patch": "@@ -0,0 +1,10 @@\n+error: `crate` references the macro call's crate\n+  --> $DIR/crate_in_macro_def.rs:19:28\n+   |\n+LL |             println!(\"{}\", crate::unhygienic::MESSAGE);\n+   |                            ^^^^^ help: to reference the macro definition's crate, use: `$crate`\n+   |\n+   = note: `-D clippy::crate-in-macro-def` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}