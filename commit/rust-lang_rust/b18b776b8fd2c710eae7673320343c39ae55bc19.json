{"sha": "b18b776b8fd2c710eae7673320343c39ae55bc19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOGI3NzZiOGZkMmM3MTBlYWU3NjczMzIwMzQzYzM5YWU1NWJjMTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-23T09:32:27Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-23T09:32:27Z"}, "message": "Replace uses of `Hash(Map|Set)` with `FxHash(Map|Set)` in miri", "tree": {"sha": "f489b22d6c302a8465a8cd873edc390e26a7068e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f489b22d6c302a8465a8cd873edc390e26a7068e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b18b776b8fd2c710eae7673320343c39ae55bc19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlq0yasACgkQpp+NIls6\n19mkag//cUUoNCiONCgICxV2MQ/K2VAJhvI1w5dUfgZ0wuGxdIc05Jy5ENYNs3db\n2BoDyx1HuhvES9w1HGC1fI8oCX0sLsDS67E6FCGEibDqPSOXH+KQgmlfZKcsUgnQ\nv+A2KbbVw7k/+O1H1XgsbF0TkBRoRIFnFlqUjE/LO4ESVr60CMBdTQzYLPh0l69B\nOu2vaujLb76aqBYhE7hxODutQRBxbnAOa9k52gc81XpPEN+q84Hwelc0XkVoIb7M\nYg8cYEzDdWkDqZmCzBGxscwk7Os46iEhlRYYStXXjjk9Z3Uj0dFsvw8TEukNIoNE\nKLXFpEEpob/H4nDhjfUizTSFE7MAsdiuxJKLhEY5HvmTxRmPUszaHSftB0VncBK/\n0FOaSgNwiAWMhR5EyLmMsSF2xPfceg1t+D0CTAHDooUY+0pUOqbtJZrp1xaFeOM1\nJgJQXAjS5XfwocU+l7mJ5YqYnCWp6dogC2d9Y8kig+J+XB1m7rOxQeTyL6xu1d+5\nTNgu71JheAeEJOAH7adAyJneKJGlThMUncTmzUIxgz28RB37iv5sN9L2zqY4nET8\n7WaSfSTBDHaYfRXRdn+0OBVKtKA8AFnRsXf4UuVOA8/JxgYL1ccD+1POUidxG9q+\n0mrk4I99ZJbDOeYdYhhHDwAICn+khkZV0p3AcvQXfOllMKl2zh4=\n=uJ6N\n-----END PGP SIGNATURE-----", "payload": "tree f489b22d6c302a8465a8cd873edc390e26a7068e\nparent bf8e4f231a0e51a7421e99831450bcbc55b14de3\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521797547 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521797547 +0100\n\nReplace uses of `Hash(Map|Set)` with `FxHash(Map|Set)` in miri\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b18b776b8fd2c710eae7673320343c39ae55bc19", "html_url": "https://github.com/rust-lang/rust/commit/b18b776b8fd2c710eae7673320343c39ae55bc19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b18b776b8fd2c710eae7673320343c39ae55bc19/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf8e4f231a0e51a7421e99831450bcbc55b14de3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8e4f231a0e51a7421e99831450bcbc55b14de3", "html_url": "https://github.com/rust-lang/rust/commit/bf8e4f231a0e51a7421e99831450bcbc55b14de3"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "4026f52e9620dd3a6cc2691c19a51fe083a6fb68", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b18b776b8fd2c710eae7673320343c39ae55bc19/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18b776b8fd2c710eae7673320343c39ae55bc19/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b18b776b8fd2c710eae7673320343c39ae55bc19", "patch": "@@ -1,12 +1,13 @@\n use byteorder::{ReadBytesExt, WriteBytesExt, LittleEndian, BigEndian};\n-use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n+use std::collections::{btree_map, BTreeMap, VecDeque};\n use std::{ptr, io};\n \n use rustc::ty::Instance;\n use rustc::ty::maps::TyCtxtAt;\n use rustc::ty::layout::{self, Align, TargetDataLayout};\n use syntax::ast::Mutability;\n \n+use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc::mir::interpret::{MemoryPointer, AllocId, Allocation, AccessKind, UndefMask, Value, Pointer,\n                             EvalResult, PrimVal, EvalErrorKind};\n \n@@ -33,15 +34,15 @@ pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     pub data: M::MemoryData,\n \n     /// Helps guarantee that stack allocations aren't deallocated via `rust_deallocate`\n-    alloc_kind: HashMap<AllocId, MemoryKind<M::MemoryKinds>>,\n+    alloc_kind: FxHashMap<AllocId, MemoryKind<M::MemoryKinds>>,\n \n     /// Actual memory allocations (arbitrary bytes, may contain pointers into other allocations).\n-    alloc_map: HashMap<AllocId, Allocation>,\n+    alloc_map: FxHashMap<AllocId, Allocation>,\n \n     /// Actual memory allocations (arbitrary bytes, may contain pointers into other allocations).\n     ///\n     /// Stores statics while they are being processed, before they are interned and thus frozen\n-    uninitialized_statics: HashMap<AllocId, Allocation>,\n+    uninitialized_statics: FxHashMap<AllocId, Allocation>,\n \n     /// The current stack frame.  Used to check accesses against locks.\n     pub cur_frame: usize,\n@@ -53,9 +54,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     pub fn new(tcx: TyCtxtAt<'a, 'tcx, 'tcx>, data: M::MemoryData) -> Self {\n         Memory {\n             data,\n-            alloc_kind: HashMap::new(),\n-            alloc_map: HashMap::new(),\n-            uninitialized_statics: HashMap::new(),\n+            alloc_kind: FxHashMap::default(),\n+            alloc_map: FxHashMap::default(),\n+            uninitialized_statics: FxHashMap::default(),\n             tcx,\n             cur_frame: usize::max_value(),\n         }\n@@ -338,7 +339,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         allocs.sort();\n         allocs.dedup();\n         let mut allocs_to_print = VecDeque::from(allocs);\n-        let mut allocs_seen = HashSet::new();\n+        let mut allocs_seen = FxHashSet::default();\n \n         while let Some(id) = allocs_to_print.pop_front() {\n             let mut msg = format!(\"Alloc {:<5} \", format!(\"{}:\", id));"}]}