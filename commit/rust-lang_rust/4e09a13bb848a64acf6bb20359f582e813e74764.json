{"sha": "4e09a13bb848a64acf6bb20359f582e813e74764", "node_id": "C_kwDOAAsO6NoAKDRlMDlhMTNiYjg0OGE2NGFjZjZiYjIwMzU5ZjU4MmU4MTNlNzQ3NjQ", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-29T15:20:14Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-01T23:47:54Z"}, "message": "Don't create two new closures for each query\n\n- Parameterize DepKindStruct over `'tcx`\n\n    This allows passing in an invariant function pointer in `query_callback`,\n    rather than having to try and make it work for any lifetime.\n\n- Add a new `execute_query` function to `QueryDescription` so we can call `tcx.$name` without needing to be in a macro context", "tree": {"sha": "d23e7f5bf456b2d3b4c5e3cb1ea6ed7ae724f7ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23e7f5bf456b2d3b4c5e3cb1ea6ed7ae724f7ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e09a13bb848a64acf6bb20359f582e813e74764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e09a13bb848a64acf6bb20359f582e813e74764", "html_url": "https://github.com/rust-lang/rust/commit/4e09a13bb848a64acf6bb20359f582e813e74764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e09a13bb848a64acf6bb20359f582e813e74764/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fcc7452666a82c677ae6563bad31c852c258215", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fcc7452666a82c677ae6563bad31c852c258215", "html_url": "https://github.com/rust-lang/rust/commit/4fcc7452666a82c677ae6563bad31c852c258215"}], "stats": {"total": 68, "additions": 31, "deletions": 37}, "files": [{"sha": "65d5f755f72482173aafada909ce89241ff9ebaf", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=4e09a13bb848a64acf6bb20359f582e813e74764", "patch": "@@ -100,7 +100,7 @@ macro_rules! arena_types {\n             [decode] is_late_bound_map: rustc_data_structures::fx::FxIndexSet<rustc_hir::def_id::LocalDefId>,\n             [decode] impl_source: rustc_middle::traits::ImplSource<'tcx, ()>,\n \n-            [] dep_kind: rustc_middle::dep_graph::DepKindStruct,\n+            [] dep_kind: rustc_middle::dep_graph::DepKindStruct<'tcx>,\n         ]);\n     )\n }"}, {"sha": "7718906ac4ee7976aad733815b6d6637e66ce014", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=4e09a13bb848a64acf6bb20359f582e813e74764", "patch": "@@ -74,7 +74,7 @@ pub use rustc_query_system::dep_graph::{DepContext, DepNodeParams};\n /// Information is retrieved by indexing the `DEP_KINDS` array using the integer value\n /// of the `DepKind`. Overall, this allows to implement `DepContext` using this manual\n /// jump table instead of large matches.\n-pub struct DepKindStruct {\n+pub struct DepKindStruct<'tcx> {\n     /// Anonymous queries cannot be replayed from one compiler invocation to the next.\n     /// When their result is needed, it is recomputed. They are useful for fine-grained\n     /// dependency tracking, and caching within one compiler invocation.\n@@ -124,10 +124,10 @@ pub struct DepKindStruct {\n     /// with kind `MirValidated`, we know that the GUID/fingerprint of the `DepNode`\n     /// is actually a `DefPathHash`, and can therefore just look up the corresponding\n     /// `DefId` in `tcx.def_path_hash_to_def_id`.\n-    pub force_from_dep_node: Option<fn(tcx: TyCtxt<'_>, dep_node: DepNode) -> bool>,\n+    pub force_from_dep_node: Option<fn(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool>,\n \n     /// Invoke a query to put the on-disk cached value in memory.\n-    pub try_load_from_on_disk_cache: Option<fn(TyCtxt<'_>, DepNode)>,\n+    pub try_load_from_on_disk_cache: Option<fn(TyCtxt<'tcx>, DepNode)>,\n }\n \n impl DepKind {"}, {"sha": "7a990773ab87577e375a0c9d79f8c13dee3cc320", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4e09a13bb848a64acf6bb20359f582e813e74764", "patch": "@@ -1089,7 +1089,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub queries: &'tcx dyn query::QueryEngine<'tcx>,\n     pub query_caches: query::QueryCaches<'tcx>,\n-    query_kinds: &'tcx [DepKindStruct],\n+    query_kinds: &'tcx [DepKindStruct<'tcx>],\n \n     // Internal caches for metadata decoding. No need to track deps on this.\n     pub ty_rcache: Lock<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n@@ -1246,7 +1246,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n-        query_kinds: &'tcx [DepKindStruct],\n+        query_kinds: &'tcx [DepKindStruct<'tcx>],\n         crate_name: &str,\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n@@ -1296,7 +1296,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub(crate) fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {\n+    pub(crate) fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct<'tcx> {\n         &self.query_kinds[k as usize]\n     }\n "}, {"sha": "274df5b5e5e9415679ffd389b9ab3ee5626c9e18", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=4e09a13bb848a64acf6bb20359f582e813e74764", "patch": "@@ -301,11 +301,8 @@ pub(crate) fn create_query_frame<\n     QueryStackFrame::new(name, description, span, def_kind, hash)\n }\n \n-pub(crate) fn try_load_from_on_disk_cache<'tcx, Q, V>(\n-    tcx: TyCtxt<'tcx>,\n-    dep_node: DepNode,\n-    cache_query_deps: fn(TyCtxt<'tcx>, Q::Key) -> V,\n-) where\n+fn try_load_from_on_disk_cache<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode)\n+where\n     Q: QueryDescription<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n {\n@@ -315,11 +312,11 @@ pub(crate) fn try_load_from_on_disk_cache<'tcx, Q, V>(\n         panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash)\n     });\n     if Q::cache_on_disk(tcx, &key) {\n-        let _ = cache_query_deps(tcx, key);\n+        let _ = Q::execute_query(tcx, key);\n     }\n }\n \n-pub(crate) fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n+fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n where\n     Q: QueryDescription<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n@@ -336,13 +333,9 @@ where\n }\n \n pub(crate) fn query_callback<'tcx, Q: QueryConfig>(\n-    // NOTE: we can't remove these function pointers, because `recover` is invariant -> `try_load_from_on_disk_cache` takes a concrete lifetime, not a universal lifetime.\n-    // Instead, we infer the correct lifetime at the callsite, so we can pass in a HRTB function pointer to the DepKindStruct.\n-    try_load_from_on_disk_cache: fn(TyCtxt<'_>, DepNode),\n-    force_from_dep_node: fn(TyCtxt<'_>, DepNode) -> bool,\n     is_anon: bool,\n     is_eval_always: bool,\n-) -> DepKindStruct\n+) -> DepKindStruct<'tcx>\n where\n     Q: QueryDescription<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n@@ -363,8 +356,8 @@ where\n         is_anon,\n         is_eval_always,\n         fingerprint_style,\n-        force_from_dep_node: Some(force_from_dep_node),\n-        try_load_from_on_disk_cache: Some(try_load_from_on_disk_cache),\n+        force_from_dep_node: Some(force_from_dep_node::<Q>),\n+        try_load_from_on_disk_cache: Some(try_load_from_on_disk_cache::<Q>),\n     }\n }\n \n@@ -431,6 +424,10 @@ macro_rules! define_queries {\n                     try_load_from_disk: Self::TRY_LOAD_FROM_DISK,\n                 }\n             }\n+\n+            fn execute_query(tcx: TyCtxt<'tcx>, k: Self::Key) -> Self::Stored {\n+                tcx.$name(k)\n+            }\n         })*\n \n         #[allow(nonstandard_style)]\n@@ -439,7 +436,7 @@ macro_rules! define_queries {\n             use rustc_query_system::dep_graph::FingerprintStyle;\n \n             // We use this for most things when incr. comp. is turned off.\n-            pub fn Null() -> DepKindStruct {\n+            pub fn Null<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: false,\n                     is_eval_always: false,\n@@ -450,7 +447,7 @@ macro_rules! define_queries {\n             }\n \n             // We use this for the forever-red node.\n-            pub fn Red() -> DepKindStruct {\n+            pub fn Red<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: false,\n                     is_eval_always: false,\n@@ -460,7 +457,7 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            pub fn TraitSelect() -> DepKindStruct {\n+            pub fn TraitSelect<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: true,\n                     is_eval_always: false,\n@@ -470,7 +467,7 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            pub fn CompileCodegenUnit() -> DepKindStruct {\n+            pub fn CompileCodegenUnit<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: false,\n                     is_eval_always: false,\n@@ -480,7 +477,7 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            pub fn CompileMonoItem() -> DepKindStruct {\n+            pub fn CompileMonoItem<'tcx>() -> DepKindStruct<'tcx> {\n                 DepKindStruct {\n                     is_anon: false,\n                     is_eval_always: false,\n@@ -490,21 +487,15 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            $(pub(crate) fn $name()-> DepKindStruct {\n-                let is_anon = is_anon!([$($modifiers)*]);\n-                let is_eval_always = is_eval_always!([$($modifiers)*]);\n-                type Q<'tcx> = queries::$name<'tcx>;\n-\n-                $crate::plumbing::query_callback::<Q<'_>>(\n-                    |tcx, key| $crate::plumbing::try_load_from_on_disk_cache::<Q<'_>, _>(tcx, key, TyCtxt::$name),\n-                    |tcx, key| $crate::plumbing::force_from_dep_node::<Q<'_>>(tcx, key),\n-                    is_anon,\n-                    is_eval_always\n+            $(pub(crate) fn $name<'tcx>()-> DepKindStruct<'tcx> {\n+                $crate::plumbing::query_callback::<queries::$name<'tcx>>(\n+                    is_anon!([$($modifiers)*]),\n+                    is_eval_always!([$($modifiers)*]),\n                 )\n             })*\n         }\n \n-        pub fn query_callbacks<'tcx>(arena: &'tcx Arena<'tcx>) -> &'tcx [DepKindStruct] {\n+        pub fn query_callbacks<'tcx>(arena: &'tcx Arena<'tcx>) -> &'tcx [DepKindStruct<'tcx>] {\n             arena.alloc_from_iter(make_dep_kind_array!(query_callbacks))\n         }\n     }"}, {"sha": "ea38df836cbf1e4a0f9b98b8cad319644a4ad8b6", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e09a13bb848a64acf6bb20359f582e813e74764/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=4e09a13bb848a64acf6bb20359f582e813e74764", "patch": "@@ -73,4 +73,7 @@ pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n     fn make_vtable(tcx: CTX, key: &Self::Key) -> QueryVTable<CTX, Self::Key, Self::Value>;\n \n     fn cache_on_disk(tcx: CTX::DepContext, key: &Self::Key) -> bool;\n+\n+    // Don't use this method to compute query results, instead use the methods on TyCtxt\n+    fn execute_query(tcx: CTX::DepContext, k: Self::Key) -> Self::Stored;\n }"}]}