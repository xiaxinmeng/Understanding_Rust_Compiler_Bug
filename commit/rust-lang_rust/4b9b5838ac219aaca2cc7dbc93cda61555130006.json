{"sha": "4b9b5838ac219aaca2cc7dbc93cda61555130006", "node_id": "C_kwDOAAsO6NoAKDRiOWI1ODM4YWMyMTlhYWNhMmNjN2RiYzkzY2RhNjE1NTUxMzAwMDY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T02:16:03Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:27:00Z"}, "message": "Move lifetimes_in_bounds call to outside with_hir_id_owner block in lower_opaque_impl_trait", "tree": {"sha": "4244f5274afd6964578bbfbc848e4182547167a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4244f5274afd6964578bbfbc848e4182547167a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b9b5838ac219aaca2cc7dbc93cda61555130006", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zQACgkQgTGiTgx5\n769SuA/+JRiTu/3Hc7SYkxluA6Hy0fRRYBpDfbMcLFyp/EvRxWoBxwK8OAgVW3t+\n3zoU0iu62HfVRWqHPTU00J6hmn5EZEoCmGdQm/N9v+U7uL9DJNtd7F3JzJd1rm3R\nQZqdo1fBoFqJelef3BYZF9gyBnnB5GUFeru+Ig5i7lm7MeYeaStfz+Vb+FfmPy1x\nRbDdFwV2BL9+x/5uSWEogaiGYfVHVEbiKwJ0lPXhSgAAglkGzn1ujZSPI1UBPLHP\nVsX3zY9aHA3n05fDHvldEwj7CdbT/quyM27s7nHRfPZjymd6jDYwg4BauUdwyGbx\njcOBNibzS17Ah4+QedeC8DvQaErcQyCeLk9d980Sh0Dr7IcQUI7jiaVXTQTY5S1x\n5cD0I32EEAvK8/PzGeLNV1rMWgHG7owoc73fz3FxatE3sxu8r0NDQel0zdegO4F7\nu1jJkgH+kI2Sa9sLPc5fNzlXuJAnJkGNbMMCyqCyGBpUX0Ml70sW8nrCRk1imXh3\ndiomlDsuqTGAfDyhwP1UCzfMW04hfF6qWagieOZIU+csV4223EhbSAqPmIWh7WOC\nvsLV2J3zXIxr2SMKSeoL1gBxCHr9B6LCy2XWEko91iIDXtwF04FyJVXkIs10eiCV\ngayfwUWxjH1tSTUjaUj6h8DMK4IM0y7AnLQqvEz979tdkJFGAAs=\n=5QNd\n-----END PGP SIGNATURE-----", "payload": "tree 4244f5274afd6964578bbfbc848e4182547167a7\nparent 76b518fc83d1ddd112ef721fa207d3a74be83010\nauthor Santiago Pastorino <spastorino@gmail.com> 1659579363 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623220 -0300\n\nMove lifetimes_in_bounds call to outside with_hir_id_owner block in lower_opaque_impl_trait\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b5838ac219aaca2cc7dbc93cda61555130006", "html_url": "https://github.com/rust-lang/rust/commit/4b9b5838ac219aaca2cc7dbc93cda61555130006", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b5838ac219aaca2cc7dbc93cda61555130006/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b518fc83d1ddd112ef721fa207d3a74be83010", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b518fc83d1ddd112ef721fa207d3a74be83010", "html_url": "https://github.com/rust-lang/rust/commit/76b518fc83d1ddd112ef721fa207d3a74be83010"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "901284f3c1971d5fff67142d5cfbe4295e17bef5", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4b9b5838ac219aaca2cc7dbc93cda61555130006/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9b5838ac219aaca2cc7dbc93cda61555130006/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4b9b5838ac219aaca2cc7dbc93cda61555130006", "patch": "@@ -1400,27 +1400,32 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let mut collected_lifetimes = Vec::new();\n         let mut new_remapping = FxHashMap::default();\n \n+        // If this came from a TAIT (as opposed to a function that returns an RPIT), we only want\n+        // to capture the lifetimes that appear in the bounds. So visit the bounds to find out\n+        // exactly which ones those are.\n+        let lifetimes_to_remap = if origin == hir::OpaqueTyOrigin::TyAlias {\n+            // in a TAIT like `type Foo<'a> = impl Foo<'a>`, we don't keep all the lifetime parameters\n+            Vec::new()\n+        } else {\n+            // in fn return position, like the `fn test<'a>() -> impl Debug + 'a` example,\n+            // we only keep the lifetimes that appear in the `impl Debug` itself:\n+            lifetime_collector::lifetimes_in_bounds(&self.resolver, bounds)\n+        };\n+        debug!(?lifetimes_to_remap);\n+\n         self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n-            if origin != hir::OpaqueTyOrigin::TyAlias {\n-                // When lowering `fn foo<'a>() -> impl Debug + 'a`, the `lifetime_collector` finds\n-                // the set of lifetimes that appear in the bounds (in this case, 'a) and returns\n-                // that set in the variable lifetimes_in_bounds.\n-                let lifetimes_in_bounds =\n-                    lifetime_collector::lifetimes_in_bounds(&lctx.resolver, bounds);\n-                debug!(?lifetimes_in_bounds);\n-\n-                // For each captured lifetime (e.g., 'a), we create a new lifetime parameter that\n-                // is a generic defined on the TAIT, so we have type Foo<'a1> = ... and we\n-                // establish a mapping from the original parameter 'a to the new parameter 'a1.\n-                collected_lifetimes = lctx.create_lifetime_defs(\n-                    opaque_ty_def_id,\n-                    &lifetimes_in_bounds,\n-                    &mut new_remapping,\n-                );\n-            };\n-            debug!(?new_remapping);\n+            // If this opaque type is only capturing a subset of the lifetimes (those that appear\n+            // in bounds), then create the new lifetime parameters required and create a mapping\n+            // from the old `'a` (on the function) to the new `'a` (on the opaque type).\n+            collected_lifetimes = lctx.create_lifetime_defs(\n+                opaque_ty_def_id,\n+                &lifetimes_to_remap,\n+                &mut new_remapping,\n+            );\n             debug!(?collected_lifetimes);\n+            debug!(?new_remapping);\n \n+            // Install the remapping from old to new (if any):\n             lctx.with_remapping(new_remapping, |lctx| {\n                 // Then when we lower the param bounds, references to 'a are remapped to 'a1, so we\n                 // get back Debug + 'a1, which is suitable for use on the TAIT."}]}