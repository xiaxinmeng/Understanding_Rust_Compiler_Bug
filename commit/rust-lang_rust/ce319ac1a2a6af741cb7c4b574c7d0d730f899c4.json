{"sha": "ce319ac1a2a6af741cb7c4b574c7d0d730f899c4", "node_id": "C_kwDOAAsO6NoAKGNlMzE5YWMxYTJhNmFmNzQxY2I3YzRiNTc0YzdkMGQ3MzBmODk5YzQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-28T18:41:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-28T18:41:51Z"}, "message": "Rollup merge of #95328 - DrMeepster:box_gep_err, r=oli-obk\n\nFix yet another Box<T, A> ICE\n\nFixes #95036.\n\nThis widens the special case from #94414 to make sure that boxes with a custom allocator are never directly dereferenced.", "tree": {"sha": "19b6c1341b5634f1a0acdab709647620f5a4f045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b6c1341b5634f1a0acdab709647620f5a4f045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQgFwCRBK7hj4Ov3rIwAAPdcIABmiK1Cx8iLorHQyuPrNc9o2\nRhmiuqkt4Stoir5xLcAE4wyjGGbm8gUqi9QXS80QKMDjqwn6Cm2cDFustDLY5L2S\nKx41qQjK4smZuPmYYeNL5wDcuZvi8Mvf4Q9pib6lpnZSWv4+KCDasXnw2yGCSGoM\nMIsauUa4FuMgogKMJWlf2G6fwlFkbiovCWunkKknFO+L5vH0ehnSt0LnpdBgfjS+\n51xEyZ6HFjWS17ptZfsnPxPa798AyCZnxDqzhUW61xnNKgnRUdrDo0yjQ1TQ3lg2\n4a35wo9aleptyxV7U+e6hybtHe7PbPjAcKwH1BtsVjs/SlRKMxHY1Keh026mQNo=\n=7DwN\n-----END PGP SIGNATURE-----\n", "payload": "tree 19b6c1341b5634f1a0acdab709647620f5a4f045\nparent e10d5039bcc5648ae44390968ebc7568ff9db1ac\nparent 09ccc63624f627e44f13c480c934b4d28a845258\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648492911 +0200\ncommitter GitHub <noreply@github.com> 1648492911 +0200\n\nRollup merge of #95328 - DrMeepster:box_gep_err, r=oli-obk\n\nFix yet another Box<T, A> ICE\n\nFixes #95036.\n\nThis widens the special case from #94414 to make sure that boxes with a custom allocator are never directly dereferenced.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4", "html_url": "https://github.com/rust-lang/rust/commit/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10d5039bcc5648ae44390968ebc7568ff9db1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e10d5039bcc5648ae44390968ebc7568ff9db1ac", "html_url": "https://github.com/rust-lang/rust/commit/e10d5039bcc5648ae44390968ebc7568ff9db1ac"}, {"sha": "09ccc63624f627e44f13c480c934b4d28a845258", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ccc63624f627e44f13c480c934b4d28a845258", "html_url": "https://github.com/rust-lang/rust/commit/09ccc63624f627e44f13c480c934b4d28a845258"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "17cfb6c5dfb541a4438d303213bf2216d58b4e1c", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=ce319ac1a2a6af741cb7c4b574c7d0d730f899c4", "patch": "@@ -441,11 +441,19 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .find(|elem| matches!(elem.1, mir::ProjectionElem::Deref))\n                 {\n                     base = elem.0 + 1;\n-                    self.codegen_consume(\n+                    let cg_base = self.codegen_consume(\n                         bx,\n                         mir::PlaceRef { projection: &place_ref.projection[..elem.0], ..place_ref },\n-                    )\n-                    .deref(bx.cx())\n+                    );\n+\n+                    // a box with a non-zst allocator should not be directly dereferenced\n+                    if cg_base.layout.ty.is_box() && !cg_base.layout.field(cx, 1).is_zst() {\n+                        let ptr = cg_base.extract_field(bx, 0).extract_field(bx, 0);\n+\n+                        ptr.deref(bx.cx())\n+                    } else {\n+                        cg_base.deref(bx.cx())\n+                    }\n                 } else {\n                     bug!(\"using operand local {:?} as place\", place_ref);\n                 }\n@@ -454,10 +462,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         for elem in place_ref.projection[base..].iter() {\n             cg_base = match elem.clone() {\n                 mir::ProjectionElem::Deref => {\n-                    // custom allocators can change box's abi, making it unable to be derefed directly\n-                    if cg_base.layout.ty.is_box()\n-                        && matches!(cg_base.layout.abi, Abi::Aggregate { .. } | Abi::Uninhabited)\n-                    {\n+                    // a box with a non-zst allocator should not be directly dereferenced\n+                    if cg_base.layout.ty.is_box() && !cg_base.layout.field(cx, 1).is_zst() {\n                         let ptr = cg_base.project_field(bx, 0).project_field(bx, 0);\n \n                         bx.load_operand(ptr).deref(bx.cx())"}, {"sha": "c2d4275aa49d386daf4b67a878aa9ac5772068d4", "filename": "src/test/ui/box/issue-95036.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4/src%2Ftest%2Fui%2Fbox%2Fissue-95036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce319ac1a2a6af741cb7c4b574c7d0d730f899c4/src%2Ftest%2Fui%2Fbox%2Fissue-95036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fissue-95036.rs?ref=ce319ac1a2a6af741cb7c4b574c7d0d730f899c4", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -O\n+// build-pass\n+\n+#![feature(allocator_api, bench_black_box)]\n+\n+#[inline(never)]\n+pub fn by_ref(node: &mut Box<[u8; 1], &std::alloc::Global>) {\n+    node[0] = 9u8;\n+}\n+\n+pub fn main() {\n+    let mut node = Box::new_in([5u8], &std::alloc::Global);\n+    node[0] = 7u8;\n+\n+    std::hint::black_box(node);\n+\n+    let mut node = Box::new_in([5u8], &std::alloc::Global);\n+\n+    by_ref(&mut node);\n+\n+    std::hint::black_box(node);\n+}"}]}