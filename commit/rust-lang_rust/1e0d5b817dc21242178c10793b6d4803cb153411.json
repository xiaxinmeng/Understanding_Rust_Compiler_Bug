{"sha": "1e0d5b817dc21242178c10793b6d4803cb153411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMGQ1YjgxN2RjMjEyNDIxNzhjMTA3OTNiNmQ0ODAzY2IxNTM0MTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T16:32:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T16:32:06Z"}, "message": "implement a bunch of intrinsics", "tree": {"sha": "2182d33ac8c7629f06c9ad5d5bf856e6972acc2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2182d33ac8c7629f06c9ad5d5bf856e6972acc2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e0d5b817dc21242178c10793b6d4803cb153411", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYG2aGAAoJEFbW7qD8Z6xG+lMP/18TKh8Z6vGaE2KFLmxiWTQB\nNgNlxlPdUkGcgS8MQfNNfK51E/Fa7V3UA89fS24FSXohuEMee9ZUQxPKlIwpffV0\n5cjd9Z8GiGJ0mzmX+tSgwvlpbLgoNSCaFBiaZc/8tChT6dMYF5Wp2bp/Ufh+uLiN\nmWPlEp6blLyrLECGO65hRR1ZrkW/ZFm7xqmhTB5zuH2Ip1VVnr1mh8aSBFK10rCS\nGkY5Z9sZ6y8e/ryUv+cQkgAFqVt+MxMSKhUfEDb+/gkWWmO53519Auy2PYgGYY1a\nsbKyC5kX4fl52QRjo7HHeBR3/pVChXcnVQiJPF+eAX2w88SN4vpa/SkYDkDss1jw\nCZED8ydtbdXCpOPkMohE2fxsWhe8cHISijoAgjtG9r7pqEISLMyGd6xyuggcMkj6\nKIVGE4UyxfXehyBcUm5Vgxpajge62NLJzry9tvj3xXYP4yK62e5jQ0V8KVfvsnwV\neUIcB3UoZAHYuiDJ5DO12lKV2/LE0egOUFqK39i+o6Klc1VWp4kxcCeuOeXVxqUd\nxoAUiKesv2JJrN20P0SWE5zRVmjW2UOU9/Me802gzrpyBCcjIsnUCX46I9n2R5hC\nZV3VQvsLudqiuNT2h2SdorOQcRX2lwXzU2ifKaKXGw5EBhObNlexBuS0C1CB3o1k\nbLEGsb1QyCjBKhsBR/SC\n=NBTG\n-----END PGP SIGNATURE-----", "payload": "tree 2182d33ac8c7629f06c9ad5d5bf856e6972acc2f\nparent e4060993483899c2ac75c186589d950d402c3ab8\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478190726 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478190726 +0100\n\nimplement a bunch of intrinsics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0d5b817dc21242178c10793b6d4803cb153411", "html_url": "https://github.com/rust-lang/rust/commit/1e0d5b817dc21242178c10793b6d4803cb153411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e0d5b817dc21242178c10793b6d4803cb153411/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4060993483899c2ac75c186589d950d402c3ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4060993483899c2ac75c186589d950d402c3ab8", "html_url": "https://github.com/rust-lang/rust/commit/e4060993483899c2ac75c186589d950d402c3ab8"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "71fb83d580e48c1b02ab8baa4712b741cc52e57a", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1e0d5b817dc21242178c10793b6d4803cb153411/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0d5b817dc21242178c10793b6d4803cb153411/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=1e0d5b817dc21242178c10793b6d4803cb153411", "patch": "@@ -69,6 +69,26 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_value_to_ptr(arg_vals[1], dest, ty)?;\n             }\n \n+            \"atomic_fence_acq\" => {\n+                // we are inherently singlethreaded and singlecored, this is a nop\n+            }\n+\n+            \"atomic_xsub_rel\" => {\n+                let ty = substs.type_at(0);\n+                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n+                let change = self.value_to_primval(arg_vals[1], ty)?;\n+                let old = self.read_value(ptr, ty)?;\n+                let old = match old {\n+                    Value::ByVal(val) => val,\n+                    Value::ByRef(_) => bug!(\"just read the value, can't be byref\"),\n+                    Value::ByValPair(..) => bug!(\"atomic_xsub_rel doesn't work with nonprimitives\"),\n+                };\n+                self.write_primval(dest, old)?;\n+                // FIXME: what do atomics do on overflow?\n+                let (val, _) = primval::binary_op(mir::BinOp::Sub, old, change)?;\n+                self.write_primval(Lvalue::from_ptr(ptr), val)?;\n+            }\n+\n             \"breakpoint\" => unimplemented!(), // halt miri\n \n             \"copy\" |\n@@ -101,6 +121,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::new(discr_val, PrimValKind::U64))?;\n             }\n \n+            \"drop_in_place\" => {\n+                let ty = substs.type_at(0);\n+                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n+                let mut drops = Vec::new();\n+                self.drop(Lvalue::from_ptr(ptr), ty, &mut drops)?;\n+                self.eval_drop_impls(drops)?;\n+            }\n+\n             \"fabsf32\" => {\n                 let f = self.value_to_primval(arg_vals[2], f32)?\n                     .expect_f32(\"fabsf32 read non f32\");\n@@ -248,6 +276,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let size_val = self.usize_primval(size);\n                 self.write_primval(dest, size_val)?;\n             }\n+\n+            \"min_align_of_val\" |\n+            \"align_of_val\" => {\n+                let ty = substs.type_at(0);\n+                let (_, align) = self.size_and_align_of_dst(ty, arg_vals[0])?;\n+                let align_val = self.usize_primval(align);\n+                self.write_primval(dest, align_val)?;\n+            }\n+\n             \"type_name\" => {\n                 let ty = substs.type_at(0);\n                 let ty_name = ty.to_string();"}, {"sha": "9078554f5d44a866023e394e2f13570fb2e8416a", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e0d5b817dc21242178c10793b6d4803cb153411/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0d5b817dc21242178c10793b6d4803cb153411/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=1e0d5b817dc21242178c10793b6d4803cb153411", "patch": "@@ -291,6 +291,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::from_ptr(ptr))?;\n             }\n \n+            \"__rust_deallocate\" => {\n+                let ptr = args[0].read_ptr(&self.memory)?;\n+                // FIXME: insert sanity check for size and align?\n+                let _old_size = self.value_to_primval(args[1], usize)?\n+                    .expect_uint(\"__rust_deallocate second arg not usize\");\n+                let _align = self.value_to_primval(args[2], usize)?\n+                    .expect_uint(\"__rust_deallocate third arg not usize\");\n+                self.memory.deallocate(ptr)?;\n+            },\n+\n             \"__rust_reallocate\" => {\n                 let ptr = args[0].read_ptr(&self.memory)?;\n                 let size = self.value_to_primval(args[2], usize)?.expect_uint(\"__rust_reallocate third arg not usize\");"}]}