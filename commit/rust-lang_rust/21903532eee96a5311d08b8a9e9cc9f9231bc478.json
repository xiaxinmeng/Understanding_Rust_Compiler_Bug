{"sha": "21903532eee96a5311d08b8a9e9cc9f9231bc478", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTAzNTMyZWVlOTZhNTMxMWQwOGI4YTllOWNjOWY5MjMxYmM0Nzg=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-02T17:35:57Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-09-05T02:51:29Z"}, "message": "Build the slice directly in array_chunks_mut\n\nReview discussion found that the concern about aliasing was overblown,\nso we can simplify this to cast from one slice to another directly.", "tree": {"sha": "14818906c4dd599dc918e2adce485b185124e206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14818906c4dd599dc918e2adce485b185124e206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21903532eee96a5311d08b8a9e9cc9f9231bc478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21903532eee96a5311d08b8a9e9cc9f9231bc478", "html_url": "https://github.com/rust-lang/rust/commit/21903532eee96a5311d08b8a9e9cc9f9231bc478", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21903532eee96a5311d08b8a9e9cc9f9231bc478/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "864a28e01d70cd73ef7f0b64f6793697f638b8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/864a28e01d70cd73ef7f0b64f6793697f638b8b0", "html_url": "https://github.com/rust-lang/rust/commit/864a28e01d70cd73ef7f0b64f6793697f638b8b0"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "a32ea062de494573b7904137e433eaa2a3f76dee", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21903532eee96a5311d08b8a9e9cc9f9231bc478/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21903532eee96a5311d08b8a9e9cc9f9231bc478/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=21903532eee96a5311d08b8a9e9cc9f9231bc478", "patch": "@@ -1067,14 +1067,11 @@ impl<T> [T] {\n     pub fn array_chunks_mut<const N: usize>(&mut self) -> ArrayChunksMut<'_, T, N> {\n         assert_ne!(N, 0);\n         let len = self.len() / N;\n-        let (fst_ptr, snd) = {\n-            // Scope the first slice into a pointer to avoid aliasing the new slice below.\n-            let (fst, snd) = self.split_at_mut(len * N);\n-            (fst.as_mut_ptr(), snd)\n-        };\n+        let (fst, snd) = self.split_at_mut(len * N);\n         // SAFETY: We cast a slice of `len * N` elements into\n         // a slice of `len` many `N` elements chunks.\n-        let array_slice: &mut [[T; N]] = unsafe { from_raw_parts_mut(fst_ptr.cast(), len) };\n+        let array_slice: &mut [[T; N]] =\n+            unsafe { from_raw_parts_mut(fst.as_mut_ptr().cast(), len) };\n         ArrayChunksMut { iter: array_slice.iter_mut(), rem: snd }\n     }\n "}]}