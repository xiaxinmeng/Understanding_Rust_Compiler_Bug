{"sha": "b934506e681e00b803ca886122062916b41e0fbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MzQ1MDZlNjgxZTAwYjgwM2NhODg2MTIyMDYyOTE2YjQxZTBmYmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-25T23:44:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-30T08:11:59Z"}, "message": "Reorder passes so that AddValidation can run after ElaborateDrops", "tree": {"sha": "6727df39531fa3d53dfe1c1af379e75934caa957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6727df39531fa3d53dfe1c1af379e75934caa957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b934506e681e00b803ca886122062916b41e0fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b934506e681e00b803ca886122062916b41e0fbe", "html_url": "https://github.com/rust-lang/rust/commit/b934506e681e00b803ca886122062916b41e0fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b934506e681e00b803ca886122062916b41e0fbe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04f962adc39c2632da8f712b2cd38eb6109ae5a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f962adc39c2632da8f712b2cd38eb6109ae5a1", "html_url": "https://github.com/rust-lang/rust/commit/04f962adc39c2632da8f712b2cd38eb6109ae5a1"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "2b667d83e35e5ed455900fc61e246e355f501cc3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b934506e681e00b803ca886122062916b41e0fbe/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b934506e681e00b803ca886122062916b41e0fbe/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b934506e681e00b803ca886122062916b41e0fbe", "patch": "@@ -925,10 +925,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     let mut passes = Passes::new();\n     passes.push_hook(mir::transform::dump_mir::DumpMir);\n \n-    // Insert AcquireValid and ReleaseValid calls.  Conceptually, this\n-    // pass is actually part of MIR building.\n-    passes.push_pass(MIR_CONST, mir::transform::add_validation::AddValidation);\n-\n     // Remove all `EndRegion` statements that are not involved in borrows.\n     passes.push_pass(MIR_CONST, mir::transform::clean_end_regions::CleanEndRegions);\n \n@@ -937,25 +933,32 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     passes.push_pass(MIR_CONST, mir::transform::type_check::TypeckMir);\n     passes.push_pass(MIR_CONST, mir::transform::rustc_peek::SanityCheck);\n \n+    // We compute \"constant qualifications\" betwen MIR_CONST and MIR_VALIDATED.\n+\n     // What we need to run borrowck etc.\n     passes.push_pass(MIR_VALIDATED, mir::transform::qualify_consts::QualifyAndPromoteConstants);\n     passes.push_pass(MIR_VALIDATED,\n                      mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n     passes.push_pass(MIR_VALIDATED, mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));\n     passes.push_pass(MIR_VALIDATED, mir::transform::nll::NLL);\n \n-    // Optimizations begin.\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"no-landing-pads\"));\n+    // borrowck runs between MIR_VALIDATED and MIR_OPTIMIZED.\n \n-    // From here on out, regions are gone.\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::erase_regions::EraseRegions);\n+    // These next passes must be executed together\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::add_call_guards::AddCallGuards);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::elaborate_drops::ElaborateDrops);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::no_landing_pads::NoLandingPads);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n-\n     // No lifetime analysis based on borrowing can be done from here on out.\n+\n+    // AddValidation needs to run after ElaborateDrops and before EraseRegions.\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::add_validation::AddValidation);\n+\n+    // From here on out, regions are gone.\n+    passes.push_pass(MIR_OPTIMIZED, mir::transform::erase_regions::EraseRegions);\n+\n+    // Optimizations begin.\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::inline::Inline);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::instcombine::InstCombine);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::deaggregator::Deaggregator);"}, {"sha": "d7ec58384a46ed97079ff2c378cc262b5415d30e", "filename": "src/librustc_mir/transform/clean_end_regions.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b934506e681e00b803ca886122062916b41e0fbe/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b934506e681e00b803ca886122062916b41e0fbe/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs?ref=b934506e681e00b803ca886122062916b41e0fbe", "patch": "@@ -31,7 +31,6 @@ pub struct CleanEndRegions;\n \n struct GatherBorrowedRegions {\n     seen_regions: FxHashSet<CodeExtent>,\n-    in_validation_statement: bool,\n }\n \n struct DeleteTrivialEndRegions<'a> {\n@@ -44,8 +43,7 @@ impl MirPass for CleanEndRegions {\n                           _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n         let mut gather = GatherBorrowedRegions {\n-            seen_regions: FxHashSet(),\n-            in_validation_statement: false\n+            seen_regions: FxHashSet()\n         };\n         gather.visit_mir(mir);\n \n@@ -71,22 +69,15 @@ impl<'tcx> Visitor<'tcx> for GatherBorrowedRegions {\n                        block: BasicBlock,\n                        statement: &Statement<'tcx>,\n                        location: Location) {\n-        self.in_validation_statement = match statement.kind {\n-            StatementKind::Validate(..) => true,\n-            _ => false,\n-        };\n         self.super_statement(block, statement, location);\n-        self.in_validation_statement = false;\n     }\n \n     fn visit_ty(&mut self, ty: &Ty<'tcx>, _: Lookup) {\n-        // Gather regions that occur in types inside AcquireValid/ReleaseValid statements\n-        if self.in_validation_statement {\n-            for re in ty.walk().flat_map(|t| t.regions()) {\n-                match *re {\n-                    RegionKind::ReScope(ce) => { self.seen_regions.insert(ce); }\n-                    _ => {},\n-                }\n+        // Gather regions that occur in types\n+        for re in ty.walk().flat_map(|t| t.regions()) {\n+            match *re {\n+                RegionKind::ReScope(ce) => { self.seen_regions.insert(ce); }\n+                _ => {},\n             }\n         }\n         self.super_ty(ty);"}]}