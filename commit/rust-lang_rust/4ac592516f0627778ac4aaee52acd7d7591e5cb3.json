{"sha": "4ac592516f0627778ac4aaee52acd7d7591e5cb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzU5MjUxNmYwNjI3Nzc4YWM0YWFlZTUyYWNkN2Q3NTkxZTVjYjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-19T23:33:56Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-27T12:51:36Z"}, "message": "Get rid of `Block::recovered`", "tree": {"sha": "b952022b53dca2bae19cd091a9cc6c76dcfb873b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b952022b53dca2bae19cd091a9cc6c76dcfb873b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac592516f0627778ac4aaee52acd7d7591e5cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac592516f0627778ac4aaee52acd7d7591e5cb3", "html_url": "https://github.com/rust-lang/rust/commit/4ac592516f0627778ac4aaee52acd7d7591e5cb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac592516f0627778ac4aaee52acd7d7591e5cb3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff01ccfa805ccef67827bf1ea84e21d61d13e6f", "html_url": "https://github.com/rust-lang/rust/commit/fff01ccfa805ccef67827bf1ea84e21d61d13e6f"}], "stats": {"total": 53, "additions": 12, "deletions": 41}, "files": [{"sha": "32514caff876cf7b5e63f8712d0a00c365642d34", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -2709,7 +2709,6 @@ impl<'a> LoweringContext<'a> {\n             rules: self.lower_block_check_mode(&b.rules),\n             span: b.span,\n             targeted_by_break,\n-            recovered: b.recovered,\n         })\n     }\n \n@@ -3781,7 +3780,6 @@ impl<'a> LoweringContext<'a> {\n                                 rules: hir::DefaultBlock,\n                                 span,\n                                 targeted_by_break: false,\n-                                recovered: blk.recovered,\n                             });\n                             P(self.expr_block(blk, ThinVec::new()))\n                         }\n@@ -4823,7 +4821,6 @@ impl<'a> LoweringContext<'a> {\n             rules: hir::DefaultBlock,\n             span,\n             targeted_by_break: false,\n-            recovered: false,\n         }\n     }\n "}, {"sha": "56144129ef4c29bba3c1e19083316192a2e2c4b9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -807,11 +807,6 @@ pub struct Block {\n     /// break out of this block early.\n     /// Used by `'label: {}` blocks and by `catch` statements.\n     pub targeted_by_break: bool,\n-    /// If true, don't emit return value type errors as the parser had\n-    /// to recover from a parse error so this block will not have an\n-    /// appropriate type. A parse error will have been emitted so the\n-    /// compilation will never succeed if this is true.\n-    pub recovered: bool,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "bf9efb54b600fd3717bd85a8cd05743272c88f90", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -410,7 +410,6 @@ impl_stable_hash_for!(struct hir::Block {\n     rules,\n     span,\n     targeted_by_break,\n-    recovered,\n });\n \n impl_stable_hash_for!(struct hir::Pat {"}, {"sha": "a9ec99358c1b2420d8b06ff4c1f5821d22bcbd4f", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -741,15 +741,13 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n \n     fn fold_block(&mut self, b: P<ast::Block>) -> P<ast::Block> {\n         fn stmt_to_block(rules: ast::BlockCheckMode,\n-                         recovered: bool,\n                          s: Option<ast::Stmt>,\n                          sess: &Session) -> ast::Block {\n             ast::Block {\n                 stmts: s.into_iter().collect(),\n                 rules,\n                 id: sess.next_node_id(),\n                 span: syntax_pos::DUMMY_SP,\n-                recovered,\n             }\n         }\n \n@@ -768,7 +766,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n             }\n         }\n \n-        let empty_block = stmt_to_block(BlockCheckMode::Default, false, None, self.sess);\n+        let empty_block = stmt_to_block(BlockCheckMode::Default, None, self.sess);\n         let loop_expr = P(ast::Expr {\n             node: ast::ExprKind::Loop(P(empty_block), None),\n             id: self.sess.next_node_id(),\n@@ -809,7 +807,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n                         old_blocks.push(new_block);\n                     }\n \n-                    stmt_to_block(b.rules, b.recovered, Some(loop_stmt), self.sess)\n+                    stmt_to_block(b.rules, Some(loop_stmt), self.sess)\n                 } else {\n                     //push `loop {}` onto the end of our fresh block and yield that\n                     new_block.stmts.push(loop_stmt);"}, {"sha": "b3c24be108da7df19e420dc6e64b7526563c0694", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -4772,12 +4772,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 //\n                 // #41425 -- label the implicit `()` as being the\n                 // \"found type\" here, rather than the \"expected type\".\n-                //\n-                // #44579 -- if the block was recovered during parsing,\n-                // the type would be nonsensical and it is not worth it\n-                // to perform the type check, so we avoid generating the\n-                // diagnostic output.\n-                if !self.diverges.get().always() && !blk.recovered {\n+                if !self.diverges.get().always() {\n                     coerce.coerce_forced_unit(self, &self.misc(blk.span), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n                             self.consider_hint_about_removing_semicolon(blk,"}, {"sha": "e3a8980a975c19a7827b0d6fc75b6011e227294e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -444,7 +444,6 @@ pub struct Block {\n     /// Distinguishes between `unsafe { ... }` and `{ ... }`\n     pub rules: BlockCheckMode,\n     pub span: Span,\n-    pub recovered: bool,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "a8eec1a74dd2b5531640153bf3e73307f5e43848", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -587,7 +587,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n            id: ast::DUMMY_NODE_ID,\n            rules: BlockCheckMode::Default,\n            span,\n-           recovered: false,\n         })\n     }\n "}, {"sha": "8ac103856dcd17fe4b799789066cc993132f689a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -892,12 +892,11 @@ fn noop_fold_bounds<T: Folder>(bounds: GenericBounds, folder: &mut T)\n }\n \n pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n-    b.map(|Block {id, stmts, rules, span, recovered}| Block {\n+    b.map(|Block {id, stmts, rules, span}| Block {\n         id: folder.new_id(id),\n         stmts: stmts.move_flat_map(|s| folder.fold_stmt(s).into_iter()),\n         rules,\n         span: folder.new_span(span),\n-        recovered,\n     })\n }\n "}, {"sha": "d68a6546f4865811c26d666aca54c5e20b931dea", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -32,6 +32,7 @@ use ast::{UseTree, UseTreeKind};\n use ast::{BinOpKind, UnOp};\n use ast::{RangeEnd, RangeSyntax};\n use {ast, attr};\n+use ext::base::DummyResult;\n use source_map::{self, SourceMap, Spanned, respan};\n use syntax_pos::{self, Span, MultiSpan, BytePos, FileName};\n use errors::{self, Applicability, DiagnosticBuilder, DiagnosticId};\n@@ -4966,16 +4967,16 @@ impl<'a> Parser<'a> {\n     /// Precondition: already parsed the '{'.\n     fn parse_block_tail(&mut self, lo: Span, s: BlockCheckMode) -> PResult<'a, P<Block>> {\n         let mut stmts = vec![];\n-        let mut recovered = false;\n-\n         while !self.eat(&token::CloseDelim(token::Brace)) {\n             let stmt = match self.parse_full_stmt(false) {\n                 Err(mut err) => {\n                     err.emit();\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n-                    self.eat(&token::CloseDelim(token::Brace));\n-                    recovered = true;\n-                    break;\n+                    Some(Stmt {\n+                        id: ast::DUMMY_NODE_ID,\n+                        node: StmtKind::Expr(DummyResult::raw_expr(self.span)),\n+                        span: self.span,\n+                    })\n                 }\n                 Ok(stmt) => stmt,\n             };\n@@ -4993,7 +4994,6 @@ impl<'a> Parser<'a> {\n             id: ast::DUMMY_NODE_ID,\n             rules: s,\n             span: lo.to(self.prev_span),\n-            recovered,\n         }))\n     }\n "}, {"sha": "7548d43f184441d736b88cb3fc5991ed767d47ef", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -153,6 +153,5 @@ fn call_intrinsic(cx: &ExtCtxt,\n         id: ast::DUMMY_NODE_ID,\n         rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n         span,\n-        recovered: false,\n     }))\n }"}, {"sha": "ce3b03efd26047ac50928ffbe52851f10d207f6e", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -105,7 +105,6 @@ fn iter_exprs(depth: usize, f: &mut FnMut(P<Expr>)) {\n                     id: DUMMY_NODE_ID,\n                     rules: BlockCheckMode::Default,\n                     span: DUMMY_SP,\n-                    recovered: false,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::If(e, block.clone(), None)));\n             },"}, {"sha": "95c8c2b0585b631d353c7c7e188142458974efe9", "filename": "src/test/ui/issues/issue-10536.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.rs?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -20,5 +20,4 @@ pub fn main() {\n     // least throw a conventional error.\n     assert!({one! two});\n     //~^ ERROR expected `(` or `{`, found `}`\n-    //~| ERROR cannot apply unary operator `!` to type `!`\n }"}, {"sha": "0b6c357b9206b9a8bd0901d60f237df7e9b51fda", "filename": "src/test/ui/issues/issue-10536.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ac592516f0627778ac4aaee52acd7d7591e5cb3/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr?ref=4ac592516f0627778ac4aaee52acd7d7591e5cb3", "patch": "@@ -25,13 +25,6 @@ LL |     assert!({one! two()});\n    = note: expected type `bool`\n               found type `()`\n \n-error[E0600]: cannot apply unary operator `!` to type `!`\n-  --> $DIR/issue-10536.rs:31:5\n-   |\n-LL |     assert!({one! two});\n-   |     ^^^^^^^^^^^^^^^^^^^^ cannot apply unary operator `!`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0308, E0600.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}]}