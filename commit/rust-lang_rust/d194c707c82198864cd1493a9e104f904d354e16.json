{"sha": "d194c707c82198864cd1493a9e104f904d354e16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOTRjNzA3YzgyMTk4ODY0Y2QxNDkzYTllMTA0ZjkwNGQzNTRlMTY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-06T17:59:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-06T18:06:15Z"}, "message": "Use jemalloc", "tree": {"sha": "1a76d34a20e609809d91a7d53b2e02635fa2ca6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a76d34a20e609809d91a7d53b2e02635fa2ca6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d194c707c82198864cd1493a9e104f904d354e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d194c707c82198864cd1493a9e104f904d354e16", "html_url": "https://github.com/rust-lang/rust/commit/d194c707c82198864cd1493a9e104f904d354e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d194c707c82198864cd1493a9e104f904d354e16/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cecd7a9ae69689a884b4baf0a0c871a5b9eb1bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cecd7a9ae69689a884b4baf0a0c871a5b9eb1bb4", "html_url": "https://github.com/rust-lang/rust/commit/cecd7a9ae69689a884b4baf0a0c871a5b9eb1bb4"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "79c9b57532d662a24b80570e4ed94b92073218c3", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d194c707c82198864cd1493a9e104f904d354e16/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d194c707c82198864cd1493a9e104f904d354e16/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d194c707c82198864cd1493a9e104f904d354e16", "patch": "@@ -35,9 +35,10 @@ smallvec = \"1.6.1\"\n #gimli = { path = \"../\" }\n \n [features]\n-default = [\"jit\", \"inline_asm\"]\n+default = [\"jit\", \"inline_asm\", \"jemalloc\"]\n jit = [\"cranelift-jit\", \"libloading\"]\n inline_asm = []\n+jemalloc = []\n \n [profile.dev]\n # By compiling dependencies with optimizations, performing tests gets much faster."}, {"sha": "b8d6958b3b2511731dc6f816e6717158c12a11b0", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d194c707c82198864cd1493a9e104f904d354e16/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d194c707c82198864cd1493a9e104f904d354e16/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=d194c707c82198864cd1493a9e104f904d354e16", "patch": "@@ -1,5 +1,7 @@\n #![feature(rustc_private)]\n \n+#[cfg(feature = \"jemalloc\")]\n+extern crate jemalloc_sys;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_interface;\n@@ -33,6 +35,46 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n }\n \n fn main() {\n+    // Pull in jemalloc when enabled.\n+    //\n+    // Note that we're pulling in a static copy of jemalloc which means that to\n+    // pull it in we need to actually reference its symbols for it to get\n+    // linked. The two crates we link to here, std and rustc_driver, are both\n+    // dynamic libraries. That means to pull in jemalloc we need to actually\n+    // reference allocation symbols one way or another (as this file is the only\n+    // object code in the rustc executable).\n+    #[cfg(feature = \"jemalloc\")]\n+    {\n+        use std::os::raw::{c_int, c_void};\n+        #[used]\n+        static _F1: unsafe extern \"C\" fn(usize, usize) -> *mut c_void = jemalloc_sys::calloc;\n+        #[used]\n+        static _F2: unsafe extern \"C\" fn(*mut *mut c_void, usize, usize) -> c_int =\n+            jemalloc_sys::posix_memalign;\n+        #[used]\n+        static _F3: unsafe extern \"C\" fn(usize, usize) -> *mut c_void = jemalloc_sys::aligned_alloc;\n+        #[used]\n+        static _F4: unsafe extern \"C\" fn(usize) -> *mut c_void = jemalloc_sys::malloc;\n+        #[used]\n+        static _F5: unsafe extern \"C\" fn(*mut c_void, usize) -> *mut c_void = jemalloc_sys::realloc;\n+        #[used]\n+        static _F6: unsafe extern \"C\" fn(*mut c_void) = jemalloc_sys::free;\n+\n+        // On OSX, jemalloc doesn't directly override malloc/free, but instead\n+        // registers itself with the allocator's zone APIs in a ctor. However,\n+        // the linker doesn't seem to consider ctors as \"used\" when statically\n+        // linking, so we need to explicitly depend on the function.\n+        #[cfg(target_os = \"macos\")]\n+        {\n+            extern \"C\" {\n+                fn _rjem_je_zone_register();\n+            }\n+\n+            #[used]\n+            static _F7: unsafe extern \"C\" fn() = _rjem_je_zone_register;\n+        }\n+    }\n+\n     let start_time = std::time::Instant::now();\n     let start_rss = get_resident_set_size();\n     rustc_driver::init_rustc_env_logger();"}]}