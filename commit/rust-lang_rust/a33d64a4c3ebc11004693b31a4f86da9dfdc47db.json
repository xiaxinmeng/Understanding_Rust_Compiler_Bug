{"sha": "a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzM2Q2NGE0YzNlYmMxMTAwNDY5M2IzMWE0Zjg2ZGE5ZGZkYzQ3ZGI=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-04-25T19:06:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T19:06:27Z"}, "message": "Rollup merge of #5505 - flip1995:avoid_running_lints, r=matthiaskrgr\n\nAvoid running cargo+internal lints when not enabled\n\nr? @matthiaskrgr\n\nchangelog: none", "tree": {"sha": "4f7400e13a0f659305360e11cc83a740d1486ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f7400e13a0f659305360e11cc83a740d1486ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepIozCRBK7hj4Ov3rIwAAdHIIAECxeSPQs2p/m1muqRFP8d/8\nnCCVx/nkn0bl1S+wpMzj4UUgmpEX4IoS1JYlidQAzAmZbHYGkv3SnRPRUHZ2khqC\n1/uusZuEzW/ZLlQSpUiGKug8xlZV7g4ocxSDHIo97ZWkchdcj2IRUCHci0fot/aV\nk9a7sSAsIX0SaqdaA/nN2BTF55fkGY4nez2QWZx6zbr5V2fKzPI9P86VX1G629mm\noNN1+0fZ6HoWPSmkb1SsL7CImZZXF8pnw4qcwufZ4eHfc5xOD5JWBN8UE0WeGz6d\nJTetEYCv1O7uhiD7AOCQncXwnE6SQr/xWbf8zM2R776ThatHZtDQtwKwQXbZzRU=\n=38jS\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f7400e13a0f659305360e11cc83a740d1486ec1\nparent e1d13c34b0beaea9a5fbf13687672ef85e779d9f\nparent f31502f4bb22262cd1d05e59aa7af4879ae1b2ed\nauthor Philipp Krones <hello@philkrones.com> 1587841587 +0200\ncommitter GitHub <noreply@github.com> 1587841587 +0200\n\nRollup merge of #5505 - flip1995:avoid_running_lints, r=matthiaskrgr\n\nAvoid running cargo+internal lints when not enabled\n\nr? @matthiaskrgr\n\nchangelog: none\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "html_url": "https://github.com/rust-lang/rust/commit/a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d13c34b0beaea9a5fbf13687672ef85e779d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d13c34b0beaea9a5fbf13687672ef85e779d9f", "html_url": "https://github.com/rust-lang/rust/commit/e1d13c34b0beaea9a5fbf13687672ef85e779d9f"}, {"sha": "f31502f4bb22262cd1d05e59aa7af4879ae1b2ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31502f4bb22262cd1d05e59aa7af4879ae1b2ed", "html_url": "https://github.com/rust-lang/rust/commit/f31502f4bb22262cd1d05e59aa7af4879ae1b2ed"}], "stats": {"total": 93, "additions": 66, "deletions": 27}, "files": [{"sha": "782da249808d0e71b3af319d9ef86cdb66236338", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "patch": "@@ -2,9 +2,9 @@\n \n use std::path::PathBuf;\n \n-use crate::utils::span_lint;\n-use rustc_ast::ast::Crate;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use crate::utils::{run_lints, span_lint};\n+use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n \n@@ -35,11 +35,11 @@ declare_clippy_lint! {\n     \"common metadata is defined in `Cargo.toml`\"\n }\n \n-fn warning(cx: &EarlyContext<'_>, message: &str) {\n+fn warning(cx: &LateContext<'_, '_>, message: &str) {\n     span_lint(cx, CARGO_COMMON_METADATA, DUMMY_SP, message);\n }\n \n-fn missing_warning(cx: &EarlyContext<'_>, package: &cargo_metadata::Package, field: &str) {\n+fn missing_warning(cx: &LateContext<'_, '_>, package: &cargo_metadata::Package, field: &str) {\n     let message = format!(\"package `{}` is missing `{}` metadata\", package.name, field);\n     warning(cx, &message);\n }\n@@ -59,8 +59,12 @@ fn is_empty_vec(value: &[String]) -> bool {\n \n declare_lint_pass!(CargoCommonMetadata => [CARGO_COMMON_METADATA]);\n \n-impl EarlyLintPass for CargoCommonMetadata {\n-    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n+impl LateLintPass<'_, '_> for CargoCommonMetadata {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, _: &Crate<'_>) {\n+        if !run_lints(cx, &[CARGO_COMMON_METADATA], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().no_deps().exec() {\n             metadata\n         } else {"}, {"sha": "ac867cc4e4af0ea641c8aa2d693a6d7f37cbae52", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "patch": "@@ -1024,9 +1024,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box precedence::Precedence);\n     store.register_early_pass(|| box needless_continue::NeedlessContinue);\n     store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n-    store.register_early_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n-    store.register_early_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n-    store.register_early_pass(|| box wildcard_dependencies::WildcardDependencies);\n+    store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n+    store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n+    store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n     store.register_early_pass(|| box literal_representation::LiteralDigitGrouping);\n     let literal_representation_threshold = conf.literal_representation_threshold;\n     store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));"}, {"sha": "ed85d0315bd25d7d232de53e96c9ef97bf53ca0a", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "patch": "@@ -1,8 +1,8 @@\n //! lint on multiple versions of a crate being used\n \n-use crate::utils::span_lint;\n-use rustc_ast::ast::Crate;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use crate::utils::{run_lints, span_lint};\n+use rustc_hir::{Crate, CRATE_HIR_ID};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n \n@@ -33,8 +33,12 @@ declare_clippy_lint! {\n \n declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n \n-impl EarlyLintPass for MultipleCrateVersions {\n-    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n+impl LateLintPass<'_, '_> for MultipleCrateVersions {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, _: &Crate<'_>) {\n+        if !run_lints(cx, &[MULTIPLE_CRATE_VERSIONS], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().exec() {\n             metadata\n         } else {"}, {"sha": "5bf9acdc5f7ce21e25144e2aa0d3b6cc3055ff58", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::SpanlessEq;\n use crate::utils::{\n-    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, snippet, span_lint, span_lint_and_help,\n-    span_lint_and_sugg, walk_ptrs_ty,\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, paths, run_lints, snippet, span_lint,\n+    span_lint_and_help, span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, Name, NodeId};\n@@ -10,7 +10,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n@@ -252,6 +253,10 @@ impl_lint_pass!(LintWithoutLintPass => [DEFAULT_LINT, LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n+        if !run_lints(cx, &[DEFAULT_LINT], item.hir_id) {\n+            return;\n+        }\n+\n         if let hir::ItemKind::Static(ref ty, Mutability::Not, body_id) = item.kind {\n             if is_lint_ref_type(cx, ty) {\n                 let expr = &cx.tcx.hir().body(body_id).value;\n@@ -306,6 +311,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     }\n \n     fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, _: &'tcx Crate<'_>) {\n+        if !run_lints(cx, &[LINT_WITHOUT_LINT_PASS], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         for (lint_name, &lint_span) in &self.declared_lints {\n             // When using the `declare_tool_lint!` macro, the original `lint_span`'s\n             // file points to \"<rustc macros>\".\n@@ -355,15 +364,12 @@ struct LintCollector<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        walk_expr(self, expr);\n-    }\n-\n     fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }\n     }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::All(self.cx.tcx.hir())\n     }\n@@ -391,6 +397,10 @@ impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+        if !run_lints(cx, &[COMPILER_LINT_FUNCTIONS], expr.hir_id) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let ExprKind::MethodCall(ref path, _, ref args) = expr.kind;\n             let fn_name = path.ident;\n@@ -416,6 +426,10 @@ declare_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if !run_lints(cx, &[OUTER_EXPN_EXPN_DATA], expr.hir_id) {\n+            return;\n+        }\n+\n         let (method_names, arg_lists, spans) = method_calls(expr, 2);\n         let method_names: Vec<SymbolStr> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(|s| &**s).collect();\n@@ -462,6 +476,10 @@ declare_lint_pass!(CollapsibleCalls => [COLLAPSIBLE_SPAN_LINT_CALLS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CollapsibleCalls {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if !run_lints(cx, &[COLLAPSIBLE_SPAN_LINT_CALLS], expr.hir_id) {\n+            return;\n+        }\n+\n         if_chain! {\n             if let ExprKind::Call(ref func, ref and_then_args) = expr.kind;\n             if let ExprKind::Path(ref path) = func.kind;"}, {"sha": "0d37932ddab53e86df673fa93f87fdb9714e46d9", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "patch": "@@ -1399,6 +1399,15 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_, '_>, did: DefId) -> bool\n     )\n }\n \n+pub fn run_lints(cx: &LateContext<'_, '_>, lints: &[&'static Lint], id: HirId) -> bool {\n+    lints.iter().any(|lint| {\n+        matches!(\n+            cx.tcx.lint_level_at_node(lint, id),\n+            (Level::Forbid | Level::Deny | Level::Warn, _)\n+        )\n+    })\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{trim_multiline, without_block_comments};"}, {"sha": "d8d48eb15358d19d70cb82b07343e476714440ae", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a33d64a4c3ebc11004693b31a4f86da9dfdc47db/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=a33d64a4c3ebc11004693b31a4f86da9dfdc47db", "patch": "@@ -1,6 +1,6 @@\n-use crate::utils::span_lint;\n-use rustc_ast::ast::Crate;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use crate::utils::{run_lints, span_lint};\n+use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::DUMMY_SP;\n \n@@ -28,8 +28,12 @@ declare_clippy_lint! {\n \n declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n \n-impl EarlyLintPass for WildcardDependencies {\n-    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n+impl LateLintPass<'_, '_> for WildcardDependencies {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, _: &Crate<'_>) {\n+        if !run_lints(cx, &[WILDCARD_DEPENDENCIES], CRATE_HIR_ID) {\n+            return;\n+        }\n+\n         let metadata = if let Ok(metadata) = cargo_metadata::MetadataCommand::new().no_deps().exec() {\n             metadata\n         } else {"}]}