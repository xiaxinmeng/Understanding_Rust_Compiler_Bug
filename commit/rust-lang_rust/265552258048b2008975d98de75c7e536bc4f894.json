{"sha": "265552258048b2008975d98de75c7e536bc4f894", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NTU1MjI1ODA0OGIyMDA4OTc1ZDk4ZGU3NWM3ZTUzNmJjNGY4OTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-11T14:03:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:59:40Z"}, "message": "move `type_op` into `rustc`", "tree": {"sha": "9bb3f8c89a6c623f739f6e7fd61ffb4ca7af66ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb3f8c89a6c623f739f6e7fd61ffb4ca7af66ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/265552258048b2008975d98de75c7e536bc4f894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/265552258048b2008975d98de75c7e536bc4f894", "html_url": "https://github.com/rust-lang/rust/commit/265552258048b2008975d98de75c7e536bc4f894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/265552258048b2008975d98de75c7e536bc4f894/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b446b4b914945209d917a02572909717c6bd0b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b446b4b914945209d917a02572909717c6bd0b9", "html_url": "https://github.com/rust-lang/rust/commit/3b446b4b914945209d917a02572909717c6bd0b9"}], "stats": {"total": 126, "additions": 61, "deletions": 65}, "files": [{"sha": "7181a94acff31067441053839ec78700d4393de8", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -22,6 +22,7 @@ pub mod dropck_outlives;\n pub mod evaluate_obligation;\n pub mod normalize;\n pub mod normalize_erasing_regions;\n+pub mod type_op;\n \n pub type CanonicalProjectionGoal<'tcx> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, ty::ProjectionTy<'tcx>>>;"}, {"sha": "65b2ab31eba4c30891030fce7fb390450b386365", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::{InferCtxt, InferResult};\n-use rustc::ty::TyCtxt;\n+use infer::{InferCtxt, InferResult};\n+use ty::TyCtxt;\n use std::fmt;\n \n-crate struct CustomTypeOp<F, G> {\n+pub struct CustomTypeOp<F, G> {\n     closure: F,\n     description: G,\n }\n \n impl<F, G> CustomTypeOp<F, G> {\n-    crate fn new<'gcx, 'tcx, R>(closure: F, description: G) -> Self\n+    pub fn new<'gcx, 'tcx, R>(closure: F, description: G) -> Self\n     where\n         F: FnOnce(&InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n         G: Fn() -> String,\n@@ -32,7 +32,7 @@ impl<F, G> CustomTypeOp<F, G> {\n \n impl<'gcx, 'tcx, F, R, G> super::TypeOp<'gcx, 'tcx> for CustomTypeOp<F, G>\n where\n-    F: FnOnce(&InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n+    F: for<'a, 'cx> FnOnce(&'a InferCtxt<'cx, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n     G: Fn() -> String,\n {\n     type Output = R;", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/custom.rs"}, {"sha": "9dad9fa4e0a17343a52224f71475c03542337beb", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -8,21 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::canonical::{CanonicalizedQueryResult, Canonical};\n-use rustc::traits::query::NoSolution;\n-use rustc::traits::{FulfillmentContext, ObligationCause};\n-use rustc::ty::{self, ParamEnv, Ty, TyCtxt};\n+use infer::canonical::{CanonicalizedQueryResult, Canonical};\n+use traits::query::NoSolution;\n+use traits::{FulfillmentContext, ObligationCause};\n+use ty::{self, ParamEnv, Ty, TyCtxt};\n use syntax::codemap::DUMMY_SP;\n \n #[derive(Copy, Clone, Debug)]\n-crate struct Eq<'tcx> {\n+pub struct Eq<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,\n }\n \n impl<'tcx> Eq<'tcx> {\n-    crate fn new(param_env: ParamEnv<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> Self {\n+    pub fn new(param_env: ParamEnv<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> Self {\n         Self { param_env, a, b }\n     }\n }", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/eq.rs"}, {"sha": "0028aaa40446e1176bbc5c4d882825106d4f83ff", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "renamed", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -8,25 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::canonical::query_result;\n-use rustc::infer::canonical::{Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint};\n-use rustc::infer::{InferCtxt, InferOk, InferResult};\n-use rustc::traits::{ObligationCause, TraitEngine};\n-use rustc::ty::error::TypeError;\n-use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{Lift, ParamEnv, TyCtxt};\n+use infer::canonical::query_result;\n+use infer::canonical::{Canonicalized, CanonicalizedQueryResult, QueryRegionConstraint};\n+use infer::{InferCtxt, InferOk, InferResult};\n+use traits::{ObligationCause, TraitEngine};\n+use ty::error::TypeError;\n+use ty::fold::TypeFoldable;\n+use ty::{Lift, ParamEnv, TyCtxt};\n use std::fmt;\n use std::rc::Rc;\n use syntax::codemap::DUMMY_SP;\n \n-crate mod custom;\n-crate mod eq;\n-crate mod normalize;\n-crate mod outlives;\n-crate mod predicates;\n-crate mod subtype;\n+pub mod custom;\n+pub mod eq;\n+pub mod normalize;\n+pub mod outlives;\n+pub mod predicates;\n+pub mod subtype;\n \n-crate trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n+pub trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     type Output;\n \n     /// Micro-optimization: returns `Ok(x)` if we can trivially\n@@ -100,7 +100,7 @@ crate trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n \n type Lifted<'gcx, T> = <T as Lift<'gcx>>::Lifted;\n \n-crate trait QueryTypeOp<'gcx: 'tcx, 'tcx>: TypeFoldable<'tcx> + Lift<'gcx> {\n+pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>: TypeFoldable<'tcx> + Lift<'gcx> {\n     type QueryResult: TypeFoldable<'tcx> + Lift<'gcx>;\n \n     /// Micro-optimization: returns `Ok(x)` if we can trivially", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/mod.rs"}, {"sha": "a363f6f213cb158cd0a880e18765840e81d18dee", "filename": "src/librustc/traits/query/type_op/normalize.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::{InferCtxt, InferOk, InferResult};\n-use rustc::traits::query::NoSolution;\n-use rustc::traits::{Normalized, ObligationCause};\n-use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{ParamEnv, TyCtxt};\n+use infer::{InferCtxt, InferOk, InferResult};\n+use traits::query::NoSolution;\n+use traits::{Normalized, ObligationCause};\n+use ty::fold::TypeFoldable;\n+use ty::{ParamEnv, TyCtxt};\n use std::fmt;\n \n #[derive(Debug)]\n-crate struct Normalize<'tcx, T> {\n+pub struct Normalize<'tcx, T> {\n     param_env: ParamEnv<'tcx>,\n     value: T,\n }\n@@ -25,7 +25,7 @@ impl<'tcx, T> Normalize<'tcx, T>\n where\n     T: fmt::Debug + TypeFoldable<'tcx>,\n {\n-    crate fn new(param_env: ParamEnv<'tcx>, value: T) -> Self {\n+    pub fn new(param_env: ParamEnv<'tcx>, value: T) -> Self {\n         Self { param_env, value }\n     }\n }", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/normalize.rs"}, {"sha": "f6c60bcaf38cd28d9210c4476d8f69929594eb7f", "filename": "src/librustc/traits/query/type_op/outlives.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::{InferCtxt, InferResult};\n-use rustc::traits::query::dropck_outlives::trivial_dropck_outlives;\n-use rustc::traits::ObligationCause;\n-use rustc::ty::subst::Kind;\n-use rustc::ty::{ParamEnv, Ty, TyCtxt};\n+use infer::{InferCtxt, InferResult};\n+use traits::query::dropck_outlives::trivial_dropck_outlives;\n+use traits::ObligationCause;\n+use ty::subst::Kind;\n+use ty::{ParamEnv, Ty, TyCtxt};\n \n #[derive(Debug)]\n-crate struct DropckOutlives<'tcx> {\n+pub struct DropckOutlives<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     dropped_ty: Ty<'tcx>,\n }\n \n impl<'tcx> DropckOutlives<'tcx> {\n-    crate fn new(param_env: ParamEnv<'tcx>, dropped_ty: Ty<'tcx>) -> Self {\n+    pub fn new(param_env: ParamEnv<'tcx>, dropped_ty: Ty<'tcx>) -> Self {\n         DropckOutlives {\n             param_env,\n             dropped_ty,", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/outlives.rs"}, {"sha": "d729ce1e0ebd7a5693368b3ed62493584156cd9d", "filename": "src/librustc/traits/query/type_op/predicates.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fpredicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fpredicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fpredicates.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::{InferCtxt, InferOk, InferResult};\n-use rustc::traits::{Obligation, ObligationCause, PredicateObligation};\n-use rustc::ty::{ParamEnv, Predicate, TyCtxt};\n+use infer::{InferCtxt, InferOk, InferResult};\n+use traits::{Obligation, ObligationCause, PredicateObligation};\n+use ty::{ParamEnv, Predicate, TyCtxt};\n \n #[derive(Debug)]\n-crate struct ProvePredicates<'tcx> {\n+pub struct ProvePredicates<'tcx> {\n     obligations: Vec<PredicateObligation<'tcx>>,\n }\n \n impl<'tcx> ProvePredicates<'tcx> {\n-    crate fn new(\n+    pub fn new(\n         param_env: ParamEnv<'tcx>,\n         predicates: impl IntoIterator<Item = Predicate<'tcx>>,\n     ) -> Self {", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/predicates.rs"}, {"sha": "e9adabc8b08713a79d7ec4640d93cf52263270fe", "filename": "src/librustc/traits/query/type_op/subtype.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::infer::{InferCtxt, InferResult};\n-use rustc::traits::ObligationCause;\n-use rustc::ty::{ParamEnv, Ty, TyCtxt};\n+use infer::{InferCtxt, InferResult};\n+use traits::ObligationCause;\n+use ty::{ParamEnv, Ty, TyCtxt};\n \n #[derive(Debug)]\n-crate struct Subtype<'tcx> {\n+pub struct Subtype<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     sub: Ty<'tcx>,\n     sup: Ty<'tcx>,\n }\n \n impl<'tcx> Subtype<'tcx> {\n-    crate fn new(param_env: ParamEnv<'tcx>, sub: Ty<'tcx>, sup: Ty<'tcx>) -> Self {\n+    pub fn new(param_env: ParamEnv<'tcx>, sub: Ty<'tcx>, sup: Ty<'tcx>) -> Self {\n         Self {\n             param_env,\n             sub,", "previous_filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/subtype.rs"}, {"sha": "770a0614811dc32ddcce753f8cc26e1f95c2bf4b", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -18,12 +18,12 @@\n //! contain revealed `impl Trait` values).\n \n use borrow_check::nll::renumber;\n-use borrow_check::nll::type_check::type_op::custom::CustomTypeOp;\n use borrow_check::nll::universal_regions::UniversalRegions;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferOk;\n use rustc::mir::visit::TyContext;\n use rustc::mir::*;\n+use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::subst::Subst;\n use rustc::ty::Ty;"}, {"sha": "b6cdbfa618187f0b468b4075d4fe53f8f14e6138", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n use borrow_check::nll::region_infer::Cause;\n-use borrow_check::nll::type_check::type_op::TypeOp;\n-use borrow_check::nll::type_check::type_op::outlives::DropckOutlives;\n use borrow_check::nll::type_check::AtLocation;\n use dataflow::move_paths::{HasMoveData, MoveData};\n use dataflow::MaybeInitializedPlaces;\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::mir::Local;\n use rustc::mir::{BasicBlock, Location, Mir};\n+use rustc::traits::query::type_op::outlives::DropckOutlives;\n+use rustc::traits::query::type_op::TypeOp;\n use rustc::ty::subst::Kind;\n use rustc::ty::{Ty, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "865ee66cccfde08aab0fa0655510ea88d87748d8", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265552258048b2008975d98de75c7e536bc4f894/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=265552258048b2008975d98de75c7e536bc4f894", "patch": "@@ -27,6 +27,7 @@ use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::*;\n+use rustc::traits::query::type_op;\n use rustc::traits::ObligationCause;\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n@@ -66,7 +67,6 @@ macro_rules! span_mirbug_and_err {\n mod constraint_conversion;\n mod input_output;\n mod liveness;\n-mod type_op;\n \n /// Type checks the given `mir` in the context of the inference\n /// context `infcx`. Returns any region constraints that have yet to\n@@ -776,7 +776,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         locations: Locations,\n     ) -> UnitResult<'tcx> {\n         let param_env = self.param_env;\n-        self.fully_perform_op(locations, type_op::subtype::Subtype::new(param_env, sub, sup))\n+        self.fully_perform_op(\n+            locations,\n+            type_op::subtype::Subtype::new(param_env, sub, sup),\n+        )\n     }\n \n     fn eq_types(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, locations: Locations) -> UnitResult<'tcx> {\n@@ -1623,16 +1626,8 @@ impl MirPass for TypeckMir {\n         }\n         let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt().enter(|infcx| {\n-            let _ = type_check_internal(\n-                &infcx,\n-                def_id,\n-                param_env,\n-                mir,\n-                &[],\n-                None,\n-                None,\n-                &mut |_| (),\n-            );\n+            let _ =\n+                type_check_internal(&infcx, def_id, param_env, mir, &[], None, None, &mut |_| ());\n \n             // For verification purposes, we just ignore the resulting\n             // region constraint sets. Not our problem. =)"}]}