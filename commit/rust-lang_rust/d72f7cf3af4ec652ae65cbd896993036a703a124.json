{"sha": "d72f7cf3af4ec652ae65cbd896993036a703a124", "node_id": "C_kwDOAAsO6NoAKGQ3MmY3Y2YzYWY0ZWM2NTJhZTY1Y2JkODk2OTkzMDM2YTcwM2ExMjQ", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-25T11:10:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-25T11:10:25Z"}, "message": "internal: add => () rule; emphasize `n_items` rule", "tree": {"sha": "4677024e2a348d0bd531a8018861a34179567868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4677024e2a348d0bd531a8018861a34179567868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d72f7cf3af4ec652ae65cbd896993036a703a124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d72f7cf3af4ec652ae65cbd896993036a703a124", "html_url": "https://github.com/rust-lang/rust/commit/d72f7cf3af4ec652ae65cbd896993036a703a124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d72f7cf3af4ec652ae65cbd896993036a703a124/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1567bbb73e48d897a55ec8281ab6191550fd6684", "url": "https://api.github.com/repos/rust-lang/rust/commits/1567bbb73e48d897a55ec8281ab6191550fd6684", "html_url": "https://github.com/rust-lang/rust/commit/1567bbb73e48d897a55ec8281ab6191550fd6684"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "eb4a23a8da334a30ab2b6ce7b1c577310e1969af", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d72f7cf3af4ec652ae65cbd896993036a703a124/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72f7cf3af4ec652ae65cbd896993036a703a124/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=d72f7cf3af4ec652ae65cbd896993036a703a124", "patch": "@@ -439,10 +439,10 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             let eq_check =\n                 make::expr_bin_op(lhs, BinaryOp::CmpOp(CmpOp::Eq { negated: false }), rhs);\n \n-            let mut case_count = 0;\n+            let mut n_cases = 0;\n             let mut arms = vec![];\n             for variant in enum_.variant_list()?.variants() {\n-                case_count += 1;\n+                n_cases += 1;\n                 match variant.field_list() {\n                     // => (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n                     Some(ast::FieldList::RecordFieldList(list)) => {\n@@ -517,7 +517,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n             let expr = match arms.len() {\n                 0 => eq_check,\n                 _ => {\n-                    if case_count > arms.len() {\n+                    if n_cases > arms.len() {\n                         let lhs = make::wildcard_pat().into();\n                         arms.push(make::match_arm(Some(lhs), None, eq_check));\n                     }"}, {"sha": "e11005c5604ed35f9f3f3d021f1e03e9071337a5", "filename": "docs/dev/style.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d72f7cf3af4ec652ae65cbd896993036a703a124/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/d72f7cf3af4ec652ae65cbd896993036a703a124/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=d72f7cf3af4ec652ae65cbd896993036a703a124", "patch": "@@ -849,7 +849,7 @@ Default names:\n \n * `res` -- \"result of the function\" local variable\n * `it` -- I don't really care about the name\n-* `n_foo` -- number of foos\n+* `n_foos` -- number of foos (prefer this to `foo_count`)\n * `foo_idx` -- index of `foo`\n \n Many names in rust-analyzer conflict with keywords.\n@@ -969,6 +969,26 @@ Don't use the `ref` keyword.\n Today, it is redundant.\n Between `ref` and mach ergonomics, the latter is more ergonomic in most cases, and is simpler (does not require a keyword).\n \n+## Empty Match Arms\n+\n+Ues `=> (),` when a match arm is intentionally empty:\n+\n+```rust\n+// GOOD\n+match result {\n+    Ok(_) => (),\n+    Err(err) => error!(\"{}\", err),\n+}\n+\n+// BAD\n+match result {\n+    Ok(_) => {}\n+    Err(err) => error!(\"{}\", err),\n+}\n+```\n+\n+**Rationale:** consistency.\n+\n ## Functional Combinators\n \n Use high order monadic combinators like `map`, `then` when they are a natural choice; don't bend the code to fit into some combinator."}]}