{"sha": "cc013e05b4fca924c735d397f023f7189a0f87a6", "node_id": "C_kwDOAAsO6NoAKGNjMDEzZTA1YjRmY2E5MjRjNzM1ZDM5N2YwMjNmNzE4OWEwZjg3YTY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-02T10:48:56Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-10T08:09:50Z"}, "message": "bound_vars -> infer: don't return lt map", "tree": {"sha": "7235ed9e0f2dea31bc582326ffc17ca816c0e0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7235ed9e0f2dea31bc582326ffc17ca816c0e0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc013e05b4fca924c735d397f023f7189a0f87a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc013e05b4fca924c735d397f023f7189a0f87a6", "html_url": "https://github.com/rust-lang/rust/commit/cc013e05b4fca924c735d397f023f7189a0f87a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc013e05b4fca924c735d397f023f7189a0f87a6/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543ca7d9e79aeb1e54295271f8f1b971995af257", "url": "https://api.github.com/repos/rust-lang/rust/commits/543ca7d9e79aeb1e54295271f8f1b971995af257", "html_url": "https://github.com/rust-lang/rust/commit/543ca7d9e79aeb1e54295271f8f1b971995af257"}], "stats": {"total": 94, "additions": 40, "deletions": 54}, "files": [{"sha": "2259a59e1956cb4a4b3700047bd5765af6b9d637", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -60,13 +60,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     // Replace the bound items in the fn sig with fresh\n                     // variables, so that they represent the view from\n                     // \"inside\" the closure.\n-                    self.infcx\n-                        .replace_bound_vars_with_fresh_vars(\n-                            body.span,\n-                            LateBoundRegionConversionTime::FnCall,\n-                            poly_sig,\n-                        )\n-                        .0\n+                    self.infcx.replace_bound_vars_with_fresh_vars(\n+                        body.span,\n+                        LateBoundRegionConversionTime::FnCall,\n+                        poly_sig,\n+                    )\n                 },\n             );\n         }"}, {"sha": "77b3ccbc4ea1d4104782c25bad1ca422b2938d42", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -38,8 +38,7 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n             // with a fresh region variable. These region variables --\n             // but no other pre-existing region variables -- can name\n             // the placeholders.\n-            let (a_prime, _) =\n-                self.infcx.replace_bound_vars_with_fresh_vars(span, HigherRankedType, a);\n+            let a_prime = self.infcx.replace_bound_vars_with_fresh_vars(span, HigherRankedType, a);\n \n             debug!(\"a_prime={:?}\", a_prime);\n             debug!(\"b_prime={:?}\", b_prime);"}, {"sha": "42bd96acd7c47a593289ab609bdaba34394050f1", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -1524,7 +1524,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         span: Span,\n         lbrct: LateBoundRegionConversionTime,\n         value: ty::Binder<'tcx, T>,\n-    ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+    ) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -1553,8 +1553,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 )\n             })\n         };\n-        let result = self.tcx.replace_bound_vars_uncached(value, fld_r, fld_t, fld_c);\n-        (result, region_map)\n+        self.tcx.replace_bound_vars_uncached(value, fld_r, fld_t, fld_c)\n     }\n \n     /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method."}, {"sha": "2e7067fa71076c4379a2f446aa4472bfa8dcbef6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -1536,7 +1536,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             let bound_predicate = predicate.kind();\n             if let ty::PredicateKind::Projection(data) = bound_predicate.skip_binder() {\n                 let mut selcx = SelectionContext::new(self);\n-                let (data, _) = self.replace_bound_vars_with_fresh_vars(\n+                let data = self.replace_bound_vars_with_fresh_vars(\n                     obligation.cause.span,\n                     infer::LateBoundRegionConversionTime::HigherRankedType,\n                     bound_predicate.rebind(data),"}, {"sha": "7341ab0ab124a01d83cd2df2b119202cdc8c8418", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -1920,7 +1920,7 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n     let cause = &obligation.cause;\n     let param_env = obligation.param_env;\n \n-    let (cache_entry, _) = infcx.replace_bound_vars_with_fresh_vars(\n+    let cache_entry = infcx.replace_bound_vars_with_fresh_vars(\n         cause.span,\n         LateBoundRegionConversionTime::HigherRankedType,\n         poly_cache_entry,"}, {"sha": "cbf29af1c554e0c545baee3191fd29ce43490d54", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -421,14 +421,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let object_trait_ref = data.principal().unwrap_or_else(|| {\n             span_bug!(obligation.cause.span, \"object candidate with no principal\")\n         });\n-        let object_trait_ref = self\n-            .infcx\n-            .replace_bound_vars_with_fresh_vars(\n-                obligation.cause.span,\n-                HigherRankedType,\n-                object_trait_ref,\n-            )\n-            .0;\n+        let object_trait_ref = self.infcx.replace_bound_vars_with_fresh_vars(\n+            obligation.cause.span,\n+            HigherRankedType,\n+            object_trait_ref,\n+        );\n         let object_trait_ref = object_trait_ref.with_self_ty(self.tcx(), self_ty);\n \n         let mut nested = vec![];"}, {"sha": "a484b594418c2ff09c1e021604a69a4918c0456c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -1453,7 +1453,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         potentially_unnormalized_candidates: bool,\n     ) -> ProjectionMatchesProjection {\n         let mut nested_obligations = Vec::new();\n-        let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n+        let infer_predicate = self.infcx.replace_bound_vars_with_fresh_vars(\n             obligation.cause.span,\n             LateBoundRegionConversionTime::HigherRankedType,\n             env_predicate,"}, {"sha": "af1288b6523be2d13d75af322f8574eba0e63e43", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -152,13 +152,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n                 if self.closure_kind(substs).is_none() {\n                     let closure_sig = substs.as_closure().sig();\n-                    let closure_sig = self\n-                        .replace_bound_vars_with_fresh_vars(\n-                            call_expr.span,\n-                            infer::FnCall,\n-                            closure_sig,\n-                        )\n-                        .0;\n+                    let closure_sig = self.replace_bound_vars_with_fresh_vars(\n+                        call_expr.span,\n+                        infer::FnCall,\n+                        closure_sig,\n+                    );\n                     let adjustments = self.adjust_steps(autoderef);\n                     self.record_deferred_call_resolution(\n                         def_id,\n@@ -503,8 +501,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // renormalize the associated types at this point, since they\n         // previously appeared within a `Binder<>` and hence would not\n         // have been normalized before.\n-        let fn_sig =\n-            self.replace_bound_vars_with_fresh_vars(call_expr.span, infer::FnCall, fn_sig).0;\n+        let fn_sig = self.replace_bound_vars_with_fresh_vars(call_expr.span, infer::FnCall, fn_sig);\n         let fn_sig = self.normalize_associated_types_in(call_expr.span, fn_sig);\n \n         // Call the generic checker."}, {"sha": "05b22e174b845510bfcb4616650b827efd41fc6e", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 expected_sigs.liberated_sig.inputs(), // `liberated_sig` is E'.\n             ) {\n                 // Instantiate (this part of..) S to S', i.e., with fresh variables.\n-                let (supplied_ty, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n+                let supplied_ty = self.infcx.replace_bound_vars_with_fresh_vars(\n                     hir_ty.span,\n                     LateBoundRegionConversionTime::FnCall,\n                     supplied_sig.inputs().rebind(supplied_ty),\n@@ -563,7 +563,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 all_obligations.extend(obligations);\n             }\n \n-            let (supplied_output_ty, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n+            let supplied_output_ty = self.infcx.replace_bound_vars_with_fresh_vars(\n                 decl.output.span(),\n                 LateBoundRegionConversionTime::FnCall,\n                 supplied_sig.output(),"}, {"sha": "d4e17f27c92bbedf4cd21d801786e72a8f469d95", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -255,7 +255,7 @@ fn compare_predicate_entailment<'tcx>(\n \n         let mut wf_tys = FxHashSet::default();\n \n-        let (impl_sig, _) = infcx.replace_bound_vars_with_fresh_vars(\n+        let impl_sig = infcx.replace_bound_vars_with_fresh_vars(\n             impl_m_span,\n             infer::HigherRankedType,\n             tcx.fn_sig(impl_m.def_id),"}, {"sha": "48bbd4d76ea5cbe693c80319074d723c82207bc5", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -561,13 +561,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // placeholder lifetimes with probing, we just replace higher lifetimes\n                     // with fresh vars.\n                     let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);\n-                    let input = self\n-                        .replace_bound_vars_with_fresh_vars(\n-                            span,\n-                            infer::LateBoundRegionConversionTime::FnCall,\n-                            fn_sig.input(i),\n-                        )\n-                        .0;\n+                    let input = self.replace_bound_vars_with_fresh_vars(\n+                        span,\n+                        infer::LateBoundRegionConversionTime::FnCall,\n+                        fn_sig.input(i),\n+                    );\n                     self.require_type_is_sized_deferred(\n                         input,\n                         span,\n@@ -581,13 +579,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Also, as we just want to check sizedness, instead of introducing\n             // placeholder lifetimes with probing, we just replace higher lifetimes\n             // with fresh vars.\n-            let output = self\n-                .replace_bound_vars_with_fresh_vars(\n-                    expr.span,\n-                    infer::LateBoundRegionConversionTime::FnCall,\n-                    fn_sig.output(),\n-                )\n-                .0;\n+            let output = self.replace_bound_vars_with_fresh_vars(\n+                expr.span,\n+                infer::LateBoundRegionConversionTime::FnCall,\n+                fn_sig.output(),\n+            );\n             self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n         }\n "}, {"sha": "fa2416d56de14e0bafce365e1c31de77132422f7", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         item_segment: &hir::PathSegment<'_>,\n         poly_trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Ty<'tcx> {\n-        let (trait_ref, _) = self.replace_bound_vars_with_fresh_vars(\n+        let trait_ref = self.replace_bound_vars_with_fresh_vars(\n             span,\n             infer::LateBoundRegionConversionTime::AssocTypeProjection(item_def_id),\n             poly_trait_ref,"}, {"sha": "ca55a4299eb06653598fe96d75e7ca2f25dbc97d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => return false,\n         };\n \n-        let sig = self.replace_bound_vars_with_fresh_vars(expr.span, infer::FnCall, sig).0;\n+        let sig = self.replace_bound_vars_with_fresh_vars(expr.span, infer::FnCall, sig);\n         let sig = self.normalize_associated_types_in(expr.span, sig);\n         if self.can_coerce(sig.output(), expected) {\n             let (mut sugg_call, applicability) = if sig.inputs().is_empty() {"}, {"sha": "2a9a5615ca96301fbfe3183fb89426a584017806", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -574,6 +574,6 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.fcx.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, value).0\n+        self.fcx.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, value)\n     }\n }"}, {"sha": "5ca822183556b3c6fb2f931946a5fe6f830f2ccc", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // may reference those regions.\n         let fn_sig = tcx.bound_fn_sig(def_id);\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n-        let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig).0;\n+        let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig);\n \n         let InferOk { value, obligations: o } = if is_op {\n             self.normalize_op_associated_types_in_as_infer_ok(span, fn_sig, opt_input_expr)"}, {"sha": "87254b211d67b324f66ac9d85de73a932bcbabfc", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc013e05b4fca924c735d397f023f7189a0f87a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=cc013e05b4fca924c735d397f023f7189a0f87a6", "patch": "@@ -905,7 +905,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.probe(|_| {\n                     let substs = self.fresh_substs_for_item(self.span, method.def_id);\n                     let fty = fty.subst(self.tcx, substs);\n-                    let (fty, _) =\n+                    let fty =\n                         self.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, fty);\n \n                     if let Some(self_ty) = self_ty {"}]}