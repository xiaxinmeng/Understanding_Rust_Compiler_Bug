{"sha": "4653a8b3fd69dbab366a8ec67ae9cf68dc128c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NTNhOGIzZmQ2OWRiYWIzNjZhOGVjNjdhZTljZjY4ZGMxMjhjNDM=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-08-27T08:06:54Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-08-27T08:12:48Z"}, "message": "Restore removed code and mark it for usage in stage0\n\nThe old code is temporarily needed in order to keep the MSVC build\nworking. It should be possible to remove this code after the bootstrap\ncompiler is updated to contain the MSVC workaround from #27875.", "tree": {"sha": "085465ca309934fb6a7f524d29f505eea43556c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085465ca309934fb6a7f524d29f505eea43556c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4653a8b3fd69dbab366a8ec67ae9cf68dc128c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4653a8b3fd69dbab366a8ec67ae9cf68dc128c43", "html_url": "https://github.com/rust-lang/rust/commit/4653a8b3fd69dbab366a8ec67ae9cf68dc128c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4653a8b3fd69dbab366a8ec67ae9cf68dc128c43/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "152c76ef0d62b2529b50356773ac6907a6db0f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/152c76ef0d62b2529b50356773ac6907a6db0f6e", "html_url": "https://github.com/rust-lang/rust/commit/152c76ef0d62b2529b50356773ac6907a6db0f6e"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "3fb720ab6c83c17d5cf48ed7494910069e677d44", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4653a8b3fd69dbab366a8ec67ae9cf68dc128c43/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653a8b3fd69dbab366a8ec67ae9cf68dc128c43/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=4653a8b3fd69dbab366a8ec67ae9cf68dc128c43", "patch": "@@ -441,6 +441,7 @@ macro_rules! rem_impl_integer {\n \n rem_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n+#[cfg(not(stage0))]\n macro_rules! rem_impl_float {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -455,8 +456,48 @@ macro_rules! rem_impl_float {\n     )*)\n }\n \n+#[cfg(not(stage0))]\n rem_impl_float! { f32 f64 }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n+impl Rem for f32 {\n+    type Output = f32;\n+\n+    // The builtin f32 rem operator is broken when targeting\n+    // MSVC; see comment in std::f32::floor.\n+    // FIXME: See also #27859.\n+    #[inline]\n+    #[cfg(target_env = \"msvc\")]\n+    fn rem(self, other: f32) -> f32 {\n+        (self as f64).rem(other as f64) as f32\n+    }\n+\n+    #[inline]\n+    #[cfg(not(target_env = \"msvc\"))]\n+    fn rem(self, other: f32) -> f32 {\n+        extern { fn fmodf(a: f32, b: f32) -> f32; }\n+        unsafe { fmodf(self, other) }\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(stage0)]\n+impl Rem for f64 {\n+    type Output = f64;\n+\n+    #[inline]\n+    fn rem(self, other: f64) -> f64 {\n+        extern { fn fmod(a: f64, b: f64) -> f64; }\n+        unsafe { fmod(self, other) }\n+    }\n+}\n+\n+#[cfg(stage0)]\n+forward_ref_binop! { impl Rem, rem for f64, f64 }\n+#[cfg(stage0)]\n+forward_ref_binop! { impl Rem, rem for f32, f32 }\n+\n /// The `Neg` trait is used to specify the functionality of unary `-`.\n ///\n /// # Examples"}]}