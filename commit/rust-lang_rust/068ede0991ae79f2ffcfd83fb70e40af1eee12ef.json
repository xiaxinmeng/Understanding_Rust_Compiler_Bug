{"sha": "068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OGVkZTA5OTFhZTc5ZjJmZmNmZDgzZmI3MGU0MGFmMWVlZTEyZWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-28T11:21:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-28T11:21:33Z"}, "message": "Merge #9693\n\n9693: feat: Add the Hover Range capability which enables showing the type of an expression r=matklad a=alexfertel\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/389\r\n\r\nThis PR extends the `textDocument/hover` method to allow getting the type of an expression. It looks like this:\r\n\r\n![type_of_expression](https://user-images.githubusercontent.com/22298999/126914293-0ce49a92-545d-4005-a59e-9294fa2330d6.gif)\r\n\r\nEdit: One thing I noticed is that when hovering a selection that includes a macro it doesn't work, so maybe this would need a follow-up issue discussing what problem that may have.\r\n\r\n(PS: What a great project! I am learning a lot! \ud83d\ude80)\n\nCo-authored-by: Alexander Gonzalez <alexfertel97@gmail.com>\nCo-authored-by: Alexander Gonz\u00e1lez <alexfertel97@gmail.com>", "tree": {"sha": "41f6352d8afc08beaccb0bfc628d5706911e12dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f6352d8afc08beaccb0bfc628d5706911e12dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhAT29CRBK7hj4Ov3rIwAAP1EIADTgzg1qqJykCG41C/DwUnTW\nXOdB60JR2ERZ0dWKmw7dovNfT/kSUMb6gbWwrx/1ZHkDAP9bFLyHXcHCeMLn2O8O\nOTaMWkwy0kZeu7LE3+FnD6LueU7Dha6Qi5vN/Laaf+n8XkX9mtX+z/e42DHz/cbf\nzmWl1VWLeTzsSdwwtfJEe+ELDdhL+DXwpjpf4uP2zOCTrsTnJuh6v7VoqzlFDIpA\n5IxLLNY1Fyl+M6IJK58xcbr0gNdVySTZ8Q7ByG6eJHltQBvVkKT6HNp7P5/tnc+H\nqA6KIgSpRTeL1IMVSQkwzgoi/lGP3LSjDtmq15ksDkb/5+jdLE/lXIuZX8MpnLw=\n=yLFy\n-----END PGP SIGNATURE-----\n", "payload": "tree 41f6352d8afc08beaccb0bfc628d5706911e12dd\nparent f749e9c546656d0a30de24bde01ac77c30249053\nparent 4d3a0529d58b6afc2e0576a6544aac09c96a9b74\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627471293 +0000\ncommitter GitHub <noreply@github.com> 1627471293 +0000\n\nMerge #9693\n\n9693: feat: Add the Hover Range capability which enables showing the type of an expression r=matklad a=alexfertel\n\nCloses https://github.com/rust-analyzer/rust-analyzer/issues/389\r\n\r\nThis PR extends the `textDocument/hover` method to allow getting the type of an expression. It looks like this:\r\n\r\n![type_of_expression](https://user-images.githubusercontent.com/22298999/126914293-0ce49a92-545d-4005-a59e-9294fa2330d6.gif)\r\n\r\nEdit: One thing I noticed is that when hovering a selection that includes a macro it doesn't work, so maybe this would need a follow-up issue discussing what problem that may have.\r\n\r\n(PS: What a great project! I am learning a lot! \ud83d\ude80)\n\nCo-authored-by: Alexander Gonzalez <alexfertel97@gmail.com>\nCo-authored-by: Alexander Gonz\u00e1lez <alexfertel97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "html_url": "https://github.com/rust-lang/rust/commit/068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f749e9c546656d0a30de24bde01ac77c30249053", "url": "https://api.github.com/repos/rust-lang/rust/commits/f749e9c546656d0a30de24bde01ac77c30249053", "html_url": "https://github.com/rust-lang/rust/commit/f749e9c546656d0a30de24bde01ac77c30249053"}, {"sha": "4d3a0529d58b6afc2e0576a6544aac09c96a9b74", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3a0529d58b6afc2e0576a6544aac09c96a9b74", "html_url": "https://github.com/rust-lang/rust/commit/4d3a0529d58b6afc2e0576a6544aac09c96a9b74"}], "stats": {"total": 336, "additions": 302, "deletions": 34}, "files": [{"sha": "baf71731f49709603c8c9f14c05afafabbcfbad9", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -233,7 +233,7 @@ impl TestDB {\n         events\n             .into_iter()\n             .filter_map(|e| match e.kind {\n-                // This pretty horrible, but `Debug` is the only way to inspect\n+                // This is pretty horrible, but `Debug` is the only way to inspect\n                 // QueryDescriptor at the moment.\n                 salsa::EventKind::WillExecute { database_key } => {\n                     Some(format!(\"{:?}\", database_key.debug(self)))"}, {"sha": "ee6c2fa4f8c67b7e7e88b321e4d908415628d820", "filename": "crates/hir_ty/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftest_db.rs?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -138,7 +138,7 @@ impl TestDB {\n         events\n             .into_iter()\n             .filter_map(|e| match e.kind {\n-                // This pretty horrible, but `Debug` is the only way to inspect\n+                // This is pretty horrible, but `Debug` is the only way to inspect\n                 // QueryDescriptor at the moment.\n                 salsa::EventKind::WillExecute { database_key } => {\n                     Some(format!(\"{:?}\", database_key.debug(self)))"}, {"sha": "a2df3b895f6fd5256b33015f31cf52b42fb9b1e4", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 209, "deletions": 14, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics};\n use ide_db::{\n-    base_db::SourceDatabase,\n+    base_db::{FileRange, SourceDatabase},\n     defs::{Definition, NameClass, NameRefClass},\n     helpers::{\n         generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES},\n@@ -12,8 +12,12 @@ use ide_db::{\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n-    algo, ast, display::fn_as_proc_macro_label, match_ast, AstNode, AstToken, Direction,\n-    SyntaxKind::*, SyntaxToken, T,\n+    algo::{self, find_node_at_range},\n+    ast,\n+    display::fn_as_proc_macro_label,\n+    match_ast, AstNode, AstToken, Direction,\n+    SyntaxKind::*,\n+    SyntaxToken, T,\n };\n \n use crate::{\n@@ -69,17 +73,39 @@ pub struct HoverResult {\n \n // Feature: Hover\n //\n-// Shows additional information, like type of an expression or documentation for definition when \"focusing\" code.\n+// Shows additional information, like the type of an expression or the documentation for a definition when \"focusing\" code.\n // Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.\n //\n // image::https://user-images.githubusercontent.com/48062697/113020658-b5f98b80-917a-11eb-9f88-3dbc27320c95.gif[]\n pub(crate) fn hover(\n     db: &RootDatabase,\n-    position: FilePosition,\n+    range: FileRange,\n     config: &HoverConfig,\n ) -> Option<RangeInfo<HoverResult>> {\n     let sema = hir::Semantics::new(db);\n-    let file = sema.parse(position.file_id).syntax().clone();\n+    let file = sema.parse(range.file_id).syntax().clone();\n+\n+    // This means we're hovering over a range.\n+    if !range.range.is_empty() {\n+        let expr = find_node_at_range::<ast::Expr>(&file, range.range)?;\n+        let ty = sema.type_of_expr(&expr)?;\n+\n+        if ty.is_unknown() {\n+            return None;\n+        }\n+\n+        let mut res = HoverResult::default();\n+\n+        res.markup = if config.markdown() {\n+            Markup::fenced_block(&ty.display(db))\n+        } else {\n+            ty.display(db).to_string().into()\n+        };\n+\n+        return Some(RangeInfo::new(range.range, res));\n+    }\n+\n+    let position = FilePosition { file_id: range.file_id, offset: range.range.start() };\n     let token = pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n         IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,\n         T!['('] | T![')'] => 2,\n@@ -94,8 +120,8 @@ pub(crate) fn hover(\n     let mut range = None;\n     let definition = match_ast! {\n         match node {\n-            // we don't use NameClass::referenced_or_defined here as we do not want to resolve\n-            // field pattern shorthands to their definition\n+            // We don't use NameClass::referenced_or_defined here as we do not want to resolve\n+            // field pattern shorthands to their definition.\n             ast::Name(name) => NameClass::classify(&sema, &name).map(|class| match class {\n                 NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n                 NameClass::PatFieldShorthand { local_def, field_ref: _ } => Definition::Local(local_def),\n@@ -193,6 +219,7 @@ pub(crate) fn hover(\n     } else {\n         ty.display(db).to_string().into()\n     };\n+\n     let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }\n@@ -530,7 +557,8 @@ fn find_std_module(famous_defs: &FamousDefs, name: &str) -> Option<hir::Module>\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n-    use ide_db::base_db::FileLoader;\n+    use ide_db::base_db::{FileLoader, FileRange};\n+    use syntax::TextRange;\n \n     use crate::{fixture, hover::HoverDocFormat, HoverConfig};\n \n@@ -542,7 +570,7 @@ mod tests {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap();\n         assert!(hover.is_none());\n@@ -556,7 +584,7 @@ mod tests {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap()\n             .unwrap();\n@@ -576,7 +604,7 @@ mod tests {\n                     links_in_hover: false,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap()\n             .unwrap();\n@@ -596,7 +624,7 @@ mod tests {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::PlainText),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap()\n             .unwrap();\n@@ -616,13 +644,42 @@ mod tests {\n                     links_in_hover: true,\n                     documentation: Some(HoverDocFormat::Markdown),\n                 },\n-                position,\n+                FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n             )\n             .unwrap()\n             .unwrap();\n         expect.assert_debug_eq(&hover.info.actions)\n     }\n \n+    fn check_hover_range(ra_fixture: &str, expect: Expect) {\n+        let (analysis, range) = fixture::range(ra_fixture);\n+        let hover = analysis\n+            .hover(\n+                &HoverConfig {\n+                    links_in_hover: false,\n+                    documentation: Some(HoverDocFormat::Markdown),\n+                },\n+                range,\n+            )\n+            .unwrap()\n+            .unwrap();\n+        expect.assert_eq(hover.info.markup.as_str())\n+    }\n+\n+    fn check_hover_range_no_results(ra_fixture: &str) {\n+        let (analysis, range) = fixture::range(ra_fixture);\n+        let hover = analysis\n+            .hover(\n+                &HoverConfig {\n+                    links_in_hover: false,\n+                    documentation: Some(HoverDocFormat::Markdown),\n+                },\n+                range,\n+            )\n+            .unwrap();\n+        assert!(hover.is_none());\n+    }\n+\n     #[test]\n     fn hover_shows_type_of_an_expression() {\n         check(\n@@ -3882,4 +3939,142 @@ struct Foo;\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_range_math() {\n+        check_hover_range(\n+            r#\"\n+fn f() { let expr = $01 + 2 * 3$0 }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            i32\n+            ```\"#]],\n+        );\n+\n+        check_hover_range(\n+            r#\"\n+fn f() { let expr = 1 $0+ 2 * $03 }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            i32\n+            ```\"#]],\n+        );\n+\n+        check_hover_range(\n+            r#\"\n+fn f() { let expr = 1 + $02 * 3$0 }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            i32\n+            ```\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_range_arrays() {\n+        check_hover_range(\n+            r#\"\n+fn f() { let expr = $0[1, 2, 3, 4]$0 }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            [i32; 4]\n+            ```\"#]],\n+        );\n+\n+        check_hover_range(\n+            r#\"\n+fn f() { let expr = [1, 2, $03, 4]$0 }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            [i32; 4]\n+            ```\"#]],\n+        );\n+\n+        check_hover_range(\n+            r#\"\n+fn f() { let expr = [1, 2, $03$0, 4] }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            i32\n+            ```\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_range_functions() {\n+        check_hover_range(\n+            r#\"\n+fn f<T>(a: &[T]) { }\n+fn b() { $0f$0(&[1, 2, 3, 4, 5]); }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            fn f<i32>(&[i32])\n+            ```\"#]],\n+        );\n+\n+        check_hover_range(\n+            r#\"\n+fn f<T>(a: &[T]) { }\n+fn b() { f($0&[1, 2, 3, 4, 5]$0); }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            &[i32; 5]\n+            ```\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_range_shows_nothing_when_invalid() {\n+        check_hover_range_no_results(\n+            r#\"\n+fn f<T>(a: &[T]) { }\n+fn b()$0 { f(&[1, 2, 3, 4, 5]); }$0\n+            \"#,\n+        );\n+\n+        check_hover_range_no_results(\n+            r#\"\n+fn f<T>$0(a: &[T]) { }\n+fn b() { f(&[1, 2, 3,$0 4, 5]); }\n+            \"#,\n+        );\n+\n+        check_hover_range_no_results(\n+            r#\"\n+fn $0f() { let expr = [1, 2, 3, 4]$0 }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_range_shows_unit_for_statements() {\n+        check_hover_range(\n+            r#\"\n+fn f<T>(a: &[T]) { }\n+fn b() { $0f(&[1, 2, 3, 4, 5]); }$0\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            ()\n+            ```\"#]],\n+        );\n+\n+        check_hover_range(\n+            r#\"\n+fn f() { let expr$0 = $0[1, 2, 3, 4] }\n+            \"#,\n+            expect![[r#\"\n+            ```rust\n+            ()\n+            ```\"#]],\n+        );\n+    }\n }"}, {"sha": "d717c46057f1480334effae5d370fead06b8e853", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -418,9 +418,9 @@ impl Analysis {\n     pub fn hover(\n         &self,\n         config: &HoverConfig,\n-        position: FilePosition,\n+        range: FileRange,\n     ) -> Cancellable<Option<RangeInfo<HoverResult>>> {\n-        self.with_db(|db| hover::hover(db, position, config))\n+        self.with_db(|db| hover::hover(db, range, config))\n     }\n \n     /// Return URL(s) for the documentation of the symbol under the cursor."}, {"sha": "9469776db8aff169e9093cabf8600a3b1f8d5231", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -118,6 +118,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n             \"ssr\": true,\n             \"onEnter\": true,\n             \"parentModule\": true,\n+            \"hoverRange\": true,\n             \"runnables\": {\n                 \"kinds\": [ \"cargo\" ],\n             },"}, {"sha": "949a77a4e8ead4df757c8beaac912e48151d2d96", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -36,7 +36,10 @@ use crate::{\n     from_proto,\n     global_state::{GlobalState, GlobalStateSnapshot},\n     line_index::LineEndings,\n-    lsp_ext::{self, InlayHint, InlayHintsParams, ViewCrateGraphParams, WorkspaceSymbolParams},\n+    lsp_ext::{\n+        self, InlayHint, InlayHintsParams, PositionOrRange, ViewCrateGraphParams,\n+        WorkspaceSymbolParams,\n+    },\n     lsp_utils::all_edits_are_disjoint,\n     to_proto, LspError, Result,\n };\n@@ -867,15 +870,21 @@ pub(crate) fn handle_signature_help(\n \n pub(crate) fn handle_hover(\n     snap: GlobalStateSnapshot,\n-    params: lsp_types::HoverParams,\n+    params: lsp_ext::HoverParams,\n ) -> Result<Option<lsp_ext::Hover>> {\n     let _p = profile::span(\"handle_hover\");\n-    let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n-    let info = match snap.analysis.hover(&snap.config.hover(), position)? {\n+    let range = match params.position {\n+        PositionOrRange::Position(position) => Range::new(position, position),\n+        PositionOrRange::Range(range) => range,\n+    };\n+\n+    let file_range = from_proto::file_range(&snap, params.text_document, range)?;\n+    let info = match snap.analysis.hover(&snap.config.hover(), file_range)? {\n         None => return Ok(None),\n         Some(info) => info,\n     };\n-    let line_index = snap.file_line_index(position.file_id)?;\n+\n+    let line_index = snap.file_line_index(file_range.file_id)?;\n     let range = to_proto::range(&line_index, info.range);\n     let hover = lsp_ext::Hover {\n         hover: lsp_types::Hover {"}, {"sha": "d697ec44d1554629f79525d7edf628f7ba3de671", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -376,11 +376,28 @@ pub struct SnippetTextEdit {\n pub enum HoverRequest {}\n \n impl Request for HoverRequest {\n-    type Params = lsp_types::HoverParams;\n+    type Params = HoverParams;\n     type Result = Option<Hover>;\n     const METHOD: &'static str = \"textDocument/hover\";\n }\n \n+#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct HoverParams {\n+    pub text_document: TextDocumentIdentifier,\n+    pub position: PositionOrRange,\n+\n+    #[serde(flatten)]\n+    pub work_done_progress_params: WorkDoneProgressParams,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(untagged)]\n+pub enum PositionOrRange {\n+    Position(lsp_types::Position),\n+    Range(lsp_types::Range),\n+}\n+\n #[derive(Debug, PartialEq, Clone, Deserialize, Serialize)]\n pub struct Hover {\n     #[serde(flatten)]"}, {"sha": "91ab01ca4e4618323fe8c104b8f34b20c8aa3eec", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -173,7 +173,7 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n             }\n     }\n \n-    // FIXME: this is horrible inefficient. I bet there's a cool algorithm to diff trees properly.\n+    // FIXME: this is horribly inefficient. I bet there's a cool algorithm to diff trees properly.\n     fn go(diff: &mut TreeDiff, lhs: SyntaxElement, rhs: SyntaxElement) {\n         let (lhs, rhs) = match lhs.as_node().zip(rhs.as_node()) {\n             Some((lhs, rhs)) => (lhs, rhs),"}, {"sha": "e617153a6c7821c982388ac68ff7ae4f3da7da40", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 3b2931972b33198b\n+lsp_ext.rs hash: 5f96a69eb3a5ebc3\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -13,7 +13,7 @@ need to adjust this doc as well and ping this issue:\n This document describes LSP extensions used by rust-analyzer.\n It's a best effort document, when in doubt, consult the source (and send a PR with clarification ;-) ).\n We aim to upstream all non Rust-specific extensions to the protocol, but this is not a top priority.\n-All capabilities are enabled via `experimental` field of `ClientCapabilities` or `ServerCapabilities`.\n+All capabilities are enabled via the `experimental` field of `ClientCapabilities` or `ServerCapabilities`.\n Requests which we hope to upstream live under `experimental/` namespace.\n Requests, which are likely to always remain specific to `rust-analyzer` are under `rust-analyzer/` namespace.\n \n@@ -29,7 +29,7 @@ https://clangd.llvm.org/extensions.html#utf-8-offsets\n \n **Issue:** https://github.com/microsoft/language-server-protocol/issues/567\n \n-The `initializationOptions` filed of the `InitializeParams` of the initialization request should contain `\"rust-analyzer\"` section of the configuration.\n+The `initializationOptions` field of the `InitializeParams` of the initialization request should contain the `\"rust-analyzer\"` section of the configuration.\n \n `rust-analyzer` normally sends a `\"workspace/configuration\"` request with `{ \"items\": [\"rust-analyzer\"] }` payload.\n However, the server can't do this during initialization.\n@@ -81,7 +81,7 @@ At the moment, rust-analyzer guarantees that only a single edit will have `Inser\n \n **Experimental Client Capability:** `{ \"codeActionGroup\": boolean }`\n \n-If this capability is set, `CodeAction` returned from the server contain an additional field, `group`:\n+If this capability is set, `CodeAction`s returned from the server contain an additional field, `group`:\n \n ```typescript\n interface CodeAction {\n@@ -209,7 +209,7 @@ fn main() {\n \n **Experimental Server Capability:** `{ \"onEnter\": boolean }`\n \n-This request is sent from client to server to handle <kbd>Enter</kbd> keypress.\n+This request is sent from client to server to handle the <kbd>Enter</kbd> key press.\n \n **Method:** `experimental/onEnter`\n \n@@ -658,6 +658,33 @@ interface TestInfo {\n }\n ```\n \n+## Hover Range\n+\n+**Issue:** https://github.com/microsoft/language-server-protocol/issues/377\n+\n+**Experimental Server Capability:** { \"hoverRange\": boolean }\n+\n+This request build upon the current `textDocument/hover` to show the type of the expression currently selected.\n+\n+```typescript\n+interface HoverParams extends lc.WorkDoneProgressParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: lc.Range | lc.Position;\n+}\n+```\n+\n+Whenever the client sends a `Range`, it is understood as the current selection and any hover included in the range will show the type of the expression if possible.\n+\n+### Example\n+\n+```rust\n+fn main() {\n+    let expression = $01 + 2 * 3$0;\n+}\n+```\n+\n+Triggering a hover inside the selection above will show a result of `i32`.\n+\n ## Move Item\n \n **Issue:** https://github.com/rust-analyzer/rust-analyzer/issues/6823"}, {"sha": "b18cf4a20a0afee2de78f2b59cb060cf7bad3ae0", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -56,9 +56,15 @@ export function createClient(serverPath: string, workspace: Workspace, extraEnv:\n         traceOutputChannel,\n         middleware: {\n             async provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, _next: lc.ProvideHoverSignature) {\n-                return client.sendRequest(lc.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(\n+                const editor = vscode.window.activeTextEditor;\n+                const positionOrRange = editor?.selection?.contains(position) ? client.code2ProtocolConverter.asRange(editor.selection) : client.code2ProtocolConverter.asPosition(position);\n+                return client.sendRequest(ra.hover, {\n+                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n+                    position: positionOrRange\n+                }, token).then(\n                     (result) => {\n-                        const hover = client.protocol2CodeConverter.asHover(result);\n+                        const hover =\n+                            client.protocol2CodeConverter.asHover(result);\n                         if (hover) {\n                             const actions = (<any>result).actions;\n                             if (actions) {\n@@ -68,9 +74,15 @@ export function createClient(serverPath: string, workspace: Workspace, extraEnv:\n                         return hover;\n                     },\n                     (error) => {\n-                        client.handleFailedRequest(lc.HoverRequest.type, token, error, null);\n+                        client.handleFailedRequest(\n+                            lc.HoverRequest.type,\n+                            token,\n+                            error,\n+                            null\n+                        );\n                         return Promise.resolve(null);\n-                    });\n+                    }\n+                );\n             },\n             // Using custom handling of CodeActions to support action groups and snippet edits.\n             // Note that this means we have to re-implement lazy edit resolving ourselves as well."}, {"sha": "ac632a0156767ac14265c2e2b48479a23ab18b90", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/068ede0991ae79f2ffcfd83fb70e40af1eee12ef/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=068ede0991ae79f2ffcfd83fb70e40af1eee12ef", "patch": "@@ -19,6 +19,13 @@ export const serverStatus = new lc.NotificationType<ServerStatusParams>(\"experim\n \n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n \n+export const hover = new lc.RequestType<HoverParams, lc.Hover | null, void>(\"textDocument/hover\");\n+\n+export interface HoverParams extends lc.WorkDoneProgressParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    position: lc.Range | lc.Position;\n+}\n+\n export interface SyntaxTreeParams {\n     textDocument: lc.TextDocumentIdentifier;\n     range: lc.Range | null;"}]}