{"sha": "175cfbf129866fb8412f79a02ab66ae549a24b10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NWNmYmYxMjk4NjZmYjg0MTJmNzlhMDJhYjY2YWU1NDlhMjRiMTA=", "commit": {"author": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-01T06:45:34Z"}, "committer": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-01T06:45:34Z"}, "message": "Remove the parser snapshot hack.", "tree": {"sha": "8a915593c04f4a98445873f54baa02b7e80f8104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a915593c04f4a98445873f54baa02b7e80f8104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/175cfbf129866fb8412f79a02ab66ae549a24b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/175cfbf129866fb8412f79a02ab66ae549a24b10", "html_url": "https://github.com/rust-lang/rust/commit/175cfbf129866fb8412f79a02ab66ae549a24b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/175cfbf129866fb8412f79a02ab66ae549a24b10/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7285393f30d99e8715015bd1463c77acdc4690", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7285393f30d99e8715015bd1463c77acdc4690", "html_url": "https://github.com/rust-lang/rust/commit/0d7285393f30d99e8715015bd1463c77acdc4690"}], "stats": {"total": 56, "additions": 16, "deletions": 40}, "files": [{"sha": "4758417f4bd6a438c81b422040e3f23b259eaf58", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/175cfbf129866fb8412f79a02ab66ae549a24b10/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175cfbf129866fb8412f79a02ab66ae549a24b10/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=175cfbf129866fb8412f79a02ab66ae549a24b10", "patch": "@@ -3154,47 +3154,23 @@ impl<'a> Parser<'a> {\n         // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n \n         let pat = self.parse_pat()?;\n-        // Save the state of the parser before parsing 'in'.\n-        let parser_snapshot_before_in = self.clone();\n-        match self.expect_keyword(keywords::In) {\n-            Ok(()) => {\n-                let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n-                let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;\n-                attrs.extend(iattrs);\n-\n-                let hi = self.prev_span;\n-                Ok(self.mk_expr(\n-                    span_lo.to(hi),\n-                    ExprKind::ForLoop(pat, expr, loop_block, opt_ident),\n-                    attrs))\n-            }\n-            Err(mut in_err) => {\n-                let parser_snapshot_after_in = self.clone();\n-                // Rewind to before attempting to parse the 'in'.\n-                mem::replace(self, parser_snapshot_before_in);\n-\n-                match self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None) {\n-                    Ok(_) => {\n-                        // Successfully parsed the expr which means that the 'in' keyword is\n-                        // missing, e.g. 'for i 0..2'\n-                        in_err.cancel();\n-                        let in_span = parser_snapshot_after_in.prev_span\n-                            .between(parser_snapshot_after_in.span);\n-                        let mut err = self.sess.span_diagnostic\n-                            .struct_span_err(in_span, \"missing `in` in `for` loop\");\n-                        err.span_label(in_span, \"expected `in` here\");\n-                        err.span_suggestion_short(in_span, \"try adding `in` here\", \" in \".into());\n-                        Err(err)\n-                    }\n-                    Err(mut expr_err) => {\n-                        // Couldn't parse as an expr, return original error and parser state.\n-                        expr_err.cancel();\n-                        mem::replace(self, parser_snapshot_after_in);\n-                        Err(in_err)\n-                    }\n-                }\n-            }\n+        if !self.eat_keyword(keywords::In) {\n+            let in_span = self.prev_span.between(self.span);\n+            let mut err = self.sess.span_diagnostic\n+                .struct_span_err(in_span, \"missing `in` in `for` loop\");\n+            err.span_label(in_span, \"expected `in` here\");\n+            err.span_suggestion_short(in_span, \"try adding `in` here\", \" in \".into());\n+            err.emit();\n         }\n+        let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n+        let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;\n+        attrs.extend(iattrs);\n+\n+        let hi = self.prev_span;\n+        Ok(self.mk_expr(\n+            span_lo.to(hi),\n+            ExprKind::ForLoop(pat, expr, loop_block, opt_ident),\n+            attrs))\n     }\n \n     /// Parse a 'while' or 'while let' expression ('while' token already eaten)"}]}