{"sha": "276463f06416e54d83f1ba628f82b1f014142426", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NjQ2M2YwNjQxNmU1NGQ4M2YxYmE2MjhmODJiMWYwMTQxNDI0MjY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-20T23:20:31Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-25T18:20:02Z"}, "message": "Fix another generics bug with default methods. Closes #7295.", "tree": {"sha": "0443d1a9ba72b21f638cac001ddd6e84f5b9660c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0443d1a9ba72b21f638cac001ddd6e84f5b9660c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276463f06416e54d83f1ba628f82b1f014142426", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276463f06416e54d83f1ba628f82b1f014142426", "html_url": "https://github.com/rust-lang/rust/commit/276463f06416e54d83f1ba628f82b1f014142426", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276463f06416e54d83f1ba628f82b1f014142426/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6515ee6a7f424679e2b53336974a991dd3b71c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6515ee6a7f424679e2b53336974a991dd3b71c8", "html_url": "https://github.com/rust-lang/rust/commit/c6515ee6a7f424679e2b53336974a991dd3b71c8"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "338342f9307d0b3702e16c10ef7c3e5e610a6b87", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/276463f06416e54d83f1ba628f82b1f014142426/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276463f06416e54d83f1ba628f82b1f014142426/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=276463f06416e54d83f1ba628f82b1f014142426", "patch": "@@ -300,13 +300,8 @@ impl<'self> LookupContext<'self> {\n                 ty_self(self_did) => {\n                     // Call is of the form \"self.foo()\" and appears in one\n                     // of a trait's default method implementations.\n-                    let substs = substs {\n-                        self_r: None,\n-                        self_ty: None,\n-                        tps: ~[]\n-                    };\n                     self.push_inherent_candidates_from_self(\n-                        self_ty, self_did, &substs);\n+                        self_ty, self_did);\n                 }\n                 ty_enum(did, _) | ty_struct(did, _) => {\n                     if self.check_traits == CheckTraitsAndInherentMethods {\n@@ -462,12 +457,12 @@ impl<'self> LookupContext<'self> {\n \n     pub fn push_inherent_candidates_from_self(&self,\n                                               self_ty: ty::t,\n-                                              did: def_id,\n-                                              substs: &ty::substs) {\n+                                              did: def_id) {\n         struct MethodInfo {\n             method_ty: @ty::Method,\n             trait_def_id: ast::def_id,\n-            index: uint\n+            index: uint,\n+            trait_ref: @ty::TraitRef\n         }\n \n         let tcx = self.tcx();\n@@ -479,7 +474,8 @@ impl<'self> LookupContext<'self> {\n                 method_info = Some(MethodInfo {\n                     method_ty: methods[i],\n                     index: i,\n-                    trait_def_id: did\n+                    trait_def_id: did,\n+                    trait_ref: ty::lookup_trait_def(tcx, did).trait_ref\n                 });\n             }\n             None => ()\n@@ -494,7 +490,8 @@ impl<'self> LookupContext<'self> {\n                         method_info = Some(MethodInfo {\n                             method_ty: supertrait_methods[i],\n                             index: i,\n-                            trait_def_id: trait_ref.def_id\n+                            trait_def_id: trait_ref.def_id,\n+                            trait_ref: *trait_ref\n                         });\n                         break;\n                     }\n@@ -505,16 +502,14 @@ impl<'self> LookupContext<'self> {\n         match method_info {\n             Some(ref info) => {\n                 // We've found a method -- return it\n-                let rcvr_substs = substs {self_ty: Some(self_ty),\n-                                          ..copy *substs };\n                 let origin = if did == info.trait_def_id {\n                     method_self(info.trait_def_id, info.index)\n                 } else {\n                     method_super(info.trait_def_id, info.index)\n                 };\n                 self.inherent_candidates.push(Candidate {\n                     rcvr_ty: self_ty,\n-                    rcvr_substs: rcvr_substs,\n+                    rcvr_substs: copy info.trait_ref.substs,\n                     method_ty: info.method_ty,\n                     origin: origin\n                 });"}, {"sha": "080a0dbd91a7fd1a97b1682519a7e92854b4e5ee", "filename": "src/test/run-pass/bug-7295.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/276463f06416e54d83f1ba628f82b1f014142426/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276463f06416e54d83f1ba628f82b1f014142426/src%2Ftest%2Frun-pass%2Fbug-7295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7295.rs?ref=276463f06416e54d83f1ba628f82b1f014142426", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(default_methods)];\n+pub trait Foo<T> {\n+    pub fn func1<U>(&self, t: U);\n+\n+    pub fn func2<U>(&self, t: U) {\n+        self.func1(t);\n+    }\n+}\n+\n+pub fn main() {\n+\n+}"}]}