{"sha": "96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZThjMDBlOTViMTk4MGM0MjljNWNmYTRhYWUzM2UzY2M2MGYzYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-08T04:36:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-08T04:36:42Z"}, "message": "auto merge of #12520 : thestinger/rust/cmp, r=brson\n\n* `Ord` inherits from `Eq`\r\n* `TotalOrd` inherits from `TotalEq`\r\n* `TotalOrd` inherits from `Ord`\r\n* `TotalEq` inherits from `Eq`\r\n\r\nThis is a partial implementation of #12517.", "tree": {"sha": "1dcb1676da02712aae8573cf3b1dabd307b92533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dcb1676da02712aae8573cf3b1dabd307b92533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "html_url": "https://github.com/rust-lang/rust/commit/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c90a7f018e19f94d7c32a96bf608fbd3ab56e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c90a7f018e19f94d7c32a96bf608fbd3ab56e12", "html_url": "https://github.com/rust-lang/rust/commit/4c90a7f018e19f94d7c32a96bf608fbd3ab56e12"}, {"sha": "4d7d101a76deea69e9078d9ed6bb93ecca70e52a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7d101a76deea69e9078d9ed6bb93ecca70e52a", "html_url": "https://github.com/rust-lang/rust/commit/4d7d101a76deea69e9078d9ed6bb93ecca70e52a"}], "stats": {"total": 209, "additions": 156, "deletions": 53}, "files": [{"sha": "6411b6bc974356dd5fccdd7c90952e6aae68886e", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -92,6 +92,11 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for BTree<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Eq for BTree<K, V> {\n+    fn eq(&self, other: &BTree<K, V>) -> bool {\n+        self.equals(other)\n+    }\n+}\n \n impl<K: TotalOrd, V: TotalEq> TotalEq for BTree<K, V> {\n     ///Testing equality on BTrees by comparing the root.\n@@ -100,6 +105,12 @@ impl<K: TotalOrd, V: TotalEq> TotalEq for BTree<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Ord for BTree<K, V> {\n+    fn lt(&self, other: &BTree<K, V>) -> bool {\n+        self.cmp(other) == Less\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalOrd for BTree<K, V> {\n     ///Returns an ordering based on the root nodes of each BTree.\n     fn cmp(&self, other: &BTree<K, V>) -> Ordering {\n@@ -191,6 +202,12 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for Node<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Eq for Node<K, V> {\n+    fn eq(&self, other: &Node<K, V>) -> bool {\n+        self.equals(other)\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalEq for Node<K, V> {\n     ///Returns whether two nodes are equal based on the keys of each element.\n     ///Two nodes are equal if all of their keys are the same.\n@@ -215,6 +232,12 @@ impl<K: TotalOrd, V: TotalEq> TotalEq for Node<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Ord for Node<K, V> {\n+    fn lt(&self, other: &Node<K, V>) -> bool {\n+        self.cmp(other) == Less\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalOrd for Node<K, V> {\n     ///Implementation of TotalOrd for Nodes.\n     fn cmp(&self, other: &Node<K, V>) -> Ordering {\n@@ -380,13 +403,25 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for Leaf<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Eq for Leaf<K, V> {\n+    fn eq(&self, other: &Leaf<K, V>) -> bool {\n+        self.equals(other)\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalEq for Leaf<K, V> {\n     ///Implementation of equals function for leaves that compares LeafElts.\n     fn equals(&self, other: &Leaf<K, V>) -> bool {\n         self.elts.equals(&other.elts)\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Ord for Leaf<K, V> {\n+    fn lt(&self, other: &Leaf<K, V>) -> bool {\n+        self.cmp(other) == Less\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalOrd for Leaf<K, V> {\n     ///Returns an ordering based on the first element of each Leaf.\n     fn cmp(&self, other: &Leaf<K, V>) -> Ordering {\n@@ -602,13 +637,25 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for Branch<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Eq for Branch<K, V> {\n+    fn eq(&self, other: &Branch<K, V>) -> bool {\n+        self.equals(other)\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalEq for Branch<K, V> {\n     ///Equals function for Branches--compares all the elements in each branch\n     fn equals(&self, other: &Branch<K, V>) -> bool {\n         self.elts.equals(&other.elts)\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Ord for Branch<K, V> {\n+    fn lt(&self, other: &Branch<K, V>) -> bool {\n+        self.cmp(other) == Less\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalOrd for Branch<K, V> {\n     ///Compares the first elements of two branches to determine an ordering\n     fn cmp(&self, other: &Branch<K, V>) -> Ordering {\n@@ -663,13 +710,25 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for LeafElt<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Eq for LeafElt<K, V> {\n+    fn eq(&self, other: &LeafElt<K, V>) -> bool {\n+        self.equals(other)\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalEq for LeafElt<K, V> {\n     ///TotalEq for LeafElts\n     fn equals(&self, other: &LeafElt<K, V>) -> bool {\n         self.key.equals(&other.key) && self.value.equals(&other.value)\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Ord for LeafElt<K, V> {\n+    fn lt(&self, other: &LeafElt<K, V>) -> bool {\n+        self.cmp(other) == Less\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalOrd for LeafElt<K, V> {\n     ///Returns an ordering based on the keys of the LeafElts.\n     fn cmp(&self, other: &LeafElt<K, V>) -> Ordering {\n@@ -705,13 +764,25 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for BranchElt<K, V> {\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Eq for BranchElt<K, V>{\n+    fn eq(&self, other: &BranchElt<K, V>) -> bool {\n+        self.equals(other)\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalEq for BranchElt<K, V>{\n     ///TotalEq for BranchElts\n     fn equals(&self, other: &BranchElt<K, V>) -> bool {\n         self.key.equals(&other.key)&&self.value.equals(&other.value)\n     }\n }\n \n+impl<K: TotalOrd, V: TotalEq> Ord for BranchElt<K, V> {\n+    fn lt(&self, other: &BranchElt<K, V>) -> bool {\n+        self.cmp(other) == Less\n+    }\n+}\n+\n impl<K: TotalOrd, V: TotalEq> TotalOrd for BranchElt<K, V> {\n     ///Fulfills TotalOrd for BranchElts\n     fn cmp(&self, other: &BranchElt<K, V>) -> Ordering {"}, {"sha": "9193d31931067da76c6aa4c480c1e1e3577b6d7d", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -607,7 +607,7 @@ impl<A: Eq> Eq for DList<A> {\n     }\n }\n \n-impl<A: Eq + Ord> Ord for DList<A> {\n+impl<A: Ord> Ord for DList<A> {\n     fn lt(&self, other: &DList<A>) -> bool {\n         iter::order::lt(self.iter(), other.iter())\n     }"}, {"sha": "0d6273172428326792633ff2d16e0d0aab86d6d2", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -88,7 +88,7 @@ use std::io::{File, MemWriter};\n *\n */\n \n-#[deriving(Clone, Eq, Encodable, Decodable, TotalOrd, TotalEq)]\n+#[deriving(Clone, Eq, Encodable, Decodable, Ord, TotalOrd, TotalEq)]\n struct WorkKey {\n     kind: ~str,\n     name: ~str"}, {"sha": "1bf2046c0331228db45fda6c67b26d22834f2ccc", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -46,7 +46,7 @@ use syntax::attr::AttrMetaMethods;\n use syntax::crateid::CrateId;\n use syntax::parse::token;\n \n-#[deriving(Clone, Eq, TotalOrd, TotalEq)]\n+#[deriving(Clone, Eq, Ord, TotalOrd, TotalEq)]\n pub enum OutputType {\n     OutputTypeBitcode,\n     OutputTypeAssembly,"}, {"sha": "10ec54d0dce0fbe2a6985f6c9a95e7f3db30f292", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -166,7 +166,7 @@ pub enum EntryFnType {\n     EntryNone,\n }\n \n-#[deriving(Eq, Clone, TotalOrd, TotalEq)]\n+#[deriving(Eq, Ord, Clone, TotalOrd, TotalEq)]\n pub enum CrateType {\n     CrateTypeExecutable,\n     CrateTypeDylib,"}, {"sha": "877c8a6d592cd26f535c62fd28c243e1b886b97d", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -525,7 +525,7 @@ pub fn lit_to_const(lit: &Lit) -> const_val {\n     }\n }\n \n-fn compare_vals<T : Eq + Ord>(a: T, b: T) -> Option<int> {\n+fn compare_vals<T: Ord>(a: T, b: T) -> Option<int> {\n     Some(if a == b { 0 } else if a < b { -1 } else { 1 })\n }\n pub fn compare_const_vals(a: &const_val, b: &const_val) -> Option<int> {"}, {"sha": "c364e099009fc5bd9cb9b0ce579e9f6b0890abbd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -633,13 +633,13 @@ impl Region {\n     }\n }\n \n-#[deriving(Clone, Eq, TotalOrd, TotalEq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Hash, Encodable, Decodable, Show)]\n pub struct FreeRegion {\n     scope_id: NodeId,\n     bound_region: BoundRegion\n }\n \n-#[deriving(Clone, Eq, TotalEq, TotalOrd, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Hash, Encodable, Decodable, Show)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(uint),"}, {"sha": "6975c9da3f08ba150b105ae549c579cd26826955", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -42,8 +42,12 @@ pub trait Eq {\n }\n \n /// Trait for equality comparisons where `a == b` and `a != b` are strict inverses.\n-pub trait TotalEq {\n-    fn equals(&self, other: &Self) -> bool;\n+pub trait TotalEq: Eq {\n+    /// This method must return the same value as `eq`. It exists to prevent\n+    /// deriving `TotalEq` from fields not implementing the `TotalEq` trait.\n+    fn equals(&self, other: &Self) -> bool {\n+        self.eq(other)\n+    }\n }\n \n macro_rules! totaleq_impl(\n@@ -76,7 +80,7 @@ totaleq_impl!(char)\n pub enum Ordering { Less = -1, Equal = 0, Greater = 1 }\n \n /// Trait for types that form a total order\n-pub trait TotalOrd: TotalEq {\n+pub trait TotalOrd: TotalEq + Ord {\n     fn cmp(&self, other: &Self) -> Ordering;\n }\n \n@@ -161,16 +165,14 @@ pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n * (cf. IEEE 754-2008 section 5.11).\n */\n #[lang=\"ord\"]\n-pub trait Ord {\n+pub trait Ord: Eq {\n     fn lt(&self, other: &Self) -> bool;\n     #[inline]\n     fn le(&self, other: &Self) -> bool { !other.lt(self) }\n     #[inline]\n     fn gt(&self, other: &Self) -> bool {  other.lt(self) }\n     #[inline]\n     fn ge(&self, other: &Self) -> bool { !self.lt(other) }\n-\n-    // FIXME (#12068): Add min/max/clamp default methods\n }\n \n /// The equivalence relation. Two values may be equivalent even if they are"}, {"sha": "6bf3cdf52abaccc7458a1bca276c786f99e222c5", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -2033,7 +2033,7 @@ pub fn range_inclusive<A: Add<A, A> + Ord + Clone + One + ToPrimitive>(start: A,\n     RangeInclusive{range: range(start, stop), done: false}\n }\n \n-impl<A: Add<A, A> + Eq + Ord + Clone + ToPrimitive> Iterator<A> for RangeInclusive<A> {\n+impl<A: Add<A, A> + Ord + Clone + ToPrimitive> Iterator<A> for RangeInclusive<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         match self.range.next() {\n@@ -2244,7 +2244,7 @@ pub mod order {\n     }\n \n     /// Return `a` < `b` lexicographically (Using partial order, `Ord`)\n-    pub fn lt<A: Eq + Ord, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n+    pub fn lt<A: Ord, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n         loop {\n             match (a.next(), b.next()) {\n                 (None, None) => return false,\n@@ -2256,7 +2256,7 @@ pub mod order {\n     }\n \n     /// Return `a` <= `b` lexicographically (Using partial order, `Ord`)\n-    pub fn le<A: Eq + Ord, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n+    pub fn le<A: Ord, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n         loop {\n             match (a.next(), b.next()) {\n                 (None, None) => return true,\n@@ -2268,7 +2268,7 @@ pub mod order {\n     }\n \n     /// Return `a` > `b` lexicographically (Using partial order, `Ord`)\n-    pub fn gt<A: Eq + Ord, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n+    pub fn gt<A: Ord, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n         loop {\n             match (a.next(), b.next()) {\n                 (None, None) => return false,\n@@ -2280,7 +2280,7 @@ pub mod order {\n     }\n \n     /// Return `a` >= `b` lexicographically (Using partial order, `Ord`)\n-    pub fn ge<A: Eq + Ord, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n+    pub fn ge<A: Ord, T: Iterator<A>>(mut a: T, mut b: T) -> bool {\n         loop {\n             match (a.next(), b.next()) {\n                 (None, None) => return true,\n@@ -2978,6 +2978,12 @@ mod tests {\n             }\n         }\n \n+        impl Eq for Foo {\n+            fn eq(&self, _: &Foo) -> bool {\n+                true\n+            }\n+        }\n+\n         impl Ord for Foo {\n             fn lt(&self, _: &Foo) -> bool {\n                 false"}, {"sha": "7997c5747b40ea79782cda69f9b4c5731cfbf328", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -40,7 +40,7 @@\n use any::Any;\n use clone::Clone;\n use clone::DeepClone;\n-use cmp::{Eq, TotalEq, TotalOrd};\n+use cmp::{Eq, TotalOrd};\n use default::Default;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n use kinds::Send;"}, {"sha": "69bf5f5d0fcda31c6000fbe31c1a7b9eca509415", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -682,7 +682,7 @@ pub mod traits {\n         fn cmp(&self, other: &~[T]) -> Ordering { self.as_slice().cmp(&other.as_slice()) }\n     }\n \n-    impl<'a, T: Eq + Ord> Ord for &'a [T] {\n+    impl<'a, T: Ord> Ord for &'a [T] {\n         fn lt(&self, other: & &'a [T]) -> bool {\n             order::lt(self.iter(), other.iter())\n         }\n@@ -700,7 +700,7 @@ pub mod traits {\n         }\n     }\n \n-    impl<T: Eq + Ord> Ord for ~[T] {\n+    impl<T: Ord> Ord for ~[T] {\n         #[inline]\n         fn lt(&self, other: &~[T]) -> bool { self.as_slice() < other.as_slice() }\n         #[inline]"}, {"sha": "ae918bfa98b324a1a5a410cd84224e02c6dd0340", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,7 +13,7 @@\n \n use cast::{forget, transmute};\n use clone::Clone;\n-use cmp::{Eq, Ordering, TotalEq, TotalOrd};\n+use cmp::{Ord, Eq, Ordering, TotalEq, TotalOrd};\n use container::Container;\n use default::Default;\n use fmt;\n@@ -136,21 +136,28 @@ impl<T> Extendable<T> for Vec<T> {\n     }\n }\n \n-impl<T:Eq> Eq for Vec<T> {\n+impl<T: Eq> Eq for Vec<T> {\n     #[inline]\n     fn eq(&self, other: &Vec<T>) -> bool {\n         self.as_slice() == other.as_slice()\n     }\n }\n \n-impl<T:TotalEq> TotalEq for Vec<T> {\n+impl<T: Ord> Ord for Vec<T> {\n+    #[inline]\n+    fn lt(&self, other: &Vec<T>) -> bool {\n+        self.as_slice() < other.as_slice()\n+    }\n+}\n+\n+impl<T: TotalEq> TotalEq for Vec<T> {\n     #[inline]\n     fn equals(&self, other: &Vec<T>) -> bool {\n         self.as_slice().equals(&other.as_slice())\n     }\n }\n \n-impl<T:TotalOrd> TotalOrd for Vec<T> {\n+impl<T: TotalOrd> TotalOrd for Vec<T> {\n     #[inline]\n     fn cmp(&self, other: &Vec<T>) -> Ordering {\n         self.as_slice().cmp(&other.as_slice())"}, {"sha": "0a95999351757366d5f95b4378934108765ff939", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -39,7 +39,7 @@ pub fn P<T: 'static>(value: T) -> P<T> {\n // table) and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros\n // That Work Together\"\n-#[deriving(Clone, Hash, TotalEq, TotalOrd, Show)]\n+#[deriving(Clone, Hash, Ord, TotalEq, TotalOrd, Show)]\n pub struct Ident {\n     name: Name,\n     ctxt: SyntaxContext\n@@ -151,7 +151,7 @@ pub type CrateNum = u32;\n \n pub type NodeId = u32;\n \n-#[deriving(Clone, TotalEq, TotalOrd, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, TotalEq, TotalOrd, Ord, Eq, Encodable, Decodable, Hash, Show)]\n pub struct DefId {\n     krate: CrateNum,\n     node: NodeId,"}, {"sha": "2ddea19b4c9dfb5b6ae837f2bc9f203fbab631fe", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -26,7 +26,7 @@ static OCCURRENCES: [&'static str, ..5] = [\n \n // Code implementation\n \n-#[deriving(Eq, TotalOrd, TotalEq)]\n+#[deriving(Eq, Ord, TotalOrd, TotalEq)]\n struct Code(u64);\n \n impl Code {"}, {"sha": "319ba14c31c962fa859bfdf2ca633e9514a42822", "filename": "src/test/compile-fail/deriving-span-Ord-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-\n+#[deriving(Eq)]\n struct Error;\n \n-#[deriving(Ord)]\n+#[deriving(Eq, Ord)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "0067546d1aa0aec532099403c98971bf84319983", "filename": "src/test/compile-fail/deriving-span-Ord-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-\n+#[deriving(Eq)]\n struct Error;\n \n-#[deriving(Ord)]\n+#[deriving(Eq, Ord)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "a64f51f142dec30f693d28405c9b87bb06e22e02", "filename": "src/test/compile-fail/deriving-span-Ord-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-\n+#[deriving(Eq)]\n struct Error;\n \n-#[deriving(Ord)]\n+#[deriving(Eq, Ord)]\n struct Struct {\n     x: Error //~ ERROR\n //~^ ERROR"}, {"sha": "d289a4269329292a579b0db7c567a316d74221c8", "filename": "src/test/compile-fail/deriving-span-Ord-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-\n+#[deriving(Eq)]\n struct Error;\n \n-#[deriving(Ord)]\n+#[deriving(Eq, Ord)]\n struct Struct(\n     Error //~ ERROR\n //~^ ERROR"}, {"sha": "7fc030bdb36f62d0f7418793238d5a0e5f34c3e7", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-\n+#[deriving(Eq)]\n struct Error;\n \n-#[deriving(TotalEq)]\n+#[deriving(Eq, TotalEq)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "166311e030b1e5cf51fffd0fa1eee4a38a442ec0", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-\n+#[deriving(Eq)]\n struct Error;\n \n-#[deriving(TotalEq)]\n+#[deriving(Eq, TotalEq)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "f96c41a3865c12c700594992fdd9b7174347f466", "filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-\n+#[deriving(Eq)]\n struct Error;\n \n-#[deriving(TotalEq)]\n+#[deriving(Eq, TotalEq)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "4b825adb8cfab35a0bf5797fbee3a984f30a3011", "filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-\n+#[deriving(Eq)]\n struct Error;\n \n-#[deriving(TotalEq)]\n+#[deriving(Eq, TotalEq)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "7be90a2aa769db8e87b0bc4d20243c366dbaf7a4", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-#[deriving(TotalEq)]\n+#[deriving(Eq, Ord, TotalEq)]\n struct Error;\n \n-#[deriving(TotalOrd,TotalEq)]\n+#[deriving(Eq, Ord, TotalOrd,TotalEq)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "ba97b28d18c70c041a01a84c39a5aefc731b7c49", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-#[deriving(TotalEq)]\n+#[deriving(Eq, Ord, TotalEq)]\n struct Error;\n \n-#[deriving(TotalOrd,TotalEq)]\n+#[deriving(Eq, Ord, TotalOrd,TotalEq)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "014a5b97e36502054b5bbfadc9d3afd3b4590057", "filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-#[deriving(TotalEq)]\n+#[deriving(Eq, Ord, TotalEq)]\n struct Error;\n \n-#[deriving(TotalOrd,TotalEq)]\n+#[deriving(Eq, Ord, TotalOrd,TotalEq)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "7e4d5b2201b3bb2aece65db6ecc4772e14bd8f3c", "filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -13,10 +13,10 @@\n #[feature(struct_variant)];\n extern crate extra;\n \n-#[deriving(TotalEq)]\n+#[deriving(Eq, Ord, TotalEq)]\n struct Error;\n \n-#[deriving(TotalOrd,TotalEq)]\n+#[deriving(Eq, Ord, TotalOrd,TotalEq)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "e79a5871e70c6aa0c1858fa0864542b518b43e51", "filename": "src/test/compile-fail/issue-3344.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[deriving(Eq)]\n struct thing(uint);\n impl Ord for thing { //~ ERROR not all trait methods implemented, missing: `lt`\n     fn le(&self, other: &thing) -> bool { true }"}, {"sha": "2ab6a70839f0ef634af27f44d39c061a7495079d", "filename": "src/test/run-pass/cmp-default.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcmp-default.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -22,6 +22,14 @@ impl Eq for Fool {\n \n struct Int(int);\n \n+impl Eq for Int {\n+    fn eq(&self, other: &Int) -> bool {\n+        let Int(this) = *self;\n+        let Int(other) = *other;\n+        this == other\n+    }\n+}\n+\n impl Ord for Int {\n     fn lt(&self, other: &Int) -> bool {\n         let Int(this) = *self;\n@@ -32,6 +40,14 @@ impl Ord for Int {\n \n struct RevInt(int);\n \n+impl Eq for RevInt {\n+    fn eq(&self, other: &RevInt) -> bool {\n+        let RevInt(this) = *self;\n+        let RevInt(other) = *other;\n+        this == other\n+    }\n+}\n+\n impl Ord for RevInt {\n     fn lt(&self, other: &RevInt) -> bool {\n         let RevInt(this) = *self;"}, {"sha": "2c4a8aece194d52631ad59f72b723b430aa21fb8", "filename": "src/test/run-pass/vector-sort-failure-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-failure-safe.rs?ref=96e8c00e95b1980c429c5cfa4aae33e3cc60f3c5", "patch": "@@ -15,7 +15,7 @@ static MAX_LEN: uint = 20;\n static mut drop_counts: [uint, .. MAX_LEN] = [0, .. MAX_LEN];\n static mut clone_count: uint = 0;\n \n-#[deriving(Rand, Ord, TotalEq, TotalOrd)]\n+#[deriving(Rand, Eq, Ord, TotalEq, TotalOrd)]\n struct DropCounter { x: uint, clone_num: uint }\n \n impl Clone for DropCounter {"}]}