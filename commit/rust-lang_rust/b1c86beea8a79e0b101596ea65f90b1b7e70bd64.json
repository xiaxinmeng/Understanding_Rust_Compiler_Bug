{"sha": "b1c86beea8a79e0b101596ea65f90b1b7e70bd64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYzg2YmVlYThhNzllMGIxMDE1OTZlYTY1ZjkwYjFiN2U3MGJkNjQ=", "commit": {"author": {"name": "Or Brostovski", "email": "tohava@gmail.com", "date": "2010-08-07T10:36:35Z"}, "committer": {"name": "Or Brostovski", "email": "tohava@gmail.com", "date": "2010-08-07T10:44:44Z"}, "message": "Added AST pretty printing for communication alt statement, closes issue 19.", "tree": {"sha": "5c8c455d06aa4e8f7d755e82cc8c8a32efe82503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8c455d06aa4e8f7d755e82cc8c8a32efe82503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1c86beea8a79e0b101596ea65f90b1b7e70bd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c86beea8a79e0b101596ea65f90b1b7e70bd64", "html_url": "https://github.com/rust-lang/rust/commit/b1c86beea8a79e0b101596ea65f90b1b7e70bd64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1c86beea8a79e0b101596ea65f90b1b7e70bd64/comments", "author": {"login": "tohava", "id": 329651, "node_id": "MDQ6VXNlcjMyOTY1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/329651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tohava", "html_url": "https://github.com/tohava", "followers_url": "https://api.github.com/users/tohava/followers", "following_url": "https://api.github.com/users/tohava/following{/other_user}", "gists_url": "https://api.github.com/users/tohava/gists{/gist_id}", "starred_url": "https://api.github.com/users/tohava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tohava/subscriptions", "organizations_url": "https://api.github.com/users/tohava/orgs", "repos_url": "https://api.github.com/users/tohava/repos", "events_url": "https://api.github.com/users/tohava/events{/privacy}", "received_events_url": "https://api.github.com/users/tohava/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tohava", "id": 329651, "node_id": "MDQ6VXNlcjMyOTY1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/329651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tohava", "html_url": "https://github.com/tohava", "followers_url": "https://api.github.com/users/tohava/followers", "following_url": "https://api.github.com/users/tohava/following{/other_user}", "gists_url": "https://api.github.com/users/tohava/gists{/gist_id}", "starred_url": "https://api.github.com/users/tohava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tohava/subscriptions", "organizations_url": "https://api.github.com/users/tohava/orgs", "repos_url": "https://api.github.com/users/tohava/repos", "events_url": "https://api.github.com/users/tohava/events{/privacy}", "received_events_url": "https://api.github.com/users/tohava/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d38caf9c38b15bbf110893e73df6d92b1457d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d38caf9c38b15bbf110893e73df6d92b1457d5c", "html_url": "https://github.com/rust-lang/rust/commit/7d38caf9c38b15bbf110893e73df6d92b1457d5c"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "6cd1114aaa27fdbf2e9910445870d58532cdc9ad", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b1c86beea8a79e0b101596ea65f90b1b7e70bd64/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b1c86beea8a79e0b101596ea65f90b1b7e70bd64/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=b1c86beea8a79e0b101596ea65f90b1b7e70bd64", "patch": "@@ -260,8 +260,8 @@ and stmt_alt_type =\n and stmt_alt_port =\n     {\n       (* else lval is a timeout value. *)\n-      alt_port_arms: (lval * lval) array;\n-      alt_port_else: (lval * block) option;\n+      alt_port_arms: port_arm array;\n+      alt_port_else: (atom * block) option;\n     }\n \n and block' = stmt array\n@@ -325,6 +325,13 @@ and tag_arm = tag_arm' identified\n and type_arm' = ident * slot * block\n and type_arm = type_arm' identified\n \n+and port_arm' = port_case * block\n+and port_arm = port_arm' identified\n+\n+and port_case = \n+    PORT_CASE_send of (lval * lval)\n+  | PORT_CASE_recv of (lval * lval)\n+\n and atom =\n     ATOM_literal of (lit identified)\n   | ATOM_lval of lval\n@@ -495,7 +502,6 @@ let sane_name (n:name) : bool =\n \n (***********************************************************************)\n \n-(* FIXME (issue #19): finish all parts with ?foo? as their output. *)\n \n let fmt_ident (ff:Format.formatter) (i:ident) : unit =\n   fmt ff  \"%s\" i\n@@ -1246,7 +1252,25 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n                   fmt_cbb ff;\n           end;\n           fmt_cbb ff;\n-      | STMT_alt_port _ -> fmt ff \"?stmt_alt_port?\"\n+      | STMT_alt_port at -> \n+          fmt_obox ff;\n+          fmt ff \"alt \";\n+          fmt_obr ff;\n+          Array.iter (fmt_port_arm ff) at.alt_port_arms;\n+          begin\n+            match at.alt_port_else with\n+                None -> ()\n+              | Some (timeout, block) ->\n+                  fmt ff \"@\\n\";\n+                  fmt_obox ff;\n+                  fmt ff \"case (_) \";\n+                  fmt_atom ff timeout;\n+                  fmt ff \" \";\n+                  fmt_obr ff;\n+                  fmt_stmts ff block.node;\n+                  fmt_cbb ff;\n+          end;\n+          fmt_cbb ff;\n       | STMT_note at -> \n           begin\n             fmt ff \"note \";\n@@ -1284,6 +1308,16 @@ and fmt_type_arm (ff:Format.formatter) (type_arm:type_arm) : unit =\n   let (_, slot, block) = type_arm.node in\n     fmt_arm ff (fun ff -> fmt_slot ff slot) block;\n       \n+and fmt_port_arm (ff:Format.formatter) (port_arm:port_arm) : unit =\n+  let (port_case, block) = port_arm.node in\n+    fmt_arm ff (fun ff -> fmt_port_case ff port_case) block;\n+\n+and fmt_port_case (ff:Format.formatter) (port_case:port_case) : unit =\n+  let stmt' = match port_case with\n+      PORT_CASE_send params -> STMT_send params\n+    | PORT_CASE_recv params -> STMT_recv params in\n+    fmt_stmt ff {node = stmt'; id = Node 0};\n+    \n \n and fmt_pat (ff:Format.formatter) (pat:pat) : unit =\n   match pat with"}]}