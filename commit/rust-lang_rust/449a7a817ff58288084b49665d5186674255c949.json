{"sha": "449a7a817ff58288084b49665d5186674255c949", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OWE3YTgxN2ZmNTgyODgwODRiNDk2NjVkNTE4NjY3NDI1NWM5NDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-02-01T00:50:45Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:50Z"}, "message": "libextra: Remove `@str` from all the libraries", "tree": {"sha": "bd0a10962ba69af13a8c797bb08c152f4ed642d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0a10962ba69af13a8c797bb08c152f4ed642d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/449a7a817ff58288084b49665d5186674255c949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/449a7a817ff58288084b49665d5186674255c949", "html_url": "https://github.com/rust-lang/rust/commit/449a7a817ff58288084b49665d5186674255c949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/449a7a817ff58288084b49665d5186674255c949/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbcf800d5bd0ec46cb3637a4bb1183d84594843", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbcf800d5bd0ec46cb3637a4bb1183d84594843", "html_url": "https://github.com/rust-lang/rust/commit/4dbcf800d5bd0ec46cb3637a4bb1183d84594843"}], "stats": {"total": 181, "additions": 12, "deletions": 169}, "files": [{"sha": "fa2737ce75f8704e5450675133f05bb69b278124", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -310,18 +310,6 @@ impl<D:Decoder> Decodable<D> for ~str {\n     }\n }\n \n-impl<S:Encoder> Encodable<S> for @str {\n-    fn encode(&self, s: &mut S) {\n-        s.emit_str(*self)\n-    }\n-}\n-\n-impl<D:Decoder> Decodable<D> for @str {\n-    fn decode(d: &mut D) -> @str {\n-        d.read_str().to_managed()\n-    }\n-}\n-\n impl<S:Encoder> Encodable<S> for f32 {\n     fn encode(&self, s: &mut S) {\n         s.emit_f32(*self)"}, {"sha": "6a3c74482d35c978f8d388c9a722d3044be9a5d6", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -338,7 +338,6 @@ mod test {\n         assert_eq!(to_managed::<int>([]), @[]);\n         assert_eq!(to_managed([true]), @[true]);\n         assert_eq!(to_managed([1, 2, 3, 4, 5]), @[1, 2, 3, 4, 5]);\n-        assert_eq!(to_managed([@\"abc\", @\"123\"]), @[@\"abc\", @\"123\"]);\n         assert_eq!(to_managed([@[42]]), @[@[42]]);\n     }\n "}, {"sha": "13e6d808095841806e0eb103875e1a81dd3f3750", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -1167,7 +1167,6 @@ delegate!(  u8 to Unsigned)\n delegate!( u16 to Unsigned)\n delegate!( u32 to Unsigned)\n delegate!( u64 to Unsigned)\n-delegate!(@str to String)\n delegate!(~str to String)\n delegate!(&'a str to String)\n delegate!(bool to Bool)"}, {"sha": "2282f97a716fbcb6f91da68b03ff9021989dc838", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -604,19 +604,6 @@ impl BytesContainer for ~str {\n     fn is_str(_: Option<~str>) -> bool { true }\n }\n \n-impl BytesContainer for @str {\n-    #[inline]\n-    fn container_as_bytes<'a>(&'a self) -> &'a [u8] {\n-        self.as_bytes()\n-    }\n-    #[inline]\n-    fn container_as_str<'a>(&'a self) -> Option<&'a str> {\n-        Some(self.as_slice())\n-    }\n-    #[inline]\n-    fn is_str(_: Option<@str>) -> bool { true }\n-}\n-\n impl<'a> BytesContainer for &'a [u8] {\n     #[inline]\n     fn container_as_bytes<'a>(&'a self) -> &'a [u8] {"}, {"sha": "b6506b517864bcdc37201f50a35a8ba5d96bd3a6", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -830,7 +830,6 @@ mod tests {\n         t!(s: \"a/b/c\", [\"d\", \"/e\"], \"/e\");\n         t!(s: \"a/b/c\", [\"d\", \"/e\", \"f\"], \"/e/f\");\n         t!(s: \"a/b/c\", [~\"d\", ~\"e\"], \"a/b/c/d/e\");\n-        t!(s: \"a/b/c\", [@\"d\", @\"e\"], \"a/b/c/d/e\");\n         t!(v: b!(\"a/b/c\"), [b!(\"d\"), b!(\"e\")], b!(\"a/b/c/d/e\"));\n         t!(v: b!(\"a/b/c\"), [b!(\"d\"), b!(\"/e\"), b!(\"f\")], b!(\"/e/f\"));\n         t!(v: b!(\"a/b/c\"), [b!(\"d\").to_owned(), b!(\"e\").to_owned()], b!(\"a/b/c/d/e\"));\n@@ -940,7 +939,6 @@ mod tests {\n         t!(s: \"a/b/c\", [\"..\", \"d\"], \"a/b/d\");\n         t!(s: \"a/b/c\", [\"d\", \"/e\", \"f\"], \"/e/f\");\n         t!(s: \"a/b/c\", [~\"d\", ~\"e\"], \"a/b/c/d/e\");\n-        t!(s: \"a/b/c\", [@\"d\", @\"e\"], \"a/b/c/d/e\");\n         t!(v: b!(\"a/b/c\"), [b!(\"d\"), b!(\"e\")], b!(\"a/b/c/d/e\"));\n         t!(v: b!(\"a/b/c\"), [b!(\"d\").to_owned(), b!(\"e\").to_owned()], b!(\"a/b/c/d/e\"));\n         t!(v: b!(\"a/b/c\"), [to_man(b!(\"d\").to_owned()), to_man(b!(\"e\").to_owned())],"}, {"sha": "2578acaf41cd554a7937bbe3424d01956a8e7f7f", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -1610,7 +1610,6 @@ mod tests {\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\"], \"\\\\e\");\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\", \"f\"], \"\\\\e\\\\f\");\n         t!(s: \"a\\\\b\\\\c\", [~\"d\", ~\"e\"], \"a\\\\b\\\\c\\\\d\\\\e\");\n-        t!(s: \"a\\\\b\\\\c\", [@\"d\", @\"e\"], \"a\\\\b\\\\c\\\\d\\\\e\");\n         t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\"), b!(\"e\")], b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n         t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\"), b!(\"\\\\e\"), b!(\"f\")], b!(\"\\\\e\\\\f\"));\n         t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\").to_owned(), b!(\"e\").to_owned()], b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n@@ -1755,7 +1754,6 @@ mod tests {\n         t!(s: \"a\\\\b\\\\c\", [\"..\", \"d\"], \"a\\\\b\\\\d\");\n         t!(s: \"a\\\\b\\\\c\", [\"d\", \"\\\\e\", \"f\"], \"\\\\e\\\\f\");\n         t!(s: \"a\\\\b\\\\c\", [~\"d\", ~\"e\"], \"a\\\\b\\\\c\\\\d\\\\e\");\n-        t!(s: \"a\\\\b\\\\c\", [@\"d\", @\"e\"], \"a\\\\b\\\\c\\\\d\\\\e\");\n         t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\"), b!(\"e\")], b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n         t!(v: b!(\"a\\\\b\\\\c\"), [b!(\"d\").to_owned(), b!(\"e\").to_owned()], b!(\"a\\\\b\\\\c\\\\d\\\\e\"));\n         t!(v: b!(\"a\\\\b\\\\c\"), [to_man(b!(\"d\").to_owned()), to_man(b!(\"e\").to_owned())],"}, {"sha": "d0b0f0c264d05f13f3d694e68cc436d1339acf19", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -183,9 +183,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_estr_box(&mut self) -> bool {\n-        self.align_to::<@str>();\n-        if ! self.inner.visit_estr_box() { return false; }\n-        self.bump_past::<@str>();\n         true\n     }\n "}, {"sha": "8ecb3395542fdb9268723f65841d72986cebe403", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -272,10 +272,7 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n     }\n \n     fn visit_estr_box(&mut self) -> bool {\n-        self.get::<@str>(|this, s| {\n-            this.writer.write(['@' as u8]);\n-            this.write_escaped_slice(*s);\n-        })\n+        true\n     }\n \n     fn visit_estr_uniq(&mut self) -> bool {\n@@ -628,7 +625,6 @@ fn test_repr() {\n     exact_test(&false, \"false\");\n     exact_test(&1.234, \"1.234f64\");\n     exact_test(&(&\"hello\"), \"\\\"hello\\\"\");\n-    exact_test(&(@\"hello\"), \"@\\\"hello\\\"\");\n     exact_test(&(~\"he\\u10f3llo\"), \"~\\\"he\\\\u10f3llo\\\"\");\n \n     exact_test(&(@10), \"@10\");"}, {"sha": "b075b75b70acce849634e1f7895e2974a316ee55", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -185,15 +185,13 @@ mod tests {\n         assert_eq!(s.len(), 5);\n         assert_eq!(s.as_slice(), \"abcde\");\n         assert_eq!(s.to_str(), ~\"abcde\");\n-        assert!(s.equiv(&@\"abcde\"));\n         assert!(s.lt(&SendStrOwned(~\"bcdef\")));\n         assert_eq!(SendStrStatic(\"\"), Default::default());\n \n         let o = SendStrOwned(~\"abcde\");\n         assert_eq!(o.len(), 5);\n         assert_eq!(o.as_slice(), \"abcde\");\n         assert_eq!(o.to_str(), ~\"abcde\");\n-        assert!(o.equiv(&@\"abcde\"));\n         assert!(o.lt(&SendStrStatic(\"bcdef\")));\n         assert_eq!(SendStrOwned(~\"\"), Default::default());\n "}, {"sha": "5d5beb3609e8508cac37c641783abf50b990cb82", "filename": "src/libstd/str.rs", "status": "modified", "additions": 11, "deletions": 119, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -17,46 +17,35 @@ Unicode string manipulation (`str` type)\n Rust's string type is one of the core primitive types of the language. While\n represented by the name `str`, the name `str` is not actually a valid type in\n Rust. Each string must also be decorated with its ownership. This means that\n-there are three common kinds of strings in rust:\n+there are two common kinds of strings in rust:\n \n * `~str` - This is an owned string. This type obeys all of the normal semantics\n            of the `~T` types, meaning that it has one, and only one, owner. This\n            type cannot be implicitly copied, and is moved out of when passed to\n            other functions.\n \n-* `@str` - This is a managed string. Similarly to `@T`, this type can be\n-           implicitly copied, and each implicit copy will increment the\n-           reference count to the string. This means that there is no \"true\n-           owner\" of the string, and the string will be deallocated when the\n-           reference count reaches 0.\n-\n-* `&str` - Finally, this is the borrowed string type. This type of string can\n-           only be created from one of the other two kinds of strings. As the\n-           name \"borrowed\" implies, this type of string is owned elsewhere, and\n-           this string cannot be moved out of.\n+* `&str` - This is the borrowed string type. This type of string can only be\n+           created from the other kind of string. As the name \"borrowed\"\n+           implies, this type of string is owned elsewhere, and this string\n+           cannot be moved out of.\n \n As an example, here's a few different kinds of strings.\n \n ```rust\n-#[feature(managed_boxes)];\n-\n fn main() {\n     let owned_string = ~\"I am an owned string\";\n-    let managed_string = @\"This string is garbage-collected\";\n     let borrowed_string1 = \"This string is borrowed with the 'static lifetime\";\n     let borrowed_string2: &str = owned_string;   // owned strings can be borrowed\n-    let borrowed_string3: &str = managed_string; // managed strings can also be borrowed\n }\n  ```\n \n-From the example above, you can see that rust has 3 different kinds of string\n-literals. The owned/managed literals correspond to the owned/managed string\n-types, but the \"borrowed literal\" is actually more akin to C's concept of a\n-static string.\n+From the example above, you can see that rust has 2 different kinds of string\n+literals. The owned literals correspond to the owned string types, but the\n+\"borrowed literal\" is actually more akin to C's concept of a static string.\n \n-When a string is declared without a `~` or `@` sigil, then the string is\n-allocated statically in the rodata of the executable/library. The string then\n-has the type `&'static str` meaning that the string is valid for the `'static`\n+When a string is declared without a `~` sigil, then the string is allocated\n+statically in the rodata of the executable/library. The string then has the\n+type `&'static str` meaning that the string is valid for the `'static`\n lifetime, otherwise known as the lifetime of the entire program. As can be\n inferred from the type, these static strings are not mutable.\n \n@@ -89,11 +78,9 @@ The actual representation of strings have direct mappings to vectors:\n \n * `~str` is the same as `~[u8]`\n * `&str` is the same as `&[u8]`\n-* `@str` is the same as `@[u8]`\n \n */\n \n-use at_vec;\n use cast;\n use cast::transmute;\n use char;\n@@ -157,16 +144,6 @@ impl<'a> ToStr for &'a str {\n     fn to_str(&self) -> ~str { self.to_owned() }\n }\n \n-impl ToStr for @str {\n-    #[inline]\n-    fn to_str(&self) -> ~str { self.to_owned() }\n-}\n-\n-impl<'a> FromStr for @str {\n-    #[inline]\n-    fn from_str(s: &str) -> Option<@str> { Some(s.to_managed()) }\n-}\n-\n /// Convert a byte to a UTF-8 string\n ///\n /// # Failure\n@@ -1140,11 +1117,6 @@ pub mod traits {\n         fn cmp(&self, other: &~str) -> Ordering { self.as_slice().cmp(&other.as_slice()) }\n     }\n \n-    impl TotalOrd for @str {\n-        #[inline]\n-        fn cmp(&self, other: &@str) -> Ordering { self.as_slice().cmp(&other.as_slice()) }\n-    }\n-\n     impl<'a> Eq for &'a str {\n         #[inline]\n         fn eq(&self, other: & &'a str) -> bool {\n@@ -1161,13 +1133,6 @@ pub mod traits {\n         }\n     }\n \n-    impl Eq for @str {\n-        #[inline]\n-        fn eq(&self, other: &@str) -> bool {\n-            eq_slice((*self), (*other))\n-        }\n-    }\n-\n     impl<'a> TotalEq for &'a str {\n         #[inline]\n         fn equals(&self, other: & &'a str) -> bool {\n@@ -1182,13 +1147,6 @@ pub mod traits {\n         }\n     }\n \n-    impl TotalEq for @str {\n-        #[inline]\n-        fn equals(&self, other: &@str) -> bool {\n-            eq_slice((*self), (*other))\n-        }\n-    }\n-\n     impl<'a> Ord for &'a str {\n         #[inline]\n         fn lt(&self, other: & &'a str) -> bool { self.cmp(other) == Less }\n@@ -1199,21 +1157,11 @@ pub mod traits {\n         fn lt(&self, other: &~str) -> bool { self.cmp(other) == Less }\n     }\n \n-    impl Ord for @str {\n-        #[inline]\n-        fn lt(&self, other: &@str) -> bool { self.cmp(other) == Less }\n-    }\n-\n     impl<'a, S: Str> Equiv<S> for &'a str {\n         #[inline]\n         fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n     }\n \n-    impl<'a, S: Str> Equiv<S> for @str {\n-        #[inline]\n-        fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n-    }\n-\n     impl<'a, S: Str> Equiv<S> for ~str {\n         #[inline]\n         fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n@@ -1250,16 +1198,6 @@ impl<'a> Str for ~str {\n     fn into_owned(self) -> ~str { self }\n }\n \n-impl<'a> Str for @str {\n-    #[inline]\n-    fn as_slice<'a>(&'a self) -> &'a str {\n-        let s: &'a str = *self; s\n-    }\n-\n-    #[inline]\n-    fn into_owned(self) -> ~str { self.to_owned() }\n-}\n-\n impl<'a> Container for &'a str {\n     #[inline]\n     fn len(&self) -> uint {\n@@ -1272,11 +1210,6 @@ impl Container for ~str {\n     fn len(&self) -> uint { self.as_slice().len() }\n }\n \n-impl Container for @str {\n-    #[inline]\n-    fn len(&self) -> uint { self.as_slice().len() }\n-}\n-\n impl Mutable for ~str {\n     /// Remove all content, make the string empty\n     #[inline]\n@@ -1734,9 +1667,6 @@ pub trait StrSlice<'a> {\n     /// Copy a slice into a new owned str.\n     fn to_owned(&self) -> ~str;\n \n-    /// Copy a slice into a new managed str.\n-    fn to_managed(&self) -> @str;\n-\n     /// Converts to a vector of `u16` encoded as UTF-16.\n     fn to_utf16(&self) -> ~[u16];\n \n@@ -2246,14 +2176,6 @@ impl<'a> StrSlice<'a> for &'a str {\n         }\n     }\n \n-    #[inline]\n-    fn to_managed(&self) -> @str {\n-        unsafe {\n-            let v: *&[u8] = cast::transmute(self);\n-            cast::transmute(at_vec::to_managed(*v))\n-        }\n-    }\n-\n     fn to_utf16(&self) -> ~[u16] {\n         let mut u = ~[];\n         for ch in self.chars() {\n@@ -2682,20 +2604,6 @@ impl DeepClone for ~str {\n     }\n }\n \n-impl Clone for @str {\n-    #[inline]\n-    fn clone(&self) -> @str {\n-        *self\n-    }\n-}\n-\n-impl DeepClone for @str {\n-    #[inline]\n-    fn deep_clone(&self) -> @str {\n-        *self\n-    }\n-}\n-\n impl FromIterator<char> for ~str {\n     #[inline]\n     fn from_iterator<T: Iterator<char>>(iterator: &mut T) -> ~str {\n@@ -2727,10 +2635,6 @@ impl Default for ~str {\n     fn default() -> ~str { ~\"\" }\n }\n \n-impl Default for @str {\n-    fn default() -> @str { @\"\" }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use iter::AdditiveIterator;\n@@ -3536,12 +3440,6 @@ mod tests {\n         assert_eq!(\"\\U0001d4ea\\r\".escape_default(), ~\"\\\\U0001d4ea\\\\r\");\n     }\n \n-    #[test]\n-    fn test_to_managed() {\n-        assert_eq!(\"abc\".to_managed(), @\"abc\");\n-        assert_eq!(\"abcdef\".slice(1, 5).to_managed(), @\"bcde\");\n-    }\n-\n     #[test]\n     fn test_total_ord() {\n         \"1234\".cmp(& &\"123\") == Greater;\n@@ -3584,10 +3482,8 @@ mod tests {\n         );\n \n         t!(\"foo\",  \"bar\", \"foobar\");\n-        t!(\"foo\", @\"bar\", \"foobar\");\n         t!(\"foo\", ~\"bar\", \"foobar\");\n         t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\",  \"\u534eVi\u1ec7t Nam\", \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n-        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\", @\"\u534eVi\u1ec7t Nam\", \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n         t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"\u534eVi\u1ec7t Nam\", \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n     }\n \n@@ -3874,7 +3770,6 @@ mod tests {\n         }\n \n         t::<&str>();\n-        t::<@str>();\n         t::<~str>();\n     }\n \n@@ -3886,7 +3781,6 @@ mod tests {\n \n         let s = ~\"01234\";\n         assert_eq!(5, sum_len([\"012\", \"\", \"34\"]));\n-        assert_eq!(5, sum_len([@\"01\", @\"2\", @\"34\", @\"\"]));\n         assert_eq!(5, sum_len([~\"01\", ~\"2\", ~\"34\", ~\"\"]));\n         assert_eq!(5, sum_len([s.as_slice()]));\n     }\n@@ -3957,8 +3851,6 @@ mod tests {\n     fn test_from_str() {\n       let owned: Option<~str> = from_str(&\"string\");\n       assert_eq!(owned, Some(~\"string\"));\n-      let managed: Option<@str> = from_str(&\"string\");\n-      assert_eq!(managed, Some(@\"string\"));\n     }\n }\n "}, {"sha": "7ca1590dad07f0fa10e590dca45f94ca7a980397", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -288,13 +288,6 @@ impl IterBytes for ~str {\n     }\n }\n \n-impl IterBytes for @str {\n-    #[inline]\n-    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n-        self.as_slice().iter_bytes(lsb0, f)\n-    }\n-}\n-\n impl<A:IterBytes> IterBytes for Option<A> {\n     #[inline]\n     fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {"}, {"sha": "edbf33144177257fe710e35ff92e99c18b2e378f", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -195,7 +195,6 @@ mod tests {\n         assert_eq!(false.to_str(), ~\"false\");\n         assert_eq!(().to_str(), ~\"()\");\n         assert_eq!((~\"hi\").to_str(), ~\"hi\");\n-        assert_eq!((@\"hi\").to_str(), ~\"hi\");\n     }\n \n     #[test]"}, {"sha": "c568edd09d1dadf3a977ff35001e88fe298a209f", "filename": "src/libstd/unstable/raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Funstable%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/449a7a817ff58288084b49665d5186674255c949/src%2Flibstd%2Funstable%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fraw.rs?ref=449a7a817ff58288084b49665d5186674255c949", "patch": "@@ -59,7 +59,6 @@ impl<T> Repr<*Box<T>> for @T {}\n impl<T> Repr<*Box<Vec<T>>> for @[T] {}\n impl<T> Repr<*Vec<T>> for ~[T] {}\n impl Repr<*String> for ~str {}\n-impl Repr<*Box<String>> for @str {}\n \n // sure would be nice to have this\n // impl<T> Repr<*Vec<T>> for ~[T] {}"}]}