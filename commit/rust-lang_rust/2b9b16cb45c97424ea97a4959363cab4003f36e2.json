{"sha": "2b9b16cb45c97424ea97a4959363cab4003f36e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOWIxNmNiNDVjOTc0MjRlYTk3YTQ5NTkzNjNjYWI0MDAzZjM2ZTI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-09T22:30:00Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T15:18:41Z"}, "message": "Add method tests", "tree": {"sha": "ae03ad13f9d051c7ab7ef1cd5db860ca3de271eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae03ad13f9d051c7ab7ef1cd5db860ca3de271eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b9b16cb45c97424ea97a4959363cab4003f36e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9b16cb45c97424ea97a4959363cab4003f36e2", "html_url": "https://github.com/rust-lang/rust/commit/2b9b16cb45c97424ea97a4959363cab4003f36e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b9b16cb45c97424ea97a4959363cab4003f36e2/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ab3e80ca258a3db21bf263225c52d9995a2ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ab3e80ca258a3db21bf263225c52d9995a2ea0", "html_url": "https://github.com/rust-lang/rust/commit/24ab3e80ca258a3db21bf263225c52d9995a2ea0"}], "stats": {"total": 119, "additions": 116, "deletions": 3}, "files": [{"sha": "27d96b941fb4f2a225aed45865330d2fcfda806c", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 116, "deletions": 3, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/2b9b16cb45c97424ea97a4959363cab4003f36e2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9b16cb45c97424ea97a4959363cab4003f36e2/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=2b9b16cb45c97424ea97a4959363cab4003f36e2", "patch": "@@ -46,9 +46,9 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n \n     let name_ref_to_import =\n         path_under_caret.syntax().descendants().find_map(ast::NameRef::cast)?;\n-    if dbg!(source_analyzer\n-        .resolve_path(ctx.db, &name_ref_to_import.syntax().ancestors().find_map(ast::Path::cast)?))\n-    .is_some()\n+    if source_analyzer\n+        .resolve_path(ctx.db, &name_ref_to_import.syntax().ancestors().find_map(ast::Path::cast)?)\n+        .is_some()\n     {\n         return None;\n     }\n@@ -307,4 +307,117 @@ mod tests {\n             \",\n         );\n     }\n+\n+    #[test]\n+    fn associated_struct_function() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+            mod test_mod {\n+                pub struct TestStruct {}\n+                impl TestStruct {\n+                    pub fn test_function() {}\n+                }\n+            }\n+\n+            fn main() {\n+                TestStruct::test_function<|>\n+            }\n+            \",\n+            r\"\n+            use test_mod::TestStruct;\n+\n+            mod test_mod {\n+                pub struct TestStruct {}\n+                impl TestStruct {\n+                    pub fn test_function() {}\n+                }\n+            }\n+\n+            fn main() {\n+                TestStruct::test_function<|>\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn associated_trait_function() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+            mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_function();\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_function() {}\n+                }\n+            }\n+\n+            fn main() {\n+                test_mod::TestStruct::test_function<|>\n+            }\n+            \",\n+            r\"\n+            use test_mod::TestTrait;\n+\n+            mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_function();\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_function() {}\n+                }\n+            }\n+\n+            fn main() {\n+                test_mod::TestStruct::test_function<|>\n+            }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn trait_method() {\n+        check_assist(\n+            auto_import,\n+            r\"\n+            mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_method(&self);\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_method(&self) {}\n+                }\n+            }\n+\n+            fn main() {\n+                let test_struct = test_mod::TestStruct {};\n+                test_struct.test_method<|>\n+            }\n+            \",\n+            r\"\n+            use test_mod::TestTrait;\n+\n+            mod test_mod {\n+                pub trait TestTrait {\n+                    fn test_method(&self);\n+                }\n+                pub struct TestStruct {}\n+                impl TestTrait for TestStruct {\n+                    fn test_method(&self) {}\n+                }\n+            }\n+\n+            fn main() {\n+                let test_struct = test_mod::TestStruct {};\n+                test_struct.test_method<|>\n+            }\n+            \",\n+        );\n+    }\n }"}]}