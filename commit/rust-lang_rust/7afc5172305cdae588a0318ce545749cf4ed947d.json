{"sha": "7afc5172305cdae588a0318ce545749cf4ed947d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmM1MTcyMzA1Y2RhZTU4OGEwMzE4Y2U1NDU3NDljZjRlZDk0N2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-11T16:24:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-11T16:24:43Z"}, "message": "Auto merge of #78790 - Gankra:rust-src-vendor, r=Mark-Simulacrum\n\nVendor libtest's dependencies in the rust-src component\n\nThis is the Rust side of https://github.com/rust-lang/wg-cargo-std-aware/issues/23\n\nNote that this won't produce a useful result for `cargo -Zbuild-std` if there are multiple versions of a crate vendored, but will otherwise produce a valid vendor dir.\n\nSee https://github.com/rust-lang/cargo/pull/8834 for the other half of this change.", "tree": {"sha": "7da73111a40d761e511c2ad2411b7329f6d089a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7da73111a40d761e511c2ad2411b7329f6d089a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afc5172305cdae588a0318ce545749cf4ed947d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afc5172305cdae588a0318ce545749cf4ed947d", "html_url": "https://github.com/rust-lang/rust/commit/7afc5172305cdae588a0318ce545749cf4ed947d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afc5172305cdae588a0318ce545749cf4ed947d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "html_url": "https://github.com/rust-lang/rust/commit/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f"}, {"sha": "ceba2befb4c0ef9cbd9592c66c61a49a71e7a695", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceba2befb4c0ef9cbd9592c66c61a49a71e7a695", "html_url": "https://github.com/rust-lang/rust/commit/ceba2befb4c0ef9cbd9592c66c61a49a71e7a695"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "5ce5737f318c73f46d2d2ccd5a6455c8b1a9a6f5", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7afc5172305cdae588a0318ce545749cf4ed947d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afc5172305cdae588a0318ce545749cf4ed947d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=7afc5172305cdae588a0318ce545749cf4ed947d", "patch": "@@ -1040,6 +1040,30 @@ impl Step for Src {\n             builder.copy(&builder.src.join(file), &dst_src.join(file));\n         }\n \n+        // libtest includes std and everything else, so vendoring it\n+        // creates exactly what's needed for `cargo -Zbuild-std` or any\n+        // other analysis of the stdlib's source. Cargo also needs help\n+        // finding the lock, so we copy it to libtest temporarily.\n+        //\n+        // Note that this requires std to only have one version of each\n+        // crate. e.g. two versions of getopts won't be patchable.\n+        let dst_libtest = dst_src.join(\"library/test\");\n+        let dst_vendor = dst_src.join(\"vendor\");\n+        let root_lock = dst_src.join(\"Cargo.lock\");\n+        let temp_lock = dst_libtest.join(\"Cargo.lock\");\n+\n+        // `cargo vendor` will delete everything from the lockfile that\n+        // isn't used by libtest, so we need to not use any links!\n+        builder.really_copy(&root_lock, &temp_lock);\n+\n+        let mut cmd = Command::new(&builder.initial_cargo);\n+        cmd.arg(\"vendor\").arg(dst_vendor).current_dir(&dst_libtest);\n+        builder.info(\"Dist src\");\n+        let _time = timeit(builder);\n+        builder.run(&mut cmd);\n+\n+        builder.remove(&temp_lock);\n+\n         // Create source tarball in rust-installer format\n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")\n@@ -1056,8 +1080,6 @@ impl Step for Src {\n             .arg(\"--component-name=rust-src\")\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n-        builder.info(\"Dist src\");\n-        let _time = timeit(builder);\n         builder.run(&mut cmd);\n \n         builder.remove_dir(&image);"}, {"sha": "e7af8b56d563366846e4dec4d160b9078dca750e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7afc5172305cdae588a0318ce545749cf4ed947d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afc5172305cdae588a0318ce545749cf4ed947d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7afc5172305cdae588a0318ce545749cf4ed947d", "patch": "@@ -1171,6 +1171,27 @@ impl Build {\n         paths\n     }\n \n+    /// Copies a file from `src` to `dst` and doesn't use links, so\n+    /// that the copy can be modified without affecting the original.\n+    pub fn really_copy(&self, src: &Path, dst: &Path) {\n+        if self.config.dry_run {\n+            return;\n+        }\n+        self.verbose_than(1, &format!(\"Copy {:?} to {:?}\", src, dst));\n+        if src == dst {\n+            return;\n+        }\n+        let _ = fs::remove_file(&dst);\n+        let metadata = t!(src.symlink_metadata());\n+        if let Err(e) = fs::copy(src, dst) {\n+            panic!(\"failed to copy `{}` to `{}`: {}\", src.display(), dst.display(), e)\n+        }\n+        t!(fs::set_permissions(dst, metadata.permissions()));\n+        let atime = FileTime::from_last_access_time(&metadata);\n+        let mtime = FileTime::from_last_modification_time(&metadata);\n+        t!(filetime::set_file_times(dst, atime, mtime));\n+    }\n+\n     /// Copies a file from `src` to `dst`\n     pub fn copy(&self, src: &Path, dst: &Path) {\n         if self.config.dry_run {"}]}