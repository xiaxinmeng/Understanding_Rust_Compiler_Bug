{"sha": "460ca4f037e4896f103889b694dd2971e3141eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGNhNGYwMzdlNDg5NmYxMDM4ODliNjk0ZGQyOTcxZTMxNDFlYWM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-05T05:59:35Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-12T06:51:49Z"}, "message": "Alpha-rename `.ident` fields of type `Name` to `.name`.", "tree": {"sha": "8aa904155eeb72990bc3331479857315fbea59b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa904155eeb72990bc3331479857315fbea59b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460ca4f037e4896f103889b694dd2971e3141eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460ca4f037e4896f103889b694dd2971e3141eac", "html_url": "https://github.com/rust-lang/rust/commit/460ca4f037e4896f103889b694dd2971e3141eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460ca4f037e4896f103889b694dd2971e3141eac/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da19563dbce08e2a78720010fe458007baa3703a", "url": "https://api.github.com/repos/rust-lang/rust/commits/da19563dbce08e2a78720010fe458007baa3703a", "html_url": "https://github.com/rust-lang/rust/commit/da19563dbce08e2a78720010fe458007baa3703a"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "678e81b7fea7e523cef027905a927ddb535b7fbc", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=460ca4f037e4896f103889b694dd2971e3141eac", "patch": "@@ -273,7 +273,7 @@ fn item_region_param_defs(item_doc: ebml::Doc, cdata: Cmd)\n                                              tag_region_param_def_def_id);\n             let def_id = reader::with_doc_data(def_id_doc, parse_def_id);\n             let def_id = translate_def_id(cdata, def_id);\n-            v.push(ty::RegionParameterDef { ident: ident.name,\n+            v.push(ty::RegionParameterDef { name: ident.name,\n                                             def_id: def_id });\n             true\n         });"}, {"sha": "b6eab7b8a7474495d3780a52615689f684099eb2", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=460ca4f037e4896f103889b694dd2971e3141eac", "patch": "@@ -184,7 +184,7 @@ fn encode_region_param_defs(ebml_w: &mut writer::Encoder,\n         ebml_w.start_tag(tag_region_param_def);\n \n         ebml_w.start_tag(tag_region_param_def_ident);\n-        encode_name(ebml_w, param.ident);\n+        encode_name(ebml_w, param.name);\n         ebml_w.end_tag();\n \n         ebml_w.wr_tagged_str(tag_region_param_def_def_id,"}, {"sha": "590487f20d09a4cea772f4b79ec614ab93ae7f0c", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=460ca4f037e4896f103889b694dd2971e3141eac", "patch": "@@ -176,11 +176,11 @@ fn enc_region(w: &mut MemWriter, cx: @ctxt, r: ty::Region) {\n             enc_bound_region(w, cx, br);\n             mywrite!(w, \"]\");\n         }\n-        ty::ReEarlyBound(node_id, index, ident) => {\n+        ty::ReEarlyBound(node_id, index, name) => {\n             mywrite!(w, \"B[{}|{}|{}]\",\n                      node_id,\n                      index,\n-                     token::get_name(ident));\n+                     token::get_name(name));\n         }\n         ty::ReFree(ref fr) => {\n             mywrite!(w, \"f[{}|\", fr.scope_id);\n@@ -208,10 +208,10 @@ fn enc_bound_region(w: &mut MemWriter, cx: @ctxt, br: ty::BoundRegion) {\n         ty::BrAnon(idx) => {\n             mywrite!(w, \"a{}|\", idx);\n         }\n-        ty::BrNamed(d, s) => {\n+        ty::BrNamed(d, name) => {\n             mywrite!(w, \"[{}|{}]\",\n                      (cx.ds)(d),\n-                     token::get_name(s));\n+                     token::get_name(name));\n         }\n         ty::BrFresh(id) => {\n             mywrite!(w, \"f{}|\", id);"}, {"sha": "5129d7a8b684a36028dcbee4c5257c2d1888ad6a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=460ca4f037e4896f103889b694dd2971e3141eac", "patch": "@@ -996,7 +996,7 @@ pub struct TypeParameterDef {\n \n #[deriving(Encodable, Decodable, Clone)]\n pub struct RegionParameterDef {\n-    ident: ast::Name,\n+    name: ast::Name,\n     def_id: ast::DefId,\n }\n \n@@ -5107,7 +5107,7 @@ pub fn construct_parameter_environment(\n     let region_params = item_region_params.iter().\n         map(|r| ty::ReFree(ty::FreeRegion {\n                 scope_id: free_id,\n-                bound_region: ty::BrNamed(r.def_id, r.ident)})).\n+                bound_region: ty::BrNamed(r.def_id, r.name)})).\n         collect();\n \n     let free_substs = substs {"}, {"sha": "e0b6fc4597ceec13695622fc4e3e81c397146809", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=460ca4f037e4896f103889b694dd2971e3141eac", "patch": "@@ -901,7 +901,7 @@ fn compare_impl_method(tcx: ty::ctxt,\n         impl_generics.region_param_defs().iter().\n         map(|l| ty::ReFree(ty::FreeRegion {\n                 scope_id: impl_m_body_id,\n-                bound_region: ty::BrNamed(l.def_id, l.ident)})).\n+                bound_region: ty::BrNamed(l.def_id, l.name)})).\n         collect();\n     let dummy_substs = ty::substs {\n         tps: vec_ng::append(dummy_impl_tps, dummy_method_tps.as_slice()),"}, {"sha": "04f37c95b07be95b50862ad1ed686814f0800be5", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=460ca4f037e4896f103889b694dd2971e3141eac", "patch": "@@ -315,7 +315,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         let rps_from_trait =\n             trait_ty_generics.region_param_defs().iter().\n             enumerate().\n-            map(|(index,d)| ty::ReEarlyBound(d.def_id.node, index, d.ident)).\n+            map(|(index,d)| ty::ReEarlyBound(d.def_id.node, index, d.name)).\n             collect();\n \n         // build up the substitution from\n@@ -966,7 +966,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                    base_index: uint) -> ty::Generics {\n     return ty::Generics {\n         region_param_defs: Rc::new(generics.lifetimes.iter().map(|l| {\n-                ty::RegionParameterDef { ident: l.ident,\n+                ty::RegionParameterDef { name: l.ident,\n                                          def_id: local_def(l.id) }\n             }).collect()),\n         type_param_defs: Rc::new(generics.ty_params.mapi_to_vec(|offset, param| {\n@@ -1095,7 +1095,7 @@ pub fn mk_item_substs(ccx: &CrateCtxt,\n \n     let regions: OptVec<ty::Region> =\n         ty_generics.region_param_defs().iter().enumerate().map(\n-            |(i, l)| ty::ReEarlyBound(l.def_id.node, i, l.ident)).collect();\n+            |(i, l)| ty::ReEarlyBound(l.def_id.node, i, l.name)).collect();\n \n     substs {regions: ty::NonerasedRegions(regions),\n             self_ty: self_ty,"}, {"sha": "078415bc644116e3bb1fe5e12ce25740c31e5922", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=460ca4f037e4896f103889b694dd2971e3141eac", "patch": "@@ -78,5 +78,5 @@ pub fn bound_type_regions(defs: &[ty::RegionParameterDef])\n                           -> OptVec<ty::Region> {\n     assert!(defs.iter().all(|def| def.def_id.krate == ast::LOCAL_CRATE));\n     defs.iter().enumerate().map(\n-        |(i, def)| ty::ReEarlyBound(def.def_id.node, i, def.ident)).collect()\n+        |(i, def)| ty::ReEarlyBound(def.def_id.node, i, def.name)).collect()\n }"}, {"sha": "83877e1710adb76860baa15ce31fcf3145f8f24c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460ca4f037e4896f103889b694dd2971e3141eac/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=460ca4f037e4896f103889b694dd2971e3141eac", "patch": "@@ -634,7 +634,7 @@ impl Repr for ty::TypeParameterDef {\n impl Repr for ty::RegionParameterDef {\n     fn repr(&self, _tcx: ctxt) -> ~str {\n         format!(\"RegionParameterDef({}, {:?})\",\n-                token::get_name(self.ident),\n+                token::get_name(self.name),\n                 self.def_id)\n     }\n }"}]}