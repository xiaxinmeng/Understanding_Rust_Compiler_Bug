{"sha": "825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNWNiNWJkYzkyNWM0ZjI0NjJjNThjOGFhZTVmNzk0MmE1MmEyOWY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-18T10:06:47Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:08:19Z"}, "message": "fix rebase", "tree": {"sha": "9e2424716d790bcde6608cf7cd2bdfcf21e90795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2424716d790bcde6608cf7cd2bdfcf21e90795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "html_url": "https://github.com/rust-lang/rust/commit/825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd9743b4d49bbc9c8d84f419ecf37c93047d7ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9743b4d49bbc9c8d84f419ecf37c93047d7ec3", "html_url": "https://github.com/rust-lang/rust/commit/cd9743b4d49bbc9c8d84f419ecf37c93047d7ec3"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "a1e7f1fa3e5e7df5e3dc573222e5cefd02bedf34", "filename": "src/librustc_infer/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs?ref=825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "patch": "@@ -16,7 +16,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n         .caller_bounds()\n         .into_iter()\n         .map(ty::Predicate::skip_binders)\n-        .filter(TypeFoldable::has_escaping_bound_vars)\n+        .filter(|atom| !atom.has_escaping_bound_vars())\n         .filter_map(move |atom| match atom {\n             ty::PredicateAtom::Projection(..)\n             | ty::PredicateAtom::Trait(..)"}, {"sha": "a45817beea16450b3934a64bfd1dd028f4b55982", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "patch": "@@ -1208,8 +1208,6 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n             let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let predicates = cx.tcx.predicates_of(def_id);\n             for &(predicate, span) in predicates.predicates {\n-                // We don't actually look inside of the predicate,\n-                // so it is safe to skip this binder here.\n                 let predicate_kind_name = match predicate.skip_binders() {\n                     Trait(..) => \"Trait\",\n                     TypeOutlives(..) |"}, {"sha": "3bae1c13143258706dab6bd74e350521c91c9e16", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "patch": "@@ -1377,14 +1377,14 @@ impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n \n impl ToPredicate<'tcx> for PredicateAtom<'tcx> {\n     #[inline(always)]\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         debug_assert!(!self.has_escaping_bound_vars(), \"excaping bound vars for {:?}\", self);\n-        tcx.mk_predicate(ty::PredicateKind::Atom(*self))\n+        tcx.mk_predicate(ty::PredicateKind::Atom(self))\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n-    fn to_predicate(&self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         ty::PredicateAtom::Trait(ty::TraitPredicate { trait_ref: self.value }, self.constness)\n             .to_predicate(tcx)\n     }"}, {"sha": "25564d03e8373edb660edc720b07c295deba1d59", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825cb5bdc925c4f2462c58c8aae5f7942a52a29f/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=825cb5bdc925c4f2462c58c8aae5f7942a52a29f", "patch": "@@ -471,29 +471,31 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                     }\n                 }\n \n-            ty::PredicateAtom::ConstEquate(c1, c2) => {\n-                debug!(\"equating consts: c1={:?} c2={:?}\", c1, c2);\n-\n-                let stalled_on = &mut pending_obligation.stalled_on;\n-\n-                let mut evaluate = |c: &'tcx Const<'tcx>| {\n-                    if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n-                        match self.selcx.infcx().const_eval_resolve(\n-                            obligation.param_env,\n-                            def,\n-                            substs,\n-                            promoted,\n-                            Some(obligation.cause.span),\n-                        ) {\n-                            Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n-                            Err(ErrorHandled::TooGeneric) => {\n-                                stalled_on.append(\n-                                    &mut substs\n-                                        .types()\n-                                        .filter_map(|ty| TyOrConstInferVar::maybe_from_ty(ty))\n-                                        .collect(),\n-                                );\n-                                Err(ErrorHandled::TooGeneric)\n+                ty::PredicateAtom::ConstEquate(c1, c2) => {\n+                    debug!(\"equating consts: c1={:?} c2={:?}\", c1, c2);\n+\n+                    let stalled_on = &mut pending_obligation.stalled_on;\n+\n+                    let mut evaluate = |c: &'tcx Const<'tcx>| {\n+                        if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n+                            match self.selcx.infcx().const_eval_resolve(\n+                                obligation.param_env,\n+                                def,\n+                                substs,\n+                                promoted,\n+                                Some(obligation.cause.span),\n+                            ) {\n+                                Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n+                                Err(ErrorHandled::TooGeneric) => {\n+                                    stalled_on.append(\n+                                        &mut substs\n+                                            .types()\n+                                            .filter_map(|ty| TyOrConstInferVar::maybe_from_ty(ty))\n+                                            .collect(),\n+                                    );\n+                                    Err(ErrorHandled::TooGeneric)\n+                                }\n+                                Err(err) => Err(err),\n                             }\n                         } else {\n                             Ok(c)"}]}