{"sha": "9d19e5b962f77259dd1334b9edb4da4de54f0987", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMTllNWI5NjJmNzcyNTlkZDEzMzRiOWVkYjRkYTRkZTU0ZjA5ODc=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-10-02T18:38:22Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-10-02T18:38:22Z"}, "message": "Properly name the field", "tree": {"sha": "46a6713bc101e450377ec225573635641438da97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a6713bc101e450377ec225573635641438da97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d19e5b962f77259dd1334b9edb4da4de54f0987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d19e5b962f77259dd1334b9edb4da4de54f0987", "html_url": "https://github.com/rust-lang/rust/commit/9d19e5b962f77259dd1334b9edb4da4de54f0987", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d19e5b962f77259dd1334b9edb4da4de54f0987/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99952f3be254394a5c70ce8fb8436d76c779ed71", "url": "https://api.github.com/repos/rust-lang/rust/commits/99952f3be254394a5c70ce8fb8436d76c779ed71", "html_url": "https://github.com/rust-lang/rust/commit/99952f3be254394a5c70ce8fb8436d76c779ed71"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "c330314d44235de6bb994b24392c8ca773a66321", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=9d19e5b962f77259dd1334b9edb4da4de54f0987", "patch": "@@ -127,10 +127,11 @@ impl PartialEq for ProcMacro {\n pub struct CrateData {\n     pub root_file_id: FileId,\n     pub edition: Edition,\n-    /// The name to display to the end user.\n-    /// This actual crate name can be different in a particular dependent crate\n-    /// or may even be missing for some cases, such as a dummy crate for the code snippet.\n-    pub display_name: Option<CrateName>,\n+    /// A name used in the package's project declaration: for Cargo projects, it's [package].name,\n+    /// can be different for other project types or even absent (a dummy crate for the code snippet, for example).\n+    /// NOTE: The crate can be referenced as a dependency under a different name,\n+    /// this one should be used when working with crate hierarchies.\n+    pub declaration_name: Option<CrateName>,\n     pub cfg_options: CfgOptions,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n@@ -159,7 +160,7 @@ impl CrateGraph {\n         &mut self,\n         file_id: FileId,\n         edition: Edition,\n-        display_name: Option<CrateName>,\n+        declaration_name: Option<CrateName>,\n         cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<(SmolStr, Arc<dyn tt::TokenExpander>)>,\n@@ -170,7 +171,7 @@ impl CrateGraph {\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,\n-            display_name,\n+            declaration_name,\n             cfg_options,\n             env,\n             proc_macro,"}, {"sha": "a19b0fad735fb12b266f17f3db272e6eae91a111", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=9d19e5b962f77259dd1334b9edb4da4de54f0987", "patch": "@@ -98,8 +98,8 @@ impl Crate {\n         db.crate_graph()[self.id].edition\n     }\n \n-    pub fn display_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n-        db.crate_graph()[self.id].display_name.clone()\n+    pub fn declaration_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n+        db.crate_graph()[self.id].declaration_name.clone()\n     }\n \n     pub fn query_external_importables("}, {"sha": "44bfe15934aa0dcc3b2d36fc148a3baaa7826c7a", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=9d19e5b962f77259dd1334b9edb4da4de54f0987", "patch": "@@ -334,14 +334,14 @@ mod tests {\n \n     use super::*;\n \n-    fn check_search(ra_fixture: &str, krate_name: &str, query: Query, expect: Expect) {\n+    fn check_search(ra_fixture: &str, crate_name: &str, query: Query, expect: Expect) {\n         let db = TestDB::with_files(ra_fixture);\n         let crate_graph = db.crate_graph();\n         let krate = crate_graph\n             .iter()\n             .find(|krate| {\n-                crate_graph[*krate].display_name.as_ref().map(|n| n.to_string())\n-                    == Some(krate_name.to_string())\n+                crate_graph[*krate].declaration_name.as_ref().map(|n| n.to_string())\n+                    == Some(crate_name.to_string())\n             })\n             .unwrap();\n \n@@ -359,7 +359,7 @@ mod tests {\n                     let path = map.path_of(item).unwrap();\n                     format!(\n                         \"{}::{} ({})\\n\",\n-                        crate_graph[krate].display_name.as_ref().unwrap(),\n+                        crate_graph[krate].declaration_name.as_ref().unwrap(),\n                         path,\n                         mark\n                     )\n@@ -400,7 +400,7 @@ mod tests {\n             .iter()\n             .filter_map(|krate| {\n                 let cdata = &crate_graph[krate];\n-                let name = cdata.display_name.as_ref()?;\n+                let name = cdata.declaration_name.as_ref()?;\n \n                 let map = db.import_map(krate);\n "}, {"sha": "464ffef2120fe54ec0b8acc1c27f80976daef182", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=9d19e5b962f77259dd1334b9edb4da4de54f0987", "patch": "@@ -173,7 +173,7 @@ impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &dyn DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n         let _p = profile::span(\"crate_def_map_query\").detail(|| {\n             db.crate_graph()[krate]\n-                .display_name\n+                .declaration_name\n                 .as_ref()\n                 .map(ToString::to_string)\n                 .unwrap_or_default()"}, {"sha": "4521d72ccea31f5c95df3024d6dc4a3da6bb912e", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=9d19e5b962f77259dd1334b9edb4da4de54f0987", "patch": "@@ -289,7 +289,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n \n fn render_path(db: &RootDatabase, module: Module, item_name: Option<String>) -> String {\n     let crate_name =\n-        db.crate_graph()[module.krate().into()].display_name.as_ref().map(ToString::to_string);\n+        db.crate_graph()[module.krate().into()].declaration_name.as_ref().map(ToString::to_string);\n     let module_path = module\n         .path_to_root(db)\n         .into_iter()"}, {"sha": "c317a2379b4fddcf4036b5e65300a918646efe4b", "filename": "crates/ide/src/link_rewrite.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flink_rewrite.rs?ref=9d19e5b962f77259dd1334b9edb4da4de54f0987", "patch": "@@ -107,7 +107,7 @@ fn rewrite_intra_doc_link(\n     let krate = resolved.module(db)?.krate();\n     let canonical_path = resolved.canonical_path(db)?;\n     let new_target = get_doc_url(db, &krate)?\n-        .join(&format!(\"{}/\", krate.display_name(db)?))\n+        .join(&format!(\"{}/\", krate.declaration_name(db)?))\n         .ok()?\n         .join(&canonical_path.replace(\"::\", \"/\"))\n         .ok()?\n@@ -127,7 +127,7 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n     let module = def.module(db)?;\n     let krate = module.krate();\n     let canonical_path = def.canonical_path(db)?;\n-    let base = format!(\"{}/{}\", krate.display_name(db)?, canonical_path.replace(\"::\", \"/\"));\n+    let base = format!(\"{}/{}\", krate.declaration_name(db)?, canonical_path.replace(\"::\", \"/\"));\n \n     get_doc_url(db, &krate)\n         .and_then(|url| url.join(&base).ok())\n@@ -248,7 +248,7 @@ fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n             //\n             // FIXME: clicking on the link should just open the file in the editor,\n             // instead of falling back to external urls.\n-            Some(format!(\"https://docs.rs/{}/*/\", krate.display_name(db)?))\n+            Some(format!(\"https://docs.rs/{}/*/\", krate.declaration_name(db)?))\n         })\n         .and_then(|s| Url::parse(&s).ok())\n }"}, {"sha": "f67f10491dfb1046a12caa4b71b920d55d7c736d", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=9d19e5b962f77259dd1334b9edb4da4de54f0987", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n         match krate {\n             Some(krate) => {\n                 let crate_graph = db.crate_graph();\n-                let display_crate = |krate: CrateId| match &crate_graph[krate].display_name {\n+                let display_crate = |krate: CrateId| match &crate_graph[krate].declaration_name {\n                     Some(it) => format!(\"{}({:?})\", it, krate),\n                     None => format!(\"{:?}\", krate),\n                 };"}, {"sha": "d1d3b12f81687fd2127e54c10882f9394dc33c31", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d19e5b962f77259dd1334b9edb4da4de54f0987/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=9d19e5b962f77259dd1334b9edb4da4de54f0987", "patch": "@@ -36,11 +36,12 @@ pub fn diagnostics(path: &Path, load_output_dirs: bool, with_proc_macro: bool) -\n     for module in work {\n         let file_id = module.definition_source(db).file_id.original_file(db);\n         if !visited_files.contains(&file_id) {\n-            let crate_name = if let Some(name) = module.krate().display_name(db) {\n-                format!(\"{}\", name)\n-            } else {\n-                String::from(\"unknown\")\n-            };\n+            let crate_name = module\n+                .krate()\n+                .declaration_name(db)\n+                .as_ref()\n+                .map(ToString::to_string)\n+                .unwrap_or_else(|| \"unknown\".to_string());\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n             for diagnostic in analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n             {"}]}