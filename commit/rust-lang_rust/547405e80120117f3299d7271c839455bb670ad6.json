{"sha": "547405e80120117f3299d7271c839455bb670ad6", "node_id": "C_kwDOAAsO6NoAKDU0NzQwNWU4MDEyMDExN2YzMjk5ZDcyNzFjODM5NDU1YmI2NzBhZDY", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-03-01T00:53:25Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-04-15T13:36:30Z"}, "message": "Add codegen for global_asm! sym operands", "tree": {"sha": "3437956c69eb10d3adb841ab126d374d305327fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3437956c69eb10d3adb841ab126d374d305327fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547405e80120117f3299d7271c839455bb670ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547405e80120117f3299d7271c839455bb670ad6", "html_url": "https://github.com/rust-lang/rust/commit/547405e80120117f3299d7271c839455bb670ad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547405e80120117f3299d7271c839455bb670ad6/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc345d8bffdd95c65ba537c32a6900b8c19c049d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc345d8bffdd95c65ba537c32a6900b8c19c049d", "html_url": "https://github.com/rust-lang/rust/commit/dc345d8bffdd95c65ba537c32a6900b8c19c049d"}], "stats": {"total": 159, "additions": 137, "deletions": 22}, "files": [{"sha": "2af050f0c7533282bd965bf3628936e1a9e682f4", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -258,9 +258,14 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 }\n \n                 InlineAsmOperandRef::SymFn { instance } => {\n+                    // TODO(@Amanieu): Additional mangling is needed on\n+                    // some targets to add a leading underscore (Mach-O)\n+                    // or byte count suffixes (x86 Windows).\n                     constants_len += self.tcx.symbol_name(instance).name.len();\n                 }\n                 InlineAsmOperandRef::SymStatic { def_id } => {\n+                    // TODO(@Amanieu): Additional mangling is needed on\n+                    // some targets to add a leading underscore (Mach-O).\n                     constants_len += self.tcx.symbol_name(Instance::mono(self.tcx, def_id)).name.len();\n                 }\n             }\n@@ -412,13 +417,16 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                         }\n \n                         InlineAsmOperandRef::SymFn { instance } => {\n+                            // TODO(@Amanieu): Additional mangling is needed on\n+                            // some targets to add a leading underscore (Mach-O)\n+                            // or byte count suffixes (x86 Windows).\n                             let name = self.tcx.symbol_name(instance).name;\n                             template_str.push_str(name);\n                         }\n \n                         InlineAsmOperandRef::SymStatic { def_id } => {\n-                            // TODO(@Commeownist): This may not be sufficient for all kinds of statics.\n-                            // Some statics may need the `@plt` suffix, like thread-local vars.\n+                            // TODO(@Amanieu): Additional mangling is needed on\n+                            // some targets to add a leading underscore (Mach-O).\n                             let instance = Instance::mono(self.tcx, def_id);\n                             let name = self.tcx.symbol_name(instance).name;\n                             template_str.push_str(name);\n@@ -656,8 +664,8 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n     }\n }\n \n-impl<'gcc, 'tcx> AsmMethods for CodegenCx<'gcc, 'tcx> {\n-    fn codegen_global_asm(&self, template: &[InlineAsmTemplatePiece], operands: &[GlobalAsmOperandRef], options: InlineAsmOptions, _line_spans: &[Span]) {\n+impl<'gcc, 'tcx> AsmMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n+    fn codegen_global_asm(&self, template: &[InlineAsmTemplatePiece], operands: &[GlobalAsmOperandRef<'tcx>], options: InlineAsmOptions, _line_spans: &[Span]) {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n \n         // Default to Intel syntax on x86\n@@ -690,6 +698,22 @@ impl<'gcc, 'tcx> AsmMethods for CodegenCx<'gcc, 'tcx> {\n                             // here unlike normal inline assembly.\n                             template_str.push_str(string);\n                         }\n+\n+                        GlobalAsmOperandRef::SymFn { instance } => {\n+                            // TODO(@Amanieu): Additional mangling is needed on\n+                            // some targets to add a leading underscore (Mach-O)\n+                            // or byte count suffixes (x86 Windows).\n+                            let name = self.tcx.symbol_name(instance).name;\n+                            template_str.push_str(name);\n+                        }\n+\n+                        GlobalAsmOperandRef::SymStatic { def_id } => {\n+                            // TODO(@Amanieu): Additional mangling is needed on\n+                            // some targets to add a leading underscore (Mach-O).\n+                            let instance = Instance::mono(self.tcx, def_id);\n+                            let name = self.tcx.symbol_name(instance).name;\n+                            template_str.push_str(name);\n+                        }\n                     }\n                 }\n             }"}, {"sha": "dff3200791825adac4ad57ce0ebf272891d0affd", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -312,11 +312,11 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n     }\n }\n \n-impl AsmMethods for CodegenCx<'_, '_> {\n+impl<'tcx> AsmMethods<'tcx> for CodegenCx<'_, 'tcx> {\n     fn codegen_global_asm(\n         &self,\n         template: &[InlineAsmTemplatePiece],\n-        operands: &[GlobalAsmOperandRef],\n+        operands: &[GlobalAsmOperandRef<'tcx>],\n         options: InlineAsmOptions,\n         _line_spans: &[Span],\n     ) {\n@@ -342,6 +342,29 @@ impl AsmMethods for CodegenCx<'_, '_> {\n                             // here unlike normal inline assembly.\n                             template_str.push_str(string);\n                         }\n+                        GlobalAsmOperandRef::SymFn { instance } => {\n+                            let llval = self.get_fn(instance);\n+                            self.add_compiler_used_global(llval);\n+                            let symbol = llvm::build_string(|s| unsafe {\n+                                llvm::LLVMRustGetMangledName(llval, s);\n+                            })\n+                            .expect(\"symbol is not valid UTF-8\");\n+                            template_str.push_str(&symbol);\n+                        }\n+                        GlobalAsmOperandRef::SymStatic { def_id } => {\n+                            let llval = self\n+                                .renamed_statics\n+                                .borrow()\n+                                .get(&def_id)\n+                                .copied()\n+                                .unwrap_or_else(|| self.get_static(def_id));\n+                            self.add_compiler_used_global(llval);\n+                            let symbol = llvm::build_string(|s| unsafe {\n+                                llvm::LLVMRustGetMangledName(llval, s);\n+                            })\n+                            .expect(\"symbol is not valid UTF-8\");\n+                            template_str.push_str(&symbol);\n+                        }\n                     }\n                 }\n             }"}, {"sha": "c163c7d869269374aa9fc85a50c3f5484ef4ae96", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -99,15 +99,6 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'_>, cgu_name: Symbol) -> (ModuleCodegen\n                 attributes::apply_to_llfn(entry, llvm::AttributePlace::Function, &attrs);\n             }\n \n-            // Run replace-all-uses-with for statics that need it\n-            for &(old_g, new_g) in cx.statics_to_rauw().borrow().iter() {\n-                unsafe {\n-                    let bitcast = llvm::LLVMConstPointerCast(new_g, cx.val_ty(old_g));\n-                    llvm::LLVMReplaceAllUsesWith(old_g, bitcast);\n-                    llvm::LLVMDeleteGlobal(old_g);\n-                }\n-            }\n-\n             // Finalize code coverage by injecting the coverage map. Note, the coverage map will\n             // also be added to the `llvm.compiler.used` variable, created next.\n             if cx.sess().instrument_coverage() {\n@@ -122,6 +113,16 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'_>, cgu_name: Symbol) -> (ModuleCodegen\n                 cx.create_compiler_used_variable()\n             }\n \n+            // Run replace-all-uses-with for statics that need it. This must\n+            // happen after the llvm.used variables are created.\n+            for &(old_g, new_g) in cx.statics_to_rauw().borrow().iter() {\n+                unsafe {\n+                    let bitcast = llvm::LLVMConstPointerCast(new_g, cx.val_ty(old_g));\n+                    llvm::LLVMReplaceAllUsesWith(old_g, bitcast);\n+                    llvm::LLVMDeleteGlobal(old_g);\n+                }\n+            }\n+\n             // Finalize debuginfo\n             if cx.sess().opts.debuginfo != DebugInfo::None {\n                 cx.debuginfo_finalize();"}, {"sha": "4d3f3f318b80c7aa8d884ec9b93e1a686f9eb02e", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -412,6 +412,13 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                 llvm::LLVMRustSetLinkage(new_g, linkage);\n                 llvm::LLVMRustSetVisibility(new_g, visibility);\n \n+                // The old global has had its name removed but is returned by\n+                // get_static since it is in the instance cache. Provide an\n+                // alternative lookup that points to the new global so that\n+                // global_asm! can compute the correct mangled symbol name\n+                // for the global.\n+                self.renamed_statics.borrow_mut().insert(def_id, new_g);\n+\n                 // To avoid breaking any invariants, we leave around the old\n                 // global for the moment; we'll replace all references to it\n                 // with the new global later. (See base::codegen_backend.)"}, {"sha": "d296ee3b42ce1cfe4f5c738a87c325dca1ade669", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -14,6 +14,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_hir::def_id::DefId;\n use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::layout::{\n     FnAbiError, FnAbiOfHelpers, FnAbiRequest, HasParamEnv, LayoutError, LayoutOfHelpers,\n@@ -105,6 +106,12 @@ pub struct CodegenCx<'ll, 'tcx> {\n \n     /// A counter that is used for generating local symbol names\n     local_gen_sym_counter: Cell<usize>,\n+\n+    /// `codegen_static` will sometimes create a second global variable with a\n+    /// different type and clear the symbol name of the original global.\n+    /// `global_asm!` needs to be able to find this new global so that it can\n+    /// compute the correct mangled symbol name to insert into the asm.\n+    pub renamed_statics: RefCell<FxHashMap<DefId, &'ll Value>>,\n }\n \n pub struct TypeLowering<'ll> {\n@@ -436,6 +443,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             rust_try_fn: Cell::new(None),\n             intrinsics: Default::default(),\n             local_gen_sym_counter: Cell::new(0),\n+            renamed_statics: Default::default(),\n         }\n     }\n "}, {"sha": "7f533b0552a5de2d884be0b1a312a66faca174f5", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -2537,4 +2537,6 @@ extern \"C\" {\n         remark_passes_len: usize,\n     );\n \n+    #[allow(improper_ctypes)]\n+    pub fn LLVMRustGetMangledName(V: &Value, out: &RustString);\n }"}, {"sha": "5006a2157fcae6e801dcf763bfcbd84415fad9eb", "filename": "compiler/rustc_codegen_ssa/src/mono_item.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmono_item.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -4,7 +4,9 @@ use crate::traits::*;\n use rustc_hir as hir;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n+use rustc_middle::ty;\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::Instance;\n \n pub trait MonoItemExt<'a, 'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx);\n@@ -56,7 +58,27 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n                                 );\n                                 GlobalAsmOperandRef::Const { string }\n                             }\n-                            _ => span_bug!(*op_sp, \"invalid operand type for global_asm!\"),\n+                            hir::InlineAsmOperand::SymFn { ref anon_const } => {\n+                                let ty = cx\n+                                    .tcx()\n+                                    .typeck_body(anon_const.body)\n+                                    .node_type(anon_const.hir_id);\n+                                let instance = match ty.kind() {\n+                                    &ty::FnDef(def_id, substs) => Instance::new(def_id, substs),\n+                                    _ => span_bug!(*op_sp, \"asm sym is not a function\"),\n+                                };\n+\n+                                GlobalAsmOperandRef::SymFn { instance }\n+                            }\n+                            hir::InlineAsmOperand::SymStatic { path: _, def_id } => {\n+                                GlobalAsmOperandRef::SymStatic { def_id }\n+                            }\n+                            hir::InlineAsmOperand::In { .. }\n+                            | hir::InlineAsmOperand::Out { .. }\n+                            | hir::InlineAsmOperand::InOut { .. }\n+                            | hir::InlineAsmOperand::SplitInOut { .. } => {\n+                                span_bug!(*op_sp, \"invalid operand type for global_asm!\")\n+                            }\n                         })\n                         .collect();\n "}, {"sha": "c2ae74b18d81ee17473dc3cfc68c792561fc09ba", "filename": "compiler/rustc_codegen_ssa/src/traits/asm.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -36,8 +36,10 @@ pub enum InlineAsmOperandRef<'tcx, B: BackendTypes + ?Sized> {\n }\n \n #[derive(Debug)]\n-pub enum GlobalAsmOperandRef {\n+pub enum GlobalAsmOperandRef<'tcx> {\n     Const { string: String },\n+    SymFn { instance: Instance<'tcx> },\n+    SymStatic { def_id: DefId },\n }\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n@@ -53,11 +55,11 @@ pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     );\n }\n \n-pub trait AsmMethods {\n+pub trait AsmMethods<'tcx> {\n     fn codegen_global_asm(\n         &self,\n         template: &[InlineAsmTemplatePiece],\n-        operands: &[GlobalAsmOperandRef],\n+        operands: &[GlobalAsmOperandRef<'tcx>],\n         options: InlineAsmOptions,\n         line_spans: &[Span],\n     );"}, {"sha": "396768e0a42d0a2e17203ebfe01c7b1475a6eaaf", "filename": "compiler/rustc_codegen_ssa/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmod.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -60,7 +60,7 @@ pub trait CodegenMethods<'tcx>:\n     + StaticMethods\n     + CoverageInfoMethods<'tcx>\n     + DebugInfoMethods<'tcx>\n-    + AsmMethods\n+    + AsmMethods<'tcx>\n     + PreDefineMethods<'tcx>\n     + HasParamEnv<'tcx>\n     + HasTyCtxt<'tcx>\n@@ -76,7 +76,7 @@ impl<'tcx, T> CodegenMethods<'tcx> for T where\n         + StaticMethods\n         + CoverageInfoMethods<'tcx>\n         + DebugInfoMethods<'tcx>\n-        + AsmMethods\n+        + AsmMethods<'tcx>\n         + PreDefineMethods<'tcx>\n         + HasParamEnv<'tcx>\n         + HasTyCtxt<'tcx>"}, {"sha": "3ed4396d1e955c2bc531f69d323a1a6deb7e0e18", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -1835,3 +1835,9 @@ extern \"C\" void LLVMRustContextConfigureDiagnosticHandler(\n   unwrap(C)->setDiagnosticHandler(std::make_unique<RustDiagnosticHandler>(\n       DiagnosticHandlerCallback, DiagnosticHandlerContext, RemarkAllPasses, Passes));\n }\n+\n+extern \"C\" void LLVMRustGetMangledName(LLVMValueRef V, RustStringRef Str) {\n+  RawRustStringOstream OS(Str);\n+  GlobalValue *GV = unwrap<GlobalValue>(V);\n+  Mangler().getNameWithPrefix(OS, GV, true);\n+}"}, {"sha": "fdb14e45d981a565cc13259df233107fccb60771", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547405e80120117f3299d7271c839455bb670ad6/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=547405e80120117f3299d7271c839455bb670ad6", "patch": "@@ -435,7 +435,27 @@ fn collect_items_rec<'tcx>(\n                             // are supported. Therefore the value should not\n                             // depend on any other items.\n                         }\n-                        _ => span_bug!(*op_sp, \"invalid operand type for global_asm!\"),\n+                        hir::InlineAsmOperand::SymFn { anon_const } => {\n+                            let def_id = tcx.hir().body_owner_def_id(anon_const.body).to_def_id();\n+                            if let Ok(val) = tcx.const_eval_poly(def_id) {\n+                                rustc_data_structures::stack::ensure_sufficient_stack(|| {\n+                                    collect_const_value(tcx, val, &mut neighbors);\n+                                });\n+                            }\n+                        }\n+                        hir::InlineAsmOperand::SymStatic { path: _, def_id } => {\n+                            let instance = Instance::mono(tcx, *def_id);\n+                            if should_codegen_locally(tcx, &instance) {\n+                                trace!(\"collecting static {:?}\", def_id);\n+                                neighbors.push(dummy_spanned(MonoItem::Static(*def_id)));\n+                            }\n+                        }\n+                        hir::InlineAsmOperand::In { .. }\n+                        | hir::InlineAsmOperand::Out { .. }\n+                        | hir::InlineAsmOperand::InOut { .. }\n+                        | hir::InlineAsmOperand::SplitInOut { .. } => {\n+                            span_bug!(*op_sp, \"invalid operand type for global_asm!\")\n+                        }\n                     }\n                 }\n             } else {"}]}