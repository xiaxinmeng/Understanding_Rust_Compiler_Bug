{"sha": "5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NDhkY2QzNmU2NWRkZTljOGY0MTg4NGVlZDY0YTdlMWExZDIwNzM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-15T17:47:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:25Z"}, "message": "Implement type inference for tuples and refs", "tree": {"sha": "677c70225c3651ba65fa439782bda8d78dc029c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677c70225c3651ba65fa439782bda8d78dc029c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "html_url": "https://github.com/rust-lang/rust/commit/5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5648dcd36e65dde9c8f41884eed64a7e1a1d2073/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afaa26636e4391ebacfc09e9c994c11bab58b834", "url": "https://api.github.com/repos/rust-lang/rust/commits/afaa26636e4391ebacfc09e9c994c11bab58b834", "html_url": "https://github.com/rust-lang/rust/commit/afaa26636e4391ebacfc09e9c994c11bab58b834"}], "stats": {"total": 65, "additions": 58, "deletions": 7}, "files": [{"sha": "324df5ef943731f2ac8db932bf72724dd890c3c8", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5648dcd36e65dde9c8f41884eed64a7e1a1d2073/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5648dcd36e65dde9c8f41884eed64a7e1a1d2073/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "patch": "@@ -36,7 +36,7 @@ use crate::{\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n-    expr::{Body, Expr, Literal, ExprId, PatId, UnaryOp, BinaryOp, Statement},\n+    expr::{Body, Expr, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement},\n };\n \n /// The ID of a type variable.\n@@ -872,6 +872,35 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         }\n     }\n \n+    // FIXME: Expectation should probably contain a reference to a Ty instead of\n+    // a Ty itself\n+    fn infer_pat(&mut self, pat: PatId, expected: &Expectation) -> Ty {\n+        let body = Arc::clone(&self.body); // avoid borrow checker problem\n+        match (&body[pat], &expected.ty) {\n+            (Pat::Tuple(ref args), &Ty::Tuple(ref tuple_args))\n+                if args.len() == tuple_args.len() =>\n+            {\n+                for (&pat, ty) in args.iter().zip(tuple_args.iter()) {\n+                    // FIXME: can we do w/o cloning?\n+                    self.infer_pat(pat, &Expectation::has_type(ty.clone()));\n+                }\n+            }\n+            (&Pat::Ref { pat, mutability }, &Ty::Ref(ref sub_ty, ty_mut))\n+                if mutability == ty_mut =>\n+            {\n+                self.infer_pat(pat, &Expectation::has_type((&**sub_ty).clone()));\n+            }\n+            // TODO: implement more\n+            (_, ref _expected_ty) => {}\n+        };\n+        // use a new type variable if we got Ty::Unknown here\n+        let ty = self.insert_type_vars_shallow(expected.ty.clone());\n+        self.unify(&ty, &expected.ty);\n+        let ty = self.resolve_ty_as_possible(ty);\n+        self.write_pat_ty(pat, ty.clone());\n+        ty\n+    }\n+\n     fn infer_expr(&mut self, expr: ExprId, expected: &Expectation) -> Ty {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n         let ty = match &body[expr] {\n@@ -1168,9 +1197,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         decl_ty\n                     };\n \n-                    // TODO: walk the pattern here?\n-\n-                    self.write_pat_ty(*pat, ty);\n+                    self.infer_pat(*pat, &Expectation::has_type(ty))?;\n                 }\n                 Statement::Expr(expr) => {\n                     self.infer_expr(*expr, &Expectation::none());\n@@ -1191,9 +1218,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             let ty = self.make_ty(type_ref);\n             let ty = self.insert_type_vars(ty);\n \n-            // TODO: walk pattern?\n-\n-            self.write_pat_ty(*pat, ty);\n+            self.infer_pat(*pat, &Expectation::has_type(ty))?;\n         }\n         self.return_ty = {\n             let ty = self.make_ty(signature.ret_type());"}, {"sha": "a55551cbbc3670a3af50cf82494223d543815c3f", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5648dcd36e65dde9c8f41884eed64a7e1a1d2073/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5648dcd36e65dde9c8f41884eed64a7e1a1d2073/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "patch": "@@ -362,11 +362,22 @@ fn test(x: &str, y: isize) {\n fn infer_pattern() {\n     check_inference(\n         r#\"\n+enum E { A { x: usize }, B }\n+\n fn test(x: &i32) {\n     let y = x;\n     let &z = x;\n     let a = z;\n     let (c, d) = (1, \"hello\");\n+\n+    let e = E::A { x: 3 };\n+    if let E::A { x: x } = e {\n+        x\n+    };\n+    match e {\n+        E::A { x } => x,\n+        E::B => 1,\n+    };\n }\n \"#,\n         \"pattern.txt\","}, {"sha": "cca5218335e081c5953894a404ee87d407735381", "filename": "crates/ra_hir/src/ty/tests/data/pattern.txt", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5648dcd36e65dde9c8f41884eed64a7e1a1d2073/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5648dcd36e65dde9c8f41884eed64a7e1a1d2073/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fpattern.txt?ref=5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "patch": "@@ -0,0 +1,15 @@\n+[9; 10) 'x': &i32\n+[18; 98) '{     ...o\"); }': ()\n+[28; 29) 'y': &i32\n+[32; 33) 'x': &i32\n+[43; 45) '&z': &i32\n+[44; 45) 'z': i32\n+[48; 49) 'x': &i32\n+[59; 60) 'a': i32\n+[63; 64) 'z': i32\n+[74; 80) '(c, d)': (i32, &str)\n+[75; 76) 'c': i32\n+[78; 79) 'd': &str\n+[83; 95) '(1, \"hello\")': (i32, &str)\n+[84; 85) '1': i32\n+[87; 94) '\"hello\"': &str"}]}