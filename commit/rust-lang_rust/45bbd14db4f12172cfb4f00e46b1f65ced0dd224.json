{"sha": "45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YmJkMTRkYjRmMTIxNzJjZmI0ZjAwZTQ2YjFmNjVjZWQwZGQyMjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-19T22:37:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-22T18:31:35Z"}, "message": "Continue evaluating after item-type checking", "tree": {"sha": "0ae8bac8b1f507007af5d1dc5502d4d77dd37e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae8bac8b1f507007af5d1dc5502d4d77dd37e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "html_url": "https://github.com/rust-lang/rust/commit/45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3", "html_url": "https://github.com/rust-lang/rust/commit/c21fbfe7e310b9055ed6b7c46b7d37b831a516e3"}], "stats": {"total": 229, "additions": 186, "deletions": 43}, "files": [{"sha": "fddf706cc8bcc3f8a15ddc62dc7c419b038629d2", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -966,8 +966,7 @@ fn analysis<'tcx>(\n     time(sess, \"layout testing\", || layout_test::test_layout(tcx));\n \n     // Avoid overwhelming user with errors if borrow checking failed.\n-    // I'm not sure how helpful this is, to be honest, but it avoids\n-    // a\n+    // I'm not sure how helpful this is, to be honest, but it avoids a\n     // lot of annoying errors in the compile-fail tests (basically,\n     // lint warnings and so on -- kindck used to do this abort, but\n     // kindck is gone now). -nmatsakis"}, {"sha": "95f7c2949cb5686507bb2307563133474f98227f", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -357,12 +357,10 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     time(tcx.sess, \"wf checking\", || check::check_wf_new(tcx))?;\n \n     time(tcx.sess, \"item-types checking\", || {\n-        tcx.sess.track_errors(|| {\n-            for &module in tcx.hir().krate().modules.keys() {\n-                tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n-            }\n-        })\n-    })?;\n+        for &module in tcx.hir().krate().modules.keys() {\n+            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n+        }\n+    });\n \n     time(tcx.sess, \"item-bodies checking\", || tcx.typeck_item_bodies(LOCAL_CRATE));\n "}, {"sha": "6a3ff24b6740fccfa9a0fb94281807205e9e3199", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -12,20 +12,18 @@ extern {\n extern \"C\" fn bar(f: isize, x: u8) {}\n \n fn main() {\n-    // errors below are no longer checked because error above aborts\n-    // compilation; see variadic-ffi-3.rs for corresponding test.\n     unsafe {\n-        foo();\n-        foo(1);\n+        foo();  //~ ERROR this function takes at least 2 parameters but 0 parameters were supplied\n+        foo(1); //~ ERROR this function takes at least 2 parameters but 1 parameter was supplied\n \n-        let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n-        let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n+        let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo; //~ ERROR mismatched types\n+        let y: extern \"C\" fn(f: isize, x: u8, ...) = bar; //~ ERROR mismatched types\n \n-        foo(1, 2, 3f32);\n-        foo(1, 2, true);\n-        foo(1, 2, 1i8);\n-        foo(1, 2, 1u8);\n-        foo(1, 2, 1i16);\n-        foo(1, 2, 1u16);\n+        foo(1, 2, 3f32); //~ ERROR can't pass\n+        foo(1, 2, true); //~ ERROR can't pass\n+        foo(1, 2, 1i8);  //~ ERROR can't pass\n+        foo(1, 2, 1u8);  //~ ERROR can't pass\n+        foo(1, 2, 1i16); //~ ERROR can't pass\n+        foo(1, 2, 1u16); //~ ERROR can't pass\n     }\n }"}, {"sha": "e16d15a98bf9dad0943caaca807a5735d6af8299", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 75, "deletions": 2, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -4,6 +4,79 @@ error[E0045]: C-variadic function must have C or cdecl calling convention\n LL |     fn printf(_: *const u8, ...);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n-error: aborting due to previous error\n+error[E0060]: this function takes at least 2 parameters but 0 parameters were supplied\n+  --> $DIR/variadic-ffi-1.rs:16:9\n+   |\n+LL |     fn foo(f: isize, x: u8, ...);\n+   |     ----------------------------- defined here\n+...\n+LL |         foo();\n+   |         ^^^^^ expected at least 2 parameters\n+\n+error[E0060]: this function takes at least 2 parameters but 1 parameter was supplied\n+  --> $DIR/variadic-ffi-1.rs:17:9\n+   |\n+LL |     fn foo(f: isize, x: u8, ...);\n+   |     ----------------------------- defined here\n+...\n+LL |         foo(1);\n+   |         ^^^^^^ expected at least 2 parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/variadic-ffi-1.rs:19:56\n+   |\n+LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n+   |                                                        ^^^ expected non-variadic fn, found variadic function\n+   |\n+   = note: expected type `unsafe extern \"C\" fn(isize, u8)`\n+              found type `for<'r> unsafe extern \"C\" fn(isize, u8, std::ffi::VaList<'r>, ...) {foo}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/variadic-ffi-1.rs:20:54\n+   |\n+LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n+   |                                                      ^^^ expected variadic fn, found non-variadic function\n+   |\n+   = note: expected type `for<'r> extern \"C\" fn(isize, u8, std::ffi::VaList<'r>, ...)`\n+              found type `extern \"C\" fn(isize, u8) {bar}`\n+\n+error[E0617]: can't pass `f32` to variadic function\n+  --> $DIR/variadic-ffi-1.rs:22:19\n+   |\n+LL |         foo(1, 2, 3f32);\n+   |                   ^^^^ help: cast the value to `c_double`: `3f32 as c_double`\n+\n+error[E0617]: can't pass `bool` to variadic function\n+  --> $DIR/variadic-ffi-1.rs:23:19\n+   |\n+LL |         foo(1, 2, true);\n+   |                   ^^^^ help: cast the value to `c_int`: `true as c_int`\n+\n+error[E0617]: can't pass `i8` to variadic function\n+  --> $DIR/variadic-ffi-1.rs:24:19\n+   |\n+LL |         foo(1, 2, 1i8);\n+   |                   ^^^ help: cast the value to `c_int`: `1i8 as c_int`\n+\n+error[E0617]: can't pass `u8` to variadic function\n+  --> $DIR/variadic-ffi-1.rs:25:19\n+   |\n+LL |         foo(1, 2, 1u8);\n+   |                   ^^^ help: cast the value to `c_uint`: `1u8 as c_uint`\n+\n+error[E0617]: can't pass `i16` to variadic function\n+  --> $DIR/variadic-ffi-1.rs:26:19\n+   |\n+LL |         foo(1, 2, 1i16);\n+   |                   ^^^^ help: cast the value to `c_int`: `1i16 as c_int`\n+\n+error[E0617]: can't pass `u16` to variadic function\n+  --> $DIR/variadic-ffi-1.rs:27:19\n+   |\n+LL |         foo(1, 2, 1u16);\n+   |                   ^^^^ help: cast the value to `c_uint`: `1u16 as c_uint`\n+\n+error: aborting due to 11 previous errors\n \n-For more information about this error, try `rustc --explain E0045`.\n+Some errors have detailed explanations: E0045, E0060, E0308, E0617.\n+For more information about an error, try `rustc --explain E0045`."}, {"sha": "f2ba81af9b63883185bbc4e6f43eba22f1e3e8c6", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -7,7 +7,7 @@ trait Get {\n \n impl Get for i32 {\n     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-        x\n+        x //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "80f15b7c5847f4cbc82b051dd67e2e28c5d3d308", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -20,5 +20,15 @@ LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n            expected fn(&i32, &'a u32, &u32) -> &'a u32\n               found fn(&i32, &u32, &u32) -> &u32\n \n-error: aborting due to previous error\n+error[E0623]: lifetime mismatch\n+  --> $DIR/mismatched_trait_impl.rs:10:9\n+   |\n+LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n+   |                      ----                 -------\n+   |                      |\n+   |                      this parameter and the return type are declared with different lifetimes...\n+LL |         x\n+   |         ^ ...but data from `x` is returned here\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "bbfaaa62f0d32285bb9ef94108d3461d1abe2c95", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -1,4 +1,5 @@\n enum MList { Cons(isize, MList), Nil }\n //~^ ERROR recursive type `MList` has infinite size\n+//~| ERROR cycle detected when processing `MList`\n \n fn main() { let a = MList::Cons(10, MList::Cons(11, MList::Nil)); }"}, {"sha": "8f6529db0bec5b77666601153d240242697c163f", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -8,6 +8,16 @@ LL | enum MList { Cons(isize, MList), Nil }\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `MList` representable\n \n-error: aborting due to previous error\n+error[E0391]: cycle detected when processing `MList`\n+  --> $DIR/infinite-tag-type-recursion.rs:1:1\n+   |\n+LL | enum MList { Cons(isize, MList), Nil }\n+   | ^^^^^^^^^^\n+   |\n+   = note: ...which again requires processing `MList`, completing the cycle\n+   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, def_id: None }, value: MList } }`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0072`.\n+Some errors have detailed explanations: E0072, E0391.\n+For more information about an error, try `rustc --explain E0072`."}, {"sha": "7d24f3a40a742e2669664ff54553ceae0d400e69", "filename": "src/test/ui/issues/issue-16048.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fissues%2Fissue-16048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fissues%2Fissue-16048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16048.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -22,6 +22,8 @@ impl<'a> NoLifetime for Foo<'a> {\n     //~^ ERROR E0195\n     //~| NOTE lifetimes do not match method in trait\n         return *self as T;\n+        //~^ ERROR non-primitive cast: `Foo<'a>` as `T`\n+        //~| NOTE an `as` expression can only be used to convert between primitive types.\n     }\n }\n "}, {"sha": "a137bcdf1915edd39ec053786aa664e5bc76a514", "filename": "src/test/ui/issues/issue-16048.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fissues%2Fissue-16048.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fissues%2Fissue-16048.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16048.stderr?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -7,6 +7,15 @@ LL |     fn get<'p, T : Test<'p>>(&self) -> T;\n LL |     fn get<'p, T : Test<'a>>(&self) -> T {\n    |           ^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n-error: aborting due to previous error\n+error[E0605]: non-primitive cast: `Foo<'a>` as `T`\n+  --> $DIR/issue-16048.rs:24:16\n+   |\n+LL |         return *self as T;\n+   |                ^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0195`.\n+Some errors have detailed explanations: E0195, E0605.\n+For more information about an error, try `rustc --explain E0195`."}, {"sha": "f49111c3fc7bf27c8261ebed93f5925f5b6fbd2d", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -4,5 +4,5 @@ use std::num::ParseIntError;\n \n #[test]\n fn can_parse_zero_as_f32() -> Result<f32, ParseIntError> { //~ ERROR\n-    \"0\".parse()\n+    \"0\".parse() //~ ERROR type mismatch resolving\n }"}, {"sha": "ce79c0c80894d1528074ccb82c60b4d93022568a", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -9,6 +9,16 @@ LL | | }\n    = help: the trait `std::process::Termination` is not implemented for `std::result::Result<f32, std::num::ParseIntError>`\n    = note: required by `test::assert_test_result`\n \n-error: aborting due to previous error\n+error[E0271]: type mismatch resolving `<f32 as std::str::FromStr>::Err == std::num::ParseIntError`\n+  --> $DIR/termination-trait-test-wrong-type.rs:7:9\n+   |\n+LL |     \"0\".parse()\n+   |         ^^^^^ expected struct `std::num::ParseFloatError`, found struct `std::num::ParseIntError`\n+   |\n+   = note: expected type `std::num::ParseFloatError`\n+              found type `std::num::ParseIntError`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "58aa35046d9f5ffc1be79f36b05b7e292e5f3b77", "filename": "src/test/ui/structs/struct-base-wrong-type.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -18,10 +18,7 @@ static foo_i: Foo = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n \n fn main() {\n     let b = Bar { x: 5 };\n-    // errors below are no longer caught since error above causes\n-    // compilation to abort before we bother checking function bodies.\n-    // See also struct-base-wrong-type-2.rs, which checks that we\n-    // would catch these errors eventually.\n-    let f = Foo { a: 2, ..b };\n-    let f__isize = Foo { a: 2, ..4 };\n+    // See also struct-base-wrong-type-2.rs, which checks these errors on isolation.\n+    let f = Foo { a: 2, ..b };        //~ ERROR mismatched types\n+    let f__isize = Foo { a: 2, ..4 }; //~ ERROR mismatched types\n }"}, {"sha": "00c2e1e0dd518e52a0ee4f91904245b9cd1ede6c", "filename": "src/test/ui/structs/struct-base-wrong-type.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -16,6 +16,24 @@ LL | static foo_i: Foo = Foo { a: 2, ..4 };\n    = note: expected type `Foo`\n               found type `{integer}`\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/struct-base-wrong-type.rs:22:27\n+   |\n+LL |     let f = Foo { a: 2, ..b };\n+   |                           ^ expected struct `Foo`, found struct `Bar`\n+   |\n+   = note: expected type `Foo`\n+              found type `Bar`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/struct-base-wrong-type.rs:23:34\n+   |\n+LL |     let f__isize = Foo { a: 2, ..4 };\n+   |                                  ^ expected struct `Foo`, found integer\n+   |\n+   = note: expected type `Foo`\n+              found type `{integer}`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "1c2f865599e8bf569ba6d599faaf28cfb0cd474a", "filename": "src/test/ui/wrong-mul-method-signature.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.rs?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -61,9 +61,8 @@ pub fn main() {\n     let x: Vec1 = Vec1 { x: 1.0 } * 2.0; // this is OK\n \n     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n-    // (we no longer signal a compile error here, since the\n-    //  error in the trait signature will cause compilation to\n-    //  abort before we bother looking at function bodies.)\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     let x: i32 = Vec3 { x: 1.0, y: 2.0, z: 3.0 } * 2.0;\n }"}, {"sha": "2317bf8e8293c1dfdbd949d8bdec4c4ad173b03c", "filename": "src/test/ui/wrong-mul-method-signature.stderr", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45bbd14db4f12172cfb4f00e46b1f65ced0dd224/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-mul-method-signature.stderr?ref=45bbd14db4f12172cfb4f00e46b1f65ced0dd224", "patch": "@@ -25,6 +25,25 @@ LL |     fn mul(self, s: f64) -> f64 {\n    = note: expected type `fn(Vec3, f64) -> i32`\n               found type `fn(Vec3, f64) -> f64`\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-mul-method-signature.rs:63:45\n+   |\n+LL |     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n+   |                                             ^^^ expected struct `Vec2`, found floating-point number\n+   |\n+   = note: expected type `Vec2`\n+              found type `{float}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/wrong-mul-method-signature.rs:63:19\n+   |\n+LL |     let x: Vec2 = Vec2 { x: 1.0, y: 2.0 } * 2.0; // trait had reversed order\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found f64\n+   |\n+   = note: expected type `Vec2`\n+              found type `f64`\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0053`.\n+Some errors have detailed explanations: E0053, E0308.\n+For more information about an error, try `rustc --explain E0053`."}]}