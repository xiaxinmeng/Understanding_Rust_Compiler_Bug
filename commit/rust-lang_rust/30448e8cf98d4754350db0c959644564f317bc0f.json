{"sha": "30448e8cf98d4754350db0c959644564f317bc0f", "node_id": "C_kwDOAAsO6NoAKDMwNDQ4ZThjZjk4ZDQ3NTQzNTBkYjBjOTU5NjQ0NTY0ZjMxN2JjMGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T08:22:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T08:22:37Z"}, "message": "Auto merge of #10871 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "d099ef7514457705aa004625df5a59e4bc0923fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d099ef7514457705aa004625df5a59e4bc0923fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30448e8cf98d4754350db0c959644564f317bc0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30448e8cf98d4754350db0c959644564f317bc0f", "html_url": "https://github.com/rust-lang/rust/commit/30448e8cf98d4754350db0c959644564f317bc0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30448e8cf98d4754350db0c959644564f317bc0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ab3ce6c9212d453f104b219596923a6893f742", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ab3ce6c9212d453f104b219596923a6893f742", "html_url": "https://github.com/rust-lang/rust/commit/50ab3ce6c9212d453f104b219596923a6893f742"}, {"sha": "84f8ce801eddd09d1de78b0e920edb92fde31527", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f8ce801eddd09d1de78b0e920edb92fde31527", "html_url": "https://github.com/rust-lang/rust/commit/84f8ce801eddd09d1de78b0e920edb92fde31527"}], "stats": {"total": 492, "additions": 137, "deletions": 355}, "files": [{"sha": "ca8bf9fac91a0afa87905669f57514dceaf55a17", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "be9261a47041c627feeeff5e4fc8672a8e233986", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "15f2f81f4079e5b2e88b66809e797f845249c3d1", "filename": "clippy_lints/src/casts/cast_ref_to_mut.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,26 +0,0 @@\n-use clippy_utils::diagnostics::span_lint;\n-use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind, MutTy, Mutability, TyKind, UnOp};\n-use rustc_lint::LateContext;\n-use rustc_middle::ty;\n-\n-use super::CAST_REF_TO_MUT;\n-\n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::Unary(UnOp::Deref, e) = &expr.kind;\n-        if let ExprKind::Cast(e, t) = &e.kind;\n-        if let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind;\n-        if let ExprKind::Cast(e, t) = &e.kind;\n-        if let TyKind::Ptr(MutTy { mutbl: Mutability::Not, .. }) = t.kind;\n-        if let ty::Ref(..) = cx.typeck_results().node_type(e.hir_id).kind();\n-        then {\n-            span_lint(\n-                cx,\n-                CAST_REF_TO_MUT,\n-                expr.span,\n-                \"casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\",\n-            );\n-        }\n-    }\n-}"}, {"sha": "b90dab07a274afa41bbd667a6ae7ae8245a704c6", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -9,7 +9,6 @@ mod cast_possible_truncation;\n mod cast_possible_wrap;\n mod cast_precision_loss;\n mod cast_ptr_alignment;\n-mod cast_ref_to_mut;\n mod cast_sign_loss;\n mod cast_slice_different_sizes;\n mod cast_slice_from_raw_parts;\n@@ -331,41 +330,6 @@ declare_clippy_lint! {\n     \"casting a function pointer to any integer type\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for casts of `&T` to `&mut T` anywhere in the code.\n-    ///\n-    /// ### Why is this bad?\n-    /// It\u2019s basically guaranteed to be undefined behavior.\n-    /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n-    /// mutable.\n-    ///\n-    /// ### Example\n-    /// ```rust,ignore\n-    /// fn x(r: &i32) {\n-    ///     unsafe {\n-    ///         *(r as *const _ as *mut _) += 1;\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// Instead consider using interior mutability types.\n-    ///\n-    /// ```rust\n-    /// use std::cell::UnsafeCell;\n-    ///\n-    /// fn x(r: &UnsafeCell<i32>) {\n-    ///     unsafe {\n-    ///         *r.get() += 1;\n-    ///     }\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.33.0\"]\n-    pub CAST_REF_TO_MUT,\n-    correctness,\n-    \"a cast of reference to a mutable pointer\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for expressions where a character literal is cast\n@@ -709,7 +673,6 @@ impl_lint_pass!(Casts => [\n     CAST_POSSIBLE_TRUNCATION,\n     CAST_POSSIBLE_WRAP,\n     CAST_LOSSLESS,\n-    CAST_REF_TO_MUT,\n     CAST_PTR_ALIGNMENT,\n     CAST_SLICE_DIFFERENT_SIZES,\n     UNNECESSARY_CAST,\n@@ -778,7 +741,6 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             }\n         }\n \n-        cast_ref_to_mut::check(cx, expr);\n         cast_ptr_alignment::check(cx, expr);\n         char_lit_as_u8::check(cx, expr);\n         ptr_as_ptr::check(cx, expr, &self.msrv);"}, {"sha": "15ff8be0fd942e597aabede1723573b1e107fcee", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -81,7 +81,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::casts::CAST_POSSIBLE_WRAP_INFO,\n     crate::casts::CAST_PRECISION_LOSS_INFO,\n     crate::casts::CAST_PTR_ALIGNMENT_INFO,\n-    crate::casts::CAST_REF_TO_MUT_INFO,\n     crate::casts::CAST_SIGN_LOSS_INFO,\n     crate::casts::CAST_SLICE_DIFFERENT_SIZES_INFO,\n     crate::casts::CAST_SLICE_FROM_RAW_PARTS_INFO,\n@@ -213,7 +212,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::instant_subtraction::UNCHECKED_DURATION_SUBTRACTION_INFO,\n     crate::int_plus_one::INT_PLUS_ONE_INFO,\n     crate::invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS_INFO,\n-    crate::invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED_INFO,\n     crate::items_after_statements::ITEMS_AFTER_STATEMENTS_INFO,\n     crate::items_after_test_module::ITEMS_AFTER_TEST_MODULE_INFO,\n     crate::iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR_INFO,"}, {"sha": "a1d2147cb496592c3e0028ac49b32b0ad82a1792", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -1219,7 +1219,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n                 return false;\n             }\n \n-            let predicate = EarlyBinder(predicate).subst(cx.tcx, &substs_with_referent_ty);\n+            let predicate = EarlyBinder::bind(predicate).subst(cx.tcx, &substs_with_referent_ty);\n             let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n             let infcx = cx.tcx.infer_ctxt().build();\n             infcx.predicate_must_hold_modulo_regions(&obligation)"}, {"sha": "9c60edb179415b62140008d8f9f60e4347d1fc4d", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                // early return for uplifted lints: drop_ref, drop_copy, forget_ref, forget_copy\n+                // early return for uplifted lints: dropping_references, dropping_copy_types, forgetting_references, forgetting_copy_types\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n                 sym::mem_forget if arg_ty.is_ref() => return,\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => return,"}, {"sha": "c919b4de65dea38fded783e10a5dac91c3f71b26", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -243,7 +243,7 @@ fn get_ufcs_type_name<'tcx>(cx: &LateContext<'tcx>, method_def_id: DefId, substs\n                 | ty::Ref(..)\n                 | ty::Slice(_)\n                 | ty::Tuple(_) => {\n-                    format!(\"<{}>\", EarlyBinder(ty).subst(cx.tcx, substs))\n+                    format!(\"<{}>\", EarlyBinder::bind(ty).subst(cx.tcx, substs))\n                 },\n                 _ => ty.to_string(),\n             }"}, {"sha": "6a4861747d267c83663ca3e405a8d61d13564c26", "filename": "clippy_lints/src/invalid_utf8_in_unchecked.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,74 +0,0 @@\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_function_call, paths};\n-use rustc_ast::{BorrowKind, LitKind};\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-use rustc_span::Span;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `std::str::from_utf8_unchecked` with an invalid UTF-8 literal\n-    ///\n-    /// ### Why is this bad?\n-    /// Creating such a `str` would result in undefined behavior\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # #[allow(unused)]\n-    /// unsafe {\n-    ///     std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.64.0\"]\n-    pub INVALID_UTF8_IN_UNCHECKED,\n-    correctness,\n-    \"using a non UTF-8 literal in `std::std::from_utf8_unchecked`\"\n-}\n-declare_lint_pass!(InvalidUtf8InUnchecked => [INVALID_UTF8_IN_UNCHECKED]);\n-\n-impl<'tcx> LateLintPass<'tcx> for InvalidUtf8InUnchecked {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if let Some([arg]) = match_function_call(cx, expr, &paths::STR_FROM_UTF8_UNCHECKED) {\n-            match &arg.kind {\n-                ExprKind::Lit(Spanned { node: lit, .. }) => {\n-                    if let LitKind::ByteStr(bytes, _) = &lit\n-                        && std::str::from_utf8(bytes).is_err()\n-                    {\n-                        lint(cx, expr.span);\n-                    }\n-                },\n-                ExprKind::AddrOf(BorrowKind::Ref, _, Expr { kind: ExprKind::Array(args), .. }) => {\n-                    let elements = args.iter().map(|e|{\n-                        match &e.kind {\n-                            ExprKind::Lit(Spanned { node: lit, .. }) => match lit {\n-                                LitKind::Byte(b) => Some(*b),\n-                                #[allow(clippy::cast_possible_truncation)]\n-                                LitKind::Int(b, _) => Some(*b as u8),\n-                                _ => None\n-                            }\n-                            _ => None\n-                        }\n-                    }).collect::<Option<Vec<_>>>();\n-\n-                    if let Some(elements) = elements\n-                        && std::str::from_utf8(&elements).is_err()\n-                    {\n-                        lint(cx, expr.span);\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n-    }\n-}\n-\n-fn lint(cx: &LateContext<'_>, span: Span) {\n-    span_lint(\n-        cx,\n-        INVALID_UTF8_IN_UNCHECKED,\n-        span,\n-        \"non UTF-8 literal in `std::str::from_utf8_unchecked`\",\n-    );\n-}"}, {"sha": "4a23edb58aaa4999c414dd6ef941d6f0bff63895", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -157,7 +157,6 @@ mod inline_fn_without_body;\n mod instant_subtraction;\n mod int_plus_one;\n mod invalid_upcast_comparisons;\n-mod invalid_utf8_in_unchecked;\n mod items_after_statements;\n mod items_after_test_module;\n mod iter_not_returning_iterator;\n@@ -952,7 +951,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv())));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n-    store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n     store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv())));\n     store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));"}, {"sha": "99f810c27cf82f7bd6618c610fc013c7ac6d93e4", "filename": "clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -241,7 +241,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {\n-        item_ty == EarlyBinder(search_ty).subst(cx.tcx, cx.typeck_results().node_substs(call_id))\n+        item_ty == EarlyBinder::bind(search_ty).subst(cx.tcx, cx.typeck_results().node_substs(call_id))\n     } else {\n         false\n     }"}, {"sha": "309d2157b76ee4f762ca30ae2872aaff895bb728", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -428,7 +428,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                                      }));\n \n                         if trait_predicates.any(|predicate| {\n-                            let predicate = EarlyBinder(predicate).subst(cx.tcx, new_subst);\n+                            let predicate = EarlyBinder::bind(predicate).subst(cx.tcx, new_subst);\n                             let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n                             !cx.tcx.infer_ctxt().build().predicate_must_hold_modulo_regions(&obligation)\n                         }) {\n@@ -438,7 +438,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         let output_ty = fn_sig.output();\n                         if output_ty.contains(*param_ty) {\n                             if let Ok(new_ty)  = cx.tcx.try_subst_and_normalize_erasing_regions(\n-                                new_subst, cx.param_env, EarlyBinder(output_ty)) {\n+                                new_subst, cx.param_env, EarlyBinder::bind(output_ty)) {\n                                 expr = parent_expr;\n                                 ty = new_ty;\n                                 continue;"}, {"sha": "3b7eccad79df8c710ad0f1f5b89ab18c0a117adb", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -154,7 +154,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, &self.msrv) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n-                cx.tcx.sess.span_err(span, err.as_ref());\n+                cx.tcx.sess.span_err(span, err);\n             }\n         } else {\n             span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const fn`\");"}, {"sha": "b6f0de7e504f0cab616335347c60f4e84bb64ed7", "filename": "clippy_lints/src/missing_fields_in_debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmissing_fields_in_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmissing_fields_in_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_fields_in_debug.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -217,7 +217,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingFieldsInDebug {\n             && let body = cx.tcx.hir().body(*body_id)\n             && let ExprKind::Block(block, _) = body.value.kind\n             // inspect `self`\n-            && let self_ty = cx.tcx.type_of(self_path.res.def_id()).0.peel_refs()\n+            && let self_ty = cx.tcx.type_of(self_path.res.def_id()).skip_binder().peel_refs()\n             && let Some(self_adt) = self_ty.ty_adt_def()\n             && let Some(self_def_id) = self_adt.did().as_local()\n             && let Some(Node::Item(self_item)) = cx.tcx.hir().find_by_def_id(self_def_id)"}, {"sha": "e6fd65f001a6e8ea4a8d7e02384ee6282358d66d", "filename": "clippy_lints/src/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_unsafe_ops_per_block.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -138,7 +138,7 @@ fn collect_unsafe_exprs<'tcx>(\n                     .type_dependent_def_id(expr.hir_id)\n                     .map(|def_id| cx.tcx.fn_sig(def_id))\n                 {\n-                    if sig.0.unsafety() == Unsafety::Unsafe {\n+                    if sig.skip_binder().unsafety() == Unsafety::Unsafe {\n                         unsafe_ops.push((\"unsafe method call occurs here\", expr.span));\n                     }\n                 }"}, {"sha": "7d53fe65658a258ba9cbc7b34863c9eed5b27a72", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -26,7 +26,6 @@ use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::misc::type_allowed_to_implement_copy;\n-use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -240,9 +239,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{x}` to\")),\n-                                            )\n-                                            .as_ref(),\n+                                                |x| format!(\"change `{x}` to\"),\n+                                            ),\n                                         suggestion,\n                                         Applicability::Unspecified,\n                                     );\n@@ -270,9 +268,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{x}` to\"))\n-                                            )\n-                                            .as_ref(),\n+                                                |x| format!(\"change `{x}` to\")\n+                                            ),\n                                         suggestion,\n                                         Applicability::Unspecified,\n                                     );"}, {"sha": "4cb41830023396982b68f8a40c8c7a9bec0736c6", "filename": "clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frenamed_lints.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -31,18 +31,20 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::stutter\", \"clippy::module_name_repetitions\"),\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n+    (\"clippy::cast_ref_to_mut\", \"cast_ref_to_mut\"),\n     (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n-    (\"clippy::drop_copy\", \"drop_copy\"),\n-    (\"clippy::drop_ref\", \"drop_ref\"),\n+    (\"clippy::drop_copy\", \"dropping_copy_types\"),\n+    (\"clippy::drop_ref\", \"dropping_references\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n-    (\"clippy::forget_copy\", \"forget_copy\"),\n-    (\"clippy::forget_ref\", \"forget_ref\"),\n+    (\"clippy::forget_copy\", \"forgetting_copy_types\"),\n+    (\"clippy::forget_ref\", \"forgetting_references\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),\n+    (\"clippy::invalid_utf8_in_unchecked\", \"invalid_from_utf8_unchecked\"),\n     (\"clippy::let_underscore_drop\", \"let_underscore_drop\"),\n     (\"clippy::mem_discriminant_non_enum\", \"enum_intrinsics_non_enums\"),\n     (\"clippy::panic_params\", \"non_fmt_panics\"),"}, {"sha": "8658009eba43fb7a6746c3ffae166dd5c1653018", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sug\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_lang_item;\n use clippy_utils::{get_expr_use_or_unification_node, peel_blocks, SpanlessEq};\n-use clippy_utils::{get_parent_expr, is_lint_allowed, match_function_call, method_calls, paths};\n+use clippy_utils::{get_parent_expr, is_lint_allowed, is_path_diagnostic_item, method_calls};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n@@ -255,7 +255,8 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n \n         if_chain! {\n             // Find std::str::converts::from_utf8\n-            if let Some(args) = match_function_call(cx, e, &paths::STR_FROM_UTF8);\n+            if let ExprKind::Call(fun, args) = e.kind;\n+            if is_path_diagnostic_item(cx, fun, sym::str_from_utf8);\n \n             // Find string::as_bytes\n             if let ExprKind::AddrOf(BorrowKind::Ref, _, args) = args[0].kind;"}, {"sha": "5073eb02bd84a049ef2a851af54f1f7e22056e8a", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -163,7 +163,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n             span_lint_and_then(cx, UNNECESSARY_WRAPS, span, lint_msg.as_str(), |diag| {\n                 diag.span_suggestion(\n                     fn_decl.output.span(),\n-                    return_type_sugg_msg.as_str(),\n+                    return_type_sugg_msg,\n                     return_type_sugg,\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "cfe686eb9b01d6c80984c0074d9d9e4a37dd132b", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "cc3183759ae7a2627ef6e12a76278b064149b595", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let substs = if self.substs.is_empty() {\n                     substs\n                 } else {\n-                    EarlyBinder(substs).subst(self.lcx.tcx, self.substs)\n+                    EarlyBinder::bind(substs).subst(self.lcx.tcx, self.substs)\n                 };\n \n                 let result = self"}, {"sha": "210957a916f2974831f355381242820ffd0f2a89", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -46,7 +46,7 @@ fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    cx.struct_span_lint(lint, sp, msg, |diag| {\n+    cx.struct_span_lint(lint, sp, msg.to_string(), |diag| {\n         docs_link(diag, lint);\n         diag\n     });\n@@ -80,7 +80,8 @@ pub fn span_lint_and_help<T: LintContext>(\n     help_span: Option<Span>,\n     help: &str,\n ) {\n-    cx.struct_span_lint(lint, span, msg, |diag| {\n+    cx.struct_span_lint(lint, span, msg.to_string(), |diag| {\n+        let help = help.to_string();\n         if let Some(help_span) = help_span {\n             diag.span_help(help_span, help);\n         } else {\n@@ -122,7 +123,8 @@ pub fn span_lint_and_note<T: LintContext>(\n     note_span: Option<Span>,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, msg, |diag| {\n+    cx.struct_span_lint(lint, span, msg.to_string(), |diag| {\n+        let note = note.to_string();\n         if let Some(note_span) = note_span {\n             diag.span_note(note_span, note);\n         } else {\n@@ -143,15 +145,15 @@ where\n     S: Into<MultiSpan>,\n     F: FnOnce(&mut Diagnostic),\n {\n-    cx.struct_span_lint(lint, sp, msg, |diag| {\n+    cx.struct_span_lint(lint, sp, msg.to_string(), |diag| {\n         f(diag);\n         docs_link(diag, lint);\n         diag\n     });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg.to_string(), |diag| {\n         docs_link(diag, lint);\n         diag\n     });\n@@ -165,7 +167,7 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut Diagnostic),\n ) {\n-    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg, |diag| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg.to_string(), |diag| {\n         f(diag);\n         docs_link(diag, lint);\n         diag\n@@ -202,7 +204,7 @@ pub fn span_lint_and_sugg<T: LintContext>(\n     applicability: Applicability,\n ) {\n     span_lint_and_then(cx, lint, sp, msg, |diag| {\n-        diag.span_suggestion(sp, help, sugg, applicability);\n+        diag.span_suggestion(sp, help.to_string(), sugg, applicability);\n     });\n }\n \n@@ -232,5 +234,5 @@ pub fn multispan_sugg_with_applicability<I>(\n ) where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    diag.multipart_suggestion(help_msg, sugg.into_iter().collect(), applicability);\n+    diag.multipart_suggestion(help_msg.to_string(), sugg.into_iter().collect(), applicability);\n }"}, {"sha": "38ee84fb76c7a642d85533ac1fdd3eb4710de7f2", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -125,8 +125,6 @@ pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];\n pub const STR_BYTES: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"bytes\"];\n pub const STR_CHARS: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"chars\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n-pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n-pub const STR_FROM_UTF8_UNCHECKED: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8_unchecked\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n #[cfg(feature = \"internal\")]"}, {"sha": "f477524eec5cc26890c33ef14554c564cf2900de", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -741,7 +741,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion(span, msg, format!(\"{attr}\\n{indent}\"), applicability);\n+            self.span_suggestion(span, msg.to_string(), format!(\"{attr}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -762,7 +762,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion(span, msg, format!(\"{new_item}\\n{indent}\"), applicability);\n+            self.span_suggestion(span, msg.to_string(), format!(\"{new_item}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -779,7 +779,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n             }\n         }\n \n-        self.span_suggestion(remove_span, msg, \"\", applicability);\n+        self.span_suggestion(remove_span, msg.to_string(), \"\", applicability);\n     }\n }\n "}, {"sha": "4dc906d00db16962454cb75ebd23ccfdac029461", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"declare_clippy_lint\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "0d2e1eee643843201f476e520517b802deace564", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-05-20\"\n+channel = \"nightly-2023-06-02\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "9b0db660c9975927b76d2359cbfb765ed22434e0", "filename": "tests/ui-internal/custom_ice_message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui-internal%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui-internal%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -3,7 +3,7 @@\n //@normalize-stderr-test: \"produce_ice.rs:\\d*:\\d*\" -> \"produce_ice.rs\"\n //@normalize-stderr-test: \"', .*clippy_lints\" -> \"', clippy_lints\"\n //@normalize-stderr-test: \"'rustc'\" -> \"'<unnamed>'\"\n-//@normalize-stderr-test: \"running on .*\" -> \"running on <target>\"\n+//@normalize-stderr-test: \"rustc 1\\.\\d+.* running on .*\" -> \"rustc <version> running on <target>\"\n //@normalize-stderr-test: \"(?ms)query stack during panic:\\n.*end of query stack\\n\" -> \"\"\n \n #![deny(clippy::internal)]"}, {"sha": "b9ea5a64de75e680df11bdcf92d6ff6f5a1a911e", "filename": "tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.stderr?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -5,10 +5,9 @@ error: the compiler unexpectedly panicked. this is a bug.\n \n note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy/issues/new\n \n-note: rustc 1.71.0-nightly (521f4dae1 2023-05-19) running on <target>\n+note: rustc <version> running on <target>\n \n note: compiler flags: -C prefer-dynamic -Z ui-testing\n \n-note: Clippy version: foo\n-\n-thread panicked while panicking. aborting.\n+query stack during panic:\n+thread panicked while processing panic. aborting."}, {"sha": "c48a734ba32c26874a19c58d8c6d959fe9e7f066", "filename": "tests/ui/cast_ref_to_mut.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_ref_to_mut.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,31 +0,0 @@\n-#![warn(clippy::cast_ref_to_mut)]\n-#![allow(clippy::no_effect, clippy::borrow_as_ptr)]\n-\n-extern \"C\" {\n-    // N.B., mutability can be easily incorrect in FFI calls -- as\n-    // in C, the default is mutable pointers.\n-    fn ffi(c: *mut u8);\n-    fn int_ffi(c: *mut i32);\n-}\n-\n-fn main() {\n-    let s = String::from(\"Hello\");\n-    let a = &s;\n-    unsafe {\n-        let num = &3i32;\n-        let mut_num = &mut 3i32;\n-        // Should be warned against\n-        (*(a as *const _ as *mut String)).push_str(\" world\");\n-        *(a as *const _ as *mut _) = String::from(\"Replaced\");\n-        *(a as *const _ as *mut String) += \" world\";\n-        // Shouldn't be warned against\n-        println!(\"{}\", *(num as *const _ as *const i16));\n-        println!(\"{}\", *(mut_num as *mut _ as *mut i16));\n-        ffi(a.as_ptr() as *mut _);\n-        int_ffi(num as *const _ as *mut _);\n-        int_ffi(&3 as *const _ as *mut _);\n-        let mut value = 3;\n-        let value: *const i32 = &mut value;\n-        *(value as *const i16 as *mut i16) = 42;\n-    }\n-}"}, {"sha": "aacd99437d9fc3eadde5b8a60a5b0a11e9de8b30", "filename": "tests/ui/cast_ref_to_mut.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui%2Fcast_ref_to_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui%2Fcast_ref_to_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_ref_to_mut.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,22 +0,0 @@\n-error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n-  --> $DIR/cast_ref_to_mut.rs:18:9\n-   |\n-LL |         (*(a as *const _ as *mut String)).push_str(\" world\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::cast-ref-to-mut` implied by `-D warnings`\n-\n-error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n-  --> $DIR/cast_ref_to_mut.rs:19:9\n-   |\n-LL |         *(a as *const _ as *mut _) = String::from(\"Replaced\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n-  --> $DIR/cast_ref_to_mut.rs:20:9\n-   |\n-LL |         *(a as *const _ as *mut String) += \" world\";\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "3dc096d3197fbe5eba20a5ca73b5a65d72739c7b", "filename": "tests/ui/invalid_utf8_in_unchecked.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_utf8_in_unchecked.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,20 +0,0 @@\n-#![warn(clippy::invalid_utf8_in_unchecked)]\n-\n-fn main() {\n-    // Valid\n-    unsafe {\n-        std::str::from_utf8_unchecked(&[99, 108, 105, 112, 112, 121]);\n-        std::str::from_utf8_unchecked(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n-        std::str::from_utf8_unchecked(b\"clippy\");\n-\n-        let x = 0xA0;\n-        std::str::from_utf8_unchecked(&[0xC0, x]);\n-    }\n-\n-    // Invalid\n-    unsafe {\n-        std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n-        std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n-        std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n-    }\n-}"}, {"sha": "c89cd2758ee9fe407fb359ed45f6232082fd400b", "filename": "tests/ui/invalid_utf8_in_unchecked.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_utf8_in_unchecked.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,22 +0,0 @@\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:16:9\n-   |\n-LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-utf8-in-unchecked` implied by `-D warnings`\n-\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:17:9\n-   |\n-LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'/x82', b'i', b'p', b'p', b'y']);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:18:9\n-   |\n-LL |         std::str::from_utf8_unchecked(b\"cl/x82ippy\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "edb9d87d032ec9e7bb6958e08983bb30adff5891", "filename": "tests/ui/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -5,7 +5,7 @@ use std::mem as memstuff;\n use std::mem::forget as forgetSomething;\n \n #[warn(clippy::mem_forget)]\n-#[allow(forget_copy)]\n+#[allow(forgetting_copy_types)]\n fn main() {\n     let five: i32 = 5;\n     forgetSomething(five);"}, {"sha": "4ef6f0ca92f2dae22939a1ab32a22efa426b1908", "filename": "tests/ui/multiple_unsafe_ops_per_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmultiple_unsafe_ops_per_block.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused)]\n #![allow(deref_nullptr)]\n #![allow(clippy::unnecessary_operation)]\n-#![allow(drop_copy)]\n+#![allow(dropping_copy_types)]\n #![warn(clippy::multiple_unsafe_ops_per_block)]\n \n extern crate proc_macros;"}, {"sha": "0a58100df484c020fad8341d7ffaaf284e8755a2", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -28,16 +28,18 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n+#![allow(cast_ref_to_mut)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n-#![allow(drop_copy)]\n-#![allow(drop_ref)]\n+#![allow(dropping_copy_types)]\n+#![allow(dropping_references)]\n #![allow(for_loops_over_fallibles)]\n-#![allow(forget_copy)]\n-#![allow(forget_ref)]\n+#![allow(forgetting_copy_types)]\n+#![allow(forgetting_references)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n+#![allow(invalid_from_utf8_unchecked)]\n #![allow(let_underscore_drop)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n@@ -74,18 +76,20 @@\n #![warn(clippy::module_name_repetitions)]\n #![warn(clippy::recursive_format_impl)]\n #![warn(clippy::invisible_characters)]\n+#![warn(cast_ref_to_mut)]\n #![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n-#![warn(drop_copy)]\n-#![warn(drop_ref)]\n+#![warn(dropping_copy_types)]\n+#![warn(dropping_references)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n-#![warn(forget_copy)]\n-#![warn(forget_ref)]\n+#![warn(forgetting_copy_types)]\n+#![warn(forgetting_references)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]\n+#![warn(invalid_from_utf8_unchecked)]\n #![warn(let_underscore_drop)]\n #![warn(enum_intrinsics_non_enums)]\n #![warn(non_fmt_panics)]"}, {"sha": "75aec9cf2aca1b01346023d85a80cde9e4916ebe", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -28,16 +28,18 @@\n #![allow(clippy::module_name_repetitions)]\n #![allow(clippy::recursive_format_impl)]\n #![allow(clippy::invisible_characters)]\n+#![allow(cast_ref_to_mut)]\n #![allow(suspicious_double_ref_op)]\n #![allow(drop_bounds)]\n-#![allow(drop_copy)]\n-#![allow(drop_ref)]\n+#![allow(dropping_copy_types)]\n+#![allow(dropping_references)]\n #![allow(for_loops_over_fallibles)]\n-#![allow(forget_copy)]\n-#![allow(forget_ref)]\n+#![allow(forgetting_copy_types)]\n+#![allow(forgetting_references)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n+#![allow(invalid_from_utf8_unchecked)]\n #![allow(let_underscore_drop)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n@@ -74,6 +76,7 @@\n #![warn(clippy::stutter)]\n #![warn(clippy::to_string_in_display)]\n #![warn(clippy::zero_width_space)]\n+#![warn(clippy::cast_ref_to_mut)]\n #![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n #![warn(clippy::drop_copy)]\n@@ -86,6 +89,7 @@\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]\n+#![warn(clippy::invalid_utf8_in_unchecked)]\n #![warn(clippy::let_underscore_drop)]\n #![warn(clippy::mem_discriminant_non_enum)]\n #![warn(clippy::panic_params)]"}, {"sha": "a72c87387a83947569affdde701e755ee0e8032e", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 69, "deletions": 57, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30448e8cf98d4754350db0c959644564f317bc0f/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=30448e8cf98d4754350db0c959644564f317bc0f", "patch": "@@ -1,292 +1,304 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::integer_arithmetic` has been renamed to `clippy::arithmetic_side_effects`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::integer_arithmetic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::arithmetic_side_effects`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n+error: lint `clippy::cast_ref_to_mut` has been renamed to `cast_ref_to_mut`\n+  --> $DIR/rename.rs:79:9\n+   |\n+LL | #![warn(clippy::cast_ref_to_mut)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `cast_ref_to_mut`\n+\n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n-error: lint `clippy::drop_copy` has been renamed to `drop_copy`\n-  --> $DIR/rename.rs:79:9\n+error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::drop_copy)]\n-   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `drop_copy`\n+   |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n-error: lint `clippy::drop_ref` has been renamed to `drop_ref`\n-  --> $DIR/rename.rs:80:9\n+error: lint `clippy::drop_ref` has been renamed to `dropping_references`\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::drop_ref)]\n-   |         ^^^^^^^^^^^^^^^^ help: use the new name: `drop_ref`\n+   |         ^^^^^^^^^^^^^^^^ help: use the new name: `dropping_references`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n-error: lint `clippy::forget_copy` has been renamed to `forget_copy`\n-  --> $DIR/rename.rs:84:9\n+error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::forget_copy)]\n-   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_copy`\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n-error: lint `clippy::forget_ref` has been renamed to `forget_ref`\n-  --> $DIR/rename.rs:85:9\n+error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::forget_ref)]\n-   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_ref`\n+   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:87:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:88:9\n+  --> $DIR/rename.rs:91:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n+error: lint `clippy::invalid_utf8_in_unchecked` has been renamed to `invalid_from_utf8_unchecked`\n+  --> $DIR/rename.rs:92:9\n+   |\n+LL | #![warn(clippy::invalid_utf8_in_unchecked)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_from_utf8_unchecked`\n+\n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:89:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:90:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:91:9\n+  --> $DIR/rename.rs:95:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:92:9\n+  --> $DIR/rename.rs:96:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:93:9\n+  --> $DIR/rename.rs:97:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:94:9\n+  --> $DIR/rename.rs:98:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:95:9\n+  --> $DIR/rename.rs:99:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 48 previous errors\n+error: aborting due to 50 previous errors\n "}]}