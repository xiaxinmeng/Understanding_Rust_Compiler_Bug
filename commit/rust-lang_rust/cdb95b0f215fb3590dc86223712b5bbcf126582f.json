{"sha": "cdb95b0f215fb3590dc86223712b5bbcf126582f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjk1YjBmMjE1ZmIzNTkwZGM4NjIyMzcxMmI1YmJjZjEyNjU4MmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-28T18:35:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-04T15:02:40Z"}, "message": "build up the placeholder indices as we go\n\nAvoids a linear walk over the regions at the end.", "tree": {"sha": "244e251d0ffa3785cda79eaa431d04a7208613d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/244e251d0ffa3785cda79eaa431d04a7208613d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb95b0f215fb3590dc86223712b5bbcf126582f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb95b0f215fb3590dc86223712b5bbcf126582f", "html_url": "https://github.com/rust-lang/rust/commit/cdb95b0f215fb3590dc86223712b5bbcf126582f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb95b0f215fb3590dc86223712b5bbcf126582f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0887456401755b626f08b94f012222fbee4b0323", "url": "https://api.github.com/repos/rust-lang/rust/commits/0887456401755b626f08b94f012222fbee4b0323", "html_url": "https://github.com/rust-lang/rust/commit/0887456401755b626f08b94f012222fbee4b0323"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "723b0e6fff6f8d4219d6c17814f6cf7eb19541e8", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=cdb95b0f215fb3590dc86223712b5bbcf126582f", "patch": "@@ -107,6 +107,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // Run the MIR type-checker.\n     let MirTypeckResults {\n         constraints,\n+        placeholder_indices,\n         universal_region_relations,\n     } = type_check::type_check(\n         infcx,\n@@ -122,6 +123,8 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         elements,\n     );\n \n+    let placeholder_indices = Rc::new(placeholder_indices);\n+\n     if let Some(all_facts) = &mut all_facts {\n         all_facts\n             .universal_region\n@@ -150,6 +153,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     let mut regioncx = RegionInferenceContext::new(\n         var_origins,\n         universal_regions,\n+        placeholder_indices,\n         universal_region_relations,\n         mir,\n         outlives_constraints,"}, {"sha": "4a8f011b606b739e6796223498abd09180c41431", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=cdb95b0f215fb3590dc86223712b5bbcf126582f", "patch": "@@ -183,6 +183,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(crate) fn new(\n         var_infos: VarInfos,\n         universal_regions: Rc<UniversalRegions<'tcx>>,\n+        placeholder_indices: Rc<PlaceholderIndices>,\n         universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n         _mir: &Mir<'tcx>,\n         outlives_constraints: ConstraintSet,\n@@ -196,22 +197,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .map(|info| RegionDefinition::new(info.universe, info.origin))\n             .collect();\n \n-        // Compute the max universe used anywhere amongst the regions.\n-        let placeholder_indices: PlaceholderIndices = definitions\n-            .iter()\n-            .filter_map(|d| match d.origin {\n-                NLLRegionVariableOrigin::Placeholder(placeholder) => Some(placeholder),\n-                _ => None,\n-            })\n-            .collect();\n-\n         let constraints = Rc::new(outlives_constraints); // freeze constraints\n         let constraint_graph = Rc::new(constraints.graph(definitions.len()));\n         let fr_static = universal_regions.fr_static;\n         let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph, fr_static));\n \n         let mut scc_values =\n-            RegionValues::new(elements, universal_regions.len(), placeholder_indices);\n+            RegionValues::new(elements, universal_regions.len(), &placeholder_indices);\n \n         for region in liveness_constraints.rows() {\n             let scc = constraint_sccs.scc(region);"}, {"sha": "07372c19c46c936040bd8bf44f8615f7c5f90fab", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=cdb95b0f215fb3590dc86223712b5bbcf126582f", "patch": "@@ -302,13 +302,13 @@ impl<N: Idx> RegionValues<N> {\n     crate fn new(\n         elements: &Rc<RegionValueElements>,\n         num_universal_regions: usize,\n-        placeholder_indices: PlaceholderIndices,\n+        placeholder_indices: &Rc<PlaceholderIndices>,\n     ) -> Self {\n         let num_placeholders = placeholder_indices.len();\n         Self {\n             elements: elements.clone(),\n             points: SparseBitMatrix::new(elements.num_points),\n-            placeholder_indices: Rc::new(placeholder_indices),\n+            placeholder_indices: placeholder_indices.clone(),\n             free_regions: SparseBitMatrix::new(num_universal_regions),\n             placeholders: SparseBitMatrix::new(num_placeholders),\n         }"}, {"sha": "99ac80862b13e695a28ac1990bfcc41b9adb0cff", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=cdb95b0f215fb3590dc86223712b5bbcf126582f", "patch": "@@ -15,7 +15,9 @@ use borrow_check::borrow_set::BorrowSet;\n use borrow_check::location::LocationTable;\n use borrow_check::nll::constraints::{ConstraintCategory, ConstraintSet, OutlivesConstraint};\n use borrow_check::nll::facts::AllFacts;\n-use borrow_check::nll::region_infer::values::{LivenessValues, RegionValueElements};\n+use borrow_check::nll::region_infer::values::LivenessValues;\n+use borrow_check::nll::region_infer::values::PlaceholderIndices;\n+use borrow_check::nll::region_infer::values::RegionValueElements;\n use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n use borrow_check::nll::renumber;\n use borrow_check::nll::type_check::free_region_relations::{\n@@ -42,13 +44,13 @@ use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, CanonicalTy, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n-use std::{fmt, iter};\n use std::rc::Rc;\n+use std::{fmt, iter};\n use syntax_pos::{Span, DUMMY_SP};\n use transform::{MirPass, MirSource};\n \n-use rustc_data_structures::fx::FxHashSet;\n use either::Either;\n+use rustc_data_structures::fx::FxHashSet;\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n@@ -128,6 +130,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         outlives_constraints: ConstraintSet::default(),\n         type_tests: Vec::default(),\n     };\n+    let mut placeholder_indices = PlaceholderIndices::default();\n \n     let CreateResult {\n         universal_region_relations,\n@@ -147,6 +150,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         borrow_set,\n         all_facts,\n         constraints: &mut constraints,\n+        placeholder_indices: &mut placeholder_indices,\n     };\n \n     type_check_internal(\n@@ -162,12 +166,15 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n             cx.equate_inputs_and_outputs(mir, universal_regions, &normalized_inputs_and_output);\n             liveness::generate(cx, mir, elements, flow_inits, move_data, location_table);\n \n-            cx.borrowck_context.as_mut().map(|bcx| translate_outlives_facts(bcx));\n+            cx.borrowck_context\n+                .as_mut()\n+                .map(|bcx| translate_outlives_facts(bcx));\n         },\n     );\n \n     MirTypeckResults {\n         constraints,\n+        placeholder_indices,\n         universal_region_relations,\n     }\n }\n@@ -210,21 +217,25 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n fn translate_outlives_facts(cx: &mut BorrowCheckContext) {\n     if let Some(facts) = cx.all_facts {\n         let location_table = cx.location_table;\n-        facts.outlives.extend(\n-            cx.constraints.outlives_constraints.iter().flat_map(|constraint: &OutlivesConstraint| {\n-                if let Some(from_location) = constraint.locations.from_location() {\n-                    Either::Left(iter::once((\n-                        constraint.sup,\n-                        constraint.sub,\n-                        location_table.mid_index(from_location),\n-                    )))\n-                } else {\n-                    Either::Right(location_table.all_points().map(move |location| {\n-                       (constraint.sup, constraint.sub, location)\n-                    }))\n-                }\n-            })\n-        );\n+        facts\n+            .outlives\n+            .extend(cx.constraints.outlives_constraints.iter().flat_map(\n+                |constraint: &OutlivesConstraint| {\n+                    if let Some(from_location) = constraint.locations.from_location() {\n+                        Either::Left(iter::once((\n+                            constraint.sup,\n+                            constraint.sub,\n+                            location_table.mid_index(from_location),\n+                        )))\n+                    } else {\n+                        Either::Right(\n+                            location_table\n+                                .all_points()\n+                                .map(move |location| (constraint.sup, constraint.sub, location)),\n+                        )\n+                    }\n+                },\n+            ));\n     }\n }\n \n@@ -718,10 +729,12 @@ struct BorrowCheckContext<'a, 'tcx: 'a> {\n     all_facts: &'a mut Option<AllFacts>,\n     borrow_set: &'a BorrowSet<'tcx>,\n     constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n+    placeholder_indices: &'a mut PlaceholderIndices,\n }\n \n crate struct MirTypeckResults<'tcx> {\n     crate constraints: MirTypeckRegionConstraints<'tcx>,\n+    crate placeholder_indices: PlaceholderIndices,\n     crate universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n }\n "}, {"sha": "4e8dbf8498e2a643b421333590d132e72f04ff37", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb95b0f215fb3590dc86223712b5bbcf126582f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=cdb95b0f215fb3590dc86223712b5bbcf126582f", "patch": "@@ -217,6 +217,9 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n \n     fn next_placeholder_region(&mut self, placeholder: ty::Placeholder) -> ty::Region<'tcx> {\n         let origin = NLLRegionVariableOrigin::Placeholder(placeholder);\n+        if let Some(borrowck_context) = &mut self.borrowck_context {\n+            borrowck_context.placeholder_indices.insert(placeholder);\n+        }\n         self.infcx.next_nll_region_var(origin)\n     }\n "}]}