{"sha": "3dab259cb9f9ccdce2e86e45dad565f5e2123428", "node_id": "C_kwDOAAsO6NoAKDNkYWIyNTljYjlmOWNjZGNlMmU4NmU0NWRhZDU2NWY1ZTIxMjM0Mjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-02T18:50:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-11T17:40:54Z"}, "message": "Split super_predicates_that_define_assoc_type query from super_predicates_of", "tree": {"sha": "b8a8b96ab305d977d6b542745d86171a2dd033d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8a8b96ab305d977d6b542745d86171a2dd033d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dab259cb9f9ccdce2e86e45dad565f5e2123428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dab259cb9f9ccdce2e86e45dad565f5e2123428", "html_url": "https://github.com/rust-lang/rust/commit/3dab259cb9f9ccdce2e86e45dad565f5e2123428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dab259cb9f9ccdce2e86e45dad565f5e2123428/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45749b21b7fd836f6c4f11dd40376f7c83e2791b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45749b21b7fd836f6c4f11dd40376f7c83e2791b", "html_url": "https://github.com/rust-lang/rust/commit/45749b21b7fd836f6c4f11dd40376f7c83e2791b"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "e8f05ebd610750c164c6e71b9872298abb648d9b", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=3dab259cb9f9ccdce2e86e45dad565f5e2123428", "patch": "@@ -64,8 +64,9 @@ pub fn provide(providers: &mut Providers) {\n         predicates_defined_on,\n         explicit_predicates_of: predicates_of::explicit_predicates_of,\n         super_predicates_of: predicates_of::super_predicates_of,\n-        super_predicates_that_define_assoc_type:\n-            predicates_of::super_predicates_that_define_assoc_type,\n+        super_predicates_that_define_assoc_type: |tcx, (def_id, assoc_name)| {\n+            predicates_of::super_predicates_that_define_assoc_type(tcx, (def_id, Some(assoc_name)))\n+        },\n         trait_explicit_predicates_and_bounds: predicates_of::trait_explicit_predicates_and_bounds,\n         type_param_predicates: predicates_of::type_param_predicates,\n         trait_def,"}, {"sha": "e758fe95d9c294248759d03c532858c539a47bbd", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=3dab259cb9f9ccdce2e86e45dad565f5e2123428", "patch": "@@ -1749,8 +1749,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             if trait_defines_associated_type_named(def_id) {\n                 break Some(bound_vars.into_iter().collect());\n             }\n-            let predicates =\n-                tcx.super_predicates_that_define_assoc_type((def_id, Some(assoc_name)));\n+            let predicates = tcx.super_predicates_that_define_assoc_type((def_id, assoc_name));\n             let obligations = predicates.predicates.iter().filter_map(|&(pred, _)| {\n                 let bound_predicate = pred.kind();\n                 match bound_predicate.skip_binder() {"}, {"sha": "5ea41177c88af2d0020ce82738ef0ea38e922d26", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=3dab259cb9f9ccdce2e86e45dad565f5e2123428", "patch": "@@ -381,10 +381,8 @@ pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n         while let Some(trait_ref) = stack.pop() {\n             let anon_trait_ref = tcx.anonymize_bound_vars(trait_ref);\n             if visited.insert(anon_trait_ref) {\n-                let super_predicates = tcx.super_predicates_that_define_assoc_type((\n-                    trait_ref.def_id(),\n-                    Some(assoc_name),\n-                ));\n+                let super_predicates =\n+                    tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), assoc_name));\n                 for (super_predicate, _) in super_predicates.predicates {\n                     let subst_predicate = super_predicate.subst_supertrait(tcx, &trait_ref);\n                     if let Some(binder) = subst_predicate.to_opt_poly_trait_pred() {"}, {"sha": "3b0eec683de0e67bbc526047901ed032e49af012", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=3dab259cb9f9ccdce2e86e45dad565f5e2123428", "patch": "@@ -230,7 +230,7 @@ impl Key for (LocalDefId, LocalDefId) {\n     }\n }\n \n-impl Key for (DefId, Option<Ident>) {\n+impl Key for (DefId, Ident) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {"}, {"sha": "36964b097c9348a91f192ee925c383b3904bd9eb", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dab259cb9f9ccdce2e86e45dad565f5e2123428/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3dab259cb9f9ccdce2e86e45dad565f5e2123428", "patch": "@@ -631,10 +631,10 @@ rustc_queries! {\n     /// returns the full set of predicates. If `Some<Ident>`, then the query returns only the\n     /// subset of super-predicates that reference traits that define the given associated type.\n     /// This is used to avoid cycles in resolving types like `T::Item`.\n-    query super_predicates_that_define_assoc_type(key: (DefId, Option<rustc_span::symbol::Ident>)) -> ty::GenericPredicates<'tcx> {\n-        desc { |tcx| \"computing the super traits of `{}`{}\",\n+    query super_predicates_that_define_assoc_type(key: (DefId, rustc_span::symbol::Ident)) -> ty::GenericPredicates<'tcx> {\n+        desc { |tcx| \"computing the super traits of `{}` with associated type name `{}`\",\n             tcx.def_path_str(key.0),\n-            if let Some(assoc_name) = key.1 { format!(\" with associated type name `{}`\", assoc_name) } else { \"\".to_string() },\n+            key.1\n         }\n     }\n "}]}