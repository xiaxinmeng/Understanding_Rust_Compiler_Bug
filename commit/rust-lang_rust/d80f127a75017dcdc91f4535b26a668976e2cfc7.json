{"sha": "d80f127a75017dcdc91f4535b26a668976e2cfc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MGYxMjdhNzUwMTdkY2RjOTFmNDUzNWIyNmE2Njg5NzZlMmNmYzc=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-19T21:58:42Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-19T22:11:40Z"}, "message": "Avoid panic_bounds_check in fmt::write.\n\nWriting any fmt::Arguments would trigger the inclusion of usize\nformatting and padding code in the resulting binary, because indexing\nused in fmt::write would generate code using panic_bounds_check, which\nprints the index and length.\n\nThese bounds checks are not necessary, as fmt::Arguments never contains\nany out-of-bounds indexes.\n\nThis change replaces them with unsafe get_unchecked, to reduce the\namount of generated code, which is especially important for embedded\ntargets.", "tree": {"sha": "1ebf475d384e1b50ab4f657720b308443d16faa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ebf475d384e1b50ab4f657720b308443d16faa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d80f127a75017dcdc91f4535b26a668976e2cfc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d80f127a75017dcdc91f4535b26a668976e2cfc7", "html_url": "https://github.com/rust-lang/rust/commit/d80f127a75017dcdc91f4535b26a668976e2cfc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d80f127a75017dcdc91f4535b26a668976e2cfc7/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad268bd63894953ab7038f082aa744d6a832639b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad268bd63894953ab7038f082aa744d6a832639b", "html_url": "https://github.com/rust-lang/rust/commit/ad268bd63894953ab7038f082aa744d6a832639b"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "04edf4611ecc32d9656ad5b05d6fc41e579a1590", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d80f127a75017dcdc91f4535b26a668976e2cfc7/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d80f127a75017dcdc91f4535b26a668976e2cfc7/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=d80f127a75017dcdc91f4535b26a668976e2cfc7", "patch": "@@ -1082,7 +1082,9 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n             // a string piece.\n             for (arg, piece) in fmt.iter().zip(args.pieces.iter()) {\n                 formatter.buf.write_str(*piece)?;\n-                run(&mut formatter, arg, &args.args)?;\n+                // SAFETY: arg and args.args come from the same Arguments,\n+                // which guarantees the indexes are always within bounds.\n+                unsafe { run(&mut formatter, arg, &args.args) }?;\n                 idx += 1;\n             }\n         }\n@@ -1096,25 +1098,36 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     Ok(())\n }\n \n-fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>]) -> Result {\n+unsafe fn run(fmt: &mut Formatter<'_>, arg: &rt::v1::Argument, args: &[ArgumentV1<'_>]) -> Result {\n     fmt.fill = arg.format.fill;\n     fmt.align = arg.format.align;\n     fmt.flags = arg.format.flags;\n-    fmt.width = getcount(args, &arg.format.width);\n-    fmt.precision = getcount(args, &arg.format.precision);\n+    // SAFETY: arg and args come from the same Arguments,\n+    // which guarantees the indexes are always within bounds.\n+    unsafe {\n+        fmt.width = getcount(args, &arg.format.width);\n+        fmt.precision = getcount(args, &arg.format.precision);\n+    }\n \n     // Extract the correct argument\n-    let value = args[arg.position];\n+\n+    // SAFETY: arg and args come from the same Arguments,\n+    // which guarantees its index is always within bounds.\n+    let value = unsafe { args.get_unchecked(arg.position) };\n \n     // Then actually do some printing\n     (value.formatter)(value.value, fmt)\n }\n \n-fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {\n+unsafe fn getcount(args: &[ArgumentV1<'_>], cnt: &rt::v1::Count) -> Option<usize> {\n     match *cnt {\n         rt::v1::Count::Is(n) => Some(n),\n         rt::v1::Count::Implied => None,\n-        rt::v1::Count::Param(i) => args[i].as_usize(),\n+        rt::v1::Count::Param(i) => {\n+            // SAFETY: cnt and args come from the same Arguments,\n+            // which guarantees this index is always within bounds.\n+            unsafe { args.get_unchecked(i).as_usize() }\n+        }\n     }\n }\n "}]}