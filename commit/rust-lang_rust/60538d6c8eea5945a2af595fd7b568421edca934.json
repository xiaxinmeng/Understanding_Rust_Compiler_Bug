{"sha": "60538d6c8eea5945a2af595fd7b568421edca934", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNTM4ZDZjOGVlYTU5NDVhMmFmNTk1ZmQ3YjU2ODQyMWVkY2E5MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-02T15:30:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-02T15:30:58Z"}, "message": "Auto merge of #5559 - alex-700:fix-while-let-on-iterator-fp, r=flip1995\n\nFix FP on while-let-on-iterator\n\n- fix `is_refutable` for slice patterns\n- fix `is_refutable` for bindings\n- add some TODO-s for cases, which can not be fixed easily\n\nfixes #3780\n\nchangelog: fix FP on while-let-on-iterator for arrays and bindings", "tree": {"sha": "284c2c4099c51921de5341a02cf3346ed1bac54d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/284c2c4099c51921de5341a02cf3346ed1bac54d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60538d6c8eea5945a2af595fd7b568421edca934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60538d6c8eea5945a2af595fd7b568421edca934", "html_url": "https://github.com/rust-lang/rust/commit/60538d6c8eea5945a2af595fd7b568421edca934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60538d6c8eea5945a2af595fd7b568421edca934/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9088f2873300c98d35d4d028d53e474b55a96b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9088f2873300c98d35d4d028d53e474b55a96b", "html_url": "https://github.com/rust-lang/rust/commit/cc9088f2873300c98d35d4d028d53e474b55a96b"}, {"sha": "d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c", "html_url": "https://github.com/rust-lang/rust/commit/d0c1f8ada2306801f2a6ce193e1f9f75471dbb3c"}], "stats": {"total": 178, "additions": 160, "deletions": 18}, "files": [{"sha": "1c7b40fa9087b32b46ce30e1c24df7b08b4f3b5c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/60538d6c8eea5945a2af595fd7b568421edca934/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60538d6c8eea5945a2af595fd7b568421edca934/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=60538d6c8eea5945a2af595fd7b568421edca934", "patch": "@@ -933,6 +933,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_, '_>, expr: &Exp\n }\n \n /// Returns `true` if a pattern is refutable.\n+// TODO: should be implemented using rustc/mir_build/hair machinery\n pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat<'_>) -> bool {\n     fn is_enum_variant(cx: &LateContext<'_, '_>, qpath: &QPath<'_>, id: HirId) -> bool {\n         matches!(\n@@ -946,27 +947,34 @@ pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat<'_>) -> bool {\n     }\n \n     match pat.kind {\n-        PatKind::Binding(..) | PatKind::Wild => false,\n+        PatKind::Wild => false,\n+        PatKind::Binding(_, _, _, pat) => pat.map_or(false, |pat| is_refutable(cx, pat)),\n         PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => is_refutable(cx, pat),\n         PatKind::Lit(..) | PatKind::Range(..) => true,\n         PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n-        PatKind::Or(ref pats) | PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Or(ref pats) => {\n+            // TODO: should be the honest check, that pats is exhaustive set\n+            are_refutable(cx, pats.iter().map(|pat| &**pat))\n+        },\n+        PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n         PatKind::Struct(ref qpath, ref fields, _) => {\n-            if is_enum_variant(cx, qpath, pat.hir_id) {\n-                true\n-            } else {\n-                are_refutable(cx, fields.iter().map(|field| &*field.pat))\n-            }\n+            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| &*field.pat))\n         },\n         PatKind::TupleStruct(ref qpath, ref pats, _) => {\n-            if is_enum_variant(cx, qpath, pat.hir_id) {\n-                true\n-            } else {\n-                are_refutable(cx, pats.iter().map(|pat| &**pat))\n-            }\n+            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats.iter().map(|pat| &**pat))\n         },\n         PatKind::Slice(ref head, ref middle, ref tail) => {\n-            are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat))\n+            match &cx.tables.node_type(pat.hir_id).kind {\n+                ty::Slice(..) => {\n+                    // [..] is the only irrefutable slice pattern.\n+                    !head.is_empty() || middle.is_none() || !tail.is_empty()\n+                },\n+                ty::Array(..) => are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat)),\n+                _ => {\n+                    // unreachable!()\n+                    true\n+                },\n+            }\n         },\n     }\n }"}, {"sha": "e99c98ac79f2a7f4fa97bee33bb41ebb7fba7ef9", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/60538d6c8eea5945a2af595fd7b568421edca934/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/60538d6c8eea5945a2af595fd7b568421edca934/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=60538d6c8eea5945a2af595fd7b568421edca934", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::while_let_on_iterator)]\n #![allow(clippy::never_loop, unreachable_code, unused_mut)]\n+#![feature(or_patterns)]\n \n fn base() {\n     let mut iter = 1..20;\n@@ -77,6 +78,62 @@ fn refutable() {\n     // */\n }\n \n+fn refutable2() {\n+    // Issue 3780\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.windows(2);\n+        while let Some([x, y]) = it.next() {\n+            println!(\"x: {}\", x);\n+            println!(\"y: {}\", y);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([x, ..]) = it.next() {\n+            println!(\"x: {}\", x);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([.., y]) = it.next() {\n+            println!(\"y: {}\", y);\n+        }\n+\n+        let mut it = v.windows(2);\n+        for [..] in it {}\n+\n+        let v = vec![[1], [2], [3]];\n+        let mut it = v.iter();\n+        while let Some([1]) = it.next() {}\n+\n+        let mut it = v.iter();\n+        for [_x] in it {}\n+    }\n+\n+    // binding\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.iter();\n+        while let Some(x @ 1) = it.next() {\n+            println!(\"{}\", x);\n+        }\n+\n+        let v = vec![[1], [2], [3]];\n+        let mut it = v.iter();\n+        for x @ [_] in it {\n+            println!(\"{:?}\", x);\n+        }\n+    }\n+\n+    // false negative\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.iter().map(Some);\n+        while let Some(Some(_) | None) = it.next() {\n+            println!(\"1\");\n+        }\n+    }\n+}\n+\n fn nested_loops() {\n     let a = [42, 1337];\n     let mut y = a.iter();\n@@ -152,6 +209,7 @@ fn issue1654() {\n fn main() {\n     base();\n     refutable();\n+    refutable2();\n     nested_loops();\n     issue1121();\n     issue2965();"}, {"sha": "ba13172428e136bc47d8ba47f17387e310133729", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/60538d6c8eea5945a2af595fd7b568421edca934/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60538d6c8eea5945a2af595fd7b568421edca934/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=60538d6c8eea5945a2af595fd7b568421edca934", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::while_let_on_iterator)]\n #![allow(clippy::never_loop, unreachable_code, unused_mut)]\n+#![feature(or_patterns)]\n \n fn base() {\n     let mut iter = 1..20;\n@@ -77,6 +78,62 @@ fn refutable() {\n     // */\n }\n \n+fn refutable2() {\n+    // Issue 3780\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.windows(2);\n+        while let Some([x, y]) = it.next() {\n+            println!(\"x: {}\", x);\n+            println!(\"y: {}\", y);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([x, ..]) = it.next() {\n+            println!(\"x: {}\", x);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([.., y]) = it.next() {\n+            println!(\"y: {}\", y);\n+        }\n+\n+        let mut it = v.windows(2);\n+        while let Some([..]) = it.next() {}\n+\n+        let v = vec![[1], [2], [3]];\n+        let mut it = v.iter();\n+        while let Some([1]) = it.next() {}\n+\n+        let mut it = v.iter();\n+        while let Some([_x]) = it.next() {}\n+    }\n+\n+    // binding\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.iter();\n+        while let Some(x @ 1) = it.next() {\n+            println!(\"{}\", x);\n+        }\n+\n+        let v = vec![[1], [2], [3]];\n+        let mut it = v.iter();\n+        while let Some(x @ [_]) = it.next() {\n+            println!(\"{:?}\", x);\n+        }\n+    }\n+\n+    // false negative\n+    {\n+        let v = vec![1, 2, 3];\n+        let mut it = v.iter().map(Some);\n+        while let Some(Some(_) | None) = it.next() {\n+            println!(\"1\");\n+        }\n+    }\n+}\n+\n fn nested_loops() {\n     let a = [42, 1337];\n     let mut y = a.iter();\n@@ -152,6 +209,7 @@ fn issue1654() {\n fn main() {\n     base();\n     refutable();\n+    refutable2();\n     nested_loops();\n     issue1121();\n     issue2965();"}, {"sha": "aa980d9965c76b78e0d0f85819d9e5e19a2ac411", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/60538d6c8eea5945a2af595fd7b568421edca934/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60538d6c8eea5945a2af595fd7b568421edca934/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=60538d6c8eea5945a2af595fd7b568421edca934", "patch": "@@ -1,28 +1,46 @@\n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:8:5\n+  --> $DIR/while_let_on_iterator.rs:9:5\n    |\n LL |     while let Option::Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n    |\n    = note: `-D clippy::while-let-on-iterator` implied by `-D warnings`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:13:5\n+  --> $DIR/while_let_on_iterator.rs:14:5\n    |\n LL |     while let Some(x) = iter.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:18:5\n+  --> $DIR/while_let_on_iterator.rs:19:5\n    |\n LL |     while let Some(_) = iter.next() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in iter`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:97:9\n+  --> $DIR/while_let_on_iterator.rs:102:9\n+   |\n+LL |         while let Some([..]) = it.next() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [..] in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:109:9\n+   |\n+LL |         while let Some([_x]) = it.next() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for [_x] in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:122:9\n+   |\n+LL |         while let Some(x @ [_]) = it.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x @ [_] in it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:154:9\n    |\n LL |         while let Some(_) = y.next() {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in y`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 7 previous errors\n "}]}