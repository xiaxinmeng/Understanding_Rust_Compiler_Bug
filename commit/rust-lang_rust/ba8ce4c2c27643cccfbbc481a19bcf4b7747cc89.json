{"sha": "ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhOGNlNGMyYzI3NjQzY2NjZmJiYzQ4MWExOWJjZjRiNzc0N2NjODk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T01:32:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T01:32:16Z"}, "message": "rollup merge of #22319: huonw/send-is-not-static\n\nConflicts:\n\tsrc/libstd/sync/task_pool.rs\n\tsrc/libstd/thread.rs\n\tsrc/libtest/lib.rs\n\tsrc/test/bench/shootout-reverse-complement.rs\n\tsrc/test/bench/shootout-spectralnorm.rs", "tree": {"sha": "158a22ef66d1d80f0e9e5d01dffb13496af236c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/158a22ef66d1d80f0e9e5d01dffb13496af236c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "html_url": "https://github.com/rust-lang/rust/commit/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ac3799b75780f8c18bc38331403e1e517b89bab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac3799b75780f8c18bc38331403e1e517b89bab", "html_url": "https://github.com/rust-lang/rust/commit/6ac3799b75780f8c18bc38331403e1e517b89bab"}, {"sha": "7a14f4994eb4527a38d02c61fa83822df02f7b5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a14f4994eb4527a38d02c61fa83822df02f7b5d", "html_url": "https://github.com/rust-lang/rust/commit/7a14f4994eb4527a38d02c61fa83822df02f7b5d"}], "stats": {"total": 528, "additions": 231, "deletions": 297}, "files": [{"sha": "7e8472b91dc24bf2eaf4b99906e3f8777196e46a", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -32,9 +32,19 @@ use clone::Clone;\n            reason = \"will be overhauled with new lifetime rules; see RFC 458\")]\n #[lang=\"send\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n+#[cfg(stage0)] // SNAP ac134f7 remove after stage0\n pub unsafe trait Send: 'static {\n     // empty.\n }\n+/// Types able to be transferred across thread boundaries.\n+#[unstable(feature = \"core\",\n+           reason = \"will be overhauled with new lifetime rules; see RFC 458\")]\n+#[lang=\"send\"]\n+#[rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"]\n+#[cfg(not(stage0))]\n+pub unsafe trait Send {\n+    // empty.\n+}\n \n /// Types with a constant size known at compile-time.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -424,3 +434,11 @@ pub struct NoCopy;\n #[lang=\"managed_bound\"]\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Managed;\n+\n+#[cfg(not(stage0))] // SNAP ac134f7 remove this attribute after the next snapshot\n+mod impls {\n+    use super::{Send, Sync, Sized};\n+\n+    unsafe impl<'a, T: Sync + ?Sized> Send for &'a T {}\n+    unsafe impl<'a, T: Send + ?Sized> Send for &'a mut T {}\n+}"}, {"sha": "061557eb7dccd2311c51584170c41c308ade61d6", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -20,7 +20,7 @@ use self::EvaluationResult::*;\n use super::{DerivedObligationCause};\n use super::{project};\n use super::project::Normalized;\n-use super::{PredicateObligation, Obligation, TraitObligation, ObligationCause};\n+use super::{PredicateObligation, TraitObligation, ObligationCause};\n use super::{ObligationCauseCode, BuiltinDerivedObligation};\n use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch};\n use super::{Selection};\n@@ -34,7 +34,7 @@ use super::{util};\n use middle::fast_reject;\n use middle::mem_categorization::Typer;\n use middle::subst::{Subst, Substs, TypeSpace, VecPerParamSpace};\n-use middle::ty::{self, AsPredicate, RegionEscape, ToPolyTraitRef, Ty};\n+use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener};\n use middle::ty_fold::TypeFoldable;\n@@ -1459,22 +1459,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                     ty::BoundSync |\n                     ty::BoundSend => {\n-                        // Note: technically, a region pointer is only\n-                        // sendable if it has lifetime\n-                        // `'static`. However, we don't take regions\n-                        // into account when doing trait matching:\n-                        // instead, when we decide that `T : Send`, we\n-                        // will register a separate constraint with\n-                        // the region inferencer that `T : 'static`\n-                        // holds as well (because the trait `Send`\n-                        // requires it). This will ensure that there\n-                        // is no borrowed data in `T` (or else report\n-                        // an inference error). The reason we do it\n-                        // this way is that we do not yet *know* what\n-                        // lifetime the borrowed reference has, since\n-                        // we haven't finished running inference -- in\n-                        // other words, there's a kind of\n-                        // chicken-and-egg problem.\n                         Ok(If(vec![referent_ty]))\n                     }\n                 }\n@@ -1817,21 +1801,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             })\n         }).collect::<Result<_, _>>();\n-        let mut obligations = match obligations {\n+        let obligations = match obligations {\n             Ok(o) => o,\n             Err(ErrorReported) => Vec::new()\n         };\n \n-        // as a special case, `Send` requires `'static`\n-        if bound == ty::BoundSend {\n-            obligations.push(Obligation {\n-                cause: obligation.cause.clone(),\n-                recursion_depth: obligation.recursion_depth+1,\n-                predicate: ty::Binder(ty::OutlivesPredicate(obligation.self_ty(),\n-                                                            ty::ReStatic)).as_predicate(),\n-            });\n-        }\n-\n         let obligations = VecPerParamSpace::new(obligations, Vec::new(), Vec::new());\n \n         debug!(\"vtable_builtin_data: obligations={}\","}, {"sha": "426101e858a8985e00b83c3618052c7d85d1888f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -697,9 +697,8 @@ impl<'tcx> UserString<'tcx> for ty::TyTrait<'tcx> {\n         }\n \n         // Region, if not obviously implied by builtin bounds.\n-        if bounds.region_bound != ty::ReStatic ||\n-            !bounds.builtin_bounds.contains(&ty::BoundSend)\n-        { // Region bound is implied by builtin bounds:\n+        if bounds.region_bound != ty::ReStatic {\n+            // Region bound is implied by builtin bounds:\n             components.push(bounds.region_bound.user_string(tcx));\n         }\n "}, {"sha": "6b32d936c05bec0e8352b373dbdf88ec81c20dfa", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -287,7 +287,7 @@ mod tests {\n \n     pub fn smalltest<F,G>(server: F, client: G)\n         where F : FnOnce(UnixStream), F : Send,\n-              G : FnOnce(UnixStream), G : Send\n+              G : FnOnce(UnixStream), G : Send + 'static\n     {\n         let path1 = next_test_unix();\n         let path2 = path1.clone();"}, {"sha": "5baa095d35985c7b44aed14c10f4d49359f113ce", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -458,7 +458,7 @@ impl Child {\n     /// the parent waits for the child to exit.\n     pub fn wait_with_output(mut self) -> io::Result<Output> {\n         drop(self.stdin.take());\n-        fn read<T: Read + Send>(stream: Option<T>) -> Receiver<io::Result<Vec<u8>>> {\n+        fn read<T: Read + Send + 'static>(stream: Option<T>) -> Receiver<io::Result<Vec<u8>>> {\n             let (tx, rx) = channel();\n             match stream {\n                 Some(stream) => {"}, {"sha": "72486fc55d48ee91ef09c3e4a73b3908c9d395d0", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -20,7 +20,7 @@ use mem;\n use thunk::Thunk;\n use sys_common::mutex::{Mutex, MUTEX_INIT};\n \n-type Queue = Vec<Thunk>;\n+type Queue = Vec<Thunk<'static>>;\n \n // NB these are specifically not types from `std::sync` as they currently rely\n // on poisoning and this module needs to operate at a lower level than requiring\n@@ -65,7 +65,7 @@ pub fn cleanup() {\n     }\n }\n \n-pub fn push(f: Thunk) {\n+pub fn push(f: Thunk<'static>) {\n     unsafe {\n         LOCK.lock();\n         init();"}, {"sha": "42cca73e5e24128e2b40b92b64615277aa01da82", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -148,7 +148,7 @@ fn lang_start(main: *const u8, argc: int, argv: *const *const u8) -> int {\n ///\n /// It is forbidden for procedures to register more `at_exit` handlers when they\n /// are running, and doing so will lead to a process abort.\n-pub fn at_exit<F:FnOnce()+Send>(f: F) {\n+pub fn at_exit<F:FnOnce()+Send+'static>(f: F) {\n     at_exit_imp::push(Thunk::new(f));\n }\n "}, {"sha": "1f5eb3af695be8e09040c92463db3ce950031e97", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -74,7 +74,7 @@ use rt::libunwind as uw;\n \n struct Exception {\n     uwe: uw::_Unwind_Exception,\n-    cause: Option<Box<Any + Send>>,\n+    cause: Option<Box<Any + Send + 'static>>,\n }\n \n pub type Callback = fn(msg: &(Any + Send), file: &'static str, line: uint);\n@@ -161,7 +161,7 @@ pub fn panicking() -> bool {\n #[inline(never)]\n #[no_mangle]\n #[allow(private_no_mangle_fns)]\n-fn rust_panic(cause: Box<Any + Send>) -> ! {\n+fn rust_panic(cause: Box<Any + Send + 'static>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n     unsafe {"}, {"sha": "d60e27388086444a4323c8f53525a8046b28ecec", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -46,7 +46,7 @@ pub struct Future<A> {\n }\n \n enum FutureState<A> {\n-    Pending(Thunk<(),A>),\n+    Pending(Thunk<'static,(),A>),\n     Evaluating,\n     Forced(A)\n }\n@@ -103,7 +103,7 @@ impl<A> Future<A> {\n     }\n \n     pub fn from_fn<F>(f: F) -> Future<A>\n-        where F : FnOnce() -> A, F : Send\n+        where F : FnOnce() -> A, F : Send + 'static\n     {\n         /*!\n          * Create a future from a function.\n@@ -117,7 +117,7 @@ impl<A> Future<A> {\n     }\n }\n \n-impl<A:Send> Future<A> {\n+impl<A:Send+'static> Future<A> {\n     pub fn from_receiver(rx: Receiver<A>) -> Future<A> {\n         /*!\n          * Create a future from a port\n@@ -132,7 +132,7 @@ impl<A:Send> Future<A> {\n     }\n \n     pub fn spawn<F>(blk: F) -> Future<A>\n-        where F : FnOnce() -> A, F : Send\n+        where F : FnOnce() -> A, F : Send + 'static\n     {\n         /*!\n          * Create a future from a unique closure."}, {"sha": "410d3c0ecd5e459cb9c84c6e68386dfd0beaaa46", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -345,7 +345,7 @@ pub struct Receiver<T> {\n \n // The receiver port can be sent from place to place, so long as it\n // is not used to receive non-sendable things.\n-unsafe impl<T:Send> Send for Receiver<T> { }\n+unsafe impl<T: Send + 'static> Send for Receiver<T> { }\n \n /// An iterator over messages on a receiver, this iterator will block\n /// whenever `next` is called, waiting for a new message, and `None` will be\n@@ -364,7 +364,7 @@ pub struct Sender<T> {\n \n // The send port can be sent from place to place, so long as it\n // is not used to send non-sendable things.\n-unsafe impl<T:Send> Send for Sender<T> { }\n+unsafe impl<T: Send + 'static> Send for Sender<T> { }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n@@ -373,7 +373,7 @@ pub struct SyncSender<T> {\n     inner: Arc<UnsafeCell<sync::Packet<T>>>,\n }\n \n-unsafe impl<T:Send> Send for SyncSender<T> {}\n+unsafe impl<T: Send + 'static> Send for SyncSender<T> {}\n \n impl<T> !Sync for SyncSender<T> {}\n \n@@ -485,7 +485,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// println!(\"{:?}\", rx.recv().unwrap());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n+pub fn channel<T: Send + 'static>() -> (Sender<T>, Receiver<T>) {\n     let a = Arc::new(UnsafeCell::new(oneshot::Packet::new()));\n     (Sender::new(Flavor::Oneshot(a.clone())), Receiver::new(Flavor::Oneshot(a)))\n }\n@@ -525,7 +525,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// assert_eq!(rx.recv().unwrap(), 2);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n+pub fn sync_channel<T: Send + 'static>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n     let a = Arc::new(UnsafeCell::new(sync::Packet::new(bound)));\n     (SyncSender::new(a.clone()), Receiver::new(Flavor::Sync(a)))\n }\n@@ -534,7 +534,7 @@ pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n // Sender\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> Sender<T> {\n+impl<T: Send + 'static> Sender<T> {\n     fn new(inner: Flavor<T>) -> Sender<T> {\n         Sender {\n             inner: UnsafeCell::new(inner),\n@@ -616,7 +616,7 @@ impl<T: Send> Sender<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Clone for Sender<T> {\n+impl<T: Send + 'static> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let (packet, sleeper, guard) = match *unsafe { self.inner() } {\n             Flavor::Oneshot(ref p) => {\n@@ -662,7 +662,7 @@ impl<T: Send> Clone for Sender<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Sender<T> {\n+impl<T: Send + 'static> Drop for Sender<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n             Flavor::Oneshot(ref mut p) => unsafe { (*p.get()).drop_chan(); },\n@@ -677,7 +677,7 @@ impl<T: Send> Drop for Sender<T> {\n // SyncSender\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> SyncSender<T> {\n+impl<T: Send + 'static> SyncSender<T> {\n     fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner }\n     }\n@@ -717,7 +717,7 @@ impl<T: Send> SyncSender<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Clone for SyncSender<T> {\n+impl<T: Send + 'static> Clone for SyncSender<T> {\n     fn clone(&self) -> SyncSender<T> {\n         unsafe { (*self.inner.get()).clone_chan(); }\n         return SyncSender::new(self.inner.clone());\n@@ -726,7 +726,7 @@ impl<T: Send> Clone for SyncSender<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for SyncSender<T> {\n+impl<T: Send + 'static> Drop for SyncSender<T> {\n     fn drop(&mut self) {\n         unsafe { (*self.inner.get()).drop_chan(); }\n     }\n@@ -736,7 +736,7 @@ impl<T: Send> Drop for SyncSender<T> {\n // Receiver\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> Receiver<T> {\n+impl<T: Send + 'static> Receiver<T> {\n     fn new(inner: Flavor<T>) -> Receiver<T> {\n         Receiver { inner: UnsafeCell::new(inner) }\n     }\n@@ -855,7 +855,7 @@ impl<T: Send> Receiver<T> {\n     }\n }\n \n-impl<T: Send> select::Packet for Receiver<T> {\n+impl<T: Send + 'static> select::Packet for Receiver<T> {\n     fn can_recv(&self) -> bool {\n         loop {\n             let new_port = match *unsafe { self.inner() } {\n@@ -942,15 +942,15 @@ impl<T: Send> select::Packet for Receiver<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: Send> Iterator for Iter<'a, T> {\n+impl<'a, T: Send + 'static> Iterator for Iter<'a, T> {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Receiver<T> {\n+impl<T: Send + 'static> Drop for Receiver<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n             Flavor::Oneshot(ref mut p) => unsafe { (*p.get()).drop_port(); },"}, {"sha": "0a4ff8769abf49ba675a4e80ebf24459913c4e59", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -78,7 +78,7 @@ pub struct Queue<T> {\n }\n \n unsafe impl<T:Send> Send for Queue<T> { }\n-unsafe impl<T:Send> Sync for Queue<T> { }\n+unsafe impl<T: Send + 'static> Sync for Queue<T> { }\n \n impl<T> Node<T> {\n     unsafe fn new(v: Option<T>) -> *mut Node<T> {\n@@ -89,7 +89,7 @@ impl<T> Node<T> {\n     }\n }\n \n-impl<T: Send> Queue<T> {\n+impl<T: Send + 'static> Queue<T> {\n     /// Creates a new queue that is safe to share among multiple producers and\n     /// one consumer.\n     pub fn new() -> Queue<T> {\n@@ -140,7 +140,7 @@ impl<T: Send> Queue<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Queue<T> {\n+impl<T: Send + 'static> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let mut cur = *self.tail.get();"}, {"sha": "55b2caf7c6d4cccea53aa2331ea3defaf0113524", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -88,7 +88,7 @@ enum MyUpgrade<T> {\n     GoUp(Receiver<T>),\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T: Send + 'static> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n             data: None,\n@@ -368,7 +368,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T: Send + 'static> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.state.load(Ordering::SeqCst), DISCONNECTED);\n     }"}, {"sha": "4756ef612f947eeb8f7118388c91e13ec80c51b4", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -134,7 +134,7 @@ impl Select {\n     /// Creates a new handle into this receiver set for a new receiver. Note\n     /// that this does *not* add the receiver to the receiver set, for that you\n     /// must call the `add` method on the handle itself.\n-    pub fn handle<'a, T: Send>(&'a self, rx: &'a Receiver<T>) -> Handle<'a, T> {\n+    pub fn handle<'a, T: Send + 'static>(&'a self, rx: &'a Receiver<T>) -> Handle<'a, T> {\n         let id = self.next_id.get();\n         self.next_id.set(id + 1);\n         Handle {\n@@ -251,7 +251,7 @@ impl Select {\n     fn iter(&self) -> Packets { Packets { cur: self.head } }\n }\n \n-impl<'rx, T: Send> Handle<'rx, T> {\n+impl<'rx, T: Send + 'static> Handle<'rx, T> {\n     /// Retrieve the id of this handle.\n     #[inline]\n     pub fn id(&self) -> uint { self.id }\n@@ -322,7 +322,7 @@ impl Drop for Select {\n }\n \n #[unsafe_destructor]\n-impl<'rx, T: Send> Drop for Handle<'rx, T> {\n+impl<'rx, T: Send + 'static> Drop for Handle<'rx, T> {\n     fn drop(&mut self) {\n         unsafe { self.remove() }\n     }"}, {"sha": "bc9c73585c21fe86ff9ec4e5630191f6330289e9", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -64,7 +64,7 @@ pub enum Failure {\n     Disconnected,\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T: Send + 'static> Packet<T> {\n     // Creation of a packet *must* be followed by a call to postinit_lock\n     // and later by inherit_blocker\n     pub fn new() -> Packet<T> {\n@@ -474,7 +474,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T: Send + 'static> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about\n         // disconnection, but also a proper fence before the read of"}, {"sha": "b8f835bde5191d79b6d0332d39d70c70c7c762c9", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -74,11 +74,11 @@ pub struct Queue<T> {\n     cache_subtractions: AtomicUsize,\n }\n \n-unsafe impl<T: Send> Send for Queue<T> { }\n+unsafe impl<T: Send + 'static> Send for Queue<T> { }\n \n-unsafe impl<T: Send> Sync for Queue<T> { }\n+unsafe impl<T: Send + 'static> Sync for Queue<T> { }\n \n-impl<T: Send> Node<T> {\n+impl<T: Send + 'static> Node<T> {\n     fn new() -> *mut Node<T> {\n         unsafe {\n             mem::transmute(box Node {\n@@ -89,7 +89,7 @@ impl<T: Send> Node<T> {\n     }\n }\n \n-impl<T: Send> Queue<T> {\n+impl<T: Send + 'static> Queue<T> {\n     /// Creates a new queue.\n     ///\n     /// This is unsafe as the type system doesn't enforce a single\n@@ -227,7 +227,7 @@ impl<T: Send> Queue<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Queue<T> {\n+impl<T: Send + 'static> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let mut cur = *self.first.get();"}, {"sha": "a194c99669263e356e1ad1bf46f160a6c212f8cf", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -74,7 +74,7 @@ enum Message<T> {\n     GoUp(Receiver<T>),\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T: Send + 'static> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n             queue: unsafe { spsc::Queue::new(128) },\n@@ -472,7 +472,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T: Send + 'static> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about\n         // disconnection, but also a proper fence before the read of"}, {"sha": "ae96a2491dc267ee06066c369ee6cfb838e3c204", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -55,9 +55,9 @@ pub struct Packet<T> {\n     lock: Mutex<State<T>>,\n }\n \n-unsafe impl<T:Send> Send for Packet<T> { }\n+unsafe impl<T: Send + 'static> Send for Packet<T> { }\n \n-unsafe impl<T:Send> Sync for Packet<T> { }\n+unsafe impl<T: Send + 'static> Sync for Packet<T> { }\n \n struct State<T> {\n     disconnected: bool, // Is the channel disconnected yet?\n@@ -75,7 +75,7 @@ struct State<T> {\n     canceled: Option<&'static mut bool>,\n }\n \n-unsafe impl<T: Send> Send for State<T> {}\n+unsafe impl<T: Send + 'static> Send for State<T> {}\n \n /// Possible flavors of threads who can be blocked on this channel.\n enum Blocker {\n@@ -113,7 +113,7 @@ pub enum Failure {\n \n /// Atomically blocks the current thread, placing it into `slot`, unlocking `lock`\n /// in the meantime. This re-locks the mutex upon returning.\n-fn wait<'a, 'b, T: Send>(lock: &'a Mutex<State<T>>,\n+fn wait<'a, 'b, T: Send + 'static>(lock: &'a Mutex<State<T>>,\n                          mut guard: MutexGuard<'b, State<T>>,\n                          f: fn(SignalToken) -> Blocker)\n                          -> MutexGuard<'a, State<T>>\n@@ -136,7 +136,7 @@ fn wakeup<T>(token: SignalToken, guard: MutexGuard<State<T>>) {\n     token.signal();\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T: Send + 'static> Packet<T> {\n     pub fn new(cap: uint) -> Packet<T> {\n         Packet {\n             channels: AtomicUsize::new(1),\n@@ -412,7 +412,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T: Send + 'static> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.channels.load(Ordering::SeqCst), 0);\n         let mut guard = self.lock.lock().unwrap();"}, {"sha": "65cae90857e44f3b1a4c50480e122ba084c00bb9", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -120,9 +120,9 @@ pub struct Mutex<T> {\n     data: UnsafeCell<T>,\n }\n \n-unsafe impl<T:Send> Send for Mutex<T> { }\n+unsafe impl<T: Send + 'static> Send for Mutex<T> { }\n \n-unsafe impl<T:Send> Sync for Mutex<T> { }\n+unsafe impl<T: Send + 'static> Sync for Mutex<T> { }\n \n /// The static mutex type is provided to allow for static allocation of mutexes.\n ///\n@@ -180,7 +180,7 @@ pub const MUTEX_INIT: StaticMutex = StaticMutex {\n     poison: poison::FLAG_INIT,\n };\n \n-impl<T: Send> Mutex<T> {\n+impl<T: Send + 'static> Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(t: T) -> Mutex<T> {\n@@ -243,7 +243,7 @@ impl<T: Send> Mutex<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Mutex<T> {\n+impl<T: Send + 'static> Drop for Mutex<T> {\n     fn drop(&mut self) {\n         // This is actually safe b/c we know that there is no further usage of\n         // this mutex (it's up to the user to arrange for a mutex to get"}, {"sha": "f4274dd91cc7a27eef8fa80b89e6b2392f942a45", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -24,12 +24,12 @@ use thread;\n use thunk::Thunk;\n \n struct Sentinel<'a> {\n-    jobs: &'a Arc<Mutex<Receiver<Thunk>>>,\n+    jobs: &'a Arc<Mutex<Receiver<Thunk<'static>>>>,\n     active: bool\n }\n \n impl<'a> Sentinel<'a> {\n-    fn new(jobs: &Arc<Mutex<Receiver<Thunk>>>) -> Sentinel {\n+    fn new(jobs: &'a Arc<Mutex<Receiver<Thunk<'static>>>>) -> Sentinel<'a> {\n         Sentinel {\n             jobs: jobs,\n             active: true\n@@ -80,7 +80,7 @@ pub struct TaskPool {\n     //\n     // This is the only such Sender, so when it is dropped all subthreads will\n     // quit.\n-    jobs: Sender<Thunk>\n+    jobs: Sender<Thunk<'static>>\n }\n \n impl TaskPool {\n@@ -105,13 +105,13 @@ impl TaskPool {\n \n     /// Executes the function `job` on a thread in the pool.\n     pub fn execute<F>(&self, job: F)\n-        where F : FnOnce(), F : Send\n+        where F : FnOnce(), F : Send + 'static\n     {\n         self.jobs.send(Thunk::new(job)).unwrap();\n     }\n }\n \n-fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk>>>) {\n+fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk<'static>>>>) {\n     thread::spawn(move || {\n         // Will spawn a new thread on panic unless it is cancelled.\n         let sentinel = Sentinel::new(&jobs);"}, {"sha": "dc1ae85efe03395660f9e63fd82b0a398e5a969e", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -81,7 +81,7 @@ impl<M: Send> Helper<M> {\n     ///\n     /// This function is safe to be called many times.\n     pub fn boot<T, F>(&'static self, f: F, helper: fn(helper_signal::signal, Receiver<M>, T)) where\n-        T: Send,\n+        T: Send + 'static,\n         F: FnOnce() -> T,\n     {\n         unsafe {"}, {"sha": "ea25ddc0fca0a12703538e74673ab256f6dcad01", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -172,9 +172,9 @@ pub struct Builder {\n     // The size of the stack for the spawned thread\n     stack_size: Option<uint>,\n     // Thread-local stdout\n-    stdout: Option<Box<Writer + Send>>,\n+    stdout: Option<Box<Writer + Send + 'static>>,\n     // Thread-local stderr\n-    stderr: Option<Box<Writer + Send>>,\n+    stderr: Option<Box<Writer + Send + 'static>>,\n }\n \n impl Builder {\n@@ -208,15 +208,15 @@ impl Builder {\n     /// Redirect thread-local stdout.\n     #[unstable(feature = \"std_misc\",\n                reason = \"Will likely go away after proc removal\")]\n-    pub fn stdout(mut self, stdout: Box<Writer + Send>) -> Builder {\n+    pub fn stdout(mut self, stdout: Box<Writer + Send + 'static>) -> Builder {\n         self.stdout = Some(stdout);\n         self\n     }\n \n     /// Redirect thread-local stderr.\n     #[unstable(feature = \"std_misc\",\n                reason = \"Will likely go away after proc removal\")]\n-    pub fn stderr(mut self, stderr: Box<Writer + Send>) -> Builder {\n+    pub fn stderr(mut self, stderr: Box<Writer + Send + 'static>) -> Builder {\n         self.stderr = Some(stderr);\n         self\n     }\n@@ -565,11 +565,11 @@ impl thread_info::NewThread for Thread {\n ///\n /// A thread that completes without panicking is considered to exit successfully.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type Result<T> = ::result::Result<T, Box<Any + Send>>;\n+pub type Result<T> = ::result::Result<T, Box<Any + Send + 'static>>;\n \n struct Packet<T>(Arc<UnsafeCell<Option<Result<T>>>>);\n \n-unsafe impl<T:'static+Send> Send for Packet<T> {}\n+unsafe impl<T:Send> Send for Packet<T> {}\n unsafe impl<T> Sync for Packet<T> {}\n \n /// Inner representation for JoinHandle and JoinGuard\n@@ -804,7 +804,7 @@ mod test {\n         rx.recv().unwrap();\n     }\n \n-    fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Thunk) {\n+    fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Thunk<'static>) {\n         let (tx, rx) = channel::<uint>();\n \n         let x = box 1;\n@@ -851,7 +851,7 @@ mod test {\n         // (well, it would if the constant were 8000+ - I lowered it to be more\n         // valgrind-friendly. try this at home, instead..!)\n         static GENERATIONS: uint = 16;\n-        fn child_no(x: uint) -> Thunk {\n+        fn child_no(x: uint) -> Thunk<'static> {\n             return Thunk::new(move|| {\n                 if x < GENERATIONS {\n                     thread::spawn(move|| child_no(x+1).invoke(()));"}, {"sha": "1412dbd70b9c6850470fa819439439648bed21ce", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -16,21 +16,24 @@ use alloc::boxed::Box;\n use core::marker::Send;\n use core::ops::FnOnce;\n \n-pub struct Thunk<A=(),R=()> {\n-    invoke: Box<Invoke<A,R>+Send>\n+pub struct Thunk<'a, A=(),R=()> {\n+    #[cfg(stage0)] // // SNAP ac134f7 remove after stage0\n+    invoke: Box<Invoke<A,R>+Send>,\n+    #[cfg(not(stage0))]\n+    invoke: Box<Invoke<A,R>+Send + 'a>,\n }\n \n-impl<R> Thunk<(),R> {\n-    pub fn new<F>(func: F) -> Thunk<(),R>\n-        where F : FnOnce() -> R, F : Send\n+impl<'a, R> Thunk<'a,(),R> {\n+    pub fn new<F>(func: F) -> Thunk<'a,(),R>\n+        where F : FnOnce() -> R, F : Send + 'a\n     {\n         Thunk::with_arg(move|()| func())\n     }\n }\n \n-impl<A,R> Thunk<A,R> {\n-    pub fn with_arg<F>(func: F) -> Thunk<A,R>\n-        where F : FnOnce(A) -> R, F : Send\n+impl<'a,A,R> Thunk<'a,A,R> {\n+    pub fn with_arg<F>(func: F) -> Thunk<'a,A,R>\n+        where F : FnOnce(A) -> R, F : Send + 'a\n     {\n         Thunk {\n             invoke: box func"}, {"sha": "b978d2d8054e566212eb33868777ad3d9d1924ea", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -72,7 +72,7 @@ pub struct TerminfoTerminal<T> {\n     ti: Box<TermInfo>\n }\n \n-impl<T: Writer+Send> Terminal<T> for TerminfoTerminal<T> {\n+impl<T: Writer+Send+'static> Terminal<T> for TerminfoTerminal<T> {\n     fn fg(&mut self, color: color::Color) -> IoResult<bool> {\n         let color = self.dim_if_necessary(color);\n         if self.num_colors > color {\n@@ -164,11 +164,11 @@ impl<T: Writer+Send> Terminal<T> for TerminfoTerminal<T> {\n     fn get_mut<'a>(&'a mut self) -> &'a mut T { &mut self.out }\n }\n \n-impl<T: Writer+Send> UnwrappableTerminal<T> for TerminfoTerminal<T> {\n+impl<T: Writer+Send+'static> UnwrappableTerminal<T> for TerminfoTerminal<T> {\n     fn unwrap(self) -> T { self.out }\n }\n \n-impl<T: Writer+Send> TerminfoTerminal<T> {\n+impl<T: Writer+Send+'static> TerminfoTerminal<T> {\n     /// Returns `None` whenever the terminal cannot be created for some\n     /// reason.\n     pub fn new(out: T) -> Option<Box<Terminal<T>+Send+'static>> {\n@@ -229,4 +229,3 @@ impl<T: Writer> Writer for TerminfoTerminal<T> {\n         self.out.flush()\n     }\n }\n-"}, {"sha": "e93b956dc7c835eaee3f11af0606a8bcf7437ba2", "filename": "src/libterm/win.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -86,7 +86,7 @@ fn bits_to_color(bits: u16) -> color::Color {\n     color | (bits & 0x8) // copy the hi-intensity bit\n }\n \n-impl<T: Writer+Send> WinConsole<T> {\n+impl<T: Writer+Send+'static> WinConsole<T> {\n     fn apply(&mut self) {\n         let _unused = self.buf.flush();\n         let mut accum: libc::WORD = 0;\n@@ -139,7 +139,7 @@ impl<T: Writer> Writer for WinConsole<T> {\n     }\n }\n \n-impl<T: Writer+Send> Terminal<T> for WinConsole<T> {\n+impl<T: Writer+Send+'static> Terminal<T> for WinConsole<T> {\n     fn fg(&mut self, color: color::Color) -> IoResult<bool> {\n         self.foreground = color;\n         self.apply();\n@@ -192,6 +192,6 @@ impl<T: Writer+Send> Terminal<T> for WinConsole<T> {\n     fn get_mut<'a>(&'a mut self) -> &'a mut T { &mut self.buf }\n }\n \n-impl<T: Writer+Send> UnwrappableTerminal<T> for WinConsole<T> {\n+impl<T: Writer+Send+'static> UnwrappableTerminal<T> for WinConsole<T> {\n     fn unwrap(self) -> T { self.buf }\n }"}, {"sha": "2cb30ad9804c6de074bbec45e5b29a19c909eb2e", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -154,7 +154,7 @@ pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n     StaticMetricFn(fn(&mut MetricMap)),\n-    DynTestFn(Thunk),\n+    DynTestFn(Thunk<'static>),\n     DynMetricFn(Box<for<'a> Invoke<&'a mut MetricMap>+'static>),\n     DynBenchFn(Box<TDynBenchFn+'static>)\n }\n@@ -878,7 +878,7 @@ pub fn run_test(opts: &TestOpts,\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: Sender<MonitorMsg>,\n                       nocapture: bool,\n-                      testfn: Thunk) {\n+                      testfn: Thunk<'static>) {\n         thread::spawn(move || {\n             let (tx, rx) = channel();\n             let mut reader = ChanReader::new(rx);"}, {"sha": "b38e955231e4a7e5e7985736d4cda9ad1edb609c", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -11,7 +11,7 @@\n use std::thread;\n use std::sync::mpsc::{Receiver, channel};\n \n-pub fn foo<T:Send + Clone>(x: T) -> Receiver<T> {\n+pub fn foo<T:'static + Send + Clone>(x: T) -> Receiver<T> {\n     let (tx, rx) = channel();\n     thread::spawn(move|| {\n         tx.send(x.clone());"}, {"sha": "33d959dfe93e35f592320a4913dd69d3c7c3a313", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -229,21 +229,12 @@ unsafe impl<T: 'static> Send for Racy<T> {}\n \n /// Executes a closure in parallel over the given iterator over mutable slice.\n /// The closure `f` is run in parallel with an element of `iter`.\n-fn parallel<'a, I, T, F>(iter: I, f: F)\n-        where T: 'a+Send + Sync,\n-              I: Iterator<Item=&'a mut [T]>,\n-              F: Fn(&mut [T]) + Sync {\n-    use std::mem;\n-    use std::raw::Repr;\n-\n-    iter.map(|chunk| {\n-        // Need to convert `f` and `chunk` to something that can cross the task\n-        // boundary.\n-        let f = Racy(&f as *const F as *const uint);\n-        let raw = Racy(chunk.repr());\n-        thread::spawn(move|| {\n-            let f = f.0 as *const F;\n-            unsafe { (*f)(mem::transmute(raw.0)) }\n+fn parallel<'a, I: Iterator, F>(iter: I, ref f: F)\n+        where I::Item: Send + 'a,\n+              F: Fn(I::Item) + Sync + 'a {\n+    iter.map(|x| {\n+        thread::scoped(move|| {\n+            f(x)\n         })\n     }).collect::<Vec<_>>();\n }"}, {"sha": "76ba5acb16ce4718b0523d1211672b87eec74b8b", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -112,26 +112,16 @@ fn dot(v: &[f64], u: &[f64]) -> f64 {\n }\n \n \n-struct Racy<T>(T);\n-\n-unsafe impl<T: 'static> Send for Racy<T> {}\n-\n // Executes a closure in parallel over the given mutable slice. The closure `f`\n // is run in parallel and yielded the starting index within `v` as well as a\n // sub-slice of `v`.\n-fn parallel<T, F>(v: &mut [T], f: F)\n-                  where T: Send + Sync,\n-                        F: Fn(uint, &mut [T]) + Sync {\n+fn parallel<'a,T, F>(v: &mut [T], ref f: F)\n+                  where T: Send + Sync + 'a,\n+                        F: Fn(uint, &mut [T]) + Sync + 'a {\n     let size = v.len() / os::num_cpus() + 1;\n-\n     v.chunks_mut(size).enumerate().map(|(i, chunk)| {\n-        // Need to convert `f` and `chunk` to something that can cross the task\n-        // boundary.\n-        let f = Racy(&f as *const _ as *const uint);\n-        let raw = Racy(chunk.repr());\n-        thread::spawn(move|| {\n-            let f = f.0 as *const F;\n-            unsafe { (*f)(i * size, mem::transmute(raw.0)) }\n+        thread::scoped(move|| {\n+            f(i * size, chunk)\n         })\n     }).collect::<Vec<_>>();\n }"}, {"sha": "c3fb6a1be8797a811819022975446ca9fabf5711", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -13,7 +13,7 @@\n \n trait Foo : Send { }\n \n-impl <'a> Foo for &'a mut () { }\n-//~^ ERROR the type `&'a mut ()` does not fulfill the required lifetime\n+impl Foo for std::rc::Rc<i8> { }\n+//~^ ERROR the trait `core::marker::Send` is not implemented\n \n fn main() { }"}, {"sha": "38730d241f68532b43f35c2dc15f3d1177c46d67", "filename": "src/test/compile-fail/coherence-impls-builtin.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(optin_builtin_traits)]\n+\n use std::marker::Send;\n \n enum TestE {\n@@ -16,18 +18,21 @@ enum TestE {\n \n struct MyType;\n \n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n unsafe impl Send for TestE {}\n unsafe impl Send for MyType {}\n unsafe impl Send for (MyType, MyType) {}\n //~^ ERROR builtin traits can only be implemented on structs or enums\n \n-unsafe impl Send for &'static MyType {}\n+unsafe impl Send for &'static NotSync {}\n //~^ ERROR builtin traits can only be implemented on structs or enums\n \n unsafe impl Send for [MyType] {}\n //~^ ERROR builtin traits can only be implemented on structs or enums\n \n-unsafe impl Send for &'static [MyType] {}\n+unsafe impl Send for &'static [NotSync] {}\n //~^ ERROR builtin traits can only be implemented on structs or enums\n \n fn is_send<T: Send>() {}"}, {"sha": "d5276efa8be9812649f978f8ee7da58e6238faa3", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -17,7 +17,7 @@ struct S<T>;\n \n trait Gettable<T> {}\n \n-impl<T: Send + Copy> Gettable<T> for S<T> {}\n+impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n \n fn f<T>(val: T) {\n     let t: S<T> = S;"}, {"sha": "570f7ad7fe3bf214adae00a7ac6644053305dd6c", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -20,15 +20,15 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Sync` is not implemented\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n     assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::marker::Send` is not implemented\n }\n \n fn object_with_send_bound_ok() {\n-    assert_send::<&'static (Dummy+Send)>();\n+    assert_send::<&'static (Dummy+Sync)>();\n     assert_send::<Box<Dummy+Send>>();\n }\n "}, {"sha": "48d5215b7085be78f389d72df0139f2efa25130e", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -12,22 +12,22 @@\n // is broken into two parts because some errors occur in distinct\n // phases in the compiler. See kindck-send-object2.rs as well!\n \n-fn assert_send<T:Send>() { }\n+fn assert_send<T:Send+'static>() { }\n trait Dummy { }\n \n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Sync` is not implemented\n }\n fn test52<'a>() {\n-    assert_send::<&'a (Dummy+Send)>();\n+    assert_send::<&'a (Dummy+Sync)>();\n     //~^ ERROR does not fulfill the required lifetime\n }\n \n // ...unless they are properly bounded\n fn test60() {\n-    assert_send::<&'static (Dummy+Send)>();\n+    assert_send::<&'static (Dummy+Sync)>();\n }\n fn test61() {\n     assert_send::<Box<Dummy+Send>>();"}, {"sha": "d3d166e2a6916181d24c32984ed212bca92a07e6", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -14,7 +14,7 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>(); //~ ERROR the trait `core::marker::Send` is not implemented\n+    assert_send::<&'static Dummy>(); //~ ERROR the trait `core::marker::Sync` is not implemented\n }\n \n fn test53() {\n@@ -23,7 +23,7 @@ fn test53() {\n \n // ...unless they are properly bounded\n fn test60() {\n-    assert_send::<&'static (Dummy+Send)>();\n+    assert_send::<&'static (Dummy+Sync)>();\n }\n fn test61() {\n     assert_send::<Box<Dummy+Send>>();"}, {"sha": "406711902a543555547453d1900b5469d74d2ea9", "filename": "src/test/compile-fail/kindck-send-owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -18,8 +18,8 @@ fn test31() { assert_send::<String>(); }\n fn test32() { assert_send::<Vec<isize> >(); }\n \n // but not if they own a bad thing\n-fn test40<'a>(_: &'a isize) {\n-    assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n+fn test40() {\n+    assert_send::<Box<*mut u8>>(); //~ ERROR `core::marker::Send` is not implemented\n }\n \n fn main() { }"}, {"sha": "e2a5b0678a6283164b661393c9dd5cb1dfdf016f", "filename": "src/test/compile-fail/kindck-send-region-pointers.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that borrowed pointers are not sendable unless 'static.\n-\n-fn assert_send<T:Send>() { }\n-\n-// lifetime pointers with 'static lifetime are ok\n-fn test01() { assert_send::<&'static isize>(); }\n-fn test02() { assert_send::<&'static str>(); }\n-fn test03() { assert_send::<&'static [isize]>(); }\n-\n-// whether or not they are mutable\n-fn test10() { assert_send::<&'static mut isize>(); }\n-\n-// otherwise lifetime pointers are not ok\n-fn test20<'a>(_: &'a isize) {\n-    assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n-}\n-fn test21<'a>(_: &'a isize) {\n-    assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n-}\n-fn test22<'a>(_: &'a isize) {\n-    assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn main() { }"}, {"sha": "71254e15d32fc37051b70324bc7e7d1942f77085", "filename": "src/test/compile-fail/regions-bounded-by-send.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac3799b75780f8c18bc38331403e1e517b89bab/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs?ref=6ac3799b75780f8c18bc38331403e1e517b89bab", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test which of the builtin types are considered sendable. The tests\n-// in this file all test region bound and lifetime violations that are\n-// detected during type check.\n-\n-extern crate core;\n-use core::ptr::Unique;\n-\n-fn assert_send<T:Send>() { }\n-trait Dummy:Send { }\n-\n-// lifetime pointers with 'static lifetime are ok\n-\n-fn static_lifime_ok<'a,T,U:Send>(_: &'a isize) {\n-    assert_send::<&'static isize>();\n-    assert_send::<&'static str>();\n-    assert_send::<&'static [isize]>();\n-\n-    // whether or not they are mutable\n-    assert_send::<&'static mut isize>();\n-}\n-\n-// otherwise lifetime pointers are not ok\n-\n-fn param_not_ok<'a>(x: &'a isize) {\n-    assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn param_not_ok1<'a>(_: &'a isize) {\n-    assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn param_not_ok2<'a>(_: &'a isize) {\n-    assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-// boxes are ok\n-\n-fn box_ok() {\n-    assert_send::<Box<isize>>();\n-    assert_send::<String>();\n-    assert_send::<Vec<isize>>();\n-}\n-\n-// but not if they own a bad thing\n-\n-fn box_with_region_not_ok<'a>() {\n-    assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-// objects with insufficient bounds no ok\n-\n-fn object_with_random_bound_not_ok<'a>() {\n-    assert_send::<&'a (Dummy+'a)>();\n-    //~^ ERROR reference has a longer lifetime\n-}\n-\n-fn object_with_send_bound_not_ok<'a>() {\n-    assert_send::<&'a (Dummy+Send)>();\n-    //~^ ERROR does not fulfill the required lifetime\n-}\n-\n-// unsafe pointers are ok unless they point at unsendable things\n-\n-struct UniqueUnsafePtr(Unique<*const isize>);\n-\n-unsafe impl Send for UniqueUnsafePtr {}\n-\n-fn unsafe_ok1<'a>(_: &'a isize) {\n-    assert_send::<UniqueUnsafePtr>();\n-}\n-\n-fn main() {\n-}"}, {"sha": "3401dd1becdd8b141dd5e8940e1af672ac7e68f2", "filename": "src/test/compile-fail/regions-pattern-typing-issue-19552.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn assert_send<T: Send>(_t: T) {}\n+fn assert_static<T: 'static>(_t: T) {}\n \n fn main() {\n     let line = String::new();\n     match [&*line] { //~ ERROR `line` does not live long enough\n-        [ word ] => { assert_send(word); }\n+        [ word ] => { assert_static(word); }\n     }\n }"}, {"sha": "0b74892d66c2bcc6aebc4ab29a0e5ac84573b834", "filename": "src/test/compile-fail/send-is-not-static-ensures-scoping.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsend-is-not-static-ensures-scoping.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core, std_misc)]\n+use std::thread::Thread;\n+\n+fn main() {\n+    let bad = {\n+        let x = 1;\n+        let y = &x;\n+\n+        Thread::scoped(|| { //~ ERROR cannot infer an appropriate lifetime\n+            let _z = y;\n+        })\n+    };\n+\n+    bad.join().ok().unwrap();\n+}"}, {"sha": "79174552ae09c36f5ba136754f7a95cd7d6b6bc0", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -22,7 +22,7 @@ fn c(x: Box<Foo+Sync+Send>) {\n fn d(x: Box<Foo>) {\n     a(x); //~  ERROR mismatched types\n           //~| expected `Box<Foo + Send>`\n-          //~| found `Box<Foo + 'static>`\n+          //~| found `Box<Foo>`\n           //~| expected bounds `Send`\n           //~| found no bounds\n }"}, {"sha": "379ac12a95424c3ac1880e95e39121cd7c17dfe0", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -22,7 +22,7 @@ trait Foo : Bar { }\n impl <T: Send> Foo for T { }\n impl <T: Send> Bar for T { }\n \n-fn foo<T: Foo>(val: T, chan: Sender<T>) {\n+fn foo<T: Foo + 'static>(val: T, chan: Sender<T>) {\n     chan.send(val).unwrap();\n }\n "}, {"sha": "cd019c21a3d056f1ad291581de645f2ac1cd0448", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -25,7 +25,7 @@ struct X<T>(T);\n impl <T: Sync> RequiresShare for X<T> { }\n impl <T: Sync+Send> RequiresRequiresShareAndSend for X<T> { }\n \n-fn foo<T: RequiresRequiresShareAndSend>(val: T, chan: Sender<T>) {\n+fn foo<T: RequiresRequiresShareAndSend + 'static>(val: T, chan: Sender<T>) {\n     chan.send(val).unwrap();\n }\n "}, {"sha": "dc61508eec4fabf7acbb7bc55c029588ca1d7ac1", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -18,7 +18,7 @@ trait Foo : Send { }\n \n impl <T: Send> Foo for T { }\n \n-fn foo<T: Foo>(val: T, chan: Sender<T>) {\n+fn foo<T: Foo + 'static>(val: T, chan: Sender<T>) {\n     chan.send(val).unwrap();\n }\n "}, {"sha": "1d05a7baa5352b938af0eee830201e6b023263a2", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -13,13 +13,13 @@\n \n use std::sync::mpsc::{Sender, channel};\n \n-trait Foo : Send + Sized {\n+trait Foo : Send + Sized + 'static {\n     fn foo(self, tx: Sender<Self>) {\n         tx.send(self).unwrap();\n     }\n }\n \n-impl <T: Send> Foo for T { }\n+impl <T: Send + 'static> Foo for T { }\n \n pub fn main() {\n     let (tx, rx) = channel();"}, {"sha": "a4b09eb08e0f663392de8cbbdcd25f47e8a01523", "filename": "src/test/run-pass/issue-18188.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18188.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -14,12 +14,12 @@ use std::thunk::Thunk;\n \n pub trait Promisable: Send + Sync {}\n impl<T: Send + Sync> Promisable for T {}\n-pub fn propagate<T, E, F, G>(action: F) -> Thunk<Result<T, E>, Result<T, E>>\n+pub fn propagate<'a, T, E, F, G>(action: F) -> Thunk<'a,Result<T, E>, Result<T, E>>\n     where\n-        T: Promisable + Clone,\n-        E: Promisable + Clone,\n-        F: FnOnce(&T) -> Result<T, E> + Send,\n-        G: FnOnce(Result<T, E>) -> Result<T, E> {\n+        T: Promisable + Clone + 'a,\n+        E: Promisable + Clone + 'a,\n+        F: FnOnce(&T) -> Result<T, E> + Send + 'a,\n+        G: FnOnce(Result<T, E>) -> Result<T, E> + 'a {\n     Thunk::with_arg(move |result: Result<T, E>| {\n         match result {\n             Ok(ref t) => action(t),"}, {"sha": "3cdd57aed5a1ccef3c37438a0981005eee8f1e9a", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -14,7 +14,7 @@ struct DST { a: u32, b: str }\n \n fn main() {\n     // get_tydesc should support unsized types\n-    assert!(unsafe {(\n+    assert_eq!(unsafe {(\n         // Slice\n         (*std::intrinsics::get_tydesc::<[u8]>()).name,\n         // str\n@@ -25,5 +25,5 @@ fn main() {\n         (*std::intrinsics::get_tydesc::<NT>()).name,\n         // DST\n         (*std::intrinsics::get_tydesc::<DST>()).name\n-    )} == (\"[u8]\", \"str\", \"core::marker::Copy + 'static\", \"NT\", \"DST\"));\n+    )}, (\"[u8]\", \"str\", \"core::marker::Copy\", \"NT\", \"DST\"));\n }"}, {"sha": "3025741694f43b4068850047628e81c0d902257f", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -13,11 +13,11 @@ use std::thunk::Thunk;\n \n static generations: uint = 1024+256+128+49;\n \n-fn spawn(f: Thunk) {\n+fn spawn(f: Thunk<'static>) {\n     Builder::new().stack_size(32 * 1024).spawn(move|| f.invoke(()));\n }\n \n-fn child_no(x: uint) -> Thunk {\n+fn child_no(x: uint) -> Thunk<'static> {\n     Thunk::new(move|| {\n         if x < generations {\n             spawn(child_no(x+1));"}, {"sha": "c6b64d97fbdd50709b8bb164fe263d5409ce4a3f", "filename": "src/test/run-pass/send-is-not-static-par-for.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-is-not-static-par-for.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core, std_misc)]\n+use std::thread::Thread;\n+use std::sync::Mutex;\n+\n+fn par_for<I, F>(iter: I, f: F)\n+    where I: Iterator,\n+          <I as Iterator>::Item: Send,\n+          F: Fn(<I as Iterator>::Item) + Sync\n+{\n+    let f = &f;\n+    let _guards: Vec<_> = iter.map(|elem| {\n+        Thread::scoped(move || {\n+            f(elem)\n+        })\n+    }).collect();\n+\n+}\n+\n+fn sum(x: &[i32]) {\n+    let sum_lengths = Mutex::new(0);\n+    par_for(x.windows(4), |x| {\n+        *sum_lengths.lock().unwrap() += x.len()\n+    });\n+\n+    assert_eq!(*sum_lengths.lock().unwrap(), (x.len() - 3) * 4);\n+}\n+\n+fn main() {\n+    let mut elements = [0; 20];\n+\n+    // iterators over references into this stack frame\n+    par_for(elements.iter_mut().enumerate(), |(i, x)| {\n+        *x = i as i32\n+    });\n+\n+    sum(&elements)\n+}"}, {"sha": "60093803f0b77745e77c7fde8879d070ab39fbbb", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=ba8ce4c2c27643cccfbbc481a19bcf4b7747cc89", "patch": "@@ -16,7 +16,7 @@ struct Command<K, V> {\n     val: V\n }\n \n-fn cache_server<K:Send,V:Send>(mut tx: Sender<Sender<Command<K, V>>>) {\n+fn cache_server<K:Send+'static,V:Send+'static>(mut tx: Sender<Sender<Command<K, V>>>) {\n     let (tx1, _rx) = channel();\n     tx.send(tx1);\n }"}]}