{"sha": "663f29818310c7aad3b1501fe8eac6ca2379e037", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2M2YyOTgxODMxMGM3YWFkM2IxNTAxZmU4ZWFjNmNhMjM3OWUwMzc=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-24T17:34:18Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-25T17:17:34Z"}, "message": "Get rid of cast on every self reference.", "tree": {"sha": "74555b2d5ab79a28c3edf9cebc2f2e6d9d436e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74555b2d5ab79a28c3edf9cebc2f2e6d9d436e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/663f29818310c7aad3b1501fe8eac6ca2379e037", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/663f29818310c7aad3b1501fe8eac6ca2379e037", "html_url": "https://github.com/rust-lang/rust/commit/663f29818310c7aad3b1501fe8eac6ca2379e037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/663f29818310c7aad3b1501fe8eac6ca2379e037/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c867114525068275bd403ba5b1918d507a38933", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c867114525068275bd403ba5b1918d507a38933", "html_url": "https://github.com/rust-lang/rust/commit/3c867114525068275bd403ba5b1918d507a38933"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "ddf12f0df035446fa000812481fac88c177d80ef", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/663f29818310c7aad3b1501fe8eac6ca2379e037/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/663f29818310c7aad3b1501fe8eac6ca2379e037/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=663f29818310c7aad3b1501fe8eac6ca2379e037", "patch": "@@ -1683,21 +1683,20 @@ pub fn copy_args_to_allocas(fcx: fn_ctxt,\n \n     match fcx.llself {\n       Some(slf) => {\n-        // We really should do this regardless of whether self is owned, but\n-        // it doesn't work right with default method impls yet. (FIXME: #2794)\n-        if slf.is_owned {\n-            let self_val = if datum::appropriate_mode(slf.t).is_by_value() {\n-                let tmp = BitCast(bcx, slf.v, type_of(bcx.ccx(), slf.t));\n-                let alloc = alloc_ty(bcx, slf.t);\n-                Store(bcx, tmp, alloc);\n-                alloc\n-            } else {\n-                PointerCast(bcx, slf.v, type_of(bcx.ccx(), slf.t).ptr_to())\n-            };\n-\n-            fcx.llself = Some(ValSelfData {v: self_val, ..slf});\n-            add_clean(bcx, self_val, slf.t);\n-        }\n+          let self_val = if slf.is_owned\n+                  && datum::appropriate_mode(slf.t).is_by_value() {\n+              let tmp = BitCast(bcx, slf.v, type_of(bcx.ccx(), slf.t));\n+              let alloc = alloc_ty(bcx, slf.t);\n+              Store(bcx, tmp, alloc);\n+              alloc\n+          } else {\n+              PointerCast(bcx, slf.v, type_of(bcx.ccx(), slf.t).ptr_to())\n+          };\n+\n+          fcx.llself = Some(ValSelfData {v: self_val, ..slf});\n+          if slf.is_owned {\n+              add_clean(bcx, self_val, slf.t);\n+          }\n       }\n       _ => {}\n     }"}, {"sha": "0e64d7582ac5d51b7852d277002660258550610b", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/663f29818310c7aad3b1501fe8eac6ca2379e037/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/663f29818310c7aad3b1501fe8eac6ca2379e037/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=663f29818310c7aad3b1501fe8eac6ca2379e037", "patch": "@@ -1051,14 +1051,8 @@ pub fn trans_local_var(bcx: block, def: ast::def) -> Datum {\n             debug!(\"def_self() reference, self_info.t=%s\",\n                    self_info.t.repr(bcx.tcx()));\n \n-            // This cast should not be necessary. We should cast self *once*,\n-            // but right now this conflicts with default methods.\n-            let real_self_ty = monomorphize_type(bcx, self_info.t);\n-            let llselfty = type_of::type_of(bcx.ccx(), real_self_ty).ptr_to();\n-\n-            let casted_val = PointerCast(bcx, self_info.v, llselfty);\n             Datum {\n-                val: casted_val,\n+                val: self_info.v,\n                 ty: self_info.t,\n                 mode: ByRef(ZeroMem)\n             }"}, {"sha": "96f8a1976a68cfa2aad47885e45446d84e98a10e", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/663f29818310c7aad3b1501fe8eac6ca2379e037/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/663f29818310c7aad3b1501fe8eac6ca2379e037/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=663f29818310c7aad3b1501fe8eac6ca2379e037", "patch": "@@ -103,8 +103,8 @@ pub fn trans_method(ccx: @mut CrateContext,\n         let self_ty = ty::node_id_to_type(ccx.tcx, method.self_id);\n         let self_ty = match param_substs {\n             None => self_ty,\n-            Some(@param_substs {tys: ref tys, _}) => {\n-                ty::subst_tps(ccx.tcx, *tys, None, self_ty)\n+            Some(@param_substs {tys: ref tys, self_ty: ref self_sub, _}) => {\n+                ty::subst_tps(ccx.tcx, *tys, *self_sub, self_ty)\n             }\n         };\n         debug!(\"calling trans_fn with self_ty %s\","}]}