{"sha": "bc293ed53e9a747b12e03eee43df96d47e362bd2", "node_id": "C_kwDOAAsO6NoAKGJjMjkzZWQ1M2U5YTc0N2IxMmUwM2VlZTQzZGY5NmQ0N2UzNjJiZDI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-11T19:46:58Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-11T19:48:24Z"}, "message": "bug! with a better error message for failing Instance::resolve", "tree": {"sha": "1a7ddff1ed774da43bad99f0bfda6bbf67213d47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a7ddff1ed774da43bad99f0bfda6bbf67213d47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc293ed53e9a747b12e03eee43df96d47e362bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc293ed53e9a747b12e03eee43df96d47e362bd2", "html_url": "https://github.com/rust-lang/rust/commit/bc293ed53e9a747b12e03eee43df96d47e362bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc293ed53e9a747b12e03eee43df96d47e362bd2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d137783642b0b98eda2796dc66bffc2b089a8327", "url": "https://api.github.com/repos/rust-lang/rust/commits/d137783642b0b98eda2796dc66bffc2b089a8327", "html_url": "https://github.com/rust-lang/rust/commit/d137783642b0b98eda2796dc66bffc2b089a8327"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "98b5fb1cce28531eb856e758cde8061b8ae15426", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc293ed53e9a747b12e03eee43df96d47e362bd2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc293ed53e9a747b12e03eee43df96d47e362bd2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=bc293ed53e9a747b12e03eee43df96d47e362bd2", "patch": "@@ -349,10 +349,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     // Handle special calls like intrinsics and empty drop glue.\n     let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {\n-        let instance = ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n-            .unwrap()\n-            .unwrap()\n-            .polymorphize(fx.tcx);\n+        let instance =\n+            ty::Instance::expect_resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n+                .polymorphize(fx.tcx);\n \n         if fx.tcx.symbol_name(instance).name.starts_with(\"llvm.\") {\n             crate::intrinsics::codegen_llvm_intrinsic_call("}, {"sha": "831956cb2be38d2eb5afa07000c5f9e555646da1", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc293ed53e9a747b12e03eee43df96d47e362bd2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc293ed53e9a747b12e03eee43df96d47e362bd2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=bc293ed53e9a747b12e03eee43df96d47e362bd2", "patch": "@@ -751,10 +751,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (instance, mut llfn) = match *callee.layout.ty.kind() {\n             ty::FnDef(def_id, substs) => (\n                 Some(\n-                    ty::Instance::resolve(bx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs)\n-                        .unwrap()\n-                        .unwrap()\n-                        .polymorphize(bx.tcx()),\n+                    ty::Instance::expect_resolve(\n+                        bx.tcx(),\n+                        ty::ParamEnv::reveal_all(),\n+                        def_id,\n+                        substs,\n+                    )\n+                    .polymorphize(bx.tcx()),\n                 ),\n                 None,\n             ),"}, {"sha": "35d369ffc891c859e035e8555a36dec60b29fda8", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc293ed53e9a747b12e03eee43df96d47e362bd2/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc293ed53e9a747b12e03eee43df96d47e362bd2/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=bc293ed53e9a747b12e03eee43df96d47e362bd2", "patch": "@@ -385,6 +385,21 @@ impl<'tcx> Instance<'tcx> {\n         )\n     }\n \n+    pub fn expect_resolve(\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Instance<'tcx> {\n+        match ty::Instance::resolve(tcx, param_env, def_id, substs) {\n+            Ok(Some(instance)) => instance,\n+            _ => bug!(\n+                \"failed to resolve instance for {}\",\n+                tcx.def_path_str_with_substs(def_id, substs)\n+            ),\n+        }\n+    }\n+\n     // This should be kept up to date with `resolve`.\n     pub fn resolve_opt_const_arg(\n         tcx: TyCtxt<'tcx>,\n@@ -525,7 +540,7 @@ impl<'tcx> Instance<'tcx> {\n     pub fn resolve_drop_in_place(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::Instance<'tcx> {\n         let def_id = tcx.require_lang_item(LangItem::DropInPlace, None);\n         let substs = tcx.intern_substs(&[ty.into()]);\n-        Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap().unwrap()\n+        Instance::expect_resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(tcx), ret)]"}, {"sha": "10ea4d29cfe4e3317df1500b046cb1ec2d32c67c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc293ed53e9a747b12e03eee43df96d47e362bd2/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc293ed53e9a747b12e03eee43df96d47e362bd2/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=bc293ed53e9a747b12e03eee43df96d47e362bd2", "patch": "@@ -931,10 +931,13 @@ fn visit_fn_use<'tcx>(\n ) {\n     if let ty::FnDef(def_id, substs) = *ty.kind() {\n         let instance = if is_direct_call {\n-            ty::Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap().unwrap()\n+            ty::Instance::expect_resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n         } else {\n-            ty::Instance::resolve_for_fn_ptr(tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n-                .unwrap()\n+            match ty::Instance::resolve_for_fn_ptr(tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n+            {\n+                Some(instance) => instance,\n+                _ => bug!(\"failed to resolve instance for {ty}\"),\n+            }\n         };\n         visit_instance_use(tcx, instance, is_direct_call, source, output);\n     }\n@@ -1369,9 +1372,8 @@ fn create_mono_items_for_default_impls<'tcx>(\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         });\n-                    let instance = ty::Instance::resolve(tcx, param_env, method.def_id, substs)\n-                        .unwrap()\n-                        .unwrap();\n+                    let instance =\n+                        ty::Instance::expect_resolve(tcx, param_env, method.def_id, substs);\n \n                     let mono_item = create_fn_mono_item(tcx, instance, DUMMY_SP);\n                     if mono_item.node.is_instantiable(tcx) && should_codegen_locally(tcx, &instance)"}]}