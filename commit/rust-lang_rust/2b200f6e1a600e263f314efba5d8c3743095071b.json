{"sha": "2b200f6e1a600e263f314efba5d8c3743095071b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMjAwZjZlMWE2MDBlMjYzZjMxNGVmYmE1ZDhjMzc0MzA5NTA3MWI=", "commit": {"author": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-05-25T14:29:39Z"}, "committer": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-05-27T09:26:35Z"}, "message": "Disable broken struct field rainbowing", "tree": {"sha": "96daa90ff3fd6b3ebd372784ca75c6c495dbc8bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96daa90ff3fd6b3ebd372784ca75c6c495dbc8bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b200f6e1a600e263f314efba5d8c3743095071b", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niF0EABECAB0WIQQ4AX3IqIzUAd4RqS7tuxqNIEegdAUCXOutSwAKCRDtuxqNIEeg\ndAbKAJ4oTpgnujsYNuHdqh5ipPIjAXXdWgCdEIQATa/BIfROF49zHSBenBca2J4=\n=7ehx\n-----END PGP SIGNATURE-----", "payload": "tree 96daa90ff3fd6b3ebd372784ca75c6c495dbc8bf\nparent 43d5a4965308ec4b594725c0bd02cb046bdb730c\nauthor Pascal Hertleif <pascal@technocreatives.com> 1558794579 +0200\ncommitter Pascal Hertleif <pascal@technocreatives.com> 1558949195 +0200\n\nDisable broken struct field rainbowing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b200f6e1a600e263f314efba5d8c3743095071b", "html_url": "https://github.com/rust-lang/rust/commit/2b200f6e1a600e263f314efba5d8c3743095071b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b200f6e1a600e263f314efba5d8c3743095071b/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43d5a4965308ec4b594725c0bd02cb046bdb730c", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d5a4965308ec4b594725c0bd02cb046bdb730c", "html_url": "https://github.com/rust-lang/rust/commit/43d5a4965308ec4b594725c0bd02cb046bdb730c"}], "stats": {"total": 30, "additions": 7, "deletions": 23}, "files": [{"sha": "452407e8e3aa8db2af4d7fa19f8e959306433e10", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b200f6e1a600e263f314efba5d8c3743095071b/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b200f6e1a600e263f314efba5d8c3743095071b/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=2b200f6e1a600e263f314efba5d8c3743095071b", "patch": "@@ -463,16 +463,16 @@ impl Analysis {\n     }\n \n     /// Computes syntax highlighting for the given file.\n-    pub fn highlight_as_html(&self, file_id: FileId) -> Cancelable<String> {\n-        self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id, true))\n+    pub fn highlight_as_html(&self, file_id: FileId, rainbow: bool) -> Cancelable<String> {\n+        self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id, rainbow))\n     }\n \n     /// Computes completions at the given position.\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n         self.with_db(|db| completion::completions(db, position).map(Into::into))\n     }\n \n-    /// Computes assists (aks code actons aka intentions) for the given\n+    /// Computes assists (aka code actions aka intentions) for the given\n     /// position.\n     pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<Assist>> {\n         self.with_db(|db| assists::assists(db, frange))"}, {"sha": "ebd187a35d76fe1efd14932839f73badf4907ef1", "filename": "crates/ra_ide_api/src/snapshots/highlighting.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b200f6e1a600e263f314efba5d8c3743095071b/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/2b200f6e1a600e263f314efba5d8c3743095071b/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=2b200f6e1a600e263f314efba5d8c3743095071b", "patch": "@@ -19,8 +19,8 @@\n </style>\n <pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"function\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"variable\" data-binding-hash=\"12067179602561426350\" style=\"color: hsl(78,84%,47%);\">x</span>: <span class=\"text\">i32</span>,\n-    <span class=\"keyword\">pub</span> <span class=\"variable\" data-binding-hash=\"15562018766631452210\" style=\"color: hsl(318,95%,78%);\">y</span>: <span class=\"text\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"function\">x</span>: <span class=\"text\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"function\">y</span>: <span class=\"text\">i32</span>,\n }\n \n <span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type function\">T</span>&gt;() -&gt; <span class=\"type\">T</span> {\n@@ -33,7 +33,7 @@\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable\" data-binding-hash=\"9636295041291189729\" style=\"color: hsl(51,57%,74%);\">vec</span> = <span class=\"text\">Vec</span>::<span class=\"text\">new</span>();\n     <span class=\"keyword.control\">if</span> <span class=\"keyword\">true</span> {\n-        <span class=\"variable\" data-binding-hash=\"8496027264380925433\" style=\"color: hsl(18,48%,55%);\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\" data-binding-hash=\"17368948500121423555\" style=\"color: hsl(49,97%,70%);\">x</span>: <span class=\"literal\">0</span>, <span class=\"field\" data-binding-hash=\"13663097548341495469\" style=\"color: hsl(26,51%,46%);\">y</span>: <span class=\"literal\">1</span> });\n+        <span class=\"variable\" data-binding-hash=\"8496027264380925433\" style=\"color: hsl(18,48%,55%);\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>: <span class=\"literal\">0</span>, <span class=\"field\">y</span>: <span class=\"literal\">1</span> });\n     }\n     <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"variable\" data-binding-hash=\"8496027264380925433\" style=\"color: hsl(18,48%,55%);\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal\">0</span>); }\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "e46686ab9470cec1aaba3272e7f60b7da330ec1e", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2b200f6e1a600e263f314efba5d8c3743095071b/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b200f6e1a600e263f314efba5d8c3743095071b/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=2b200f6e1a600e263f314efba5d8c3743095071b", "patch": "@@ -68,16 +68,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                     match classify_name_ref(db, &analyzer, name_ref) {\n                         Some(Method(_)) => \"function\",\n                         Some(Macro(_)) => \"macro\",\n-                        Some(FieldAccess(field)) => {\n-                            let (hir_file_id, src) = field.source(db);\n-                            if let hir::FieldSource::Named(name) = src {\n-                                let text = name.syntax().text().to_smol_string();\n-                                let shadow_count = 0; // potentially even from different file\n-                                binding_hash = Some(calc_binding_hash(hir_file_id.original_file(db), &text, shadow_count));\n-                            }\n-\n-                            \"field\"\n-                        },\n+                        Some(FieldAccess(_)) => \"field\",\n                         Some(AssocItem(ImplItem::Method(_))) => \"function\",\n                         Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n                         Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n@@ -119,13 +110,6 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                             calc_binding_hash(file_id, &text, *shadow_count)\n                         });\n                         \"variable\"\n-                    } else if name.syntax().ancestors().any(|x| ast::NamedFieldDef::cast(x).is_some()) {\n-                        binding_hash = Some({\n-                            let text = name.syntax().text().to_smol_string();\n-                            let shadow_count = 0;\n-                            calc_binding_hash(file_id, &text, shadow_count)\n-                        });\n-                        \"variable\"\n                     } else {\n                         \"function\"\n                     }"}]}