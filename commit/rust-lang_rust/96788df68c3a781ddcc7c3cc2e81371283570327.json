{"sha": "96788df68c3a781ddcc7c3cc2e81371283570327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Nzg4ZGY2OGMzYTc4MWRkY2M3YzNjYzJlODEzNzEyODM1NzAzMjc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T22:46:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:23:05Z"}, "message": "Remove hir::Arm::attrs.", "tree": {"sha": "21cd6506f8164bddf1d0d99f421f34a6d2646150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21cd6506f8164bddf1d0d99f421f34a6d2646150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96788df68c3a781ddcc7c3cc2e81371283570327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96788df68c3a781ddcc7c3cc2e81371283570327", "html_url": "https://github.com/rust-lang/rust/commit/96788df68c3a781ddcc7c3cc2e81371283570327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96788df68c3a781ddcc7c3cc2e81371283570327/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a987bbb97c12235b4abb9d4fa742ab1f40401df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a987bbb97c12235b4abb9d4fa742ab1f40401df5", "html_url": "https://github.com/rust-lang/rust/commit/a987bbb97c12235b4abb9d4fa742ab1f40401df5"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "8152356bd3552c4eb8b7d6af9bb7fb6300a917c0", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/96788df68c3a781ddcc7c3cc2e81371283570327/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96788df68c3a781ddcc7c3cc2e81371283570327/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=96788df68c3a781ddcc7c3cc2e81371283570327", "patch": "@@ -618,14 +618,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n         });\n         let hir_id = self.next_id();\n-        hir::Arm {\n-            hir_id,\n-            attrs: self.lower_attrs(hir_id, &arm.attrs),\n-            pat,\n-            guard,\n-            body: self.lower_expr(&arm.body),\n-            span: arm.span,\n-        }\n+        self.lower_attrs(hir_id, &arm.attrs);\n+        hir::Arm { hir_id, pat, guard, body: self.lower_expr(&arm.body), span: arm.span }\n     }\n \n     /// Lower an `async` construct to a generator that is then wrapped so it implements `Future`.\n@@ -2169,13 +2163,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn arm(&mut self, pat: &'hir hir::Pat<'hir>, expr: &'hir hir::Expr<'hir>) -> hir::Arm<'hir> {\n-        hir::Arm {\n-            hir_id: self.next_id(),\n-            attrs: &[],\n-            pat,\n-            guard: None,\n-            span: expr.span,\n-            body: expr,\n-        }\n+        hir::Arm { hir_id: self.next_id(), pat, guard: None, span: expr.span, body: expr }\n     }\n }"}, {"sha": "669d6b6628985ea1bd5135089eb4d8916ea1bb33", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96788df68c3a781ddcc7c3cc2e81371283570327/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96788df68c3a781ddcc7c3cc2e81371283570327/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=96788df68c3a781ddcc7c3cc2e81371283570327", "patch": "@@ -1188,7 +1188,6 @@ pub struct Arm<'hir> {\n     #[stable_hasher(ignore)]\n     pub hir_id: HirId,\n     pub span: Span,\n-    pub attrs: &'hir [Attribute],\n     /// If this pattern and the optional guard matches, then `body` is evaluated.\n     pub pat: &'hir Pat<'hir>,\n     /// Optional guard clause."}, {"sha": "837aae909c18e2bfd3d75caa9a41ef310797cf35", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/96788df68c3a781ddcc7c3cc2e81371283570327/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96788df68c3a781ddcc7c3cc2e81371283570327/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=96788df68c3a781ddcc7c3cc2e81371283570327", "patch": "@@ -82,6 +82,7 @@ impl PpAnn for &dyn rustc_hir::intravisit::Map<'_> {\n pub struct State<'a> {\n     pub s: pp::Printer,\n     comments: Option<Comments<'a>>,\n+    attrs: &'a hir::HirIdVec<&'a [ast::Attribute]>,\n     ann: &'a (dyn PpAnn + 'a),\n }\n \n@@ -163,7 +164,7 @@ pub fn print_crate<'a>(\n     input: String,\n     ann: &'a dyn PpAnn,\n ) -> String {\n-    let mut s = State::new_from_input(sm, filename, input, ann);\n+    let mut s = State::new_from_input(sm, filename, input, &krate.attrs, ann);\n \n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n@@ -178,17 +179,28 @@ impl<'a> State<'a> {\n         sm: &'a SourceMap,\n         filename: FileName,\n         input: String,\n+        attrs: &'a hir::HirIdVec<&[ast::Attribute]>,\n         ann: &'a dyn PpAnn,\n     ) -> State<'a> {\n-        State { s: pp::mk_printer(), comments: Some(Comments::new(sm, filename, input)), ann }\n+        State {\n+            s: pp::mk_printer(),\n+            comments: Some(Comments::new(sm, filename, input)),\n+            attrs,\n+            ann,\n+        }\n+    }\n+\n+    fn attrs(&self, id: hir::HirId) -> &'a [ast::Attribute] {\n+        self.attrs.get(id).map_or(&[], |la| *la)\n     }\n }\n \n pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n where\n     F: FnOnce(&mut State<'_>),\n {\n-    let mut printer = State { s: pp::mk_printer(), comments: None, ann };\n+    let mut printer =\n+        State { s: pp::mk_printer(), comments: None, attrs: &hir::HirIdVec::default(), ann };\n     f(&mut printer);\n     printer.s.eof()\n }\n@@ -2027,13 +2039,13 @@ impl<'a> State<'a> {\n     pub fn print_arm(&mut self, arm: &hir::Arm<'_>) {\n         // I have no idea why this check is necessary, but here it\n         // is :(\n-        if arm.attrs.is_empty() {\n+        if self.attrs(arm.hir_id).is_empty() {\n             self.s.space();\n         }\n         self.cbox(INDENT_UNIT);\n         self.ann.pre(self, AnnNode::Arm(arm));\n         self.ibox(0);\n-        self.print_outer_attributes(&arm.attrs);\n+        self.print_outer_attributes(&self.attrs(arm.hir_id));\n         self.print_pat(&arm.pat);\n         self.s.space();\n         if let Some(ref g) = arm.guard {"}, {"sha": "9c87759d51d2db63dab4723091d93aacdf89c694", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96788df68c3a781ddcc7c3cc2e81371283570327/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96788df68c3a781ddcc7c3cc2e81371283570327/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=96788df68c3a781ddcc7c3cc2e81371283570327", "patch": "@@ -1207,11 +1207,11 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n         if b0 != b1;\n         let if_guard = &b0_arms[0].guard;\n         if if_guard.is_none() || b0_arms.len() == 1;\n-        if b0_arms[0].attrs.is_empty();\n+        if cx.tcx.hir().attrs(b0_arms[0].hir_id).is_empty();\n         if b0_arms[1..].iter()\n             .all(|arm| {\n                 find_bool_lit(&arm.body.kind, desugared).map_or(false, |b| b == b0) &&\n-                arm.guard.is_none() && arm.attrs.is_empty()\n+                arm.guard.is_none() && cx.tcx.hir().attrs(arm.hir_id).is_empty()\n             });\n         then {\n             // The suggestion may be incorrect, because some arms can have `cfg` attributes"}, {"sha": "e1c58d88952e8a612148d4e481efd320b03c50db", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96788df68c3a781ddcc7c3cc2e81371283570327/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96788df68c3a781ddcc7c3cc2e81371283570327/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=96788df68c3a781ddcc7c3cc2e81371283570327", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_arm(&mut self, cx: &LateContext<'tcx>, arm: &'tcx hir::Arm<'_>) {\n-        if !has_attr(cx.sess(), &arm.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(arm.hir_id)) {\n             return;\n         }\n         print_pat(cx, &arm.pat, 1);"}]}