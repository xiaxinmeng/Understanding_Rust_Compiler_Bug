{"sha": "5ade3fe32c8a742504aaddcbe0d6e498f8eae11d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZGUzZmUzMmM4YTc0MjUwNGFhZGRjYmUwZDZlNDk4ZjhlYWUxMWQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-01-18T21:24:33Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-02-15T13:27:51Z"}, "message": "Add a ThinBox library as a libcore test for pointer metadata APIs", "tree": {"sha": "eb41ccc08288a4af4338dede7f164dd578720e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb41ccc08288a4af4338dede7f164dd578720e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d", "html_url": "https://github.com/rust-lang/rust/commit/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21ceebf296ce0a818d2c56b331772f4a7f5b0a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/21ceebf296ce0a818d2c56b331772f4a7f5b0a41", "html_url": "https://github.com/rust-lang/rust/commit/21ceebf296ce0a818d2c56b331772f4a7f5b0a41"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "2d4f13167fd609672157074054183e49c55eb51d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=5ade3fe32c8a742504aaddcbe0d6e498f8eae11d", "patch": "@@ -79,6 +79,7 @@\n #![feature(slice_group_by)]\n #![feature(trusted_random_access)]\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![cfg_attr(not(bootstrap), feature(unsize))]\n \n extern crate test;\n "}, {"sha": "224a58e3ccdb7bcc81f2c80a29155c6ca571a4b9", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ade3fe32c8a742504aaddcbe0d6e498f8eae11d/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=5ade3fe32c8a742504aaddcbe0d6e498f8eae11d", "patch": "@@ -555,3 +555,115 @@ fn from_raw_parts() {\n     assert_eq!(ptr::from_raw_parts_mut(address, 5), slice_ptr.as_ptr());\n     assert_eq!(NonNull::from_raw_parts(NonNull::new(address).unwrap(), 5), slice_ptr);\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn thin_box() {\n+    let foo = ThinBox::<dyn Display>::new(4);\n+    assert_eq!(foo.to_string(), \"4\");\n+    drop(foo);\n+    let bar = ThinBox::<dyn Display>::new(7);\n+    assert_eq!(bar.to_string(), \"7\");\n+\n+    // A slightly more interesting library that could be built on top of metadata APIs.\n+    //\n+    // * It could be generalized to any `T:\u00a0?Sized` (not just trait object)\n+    //   if `{size,align}_of_for_meta<T:\u00a0?Sized>(T::Metadata)` are added.\n+    // * Constructing a `ThinBox` without consuming and deallocating a `Box`\n+    //   requires either the unstable `Unsize` marker trait,\n+    //   or the unstable `unsized_locals`\u00a0language feature,\n+    //   or taking `&dyn T` and restricting to `T: Copy`.\n+\n+    use std::alloc::*;\n+    use std::marker::PhantomData;\n+\n+    struct ThinBox<T>\n+    where\n+        T: ?Sized + Pointee<Metadata = DynMetadata<T>>,\n+    {\n+        ptr: NonNull<DynMetadata<T>>,\n+        phantom: PhantomData<T>,\n+    }\n+\n+    impl<T> ThinBox<T>\n+    where\n+        T: ?Sized + Pointee<Metadata = DynMetadata<T>>,\n+    {\n+        pub fn new<Value: std::marker::Unsize<T>>(value: Value) -> Self {\n+            let unsized_: &T = &value;\n+            let meta = metadata(unsized_);\n+            let meta_layout = Layout::for_value(&meta);\n+            let value_layout = Layout::for_value(&value);\n+            let (layout, offset) = meta_layout.extend(value_layout).unwrap();\n+            // `DynMetadata` is pointer-sized:\n+            assert!(layout.size() > 0);\n+            // If `ThinBox<T>` is generalized to any `T: ?Sized`,\n+            // handle ZSTs with a dangling pointer without going through `alloc()`,\n+            // like `Box<T>` does.\n+            unsafe {\n+                let ptr = NonNull::new(alloc(layout))\n+                    .unwrap_or_else(|| handle_alloc_error(layout))\n+                    .cast::<DynMetadata<T>>();\n+                ptr.as_ptr().write(meta);\n+                ptr.cast::<u8>().as_ptr().add(offset).cast::<Value>().write(value);\n+                Self { ptr, phantom: PhantomData }\n+            }\n+        }\n+\n+        fn meta(&self) -> DynMetadata<T> {\n+            unsafe { *self.ptr.as_ref() }\n+        }\n+\n+        fn layout(&self) -> (Layout, usize) {\n+            let meta = self.meta();\n+            Layout::for_value(&meta).extend(meta.layout()).unwrap()\n+        }\n+\n+        fn value_ptr(&self) -> *const T {\n+            let (_, offset) = self.layout();\n+            let data_ptr = unsafe { self.ptr.cast::<u8>().as_ptr().add(offset) };\n+            ptr::from_raw_parts(data_ptr.cast(), self.meta())\n+        }\n+\n+        fn value_mut_ptr(&mut self) -> *mut T {\n+            let (_, offset) = self.layout();\n+            // FIXME: can this line be shared with the same in `value_ptr()`\n+            // without upsetting Stacked Borrows?\n+            let data_ptr = unsafe { self.ptr.cast::<u8>().as_ptr().add(offset) };\n+            from_raw_parts_mut(data_ptr.cast(), self.meta())\n+        }\n+    }\n+\n+    impl<T> std::ops::Deref for ThinBox<T>\n+    where\n+        T: ?Sized + Pointee<Metadata = DynMetadata<T>>,\n+    {\n+        type Target = T;\n+\n+        fn deref(&self) -> &T {\n+            unsafe { &*self.value_ptr() }\n+        }\n+    }\n+\n+    impl<T> std::ops::DerefMut for ThinBox<T>\n+    where\n+        T: ?Sized + Pointee<Metadata = DynMetadata<T>>,\n+    {\n+        fn deref_mut(&mut self) -> &mut T {\n+            unsafe { &mut *self.value_mut_ptr() }\n+        }\n+    }\n+\n+    impl<T> std::ops::Drop for ThinBox<T>\n+    where\n+        T: ?Sized + Pointee<Metadata = DynMetadata<T>>,\n+    {\n+        fn drop(&mut self) {\n+            let (layout, _) = self.layout();\n+            unsafe {\n+                drop_in_place::<T>(&mut **self);\n+                dealloc(self.ptr.cast().as_ptr(), layout);\n+            }\n+        }\n+    }\n+}"}]}