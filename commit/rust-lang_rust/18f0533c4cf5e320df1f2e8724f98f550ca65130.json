{"sha": "18f0533c4cf5e320df1f2e8724f98f550ca65130", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZjA1MzNjNGNmNWUzMjBkZjFmMmU4NzI0Zjk4ZjU1MGNhNjUxMzA=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-02-28T00:33:55Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-03-05T20:43:44Z"}, "message": "different versions may have different deps", "tree": {"sha": "b458feb2484c3422683351829067dcdfb6fa6966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b458feb2484c3422683351829067dcdfb6fa6966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18f0533c4cf5e320df1f2e8724f98f550ca65130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18f0533c4cf5e320df1f2e8724f98f550ca65130", "html_url": "https://github.com/rust-lang/rust/commit/18f0533c4cf5e320df1f2e8724f98f550ca65130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18f0533c4cf5e320df1f2e8724f98f550ca65130/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fc5daebfb4218312f0f2ee28de7c6bcd40b632c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc5daebfb4218312f0f2ee28de7c6bcd40b632c", "html_url": "https://github.com/rust-lang/rust/commit/0fc5daebfb4218312f0f2ee28de7c6bcd40b632c"}], "stats": {"total": 150, "additions": 84, "deletions": 66}, "files": [{"sha": "f0801b806ec6391fb2de1627c2b5087c6395b9c1", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 84, "deletions": 66, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/18f0533c4cf5e320df1f2e8724f98f550ca65130/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f0533c4cf5e320df1f2e8724f98f550ca65130/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=18f0533c4cf5e320df1f2e8724f98f550ca65130", "patch": "@@ -49,68 +49,70 @@ static EXCEPTIONS: &'static [&'static str] = &[\n ];\n \n /// Which crates to check against the whitelist?\n-static WHITELIST_CRATES: &'static [Crate] = &[Crate(\"rustc\"), Crate(\"rustc_trans\")];\n+static WHITELIST_CRATES: &'static [CrateVersion] = &[\n+    CrateVersion(\"rustc\", \"0.0.0\"),\n+    CrateVersion(\"rustc_trans\", \"0.0.0\"),\n+];\n \n /// Whitelist of crates rustc is allowed to depend on. Avoid adding to the list if possible.\n static WHITELIST: &'static [Crate] = &[\n-    Crate(\"ar\"),\n-    Crate(\"arena\"),\n-    Crate(\"backtrace\"),\n-    Crate(\"backtrace-sys\"),\n-    Crate(\"bitflags\"),\n-    Crate(\"build_helper\"),\n-    Crate(\"byteorder\"),\n-    Crate(\"cc\"),\n-    Crate(\"cfg-if\"),\n-    Crate(\"cmake\"),\n-    Crate(\"filetime\"),\n-    Crate(\"flate2\"),\n-    Crate(\"fmt_macros\"),\n-    Crate(\"fuchsia-zircon\"),\n-    Crate(\"fuchsia-zircon-sys\"),\n-    Crate(\"graphviz\"),\n-    Crate(\"jobserver\"),\n-    Crate(\"kernel32-sys\"),\n-    Crate(\"lazy_static\"),\n-    Crate(\"libc\"),\n-    Crate(\"log\"),\n-    Crate(\"log_settings\"),\n-    Crate(\"miniz-sys\"),\n-    Crate(\"num_cpus\"),\n-    Crate(\"owning_ref\"),\n-    Crate(\"parking_lot\"),\n-    Crate(\"parking_lot_core\"),\n-    Crate(\"rand\"),\n-    Crate(\"redox_syscall\"),\n-    Crate(\"rustc\"),\n-    Crate(\"rustc-demangle\"),\n-    Crate(\"rustc_allocator\"),\n-    Crate(\"rustc_apfloat\"),\n-    Crate(\"rustc_back\"),\n-    Crate(\"rustc_binaryen\"),\n-    Crate(\"rustc_const_eval\"),\n-    Crate(\"rustc_const_math\"),\n-    Crate(\"rustc_cratesio_shim\"),\n-    Crate(\"rustc_data_structures\"),\n-    Crate(\"rustc_errors\"),\n-    Crate(\"rustc_incremental\"),\n-    Crate(\"rustc_llvm\"),\n-    Crate(\"rustc_mir\"),\n-    Crate(\"rustc_platform_intrinsics\"),\n-    Crate(\"rustc_trans\"),\n-    Crate(\"rustc_trans_utils\"),\n-    Crate(\"serialize\"),\n-    Crate(\"smallvec\"),\n-    Crate(\"stable_deref_trait\"),\n-    Crate(\"syntax\"),\n-    Crate(\"syntax_pos\"),\n-    Crate(\"tempdir\"),\n-    Crate(\"unicode-width\"),\n-    Crate(\"winapi\"),\n-    Crate(\"winapi-build\"),\n-    Crate(\"proc_macro\"),\n-    Crate(\"winapi-i686-pc-windows-gnu\"),\n-    Crate(\"winapi-x86_64-pc-windows-gnu\"),\n+//    Crate(\"ar\"),\n+//    Crate(\"arena\"),\n+//    Crate(\"backtrace\"),\n+//    Crate(\"backtrace-sys\"),\n+//    Crate(\"bitflags\"),\n+//    Crate(\"build_helper\"),\n+//    Crate(\"byteorder\"),\n+//    Crate(\"cc\"),\n+//    Crate(\"cfg-if\"),\n+//    Crate(\"cmake\"),\n+//    Crate(\"filetime\"),\n+//    Crate(\"flate2\"),\n+//    Crate(\"fmt_macros\"),\n+//    Crate(\"fuchsia-zircon\"),\n+//    Crate(\"fuchsia-zircon-sys\"),\n+//    Crate(\"graphviz\"),\n+//    Crate(\"jobserver\"),\n+//    Crate(\"kernel32-sys\"),\n+//    Crate(\"lazy_static\"),\n+//    Crate(\"libc\"),\n+//    Crate(\"log\"),\n+//    Crate(\"log_settings\"),\n+//    Crate(\"miniz-sys\"),\n+//    Crate(\"num_cpus\"),\n+//    Crate(\"owning_ref\"),\n+//    Crate(\"parking_lot\"),\n+//    Crate(\"parking_lot_core\"),\n+//    Crate(\"rand\"),\n+//    Crate(\"redox_syscall\"),\n+//    Crate(\"rustc\"),\n+//    Crate(\"rustc-demangle\"),\n+//    Crate(\"rustc_allocator\"),\n+//    Crate(\"rustc_apfloat\"),\n+//    Crate(\"rustc_back\"),\n+//    Crate(\"rustc_binaryen\"),\n+//    Crate(\"rustc_const_eval\"),\n+//    Crate(\"rustc_const_math\"),\n+//    Crate(\"rustc_cratesio_shim\"),\n+//    Crate(\"rustc_data_structures\"),\n+//    Crate(\"rustc_errors\"),\n+//    Crate(\"rustc_incremental\"),\n+//    Crate(\"rustc_llvm\"),\n+//    Crate(\"rustc_mir\"),\n+//    Crate(\"rustc_platform_intrinsics\"),\n+//    Crate(\"rustc_trans\"),\n+//    Crate(\"rustc_trans_utils\"),\n+//    Crate(\"serialize\"),\n+//    Crate(\"smallvec\"),\n+//    Crate(\"stable_deref_trait\"),\n+//    Crate(\"syntax\"),\n+//    Crate(\"syntax_pos\"),\n+//    Crate(\"tempdir\"),\n+//    Crate(\"unicode-width\"),\n+//    Crate(\"winapi\"),\n+//    Crate(\"winapi-build\"),\n+//    Crate(\"winapi-i686-pc-windows-gnu\"),\n+//    Crate(\"winapi-x86_64-pc-windows-gnu\"),\n ];\n \n // Some types for Serde to deserialize the output of `cargo metadata` to...\n@@ -135,16 +137,32 @@ struct ResolveNode {\n #[derive(Copy, Clone, PartialOrd, Ord, PartialEq, Eq, Debug, Hash)]\n struct Crate<'a>(&'a str); // (name,)\n \n+#[derive(Copy, Clone, PartialOrd, Ord, PartialEq, Eq, Debug, Hash)]\n+struct CrateVersion<'a>(&'a str, &'a str); // (name, version)\n+\n impl<'a> Crate<'a> {\n+    pub fn id_str(&self) -> String {\n+        format!(\"{} \", self.0)\n+    }\n+}\n+\n+impl<'a> CrateVersion<'a> {\n     pub fn from_str(s: &'a str) -> Self {\n         let mut parts = s.split(\" \");\n         let name = parts.next().unwrap();\n+        let version = parts.next().unwrap();\n \n-        Crate(name)\n+        CrateVersion(name, version)\n     }\n \n     pub fn id_str(&self) -> String {\n-        format!(\"{} \", self.0)\n+        format!(\"{} {}\", self.0, self.1)\n+    }\n+}\n+\n+impl<'a> From<CrateVersion<'a>> for Crate<'a> {\n+    fn from(cv: CrateVersion<'a>) -> Crate<'a> {\n+        Crate(cv.0)\n     }\n }\n \n@@ -266,8 +284,8 @@ fn get_deps(path: &Path, cargo: &Path) -> Resolve {\n fn check_crate_whitelist<'a, 'b>(\n     whitelist: &'a HashSet<Crate>,\n     resolve: &'a Resolve,\n-    visited: &'b mut BTreeSet<Crate<'a>>,\n-    krate: Crate<'a>,\n+    visited: &'b mut BTreeSet<CrateVersion<'a>>,\n+    krate: CrateVersion<'a>,\n ) -> BTreeSet<Crate<'a>> {\n     // Will contain bad deps\n     let mut unapproved = BTreeSet::new();\n@@ -280,8 +298,8 @@ fn check_crate_whitelist<'a, 'b>(\n     visited.insert(krate);\n \n     // If this dependency is not on the WHITELIST, add to bad set\n-    if !whitelist.contains(&krate) {\n-        unapproved.insert(krate);\n+    if !whitelist.contains(&krate.into()) {\n+        unapproved.insert(krate.into());\n     }\n \n     // Do a DFS in the crate graph (it's a DAG, so we know we have no cycles!)\n@@ -292,7 +310,7 @@ fn check_crate_whitelist<'a, 'b>(\n         .expect(\"crate does not exist\");\n \n     for dep in to_check.dependencies.iter() {\n-        let krate = Crate::from_str(dep);\n+        let krate = CrateVersion::from_str(dep);\n         let mut bad = check_crate_whitelist(whitelist, resolve, visited, krate);\n \n         unapproved.append(&mut bad);"}]}