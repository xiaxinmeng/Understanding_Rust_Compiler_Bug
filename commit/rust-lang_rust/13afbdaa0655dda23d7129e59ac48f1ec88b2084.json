{"sha": "13afbdaa0655dda23d7129e59ac48f1ec88b2084", "node_id": "C_kwDOAAsO6NoAKDEzYWZiZGFhMDY1NWRkYTIzZDcxMjllNTlhYzQ4ZjFlYzg4YjIwODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-17T19:00:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-17T19:00:38Z"}, "message": "Auto merge of #108862 - Mark-Simulacrum:bootstrap-bump, r=pietroalbini\n\nBump bootstrap compiler to 1.69 beta\n\nr? `@pietroalbini`", "tree": {"sha": "8b973419d64cbedccd13cb3fea874eebd42c90f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b973419d64cbedccd13cb3fea874eebd42c90f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13afbdaa0655dda23d7129e59ac48f1ec88b2084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13afbdaa0655dda23d7129e59ac48f1ec88b2084", "html_url": "https://github.com/rust-lang/rust/commit/13afbdaa0655dda23d7129e59ac48f1ec88b2084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13afbdaa0655dda23d7129e59ac48f1ec88b2084/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/03b01c5bec658081605ab078ad3fbcdb6b30f6c2", "html_url": "https://github.com/rust-lang/rust/commit/03b01c5bec658081605ab078ad3fbcdb6b30f6c2"}, {"sha": "df0be2d65eff57a7de8766a78d4d03a2de34f95f", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0be2d65eff57a7de8766a78d4d03a2de34f95f", "html_url": "https://github.com/rust-lang/rust/commit/df0be2d65eff57a7de8766a78d4d03a2de34f95f"}], "stats": {"total": 938, "additions": 457, "deletions": 481}, "files": [{"sha": "3d644de166526343d977bb09b7067162571fdd4a", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -91,7 +91,7 @@ declare_features! (\n     /// Allows coercing non capturing closures to function pointers.\n     (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n     /// Allows using the CMPXCHG16B target feature.\n-    (accepted, cmpxchg16b_target_feature, \"CURRENT_RUSTC_VERSION\", Some(44839), None),\n+    (accepted, cmpxchg16b_target_feature, \"1.69.0\", Some(44839), None),\n     /// Allows usage of the `compile_error!` macro.\n     (accepted, compile_error, \"1.20.0\", Some(40872), None),\n     /// Allows `impl Trait` in function return types."}, {"sha": "e0a7c864b94dc964cc1b577a0d7c23cbec6112f7", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -161,7 +161,7 @@ declare_features! (\n     /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n     /// Allows the `multiple_supertrait_upcastable` lint.\n-    (active, multiple_supertrait_upcastable, \"CURRENT_RUSTC_VERSION\", None, None),\n+    (active, multiple_supertrait_upcastable, \"1.69.0\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items.\n@@ -214,7 +214,7 @@ declare_features! (\n     /// Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n     (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n     /// Allows using `+bundled,+whole-archive` native libs.\n-    (active, packed_bundled_libs, \"CURRENT_RUSTC_VERSION\", Some(108081), None),\n+    (active, packed_bundled_libs, \"1.69.0\", Some(108081), None),\n     /// Allows using the `#![panic_runtime]` attribute.\n     (active, panic_runtime, \"1.10.0\", Some(32837), None),\n     /// Allows using `#[rustc_allow_const_fn_unstable]`.\n@@ -468,7 +468,7 @@ declare_features! (\n     /// Allows using the `non_exhaustive_omitted_patterns` lint.\n     (active, non_exhaustive_omitted_patterns_lint, \"1.57.0\", Some(89554), None),\n     /// Allows `for<T>` binders in where-clauses\n-    (incomplete, non_lifetime_binders, \"CURRENT_RUSTC_VERSION\", Some(108185), None),\n+    (incomplete, non_lifetime_binders, \"1.69.0\", Some(108185), None),\n     /// Allows making `dyn Trait` well-formed even if `Trait` is not object safe.\n     /// In that case, `dyn Trait: Trait` does not hold. Moreover, coercions and\n     /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden."}, {"sha": "5469261ef56592aecf495e384d29ab52a9fdd548", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -87,7 +87,7 @@\n #![warn(missing_debug_implementations)]\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n-#![cfg_attr(not(bootstrap), warn(multiple_supertrait_upcastable))]\n+#![warn(multiple_supertrait_upcastable)]\n //\n // Library features:\n #![feature(alloc_layout_extra)]\n@@ -195,7 +195,7 @@\n #![feature(c_unwind)]\n #![feature(with_negative_coherence)]\n #![cfg_attr(test, feature(panic_update_hook))]\n-#![cfg_attr(not(bootstrap), feature(multiple_supertrait_upcastable))]\n+#![feature(multiple_supertrait_upcastable)]\n //\n // Rustdoc features:\n #![feature(doc_cfg)]"}, {"sha": "11cb0827578646f2a47d5f5b0d43809634fc14a8", "filename": "library/core/src/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -28,7 +28,7 @@ use crate::fmt::{Debug, Display};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n #[rustc_has_incoherent_inherent_impls]\n-#[cfg_attr(not(bootstrap), allow(multiple_supertrait_upcastable))]\n+#[allow(multiple_supertrait_upcastable)]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n     ///\n@@ -489,7 +489,7 @@ impl Error for crate::char::CharTryFromError {\n #[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n impl Error for crate::time::TryFromFloatSecsError {}\n \n-#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n impl Error for crate::ffi::FromBytesUntilNulError {}\n \n #[unstable(feature = \"get_many_mut\", issue = \"104642\")]"}, {"sha": "fe8abdf7fad2fa49c6dc1d5571d3767f6c4cc488", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -153,10 +153,10 @@ impl Error for FromBytesWithNulError {\n /// This error is created by the [`CStr::from_bytes_until_nul`] method.\n ///\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n pub struct FromBytesUntilNulError(());\n \n-#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n impl fmt::Display for FromBytesUntilNulError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"data provided does not contain a nul\")\n@@ -324,8 +324,8 @@ impl CStr {\n     /// ```\n     ///\n     #[rustc_allow_const_fn_unstable(const_slice_index)]\n-    #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n+    #[rustc_const_stable(feature = \"cstr_from_bytes_until_nul\", since = \"1.69.0\")]\n     pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {"}, {"sha": "fcda097f01fce168a88c602abbb702a6ac732132", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -267,7 +267,7 @@ extern \"C\" {\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n-#[cfg_attr(not(bootstrap), lang = \"format_argument\")]\n+#[lang = \"format_argument\"]\n #[derive(Copy, Clone)]\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n@@ -280,7 +280,7 @@ pub struct ArgumentV1<'a> {\n /// This struct represents the unsafety of constructing an `Arguments`.\n /// It exists, rather than an unsafe function, in order to simplify the expansion\n /// of `format_args!(..)` and reduce the scope of the `unsafe` block.\n-#[cfg_attr(not(bootstrap), lang = \"format_unsafe_arg\")]\n+#[lang = \"format_unsafe_arg\"]\n #[allow(missing_debug_implementations)]\n #[doc(hidden)]\n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n@@ -497,7 +497,7 @@ impl<'a> Arguments<'a> {\n /// ```\n ///\n /// [`format()`]: ../../std/fmt/fn.format.html\n-#[cfg_attr(not(bootstrap), lang = \"format_arguments\")]\n+#[lang = \"format_arguments\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Copy, Clone)]\n pub struct Arguments<'a> {"}, {"sha": "6d70796f70718f809172eeb6994e7b1a0b7142ae", "filename": "library/core/src/fmt/rt/v1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Frt%2Fv1.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -5,7 +5,7 @@\n //! these can be statically allocated and are slightly optimized for the runtime\n #![allow(missing_debug_implementations)]\n \n-#[cfg_attr(not(bootstrap), lang = \"format_placeholder\")]\n+#[lang = \"format_placeholder\"]\n #[derive(Copy, Clone)]\n // FIXME: Rename this to Placeholder\n pub struct Argument {\n@@ -37,7 +37,7 @@ impl Argument {\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n-#[cfg_attr(not(bootstrap), lang = \"format_alignment\")]\n+#[lang = \"format_alignment\"]\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n@@ -51,7 +51,7 @@ pub enum Alignment {\n }\n \n /// Used by [width](https://doc.rust-lang.org/std/fmt/#width) and [precision](https://doc.rust-lang.org/std/fmt/#precision) specifiers.\n-#[cfg_attr(not(bootstrap), lang = \"format_count\")]\n+#[lang = \"format_count\"]\n #[derive(Copy, Clone)]\n pub enum Count {\n     /// Specified with a literal number, stores the value"}, {"sha": "de638552fa3780c2dee613d1b7baeb0bdda4197e", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -278,7 +278,7 @@\n //!\n //! ```\n //! # #![allow(unused_must_use)]\n-//! # #![cfg_attr(not(bootstrap), allow(map_unit_fn))]\n+//! # #![allow(map_unit_fn)]\n //! let v = vec![1, 2, 3, 4, 5];\n //! v.iter().map(|x| println!(\"{x}\"));\n //! ```"}, {"sha": "d48760ab3ebfa18ad72ccd8e0b862c1e7ee7f25d", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -69,7 +69,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n #[doc(notable_trait)]\n #[rustc_diagnostic_item = \"Iterator\"]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[rustc_diagnostic_item = \"IteratorItem\"]"}, {"sha": "526232f44ee1eff7e7998e50d1e889825976fe20", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -95,7 +95,7 @@\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n-#![cfg_attr(not(bootstrap), warn(multiple_supertrait_upcastable))]\n+#![warn(multiple_supertrait_upcastable)]\n //\n // Library features:\n #![feature(const_align_offset)]\n@@ -241,7 +241,7 @@\n #![feature(unsized_fn_params)]\n #![feature(asm_const)]\n #![feature(const_transmute_copy)]\n-#![cfg_attr(not(bootstrap), feature(multiple_supertrait_upcastable))]\n+#![feature(multiple_supertrait_upcastable)]\n //\n // Target features:\n #![feature(arm_target_feature)]\n@@ -254,7 +254,6 @@\n #![feature(sse4a_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(wasm_target_feature)]\n-#![cfg_attr(bootstrap, feature(cmpxchg16b_target_feature))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "9a0fd1f5f517b0e966eed9d1ceb36d5fad802183", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -97,7 +97,7 @@ unsafe impl<T: Sync + ?Sized> Send for &T {}\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]\n #[rustc_deny_explicit_impl]\n-#[cfg_attr(not(bootstrap), rustc_coinductive)]\n+#[rustc_coinductive]\n pub trait Sized {\n     // Empty.\n }\n@@ -877,8 +877,7 @@ pub trait Tuple {}\n /// All types that have the same size and alignment as a `usize` or\n /// `*const ()` automatically implement this trait.\n #[unstable(feature = \"pointer_like_trait\", issue = \"none\")]\n-#[cfg_attr(bootstrap, lang = \"pointer_sized\")]\n-#[cfg_attr(not(bootstrap), lang = \"pointer_like\")]\n+#[lang = \"pointer_like\"]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` needs to have the same alignment and size as a pointer\",\n     label = \"`{Self}` needs to be a pointer-like type\""}, {"sha": "2d48e27158004eaa58c7c4923661febec989dc8d", "filename": "library/core/src/net/socket_addr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnet%2Fsocket_addr.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -121,7 +121,7 @@ impl SocketAddr {\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     #[must_use]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -141,7 +141,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n@@ -182,7 +182,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn port(&self) -> u16 {\n         match *self {\n             SocketAddr::V4(ref a) => a.port(),\n@@ -226,7 +226,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(*self, SocketAddr::V4(_))\n     }\n@@ -248,7 +248,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(*self, SocketAddr::V6(_))\n     }\n@@ -268,7 +268,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n         SocketAddrV4 { ip, port }\n     }\n@@ -285,7 +285,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn ip(&self) -> &Ipv4Addr {\n         &self.ip\n     }\n@@ -318,7 +318,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn port(&self) -> u16 {\n         self.port\n     }\n@@ -359,7 +359,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n         SocketAddrV6 { ip, port, flowinfo, scope_id }\n     }\n@@ -376,7 +376,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn ip(&self) -> &Ipv6Addr {\n         &self.ip\n     }\n@@ -409,7 +409,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn port(&self) -> u16 {\n         self.port\n     }\n@@ -452,7 +452,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn flowinfo(&self) -> u32 {\n         self.flowinfo\n     }\n@@ -492,7 +492,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"1.69.0\")]\n     pub const fn scope_id(&self) -> u32 {\n         self.scope_id\n     }"}, {"sha": "c254803fbf650c6aaf698235b99d98f0a677f179", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -392,14 +392,7 @@ impl<T> NeverShortCircuit<T> {\n     pub fn wrap_mut_2<A, B>(\n         mut f: impl ~const FnMut(A, B) -> T,\n     ) -> impl ~const FnMut(A, B) -> Self {\n-        cfg_if! {\n-            if #[cfg(bootstrap)] {\n-                #[allow(unused_parens)]\n-                (const move |a, b| NeverShortCircuit(f(a, b)))\n-            } else {\n-                const move |a, b| NeverShortCircuit(f(a, b))\n-            }\n-        }\n+        const move |a, b| NeverShortCircuit(f(a, b))\n     }\n }\n "}, {"sha": "2f6b1c74da08ed8bb41af77271a614c9ec99cb6b", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -1951,8 +1951,7 @@ macro_rules! if_not_8_bit {\n     ($_:ident, $($tt:tt)*) => { $($tt)* };\n }\n \n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic_load_store))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic_load_store = \"8\"))]\n+#[cfg(target_has_atomic_load_store)]\n macro_rules! atomic_int {\n     ($cfg_cas:meta,\n      $cfg_align:meta,\n@@ -3125,8 +3124,7 @@ atomic_int_ptr_sized! {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n fn strongest_failure_ordering(order: Ordering) -> Ordering {\n     match order {\n         Release => Relaxed,\n@@ -3168,8 +3166,7 @@ unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_swap`.\n@@ -3186,8 +3183,7 @@ unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// Returns the previous value (like __sync_fetch_and_add).\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_add`.\n@@ -3204,8 +3200,7 @@ unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// Returns the previous value (like __sync_fetch_and_sub).\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_sub`.\n@@ -3221,8 +3216,7 @@ unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_compare_exchange<T: Copy>(\n     dst: *mut T,\n@@ -3257,8 +3251,7 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     dst: *mut T,\n@@ -3293,8 +3286,7 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_and`\n@@ -3310,8 +3302,7 @@ unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_nand`\n@@ -3327,8 +3318,7 @@ unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_or`\n@@ -3344,8 +3334,7 @@ unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n }\n \n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_xor`\n@@ -3362,8 +3351,7 @@ unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the max value (signed comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_max`\n@@ -3380,8 +3368,7 @@ unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the min value (signed comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_min`\n@@ -3398,8 +3385,7 @@ unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the max value (unsigned comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_umax`\n@@ -3416,8 +3402,7 @@ unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n \n /// returns the min value (unsigned comparison)\n #[inline]\n-#[cfg_attr(not(bootstrap), cfg(target_has_atomic))]\n-#[cfg_attr(bootstrap, cfg(target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     // SAFETY: the caller must uphold the safety contract for `atomic_umin`"}, {"sha": "99a4e0b5106c255af44d5baaf8cc9c20bdd11ea5", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -399,7 +399,7 @@ impl<T: AsFd> AsFd for crate::sync::Arc<T> {\n     }\n }\n \n-#[stable(feature = \"asfd_rc\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"asfd_rc\", since = \"1.69.0\")]\n impl<T: AsFd> AsFd for crate::rc::Rc<T> {\n     #[inline]\n     fn as_fd(&self) -> BorrowedFd<'_> {"}, {"sha": "592e072ad908ab4c9029e2ab3a5515597c02181a", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -254,7 +254,7 @@ impl<T: AsRawFd> AsRawFd for crate::sync::Arc<T> {\n     }\n }\n \n-#[stable(feature = \"asfd_rc\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"asfd_rc\", since = \"1.69.0\")]\n impl<T: AsRawFd> AsRawFd for crate::rc::Rc<T> {\n     #[inline]\n     fn as_raw_fd(&self) -> RawFd {"}, {"sha": "04fdb15f5acb216bdcfe7ea77577de237c70e04a", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -54,8 +54,8 @@ COPY host-x86_64/dist-x86_64-linux/build-clang.sh /tmp/\n RUN ./build-clang.sh\n ENV CC=clang CXX=clang++\n \n-# rustc-perf version from 2022-07-22\n-ENV PERF_COMMIT 3c253134664fdcba862c539d37f0de18557a9a4c\n+# rustc-perf version from 2023-03-15\n+ENV PERF_COMMIT 9dfaa35193154b690922347ee1141a06ec87a199\n RUN curl -LS -o perf.zip https://github.com/rust-lang/rustc-perf/archive/$PERF_COMMIT.zip && \\\n     unzip perf.zip && \\\n     mv rustc-perf-$PERF_COMMIT rustc-perf && \\"}, {"sha": "d4d80e8f77c5491189625800a67641ce73f73b43", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084", "patch": "@@ -175,8 +175,8 @@ def rustc_stage_2(self) -> Path:\n         return super().rustc_stage_2().with_suffix(\".exe\")\n \n     def build_rustc_perf(self):\n-        # rustc-perf version from 2022-07-22\n-        perf_commit = \"3c253134664fdcba862c539d37f0de18557a9a4c\"\n+        # rustc-perf version from 2023-03-15\n+        perf_commit = \"9dfaa35193154b690922347ee1141a06ec87a199\"\n         rustc_perf_zip_path = self.opt_artifacts() / \"perf.zip\"\n \n         def download_rustc_perf():"}, {"sha": "9250d9c280463e71f0c3e1c08676b14d1bf873e6", "filename": "src/stage0.json", "status": "modified", "additions": 398, "deletions": 398, "changes": 796, "blob_url": "https://github.com/rust-lang/rust/blob/13afbdaa0655dda23d7129e59ac48f1ec88b2084/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/13afbdaa0655dda23d7129e59ac48f1ec88b2084/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=13afbdaa0655dda23d7129e59ac48f1ec88b2084"}]}