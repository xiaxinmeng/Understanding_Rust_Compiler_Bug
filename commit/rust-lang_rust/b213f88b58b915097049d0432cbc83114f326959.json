{"sha": "b213f88b58b915097049d0432cbc83114f326959", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMTNmODhiNThiOTE1MDk3MDQ5ZDA0MzJjYmM4MzExNGYzMjY5NTk=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-19T22:23:27Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-19T22:48:15Z"}, "message": "promote memrchr to work on any platform", "tree": {"sha": "af6feafcf39246bd6b8213f97c7a35c4c4041da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af6feafcf39246bd6b8213f97c7a35c4c4041da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b213f88b58b915097049d0432cbc83114f326959", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXk27LwAKCRAnUl7150IK\nUGDrAQC1F/JuKLfU4NFsUSTdbbXQV+uKB4Znq9sjxtvCgjGSCQD/ZO68rfVICRwr\nB1d1iLTFdR8hna5wMvoeD1NyqRhmsQ4=\n=RKtf\n-----END PGP SIGNATURE-----", "payload": "tree af6feafcf39246bd6b8213f97c7a35c4c4041da9\nparent 9a7bc3972ceeeab709b277f0930c5becce5e9adf\nauthor Christian Poveda <git@christianpoveda.xyz> 1582151007 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1582152495 -0500\n\npromote memrchr to work on any platform\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b213f88b58b915097049d0432cbc83114f326959", "html_url": "https://github.com/rust-lang/rust/commit/b213f88b58b915097049d0432cbc83114f326959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b213f88b58b915097049d0432cbc83114f326959/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7bc3972ceeeab709b277f0930c5becce5e9adf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7bc3972ceeeab709b277f0930c5becce5e9adf", "html_url": "https://github.com/rust-lang/rust/commit/9a7bc3972ceeeab709b277f0930c5becce5e9adf"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "59a6a41a6f39b01a7f03aefe99b264f3e398ad55", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b213f88b58b915097049d0432cbc83114f326959/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b213f88b58b915097049d0432cbc83114f326959/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=b213f88b58b915097049d0432cbc83114f326959", "patch": "@@ -332,6 +332,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n+            \"memrchr\" => {\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n+                let val = this.read_scalar(args[1])?.to_i32()? as u8;\n+                let num = this.read_scalar(args[2])?.to_machine_usize(this)?;\n+                if let Some(idx) = this\n+                    .memory\n+                    .read_bytes(ptr, Size::from_bytes(num))?\n+                    .iter()\n+                    .rev()\n+                    .position(|&c| c == val)\n+                {\n+                    let new_ptr = ptr.ptr_offset(Size::from_bytes(num - idx as u64 - 1), this)?;\n+                    this.write_scalar(new_ptr, dest)?;\n+                } else {\n+                    this.write_null(dest)?;\n+                }\n+            }\n+\n             \"strlen\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let n = this.memory.read_c_str(ptr)?.len();"}, {"sha": "d82c7eddc7d7ba78665ef8d307858f8d6f3216a5", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b213f88b58b915097049d0432cbc83114f326959/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b213f88b58b915097049d0432cbc83114f326959/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=b213f88b58b915097049d0432cbc83114f326959", "patch": "@@ -157,24 +157,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-            \"memrchr\" => {\n-                let ptr = this.read_scalar(args[0])?.not_undef()?;\n-                let val = this.read_scalar(args[1])?.to_i32()? as u8;\n-                let num = this.read_scalar(args[2])?.to_machine_usize(this)?;\n-                if let Some(idx) = this\n-                    .memory\n-                    .read_bytes(ptr, Size::from_bytes(num))?\n-                    .iter()\n-                    .rev()\n-                    .position(|&c| c == val)\n-                {\n-                    let new_ptr = ptr.ptr_offset(Size::from_bytes(num - idx as u64 - 1), this)?;\n-                    this.write_scalar(new_ptr, dest)?;\n-                } else {\n-                    this.write_null(dest)?;\n-                }\n-            }\n-\n             // Hook pthread calls that go to the thread-local storage memory subsystem.\n             \"pthread_key_create\" => {\n                 let key_place = this.deref_operand(args[0])?;"}]}