{"sha": "d52ee59a712932bc381d8c690dc2f681598760fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MmVlNTlhNzEyOTMyYmMzODFkOGM2OTBkYzJmNjgxNTk4NzYwZmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-21T10:28:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-21T10:28:58Z"}, "message": "streamline API", "tree": {"sha": "f1fd1615203dd5552172cc35e0b6c5c9b76104c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1fd1615203dd5552172cc35e0b6c5c9b76104c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52ee59a712932bc381d8c690dc2f681598760fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52ee59a712932bc381d8c690dc2f681598760fe", "html_url": "https://github.com/rust-lang/rust/commit/d52ee59a712932bc381d8c690dc2f681598760fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52ee59a712932bc381d8c690dc2f681598760fe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62be91b82d6368a20a40893b199bc4f7a35a2223", "url": "https://api.github.com/repos/rust-lang/rust/commits/62be91b82d6368a20a40893b199bc4f7a35a2223", "html_url": "https://github.com/rust-lang/rust/commit/62be91b82d6368a20a40893b199bc4f7a35a2223"}], "stats": {"total": 70, "additions": 33, "deletions": 37}, "files": [{"sha": "a12c3ed54dafebfd2cc0cf4fc4b583fb7a4fa3b0", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -2,8 +2,9 @@ use hir::db::HirDatabase;\n use ra_db::FileRange;\n use ra_fmt::{leading_indent, reindent};\n use ra_syntax::{\n-    algo::{find_covering_element, find_node_at_offset, find_token_at_offset, TokenAtOffset},\n+    algo::{find_covering_element, find_node_at_offset},\n     AstNode, SourceFile, SyntaxElement, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n+    TokenAtOffset,\n };\n use ra_text_edit::TextEditBuilder;\n \n@@ -105,7 +106,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     }\n \n     pub(crate) fn token_at_offset(&self) -> TokenAtOffset<SyntaxToken> {\n-        find_token_at_offset(self.source_file.syntax(), self.frange.range.start())\n+        self.source_file.syntax().token_at_offset(self.frange.range.start())\n     }\n \n     pub(crate) fn node_at_offset<N: AstNode>(&self) -> Option<N> {"}, {"sha": "676711d0adbde78301b72ae62890217aecfee860", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -3211,8 +3211,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     );\n     {\n         let file = db.parse(pos.file_id).ok().unwrap();\n-        let node =\n-            algo::find_token_at_offset(file.syntax(), pos.offset).right_biased().unwrap().parent();\n+        let node = file.syntax().token_at_offset(pos.offset).right_biased().unwrap().parent();\n         let events = db.log_executed(|| {\n             SourceAnalyzer::new(&db, pos.file_id, &node, None);\n         });\n@@ -3232,8 +3231,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n \n     {\n         let file = db.parse(pos.file_id).ok().unwrap();\n-        let node =\n-            algo::find_token_at_offset(file.syntax(), pos.offset).right_biased().unwrap().parent();\n+        let node = file.syntax().token_at_offset(pos.offset).right_biased().unwrap().parent();\n         let events = db.log_executed(|| {\n             SourceAnalyzer::new(&db, pos.file_id, &node, None);\n         });"}, {"sha": "968f5694bfad1aafda4f23d5fa7ee69f5053ccab", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -1,6 +1,6 @@\n use hir::source_binder;\n use ra_syntax::{\n-    algo::{find_covering_element, find_node_at_offset, find_token_at_offset},\n+    algo::{find_covering_element, find_node_at_offset},\n     ast, AstNode, Parse, SourceFile,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextUnit,\n@@ -48,7 +48,7 @@ impl<'a> CompletionContext<'a> {\n     ) -> Option<CompletionContext<'a>> {\n         let module = source_binder::module_from_position(db, position);\n         let token =\n-            find_token_at_offset(original_parse.tree().syntax(), position.offset).left_biased()?;\n+            original_parse.tree().syntax().token_at_offset(position.offset).left_biased()?;\n         let analyzer =\n             hir::SourceAnalyzer::new(db, position.file_id, &token.parent(), Some(position.offset));\n         let mut ctx = CompletionContext {"}, {"sha": "edbf622c118f7867d2423fd684cdab7e8f1ae76c", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -1,10 +1,10 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    algo::{find_covering_element, find_token_at_offset, TokenAtOffset},\n+    algo::find_covering_element,\n     ast::{self, AstNode, AstToken},\n     Direction, NodeOrToken,\n     SyntaxKind::*,\n-    SyntaxNode, SyntaxToken, TextRange, TextUnit, T,\n+    SyntaxNode, SyntaxToken, TextRange, TextUnit, TokenAtOffset, T,\n };\n \n use crate::{db::RootDatabase, FileRange};\n@@ -34,7 +34,7 @@ fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange\n \n     if range.is_empty() {\n         let offset = range.start();\n-        let mut leaves = find_token_at_offset(root, offset);\n+        let mut leaves = root.token_at_offset(offset);\n         if leaves.clone().all(|it| it.kind() == WHITESPACE) {\n             return Some(extend_ws(root, leaves.next()?, offset));\n         }"}, {"sha": "72884e5ca996f4f8d28b97f124ca67ebf9365a74", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -1,5 +1,5 @@\n use ra_db::SourceDatabase;\n-use ra_syntax::{algo::find_token_at_offset, ast, AstNode};\n+use ra_syntax::{ast, AstNode};\n \n use crate::{db::RootDatabase, FilePosition, NavigationTarget, RangeInfo};\n \n@@ -9,7 +9,7 @@ pub(crate) fn goto_type_definition(\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let parse = db.parse(position.file_id);\n \n-    let node = find_token_at_offset(parse.tree().syntax(), position.offset).find_map(|token| {\n+    let node = parse.tree().syntax().token_at_offset(position.offset).find_map(|token| {\n         token\n             .parent()\n             .ancestors()"}, {"sha": "e802d01e4d5ab2352d86a993645c5c8e642e0cad", "filename": "crates/ra_ide_api/src/matching_brace.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -1,9 +1,11 @@\n-use ra_syntax::{algo::find_token_at_offset, ast::AstNode, SourceFile, SyntaxKind, TextUnit, T};\n+use ra_syntax::{ast::AstNode, SourceFile, SyntaxKind, TextUnit, T};\n \n pub fn matching_brace(file: &SourceFile, offset: TextUnit) -> Option<TextUnit> {\n     const BRACES: &[SyntaxKind] =\n         &[T!['{'], T!['}'], T!['['], T![']'], T!['('], T![')'], T![<], T![>]];\n-    let (brace_node, brace_idx) = find_token_at_offset(file.syntax(), offset)\n+    let (brace_node, brace_idx) = file\n+        .syntax()\n+        .token_at_offset(offset)\n         .filter_map(|node| {\n             let idx = BRACES.iter().position(|&brace| brace == node.kind())?;\n             Some((node, idx))"}, {"sha": "6b3fd5904e6d26a4b253e1d5a486c71d57e08249", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -1,11 +1,11 @@\n use ra_db::{FilePosition, SourceDatabase};\n use ra_fmt::leading_indent;\n use ra_syntax::{\n-    algo::{find_node_at_offset, find_token_at_offset, TokenAtOffset},\n+    algo::find_node_at_offset,\n     ast::{self, AstToken},\n     AstNode, SmolStr, SourceFile,\n     SyntaxKind::*,\n-    SyntaxToken, TextRange, TextUnit,\n+    SyntaxToken, TextRange, TextUnit, TokenAtOffset,\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n@@ -14,7 +14,9 @@ use crate::{db::RootDatabase, SourceChange, SourceFileEdit};\n pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n     let parse = db.parse(position.file_id);\n     let file = parse.tree();\n-    let comment = find_token_at_offset(file.syntax(), position.offset)\n+    let comment = file\n+        .syntax()\n+        .token_at_offset(position.offset)\n         .left_biased()\n         .and_then(ast::Comment::cast)?;\n \n@@ -45,7 +47,7 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n }\n \n fn node_indent(file: &SourceFile, token: &SyntaxToken) -> Option<SmolStr> {\n-    let ws = match find_token_at_offset(file.syntax(), token.text_range().start()) {\n+    let ws = match file.syntax().token_at_offset(token.text_range().start()) {\n         TokenAtOffset::Between(l, r) => {\n             assert!(r == *token);\n             l\n@@ -91,7 +93,10 @@ pub(crate) fn on_dot_typed(db: &RootDatabase, position: FilePosition) -> Option<\n     let parse = db.parse(position.file_id);\n     assert_eq!(parse.tree().syntax().text().char_at(position.offset), Some('.'));\n \n-    let whitespace = find_token_at_offset(parse.tree().syntax(), position.offset)\n+    let whitespace = parse\n+        .tree()\n+        .syntax()\n+        .token_at_offset(position.offset)\n         .left_biased()\n         .and_then(ast::Whitespace::cast)?;\n "}, {"sha": "45f624810ddd6fc0113775903d87c3dff2ef394f", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -5,16 +5,9 @@ use std::ops::RangeInclusive;\n use itertools::Itertools;\n \n use crate::{\n-    AstNode, Direction, NodeOrToken, SourceFile, SyntaxElement, SyntaxNode, SyntaxNodePtr,\n-    SyntaxToken, TextRange, TextUnit,\n+    AstNode, Direction, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n };\n \n-pub use rowan::TokenAtOffset;\n-\n-pub fn find_token_at_offset(node: &SyntaxNode, offset: TextUnit) -> TokenAtOffset<SyntaxToken> {\n-    node.token_at_offset(offset)\n-}\n-\n /// Returns ancestors of the node at the offset, sorted by length. This should\n /// do the right thing at an edge, e.g. when searching for expressions at `{\n /// <|>foo }` we will get the name reference instead of the whole block, which\n@@ -24,7 +17,7 @@ pub fn ancestors_at_offset(\n     node: &SyntaxNode,\n     offset: TextUnit,\n ) -> impl Iterator<Item = SyntaxNode> {\n-    find_token_at_offset(node, offset)\n+    node.token_at_offset(offset)\n         .map(|token| token.parent().ancestors())\n         .kmerge_by(|node1, node2| node1.text_range().len() < node2.text_range().len())\n }\n@@ -137,14 +130,14 @@ fn with_children(\n     let len = new_children.iter().map(|it| it.text_len()).sum::<TextUnit>();\n     let new_node =\n         rowan::GreenNode::new(rowan::cursor::SyntaxKind(parent.kind() as u16), new_children);\n-    let new_file_node = parent.replace_with(new_node);\n-    let file = SourceFile::new(new_file_node);\n+    let new_root_node = parent.replace_with(new_node);\n+    let new_root_node = SyntaxNode::new_root(new_root_node);\n \n     // FIXME: use a more elegant way to re-fetch the node (#1185), make\n     // `range` private afterwards\n     let mut ptr = SyntaxNodePtr::new(parent);\n     ptr.range = TextRange::offset_len(ptr.range().start(), len);\n-    ptr.to_node(file.syntax()).to_owned()\n+    ptr.to_node(&new_root_node)\n }\n \n fn position_of_child(parent: &SyntaxNode, child: SyntaxElement) -> usize {"}, {"sha": "d02078256c5a7cde7f1708bbe0cb6ac0ad124723", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -44,12 +44,10 @@ pub use crate::{\n     syntax_error::{Location, SyntaxError, SyntaxErrorKind},\n     syntax_node::{\n         Direction, NodeOrToken, SyntaxElement, SyntaxNode, SyntaxToken, SyntaxTreeBuilder,\n-        WalkEvent,\n     },\n };\n-pub use ra_parser::SyntaxKind;\n-pub use ra_parser::T;\n-pub use rowan::{SmolStr, SyntaxText, TextRange, TextUnit};\n+pub use ra_parser::{SyntaxKind, T};\n+pub use rowan::{SmolStr, SyntaxText, TextRange, TextUnit, TokenAtOffset, WalkEvent};\n \n /// `Parse` is the result of the parsing: a syntax tree and a collection of\n /// errors."}, {"sha": "b2f5b8c6469a5ca24bc7613444bdf5125816ce70", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52ee59a712932bc381d8c690dc2f681598760fe/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=d52ee59a712932bc381d8c690dc2f681598760fe", "patch": "@@ -14,7 +14,6 @@ use crate::{\n     Parse, SmolStr, SyntaxKind, TextUnit,\n };\n \n-pub use rowan::WalkEvent;\n pub(crate) use rowan::{GreenNode, GreenToken};\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]"}]}