{"sha": "12ff05fc506335c64e6237dd14d797795c384c19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZmYwNWZjNTA2MzM1YzY0ZTYyMzdkZDE0ZDc5Nzc5NWMzODRjMTk=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-09-24T21:37:24Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-09-24T22:21:16Z"}, "message": "Clean up matches that determine integers for specific alignment requirements", "tree": {"sha": "c81cfef4301d82d80d1dfcaf7dbade55c1241e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c81cfef4301d82d80d1dfcaf7dbade55c1241e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ff05fc506335c64e6237dd14d797795c384c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ff05fc506335c64e6237dd14d797795c384c19", "html_url": "https://github.com/rust-lang/rust/commit/12ff05fc506335c64e6237dd14d797795c384c19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ff05fc506335c64e6237dd14d797795c384c19/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4038189688ce2705d41bec97238715aa17f44c1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4038189688ce2705d41bec97238715aa17f44c1d", "html_url": "https://github.com/rust-lang/rust/commit/4038189688ce2705d41bec97238715aa17f44c1d"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "0451daf3d5fb34eb2e733163c728a926fe2e6f96", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/12ff05fc506335c64e6237dd14d797795c384c19/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ff05fc506335c64e6237dd14d797795c384c19/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=12ff05fc506335c64e6237dd14d797795c384c19", "patch": "@@ -339,6 +339,16 @@ impl Integer {\n         }\n     }\n \n+    pub fn align(&self, dl: &TargetDataLayout)-> Align {\n+        match *self {\n+            I1 => dl.i1_align,\n+            I8 => dl.i8_align,\n+            I16 => dl.i16_align,\n+            I32 => dl.i32_align,\n+            I64 => dl.i64_align,\n+        }\n+    }\n+\n     pub fn to_ty<'a, 'tcx>(&self, tcx: &ty::TyCtxt<'a, 'tcx, 'tcx>,\n                        signed: bool) -> Ty<'tcx> {\n         match (*self, signed) {\n@@ -377,6 +387,18 @@ impl Integer {\n         }\n     }\n \n+    //Find the smallest integer with the given alignment.\n+    pub fn for_abi_align(dl: &TargetDataLayout, align: Align) -> Option<Integer> {\n+        let wanted = align.abi();\n+        for &candidate in &[I8, I16, I32, I64] {\n+            let ty = Int(candidate);\n+            if wanted == ty.align(dl).abi() && wanted == ty.size(dl).bytes() {\n+                return Some(candidate);\n+            }\n+        }\n+        None\n+    }\n+\n     /// Get the Integer type from an attr::IntType.\n     pub fn from_attr(dl: &TargetDataLayout, ity: attr::IntType) -> Integer {\n         match ity {\n@@ -1149,20 +1171,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                 // won't be so conservative.\n \n                 // Use the initial field alignment\n-                let wanted = start_align.abi();\n-                let mut ity = min_ity;\n-                for &candidate in &[I16, I32, I64] {\n-                    let ty = Int(candidate);\n-                    if wanted == ty.align(dl).abi() && wanted == ty.size(dl).bytes() {\n-                        ity = candidate;\n-                        break;\n-                    }\n-                }\n-\n-                // FIXME(eddyb) conservative only to avoid diverging from trans::adt.\n-                if align.abi() != start_align.abi() {\n-                    ity = min_ity;\n-                }\n+                let mut ity = Integer::for_abi_align(dl, start_align).unwrap_or(min_ity);\n \n                 // If the alignment is not larger than the chosen discriminant size,\n                 // don't use the alignment as the final size."}, {"sha": "c31714351dc6e1ed3e62707cfa5cf928a26da3c3", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12ff05fc506335c64e6237dd14d797795c384c19/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ff05fc506335c64e6237dd14d797795c384c19/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=12ff05fc506335c64e6237dd14d797795c384c19", "patch": "@@ -286,16 +286,15 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n fn union_fill(cx: &CrateContext, size: u64, align: u64) -> Type {\n     assert_eq!(size%align, 0);\n+    assert_eq!(align.count_ones(), 1, \"Alignment must be a power fof 2. Got {}\", align);\n     let align_units = size/align;\n-    match align {\n-        1 => Type::array(&Type::i8(cx), align_units),\n-        2 => Type::array(&Type::i16(cx), align_units),\n-        4 => Type::array(&Type::i32(cx), align_units),\n-        8 if machine::llalign_of_min(cx, Type::i64(cx)) == 8 =>\n-                         Type::array(&Type::i64(cx), align_units),\n-        a if a.count_ones() == 1 => Type::array(&Type::vector(&Type::i32(cx), a / 4),\n-                                                      align_units),\n-        _ => bug!(\"unsupported union alignment: {}\", align)\n+    let dl = &cx.tcx().data_layout;\n+    let layout_align = layout::Align::from_bytes(align, align).unwrap();\n+    if let Some(ity) = layout::Integer::for_abi_align(dl, layout_align) {\n+        Type::array(&Type::from_integer(cx, ity), align_units)\n+    } else {\n+        Type::array(&Type::vector(&Type::i32(cx), align/4),\n+                    align_units)\n     }\n }\n "}]}