{"sha": "38025e0dca8c2f049884eedc58792c4e321ed27c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDI1ZTBkY2E4YzJmMDQ5ODg0ZWVkYzU4NzkyYzRlMzIxZWQyN2M=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-18T11:41:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-18T11:41:06Z"}, "message": "Fix rebase", "tree": {"sha": "263d1b8279178dbb225250157e9a50b8f583cf07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/263d1b8279178dbb225250157e9a50b8f583cf07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38025e0dca8c2f049884eedc58792c4e321ed27c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38025e0dca8c2f049884eedc58792c4e321ed27c", "html_url": "https://github.com/rust-lang/rust/commit/38025e0dca8c2f049884eedc58792c4e321ed27c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38025e0dca8c2f049884eedc58792c4e321ed27c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "139d10924112b7cb1b681e1e30af3384f6da89e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/139d10924112b7cb1b681e1e30af3384f6da89e5", "html_url": "https://github.com/rust-lang/rust/commit/139d10924112b7cb1b681e1e30af3384f6da89e5"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "72fe7355e4c7ca6e2e7d39b01ff4c7ba75e35019", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=38025e0dca8c2f049884eedc58792c4e321ed27c", "patch": "@@ -126,16 +126,18 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                parent_prefix, use_tree, nested);\n \n         let mut prefix_iter = parent_prefix.iter().cloned()\n-            .chain(use_tree.prefix.segments.iter().map(|seg| seg.ident)).peekable();\n+            .chain(use_tree.prefix.segments.iter().map(|seg| seg.into())).peekable();\n \n         // On 2015 edition imports are resolved as crate-relative by default,\n         // so prefixes are prepended with crate root segment if necessary.\n         // The root is prepended lazily, when the first non-empty prefix or terminating glob\n         // appears, so imports in braced groups can have roots prepended independently.\n         let is_glob = if let ast::UseTreeKind::Glob = use_tree.kind { true } else { false };\n         let crate_root = if !self.session.rust_2018() &&\n-                prefix_iter.peek().map_or(is_glob, |ident| !ident.is_path_segment_keyword()) {\n-            Some(Ident::new(keywords::CrateRoot.name(), use_tree.prefix.span.shrink_to_lo()))\n+                prefix_iter.peek().map_or(is_glob, |seg| !seg.ident.is_path_segment_keyword()) {\n+            Some(Segment::from_ident(Ident::new(\n+                keywords::CrateRoot.name(), use_tree.prefix.span.shrink_to_lo()\n+            )))\n         } else {\n             None\n         };"}, {"sha": "263d23d133e1cf2627340d59035e174b2bcbe8c2", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=38025e0dca8c2f049884eedc58792c4e321ed27c", "patch": "@@ -11,7 +11,6 @@\n use {CrateLint, PathResult, Segment};\n use macros::ParentScope;\n \n-use syntax::ast::Ident;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n@@ -31,12 +30,12 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         match (path.get(0), path.get(1)) {\n             // `{{root}}::ident::...` on both editions.\n             // On 2015 `{{root}}` is usually added implicitly.\n-            (Some(fst), Some(snd)) if fst.name == keywords::CrateRoot.name() &&\n-                                      !snd.is_path_segment_keyword() => {}\n+            (Some(fst), Some(snd)) if fst.ident.name == keywords::CrateRoot.name() &&\n+                                      !snd.ident.is_path_segment_keyword() => {}\n             // `ident::...` on 2018\n-            (Some(fst), _) if self.session.rust_2018() && !fst.is_path_segment_keyword() => {\n+            (Some(fst), _) if self.session.rust_2018() && !fst.ident.is_path_segment_keyword() => {\n                 // Insert a placeholder that's later replaced by `self`/`super`/etc.\n-                path.insert(0, keywords::Invalid.ident());\n+                path.insert(0, Segment::from_ident(keywords::Invalid.ident()));\n             }\n             _ => return None,\n         }"}, {"sha": "7b2d1d4a3d53f6c61c7b1178722e62fd387a4e09", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=38025e0dca8c2f049884eedc58792c4e321ed27c", "patch": "@@ -1747,8 +1747,8 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n         let segments = &path.segments;\n         let path = Segment::from_path(&path);\n         // FIXME (Manishearth): Intra doc links won't get warned of epoch changes\n-        match self.resolve_path_without_parent_scope(&path, Some(namespace), true, span,\n-                                                     CrateLint::No) {\n+        let def = match self.resolve_path_without_parent_scope(&path, Some(namespace), true,\n+                                                               span, CrateLint::No) {\n             PathResult::Module(ModuleOrUniformRoot::Module(module)) =>\n                 module.def().unwrap(),\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 =>"}, {"sha": "921f7568b5201ff99ff3d76d6cf717e14bf34802", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=38025e0dca8c2f049884eedc58792c4e321ed27c", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use {AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n-use {CrateLint, Resolver, ResolutionError, Weak};\n+use {CrateLint, Resolver, ResolutionError, Segment, Weak};\n use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult, ToNameBinding};\n-use {is_known_tool, names_to_string, resolve_error};\n+use {is_known_tool, resolve_error};\n use ModuleOrUniformRoot;\n use Namespace::{self, *};\n use build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n@@ -946,7 +946,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     pub fn finalize_current_module_macro_resolutions(&mut self) {\n         let module = self.current_module;\n \n-        let check_consistency = |this: &mut Self, path: &[Ident], span,\n+        let check_consistency = |this: &mut Self, path: &[Segment], span,\n                                  kind: MacroKind, initial_def, def| {\n             if let Some(initial_def) = initial_def {\n                 if def != initial_def && def != Def::Err && this.ambiguity_errors.is_empty() {\n@@ -965,7 +965,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 // less informative error if the privacy error is reported elsewhere.\n                 if this.privacy_errors.is_empty() {\n                     let msg = format!(\"cannot determine resolution for the {} `{}`\",\n-                                        kind.descr(), names_to_string(path));\n+                                        kind.descr(), Segment::names_to_string(path));\n                     let msg_note = \"import resolution is stuck, try simplifying macro imports\";\n                     this.session.struct_span_err(span, &msg).note(msg_note).emit();\n                 }\n@@ -1007,7 +1007,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                         initial_binding.def_ignoring_ambiguity()\n                     });\n                     let def = binding.def_ignoring_ambiguity();\n-                    check_consistency(self, &[ident], ident.span, kind, initial_def, def);\n+                    let seg = Segment::from_ident(ident);\n+                    check_consistency(self, &[seg], ident.span, kind, initial_def, def);\n                 }\n                 Err(..) => {\n                     assert!(initial_binding.is_none());"}, {"sha": "4ee0332d04bcd16f8a109f59bfa25d4a7e1d8f83", "filename": "src/test/ui/imports/issue-55457.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38025e0dca8c2f049884eedc58792c4e321ed27c/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55457.stderr?ref=38025e0dca8c2f049884eedc58792c4e321ed27c", "patch": "@@ -8,7 +8,7 @@ error[E0432]: unresolved import `non_existent`\n   --> $DIR/issue-55457.rs:2:5\n    |\n LL | use non_existent::non_existent; //~ ERROR unresolved import `non_existent`\n-   |     ^^^^^^^^^^^^ Maybe a missing `extern crate non_existent;`?\n+   |     ^^^^^^^^^^^^ maybe a missing `extern crate non_existent;`?\n \n error: cannot determine resolution for the derive macro `NonExistent`\n   --> $DIR/issue-55457.rs:5:10"}]}