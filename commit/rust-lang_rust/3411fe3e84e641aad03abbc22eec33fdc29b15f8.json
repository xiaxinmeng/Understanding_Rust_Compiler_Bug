{"sha": "3411fe3e84e641aad03abbc22eec33fdc29b15f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MTFmZTNlODRlNjQxYWFkMDNhYmJjMjJlZWMzM2ZkYzI5YjE1Zjg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-14T15:26:12Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-14T15:30:43Z"}, "message": "Rename some fields to their Chalk names", "tree": {"sha": "f9590b609da68c1d466381b8de809f60511dd628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9590b609da68c1d466381b8de809f60511dd628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3411fe3e84e641aad03abbc22eec33fdc29b15f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3411fe3e84e641aad03abbc22eec33fdc29b15f8", "html_url": "https://github.com/rust-lang/rust/commit/3411fe3e84e641aad03abbc22eec33fdc29b15f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3411fe3e84e641aad03abbc22eec33fdc29b15f8/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57e2f55984758a83644b852a4cc47e0b27945df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57e2f55984758a83644b852a4cc47e0b27945df", "html_url": "https://github.com/rust-lang/rust/commit/f57e2f55984758a83644b852a4cc47e0b27945df"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "5e7226df274f088bdadccd89c2acd19c404e2bbf", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -1686,8 +1686,8 @@ impl Type {\n             .build();\n         let predicate = ProjectionPredicate {\n             projection_ty: ProjectionTy {\n-                associated_ty: to_assoc_type_id(alias.id),\n-                parameters: subst,\n+                associated_ty_id: to_assoc_type_id(alias.id),\n+                substitution: subst,\n             },\n             ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(&Interner),\n         };"}, {"sha": "d5c2b9a20bb72aed8318c3e12cc53141806f4a33", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -84,7 +84,7 @@ fn deref_by_trait(\n     let projection = super::traits::ProjectionPredicate {\n         ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, ty.value.kinds.len()))\n             .intern(&Interner),\n-        projection_ty: super::ProjectionTy { associated_ty: to_assoc_type_id(target), parameters },\n+        projection_ty: super::ProjectionTy { associated_ty_id: to_assoc_type_id(target), substitution: parameters },\n     };\n \n     let obligation = super::Obligation::Projection(projection);"}, {"sha": "21291dddaf0ad50792cf1b86a530a97778b4aa0a", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -245,19 +245,19 @@ impl HirDisplay for ProjectionTy {\n         }\n \n         let trait_ = f.db.trait_data(self.trait_(f.db));\n-        let first_parameter = self.parameters[0].into_displayable(\n+        let first_parameter = self.substitution[0].into_displayable(\n             f.db,\n             f.max_size,\n             f.omit_verbose_types,\n             f.display_target,\n         );\n         write!(f, \"<{} as {}\", first_parameter, trait_.name)?;\n-        if self.parameters.len() > 1 {\n+        if self.substitution.len() > 1 {\n             write!(f, \"<\")?;\n-            f.write_joined(&self.parameters[1..], \", \")?;\n+            f.write_joined(&self.substitution[1..], \", \")?;\n             write!(f, \">\")?;\n         }\n-        write!(f, \">::{}\", f.db.type_alias_data(from_assoc_type_id(self.associated_ty)).name)?;\n+        write!(f, \">::{}\", f.db.type_alias_data(from_assoc_type_id(self.associated_ty_id)).name)?;\n         Ok(())\n     }\n }\n@@ -491,8 +491,8 @@ impl HirDisplay for Ty {\n                     }\n                 } else {\n                     let projection_ty = ProjectionTy {\n-                        associated_ty: to_assoc_type_id(type_alias),\n-                        parameters: parameters.clone(),\n+                        associated_ty_id: to_assoc_type_id(type_alias),\n+                        substitution: parameters.clone(),\n                     };\n \n                     projection_ty.hir_fmt(f)?;\n@@ -709,7 +709,7 @@ fn write_bounds_like_dyn_trait(\n                     angle_open = true;\n                 }\n                 let type_alias = f.db.type_alias_data(from_assoc_type_id(\n-                    projection_pred.projection_ty.associated_ty,\n+                    projection_pred.projection_ty.associated_ty_id,\n                 ));\n                 write!(f, \"{} = \", type_alias.name)?;\n                 projection_pred.ty.hir_fmt(f)?;\n@@ -782,7 +782,7 @@ impl HirDisplay for GenericPredicate {\n                     f,\n                     \">::{} = \",\n                     f.db.type_alias_data(from_assoc_type_id(\n-                        projection_pred.projection_ty.associated_ty\n+                        projection_pred.projection_ty.associated_ty_id\n                     ))\n                     .name,\n                 )?;"}, {"sha": "fbfedb4e68af7dea7e3c560682b7dc4db1b98fbf", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -385,8 +385,8 @@ impl<'a> InferenceContext<'a> {\n                 let projection = ProjectionPredicate {\n                     ty: ty.clone(),\n                     projection_ty: ProjectionTy {\n-                        associated_ty: to_assoc_type_id(res_assoc_ty),\n-                        parameters: substs,\n+                        associated_ty_id: to_assoc_type_id(res_assoc_ty),\n+                        substitution: substs,\n                     },\n                 };\n                 self.obligations.push(Obligation::Trait(trait_ref));"}, {"sha": "b7870e771748da070801fa6240259df6bb15a114", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -99,8 +99,8 @@ impl<'a> InferenceContext<'a> {\n         if self.db.trait_solve(krate, goal.value).is_some() {\n             self.obligations.push(implements_fn_trait);\n             let output_proj_ty = crate::ProjectionTy {\n-                associated_ty: to_assoc_type_id(output_assoc_type),\n-                parameters: substs,\n+                associated_ty_id: to_assoc_type_id(output_assoc_type),\n+                substitution: substs,\n             };\n             let return_ty = self.normalize_projection_ty(output_proj_ty);\n             Some((arg_tys, return_ty))"}, {"sha": "ebc612ca9cef43be2cb1618d5b595f0125f1da69", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -381,11 +381,11 @@ impl InferenceTable {\n                 self.unify_substs(&tr1.substs, &tr2.substs, depth + 1)\n             }\n             (GenericPredicate::Projection(proj1), GenericPredicate::Projection(proj2))\n-                if proj1.projection_ty.associated_ty == proj2.projection_ty.associated_ty =>\n+                if proj1.projection_ty.associated_ty_id == proj2.projection_ty.associated_ty_id =>\n             {\n                 self.unify_substs(\n-                    &proj1.projection_ty.parameters,\n-                    &proj2.projection_ty.parameters,\n+                    &proj1.projection_ty.substitution,\n+                    &proj2.projection_ty.substitution,\n                     depth + 1,\n                 ) && self.unify_inner(&proj1.ty, &proj2.ty, depth + 1)\n             }"}, {"sha": "ddcee20844fa731ffbfe1b20fc2efc0f337d84d5", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -74,17 +74,17 @@ pub struct OpaqueTy {\n /// trait and all its parameters are fully known.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct ProjectionTy {\n-    pub associated_ty: AssocTypeId,\n-    pub parameters: Substs,\n+    pub associated_ty_id: AssocTypeId,\n+    pub substitution: Substs,\n }\n \n impl ProjectionTy {\n     pub fn trait_ref(&self, db: &dyn HirDatabase) -> TraitRef {\n-        TraitRef { trait_: self.trait_(db), substs: self.parameters.clone() }\n+        TraitRef { trait_: self.trait_(db), substs: self.substitution.clone() }\n     }\n \n     fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n-        match from_assoc_type_id(self.associated_ty).lookup(db.upcast()).container {\n+        match from_assoc_type_id(self.associated_ty_id).lookup(db.upcast()).container {\n             AssocContainerId::TraitId(it) => it,\n             _ => panic!(\"projection ty without parent trait\"),\n         }\n@@ -93,15 +93,15 @@ impl ProjectionTy {\n \n impl TypeWalk for ProjectionTy {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.parameters.walk(f);\n+        self.substitution.walk(f);\n     }\n \n     fn walk_mut_binders(\n         &mut self,\n         f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n         binders: DebruijnIndex,\n     ) {\n-        self.parameters.walk_mut_binders(f, binders);\n+        self.substitution.walk_mut_binders(f, binders);\n     }\n }\n \n@@ -945,7 +945,7 @@ impl Ty {\n                 }\n             }\n             TyKind::Alias(AliasTy::Projection(projection_ty)) => {\n-                match from_assoc_type_id(projection_ty.associated_ty).lookup(db.upcast()).container\n+                match from_assoc_type_id(projection_ty.associated_ty_id).lookup(db.upcast()).container\n                 {\n                     AssocContainerId::TraitId(trait_id) => Some(trait_id),\n                     _ => None,\n@@ -1055,7 +1055,7 @@ impl TypeWalk for Ty {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n         match self.interned(&Interner) {\n             TyKind::Alias(AliasTy::Projection(p_ty)) => {\n-                for t in p_ty.parameters.iter() {\n+                for t in p_ty.substitution.iter() {\n                     t.walk(f);\n                 }\n             }\n@@ -1087,7 +1087,7 @@ impl TypeWalk for Ty {\n     ) {\n         match &mut self.0 {\n             TyKind::Alias(AliasTy::Projection(p_ty)) => {\n-                p_ty.parameters.walk_mut_binders(f, binders);\n+                p_ty.substitution.walk_mut_binders(f, binders);\n             }\n             TyKind::Dyn(predicates) => {\n                 for p in make_mut_slice(predicates) {"}, {"sha": "17eb29911bbb6cd9be601aef17387fec2842ce01", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -357,8 +357,8 @@ impl<'a> TyLoweringContext<'a> {\n                         Some((super_trait_ref, associated_ty)) => {\n                             // FIXME handle type parameters on the segment\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n-                                associated_ty: to_assoc_type_id(associated_ty),\n-                                parameters: super_trait_ref.substs,\n+                                associated_ty_id: to_assoc_type_id(associated_ty),\n+                                substitution: super_trait_ref.substs,\n                             }))\n                             .intern(&Interner)\n                         }\n@@ -478,8 +478,8 @@ impl<'a> TyLoweringContext<'a> {\n                         // FIXME handle type parameters on the segment\n                         return Some(\n                             TyKind::Alias(AliasTy::Projection(ProjectionTy {\n-                                associated_ty: to_assoc_type_id(associated_ty),\n-                                parameters: substs,\n+                                associated_ty_id: to_assoc_type_id(associated_ty),\n+                                substitution: substs,\n                             }))\n                             .intern(&Interner),\n                         );\n@@ -736,8 +736,8 @@ impl<'a> TyLoweringContext<'a> {\n                     Some(t) => t,\n                 };\n                 let projection_ty = ProjectionTy {\n-                    associated_ty: to_assoc_type_id(associated_ty),\n-                    parameters: super_trait_ref.substs,\n+                    associated_ty_id: to_assoc_type_id(associated_ty),\n+                    substitution: super_trait_ref.substs,\n                 };\n                 let mut preds = SmallVec::with_capacity(\n                     binding.type_ref.as_ref().map_or(0, |_| 1) + binding.bounds.len(),"}, {"sha": "a6a63c6736fca91c53d4c217db105fb4e9debbe8", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -143,7 +143,7 @@ pub(crate) fn trait_solve_query(\n     log::info!(\"trait_solve_query({})\", goal.value.value.display(db));\n \n     if let Obligation::Projection(pred) = &goal.value.value {\n-        if let TyKind::BoundVar(_) = &pred.projection_ty.parameters[0].interned(&Interner) {\n+        if let TyKind::BoundVar(_) = &pred.projection_ty.substitution[0].interned(&Interner) {\n             // Hack: don't ask Chalk to normalize with an unknown self type, it'll say that's impossible\n             return Some(Solution::Ambig(Guidance::Unknown));\n         }"}, {"sha": "232cf9cd0d66d6bad17e8b860ab2b18fc25fabc8", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -234,9 +234,9 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                         ty: TyKind::BoundVar(BoundVar { debruijn: DebruijnIndex::ONE, index: 0 })\n                             .intern(&Interner),\n                         projection_ty: ProjectionTy {\n-                            associated_ty: to_assoc_type_id(future_output),\n+                            associated_ty_id: to_assoc_type_id(future_output),\n                             // Self type as the first parameter.\n-                            parameters: Substs::single(\n+                            substitution: Substs::single(\n                                 TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n                                     .intern(&Interner),\n                             ),"}, {"sha": "68effbbf3d226a591260209e5f3e13a1b366ffcd", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3411fe3e84e641aad03abbc22eec33fdc29b15f8/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=3411fe3e84e641aad03abbc22eec33fdc29b15f8", "patch": "@@ -78,8 +78,8 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::Adt(adt_id, substitution).intern(&Interner)\n             }\n             TyKind::Alias(AliasTy::Projection(proj_ty)) => {\n-                let associated_ty_id = proj_ty.associated_ty;\n-                let substitution = proj_ty.parameters.to_chalk(db);\n+                let associated_ty_id = proj_ty.associated_ty_id;\n+                let substitution = proj_ty.substitution.to_chalk(db);\n                 chalk_ir::AliasTy::Projection(chalk_ir::ProjectionTy {\n                     associated_ty_id,\n                     substitution,\n@@ -121,7 +121,7 @@ impl ToChalk for Ty {\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n                 let associated_ty = proj.associated_ty_id;\n                 let parameters = from_chalk(db, proj.substitution);\n-                TyKind::Alias(AliasTy::Projection(ProjectionTy { associated_ty, parameters }))\n+                TyKind::Alias(AliasTy::Projection(ProjectionTy { associated_ty_id: associated_ty, substitution: parameters }))\n             }\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(opaque_ty)) => {\n                 let opaque_ty_id = opaque_ty.opaque_ty_id;\n@@ -372,8 +372,8 @@ impl ToChalk for ProjectionTy {\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::ProjectionTy<Interner> {\n         chalk_ir::ProjectionTy {\n-            associated_ty_id: self.associated_ty,\n-            substitution: self.parameters.to_chalk(db),\n+            associated_ty_id: self.associated_ty_id,\n+            substitution: self.substitution.to_chalk(db),\n         }\n     }\n \n@@ -382,8 +382,8 @@ impl ToChalk for ProjectionTy {\n         projection_ty: chalk_ir::ProjectionTy<Interner>,\n     ) -> ProjectionTy {\n         ProjectionTy {\n-            associated_ty: projection_ty.associated_ty_id,\n-            parameters: from_chalk(db, projection_ty.substitution),\n+            associated_ty_id: projection_ty.associated_ty_id,\n+            substitution: from_chalk(db, projection_ty.substitution),\n         }\n     }\n }\n@@ -533,24 +533,24 @@ pub(super) fn generic_predicate_to_inline_bound(\n             Some(rust_ir::InlineBound::TraitBound(trait_bound))\n         }\n         GenericPredicate::Projection(proj) => {\n-            if &proj.projection_ty.parameters[0] != self_ty {\n+            if &proj.projection_ty.substitution[0] != self_ty {\n                 return None;\n             }\n-            let trait_ = match from_assoc_type_id(proj.projection_ty.associated_ty)\n+            let trait_ = match from_assoc_type_id(proj.projection_ty.associated_ty_id)\n                 .lookup(db.upcast())\n                 .container\n             {\n                 AssocContainerId::TraitId(t) => t,\n                 _ => panic!(\"associated type not in trait\"),\n             };\n-            let args_no_self = proj.projection_ty.parameters[1..]\n+            let args_no_self = proj.projection_ty.substitution[1..]\n                 .iter()\n                 .map(|ty| ty.clone().to_chalk(db).cast(&Interner))\n                 .collect();\n             let alias_eq_bound = rust_ir::AliasEqBound {\n                 value: proj.ty.clone().to_chalk(db),\n                 trait_bound: rust_ir::TraitBound { trait_id: trait_.to_chalk(db), args_no_self },\n-                associated_ty_id: proj.projection_ty.associated_ty,\n+                associated_ty_id: proj.projection_ty.associated_ty_id,\n                 parameters: Vec::new(), // FIXME we don't support generic associated types yet\n             };\n             Some(rust_ir::InlineBound::AliasEqBound(alias_eq_bound))"}]}