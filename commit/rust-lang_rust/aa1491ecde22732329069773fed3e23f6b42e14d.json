{"sha": "aa1491ecde22732329069773fed3e23f6b42e14d", "node_id": "C_kwDOAAsO6NoAKGFhMTQ5MWVjZGUyMjczMjMyOTA2OTc3M2ZlZDNlMjNmNmI0MmUxNGQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-24T12:05:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-26T07:26:51Z"}, "message": "Record derive helper attributes, resolve them in IDE layer", "tree": {"sha": "f51b6ac7488af1e7b06a29dfd06868d3c3b5dd71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f51b6ac7488af1e7b06a29dfd06868d3c3b5dd71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa1491ecde22732329069773fed3e23f6b42e14d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1491ecde22732329069773fed3e23f6b42e14d", "html_url": "https://github.com/rust-lang/rust/commit/aa1491ecde22732329069773fed3e23f6b42e14d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa1491ecde22732329069773fed3e23f6b42e14d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f", "html_url": "https://github.com/rust-lang/rust/commit/4e60db2d07b848d92a52d3fd9fa74e6a4f7f097f"}], "stats": {"total": 202, "additions": 144, "deletions": 58}, "files": [{"sha": "56603f4b154569f471e80fe6cfa807f4b13afab3", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -934,11 +934,11 @@ fn derive_macro_as_call_id(\n     derive_attr: AttrId,\n     derive_pos: u32,\n     krate: CrateId,\n-    resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n-) -> Result<MacroCallId, UnresolvedMacro> {\n-    let def: MacroDefId = resolver(item_attr.path.clone())\n+    resolver: impl Fn(path::ModPath) -> Option<(MacroId, MacroDefId)>,\n+) -> Result<(MacroId, MacroDefId, MacroCallId), UnresolvedMacro> {\n+    let (macro_id, def_id) = resolver(item_attr.path.clone())\n         .ok_or_else(|| UnresolvedMacro { path: item_attr.path.clone() })?;\n-    let res = def.as_lazy_macro(\n+    let call_id = def_id.as_lazy_macro(\n         db.upcast(),\n         krate,\n         MacroCallKind::Derive {\n@@ -947,7 +947,7 @@ fn derive_macro_as_call_id(\n             derive_attr_index: derive_attr.ast_index,\n         },\n     );\n-    Ok(res)\n+    Ok((macro_id, def_id, call_id))\n }\n \n fn attr_macro_as_call_id("}, {"sha": "25fb302e8758754159b058b023cd87f20e563fa4", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -76,7 +76,7 @@ use crate::{\n     path::ModPath,\n     per_ns::PerNs,\n     visibility::Visibility,\n-    AstId, BlockId, BlockLoc, FunctionId, LocalModuleId, ModuleId, ProcMacroId,\n+    AstId, BlockId, BlockLoc, FunctionId, LocalModuleId, MacroId, ModuleId, ProcMacroId,\n };\n \n /// Contains the results of (early) name resolution.\n@@ -108,7 +108,7 @@ pub struct DefMap {\n     proc_macro_loading_error: Option<Box<str>>,\n     /// Tracks which custom derives are in scope for an item, to allow resolution of derive helper\n     /// attributes.\n-    derive_helpers_in_scope: FxHashMap<AstId<ast::Item>, Vec<(Name, MacroCallId)>>,\n+    derive_helpers_in_scope: FxHashMap<AstId<ast::Item>, Vec<(Name, MacroId, MacroCallId)>>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n     registered_attrs: Vec<SmolStr>,\n@@ -299,7 +299,10 @@ impl DefMap {\n         self.modules.iter()\n     }\n \n-    pub fn derive_helpers_in_scope(&self, id: AstId<ast::Adt>) -> Option<&[(Name, MacroCallId)]> {\n+    pub fn derive_helpers_in_scope(\n+        &self,\n+        id: AstId<ast::Adt>,\n+    ) -> Option<&[(Name, MacroId, MacroCallId)]> {\n         self.derive_helpers_in_scope.get(&id.map(|it| it.upcast())).map(Deref::deref)\n     }\n "}, {"sha": "f394c541719f323a42f20bc7765b6a300de8b900", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -18,7 +18,7 @@ use hir_expand::{\n     ExpandTo, HirFileId, InFile, MacroCallId, MacroCallKind, MacroCallLoc, MacroDefId,\n     MacroDefKind,\n };\n-use itertools::Itertools;\n+use itertools::{izip, Itertools};\n use la_arena::Idx;\n use limit::Limit;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -1055,16 +1055,20 @@ impl DefCollector<'_> {\n         };\n         let mut res = ReachedFixedPoint::Yes;\n         macros.retain(|directive| {\n-            let resolver = |path| {\n+            let resolver2 = |path| {\n                 let resolved_res = self.def_map.resolve_path_fp_with_macro(\n                     self.db,\n                     ResolveMode::Other,\n                     directive.module_id,\n                     &path,\n                     BuiltinShadowMode::Module,\n                 );\n-                resolved_res.resolved_def.take_macros().map(|it| macro_id_to_def_id(self.db, it))\n+                resolved_res\n+                    .resolved_def\n+                    .take_macros()\n+                    .map(|it| (it, macro_id_to_def_id(self.db, it)))\n             };\n+            let resolver = |path| resolver2(path).map(|(_, it)| it);\n \n             match &directive.kind {\n                 MacroDirectiveKind::FnLike { ast_id, expand_to } => {\n@@ -1083,21 +1087,37 @@ impl DefCollector<'_> {\n                     }\n                 }\n                 MacroDirectiveKind::Derive { ast_id, derive_attr, derive_pos } => {\n-                    let call_id = derive_macro_as_call_id(\n+                    let id = derive_macro_as_call_id(\n                         self.db,\n                         ast_id,\n                         *derive_attr,\n                         *derive_pos as u32,\n                         self.def_map.krate,\n-                        &resolver,\n+                        &resolver2,\n                     );\n-                    if let Ok(call_id) = call_id {\n+\n+                    if let Ok((macro_id, def_id, call_id)) = id {\n                         self.def_map.modules[directive.module_id].scope.set_derive_macro_invoc(\n                             ast_id.ast_id,\n                             call_id,\n                             *derive_attr,\n                             *derive_pos,\n                         );\n+                        // Record its helper attributes.\n+                        if def_id.krate != self.def_map.krate {\n+                            let def_map = self.db.crate_def_map(def_id.krate);\n+                            if let Some(helpers) = def_map.exported_derives.get(&def_id) {\n+                                self.def_map\n+                                    .derive_helpers_in_scope\n+                                    .entry(ast_id.ast_id.map(|it| it.upcast()))\n+                                    .or_default()\n+                                    .extend(izip!(\n+                                        helpers.iter().cloned(),\n+                                        iter::repeat(macro_id),\n+                                        iter::repeat(call_id),\n+                                    ));\n+                            }\n+                        }\n \n                         push_resolved(directive, call_id);\n                         res = ReachedFixedPoint::No;\n@@ -1129,7 +1149,7 @@ impl DefCollector<'_> {\n \n                     if let Some(ident) = path.as_ident() {\n                         if let Some(helpers) = self.def_map.derive_helpers_in_scope.get(&ast_id) {\n-                            if helpers.iter().any(|(it, _)| it == ident) {\n+                            if helpers.iter().any(|(it, ..)| it == ident) {\n                                 cov_mark::hit!(resolved_derive_helper);\n                                 // Resolved to derive helper. Collect the item's attributes again,\n                                 // starting after the derive helper.\n@@ -1144,7 +1164,7 @@ impl DefCollector<'_> {\n                     };\n                     if matches!(\n                         def,\n-                        MacroDefId {  kind:MacroDefKind::BuiltInAttr(expander, _),.. }\n+                        MacroDefId { kind:MacroDefKind::BuiltInAttr(expander, _),.. }\n                         if expander.is_derive()\n                     ) {\n                         // Resolved to `#[derive]`\n@@ -1313,20 +1333,6 @@ impl DefCollector<'_> {\n             self.def_map.diagnostics.push(diag);\n         }\n \n-        // If we've just resolved a derive, record its helper attributes.\n-        if let MacroCallKind::Derive { ast_id, .. } = &loc.kind {\n-            if loc.def.krate != self.def_map.krate {\n-                let def_map = self.db.crate_def_map(loc.def.krate);\n-                if let Some(helpers) = def_map.exported_derives.get(&loc.def) {\n-                    self.def_map\n-                        .derive_helpers_in_scope\n-                        .entry(ast_id.map(|it| it.upcast()))\n-                        .or_default()\n-                        .extend(helpers.iter().cloned().zip(std::iter::repeat(macro_call_id)));\n-                }\n-            }\n-        }\n-\n         // Then, fetch and process the item tree. This will reuse the expansion result from above.\n         let item_tree = self.db.file_item_tree(file_id);\n         let mod_dir = self.mod_dirs[&module_id].clone();"}, {"sha": "3163fa0f93fa573c0e2215f2ccaf5f1627340b38", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -149,6 +149,7 @@ impl Resolver {\n         self.resolve_module_path(db, path, BuiltinShadowMode::Module)\n     }\n \n+    // FIXME: This shouldn't exist\n     pub fn resolve_module_path_in_trait_assoc_items(\n         &self,\n         db: &dyn DefDatabase,"}, {"sha": "86b5bd3c2c81f8477799164ed25d8814ec39fd2b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -2252,6 +2252,17 @@ impl Local {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct DeriveHelper {\n+    pub(crate) derive: MacroId,\n+}\n+\n+impl DeriveHelper {\n+    pub fn derive(&self) -> Macro {\n+        Macro { id: self.derive.into() }\n+    }\n+}\n+\n // FIXME: Wrong name? This is could also be a registered attribute\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct BuiltinAttr {"}, {"sha": "fc8f23f19ab9112839303e2f33c022e056567891", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -29,9 +29,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, BindingMode, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n-    HirFileId, Impl, InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef, Name, Path,\n-    ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    Access, BindingMode, BuiltinAttr, Callable, ConstParam, Crate, DeriveHelper, Field, Function,\n+    HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef,\n+    Name, Path, ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -47,6 +47,7 @@ pub enum PathResolution {\n     SelfType(Impl),\n     BuiltinAttr(BuiltinAttr),\n     ToolModule(ToolModule),\n+    DeriveHelper(DeriveHelper),\n }\n \n impl PathResolution {\n@@ -71,6 +72,7 @@ impl PathResolution {\n             PathResolution::BuiltinAttr(_)\n             | PathResolution::ToolModule(_)\n             | PathResolution::Local(_)\n+            | PathResolution::DeriveHelper(_)\n             | PathResolution::ConstParam(_) => None,\n             PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n             PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n@@ -856,7 +858,9 @@ impl<'db> SemanticsImpl<'db> {\n                             None\n                         }\n                     }?;\n-\n+                    if !self.with_ctx(|ctx| ctx.has_derives(InFile::new(token.file_id, &adt))) {\n+                        return None;\n+                    }\n                     // Not an attribute, nor a derive, so it's either a builtin or a derive helper\n                     // Try to resolve to a derive helper and downmap\n                     let attr_name = attr.path().and_then(|it| it.as_single_name_ref())?.as_name();\n@@ -865,7 +869,7 @@ impl<'db> SemanticsImpl<'db> {\n                         def_map.derive_helpers_in_scope(InFile::new(token.file_id, id))?;\n                     let item = Some(adt.into());\n                     let mut res = None;\n-                    for (_, derive) in helpers.iter().filter(|(helper, _)| *helper == attr_name) {\n+                    for (.., derive) in helpers.iter().filter(|(helper, ..)| *helper == attr_name) {\n                         res = res.or(process_expansion_for_token(\n                             &mut stack,\n                             derive.as_file(),"}, {"sha": "d57a73ade3a641e4eb911e1b9167a968d6908254", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -43,8 +43,8 @@ use syntax::{\n \n use crate::{\n     db::HirDatabase, semantics::PathResolution, Adt, AssocItem, BindingMode, BuiltinAttr,\n-    BuiltinType, Callable, Const, Field, Function, Local, Macro, ModuleDef, Static, Struct,\n-    ToolModule, Trait, Type, TypeAlias, Variant,\n+    BuiltinType, Callable, Const, DeriveHelper, Field, Function, Local, Macro, ModuleDef, Static,\n+    Struct, ToolModule, Trait, Type, TypeAlias, Variant,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -429,36 +429,72 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        let is_path_of_attr = path\n+        let meta_path = path\n             .syntax()\n             .ancestors()\n-            .map(|it| it.kind())\n-            .take_while(|&kind| ast::Path::can_cast(kind) || ast::Meta::can_cast(kind))\n+            .take_while(|it| {\n+                let kind = it.kind();\n+                ast::Path::can_cast(kind) || ast::Meta::can_cast(kind)\n+            })\n             .last()\n-            .map_or(false, ast::Meta::can_cast);\n+            .and_then(ast::Meta::cast);\n \n         // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we are\n         // trying to resolve foo::bar.\n         if path.parent_path().is_some() {\n             return match resolve_hir_path_qualifier(db, &self.resolver, &hir_path) {\n-                None if is_path_of_attr => {\n+                None if meta_path.is_some() => {\n                     path.first_segment().and_then(|it| it.name_ref()).and_then(|name_ref| {\n                         ToolModule::by_name(db, self.resolver.krate().into(), &name_ref.text())\n                             .map(PathResolution::ToolModule)\n                     })\n                 }\n                 res => res,\n             };\n-        } else if is_path_of_attr {\n+        } else if let Some(meta_path) = meta_path {\n             // Case where we are resolving the final path segment of a path in an attribute\n             // in this case we have to check for inert/builtin attributes and tools and prioritize\n             // resolution of attributes over other namespaces\n-            let name_ref = path.as_single_name_ref();\n-            let builtin = name_ref.as_ref().and_then(|name_ref| {\n-                BuiltinAttr::by_name(db, self.resolver.krate().into(), &name_ref.text())\n-            });\n-            if let Some(_) = builtin {\n-                return builtin.map(PathResolution::BuiltinAttr);\n+            if let Some(name_ref) = path.as_single_name_ref() {\n+                let builtin =\n+                    BuiltinAttr::by_name(db, self.resolver.krate().into(), &name_ref.text());\n+                if let Some(_) = builtin {\n+                    return builtin.map(PathResolution::BuiltinAttr);\n+                }\n+\n+                if let Some(attr) = meta_path.parent_attr() {\n+                    let adt = if let Some(field) =\n+                        attr.syntax().parent().and_then(ast::RecordField::cast)\n+                    {\n+                        field.syntax().ancestors().take(4).find_map(ast::Adt::cast)\n+                    } else if let Some(field) =\n+                        attr.syntax().parent().and_then(ast::TupleField::cast)\n+                    {\n+                        field.syntax().ancestors().take(4).find_map(ast::Adt::cast)\n+                    } else if let Some(variant) =\n+                        attr.syntax().parent().and_then(ast::Variant::cast)\n+                    {\n+                        variant.syntax().ancestors().nth(2).and_then(ast::Adt::cast)\n+                    } else {\n+                        None\n+                    };\n+                    if let Some(adt) = adt {\n+                        let ast_id = db.ast_id_map(self.file_id).ast_id(&adt);\n+                        if let Some(helpers) = self\n+                            .resolver\n+                            .def_map()\n+                            .derive_helpers_in_scope(InFile::new(self.file_id, ast_id))\n+                        {\n+                            // FIXME: Multiple derives can have the same helper\n+                            let name_ref = name_ref.as_name();\n+                            if let Some(&(_, derive, _)) =\n+                                helpers.iter().find(|(name, ..)| *name == name_ref)\n+                            {\n+                                return Some(PathResolution::DeriveHelper(DeriveHelper { derive }));\n+                            }\n+                        }\n+                    }\n+                }\n             }\n             return match resolve_hir_path_as_macro(db, &self.resolver, &hir_path) {\n                 Some(m) => Some(PathResolution::Def(ModuleDef::Macro(m))),"}, {"sha": "27c3ccb35a1eaf263eb8610fce1ccfe1fc8bd5ab", "filename": "crates/ide-completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fitem.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -292,6 +292,7 @@ impl CompletionItemKind {\n                 SymbolKind::Const => \"ct\",\n                 SymbolKind::ConstParam => \"cp\",\n                 SymbolKind::Derive => \"de\",\n+                SymbolKind::DeriveHelper => \"dh\",\n                 SymbolKind::Enum => \"en\",\n                 SymbolKind::Field => \"fd\",\n                 SymbolKind::Function => \"fn\","}, {"sha": "a9a78e6729049ebb7817fe18ed8ed014331af246", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -7,9 +7,9 @@\n \n use arrayvec::ArrayVec;\n use hir::{\n-    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Crate, Field, Function,\n-    GenericParam, HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef, Name,\n-    PathResolution, Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n+    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Crate, DeriveHelper, Field,\n+    Function, GenericParam, HasVisibility, Impl, ItemInNs, Label, Local, Macro, Module, ModuleDef,\n+    Name, PathResolution, Semantics, Static, ToolModule, Trait, TypeAlias, Variant, Visibility,\n };\n use stdx::impl_from;\n use syntax::{\n@@ -37,6 +37,7 @@ pub enum Definition {\n     Local(Local),\n     GenericParam(GenericParam),\n     Label(Label),\n+    DeriveHelper(DeriveHelper),\n     BuiltinAttr(BuiltinAttr),\n     ToolModule(ToolModule),\n }\n@@ -69,6 +70,7 @@ impl Definition {\n             Definition::Local(it) => it.module(db),\n             Definition::GenericParam(it) => it.module(db),\n             Definition::Label(it) => it.module(db),\n+            Definition::DeriveHelper(it) => it.derive().module(db),\n             Definition::BuiltinAttr(_) | Definition::BuiltinType(_) | Definition::ToolModule(_) => {\n                 return None\n             }\n@@ -94,7 +96,8 @@ impl Definition {\n             | Definition::SelfType(_)\n             | Definition::Local(_)\n             | Definition::GenericParam(_)\n-            | Definition::Label(_) => return None,\n+            | Definition::Label(_)\n+            | Definition::DeriveHelper(_) => return None,\n         };\n         Some(vis)\n     }\n@@ -118,6 +121,7 @@ impl Definition {\n             Definition::Label(it) => it.name(db),\n             Definition::BuiltinAttr(_) => return None, // FIXME\n             Definition::ToolModule(_) => return None,  // FIXME\n+            Definition::DeriveHelper(_) => return None, // FIXME\n         };\n         Some(name)\n     }\n@@ -500,6 +504,7 @@ impl From<PathResolution> for Definition {\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n             PathResolution::BuiltinAttr(attr) => Definition::BuiltinAttr(attr),\n             PathResolution::ToolModule(tool) => Definition::ToolModule(tool),\n+            PathResolution::DeriveHelper(helper) => Definition::DeriveHelper(helper),\n         }\n     }\n }"}, {"sha": "966bba616f6277aa3a97d9dbbec808927fce05b8", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -173,6 +173,7 @@ pub enum SymbolKind {\n     Const,\n     ConstParam,\n     Derive,\n+    DeriveHelper,\n     Enum,\n     Field,\n     Function,"}, {"sha": "40af9e6fe2ad80f04042810ab5bc500548bc60b4", "filename": "crates/ide-db/src/path_transform.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fpath_transform.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -224,7 +224,8 @@ impl<'a> Ctx<'a> {\n             | hir::PathResolution::SelfType(_)\n             | hir::PathResolution::Def(_)\n             | hir::PathResolution::BuiltinAttr(_)\n-            | hir::PathResolution::ToolModule(_) => (),\n+            | hir::PathResolution::ToolModule(_)\n+            | hir::PathResolution::DeriveHelper(_) => (),\n         }\n         Some(())\n     }"}, {"sha": "517fe3f246d08ecfb3ee8dd59401abe1a0175f62", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -156,6 +156,8 @@ impl Definition {\n             Definition::SelfType(_) => return None,\n             Definition::BuiltinAttr(_) => return None,\n             Definition::ToolModule(_) => return None,\n+            // FIXME: This should be doable in theory\n+            Definition::DeriveHelper(_) => return None,\n         };\n         return res;\n "}, {"sha": "582e9fe7e808c05b933de4293d5e66bc719dba70", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -190,7 +190,8 @@ pub(crate) fn resolve_doc_path_for_def(\n         | Definition::SelfType(_)\n         | Definition::Local(_)\n         | Definition::GenericParam(_)\n-        | Definition::Label(_) => None,\n+        | Definition::Label(_)\n+        | Definition::DeriveHelper(_) => None,\n     }\n     .map(Definition::from)\n }\n@@ -515,7 +516,8 @@ fn filename_and_frag_for_def(\n         | Definition::GenericParam(_)\n         | Definition::Label(_)\n         | Definition::BuiltinAttr(_)\n-        | Definition::ToolModule(_) => return None,\n+        | Definition::ToolModule(_)\n+        | Definition::DeriveHelper(_) => return None,\n     };\n \n     Some((def, res, None))"}, {"sha": "fcdb23fa18aae41a3b57abfc4c494db8f3f125e1", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -370,6 +370,8 @@ pub(super) fn definition(\n         // FIXME: We should be able to show more info about these\n         Definition::BuiltinAttr(it) => return render_builtin_attr(db, it),\n         Definition::ToolModule(it) => return Some(Markup::fenced_block(&it.name(db))),\n+        // FIXME: it.name(db)\n+        Definition::DeriveHelper(_it) => (\"derive-helper\".to_owned(), None),\n     };\n \n     let docs = match config.documentation {"}, {"sha": "9f049e298ad119573cccfdc09fab0ea5c3524507", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -196,6 +196,8 @@ impl TryToNav for Definition {\n             Definition::BuiltinType(_) => None,\n             Definition::ToolModule(_) => None,\n             Definition::BuiltinAttr(_) => None,\n+            // FIXME: The focus range should be set to the helper declaration\n+            Definition::DeriveHelper(it) => it.derive().try_to_nav(db),\n         }\n     }\n }"}, {"sha": "fedc1a435827233ac24135b0918167efa4238dc6", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -237,7 +237,8 @@ fn signature_help_for_generics(\n             | hir::PathResolution::Local(_)\n             | hir::PathResolution::TypeParam(_)\n             | hir::PathResolution::ConstParam(_)\n-            | hir::PathResolution::SelfType(_) => return None,\n+            | hir::PathResolution::SelfType(_)\n+            | hir::PathResolution::DeriveHelper(_) => return None,\n         };\n \n         generic_def"}, {"sha": "eef717c16f2ef36cd374918069efaeb74def129a", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -107,6 +107,7 @@ pub struct HlRange {\n // builtinType:: Emitted for builtin types like `u32`, `str` and `f32`.\n // comment:: Emitted for comments.\n // constParameter:: Emitted for const parameters.\n+// deriveHelper:: Emitted for derive helper attributes.\n // enumMember:: Emitted for enum variants.\n // generic:: Emitted for generic tokens that have no mapping.\n // keyword:: Emitted for keywords."}, {"sha": "9395e914c43aa6ad796215cf1f5b926f2a7df8dd", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -472,6 +472,7 @@ fn highlight_def(\n         Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n         Definition::BuiltinAttr(_) => Highlight::new(HlTag::Symbol(SymbolKind::BuiltinAttr)),\n         Definition::ToolModule(_) => Highlight::new(HlTag::Symbol(SymbolKind::ToolModule)),\n+        Definition::DeriveHelper(_) => Highlight::new(HlTag::Symbol(SymbolKind::DeriveHelper)),\n     };\n \n     let def_crate = def.krate(db);"}, {"sha": "f779a985a99ae60eb9289044d604b64775532a35", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -270,6 +270,7 @@ fn module_def_to_hl_tag(def: Definition) -> HlTag {\n         Definition::Label(_) => SymbolKind::Label,\n         Definition::BuiltinAttr(_) => SymbolKind::BuiltinAttr,\n         Definition::ToolModule(_) => SymbolKind::ToolModule,\n+        Definition::DeriveHelper(_) => SymbolKind::DeriveHelper,\n     };\n     HlTag::Symbol(symbol)\n }"}, {"sha": "5262770f30317f9312cc156f5664f1185ceba8f9", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -134,6 +134,7 @@ impl HlTag {\n                 SymbolKind::Const => \"constant\",\n                 SymbolKind::ConstParam => \"const_param\",\n                 SymbolKind::Derive => \"derive\",\n+                SymbolKind::DeriveHelper => \"derive_helper\",\n                 SymbolKind::Enum => \"enum\",\n                 SymbolKind::Field => \"field\",\n                 SymbolKind::Function => \"function\","}, {"sha": "6c78b5df1a7050472d9cacb304bb799792aa4ee0", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -54,6 +54,7 @@ define_semantic_token_types![\n     (COMPARISON, \"comparison\"),\n     (CONST_PARAMETER, \"constParameter\"),\n     (DERIVE, \"derive\"),\n+    (DERIVE_HELPER, \"deriveHelper\"),\n     (DOT, \"dot\"),\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),"}, {"sha": "7f4fa57fa1e095f2138d6924815c9a7643a3c82b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa1491ecde22732329069773fed3e23f6b42e14d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=aa1491ecde22732329069773fed3e23f6b42e14d", "patch": "@@ -53,7 +53,8 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Macro\n         | SymbolKind::BuiltinAttr\n         | SymbolKind::Attribute\n-        | SymbolKind::Derive => lsp_types::SymbolKind::FUNCTION,\n+        | SymbolKind::Derive\n+        | SymbolKind::DeriveHelper => lsp_types::SymbolKind::FUNCTION,\n         SymbolKind::Module | SymbolKind::ToolModule => lsp_types::SymbolKind::MODULE,\n         SymbolKind::TypeAlias | SymbolKind::TypeParam | SymbolKind::SelfType => {\n             lsp_types::SymbolKind::TYPE_PARAMETER\n@@ -117,6 +118,7 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::Const => lsp_types::CompletionItemKind::CONSTANT,\n             SymbolKind::ConstParam => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n             SymbolKind::Derive => lsp_types::CompletionItemKind::FUNCTION,\n+            SymbolKind::DeriveHelper => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Enum => lsp_types::CompletionItemKind::ENUM,\n             SymbolKind::Field => lsp_types::CompletionItemKind::FIELD,\n             SymbolKind::Function => lsp_types::CompletionItemKind::FUNCTION,\n@@ -561,6 +563,7 @@ fn semantic_token_type_and_modifiers(\n         HlTag::Symbol(symbol) => match symbol {\n             SymbolKind::Attribute => semantic_tokens::ATTRIBUTE,\n             SymbolKind::Derive => semantic_tokens::DERIVE,\n+            SymbolKind::DeriveHelper => semantic_tokens::DERIVE_HELPER,\n             SymbolKind::Module => lsp_types::SemanticTokenType::NAMESPACE,\n             SymbolKind::Impl => semantic_tokens::TYPE_ALIAS,\n             SymbolKind::Field => lsp_types::SemanticTokenType::PROPERTY,"}]}