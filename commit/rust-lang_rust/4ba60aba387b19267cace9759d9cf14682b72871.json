{"sha": "4ba60aba387b19267cace9759d9cf14682b72871", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYTYwYWJhMzg3YjE5MjY3Y2FjZTk3NTlkOWNmMTQ2ODJiNzI4NzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-20T22:54:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-20T22:54:17Z"}, "message": "Auto merge of #34186 - GuillaumeGomez:err-code-check, r=alexcrichton\n\nImplementation of #34168\n\nr? @brson\n\ncc @alexcrichton\ncc @steveklabnik\ncc @jonathandturner\n\nI only updated `librustc_privacy/diagnostics.rs`, and I already found a case where the code doesn't throw the expected error code (E0448).\n\nFixes #34168.", "tree": {"sha": "166236eccb87bb1f6ddb46cea9576293b79876aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/166236eccb87bb1f6ddb46cea9576293b79876aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba60aba387b19267cace9759d9cf14682b72871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba60aba387b19267cace9759d9cf14682b72871", "html_url": "https://github.com/rust-lang/rust/commit/4ba60aba387b19267cace9759d9cf14682b72871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba60aba387b19267cace9759d9cf14682b72871/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5522e678bcefe14cc2ab3d0ab329b7059ce52b36", "url": "https://api.github.com/repos/rust-lang/rust/commits/5522e678bcefe14cc2ab3d0ab329b7059ce52b36", "html_url": "https://github.com/rust-lang/rust/commit/5522e678bcefe14cc2ab3d0ab329b7059ce52b36"}, {"sha": "ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "html_url": "https://github.com/rust-lang/rust/commit/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2"}], "stats": {"total": 91, "additions": 63, "deletions": 28}, "files": [{"sha": "66afe5835bf6fc6f3549dfc788e7feaab720f948", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ba60aba387b19267cace9759d9cf14682b72871/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba60aba387b19267cace9759d9cf14682b72871/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=4ba60aba387b19267cace9759d9cf14682b72871", "patch": "@@ -16,7 +16,7 @@ E0445: r##\"\n A private trait was used on a public type parameter bound. Erroneous code\n examples:\n \n-```compile_fail\n+```compile_fail,E0445\n #![deny(private_in_public)]\n \n trait Foo {\n@@ -46,7 +46,7 @@ pub fn foo<T: Foo> (t: T) {} // ok!\n E0446: r##\"\n A private type was used in a public type signature. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0446\n #![deny(private_in_public)]\n \n mod Foo {\n@@ -100,7 +100,7 @@ pub enum Foo {\n Since the enum is already public, adding `pub` on one its elements is\n unnecessary. Example:\n \n-```compile_fail\n+```compile_fail,\n enum Foo {\n     pub Bar, // not ok!\n }\n@@ -119,7 +119,7 @@ E0450: r##\"\n A tuple constructor was invoked while some of its fields are private. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0450\n mod Bar {\n     pub struct Foo(isize);\n }\n@@ -157,7 +157,7 @@ let f = bar::Foo::new(1);\n E0451: r##\"\n A struct constructor with private fields was invoked. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0451\n mod Bar {\n     pub struct Foo {\n         pub a: isize,"}, {"sha": "139e1033175ea1e49834aa22299bb374bf56156c", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4ba60aba387b19267cace9759d9cf14682b72871/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba60aba387b19267cace9759d9cf14682b72871/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=4ba60aba387b19267cace9759d9cf14682b72871", "patch": "@@ -408,7 +408,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             tests.add_test(text.to_owned(),\n                            block_info.should_panic, block_info.no_run,\n                            block_info.ignore, block_info.test_harness,\n-                           block_info.compile_fail);\n+                           block_info.compile_fail, block_info.error_codes);\n         }\n     }\n \n@@ -454,6 +454,7 @@ struct LangString {\n     rust: bool,\n     test_harness: bool,\n     compile_fail: bool,\n+    error_codes: Vec<String>,\n }\n \n impl LangString {\n@@ -465,16 +466,22 @@ impl LangString {\n             rust: true,  // NB This used to be `notrust = false`\n             test_harness: false,\n             compile_fail: false,\n+            error_codes: Vec::new(),\n         }\n     }\n \n     fn parse(string: &str) -> LangString {\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n-        let allow_compile_fail = match get_unstable_features_setting() {\n-            UnstableFeatures::Allow | UnstableFeatures::Cheat=> true,\n-            _ => false,\n+        let mut allow_compile_fail = false;\n+        let mut allow_error_code_check = false;\n+        match get_unstable_features_setting() {\n+            UnstableFeatures::Allow | UnstableFeatures::Cheat => {\n+                allow_compile_fail = true;\n+                allow_error_code_check = true;\n+            }\n+            _ => {},\n         };\n \n         let tokens = string.split(|c: char|\n@@ -493,7 +500,15 @@ impl LangString {\n                     data.compile_fail = true;\n                     seen_rust_tags = true;\n                     data.no_run = true;\n-                },\n+                }\n+                x if allow_error_code_check && x.starts_with(\"E\") && x.len() == 5 => {\n+                    if let Ok(_) = x[1..].parse::<u32>() {\n+                        data.error_codes.push(x.to_owned());\n+                        seen_rust_tags = true;\n+                    } else {\n+                        seen_other_tags = true;\n+                    }\n+                }\n                 _ => { seen_other_tags = true }\n             }\n         }\n@@ -577,30 +592,34 @@ mod tests {\n     fn test_lang_string_parse() {\n         fn t(s: &str,\n             should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n-            compile_fail: bool) {\n+            compile_fail: bool, error_codes: Vec<String>) {\n             assert_eq!(LangString::parse(s), LangString {\n                 should_panic: should_panic,\n                 no_run: no_run,\n                 ignore: ignore,\n                 rust: rust,\n                 test_harness: test_harness,\n                 compile_fail: compile_fail,\n+                error_codes: error_codes,\n             })\n         }\n \n         // marker                | should_panic| no_run| ignore| rust | test_harness| compile_fail\n-        t(\"\",                      false,        false,  false,  true,  false,        false);\n-        t(\"rust\",                  false,        false,  false,  true,  false,        false);\n-        t(\"sh\",                    false,        false,  false,  false, false,        false);\n-        t(\"ignore\",                false,        false,  true,   true,  false,        false);\n-        t(\"should_panic\",          true,         false,  false,  true,  false,        false);\n-        t(\"no_run\",                false,        true,   false,  true,  false,        false);\n-        t(\"test_harness\",          false,        false,  false,  true,  true,         false);\n-        t(\"compile_fail\",          false,        true,   false,  true,  false,        true);\n-        t(\"{.no_run .example}\",    false,        true,   false,  true,  false,        false);\n-        t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false,        false);\n-        t(\"{.example .rust}\",      false,        false,  false,  true,  false,        false);\n-        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,         false);\n+        //                       | error_codes\n+        t(\"\",                      false,        false,  false,  true,  false, false, Vec::new());\n+        t(\"rust\",                  false,        false,  false,  true,  false, false, Vec::new());\n+        t(\"sh\",                    false,        false,  false,  false, false, false, Vec::new());\n+        t(\"ignore\",                false,        false,  true,   true,  false, false, Vec::new());\n+        t(\"should_panic\",          true,         false,  false,  true,  false, false, Vec::new());\n+        t(\"no_run\",                false,        true,   false,  true,  false, false, Vec::new());\n+        t(\"test_harness\",          false,        false,  false,  true,  true,  false, Vec::new());\n+        t(\"compile_fail\",          false,        true,   false,  true,  false, true,  Vec::new());\n+        t(\"E0450\",                 false,        false,  false,  true,  false, false,\n+                                   vec!(\"E0450\".to_owned()));\n+        t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, Vec::new());\n+        t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false, false, Vec::new());\n+        t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, Vec::new());\n+        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, Vec::new());\n     }\n \n     #[test]"}, {"sha": "c17af55ca10af4798dca07dcdf5fef89aca4110e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4ba60aba387b19267cace9759d9cf14682b72871/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba60aba387b19267cace9759d9cf14682b72871/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4ba60aba387b19267cace9759d9cf14682b72871", "patch": "@@ -176,7 +176,7 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n            externs: core::Externs,\n            should_panic: bool, no_run: bool, as_test_harness: bool,\n-           compile_fail: bool, opts: &TestOptions) {\n+           compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), as_test_harness, opts);\n@@ -232,7 +232,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n                                                       None,\n                                                       codemap.clone());\n     let old = io::set_panic(box Sink(data.clone()));\n-    let _bomb = Bomb(data, old.unwrap_or(box io::stdout()));\n+    let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n     // Compile the code\n     let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n@@ -273,13 +273,28 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n                     } else if count == 0 && compile_fail == true {\n                         panic!(\"test compiled while it wasn't supposed to\")\n                     }\n+                    if count > 0 && error_codes.len() > 0 {\n+                        let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n+                        error_codes.retain(|err| !out.contains(err));\n+                    }\n                 }\n                 Ok(()) if compile_fail => panic!(\"test compiled while it wasn't supposed to\"),\n                 _ => {}\n             }\n         }\n-        Err(_) if compile_fail == false => panic!(\"couldn't compile the test\"),\n-        _ => {}\n+        Err(_) => {\n+            if compile_fail == false {\n+                panic!(\"couldn't compile the test\");\n+            }\n+            if error_codes.len() > 0 {\n+                let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n+                error_codes.retain(|err| !out.contains(err));\n+            }\n+        }\n+    }\n+\n+    if error_codes.len() > 0 {\n+        panic!(\"Some expected error codes were not found: {:?}\", error_codes);\n     }\n \n     if no_run { return }\n@@ -411,7 +426,7 @@ impl Collector {\n \n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n-                    as_test_harness: bool, compile_fail: bool) {\n+                    as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>) {\n         let name = if self.use_headers {\n             let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n             format!(\"{}_{}\", s, self.cnt)\n@@ -442,6 +457,7 @@ impl Collector {\n                         no_run,\n                         as_test_harness,\n                         compile_fail,\n+                        error_codes,\n                         &opts);\n             })\n         });"}]}