{"sha": "c2eb084b4c273682b06fcaf285399ec9bf6fd0cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZWIwODRiNGMyNzM2ODJiMDZmY2FmMjg1Mzk5ZWM5YmY2ZmQwY2I=", "commit": {"author": {"name": "Joshua Wise", "email": "joshua@joshuawise.com", "date": "2011-11-23T10:15:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-28T18:41:45Z"}, "message": "Add c_vec library to std.", "tree": {"sha": "465149197b7152119fc09556d9866aa7c1ca1c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465149197b7152119fc09556d9866aa7c1ca1c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2eb084b4c273682b06fcaf285399ec9bf6fd0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2eb084b4c273682b06fcaf285399ec9bf6fd0cb", "html_url": "https://github.com/rust-lang/rust/commit/c2eb084b4c273682b06fcaf285399ec9bf6fd0cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2eb084b4c273682b06fcaf285399ec9bf6fd0cb/comments", "author": {"login": "jwise", "id": 87427, "node_id": "MDQ6VXNlcjg3NDI3", "avatar_url": "https://avatars.githubusercontent.com/u/87427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwise", "html_url": "https://github.com/jwise", "followers_url": "https://api.github.com/users/jwise/followers", "following_url": "https://api.github.com/users/jwise/following{/other_user}", "gists_url": "https://api.github.com/users/jwise/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwise/subscriptions", "organizations_url": "https://api.github.com/users/jwise/orgs", "repos_url": "https://api.github.com/users/jwise/repos", "events_url": "https://api.github.com/users/jwise/events{/privacy}", "received_events_url": "https://api.github.com/users/jwise/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa6e5750ef31d5ccc2c7edd184aaa3f7372ea00", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa6e5750ef31d5ccc2c7edd184aaa3f7372ea00", "html_url": "https://github.com/rust-lang/rust/commit/9aa6e5750ef31d5ccc2c7edd184aaa3f7372ea00"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "3b94c54f37365c8571f293b37b7d11668a4864c5", "filename": "src/lib/c_vec.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c2eb084b4c273682b06fcaf285399ec9bf6fd0cb/src%2Flib%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2eb084b4c273682b06fcaf285399ec9bf6fd0cb/src%2Flib%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fc_vec.rs?ref=c2eb084b4c273682b06fcaf285399ec9bf6fd0cb", "patch": "@@ -0,0 +1,98 @@\n+/*\n+Module: c_vec\n+\n+Library to interface with chunks of memory allocated in C.\n+\n+It is often desirable to safely interface with memory allocated from C,\n+encapsulating the unsafety into allocation and destruction time.  Indeed,\n+allocating memory externally is currently the only way to give Rust shared\n+mutable state with C programs that keep their own references; vectors are\n+unsuitable because they could be reallocated or moved at any time, and\n+importing C memory into a vector takes a one-time snapshot of the memory.\n+\n+This module simplifies the usage of such external blocks of memory.  Memory\n+is encapsulated into an opaque object after creation; the lifecycle of the\n+memory can be optionally managed by Rust, if an appropriate destructor\n+closure is provided.  Safety is ensured by bounds-checking accesses, which\n+are marshalled through get and set functions.\n+\n+There are three unsafe functions: the two introduction forms, and the\n+pointer elimination form.  The introduction forms are unsafe for the obvious\n+reason (they act on a pointer that cannot be checked inside the method), but\n+the elimination form is somewhat more subtle in its unsafety.  By using a\n+pointer taken from a c_vec::t without keeping a reference to the c_vec::t\n+itself around, the c_vec could be garbage collected, and the memory within\n+could be destroyed.  There are legitimate uses for the pointer elimination\n+form -- for instance, to pass memory back into C -- but great care must be\n+taken to ensure that a reference to the c_vec::t is still held if needed.\n+\n+ */\n+\n+export t;\n+export create, create_with_dtor;\n+export get, set;\n+export size;\n+export ptr;\n+\n+/*\n+ Type: t\n+\n+ The type representing a native chunk of memory.  Wrapped in a tag for\n+ opacity; FIXME #818 when it is possible to have truly opaque types, this\n+ should be revisited.\n+ */\n+\n+tag t<T> {\n+    t({ base: *T, size: uint, rsrc: @dtor_res});\n+}\n+\n+resource dtor_res(dtor: option::t<fn@()>) {\n+    alt dtor {\n+      option::none. { }\n+      option::some(f) { f(); }\n+    }\n+}\n+\n+/*\n+ Section: Introduction forms\n+ */\n+\n+unsafe fn create<T>(base: *T, size: uint) -> t<T> {\n+    ret t({base: base,\n+           size: size,\n+           rsrc: @dtor_res(option::none)\n+          });\n+}\n+\n+unsafe fn create_with_dtor<T>(base: *T, size: uint, dtor: fn@()) -> t<T> {\n+    ret t({base: base,\n+           size: size,\n+           rsrc: @dtor_res(option::some(dtor))\n+          });\n+}\n+\n+/*\n+ Section: Operations\n+ */\n+\n+fn get<copy T>(t: t<T>, ofs: uint) -> T {\n+    assert ofs < (*t).size;\n+    ret unsafe { *ptr::offset((*t).base, ofs) };\n+}\n+\n+fn set<copy T>(t: t<T>, ofs: uint, v: T) {\n+    assert ofs < (*t).size;\n+    unsafe { *(ptr::offset((*t).base, ofs) as *mutable T) = v };\n+}\n+\n+/*\n+ Section: Elimination forms\n+ */\n+\n+fn size<T>(t: t<T>) -> uint {\n+    ret (*t).size;\n+}\n+\n+unsafe fn ptr<T>(t: t<T>) -> *T {\n+    ret (*t).base;\n+}"}, {"sha": "555828f79c3fdc321d6c6cdcb8480af5b7dabfcc", "filename": "src/lib/std.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2eb084b4c273682b06fcaf285399ec9bf6fd0cb/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c2eb084b4c273682b06fcaf285399ec9bf6fd0cb/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=c2eb084b4c273682b06fcaf285399ec9bf6fd0cb", "patch": "@@ -10,7 +10,7 @@\n export box, char, float, int, str, ptr;\n export uint, u8, u32, u64, vec, bool;\n export comm, fs, io, net, run, sys, task;\n-export ctypes, either, option, result, four, tri, util;\n+export c_vec, ctypes, either, option, result, four, tri, util;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap, ufind;\n export rope;\n export math, math_f32, math_f64;\n@@ -50,6 +50,7 @@ mod task;\n \n // Utility modules\n \n+mod c_vec;\n mod ctypes;\n mod cmath; /* unexported */\n mod either;"}]}