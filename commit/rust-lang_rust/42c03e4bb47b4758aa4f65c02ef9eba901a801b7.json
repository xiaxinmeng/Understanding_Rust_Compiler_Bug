{"sha": "42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYzAzZTRiYjQ3YjQ3NThhYTRmNjVjMDJlZjllYmE5MDFhODAxYjc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-29T09:24:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:34:34Z"}, "message": "Use Arena inside hir::Mod.", "tree": {"sha": "cb25b42def2ddc54f2ff27839d2d9ac219da2fbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb25b42def2ddc54f2ff27839d2d9ac219da2fbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "html_url": "https://github.com/rust-lang/rust/commit/42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2526120f23db1a4314634eafa0b27a203aae9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2526120f23db1a4314634eafa0b27a203aae9a4", "html_url": "https://github.com/rust-lang/rust/commit/e2526120f23db1a4314634eafa0b27a203aae9a4"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "cae813582cd2d0a2cc24861c113071376c7588a0", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -247,7 +247,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_ident(&mut self, ident: Ident) {\n         walk_ident(self, ident)\n     }\n-    fn visit_mod(&mut self, m: &'v Mod, _s: Span, n: HirId) {\n+    fn visit_mod(&mut self, m: &'v Mod<'v>, _s: Span, n: HirId) {\n         walk_mod(self, m, n)\n     }\n     fn visit_foreign_item(&mut self, i: &'v ForeignItem<'v>) {\n@@ -394,9 +394,9 @@ pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroD\n     walk_list!(visitor, visit_attribute, macro_def.attrs);\n }\n \n-pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod, mod_hir_id: HirId) {\n+pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod<'v>, mod_hir_id: HirId) {\n     visitor.visit_id(mod_hir_id);\n-    for &item_id in &module.item_ids {\n+    for &item_id in module.item_ids {\n         visitor.visit_nested_item(item_id);\n     }\n }"}, {"sha": "c49242485e156859879c205985ed8fde005c1f63", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -161,10 +161,10 @@ impl LoweringContext<'_, 'hir> {\n         res\n     }\n \n-    pub(super) fn lower_mod(&mut self, m: &Mod) -> hir::Mod {\n+    pub(super) fn lower_mod(&mut self, m: &Mod) -> hir::Mod<'hir> {\n         hir::Mod {\n             inner: m.inner,\n-            item_ids: m.items.iter().flat_map(|x| self.lower_item_id(x)).collect(),\n+            item_ids: self.arena.alloc_from_iter(m.items.iter().flat_map(|x| self.lower_item_id(x))),\n         }\n     }\n "}, {"sha": "cd96bedf4bdbfd28c27bce4221e257900d13bf97", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -580,7 +580,7 @@ impl<'hir> Map<'hir> {\n         &self.forest.krate.attrs\n     }\n \n-    pub fn get_module(&self, module: DefId) -> (&'hir Mod, Span, HirId) {\n+    pub fn get_module(&self, module: DefId) -> (&'hir Mod<'hir>, Span, HirId) {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n         self.read(hir_id);\n         match self.find_entry(hir_id).unwrap().node {"}, {"sha": "c89d93337ebc9ffdaabb7e8547aee23ccbd6b418", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -743,7 +743,7 @@ pub struct ModuleItems {\n /// [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate<'hir> {\n-    pub module: Mod,\n+    pub module: Mod<'hir>,\n     pub attrs: &'hir [Attribute],\n     pub span: Span,\n     pub exported_macros: &'hir [MacroDef<'hir>],\n@@ -2243,12 +2243,12 @@ impl FunctionRetTy {\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug)]\n-pub struct Mod {\n+pub struct Mod<'hir> {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n     /// to the last token in the external file.\n     pub inner: Span,\n-    pub item_ids: HirVec<ItemId>,\n+    pub item_ids: &'hir [ItemId],\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n@@ -2489,7 +2489,7 @@ pub enum ItemKind<'hir> {\n     /// A function declaration.\n     Fn(FnSig, Generics, BodyId),\n     /// A module.\n-    Mod(Mod),\n+    Mod(Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`.\n     ForeignMod(ForeignMod<'hir>),\n     /// Module-level inline assembly (from `global_asm!`)."}, {"sha": "f0499e5853f30b156c0baca5000d21653570808d", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -259,9 +259,9 @@ impl<'a> State<'a> {\n         self.commasep_cmnt(b, exprs, |s, e| s.print_expr(&e), |e| e.span)\n     }\n \n-    pub fn print_mod(&mut self, _mod: &hir::Mod, attrs: &[ast::Attribute]) {\n+    pub fn print_mod(&mut self, _mod: &hir::Mod<'_>, attrs: &[ast::Attribute]) {\n         self.print_inner_attributes(attrs);\n-        for &item_id in &_mod.item_ids {\n+        for &item_id in _mod.item_ids {\n             self.ann.nested(self, Nested::Item(item_id));\n         }\n     }"}, {"sha": "45274b0526fe34a15b10d68d7576deab3c64be50", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -218,7 +218,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::VisibilityKind {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod {\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Mod {\n             inner: ref inner_span,"}, {"sha": "5ac20f46238f586736eb5d536a9feea7de9224ce", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -883,7 +883,7 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> LateContextAndPass<'a, 'tcx, T> {\n         self.context.param_env = old_param_env;\n     }\n \n-    fn process_mod(&mut self, m: &'tcx hir::Mod, s: Span, n: hir::HirId) {\n+    fn process_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n         lint_callback!(self, check_mod, m, s, n);\n         hir_visit::walk_mod(self, m, n);\n         lint_callback!(self, check_mod_post, m, s, n);\n@@ -1027,7 +1027,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n         lint_callback!(self, check_name, sp, name);\n     }\n \n-    fn visit_mod(&mut self, m: &'tcx hir::Mod, s: Span, n: hir::HirId) {\n+    fn visit_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {\n         if !self.context.only_module {\n             self.process_mod(m, s, n);\n         }"}, {"sha": "a5d6cf9dbb72eb23cc754cf1f3fb3e5eb1d688c3", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -92,8 +92,8 @@ macro_rules! late_lint_methods {\n             fn check_name(a: Span, b: ast::Name);\n             fn check_crate(a: &$hir hir::Crate<$hir>);\n             fn check_crate_post(a: &$hir hir::Crate<$hir>);\n-            fn check_mod(a: &$hir hir::Mod, b: Span, c: hir::HirId);\n-            fn check_mod_post(a: &$hir hir::Mod, b: Span, c: hir::HirId);\n+            fn check_mod(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n+            fn check_mod_post(a: &$hir hir::Mod<$hir>, b: Span, c: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem<$hir>);\n             fn check_foreign_item_post(a: &$hir hir::ForeignItem<$hir>);\n             fn check_item(a: &$hir hir::Item<$hir>);"}, {"sha": "9b9203083ee76d6f10b972df118d9b47182fd28a", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -246,7 +246,7 @@ impl NonSnakeCase {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n-    fn check_mod(&mut self, cx: &LateContext<'_, '_>, _: &'tcx hir::Mod, _: Span, id: hir::HirId) {\n+    fn check_mod(&mut self, cx: &LateContext<'_, '_>, _: &'tcx hir::Mod<'tcx>, _: Span, id: hir::HirId) {\n         if id != hir::CRATE_HIR_ID {\n             return;\n         }"}, {"sha": "cfe5ea65fca5bae088c377e35a10864baf29bd11", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -682,7 +682,7 @@ impl EncodeContext<'tcx> {\n     fn encode_info_for_mod(\n         &mut self,\n         id: hir::HirId,\n-        md: &hir::Mod,\n+        md: &hir::Mod<'_>,\n         attrs: &[ast::Attribute],\n         vis: &hir::Visibility,\n     ) {"}, {"sha": "776c1aff111814148b7297713cde4cd5dd838ab2", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -128,7 +128,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_item(self, i)\n     }\n \n-    fn visit_mod(&mut self, m: &'v hir::Mod, _s: Span, n: hir::HirId) {\n+    fn visit_mod(&mut self, m: &'v hir::Mod<'v>, _s: Span, n: hir::HirId) {\n         self.record(\"Mod\", Id::None, m);\n         hir_visit::walk_mod(self, m, n)\n     }"}, {"sha": "83f2fe7e023179dd8fe39567884db4cb54eb5753", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -510,7 +510,7 @@ impl EmbargoVisitor<'tcx> {\n     fn update_macro_reachable_mod(&mut self, reachable_mod: hir::HirId, defining_mod: DefId) {\n         let module_def_id = self.tcx.hir().local_def_id(reachable_mod);\n         let module = self.tcx.hir().get_module(module_def_id).0;\n-        for item_id in &module.item_ids {\n+        for item_id in module.item_ids {\n             let hir_id = item_id.id;\n             let item_def_id = self.tcx.hir().local_def_id(hir_id);\n             if let Some(def_kind) = self.tcx.def_kind(item_def_id) {\n@@ -849,7 +849,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         self.prev_level = orig_level;\n     }\n \n-    fn visit_mod(&mut self, m: &'tcx hir::Mod, _sp: Span, id: hir::HirId) {\n+    fn visit_mod(&mut self, m: &'tcx hir::Mod<'tcx>, _sp: Span, id: hir::HirId) {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n@@ -992,7 +992,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n-    fn visit_mod(&mut self, _m: &'tcx hir::Mod, _s: Span, _n: hir::HirId) {\n+    fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {\n         // Don't visit nested modules, since we run a separate visitor walk\n         // for each module in `privacy_access_levels`\n     }\n@@ -1132,7 +1132,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n-    fn visit_mod(&mut self, _m: &'tcx hir::Mod, _s: Span, _n: hir::HirId) {\n+    fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {\n         // Don't visit nested modules, since we run a separate visitor walk\n         // for each module in `privacy_access_levels`\n     }"}, {"sha": "e2b77c01e24d00443f68d62f13e721e52f8b0673", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -1093,7 +1093,7 @@ impl UsePlacementFinder<'tcx> {\n impl hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n     fn visit_mod(\n         &mut self,\n-        module: &'tcx hir::Mod,\n+        module: &'tcx hir::Mod<'tcx>,\n         _: Span,\n         hir_id: hir::HirId,\n     ) {\n@@ -1105,7 +1105,7 @@ impl hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n             return;\n         }\n         // Find a `use` statement.\n-        for item_id in &module.item_ids {\n+        for item_id in module.item_ids {\n             let item = self.tcx.hir().expect_item(item_id.id);\n             match item.kind {\n                 hir::ItemKind::Use(..) => {"}, {"sha": "897c00f276e9fdb705059372ca4b5ce7bfe4b435", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c03e4bb47b4758aa4f65c02ef9eba901a801b7/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=42c03e4bb47b4758aa4f65c02ef9eba901a801b7", "patch": "@@ -215,7 +215,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_mod_contents(&mut self, span: Span, attrs: &'tcx [ast::Attribute],\n                               vis: &'tcx hir::Visibility, id: hir::HirId,\n-                              m: &'tcx hir::Mod,\n+                              m: &'tcx hir::Mod<'tcx>,\n                               name: Option<ast::Name>) -> Module<'tcx> {\n         let mut om = Module::new(name, attrs, vis);\n         om.where_outer = span;\n@@ -224,7 +224,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n         self.inside_public_path &= vis.node.is_pub();\n-        for i in &m.item_ids {\n+        for i in m.item_ids {\n             let item = self.cx.tcx.hir().expect_item(i.id);\n             self.visit_item(item, None, &mut om);\n         }\n@@ -322,7 +322,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let ret = match tcx.hir().get(res_hir_id) {\n             Node::Item(&hir::Item { kind: hir::ItemKind::Mod(ref m), .. }) if glob => {\n                 let prev = mem::replace(&mut self.inlining, true);\n-                for i in &m.item_ids {\n+                for i in m.item_ids {\n                     let i = self.cx.tcx.hir().expect_item(i.id);\n                     self.visit_item(i, None, om);\n                 }"}]}