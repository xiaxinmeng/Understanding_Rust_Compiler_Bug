{"sha": "035d854947d5899388f77f6d00fc488caad86b5c", "node_id": "C_kwDOAAsO6NoAKDAzNWQ4NTQ5NDdkNTg5OTM4OGY3N2Y2ZDAwZmM0ODhjYWFkODZiNWM", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-01T17:48:14Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-01T17:48:57Z"}, "message": "reduce spans for `unsafe impl` errors", "tree": {"sha": "ce62fc0e60134b5e6a45712f90d3a2726f214096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce62fc0e60134b5e6a45712f90d3a2726f214096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/035d854947d5899388f77f6d00fc488caad86b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/035d854947d5899388f77f6d00fc488caad86b5c", "html_url": "https://github.com/rust-lang/rust/commit/035d854947d5899388f77f6d00fc488caad86b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/035d854947d5899388f77f6d00fc488caad86b5c/comments", "author": null, "committer": null, "parents": [{"sha": "bb6e76df06dcbdb96e634eb28a49f161d70ab844", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e76df06dcbdb96e634eb28a49f161d70ab844", "html_url": "https://github.com/rust-lang/rust/commit/bb6e76df06dcbdb96e634eb28a49f161d70ab844"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "70cc15b2f8c543268f926a32ff79ea330acce294", "filename": "compiler/rustc_hir_analysis/src/coherence/unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/035d854947d5899388f77f6d00fc488caad86b5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/035d854947d5899388f77f6d00fc488caad86b5c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs?ref=035d854947d5899388f77f6d00fc488caad86b5c", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             (Unsafety::Normal, None, Unsafety::Unsafe, hir::ImplPolarity::Positive) => {\n                 struct_span_err!(\n                     tcx.sess,\n-                    item.span,\n+                    tcx.def_span(def_id),\n                     E0199,\n                     \"implementing the trait `{}` is not unsafe\",\n                     trait_ref.print_only_trait_path()\n@@ -38,7 +38,7 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             (Unsafety::Unsafe, _, Unsafety::Normal, hir::ImplPolarity::Positive) => {\n                 struct_span_err!(\n                     tcx.sess,\n-                    item.span,\n+                    tcx.def_span(def_id),\n                     E0200,\n                     \"the trait `{}` requires an `unsafe impl` declaration\",\n                     trait_ref.print_only_trait_path()\n@@ -61,7 +61,7 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             (Unsafety::Normal, Some(attr_name), Unsafety::Normal, hir::ImplPolarity::Positive) => {\n                 struct_span_err!(\n                     tcx.sess,\n-                    item.span,\n+                    tcx.def_span(def_id),\n                     E0569,\n                     \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n                     attr_name"}, {"sha": "7be5b92a7def0fa8e25d6b3fdf4124da77a8b9b7", "filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr?ref=035d854947d5899388f77f6d00fc488caad86b5c", "patch": "@@ -2,7 +2,7 @@ error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n   --> $DIR/coherence-default-trait-impl.rs:8:1\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: remove `unsafe` from this trait implementation\n    |\n@@ -14,7 +14,7 @@ error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n   --> $DIR/coherence-default-trait-impl.rs:13:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the trait `MyUnsafeTrait` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n help: add `unsafe` to this trait implementation"}, {"sha": "5cec2bcb0387210361ea9a9901b0ee1f44c8cdca", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=035d854947d5899388f77f6d00fc488caad86b5c", "patch": "@@ -1,13 +1,8 @@\n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:21:1\n    |\n-LL | / impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n-LL | |\n-LL | |\n-LL | |     // (unsafe to access self.1  due to #[may_dangle] on A)\n-LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n-LL | | }\n-   | |_^\n+LL | impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the trait `Drop` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n help: add `unsafe` to this trait implementation\n@@ -18,13 +13,8 @@ LL | unsafe impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:27:1\n    |\n-LL | / impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n-LL | |\n-LL | |\n-LL | |     // (unsafe to access self.1 due to #[may_dangle] on 'a)\n-LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n-LL | | }\n-   | |_^\n+LL | impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the trait `Drop` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n help: add `unsafe` to this trait implementation"}, {"sha": "68c308b15cc0868940017c27ffc69e380441deb8", "filename": "src/test/ui/error-codes/E0199.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr?ref=035d854947d5899388f77f6d00fc488caad86b5c", "patch": "@@ -2,7 +2,7 @@ error[E0199]: implementing the trait `Bar` is not unsafe\n   --> $DIR/E0199.rs:6:1\n    |\n LL | unsafe impl Bar for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: remove `unsafe` from this trait implementation\n    |"}, {"sha": "c70a2d4f3d1f132ec1671bc51928152adcf44660", "filename": "src/test/ui/error-codes/E0200.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr?ref=035d854947d5899388f77f6d00fc488caad86b5c", "patch": "@@ -2,7 +2,7 @@ error[E0200]: the trait `Bar` requires an `unsafe impl` declaration\n   --> $DIR/E0200.rs:5:1\n    |\n LL | impl Bar for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^\n    |\n    = note: the trait `Bar` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n help: add `unsafe` to this trait implementation"}, {"sha": "0ca565787f6b6a5fb8a777c0e852b8ef4fe04ba9", "filename": "src/test/ui/traits/safety-trait-impl-cc.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr?ref=035d854947d5899388f77f6d00fc488caad86b5c", "patch": "@@ -1,12 +1,8 @@\n error[E0200]: the trait `Foo` requires an `unsafe impl` declaration\n   --> $DIR/safety-trait-impl-cc.rs:9:1\n    |\n-LL | / impl lib::Foo for Bar {\n-LL | |     fn foo(&self) -> isize {\n-LL | |         panic!();\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl lib::Foo for Bar {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the trait `Foo` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n help: add `unsafe` to this trait implementation"}, {"sha": "e78e0e3a6baa48a9f1449763ad50952368913365", "filename": "src/test/ui/traits/safety-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/035d854947d5899388f77f6d00fc488caad86b5c/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr?ref=035d854947d5899388f77f6d00fc488caad86b5c", "patch": "@@ -2,7 +2,7 @@ error[E0200]: the trait `UnsafeTrait` requires an `unsafe impl` declaration\n   --> $DIR/safety-trait-impl.rs:14:1\n    |\n LL | impl UnsafeTrait for u16 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the trait `UnsafeTrait` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n help: add `unsafe` to this trait implementation\n@@ -14,7 +14,7 @@ error[E0199]: implementing the trait `SafeTrait` is not unsafe\n   --> $DIR/safety-trait-impl.rs:16:1\n    |\n LL | unsafe impl SafeTrait for u32 { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: remove `unsafe` from this trait implementation\n    |"}]}