{"sha": "f395f2ea120cad774a2d7396e0e2ab5667be3116", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTVmMmVhMTIwY2FkNzc0YTJkNzM5NmUwZTJhYjU2NjdiZTMxMTY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-31T17:21:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:36:12Z"}, "message": "Use less HirId when referring to items.", "tree": {"sha": "1cfed4b9a658cb9353faeb55359349bc1d10f8d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cfed4b9a658cb9353faeb55359349bc1d10f8d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f395f2ea120cad774a2d7396e0e2ab5667be3116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f395f2ea120cad774a2d7396e0e2ab5667be3116", "html_url": "https://github.com/rust-lang/rust/commit/f395f2ea120cad774a2d7396e0e2ab5667be3116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f395f2ea120cad774a2d7396e0e2ab5667be3116/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e74270819a7615a577c90f7616b422bc07eb21", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e74270819a7615a577c90f7616b422bc07eb21", "html_url": "https://github.com/rust-lang/rust/commit/c4e74270819a7615a577c90f7616b422bc07eb21"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "8a83149d732355ec9efbee689462ed1ea1bb1047", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f395f2ea120cad774a2d7396e0e2ab5667be3116/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f395f2ea120cad774a2d7396e0e2ab5667be3116/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=f395f2ea120cad774a2d7396e0e2ab5667be3116", "patch": "@@ -17,7 +17,7 @@ use rustc_ast::{self as ast, Attribute, NestedMetaItem};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Node as HirNode;\n@@ -179,7 +179,7 @@ pub struct DirtyCleanVisitor<'tcx> {\n \n impl DirtyCleanVisitor<'tcx> {\n     /// Possibly \"deserialize\" the attribute into a clean/dirty assertion\n-    fn assertion_maybe(&mut self, item_id: hir::HirId, attr: &Attribute) -> Option<Assertion> {\n+    fn assertion_maybe(&mut self, item_id: LocalDefId, attr: &Attribute) -> Option<Assertion> {\n         let is_clean = if self.tcx.sess.check_name(attr, sym::rustc_dirty) {\n             false\n         } else if self.tcx.sess.check_name(attr, sym::rustc_clean) {\n@@ -207,7 +207,7 @@ impl DirtyCleanVisitor<'tcx> {\n     /// Gets the \"auto\" assertion on pre-validated attr, along with the `except` labels.\n     fn assertion_auto(\n         &mut self,\n-        item_id: hir::HirId,\n+        item_id: LocalDefId,\n         attr: &Attribute,\n         is_clean: bool,\n     ) -> Assertion {\n@@ -253,8 +253,9 @@ impl DirtyCleanVisitor<'tcx> {\n \n     /// Return all DepNode labels that should be asserted for this item.\n     /// index=0 is the \"name\" used for error messages\n-    fn auto_labels(&mut self, item_id: hir::HirId, attr: &Attribute) -> (&'static str, Labels) {\n-        let node = self.tcx.hir().get(item_id);\n+    fn auto_labels(&mut self, item_id: LocalDefId, attr: &Attribute) -> (&'static str, Labels) {\n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(item_id);\n+        let node = self.tcx.hir().get(hir_id);\n         let (name, labels) = match node {\n             HirNode::Item(item) => {\n                 match item.kind {\n@@ -430,18 +431,17 @@ impl DirtyCleanVisitor<'tcx> {\n         }\n     }\n \n-    fn check_item(&mut self, item_id: hir::HirId, item_span: Span) {\n-        let def_id = self.tcx.hir().local_def_id(item_id);\n-        for attr in self.tcx.get_attrs(def_id.to_def_id()).iter() {\n+    fn check_item(&mut self, item_id: LocalDefId, item_span: Span) {\n+        for attr in self.tcx.get_attrs(item_id.to_def_id()).iter() {\n             let assertion = match self.assertion_maybe(item_id, attr) {\n                 Some(a) => a,\n                 None => continue,\n             };\n             self.checked_attrs.insert(attr.id);\n-            for dep_node in self.dep_nodes(&assertion.clean, def_id.to_def_id()) {\n+            for dep_node in self.dep_nodes(&assertion.clean, item_id.to_def_id()) {\n                 self.assert_clean(item_span, dep_node);\n             }\n-            for dep_node in self.dep_nodes(&assertion.dirty, def_id.to_def_id()) {\n+            for dep_node in self.dep_nodes(&assertion.dirty, item_id.to_def_id()) {\n                 self.assert_dirty(item_span, dep_node);\n             }\n         }\n@@ -450,19 +450,19 @@ impl DirtyCleanVisitor<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        self.check_item(item.hir_id(), item.span);\n+        self.check_item(item.def_id, item.span);\n     }\n \n     fn visit_trait_item(&mut self, item: &hir::TraitItem<'_>) {\n-        self.check_item(item.hir_id(), item.span);\n+        self.check_item(item.def_id, item.span);\n     }\n \n     fn visit_impl_item(&mut self, item: &hir::ImplItem<'_>) {\n-        self.check_item(item.hir_id(), item.span);\n+        self.check_item(item.def_id, item.span);\n     }\n \n     fn visit_foreign_item(&mut self, item: &hir::ForeignItem<'_>) {\n-        self.check_item(item.hir_id(), item.span);\n+        self.check_item(item.def_id, item.span);\n     }\n }\n "}, {"sha": "3ec7ea39248bfc57b33955d9afb16fcc76299115", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f395f2ea120cad774a2d7396e0e2ab5667be3116/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f395f2ea120cad774a2d7396e0e2ab5667be3116/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=f395f2ea120cad774a2d7396e0e2ab5667be3116", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n-use rustc_span::def_id::{DefId, LOCAL_CRATE};\n+use rustc_span::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n struct DiagnosticItemCollector<'tcx> {\n@@ -27,19 +27,19 @@ struct DiagnosticItemCollector<'tcx> {\n \n impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        self.observe_item(&item.attrs, item.hir_id());\n+        self.observe_item(&item.attrs, item.def_id);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        self.observe_item(&trait_item.attrs, trait_item.hir_id());\n+        self.observe_item(&trait_item.attrs, trait_item.def_id);\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n-        self.observe_item(&impl_item.attrs, impl_item.hir_id());\n+        self.observe_item(&impl_item.attrs, impl_item.def_id);\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n-        self.observe_item(foreign_item.attrs, foreign_item.hir_id());\n+        self.observe_item(foreign_item.attrs, foreign_item.def_id);\n     }\n }\n \n@@ -48,9 +48,8 @@ impl<'tcx> DiagnosticItemCollector<'tcx> {\n         DiagnosticItemCollector { tcx, items: Default::default() }\n     }\n \n-    fn observe_item(&mut self, attrs: &[ast::Attribute], hir_id: hir::HirId) {\n+    fn observe_item(&mut self, attrs: &[ast::Attribute], def_id: LocalDefId) {\n         if let Some(name) = extract(&self.tcx.sess, attrs) {\n-            let def_id = self.tcx.hir().local_def_id(hir_id);\n             // insert into our table\n             collect_item(self.tcx, &mut self.items, name, def_id.to_def_id());\n         }\n@@ -106,7 +105,7 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n     for m in tcx.hir().krate().exported_macros {\n-        collector.observe_item(m.attrs, m.hir_id());\n+        collector.observe_item(m.attrs, m.def_id);\n     }\n \n     collector.items"}, {"sha": "bfe9c4d6de3de853e913c5db8895fbe9cc693675", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f395f2ea120cad774a2d7396e0e2ab5667be3116/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f395f2ea120cad774a2d7396e0e2ab5667be3116/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=f395f2ea120cad774a2d7396e0e2ab5667be3116", "patch": "@@ -5,6 +5,7 @@\n //! paths etc in all kinds of annoying scenarios.\n \n use rustc_hir as hir;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{subst::InternalSubsts, Instance, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n@@ -31,9 +32,8 @@ struct SymbolNamesTest<'tcx> {\n }\n \n impl SymbolNamesTest<'tcx> {\n-    fn process_attrs(&mut self, hir_id: hir::HirId) {\n+    fn process_attrs(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx;\n-        let def_id = tcx.hir().local_def_id(hir_id);\n         for attr in tcx.get_attrs(def_id.to_def_id()).iter() {\n             if tcx.sess.check_name(attr, SYMBOL_NAME) {\n                 let def_id = def_id.to_def_id();\n@@ -61,18 +61,18 @@ impl SymbolNamesTest<'tcx> {\n \n impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        self.process_attrs(item.hir_id());\n+        self.process_attrs(item.def_id);\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        self.process_attrs(trait_item.hir_id());\n+        self.process_attrs(trait_item.def_id);\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        self.process_attrs(impl_item.hir_id());\n+        self.process_attrs(impl_item.def_id);\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'tcx hir::ForeignItem<'tcx>) {\n-        self.process_attrs(foreign_item.hir_id());\n+        self.process_attrs(foreign_item.def_id);\n     }\n }"}]}