{"sha": "5391f9c63c3c59b08a71b2657e8773f3c1d43145", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTFmOWM2M2MzYzU5YjA4YTcxYjI2NTdlODc3M2YzYzFkNDMxNDU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-05T12:02:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-05T17:04:50Z"}, "message": "Support goto-definition for include macro paths", "tree": {"sha": "ea15ccf428fa7c03f76fc6db00337b00fd2484cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea15ccf428fa7c03f76fc6db00337b00fd2484cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5391f9c63c3c59b08a71b2657e8773f3c1d43145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5391f9c63c3c59b08a71b2657e8773f3c1d43145", "html_url": "https://github.com/rust-lang/rust/commit/5391f9c63c3c59b08a71b2657e8773f3c1d43145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5391f9c63c3c59b08a71b2657e8773f3c1d43145/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98395f29a417b37a5969594f0cac5ae23585da85", "url": "https://api.github.com/repos/rust-lang/rust/commits/98395f29a417b37a5969594f0cac5ae23585da85", "html_url": "https://github.com/rust-lang/rust/commit/98395f29a417b37a5969594f0cac5ae23585da85"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "b0bfd646e08ad9e88bfa46e0c54fc8ca18357eb8", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5391f9c63c3c59b08a71b2657e8773f3c1d43145/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5391f9c63c3c59b08a71b2657e8773f3c1d43145/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=5391f9c63c3c59b08a71b2657e8773f3c1d43145", "patch": "@@ -1,10 +1,15 @@\n+use std::convert::TryInto;\n+\n use either::Either;\n use hir::{InFile, Semantics};\n use ide_db::{\n+    base_db::{AnchoredPath, FileId, FileLoader},\n     defs::{NameClass, NameRefClass},\n     RootDatabase,\n };\n-use syntax::{ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n+use syntax::{\n+    ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextRange, TokenAtOffset, T,\n+};\n \n use crate::{\n     display::TryToNav,\n@@ -32,7 +37,7 @@ pub(crate) fn goto_definition(\n     let original_token = pick_best(file.token_at_offset(position.offset))?;\n     let token = sema.descend_into_macros(original_token.clone());\n     let parent = token.parent()?;\n-    if let Some(_) = ast::Comment::cast(token) {\n+    if let Some(_) = ast::Comment::cast(token.clone()) {\n         let (attributes, def) = doc_attributes(&sema, &parent)?;\n \n         let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n@@ -45,7 +50,6 @@ pub(crate) fn goto_definition(\n         let nav = resolve_doc_path_for_def(db, def, &link, ns)?.try_to_nav(db)?;\n         return Some(RangeInfo::new(original_token.text_range(), vec![nav]));\n     }\n-\n     let nav = match_ast! {\n         match parent {\n             ast::NameRef(name_ref) => {\n@@ -61,13 +65,40 @@ pub(crate) fn goto_definition(\n             } else {\n                 reference_definition(&sema, Either::Left(&lt))\n             },\n+            ast::TokenTree(tt) => try_lookup_include_path(sema.db, tt, token, position.file_id),\n             _ => return None,\n         }\n     };\n \n     Some(RangeInfo::new(original_token.text_range(), nav.into_iter().collect()))\n }\n \n+fn try_lookup_include_path(\n+    db: &RootDatabase,\n+    tt: ast::TokenTree,\n+    token: SyntaxToken,\n+    file_id: FileId,\n+) -> Option<NavigationTarget> {\n+    let path = ast::String::cast(token)?.value()?.into_owned();\n+    let macro_call = tt.syntax().parent().and_then(ast::MacroCall::cast)?;\n+    let name = macro_call.path()?.segment()?.name_ref()?;\n+    if !matches!(&*name.text(), \"include\" | \"include_str\" | \"include_bytes\") {\n+        return None;\n+    }\n+    let file_id = db.resolve_path(AnchoredPath { anchor: file_id, path: &path })?;\n+    let size = db.file_text(file_id).len().try_into().ok()?;\n+    Some(NavigationTarget {\n+        file_id,\n+        full_range: TextRange::new(0.into(), size),\n+        name: path.into(),\n+        focus_range: None,\n+        kind: None,\n+        container_name: None,\n+        description: None,\n+        docs: None,\n+    })\n+}\n+\n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {\n@@ -1213,6 +1244,21 @@ fn f(e: Enum) {\n         Enum::Variant2 => {}\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_include() {\n+        check(\n+            r#\"\n+//- /main.rs\n+fn main() {\n+    let str = include_str!(\"foo.txt$0\");\n+}\n+//- /foo.txt\n+// empty\n+//^ file\n \"#,\n         );\n     }"}]}