{"sha": "9c7a2aef30cb35347af646dea5a5611af1224676", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljN2EyYWVmMzBjYjM1MzQ3YWY2NDZkZWE1YTU2MTFhZjEyMjQ2NzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T07:26:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T07:26:31Z"}, "message": "Refactor Module::from_source to properly descend from root file", "tree": {"sha": "6134c1475e717ef72cc7b5542485f7bfbd11eb14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6134c1475e717ef72cc7b5542485f7bfbd11eb14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c7a2aef30cb35347af646dea5a5611af1224676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7a2aef30cb35347af646dea5a5611af1224676", "html_url": "https://github.com/rust-lang/rust/commit/9c7a2aef30cb35347af646dea5a5611af1224676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c7a2aef30cb35347af646dea5a5611af1224676/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbb022d3999b3038549ec6c309efb065231c896a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb022d3999b3038549ec6c309efb065231c896a", "html_url": "https://github.com/rust-lang/rust/commit/bbb022d3999b3038549ec6c309efb065231c896a"}], "stats": {"total": 77, "additions": 44, "deletions": 33}, "files": [{"sha": "dd43271f4caff443c0337713b9424d4bc501ef51", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7a2aef30cb35347af646dea5a5611af1224676/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7a2aef30cb35347af646dea5a5611af1224676/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=9c7a2aef30cb35347af646dea5a5611af1224676", "patch": "@@ -157,7 +157,7 @@ impl Module {\n     }\n \n     /// Finds a child module with the specified name.\n-    pub fn child(self, db: &impl HirDatabase, name: &Name) -> Option<Module> {\n+    pub fn child(self, db: &impl DefDatabase, name: &Name) -> Option<Module> {\n         let def_map = db.crate_def_map(self.id.krate);\n         let child_id = def_map[self.id.module_id].children.get(name)?;\n         Some(self.with_module_id(*child_id))"}, {"sha": "7e5523c54a3bd73a8d0b6ccef385a52bd4094124", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9c7a2aef30cb35347af646dea5a5611af1224676/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7a2aef30cb35347af646dea5a5611af1224676/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=9c7a2aef30cb35347af646dea5a5611af1224676", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::{StructId, StructOrUnionId, UnionId};\n+use hir_def::{ModuleId, StructId, StructOrUnionId, UnionId};\n use hir_expand::name::AsName;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n@@ -10,9 +10,9 @@ use ra_syntax::{\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::{AstItemDef, LocationCtx},\n-    AstId, Const, Crate, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource,\n-    ImplBlock, Local, Module, ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias,\n-    Union, VariantDef,\n+    Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource, ImplBlock,\n+    Local, Module, ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    VariantDef,\n };\n \n pub trait FromSource: Sized {\n@@ -152,44 +152,48 @@ impl Local {\n }\n \n impl Module {\n-    pub fn from_declaration(db: &impl HirDatabase, src: Source<ast::Module>) -> Option<Self> {\n-        let src_parent = Source {\n-            file_id: src.file_id,\n-            ast: ModuleSource::new(db, Some(src.file_id.original_file(db)), None),\n-        };\n-        let parent_module = Module::from_definition(db, src_parent)?;\n+    pub fn from_declaration(db: &impl DefDatabase, src: Source<ast::Module>) -> Option<Self> {\n+        let parent_declaration = src.ast.syntax().ancestors().skip(1).find_map(ast::Module::cast);\n+\n+        let parent_module = match parent_declaration {\n+            Some(parent_declaration) => {\n+                let src_parent = Source { file_id: src.file_id, ast: parent_declaration };\n+                Module::from_declaration(db, src_parent)\n+            }\n+            _ => {\n+                let src_parent = Source {\n+                    file_id: src.file_id,\n+                    ast: ModuleSource::new(db, Some(src.file_id.original_file(db)), None),\n+                };\n+                Module::from_definition(db, src_parent)\n+            }\n+        }?;\n+\n         let child_name = src.ast.name()?;\n         parent_module.child(db, &child_name.as_name())\n     }\n \n-    pub fn from_definition(\n-        db: &(impl DefDatabase + AstDatabase),\n-        src: Source<ModuleSource>,\n-    ) -> Option<Self> {\n-        let decl_id = match src.ast {\n+    pub fn from_definition(db: &impl DefDatabase, src: Source<ModuleSource>) -> Option<Self> {\n+        match src.ast {\n             ModuleSource::Module(ref module) => {\n                 assert!(!module.has_semi());\n-                let ast_id_map = db.ast_id_map(src.file_id);\n-                let item_id = AstId::new(src.file_id, ast_id_map.ast_id(module));\n-                Some(item_id)\n+                return Module::from_declaration(\n+                    db,\n+                    Source { file_id: src.file_id, ast: module.clone() },\n+                );\n             }\n-            ModuleSource::SourceFile(_) => None,\n+            ModuleSource::SourceFile(_) => (),\n         };\n \n-        db.relevant_crates(src.file_id.original_file(db)).iter().find_map(|&crate_id| {\n-            let def_map = db.crate_def_map(crate_id);\n-\n-            let (module_id, _module_data) =\n-                def_map.modules.iter().find(|(_module_id, module_data)| {\n-                    if decl_id.is_some() {\n-                        module_data.declaration == decl_id\n-                    } else {\n-                        module_data.definition.map(|it| it.into()) == Some(src.file_id)\n-                    }\n-                })?;\n+        let original_file = src.file_id.original_file(db);\n \n-            Some(Module::new(Crate { crate_id }, module_id))\n-        })\n+        let (krate, module_id) =\n+            db.relevant_crates(original_file).iter().find_map(|&crate_id| {\n+                let crate_def_map = db.crate_def_map(crate_id);\n+                let local_module_id = crate_def_map.modules_for_file(original_file).next()?;\n+                Some((crate_id, local_module_id))\n+            })?;\n+        Some(Module { id: ModuleId { krate, module_id } })\n     }\n }\n "}, {"sha": "1331fbe30717a06a195ebbc21e4a123fef7dabd0", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c7a2aef30cb35347af646dea5a5611af1224676/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7a2aef30cb35347af646dea5a5611af1224676/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=9c7a2aef30cb35347af646dea5a5611af1224676", "patch": "@@ -258,6 +258,13 @@ impl CrateDefMap {\n         let res = self.resolve_path_fp_with_macro(db, ResolveMode::Other, original_module, path);\n         (res.resolved_def, res.segment_index)\n     }\n+\n+    pub fn modules_for_file(&self, file_id: FileId) -> impl Iterator<Item = CrateModuleId> + '_ {\n+        self.modules\n+            .iter()\n+            .filter(move |(_id, data)| data.definition == Some(file_id))\n+            .map(|(id, _data)| id)\n+    }\n }\n \n mod diagnostics {"}]}