{"sha": "3c22c64725a4a2ea13a30422a4f822fb1259e7b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMjJjNjQ3MjVhNGEyZWExM2EzMDQyMmE0ZjgyMmZiMTI1OWU3YjU=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-21T16:26:27Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-21T16:26:27Z"}, "message": "Simplify adding a comma after match arm", "tree": {"sha": "8df7a286674668557579b0f86e2c5eae24bec52c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8df7a286674668557579b0f86e2c5eae24bec52c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c22c64725a4a2ea13a30422a4f822fb1259e7b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c22c64725a4a2ea13a30422a4f822fb1259e7b5", "html_url": "https://github.com/rust-lang/rust/commit/3c22c64725a4a2ea13a30422a4f822fb1259e7b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c22c64725a4a2ea13a30422a4f822fb1259e7b5/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40add5de9a717cb784dde3310ace8d61edd2dde4", "url": "https://api.github.com/repos/rust-lang/rust/commits/40add5de9a717cb784dde3310ace8d61edd2dde4", "html_url": "https://github.com/rust-lang/rust/commit/40add5de9a717cb784dde3310ace8d61edd2dde4"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "9a400199fa23bbd11252c57b7cf386d6567adefd", "filename": "crates/ra_ide_api_light/src/join_lines.rs", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3c22c64725a4a2ea13a30422a4f822fb1259e7b5/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c22c64725a4a2ea13a30422a4f822fb1259e7b5/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs?ref=3c22c64725a4a2ea13a30422a4f822fb1259e7b5", "patch": "@@ -120,28 +120,15 @@ fn remove_newline(\n     }\n }\n \n-/// fixes a comma after the given expression and optionally inserts a new trailing comma\n-/// if no comma was found and `comma_offset` is provided\n-fn fix_comma_after(edit: &mut TextEditBuilder, node: &SyntaxNode, comma_offset: Option<TextUnit>) {\n+fn has_comma_after(node: &SyntaxNode) -> bool {\n     let next = node.next_sibling();\n     let nnext = node.next_sibling().and_then(|n| n.next_sibling());\n \n     match (next, nnext) {\n-        // Whitespace followed by a comma\n-        // remove the whitespace\n-        (Some(ws), Some(comma)) if ws.kind() == WHITESPACE && comma.kind() == COMMA => {\n-            edit.delete(ws.range());\n-        }\n-\n-        // if we are not a comma and if comma_offset was provided,\n-        // insert trailing comma after the block\n-        (Some(n), _) if n.kind() != COMMA => {\n-            if let Some(comma_offset) = comma_offset {\n-                edit.insert(comma_offset, \",\".to_owned());\n-            }\n-        }\n-\n-        _ => {}\n+        // Whitespace followed by a comma is fine\n+        (Some(ws), Some(comma)) if ws.kind() == WHITESPACE && comma.kind() == COMMA => true,\n+        (Some(n), _) => n.kind() == COMMA,\n+        _ => false,\n     }\n }\n \n@@ -151,16 +138,17 @@ fn join_single_expr_block(edit: &mut TextEditBuilder, node: &SyntaxNode) -> Opti\n     let expr = extract_trivial_expression(block)?;\n \n     let block_range = block_expr.syntax().range();\n-    edit.replace(block_range, expr.syntax().text().to_string());\n+    let mut buf = expr.syntax().text().to_string();\n \n     // Match block needs to have a comma after the block\n-    // otherwise we'll maintain a comma after the block if such existed\n-    // but we remove excess whitespace between the expression and the comma.\n     if let Some(match_arm) = block_expr.syntax().parent().and_then(ast::MatchArm::cast) {\n-        fix_comma_after(edit, match_arm.syntax(), Some(block_range.end()));\n-    } else {\n-        fix_comma_after(edit, block_expr.syntax(), None);\n+        if !has_comma_after(match_arm.syntax()) {\n+            buf.push(',');\n+        }\n     }\n+\n+    edit.replace(block_range, buf);\n+\n     Some(())\n }\n \n@@ -301,7 +289,7 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>u.foo(),\n+        Ok(u) => <|>u.foo()    ,\n         Err(v) => v,\n     }\n }\",\n@@ -322,7 +310,8 @@ fn foo(e: Result<U, V>) {\n             r\"\n fn foo(e: Result<U, V>) {\n     match e {\n-        Ok(u) => <|>u.foo(),\n+        Ok(u) => <|>u.foo()\n+        ,\n         Err(v) => v,\n     }\n }\",\n@@ -355,7 +344,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    let x = (<|>4,);\n+    let x = (<|>4   ,);\n }\",\n         );\n \n@@ -370,7 +359,8 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    let x = (<|>4,);\n+    let x = (<|>4\n+    ,);\n }\",\n         );\n     }"}]}