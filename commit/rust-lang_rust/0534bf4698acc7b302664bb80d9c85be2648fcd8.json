{"sha": "0534bf4698acc7b302664bb80d9c85be2648fcd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MzRiZjQ2OThhY2M3YjMwMjY2NGJiODBkOWM4NWJlMjY0OGZjZDg=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T03:10:59Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T07:05:20Z"}, "message": "Move cast_possible_truncation to its own module", "tree": {"sha": "a4841bc5fe554126b2af61dc6ea303a32cb4ec6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4841bc5fe554126b2af61dc6ea303a32cb4ec6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0534bf4698acc7b302664bb80d9c85be2648fcd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0534bf4698acc7b302664bb80d9c85be2648fcd8", "html_url": "https://github.com/rust-lang/rust/commit/0534bf4698acc7b302664bb80d9c85be2648fcd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0534bf4698acc7b302664bb80d9c85be2648fcd8/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12d7515b1ee867b0ef23b489f5b3166bed31ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12d7515b1ee867b0ef23b489f5b3166bed31ae3", "html_url": "https://github.com/rust-lang/rust/commit/b12d7515b1ee867b0ef23b489f5b3166bed31ae3"}], "stats": {"total": 130, "additions": 68, "deletions": 62}, "files": [{"sha": "33b06b8fe7caff7a12f1b50fa5b093e73a47d0c8", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0534bf4698acc7b302664bb80d9c85be2648fcd8/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0534bf4698acc7b302664bb80d9c85be2648fcd8/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=0534bf4698acc7b302664bb80d9c85be2648fcd8", "patch": "@@ -0,0 +1,54 @@\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, FloatTy, Ty};\n+\n+use crate::utils::{is_isize_or_usize, span_lint};\n+\n+use super::{utils, CAST_POSSIBLE_TRUNCATION};\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    let msg = match (cast_from.is_integral(), cast_to.is_integral()) {\n+        (true, true) => {\n+            let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n+            let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n+\n+            let (should_lint, suffix) = match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {\n+                (true, true) | (false, false) => (to_nbits < from_nbits, \"\"),\n+                (true, false) => (\n+                    to_nbits <= 32,\n+                    if to_nbits == 32 {\n+                        \" on targets with 64-bit wide pointers\"\n+                    } else {\n+                        \"\"\n+                    },\n+                ),\n+                (false, true) => (from_nbits == 64, \" on targets with 32-bit wide pointers\"),\n+            };\n+\n+            if !should_lint {\n+                return;\n+            }\n+\n+            format!(\n+                \"casting `{}` to `{}` may truncate the value{}\",\n+                cast_from, cast_to, suffix,\n+            )\n+        },\n+\n+        (false, true) => {\n+            format!(\"casting `{}` to `{}` may truncate the value\", cast_from, cast_to)\n+        },\n+\n+        (_, _) => {\n+            if matches!(cast_from.kind(), &ty::Float(FloatTy::F64))\n+                && matches!(cast_to.kind(), &ty::Float(FloatTy::F32))\n+            {\n+                \"casting `f64` to `f32` may truncate the value\".to_string()\n+            } else {\n+                return;\n+            }\n+        },\n+    };\n+\n+    span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg);\n+}"}, {"sha": "9b89b076d9065250a312380110bdf6c985af2273", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 14, "deletions": 62, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0534bf4698acc7b302664bb80d9c85be2648fcd8/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0534bf4698acc7b302664bb80d9c85be2648fcd8/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=0534bf4698acc7b302664bb80d9c85be2648fcd8", "patch": "@@ -1,4 +1,5 @@\n mod cast_lossless;\n+mod cast_possible_truncation;\n mod cast_precision_loss;\n mod utils;\n \n@@ -312,52 +313,18 @@ fn check_truncation_and_wrapping(cx: &LateContext<'_>, expr: &Expr<'_>, cast_fro\n     let cast_unsigned_to_signed = !cast_from.is_signed() && cast_to.is_signed();\n     let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n     let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n-    let (span_truncation, suffix_truncation, span_wrap, suffix_wrap) =\n-        match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {\n-            (true, true) | (false, false) => (\n-                to_nbits < from_nbits,\n-                ArchSuffix::None,\n-                to_nbits == from_nbits && cast_unsigned_to_signed,\n-                ArchSuffix::None,\n-            ),\n-            (true, false) => (\n-                to_nbits <= 32,\n-                if to_nbits == 32 {\n-                    ArchSuffix::_64\n-                } else {\n-                    ArchSuffix::None\n-                },\n-                to_nbits <= 32 && cast_unsigned_to_signed,\n-                ArchSuffix::_32,\n-            ),\n-            (false, true) => (\n-                from_nbits == 64,\n-                ArchSuffix::_32,\n-                cast_unsigned_to_signed,\n-                if from_nbits == 64 {\n-                    ArchSuffix::_64\n-                } else {\n-                    ArchSuffix::_32\n-                },\n-            ),\n-        };\n-    if span_truncation {\n-        span_lint(\n-            cx,\n-            CAST_POSSIBLE_TRUNCATION,\n-            expr.span,\n-            &format!(\n-                \"casting `{}` to `{}` may truncate the value{}\",\n-                cast_from,\n-                cast_to,\n-                match suffix_truncation {\n-                    ArchSuffix::_32 => arch_32_suffix,\n-                    ArchSuffix::_64 => arch_64_suffix,\n-                    ArchSuffix::None => \"\",\n-                }\n-            ),\n-        );\n-    }\n+    let (span_wrap, suffix_wrap) = match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {\n+        (true, true) | (false, false) => (to_nbits == from_nbits && cast_unsigned_to_signed, ArchSuffix::None),\n+        (true, false) => (to_nbits <= 32 && cast_unsigned_to_signed, ArchSuffix::_32),\n+        (false, true) => (\n+            cast_unsigned_to_signed,\n+            if from_nbits == 64 {\n+                ArchSuffix::_64\n+            } else {\n+                ArchSuffix::_32\n+            },\n+        ),\n+    };\n     if span_wrap {\n         span_lint(\n             cx,\n@@ -529,14 +496,9 @@ fn lint_numeric_casts<'tcx>(\n ) {\n     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n     cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to);\n+    cast_possible_truncation::check(cx, expr, cast_from, cast_to);\n     match (cast_from.is_integral(), cast_to.is_integral()) {\n         (false, true) => {\n-            span_lint(\n-                cx,\n-                CAST_POSSIBLE_TRUNCATION,\n-                expr.span,\n-                &format!(\"casting `{}` to `{}` may truncate the value\", cast_from, cast_to),\n-            );\n             if !cast_to.is_signed() {\n                 span_lint(\n                     cx,\n@@ -553,16 +515,6 @@ fn lint_numeric_casts<'tcx>(\n             check_loss_of_sign(cx, expr, cast_expr, cast_from, cast_to);\n             check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n         },\n-        (false, false) => {\n-            if let (&ty::Float(FloatTy::F64), &ty::Float(FloatTy::F32)) = (&cast_from.kind(), &cast_to.kind()) {\n-                span_lint(\n-                    cx,\n-                    CAST_POSSIBLE_TRUNCATION,\n-                    expr.span,\n-                    \"casting `f64` to `f32` may truncate the value\",\n-                );\n-            }\n-        },\n         (_, _) => {},\n     }\n }"}]}