{"sha": "daee746771f12f58f707787e8075d9f89ec0511d", "node_id": "C_kwDOAAsO6NoAKGRhZWU3NDY3NzFmMTJmNThmNzA3Nzg3ZTgwNzVkOWY4OWVjMDUxMWQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-14T11:51:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T09:01:44Z"}, "message": "Add a usize-indexed append-only-vec", "tree": {"sha": "36789c0cb68a4d9021a1e124f38395e3f2bc563e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36789c0cb68a4d9021a1e124f38395e3f2bc563e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daee746771f12f58f707787e8075d9f89ec0511d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daee746771f12f58f707787e8075d9f89ec0511d", "html_url": "https://github.com/rust-lang/rust/commit/daee746771f12f58f707787e8075d9f89ec0511d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daee746771f12f58f707787e8075d9f89ec0511d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a3a943f2a1dd974f8887fe79ab3ff43f7005ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a3a943f2a1dd974f8887fe79ab3ff43f7005ac", "html_url": "https://github.com/rust-lang/rust/commit/c7a3a943f2a1dd974f8887fe79ab3ff43f7005ac"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "80a9ccd6daa674a706d11c1847bc4704132dfa33", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daee746771f12f58f707787e8075d9f89ec0511d/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daee746771f12f58f707787e8075d9f89ec0511d/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=daee746771f12f58f707787e8075d9f89ec0511d", "patch": "@@ -51,7 +51,7 @@ use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};\n pub use std::sync::atomic::Ordering;\n pub use std::sync::atomic::Ordering::SeqCst;\n \n-pub use vec::AppendOnlyVec;\n+pub use vec::{AppendOnlyIndexVec, AppendOnlyVec};\n \n mod vec;\n "}, {"sha": "6ffd2a75e8100636b8c9ae543e7f051e53648fc4", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/daee746771f12f58f707787e8075d9f89ec0511d/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daee746771f12f58f707787e8075d9f89ec0511d/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=daee746771f12f58f707787e8075d9f89ec0511d", "patch": "@@ -2,15 +2,15 @@ use std::marker::PhantomData;\n \n use rustc_index::vec::Idx;\n \n-pub struct AppendOnlyVec<I: Idx, T: Copy> {\n+pub struct AppendOnlyIndexVec<I: Idx, T: Copy> {\n     #[cfg(not(parallel_compiler))]\n     vec: elsa::vec::FrozenVec<T>,\n     #[cfg(parallel_compiler)]\n     vec: elsa::sync::LockFreeFrozenVec<T>,\n     _marker: PhantomData<fn(&I)>,\n }\n \n-impl<I: Idx, T: Copy> AppendOnlyVec<I, T> {\n+impl<I: Idx, T: Copy> AppendOnlyIndexVec<I, T> {\n     pub fn new() -> Self {\n         Self {\n             #[cfg(not(parallel_compiler))]\n@@ -39,3 +39,35 @@ impl<I: Idx, T: Copy> AppendOnlyVec<I, T> {\n         return self.vec.get(i);\n     }\n }\n+\n+pub struct AppendOnlyVec<T: Copy> {\n+    #[cfg(not(parallel_compiler))]\n+    vec: elsa::vec::FrozenVec<T>,\n+    #[cfg(parallel_compiler)]\n+    vec: elsa::sync::LockFreeFrozenVec<T>,\n+}\n+\n+impl<T: Copy> AppendOnlyVec<T> {\n+    pub fn new() -> Self {\n+        Self {\n+            #[cfg(not(parallel_compiler))]\n+            vec: elsa::vec::FrozenVec::new(),\n+            #[cfg(parallel_compiler)]\n+            vec: elsa::sync::LockFreeFrozenVec::new(),\n+        }\n+    }\n+\n+    pub fn push(&self, val: T) {\n+        #[cfg(not(parallel_compiler))]\n+        self.vec.push(val);\n+        #[cfg(parallel_compiler)]\n+        self.vec.push(val)\n+    }\n+\n+    pub fn get(&self, i: usize) -> Option<T> {\n+        #[cfg(not(parallel_compiler))]\n+        return self.vec.get_copy(i);\n+        #[cfg(parallel_compiler)]\n+        return self.vec.get(i);\n+    }\n+}"}, {"sha": "818f450a58c16c2e10218462cb906f7ce0c937c2", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daee746771f12f58f707787e8075d9f89ec0511d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daee746771f12f58f707787e8075d9f89ec0511d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=daee746771f12f58f707787e8075d9f89ec0511d", "patch": "@@ -7,7 +7,7 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{AppendOnlyVec, Lrc, OnceCell, RwLock, WorkerLocal};\n+use rustc_data_structures::sync::{AppendOnlyIndexVec, Lrc, OnceCell, RwLock, WorkerLocal};\n use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_incremental::DepGraphFuture;\n@@ -215,7 +215,7 @@ impl<'tcx> Queries<'tcx> {\n \n             let cstore = RwLock::new(Box::new(CStore::new(sess)) as _);\n             let definitions = RwLock::new(Definitions::new(sess.local_stable_crate_id()));\n-            let source_span = AppendOnlyVec::new();\n+            let source_span = AppendOnlyIndexVec::new();\n             let _id = source_span.push(krate.spans.inner_span);\n             debug_assert_eq!(_id, CRATE_DEF_ID);\n             let untracked = Untracked { cstore, source_span, definitions };"}, {"sha": "dd1721801f37fa1c99d1e478e574103fbd70e86a", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daee746771f12f58f707787e8075d9f89ec0511d/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daee746771f12f58f707787e8075d9f89ec0511d/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=daee746771f12f58f707787e8075d9f89ec0511d", "patch": "@@ -6,7 +6,7 @@ use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{self, AppendOnlyVec, MetadataRef, RwLock};\n+use rustc_data_structures::sync::{self, AppendOnlyIndexVec, MetadataRef, RwLock};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, Definitions};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n@@ -257,6 +257,6 @@ pub type CrateStoreDyn = dyn CrateStore + sync::Sync + sync::Send;\n pub struct Untracked {\n     pub cstore: RwLock<Box<CrateStoreDyn>>,\n     /// Reference span for definitions.\n-    pub source_span: AppendOnlyVec<LocalDefId, Span>,\n+    pub source_span: AppendOnlyIndexVec<LocalDefId, Span>,\n     pub definitions: RwLock<Definitions>,\n }"}]}