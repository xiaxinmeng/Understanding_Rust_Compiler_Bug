{"sha": "c25f26d4ca8d194fd1edfda643f2c96170a85a77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNWYyNmQ0Y2E4ZDE5NGZkMWVkZmRhNjQzZjJjOTYxNzBhODVhNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-08T17:14:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-08T17:14:09Z"}, "message": "Auto merge of #5411 - dtolnay:hasher, r=flip1995\n\nDowngrade implicit_hasher to pedantic\n\nFrom the [documentation](https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher), this lint is intended to suggest:\n\n```diff\n- pub fn foo(map: &mut HashMap<i32, i32>) { }\n\n+ pub fn foo<S: BuildHasher>(map: &mut HashMap<i32, i32, S>) { }\n```\n\nI think this is pedantic. I get that this lint can benefit core libraries like serde, but that's exactly the use case for pedantic lints; a library like serde will [enable clippy_pedantic](https://github.com/serde-rs/json/blob/fd6741f4b0b3fc90a58a6f578e33a9adc6403f3f/src/lib.rs#L304) and take the time to go through everything possible. Similar for libraries doing a libz blitz style checkup before committing to a 1.0 release; it would make sense to run through all the available pedantic lints then.\n\nBut otherwise, for most codebases and certainly for industrial codebases, the above suggested change just makes the codebase more obtuse for questionable benefit.\n\nchangelog: Remove implicit_hasher from default set of enabled lints", "tree": {"sha": "785e0ec2885d32c335294917409bd80d044b73ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785e0ec2885d32c335294917409bd80d044b73ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c25f26d4ca8d194fd1edfda643f2c96170a85a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c25f26d4ca8d194fd1edfda643f2c96170a85a77", "html_url": "https://github.com/rust-lang/rust/commit/c25f26d4ca8d194fd1edfda643f2c96170a85a77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c25f26d4ca8d194fd1edfda643f2c96170a85a77/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940bbd6aa45c615e598ab92b8486c5698554499d", "url": "https://api.github.com/repos/rust-lang/rust/commits/940bbd6aa45c615e598ab92b8486c5698554499d", "html_url": "https://github.com/rust-lang/rust/commit/940bbd6aa45c615e598ab92b8486c5698554499d"}, {"sha": "5f92faec6d0cbaac6c6afa93efc7298de6765afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f92faec6d0cbaac6c6afa93efc7298de6765afc", "html_url": "https://github.com/rust-lang/rust/commit/5f92faec6d0cbaac6c6afa93efc7298de6765afc"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "b106113c2a983749d7c66d18447b4bca1513aac4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -1135,6 +1135,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CAST_POSSIBLE_WRAP),\n         LintId::of(&types::CAST_PRECISION_LOSS),\n         LintId::of(&types::CAST_SIGN_LOSS),\n+        LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&types::INVALID_UPCAST_COMPARISONS),\n         LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::LINKEDLIST),\n@@ -1383,7 +1384,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CHAR_LIT_AS_U8),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n         LintId::of(&types::UNIT_ARG),\n@@ -1494,7 +1494,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n-        LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),"}, {"sha": "1e7e0adf390221850e0c8bf94b90ebe331ba2cee", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -2169,7 +2169,7 @@ declare_clippy_lint! {\n     /// pub fn foo<S: BuildHasher>(map: &mut HashMap<i32, i32, S>) { }\n     /// ```\n     pub IMPLICIT_HASHER,\n-    style,\n+    pedantic,\n     \"missing generalization over different hashers\"\n }\n "}, {"sha": "b3c77f3f48146a6f763849a27baf7200248b6a6e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -747,7 +747,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"implicit_hasher\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"missing generalization over different hashers\",\n         deprecation: None,\n         module: \"types\","}, {"sha": "f50714643fd2524905a7166c96d71e0c25687c34", "filename": "tests/ui/crashes/ice-3717.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fcrashes%2Fice-3717.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fcrashes%2Fice-3717.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3717.rs?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -1,3 +1,5 @@\n+#![deny(clippy::implicit_hasher)]\n+\n use std::collections::HashSet;\n \n fn main() {}"}, {"sha": "296c95abb96d343f73629910d0f5fab3dd6fd228", "filename": "tests/ui/crashes/ice-3717.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fcrashes%2Fice-3717.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fcrashes%2Fice-3717.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3717.stderr?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -1,10 +1,14 @@\n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/ice-3717.rs:5:21\n+  --> $DIR/ice-3717.rs:7:21\n    |\n LL | pub fn ice_3717(_: &HashSet<usize>) {\n    |                     ^^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::implicit-hasher` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/ice-3717.rs:1:9\n+   |\n+LL | #![deny(clippy::implicit_hasher)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider adding a type parameter\n    |\n LL | pub fn ice_3717<S: ::std::hash::BuildHasher + Default>(_: &HashSet<usize, S>) {"}, {"sha": "fdcc9a33f55fe93e2d5989f1757b2233c43c3d78", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -1,4 +1,5 @@\n // aux-build:implicit_hasher_macros.rs\n+#![deny(clippy::implicit_hasher)]\n #![allow(unused)]\n \n #[macro_use]"}, {"sha": "2b06d661772d28083e71f35e4abe9f7f056fe338", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -1,10 +1,14 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:15:35\n+  --> $DIR/implicit_hasher.rs:16:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n    |\n-   = note: `-D clippy::implicit-hasher` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/implicit_hasher.rs:2:9\n+   |\n+LL | #![deny(clippy::implicit_hasher)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider adding a type parameter\n    |\n LL | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V, S> {\n@@ -15,7 +19,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:24:36\n+  --> $DIR/implicit_hasher.rs:25:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -30,7 +34,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:29:19\n+  --> $DIR/implicit_hasher.rs:30:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +49,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:46:32\n+  --> $DIR/implicit_hasher.rs:47:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -60,7 +64,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:51:19\n+  --> $DIR/implicit_hasher.rs:52:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -75,7 +79,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:68:23\n+  --> $DIR/implicit_hasher.rs:69:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -86,7 +90,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:68:53\n+  --> $DIR/implicit_hasher.rs:69:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -97,7 +101,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:72:43\n+  --> $DIR/implicit_hasher.rs:73:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n@@ -116,7 +120,7 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:80:33\n+  --> $DIR/implicit_hasher.rs:81:33\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                 ^^^^^^^^^^^^^^^^^\n@@ -131,7 +135,7 @@ LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:80:63\n+  --> $DIR/implicit_hasher.rs:81:63\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                               ^^^^^^^^^^^^"}, {"sha": "2d227e6654c36c0f45e6801205dd173f271d546a", "filename": "tests/ui/mut_key.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.rs?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::implicit_hasher)]\n-\n use std::collections::{HashMap, HashSet};\n use std::hash::{Hash, Hasher};\n use std::sync::atomic::{AtomicUsize, Ordering::Relaxed};"}, {"sha": "8d6a259c7e385f307ada794ea2e9ca0f06f01853", "filename": "tests/ui/mut_key.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fmut_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c25f26d4ca8d194fd1edfda643f2c96170a85a77/tests%2Fui%2Fmut_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.stderr?ref=c25f26d4ca8d194fd1edfda643f2c96170a85a77", "patch": "@@ -1,25 +1,25 @@\n error: mutable key type\n-  --> $DIR/mut_key.rs:29:32\n+  --> $DIR/mut_key.rs:27:32\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::mutable_key_type)]` on by default\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:29:72\n+  --> $DIR/mut_key.rs:27:72\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                                                        ^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:30:5\n+  --> $DIR/mut_key.rs:28:5\n    |\n LL |     let _other: HashMap<Key, bool> = HashMap::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:49:22\n+  --> $DIR/mut_key.rs:47:22\n    |\n LL | fn tuples_bad<U>(_m: &mut HashMap<(Key, U), bool>) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}