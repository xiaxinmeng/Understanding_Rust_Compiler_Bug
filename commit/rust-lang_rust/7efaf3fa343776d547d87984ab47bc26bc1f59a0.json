{"sha": "7efaf3fa343776d547d87984ab47bc26bc1f59a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZmFmM2ZhMzQzNzc2ZDU0N2Q4Nzk4NGFiNDdiYzI2YmMxZjU5YTA=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T20:49:41Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-18T19:56:00Z"}, "message": "syntax/ast_util: add `is_by_value_unop()`", "tree": {"sha": "24e786e91623bc6b82473a7bf0a2a7dc063bc359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e786e91623bc6b82473a7bf0a2a7dc063bc359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7efaf3fa343776d547d87984ab47bc26bc1f59a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7efaf3fa343776d547d87984ab47bc26bc1f59a0", "html_url": "https://github.com/rust-lang/rust/commit/7efaf3fa343776d547d87984ab47bc26bc1f59a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7efaf3fa343776d547d87984ab47bc26bc1f59a0/comments", "author": null, "committer": null, "parents": [{"sha": "f9a48492a82f805aa40d8b6fea290badbab0d1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a48492a82f805aa40d8b6fea290badbab0d1b1", "html_url": "https://github.com/rust-lang/rust/commit/f9a48492a82f805aa40d8b6fea290badbab0d1b1"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "5243f07f32749f62fdc7787489a6dec391cf2782", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7efaf3fa343776d547d87984ab47bc26bc1f59a0/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7efaf3fa343776d547d87984ab47bc26bc1f59a0/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7efaf3fa343776d547d87984ab47bc26bc1f59a0", "patch": "@@ -85,7 +85,7 @@ pub fn is_shift_binop(b: BinOp) -> bool {\n     }\n }\n \n-/// Returns `true` is the binary operator takes its arguments by value\n+/// Returns `true` if the binary operator takes its arguments by value\n pub fn is_by_value_binop(b: BinOp) -> bool {\n     match b {\n         BiAdd | BiSub | BiMul | BiDiv | BiRem | BiBitXor | BiBitAnd | BiBitOr | BiShl | BiShr => {\n@@ -95,6 +95,14 @@ pub fn is_by_value_binop(b: BinOp) -> bool {\n     }\n }\n \n+/// Returns `true` if the unary operator takes its argument by value\n+pub fn is_by_value_unop(u: UnOp) -> bool {\n+    match u {\n+        UnNeg | UnNot => true,\n+        _ => false,\n+    }\n+}\n+\n pub fn unop_to_string(op: UnOp) -> &'static str {\n     match op {\n       UnUniq => \"box() \","}]}