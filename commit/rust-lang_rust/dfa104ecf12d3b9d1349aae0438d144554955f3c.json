{"sha": "dfa104ecf12d3b9d1349aae0438d144554955f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYTEwNGVjZjEyZDNiOWQxMzQ5YWFlMDQzOGQxNDQ1NTQ5NTVmM2M=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-07T10:01:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-07T10:01:54Z"}, "message": "Rollup merge of #55609 - nikic:fix-51947, r=nagisa\n\nRun name-anon-globals after LTO passes as well\n\nIf we're going to emit bitcode (through ThinLTOBuffer), then we need to ensure that anon globals are named. This was already done after optimization passes, but also has to happen after LTO passes, as we always emit the final result in a ThinLTO-compatible manner.\n\nI added the test as `run-make`. The important bit is that we emit bitcode in some way (e.g. `--crate-type rlib` or `--emit=llvm-bc`). Please tell me if there is a better way to test for that.\n\nFixes #51947", "tree": {"sha": "667551a81afabecfb8bd310b46632f4c1065b190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/667551a81afabecfb8bd310b46632f4c1065b190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa104ecf12d3b9d1349aae0438d144554955f3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb4rgSCRBK7hj4Ov3rIwAAdHIIACN4mANMwWm9cnqpIq/OLdHk\n5tNI/LoFDaGL72ct4CD9fH1c0BlH4g1b9AWHmm9VzhM0T1xUkKn+GMnBAm/9OS/m\nt/22xLmZRVlS9+ybXkJyJ6Fge8GofzgxMXUGL6uXGHnq2IzUG9mRQ7I/C2JRDLgw\nliXRWcINb1/glS2yoWJnqm6tBegkt1LLLtuj+M0VlAjizuXAgvBkUslxAK7yKrff\ntneZTh7v9zMMnZPWrQyYUbFdNG6iS1lF2ArsUY3jiUVtn1yxg2zbrbdyQcEtqnV5\nmygZtCESn82VX71c7tFFd+s1sbYblVqwVKYJm13ewxM8TeWOxkPWkrbWPR11Vh8=\n=R1c5\n-----END PGP SIGNATURE-----\n", "payload": "tree 667551a81afabecfb8bd310b46632f4c1065b190\nparent 0708a6a7174d1dcff84cb44d2481fa3ff98cadac\nparent 66702fcd0ae34100aaf74a9bdf8da77b6e273616\nauthor kennytm <kennytm@gmail.com> 1541584914 +0800\ncommitter GitHub <noreply@github.com> 1541584914 +0800\n\nRollup merge of #55609 - nikic:fix-51947, r=nagisa\n\nRun name-anon-globals after LTO passes as well\n\nIf we're going to emit bitcode (through ThinLTOBuffer), then we need to ensure that anon globals are named. This was already done after optimization passes, but also has to happen after LTO passes, as we always emit the final result in a ThinLTO-compatible manner.\n\nI added the test as `run-make`. The important bit is that we emit bitcode in some way (e.g. `--crate-type rlib` or `--emit=llvm-bc`). Please tell me if there is a better way to test for that.\n\nFixes #51947\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa104ecf12d3b9d1349aae0438d144554955f3c", "html_url": "https://github.com/rust-lang/rust/commit/dfa104ecf12d3b9d1349aae0438d144554955f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa104ecf12d3b9d1349aae0438d144554955f3c/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0708a6a7174d1dcff84cb44d2481fa3ff98cadac", "url": "https://api.github.com/repos/rust-lang/rust/commits/0708a6a7174d1dcff84cb44d2481fa3ff98cadac", "html_url": "https://github.com/rust-lang/rust/commit/0708a6a7174d1dcff84cb44d2481fa3ff98cadac"}, {"sha": "66702fcd0ae34100aaf74a9bdf8da77b6e273616", "url": "https://api.github.com/repos/rust-lang/rust/commits/66702fcd0ae34100aaf74a9bdf8da77b6e273616", "html_url": "https://github.com/rust-lang/rust/commit/66702fcd0ae34100aaf74a9bdf8da77b6e273616"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "3d96fef7c0d6f09e9e47f93c52e475fd0d700627", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfa104ecf12d3b9d1349aae0438d144554955f3c/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa104ecf12d3b9d1349aae0438d144554955f3c/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=dfa104ecf12d3b9d1349aae0438d144554955f3c", "patch": "@@ -605,6 +605,13 @@ fn run_pass_manager(cgcx: &CodegenContext,\n             }\n         });\n \n+        // We always generate bitcode through ThinLTOBuffers,\n+        // which do not support anonymous globals\n+        if config.bitcode_needed() {\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"name-anon-globals\\0\".as_ptr() as *const _);\n+            llvm::LLVMRustAddPass(pm, pass.unwrap());\n+        }\n+\n         if config.verify_llvm_ir {\n             let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n             llvm::LLVMRustAddPass(pm, pass.unwrap());"}, {"sha": "184be4b9eab39d76841af69ce451f065c2ee9757", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfa104ecf12d3b9d1349aae0438d144554955f3c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa104ecf12d3b9d1349aae0438d144554955f3c/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=dfa104ecf12d3b9d1349aae0438d144554955f3c", "patch": "@@ -337,6 +337,11 @@ impl ModuleConfig {\n         self.merge_functions = sess.opts.optimize == config::OptLevel::Default ||\n                                sess.opts.optimize == config::OptLevel::Aggressive;\n     }\n+\n+    pub fn bitcode_needed(&self) -> bool {\n+        self.emit_bc || self.obj_is_bitcode\n+            || self.emit_bc_compressed || self.embed_bitcode\n+    }\n }\n \n /// Assembler name and command used by codegen when no_integrated_as is enabled\n@@ -564,8 +569,7 @@ unsafe fn optimize(cgcx: &CodegenContext,\n             // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n             // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n             // we'll get errors in LLVM.\n-            let using_thin_buffers = config.emit_bc || config.obj_is_bitcode\n-                || config.emit_bc_compressed || config.embed_bitcode;\n+            let using_thin_buffers = config.bitcode_needed();\n             let mut have_name_anon_globals_pass = false;\n             if !config.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);"}, {"sha": "7b79807e4d7ff5df6ffa42a3e4a12a3ec698367d", "filename": "src/test/ui/issue-51947.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dfa104ecf12d3b9d1349aae0438d144554955f3c/src%2Ftest%2Fui%2Fissue-51947.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa104ecf12d3b9d1349aae0438d144554955f3c/src%2Ftest%2Fui%2Fissue-51947.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51947.rs?ref=dfa104ecf12d3b9d1349aae0438d144554955f3c", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+#![crate_type = \"lib\"]\n+#![feature(linkage)]\n+\n+// MergeFunctions will merge these via an anonymous internal\n+// backing function, which must be named if ThinLTO buffers are used\n+\n+#[linkage = \"weak\"]\n+pub fn fn1(a: u32, b: u32, c: u32) -> u32 {\n+    a + b + c\n+}\n+\n+#[linkage = \"weak\"]\n+pub fn fn2(a: u32, b: u32, c: u32) -> u32 {\n+    a + b + c\n+}"}]}