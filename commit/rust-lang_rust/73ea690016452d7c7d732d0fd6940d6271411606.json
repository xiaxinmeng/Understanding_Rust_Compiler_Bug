{"sha": "73ea690016452d7c7d732d0fd6940d6271411606", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZWE2OTAwMTY0NTJkN2M3ZDczMmQwZmQ2OTQwZDYyNzE0MTE2MDY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-18T13:41:33Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-18T15:21:39Z"}, "message": "Describe new for construct in the tutorial\n\nCloses #2141", "tree": {"sha": "4502930fb420b6bd61e78b73c423024b9b5b2da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4502930fb420b6bd61e78b73c423024b9b5b2da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73ea690016452d7c7d732d0fd6940d6271411606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73ea690016452d7c7d732d0fd6940d6271411606", "html_url": "https://github.com/rust-lang/rust/commit/73ea690016452d7c7d732d0fd6940d6271411606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73ea690016452d7c7d732d0fd6940d6271411606/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "054a312a33403c6f28b2948ac7ba25dec7f3b267", "url": "https://api.github.com/repos/rust-lang/rust/commits/054a312a33403c6f28b2948ac7ba25dec7f3b267", "html_url": "https://github.com/rust-lang/rust/commit/054a312a33403c6f28b2948ac7ba25dec7f3b267"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "4cadecd7a71c5760f60037d76eda3bb94f6abad0", "filename": "doc/tutorial.md", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/73ea690016452d7c7d732d0fd6940d6271411606/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/73ea690016452d7c7d732d0fd6940d6271411606/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=73ea690016452d7c7d732d0fd6940d6271411606", "patch": "@@ -183,8 +183,8 @@ mode for your favorite editor, let us know so that we can link to it.\n Assuming you've programmed in any C-family language (C++, Java,\n JavaScript, C#, or PHP), Rust will feel familiar. The main surface\n difference to be aware of is that the bodies of `if` statements and of\n-loops *have* to be wrapped in brackets. Single-statement, bracket-less\n-bodies are not allowed.\n+`while` loops *have* to be wrapped in brackets. Single-statement,\n+bracket-less bodies are not allowed.\n \n If the verbosity of that bothers you, consider the fact that this\n allows you to omit the parentheses around the condition in `if`,\n@@ -690,9 +690,9 @@ do {\n } while any_cake_left();\n ~~~~\n \n-For more involved iteration, such as going over the elements of a hash\n-table, Rust uses higher-order functions. We'll come back to those in a\n-moment.\n+For more involved iteration, such as going over the elements of a\n+collection, Rust uses higher-order functions. We'll come back to those\n+in a moment.\n \n ## Failure\n \n@@ -952,6 +952,49 @@ for_rev([1, 2, 3]) {|n|\n Note that, because `for_rev()` returns unit type, no semicolon is\n needed when the final closure is pulled outside of the parentheses.\n \n+# For loops\n+\n+To allow breaking out of loops, many iteration functions, such as\n+`vec::each`, take a function that returns a boolean, and can return\n+`false` to break off iteration.\n+\n+~~~~\n+vec::each([2, 4, 8, 5, 16]) {|n|\n+    if n % 2 != 0 {\n+        io::println(\"found odd number!\");\n+        false\n+    } else { true }\n+}\n+~~~~\n+\n+You can see how that gets noisy. As a syntactic convenience, if the\n+call is preceded by the keyword `for`, the block will implicitly\n+return `true`, and `break` and `cont` can be used, much like in a\n+`while` loop, to explicitly return `false` or `true`.\n+\n+~~~~\n+for vec::each([2, 4, 8, 5, 16]) {|n|\n+    if n % 2 != 0 {\n+        io::println(\"found odd number!\");\n+        break;\n+    }\n+}\n+~~~~\n+\n+As an added bonus, you can use the `ret` keyword, which is not\n+normally allowed in blocks, in a block that appears as the body of a\n+`for` loop \u2014 this will cause a return to happen from the outer\n+function, not just the loop body.\n+\n+~~~~\n+fn contains(v: [int], elt: int) -> bool {\n+    for vec::each(v) {|x|\n+        if (x == elt) { ret true; }\n+    }\n+    false\n+}\n+~~~~\n+\n # Datatypes\n \n Rust datatypes are, by default, immutable. The core datatypes of Rust"}]}