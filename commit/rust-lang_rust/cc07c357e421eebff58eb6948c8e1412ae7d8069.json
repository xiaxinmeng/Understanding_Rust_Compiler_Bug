{"sha": "cc07c357e421eebff58eb6948c8e1412ae7d8069", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMDdjMzU3ZTQyMWVlYmZmNThlYjY5NDhjOGUxNDEyYWU3ZDgwNjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-14T23:38:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-21T00:31:20Z"}, "message": "Reduce visual clutter of multiline start when possible\n\nWhen a span starts on a line with nothing but whitespace to the left,\nand there are no other annotations in that line, simplify the visual\nrepresentation of the span.\n\nGo from:\n\n```rust\nerror[E0072]: recursive type `A` has infinite size\n --> file2.rs:1:1\n  |\n1 |   struct A {\n  |  _^ starting here...\n2 | |     a: A,\n3 | | }\n  | |_^ ...ending here: recursive type has infinite size\n  |\n```\n\nTo:\n\n```rust\nerror[E0072]: recursive type `A` has infinite size\n --> file2.rs:1:1\n  |\n1 | / struct A {\n2 | |     a: A,\n3 | | }\n  | |_^ recursive type has infinite size\n```\n\nRemove `starting here...`/`...ending here` labels from all multiline\ndiagnostics.", "tree": {"sha": "560bdd78cbfc03646386e6d8ed881c901f4bda79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/560bdd78cbfc03646386e6d8ed881c901f4bda79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc07c357e421eebff58eb6948c8e1412ae7d8069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc07c357e421eebff58eb6948c8e1412ae7d8069", "html_url": "https://github.com/rust-lang/rust/commit/cc07c357e421eebff58eb6948c8e1412ae7d8069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc07c357e421eebff58eb6948c8e1412ae7d8069/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "968ae7babecfc6c62ef9699ff052d9ab00411848", "url": "https://api.github.com/repos/rust-lang/rust/commits/968ae7babecfc6c62ef9699ff052d9ab00411848", "html_url": "https://github.com/rust-lang/rust/commit/968ae7babecfc6c62ef9699ff052d9ab00411848"}], "stats": {"total": 379, "additions": 200, "deletions": 179}, "files": [{"sha": "64652bb308bdc4952af117da586ff704648c68c6", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 54, "deletions": 13, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -263,6 +263,41 @@ impl EmitterWriter {\n \n         draw_col_separator(buffer, line_offset, width_offset - 2);\n \n+        // Special case when there's only one annotation involved, it is the start of a multiline\n+        // span and there's no text at the beginning of the code line. Instead of doing the whole\n+        // graph:\n+        //\n+        // 2 |   fn foo() {\n+        //   |  _^\n+        // 3 | |\n+        // 4 | | }\n+        //   | |_^ test\n+        //\n+        // we simplify the output to:\n+        //\n+        // 2 | / fn foo() {\n+        // 3 | |\n+        // 4 | | }\n+        //   | |_^ test\n+        if line.annotations.len() == 1 {\n+            if let Some(ref ann) = line.annotations.get(0) {\n+                if let AnnotationType::MultilineStart(depth) = ann.annotation_type {\n+                    if source_string[0..ann.start_col].trim() == \"\" {\n+                        let style = if ann.is_primary {\n+                            Style::UnderlinePrimary\n+                        } else {\n+                            Style::UnderlineSecondary\n+                        };\n+                        buffer.putc(line_offset,\n+                                    width_offset + depth - 1,\n+                                    '/',\n+                                    style);\n+                        return vec![(depth, style)];\n+                    }\n+                }\n+            }\n+        }\n+\n         // We want to display like this:\n         //\n         //      vec.push(vec.pop().unwrap());\n@@ -355,10 +390,8 @@ impl EmitterWriter {\n         for (i, annotation) in annotations.iter().enumerate() {\n             for (j, next) in annotations.iter().enumerate() {\n                 if overlaps(next, annotation, 0)  // This label overlaps with another one and both\n-                    && !annotation.is_line()      // take space (they have text and are not\n-                    && !next.is_line()            // multiline lines).\n-                    && annotation.has_label()\n-                    && j > i\n+                    && annotation.has_label()     // take space (they have text and are not\n+                    && j > i                      // multiline lines).\n                     && p == 0  // We're currently on the first line, move the label one line down\n                 {\n                     // This annotation needs a new line in the output.\n@@ -374,7 +407,7 @@ impl EmitterWriter {\n                     } else {\n                         0\n                     };\n-                    if overlaps(next, annotation, l) // Do not allow two labels to be in the same\n+                    if (overlaps(next, annotation, l) // Do not allow two labels to be in the same\n                                                      // line if they overlap including padding, to\n                                                      // avoid situations like:\n                                                      //\n@@ -383,11 +416,18 @@ impl EmitterWriter {\n                                                      //      |      |\n                                                      //      fn_spanx_span\n                                                      //\n-                        && !annotation.is_line()     // Do not add a new line if this annotation\n-                        && !next.is_line()           // or the next are vertical line placeholders.\n                         && annotation.has_label()    // Both labels must have some text, otherwise\n-                        && next.has_label()          // they are not overlapping.\n+                        && next.has_label())         // they are not overlapping.\n+                                                     // Do not add a new line if this annotation\n+                                                     // or the next are vertical line placeholders.\n+                        || (annotation.takes_space() // If either this or the next annotation is\n+                            && next.has_label())     // multiline start/end, move it to a new line\n+                        || (annotation.has_label()   // so as not to overlap the orizontal lines.\n+                            && next.takes_space())\n+                        || (annotation.takes_space()\n+                            && next.takes_space())\n                     {\n+                        // This annotation needs a new line in the output.\n                         p += 1;\n                         break;\n                     }\n@@ -397,6 +437,7 @@ impl EmitterWriter {\n                 line_len = p;\n             }\n         }\n+\n         if line_len != 0 {\n             line_len += 1;\n         }\n@@ -480,7 +521,7 @@ impl EmitterWriter {\n             };\n             let pos = pos + 1;\n \n-            if pos > 1 && annotation.has_label() {\n+            if pos > 1 && (annotation.has_label() || annotation.takes_space()) {\n                 for p in line_offset + 1..line_offset + pos + 1 {\n                     buffer.putc(p,\n                                 code_offset + annotation.start_col,\n@@ -514,12 +555,12 @@ impl EmitterWriter {\n         // After this we will have:\n         //\n         // 2 |   fn foo() {\n-        //   |  __________ starting here...\n+        //   |  __________\n         //   |      |\n         //   |      something about `foo`\n         // 3 |\n         // 4 |   }\n-        //   |  _  ...ending here: test\n+        //   |  _  test\n         for &(pos, annotation) in &annotations_position {\n             let style = if annotation.is_primary {\n                 Style::LabelPrimary\n@@ -557,12 +598,12 @@ impl EmitterWriter {\n         // After this we will have:\n         //\n         // 2 |   fn foo() {\n-        //   |  ____-_____^ starting here...\n+        //   |  ____-_____^\n         //   |      |\n         //   |      something about `foo`\n         // 3 |\n         // 4 |   }\n-        //   |  _^  ...ending here: test\n+        //   |  _^  test\n         for &(_, annotation) in &annotations_position {\n             let (underline, style) = if annotation.is_primary {\n                 ('^', Style::UnderlinePrimary)"}, {"sha": "7401ead22089bcfaad6e6317004a2b20e2312695", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -63,7 +63,7 @@ impl MultilineAnnotation {\n             start_col: self.start_col,\n             end_col: self.start_col + 1,\n             is_primary: self.is_primary,\n-            label: Some(\"starting here...\".to_owned()),\n+            label: None,\n             annotation_type: AnnotationType::MultilineStart(self.depth)\n         }\n     }\n@@ -73,10 +73,7 @@ impl MultilineAnnotation {\n             start_col: self.end_col - 1,\n             end_col: self.end_col,\n             is_primary: self.is_primary,\n-            label: match self.label {\n-                Some(ref label) => Some(format!(\"...ending here: {}\", label)),\n-                None => Some(\"...ending here\".to_owned()),\n-            },\n+            label: self.label.clone(),\n             annotation_type: AnnotationType::MultilineEnd(self.depth)\n         }\n     }\n@@ -106,9 +103,9 @@ pub enum AnnotationType {\n     // Each of these corresponds to one part of the following diagram:\n     //\n     //     x |   foo(1 + bar(x,\n-    //       |  _________^ starting here...           < MultilineStart\n-    //     x | |             y),                      < MultilineLine\n-    //       | |______________^ ...ending here: label < MultilineEnd\n+    //       |  _________^              < MultilineStart\n+    //     x | |             y),        < MultilineLine\n+    //       | |______________^ label   < MultilineEnd\n     //     x |       z);\n     /// Annotation marking the first character of a fully shown multiline span\n     MultilineStart(usize),\n@@ -189,6 +186,15 @@ impl Annotation {\n             false\n         }\n     }\n+\n+    pub fn takes_space(&self) -> bool {\n+        // Multiline annotations always have to keep vertical space.\n+        match self.annotation_type {\n+            AnnotationType::MultilineStart(_) |\n+            AnnotationType::MultilineEnd(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "dc9b22c37e28b5c14a32c1a5d58b5eff5f176bb2", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 46, "deletions": 47, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -128,9 +128,9 @@ error: foo\n  --> test.rs:2:10\n   |\n 2 |   fn foo() {\n-  |  __________^ starting here...\n+  |  __________^\n 3 | | }\n-  | |_^ ...ending here: test\n+  | |_^ test\n \n \"#);\n }\n@@ -161,11 +161,11 @@ error: foo\n  --> test.rs:2:10\n   |\n 2 |   fn foo() {\n-  |  __________^ starting here...\n+  |  __________^\n 3 | |\n 4 | |\n 5 | |   }\n-  | |___^ ...ending here: test\n+  | |___^ test\n \n \"#);\n }\n@@ -207,14 +207,14 @@ error: foo\n  --> test.rs:3:3\n   |\n 3 |      X0 Y0\n-  |  ____^__- starting here...\n+  |  ____^__-\n   | | ___|\n-  | ||   starting here...\n+  | ||\n 4 | ||   X1 Y1\n 5 | ||   X2 Y2\n-  | ||____^__- ...ending here: `Y` is a good letter too\n+  | ||____^__- `Y` is a good letter too\n   |  |____|\n-  |       ...ending here: `X` is a good letter\n+  |       `X` is a good letter\n \n \"#);\n }\n@@ -256,13 +256,13 @@ error: foo\n  --> test.rs:3:3\n   |\n 3 |      X0 Y0\n-  |  ____^__- starting here...\n+  |  ____^__-\n   | | ___|\n-  | ||   starting here...\n+  | ||\n 4 | ||   Y1 X1\n-  | ||____-__^ ...ending here: `X` is a good letter\n+  | ||____-__^ `X` is a good letter\n   | |_____|\n-  |       ...ending here: `Y` is a good letter too\n+  |       `Y` is a good letter too\n \n \"#);\n }\n@@ -306,13 +306,13 @@ error: foo\n  --> test.rs:3:6\n   |\n 3 |      X0 Y0 Z0\n-  |   ______^ starting here...\n+  |   ______^\n 4 |  |   X1 Y1 Z1\n-  |  |_________- starting here...\n+  |  |_________-\n 5 | ||   X2 Y2 Z2\n-  | ||____^ ...ending here: `X` is a good letter\n+  | ||____^ `X` is a good letter\n 6 | |    X3 Y3 Z3\n-  | |_____- ...ending here: `Y` is a good letter too\n+  | |_____- `Y` is a good letter too\n \n \"#);\n }\n@@ -366,16 +366,16 @@ error: foo\n  --> test.rs:3:3\n   |\n 3 |       X0 Y0 Z0\n-  |  _____^__-__- starting here...\n+  |  _____^__-__-\n   | | ____|__|\n-  | || ___|  starting here...\n-  | |||   starting here...\n+  | || ___|\n+  | |||\n 4 | |||   X1 Y1 Z1\n 5 | |||   X2 Y2 Z2\n-  | |||____^__-__- ...ending here: `Z` label\n+  | |||____^__-__- `Z` label\n   |  ||____|__|\n-  |   |____|  ...ending here: `Y` is a good letter too\n-  |        ...ending here: `X` is a good letter\n+  |   |____|  `Y` is a good letter too\n+  |        `X` is a good letter\n \n \"#);\n }\n@@ -430,17 +430,17 @@ error: foo\n  --> test.rs:3:6\n   |\n 3 |      X0 Y0 Z0\n-  |   ______^ starting here...\n+  |   ______^\n 4 |  |   X1 Y1 Z1\n-  |  |____^_- starting here...\n+  |  |____^_-\n   | ||____|\n-  | |     ...ending here: `X` is a good letter\n+  | |     `X` is a good letter\n 5 | |    X2 Y2 Z2\n-  | |____-______- ...ending here: `Y` is a good letter too\n+  | |____-______- `Y` is a good letter too\n   |  ____|\n-  | |    starting here...\n+  | |\n 6 | |    X3 Y3 Z3\n-  | |________- ...ending here: `Z`\n+  | |________- `Z`\n \n \"#);\n }\n@@ -458,7 +458,7 @@ fn foo() {\n     vec![\n         SpanLabel {\n             start: Position {\n-                string: \"Y0\",\n+                string: \"X0\",\n                 count: 1,\n             },\n             end: Position {\n@@ -481,16 +481,15 @@ fn foo() {\n     ],\n     r#\"\n error: foo\n- --> test.rs:3:6\n+ --> test.rs:3:3\n   |\n-3 |     X0 Y0 Z0\n-  |  ______^ starting here...\n+3 | /   X0 Y0 Z0\n 4 | |   X1 Y1 Z1\n-  | |____^ ...ending here: `X` is a good letter\n+  | |____^ `X` is a good letter\n 5 |     X2 Y2 Z2\n-  |  ______- starting here...\n+  |  ______-\n 6 | |   X3 Y3 Z3\n-  | |__________- ...ending here: `Y` is a good letter too\n+  | |__________- `Y` is a good letter too\n \n \"#);\n }\n@@ -534,14 +533,14 @@ error: foo\n  --> test.rs:3:6\n   |\n 3 |      X0 Y0 Z0\n-  |   ______^ starting here...\n+  |   ______^\n 4 |  |   X1 Y1 Z1\n-  |  |____^____- starting here...\n+  |  |____^____-\n   | ||____|\n-  | |     ...ending here: `X` is a good letter\n+  | |     `X` is a good letter\n 5 | |    X2 Y2 Z2\n 6 | |    X3 Y3 Z3\n-  | |___________- ...ending here: `Y` is a good letter too\n+  | |___________- `Y` is a good letter too\n \n \"#);\n }\n@@ -982,18 +981,18 @@ error: foo\n   --> test.rs:3:6\n    |\n 3  |      X0 Y0 Z0\n-   |   ______^ starting here...\n+   |   ______^\n 4  |  |   X1 Y1 Z1\n-   |  |____^____- starting here...\n+   |  |____^____-\n    | ||____|\n-   | |     ...ending here: `X` is a good letter\n+   | |     `X` is a good letter\n 5  | |  1\n 6  | |  2\n 7  | |  3\n ...  |\n 15 | |    X2 Y2 Z2\n 16 | |    X3 Y3 Z3\n-   | |___________- ...ending here: `Y` is a good letter too\n+   | |___________- `Y` is a good letter too\n \n \"#);\n }\n@@ -1047,21 +1046,21 @@ error: foo\n   --> test.rs:3:6\n    |\n 3  |      X0 Y0 Z0\n-   |   ______^ starting here...\n+   |   ______^\n 4  |  | 1\n 5  |  | 2\n 6  |  | 3\n 7  |  |   X1 Y1 Z1\n-   |  |_________- starting here...\n+   |  |_________-\n 8  | || 4\n 9  | || 5\n 10 | || 6\n 11 | ||   X2 Y2 Z2\n-   | ||__________- ...ending here: `Z` is a good letter too\n+   | ||__________- `Z` is a good letter too\n ...   |\n 15 |  | 10\n 16 |  |   X3 Y3 Z3\n-   |  |_______^ ...ending here: `Y` is a good letter\n+   |  |_______^ `Y` is a good letter\n \n \"#);\n }"}, {"sha": "af974d501839b35cb76d8ac7c746c244e25d4b6a", "filename": "src/test/ui/compare-method/region-extra-2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra-2.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -4,12 +4,11 @@ error[E0276]: impl has stricter requirements than trait\n 15 |       fn renew<'b: 'a>(self) -> &'b mut [T];\n    |       -------------------------------------- definition of `renew` from trait\n ...\n-19 |       fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n-   |  _____^ starting here...\n+19 | /     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b {\n 20 | |         //~^ ERROR E0276\n 21 | |         &mut self[..]\n 22 | |     }\n-   | |_____^ ...ending here: impl has extra requirement `'a: 'b`\n+   | |_____^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "622e144c53a040447103654b7fb552c79d68c5b0", "filename": "src/test/ui/compare-method/traits-misc-mismatch-2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftraits-misc-mismatch-2.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -4,12 +4,11 @@ error[E0276]: impl has stricter requirements than trait\n 19 |       fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n    |       ------------------------------------------------------------------ definition of `zip` from trait\n ...\n-23 |       fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n-   |  _____^ starting here...\n+23 | /     fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n 24 | |     //~^ ERROR E0276\n 25 | |         ZipIterator{a: self, b: other}\n 26 | |     }\n-   | |_____^ ...ending here: impl has extra requirement `U: Iterator<B>`\n+   | |_____^ impl has extra requirement `U: Iterator<B>`\n \n error: aborting due to previous error\n "}, {"sha": "8e8773eba3e222feb5c31bbe4f2029a69ef5df5d", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -2,17 +2,17 @@ error: missing `fn`, `type`, or `const` for impl-item declaration\n   --> $DIR/issue-40006.rs:11:9\n    |\n 11 |   impl X {\n-   |  _________^ starting here...\n+   |  _________^\n 12 | |     Y\n-   | |____^ ...ending here: missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n   --> $DIR/issue-40006.rs:17:10\n    |\n 17 |   trait X {\n-   |  __________^ starting here...\n+   |  __________^\n 18 | |     X() {}\n-   | |____^ ...ending here: missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, or `const`\n \n error: expected `[`, found `#`\n   --> $DIR/issue-40006.rs:19:17\n@@ -24,17 +24,17 @@ error: missing `fn`, `type`, or `const` for trait-item declaration\n   --> $DIR/issue-40006.rs:19:21\n    |\n 19 |       fn xxx() { ### }\n-   |  _____________________^ starting here...\n+   |  _____________________^\n 20 | |     L = M;\n-   | |____^ ...ending here: missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n   --> $DIR/issue-40006.rs:20:11\n    |\n 20 |       L = M;\n-   |  ___________^ starting here...\n+   |  ___________^\n 21 | |     Z = { 2 + 3 };\n-   | |____^ ...ending here: missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, or `const`\n \n error: expected one of `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n   --> $DIR/issue-40006.rs:21:18"}, {"sha": "2c788e952edbfd455b29645f875bdded8cf4eedd", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -1,26 +1,24 @@\n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:32:1\n    |\n-32 |   impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n-   |  _^ starting here...\n+32 | / impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n 33 | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n 34 | |\n 35 | |     // (unsafe to access self.1  due to #[may_dangle] on A)\n 36 | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n 37 | | }\n-   | |_^ ...ending here\n+   | |_^\n \n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:38:1\n    |\n-38 |   impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n-   |  _^ starting here...\n+38 | / impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n 39 | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n 40 | |\n 41 | |     // (unsafe to access self.1 due to #[may_dangle] on 'a)\n 42 | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n 43 | | }\n-   | |_^ ...ending here\n+   | |_^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b51b683a1ac3a5de798a8e3feaea1d315159574d", "filename": "src/test/ui/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -1,11 +1,10 @@\n error: reached the type-length limit while instantiating `<T as Foo><(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(), &()), &(&()...`\n   --> $DIR/issue-37311.rs:23:5\n    |\n-23 |       fn recurse(&self) {\n-   |  _____^ starting here...\n+23 | /     fn recurse(&self) {\n 24 | |         (self, self).recurse();\n 25 | |     }\n-   | |_____^ ...ending here\n+   | |_____^\n    |\n    = note: consider adding a `#![type_length_limit=\"2097152\"]` attribute to your crate\n "}, {"sha": "cf272b63128e8a104f366212646ecac2af4cb3f1", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -8,18 +8,18 @@ note: ...the reference is valid for the lifetime 'a as defined on the body at 11\n   --> $DIR/ex1-return-one-existing-name-if-else.rs:11:44\n    |\n 11 |   fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-   |  ____________________________________________^ starting here...\n+   |  ____________________________________________^\n 12 | |     if x > y { x } else { y }\n 13 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...but the borrowed content is only valid for the anonymous lifetime #1 defined on the body at 11:43\n   --> $DIR/ex1-return-one-existing-name-if-else.rs:11:44\n    |\n 11 |   fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n-   |  ____________________________________________^ starting here...\n+   |  ____________________________________________^\n 12 | |     if x > y { x } else { y }\n 13 | | }\n-   | |_^ ...ending here\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "6e03e66dd258f18c017e63f504d9d13ca13d006e", "filename": "src/test/ui/lifetime-errors/ex2a-push-one-existing-name.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2a-push-one-existing-name.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -10,18 +10,18 @@ note: the anonymous lifetime #2 defined on the body at 15:51...\n   --> $DIR/ex2a-push-one-existing-name.rs:15:52\n    |\n 15 |   fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-   |  ____________________________________________________^ starting here...\n+   |  ____________________________________________________^\n 16 | |     x.push(y);\n 17 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...does not necessarily outlive the lifetime 'a as defined on the body at 15:51\n   --> $DIR/ex2a-push-one-existing-name.rs:15:52\n    |\n 15 |   fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-   |  ____________________________________________________^ starting here...\n+   |  ____________________________________________________^\n 16 | |     x.push(y);\n 17 | | }\n-   | |_^ ...ending here\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "028f54ce97871d98251e85a182af34ec3a441428", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -10,18 +10,18 @@ note: the anonymous lifetime #3 defined on the body at 15:43...\n   --> $DIR/ex2b-push-no-existing-names.rs:15:44\n    |\n 15 |   fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-   |  ____________________________________________^ starting here...\n+   |  ____________________________________________^\n 16 | |     x.push(y);\n 17 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 15:43\n   --> $DIR/ex2b-push-no-existing-names.rs:15:44\n    |\n 15 |   fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-   |  ____________________________________________^ starting here...\n+   |  ____________________________________________^\n 16 | |     x.push(y);\n 17 | | }\n-   | |_^ ...ending here\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "4621214419e42c157666ddd4e72e9af0aa7f7aab", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -8,11 +8,11 @@ note: first, the lifetime cannot outlive the lifetime 'c as defined on the body\n   --> $DIR/ex2c-push-inference-variable.rs:15:67\n    |\n 15 |   fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |  ___________________________________________________________________^ starting here...\n+   |  ___________________________________________________________________^\n 16 | |     let z = Ref { data: y.data };\n 17 | |     x.push(z);\n 18 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/ex2c-push-inference-variable.rs:16:25\n    |\n@@ -22,11 +22,11 @@ note: but, the lifetime must be valid for the lifetime 'b as defined on the body\n   --> $DIR/ex2c-push-inference-variable.rs:15:67\n    |\n 15 |   fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |  ___________________________________________________________________^ starting here...\n+   |  ___________________________________________________________________^\n 16 | |     let z = Ref { data: y.data };\n 17 | |     x.push(z);\n 18 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...so that expression is assignable (expected Ref<'b, _>, found Ref<'_, _>)\n   --> $DIR/ex2c-push-inference-variable.rs:17:12\n    |"}, {"sha": "a69694fdc2e5bb7cdbde99f8b763724fd3fa4baf", "filename": "src/test/ui/lifetime-errors/ex2d-push-inference-variable-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2d-push-inference-variable-2.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -8,12 +8,12 @@ note: first, the lifetime cannot outlive the lifetime 'c as defined on the body\n   --> $DIR/ex2d-push-inference-variable-2.rs:15:67\n    |\n 15 |   fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |  ___________________________________________________________________^ starting here...\n+   |  ___________________________________________________________________^\n 16 | |     let a: &mut Vec<Ref<i32>> = x;\n 17 | |     let b = Ref { data: y.data };\n 18 | |     a.push(b);\n 19 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/ex2d-push-inference-variable-2.rs:17:25\n    |\n@@ -23,12 +23,12 @@ note: but, the lifetime must be valid for the lifetime 'b as defined on the body\n   --> $DIR/ex2d-push-inference-variable-2.rs:15:67\n    |\n 15 |   fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |  ___________________________________________________________________^ starting here...\n+   |  ___________________________________________________________________^\n 16 | |     let a: &mut Vec<Ref<i32>> = x;\n 17 | |     let b = Ref { data: y.data };\n 18 | |     a.push(b);\n 19 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...so that expression is assignable (expected &mut std::vec::Vec<Ref<'_, i32>>, found &mut std::vec::Vec<Ref<'b, i32>>)\n   --> $DIR/ex2d-push-inference-variable-2.rs:16:33\n    |"}, {"sha": "eff15bb794b76a8f602b3afdca71fffea5713f43", "filename": "src/test/ui/lifetime-errors/ex2e-push-inference-variable-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2e-push-inference-variable-3.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -8,12 +8,12 @@ note: first, the lifetime cannot outlive the lifetime 'c as defined on the body\n   --> $DIR/ex2e-push-inference-variable-3.rs:15:67\n    |\n 15 |   fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |  ___________________________________________________________________^ starting here...\n+   |  ___________________________________________________________________^\n 16 | |     let a: &mut Vec<Ref<i32>> = x;\n 17 | |     let b = Ref { data: y.data };\n 18 | |     Vec::push(a, b);\n 19 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/ex2e-push-inference-variable-3.rs:17:25\n    |\n@@ -23,12 +23,12 @@ note: but, the lifetime must be valid for the lifetime 'b as defined on the body\n   --> $DIR/ex2e-push-inference-variable-3.rs:15:67\n    |\n 15 |   fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |  ___________________________________________________________________^ starting here...\n+   |  ___________________________________________________________________^\n 16 | |     let a: &mut Vec<Ref<i32>> = x;\n 17 | |     let b = Ref { data: y.data };\n 18 | |     Vec::push(a, b);\n 19 | | }\n-   | |_^ ...ending here\n+   | |_^\n note: ...so that expression is assignable (expected &mut std::vec::Vec<Ref<'_, i32>>, found &mut std::vec::Vec<Ref<'b, i32>>)\n   --> $DIR/ex2e-push-inference-variable-3.rs:16:33\n    |"}, {"sha": "36bdec8d43afef1b9ca5fba171743cca1963002b", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -37,31 +37,29 @@ error[E0308]: mismatched types\n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:42:5\n    |\n-42 |       X {\n-   |  _____^ starting here...\n+42 | /     X {\n 43 | |         x: X {\n 44 | |             x: \"\".to_string(),\n 45 | |             y: 2,\n 46 | |         },\n 47 | |         y: 3,\n 48 | |     }\n-   | |_____^ ...ending here: expected struct `std::string::String`, found integral variable\n+   | |_____^ expected struct `std::string::String`, found integral variable\n    |\n    = note: expected type `X<X<_, std::string::String>, std::string::String>`\n               found type `X<X<_, {integer}>, {integer}>`\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:52:5\n    |\n-52 |       X {\n-   |  _____^ starting here...\n+52 | /     X {\n 53 | |         x: X {\n 54 | |             x: \"\".to_string(),\n 55 | |             y: 2,\n 56 | |         },\n 57 | |         y: \"\".to_string(),\n 58 | |     }\n-   | |_____^ ...ending here: expected struct `std::string::String`, found integral variable\n+   | |_____^ expected struct `std::string::String`, found integral variable\n    |\n    = note: expected type `X<X<_, std::string::String>, _>`\n               found type `X<X<_, {integer}>, _>`"}, {"sha": "c8941fbf950734c021621508ef1ef3129a95af14", "filename": "src/test/ui/mismatched_types/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmain.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -2,9 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/main.rs:12:18\n    |\n 12 |       let x: u32 = (\n-   |  __________________^ starting here...\n+   |  __________________^\n 13 | |     );\n-   | |_____^ ...ending here: expected u32, found ()\n+   | |_____^ expected u32, found ()\n    |\n    = note: expected type `u32`\n               found type `()`"}, {"sha": "503ce5618d486db165587ec6ccd283399e0ac5f2", "filename": "src/test/ui/missing-items/m2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -3,10 +3,9 @@ error: main function not found\n error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `method`\n   --> $DIR/m2.rs:20:1\n    |\n-20 |   impl m1::X for X {\n-   |  _^ starting here...\n+20 | / impl m1::X for X {\n 21 | | }\n-   | |_^ ...ending here: missing `CONSTANT`, `Type`, `method` in implementation\n+   | |_^ missing `CONSTANT`, `Type`, `method` in implementation\n    |\n    = note: `CONSTANT` from trait: `const CONSTANT: u32;`\n    = note: `Type` from trait: `type Type;`"}, {"sha": "ae290b3b11aa79c5df19475fbd03aaab7ed839b1", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -19,15 +19,14 @@ error[E0046]: not all trait items implemented, missing: `bar`\n 16 |       fn bar(&self);\n    |       -------------- `bar` from trait\n ...\n-22 |   impl Foo for FooConstForMethod {\n-   |  _^ starting here...\n+22 | / impl Foo for FooConstForMethod {\n 23 | |     //~^ ERROR E0046\n 24 | |     //~| NOTE missing `bar` in implementation\n 25 | |     const bar: u64 = 1;\n ...  |\n 28 | |     const MY_CONST: u32 = 1;\n 29 | | }\n-   | |_^ ...ending here: missing `bar` in implementation\n+   | |_^ missing `bar` in implementation\n \n error[E0324]: item `MY_CONST` is an associated method, which doesn't match its trait `Foo`\n   --> $DIR/impl-wrong-item-for-trait.rs:37:5\n@@ -44,15 +43,14 @@ error[E0046]: not all trait items implemented, missing: `MY_CONST`\n 17 |       const MY_CONST: u32;\n    |       -------------------- `MY_CONST` from trait\n ...\n-33 |   impl Foo for FooMethodForConst {\n-   |  _^ starting here...\n+33 | / impl Foo for FooMethodForConst {\n 34 | |     //~^ ERROR E0046\n 35 | |     //~| NOTE missing `MY_CONST` in implementation\n 36 | |     fn bar(&self) {}\n ...  |\n 39 | |     //~| NOTE does not match trait\n 40 | | }\n-   | |_^ ...ending here: missing `MY_CONST` in implementation\n+   | |_^ missing `MY_CONST` in implementation\n \n error[E0325]: item `bar` is an associated type, which doesn't match its trait `Foo`\n   --> $DIR/impl-wrong-item-for-trait.rs:47:5\n@@ -69,23 +67,21 @@ error[E0046]: not all trait items implemented, missing: `bar`\n 16 |       fn bar(&self);\n    |       -------------- `bar` from trait\n ...\n-44 |   impl Foo for FooTypeForMethod {\n-   |  _^ starting here...\n+44 | / impl Foo for FooTypeForMethod {\n 45 | |     //~^ ERROR E0046\n 46 | |     //~| NOTE missing `bar` in implementation\n 47 | |     type bar = u64;\n ...  |\n 50 | |     const MY_CONST: u32 = 1;\n 51 | | }\n-   | |_^ ...ending here: missing `bar` in implementation\n+   | |_^ missing `bar` in implementation\n \n error[E0046]: not all trait items implemented, missing: `fmt`\n   --> $DIR/impl-wrong-item-for-trait.rs:53:1\n    |\n-53 |   impl Debug for FooTypeForMethod {\n-   |  _^ starting here...\n+53 | / impl Debug for FooTypeForMethod {\n 54 | | }\n-   | |_^ ...ending here: missing `fmt` in implementation\n+   | |_^ missing `fmt` in implementation\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n "}, {"sha": "d9f4bacce35ae0650c9d88c39f58329dab187dcc", "filename": "src/test/ui/span/issue-23729.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -1,15 +1,14 @@\n error[E0046]: not all trait items implemented, missing: `Item`\n   --> $DIR/issue-23729.rs:20:9\n    |\n-20 |           impl Iterator for Recurrence {\n-   |  _________^ starting here...\n+20 | /         impl Iterator for Recurrence {\n 21 | |             //~^ ERROR E0046\n 22 | |             //~| NOTE missing `Item` in implementation\n 23 | |             //~| NOTE `Item` from trait: `type Item;`\n ...  |\n 36 | |             }\n 37 | |         }\n-   | |_________^ ...ending here: missing `Item` in implementation\n+   | |_________^ missing `Item` in implementation\n    |\n    = note: `Item` from trait: `type Item;`\n "}, {"sha": "3127af157a62bbb8184673b6398e6f4993db4230", "filename": "src/test/ui/span/issue-23827.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -1,15 +1,14 @@\n error[E0046]: not all trait items implemented, missing: `Output`\n   --> $DIR/issue-23827.rs:36:1\n    |\n-36 |   impl<C: Component> FnOnce<(C,)> for Prototype {\n-   |  _^ starting here...\n+36 | / impl<C: Component> FnOnce<(C,)> for Prototype {\n 37 | |     //~^ ERROR E0046\n 38 | |     //~| NOTE missing `Output` in implementation\n 39 | |     //~| NOTE `Output` from trait: `type Output;`\n ...  |\n 42 | |     }\n 43 | | }\n-   | |_^ ...ending here: missing `Output` in implementation\n+   | |_^ missing `Output` in implementation\n    |\n    = note: `Output` from trait: `type Output;`\n "}, {"sha": "71ab82d98b809abee614d08c740e37a5266d8ee6", "filename": "src/test/ui/span/issue-24356.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -1,14 +1,13 @@\n error[E0046]: not all trait items implemented, missing: `Target`\n   --> $DIR/issue-24356.rs:30:9\n    |\n-30 |           impl Deref for Thing {\n-   |  _________^ starting here...\n+30 | /         impl Deref for Thing {\n 31 | |             //~^ ERROR E0046\n 32 | |             //~| NOTE missing `Target` in implementation\n 33 | |             //~| NOTE `Target` from trait: `type Target;`\n 34 | |             fn deref(&self) -> i8 { self.0 }\n 35 | |         }\n-   | |_________^ ...ending here: missing `Target` in implementation\n+   | |_________^ missing `Target` in implementation\n    |\n    = note: `Target` from trait: `type Target;`\n "}, {"sha": "8b813220d789de781b21f5dc635f3aa882cb2003", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -38,11 +38,10 @@ error: no method named `fff` found for type `Myisize` in the current scope\n note: candidate #1 is defined in an impl for the type `Myisize`\n   --> $DIR/issue-7575.rs:51:5\n    |\n-51 |       fn fff(i: isize) -> isize { //~ NOTE candidate\n-   |  _____^ starting here...\n+51 | /     fn fff(i: isize) -> isize { //~ NOTE candidate\n 52 | |         i\n 53 | |     }\n-   | |_____^ ...ending here\n+   | |_____^\n \n error: no method named `is_str` found for type `T` in the current scope\n   --> $DIR/issue-7575.rs:85:7\n@@ -54,11 +53,10 @@ error: no method named `is_str` found for type `T` in the current scope\n note: candidate #1 is defined in the trait `ManyImplTrait`\n   --> $DIR/issue-7575.rs:57:5\n    |\n-57 |       fn is_str() -> bool { //~ NOTE candidate\n-   |  _____^ starting here...\n+57 | /     fn is_str() -> bool { //~ NOTE candidate\n 58 | |         false\n 59 | |     }\n-   | |_____^ ...ending here\n+   | |_____^\n    = help: to disambiguate the method call, write `ManyImplTrait::is_str(t)` instead\n    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `is_str`, perhaps you need to implement it:\n    = help: candidate #1: `ManyImplTrait`"}, {"sha": "f4998e08907a387f55b897ab80f5cc47e203d540", "filename": "src/test/ui/span/lint-unused-unsafe.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -49,68 +49,62 @@ note: because it's nested under this `unsafe` fn\n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:33:9\n    |\n-33 |           unsafe {                         //~ ERROR: unnecessary `unsafe` block\n-   |  _________^ starting here...\n+33 | /         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 34 | |             unsf()\n 35 | |         }\n-   | |_________^ ...ending here: unnecessary `unsafe` block\n+   | |_________^ unnecessary `unsafe` block\n    |\n note: because it's nested under this `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:32:5\n    |\n-32 |       unsafe {                             // don't put the warning here\n-   |  _____^ starting here...\n+32 | /     unsafe {                             // don't put the warning here\n 33 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 34 | |             unsf()\n 35 | |         }\n 36 | |     }\n-   | |_____^ ...ending here\n+   | |_____^\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:39:5\n    |\n-39 |       unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-   |  _____^ starting here...\n+39 | /     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n 40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 41 | |             unsf()\n 42 | |         }\n 43 | |     }\n-   | |_____^ ...ending here: unnecessary `unsafe` block\n+   | |_____^ unnecessary `unsafe` block\n    |\n note: because it's nested under this `unsafe` fn\n   --> $DIR/lint-unused-unsafe.rs:38:1\n    |\n-38 |   unsafe fn bad7() {\n-   |  _^ starting here...\n+38 | / unsafe fn bad7() {\n 39 | |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n 40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 41 | |             unsf()\n 42 | |         }\n 43 | |     }\n 44 | | }\n-   | |_^ ...ending here\n+   | |_^\n \n error: unnecessary `unsafe` block\n   --> $DIR/lint-unused-unsafe.rs:40:9\n    |\n-40 |           unsafe {                         //~ ERROR: unnecessary `unsafe` block\n-   |  _________^ starting here...\n+40 | /         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 41 | |             unsf()\n 42 | |         }\n-   | |_________^ ...ending here: unnecessary `unsafe` block\n+   | |_________^ unnecessary `unsafe` block\n    |\n note: because it's nested under this `unsafe` fn\n   --> $DIR/lint-unused-unsafe.rs:38:1\n    |\n-38 |   unsafe fn bad7() {\n-   |  _^ starting here...\n+38 | / unsafe fn bad7() {\n 39 | |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n 40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n 41 | |             unsf()\n 42 | |         }\n 43 | |     }\n 44 | | }\n-   | |_^ ...ending here\n+   | |_^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "9c6816e736313c534e6bc6df1579a47e9bfcbcce", "filename": "src/test/ui/span/multiline-span-E0072.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -1,14 +1,13 @@\n error[E0072]: recursive type `ListNode` has infinite size\n   --> $DIR/multiline-span-E0072.rs:12:1\n    |\n-12 |   struct\n-   |  _^ starting here...\n+12 | / struct\n 13 | | ListNode\n 14 | | {\n 15 | |     head: u8,\n 16 | |     tail: Option<ListNode>,\n 17 | | }\n-   | |_^ ...ending here: recursive type has infinite size\n+   | |_^ recursive type has infinite size\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ListNode` representable\n "}, {"sha": "843c1e811d578393ea375cc42338d38a773e7749", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -2,12 +2,12 @@ error[E0277]: the trait bound `u32: std::ops::Add<()>` is not satisfied\n   --> $DIR/multiline-span-simple.rs:23:9\n    |\n 23 |       foo(1 as u32 +\n-   |  _________^ starting here...\n+   |  _________^\n 24 | |\n 25 | |         bar(x,\n 26 | |\n 27 | |             y),\n-   | |______________^ ...ending here: the trait `std::ops::Add<()>` is not implemented for `u32`\n+   | |______________^ the trait `std::ops::Add<()>` is not implemented for `u32`\n    |\n    = note: no implementation for `u32 + ()`\n "}, {"sha": "7a76799889b97385d114fe863b94ed0573acc925", "filename": "src/test/ui/type-check/issue-40294.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c357e421eebff58eb6948c8e1412ae7d8069/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr?ref=cc07c357e421eebff58eb6948c8e1412ae7d8069", "patch": "@@ -1,15 +1,14 @@\n error[E0282]: type annotations needed\n   --> $DIR/issue-40294.rs:15:1\n    |\n-15 |   fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n-   |  _^ starting here...\n+15 | / fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n 16 | |     where &'a T : Foo,\n 17 | |           &'b T : Foo\n 18 | | {\n 19 | |     x.foo();\n 20 | |     y.foo();\n 21 | | }\n-   | |_^ ...ending here: cannot infer type for `&'a T`\n+   | |_^ cannot infer type for `&'a T`\n \n error: aborting due to previous error\n "}]}