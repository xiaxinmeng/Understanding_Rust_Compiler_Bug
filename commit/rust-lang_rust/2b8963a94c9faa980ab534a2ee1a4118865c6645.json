{"sha": "2b8963a94c9faa980ab534a2ee1a4118865c6645", "node_id": "C_kwDOAAsO6NoAKDJiODk2M2E5NGM5ZmFhOTgwYWI1MzRhMmVlMWE0MTE4ODY1YzY2NDU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-03T08:14:43Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:00:02Z"}, "message": "Some manual formatting of let..else statements", "tree": {"sha": "81fc30a7fec981e49ed347fda2440d0f22a45614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81fc30a7fec981e49ed347fda2440d0f22a45614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8963a94c9faa980ab534a2ee1a4118865c6645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8963a94c9faa980ab534a2ee1a4118865c6645", "html_url": "https://github.com/rust-lang/rust/commit/2b8963a94c9faa980ab534a2ee1a4118865c6645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8963a94c9faa980ab534a2ee1a4118865c6645/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a94a2d385657dfa89bf2d46d2a6114be70afef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a94a2d385657dfa89bf2d46d2a6114be70afef0", "html_url": "https://github.com/rust-lang/rust/commit/2a94a2d385657dfa89bf2d46d2a6114be70afef0"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "fbc055b5d238f8690555df090b99c3e267f4b126", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2b8963a94c9faa980ab534a2ee1a4118865c6645/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8963a94c9faa980ab534a2ee1a4118865c6645/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=2b8963a94c9faa980ab534a2ee1a4118865c6645", "patch": "@@ -325,8 +325,8 @@ fn layout_of_uncached<'tcx>(\n \n                 // Extract the number of elements from the layout of the array field:\n                 let FieldsShape::Array { count, .. } = cx.layout_of(f0_ty)?.layout.fields() else {\n-                        return Err(LayoutError::Unknown(ty));\n-                    };\n+                    return Err(LayoutError::Unknown(ty));\n+                };\n \n                 (*e_ty, *count, true)\n             } else {\n@@ -351,14 +351,14 @@ fn layout_of_uncached<'tcx>(\n             // Compute the ABI of the element type:\n             let e_ly = cx.layout_of(e_ty)?;\n             let Abi::Scalar(e_abi) = e_ly.abi else {\n-                    // This error isn't caught in typeck, e.g., if\n-                    // the element type of the vector is generic.\n-                    tcx.sess.fatal(&format!(\n-                        \"monomorphising SIMD type `{}` with a non-primitive-scalar \\\n-                        (integer/float/pointer) element type `{}`\",\n-                        ty, e_ty\n-                    ))\n-                };\n+                // This error isn't caught in typeck, e.g., if\n+                // the element type of the vector is generic.\n+                tcx.sess.fatal(&format!(\n+                    \"monomorphising SIMD type `{}` with a non-primitive-scalar \\\n+                    (integer/float/pointer) element type `{}`\",\n+                    ty, e_ty\n+                ))\n+            };\n \n             // Compute the size and alignment of the vector:\n             let size = e_ly.size.checked_mul(e_len, dl).ok_or(LayoutError::SizeOverflow(ty))?;\n@@ -597,8 +597,8 @@ fn generator_layout<'tcx>(\n     let subst_field = |ty: Ty<'tcx>| EarlyBinder(ty).subst(tcx, substs);\n \n     let Some(info) = tcx.generator_layout(def_id) else {\n-            return Err(LayoutError::Unknown(ty));\n-        };\n+        return Err(LayoutError::Unknown(ty));\n+    };\n     let (ineligible_locals, assignments) = generator_saved_local_eligibility(&info);\n \n     // Build a prefix layout, including \"promoting\" all ineligible\n@@ -701,8 +701,8 @@ fn generator_layout<'tcx>(\n             variant.variants = Variants::Single { index };\n \n             let FieldsShape::Arbitrary { offsets, memory_index } = variant.fields else {\n-                    bug!();\n-                };\n+                bug!();\n+            };\n \n             // Now, stitch the promoted and variant-only fields back together in\n             // the order they are mentioned by our GeneratorLayout."}]}