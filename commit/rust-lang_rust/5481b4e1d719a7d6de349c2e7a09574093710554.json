{"sha": "5481b4e1d719a7d6de349c2e7a09574093710554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ODFiNGUxZDcxOWE3ZDZkZTM0OWMyZTdhMDk1NzQwOTM3MTA1NTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-22T18:31:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-22T18:31:16Z"}, "message": "Rollup merge of #59106 - LinusU:udp-peer-addr, r=kennytm\n\nAdd peer_addr function to UdpSocket\n\nFixes #59104\n\nThis is my first pull request to Rust, so opening early for some feedback.\n\nMy biggest question is: where do I add tests?\n\nAny comments very much appreciated!", "tree": {"sha": "e001fd07aebdb4b00cbfa02d1663e33ef5911e9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e001fd07aebdb4b00cbfa02d1663e33ef5911e9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5481b4e1d719a7d6de349c2e7a09574093710554", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJclSn0CRBK7hj4Ov3rIwAAdHIIAFbKiZS6jEjciCToYFKPDS4A\n2AXvzxhHbOOSr17ujOdBtFcyz3biqquq6FPilFzXBzXmnJ5SxyuDFy4ov2/W/zj1\n2z+OfADaUYXBBUax9nXZa3BFG5QkUHdrYz1nUptY0JyEyMlx0pAXZcGdum9P7+3/\nTAs/GbVjReE2v9OjobqdYS8qLHhVKJpuNwk5TxhAc3ndMT5dZt5r9DWRc7acn4Gx\nFI4cyBFYZxTqoNlnUH/7K+m9jS3VbUrf6VMqygBaDCDR9rHgjF2vf9OMeYBFeT6/\nGMHhIfSuboXYTgAVKShvKZa8P1lqjVYSUTSv/fIPcgZUzyXYm/BROXMY0lpw4rU=\n=gu1e\n-----END PGP SIGNATURE-----\n", "payload": "tree e001fd07aebdb4b00cbfa02d1663e33ef5911e9e\nparent ed196221d889ae8a87be677402e4319237ef67f4\nparent 81d5fb5c6fc65e947ff97c02997bfff9a1f6ce16\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553279476 +0100\ncommitter GitHub <noreply@github.com> 1553279476 +0100\n\nRollup merge of #59106 - LinusU:udp-peer-addr, r=kennytm\n\nAdd peer_addr function to UdpSocket\n\nFixes #59104\n\nThis is my first pull request to Rust, so opening early for some feedback.\n\nMy biggest question is: where do I add tests?\n\nAny comments very much appreciated!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5481b4e1d719a7d6de349c2e7a09574093710554", "html_url": "https://github.com/rust-lang/rust/commit/5481b4e1d719a7d6de349c2e7a09574093710554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5481b4e1d719a7d6de349c2e7a09574093710554/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed196221d889ae8a87be677402e4319237ef67f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed196221d889ae8a87be677402e4319237ef67f4", "html_url": "https://github.com/rust-lang/rust/commit/ed196221d889ae8a87be677402e4319237ef67f4"}, {"sha": "81d5fb5c6fc65e947ff97c02997bfff9a1f6ce16", "url": "https://api.github.com/repos/rust-lang/rust/commits/81d5fb5c6fc65e947ff97c02997bfff9a1f6ce16", "html_url": "https://github.com/rust-lang/rust/commit/81d5fb5c6fc65e947ff97c02997bfff9a1f6ce16"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "b42a8123042694b52b89e48ba8f1adf8e9c6b627", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=5481b4e1d719a7d6de349c2e7a09574093710554", "patch": "@@ -180,6 +180,37 @@ impl UdpSocket {\n         }\n     }\n \n+    /// Returns the socket address of the remote peer this socket was connected to.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(udp_peer_addr)]\n+    /// use std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, UdpSocket};\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// socket.connect(\"192.168.0.1:41203\").expect(\"couldn't connect to address\");\n+    /// assert_eq!(socket.peer_addr().unwrap(),\n+    ///            SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(192, 168, 0, 1), 41203)));\n+    /// ```\n+    ///\n+    /// If the socket isn't connected, it will return a [`NotConnected`] error.\n+    ///\n+    /// [`NotConnected`]: ../../std/io/enum.ErrorKind.html#variant.NotConnected\n+    ///\n+    /// ```no_run\n+    /// #![feature(udp_peer_addr)]\n+    /// use std::net::UdpSocket;\n+    ///\n+    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n+    /// assert_eq!(socket.peer_addr().unwrap_err().kind(),\n+    ///            ::std::io::ErrorKind::NotConnected);\n+    /// ```\n+    #[unstable(feature = \"udp_peer_addr\", issue = \"59127\")]\n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        self.0.peer_addr()\n+    }\n+\n     /// Returns the socket address that this socket was created from.\n     ///\n     /// # Examples\n@@ -865,13 +896,23 @@ mod tests {\n     }\n \n     #[test]\n-    fn socket_name_ip4() {\n+    fn socket_name() {\n         each_ip(&mut |addr, _| {\n             let server = t!(UdpSocket::bind(&addr));\n             assert_eq!(addr, t!(server.local_addr()));\n         })\n     }\n \n+    #[test]\n+    fn socket_peer() {\n+        each_ip(&mut |addr1, addr2| {\n+            let server = t!(UdpSocket::bind(&addr1));\n+            assert_eq!(server.peer_addr().unwrap_err().kind(), ErrorKind::NotConnected);\n+            t!(server.connect(&addr2));\n+            assert_eq!(addr2, t!(server.peer_addr()));\n+        })\n+    }\n+\n     #[test]\n     fn udp_clone_smoke() {\n         each_ip(&mut |addr1, addr2| {"}, {"sha": "4364a1365443a20f27bd97ae1a05f128943b70ff", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=5481b4e1d719a7d6de349c2e7a09574093710554", "patch": "@@ -159,6 +159,10 @@ impl UdpSocket {\n         unsupported()\n     }\n \n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "274123dce4b5846110be17196db5433ebebd726d", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=5481b4e1d719a7d6de349c2e7a09574093710554", "patch": "@@ -72,6 +72,11 @@ impl UdpSocket {\n         Ok(None)\n     }\n \n+    pub fn peer_addr(&self) -> Result<SocketAddr> {\n+        let path = self.0.path()?;\n+        Ok(path_to_peer_addr(path.to_str().unwrap_or(\"\")))\n+    }\n+\n     pub fn socket_addr(&self) -> Result<SocketAddr> {\n         let path = self.0.path()?;\n         Ok(path_to_local_addr(path.to_str().unwrap_or(\"\")))"}, {"sha": "81f33c16294c3679d666929b7ba1d35e3a076af0", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=5481b4e1d719a7d6de349c2e7a09574093710554", "patch": "@@ -249,6 +249,10 @@ impl UdpSocket {\n         unsupported()\n     }\n \n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "b3dd1cf6aaac7b8620ba75c26155810e1929adf7", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=5481b4e1d719a7d6de349c2e7a09574093710554", "patch": "@@ -292,6 +292,10 @@ pub mod net {\n \n         pub fn into_socket(self) -> Socket { self.inner }\n \n+        pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+            unimpl!();\n+        }\n+\n         pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n             unimpl!();\n         }\n@@ -463,4 +467,3 @@ pub mod net {\n         }\n     }\n }\n-"}, {"sha": "c85dd000afe6f4434e05b5cf6522cf774bed3d2b", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=5481b4e1d719a7d6de349c2e7a09574093710554", "patch": "@@ -156,6 +156,10 @@ impl UdpSocket {\n         unsupported()\n     }\n \n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         match self.0 {}\n     }"}, {"sha": "b77bcee4b9d04b4c107f29d6018a1aba5fd52e02", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5481b4e1d719a7d6de349c2e7a09574093710554/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=5481b4e1d719a7d6de349c2e7a09574093710554", "patch": "@@ -472,6 +472,12 @@ impl UdpSocket {\n \n     pub fn into_socket(self) -> Socket { self.inner }\n \n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        sockname(|buf, len| unsafe {\n+            c::getpeername(*self.inner.as_inner(), buf, len)\n+        })\n+    }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         sockname(|buf, len| unsafe {\n             c::getsockname(*self.inner.as_inner(), buf, len)"}]}