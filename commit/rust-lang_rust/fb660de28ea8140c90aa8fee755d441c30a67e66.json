{"sha": "fb660de28ea8140c90aa8fee755d441c30a67e66", "node_id": "C_kwDOAAsO6NoAKGZiNjYwZGUyOGVhODE0MGM5MGFhOGZlZTc1NWQ0NDFjMzBhNjdlNjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-17T14:58:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-17T14:58:05Z"}, "message": "Rollup merge of #90900 - andjo403:removeLlvm12Check, r=nikic\n\nRemove workaround for the forward progress handling in LLVM\n\nthis workaround was only needed for LLVM < 12 and the minimum LLVM version was updated to 12 in #90175", "tree": {"sha": "f3fd40df830cc9967802d7f1dc6182f3494fea63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3fd40df830cc9967802d7f1dc6182f3494fea63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb660de28ea8140c90aa8fee755d441c30a67e66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlRh9CRBK7hj4Ov3rIwAASEUIAF4wacIPOCphwixuEN8aA5VK\nZJohdUf3EFedJBkCtvQgwEvqyqQPRU0inOoYpEf8i6+SEDmBEToyuyJbK/yKlu3q\niRt0k0M5Y6MkVcNyo2+Pn5D28hpDW9oXeHG1IjN+OBgJMh1jUoGuXKvQ9IUSoDfL\n/KLT8N0bEHZqCTLNkg1ak1oezwLId/kt1mK9UTKJqlFC9Aqa/nIRQLr+pXJJUsxj\nQFLusqOwclEMA0Kn3wUJEs5iCyfI//vYzA5YtXooxJCSjIyw8YhDfhwqq8f/6W93\nZxBhzP6KEOzkR3w1doc69O3ll9A7tN6T0wYm+U+4jhGuXwN3z2jXhlxca2HnRZw=\n=pPlA\n-----END PGP SIGNATURE-----\n", "payload": "tree f3fd40df830cc9967802d7f1dc6182f3494fea63\nparent 23ad7a7697f7e02252cf0c3f7f22641f0adb51e4\nparent 50ec47aa06e96a195707fb5ee92fcd32299ca272\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637161085 +0100\ncommitter GitHub <noreply@github.com> 1637161085 +0100\n\nRollup merge of #90900 - andjo403:removeLlvm12Check, r=nikic\n\nRemove workaround for the forward progress handling in LLVM\n\nthis workaround was only needed for LLVM < 12 and the minimum LLVM version was updated to 12 in #90175\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb660de28ea8140c90aa8fee755d441c30a67e66", "html_url": "https://github.com/rust-lang/rust/commit/fb660de28ea8140c90aa8fee755d441c30a67e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb660de28ea8140c90aa8fee755d441c30a67e66/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ad7a7697f7e02252cf0c3f7f22641f0adb51e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ad7a7697f7e02252cf0c3f7f22641f0adb51e4", "html_url": "https://github.com/rust-lang/rust/commit/23ad7a7697f7e02252cf0c3f7f22641f0adb51e4"}, {"sha": "50ec47aa06e96a195707fb5ee92fcd32299ca272", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ec47aa06e96a195707fb5ee92fcd32299ca272", "html_url": "https://github.com/rust-lang/rust/commit/50ec47aa06e96a195707fb5ee92fcd32299ca272"}], "stats": {"total": 31, "additions": 1, "deletions": 30}, "files": [{"sha": "f3a2382ef32d901c5e179f772b51b53dbcf384f1", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=fb660de28ea8140c90aa8fee755d441c30a67e66", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     extended_asm.add_input_operand(None, \"r\", result.llval);\n                     extended_asm.add_clobber(\"memory\");\n                     extended_asm.set_volatile_flag(true);\n-                    \n+\n                     // We have copied the value to `result` already.\n                     return;\n                 }\n@@ -363,10 +363,6 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         cond\n     }\n \n-    fn sideeffect(&mut self) {\n-        // TODO(antoyo)\n-    }\n-\n     fn type_test(&mut self, _pointer: Self::Value, _typeid: Self::Value) -> Self::Value {\n         // Unsupported.\n         self.context.new_rvalue_from_int(self.int_type, 0)"}, {"sha": "613a8df891ce4e5914e5ba617402db72b58362e9", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=fb660de28ea8140c90aa8fee755d441c30a67e66", "patch": "@@ -597,7 +597,6 @@ impl CodegenCx<'b, 'tcx> {\n         ifn!(\"llvm.trap\", fn() -> void);\n         ifn!(\"llvm.debugtrap\", fn() -> void);\n         ifn!(\"llvm.frameaddress\", fn(t_i32) -> i8p);\n-        ifn!(\"llvm.sideeffect\", fn() -> void);\n \n         ifn!(\"llvm.powi.f32\", fn(t_f32, t_i32) -> t_f32);\n         ifn!(\"llvm.powi.f64\", fn(t_f64, t_i32) -> t_f64);"}, {"sha": "a7e34b080594bc1005f9dabcc9a63e1982441236", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=fb660de28ea8140c90aa8fee755d441c30a67e66", "patch": "@@ -392,15 +392,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         self.call_intrinsic(\"llvm.expect.i1\", &[cond, self.const_bool(expected)])\n     }\n \n-    fn sideeffect(&mut self) {\n-        // This kind of check would make a ton of sense in the caller, but currently the only\n-        // caller of this function is in `rustc_codegen_ssa`, which is agnostic to whether LLVM\n-        // codegen backend being used, and so is unable to check the LLVM version.\n-        if unsafe { llvm::LLVMRustVersionMajor() } < 12 {\n-            self.call_intrinsic(\"llvm.sideeffect\", &[]);\n-        }\n-    }\n-\n     fn type_test(&mut self, pointer: Self::Value, typeid: Self::Value) -> Self::Value {\n         // Test the called operand using llvm.type.test intrinsic. The LowerTypeTests link-time\n         // optimization pass replaces calls to this intrinsic with code to test type membership."}, {"sha": "c8f388bfa1d5ab920bdbedf8171407aa8e52cb03", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=fb660de28ea8140c90aa8fee755d441c30a67e66", "patch": "@@ -980,17 +980,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::TerminatorKind::Goto { target } => {\n-                if bb == target {\n-                    // This is an unconditional branch back to this same basic block. That means we\n-                    // have something like a `loop {}` statement. LLVM versions before 12.0\n-                    // miscompile this because they assume forward progress. For older versions\n-                    // try to handle just this specific case which comes up commonly in practice\n-                    // (e.g., in embedded code).\n-                    //\n-                    // NB: the `sideeffect` currently checks for the LLVM version used internally.\n-                    bx.sideeffect();\n-                }\n-\n                 helper.funclet_br(self, &mut bx, target);\n             }\n "}, {"sha": "02be6cd360c72e2d6675f9a6990cb29f83569917", "filename": "compiler/rustc_codegen_ssa/src/traits/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb660de28ea8140c90aa8fee755d441c30a67e66/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs?ref=fb660de28ea8140c90aa8fee755d441c30a67e66", "patch": "@@ -20,10 +20,6 @@ pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     fn abort(&mut self);\n     fn assume(&mut self, val: Self::Value);\n     fn expect(&mut self, cond: Self::Value, expected: bool) -> Self::Value;\n-    /// Emits a forced side effect.\n-    ///\n-    /// Currently has any effect only when LLVM versions prior to 12.0 are used as the backend.\n-    fn sideeffect(&mut self);\n     /// Trait method used to test whether a given pointer is associated with a type identifier.\n     fn type_test(&mut self, pointer: Self::Value, typeid: Self::Value) -> Self::Value;\n     /// Trait method used to inject `va_start` on the \"spoofed\" `VaListImpl` in"}]}