{"sha": "815f5bbcc53dbb40c11127f26080e0ad9b7dc935", "node_id": "C_kwDOAAsO6NoAKDgxNWY1YmJjYzUzZGJiNDBjMTExMjdmMjYwODBlMGFkOWI3ZGM5MzU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-06T21:53:29Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-06T23:25:38Z"}, "message": "rustdoc: clean up JS\n\n* Stop checking `func` in `onEach`. It's always hard-coded right\n  at the call site, so there's no point.\n* Use the ternary operator in a few spots where it makes sense.\n* No point in making `onEach` store `arr.length` in a variable if\n  it's only used once anyway.", "tree": {"sha": "bcdfafdba8550c7d6309f8c2f12bb61fa686e629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcdfafdba8550c7d6309f8c2f12bb61fa686e629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/815f5bbcc53dbb40c11127f26080e0ad9b7dc935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/815f5bbcc53dbb40c11127f26080e0ad9b7dc935", "html_url": "https://github.com/rust-lang/rust/commit/815f5bbcc53dbb40c11127f26080e0ad9b7dc935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/815f5bbcc53dbb40c11127f26080e0ad9b7dc935/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de74dab880447f5227030b261dbd0f2bc4f32dba", "url": "https://api.github.com/repos/rust-lang/rust/commits/de74dab880447f5227030b261dbd0f2bc4f32dba", "html_url": "https://github.com/rust-lang/rust/commit/de74dab880447f5227030b261dbd0f2bc4f32dba"}], "stats": {"total": 37, "additions": 9, "deletions": 28}, "files": [{"sha": "56ee4c1510e8f044a2c16d2392a7d3ba2d16bf19", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/815f5bbcc53dbb40c11127f26080e0ad9b7dc935/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/815f5bbcc53dbb40c11127f26080e0ad9b7dc935/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=815f5bbcc53dbb40c11127f26080e0ad9b7dc935", "patch": "@@ -332,13 +332,7 @@ function preLoadCss(cssUrl) {\n     };\n \n     function getPageId() {\n-        if (window.location.hash) {\n-            const tmp = window.location.hash.replace(/^#/, \"\");\n-            if (tmp.length > 0) {\n-                return tmp;\n-            }\n-        }\n-        return null;\n+        return window.location.hash.replace(/^#/, \"\");\n     }\n \n     const toggleAllDocsId = \"toggle-all-docs\";\n@@ -707,7 +701,7 @@ function preLoadCss(cssUrl) {\n         });\n \n         const pageId = getPageId();\n-        if (pageId !== null) {\n+        if (pageId !== \"\") {\n             expandSection(pageId);\n         }\n     }());"}, {"sha": "ebbe6c1ca9a24ff32341bc15a60a21a8e52f336e", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/815f5bbcc53dbb40c11127f26080e0ad9b7dc935/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/815f5bbcc53dbb40c11127f26080e0ad9b7dc935/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=815f5bbcc53dbb40c11127f26080e0ad9b7dc935", "patch": "@@ -86,12 +86,8 @@\n             if (settingId === \"theme\") {\n                 const useSystem = getSettingValue(\"use-system-theme\");\n                 if (useSystem === \"true\" || settingValue === null) {\n-                    if (useSystem !== \"false\") {\n-                        settingValue = \"system preference\";\n-                    } else {\n-                        // This is the default theme.\n-                        settingValue = \"light\";\n-                    }\n+                    // \"light\" is the default theme\n+                    settingValue = useSystem === \"false\" ? \"light\" : \"system preference\";\n                 }\n             }\n             if (settingValue !== null && settingValue !== \"null\") {"}, {"sha": "9ce09cd502e611fa82306e046d91fd847ef37004", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/815f5bbcc53dbb40c11127f26080e0ad9b7dc935/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/815f5bbcc53dbb40c11127f26080e0ad9b7dc935/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=815f5bbcc53dbb40c11127f26080e0ad9b7dc935", "patch": "@@ -53,10 +53,9 @@ function removeClass(elem, className) {\n  * @param {boolean}     [reversed] - Whether to iterate in reverse\n  */\n function onEach(arr, func, reversed) {\n-    if (arr && arr.length > 0 && func) {\n+    if (arr && arr.length > 0) {\n         if (reversed) {\n-            const length = arr.length;\n-            for (let i = length - 1; i >= 0; --i) {\n+            for (let i = arr.length - 1; i >= 0; --i) {\n                 if (func(arr[i])) {\n                     return true;\n                 }\n@@ -150,26 +149,18 @@ const updateTheme = (function() {\n      * \u2026 dictates that it should be.\n      */\n     function updateTheme() {\n-        const use = (theme, saveTheme) => {\n-            switchTheme(theme, saveTheme);\n-        };\n-\n         // maybe the user has disabled the setting in the meantime!\n         if (getSettingValue(\"use-system-theme\") !== \"false\") {\n             const lightTheme = getSettingValue(\"preferred-light-theme\") || \"light\";\n             const darkTheme = getSettingValue(\"preferred-dark-theme\") || \"dark\";\n \n-            if (mql.matches) {\n-                use(darkTheme, true);\n-            } else {\n-                // prefers a light theme, or has no preference\n-                use(lightTheme, true);\n-            }\n+            // use light theme if user prefers it, or has no preference\n+            switchTheme(mql.matches ? darkTheme : lightTheme, true);\n             // note: we save the theme so that it doesn't suddenly change when\n             // the user disables \"use-system-theme\" and reloads the page or\n             // navigates to another page\n         } else {\n-            use(getSettingValue(\"theme\"), false);\n+            switchTheme(getSettingValue(\"theme\"), false);\n         }\n     }\n "}]}