{"sha": "12806b70506508c4ec187f0223e1e86f89167448", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyODA2YjcwNTA2NTA4YzRlYzE4N2YwMjIzZTFlODZmODkxNjc0NDg=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-06-25T21:22:45Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-06-26T11:59:58Z"}, "message": "Fix clippy::redundant_field_names", "tree": {"sha": "a663ea3ff5988817ec0e42dcfe4fcc5a9a5787a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a663ea3ff5988817ec0e42dcfe4fcc5a9a5787a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12806b70506508c4ec187f0223e1e86f89167448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12806b70506508c4ec187f0223e1e86f89167448", "html_url": "https://github.com/rust-lang/rust/commit/12806b70506508c4ec187f0223e1e86f89167448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12806b70506508c4ec187f0223e1e86f89167448/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dedcd97e92f190ee99aa271c6cfd8978f123d731", "url": "https://api.github.com/repos/rust-lang/rust/commits/dedcd97e92f190ee99aa271c6cfd8978f123d731", "html_url": "https://github.com/rust-lang/rust/commit/dedcd97e92f190ee99aa271c6cfd8978f123d731"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "0fb8060031843a156cf2344ec194a07bb6e95c09", "filename": "src/librustc_data_structures/vec_linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibrustc_data_structures%2Fvec_linked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibrustc_data_structures%2Fvec_linked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fvec_linked_list.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -8,7 +8,7 @@ where\n     Ls: Links,\n {\n     VecLinkedListIterator {\n-        links: links,\n+        links,\n         current: first,\n     }\n }"}, {"sha": "3641d355ef19c9aa08a7758e0771f43267db4e3c", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -94,7 +94,7 @@ impl<'a>  DiagnosticConverter<'a> {\n                     annotation_type: Self::annotation_type_for_level(self.level),\n                 }),\n                 footer: vec![],\n-                slices: slices,\n+                slices,\n             })\n         } else {\n             // FIXME(#59346): Is it ok to return None if there's no source_map?"}, {"sha": "424d7c00383899897bafda051fedc4c61470dae1", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -388,7 +388,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             style: SuggestionStyle::CompletelyHidden,\n-            applicability: applicability,\n+            applicability,\n         });\n         self\n     }"}, {"sha": "48749dff941ac00cfe15e759160af5d2639cae8b", "filename": "src/librustc_target/spec/fuchsia_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffuchsia_base.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -19,7 +19,7 @@ pub fn opts() -> TargetOptions {\n         is_like_fuchsia: true,\n         linker_is_gnu: true,\n         has_rpath: false,\n-        pre_link_args: pre_link_args,\n+        pre_link_args,\n         pre_link_objects_exe: vec![\n             \"Scrt1.o\".to_string()\n         ],"}, {"sha": "826954ce2168c0a1a91c80c71d7bd00c8fc29d3b", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -461,7 +461,7 @@ impl<'a> Encoder<'a> {\n     /// Creates a new JSON encoder whose output will be written to the writer\n     /// specified.\n     pub fn new(writer: &'a mut dyn fmt::Write) -> Encoder<'a> {\n-        Encoder { writer: writer, is_emitting_map_key: false, }\n+        Encoder { writer, is_emitting_map_key: false, }\n     }\n }\n "}, {"sha": "c627596bbdf20ea7720e5175660b07787c8f5a09", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -1832,7 +1832,7 @@ impl Arg {\n                         lt,\n                         MutTy {\n                             ty: infer_ty,\n-                            mutbl: mutbl,\n+                            mutbl,\n                         },\n                     ),\n                     span,\n@@ -2120,7 +2120,7 @@ impl PolyTraitRef {\n         PolyTraitRef {\n             bound_generic_params: generic_params,\n             trait_ref: TraitRef {\n-                path: path,\n+                path,\n                 ref_id: DUMMY_NODE_ID,\n             },\n             span,"}, {"sha": "baf1031de1e7c40ddbe0f5f84be5bfa792f25ed6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -815,7 +815,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n \n     fn pat(&self, span: Span, pat: PatKind) -> P<ast::Pat> {\n-        P(ast::Pat { id: ast::DUMMY_NODE_ID, node: pat, span: span })\n+        P(ast::Pat { id: ast::DUMMY_NODE_ID, node: pat, span })\n     }\n     fn pat_wild(&self, span: Span) -> P<ast::Pat> {\n         self.pat(span, PatKind::Wild)"}, {"sha": "5473f55aa33704053b03cdf982f7f108fc162a9a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -231,7 +231,7 @@ pub struct MacroExpander<'a, 'b> {\n \n impl<'a, 'b> MacroExpander<'a, 'b> {\n     pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n-        MacroExpander { cx: cx, monotonic: monotonic }\n+        MacroExpander { cx, monotonic }\n     }\n \n     pub fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n@@ -377,7 +377,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             _ => item.clone(),\n                         };\n                         invocations.push(Invocation {\n-                            kind: InvocationKind::Derive { path: path.clone(), item: item },\n+                            kind: InvocationKind::Derive { path: path.clone(), item },\n                             fragment_kind: invoc.fragment_kind,\n                             expansion_data: ExpansionData {\n                                 mark,\n@@ -944,7 +944,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     }\n \n     fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: AstFragmentKind) -> AstFragment {\n-        self.collect(kind, InvocationKind::Bang { mac: mac, ident: None, span: span })\n+        self.collect(kind, InvocationKind::Bang { mac, ident: None, span })\n     }\n \n     fn collect_attr(&mut self,"}, {"sha": "ccf9db842ab6e467acbe3446d0938916dfeaa341", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -319,7 +319,7 @@ fn parse_tree(\n         tokenstream::TokenTree::Delimited(span, delim, tts) => TokenTree::Delimited(\n             span,\n             Lrc::new(Delimited {\n-                delim: delim,\n+                delim,\n                 tts: parse(\n                     tts.into(),\n                     expect_matchers,"}, {"sha": "ea7f8e356aa63214fbecbf501ec553829d47ec05", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -23,8 +23,8 @@ enum Frame {\n impl Frame {\n     /// Construct a new frame around the delimited set of tokens.\n     fn new(tts: Vec<quoted::TokenTree>) -> Frame {\n-        let forest = Lrc::new(quoted::Delimited { delim: token::NoDelim, tts: tts });\n-        Frame::Delimited { forest: forest, idx: 0, span: DelimSpan::dummy() }\n+        let forest = Lrc::new(quoted::Delimited { delim: token::NoDelim, tts });\n+        Frame::Delimited { forest, idx: 0, span: DelimSpan::dummy() }\n     }\n }\n \n@@ -248,7 +248,7 @@ pub fn transcribe(\n             // the previous results (from outside the Delimited).\n             quoted::TokenTree::Delimited(mut span, delimited) => {\n                 span = span.apply_mark(cx.current_expansion.mark);\n-                stack.push(Frame::Delimited { forest: delimited, idx: 0, span: span });\n+                stack.push(Frame::Delimited { forest: delimited, idx: 0, span });\n                 result_stack.push(mem::replace(&mut result, Vec::new()));\n             }\n "}, {"sha": "a6e8441a915e0c1464ce6b3acd4952286ff498e8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -1665,7 +1665,7 @@ impl<'a> Context<'a> {\n }\n \n pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n-    let cx = Context { features: features, parse_sess: parse_sess, plugin_attributes: &[] };\n+    let cx = Context { features, parse_sess, plugin_attributes: &[] };\n     cx.check_attribute(\n         attr,\n         attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name).map(|a| *a)),"}, {"sha": "fc206580e3811a79c107d1598c0ef2a775e949eb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -290,10 +290,10 @@ crate enum LastToken {\n }\n \n impl TokenCursorFrame {\n-    fn new(sp: DelimSpan, delim: DelimToken, tts: &TokenStream) -> Self {\n+    fn new(span: DelimSpan, delim: DelimToken, tts: &TokenStream) -> Self {\n         TokenCursorFrame {\n-            delim: delim,\n-            span: sp,\n+            delim,\n+            span,\n             open_delim: delim == token::NoDelim,\n             tree_cursor: tts.clone().into_trees(),\n             close_delim: delim == token::NoDelim,\n@@ -1449,7 +1449,7 @@ impl<'a> Parser<'a> {\n         let opt_lifetime = if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n         let mutbl = self.parse_mutability();\n         let ty = self.parse_ty_no_plus()?;\n-        return Ok(TyKind::Rptr(opt_lifetime, MutTy { ty: ty, mutbl: mutbl }));\n+        return Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }));\n     }\n \n     fn parse_ptr(&mut self) -> PResult<'a, MutTy> {\n@@ -1467,7 +1467,7 @@ impl<'a> Parser<'a> {\n             Mutability::Immutable\n         };\n         let t = self.parse_ty_no_plus()?;\n-        Ok(MutTy { ty: t, mutbl: mutbl })\n+        Ok(MutTy { ty: t, mutbl })\n     }\n \n     fn is_named_argument(&self) -> bool {\n@@ -4366,7 +4366,7 @@ impl<'a> Parser<'a> {\n                     self.report_invalid_macro_expansion_item();\n                 }\n \n-                (ident, ast::MacroDef { tokens: tokens, legacy: true })\n+                (ident, ast::MacroDef { tokens, legacy: true })\n             }\n             _ => return Ok(None),\n         };\n@@ -6789,12 +6789,12 @@ impl<'a> Parser<'a> {\n         let hi = self.token.span;\n         self.expect(&token::Semi)?;\n         Ok(ast::ForeignItem {\n-            ident: ident,\n-            attrs: attrs,\n+            ident,\n+            attrs,\n             node: ForeignItemKind::Ty,\n             id: ast::DUMMY_NODE_ID,\n             span: lo.to(hi),\n-            vis: vis\n+            vis\n         })\n     }\n "}, {"sha": "ac30cbb471aeab3bf53e948dd37960d4b3a1c241", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12806b70506508c4ec187f0223e1e86f89167448/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=12806b70506508c4ec187f0223e1e86f89167448", "patch": "@@ -150,7 +150,7 @@ impl SourceMap {\n                             -> SourceMap {\n         SourceMap {\n             files: Default::default(),\n-            file_loader: file_loader,\n+            file_loader,\n             path_mapping,\n         }\n     }\n@@ -396,7 +396,7 @@ impl SourceMap {\n         let f = (*self.files.borrow().source_files)[idx].clone();\n \n         match f.lookup_line(pos) {\n-            Some(line) => Ok(SourceFileAndLine { sf: f, line: line }),\n+            Some(line) => Ok(SourceFileAndLine { sf: f, line }),\n             None => Err(f)\n         }\n     }\n@@ -511,7 +511,7 @@ impl SourceMap {\n                               start_col,\n                               end_col: hi.col });\n \n-        Ok(FileLines {file: lo.file, lines: lines})\n+        Ok(FileLines {file: lo.file, lines})\n     }\n \n     /// Extracts the source surrounding the given `Span` using the `extract_source` function. The\n@@ -820,7 +820,7 @@ impl SourceMap {\n         let idx = self.lookup_source_file_idx(bpos);\n         let sf = (*self.files.borrow().source_files)[idx].clone();\n         let offset = bpos - sf.start_pos;\n-        SourceFileAndBytePos {sf: sf, pos: offset}\n+        SourceFileAndBytePos {sf, pos: offset}\n     }\n \n     /// Converts an absolute BytePos to a CharPos relative to the source_file."}]}