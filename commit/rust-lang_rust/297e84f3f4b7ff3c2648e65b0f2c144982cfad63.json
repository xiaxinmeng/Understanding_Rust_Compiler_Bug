{"sha": "297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5N2U4NGYzZjRiN2ZmM2MyNjQ4ZTY1YjBmMmMxNDQ5ODJjZmFkNjM=", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-04-10T08:26:53Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-04-10T08:26:53Z"}, "message": "Handle imports which are nested directly", "tree": {"sha": "c45402596991674b5670ffeeee582e6d5ada977b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45402596991674b5670ffeeee582e6d5ada977b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "html_url": "https://github.com/rust-lang/rust/commit/297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/297e84f3f4b7ff3c2648e65b0f2c144982cfad63/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81dfb9ecfb13f67a56176bd82c846530858b8ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/81dfb9ecfb13f67a56176bd82c846530858b8ef5", "html_url": "https://github.com/rust-lang/rust/commit/81dfb9ecfb13f67a56176bd82c846530858b8ef5"}], "stats": {"total": 115, "additions": 92, "deletions": 23}, "files": [{"sha": "6104103580e989fe56530b3bd767b56ac2b2af7a", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/297e84f3f4b7ff3c2648e65b0f2c144982cfad63/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297e84f3f4b7ff3c2648e65b0f2c144982cfad63/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::in_macro;\n use rustc_ast::{ptr::P, Crate, Item, ItemKind, ModKind, UseTreeKind};\n use rustc_errors::Applicability;\n@@ -66,15 +66,27 @@ fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n \n     for single_use in &single_use_usages {\n         if !imports_reused_with_self.contains(&single_use.0) {\n-            span_lint_and_sugg(\n-                cx,\n-                SINGLE_COMPONENT_PATH_IMPORTS,\n-                single_use.1,\n-                \"this import is redundant\",\n-                \"remove it entirely\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            );\n+            let can_suggest = single_use.2;\n+            if can_suggest {\n+                span_lint_and_sugg(\n+                    cx,\n+                    SINGLE_COMPONENT_PATH_IMPORTS,\n+                    single_use.1,\n+                    \"this import is redundant\",\n+                    \"remove it entirely\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else {\n+                span_lint_and_help(\n+                    cx,\n+                    SINGLE_COMPONENT_PATH_IMPORTS,\n+                    single_use.1,\n+                    \"this import is redundant\",\n+                    None,\n+                    \"remove this import\",\n+                );\n+            }\n         }\n     }\n }\n@@ -83,7 +95,7 @@ fn track_uses(\n     cx: &EarlyContext<'_>,\n     item: &Item,\n     imports_reused_with_self: &mut Vec<Symbol>,\n-    single_use_usages: &mut Vec<(Symbol, Span)>,\n+    single_use_usages: &mut Vec<(Symbol, Span, bool)>,\n ) {\n     if in_macro(item.span) || item.vis.kind.is_pub() {\n         return;\n@@ -100,25 +112,40 @@ fn track_uses(\n             if segments.len() == 1 {\n                 if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n                     let ident = &segments[0].ident;\n-                    single_use_usages.push((ident.name, item.span));\n+                    single_use_usages.push((ident.name, item.span, true));\n                 }\n                 return;\n             }\n \n-            // keep track of `use self::some_module` usages\n-            if segments[0].ident.name == kw::SelfLower {\n-                // simple case such as `use self::module::SomeStruct`\n-                if segments.len() > 1 {\n-                    imports_reused_with_self.push(segments[1].ident.name);\n-                    return;\n-                }\n-\n-                // nested case such as `use self::{module1::Struct1, module2::Struct2}`\n+            if segments.is_empty() {\n+                // keep track of `use {some_module, some_other_module};` usages\n                 if let UseTreeKind::Nested(trees) = &use_tree.kind {\n                     for tree in trees {\n                         let segments = &tree.0.prefix.segments;\n-                        if !segments.is_empty() {\n-                            imports_reused_with_self.push(segments[0].ident.name);\n+                        if segments.len() == 1 {\n+                            if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n+                                let ident = &segments[0].ident;\n+                                single_use_usages.push((ident.name, tree.0.span, false));\n+                            }\n+                        }\n+                    }\n+                }\n+            } else {\n+                // keep track of `use self::some_module` usages\n+                if segments[0].ident.name == kw::SelfLower {\n+                    // simple case such as `use self::module::SomeStruct`\n+                    if segments.len() > 1 {\n+                        imports_reused_with_self.push(segments[1].ident.name);\n+                        return;\n+                    }\n+\n+                    // nested case such as `use self::{module1::Struct1, module2::Struct2}`\n+                    if let UseTreeKind::Nested(trees) = &use_tree.kind {\n+                        for tree in trees {\n+                            let segments = &tree.0.prefix.segments;\n+                            if !segments.is_empty() {\n+                                imports_reused_with_self.push(segments[0].ident.name);\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "94117061b270da718a68172b91b920c1c18c434b", "filename": "tests/ui/single_component_path_imports_nested_first.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/297e84f3f4b7ff3c2648e65b0f2c144982cfad63/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/297e84f3f4b7ff3c2648e65b0f2c144982cfad63/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_nested_first.rs?ref=297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+use regex;\n+use serde as edres;\n+pub use serde;\n+\n+fn main() {\n+    regex::Regex::new(r\"^\\d{4}-\\d{2}-\\d{2}$\").unwrap();\n+}\n+\n+mod root_nested_use_mod {\n+    use {regex, serde};\n+    #[allow(dead_code)]\n+    fn root_nested_use_mod() {}\n+}"}, {"sha": "0c3256c1ce43a71ea37159b4a65991603e493a59", "filename": "tests/ui/single_component_path_imports_nested_first.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/297e84f3f4b7ff3c2648e65b0f2c144982cfad63/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/297e84f3f4b7ff3c2648e65b0f2c144982cfad63/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_nested_first.stderr?ref=297e84f3f4b7ff3c2648e65b0f2c144982cfad63", "patch": "@@ -0,0 +1,25 @@\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_nested_first.rs:14:10\n+   |\n+LL |     use {regex, serde};\n+   |          ^^^^^\n+   |\n+   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n+   = help: remove this import\n+\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_nested_first.rs:14:17\n+   |\n+LL |     use {regex, serde};\n+   |                 ^^^^^\n+   |\n+   = help: remove this import\n+\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_nested_first.rs:5:1\n+   |\n+LL | use regex;\n+   | ^^^^^^^^^^ help: remove it entirely\n+\n+error: aborting due to 3 previous errors\n+"}]}