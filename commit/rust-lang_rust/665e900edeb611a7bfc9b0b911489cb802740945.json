{"sha": "665e900edeb611a7bfc9b0b911489cb802740945", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NWU5MDBlZGViNjExYTdiZmM5YjBiOTExNDg5Y2I4MDI3NDA5NDU=", "commit": {"author": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2013-02-14T08:48:40Z"}, "committer": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2013-02-15T06:31:08Z"}, "message": "encapsulate isaac RNG in rust_rng struct", "tree": {"sha": "9e2361cdcbd298e2f608280cd278df73c6b38637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2361cdcbd298e2f608280cd278df73c6b38637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/665e900edeb611a7bfc9b0b911489cb802740945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/665e900edeb611a7bfc9b0b911489cb802740945", "html_url": "https://github.com/rust-lang/rust/commit/665e900edeb611a7bfc9b0b911489cb802740945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/665e900edeb611a7bfc9b0b911489cb802740945/comments", "author": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c", "html_url": "https://github.com/rust-lang/rust/commit/f4320b6195d2704cf5cb5cb7d23f2b6077a0b34c"}], "stats": {"total": 80, "additions": 47, "deletions": 33}, "files": [{"sha": "db7021f189ac81ce205a5aefd34d7130895b958f", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/665e900edeb611a7bfc9b0b911489cb802740945/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/665e900edeb611a7bfc9b0b911489cb802740945/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=665e900edeb611a7bfc9b0b911489cb802740945", "patch": "@@ -116,15 +116,15 @@ impl<T: Rand> Rand for Option<T> {\n }\n \n #[allow(non_camel_case_types)] // runtime type\n-enum rctx {}\n+enum rust_rng {}\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n     unsafe fn rand_seed() -> ~[u8];\n-    unsafe fn rand_new() -> *rctx;\n-    unsafe fn rand_new_seeded2(&&seed: ~[u8]) -> *rctx;\n-    unsafe fn rand_next(c: *rctx) -> u32;\n-    unsafe fn rand_free(c: *rctx);\n+    unsafe fn rand_new() -> *rust_rng;\n+    unsafe fn rand_new_seeded2(&&seed: ~[u8]) -> *rust_rng;\n+    unsafe fn rand_next(rng: *rust_rng) -> u32;\n+    unsafe fn rand_free(rng: *rust_rng);\n }\n \n /// A random number generator\n@@ -363,24 +363,24 @@ impl Rng {\n }\n \n struct RandRes {\n-    c: *rctx,\n+    rng: *rust_rng,\n     drop {\n         unsafe {\n-            rustrt::rand_free(self.c);\n+            rustrt::rand_free(self.rng);\n         }\n     }\n }\n \n-fn RandRes(c: *rctx) -> RandRes {\n+fn RandRes(rng: *rust_rng) -> RandRes {\n     RandRes {\n-        c: c\n+        rng: rng\n     }\n }\n \n impl Rng for @RandRes {\n     fn next() -> u32 {\n         unsafe {\n-            return rustrt::rand_next((*self).c);\n+            return rustrt::rand_next((*self).rng);\n         }\n     }\n }"}, {"sha": "a63348a2924d5ac800b42a9d79656bfac6e22bc8", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=665e900edeb611a7bfc9b0b911489cb802740945", "patch": "@@ -135,35 +135,35 @@ rand_seed() {\n     rust_vec *v = (rust_vec *) task->kernel->malloc(vec_size<uint8_t>(size),\n                                             \"rand_seed\");\n     v->fill = v->alloc = size;\n-    isaac_seed(task->kernel, (uint8_t*) &v->data, size);\n+    rng_gen_seed(task->kernel, (uint8_t*) &v->data, size);\n     return v;\n }\n \n extern \"C\" CDECL void *\n rand_new() {\n     rust_task *task = rust_get_current_task();\n     rust_sched_loop *thread = task->sched_loop;\n-    randctx *rctx = (randctx *) task->malloc(sizeof(randctx), \"rand_new\");\n-    if (!rctx) {\n+    rust_rng *rng = (rust_rng *) task->malloc(sizeof(rust_rng), \"rand_new\");\n+    if (!rng) {\n         task->fail();\n         return NULL;\n     }\n-    isaac_init(thread->kernel, rctx, NULL);\n-    return rctx;\n+    rng_init(thread->kernel, rng, NULL);\n+    return rng;\n }\n \n extern \"C\" CDECL void *\n rand_new_seeded(rust_vec_box* seed) {\n     rust_task *task = rust_get_current_task();\n     rust_sched_loop *thread = task->sched_loop;\n-    randctx *rctx = (randctx *) task->malloc(sizeof(randctx),\n-                                             \"rand_new_seeded\");\n-    if (!rctx) {\n+    rust_rng *rng = (rust_rng *) task->malloc(sizeof(rust_rng),\n+                                              \"rand_new_seeded\");\n+    if (!rng) {\n         task->fail();\n         return NULL;\n     }\n-    isaac_init(thread->kernel, rctx, seed);\n-    return rctx;\n+    rng_init(thread->kernel, rng, seed);\n+    return rng;\n }\n \n extern \"C\" CDECL void *\n@@ -172,14 +172,14 @@ rand_new_seeded2(rust_vec_box** seed) {\n }\n \n extern \"C\" CDECL uint32_t\n-rand_next(randctx *rctx) {\n-    return isaac_rand(rctx);\n+rand_next(rust_rng *rng) {\n+    return rng_gen_u32(rng);\n }\n \n extern \"C\" CDECL void\n-rand_free(randctx *rctx) {\n+rand_free(rust_rng *rng) {\n     rust_task *task = rust_get_current_task();\n-    task->free(rctx);\n+    task->free(rng);\n }\n \n "}, {"sha": "3d1e52cb9931f46599a49244557ccc4e9adaf4dd", "filename": "src/rt/rust_rng.cpp", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_rng.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_rng.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.cpp?ref=665e900edeb611a7bfc9b0b911489cb802740945", "patch": "@@ -15,7 +15,7 @@\n // Initialization helpers for ISAAC RNG\n \n void\n-isaac_seed(rust_kernel* kernel, uint8_t* dest, size_t size) {\n+rng_gen_seed(rust_kernel* kernel, uint8_t* dest, size_t size) {\n #ifdef __WIN32__\n     HCRYPTPROV hProv;\n     kernel->win32_require\n@@ -47,7 +47,7 @@ isaac_seed(rust_kernel* kernel, uint8_t* dest, size_t size) {\n #endif\n }\n \n-void\n+static void\n isaac_init(rust_kernel *kernel, randctx *rctx, rust_vec_box* user_seed) {\n     memset(rctx, 0, sizeof(randctx));\n \n@@ -64,12 +64,22 @@ isaac_init(rust_kernel *kernel, randctx *rctx, rust_vec_box* user_seed) {\n             seed = (seed + 0x7ed55d16) + (seed << 12);\n         }\n     } else {\n-        isaac_seed(kernel, (uint8_t*) &rctx->randrsl, sizeof(rctx->randrsl));\n+        rng_gen_seed(kernel, (uint8_t*)&rctx->randrsl, sizeof(rctx->randrsl));\n     }\n \n     randinit(rctx, 1);\n }\n \n+void\n+rng_init(rust_kernel* kernel, rust_rng* rng, rust_vec_box* user_seed) {\n+    isaac_init(kernel, &rng->rctx, user_seed);\n+}\n+\n+uint32_t\n+rng_gen_u32(rust_rng* rng) {\n+    return isaac_rand(&rng->rctx);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "7cdd918df6ec6dba3bf46df4e2fac8a2ad6c9a7b", "filename": "src/rt/rust_rng.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_rng.h", "raw_url": "https://github.com/rust-lang/rust/raw/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_rng.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_rng.h?ref=665e900edeb611a7bfc9b0b911489cb802740945", "patch": "@@ -18,8 +18,13 @@ struct rust_vec_box;\n \n // Initialization helpers for ISAAC RNG\n \n-void isaac_seed(rust_kernel* kernel, uint8_t* dest, size_t size);\n-void isaac_init(rust_kernel *kernel, randctx *rctx, rust_vec_box* user_seed);\n+struct rust_rng {\n+    randctx rctx;\n+};\n+\n+void rng_gen_seed(rust_kernel* kernel, uint8_t* dest, size_t size);\n+void rng_init(rust_kernel *kernel, rust_rng *rng, rust_vec_box* user_seed);\n+uint32_t rng_gen_u32(rust_rng *rng);\n \n //\n // Local Variables:"}, {"sha": "b15c97ca572a4a34a0538fb3e4edff995f168068", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=665e900edeb611a7bfc9b0b911489cb802740945", "patch": "@@ -41,7 +41,7 @@ rust_sched_loop::rust_sched_loop(rust_scheduler *sched, int id, bool killed) :\n     name(\"main\")\n {\n     LOGPTR(this, \"new dom\", (uintptr_t)this);\n-    isaac_init(kernel, &rctx, NULL);\n+    rng_init(kernel, &rng, NULL);\n \n     if (!tls_initialized)\n         init_tls();\n@@ -151,7 +151,7 @@ rust_task *\n rust_sched_loop::schedule_task() {\n     lock.must_have_lock();\n     if (running_tasks.length() > 0) {\n-        size_t k = isaac_rand(&rctx);\n+        size_t k = rng_gen_u32(&rng);\n         size_t i = k % running_tasks.length();\n         return (rust_task *)running_tasks[i];\n     }"}, {"sha": "736c09ee920cadb628d1529e7584ebff715b4aa5", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/665e900edeb611a7bfc9b0b911489cb802740945/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=665e900edeb611a7bfc9b0b911489cb802740945", "patch": "@@ -62,7 +62,7 @@ struct rust_sched_loop\n #endif\n \n     context c_context;\n-\n+    rust_rng rng;\n     bool should_exit;\n \n     stk_seg *cached_c_stack;\n@@ -103,7 +103,6 @@ struct rust_sched_loop\n     size_t min_stack_size;\n     memory_region local_region;\n \n-    randctx rctx;\n     const char *const name; // Used for debugging\n \n     // Only a pointer to 'name' is kept, so it must live as long as this"}]}