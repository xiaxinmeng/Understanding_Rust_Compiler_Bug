{"sha": "5de331ba40ac722dd5513c79194c6c411766a23f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZTMzMWJhNDBhYzcyMmRkNTUxM2M3OTE5NGM2YzQxMTc2NmEyM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T14:16:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-13T14:16:12Z"}, "message": "Auto merge of #88009 - GuillaumeGomez:rollup-f194yyk, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #87795 (Avoid ICE caused by suggestion)\n - #87966 (Fix `command-create-pidfd` test inside unprivileged Docker containers)\n - #87969 (Revert \"Rollup merge of #87779 - Aaron1011:stmt-ast-id, r=petrochenkov\")\n - #88005 (Add rustdoc GUI test for headers)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a38cce269c1a399919dee91f1b5b90ce51955af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a38cce269c1a399919dee91f1b5b90ce51955af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5de331ba40ac722dd5513c79194c6c411766a23f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5de331ba40ac722dd5513c79194c6c411766a23f", "html_url": "https://github.com/rust-lang/rust/commit/5de331ba40ac722dd5513c79194c6c411766a23f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5de331ba40ac722dd5513c79194c6c411766a23f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc3c69e5419292e92663a5f1e39203478925661", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc3c69e5419292e92663a5f1e39203478925661", "html_url": "https://github.com/rust-lang/rust/commit/2fc3c69e5419292e92663a5f1e39203478925661"}, {"sha": "f382d23f7a69ff053729c4bfba2bafe9d87b981b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f382d23f7a69ff053729c4bfba2bafe9d87b981b", "html_url": "https://github.com/rust-lang/rust/commit/f382d23f7a69ff053729c4bfba2bafe9d87b981b"}], "stats": {"total": 146, "additions": 129, "deletions": 17}, "files": [{"sha": "09beda33483745b0c85d7b120a1265dde17a76e3", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -559,7 +559,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         self.cx.force_mode = orig_force_mode;\n \n         // Finally incorporate all the expanded macros into the input AST fragment.\n-        let mut placeholder_expander = PlaceholderExpander::default();\n+        let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n         while let Some(expanded_fragments) = expanded_fragments.pop() {\n             for (expn_id, expanded_fragment) in expanded_fragments.into_iter().rev() {\n                 placeholder_expander\n@@ -1341,9 +1341,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n         }\n \n+        // The placeholder expander gives ids to statements, so we avoid folding the id here.\n         // We don't use `assign_id!` - it will be called when we visit statement's contents\n         // (e.g. an expression, item, or local)\n-        let res = noop_flat_map_stmt(stmt, self);\n+        let ast::Stmt { id, kind, span } = stmt;\n+        let res = noop_flat_map_stmt_kind(kind, self)\n+            .into_iter()\n+            .map(|kind| ast::Stmt { id, kind, span })\n+            .collect();\n \n         self.cx.current_expansion.is_trailing_mac = false;\n         res"}, {"sha": "efed41de23a89ebf23b7f0c86841db93167d20f5", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -7,7 +7,6 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n-#![recursion_limit = \"256\"]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "6586ba138fb9956c61baf25f0eb13edd301cdbd5", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -1,3 +1,4 @@\n+use crate::base::ExtCtxt;\n use crate::expand::{AstFragment, AstFragmentKind};\n \n use rustc_ast as ast;\n@@ -174,12 +175,17 @@ pub fn placeholder(\n     }\n }\n \n-#[derive(Default)]\n-pub struct PlaceholderExpander {\n+pub struct PlaceholderExpander<'a, 'b> {\n     expanded_fragments: FxHashMap<ast::NodeId, AstFragment>,\n+    cx: &'a mut ExtCtxt<'b>,\n+    monotonic: bool,\n }\n \n-impl PlaceholderExpander {\n+impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n+    pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n+        PlaceholderExpander { cx, expanded_fragments: FxHashMap::default(), monotonic }\n+    }\n+\n     pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment) {\n         fragment.mut_visit_with(self);\n         self.expanded_fragments.insert(id, fragment);\n@@ -190,7 +196,7 @@ impl PlaceholderExpander {\n     }\n }\n \n-impl MutVisitor for PlaceholderExpander {\n+impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n     fn flat_map_arm(&mut self, arm: ast::Arm) -> SmallVec<[ast::Arm; 1]> {\n         if arm.is_placeholder {\n             self.remove(arm.id).make_arms()\n@@ -354,4 +360,15 @@ impl MutVisitor for PlaceholderExpander {\n             _ => noop_visit_ty(ty, self),\n         }\n     }\n+\n+    fn visit_block(&mut self, block: &mut P<ast::Block>) {\n+        noop_visit_block(block, self);\n+\n+        for stmt in block.stmts.iter_mut() {\n+            if self.monotonic {\n+                assert_eq!(stmt.id, ast::DUMMY_NODE_ID);\n+                stmt.id = self.cx.resolver.next_node_id();\n+            }\n+        }\n+    }\n }"}, {"sha": "66e06325fa982df6d564fa048a2284c2a10343c3", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -1,4 +1,5 @@\n use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n use rustc_span::source_map::DesugaringKind;\n@@ -409,13 +410,17 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             );\n         } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_))) {\n             let suggest = match self.infcx.tcx.get_diagnostic_item(sym::IntoIterator) {\n-                Some(def_id) => type_known_to_meet_bound_modulo_regions(\n-                    &self.infcx,\n-                    self.param_env,\n-                    self.infcx.tcx.mk_imm_ref(self.infcx.tcx.lifetimes.re_erased, ty),\n-                    def_id,\n-                    DUMMY_SP,\n-                ),\n+                Some(def_id) => self.infcx.tcx.infer_ctxt().enter(|infcx| {\n+                    type_known_to_meet_bound_modulo_regions(\n+                        &infcx,\n+                        self.param_env,\n+                        infcx\n+                            .tcx\n+                            .mk_imm_ref(infcx.tcx.lifetimes.re_erased, infcx.tcx.erase_regions(ty)),\n+                        def_id,\n+                        DUMMY_SP,\n+                    )\n+                }),\n                 _ => false,\n             };\n             if suggest {"}, {"sha": "b5be31bd2cc0a2a71febf6d70caecd033f7b9681", "filename": "src/test/rustdoc-gui/headers-color.goml", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -0,0 +1,46 @@\n+// This test check for headers text and background colors for the different themes.\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+\n+// This is needed so that the text color is computed.\n+show-text: true\n+\n+// Ayu theme\n+local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+assert-css: (\".impl\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(0, 0, 0, 0)\"}, ALL)\n+assert-css: (\".impl .code-header\", {\"color\": \"rgb(230, 225, 207)\", \"background-color\": \"rgb(15, 20, 25)\"}, ALL)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl\n+assert-css: (\"#impl\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"})\n+\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n+assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"}, ALL)\n+\n+// Dark theme\n+local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+\n+assert-css: (\".impl\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"}, ALL)\n+assert-css: (\".impl .code-header\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(53, 53, 53)\"}, ALL)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl\n+assert-css: (\"#impl\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"})\n+\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n+assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"}, ALL)\n+\n+// Light theme\n+local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+\n+assert-css: (\".impl\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"}, ALL)\n+assert-css: (\".impl .code-header\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(255, 255, 255)\"}, ALL)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl\n+assert-css: (\"#impl\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"})\n+\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n+assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"}, ALL)"}, {"sha": "daf8bc9dea3501d690393056e3cf98a752c5247a", "filename": "src/test/rustdoc-gui/search-result-colors.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -1,5 +1,5 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n-// We set the theme so we're sure that the corect values will be used, whatever the computer\n+// We set the theme so we're sure that the correct values will be used, whatever the computer\n // this test is running on.\n local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n // If the text isn't displayed, the browser doesn't compute color style correctly..."}, {"sha": "4df443c66d65bc0b2339b0e9a89b17f7663ecc8c", "filename": "src/test/ui/command/command-create-pidfd.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Fui%2Fcommand%2Fcommand-create-pidfd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Fui%2Fcommand%2Fcommand-create-pidfd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-create-pidfd.rs?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -15,7 +15,18 @@ fn has_clone3() -> bool {\n     let err = (res == -1)\n         .then(|| Error::last_os_error())\n         .expect(\"probe syscall should not succeed\");\n-    err.raw_os_error() != Some(libc::ENOSYS)\n+\n+    // If the `clone3` syscall is not implemented in the current kernel version it should return an\n+    // `ENOSYS` error. Docker also blocks the whole syscall inside unprivileged containers, and\n+    // returns `EPERM` (instead of `ENOSYS`) when a program tries to invoke the syscall. Because of\n+    // that we need to check for *both* `ENOSYS` and `EPERM`.\n+    //\n+    // Note that Docker's behavior is breaking other projects (notably glibc), so they're planning\n+    // to update their filtering to return `ENOSYS` in a future release:\n+    //\n+    //     https://github.com/moby/moby/issues/42680\n+    //\n+    err.raw_os_error() != Some(libc::ENOSYS) && err.raw_os_error() != Some(libc::EPERM)\n }\n \n fn main() {"}, {"sha": "4f2007befffa171471905f9ac14936657df0300a", "filename": "src/test/ui/suggestions/for-i-in-vec.fixed", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.fixed?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -15,4 +15,13 @@ impl Foo {\n     }\n }\n \n+const LOADERS: &Vec<&'static u8> = &Vec::new();\n+\n+pub fn break_code() -> Option<&'static u8> {\n+    for loader in &*LOADERS { //~ ERROR cannot move out of a shared reference\n+        return Some(loader);\n+    }\n+    None\n+}\n+\n fn main() {}"}, {"sha": "55fc7ad4e373dc4b8430e0a91519b3eac646b688", "filename": "src/test/ui/suggestions/for-i-in-vec.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.rs?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -15,4 +15,13 @@ impl Foo {\n     }\n }\n \n+const LOADERS: &Vec<&'static u8> = &Vec::new();\n+\n+pub fn break_code() -> Option<&'static u8> {\n+    for loader in *LOADERS { //~ ERROR cannot move out of a shared reference\n+        return Some(loader);\n+    }\n+    None\n+}\n+\n fn main() {}"}, {"sha": "c39363f762bdd8ee26aab0d62fd8e5e94f905446", "filename": "src/test/ui/suggestions/for-i-in-vec.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5de331ba40ac722dd5513c79194c6c411766a23f/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr?ref=5de331ba40ac722dd5513c79194c6c411766a23f", "patch": "@@ -20,6 +20,17 @@ help: consider iterating over a slice of the `HashMap<i32, i32>`'s content\n LL |         for _ in &self.h {\n    |                  +\n \n-error: aborting due to 2 previous errors\n+error[E0507]: cannot move out of a shared reference\n+  --> $DIR/for-i-in-vec.rs:21:19\n+   |\n+LL |     for loader in *LOADERS {\n+   |                   ^^^^^^^^ move occurs because value has type `Vec<&u8>`, which does not implement the `Copy` trait\n+   |\n+help: consider iterating over a slice of the `Vec<&u8>`'s content\n+   |\n+LL |     for loader in &*LOADERS {\n+   |                   +\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}]}