{"sha": "16d3bb9106762710d2a5314ae4042674dad1b446", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZDNiYjkxMDY3NjI3MTBkMmE1MzE0YWU0MDQyNjc0ZGFkMWI0NDY=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-05-03T06:54:15Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-05-03T06:54:39Z"}, "message": "Don't count start of non-ASCII characters as being inside of them", "tree": {"sha": "6db0e38edabd9229b9fc0e0b85cc7dbfd22057c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db0e38edabd9229b9fc0e0b85cc7dbfd22057c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d3bb9106762710d2a5314ae4042674dad1b446", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d3bb9106762710d2a5314ae4042674dad1b446", "html_url": "https://github.com/rust-lang/rust/commit/16d3bb9106762710d2a5314ae4042674dad1b446", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d3bb9106762710d2a5314ae4042674dad1b446/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e20467c3a62f0b8a65605938a2ddb7babcfd8bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e20467c3a62f0b8a65605938a2ddb7babcfd8bb", "html_url": "https://github.com/rust-lang/rust/commit/1e20467c3a62f0b8a65605938a2ddb7babcfd8bb"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "212cb7b5bca10b045415c3206a74e9afc9027d9c", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16d3bb9106762710d2a5314ae4042674dad1b446/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d3bb9106762710d2a5314ae4042674dad1b446/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=16d3bb9106762710d2a5314ae4042674dad1b446", "patch": "@@ -8,7 +8,9 @@ use superslice::Ext;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LineIndex {\n+    /// Offset the the beginning of each line, zero-based\n     pub(crate) newlines: Vec<TextSize>,\n+    /// List of non-ASCII characters on each line\n     pub(crate) utf16_lines: FxHashMap<u32, Vec<Utf16Char>>,\n }\n \n@@ -22,7 +24,9 @@ pub struct LineCol {\n \n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub(crate) struct Utf16Char {\n+    /// Start offset of a character inside a line, zero-based\n     pub(crate) start: TextSize,\n+    /// End offset of a character inside a line, zero-based\n     pub(crate) end: TextSize,\n }\n \n@@ -120,7 +124,7 @@ impl LineIndex {\n     fn utf16_to_utf8_col(&self, line: u32, mut col: u32) -> TextSize {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n-                if col >= u32::from(c.start) {\n+                if col > u32::from(c.start) {\n                     col += u32::from(c.len()) - 1;\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n@@ -226,8 +230,10 @@ const C: char = \\\"\u30e1 \u30e1\\\";\n         // UTF-16 to UTF-8\n         assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextSize::from(15));\n \n-        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextSize::from(20));\n-        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(23));\n+        // \u30e1 UTF-8: 0xE3 0x83 0xA1, UTF-16: 0x30E1\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 17), TextSize::from(17)); // first \u30e1 at 17..20\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextSize::from(20)); // space\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(21)); // second \u30e1 at 21..24\n \n         assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextSize::from(15));\n     }"}]}