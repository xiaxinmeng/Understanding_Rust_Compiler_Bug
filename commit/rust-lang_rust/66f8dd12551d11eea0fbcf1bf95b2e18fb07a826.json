{"sha": "66f8dd12551d11eea0fbcf1bf95b2e18fb07a826", "node_id": "C_kwDOAAsO6NoAKDY2ZjhkZDEyNTUxZDExZWVhMGZiY2YxYmY5NWIyZTE4ZmIwN2E4MjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-08T11:20:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-08T11:20:58Z"}, "message": "Auto merge of #110069 - ndrewxie:issue-104212-fix, r=cjgillot\n\nSwitched provisional evaluation cache map to FxIndexMap, and replaced map.drain_filter with map.retain\n\nSwitching ProvisionalEvaluationCache's map field from FxHashMap to FxIndexMap was previously blocked because doing so caused performance regressions that could be mitigated by the stabilization of drain_filter for FxIndexMap (#104212). However, the only use of drain_filter can be replaced with a retain, so I made the modification and put in a PR to see if this causes a performance regression as well.\n\nThis PR is part of a broader effort (#84447) of removing iteration through FxHashMaps, as the iteration order is unstable and can cause issues in incremental compilation.", "tree": {"sha": "04cc779ba2731717972143d589dd97c86c1192a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04cc779ba2731717972143d589dd97c86c1192a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66f8dd12551d11eea0fbcf1bf95b2e18fb07a826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66f8dd12551d11eea0fbcf1bf95b2e18fb07a826", "html_url": "https://github.com/rust-lang/rust/commit/66f8dd12551d11eea0fbcf1bf95b2e18fb07a826", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66f8dd12551d11eea0fbcf1bf95b2e18fb07a826/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e124c4f7a2978f3e7d9991a8988226f2974d477", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e124c4f7a2978f3e7d9991a8988226f2974d477", "html_url": "https://github.com/rust-lang/rust/commit/9e124c4f7a2978f3e7d9991a8988226f2974d477"}, {"sha": "9920baba5f459668b70131df64bb85bd82c3b149", "url": "https://api.github.com/repos/rust-lang/rust/commits/9920baba5f459668b70131df64bb85bd82c3b149", "html_url": "https://github.com/rust-lang/rust/commit/9920baba5f459668b70131df64bb85bd82c3b149"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "6bb53418beabb95a65c83fc4823e22baaab922ae", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/66f8dd12551d11eea0fbcf1bf95b2e18fb07a826/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f8dd12551d11eea0fbcf1bf95b2e18fb07a826/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=66f8dd12551d11eea0fbcf1bf95b2e18fb07a826", "patch": "@@ -2,12 +2,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html#selection\n \n-// FIXME: The `map` field in ProvisionalEvaluationCache should be changed to\n-// a `FxIndexMap` to avoid query instability, but right now it causes a perf regression. This would be\n-// fixed or at least lightened by the addition of the `drain_filter` method to `FxIndexMap`\n-// Relevant: https://github.com/rust-lang/rust/pull/103723 and https://github.com/bluss/indexmap/issues/242\n-#![allow(rustc::potential_query_instability)]\n-\n use self::EvaluationResult::*;\n use self::SelectionCandidate::*;\n \n@@ -32,8 +26,7 @@ use crate::traits::project::ProjectAndUnifyResult;\n use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n use crate::traits::Unimplemented;\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n+use rustc_data_structures::fx::{FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n@@ -2782,7 +2775,7 @@ struct ProvisionalEvaluationCache<'tcx> {\n     /// - then we determine that `E` is in error -- we will then clear\n     ///   all cache values whose DFN is >= 4 -- in this case, that\n     ///   means the cached value for `F`.\n-    map: RefCell<FxHashMap<ty::PolyTraitPredicate<'tcx>, ProvisionalEvaluation>>,\n+    map: RefCell<FxIndexMap<ty::PolyTraitPredicate<'tcx>, ProvisionalEvaluation>>,\n \n     /// The stack of args that we assume to be true because a `WF(arg)` predicate\n     /// is on the stack above (and because of wellformedness is coinductive).\n@@ -2930,12 +2923,13 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     /// have a performance impact in practice.\n     fn on_completion(&self, dfn: usize) {\n         debug!(?dfn, \"on_completion\");\n-\n-        for (fresh_trait_pred, eval) in\n-            self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)\n-        {\n-            debug!(?fresh_trait_pred, ?eval, \"on_completion\");\n-        }\n+        self.map.borrow_mut().retain(|fresh_trait_pred, eval| {\n+            if eval.from_dfn >= dfn {\n+                debug!(?fresh_trait_pred, ?eval, \"on_completion\");\n+                return false;\n+            }\n+            true\n+        });\n     }\n }\n "}]}