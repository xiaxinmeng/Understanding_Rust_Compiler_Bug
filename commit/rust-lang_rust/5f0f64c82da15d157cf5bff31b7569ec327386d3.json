{"sha": "5f0f64c82da15d157cf5bff31b7569ec327386d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMGY2NGM4MmRhMTVkMTU3Y2Y1YmZmMzFiNzU2OWVjMzI3Mzg2ZDM=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-05-31T21:54:02Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-05-31T21:54:02Z"}, "message": "Merge pull request #970 from Manishearth/rustup\n\ns/PatKind::Ident/PatKind::Binding/g", "tree": {"sha": "5ecd6bdf2f361e30b4607d7f964073cc3ddb5923", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ecd6bdf2f361e30b4607d7f964073cc3ddb5923"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f0f64c82da15d157cf5bff31b7569ec327386d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0f64c82da15d157cf5bff31b7569ec327386d3", "html_url": "https://github.com/rust-lang/rust/commit/5f0f64c82da15d157cf5bff31b7569ec327386d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f0f64c82da15d157cf5bff31b7569ec327386d3/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "762aff2519b504c43ec6e6c4f6a5d19a7914139a", "url": "https://api.github.com/repos/rust-lang/rust/commits/762aff2519b504c43ec6e6c4f6a5d19a7914139a", "html_url": "https://github.com/rust-lang/rust/commit/762aff2519b504c43ec6e6c4f6a5d19a7914139a"}, {"sha": "5c51a2452d0a443f97aebc089cdf16bbbd4fb1ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c51a2452d0a443f97aebc089cdf16bbbd4fb1ba", "html_url": "https://github.com/rust-lang/rust/commit/5c51a2452d0a443f97aebc089cdf16bbbd4fb1ba"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "7a21dbea2c23eaca864067045dd244b655d7e286", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -1,7 +1,8 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n-## 0.0.71 \u2014 TBD\n+## 0.0.71 \u2014 2016-05-31\n+* Rustup to *rustc 1.10.0-nightly (7bddce693 2016-05-27)*\n * New lint: [`useless_let_if_seq`]\n \n ## 0.0.70 \u2014 2016-05-28"}, {"sha": "ec38ce9162319192704044564d5ef89aa8622842", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.70\"\n+version = \"0.0.71\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -30,7 +30,7 @@ toml = \"0.1\"\n unicode-normalization = \"0.1\"\n quine-mc_cluskey = \"0.2.2\"\n # begin automatic update\n-clippy_lints = { version = \"0.0.70\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.71\", path = \"clippy_lints\" }\n # end automatic update\n rustc-serialize = \"0.3\"\n "}, {"sha": "db6ee12450585d608c13c0e5c51206965e6911d4", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.70\"\n+version = \"0.0.71\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "a2dbdf34a2ffedd120395692141eaaa0f69d6e14", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -34,7 +34,7 @@ impl LintPass for BlackListedName {\n \n impl LateLintPass for BlackListedName {\n     fn check_pat(&mut self, cx: &LateContext, pat: &Pat) {\n-        if let PatKind::Ident(_, ref ident, _) = pat.node {\n+        if let PatKind::Binding(_, ref ident, _) = pat.node {\n             if self.blacklist.iter().any(|s| s == &*ident.node.as_str()) {\n                 span_lint(cx,\n                           BLACKLISTED_NAME,"}, {"sha": "b4c8521a0a9fa8accc1ebbdd5aa4b066d5191da7", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -345,8 +345,8 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             (BiDiv, Constant::Int(l), Some(Constant::Int(r))) => (l / r).ok().map(Constant::Int),\n             (BiRem, Constant::Int(l), Some(Constant::Int(r))) => (l % r).ok().map(Constant::Int),\n             (BiAnd, Constant::Bool(false), _) => Some(Constant::Bool(false)),\n-            (BiAnd, Constant::Bool(true), Some(r)) => Some(r),\n             (BiOr, Constant::Bool(true), _) => Some(Constant::Bool(true)),\n+            (BiAnd, Constant::Bool(true), Some(r)) |\n             (BiOr, Constant::Bool(false), Some(r)) => Some(r),\n             (BiBitXor, Constant::Bool(l), Some(Constant::Bool(r))) => Some(Constant::Bool(l ^ r)),\n             (BiBitXor, Constant::Int(l), Some(Constant::Int(r))) => (l ^ r).ok().map(Constant::Int),"}, {"sha": "3022ffe730fc26580f424c719eaf516d3ec0f61c", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -192,7 +192,7 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<Interned\n                     bindings_impl(cx, pat, map);\n                 }\n             }\n-            PatKind::Ident(_, ref ident, ref as_pat) => {\n+            PatKind::Binding(_, ref ident, ref as_pat) => {\n                 if let Entry::Vacant(v) = map.entry(ident.node.as_str()) {\n                     v.insert(cx.tcx.pat_ty(pat));\n                 }"}, {"sha": "99b40a0231b5df73b7112a96d33bf8402d88f242", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -70,7 +70,7 @@ fn check_closure(cx: &LateContext, expr: &Expr) {\n                     _ => (),\n                 }\n                 for (ref a1, ref a2) in decl.inputs.iter().zip(args) {\n-                    if let PatKind::Ident(_, ident, _) = a1.pat.node {\n+                    if let PatKind::Binding(_, ident, _) = a1.pat.node {\n                         // XXXManishearth Should I be checking the binding mode here?\n                         if let ExprPath(None, ref p) = a2.node {\n                             if p.segments.len() != 1 {"}, {"sha": "1eb2f756cbf9169715458abe417d73f0eb4b7886", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -65,7 +65,7 @@ impl LateLintPass for LetIfSeq {\n                 let Some(expr) = it.peek(),\n                 let hir::StmtDecl(ref decl, _) = stmt.node,\n                 let hir::DeclLocal(ref decl) = decl.node,\n-                let hir::PatKind::Ident(mode, ref name, None) = decl.pat.node,\n+                let hir::PatKind::Binding(mode, ref name, None) = decl.pat.node,\n                 let Some(def) = cx.tcx.def_map.borrow().get(&decl.pat.id),\n                 let hir::StmtExpr(ref if_, _) = expr.node,\n                 let hir::ExprIf(ref cond, ref then, ref else_) = if_.node,"}, {"sha": "3d3c9ab47a4155d5eae7d2444e9633fc4c8e5201", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -330,7 +330,7 @@ fn check_for_loop(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &E\n fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n     if let Some(UnsugaredRange { start: Some(ref start), ref end, .. }) = unsugar_range(arg) {\n         // the var must be a single name\n-        if let PatKind::Ident(_, ref ident, _) = pat.node {\n+        if let PatKind::Binding(_, ref ident, _) = pat.node {\n             let mut visitor = VarVisitor {\n                 cx: cx,\n                 var: ident.node,\n@@ -613,7 +613,7 @@ fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Ex\n fn pat_is_wild(pat: &PatKind, body: &Expr) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n-        PatKind::Ident(_, ident, None) if ident.node.as_str().starts_with('_') => {\n+        PatKind::Binding(_, ident, None) if ident.node.as_str().starts_with('_') => {\n             let mut visitor = UsedVisitor {\n                 var: ident.node,\n                 used: false,\n@@ -884,7 +884,7 @@ impl<'v, 't> Visitor<'v> for InitializeVisitor<'v, 't> {\n         // Look for declarations of the variable\n         if let DeclLocal(ref local) = decl.node {\n             if local.pat.id == self.var_id {\n-                if let PatKind::Ident(_, ref ident, _) = local.pat.node {\n+                if let PatKind::Binding(_, ref ident, _) = local.pat.node {\n                     self.name = Some(ident.node);\n \n                     self.state = if let Some(ref init) = local.init {"}, {"sha": "bd81cb2316b7619e05c64510d879ec818c984336", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -108,7 +108,7 @@ fn get_type_name(cx: &LateContext, expr: &Expr, arg: &Expr) -> Option<&'static s\n \n fn get_arg_name(pat: &Pat) -> Option<ast::Name> {\n     match pat.node {\n-        PatKind::Ident(_, name, None) => Some(name.node),\n+        PatKind::Binding(_, name, None) => Some(name.node),\n         PatKind::Ref(ref subpat, _) => get_arg_name(subpat),\n         _ => None,\n     }"}, {"sha": "46bd251016b6d41ae52626968ab5b5088f6f6803", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -200,7 +200,8 @@ fn check_single_match_opt_like(cx: &LateContext, ex: &Expr, arms: &[Arm], expr:\n             }\n             path.to_string()\n         }\n-        PatKind::Ident(BindByValue(MutImmutable), ident, None) => ident.node.to_string(),\n+        PatKind::Binding(BindByValue(MutImmutable), ident, None) => ident.node.to_string(),\n+        PatKind::Path(ref path) => path.to_string(),\n         _ => return,\n     };\n "}, {"sha": "5f113cf47ceae79bbaec283e7c0b0f1ab361075e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -45,7 +45,7 @@ impl LateLintPass for TopLevelRefPass {\n             return;\n         }\n         for ref arg in &decl.inputs {\n-            if let PatKind::Ident(BindByRef(_), _, _) = arg.pat.node {\n+            if let PatKind::Binding(BindByRef(_), _, _) = arg.pat.node {\n                 span_lint(cx,\n                           TOPLEVEL_REF_ARG,\n                           arg.pat.span,\n@@ -58,7 +58,7 @@ impl LateLintPass for TopLevelRefPass {\n             [\n             let StmtDecl(ref d, _) = s.node,\n             let DeclLocal(ref l) = d.node,\n-            let PatKind::Ident(BindByRef(_), i, None) = l.pat.node,\n+            let PatKind::Binding(BindByRef(_), i, None) = l.pat.node,\n             let Some(ref init) = l.init\n             ], {\n                 let tyopt = if let Some(ref ty) = l.ty {\n@@ -346,7 +346,7 @@ impl LintPass for PatternPass {\n \n impl LateLintPass for PatternPass {\n     fn check_pat(&mut self, cx: &LateContext, pat: &Pat) {\n-        if let PatKind::Ident(_, ref ident, Some(ref right)) = pat.node {\n+        if let PatKind::Binding(_, ref ident, Some(ref right)) = pat.node {\n             if right.node == PatKind::Wild {\n                 span_lint(cx,\n                           REDUNDANT_PATTERN,"}, {"sha": "0954d92cf9a505974217a72ed6aec8611f8555a6", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -65,7 +65,7 @@ impl LateLintPass for ShadowPass {\n fn check_fn(cx: &LateContext, decl: &FnDecl, block: &Block) {\n     let mut bindings = Vec::new();\n     for arg in &decl.inputs {\n-        if let PatKind::Ident(_, ident, _) = arg.pat.node {\n+        if let PatKind::Binding(_, ident, _) = arg.pat.node {\n             bindings.push((ident.node.unhygienize(), ident.span))\n         }\n     }\n@@ -119,7 +119,7 @@ fn is_binding(cx: &LateContext, pat: &Pat) -> bool {\n fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span, bindings: &mut Vec<(Name, Span)>) {\n     // TODO: match more stuff / destructuring\n     match pat.node {\n-        PatKind::Ident(_, ref ident, ref inner) => {\n+        PatKind::Binding(_, ref ident, ref inner) => {\n             let name = ident.node.unhygienize();\n             if is_binding(cx, pat) {\n                 let mut new_binding = true;"}, {"sha": "6dc9dda37ec4860ba9a88f6960991c87ca4720ad", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -63,7 +63,7 @@ fn check_manual_swap(cx: &LateContext, block: &Block) {\n             let StmtDecl(ref tmp, _) = w[0].node,\n             let DeclLocal(ref tmp) = tmp.node,\n             let Some(ref tmp_init) = tmp.init,\n-            let PatKind::Ident(_, ref tmp_name, None) = tmp.pat.node,\n+            let PatKind::Binding(_, ref tmp_name, None) = tmp.pat.node,\n \n             // foo() = bar();\n             let StmtSemi(ref first, _) = w[1].node,"}, {"sha": "e9c4023e22604f9ff17b6d6d612049e90f823b6a", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -145,9 +145,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&PatKind::TupleStruct(ref lp, ref la, ls), &PatKind::TupleStruct(ref rp, ref ra, rs)) => {\n                 self.eq_path(lp, rp) && over(la, ra, |l, r| self.eq_pat(l, r)) && ls == rs\n             }\n-            (&PatKind::Ident(ref lb, ref li, ref lp), &PatKind::Ident(ref rb, ref ri, ref rp)) => {\n+            (&PatKind::Binding(ref lb, ref li, ref lp), &PatKind::Binding(ref rb, ref ri, ref rp)) => {\n                 lb == rb && li.node.as_str() == ri.node.as_str() && both(lp, rp, |l, r| self.eq_pat(l, r))\n             }\n+            (&PatKind::Path(ref l), &PatKind::Path(ref r)) => self.eq_path(l, r),\n             (&PatKind::Lit(ref l), &PatKind::Lit(ref r)) => self.eq_expr(l, r),\n             (&PatKind::QPath(ref ls, ref lp), &PatKind::QPath(ref rs, ref rp)) => {\n                 self.eq_qself(ls, rs) && self.eq_path(lp, rp)"}, {"sha": "f4e74eed4a414b21f74ec2aa4737ecf425619379", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -173,6 +173,11 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n \n     let _ = match Some(42) {\n         Some(_) => 24,\n+        None => 24, //~ERROR this `match` has identical arm bodies\n+    };\n+\n+    let _ = match Some(42) {\n+        Some(foo) => 24,\n         None => 24,\n     };\n "}, {"sha": "affa7e4e86e6e76ab7a24e77eb920d4016451865", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f64c82da15d157cf5bff31b7569ec327386d3/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f64c82da15d157cf5bff31b7569ec327386d3/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=5f0f64c82da15d157cf5bff31b7569ec327386d3", "patch": "@@ -216,6 +216,12 @@ fn overlapping() {\n         11 ... 50 => println!(\"0 ... 10\"),\n         _ => (),\n     }\n+    \n+    if let None = Some(42) {\n+        // nothing\n+    } else if let None = Some(42) {\n+        // another nothing :-)\n+    }\n }\n \n fn main() {"}]}