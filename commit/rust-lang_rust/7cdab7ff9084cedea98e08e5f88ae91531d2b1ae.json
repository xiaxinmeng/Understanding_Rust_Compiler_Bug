{"sha": "7cdab7ff9084cedea98e08e5f88ae91531d2b1ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZGFiN2ZmOTA4NGNlZGVhOThlMDhlNWY4OGFlOTE1MzFkMmIxYWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T23:49:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T23:49:50Z"}, "message": "Rollup merge of #70283 - CDirkx:regression-test-70155, r=oli-obk\n\nAdd regression test for #70155.\n\nWith #70166 merged, `RangeInclusive` now derives `PartialEq` and `Eq`, implementing structural equality and as a side effect the range is now usable with const generics, closing #70155.\n\nAs per [#70166 (comment)](https://github.com/rust-lang/rust/pull/70166#issuecomment-601872201) a test is added to avoid a change to the private fields or the equality implementation of the range from subtly reverting #70155.", "tree": {"sha": "54de320eceabadaf91913631bf2dc8c5c7e9b1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54de320eceabadaf91913631bf2dc8c5c7e9b1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cdab7ff9084cedea98e08e5f88ae91531d2b1ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeUseCRBK7hj4Ov3rIwAAdHIIAFYub0cVTL3cyzV77nM9kVIZ\nAeEby21ezF3syZEoQeHmmRuCguIE1DJtSlZS/rw8B/+G95lI8/T7HdfZ+JD60esn\nEskli4nhSt3/yH4uK6rNYAZ59tWXBLpUljxKiX33wEZeRKrBCiNJ9e+T5AJd5kR7\naqtNyRgSK66M2olSzazK4nayT+BYwmqsXDuop5cznyf6K6cUwYSrZFzFy9jqgFUm\n0QEJIkUn0DI+LGQp+uuyHo5KTH712pNmf6zILUPWoEZt8/77/lO+T6rUZxgpKG3x\nR326h5mEvS2thXaR50UoyqjAbTDiN/M08zh72H3dNtFRBo9ayf7PeSuHTexWbpk=\n=Xh8K\n-----END PGP SIGNATURE-----\n", "payload": "tree 54de320eceabadaf91913631bf2dc8c5c7e9b1c0\nparent 6c58e0194e0aaf51c524f70f530f9f3648fc37fc\nparent 9fdde0a000c7132fc0b79e2f44b52042dc8227dd\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585007390 +0100\ncommitter GitHub <noreply@github.com> 1585007390 +0100\n\nRollup merge of #70283 - CDirkx:regression-test-70155, r=oli-obk\n\nAdd regression test for #70155.\n\nWith #70166 merged, `RangeInclusive` now derives `PartialEq` and `Eq`, implementing structural equality and as a side effect the range is now usable with const generics, closing #70155.\n\nAs per [#70166 (comment)](https://github.com/rust-lang/rust/pull/70166#issuecomment-601872201) a test is added to avoid a change to the private fields or the equality implementation of the range from subtly reverting #70155.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdab7ff9084cedea98e08e5f88ae91531d2b1ae", "html_url": "https://github.com/rust-lang/rust/commit/7cdab7ff9084cedea98e08e5f88ae91531d2b1ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cdab7ff9084cedea98e08e5f88ae91531d2b1ae/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c58e0194e0aaf51c524f70f530f9f3648fc37fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c58e0194e0aaf51c524f70f530f9f3648fc37fc", "html_url": "https://github.com/rust-lang/rust/commit/6c58e0194e0aaf51c524f70f530f9f3648fc37fc"}, {"sha": "9fdde0a000c7132fc0b79e2f44b52042dc8227dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdde0a000c7132fc0b79e2f44b52042dc8227dd", "html_url": "https://github.com/rust-lang/rust/commit/9fdde0a000c7132fc0b79e2f44b52042dc8227dd"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "6d56fe0d7b8e3b150c24c71b0ddd1d6ecdcc477a", "filename": "src/test/ui/const-generics/std/const-generics-range.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7cdab7ff9084cedea98e08e5f88ae91531d2b1ae/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdab7ff9084cedea98e08e5f88ae91531d2b1ae/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs?ref=7cdab7ff9084cedea98e08e5f88ae91531d2b1ae", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+\n+// `Range` should be usable within const generics:\n+struct _Range<const R: std::ops::Range<usize>>;\n+const RANGE : _Range<{ 0 .. 1000 }> = _Range;\n+\n+// `RangeFrom` should be usable within const generics:\n+struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n+const RANGE_FROM : _RangeFrom<{ 0 .. }> = _RangeFrom;\n+\n+// `RangeFull` should be usable within const generics:\n+struct _RangeFull<const R: std::ops::RangeFull>;\n+const RANGE_FULL : _RangeFull<{ .. }> = _RangeFull;\n+\n+// Regression test for #70155\n+// `RangeInclusive` should be usable within const generics:\n+struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n+const RANGE_INCLUSIVE : _RangeInclusive<{ 0 ..= 999 }> = _RangeInclusive;\n+\n+// `RangeTo` should be usable within const generics:\n+struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n+const RANGE_TO : _RangeTo<{ .. 1000 }> = _RangeTo;\n+\n+// `RangeToInclusive` should be usable within const generics:\n+struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n+const RANGE_TO_INCLUSIVE : _RangeToInclusive<{ ..= 999 }> = _RangeToInclusive;\n+\n+pub fn main() {}"}]}