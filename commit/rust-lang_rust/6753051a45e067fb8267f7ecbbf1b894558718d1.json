{"sha": "6753051a45e067fb8267f7ecbbf1b894558718d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NTMwNTFhNDVlMDY3ZmI4MjY3ZjdlY2JiZjFiODk0NTU4NzE4ZDE=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-02-06T20:50:26Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-02-06T20:50:26Z"}, "message": "Some clippy cleanups", "tree": {"sha": "9da7f488f6564ac7f84d54ae9fc7296bcf2460e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da7f488f6564ac7f84d54ae9fc7296bcf2460e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6753051a45e067fb8267f7ecbbf1b894558718d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6753051a45e067fb8267f7ecbbf1b894558718d1", "html_url": "https://github.com/rust-lang/rust/commit/6753051a45e067fb8267f7ecbbf1b894558718d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6753051a45e067fb8267f7ecbbf1b894558718d1/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1e10a24fa3ba2b03a738afd8e1f7f472a12e29f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e10a24fa3ba2b03a738afd8e1f7f472a12e29f", "html_url": "https://github.com/rust-lang/rust/commit/c1e10a24fa3ba2b03a738afd8e1f7f472a12e29f"}], "stats": {"total": 104, "additions": 49, "deletions": 55}, "files": [{"sha": "f587b4fe6e1c2a80619cb7abe8df3b9ceb70260f", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::{\n \n use crate::{AssistCtx, Assist};\n \n-pub(crate) fn introduce_variable<'a>(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let node = ctx.covering_node();\n     if !valid_covering_node(node) {\n         return None;\n@@ -61,13 +61,13 @@ fn valid_covering_node(node: &SyntaxNode) -> bool {\n /// Check wether the node is a valid expression which can be extracted to a variable.\n /// In general that's true for any expression, but in some cases that would produce invalid code.\n fn valid_target_expr(node: &SyntaxNode) -> Option<&ast::Expr> {\n-    return match node.kind() {\n+    match node.kind() {\n         PATH_EXPR => None,\n         BREAK_EXPR => ast::BreakExpr::cast(node).and_then(|e| e.expr()),\n         RETURN_EXPR => ast::ReturnExpr::cast(node).and_then(|e| e.expr()),\n         LOOP_EXPR => ast::ReturnExpr::cast(node).and_then(|e| e.expr()),\n         _ => ast::Expr::cast(node),\n-    };\n+    }\n }\n \n /// Returns the syntax node which will follow the freshly introduced var"}, {"sha": "6826e966bff36a975cdd0a32a60c139e62354a5f", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -805,7 +805,7 @@ impl ExprCollector {\n                 let lit = match child.flavor() {\n                     LiteralFlavor::IntNumber { suffix } => {\n                         let known_name = suffix\n-                            .map(|s| Name::new(s))\n+                            .map(Name::new)\n                             .and_then(|name| UncertainIntTy::from_name(&name));\n \n                         Literal::Int(\n@@ -815,7 +815,7 @@ impl ExprCollector {\n                     }\n                     LiteralFlavor::FloatNumber { suffix } => {\n                         let known_name = suffix\n-                            .map(|s| Name::new(s))\n+                            .map(Name::new)\n                             .and_then(|name| UncertainFloatTy::from_name(&name));\n \n                         Literal::Float(\n@@ -910,7 +910,7 @@ impl ExprCollector {\n             }\n             ast::PatKind::PathPat(p) => {\n                 let path = p.path().and_then(Path::from_ast);\n-                path.map(|path| Pat::Path(path)).unwrap_or(Pat::Missing)\n+                path.map(Pat::Path).unwrap_or(Pat::Missing)\n             }\n             ast::PatKind::TuplePat(p) => {\n                 let args = p.args().map(|p| self.collect_pat(p)).collect();"}, {"sha": "368994bf7cf2de64474f695a0bb7c989c3e184b4", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -105,7 +105,7 @@ impl ExprScopes {\n     fn add_params_bindings(&mut self, scope: ScopeId, params: &[PatId]) {\n         let body = Arc::clone(&self.body);\n         params\n-            .into_iter()\n+            .iter()\n             .for_each(|pat| self.add_bindings(&body, scope, *pat));\n     }\n \n@@ -147,7 +147,7 @@ impl ScopesWithSyntaxMapping {\n         })\n     }\n \n-    pub fn scope_for_offset<'a>(&'a self, offset: TextUnit) -> Option<ScopeId> {\n+    pub fn scope_for_offset(&self, offset: TextUnit) -> Option<ScopeId> {\n         self.scopes\n             .scope_for\n             .iter()"}, {"sha": "094dbedb3593f43edf1763a8e4b3d3eb6c3de3b2", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -72,7 +72,7 @@ impl ImplBlock {\n     }\n \n     pub fn module(&self) -> Module {\n-        self.module_impl_blocks.module.clone()\n+        self.module_impl_blocks.module\n     }\n \n     pub fn target_trait_ref(&self) -> Option<&TypeRef> {"}, {"sha": "0f60d47423954b9a8552ad8cb21a6c8a5a5dc938", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -78,7 +78,7 @@ impl Resolver {\n                 _ => return PerNs::none(),\n             };\n             let module_res = item_map.resolve_path(db, module, path);\n-            module_res.map(|def| Resolution::Def(def))\n+            module_res.map(Resolution::Def)\n         }\n     }\n "}, {"sha": "86a7f8b8378972144a529d2900b3afd17dda5b85", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -1225,7 +1225,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     Ty::Tuple(ref tuple_args) => &**tuple_args,\n                     _ => &[],\n                 };\n-                let expectations_iter = expectations.into_iter().chain(repeat(&Ty::Unknown));\n+                let expectations_iter = expectations.iter().chain(repeat(&Ty::Unknown));\n \n                 let inner_tys = args\n                     .iter()\n@@ -1398,10 +1398,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let method_ty = self.insert_type_vars(method_ty);\n                 let (expected_receiver_ty, param_tys, ret_ty) = match &method_ty {\n                     Ty::FnPtr(sig) => {\n-                        if sig.input.len() > 0 {\n+                        if !sig.input.is_empty() {\n                             (\n                                 sig.input[0].clone(),\n-                                sig.input[1..].iter().cloned().collect(),\n+                                sig.input[1..].to_vec(),\n                                 sig.output.clone(),\n                             )\n                         } else {\n@@ -1411,7 +1411,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     Ty::FnDef { substs, sig, .. } => {\n                         let ret_ty = sig.output.clone().subst(&substs);\n \n-                        if sig.input.len() > 0 {\n+                        if !sig.input.is_empty() {\n                             let mut arg_iter = sig.input.iter().map(|ty| ty.clone().subst(&substs));\n                             let receiver_ty = arg_iter.next().unwrap();\n                             (receiver_ty, arg_iter.collect(), ret_ty)"}, {"sha": "a7d4517eecf88ba7cb25ef257ce142003d8fc8e7", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -113,7 +113,7 @@ impl CrateImplBlocks {\n         krate: Crate,\n     ) -> Arc<CrateImplBlocks> {\n         let mut crate_impl_blocks = CrateImplBlocks {\n-            krate: krate.clone(),\n+            krate,\n             impls: FxHashMap::default(),\n             impls_by_trait: FxHashMap::default(),\n         };"}, {"sha": "8abab02215e3e694eb077c4cf36ceb83fd4eeb45", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -130,12 +130,9 @@ impl<'a> CompletionContext<'a> {\n             .ancestors()\n             .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n             .find_map(ast::FnDef::cast);\n-        match (self.module, self.function_syntax) {\n-            (Some(module), Some(fn_def)) => {\n-                let function = source_binder::function_from_module(self.db, module, fn_def);\n-                self.function = Some(function);\n-            }\n-            _ => (),\n+        if let (Some(module), Some(fn_def)) = (self.module, self.function_syntax) {\n+            let function = source_binder::function_from_module(self.db, module, fn_def);\n+            self.function = Some(function);\n         }\n \n         let parent = match name_ref.syntax().parent() {"}, {"sha": "92e6e78bf9a7ba4716d7ec7153af7b325f030363", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -108,11 +108,11 @@ impl CompletionItem {\n         self.lookup\n             .as_ref()\n             .map(|it| it.as_str())\n-            .unwrap_or(self.label())\n+            .unwrap_or_else(|| self.label())\n     }\n \n     pub fn insert_text_format(&self) -> InsertTextFormat {\n-        self.insert_text_format.clone()\n+        self.insert_text_format\n     }\n     pub fn insert_text(&self) -> String {\n         match &self.insert_text {\n@@ -217,7 +217,7 @@ impl Builder {\n         let def = resolution\n             .as_ref()\n             .take_types()\n-            .or(resolution.as_ref().take_values());\n+            .or_else(|| resolution.as_ref().take_values());\n         let def = match def {\n             None => return self,\n             Some(it) => it,"}, {"sha": "681f36623d9fc96c83fcc6ded10660884d018067", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -89,7 +89,11 @@ pub(crate) fn reference_definition(\n         .and_then(hir::Path::from_ast)\n     {\n         let resolved = resolver.resolve_path(db, &path);\n-        match resolved.clone().take_types().or(resolved.take_values()) {\n+        match resolved\n+            .clone()\n+            .take_types()\n+            .or_else(|| resolved.take_values())\n+        {\n             Some(Resolution::Def(def)) => return Exact(NavigationTarget::from_def(db, def)),\n             Some(Resolution::LocalBinding(pat)) => {\n                 let body = resolver.body().expect(\"no body for local binding\");"}, {"sha": "68d59aae19b38ce0ea4569dca853a2451cad05fd", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -117,7 +117,7 @@ impl fmt::Debug for AnalysisChange {\n         if !self.libraries_added.is_empty() {\n             d.field(\"libraries_added\", &self.libraries_added.len());\n         }\n-        if !self.crate_graph.is_some() {\n+        if self.crate_graph.is_none() {\n             d.field(\"crate_graph\", &self.crate_graph);\n         }\n         d.finish()"}, {"sha": "1c9491a0a385e7a9f29b20431b425c195764635e", "filename": "crates/ra_ide_api/src/rename.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frename.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -95,12 +95,12 @@ fn rename_mod(\n     };\n     source_file_edits.push(edit);\n \n-    return Some(SourceChange {\n+    Some(SourceChange {\n         label: \"rename\".to_string(),\n         source_file_edits,\n         file_system_edits,\n         cursor_position: None,\n-    });\n+    })\n }\n \n fn rename_reference(\n@@ -124,12 +124,12 @@ fn rename_reference(\n         return None;\n     }\n \n-    return Some(SourceChange {\n+    Some(SourceChange {\n         label: \"rename\".to_string(),\n         source_file_edits: edit,\n         file_system_edits: Vec::new(),\n         cursor_position: None,\n-    });\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "9f939c650c9bd35ec01043f71284c5a21439412f", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -137,7 +137,7 @@ impl SymbolIndex {\n         symbols.par_sort_by(cmp);\n         symbols.dedup_by(|s1, s2| cmp(s1, s2) == Ordering::Equal);\n         let names = symbols.iter().map(|it| it.name.as_str().to_lowercase());\n-        let map = fst::Map::from_iter(names.into_iter().zip(0u64..)).unwrap();\n+        let map = fst::Map::from_iter(names.zip(0u64..)).unwrap();\n         SymbolIndex { symbols, map }\n     }\n "}, {"sha": "98138546622b08c89d7f63bc6999434d6052ec34", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -169,10 +169,7 @@ impl ConvWith for TextEdit {\n     type Output = Vec<lsp_types::TextEdit>;\n \n     fn conv_with(self, line_index: &LineIndex) -> Vec<lsp_types::TextEdit> {\n-        self.as_atoms()\n-            .into_iter()\n-            .map_conv_with(line_index)\n-            .collect()\n+        self.as_atoms().iter().map_conv_with(line_index).collect()\n     }\n }\n \n@@ -394,7 +391,7 @@ pub fn to_location_link(\n         origin_selection_range: Some(target.range.conv_with(line_index)),\n         target_uri,\n         target_range,\n-        target_selection_range: target_selection_range,\n+        target_selection_range,\n     };\n     Ok(res)\n }"}, {"sha": "aa55d12553327e28101ab69116d054adcd588c2b", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6753051a45e067fb8267f7ecbbf1b894558718d1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=6753051a45e067fb8267f7ecbbf1b894558718d1", "patch": "@@ -123,7 +123,7 @@ pub fn handle_on_type_formatting(\n     let edit = edit.source_file_edits.pop().unwrap();\n \n     let change: Vec<TextEdit> = edit.edit.conv_with(&line_index);\n-    return Ok(Some(change));\n+    Ok(Some(change))\n }\n \n pub fn handle_document_symbol(\n@@ -319,7 +319,7 @@ pub fn handle_runnables(\n         args: check_args,\n         env: FxHashMap::default(),\n     });\n-    return Ok(res);\n+    Ok(res)\n }\n \n pub fn handle_decorations(\n@@ -622,10 +622,8 @@ pub fn handle_code_lens(\n     // Gather runnables\n     for runnable in world.analysis().runnables(file_id)? {\n         let title = match &runnable.kind {\n-            RunnableKind::Test { name: _ } | RunnableKind::TestMod { path: _ } => {\n-                Some(\"\u25b6\ufe0fRun Test\")\n-            }\n-            RunnableKind::Bench { name: _ } => Some(\"Run Bench\"),\n+            RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => Some(\"\u25b6\ufe0fRun Test\"),\n+            RunnableKind::Bench { .. } => Some(\"Run Bench\"),\n             _ => None,\n         };\n \n@@ -679,7 +677,7 @@ pub fn handle_code_lens(\n             }),\n     );\n \n-    return Ok(Some(lenses));\n+    Ok(Some(lenses))\n }\n \n #[derive(Debug, Serialize, Deserialize)]\n@@ -722,22 +720,20 @@ pub fn handle_code_lens_resolve(world: ServerWorld, code_lens: CodeLens) -> Resu\n                     to_value(locations).unwrap(),\n                 ]),\n             };\n-            return Ok(CodeLens {\n+            Ok(CodeLens {\n                 range: code_lens.range,\n                 command: Some(cmd),\n                 data: None,\n-            });\n-        }\n-        None => {\n-            return Ok(CodeLens {\n-                range: code_lens.range,\n-                command: Some(Command {\n-                    title: \"Error\".into(),\n-                    ..Default::default()\n-                }),\n-                data: None,\n-            });\n+            })\n         }\n+        None => Ok(CodeLens {\n+            range: code_lens.range,\n+            command: Some(Command {\n+                title: \"Error\".into(),\n+                ..Default::default()\n+            }),\n+            data: None,\n+        }),\n     }\n }\n "}]}