{"sha": "e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "node_id": "C_kwDOAAsO6NoAKGU4NDc4MWFkNThhNzk4YzM3YTExYjU5ODQxN2VjYjdjYTdlYmI2YTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-18T12:28:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-18T12:28:00Z"}, "message": "Auto merge of #14603 - Veykril:workspaces, r=Veykril\n\nfix: Deduplicate passed workspaces by top level cargo workspace they belong to\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/14571\n\nWith this we should be supporting vscode workspaces properly", "tree": {"sha": "5d79bff2c5fe5785ce5b656d3aa80ad2e1494eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d79bff2c5fe5785ce5b656d3aa80ad2e1494eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "html_url": "https://github.com/rust-lang/rust/commit/e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b835f334f2c61d66c8c6554ec90325992752ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b835f334f2c61d66c8c6554ec90325992752ce3", "html_url": "https://github.com/rust-lang/rust/commit/9b835f334f2c61d66c8c6554ec90325992752ce3"}, {"sha": "9c408970eaff9c1b993903e5dea9f2558edfc013", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c408970eaff9c1b993903e5dea9f2558edfc013", "html_url": "https://github.com/rust-lang/rust/commit/9c408970eaff9c1b993903e5dea9f2558edfc013"}], "stats": {"total": 103, "additions": 56, "deletions": 47}, "files": [{"sha": "31651c3c26958700b948ea6efa29e9e8804a7ff5", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "patch": "@@ -27,7 +27,7 @@ use project_model::{\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n use serde::{de::DeserializeOwned, Deserialize};\n-use vfs::AbsPathBuf;\n+use vfs::{AbsPath, AbsPathBuf};\n \n use crate::{\n     caps::completion_item_edit_resolve,\n@@ -535,8 +535,9 @@ impl Default for ConfigData {\n \n #[derive(Debug, Clone)]\n pub struct Config {\n-    pub discovered_projects: Option<Vec<ProjectManifest>>,\n-    pub workspace_roots: Vec<AbsPathBuf>,\n+    discovered_projects: Vec<ProjectManifest>,\n+    /// The workspace roots as registered by the LSP client\n+    workspace_roots: Vec<AbsPathBuf>,\n     caps: lsp_types::ClientCapabilities,\n     root_path: AbsPathBuf,\n     data: ConfigData,\n@@ -742,7 +743,7 @@ impl Config {\n             caps,\n             data: ConfigData::default(),\n             detached_files: Vec::new(),\n-            discovered_projects: None,\n+            discovered_projects: Vec::new(),\n             root_path,\n             snippets: Default::default(),\n             workspace_roots,\n@@ -755,7 +756,17 @@ impl Config {\n         if discovered.is_empty() {\n             tracing::error!(\"failed to find any projects in {:?}\", &self.workspace_roots);\n         }\n-        self.discovered_projects = Some(discovered);\n+        self.discovered_projects = discovered;\n+    }\n+\n+    pub fn remove_workspace(&mut self, path: &AbsPath) {\n+        if let Some(position) = self.workspace_roots.iter().position(|it| it == path) {\n+            self.workspace_roots.remove(position);\n+        }\n+    }\n+\n+    pub fn add_workspaces(&mut self, paths: impl Iterator<Item = AbsPathBuf>) {\n+        self.workspace_roots.extend(paths);\n     }\n \n     pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigUpdateError> {\n@@ -860,25 +871,19 @@ impl Config {\n     pub fn linked_projects(&self) -> Vec<LinkedProject> {\n         match self.data.linkedProjects.as_slice() {\n             [] => {\n-                match self.discovered_projects.as_ref() {\n-                    Some(discovered_projects) => {\n-                        let exclude_dirs: Vec<_> = self\n-                            .data\n-                            .files_excludeDirs\n-                            .iter()\n-                            .map(|p| self.root_path.join(p))\n-                            .collect();\n-                        discovered_projects\n-                        .iter()\n-                        .filter(|(ProjectManifest::ProjectJson(path) | ProjectManifest::CargoToml(path))| {\n+                let exclude_dirs: Vec<_> =\n+                    self.data.files_excludeDirs.iter().map(|p| self.root_path.join(p)).collect();\n+                self.discovered_projects\n+                    .iter()\n+                    .filter(\n+                        |(ProjectManifest::ProjectJson(path)\n+                         | ProjectManifest::CargoToml(path))| {\n                             !exclude_dirs.iter().any(|p| path.starts_with(p))\n-                        })\n-                        .cloned()\n-                        .map(LinkedProject::from)\n-                        .collect()\n-                    }\n-                    None => Vec::new(),\n-                }\n+                        },\n+                    )\n+                    .cloned()\n+                    .map(LinkedProject::from)\n+                    .collect()\n             }\n             linked_projects => linked_projects\n                 .iter()"}, {"sha": "bcc3eed4ff9c8f7d188c2bd6c9b745df36e2aad3", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "patch": "@@ -777,14 +777,7 @@ pub(crate) fn handle_runnables(\n             }\n         }\n         None => {\n-            if !snap.config.linked_projects().is_empty()\n-                || !snap\n-                    .config\n-                    .discovered_projects\n-                    .as_ref()\n-                    .map(|projects| projects.is_empty())\n-                    .unwrap_or(true)\n-            {\n+            if !snap.config.linked_projects().is_empty() {\n                 res.push(lsp_ext::Runnable {\n                     label: \"cargo check --workspace\".to_string(),\n                     location: None,"}, {"sha": "afbc2bb6c21d48a4d0af7dc7eb3784efc6d8a06c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "patch": "@@ -908,8 +908,10 @@ impl GlobalState {\n                     // Re-fetch workspaces if a workspace related file has changed\n                     if let Some(abs_path) = vfs_path.as_path() {\n                         if reload::should_refresh_for_change(abs_path, ChangeKind::Modify) {\n-                            this.fetch_workspaces_queue\n-                                .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()), ());\n+                            this.fetch_workspaces_queue.request_op(\n+                                format!(\"DidSaveTextDocument {}\", abs_path.display()),\n+                                (),\n+                            );\n                         }\n                     }\n \n@@ -972,8 +974,7 @@ impl GlobalState {\n                 for workspace in params.event.removed {\n                     let Ok(path) = workspace.uri.to_file_path() else { continue };\n                     let Ok(path) = AbsPathBuf::try_from(path) else { continue };\n-                    let Some(position) = config.workspace_roots.iter().position(|it| it == &path) else { continue };\n-                    config.workspace_roots.remove(position);\n+                    config.remove_workspace(&path);\n                 }\n \n                 let added = params\n@@ -982,11 +983,12 @@ impl GlobalState {\n                     .into_iter()\n                     .filter_map(|it| it.uri.to_file_path().ok())\n                     .filter_map(|it| AbsPathBuf::try_from(it).ok());\n-                config.workspace_roots.extend(added);\n-                    if !config.has_linked_projects() && config.detached_files().is_empty() {\n-                        config.rediscover_workspaces();\n-                        this.fetch_workspaces_queue.request_op(\"client workspaces changed\".to_string(), ())\n-                    }\n+                config.add_workspaces(added);\n+                if !config.has_linked_projects() && config.detached_files().is_empty() {\n+                    config.rediscover_workspaces();\n+                    this.fetch_workspaces_queue\n+                        .request_op(\"client workspaces changed\".to_string(), ())\n+                }\n \n                 Ok(())\n             })?"}, {"sha": "1c5de2f596a30f0e184c553efa7e7cba29491a66", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "patch": "@@ -212,6 +212,20 @@ impl GlobalState {\n                     })\n                     .collect::<Vec<_>>();\n \n+                let mut i = 0;\n+                while i < workspaces.len() {\n+                    if let Ok(w) = &workspaces[i] {\n+                        if let Some(dupe) = workspaces[i + 1..]\n+                            .iter()\n+                            .filter_map(|it| it.as_ref().ok())\n+                            .position(|ws| ws.eq_ignore_build_data(w))\n+                        {\n+                            _ = workspaces.remove(dupe);\n+                        }\n+                    }\n+                    i += 1;\n+                }\n+\n                 if !detached_files.is_empty() {\n                     workspaces.push(project_model::ProjectWorkspace::load_detached_files(\n                         detached_files,"}, {"sha": "d0eeee189c51c56dd51aed3df1d66c3157fbe969", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84781ad58a798c37a11b598417ecb7ca7ebb6a7/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=e84781ad58a798c37a11b598417ecb7ca7ebb6a7", "patch": "@@ -9,7 +9,6 @@ use std::{\n use crossbeam_channel::{after, select, Receiver};\n use lsp_server::{Connection, Message, Notification, Request};\n use lsp_types::{notification::Exit, request::Shutdown, TextDocumentIdentifier, Url};\n-use project_model::ProjectManifest;\n use rust_analyzer::{config::Config, lsp_ext, main_loop};\n use serde::Serialize;\n use serde_json::{json, to_string_pretty, Value};\n@@ -101,10 +100,6 @@ impl<'a> Project<'a> {\n         if roots.is_empty() {\n             roots.push(tmp_dir_path.clone());\n         }\n-        let discovered_projects = roots\n-            .into_iter()\n-            .map(|it| ProjectManifest::discover_single(&it).unwrap())\n-            .collect::<Vec<_>>();\n \n         let mut config = Config::new(\n             tmp_dir_path,\n@@ -144,10 +139,10 @@ impl<'a> Project<'a> {\n                 })),\n                 ..Default::default()\n             },\n-            Vec::new(),\n+            roots,\n         );\n-        config.discovered_projects = Some(discovered_projects);\n         config.update(self.config).expect(\"invalid config\");\n+        config.rediscover_workspaces();\n \n         Server::new(tmp_dir, config)\n     }"}]}