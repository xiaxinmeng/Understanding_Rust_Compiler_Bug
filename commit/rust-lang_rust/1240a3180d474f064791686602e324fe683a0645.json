{"sha": "1240a3180d474f064791686602e324fe683a0645", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDBhMzE4MGQ0NzRmMDY0NzkxNjg2NjAyZTMyNGZlNjgzYTA2NDU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-21T17:24:25Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-21T17:24:25Z"}, "message": "typeck: remove redundant diverges code", "tree": {"sha": "7975899915b38e97d566e8dd99c395b9b29f4cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7975899915b38e97d566e8dd99c395b9b29f4cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1240a3180d474f064791686602e324fe683a0645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1240a3180d474f064791686602e324fe683a0645", "html_url": "https://github.com/rust-lang/rust/commit/1240a3180d474f064791686602e324fe683a0645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1240a3180d474f064791686602e324fe683a0645/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d47673d3d7351c16aa8528edabfc886d2228fbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d47673d3d7351c16aa8528edabfc886d2228fbb0", "html_url": "https://github.com/rust-lang/rust/commit/d47673d3d7351c16aa8528edabfc886d2228fbb0"}], "stats": {"total": 31, "additions": 8, "deletions": 23}, "files": [{"sha": "d339e3dbf5d68b83a4ffe06ad2f4adf919752952", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1240a3180d474f064791686602e324fe683a0645/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1240a3180d474f064791686602e324fe683a0645/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1240a3180d474f064791686602e324fe683a0645", "patch": "@@ -53,25 +53,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Otherwise, we have to union together the types that the arms produce and so forth.\n         let scrut_diverges = self.diverges.replace(Diverges::Maybe);\n \n-        // rust-lang/rust#55810: Typecheck patterns first (via eager\n-        // collection into `Vec`), so we get types for all bindings.\n-        let all_arm_pats_diverge: Vec<_> = arms\n-            .iter()\n-            .map(|arm| {\n-                let mut all_pats_diverge = Diverges::WarnedAlways;\n-                self.diverges.set(Diverges::Maybe);\n-                self.check_pat_top(&arm.pat, scrut_ty, Some(scrut.span), true);\n-                all_pats_diverge &= self.diverges.get();\n-\n-                // As discussed with @eddyb, this is for disabling unreachable_code\n-                // warnings on patterns (they're now subsumed by unreachable_patterns\n-                // warnings).\n-                match all_pats_diverge {\n-                    Diverges::Maybe => Diverges::Maybe,\n-                    Diverges::Always { .. } | Diverges::WarnedAlways => Diverges::WarnedAlways,\n-                }\n-            })\n-            .collect();\n+        // #55810: Type check patterns first so we get types for all bindings.\n+        for arm in arms {\n+            self.check_pat_top(&arm.pat, scrut_ty, Some(scrut.span), true);\n+        }\n \n         // Now typecheck the blocks.\n         //\n@@ -102,19 +87,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             CoerceMany::with_coercion_sites(coerce_first, arms)\n         };\n \n-        let mut other_arms = vec![]; // used only for diagnostics\n+        let mut other_arms = vec![]; // Used only for diagnostics.\n         let mut prior_arm_ty = None;\n-        for (i, (arm, pats_diverge)) in arms.iter().zip(all_arm_pats_diverge).enumerate() {\n+        for (i, arm) in arms.iter().enumerate() {\n             if let Some(g) = &arm.guard {\n-                self.diverges.set(pats_diverge);\n+                self.diverges.set(Diverges::Maybe);\n                 match g {\n                     hir::Guard::If(e) => {\n                         self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {})\n                     }\n                 };\n             }\n \n-            self.diverges.set(pats_diverge);\n+            self.diverges.set(Diverges::Maybe);\n             let arm_ty = if source_if\n                 && if_no_else\n                 && i != 0"}]}