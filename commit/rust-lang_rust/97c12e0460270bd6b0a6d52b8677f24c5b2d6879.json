{"sha": "97c12e0460270bd6b0a6d52b8677f24c5b2d6879", "node_id": "C_kwDOAAsO6NoAKDk3YzEyZTA0NjAyNzBiZDZiMGE2ZDUyYjg2NzdmMjRjNWIyZDY4Nzk", "commit": {"author": {"name": "Eric Wu", "email": "eric.dianhao.wu@gmail.com", "date": "2022-12-16T15:22:29Z"}, "committer": {"name": "Eric Wu", "email": "eric.dianhao.wu@gmail.com", "date": "2022-12-16T15:54:12Z"}, "message": "fix logic in IncrementVisitor\n\nThere used to be a logical bug where IncrementVisitor would\ncompletely stop checking an expression/block after seeing a continue\nstatement. This led to issue #10058 where a variable incremented\n(or otherwise modified) after any continue statement would still be\nconsidered incremented only once.\n\nThe solution is to continue scanning the expression after seeing a\n`continue` statement, but increment self.depth so that the Visitor\nthinks that the rest of the loop is within a conditional.", "tree": {"sha": "8c3d465602b5fc9df6a871114be1143b502d725f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c3d465602b5fc9df6a871114be1143b502d725f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c12e0460270bd6b0a6d52b8677f24c5b2d6879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c12e0460270bd6b0a6d52b8677f24c5b2d6879", "html_url": "https://github.com/rust-lang/rust/commit/97c12e0460270bd6b0a6d52b8677f24c5b2d6879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c12e0460270bd6b0a6d52b8677f24c5b2d6879/comments", "author": {"login": "EricWu2003", "id": 41087951, "node_id": "MDQ6VXNlcjQxMDg3OTUx", "avatar_url": "https://avatars.githubusercontent.com/u/41087951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricWu2003", "html_url": "https://github.com/EricWu2003", "followers_url": "https://api.github.com/users/EricWu2003/followers", "following_url": "https://api.github.com/users/EricWu2003/following{/other_user}", "gists_url": "https://api.github.com/users/EricWu2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricWu2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricWu2003/subscriptions", "organizations_url": "https://api.github.com/users/EricWu2003/orgs", "repos_url": "https://api.github.com/users/EricWu2003/repos", "events_url": "https://api.github.com/users/EricWu2003/events{/privacy}", "received_events_url": "https://api.github.com/users/EricWu2003/received_events", "type": "User", "site_admin": false}, "committer": {"login": "EricWu2003", "id": 41087951, "node_id": "MDQ6VXNlcjQxMDg3OTUx", "avatar_url": "https://avatars.githubusercontent.com/u/41087951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricWu2003", "html_url": "https://github.com/EricWu2003", "followers_url": "https://api.github.com/users/EricWu2003/followers", "following_url": "https://api.github.com/users/EricWu2003/following{/other_user}", "gists_url": "https://api.github.com/users/EricWu2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricWu2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricWu2003/subscriptions", "organizations_url": "https://api.github.com/users/EricWu2003/orgs", "repos_url": "https://api.github.com/users/EricWu2003/repos", "events_url": "https://api.github.com/users/EricWu2003/events{/privacy}", "received_events_url": "https://api.github.com/users/EricWu2003/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f3959f2bc4bd972add6f0c33df90aab808dc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f3959f2bc4bd972add6f0c33df90aab808dc7d", "html_url": "https://github.com/rust-lang/rust/commit/02f3959f2bc4bd972add6f0c33df90aab808dc7d"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "28ee24309cc467e57c6f374f8b0d86a314134d57", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97c12e0460270bd6b0a6d52b8677f24c5b2d6879/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c12e0460270bd6b0a6d52b8677f24c5b2d6879/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=97c12e0460270bd6b0a6d52b8677f24c5b2d6879", "patch": "@@ -25,7 +25,6 @@ pub(super) struct IncrementVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,                  // context reference\n     states: HirIdMap<IncrementVisitorVarState>, // incremented variables\n     depth: u32,                                 // depth of conditional expressions\n-    done: bool,\n }\n \n impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n@@ -34,7 +33,6 @@ impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n             cx,\n             states: HirIdMap::default(),\n             depth: 0,\n-            done: false,\n         }\n     }\n \n@@ -51,10 +49,6 @@ impl<'a, 'tcx> IncrementVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if self.done {\n-            return;\n-        }\n-\n         // If node is a variable\n         if let Some(def_id) = path_to_local(expr) {\n             if let Some(parent) = get_parent_expr(self.cx, expr) {\n@@ -95,7 +89,9 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n             walk_expr(self, expr);\n             self.depth -= 1;\n         } else if let ExprKind::Continue(_) = expr.kind {\n-            self.done = true;\n+            // If we see a `continue` block, then we increment depth so that the IncrementVisitor\n+            // state will be set to DontWarn if we see the variable being modified anywhere afterwards.\n+            self.depth += 1;\n         } else {\n             walk_expr(self, expr);\n         }"}, {"sha": "46565a97f005979b3bc03a5a4555d41a8c2ac0cc", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97c12e0460270bd6b0a6d52b8677f24c5b2d6879/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c12e0460270bd6b0a6d52b8677f24c5b2d6879/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=97c12e0460270bd6b0a6d52b8677f24c5b2d6879", "patch": "@@ -189,3 +189,33 @@ mod issue_7920 {\n         }\n     }\n }\n+\n+mod issue_10058 {\n+    pub fn test() {\n+        // should not lint since we are increasing counter potentially more than once in the loop\n+        let values = [0, 1, 0, 1, 1, 1, 0, 1, 0, 1];\n+        let mut counter = 0;\n+        for value in values {\n+            counter += 1;\n+\n+            if value == 0 {\n+                continue;\n+            }\n+\n+            counter += 1;\n+        }\n+    }\n+\n+    pub fn test2() {\n+        // should not lint since we are increasing counter potentially more than once in the loop\n+        let values = [0, 1, 0, 1, 1, 1, 0, 1, 0, 1];\n+        let mut counter = 0;\n+        for value in values {\n+            counter += 1;\n+\n+            if value != 0 {\n+                counter += 1;\n+            }\n+        }\n+    }\n+}"}]}