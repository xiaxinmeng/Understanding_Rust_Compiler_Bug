{"sha": "11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYzI4M2NkZmM1MzZjMmQwYzk4NGJlYTQ3YzdhYjI0NmQ0ZWQ1ZDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-21T14:18:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-30T13:15:35Z"}, "message": "Prohibit duplicate `macro_export`s", "tree": {"sha": "52db5a122f84015c81fcd089e9ad5097322e1f08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52db5a122f84015c81fcd089e9ad5097322e1f08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "html_url": "https://github.com/rust-lang/rust/commit/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20af72b943527d584df4b99e157262f9b297b3e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/20af72b943527d584df4b99e157262f9b297b3e4", "html_url": "https://github.com/rust-lang/rust/commit/20af72b943527d584df4b99e157262f9b297b3e4"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "d0cf30b6e069da927cfcf247cbdbabfe5341d003", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "patch": "@@ -17,6 +17,7 @@\n use errors::{Applicability, DiagnosticBuilder};\n use lint::{LintPass, LateLintPass, LintArray};\n use session::Session;\n+use syntax::ast;\n use syntax::codemap::Span;\n \n declare_lint! {\n@@ -285,6 +286,12 @@ declare_lint! {\n     \"warns about duplicate associated type bindings in generics\"\n }\n \n+declare_lint! {\n+    pub DUPLICATE_MACRO_EXPORTS,\n+    Deny,\n+    \"detects duplicate macro exports\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -337,6 +344,7 @@ impl LintPass for HardwiredLints {\n             ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             UNSTABLE_NAME_COLLISIONS,\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n+            DUPLICATE_MACRO_EXPORTS,\n         )\n     }\n }\n@@ -348,6 +356,7 @@ pub enum BuiltinLintDiagnostics {\n     Normal,\n     BareTraitObject(Span, /* is_global */ bool),\n     AbsPathWithModule(Span),\n+    DuplicatedMacroExports(ast::Ident, Span, Span),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -380,6 +389,10 @@ impl BuiltinLintDiagnostics {\n                 };\n                 db.span_suggestion_with_applicability(span, \"use `crate`\", sugg, app);\n             }\n+            BuiltinLintDiagnostics::DuplicatedMacroExports(ident, earlier_span, later_span) => {\n+                db.span_label(later_span, format!(\"`{}` already exported\", ident));\n+                db.span_note(earlier_span, \"previous macro export is now shadowed\");\n+            }\n         }\n     }\n }"}, {"sha": "6905b7beeef47261c089cc017ffdd3f61ed167e8", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "patch": "@@ -212,6 +212,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(DUPLICATE_MACRO_EXPORTS),\n+            reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n+            edition: Some(Edition::Edition2018),\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\","}, {"sha": "df96f5982cbfceff726171752af39a4e2d9b2314", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "patch": "@@ -18,13 +18,14 @@ use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n \n use rustc::ty;\n-use rustc::lint::builtin::PUB_USE_OF_PRIVATE_EXTERN_CRATE;\n+use rustc::lint::builtin::BuiltinLintDiagnostics;\n+use rustc::lint::builtin::{DUPLICATE_MACRO_EXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n \n-use syntax::ast::{Ident, Name, NodeId};\n+use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::keywords;\n@@ -974,7 +975,16 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         if module as *const _ == self.graph_root as *const _ {\n             let macro_exports = mem::replace(&mut self.macro_exports, Vec::new());\n             for export in macro_exports.into_iter().rev() {\n-                if exported_macro_names.insert(export.ident.modern(), export.span).is_none() {\n+                if let Some(later_span) = exported_macro_names.insert(export.ident.modern(),\n+                                                                      export.span) {\n+                    self.session.buffer_lint_with_diagnostic(\n+                        DUPLICATE_MACRO_EXPORTS,\n+                        CRATE_NODE_ID,\n+                        later_span,\n+                        &format!(\"a macro named `{}` has already been exported\", export.ident),\n+                        BuiltinLintDiagnostics::DuplicatedMacroExports(\n+                            export.ident, export.span, later_span));\n+                } else {\n                     reexports.push(export);\n                 }\n             }"}, {"sha": "cf4fee0e515c9b522f47b791d8c78c6cdf8db8df", "filename": "src/test/run-pass/auxiliary/issue_38715.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715.rs?ref=11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(duplicate_macro_exports)]\n+\n #[macro_export]\n macro_rules! foo { ($i:ident) => {} }\n "}, {"sha": "b16cd3a421095424e3716a59e1e5f911a277aa99", "filename": "src/test/run-pass/auxiliary/two_macros_2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftwo_macros_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftwo_macros_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftwo_macros_2.rs?ref=11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! macro_one { ($($t:tt)*) => ($($t)*) }\n+\n+macro_rules! macro_two { ($($t:tt)*) => ($($t)*) }"}, {"sha": "fc91ea870d51af8c2beb270d708f896f1fd829d9", "filename": "src/test/run-pass/mod_dir_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs?ref=11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "patch": "@@ -20,12 +20,12 @@ pub fn main() {\n \n     #[path = \"auxiliary\"]\n     mod foo {\n-        mod two_macros;\n+        mod two_macros_2;\n     }\n \n     #[path = \"auxiliary\"]\n     mod bar {\n-        macro_rules! m { () => { mod two_macros; } }\n+        macro_rules! m { () => { mod two_macros_2; } }\n         m!();\n     }\n }"}, {"sha": "552653c21bad61724113cd2e3d6d38cee8653183", "filename": "src/test/ui/issue-38715.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Fui%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Fui%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38715.rs?ref=11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! foo { ($i:ident) => {} }\n+\n+#[macro_export]\n+macro_rules! foo { () => {} } //~ ERROR a macro named `foo` has already been exported\n+                              //~| WARN this was previously accepted"}, {"sha": "a0dbcbd18c67336ab4e81fea35f0f3709554d6a7", "filename": "src/test/ui/issue-38715.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Fui%2Fissue-38715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11c283cdfc536c2d0c984bea47c7ab246d4ed5d3/src%2Ftest%2Fui%2Fissue-38715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38715.stderr?ref=11c283cdfc536c2d0c984bea47c7ab246d4ed5d3", "patch": "@@ -0,0 +1,22 @@\n+error: a macro named `foo` has already been exported\n+  --> $DIR/issue-38715.rs:15:1\n+   |\n+LL | macro_rules! foo { () => {} } //~ ERROR a macro named `foo` has already been exported\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `foo` already exported\n+   |\n+   = note: #[deny(duplicate_macro_exports)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #35896 <https://github.com/rust-lang/rust/issues/35896>\n+note: previous macro export is now shadowed\n+  --> $DIR/issue-38715.rs:12:1\n+   |\n+LL | macro_rules! foo { ($i:ident) => {} }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0601]: `main` function not found in crate `issue_38715`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-38715.rs`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}]}