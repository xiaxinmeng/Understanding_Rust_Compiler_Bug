{"sha": "e972bc8083d5228536dfd42913c8778b6bb04c8e", "node_id": "C_kwDOAAsO6NoAKGU5NzJiYzgwODNkNTIyODUzNmRmZDQyOTEzYzg3NzhiNmJiMDRjOGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T19:29:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T19:29:49Z"}, "message": "Auto merge of #107451 - matthiaskrgr:rollup-m4ucfu8, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #96763 (Fix maintainer validation message)\n - #106540 (Insert whitespace to avoid ident concatenation in suggestion)\n - #106763 (print why a test was ignored if its the only test specified)\n - #106769 (libtest: Print why a test was ignored if it's the only test specified.)\n - #106798 (Implement `signum` with `Ord`)\n - #107006 (Output tree representation on thir-tree)\n - #107078 (Update wording of invalid_doc_attributes docs.)\n - #107169 (Pass `--locked` to the x test tidy call)\n - #107431 (docs: remove colon from time header)\n - #107432 (rustdoc: remove unused class `has-srclink`)\n - #107448 (When stamp doesn't exist, should say Error, and print path to stamp file)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "17b5e1e05361b5496f3ae02cca79afe6e2485a2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b5e1e05361b5496f3ae02cca79afe6e2485a2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e972bc8083d5228536dfd42913c8778b6bb04c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e972bc8083d5228536dfd42913c8778b6bb04c8e", "html_url": "https://github.com/rust-lang/rust/commit/e972bc8083d5228536dfd42913c8778b6bb04c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e972bc8083d5228536dfd42913c8778b6bb04c8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7bf469fecc75792e1598a0842ac40b361f0107b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bf469fecc75792e1598a0842ac40b361f0107b", "html_url": "https://github.com/rust-lang/rust/commit/c7bf469fecc75792e1598a0842ac40b361f0107b"}, {"sha": "97e6abad182c7506893634ba7495a86bbd62e078", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e6abad182c7506893634ba7495a86bbd62e078", "html_url": "https://github.com/rust-lang/rust/commit/97e6abad182c7506893634ba7495a86bbd62e078"}], "stats": {"total": 1786, "additions": 1553, "deletions": 233}, "files": [{"sha": "446c6832cb7b607657a23a63e4c628d0123867cc", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -498,6 +498,21 @@ fn print_with_analysis(tcx: TyCtxt<'_>, ppm: PpMode) -> Result<(), ErrorGuarante\n             out\n         }\n \n+        ThirFlat => {\n+            let mut out = String::new();\n+            abort_on_err(rustc_hir_analysis::check_crate(tcx), tcx.sess);\n+            debug!(\"pretty printing THIR flat\");\n+            for did in tcx.hir().body_owners() {\n+                let _ = writeln!(\n+                    out,\n+                    \"{:?}:\\n{}\\n\",\n+                    did,\n+                    tcx.thir_flat(ty::WithOptConstParam::unknown(did))\n+                );\n+            }\n+            out\n+        }\n+\n         _ => unreachable!(),\n     };\n "}, {"sha": "4a38ab2159fddcd76f68e494f8f07b2ce4c2a147", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -3531,9 +3531,15 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// Previously, there were very like checks being performed on `#[doc(..)]`\n-    /// unlike the other attributes. It'll now catch all the issues that it\n-    /// silently ignored previously.\n+    /// Previously, incorrect usage of the `#[doc(..)]` attribute was not\n+    /// being validated. Usually these should be rejected as a hard error,\n+    /// but this lint was introduced to avoid breaking any existing\n+    /// crates which included them.\n+    ///\n+    /// This is a [future-incompatible] lint to transition this to a hard\n+    /// error in the future. See [issue #82730] for more details.\n+    ///\n+    /// [issue #82730]: https://github.com/rust-lang/rust/issues/82730\n     pub INVALID_DOC_ATTRIBUTES,\n     Warn,\n     \"detects invalid `#[doc(...)]` attributes\","}, {"sha": "1f1f4fc95b59aa666e791ef48a970466978d5a07", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -361,6 +361,13 @@ rustc_queries! {\n         desc { |tcx| \"constructing THIR tree for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n     }\n \n+    /// Create a list-like THIR representation for debugging.\n+    query thir_flat(key: ty::WithOptConstParam<LocalDefId>) -> String {\n+        no_hash\n+        arena_cache\n+        desc { |tcx| \"constructing flat THIR representation for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n+    }\n+\n     /// Set of all the `DefId`s in this crate that have MIR associated with\n     /// them. This includes all the body owners, but also things like struct\n     /// constructors."}, {"sha": "6f2dac467532cdfb50e2b54b24276ff7278719ee", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -29,6 +29,7 @@ use rustc_target::asm::InlineAsmRegOrRegClass;\n use std::fmt;\n use std::ops::Index;\n \n+pub mod print;\n pub mod visit;\n \n macro_rules! thir_with_elements {"}, {"sha": "60b903e99066b6d4ef8b5127f2dec7d768c05583", "filename": "compiler/rustc_middle/src/thir/print.rs", "status": "added", "additions": 881, "deletions": 0, "changes": 881, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fprint.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -0,0 +1,881 @@\n+use crate::thir::*;\n+use crate::ty::{self, TyCtxt};\n+\n+use std::fmt::{self, Write};\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    pub fn thir_tree_representation<'a>(self, thir: &'a Thir<'tcx>) -> String {\n+        let mut printer = ThirPrinter::new(thir);\n+        printer.print();\n+        printer.into_buffer()\n+    }\n+}\n+\n+struct ThirPrinter<'a, 'tcx> {\n+    thir: &'a Thir<'tcx>,\n+    fmt: String,\n+}\n+\n+const INDENT: &str = \"    \";\n+\n+macro_rules! print_indented {\n+    ($writer:ident, $s:expr, $indent_lvl:expr) => {\n+        let indent = (0..$indent_lvl).map(|_| INDENT).collect::<Vec<_>>().concat();\n+        writeln!($writer, \"{}{}\", indent, $s).expect(\"unable to write to ThirPrinter\");\n+    };\n+}\n+\n+impl<'a, 'tcx> Write for ThirPrinter<'a, 'tcx> {\n+    fn write_str(&mut self, s: &str) -> fmt::Result {\n+        self.fmt.push_str(s);\n+        Ok(())\n+    }\n+}\n+\n+impl<'a, 'tcx> ThirPrinter<'a, 'tcx> {\n+    fn new(thir: &'a Thir<'tcx>) -> Self {\n+        Self { thir, fmt: String::new() }\n+    }\n+\n+    fn print(&mut self) {\n+        print_indented!(self, \"params: [\", 0);\n+        for param in self.thir.params.iter() {\n+            self.print_param(param, 1);\n+        }\n+        print_indented!(self, \"]\", 0);\n+\n+        print_indented!(self, \"body:\", 0);\n+        let expr = ExprId::from_usize(self.thir.exprs.len() - 1);\n+        self.print_expr(expr, 1);\n+    }\n+\n+    fn into_buffer(self) -> String {\n+        self.fmt\n+    }\n+\n+    fn print_param(&mut self, param: &Param<'tcx>, depth_lvl: usize) {\n+        let Param { pat, ty, ty_span, self_kind, hir_id } = param;\n+\n+        print_indented!(self, \"Param {\", depth_lvl);\n+        print_indented!(self, format!(\"ty: {:?}\", ty), depth_lvl + 1);\n+        print_indented!(self, format!(\"ty_span: {:?}\", ty_span), depth_lvl + 1);\n+        print_indented!(self, format!(\"self_kind: {:?}\", self_kind), depth_lvl + 1);\n+        print_indented!(self, format!(\"hir_id: {:?}\", hir_id), depth_lvl + 1);\n+\n+        if let Some(pat) = pat {\n+            print_indented!(self, \"param: Some( \", depth_lvl + 1);\n+            self.print_pat(pat, depth_lvl + 2);\n+            print_indented!(self, \")\", depth_lvl + 1);\n+        } else {\n+            print_indented!(self, \"param: None\", depth_lvl + 1);\n+        }\n+\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_block(&mut self, block_id: BlockId, depth_lvl: usize) {\n+        let Block {\n+            targeted_by_break,\n+            opt_destruction_scope,\n+            span,\n+            region_scope,\n+            stmts,\n+            expr,\n+            safety_mode,\n+        } = &self.thir.blocks[block_id];\n+\n+        print_indented!(self, \"Block {\", depth_lvl);\n+        print_indented!(self, format!(\"targeted_by_break: {}\", targeted_by_break), depth_lvl + 1);\n+        print_indented!(\n+            self,\n+            format!(\"opt_destruction_scope: {:?}\", opt_destruction_scope),\n+            depth_lvl + 1\n+        );\n+        print_indented!(self, format!(\"span: {:?}\", span), depth_lvl + 1);\n+        print_indented!(self, format!(\"region_scope: {:?}\", region_scope), depth_lvl + 1);\n+        print_indented!(self, format!(\"safety_mode: {:?}\", safety_mode), depth_lvl + 1);\n+\n+        if stmts.len() > 0 {\n+            print_indented!(self, \"stmts: [\", depth_lvl + 1);\n+            for stmt in stmts.iter() {\n+                self.print_stmt(*stmt, depth_lvl + 2);\n+            }\n+            print_indented!(self, \"]\", depth_lvl + 1);\n+        } else {\n+            print_indented!(self, \"stmts: []\", depth_lvl + 1);\n+        }\n+\n+        if let Some(expr_id) = expr {\n+            print_indented!(self, \"expr:\", depth_lvl + 1);\n+            self.print_expr(*expr_id, depth_lvl + 2);\n+        } else {\n+            print_indented!(self, \"expr: []\", depth_lvl + 1);\n+        }\n+\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_stmt(&mut self, stmt_id: StmtId, depth_lvl: usize) {\n+        let Stmt { kind, opt_destruction_scope } = &self.thir.stmts[stmt_id];\n+\n+        print_indented!(self, \"Stmt {\", depth_lvl);\n+        print_indented!(\n+            self,\n+            format!(\"opt_destruction_scope: {:?}\", opt_destruction_scope),\n+            depth_lvl + 1\n+        );\n+\n+        match kind {\n+            StmtKind::Expr { scope, expr } => {\n+                print_indented!(self, \"kind: Expr {\", depth_lvl + 1);\n+                print_indented!(self, format!(\"scope: {:?}\", scope), depth_lvl + 2);\n+                print_indented!(self, \"expr:\", depth_lvl + 2);\n+                self.print_expr(*expr, depth_lvl + 3);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            StmtKind::Let {\n+                remainder_scope,\n+                init_scope,\n+                pattern,\n+                initializer,\n+                else_block,\n+                lint_level,\n+            } => {\n+                print_indented!(self, \"kind: Let {\", depth_lvl + 1);\n+                print_indented!(\n+                    self,\n+                    format!(\"remainder_scope: {:?}\", remainder_scope),\n+                    depth_lvl + 2\n+                );\n+                print_indented!(self, format!(\"init_scope: {:?}\", init_scope), depth_lvl + 2);\n+\n+                print_indented!(self, \"pattern: \", depth_lvl + 2);\n+                self.print_pat(pattern, depth_lvl + 3);\n+                print_indented!(self, \",\", depth_lvl + 2);\n+\n+                if let Some(init) = initializer {\n+                    print_indented!(self, \"initializer: Some(\", depth_lvl + 2);\n+                    self.print_expr(*init, depth_lvl + 3);\n+                    print_indented!(self, \")\", depth_lvl + 2);\n+                } else {\n+                    print_indented!(self, \"initializer: None\", depth_lvl + 2);\n+                }\n+\n+                if let Some(else_block) = else_block {\n+                    print_indented!(self, \"else_block: Some(\", depth_lvl + 2);\n+                    self.print_block(*else_block, depth_lvl + 3);\n+                    print_indented!(self, \")\", depth_lvl + 2);\n+                } else {\n+                    print_indented!(self, \"else_block: None\", depth_lvl + 2);\n+                }\n+\n+                print_indented!(self, format!(\"lint_level: {:?}\", lint_level), depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+        }\n+\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_expr(&mut self, expr: ExprId, depth_lvl: usize) {\n+        let Expr { ty, temp_lifetime, span, kind } = &self.thir[expr];\n+        print_indented!(self, \"Expr {\", depth_lvl);\n+        print_indented!(self, format!(\"ty: {:?}\", ty), depth_lvl + 1);\n+        print_indented!(self, format!(\"temp_lifetime: {:?}\", temp_lifetime), depth_lvl + 1);\n+        print_indented!(self, format!(\"span: {:?}\", span), depth_lvl + 1);\n+        print_indented!(self, \"kind: \", depth_lvl + 1);\n+        self.print_expr_kind(kind, depth_lvl + 2);\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_expr_kind(&mut self, expr_kind: &ExprKind<'tcx>, depth_lvl: usize) {\n+        use rustc_middle::thir::ExprKind::*;\n+\n+        match expr_kind {\n+            Scope { region_scope, value, lint_level } => {\n+                print_indented!(self, \"Scope {\", depth_lvl);\n+                print_indented!(self, format!(\"region_scope: {:?}\", region_scope), depth_lvl + 1);\n+                print_indented!(self, format!(\"lint_level: {:?}\", lint_level), depth_lvl + 1);\n+                print_indented!(self, \"value:\", depth_lvl + 1);\n+                self.print_expr(*value, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Box { value } => {\n+                print_indented!(self, \"Box {\", depth_lvl);\n+                self.print_expr(*value, depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            If { if_then_scope, cond, then, else_opt } => {\n+                print_indented!(self, \"If {\", depth_lvl);\n+                print_indented!(self, format!(\"if_then_scope: {:?}\", if_then_scope), depth_lvl + 1);\n+                print_indented!(self, \"cond:\", depth_lvl + 1);\n+                self.print_expr(*cond, depth_lvl + 2);\n+                print_indented!(self, \"then:\", depth_lvl + 1);\n+                self.print_expr(*then, depth_lvl + 2);\n+\n+                if let Some(else_expr) = else_opt {\n+                    print_indented!(self, \"else:\", depth_lvl + 1);\n+                    self.print_expr(*else_expr, depth_lvl + 2);\n+                }\n+\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Call { fun, args, ty, from_hir_call, fn_span } => {\n+                print_indented!(self, \"Call {\", depth_lvl);\n+                print_indented!(self, format!(\"ty: {:?}\", ty), depth_lvl + 1);\n+                print_indented!(self, format!(\"from_hir_call: {}\", from_hir_call), depth_lvl + 1);\n+                print_indented!(self, format!(\"fn_span: {:?}\", fn_span), depth_lvl + 1);\n+                print_indented!(self, \"fun:\", depth_lvl + 1);\n+                self.print_expr(*fun, depth_lvl + 2);\n+\n+                if args.len() > 0 {\n+                    print_indented!(self, \"args: [\", depth_lvl + 1);\n+                    for arg in args.iter() {\n+                        self.print_expr(*arg, depth_lvl + 2);\n+                    }\n+                    print_indented!(self, \"]\", depth_lvl + 1);\n+                } else {\n+                    print_indented!(self, \"args: []\", depth_lvl + 1);\n+                }\n+\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Deref { arg } => {\n+                print_indented!(self, \"Deref {\", depth_lvl);\n+                self.print_expr(*arg, depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Binary { op, lhs, rhs } => {\n+                print_indented!(self, \"Binary {\", depth_lvl);\n+                print_indented!(self, format!(\"op: {:?}\", op), depth_lvl + 1);\n+                print_indented!(self, \"lhs:\", depth_lvl + 1);\n+                self.print_expr(*lhs, depth_lvl + 2);\n+                print_indented!(self, \"rhs:\", depth_lvl + 1);\n+                self.print_expr(*rhs, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            LogicalOp { op, lhs, rhs } => {\n+                print_indented!(self, \"LogicalOp {\", depth_lvl);\n+                print_indented!(self, format!(\"op: {:?}\", op), depth_lvl + 1);\n+                print_indented!(self, \"lhs:\", depth_lvl + 1);\n+                self.print_expr(*lhs, depth_lvl + 2);\n+                print_indented!(self, \"rhs:\", depth_lvl + 1);\n+                self.print_expr(*rhs, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Unary { op, arg } => {\n+                print_indented!(self, \"Unary {\", depth_lvl);\n+                print_indented!(self, format!(\"op: {:?}\", op), depth_lvl + 1);\n+                print_indented!(self, \"arg:\", depth_lvl + 1);\n+                self.print_expr(*arg, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Cast { source } => {\n+                print_indented!(self, \"Cast {\", depth_lvl);\n+                print_indented!(self, \"source:\", depth_lvl + 1);\n+                self.print_expr(*source, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Use { source } => {\n+                print_indented!(self, \"Use {\", depth_lvl);\n+                print_indented!(self, \"source:\", depth_lvl + 1);\n+                self.print_expr(*source, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            NeverToAny { source } => {\n+                print_indented!(self, \"NeverToAny {\", depth_lvl);\n+                print_indented!(self, \"source:\", depth_lvl + 1);\n+                self.print_expr(*source, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Pointer { cast, source } => {\n+                print_indented!(self, \"Pointer {\", depth_lvl);\n+                print_indented!(self, format!(\"cast: {:?}\", cast), depth_lvl + 1);\n+                print_indented!(self, \"source:\", depth_lvl + 1);\n+                self.print_expr(*source, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Loop { body } => {\n+                print_indented!(self, \"Loop (\", depth_lvl);\n+                print_indented!(self, \"body:\", depth_lvl + 1);\n+                self.print_expr(*body, depth_lvl + 2);\n+                print_indented!(self, \")\", depth_lvl);\n+            }\n+            Let { expr, pat } => {\n+                print_indented!(self, \"Let {\", depth_lvl);\n+                print_indented!(self, \"expr:\", depth_lvl + 1);\n+                self.print_expr(*expr, depth_lvl + 2);\n+                print_indented!(self, format!(\"pat: {:?}\", pat), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Match { scrutinee, arms } => {\n+                print_indented!(self, \"Match {\", depth_lvl);\n+                print_indented!(self, \"scrutinee:\", depth_lvl + 1);\n+                self.print_expr(*scrutinee, depth_lvl + 2);\n+\n+                print_indented!(self, \"arms: [\", depth_lvl + 1);\n+                for arm_id in arms.iter() {\n+                    self.print_arm(*arm_id, depth_lvl + 2);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Block { block } => self.print_block(*block, depth_lvl),\n+            Assign { lhs, rhs } => {\n+                print_indented!(self, \"Assign {\", depth_lvl);\n+                print_indented!(self, \"lhs:\", depth_lvl + 1);\n+                self.print_expr(*lhs, depth_lvl + 2);\n+                print_indented!(self, \"rhs:\", depth_lvl + 1);\n+                self.print_expr(*rhs, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            AssignOp { op, lhs, rhs } => {\n+                print_indented!(self, \"AssignOp {\", depth_lvl);\n+                print_indented!(self, format!(\"op: {:?}\", op), depth_lvl + 1);\n+                print_indented!(self, \"lhs:\", depth_lvl + 1);\n+                self.print_expr(*lhs, depth_lvl + 2);\n+                print_indented!(self, \"rhs:\", depth_lvl + 1);\n+                self.print_expr(*rhs, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Field { lhs, variant_index, name } => {\n+                print_indented!(self, \"Field {\", depth_lvl);\n+                print_indented!(self, format!(\"variant_index: {:?}\", variant_index), depth_lvl + 1);\n+                print_indented!(self, format!(\"name: {:?}\", name), depth_lvl + 1);\n+                print_indented!(self, \"lhs:\", depth_lvl + 1);\n+                self.print_expr(*lhs, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Index { lhs, index } => {\n+                print_indented!(self, \"Index {\", depth_lvl);\n+                print_indented!(self, format!(\"index: {:?}\", index), depth_lvl + 1);\n+                print_indented!(self, \"lhs:\", depth_lvl + 1);\n+                self.print_expr(*lhs, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            VarRef { id } => {\n+                print_indented!(self, \"VarRef {\", depth_lvl);\n+                print_indented!(self, format!(\"id: {:?}\", id), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            UpvarRef { closure_def_id, var_hir_id } => {\n+                print_indented!(self, \"UpvarRef {\", depth_lvl);\n+                print_indented!(\n+                    self,\n+                    format!(\"closure_def_id: {:?}\", closure_def_id),\n+                    depth_lvl + 1\n+                );\n+                print_indented!(self, format!(\"var_hir_id: {:?}\", var_hir_id), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Borrow { borrow_kind, arg } => {\n+                print_indented!(self, \"Borrow (\", depth_lvl);\n+                print_indented!(self, format!(\"borrow_kind: {:?}\", borrow_kind), depth_lvl + 1);\n+                print_indented!(self, \"arg:\", depth_lvl + 1);\n+                self.print_expr(*arg, depth_lvl + 2);\n+                print_indented!(self, \")\", depth_lvl);\n+            }\n+            AddressOf { mutability, arg } => {\n+                print_indented!(self, \"AddressOf {\", depth_lvl);\n+                print_indented!(self, format!(\"mutability: {:?}\", mutability), depth_lvl + 1);\n+                print_indented!(self, \"arg:\", depth_lvl + 1);\n+                self.print_expr(*arg, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Break { label, value } => {\n+                print_indented!(self, \"Break (\", depth_lvl);\n+                print_indented!(self, format!(\"label: {:?}\", label), depth_lvl + 1);\n+\n+                if let Some(value) = value {\n+                    print_indented!(self, \"value:\", depth_lvl + 1);\n+                    self.print_expr(*value, depth_lvl + 2);\n+                }\n+\n+                print_indented!(self, \")\", depth_lvl);\n+            }\n+            Continue { label } => {\n+                print_indented!(self, \"Continue {\", depth_lvl);\n+                print_indented!(self, format!(\"label: {:?}\", label), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Return { value } => {\n+                print_indented!(self, \"Return {\", depth_lvl);\n+                print_indented!(self, \"value:\", depth_lvl + 1);\n+\n+                if let Some(value) = value {\n+                    self.print_expr(*value, depth_lvl + 2);\n+                }\n+\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            ConstBlock { did, substs } => {\n+                print_indented!(self, \"ConstBlock {\", depth_lvl);\n+                print_indented!(self, format!(\"did: {:?}\", did), depth_lvl + 1);\n+                print_indented!(self, format!(\"substs: {:?}\", substs), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Repeat { value, count } => {\n+                print_indented!(self, \"Repeat {\", depth_lvl);\n+                print_indented!(self, format!(\"count: {:?}\", count), depth_lvl + 1);\n+                print_indented!(self, \"value:\", depth_lvl + 1);\n+                self.print_expr(*value, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Array { fields } => {\n+                print_indented!(self, \"Array {\", depth_lvl);\n+                print_indented!(self, \"fields: [\", depth_lvl + 1);\n+                for field_id in fields.iter() {\n+                    self.print_expr(*field_id, depth_lvl + 2);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Tuple { fields } => {\n+                print_indented!(self, \"Tuple {\", depth_lvl);\n+                print_indented!(self, \"fields: [\", depth_lvl + 1);\n+                for field_id in fields.iter() {\n+                    self.print_expr(*field_id, depth_lvl + 2);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Adt(adt_expr) => {\n+                print_indented!(self, \"Adt {\", depth_lvl);\n+                self.print_adt_expr(&**adt_expr, depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            PlaceTypeAscription { source, user_ty } => {\n+                print_indented!(self, \"PlaceTypeAscription {\", depth_lvl);\n+                print_indented!(self, format!(\"user_ty: {:?}\", user_ty), depth_lvl + 1);\n+                print_indented!(self, \"source:\", depth_lvl + 1);\n+                self.print_expr(*source, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            ValueTypeAscription { source, user_ty } => {\n+                print_indented!(self, \"ValueTypeAscription {\", depth_lvl);\n+                print_indented!(self, format!(\"user_ty: {:?}\", user_ty), depth_lvl + 1);\n+                print_indented!(self, \"source:\", depth_lvl + 1);\n+                self.print_expr(*source, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Closure(closure_expr) => {\n+                print_indented!(self, \"Closure {\", depth_lvl);\n+                print_indented!(self, \"closure_expr:\", depth_lvl + 1);\n+                self.print_closure_expr(&**closure_expr, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Literal { lit, neg } => {\n+                print_indented!(\n+                    self,\n+                    format!(\"Literal( lit: {:?}, neg: {:?})\\n\", lit, neg),\n+                    depth_lvl\n+                );\n+            }\n+            NonHirLiteral { lit, user_ty } => {\n+                print_indented!(self, \"NonHirLiteral {\", depth_lvl);\n+                print_indented!(self, format!(\"lit: {:?}\", lit), depth_lvl + 1);\n+                print_indented!(self, format!(\"user_ty: {:?}\", user_ty), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            ZstLiteral { user_ty } => {\n+                print_indented!(self, format!(\"ZstLiteral(user_ty: {:?})\", user_ty), depth_lvl);\n+            }\n+            NamedConst { def_id, substs, user_ty } => {\n+                print_indented!(self, \"NamedConst {\", depth_lvl);\n+                print_indented!(self, format!(\"def_id: {:?}\", def_id), depth_lvl + 1);\n+                print_indented!(self, format!(\"user_ty: {:?}\", user_ty), depth_lvl + 1);\n+                print_indented!(self, format!(\"substs: {:?}\", substs), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            ConstParam { param, def_id } => {\n+                print_indented!(self, \"ConstParam {\", depth_lvl);\n+                print_indented!(self, format!(\"def_id: {:?}\", def_id), depth_lvl + 1);\n+                print_indented!(self, format!(\"param: {:?}\", param), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            StaticRef { alloc_id, ty, def_id } => {\n+                print_indented!(self, \"StaticRef {\", depth_lvl);\n+                print_indented!(self, format!(\"def_id: {:?}\", def_id), depth_lvl + 1);\n+                print_indented!(self, format!(\"ty: {:?}\", ty), depth_lvl + 1);\n+                print_indented!(self, format!(\"alloc_id: {:?}\", alloc_id), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            InlineAsm(expr) => {\n+                print_indented!(self, \"InlineAsm {\", depth_lvl);\n+                print_indented!(self, \"expr:\", depth_lvl + 1);\n+                self.print_inline_asm_expr(&**expr, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            ThreadLocalRef(def_id) => {\n+                print_indented!(self, \"ThreadLocalRef {\", depth_lvl);\n+                print_indented!(self, format!(\"def_id: {:?}\", def_id), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+            Yield { value } => {\n+                print_indented!(self, \"Yield {\", depth_lvl);\n+                print_indented!(self, \"value:\", depth_lvl + 1);\n+                self.print_expr(*value, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl);\n+            }\n+        }\n+    }\n+\n+    fn print_adt_expr(&mut self, adt_expr: &AdtExpr<'tcx>, depth_lvl: usize) {\n+        print_indented!(self, \"adt_def:\", depth_lvl);\n+        self.print_adt_def(adt_expr.adt_def, depth_lvl + 1);\n+        print_indented!(\n+            self,\n+            format!(\"variant_index: {:?}\", adt_expr.variant_index),\n+            depth_lvl + 1\n+        );\n+        print_indented!(self, format!(\"substs: {:?}\", adt_expr.substs), depth_lvl + 1);\n+        print_indented!(self, format!(\"user_ty: {:?}\", adt_expr.user_ty), depth_lvl + 1);\n+\n+        for (i, field_expr) in adt_expr.fields.iter().enumerate() {\n+            print_indented!(self, format!(\"field {}:\", i), depth_lvl + 1);\n+            self.print_expr(field_expr.expr, depth_lvl + 2);\n+        }\n+\n+        if let Some(ref base) = adt_expr.base {\n+            print_indented!(self, \"base:\", depth_lvl + 1);\n+            self.print_fru_info(base, depth_lvl + 2);\n+        } else {\n+            print_indented!(self, \"base: None\", depth_lvl + 1);\n+        }\n+    }\n+\n+    fn print_adt_def(&mut self, adt_def: ty::AdtDef<'tcx>, depth_lvl: usize) {\n+        print_indented!(self, \"AdtDef {\", depth_lvl);\n+        print_indented!(self, format!(\"did: {:?}\", adt_def.did()), depth_lvl + 1);\n+        print_indented!(self, format!(\"variants: {:?}\", adt_def.variants()), depth_lvl + 1);\n+        print_indented!(self, format!(\"flags: {:?}\", adt_def.flags()), depth_lvl + 1);\n+        print_indented!(self, format!(\"repr: {:?}\", adt_def.repr()), depth_lvl + 1);\n+    }\n+\n+    fn print_fru_info(&mut self, fru_info: &FruInfo<'tcx>, depth_lvl: usize) {\n+        print_indented!(self, \"FruInfo {\", depth_lvl);\n+        print_indented!(self, \"base: \", depth_lvl + 1);\n+        self.print_expr(fru_info.base, depth_lvl + 2);\n+        print_indented!(self, \"field_types: [\", depth_lvl + 1);\n+        for ty in fru_info.field_types.iter() {\n+            print_indented!(self, format!(\"ty: {:?}\", ty), depth_lvl + 2);\n+        }\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_arm(&mut self, arm_id: ArmId, depth_lvl: usize) {\n+        print_indented!(self, \"Arm {\", depth_lvl);\n+\n+        let arm = &self.thir.arms[arm_id];\n+        let Arm { pattern, guard, body, lint_level, scope, span } = arm;\n+\n+        print_indented!(self, \"pattern: \", depth_lvl + 1);\n+        self.print_pat(pattern, depth_lvl + 2);\n+\n+        if let Some(guard) = guard {\n+            print_indented!(self, \"guard: \", depth_lvl + 1);\n+            self.print_guard(guard, depth_lvl + 2);\n+        } else {\n+            print_indented!(self, \"guard: None\", depth_lvl + 1);\n+        }\n+\n+        print_indented!(self, \"body: \", depth_lvl + 1);\n+        self.print_expr(*body, depth_lvl + 2);\n+        print_indented!(self, format!(\"lint_level: {:?}\", lint_level), depth_lvl + 1);\n+        print_indented!(self, format!(\"scope: {:?}\", scope), depth_lvl + 1);\n+        print_indented!(self, format!(\"span: {:?}\", span), depth_lvl + 1);\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_pat(&mut self, pat: &Box<Pat<'tcx>>, depth_lvl: usize) {\n+        let Pat { ty, span, kind } = &**pat;\n+\n+        print_indented!(self, \"Pat: {\", depth_lvl);\n+        print_indented!(self, format!(\"ty: {:?}\", ty), depth_lvl + 1);\n+        print_indented!(self, format!(\"span: {:?}\", span), depth_lvl + 1);\n+        self.print_pat_kind(kind, depth_lvl + 1);\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_pat_kind(&mut self, pat_kind: &PatKind<'tcx>, depth_lvl: usize) {\n+        print_indented!(self, \"kind: PatKind {\", depth_lvl);\n+\n+        match pat_kind {\n+            PatKind::Wild => {\n+                print_indented!(self, \"Wild\", depth_lvl + 1);\n+            }\n+            PatKind::AscribeUserType { ascription, subpattern } => {\n+                print_indented!(self, \"AscribeUserType: {\", depth_lvl + 1);\n+                print_indented!(self, format!(\"ascription: {:?}\", ascription), depth_lvl + 2);\n+                print_indented!(self, \"subpattern: \", depth_lvl + 2);\n+                self.print_pat(subpattern, depth_lvl + 3);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            PatKind::Binding { mutability, name, mode, var, ty, subpattern, is_primary } => {\n+                print_indented!(self, \"Binding {\", depth_lvl + 1);\n+                print_indented!(self, format!(\"mutability: {:?}\", mutability), depth_lvl + 2);\n+                print_indented!(self, format!(\"name: {:?}\", name), depth_lvl + 2);\n+                print_indented!(self, format!(\"mode: {:?}\", mode), depth_lvl + 2);\n+                print_indented!(self, format!(\"var: {:?}\", var), depth_lvl + 2);\n+                print_indented!(self, format!(\"ty: {:?}\", ty), depth_lvl + 2);\n+                print_indented!(self, format!(\"is_primary: {:?}\", is_primary), depth_lvl + 2);\n+\n+                if let Some(subpattern) = subpattern {\n+                    print_indented!(self, \"subpattern: Some( \", depth_lvl + 2);\n+                    self.print_pat(subpattern, depth_lvl + 3);\n+                    print_indented!(self, \")\", depth_lvl + 2);\n+                } else {\n+                    print_indented!(self, \"subpattern: None\", depth_lvl + 2);\n+                }\n+\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            PatKind::Variant { adt_def, substs, variant_index, subpatterns } => {\n+                print_indented!(self, \"Variant {\", depth_lvl + 1);\n+                print_indented!(self, \"adt_def: \", depth_lvl + 2);\n+                self.print_adt_def(*adt_def, depth_lvl + 3);\n+                print_indented!(self, format!(\"substs: {:?}\", substs), depth_lvl + 2);\n+                print_indented!(self, format!(\"variant_index: {:?}\", variant_index), depth_lvl + 2);\n+\n+                if subpatterns.len() > 0 {\n+                    print_indented!(self, \"subpatterns: [\", depth_lvl + 2);\n+                    for field_pat in subpatterns.iter() {\n+                        self.print_pat(&field_pat.pattern, depth_lvl + 3);\n+                    }\n+                    print_indented!(self, \"]\", depth_lvl + 2);\n+                } else {\n+                    print_indented!(self, \"subpatterns: []\", depth_lvl + 2);\n+                }\n+\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            PatKind::Leaf { subpatterns } => {\n+                print_indented!(self, \"Leaf { \", depth_lvl + 1);\n+                print_indented!(self, \"subpatterns: [\", depth_lvl + 2);\n+                for field_pat in subpatterns.iter() {\n+                    self.print_pat(&field_pat.pattern, depth_lvl + 3);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            PatKind::Deref { subpattern } => {\n+                print_indented!(self, \"Deref { \", depth_lvl + 1);\n+                print_indented!(self, \"subpattern: \", depth_lvl + 2);\n+                self.print_pat(subpattern, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            PatKind::Constant { value } => {\n+                print_indented!(self, \"Constant {\", depth_lvl + 1);\n+                print_indented!(self, format!(\"value: {:?}\", value), depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            PatKind::Range(pat_range) => {\n+                print_indented!(self, format!(\"Range ( {:?} )\", pat_range), depth_lvl + 1);\n+            }\n+            PatKind::Slice { prefix, slice, suffix } => {\n+                print_indented!(self, \"Slice {\", depth_lvl + 1);\n+\n+                print_indented!(self, \"prefix: [\", depth_lvl + 2);\n+                for prefix_pat in prefix.iter() {\n+                    self.print_pat(prefix_pat, depth_lvl + 3);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 2);\n+\n+                if let Some(slice) = slice {\n+                    print_indented!(self, \"slice: \", depth_lvl + 2);\n+                    self.print_pat(slice, depth_lvl + 3);\n+                }\n+\n+                print_indented!(self, \"suffix: [\", depth_lvl + 2);\n+                for suffix_pat in suffix.iter() {\n+                    self.print_pat(suffix_pat, depth_lvl + 3);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 2);\n+\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            PatKind::Array { prefix, slice, suffix } => {\n+                print_indented!(self, \"Array {\", depth_lvl + 1);\n+\n+                print_indented!(self, \"prefix: [\", depth_lvl + 2);\n+                for prefix_pat in prefix.iter() {\n+                    self.print_pat(prefix_pat, depth_lvl + 3);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 2);\n+\n+                if let Some(slice) = slice {\n+                    print_indented!(self, \"slice: \", depth_lvl + 2);\n+                    self.print_pat(slice, depth_lvl + 3);\n+                }\n+\n+                print_indented!(self, \"suffix: [\", depth_lvl + 2);\n+                for suffix_pat in suffix.iter() {\n+                    self.print_pat(suffix_pat, depth_lvl + 3);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 2);\n+\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            PatKind::Or { pats } => {\n+                print_indented!(self, \"Or {\", depth_lvl + 1);\n+                print_indented!(self, \"pats: [\", depth_lvl + 2);\n+                for pat in pats.iter() {\n+                    self.print_pat(pat, depth_lvl + 3);\n+                }\n+                print_indented!(self, \"]\", depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+        }\n+\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_guard(&mut self, guard: &Guard<'tcx>, depth_lvl: usize) {\n+        print_indented!(self, \"Guard {\", depth_lvl);\n+\n+        match guard {\n+            Guard::If(expr_id) => {\n+                print_indented!(self, \"If (\", depth_lvl + 1);\n+                self.print_expr(*expr_id, depth_lvl + 2);\n+                print_indented!(self, \")\", depth_lvl + 1);\n+            }\n+            Guard::IfLet(pat, expr_id) => {\n+                print_indented!(self, \"IfLet (\", depth_lvl + 1);\n+                self.print_pat(pat, depth_lvl + 2);\n+                print_indented!(self, \",\", depth_lvl + 1);\n+                self.print_expr(*expr_id, depth_lvl + 2);\n+                print_indented!(self, \")\", depth_lvl + 1);\n+            }\n+        }\n+\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_closure_expr(&mut self, expr: &ClosureExpr<'tcx>, depth_lvl: usize) {\n+        let ClosureExpr { closure_id, substs, upvars, movability, fake_reads } = expr;\n+\n+        print_indented!(self, \"ClosureExpr {\", depth_lvl);\n+        print_indented!(self, format!(\"closure_id: {:?}\", closure_id), depth_lvl + 1);\n+        print_indented!(self, format!(\"substs: {:?}\", substs), depth_lvl + 1);\n+\n+        if upvars.len() > 0 {\n+            print_indented!(self, \"upvars: [\", depth_lvl + 1);\n+            for upvar in upvars.iter() {\n+                self.print_expr(*upvar, depth_lvl + 2);\n+                print_indented!(self, \",\", depth_lvl + 1);\n+            }\n+            print_indented!(self, \"]\", depth_lvl + 1);\n+        } else {\n+            print_indented!(self, \"upvars: []\", depth_lvl + 1);\n+        }\n+\n+        print_indented!(self, format!(\"movability: {:?}\", movability), depth_lvl + 1);\n+\n+        if fake_reads.len() > 0 {\n+            print_indented!(self, \"fake_reads: [\", depth_lvl + 1);\n+            for (fake_read_expr, cause, hir_id) in fake_reads.iter() {\n+                print_indented!(self, \"(\", depth_lvl + 2);\n+                self.print_expr(*fake_read_expr, depth_lvl + 3);\n+                print_indented!(self, \",\", depth_lvl + 2);\n+                print_indented!(self, format!(\"cause: {:?}\", cause), depth_lvl + 3);\n+                print_indented!(self, \",\", depth_lvl + 2);\n+                print_indented!(self, format!(\"hir_id: {:?}\", hir_id), depth_lvl + 3);\n+                print_indented!(self, \"),\", depth_lvl + 2);\n+            }\n+            print_indented!(self, \"]\", depth_lvl + 1);\n+        } else {\n+            print_indented!(self, \"fake_reads: []\", depth_lvl + 1);\n+        }\n+\n+        print_indented!(self, \"}\", depth_lvl);\n+    }\n+\n+    fn print_inline_asm_expr(&mut self, expr: &InlineAsmExpr<'tcx>, depth_lvl: usize) {\n+        let InlineAsmExpr { template, operands, options, line_spans } = expr;\n+\n+        print_indented!(self, \"InlineAsmExpr {\", depth_lvl);\n+\n+        print_indented!(self, \"template: [\", depth_lvl + 1);\n+        for template_piece in template.iter() {\n+            print_indented!(self, format!(\"{:?}\", template_piece), depth_lvl + 2);\n+        }\n+        print_indented!(self, \"]\", depth_lvl + 1);\n+\n+        print_indented!(self, \"operands: [\", depth_lvl + 1);\n+        for operand in operands.iter() {\n+            self.print_inline_operand(operand, depth_lvl + 2);\n+        }\n+        print_indented!(self, \"]\", depth_lvl + 1);\n+\n+        print_indented!(self, format!(\"options: {:?}\", options), depth_lvl + 1);\n+        print_indented!(self, format!(\"line_spans: {:?}\", line_spans), depth_lvl + 1);\n+    }\n+\n+    fn print_inline_operand(&mut self, operand: &InlineAsmOperand<'tcx>, depth_lvl: usize) {\n+        match operand {\n+            InlineAsmOperand::In { reg, expr } => {\n+                print_indented!(self, \"InlineAsmOperand::In {\", depth_lvl);\n+                print_indented!(self, format!(\"reg: {:?}\", reg), depth_lvl + 1);\n+                print_indented!(self, \"expr: \", depth_lvl + 1);\n+                self.print_expr(*expr, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            InlineAsmOperand::Out { reg, late, expr } => {\n+                print_indented!(self, \"InlineAsmOperand::Out {\", depth_lvl);\n+                print_indented!(self, format!(\"reg: {:?}\", reg), depth_lvl + 1);\n+                print_indented!(self, format!(\"late: {:?}\", late), depth_lvl + 1);\n+\n+                if let Some(out) = expr {\n+                    print_indented!(self, \"place: Some( \", depth_lvl + 1);\n+                    self.print_expr(*out, depth_lvl + 2);\n+                    print_indented!(self, \")\", depth_lvl + 1);\n+                } else {\n+                    print_indented!(self, \"place: None\", depth_lvl + 1);\n+                }\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            InlineAsmOperand::InOut { reg, late, expr } => {\n+                print_indented!(self, \"InlineAsmOperand::InOut {\", depth_lvl);\n+                print_indented!(self, format!(\"reg: {:?}\", reg), depth_lvl + 1);\n+                print_indented!(self, format!(\"late: {:?}\", late), depth_lvl + 1);\n+                print_indented!(self, \"expr: \", depth_lvl + 1);\n+                self.print_expr(*expr, depth_lvl + 2);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            InlineAsmOperand::SplitInOut { reg, late, in_expr, out_expr } => {\n+                print_indented!(self, \"InlineAsmOperand::SplitInOut {\", depth_lvl);\n+                print_indented!(self, format!(\"reg: {:?}\", reg), depth_lvl + 1);\n+                print_indented!(self, format!(\"late: {:?}\", late), depth_lvl + 1);\n+                print_indented!(self, \"in_expr: \", depth_lvl + 1);\n+                self.print_expr(*in_expr, depth_lvl + 2);\n+\n+                if let Some(out_expr) = out_expr {\n+                    print_indented!(self, \"out_expr: Some( \", depth_lvl + 1);\n+                    self.print_expr(*out_expr, depth_lvl + 2);\n+                    print_indented!(self, \")\", depth_lvl + 1);\n+                } else {\n+                    print_indented!(self, \"out_expr: None\", depth_lvl + 1);\n+                }\n+\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            InlineAsmOperand::Const { value, span } => {\n+                print_indented!(self, \"InlineAsmOperand::Const {\", depth_lvl);\n+                print_indented!(self, format!(\"value: {:?}\", value), depth_lvl + 1);\n+                print_indented!(self, format!(\"span: {:?}\", span), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            InlineAsmOperand::SymFn { value, span } => {\n+                print_indented!(self, \"InlineAsmOperand::SymFn {\", depth_lvl);\n+                print_indented!(self, format!(\"value: {:?}\", *value), depth_lvl + 1);\n+                print_indented!(self, format!(\"span: {:?}\", span), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+            InlineAsmOperand::SymStatic { def_id } => {\n+                print_indented!(self, \"InlineAsmOperand::SymStatic {\", depth_lvl);\n+                print_indented!(self, format!(\"def_id: {:?}\", def_id), depth_lvl + 1);\n+                print_indented!(self, \"}\", depth_lvl + 1);\n+            }\n+        }\n+    }\n+}"}, {"sha": "1655e224ddbb5b68f16f9710bdf509f18607d922", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -439,6 +439,10 @@ fn construct_fn<'tcx>(\n     let fn_id = tcx.hir().local_def_id_to_hir_id(fn_def.did);\n     let generator_kind = tcx.generator_kind(fn_def.did);\n \n+    // The representation of thir for `-Zunpretty=thir-tree` relies on\n+    // the entry expression being the last element of `thir.exprs`.\n+    assert_eq!(expr.as_usize(), thir.exprs.len() - 1);\n+\n     // Figure out what primary body this item has.\n     let body_id = tcx.hir().body_owned_by(fn_def.did);\n     let span_with_body = tcx.hir().span_with_body(fn_id);"}, {"sha": "94dae36154c26181757616366db754e6412999b6", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -34,4 +34,5 @@ pub fn provide(providers: &mut Providers) {\n     providers.thir_check_unsafety_for_const_arg = check_unsafety::thir_check_unsafety_for_const_arg;\n     providers.thir_body = thir::cx::thir_body;\n     providers.thir_tree = thir::cx::thir_tree;\n+    providers.thir_flat = thir::cx::thir_flat;\n }"}, {"sha": "10df4b229520f3bd1f8f572353b994cb14ae273e", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -53,6 +53,16 @@ pub(crate) fn thir_body(\n }\n \n pub(crate) fn thir_tree(tcx: TyCtxt<'_>, owner_def: ty::WithOptConstParam<LocalDefId>) -> String {\n+    match thir_body(tcx, owner_def) {\n+        Ok((thir, _)) => {\n+            let thir = thir.steal();\n+            tcx.thir_tree_representation(&thir)\n+        }\n+        Err(_) => \"error\".into(),\n+    }\n+}\n+\n+pub(crate) fn thir_flat(tcx: TyCtxt<'_>, owner_def: ty::WithOptConstParam<LocalDefId>) -> String {\n     match thir_body(tcx, owner_def) {\n         Ok((thir, _)) => format!(\"{:#?}\", thir.steal()),\n         Err(_) => \"error\".into(),"}, {"sha": "82d9138c7a331948c16e4c50bf711f558a845d33", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1048,7 +1048,7 @@ impl<'a> Parser<'a> {\n                 self.parse_remaining_bounds(bounds, true)?;\n                 self.expect(&token::CloseDelim(Delimiter::Parenthesis))?;\n                 let sp = vec![lo, self.prev_token.span];\n-                let sugg: Vec<_> = sp.iter().map(|sp| (*sp, String::new())).collect();\n+                let sugg = vec![(lo, String::from(\" \")), (self.prev_token.span, String::new())];\n                 self.struct_span_err(sp, \"incorrect braces around trait bounds\")\n                     .multipart_suggestion(\n                         \"remove the parentheses\","}, {"sha": "c49c5fa990413d1aa3a109612c2773f3b646b65f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -2573,6 +2573,7 @@ fn parse_pretty(unstable_opts: &UnstableOptions, efmt: ErrorOutputType) -> Optio\n         \"hir,typed\" => Hir(PpHirMode::Typed),\n         \"hir-tree\" => HirTree,\n         \"thir-tree\" => ThirTree,\n+        \"thir-flat\" => ThirFlat,\n         \"mir\" => Mir,\n         \"mir-cfg\" => MirCFG,\n         name => early_error(\n@@ -2581,7 +2582,8 @@ fn parse_pretty(unstable_opts: &UnstableOptions, efmt: ErrorOutputType) -> Optio\n                 \"argument to `unpretty` must be one of `normal`, `identified`, \\\n                             `expanded`, `expanded,identified`, `expanded,hygiene`, \\\n                             `ast-tree`, `ast-tree,expanded`, `hir`, `hir,identified`, \\\n-                            `hir,typed`, `hir-tree`, `thir-tree`, `mir` or `mir-cfg`; got {name}\"\n+                            `hir,typed`, `hir-tree`, `thir-tree`, `thir-flat`, `mir` or \\\n+                            `mir-cfg`; got {name}\"\n             ),\n         ),\n     };\n@@ -2736,6 +2738,8 @@ pub enum PpMode {\n     HirTree,\n     /// `-Zunpretty=thir-tree`\n     ThirTree,\n+    /// `-Zunpretty=`thir-flat`\n+    ThirFlat,\n     /// `-Zunpretty=mir`\n     Mir,\n     /// `-Zunpretty=mir-cfg`\n@@ -2754,6 +2758,7 @@ impl PpMode {\n             | Hir(_)\n             | HirTree\n             | ThirTree\n+            | ThirFlat\n             | Mir\n             | MirCFG => true,\n         }\n@@ -2763,13 +2768,13 @@ impl PpMode {\n         match *self {\n             Source(_) | AstTree(_) => false,\n \n-            Hir(_) | HirTree | ThirTree | Mir | MirCFG => true,\n+            Hir(_) | HirTree | ThirTree | ThirFlat | Mir | MirCFG => true,\n         }\n     }\n \n     pub fn needs_analysis(&self) -> bool {\n         use PpMode::*;\n-        matches!(*self, Mir | MirCFG | ThirTree)\n+        matches!(*self, Mir | MirCFG | ThirTree | ThirFlat)\n     }\n }\n "}, {"sha": "acd0fea4bc4105a03a1d793098e0a45a866a5166", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -2574,12 +2574,13 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n+        #[rustc_allow_const_fn_unstable(const_cmp)]\n         pub const fn signum(self) -> Self {\n-            match self {\n-                n if n > 0 =>  1,\n-                0          =>  0,\n-                _          => -1,\n-            }\n+            // Picking the right way to phrase this is complicated\n+            // (<https://graphics.stanford.edu/~seander/bithacks.html#CopyIntegerSign>)\n+            // so delegate it to `Ord` which is already producing -1/0/+1\n+            // exactly like we need and can be the place to deal with the complexity.\n+            self.cmp(&0) as _\n         }\n \n         /// Returns `true` if `self` is positive and `false` if the number is zero or"}, {"sha": "acf9c29083f62ce26518f3be9fbf3b22bfa67e91", "filename": "library/std/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1,6 +1,6 @@\n //! Temporal quantification.\n //!\n-//! # Examples:\n+//! # Examples\n //!\n //! There are multiple ways to create a new [`Duration`]:\n //!"}, {"sha": "1ee68c8540bcc39518f81c7609c08fb036314bd8", "filename": "library/test/src/console.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -53,6 +53,7 @@ pub struct ConsoleTestState {\n     pub metrics: MetricMap,\n     pub failures: Vec<(TestDesc, Vec<u8>)>,\n     pub not_failures: Vec<(TestDesc, Vec<u8>)>,\n+    pub ignores: Vec<(TestDesc, Vec<u8>)>,\n     pub time_failures: Vec<(TestDesc, Vec<u8>)>,\n     pub options: Options,\n }\n@@ -76,6 +77,7 @@ impl ConsoleTestState {\n             metrics: MetricMap::new(),\n             failures: Vec::new(),\n             not_failures: Vec::new(),\n+            ignores: Vec::new(),\n             time_failures: Vec::new(),\n             options: opts.options,\n         })\n@@ -194,7 +196,10 @@ fn handle_test_result(st: &mut ConsoleTestState, completed_test: CompletedTest)\n             st.passed += 1;\n             st.not_failures.push((test, stdout));\n         }\n-        TestResult::TrIgnored => st.ignored += 1,\n+        TestResult::TrIgnored => {\n+            st.ignored += 1;\n+            st.ignores.push((test, stdout));\n+        }\n         TestResult::TrBench(bs) => {\n             st.metrics.insert_metric(\n                 test.name.as_slice(),"}, {"sha": "a431acfbc27538944219c626f48e10a0e7b0ec72", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -254,6 +254,15 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n \n         self.write_plain(\"\\n\\n\")?;\n \n+        // Custom handling of cases where there is only 1 test to execute and that test was ignored.\n+        // We want to show more detailed information(why was the test ignored) for investigation purposes.\n+        if self.total_test_count == 1 && state.ignores.len() == 1 {\n+            let test_desc = &state.ignores[0].0;\n+            if let Some(im) = test_desc.ignore_message {\n+                self.write_plain(format!(\"test: {}, ignore_message: {}\\n\\n\", test_desc.name, im))?;\n+            }\n+        }\n+\n         Ok(success)\n     }\n }"}, {"sha": "44776fb0a316df90b0198076335e2b323f976d2b", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -790,6 +790,7 @@ fn should_sort_failures_before_printing_them() {\n         failures: vec![(test_b, Vec::new()), (test_a, Vec::new())],\n         options: Options::new(),\n         not_failures: Vec::new(),\n+        ignores: Vec::new(),\n         time_failures: Vec::new(),\n     };\n "}, {"sha": "3b9dba4109d3e6f1d2b8fe6c4aa047b204da4b5f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1433,7 +1433,8 @@ impl Build {\n \n         if !stamp.exists() {\n             eprintln!(\n-                \"Warning: Unable to find the stamp file, did you try to keep a nonexistent build stage?\"\n+                \"Error: Unable to find the stamp file {}, did you try to keep a nonexistent build stage?\",\n+                stamp.display()\n             );\n             crate::detail_exit(1);\n         }"}, {"sha": "0b06f5e3623e31ac7ce3a892fecaaac3065e96fa", "filename": "src/ci/docker/host-x86_64/mingw-check/validate-toolstate.sh", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-toolstate.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-toolstate.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-toolstate.sh?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -9,11 +9,5 @@ git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n cd rust-toolstate\n python3 \"../../src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \\\n     \"$(git log --format=%s -n1 HEAD)\" \"\" \"\"\n-# Only check maintainers if this build is supposed to publish toolstate.\n-# Builds that are not supposed to publish don't have the access token.\n-if [ -n \"${TOOLSTATE_PUBLISH+is_set}\" ]; then\n-  TOOLSTATE_VALIDATE_MAINTAINERS_REPO=rust-lang/rust python3 \\\n-      \"../../src/tools/publish_toolstate.py\"\n-fi\n cd ..\n rm -rf rust-toolstate"}, {"sha": "ff17931115cd038bd164cd171b9567d2768d60b4", "filename": "src/etc/pre-push.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Fetc%2Fpre-push.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Fetc%2Fpre-push.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpre-push.sh?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -14,4 +14,4 @@ ROOT_DIR=\"$(git rev-parse --show-toplevel)\"\n echo \"Running pre-push script $ROOT_DIR/x test tidy\"\n \n cd \"$ROOT_DIR\"\n-./x test tidy\n+CARGOFLAGS=\"--locked\" ./x test tidy"}, {"sha": "be6de231854ba1198b32710da0bc41467dbeb6e7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1528,11 +1528,7 @@ fn render_impl(\n                             })\n                         })\n                         .map(|item| format!(\"{}.{}\", item.type_(), name));\n-                    write!(\n-                        w,\n-                        \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n-                        id, item_type, in_trait_class,\n-                    );\n+                    write!(w, \"<section id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class,);\n                     render_rightside(w, cx, item, containing_item, render_mode);\n                     if trait_.is_some() {\n                         // Anchors are only used on trait impls.\n@@ -1554,11 +1550,7 @@ fn render_impl(\n             kind @ (clean::TyAssocConstItem(ty) | clean::AssocConstItem(ty, _)) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(\n-                    w,\n-                    \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n-                    id, item_type, in_trait_class\n-                );\n+                write!(w, \"<section id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class);\n                 render_rightside(w, cx, item, containing_item, render_mode);\n                 if trait_.is_some() {\n                     // Anchors are only used on trait impls.\n@@ -1606,11 +1598,7 @@ fn render_impl(\n             clean::AssocTypeItem(tydef, _bounds) => {\n                 let source_id = format!(\"{}.{}\", item_type, name);\n                 let id = cx.derive_id(source_id.clone());\n-                write!(\n-                    w,\n-                    \"<section id=\\\"{}\\\" class=\\\"{}{} has-srclink\\\">\",\n-                    id, item_type, in_trait_class\n-                );\n+                write!(w, \"<section id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, in_trait_class);\n                 if trait_.is_some() {\n                     // Anchors are only used on trait impls.\n                     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\">\u00a7</a>\", id);\n@@ -1844,7 +1832,7 @@ pub(crate) fn render_impl_summary(\n     } else {\n         format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n     };\n-    write!(w, \"<section id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\", id, aliases);\n+    write!(w, \"<section id=\\\"{}\\\" class=\\\"impl\\\"{}>\", id, aliases);\n     render_rightside(w, cx, &i.impl_item, containing_item, RenderMode::Normal);\n     write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\">\u00a7</a>\", id);\n     write!(w, \"<h3 class=\\\"code-header\\\">\");"}, {"sha": "b0288d55c256ad84e90c04ab8bc3eb9ff992092b", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -735,7 +735,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             let method_toggle_class = if item_type.is_method() { \" method-toggle\" } else { \"\" };\n             write!(w, \"<details class=\\\"toggle{method_toggle_class}\\\" open><summary>\");\n         }\n-        write!(w, \"<section id=\\\"{}\\\" class=\\\"method has-srclink\\\">\", id);\n+        write!(w, \"<section id=\\\"{}\\\" class=\\\"method\\\">\", id);\n         render_rightside(w, cx, m, t, RenderMode::Normal);\n         write!(w, \"<h4 class=\\\"code-header\\\">\");\n         render_assoc_item("}, {"sha": "45fd87bea9bb5ac72437553c8c2de59c01741239", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 54, "deletions": 28, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -926,7 +926,7 @@ pub fn make_test_description<R: Read>(\n     cfg: Option<&str>,\n ) -> test::TestDesc {\n     let mut ignore = false;\n-    let ignore_message = None;\n+    let mut ignore_message = None;\n     let mut should_fail = false;\n \n     let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n@@ -966,41 +966,67 @@ pub fn make_test_description<R: Read>(\n         if revision.is_some() && revision != cfg {\n             return;\n         }\n+        macro_rules! reason {\n+            ($e:expr) => {\n+                ignore |= match $e {\n+                    true => {\n+                        ignore_message = Some(stringify!($e));\n+                        true\n+                    }\n+                    false => ignore,\n+                }\n+            };\n+        }\n         ignore = match config.parse_cfg_name_directive(ln, \"ignore\") {\n-            ParsedNameDirective::Match => true,\n+            ParsedNameDirective::Match => {\n+                ignore_message = Some(\"cfg -> ignore => Match\");\n+                true\n+            }\n             ParsedNameDirective::NoMatch => ignore,\n         };\n+\n         if config.has_cfg_prefix(ln, \"only\") {\n             ignore = match config.parse_cfg_name_directive(ln, \"only\") {\n                 ParsedNameDirective::Match => ignore,\n-                ParsedNameDirective::NoMatch => true,\n+                ParsedNameDirective::NoMatch => {\n+                    ignore_message = Some(\"cfg -> only => NoMatch\");\n+                    true\n+                }\n             };\n         }\n-        ignore |= ignore_llvm(config, ln);\n-        ignore |=\n-            config.run_clang_based_tests_with.is_none() && config.parse_needs_matching_clang(ln);\n-        ignore |= !has_asm_support && config.parse_name_directive(ln, \"needs-asm-support\");\n-        ignore |= !rustc_has_profiler_support && config.parse_needs_profiler_support(ln);\n-        ignore |= !config.run_enabled() && config.parse_name_directive(ln, \"needs-run-enabled\");\n-        ignore |= !rustc_has_sanitizer_support\n-            && config.parse_name_directive(ln, \"needs-sanitizer-support\");\n-        ignore |= !has_asan && config.parse_name_directive(ln, \"needs-sanitizer-address\");\n-        ignore |= !has_cfi && config.parse_name_directive(ln, \"needs-sanitizer-cfi\");\n-        ignore |= !has_kcfi && config.parse_name_directive(ln, \"needs-sanitizer-kcfi\");\n-        ignore |= !has_lsan && config.parse_name_directive(ln, \"needs-sanitizer-leak\");\n-        ignore |= !has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\");\n-        ignore |= !has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\");\n-        ignore |= !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\");\n-        ignore |= !has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\");\n-        ignore |= !has_shadow_call_stack\n-            && config.parse_name_directive(ln, \"needs-sanitizer-shadow-call-stack\");\n-        ignore |= !config.can_unwind() && config.parse_name_directive(ln, \"needs-unwind\");\n-        ignore |= config.target == \"wasm32-unknown-unknown\"\n-            && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS);\n-        ignore |= config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln);\n-        ignore |= config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln);\n-        ignore |= config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln);\n-        ignore |= !has_rust_lld && config.parse_name_directive(ln, \"needs-rust-lld\");\n+\n+        reason!(ignore_llvm(config, ln));\n+        reason!(\n+            config.run_clang_based_tests_with.is_none() && config.parse_needs_matching_clang(ln)\n+        );\n+        reason!(!has_asm_support && config.parse_name_directive(ln, \"needs-asm-support\"));\n+        reason!(!rustc_has_profiler_support && config.parse_needs_profiler_support(ln));\n+        reason!(!config.run_enabled() && config.parse_name_directive(ln, \"needs-run-enabled\"));\n+        reason!(\n+            !rustc_has_sanitizer_support\n+                && config.parse_name_directive(ln, \"needs-sanitizer-support\")\n+        );\n+        reason!(!has_asan && config.parse_name_directive(ln, \"needs-sanitizer-address\"));\n+        reason!(!has_cfi && config.parse_name_directive(ln, \"needs-sanitizer-cfi\"));\n+        reason!(!has_kcfi && config.parse_name_directive(ln, \"needs-sanitizer-kcfi\"));\n+        reason!(!has_lsan && config.parse_name_directive(ln, \"needs-sanitizer-leak\"));\n+        reason!(!has_msan && config.parse_name_directive(ln, \"needs-sanitizer-memory\"));\n+        reason!(!has_tsan && config.parse_name_directive(ln, \"needs-sanitizer-thread\"));\n+        reason!(!has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\"));\n+        reason!(!has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\"));\n+        reason!(\n+            !has_shadow_call_stack\n+                && config.parse_name_directive(ln, \"needs-sanitizer-shadow-call-stack\")\n+        );\n+        reason!(!config.can_unwind() && config.parse_name_directive(ln, \"needs-unwind\"));\n+        reason!(\n+            config.target == \"wasm32-unknown-unknown\"\n+                && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS)\n+        );\n+        reason!(config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln));\n+        reason!(config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln));\n+        reason!(config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln));\n+        reason!(!has_rust_lld && config.parse_name_directive(ln, \"needs-rust-lld\"));\n         should_fail |= config.parse_name_directive(ln, \"should-fail\");\n     });\n "}, {"sha": "395bcc745f8dd75edf9654a324f26268e2479444", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -68,52 +68,6 @@ def load_json_from_response(resp):\n         print(\"Refusing to decode \" + str(type(content)) + \" to str\")\n     return json.loads(content_str)\n \n-def validate_maintainers(repo, github_token):\n-    # type: (str, str) -> None\n-    '''Ensure all maintainers are assignable on a GitHub repo'''\n-    next_link_re = re.compile(r'<([^>]+)>; rel=\"next\"')\n-\n-    # Load the list of assignable people in the GitHub repo\n-    assignable = [] # type: typing.List[str]\n-    url = 'https://api.github.com/repos/' \\\n-        + '%s/collaborators?per_page=100' % repo # type: typing.Optional[str]\n-    while url is not None:\n-        response = urllib2.urlopen(urllib2.Request(url, headers={\n-            'Authorization': 'token ' + github_token,\n-            # Properly load nested teams.\n-            'Accept': 'application/vnd.github.hellcat-preview+json',\n-        }))\n-        assignable.extend(user['login'] for user in load_json_from_response(response))\n-        # Load the next page if available\n-        url = None\n-        link_header = response.headers.get('Link')\n-        if link_header:\n-            matches = next_link_re.match(link_header)\n-            if matches is not None:\n-                url = matches.group(1)\n-\n-    errors = False\n-    for tool, maintainers in MAINTAINERS.items():\n-        for maintainer in maintainers:\n-            if maintainer not in assignable:\n-                errors = True\n-                print(\n-                    \"error: %s maintainer @%s is not assignable in the %s repo\"\n-                    % (tool, maintainer, repo),\n-                )\n-\n-    if errors:\n-        print()\n-        print(\"  To be assignable, a person needs to be explicitly listed as a\")\n-        print(\"  collaborator in the repository settings. The simple way to\")\n-        print(\"  fix this is to ask someone with 'admin' privileges on the repo\")\n-        print(\"  to add the person or whole team as a collaborator with 'read'\")\n-        print(\"  privileges. Those privileges don't grant any extra permissions\")\n-        print(\"  so it's safe to apply them.\")\n-        print()\n-        print(\"The build will fail due to this.\")\n-        exit(1)\n-\n \n def read_current_status(current_commit, path):\n     # type: (str, str) -> typing.Mapping[str, typing.Any]\n@@ -280,21 +234,6 @@ def update_latest(\n try:\n     if __name__ != '__main__':\n         exit(0)\n-    repo = os.environ.get('TOOLSTATE_VALIDATE_MAINTAINERS_REPO')\n-    if repo:\n-        github_token = os.environ.get('TOOLSTATE_REPO_ACCESS_TOKEN')\n-        if github_token:\n-            # FIXME: This is currently broken. Starting on 2021-09-15, GitHub\n-            # seems to have changed it so that to list the collaborators\n-            # requires admin permissions. I think this will probably just need\n-            # to be removed since we are probably not going to use an admin\n-            # token, and I don't see another way to do this.\n-            print('maintainer validation disabled')\n-            # validate_maintainers(repo, github_token)\n-        else:\n-            print('skipping toolstate maintainers validation since no GitHub token is present')\n-        # When validating maintainers don't run the full script.\n-        exit(0)\n \n     cur_commit = sys.argv[1]\n     cur_datetime = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')"}, {"sha": "bab66dae70c4f02db9182a6656fdfd7f25881634", "filename": "tests/rustdoc-gui/src-font-size.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc-gui%2Fsrc-font-size.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc-gui%2Fsrc-font-size.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsrc-font-size.goml?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -4,13 +4,13 @@\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n show-text: true\n // Check the impl headers.\n-assert-css: (\".impl.has-srclink .srclink\", {\"font-size\": \"16px\", \"font-weight\": 400}, ALL)\n-assert-css: (\".impl.has-srclink .code-header\", {\"font-size\": \"18px\", \"font-weight\": 600}, ALL)\n+assert-css: (\".impl .srclink\", {\"font-size\": \"16px\", \"font-weight\": 400}, ALL)\n+assert-css: (\".impl .code-header\", {\"font-size\": \"18px\", \"font-weight\": 600}, ALL)\n // Check the impl items.\n-assert-css: (\".impl-items .has-srclink .srclink\", {\"font-size\": \"16px\", \"font-weight\": 400}, ALL)\n-assert-css: (\".impl-items .has-srclink .code-header\", {\"font-size\": \"16px\", \"font-weight\": 600}, ALL)\n+assert-css: (\".impl-items .srclink\", {\"font-size\": \"16px\", \"font-weight\": 400}, ALL)\n+assert-css: (\".impl-items .code-header\", {\"font-size\": \"16px\", \"font-weight\": 600}, ALL)\n \n // Check that we can click on source link\n store-document-property: (url, \"URL\")\n-click: \".impl-items .has-srclink .srclink\"\n+click: \".impl-items .srclink\"\n assert-document-property-false: {\"URL\": |url|}"}, {"sha": "a8587829d3ee7df8877c13ea57f157fbc12e7aff", "filename": "tests/rustdoc/anchors.no_const_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_const_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_const_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fanchors.no_const_anchor.html?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1 +1 @@\n-<section id=\"associatedconstant.YOLO\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#16\">source</a><h4 class=\"code-header\">const <a href=\"#associatedconstant.YOLO\" class=\"constant\">YOLO</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a></h4></section>\n\\ No newline at end of file\n+<section id=\"associatedconstant.YOLO\" class=\"method\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#16\">source</a><h4 class=\"code-header\">const <a href=\"#associatedconstant.YOLO\" class=\"constant\">YOLO</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a></h4></section>\n\\ No newline at end of file"}, {"sha": "4c5e45fea2de599539014cb386bab21b9d4f02a2", "filename": "tests/rustdoc/anchors.no_const_anchor2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_const_anchor2.html", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_const_anchor2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fanchors.no_const_anchor2.html?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1 +1 @@\n-<section id=\"associatedconstant.X\" class=\"associatedconstant has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#42\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.X\" class=\"constant\">X</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a> = 0i32</h4></section>\n\\ No newline at end of file\n+<section id=\"associatedconstant.X\" class=\"associatedconstant\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#42\">source</a><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.X\" class=\"constant\">X</a>: <a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a> = 0i32</h4></section>\n\\ No newline at end of file"}, {"sha": "44957a5b71a54c333e091d349269feda1099577e", "filename": "tests/rustdoc/anchors.no_method_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_method_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_method_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fanchors.no_method_anchor.html?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1 +1 @@\n-<section id=\"method.new\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#48\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; Self</h4></section>\n\\ No newline at end of file\n+<section id=\"method.new\" class=\"method\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#48\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; Self</h4></section>\n\\ No newline at end of file"}, {"sha": "75c2caf87a89fbf4540b6accb5b7e9a5adec2716", "filename": "tests/rustdoc/anchors.no_trait_method_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_trait_method_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_trait_method_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fanchors.no_trait_method_anchor.html?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1 +1 @@\n-<section id=\"method.bar\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#23\">source</a><h4 class=\"code-header\">fn <a href=\"#method.bar\" class=\"fn\">bar</a>()</h4></section>\n\\ No newline at end of file\n+<section id=\"method.bar\" class=\"method\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#23\">source</a><h4 class=\"code-header\">fn <a href=\"#method.bar\" class=\"fn\">bar</a>()</h4></section>\n\\ No newline at end of file"}, {"sha": "38575eadfa9698802e3bd842f56cb163d67b3e01", "filename": "tests/rustdoc/anchors.no_tymethod_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_tymethod_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_tymethod_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fanchors.no_tymethod_anchor.html?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1 +1 @@\n-<section id=\"tymethod.foo\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#20\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.foo\" class=\"fn\">foo</a>()</h4></section>\n\\ No newline at end of file\n+<section id=\"tymethod.foo\" class=\"method\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#20\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.foo\" class=\"fn\">foo</a>()</h4></section>\n\\ No newline at end of file"}, {"sha": "dd65d98fee69e96102cbd824c8329c232bc57de6", "filename": "tests/rustdoc/anchors.no_type_anchor.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_type_anchor.html", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_type_anchor.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fanchors.no_type_anchor.html?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1 +1 @@\n-<section id=\"associatedtype.T\" class=\"method has-srclink\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#13\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.T\" class=\"associatedtype\">T</a></h4></section>\n\\ No newline at end of file\n+<section id=\"associatedtype.T\" class=\"method\"><a class=\"srclink rightside\" href=\"../src/foo/anchors.rs.html#13\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.T\" class=\"associatedtype\">T</a></h4></section>\n\\ No newline at end of file"}, {"sha": "f8b59160f15ee07d3a3373a28f7616ccf1ee8dd9", "filename": "tests/rustdoc/anchors.no_type_anchor2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_type_anchor2.html", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fanchors.no_type_anchor2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fanchors.no_type_anchor2.html?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1 +1 @@\n-<section id=\"associatedtype.Y\" class=\"associatedtype has-srclink\"><h4 class=\"code-header\">type <a href=\"#associatedtype.Y\" class=\"associatedtype\">Y</a> = <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a></h4></section>\n+<section id=\"associatedtype.Y\" class=\"associatedtype\"><h4 class=\"code-header\">type <a href=\"#associatedtype.Y\" class=\"associatedtype\">Y</a> = <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a></h4></section>\n\\ No newline at end of file"}, {"sha": "8cafb5a2497a385acfaa94d5e757bc970b28d443", "filename": "tests/rustdoc/async-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fasync-fn.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -77,12 +77,12 @@ struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n \n impl Foo {\n     // @has async_fn/struct.Foo.html\n-    // @has - '//*[@class=\"method has-srclink\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    // @has - '//*[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n     pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n     // taken from `tokio` as an example of a method that was particularly bad before\n-    // @has - '//*[@class=\"method has-srclink\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n+    // @has - '//*[@class=\"method\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n     pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()> {}\n-    // @has - '//*[@class=\"method has-srclink\"]' \"pub async fn mut_self(&mut self)\"\n+    // @has - '//*[@class=\"method\"]' \"pub async fn mut_self(&mut self)\"\n     pub async fn mut_self(&mut self) {}\n }\n "}, {"sha": "18863abaeaccd3dd70c10c493639126b677f5848", "filename": "tests/rustdoc/const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-fn.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -8,7 +8,7 @@ pub const fn bar() -> usize {\n }\n \n // @has foo/struct.Foo.html\n-// @has - '//*[@class=\"method has-srclink\"]' 'const fn new()'\n+// @has - '//*[@class=\"method\"]' 'const fn new()'\n pub struct Foo(usize);\n \n impl Foo {"}, {"sha": "80a9ab3f12e881e708cdb480f5fe6f8ed8c4a0e3", "filename": "tests/rustdoc/const-generics/const-generic-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-slice.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -5,7 +5,7 @@ pub trait Array {\n }\n \n // @has foo/trait.Array.html\n-// @has - '//*[@class=\"impl has-srclink\"]' 'impl<T, const N: usize> Array for [T; N]'\n+// @has - '//*[@class=\"impl\"]' 'impl<T, const N: usize> Array for [T; N]'\n impl<T, const N: usize> Array for [T; N] {\n     type Item = T;\n }"}, {"sha": "4d5c9f83e1ee0620009f95150bc47b28ccf84538", "filename": "tests/rustdoc/doc-assoc-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fdoc-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fdoc-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdoc-assoc-item.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -8,7 +8,7 @@ pub trait Bar {\n     fn foo(foo: Self::Fuu);\n }\n \n-// @has doc_assoc_item/struct.Foo.html '//*[@class=\"impl has-srclink\"]' 'impl<T: Bar<Fuu = u32>> Foo<T>'\n+// @has doc_assoc_item/struct.Foo.html '//*[@class=\"impl\"]' 'impl<T: Bar<Fuu = u32>> Foo<T>'\n impl<T: Bar<Fuu = u32>> Foo<T> {\n     pub fn new(t: T) -> Foo<T> {\n         Foo {"}, {"sha": "4c2071b832266c6fa072bb743d8b8e642778789a", "filename": "tests/rustdoc/duplicate_impls/issue-33054.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fduplicate_impls%2Fissue-33054.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -3,8 +3,8 @@\n // @has issue_33054/impls/struct.Foo.html\n // @has - '//h3[@class=\"code-header\"]' 'impl Foo'\n // @has - '//h3[@class=\"code-header\"]' 'impl Bar for Foo'\n-// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n-// @count - '//*[@id=\"main-content\"]/div[@id=\"implementations-list\"]/details/summary/*[@class=\"impl has-srclink\"]' 1\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"main-content\"]/div[@id=\"implementations-list\"]/details/summary/*[@class=\"impl\"]' 1\n // @has issue_33054/impls/bar/trait.Bar.html\n // @has - '//h3[@class=\"code-header\"]' 'impl Bar for Foo'\n // @count - '//*[@class=\"struct\"]' 1"}, {"sha": "f32cf310055e0c1da17a3d4ab36fc0c21f08aecb", "filename": "tests/rustdoc/duplicated_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fduplicated_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fduplicated_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fduplicated_impl.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -7,7 +7,7 @@\n // blanket implementations.\n \n // @has 'foo/struct.Whatever.html'\n-// @count - '//*[@id=\"blanket-implementations-list\"]/section[@class=\"impl has-srclink\"]' 1\n+// @count - '//*[@id=\"blanket-implementations-list\"]/section[@class=\"impl\"]' 1\n \n pub trait Something<T> { }\n pub struct Whatever;"}, {"sha": "e6cff97b184299cfe11db00b9db8f98cd2ba76f9", "filename": "tests/rustdoc/empty-impl-block-private-with-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fempty-impl-block-private-with-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fempty-impl-block-private-with-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fempty-impl-block-private-with-doc.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -10,7 +10,7 @@ pub struct Foo;\n // There are 3 impl blocks with public item and one that should not be displayed\n // by default because it only contains private items (but not in this case because\n // we used `--document-private-items`).\n-// @count - '//*[@class=\"impl has-srclink\"]' 'impl Foo' 4\n+// @count - '//*[@class=\"impl\"]' 'impl Foo' 4\n \n // Impl block only containing private items should not be displayed unless the\n // `--document-private-items` flag is used."}, {"sha": "d44b4a47cee1820590c5b0f3b42d47a82f708392", "filename": "tests/rustdoc/empty-impl-block-private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fempty-impl-block-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fempty-impl-block-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fempty-impl-block-private.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -7,7 +7,7 @@ pub struct Foo;\n \n // There are 3 impl blocks with public item and one that should not be displayed\n // because it only contains private items.\n-// @count - '//*[@class=\"impl has-srclink\"]' 'impl Foo' 3\n+// @count - '//*[@class=\"impl\"]' 'impl Foo' 3\n \n // Impl block only containing private items should not be displayed.\n /// Private"}, {"sha": "da780580bd087775c41b4caa842bee210aa73656", "filename": "tests/rustdoc/empty-impl-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fempty-impl-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fempty-impl-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fempty-impl-block.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -8,7 +8,7 @@ pub struct Foo;\n /// Hello empty impl block!\n impl Foo {}\n // We ensure that this empty impl block without doc isn't rendered.\n-// @count - '//*[@class=\"impl has-srclink\"]' 'impl Foo' 1\n+// @count - '//*[@class=\"impl\"]' 'impl Foo' 1\n impl Foo {}\n \n // Just to ensure that empty trait impl blocks are rendered."}, {"sha": "f7738060e993cced229ee623d27680380959b690", "filename": "tests/rustdoc/impl-parts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fimpl-parts.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -5,7 +5,7 @@ pub auto trait AnAutoTrait {}\n \n pub struct Foo<T> { field: T }\n \n-// @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has impl_parts/struct.Foo.html '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<T> !AnAutoTrait for Foo<T>where T: Sync + Clone,\"\n // @has impl_parts/trait.AnAutoTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //     \"impl<T> !AnAutoTrait for Foo<T>where T: Sync + Clone,\""}, {"sha": "571eaf6be967a45771f682f56d4345148da969f3", "filename": "tests/rustdoc/inline_cross/issue-31948-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -5,8 +5,8 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948_1/struct.Wobble.html\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Woof for'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Bark for'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Woof for'\n // @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Bar for'\n // @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Qux for'\n pub use rustdoc_nonreachable_impls::hidden::Wobble;"}, {"sha": "7eae21046ccbc834bb10a16675038dc19d8b4e7e", "filename": "tests/rustdoc/inline_cross/issue-31948-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -5,9 +5,9 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948_2/struct.Wobble.html\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Qux for'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Woof for'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Qux for'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Bark for'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Woof for'\n // @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Bar for'\n pub use rustdoc_nonreachable_impls::hidden::Wobble;\n "}, {"sha": "9c271bf4ad43fcbe17689de3ddb0dee9d50dcc6e", "filename": "tests/rustdoc/inline_cross/issue-31948.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fissue-31948.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -5,9 +5,9 @@\n extern crate rustdoc_nonreachable_impls;\n \n // @has issue_31948/struct.Foo.html\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Bark for'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Woof for'\n-// @!has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'Bar for'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Bark for'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Woof for'\n+// @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Bar for'\n // @!has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'Qux for'\n pub use rustdoc_nonreachable_impls::Foo;\n "}, {"sha": "5de26abace6fab01d1b20f6570358578468f4c88", "filename": "tests/rustdoc/issue-21474.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-21474.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-21474.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-21474.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -7,5 +7,5 @@ mod inner {\n pub trait Blah { }\n \n // @count issue_21474/struct.What.html \\\n-//        '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n+//        '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n pub struct What;"}, {"sha": "7af00c778361d3042300ba9b8a2ae059aa6fcf07", "filename": "tests/rustdoc/issue-33302.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-33302.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -22,23 +22,23 @@ macro_rules! make {\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//*[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n+        //        '//*[@class=\"impl\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C\"]' 'const C: [i32; 16]'\n         // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n         impl T<[i32; ($n * $n)]> for S {\n             const C: [i32; ($n * $n)] = [0; ($n * $n)];\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//*[@class=\"impl has-srclink\"]' 'impl T<[i32; 16]> for S'\n+        //        '//*[@class=\"impl\"]' 'impl T<[i32; 16]> for S'\n         // @has - '//*[@id=\"associatedconstant.C-1\"]' 'const C: (i32,)'\n         // @has - '//*[@id=\"associatedconstant.D-1\"]' 'const D: i32'\n         impl T<(i32,)> for S {\n             const C: (i32,) = ($n,);\n         }\n \n         // @has issue_33302/struct.S.html \\\n-        //        '//*[@class=\"impl has-srclink\"]' 'impl T<(i32, i32)> for S'\n+        //        '//*[@class=\"impl\"]' 'impl T<(i32, i32)> for S'\n         // @has - '//*[@id=\"associatedconstant.C-2\"]' 'const C: (i32, i32)'\n         // @has - '//*[@id=\"associatedconstant.D-2\"]' 'const D: i32'\n         impl T<(i32, i32)> for S {"}, {"sha": "8a5f0413826a910ff7f7ceaa72db9c2438a4ecd7", "filename": "tests/rustdoc/issue-45584.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-45584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-45584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-45584.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -4,12 +4,12 @@ pub trait Bar<T, U> {}\n \n // @has 'foo/struct.Foo1.html'\n pub struct Foo1;\n-// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n-// @has - '//*[@class=\"impl has-srclink\"]' \"impl Bar<Foo1, &'static Foo1> for Foo1\"\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n+// @has - '//*[@class=\"impl\"]' \"impl Bar<Foo1, &'static Foo1> for Foo1\"\n impl Bar<Foo1, &'static Foo1> for Foo1 {}\n \n // @has 'foo/struct.Foo2.html'\n pub struct Foo2;\n-// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n-// @has - '//*[@class=\"impl has-srclink\"]' \"impl Bar<&'static Foo2, Foo2> for u8\"\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n+// @has - '//*[@class=\"impl\"]' \"impl Bar<&'static Foo2, Foo2> for u8\"\n impl Bar<&'static Foo2, Foo2> for u8 {}"}, {"sha": "13bedd5dbb023220adaa5721fd43ac78574c9c4a", "filename": "tests/rustdoc/issue-50159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-50159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-50159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-50159.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -14,7 +14,7 @@ impl<B, C> Signal2 for B where B: Signal<Item = C> {\n // @has - '//h3[@class=\"code-header\"]' 'impl<B> Send for Switch<B>where <B as Signal>::Item: Send'\n // @has - '//h3[@class=\"code-header\"]' 'impl<B> Sync for Switch<B>where <B as Signal>::Item: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 5\n pub struct Switch<B: Signal> {\n     pub inner: <B as Signal2>::Item2,\n }"}, {"sha": "04664805a886f3926abd2e7089eac46958193548", "filename": "tests/rustdoc/issue-51236.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-51236.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -7,7 +7,7 @@ pub mod traits {\n }\n \n // @has issue_51236/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> Send for Owned<T>where <T as Owned<'static>>::Reader: Send\"\n pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n     marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,"}, {"sha": "dc1eb304c3d1da377678f20917c56892bbcd4edb", "filename": "tests/rustdoc/issue-53812.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-53812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-53812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-53812.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -12,9 +12,9 @@ macro_rules! array_impls {\n }\n \n // @has issue_53812/trait.MyIterator.html\n-// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][1]' 'MyStruct<[T; 0]>'\n-// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][2]' 'MyStruct<[T; 1]>'\n-// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][3]' 'MyStruct<[T; 2]>'\n-// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][4]' 'MyStruct<[T; 3]>'\n-// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl has-srclink\"][5]' 'MyStruct<[T; 10]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl\"][1]' 'MyStruct<[T; 0]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl\"][2]' 'MyStruct<[T; 1]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl\"][3]' 'MyStruct<[T; 2]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl\"][4]' 'MyStruct<[T; 3]>'\n+// @has - '//*[@id=\"implementors-list\"]/*[@class=\"impl\"][5]' 'MyStruct<[T; 10]>'\n array_impls! { 10 3 2 1 0 }"}, {"sha": "a886eb0de242c19d57921aaa26747433ad16f65a", "filename": "tests/rustdoc/issue-54705.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-54705.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1,10 +1,10 @@\n pub trait ScopeHandle<'scope> {}\n \n // @has issue_54705/struct.ScopeFutureContents.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'scope, S> Send for ScopeFutureContents<'scope, S>where S: Sync\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'scope, S> Sync for ScopeFutureContents<'scope, S>where S: Sync\"\n pub struct ScopeFutureContents<'scope, S>\n     where S: ScopeHandle<'scope>,"}, {"sha": "d3c2070d915d67b114961acd04d0e8a0d2fe76b6", "filename": "tests/rustdoc/issue-55321.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-55321.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1,18 +1,18 @@\n #![feature(negative_impls)]\n \n // @has issue_55321/struct.A.html\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl !Send for A\"\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl !Sync for A\"\n pub struct A();\n \n impl !Send for A {}\n impl !Sync for A {}\n \n // @has issue_55321/struct.B.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Send for B<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Sync for B<T>\"\n pub struct B<T: ?Sized>(A, Box<T>);"}, {"sha": "c9a74335702d585a3e02bd0d8c0440dcf8574aeb", "filename": "tests/rustdoc/issue-56822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-56822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-56822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-56822.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -17,7 +17,7 @@ impl<'a, T> MyTrait for Inner<'a, T> {\n }\n \n // @has issue_56822/struct.Parser.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'a> Send for Parser<'a>\"\n pub struct Parser<'a> {\n     field: <Wrapper<Inner<'a, u8>> as MyTrait>::Output"}, {"sha": "e337e4a4f7ad164774044881098725991a45ca57", "filename": "tests/rustdoc/issue-60726.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-60726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-60726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-60726.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -26,9 +26,9 @@ where\n {}\n \n // @has issue_60726/struct.IntoIter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Send for IntoIter<T>\"\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Sync for IntoIter<T>\"\n pub struct IntoIter<T>{\n     hello:DynTrait<FooInterface<T>>,"}, {"sha": "5caea0ec992443b3fdbb469acbbd70ff084b2f11", "filename": "tests/rustdoc/issue-76501.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-76501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-76501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-76501.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -8,7 +8,7 @@ pub const fn bloop() -> i32 {\n pub struct Struct {}\n \n impl Struct {\n-    // @has 'issue_76501/struct.Struct.html' '//*[@class=\"method has-srclink\"]' \\\n+    // @has 'issue_76501/struct.Struct.html' '//*[@class=\"method\"]' \\\n     // 'pub const fn blurp() -> i32'\n     /// A useless function that always returns 1.\n     pub const fn blurp() -> i32 {"}, {"sha": "d09141c320473933bef1d05874ca5faff4b0901e", "filename": "tests/rustdoc/issue-78673.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-78673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fissue-78673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-78673.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -7,17 +7,17 @@ pub trait AnAmazingTrait {}\n impl<T: Something> AnAmazingTrait for T {}\n \n // @has 'issue_78673/struct.MyStruct.html'\n-// @has  - '//*[@class=\"impl has-srclink\"]' 'AnAmazingTrait for MyStruct'\n-// @!has - '//*[@class=\"impl has-srclink\"]' 'AnAmazingTrait for T'\n+// @has  - '//*[@class=\"impl\"]' 'AnAmazingTrait for MyStruct'\n+// @!has - '//*[@class=\"impl\"]' 'AnAmazingTrait for T'\n pub struct MyStruct;\n \n impl AnAmazingTrait for MyStruct {}\n \n // generic structs may have _both_ specific and blanket impls that apply\n \n // @has 'issue_78673/struct.AnotherStruct.html'\n-// @has - '//*[@class=\"impl has-srclink\"]' 'AnAmazingTrait for AnotherStruct<()>'\n-// @has - '//*[@class=\"impl has-srclink\"]' 'AnAmazingTrait for T'\n+// @has - '//*[@class=\"impl\"]' 'AnAmazingTrait for AnotherStruct<()>'\n+// @has - '//*[@class=\"impl\"]' 'AnAmazingTrait for T'\n pub struct AnotherStruct<T>(T);\n \n impl<T: Something> Something for AnotherStruct<T> {}"}, {"sha": "431db51d95f7c3a1fb84db3381df8dee6e5e429b", "filename": "tests/rustdoc/mut-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fmut-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fmut-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmut-params.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -5,7 +5,7 @@\n \n pub struct Foo;\n \n-// @count foo/struct.Foo.html '//*[@class=\"impl-items\"]//*[@class=\"method has-srclink\"]' 2\n+// @count foo/struct.Foo.html '//*[@class=\"impl-items\"]//*[@class=\"method\"]' 2\n // @!has - '//*[@class=\"impl-items\"]//*[@class=\"method\"]' 'mut'\n impl Foo {\n     pub fn foo(mut self) {}"}, {"sha": "51223af673732931e7557c79f98084a35b13803b", "filename": "tests/rustdoc/negative-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fnegative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fnegative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnegative-impl.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -5,10 +5,10 @@ pub struct Alpha;\n // @matches negative_impl/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n pub struct Bravo<B>(B);\n \n-// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @matches negative_impl/struct.Alpha.html '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl !Send for Alpha\"\n impl !Send for Alpha {}\n \n-// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \"\\\n+// @matches negative_impl/struct.Bravo.html '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \"\\\n // impl<B> !Send for Bravo<B>\"\n impl<B> !Send for Bravo<B> {}"}, {"sha": "10efbefd2b168a6f9df2ad6ce74626a4e074ca47", "filename": "tests/rustdoc/primitive-reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fprimitive-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fprimitive-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-reference.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -13,7 +13,7 @@\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n \n // There should be only one implementation listed.\n-// @count - '//*[@class=\"impl has-srclink\"]' 1\n+// @count - '//*[@class=\"impl\"]' 1\n // @has - '//*[@id=\"impl-Foo%3C%26A%3E-for-%26B\"]/*[@class=\"code-header\"]' \\\n //        'impl<A, B> Foo<&A> for &B'\n #[doc(primitive = \"reference\")]"}, {"sha": "7115a01d079ff15b99d7befd2badf45028ffb970", "filename": "tests/rustdoc/pub-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fpub-method.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -10,8 +10,8 @@ pub fn bar() -> usize {\n }\n \n // @has foo/struct.Foo.html\n-// @has - '//*[@class=\"method has-srclink\"]' 'pub fn new()'\n-// @has - '//*[@class=\"method has-srclink\"]' 'fn not_pub()'\n+// @has - '//*[@class=\"method\"]' 'pub fn new()'\n+// @has - '//*[@class=\"method\"]' 'fn not_pub()'\n pub struct Foo(usize);\n \n impl Foo {"}, {"sha": "043ac2414883877a8690a1879f0f74151ae20ff6", "filename": "tests/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1,8 +1,8 @@\n // @has basic/struct.Foo.html\n // @has - '//h3[@class=\"code-header\"]' 'impl<T> Send for Foo<T>where T: Send'\n // @has - '//h3[@class=\"code-header\"]' 'impl<T> Sync for Foo<T>where T: Sync'\n-// @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl has-srclink\"]' 0\n-// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n+// @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 5\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "4c39f0bf1e07f20b7a95401496eaed7df7ccf083", "filename": "tests/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -20,7 +20,7 @@ mod foo {\n }\n \n // @has complex/struct.NotOuter.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'a, T, K: ?Sized> Send for Outer<'a, T, K>where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n "}, {"sha": "71265b3078a06ba91fd3fd4220d6d58ecfa1c1a5", "filename": "tests/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -9,10 +9,10 @@ where\n {}\n \n // @has lifetimes/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'c, K> Send for Foo<'c, K>where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'c, K> Sync for Foo<'c, K>where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "7fc8447df3efc7963a4e88ec38d17609913ad8e0", "filename": "tests/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1,12 +1,12 @@\n // @has manual/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // 'impl<T> Sync for Foo<T>where T: Sync'\n //\n-// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // 'impl<T> Send for Foo<T>'\n //\n-// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]' 1\n-// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 4\n+// @count - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl\"]' 1\n+// @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]' 4\n pub struct Foo<T> {\n     field: T,\n }"}, {"sha": "97da2d57424cebc94aba9b0b76e6ba42b6e523cf", "filename": "tests/rustdoc/synthetic_auto/negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fnegative.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -3,10 +3,10 @@ pub struct Inner<T: Copy> {\n }\n \n // @has negative/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Send for Outer<T>\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> !Sync for Outer<T>\"\n pub struct Outer<T: Copy> {\n     inner_field: Inner<T>,"}, {"sha": "e4aead71bf2e5a3905689d18c960abd3220bb11a", "filename": "tests/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -9,10 +9,10 @@ where\n }\n \n // @has nested/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // 'impl<T> Send for Foo<T>where T: Copy'\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // 'impl<T> Sync for Foo<T>where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,"}, {"sha": "ea57d7388b85f174c5dc54f5954ea5f40d9b4819", "filename": "tests/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -9,7 +9,7 @@ where\n }\n \n // @has no_redundancy/struct.Outer.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> Send for Outer<T>where T: Send + Copy\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,"}, {"sha": "7c9412ae9624364a8573dfda8d2b9da52036e53e", "filename": "tests/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -23,10 +23,10 @@ where\n }\n \n // @has project/struct.Foo.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'c, K> Send for Foo<'c, K>where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<'c, K> Sync for Foo<'c, K>where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, \\\n // 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {"}, {"sha": "145a2b7e00c0a9d64f60d136c14d3844c74c1722", "filename": "tests/rustdoc/synthetic_auto/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -23,7 +23,7 @@ impl<T> Pattern for Wrapper<T> {\n \n \n // @has self_referential/struct.WriteAndThen.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<P1> Send for WriteAndThen<P1>where    <P1 as Pattern>::Value: Send\"\n pub struct WriteAndThen<P1>(pub P1::Value,pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n     where P1: Pattern;"}, {"sha": "9dc6211ec20b60825c2e8c5ff895c448f5838c55", "filename": "tests/rustdoc/synthetic_auto/static-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -3,7 +3,7 @@ pub trait OwnedTrait<'a> {\n }\n \n // @has static_region/struct.Owned.html\n-// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n // \"impl<T> Send for Owned<T>where <T as OwnedTrait<'static>>::Reader: Send\"\n pub struct Owned<T> where T: OwnedTrait<'static> {\n     marker: <T as OwnedTrait<'static>>::Reader,"}, {"sha": "63e2973c759b6b2b746c81363e16e9858e654f37", "filename": "tests/rustdoc/typedef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Ftypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Ftypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftypedef.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -9,8 +9,8 @@ impl MyStruct {\n }\n \n // @has typedef/type.MyAlias.html\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'impl MyAlias'\n-// @has - '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' 'impl MyTrait for MyAlias'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'impl MyAlias'\n+// @has - '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' 'impl MyTrait for MyAlias'\n // @hasraw - 'Alias docstring'\n // @has - '//*[@class=\"sidebar\"]//*[@class=\"location\"]' 'MyAlias'\n // @has - '//*[@class=\"sidebar\"]//a[@href=\"#implementations\"]' 'Methods'"}, {"sha": "644a0058244522a55be5bb50683b51130497927e", "filename": "tests/rustdoc/where.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -13,7 +13,7 @@ pub fn charlie<C>() where C: MyTrait {}\n \n pub struct Delta<D>(D);\n \n-// @has foo/struct.Delta.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has foo/struct.Delta.html '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<D> Delta<D>where D: MyTrait\"\n impl<D> Delta<D> where D: MyTrait {\n     pub fn delta() {}\n@@ -43,15 +43,15 @@ pub trait TraitWhere {\n     { todo!() }\n }\n \n-// @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has foo/struct.Echo.html '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<E> MyTrait for Echo<E>where E: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<E> MyTrait for Echo<E>where E: MyTrait\"\n impl<E> MyTrait for Echo<E>where E: MyTrait {}\n \n pub enum Foxtrot<F> { Foxtrot1(F) }\n \n-// @has foo/enum.Foxtrot.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header\"]' \\\n+// @has foo/enum.Foxtrot.html '//*[@class=\"impl\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header\"]' \\\n //          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\""}, {"sha": "c41cda18743c81c37c7369a5d315bbf6ce749fae", "filename": "tests/ui/parser/trait-object-delimiters.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftrait-object-delimiters.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -5,6 +5,8 @@ fn foo1(_: &dyn Drop + AsRef<str>) {} //~ ERROR ambiguous `+` in a type\n \n fn foo2(_: &dyn (Drop + AsRef<str>)) {} //~ ERROR incorrect braces around trait bounds\n \n+fn foo2_no_space(_: &dyn(Drop + AsRef<str>)) {} //~ ERROR incorrect braces around trait bounds\n+\n fn foo3(_: &dyn {Drop + AsRef<str>}) {} //~ ERROR expected parameter name, found `{`\n //~^ ERROR expected one of `!`, `(`, `)`, `*`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n //~| ERROR at least one trait is required for an object type"}, {"sha": "ccce3a8053e703c4e15030c576873eddc0abbb11", "filename": "tests/ui/parser/trait-object-delimiters.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -13,31 +13,43 @@ LL | fn foo2(_: &dyn (Drop + AsRef<str>)) {}\n help: remove the parentheses\n    |\n LL - fn foo2(_: &dyn (Drop + AsRef<str>)) {}\n-LL + fn foo2(_: &dyn Drop + AsRef<str>) {}\n+LL + fn foo2(_: &dyn  Drop + AsRef<str>) {}\n+   |\n+\n+error: incorrect braces around trait bounds\n+  --> $DIR/trait-object-delimiters.rs:8:25\n+   |\n+LL | fn foo2_no_space(_: &dyn(Drop + AsRef<str>)) {}\n+   |                         ^                 ^\n+   |\n+help: remove the parentheses\n+   |\n+LL - fn foo2_no_space(_: &dyn(Drop + AsRef<str>)) {}\n+LL + fn foo2_no_space(_: &dyn Drop + AsRef<str>) {}\n    |\n \n error: expected parameter name, found `{`\n-  --> $DIR/trait-object-delimiters.rs:8:17\n+  --> $DIR/trait-object-delimiters.rs:10:17\n    |\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n    |                 ^ expected parameter name\n \n error: expected one of `!`, `(`, `)`, `*`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n-  --> $DIR/trait-object-delimiters.rs:8:17\n+  --> $DIR/trait-object-delimiters.rs:10:17\n    |\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n    |                -^ expected one of 10 possible tokens\n    |                |\n    |                help: missing `,`\n \n error: expected identifier, found `<`\n-  --> $DIR/trait-object-delimiters.rs:12:17\n+  --> $DIR/trait-object-delimiters.rs:14:17\n    |\n LL | fn foo4(_: &dyn <Drop + AsRef<str>>) {}\n    |                 ^ expected identifier\n \n error: invalid `dyn` keyword\n-  --> $DIR/trait-object-delimiters.rs:14:25\n+  --> $DIR/trait-object-delimiters.rs:16:25\n    |\n LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n    |                         ^^^ help: remove this keyword\n@@ -56,13 +68,13 @@ LL | fn foo1(_: &dyn Drop + AsRef<str>) {}\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n error[E0224]: at least one trait is required for an object type\n-  --> $DIR/trait-object-delimiters.rs:8:13\n+  --> $DIR/trait-object-delimiters.rs:10:13\n    |\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n    |             ^^^\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n-  --> $DIR/trait-object-delimiters.rs:14:29\n+  --> $DIR/trait-object-delimiters.rs:16:29\n    |\n LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n    |                  ----       ^^^^^^^^^^ additional non-auto trait\n@@ -72,7 +84,7 @@ LL | fn foo5(_: &(dyn Drop + dyn AsRef<str>)) {}\n    = help: consider creating a new trait with all of these as supertraits and using that trait here instead: `trait NewTrait: Drop + AsRef<str> {}`\n    = note: auto-traits like `Send` and `Sync` are traits that have special properties; for more information on them, visit <https://doc.rust-lang.org/reference/special-types-and-traits.html#auto-traits>\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0224, E0225.\n For more information about an error, try `rustc --explain E0224`."}, {"sha": "8fa95ce62b5efb017e2644d317568e51b993b8de", "filename": "tests/ui/thir-print/thir-flat.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-flat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-flat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-flat.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -Z unpretty=thir-flat\n+// check-pass\n+\n+pub fn main() {}"}, {"sha": "c399fa66b6a03fe331d20adbce3689fa2b0ae967", "filename": "tests/ui/thir-print/thir-flat.stdout", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-flat.stdout?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -1,12 +1,12 @@\n-DefId(0:3 ~ thir_tree[8f1d]::main):\n+DefId(0:3 ~ thir_flat[45a6]::main):\n Thir {\n     arms: [],\n     blocks: [\n         Block {\n             targeted_by_break: false,\n             region_scope: Node(1),\n             opt_destruction_scope: None,\n-            span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n+            span: $DIR/thir-flat.rs:4:15: 4:17 (#0),\n             stmts: [],\n             expr: None,\n             safety_mode: Safe,\n@@ -18,7 +18,7 @@ Thir {\n             temp_lifetime: Some(\n                 Node(2),\n             ),\n-            span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n+            span: $DIR/thir-flat.rs:4:15: 4:17 (#0),\n             kind: Block {\n                 block: b0,\n             },\n@@ -28,11 +28,11 @@ Thir {\n             temp_lifetime: Some(\n                 Node(2),\n             ),\n-            span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n+            span: $DIR/thir-flat.rs:4:15: 4:17 (#0),\n             kind: Scope {\n                 region_scope: Node(2),\n                 lint_level: Explicit(\n-                    HirId(DefId(0:3 ~ thir_tree[8f1d]::main).2),\n+                    HirId(DefId(0:3 ~ thir_flat[45a6]::main).2),\n                 ),\n                 value: e0,\n             },\n@@ -42,7 +42,7 @@ Thir {\n             temp_lifetime: Some(\n                 Node(2),\n             ),\n-            span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n+            span: $DIR/thir-flat.rs:4:15: 4:17 (#0),\n             kind: Scope {\n                 region_scope: Destruction(2),\n                 lint_level: Inherited,", "previous_filename": "tests/ui/thir-tree.stdout"}, {"sha": "a5511ec95437f64ccb751337fc820065fff7e7bc", "filename": "tests/ui/thir-print/thir-tree-match.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-tree-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-tree-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-tree-match.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// compile-flags: -Zunpretty=thir-tree\n+\n+enum Bar {\n+    First,\n+    Second,\n+    Third,\n+}\n+\n+enum Foo {\n+    FooOne(Bar),\n+    FooTwo,\n+}\n+\n+fn has_match(foo: Foo) -> bool {\n+    match foo {\n+        Foo::FooOne(Bar::First) => true,\n+        Foo::FooOne(_) => false,\n+        Foo::FooTwo => true,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d6174ec262a445847e5b29aef59a1de0b74095c6", "filename": "tests/ui/thir-print/thir-tree-match.stdout", "status": "added", "additions": 342, "deletions": 0, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -0,0 +1,342 @@\n+DefId(0:16 ~ thir_tree_match[3c9a]::has_match):\n+params: [\n+    Param {\n+        ty: Foo\n+        ty_span: Some($DIR/thir-tree-match.rs:15:19: 15:22 (#0))\n+        self_kind: None\n+        hir_id: Some(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).1))\n+        param: Some( \n+            Pat: {\n+                ty: Foo\n+                span: $DIR/thir-tree-match.rs:15:14: 15:17 (#0)\n+                kind: PatKind {\n+                    Binding {\n+                        mutability: Not\n+                        name: \"foo\"\n+                        mode: ByValue\n+                        var: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).2))\n+                        ty: Foo\n+                        is_primary: true\n+                        subpattern: None\n+                    }\n+                }\n+            }\n+        )\n+    }\n+]\n+body:\n+    Expr {\n+        ty: bool\n+        temp_lifetime: Some(Node(26))\n+        span: $DIR/thir-tree-match.rs:15:32: 21:2 (#0)\n+        kind: \n+            Scope {\n+                region_scope: Destruction(26)\n+                lint_level: Inherited\n+                value:\n+                    Expr {\n+                        ty: bool\n+                        temp_lifetime: Some(Node(26))\n+                        span: $DIR/thir-tree-match.rs:15:32: 21:2 (#0)\n+                        kind: \n+                            Scope {\n+                                region_scope: Node(26)\n+                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).26))\n+                                value:\n+                                    Expr {\n+                                        ty: bool\n+                                        temp_lifetime: Some(Node(26))\n+                                        span: $DIR/thir-tree-match.rs:15:32: 21:2 (#0)\n+                                        kind: \n+                                            Block {\n+                                                targeted_by_break: false\n+                                                opt_destruction_scope: None\n+                                                span: $DIR/thir-tree-match.rs:15:32: 21:2 (#0)\n+                                                region_scope: Node(25)\n+                                                safety_mode: Safe\n+                                                stmts: []\n+                                                expr:\n+                                                    Expr {\n+                                                        ty: bool\n+                                                        temp_lifetime: Some(Node(26))\n+                                                        span: $DIR/thir-tree-match.rs:16:5: 20:6 (#0)\n+                                                        kind: \n+                                                            Scope {\n+                                                                region_scope: Node(3)\n+                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).3))\n+                                                                value:\n+                                                                    Expr {\n+                                                                        ty: bool\n+                                                                        temp_lifetime: Some(Node(26))\n+                                                                        span: $DIR/thir-tree-match.rs:16:5: 20:6 (#0)\n+                                                                        kind: \n+                                                                            Match {\n+                                                                                scrutinee:\n+                                                                                    Expr {\n+                                                                                        ty: Foo\n+                                                                                        temp_lifetime: Some(Node(26))\n+                                                                                        span: $DIR/thir-tree-match.rs:16:11: 16:14 (#0)\n+                                                                                        kind: \n+                                                                                            Scope {\n+                                                                                                region_scope: Node(4)\n+                                                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).4))\n+                                                                                                value:\n+                                                                                                    Expr {\n+                                                                                                        ty: Foo\n+                                                                                                        temp_lifetime: Some(Node(26))\n+                                                                                                        span: $DIR/thir-tree-match.rs:16:11: 16:14 (#0)\n+                                                                                                        kind: \n+                                                                                                            VarRef {\n+                                                                                                                id: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).2))\n+                                                                                                            }\n+                                                                                                    }\n+                                                                                            }\n+                                                                                    }\n+                                                                                arms: [\n+                                                                                    Arm {\n+                                                                                        pattern: \n+                                                                                            Pat: {\n+                                                                                                ty: Foo\n+                                                                                                span: $DIR/thir-tree-match.rs:17:9: 17:32 (#0)\n+                                                                                                kind: PatKind {\n+                                                                                                    Variant {\n+                                                                                                        adt_def: \n+                                                                                                            AdtDef {\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                flags: IS_ENUM\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                        substs: []\n+                                                                                                        variant_index: 0\n+                                                                                                        subpatterns: [\n+                                                                                                            Pat: {\n+                                                                                                                ty: Bar\n+                                                                                                                span: $DIR/thir-tree-match.rs:17:21: 17:31 (#0)\n+                                                                                                                kind: PatKind {\n+                                                                                                                    Variant {\n+                                                                                                                        adt_def: \n+                                                                                                                            AdtDef {\n+                                                                                                                                did: DefId(0:3 ~ thir_tree_match[3c9a]::Bar)\n+                                                                                                                                variants: [VariantDef { def_id: DefId(0:4 ~ thir_tree_match[3c9a]::Bar::First), ctor: Some((Const, DefId(0:5 ~ thir_tree_match[3c9a]::Bar::First::{constructor#0}))), name: \"First\", discr: Relative(0), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:6 ~ thir_tree_match[3c9a]::Bar::Second), ctor: Some((Const, DefId(0:7 ~ thir_tree_match[3c9a]::Bar::Second::{constructor#0}))), name: \"Second\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:8 ~ thir_tree_match[3c9a]::Bar::Third), ctor: Some((Const, DefId(0:9 ~ thir_tree_match[3c9a]::Bar::Third::{constructor#0}))), name: \"Third\", discr: Relative(2), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                                flags: IS_ENUM\n+                                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3125160937860410723 }\n+                                                                                                                        substs: []\n+                                                                                                                        variant_index: 0\n+                                                                                                                        subpatterns: []\n+                                                                                                                    }\n+                                                                                                                }\n+                                                                                                            }\n+                                                                                                        ]\n+                                                                                                    }\n+                                                                                                }\n+                                                                                            }\n+                                                                                        guard: None\n+                                                                                        body: \n+                                                                                            Expr {\n+                                                                                                ty: bool\n+                                                                                                temp_lifetime: Some(Node(13))\n+                                                                                                span: $DIR/thir-tree-match.rs:17:36: 17:40 (#0)\n+                                                                                                kind: \n+                                                                                                    Scope {\n+                                                                                                        region_scope: Destruction(13)\n+                                                                                                        lint_level: Inherited\n+                                                                                                        value:\n+                                                                                                            Expr {\n+                                                                                                                ty: bool\n+                                                                                                                temp_lifetime: Some(Node(13))\n+                                                                                                                span: $DIR/thir-tree-match.rs:17:36: 17:40 (#0)\n+                                                                                                                kind: \n+                                                                                                                    Scope {\n+                                                                                                                        region_scope: Node(13)\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).13))\n+                                                                                                                        value:\n+                                                                                                                            Expr {\n+                                                                                                                                ty: bool\n+                                                                                                                                temp_lifetime: Some(Node(13))\n+                                                                                                                                span: $DIR/thir-tree-match.rs:17:36: 17:40 (#0)\n+                                                                                                                                kind: \n+                                                                                                                                    Literal( lit: Spanned { node: Bool(true), span: $DIR/thir-tree-match.rs:17:36: 17:40 (#0) }, neg: false)\n+\n+                                                                                                                            }\n+                                                                                                                    }\n+                                                                                                            }\n+                                                                                                    }\n+                                                                                            }\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).12))\n+                                                                                        scope: Node(12)\n+                                                                                        span: $DIR/thir-tree-match.rs:17:9: 17:40 (#0)\n+                                                                                    }\n+                                                                                    Arm {\n+                                                                                        pattern: \n+                                                                                            Pat: {\n+                                                                                                ty: Foo\n+                                                                                                span: $DIR/thir-tree-match.rs:18:9: 18:23 (#0)\n+                                                                                                kind: PatKind {\n+                                                                                                    Variant {\n+                                                                                                        adt_def: \n+                                                                                                            AdtDef {\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                flags: IS_ENUM\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                        substs: []\n+                                                                                                        variant_index: 0\n+                                                                                                        subpatterns: [\n+                                                                                                            Pat: {\n+                                                                                                                ty: Bar\n+                                                                                                                span: $DIR/thir-tree-match.rs:18:21: 18:22 (#0)\n+                                                                                                                kind: PatKind {\n+                                                                                                                    Wild\n+                                                                                                                }\n+                                                                                                            }\n+                                                                                                        ]\n+                                                                                                    }\n+                                                                                                }\n+                                                                                            }\n+                                                                                        guard: None\n+                                                                                        body: \n+                                                                                            Expr {\n+                                                                                                ty: bool\n+                                                                                                temp_lifetime: Some(Node(19))\n+                                                                                                span: $DIR/thir-tree-match.rs:18:27: 18:32 (#0)\n+                                                                                                kind: \n+                                                                                                    Scope {\n+                                                                                                        region_scope: Destruction(19)\n+                                                                                                        lint_level: Inherited\n+                                                                                                        value:\n+                                                                                                            Expr {\n+                                                                                                                ty: bool\n+                                                                                                                temp_lifetime: Some(Node(19))\n+                                                                                                                span: $DIR/thir-tree-match.rs:18:27: 18:32 (#0)\n+                                                                                                                kind: \n+                                                                                                                    Scope {\n+                                                                                                                        region_scope: Node(19)\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).19))\n+                                                                                                                        value:\n+                                                                                                                            Expr {\n+                                                                                                                                ty: bool\n+                                                                                                                                temp_lifetime: Some(Node(19))\n+                                                                                                                                span: $DIR/thir-tree-match.rs:18:27: 18:32 (#0)\n+                                                                                                                                kind: \n+                                                                                                                                    Literal( lit: Spanned { node: Bool(false), span: $DIR/thir-tree-match.rs:18:27: 18:32 (#0) }, neg: false)\n+\n+                                                                                                                            }\n+                                                                                                                    }\n+                                                                                                            }\n+                                                                                                    }\n+                                                                                            }\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).18))\n+                                                                                        scope: Node(18)\n+                                                                                        span: $DIR/thir-tree-match.rs:18:9: 18:32 (#0)\n+                                                                                    }\n+                                                                                    Arm {\n+                                                                                        pattern: \n+                                                                                            Pat: {\n+                                                                                                ty: Foo\n+                                                                                                span: $DIR/thir-tree-match.rs:19:9: 19:20 (#0)\n+                                                                                                kind: PatKind {\n+                                                                                                    Variant {\n+                                                                                                        adt_def: \n+                                                                                                            AdtDef {\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                flags: IS_ENUM\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                        substs: []\n+                                                                                                        variant_index: 1\n+                                                                                                        subpatterns: []\n+                                                                                                    }\n+                                                                                                }\n+                                                                                            }\n+                                                                                        guard: None\n+                                                                                        body: \n+                                                                                            Expr {\n+                                                                                                ty: bool\n+                                                                                                temp_lifetime: Some(Node(24))\n+                                                                                                span: $DIR/thir-tree-match.rs:19:24: 19:28 (#0)\n+                                                                                                kind: \n+                                                                                                    Scope {\n+                                                                                                        region_scope: Destruction(24)\n+                                                                                                        lint_level: Inherited\n+                                                                                                        value:\n+                                                                                                            Expr {\n+                                                                                                                ty: bool\n+                                                                                                                temp_lifetime: Some(Node(24))\n+                                                                                                                span: $DIR/thir-tree-match.rs:19:24: 19:28 (#0)\n+                                                                                                                kind: \n+                                                                                                                    Scope {\n+                                                                                                                        region_scope: Node(24)\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).24))\n+                                                                                                                        value:\n+                                                                                                                            Expr {\n+                                                                                                                                ty: bool\n+                                                                                                                                temp_lifetime: Some(Node(24))\n+                                                                                                                                span: $DIR/thir-tree-match.rs:19:24: 19:28 (#0)\n+                                                                                                                                kind: \n+                                                                                                                                    Literal( lit: Spanned { node: Bool(true), span: $DIR/thir-tree-match.rs:19:24: 19:28 (#0) }, neg: false)\n+\n+                                                                                                                            }\n+                                                                                                                    }\n+                                                                                                            }\n+                                                                                                    }\n+                                                                                            }\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).23))\n+                                                                                        scope: Node(23)\n+                                                                                        span: $DIR/thir-tree-match.rs:19:9: 19:28 (#0)\n+                                                                                    }\n+                                                                                ]\n+                                                                            }\n+                                                                    }\n+                                                            }\n+                                                    }\n+                                            }\n+                                    }\n+                            }\n+                    }\n+            }\n+    }\n+\n+\n+DefId(0:17 ~ thir_tree_match[3c9a]::main):\n+params: [\n+]\n+body:\n+    Expr {\n+        ty: ()\n+        temp_lifetime: Some(Node(2))\n+        span: $DIR/thir-tree-match.rs:23:11: 23:13 (#0)\n+        kind: \n+            Scope {\n+                region_scope: Destruction(2)\n+                lint_level: Inherited\n+                value:\n+                    Expr {\n+                        ty: ()\n+                        temp_lifetime: Some(Node(2))\n+                        span: $DIR/thir-tree-match.rs:23:11: 23:13 (#0)\n+                        kind: \n+                            Scope {\n+                                region_scope: Node(2)\n+                                lint_level: Explicit(HirId(DefId(0:17 ~ thir_tree_match[3c9a]::main).2))\n+                                value:\n+                                    Expr {\n+                                        ty: ()\n+                                        temp_lifetime: Some(Node(2))\n+                                        span: $DIR/thir-tree-match.rs:23:11: 23:13 (#0)\n+                                        kind: \n+                                            Block {\n+                                                targeted_by_break: false\n+                                                opt_destruction_scope: None\n+                                                span: $DIR/thir-tree-match.rs:23:11: 23:13 (#0)\n+                                                region_scope: Node(1)\n+                                                safety_mode: Safe\n+                                                stmts: []\n+                                                expr: []\n+                                            }\n+                                    }\n+                            }\n+                    }\n+            }\n+    }\n+\n+"}, {"sha": "32df7905adbade83afcff774a16942cbbaff7873", "filename": "tests/ui/thir-print/thir-tree.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-tree.rs?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "previous_filename": "tests/ui/thir-tree.rs"}, {"sha": "0a35d9fb78ca28dd5f044e5dfd60ec7080d01cf8", "filename": "tests/ui/thir-print/thir-tree.stdout", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e972bc8083d5228536dfd42913c8778b6bb04c8e/tests%2Fui%2Fthir-print%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-tree.stdout?ref=e972bc8083d5228536dfd42913c8778b6bb04c8e", "patch": "@@ -0,0 +1,43 @@\n+DefId(0:3 ~ thir_tree[8f1d]::main):\n+params: [\n+]\n+body:\n+    Expr {\n+        ty: ()\n+        temp_lifetime: Some(Node(2))\n+        span: $DIR/thir-tree.rs:4:15: 4:17 (#0)\n+        kind: \n+            Scope {\n+                region_scope: Destruction(2)\n+                lint_level: Inherited\n+                value:\n+                    Expr {\n+                        ty: ()\n+                        temp_lifetime: Some(Node(2))\n+                        span: $DIR/thir-tree.rs:4:15: 4:17 (#0)\n+                        kind: \n+                            Scope {\n+                                region_scope: Node(2)\n+                                lint_level: Explicit(HirId(DefId(0:3 ~ thir_tree[8f1d]::main).2))\n+                                value:\n+                                    Expr {\n+                                        ty: ()\n+                                        temp_lifetime: Some(Node(2))\n+                                        span: $DIR/thir-tree.rs:4:15: 4:17 (#0)\n+                                        kind: \n+                                            Block {\n+                                                targeted_by_break: false\n+                                                opt_destruction_scope: None\n+                                                span: $DIR/thir-tree.rs:4:15: 4:17 (#0)\n+                                                region_scope: Node(1)\n+                                                safety_mode: Safe\n+                                                stmts: []\n+                                                expr: []\n+                                            }\n+                                    }\n+                            }\n+                    }\n+            }\n+    }\n+\n+"}]}