{"sha": "4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMzA3ZmY4MDI0YzhkMmQ1MzNiYzNhYjdhYWMxZDYzY2E1YzU5Nzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-18T11:25:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-18T11:25:26Z"}, "message": "Fully document ra_lsp_server", "tree": {"sha": "08e5d3f64f545d402b1a9f4fe65330ca56e1d741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e5d3f64f545d402b1a9f4fe65330ca56e1d741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "html_url": "https://github.com/rust-lang/rust/commit/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f142d79ed251db58570a5863b06c8826221f9c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f142d79ed251db58570a5863b06c8826221f9c9", "html_url": "https://github.com/rust-lang/rust/commit/1f142d79ed251db58570a5863b06c8826221f9c9"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "53751aafb705b35552578da294690baef1bca01f", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "patch": "@@ -1,10 +1,14 @@\n-//! FIXME: write short doc here\n+//! See `CargoTargetSpec`\n \n use ra_ide::{FileId, RunnableKind, TestId};\n use ra_project_model::{self, ProjectWorkspace, TargetKind};\n \n use crate::{world::WorldSnapshot, Result};\n \n+/// Abstract representation of Cargo target.\n+///\n+/// We use it to cook up the set of cli args we need to pass to Cargo to\n+/// build/test/run the target.\n pub(crate) struct CargoTargetSpec {\n     pub(crate) package: String,\n     pub(crate) target: String,"}, {"sha": "90ef74056b08b54e87b74c75a804eb1c02403d12", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "patch": "@@ -1,4 +1,5 @@\n-//! Convenience module responsible for translating between rust-analyzer's types and LSP types.\n+//! Convenience module responsible for translating between rust-analyzer's types\n+//! and LSP types.\n \n use lsp_types::{\n     self, CreateFile, DiagnosticSeverity, DocumentChangeOperation, DocumentChanges, Documentation,"}, {"sha": "e7924f0a30f77e21e2256d3ad177ba9fc984431d", "filename": "crates/ra_lsp_server/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fdiagnostics.rs?ref=4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "patch": "@@ -1,7 +1,9 @@\n //! Book keeping for keeping diagnostics easily in sync with the client.\n+\n+use std::{collections::HashMap, sync::Arc};\n+\n use lsp_types::{CodeActionOrCommand, Diagnostic, Range};\n use ra_ide::FileId;\n-use std::{collections::HashMap, sync::Arc};\n \n pub type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n "}, {"sha": "67d8a5f6fab23a652f13bdda666e0a8136aca0b4", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "patch": "@@ -1,5 +1,5 @@\n-//! The main loop of `ra_lsp_server` responsible for dispatching LSP requests/replies and\n-//! notifications back to the client.\n+//! The main loop of `ra_lsp_server` responsible for dispatching LSP\n+//! requests/replies and notifications back to the client.\n \n mod handlers;\n mod subscriptions;"}, {"sha": "bb7bab3729458e0c3abc61b17c12afa16df01b19", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "patch": "@@ -1,5 +1,6 @@\n-//! This module is responsible for implementing handlers for Lanuage Server Protocol.\n-//! The majority of requests are fulfilled by calling into the `ra_ide` crate.\n+//! This module is responsible for implementing handlers for Language Server\n+//! Protocol. The majority of requests are fulfilled by calling into the\n+//! `ra_ide` crate.\n \n use std::{\n     collections::hash_map::Entry,"}, {"sha": "73b33e41942c65505f44d2c2e934665e2aacb7f9", "filename": "crates/ra_lsp_server/src/main_loop/pending_requests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fpending_requests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fpending_requests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fpending_requests.rs?ref=4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "patch": "@@ -1,4 +1,4 @@\n-//! Datastructures that keep track of inflight requests.\n+//! Data structures that keep track of inflight requests.\n \n use std::time::{Duration, Instant};\n "}, {"sha": "bee6437cf34b6f8664171cd6f7b9bbbcf51067d5", "filename": "crates/ra_lsp_server/src/main_loop/subscriptions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fsubscriptions.rs?ref=4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "patch": "@@ -1,4 +1,5 @@\n-//! Keeps track of file subscriptions.\n+//! Keeps track of file subscriptions -- the set of currently opened files for\n+//! which we want to publish diagnostics, syntax highlighting, etc.\n \n use ra_ide::FileId;\n use rustc_hash::FxHashSet;"}, {"sha": "96efab844d5704020dd41a057df1f2150cea5447", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "patch": "@@ -1,5 +1,5 @@\n-//! The context or environment in which the language server functions.\n-//! In our server implementation this is know as the `WorldState`.\n+//! The context or environment in which the language server functions. In our\n+//! server implementation this is know as the `WorldState`.\n //!\n //! Each tick provides an immutable snapshot of the state as `WorldSnapshot`.\n "}]}