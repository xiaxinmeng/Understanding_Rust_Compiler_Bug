{"sha": "cbd912babab4b8cebe9e90a632117913ca192743", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZDkxMmJhYmFiNGI4Y2ViZTllOTBhNjMyMTE3OTEzY2ExOTI3NDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-06T22:09:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:37:25Z"}, "message": "Add union types", "tree": {"sha": "4e59815e06c47d9c278a575f8634de4066025145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e59815e06c47d9c278a575f8634de4066025145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd912babab4b8cebe9e90a632117913ca192743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd912babab4b8cebe9e90a632117913ca192743", "html_url": "https://github.com/rust-lang/rust/commit/cbd912babab4b8cebe9e90a632117913ca192743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd912babab4b8cebe9e90a632117913ca192743/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d52a003bf0997d31378796bf59cc66c3ae7683", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d52a003bf0997d31378796bf59cc66c3ae7683", "html_url": "https://github.com/rust-lang/rust/commit/35d52a003bf0997d31378796bf59cc66c3ae7683"}], "stats": {"total": 193, "additions": 124, "deletions": 69}, "files": [{"sha": "8aeb0757f5de29a3d525b902f35b873c688a7f59", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -168,6 +168,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::TyFnPtr(_) |\n             ty::TyTrait(..) |\n             ty::TyStruct(..) |\n+            ty::TyUnion(..) |\n             ty::TyClosure(..) |\n             ty::TyNever |\n             ty::TyTuple(..) |"}, {"sha": "f856e110ea2a52bbd6e7180887a1dc49b1581231", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -261,7 +261,8 @@ fn ty_is_local_constructor(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal)->\n         }\n \n         ty::TyEnum(def, _) |\n-        ty::TyStruct(def, _) => {\n+        ty::TyStruct(def, _) |\n+        ty::TyUnion(def, _) => {\n             def.did.is_local()\n         }\n "}, {"sha": "95e83d404a74cdfb02d2b2c61134b818f8d7c571", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -166,6 +166,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::TyParam(..) => Some(14),\n                 ty::TyAnon(..) => Some(15),\n                 ty::TyNever => Some(16),\n+                ty::TyUnion(..) => Some(17),\n                 ty::TyInfer(..) | ty::TyError => None\n             }\n         }"}, {"sha": "f8f10d9c26541996cf63ae80a1c96cd473d14fd1", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -1780,7 +1780,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(tys.last().into_iter().cloned().collect()))\n             }\n \n-            ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n+            ty::TyStruct(def, substs) | ty::TyUnion(def, substs) |\n+            ty::TyEnum(def, substs) => {\n                 let sized_crit = def.sized_constraint(self.tcx());\n                 // (*) binder moved here\n                 Where(ty::Binder(match sized_crit.sty {\n@@ -1836,7 +1837,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Where(ty::Binder(tys.to_vec()))\n             }\n \n-            ty::TyStruct(..) | ty::TyEnum(..) |\n+            ty::TyStruct(..) | ty::TyUnion(..) | ty::TyEnum(..) |\n             ty::TyProjection(..) | ty::TyParam(..) | ty::TyAnon(..) => {\n                 // Fallback to whatever user-defined impls exist in this case.\n                 None\n@@ -1933,7 +1934,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 substs.types().collect()\n             }\n \n-            ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n+            ty::TyStruct(def, substs) | ty::TyUnion(def, substs) | ty::TyEnum(def, substs) => {\n                 def.all_fields()\n                     .map(|f| f.ty(self.tcx(), substs))\n                     .collect()"}, {"sha": "d7d4693c1165f2e5c988022686d9ee347daad161", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -224,7 +224,8 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                                         |ty| tc_ty(tcx, *ty, cache))\n                 }\n \n-                ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n+                ty::TyStruct(def, substs) | ty::TyUnion(def, substs) |\n+                ty::TyEnum(def, substs) => {\n                     let mut res =\n                         TypeContents::union(&def.variants, |v| {\n                             TypeContents::union(&v.fields, |f| {"}, {"sha": "8dd7bc562d7c1f44d93d483055109dbb14e00224", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -1032,8 +1032,8 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     pub fn print_debug_stats(self) {\n         sty_debug_print!(\n             self,\n-            TyEnum, TyBox, TyArray, TySlice, TyRawPtr, TyRef, TyFnDef, TyFnPtr,\n-            TyTrait, TyStruct, TyClosure, TyTuple, TyParam, TyInfer, TyProjection, TyAnon);\n+            TyEnum, TyBox, TyArray, TySlice, TyRawPtr, TyRef, TyFnDef, TyFnPtr, TyTrait,\n+            TyStruct, TyUnion, TyClosure, TyTuple, TyParam, TyInfer, TyProjection, TyAnon);\n \n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n         println!(\"BareFnTy interner: #{}\", self.interners.bare_fn.borrow().len());"}, {"sha": "0e33e396f7e187f7a8bfccceb58b64961d81c966", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -247,6 +247,9 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::TyStruct(def, _) => {\n                 format!(\"struct `{}`\", tcx.item_path_str(def.did))\n             }\n+            ty::TyUnion(def, _) => {\n+                format!(\"union `{}`\", tcx.item_path_str(def.did))\n+            }\n             ty::TyClosure(..) => \"closure\".to_string(),\n             ty::TyTuple(_) => \"tuple\".to_string(),\n             ty::TyInfer(ty::TyVar(_)) => \"inferred type\".to_string(),"}, {"sha": "23678d1e37742e62c29d70ab0955629d176bf908", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -66,6 +66,9 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyStruct(def, _) => {\n             Some(StructSimplifiedType(def.did))\n         }\n+        ty::TyUnion(..) => {\n+            unimplemented_unions!();\n+        }\n         ty::TyRef(_, mt) => {\n             // since we introduce auto-refs during method lookup, we\n             // just treat &T and T as equivalent from the point of"}, {"sha": "ce6e4d6516ec6977601588d2cd0baa0fb8288c86", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -102,7 +102,7 @@ impl FlagComputation {\n                 }\n             }\n \n-            &ty::TyEnum(_, substs) | &ty::TyStruct(_, substs) => {\n+            &ty::TyEnum(_, substs) | &ty::TyStruct(_, substs) | &ty::TyUnion(_, substs) => {\n                 self.add_substs(substs);\n             }\n "}, {"sha": "42ec2b18fb0224377ffd8eeea1957d2619c0bb44", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -320,6 +320,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n     match ty.sty {\n         ty::TyStruct(adt_def, _) |\n+        ty::TyUnion(adt_def, _) |\n         ty::TyEnum(adt_def, _) => Some(adt_def.did),\n \n         ty::TyTrait(ref data) => Some(data.principal.def_id()),"}, {"sha": "622966ca5aba62af97278b13377628407f75096b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -896,6 +896,9 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     non_zero: Some(def.did) == tcx.lang_items.non_zero()\n                 }\n             }\n+            ty::TyUnion(..) => {\n+                unimplemented_unions!();\n+            }\n             ty::TyEnum(def, substs) => {\n                 let hint = *tcx.lookup_repr_hints(def.did).get(0)\n                     .unwrap_or(&attr::ReprAny);"}, {"sha": "ddf25538ee4d07ed5b3dc20c11cc9978fca5c6f7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -1421,6 +1421,7 @@ bitflags! {\n         const IS_PHANTOM_DATA     = 1 << 3,\n         const IS_SIMD             = 1 << 4,\n         const IS_FUNDAMENTAL      = 1 << 5,\n+        const IS_UNION            = 1 << 7,\n     }\n }\n \n@@ -1818,7 +1819,7 @@ impl<'a, 'tcx> AdtDefData<'tcx, 'tcx> {\n                 }\n             }\n \n-            TyEnum(adt, substs) | TyStruct(adt, substs) => {\n+            TyEnum(adt, substs) | TyStruct(adt, substs) | TyUnion(adt, substs) => {\n                 // recursive case\n                 let adt = tcx.lookup_adt_def_master(adt.did);\n                 adt.calculate_sized_constraint_inner(tcx, stack);"}, {"sha": "a7bb0374b75bf3810f49ff514d2ed9ca095d4e8f", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -174,6 +174,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ty::TyNever |           // ...\n             ty::TyEnum(..) |        // OutlivesNominalType\n             ty::TyStruct(..) |      // OutlivesNominalType\n+            ty::TyUnion(..) |      // OutlivesNominalType\n             ty::TyBox(..) |         // OutlivesNominalType (ish)\n             ty::TyAnon(..) |        // OutlivesNominalType (ish)\n             ty::TyStr |             // OutlivesScalar (ish)"}, {"sha": "952641f6832f90b373f9fd46966e4a0ea0a78822", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -495,6 +495,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n                 ty::TyRef(r.fold_with(folder), tm.fold_with(folder))\n             }\n             ty::TyStruct(did, substs) => ty::TyStruct(did, substs.fold_with(folder)),\n+            ty::TyUnion(did, substs) => ty::TyUnion(did, substs.fold_with(folder)),\n             ty::TyClosure(did, substs) => ty::TyClosure(did, substs.fold_with(folder)),\n             ty::TyProjection(ref data) => ty::TyProjection(data.fold_with(folder)),\n             ty::TyAnon(did, substs) => ty::TyAnon(did, substs.fold_with(folder)),\n@@ -524,6 +525,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyFnPtr(ref f) => f.visit_with(visitor),\n             ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),\n             ty::TyStruct(_did, ref substs) => substs.visit_with(visitor),\n+            ty::TyUnion(_did, ref substs) => substs.visit_with(visitor),\n             ty::TyClosure(_did, ref substs) => substs.visit_with(visitor),\n             ty::TyProjection(ref data) => data.visit_with(visitor),\n             ty::TyAnon(_, ref substs) => substs.visit_with(visitor),"}, {"sha": "b023cdad9ee2331ec5f6d2665609c2132bed6d99", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -120,6 +120,11 @@ pub enum TypeVariants<'tcx> {\n     /// See warning about substitutions for enumerated types.\n     TyStruct(AdtDef<'tcx>, &'tcx Substs<'tcx>),\n \n+    /// A union type, defined with `union`.\n+    ///\n+    /// See warning about substitutions for enumerated types.\n+    TyUnion(AdtDef<'tcx>, &'tcx Substs<'tcx>),\n+\n     /// `Box<T>`; this is nominally a struct in the documentation, but is\n     /// special-cased internally. For example, it is possible to implicitly\n     /// move the contents of a box out of that box, and methods of any type\n@@ -1227,6 +1232,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             }\n             TyEnum(_, substs) |\n             TyStruct(_, substs) |\n+            TyUnion(_, substs) |\n             TyAnon(_, substs) => {\n                 substs.regions().collect()\n             }"}, {"sha": "971fc2cee804f94c55a29145f9cac4f4bc639b82", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -430,6 +430,7 @@ impl<'a, 'gcx, 'tcx> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx> {\n             TyUint(u) => self.hash(u),\n             TyFloat(f) => self.hash(f),\n             TyStruct(d, _) |\n+            TyUnion(d, _) |\n             TyEnum(d, _) => self.def_id(d.did),\n             TyArray(_, n) => self.hash(n),\n             TyRawPtr(m) |\n@@ -558,7 +559,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n             }) => Some(true),\n \n             TyArray(..) | TySlice(_) | TyTrait(..) | TyTuple(..) |\n-            TyClosure(..) | TyEnum(..) | TyStruct(..) | TyAnon(..) |\n+            TyClosure(..) | TyEnum(..) | TyStruct(..) | TyUnion(..) | TyAnon(..) |\n             TyProjection(..) | TyParam(..) | TyInfer(..) | TyError => None\n         }.unwrap_or_else(|| !self.impls_bound(tcx, param_env, ty::BoundCopy, span));\n \n@@ -598,7 +599,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n             TyStr | TyTrait(..) | TySlice(_) => Some(false),\n \n-            TyEnum(..) | TyStruct(..) | TyProjection(..) | TyParam(..) |\n+            TyEnum(..) | TyStruct(..) | TyUnion(..) | TyProjection(..) | TyParam(..) |\n             TyInfer(..) | TyAnon(..) | TyError => None\n         }.unwrap_or_else(|| self.impls_bound(tcx, param_env, ty::BoundSized, span));\n "}, {"sha": "cea3bd6348dbe9bb5927839076dc0232ad79eb32", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -95,6 +95,7 @@ fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n         }\n         ty::TyEnum(_, ref substs) |\n         ty::TyStruct(_, ref substs) |\n+        ty::TyUnion(_, ref substs) |\n         ty::TyAnon(_, ref substs) => {\n             stack.extend(substs.types().rev());\n         }"}, {"sha": "599e2be4db247f0e4e133375749eafdfc2b79cf0", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -337,7 +337,8 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 }\n \n                 ty::TyEnum(def, substs) |\n-                ty::TyStruct(def, substs) => {\n+                ty::TyStruct(def, substs) |\n+                ty::TyUnion(def, substs) => {\n                     // WfNominalType\n                     let obligations = self.nominal_obligations(def.did, substs);\n                     self.out.extend(obligations);"}, {"sha": "d0e02f2e8acdd05cdf95baf5695609b4bc72e3fc", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use hir::def_id::DefId;\n use ty::subst::{self, Subst, Substs};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n-use ty::{TyBool, TyChar, TyStruct, TyEnum};\n+use ty::{TyBool, TyChar, TyStruct, TyUnion, TyEnum};\n use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::TyClosure;\n@@ -869,7 +868,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n             TyInfer(infer_ty) => write!(f, \"{}\", infer_ty),\n             TyError => write!(f, \"[type error]\"),\n             TyParam(ref param_ty) => write!(f, \"{}\", param_ty),\n-            TyEnum(def, substs) | TyStruct(def, substs) => {\n+            TyEnum(def, substs) | TyStruct(def, substs) | TyUnion(def, substs) => {\n                 ty::tls::with(|tcx| {\n                     if def.did.is_local() &&\n                           !tcx.tcache.borrow().contains_key(&def.did) {"}, {"sha": "54cec3fd7e135b04a4775d92d4eeb0294a99ef03", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -377,7 +377,8 @@ enum FfiResult {\n     FfiSafe,\n     FfiUnsafe(&'static str),\n     FfiBadStruct(DefId, &'static str),\n-    FfiBadEnum(DefId, &'static str)\n+    FfiBadUnion(DefId, &'static str),\n+    FfiBadEnum(DefId, &'static str),\n }\n \n /// Check if this enum can be safely exported based on the\n@@ -452,12 +453,32 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                     let r = self.check_type_for_ffi(cache, field_ty);\n                     match r {\n                         FfiSafe => {}\n-                        FfiBadStruct(..) | FfiBadEnum(..) => { return r; }\n+                        FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => { return r; }\n                         FfiUnsafe(s) => { return FfiBadStruct(def.did, s); }\n                     }\n                 }\n                 FfiSafe\n             }\n+            ty::TyUnion(def, substs) => {\n+                if !cx.lookup_repr_hints(def.did).contains(&attr::ReprExtern) {\n+                    return FfiUnsafe(\n+                        \"found union without foreign-function-safe \\\n+                         representation annotation in foreign module, \\\n+                         consider adding a #[repr(C)] attribute to \\\n+                         the type\");\n+                }\n+\n+                for field in &def.struct_variant().fields {\n+                    let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n+                    let r = self.check_type_for_ffi(cache, field_ty);\n+                    match r {\n+                        FfiSafe => {}\n+                        FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => { return r; }\n+                        FfiUnsafe(s) => { return FfiBadUnion(def.did, s); }\n+                    }\n+                }\n+                FfiSafe\n+            }\n             ty::TyEnum(def, substs) => {\n                 if def.variants.is_empty() {\n                     // Empty enums are okay... although sort of useless.\n@@ -507,7 +528,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                         let r = self.check_type_for_ffi(cache, arg);\n                         match r {\n                             FfiSafe => {}\n-                            FfiBadStruct(..) | FfiBadEnum(..) => { return r; }\n+                            FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => { return r; }\n                             FfiUnsafe(s) => { return FfiBadEnum(def.did, s); }\n                         }\n                     }\n@@ -614,6 +635,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                     &format!(\"found non-foreign-function-safe member in \\\n                               struct marked #[repr(C)]: {}\", s));\n             }\n+            FfiResult::FfiBadUnion(_, s) => {\n+                // FIXME: This diagnostic is difficult to read, and doesn't\n+                // point at the relevant field.\n+                self.cx.span_lint(IMPROPER_CTYPES, sp,\n+                    &format!(\"found non-foreign-function-safe member in \\\n+                              union marked #[repr(C)]: {}\", s));\n+            }\n             FfiResult::FfiBadEnum(_, s) => {\n                 // FIXME: This diagnostic is difficult to read, and doesn't\n                 // point at the relevant variant."}, {"sha": "b334a21c07c7a93196ebeb0d360a5ca10273362f", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -170,6 +170,11 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n             enc_substs(w, cx, substs);\n             write!(w, \"]\");\n         }\n+        ty::TyUnion(def, substs) => {\n+            write!(w, \"u[{}|\", (cx.ds)(cx.tcx, def.did));\n+            enc_substs(w, cx, substs);\n+            write!(w, \"]\");\n+        }\n         ty::TyClosure(def, substs) => {\n             write!(w, \"k[{}|\", (cx.ds)(cx.tcx, def));\n             enc_substs(w, cx, substs.func_substs);"}, {"sha": "47b3bb36cb9302bdc1fc2add1ed3c189df4e4624", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -798,6 +798,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n             /* nothing to do */\n         }\n         ty::TyStruct(ref adt_def, substs) |\n+        ty::TyUnion(ref adt_def, substs) |\n         ty::TyEnum(ref adt_def, substs) => {\n             for field in adt_def.all_fields() {\n                 let field_type = monomorphize::apply_param_substs(scx,"}, {"sha": "bd839243e201f73a277aa3544d13cb3cc8aa366a", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -45,6 +45,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyUint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n         ty::TyFloat(float_ty) => output.push_str(float_ty.ty_to_string()),\n         ty::TyStruct(def, substs) |\n+        ty::TyUnion(def, substs) |\n         ty::TyEnum(def, substs) => {\n             push_item_name(cx, def.did, qualified, output);\n             push_type_params(cx, substs, output);"}, {"sha": "deef0b09a17b032dfa1b63b06c5e11418310afec", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -397,6 +397,7 @@ pub fn push_unique_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::TyFloat(ast::FloatTy::F32) => output.push_str(\"f32\"),\n         ty::TyFloat(ast::FloatTy::F64) => output.push_str(\"f64\"),\n         ty::TyStruct(adt_def, substs) |\n+        ty::TyUnion(adt_def, substs) |\n         ty::TyEnum(adt_def, substs) => {\n             push_item_name(tcx, adt_def.did, output);\n             push_type_params(tcx, substs, &[], output);"}, {"sha": "d5d8f049681dadc27bd533bb5299b664621ce8e6", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 36, "deletions": 47, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -89,27 +89,23 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n             Type::nil(cx)\n         }\n \n-        ty::TyTuple(..) | ty::TyEnum(..) | ty::TyClosure(..) => {\n-            let repr = adt::represent_type(cx, t);\n-            adt::sizing_type_of(cx, &repr, false)\n+        ty::TyStruct(..) if t.is_simd() => {\n+            let e = t.simd_type(cx.tcx());\n+            if !e.is_machine() {\n+                cx.sess().fatal(&format!(\"monomorphising SIMD type `{}` with \\\n+                                          a non-machine element type `{}`\",\n+                                         t, e))\n+            }\n+            let llet = type_of(cx, e);\n+            let n = t.simd_size(cx.tcx()) as u64;\n+            ensure_array_fits_in_address_space(cx, llet, n, t);\n+            Type::vector(&llet, n)\n         }\n \n-        ty::TyStruct(..) => {\n-            if t.is_simd() {\n-                let e = t.simd_type(cx.tcx());\n-                if !e.is_machine() {\n-                    cx.sess().fatal(&format!(\"monomorphising SIMD type `{}` with \\\n-                                              a non-machine element type `{}`\",\n-                                             t, e))\n-                }\n-                let llet = type_of(cx, e);\n-                let n = t.simd_size(cx.tcx()) as u64;\n-                ensure_array_fits_in_address_space(cx, llet, n, t);\n-                Type::vector(&llet, n)\n-            } else {\n-                let repr = adt::represent_type(cx, t);\n-                adt::sizing_type_of(cx, &repr, false)\n-            }\n+        ty::TyTuple(..) | ty::TyStruct(..) | ty::TyUnion(..) |\n+        ty::TyEnum(..) | ty::TyClosure(..) => {\n+            let repr = adt::represent_type(cx, t);\n+            adt::sizing_type_of(cx, &repr, false)\n         }\n \n         ty::TyProjection(..) | ty::TyInfer(..) | ty::TyParam(..) |\n@@ -244,15 +240,6 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TyUint(t) => Type::uint_from_ty(cx, t),\n       ty::TyFloat(t) => Type::float_from_ty(cx, t),\n       ty::TyNever => Type::nil(cx),\n-      ty::TyEnum(def, ref substs) => {\n-          // Only create the named struct, but don't fill it in. We\n-          // fill it in *after* placing it into the type cache. This\n-          // avoids creating more than one copy of the enum when one\n-          // of the enum's variants refers to the enum itself.\n-          let repr = adt::represent_type(cx, t);\n-          let name = llvm_type_name(cx, def.did, substs);\n-          adt::incomplete_type_of(cx, &repr, &name[..])\n-      }\n       ty::TyClosure(..) => {\n           // Only create the named struct, but don't fill it in. We\n           // fill it in *after* placing it into the type cache.\n@@ -307,26 +294,28 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n           let repr = adt::represent_type(cx, t);\n           adt::type_of(cx, &repr)\n       }\n-      ty::TyStruct(def, ref substs) => {\n-          if t.is_simd() {\n-              let e = t.simd_type(cx.tcx());\n-              if !e.is_machine() {\n-                  cx.sess().fatal(&format!(\"monomorphising SIMD type `{}` with \\\n-                                            a non-machine element type `{}`\",\n-                                           t, e))\n-              }\n-              let llet = in_memory_type_of(cx, e);\n-              let n = t.simd_size(cx.tcx()) as u64;\n-              ensure_array_fits_in_address_space(cx, llet, n, t);\n-              Type::vector(&llet, n)\n-          } else {\n-              // Only create the named struct, but don't fill it in. We fill it\n-              // in *after* placing it into the type cache. This prevents\n-              // infinite recursion with recursive struct types.\n-              let repr = adt::represent_type(cx, t);\n-              let name = llvm_type_name(cx, def.did, substs);\n-              adt::incomplete_type_of(cx, &repr, &name[..])\n+      ty::TyStruct(..) if t.is_simd() => {\n+          let e = t.simd_type(cx.tcx());\n+          if !e.is_machine() {\n+              cx.sess().fatal(&format!(\"monomorphising SIMD type `{}` with \\\n+                                        a non-machine element type `{}`\",\n+                                       t, e))\n           }\n+          let llet = in_memory_type_of(cx, e);\n+          let n = t.simd_size(cx.tcx()) as u64;\n+          ensure_array_fits_in_address_space(cx, llet, n, t);\n+          Type::vector(&llet, n)\n+      }\n+      ty::TyStruct(def, ref substs) |\n+      ty::TyUnion(def, ref substs) |\n+      ty::TyEnum(def, ref substs) => {\n+          // Only create the named struct, but don't fill it in. We\n+          // fill it in *after* placing it into the type cache. This\n+          // avoids creating more than one copy of the enum when one\n+          // of the enum's variants refers to the enum itself.\n+          let repr = adt::represent_type(cx, t);\n+          let name = llvm_type_name(cx, def.did, substs);\n+          adt::incomplete_type_of(cx, &repr, &name[..])\n       }\n \n       ty::TyInfer(..) |"}, {"sha": "b73b8b9988766b7fb46575bdb3f0e93ac0ecba71", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -439,7 +439,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n                 cx, context, ity, depth+1)\n         }\n \n-        ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n+        ty::TyStruct(def, substs) | ty::TyUnion(def, substs) | ty::TyEnum(def, substs) => {\n             let did = def.did;\n             for variant in &def.variants {\n                 for field in variant.fields.iter() {"}, {"sha": "a20195bd801d932bcc8a8f413e19639c88fa32e8", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -24,7 +24,7 @@ use rustc::ty::{ImplOrTraitItemId, ConstTraitItemId};\n use rustc::ty::{MethodTraitItemId, TypeTraitItemId, ParameterEnvironment};\n use rustc::ty::{Ty, TyBool, TyChar, TyEnum, TyError};\n use rustc::ty::{TyParam, TyRawPtr};\n-use rustc::ty::{TyRef, TyStruct, TyTrait, TyNever, TyTuple};\n+use rustc::ty::{TyRef, TyStruct, TyUnion, TyTrait, TyNever, TyTuple};\n use rustc::ty::{TyStr, TyArray, TySlice, TyFloat, TyInfer, TyInt};\n use rustc::ty::{TyUint, TyClosure, TyBox, TyFnDef, TyFnPtr};\n use rustc::ty::{TyProjection, TyAnon};\n@@ -70,7 +70,8 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n     fn get_base_type_def_id(&self, span: Span, ty: Ty<'tcx>) -> Option<DefId> {\n         match ty.sty {\n             TyEnum(def, _) |\n-            TyStruct(def, _) => {\n+            TyStruct(def, _) |\n+            TyUnion(def, _) => {\n                 Some(def.did)\n             }\n "}, {"sha": "e20e74be67cd39a3e7489349d0d9a25c0fd5ef4f", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -344,7 +344,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::TyEnum(def, substs) |\n-            ty::TyStruct(def, substs) => {\n+            ty::TyStruct(def, substs) |\n+            ty::TyUnion(def, substs) => {\n                 let item_type = self.tcx().lookup_item_type(def.did);\n \n                 // This edge is actually implied by the call to"}, {"sha": "92bb265ca995ae3b7cca9f4fda3624cecbc27983", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd912babab4b8cebe9e90a632117913ca192743/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cbd912babab4b8cebe9e90a632117913ca192743", "patch": "@@ -1801,6 +1801,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 decl: (cx.map.local_def_id(0), &fty.sig).clean(cx),\n                 abi: fty.abi,\n             }),\n+            ty::TyUnion(..) => unimplemented_unions!(),\n             ty::TyStruct(def, substs) |\n             ty::TyEnum(def, substs) => {\n                 let did = def.did;"}]}