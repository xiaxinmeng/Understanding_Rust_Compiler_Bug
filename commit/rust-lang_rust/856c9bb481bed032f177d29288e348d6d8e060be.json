{"sha": "856c9bb481bed032f177d29288e348d6d8e060be", "node_id": "C_kwDOAAsO6NoAKDg1NmM5YmI0ODFiZWQwMzJmMTc3ZDI5Mjg4ZTM0OGQ2ZDhlMDYwYmU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-11T20:37:59Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-11T20:37:59Z"}, "message": "Add eslint checks for rustdoc-js tester", "tree": {"sha": "5ac428c47324da25f36152bd786a14209ca4f85a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac428c47324da25f36152bd786a14209ca4f85a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856c9bb481bed032f177d29288e348d6d8e060be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856c9bb481bed032f177d29288e348d6d8e060be", "html_url": "https://github.com/rust-lang/rust/commit/856c9bb481bed032f177d29288e348d6d8e060be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856c9bb481bed032f177d29288e348d6d8e060be/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e1681c1db9545ec05c458cad440a9197617a30", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e1681c1db9545ec05c458cad440a9197617a30", "html_url": "https://github.com/rust-lang/rust/commit/67e1681c1db9545ec05c458cad440a9197617a30"}], "stats": {"total": 172, "additions": 134, "deletions": 38}, "files": [{"sha": "4ab3a315733098588a6313c50b2f97155de3ff0e", "filename": "src/tools/rustdoc-js/.eslintrc.js", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/856c9bb481bed032f177d29288e348d6d8e060be/src%2Ftools%2Frustdoc-js%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/856c9bb481bed032f177d29288e348d6d8e060be/src%2Ftools%2Frustdoc-js%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2F.eslintrc.js?ref=856c9bb481bed032f177d29288e348d6d8e060be", "patch": "@@ -0,0 +1,96 @@\n+module.exports = {\n+    \"env\": {\n+        \"browser\": true,\n+        \"node\": true,\n+        \"es6\": true\n+    },\n+    \"extends\": \"eslint:recommended\",\n+    \"parserOptions\": {\n+        \"ecmaVersion\": 2015,\n+        \"sourceType\": \"module\"\n+    },\n+    \"rules\": {\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"semi\": [\n+            \"error\",\n+            \"always\"\n+        ],\n+        \"quotes\": [\n+            \"error\",\n+            \"double\"\n+        ],\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"no-trailing-spaces\": \"error\",\n+        \"no-var\": [\"error\"],\n+        \"prefer-const\": [\"error\"],\n+        \"prefer-arrow-callback\": [\"error\"],\n+        \"brace-style\": [\n+            \"error\",\n+            \"1tbs\",\n+            { \"allowSingleLine\": false }\n+        ],\n+        \"keyword-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"arrow-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"key-spacing\": [\n+            \"error\",\n+            { \"beforeColon\": false, \"afterColon\": true, \"mode\": \"strict\" }\n+        ],\n+        \"func-call-spacing\": [\"error\", \"never\"],\n+        \"space-infix-ops\": \"error\",\n+        \"space-before-function-paren\": [\"error\", \"never\"],\n+        \"space-before-blocks\": \"error\",\n+        \"comma-dangle\": [\"error\", \"always-multiline\"],\n+        \"comma-style\": [\"error\", \"last\"],\n+        \"max-len\": [\"error\", { \"code\": 100, \"tabWidth\": 4 }],\n+        \"eol-last\": [\"error\", \"always\"],\n+        \"arrow-parens\": [\"error\", \"as-needed\"],\n+        \"no-unused-vars\": [\n+            \"error\",\n+            {\n+                \"argsIgnorePattern\": \"^_\",\n+                \"varsIgnorePattern\": \"^_\"\n+            }\n+        ],\n+        \"eqeqeq\": \"error\",\n+        \"no-const-assign\": \"error\",\n+        \"no-debugger\": \"error\",\n+        \"no-dupe-args\": \"error\",\n+        \"no-dupe-else-if\": \"error\",\n+        \"no-dupe-keys\": \"error\",\n+        \"no-duplicate-case\": \"error\",\n+        \"no-ex-assign\": \"error\",\n+        \"no-fallthrough\": \"error\",\n+        \"no-invalid-regexp\": \"error\",\n+        \"no-import-assign\": \"error\",\n+        \"no-self-compare\": \"error\",\n+        \"no-template-curly-in-string\": \"error\",\n+        \"block-scoped-var\": \"error\",\n+        \"guard-for-in\": \"error\",\n+        \"no-alert\": \"error\",\n+        \"no-confusing-arrow\": \"error\",\n+        \"no-div-regex\": \"error\",\n+        \"no-floating-decimal\": \"error\",\n+        \"no-implicit-globals\": \"error\",\n+        \"no-implied-eval\": \"error\",\n+        \"no-label-var\": \"error\",\n+        \"no-lonely-if\": \"error\",\n+        \"no-mixed-operators\": \"error\",\n+        \"no-multi-assign\": \"error\",\n+        \"no-return-assign\": \"error\",\n+        \"no-script-url\": \"error\",\n+        \"no-sequences\": \"error\",\n+        \"no-div-regex\": \"error\",\n+    }\n+};"}, {"sha": "9bd6e0d990d1e06864ea20498ba4e8c6937e4734", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/856c9bb481bed032f177d29288e348d6d8e060be/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/856c9bb481bed032f177d29288e348d6d8e060be/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=856c9bb481bed032f177d29288e348d6d8e060be", "patch": "@@ -1,5 +1,5 @@\n-const fs = require('fs');\n-const path = require('path');\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n \n function loadContent(content) {\n     const Module = module.constructor;\n@@ -15,7 +15,7 @@ function loadContent(content) {\n }\n \n function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n+    return fs.readFileSync(filePath, \"utf8\");\n }\n \n function contentToDiffLine(key, value) {\n@@ -25,41 +25,41 @@ function contentToDiffLine(key, value) {\n // This function is only called when no matching result was found and therefore will only display\n // the diff between the two items.\n function betterLookingDiff(entry, data) {\n-    let output = ' {\\n';\n-    const spaces = '     ';\n+    let output = \" {\\n\";\n+    const spaces = \"     \";\n     for (const key in entry) {\n-        if (!entry.hasOwnProperty(key)) {\n+        if (!Object.prototype.hasOwnProperty.call(entry, key)) {\n             continue;\n         }\n-        if (!data || !data.hasOwnProperty(key)) {\n-            output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n+        if (!data || !Object.prototype.hasOwnProperty.call(data, key)) {\n+            output += \"-\" + spaces + contentToDiffLine(key, entry[key]) + \"\\n\";\n             continue;\n         }\n         const value = data[key];\n         if (value !== entry[key]) {\n-            output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n-            output += '+' + spaces + contentToDiffLine(key, value) + '\\n';\n+            output += \"-\" + spaces + contentToDiffLine(key, entry[key]) + \"\\n\";\n+            output += \"+\" + spaces + contentToDiffLine(key, value) + \"\\n\";\n         } else {\n-            output += spaces + contentToDiffLine(key, value) + '\\n';\n+            output += spaces + contentToDiffLine(key, value) + \"\\n\";\n         }\n     }\n-    return output + ' }';\n+    return output + \" }\";\n }\n \n function lookForEntry(entry, data) {\n     return data.findIndex(data_entry => {\n         let allGood = true;\n         for (const key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n+            if (!Object.prototype.hasOwnProperty.call(entry, key)) {\n                 continue;\n             }\n             let value = data_entry[key];\n             // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data_entry['parent'] !== undefined) {\n+            if (key === \"path\" && data_entry[\"parent\"] !== undefined) {\n                 if (value.length > 0) {\n-                    value += '::' + data_entry['parent']['name'];\n+                    value += \"::\" + data_entry[\"parent\"][\"name\"];\n                 } else {\n-                    value = data_entry['parent']['name'];\n+                    value = data_entry[\"parent\"][\"name\"];\n                 }\n             }\n             if (value !== entry[key]) {\n@@ -95,7 +95,7 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n         fieldsToCheck = [];\n     }\n     for (const field of fieldsToCheck) {\n-        if (!expected.hasOwnProperty(field)) {\n+        if (!Object.prototype.hasOwnProperty.call(expected, field)) {\n             let text = `${queryName}==> Mandatory key \\`${field}\\` is not present`;\n             if (fullPath.length > 0) {\n                 text += ` in field \\`${fullPath}\\``;\n@@ -117,22 +117,22 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n                 error_text.push(`${queryName}==> EXPECTED has extra value in array from field ` +\n                     `\\`${fullPath}\\` (position ${i}): \\`${JSON.stringify(expected[i])}\\``);\n             } else {\n-                valueCheck(fullPath + '[' + i + ']', expected[i], result[i], error_text, queryName);\n+                valueCheck(fullPath + \"[\" + i + \"]\", expected[i], result[i], error_text, queryName);\n             }\n         }\n         for (; i < result.length; ++i) {\n             error_text.push(`${queryName}==> RESULT has extra value in array from field ` +\n                 `\\`${fullPath}\\` (position ${i}): \\`${JSON.stringify(result[i])}\\` ` +\n-                'compared to EXPECTED');\n+                \"compared to EXPECTED\");\n         }\n     } else if (expected !== null && typeof expected !== \"undefined\" &&\n-               expected.constructor == Object) {\n+               expected.constructor == Object) { // eslint-disable-line eqeqeq\n         for (const key in expected) {\n-            if (!expected.hasOwnProperty(key)) {\n+            if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n                 continue;\n             }\n-            if (!result.hasOwnProperty(key)) {\n-                error_text.push('==> Unknown key \"' + key + '\"');\n+            if (!Object.prototype.hasOwnProperty.call(result, key)) {\n+                error_text.push(\"==> Unknown key \\\"\" + key + \"\\\"\");\n                 break;\n             }\n             let result_v = result[key];\n@@ -147,13 +147,13 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n                 });\n                 result_v = result_v.join(\"\");\n             }\n-            const obj_path = fullPath + (fullPath.length > 0 ? '.' : '') + key;\n+            const obj_path = fullPath + (fullPath.length > 0 ? \".\" : \"\") + key;\n             valueCheck(obj_path, expected[key], result_v, error_text, queryName);\n         }\n     } else {\n         const expectedValue = JSON.stringify(expected);\n         const resultValue = JSON.stringify(result);\n-        if (expectedValue != resultValue) {\n+        if (expectedValue !== resultValue) {\n             error_text.push(`${queryName}==> Different values for field \\`${fullPath}\\`:\\n` +\n                 `EXPECTED: \\`${expectedValue}\\`\\nRESULT:   \\`${resultValue}\\``);\n         }\n@@ -164,7 +164,7 @@ function runParser(query, expected, parseQuery, queryName) {\n     const error_text = [];\n     checkNeededFields(\"\", expected, error_text, queryName, null);\n     if (error_text.length === 0) {\n-        valueCheck('', expected, parseQuery(query), error_text, queryName);\n+        valueCheck(\"\", expected, parseQuery(query), error_text, queryName);\n     }\n     return error_text;\n }\n@@ -177,16 +177,16 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     const error_text = [];\n \n     for (const key in expected) {\n-        if (!expected.hasOwnProperty(key)) {\n+        if (!Object.prototype.hasOwnProperty.call(expected, key)) {\n             continue;\n         }\n-        if (!results.hasOwnProperty(key)) {\n-            error_text.push('==> Unknown key \"' + key + '\"');\n+        if (!Object.prototype.hasOwnProperty.call(results, key)) {\n+            error_text.push(\"==> Unknown key \\\"\" + key + \"\\\"\");\n             break;\n         }\n         const entry = expected[key];\n \n-        if (exact_check == true && entry.length !== results[key].length) {\n+        if (exact_check && entry.length !== results[key].length) {\n             error_text.push(queryName + \"==> Expected exactly \" + entry.length +\n                             \" results but found \" + results[key].length + \" in '\" + key + \"'\");\n         }\n@@ -268,7 +268,7 @@ function runCheck(loadedFile, key, callback) {\n function runChecks(testFile, doSearch, parseQuery) {\n     let checkExpected = false;\n     let checkParsed = false;\n-    let testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;';\n+    let testFileContent = readFile(testFile) + \"exports.QUERY = QUERY;\";\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n@@ -277,11 +277,11 @@ function runChecks(testFile, doSearch, parseQuery) {\n     }\n \n     if (testFileContent.indexOf(\"\\nconst EXPECTED\") !== -1) {\n-        testFileContent += 'exports.EXPECTED = EXPECTED;';\n+        testFileContent += \"exports.EXPECTED = EXPECTED;\";\n         checkExpected = true;\n     }\n     if (testFileContent.indexOf(\"\\nconst PARSED\") !== -1) {\n-        testFileContent += 'exports.PARSED = PARSED;';\n+        testFileContent += \"exports.PARSED = PARSED;\";\n         checkParsed = true;\n     }\n     if (!checkParsed && !checkExpected) {\n@@ -325,7 +325,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n     const searchWords = searchModule.initSearch(searchIndex.searchIndex);\n \n     return {\n-        doSearch: function (queryStr, filterCrate, currentCrate) {\n+        doSearch: function(queryStr, filterCrate, currentCrate) {\n             return searchModule.execQuery(searchModule.parseQuery(queryStr), searchWords,\n                 filterCrate, currentCrate);\n         },\n@@ -361,7 +361,7 @@ function parseOptions(args) {\n     };\n \n     for (let i = 0; i < args.length; ++i) {\n-        if (correspondences.hasOwnProperty(args[i])) {\n+        if (Object.prototype.hasOwnProperty.call(correspondences, args[i])) {\n             i += 1;\n             if (i >= args.length) {\n                 console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n@@ -405,17 +405,17 @@ function main(argv) {\n     );\n     let errors = 0;\n \n-    const doSearch = function (queryStr, filterCrate) {\n+    const doSearch = function(queryStr, filterCrate) {\n         return parseAndSearch.doSearch(queryStr, filterCrate, opts[\"crate_name\"]);\n     };\n \n     if (opts[\"test_file\"].length !== 0) {\n-        opts[\"test_file\"].forEach(function (file) {\n+        opts[\"test_file\"].forEach(file => {\n             process.stdout.write(`Testing ${file} ... `);\n             errors += runChecks(file, doSearch, parseAndSearch.parseQuery);\n         });\n     } else if (opts[\"test_folder\"].length !== 0) {\n-        fs.readdirSync(opts[\"test_folder\"]).forEach(function (file) {\n+        fs.readdirSync(opts[\"test_folder\"]).forEach(file => {\n             if (!file.endsWith(\".js\")) {\n                 return;\n             }"}]}