{"sha": "000d1db35131238190f3d62e7b100d71e31eb24c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGQxZGIzNTEzMTIzODE5MGYzZDYyZTdiMTAwZDcxZTMxZWIyNGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T15:03:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-04T15:03:02Z"}, "message": "Fix bench to work with relative paths", "tree": {"sha": "2ae0620ba990684cbd8609eeaca27b3809fbabc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae0620ba990684cbd8609eeaca27b3809fbabc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000d1db35131238190f3d62e7b100d71e31eb24c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000d1db35131238190f3d62e7b100d71e31eb24c", "html_url": "https://github.com/rust-lang/rust/commit/000d1db35131238190f3d62e7b100d71e31eb24c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000d1db35131238190f3d62e7b100d71e31eb24c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3a3c078209c74daef2f4ee8450185c69022578", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3a3c078209c74daef2f4ee8450185c69022578", "html_url": "https://github.com/rust-lang/rust/commit/1d3a3c078209c74daef2f4ee8450185c69022578"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "85c2e415a11e557eea96431aec7e46776d714c05", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/000d1db35131238190f3d62e7b100d71e31eb24c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000d1db35131238190f3d62e7b100d71e31eb24c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=000d1db35131238190f3d62e7b100d71e31eb24c", "patch": "@@ -3,13 +3,14 @@\n //! If run started args, we run the LSP server loop. With a subcommand, we do a\n //! one-time batch processing.\n \n+use std::{env, fmt::Write, path::PathBuf};\n+\n use anyhow::{bail, Result};\n use pico_args::Arguments;\n+use ra_db::AbsPathBuf;\n use ra_ssr::{SsrPattern, SsrRule};\n use rust_analyzer::cli::{BenchWhat, Position, Verbosity};\n \n-use std::{fmt::Write, path::PathBuf};\n-\n pub(crate) struct Args {\n     pub(crate) verbosity: Verbosity,\n     pub(crate) command: Command,\n@@ -240,7 +241,10 @@ ARGS:\n                 let complete_path: Option<Position> = matches.opt_value_from_str(\"--complete\")?;\n                 let goto_def_path: Option<Position> = matches.opt_value_from_str(\"--goto-def\")?;\n                 let what = match (highlight_path, complete_path, goto_def_path) {\n-                    (Some(path), None, None) => BenchWhat::Highlight { path: path.into() },\n+                    (Some(path), None, None) => {\n+                        let path = env::current_dir().unwrap().join(path);\n+                        BenchWhat::Highlight { path: AbsPathBuf::assert(path) }\n+                    }\n                     (None, Some(position), None) => BenchWhat::Complete(position),\n                     (None, None, Some(position)) => BenchWhat::GotoDef(position),\n                     _ => panic!("}, {"sha": "3730d346c10fc642ae8b7073b9229103c19e63eb", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/000d1db35131238190f3d62e7b100d71e31eb24c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000d1db35131238190f3d62e7b100d71e31eb24c/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=000d1db35131238190f3d62e7b100d71e31eb24c", "patch": "@@ -1,12 +1,6 @@\n //! Benchmark operations like highlighting or goto definition.\n \n-use std::{\n-    convert::TryFrom,\n-    path::{Path, PathBuf},\n-    str::FromStr,\n-    sync::Arc,\n-    time::Instant,\n-};\n+use std::{env, path::Path, str::FromStr, sync::Arc, time::Instant};\n \n use anyhow::{format_err, Result};\n use ra_db::{\n@@ -18,13 +12,13 @@ use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionConfig, FilePosit\n use crate::cli::{load_cargo::load_cargo, Verbosity};\n \n pub enum BenchWhat {\n-    Highlight { path: PathBuf },\n+    Highlight { path: AbsPathBuf },\n     Complete(Position),\n     GotoDef(Position),\n }\n \n pub struct Position {\n-    pub path: PathBuf,\n+    pub path: AbsPathBuf,\n     pub line: u32,\n     pub column: u32,\n }\n@@ -34,7 +28,9 @@ impl FromStr for Position {\n     fn from_str(s: &str) -> Result<Self> {\n         let (path_line, column) = rsplit_at_char(s, ':')?;\n         let (path, line) = rsplit_at_char(path_line, ':')?;\n-        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n+        let path = env::current_dir().unwrap().join(path);\n+        let path = AbsPathBuf::assert(path);\n+        Ok(Position { path, line: line.parse()?, column: column.parse()? })\n     }\n }\n \n@@ -62,8 +58,7 @@ pub fn analysis_bench(\n             BenchWhat::Highlight { path } => path,\n             BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => &pos.path,\n         };\n-        let path = AbsPathBuf::try_from(path.clone()).unwrap();\n-        let path = path.into();\n+        let path = path.clone().into();\n         vfs.file_id(&path).ok_or_else(|| format_err!(\"Can't find {}\", path))?\n     };\n "}]}