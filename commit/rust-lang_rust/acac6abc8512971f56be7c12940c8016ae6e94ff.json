{"sha": "acac6abc8512971f56be7c12940c8016ae6e94ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYWM2YWJjODUxMjk3MWY1NmJlN2MxMjk0MGM4MDE2YWU2ZTk0ZmY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-28T17:22:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-28T17:22:59Z"}, "message": "Parse, store and print type parameter kind constraints.", "tree": {"sha": "8f73d8814fcc53ce68fd23beca17e507b3a84f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f73d8814fcc53ce68fd23beca17e507b3a84f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acac6abc8512971f56be7c12940c8016ae6e94ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acac6abc8512971f56be7c12940c8016ae6e94ff", "html_url": "https://github.com/rust-lang/rust/commit/acac6abc8512971f56be7c12940c8016ae6e94ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acac6abc8512971f56be7c12940c8016ae6e94ff/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1836f59d9a769216161367cabe3269cb6c915cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1836f59d9a769216161367cabe3269cb6c915cd7", "html_url": "https://github.com/rust-lang/rust/commit/1836f59d9a769216161367cabe3269cb6c915cd7"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "a9a02b8a88feba7e44eee1da669de9db622285d3", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=acac6abc8512971f56be7c12940c8016ae6e94ff", "patch": "@@ -710,7 +710,7 @@ fn lookup_in_ty_params(name: &ident, ty_params: &ast::ty_param[]) ->\n    option::t[def] {\n     let i = 0u;\n     for tp: ast::ty_param  in ty_params {\n-        if str::eq(tp, name) { ret some(ast::def_ty_arg(i)); }\n+        if str::eq(tp.ident, name) { ret some(ast::def_ty_arg(i)); }\n         i += 1u;\n     }\n     ret none[def];\n@@ -1215,22 +1215,30 @@ fn mie_span(mie: &mod_index_entry) -> span {\n }\n \n fn check_item(e: &@env, i: &@ast::item, x: &(), v: &vt[()]) {\n+    fn typaram_names(tps: &ast::ty_param[]) -> ident[] {\n+        let x: ast::ident[] = ~[];\n+        for tp: ast::ty_param in tps { x += ~[tp.ident] }\n+        ret x;\n+    }\n     visit::visit_item(i, x, v);\n     alt i.node {\n       ast::item_fn(f, ty_params) {\n         check_fn(*e, i.span, f);\n-        ensure_unique(*e, i.span, ty_params, ident_id, \"type parameter\");\n+        ensure_unique(*e, i.span, typaram_names(ty_params),\n+                      ident_id, \"type parameter\");\n       }\n       ast::item_obj(ob, ty_params, _) {\n         fn field_name(field: &ast::obj_field) -> ident { ret field.ident; }\n         ensure_unique(*e, i.span, ob.fields, field_name, \"object field\");\n         for m: @ast::method  in ob.methods {\n             check_fn(*e, m.span, m.node.meth);\n         }\n-        ensure_unique(*e, i.span, ty_params, ident_id, \"type parameter\");\n+        ensure_unique(*e, i.span, typaram_names(ty_params),\n+                      ident_id, \"type parameter\");\n       }\n       ast::item_tag(_, ty_params) {\n-        ensure_unique(*e, i.span, ty_params, ident_id, \"type parameter\");\n+        ensure_unique(*e, i.span, typaram_names(ty_params),\n+                      ident_id, \"type parameter\");\n       }\n       _ { }\n     }"}, {"sha": "d5d99a886aa044567077d80612f83e669f971e0f", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=acac6abc8512971f56be7c12940c8016ae6e94ff", "patch": "@@ -31,7 +31,7 @@ type def_id = {crate: crate_num, node: node_id};\n const local_crate: crate_num = 0;\n fn local_def(id: node_id) -> def_id { ret {crate: local_crate, node: id}; }\n \n-type ty_param = ident;\n+type ty_param = {ident: ident, kind: kind};\n \n tag def {\n     def_fn(def_id, purity);"}, {"sha": "79728fade13d575a04bad18d39690e2e8558c196", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=acac6abc8512971f56be7c12940c8016ae6e94ff", "patch": "@@ -1696,7 +1696,14 @@ fn parse_block_tail(p: &parser, lo: uint) -> ast::blk {\n     ret spanned(lo, hi, bloc);\n }\n \n-fn parse_ty_param(p: &parser) -> ast::ty_param { ret parse_ident(p); }\n+fn parse_ty_param(p: &parser) -> ast::ty_param {\n+    let k = alt p.peek() {\n+      token::TILDE. { p.bump(); ast::kind_unique }\n+      token::AT. { p.bump(); ast::kind_shared }\n+      _ { ast::kind_pinned }\n+    };\n+    ret {ident: parse_ident(p), kind: k};\n+}\n \n fn parse_ty_params(p: &parser) -> ast::ty_param[] {\n     let ty_params: ast::ty_param[] = ~[];"}, {"sha": "db3586d9275705651a691e8dc9a7f38d574f5709", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=acac6abc8512971f56be7c12940c8016ae6e94ff", "patch": "@@ -1149,7 +1149,9 @@ fn print_alias(s: &ps, m: ast::mode) {\n fn print_type_params(s: &ps, params: &ast::ty_param[]) {\n     if ivec::len(params) > 0u {\n         word(s.s, \"[\");\n-        fn printParam(s: &ps, param: &ast::ty_param) { word(s.s, param); }\n+        fn printParam(s: &ps, param: &ast::ty_param) {\n+            word(s.s, param.ident);\n+        }\n         commasep(s, inconsistent, params, printParam);\n         word(s.s, \"]\");\n     }"}, {"sha": "34ebdadcd9567e8c2903ac428ca33909cafeadb8", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acac6abc8512971f56be7c12940c8016ae6e94ff/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=acac6abc8512971f56be7c12940c8016ae6e94ff", "patch": "@@ -0,0 +1,25 @@\n+fn p_foo[T](pinned: &T) {  }\n+fn s_foo[@T](shared: &T) {  }\n+fn u_foo[~T](unique: &T) {  }\n+\n+resource r(i: int) { }\n+\n+fn main() {\n+    // FIXME: passing resources doesn't work?\n+    //p_foo(r(10));\n+    //p_foo(@r(10));\n+    // FIXME: unique boxes not yet supported.\n+    // p_foo(~r(10));\n+    p_foo(@10);\n+    // p_foo(~10);\n+    p_foo(10);\n+\n+    //s_foo(@r(10));\n+    //s_foo(~r(10));\n+    s_foo(@10);\n+    //s_foo(~10);\n+    s_foo(10);\n+\n+    //u_foo(~10);\n+    u_foo(10);\n+}\n\\ No newline at end of file"}]}