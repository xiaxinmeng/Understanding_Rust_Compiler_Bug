{"sha": "629eba1d066ba4295baf4bfed41cae240c527af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOWViYTFkMDY2YmE0Mjk1YmFmNGJmZWQ0MWNhZTI0MGM1MjdhZjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-04T01:57:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-04T02:15:17Z"}, "message": "rustc: Make tag discriminants per-tag-ID, not per-tag-ID-and-subtypes", "tree": {"sha": "efab0439808ceeb46e3a10a55b44862f2f6f6d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efab0439808ceeb46e3a10a55b44862f2f6f6d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/629eba1d066ba4295baf4bfed41cae240c527af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/629eba1d066ba4295baf4bfed41cae240c527af5", "html_url": "https://github.com/rust-lang/rust/commit/629eba1d066ba4295baf4bfed41cae240c527af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/629eba1d066ba4295baf4bfed41cae240c527af5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4a85c7b583b75eade31d698ad9862f5f98e8857", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a85c7b583b75eade31d698ad9862f5f98e8857", "html_url": "https://github.com/rust-lang/rust/commit/b4a85c7b583b75eade31d698ad9862f5f98e8857"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "5bee0e11684242b090e7044a270d8edd812afc98", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/629eba1d066ba4295baf4bfed41cae240c527af5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629eba1d066ba4295baf4bfed41cae240c527af5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=629eba1d066ba4295baf4bfed41cae240c527af5", "patch": "@@ -60,10 +60,7 @@ type glue_fns = rec(ValueRef activate_glue,\n                     ValueRef bzero_glue,\n                     ValueRef vec_grow_glue);\n \n-type tag_info = rec(\n-    type_handle th,\n-    mutable @hashmap[ast.def_id,ValueRef] lldiscrims\n-);\n+type tag_info = rec(type_handle th);\n \n state type crate_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n@@ -78,6 +75,7 @@ state type crate_ctxt = rec(session.session sess,\n                             hashmap[ast.def_id,\n                                     @ast.native_item] native_items,\n                             hashmap[@ty.t, @tag_info] tags,\n+                            hashmap[ast.def_id, ValueRef] discrims,\n                             hashmap[ast.def_id, ValueRef] fn_pairs,\n                             hashmap[ast.def_id, ValueRef] consts,\n                             hashmap[ast.def_id,()] obj_methods,\n@@ -2962,9 +2960,7 @@ fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n                     } else {\n                         // Nullary variant.\n                         auto tag_ty = node_ann_type(cx.fcx.ccx, ann);\n-                        auto info = cx.fcx.ccx.tags.get(tag_ty);\n-                        check (info.lldiscrims.contains_key(vid));\n-                        auto lldiscrim_gv = info.lldiscrims.get(vid);\n+                        auto lldiscrim_gv = cx.fcx.ccx.discrims.get(vid);\n                         auto lldiscrim = cx.build.Load(lldiscrim_gv);\n \n                         auto alloc_result = alloc_ty(cx, tag_ty);\n@@ -4866,10 +4862,7 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             auto vi = new_def_hash[uint]();\n             auto navi = new_def_hash[uint]();\n \n-            auto info = @rec(\n-                th=mk_type_handle(),\n-                mutable lldiscrims=@new_def_hash[ValueRef]()\n-            );\n+            auto info = @rec(th=mk_type_handle());\n \n             cx.tags.insert(mk_plain_tag(tag_id), info);\n             cx.items.insert(tag_id, i);\n@@ -4980,8 +4973,6 @@ fn resolve_tag_types(@crate_ctxt cx, @ast.crate crate) {\n fn trans_constant(&@crate_ctxt cx, @ast.item it) -> @crate_ctxt {\n     alt (it.node) {\n         case (ast.item_tag(_, ?variants, _, ?tag_id)) {\n-            auto info = cx.tags.get(mk_plain_tag(tag_id));\n-\n             auto i = 0u;\n             auto n_variants = _vec.len[ast.variant](variants);\n             while (i < n_variants) {\n@@ -5000,7 +4991,7 @@ fn trans_constant(&@crate_ctxt cx, @ast.item it) -> @crate_ctxt {\n                 llvm.LLVMSetLinkage(discrim_gvar, lib.llvm.LLVMPrivateLinkage\n                                     as llvm.Linkage);\n \n-                info.lldiscrims.insert(variant.id, discrim_gvar);\n+                cx.discrims.insert(variant.id, discrim_gvar);\n \n                 i += 1u;\n             }\n@@ -5445,6 +5436,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output,\n                    items = new_def_hash[@ast.item](),\n                    native_items = new_def_hash[@ast.native_item](),\n                    tags = tags,\n+                   discrims = new_def_hash[ValueRef](),\n                    fn_pairs = new_def_hash[ValueRef](),\n                    consts = new_def_hash[ValueRef](),\n                    obj_methods = new_def_hash[()](),"}]}