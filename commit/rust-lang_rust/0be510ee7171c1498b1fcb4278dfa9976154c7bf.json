{"sha": "0be510ee7171c1498b1fcb4278dfa9976154c7bf", "node_id": "C_kwDOAAsO6NoAKDBiZTUxMGVlNzE3MWMxNDk4YjFmY2I0Mjc4ZGZhOTk3NjE1NGM3YmY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T04:19:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T04:20:17Z"}, "message": "RPITITs are not suggestable", "tree": {"sha": "cf7dbcfc79949655833ba6a14b64ccf23a1d1a7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf7dbcfc79949655833ba6a14b64ccf23a1d1a7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0be510ee7171c1498b1fcb4278dfa9976154c7bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0be510ee7171c1498b1fcb4278dfa9976154c7bf", "html_url": "https://github.com/rust-lang/rust/commit/0be510ee7171c1498b1fcb4278dfa9976154c7bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0be510ee7171c1498b1fcb4278dfa9976154c7bf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4046e4f3932991971cdb64915172899532aece", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4046e4f3932991971cdb64915172899532aece", "html_url": "https://github.com/rust-lang/rust/commit/ef4046e4f3932991971cdb64915172899532aece"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "638bde27d8c69dc8b60108440132fe9143fba155", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0be510ee7171c1498b1fcb4278dfa9976154c7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be510ee7171c1498b1fcb4278dfa9976154c7bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=0be510ee7171c1498b1fcb4278dfa9976154c7bf", "patch": "@@ -4,12 +4,13 @@ use std::ops::ControlFlow;\n \n use crate::ty::{\n     visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, InferConst, InferTy, Opaque,\n-    PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    PolyTraitPredicate, Projection, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::WherePredicate;\n use rustc_span::Span;\n@@ -443,7 +444,7 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match t.kind() {\n+        match *t.kind() {\n             Infer(InferTy::TyVar(_)) if self.infer_suggestable => {}\n \n             FnDef(..)\n@@ -458,9 +459,9 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n             }\n \n             Alias(Opaque, AliasTy { def_id, .. }) => {\n-                let parent = self.tcx.parent(*def_id);\n-                if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = self.tcx.def_kind(parent)\n-                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = self.tcx.type_of(parent).kind()\n+                let parent = self.tcx.parent(def_id);\n+                if let DefKind::TyAlias | DefKind::AssocTy = self.tcx.def_kind(parent)\n+                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = *self.tcx.type_of(parent).kind()\n                     && parent_opaque_def_id == def_id\n                 {\n                     // Okay\n@@ -469,6 +470,12 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 }\n             }\n \n+            Alias(Projection, AliasTy { def_id, .. }) => {\n+                if self.tcx.def_kind(def_id) != DefKind::AssocTy {\n+                    return ControlFlow::Break(());\n+                }\n+            }\n+\n             Param(param) => {\n                 // FIXME: It would be nice to make this not use string manipulation,\n                 // but it's pretty hard to do this, since `ty::ParamTy` is missing"}, {"sha": "78922b59b27b7cc8d91b34412c539b806384c87d", "filename": "tests/ui/async-await/in-trait/missing-send-bound.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0be510ee7171c1498b1fcb4278dfa9976154c7bf/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be510ee7171c1498b1fcb4278dfa9976154c7bf/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs?ref=0be510ee7171c1498b1fcb4278dfa9976154c7bf", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait Foo {\n+    async fn bar();\n+}\n+\n+async fn test<T: Foo>() {\n+    T::bar().await;\n+}\n+\n+fn test2<T: Foo>() {\n+    assert_is_send(test::<T>());\n+    //~^ ERROR future cannot be sent between threads safely\n+}\n+\n+fn assert_is_send(_: impl Send) {}\n+\n+fn main() {}"}, {"sha": "5cedf3ddb0f681804c8ec333b7808ed1908fddcb", "filename": "tests/ui/async-await/in-trait/missing-send-bound.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0be510ee7171c1498b1fcb4278dfa9976154c7bf/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0be510ee7171c1498b1fcb4278dfa9976154c7bf/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.stderr?ref=0be510ee7171c1498b1fcb4278dfa9976154c7bf", "patch": "@@ -0,0 +1,29 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing-send-bound.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/missing-send-bound.rs:15:20\n+   |\n+LL |     assert_is_send(test::<T>());\n+   |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/missing-send-bound.rs:11:5\n+   |\n+LL |     T::bar().await;\n+   |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\n+note: required by a bound in `assert_is_send`\n+  --> $DIR/missing-send-bound.rs:19:27\n+   |\n+LL | fn assert_is_send(_: impl Send) {}\n+   |                           ^^^^ required by this bound in `assert_is_send`\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}