{"sha": "b1bb5d662c394cea82ebb212373015ef4684b551", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYmI1ZDY2MmMzOTRjZWE4MmViYjIxMjM3MzAxNWVmNDY4NGI1NTE=", "commit": {"author": {"name": "Dr. Chat", "email": "arkolbed@gmail.com", "date": "2021-04-30T04:03:08Z"}, "committer": {"name": "Dr. Chat", "email": "arkolbed@gmail.com", "date": "2021-05-12T00:04:16Z"}, "message": "Add initial asm!() support for PowerPC\n\nThis includes GPRs and FPRs only", "tree": {"sha": "2060e007235ad6f81eb9411bb748f2b5bedf0e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2060e007235ad6f81eb9411bb748f2b5bedf0e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1bb5d662c394cea82ebb212373015ef4684b551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1bb5d662c394cea82ebb212373015ef4684b551", "html_url": "https://github.com/rust-lang/rust/commit/b1bb5d662c394cea82ebb212373015ef4684b551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1bb5d662c394cea82ebb212373015ef4684b551/comments", "author": {"login": "DrChat", "id": 2402369, "node_id": "MDQ6VXNlcjI0MDIzNjk=", "avatar_url": "https://avatars.githubusercontent.com/u/2402369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrChat", "html_url": "https://github.com/DrChat", "followers_url": "https://api.github.com/users/DrChat/followers", "following_url": "https://api.github.com/users/DrChat/following{/other_user}", "gists_url": "https://api.github.com/users/DrChat/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrChat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrChat/subscriptions", "organizations_url": "https://api.github.com/users/DrChat/orgs", "repos_url": "https://api.github.com/users/DrChat/repos", "events_url": "https://api.github.com/users/DrChat/events{/privacy}", "received_events_url": "https://api.github.com/users/DrChat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrChat", "id": 2402369, "node_id": "MDQ6VXNlcjI0MDIzNjk=", "avatar_url": "https://avatars.githubusercontent.com/u/2402369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrChat", "html_url": "https://github.com/DrChat", "followers_url": "https://api.github.com/users/DrChat/followers", "following_url": "https://api.github.com/users/DrChat/following{/other_user}", "gists_url": "https://api.github.com/users/DrChat/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrChat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrChat/subscriptions", "organizations_url": "https://api.github.com/users/DrChat/orgs", "repos_url": "https://api.github.com/users/DrChat/repos", "events_url": "https://api.github.com/users/DrChat/events{/privacy}", "received_events_url": "https://api.github.com/users/DrChat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c029265465301fe9cb3960ce2a5da6c99b8dcf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c029265465301fe9cb3960ce2a5da6c99b8dcf2", "html_url": "https://github.com/rust-lang/rust/commit/5c029265465301fe9cb3960ce2a5da6c99b8dcf2"}], "stats": {"total": 357, "additions": 356, "deletions": 1}, "files": [{"sha": "ea08052a9d0e22957932b6d6b60cf7409cbefadc", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb5d662c394cea82ebb212373015ef4684b551/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb5d662c394cea82ebb212373015ef4684b551/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=b1bb5d662c394cea82ebb212373015ef4684b551", "patch": "@@ -283,6 +283,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 }\n                 InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {}\n                 InlineAsmArch::Nvptx64 => {}\n+                InlineAsmArch::PowerPC => {}\n                 InlineAsmArch::Hexagon => {}\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n                 InlineAsmArch::SpirV => {}\n@@ -540,6 +541,9 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => \"h\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => \"r\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => \"l\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => \"b\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg) => \"r\",\n@@ -590,6 +594,7 @@ fn modifier_to_llvm(\n         InlineAsmRegClass::Hexagon(_) => None,\n         InlineAsmRegClass::Mips(_) => None,\n         InlineAsmRegClass::Nvptx(_) => None,\n+        InlineAsmRegClass::PowerPC(_) => None,\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)\n         | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => None,\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)\n@@ -651,6 +656,9 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => cx.type_i16(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => cx.type_i32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => cx.type_i64(),\n+        InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => cx.type_i32(),\n+        InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => cx.type_f64(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)"}, {"sha": "98aee1996329d3b56b7fef1dad0f88dcb04a1899", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb5d662c394cea82ebb212373015ef4684b551/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb5d662c394cea82ebb212373015ef4684b551/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b1bb5d662c394cea82ebb212373015ef4684b551", "patch": "@@ -947,6 +947,7 @@ symbols! {\n         reg64,\n         reg_abcd,\n         reg_byte,\n+        reg_nonzero,\n         reg_thumb,\n         register_attr,\n         register_tool,"}, {"sha": "f12debb5a3412e277f6c0ca043ac240d94af8c44", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb5d662c394cea82ebb212373015ef4684b551/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb5d662c394cea82ebb212373015ef4684b551/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=b1bb5d662c394cea82ebb212373015ef4684b551", "patch": "@@ -154,6 +154,7 @@ mod arm;\n mod hexagon;\n mod mips;\n mod nvptx;\n+mod powerpc;\n mod riscv;\n mod spirv;\n mod wasm;\n@@ -164,6 +165,7 @@ pub use arm::{ArmInlineAsmReg, ArmInlineAsmRegClass};\n pub use hexagon::{HexagonInlineAsmReg, HexagonInlineAsmRegClass};\n pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n+pub use powerpc::{PowerPCInlineAsmReg, PowerPCInlineAsmRegClass};\n pub use riscv::{RiscVInlineAsmReg, RiscVInlineAsmRegClass};\n pub use spirv::{SpirVInlineAsmReg, SpirVInlineAsmRegClass};\n pub use wasm::{WasmInlineAsmReg, WasmInlineAsmRegClass};\n@@ -181,6 +183,7 @@ pub enum InlineAsmArch {\n     Hexagon,\n     Mips,\n     Mips64,\n+    PowerPC,\n     SpirV,\n     Wasm32,\n }\n@@ -197,6 +200,7 @@ impl FromStr for InlineAsmArch {\n             \"riscv32\" => Ok(Self::RiscV32),\n             \"riscv64\" => Ok(Self::RiscV64),\n             \"nvptx64\" => Ok(Self::Nvptx64),\n+            \"powerpc\" => Ok(Self::PowerPC),\n             \"hexagon\" => Ok(Self::Hexagon),\n             \"mips\" => Ok(Self::Mips),\n             \"mips64\" => Ok(Self::Mips64),\n@@ -225,6 +229,7 @@ pub enum InlineAsmReg {\n     AArch64(AArch64InlineAsmReg),\n     RiscV(RiscVInlineAsmReg),\n     Nvptx(NvptxInlineAsmReg),\n+    PowerPC(PowerPCInlineAsmReg),\n     Hexagon(HexagonInlineAsmReg),\n     Mips(MipsInlineAsmReg),\n     SpirV(SpirVInlineAsmReg),\n@@ -240,6 +245,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.name(),\n             Self::AArch64(r) => r.name(),\n             Self::RiscV(r) => r.name(),\n+            Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n             Self::Err => \"<reg>\",\n@@ -252,6 +258,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => InlineAsmRegClass::Arm(r.reg_class()),\n             Self::AArch64(r) => InlineAsmRegClass::AArch64(r.reg_class()),\n             Self::RiscV(r) => InlineAsmRegClass::RiscV(r.reg_class()),\n+            Self::PowerPC(r) => InlineAsmRegClass::PowerPC(r.reg_class()),\n             Self::Hexagon(r) => InlineAsmRegClass::Hexagon(r.reg_class()),\n             Self::Mips(r) => InlineAsmRegClass::Mips(r.reg_class()),\n             Self::Err => InlineAsmRegClass::Err,\n@@ -283,6 +290,9 @@ impl InlineAsmReg {\n             InlineAsmArch::Nvptx64 => {\n                 Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n+            InlineAsmArch::PowerPC => {\n+                Self::PowerPC(PowerPCInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n             InlineAsmArch::Hexagon => {\n                 Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n@@ -311,6 +321,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.emit(out, arch, modifier),\n             Self::AArch64(r) => r.emit(out, arch, modifier),\n             Self::RiscV(r) => r.emit(out, arch, modifier),\n+            Self::PowerPC(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n             Self::Mips(r) => r.emit(out, arch, modifier),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n@@ -323,6 +334,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.overlapping_regs(|r| cb(Self::Arm(r))),\n             Self::AArch64(_) => cb(self),\n             Self::RiscV(_) => cb(self),\n+            Self::PowerPC(_) => cb(self),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n             Self::Mips(_) => cb(self),\n             Self::Err => unreachable!(\"Use of InlineAsmReg::Err\"),\n@@ -348,6 +360,7 @@ pub enum InlineAsmRegClass {\n     AArch64(AArch64InlineAsmRegClass),\n     RiscV(RiscVInlineAsmRegClass),\n     Nvptx(NvptxInlineAsmRegClass),\n+    PowerPC(PowerPCInlineAsmRegClass),\n     Hexagon(HexagonInlineAsmRegClass),\n     Mips(MipsInlineAsmRegClass),\n     SpirV(SpirVInlineAsmRegClass),\n@@ -364,6 +377,7 @@ impl InlineAsmRegClass {\n             Self::AArch64(r) => r.name(),\n             Self::RiscV(r) => r.name(),\n             Self::Nvptx(r) => r.name(),\n+            Self::PowerPC(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n             Self::Mips(r) => r.name(),\n             Self::SpirV(r) => r.name(),\n@@ -382,6 +396,7 @@ impl InlineAsmRegClass {\n             Self::AArch64(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::AArch64),\n             Self::RiscV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::RiscV),\n             Self::Nvptx(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Nvptx),\n+            Self::PowerPC(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::PowerPC),\n             Self::Hexagon(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Hexagon),\n             Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n             Self::SpirV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::SpirV),\n@@ -407,6 +422,7 @@ impl InlineAsmRegClass {\n             Self::AArch64(r) => r.suggest_modifier(arch, ty),\n             Self::RiscV(r) => r.suggest_modifier(arch, ty),\n             Self::Nvptx(r) => r.suggest_modifier(arch, ty),\n+            Self::PowerPC(r) => r.suggest_modifier(arch, ty),\n             Self::Hexagon(r) => r.suggest_modifier(arch, ty),\n             Self::Mips(r) => r.suggest_modifier(arch, ty),\n             Self::SpirV(r) => r.suggest_modifier(arch, ty),\n@@ -428,6 +444,7 @@ impl InlineAsmRegClass {\n             Self::AArch64(r) => r.default_modifier(arch),\n             Self::RiscV(r) => r.default_modifier(arch),\n             Self::Nvptx(r) => r.default_modifier(arch),\n+            Self::PowerPC(r) => r.default_modifier(arch),\n             Self::Hexagon(r) => r.default_modifier(arch),\n             Self::Mips(r) => r.default_modifier(arch),\n             Self::SpirV(r) => r.default_modifier(arch),\n@@ -448,6 +465,7 @@ impl InlineAsmRegClass {\n             Self::AArch64(r) => r.supported_types(arch),\n             Self::RiscV(r) => r.supported_types(arch),\n             Self::Nvptx(r) => r.supported_types(arch),\n+            Self::PowerPC(r) => r.supported_types(arch),\n             Self::Hexagon(r) => r.supported_types(arch),\n             Self::Mips(r) => r.supported_types(arch),\n             Self::SpirV(r) => r.supported_types(arch),\n@@ -467,6 +485,7 @@ impl InlineAsmRegClass {\n                 Self::RiscV(RiscVInlineAsmRegClass::parse(arch, name)?)\n             }\n             InlineAsmArch::Nvptx64 => Self::Nvptx(NvptxInlineAsmRegClass::parse(arch, name)?),\n+            InlineAsmArch::PowerPC => Self::PowerPC(PowerPCInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Hexagon => Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?),\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n                 Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?)\n@@ -485,6 +504,7 @@ impl InlineAsmRegClass {\n             Self::AArch64(r) => r.valid_modifiers(arch),\n             Self::RiscV(r) => r.valid_modifiers(arch),\n             Self::Nvptx(r) => r.valid_modifiers(arch),\n+            Self::PowerPC(r) => r.valid_modifiers(arch),\n             Self::Hexagon(r) => r.valid_modifiers(arch),\n             Self::Mips(r) => r.valid_modifiers(arch),\n             Self::SpirV(r) => r.valid_modifiers(arch),\n@@ -633,6 +653,11 @@ pub fn allocatable_registers(\n             nvptx::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n+        InlineAsmArch::PowerPC => {\n+            let mut map = powerpc::regclass_map();\n+            powerpc::fill_reg_map(arch, has_feature, target, &mut map);\n+            map\n+        }\n         InlineAsmArch::Hexagon => {\n             let mut map = hexagon::regclass_map();\n             hexagon::fill_reg_map(arch, has_feature, target, &mut map);"}, {"sha": "b254e5f3aaa92b7516b5bf5f9d7a95fc8dfd8c27", "filename": "compiler/rustc_target/src/asm/powerpc.rs", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb5d662c394cea82ebb212373015ef4684b551/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb5d662c394cea82ebb212373015ef4684b551/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs?ref=b1bb5d662c394cea82ebb212373015ef4684b551", "patch": "@@ -0,0 +1,146 @@\n+use super::{InlineAsmArch, InlineAsmType};\n+use rustc_macros::HashStable_Generic;\n+use std::fmt;\n+\n+def_reg_class! {\n+    PowerPC PowerPCInlineAsmRegClass {\n+        reg,\n+        reg_nonzero,\n+        freg,\n+    }\n+}\n+\n+impl PowerPCInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: super::InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        _arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+        match self {\n+            Self::reg | Self::reg_nonzero => types! { _: I8, I16, I32; },\n+            Self::freg => types! { _: F32, F64; },\n+        }\n+    }\n+}\n+\n+def_regs! {\n+    PowerPC PowerPCInlineAsmReg PowerPCInlineAsmRegClass {\n+        r0: reg = [\"r0\", \"0\"],\n+        r3: reg, reg_nonzero = [\"r3\", \"3\"],\n+        r4: reg, reg_nonzero = [\"r4\", \"4\"],\n+        r5: reg, reg_nonzero = [\"r5\", \"5\"],\n+        r6: reg, reg_nonzero = [\"r6\", \"6\"],\n+        r7: reg, reg_nonzero = [\"r7\", \"7\"],\n+        r8: reg, reg_nonzero = [\"r8\", \"8\"],\n+        r9: reg, reg_nonzero = [\"r9\", \"9\"],\n+        r10: reg, reg_nonzero = [\"r10\", \"10\"],\n+        r11: reg, reg_nonzero = [\"r11\", \"11\"],\n+        r12: reg, reg_nonzero = [\"r12\", \"12\"],\n+        r14: reg, reg_nonzero = [\"r14\", \"14\"],\n+        r15: reg, reg_nonzero = [\"r15\", \"15\"],\n+        r16: reg, reg_nonzero = [\"r16\", \"16\"],\n+        r17: reg, reg_nonzero = [\"r17\", \"17\"],\n+        r18: reg, reg_nonzero = [\"r18\", \"18\"],\n+        r19: reg, reg_nonzero = [\"r19\", \"19\"],\n+        r20: reg, reg_nonzero = [\"r20\", \"20\"],\n+        r21: reg, reg_nonzero = [\"r21\", \"21\"],\n+        r22: reg, reg_nonzero = [\"r22\", \"22\"],\n+        r23: reg, reg_nonzero = [\"r23\", \"23\"],\n+        r24: reg, reg_nonzero = [\"r24\", \"24\"],\n+        r25: reg, reg_nonzero = [\"r25\", \"25\"],\n+        r26: reg, reg_nonzero = [\"r26\", \"26\"],\n+        r27: reg, reg_nonzero = [\"r27\", \"27\"],\n+        r28: reg, reg_nonzero = [\"r28\", \"28\"],\n+        f0: freg = [\"f0\", \"fr0\"],\n+        f1: freg = [\"f1\", \"fr1\"],\n+        f2: freg = [\"f2\", \"fr2\"],\n+        f3: freg = [\"f3\", \"fr3\"],\n+        f4: freg = [\"f4\", \"fr4\"],\n+        f5: freg = [\"f5\", \"fr5\"],\n+        f6: freg = [\"f6\", \"fr6\"],\n+        f7: freg = [\"f7\", \"fr7\"],\n+        f8: freg = [\"f8\", \"fr8\"],\n+        f9: freg = [\"f9\", \"fr9\"],\n+        f10: freg = [\"f10\", \"fr10\"],\n+        f11: freg = [\"f11\", \"fr11\"],\n+        f12: freg = [\"f12\", \"fr12\"],\n+        f13: freg = [\"f13\", \"fr13\"],\n+        f14: freg = [\"f14\", \"fr14\"],\n+        f15: freg = [\"f15\", \"fr15\"],\n+        f16: freg = [\"f16\", \"fr16\"],\n+        f17: freg = [\"f17\", \"fr17\"],\n+        f18: freg = [\"f18\", \"fr18\"],\n+        f19: freg = [\"f19\", \"fr19\"],\n+        f20: freg = [\"f20\", \"fr20\"],\n+        f21: freg = [\"f21\", \"fr21\"],\n+        f22: freg = [\"f22\", \"fr22\"],\n+        f23: freg = [\"f23\", \"fr23\"],\n+        f24: freg = [\"f24\", \"fr24\"],\n+        f25: freg = [\"f25\", \"fr25\"],\n+        f26: freg = [\"f26\", \"fr26\"],\n+        f27: freg = [\"f27\", \"fr27\"],\n+        f28: freg = [\"f28\", \"fr28\"],\n+        f29: freg = [\"f29\", \"fr29\"],\n+        f30: freg = [\"f30\", \"fr30\"],\n+        f31: freg = [\"f31\", \"fr31\"],\n+        #error = [\"r1\", \"1\", \"sp\"] =>\n+            \"the stack pointer cannot be used as an operand for inline asm\",\n+        #error = [\"r2\", \"2\"] =>\n+            \"r2 is a system reserved register and cannot be used as an operand for inline asm\",\n+        #error = [\"r13\", \"13\"] =>\n+            \"r13 is a system reserved register and cannot be used as an operand for inline asm\",\n+        #error = [\"r29\", \"29\"] =>\n+            \"r29 is used internally by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"r30\", \"30\"] =>\n+            \"r30 is used internally by LLVM and cannot be used as an operand for inline asm\",\n+        #error = [\"r31\", \"31\", \"fp\"] =>\n+            \"the frame pointer cannot be used as an operand for inline asm\",\n+        #error = [\"lr\"] =>\n+            \"the link register cannot be used as an operand for inline asm\",\n+        #error = [\"ctr\"] =>\n+            \"the counter register cannot be used as an operand for inline asm\",\n+        #error = [\"vrsave\"] =>\n+            \"the vrsave register cannot be used as an operand for inline asm\",\n+    }\n+}\n+\n+impl PowerPCInlineAsmReg {\n+    pub fn emit(\n+        self,\n+        out: &mut dyn fmt::Write,\n+        _arch: InlineAsmArch,\n+        _modifier: Option<char>,\n+    ) -> fmt::Result {\n+        // Strip off the leading prefix.\n+        if self as u32 <= Self::r28 as u32 {\n+            let index = self as u32 - Self::r28 as u32;\n+            write!(out, \"{}\", index)\n+        } else if self as u32 >= Self::f0 as u32 && self as u32 <= Self::f31 as u32 {\n+            let index = self as u32 - Self::f31 as u32;\n+            write!(out, \"{}\", index)\n+        } else {\n+            unreachable!()\n+        }\n+    }\n+\n+    pub fn overlapping_regs(self, mut _cb: impl FnMut(PowerPCInlineAsmReg)) {}\n+}"}, {"sha": "107fc6d42cf8ecf298b4dc5e8fbf890bbfbcc9e4", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb5d662c394cea82ebb212373015ef4684b551/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb5d662c394cea82ebb212373015ef4684b551/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=b1bb5d662c394cea82ebb212373015ef4684b551", "patch": "@@ -26,6 +26,7 @@ Inline assembly is currently supported on the following architectures:\n - AArch64\n - RISC-V\n - NVPTX\n+- PowerPC\n - Hexagon\n - MIPS32r2 and MIPS64r2\n - wasm32\n@@ -459,7 +460,7 @@ options := \"options(\" option *[\",\" option] [\",\"] \")\"\n asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" options] [\",\"] \")\"\n ```\n \n-The macro will initially be supported only on ARM, AArch64, Hexagon, x86, x86-64 and RISC-V targets. Support for more targets may be added in the future. The compiler will emit an error if `asm!` is used on an unsupported target.\n+The macro will initially be supported only on ARM, AArch64, Hexagon, PowerPC, x86, x86-64 and RISC-V targets. Support for more targets may be added in the future. The compiler will emit an error if `asm!` is used on an unsupported target.\n \n [format-syntax]: https://doc.rust-lang.org/std/fmt/#syntax\n \n@@ -565,6 +566,9 @@ Here is the list of currently supported register classes:\n | RISC-V | `reg` | `x1`, `x[5-7]`, `x[9-15]`, `x[16-31]` (non-RV32E) | `r` |\n | RISC-V | `freg` | `f[0-31]` | `f` |\n | Hexagon | `reg` | `r[0-28]` | `r` |\n+| PowerPC | `reg` | `r[0-31]` | `r` |\n+| PowerPC | `reg_nonzero` | | `r[1-31]` | `b` |\n+| PowerPC | `freg` | `f[0-31]` | `f` |\n | wasm32 | `local` | None\\* | `r` |\n \n > **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n@@ -607,6 +611,9 @@ Each register class has constraints on which value types they can be used with.\n | RISC-V | `freg` | `f` | `f32` |\n | RISC-V | `freg` | `d` | `f64` |\n | Hexagon | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n+| PowerPC | `reg` | None | `i8`, `i16`, `i32` |\n+| PowerPC | `reg_nonzero` | None | `i8`, `i16`, `i32` |\n+| PowerPC | `freg` | None | `f32`, `f64` |\n | wasm32 | `local` | None | `i8` `i16` `i32` `i64` `f32` `f64` |\n \n > **Note**: For the purposes of the above table pointers, function pointers and `isize`/`usize` are treated as the equivalent integer type (`i16`/`i32`/`i64` depending on the target).\n@@ -744,6 +751,9 @@ The supported modifiers are a subset of LLVM's (and GCC's) [asm template argumen\n | RISC-V | `reg` | None | `x1` | None |\n | RISC-V | `freg` | None | `f0` | None |\n | Hexagon | `reg` | None | `r0` | None |\n+| PowerPC | `reg` | None | `0` | None |\n+| PowerPC | `reg_nonzero` | None | `3` | `b` |\n+| PowerPC | `freg` | None | `0` | None |\n \n > Notes:\n > - on ARM `e` / `f`: this prints the low or high doubleword register name of a NEON quad (128-bit) register."}, {"sha": "26c891392f2db751824a584d664a9b878549067c", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/b1bb5d662c394cea82ebb212373015ef4684b551/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1bb5d662c394cea82ebb212373015ef4684b551/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=b1bb5d662c394cea82ebb212373015ef4684b551", "patch": "@@ -0,0 +1,165 @@\n+// min-llvm-version: 10.0.1\n+// assembly-output: emit-asm\n+// compile-flags: --target powerpc-unknown-linux-gnu\n+// needs-llvm-components: powerpc\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *const i32;\n+\n+impl Copy for i8 {}\n+impl Copy for u8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for i64 {}\n+impl Copy for f32 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// Hack to avoid function merging\n+extern \"Rust\" {\n+    fn dont_merge(s: &str);\n+}\n+\n+macro_rules! check { ($func:ident, $ty:ty, $class:ident, $mov:literal) => {\n+    #[no_mangle]\n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!($func));\n+\n+        let y;\n+        asm!(concat!($mov,\" {}, {}\"), out($class) y, in($class) x);\n+        y\n+    }\n+};}\n+\n+macro_rules! check_reg { ($func:ident, $ty:ty, $rego:tt, $regc:tt, $mov:literal) => {\n+    #[no_mangle]\n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!($func));\n+\n+        let y;\n+        asm!(concat!($mov, \" \", $rego, \", \", $rego), lateout($regc) y, in($regc) x);\n+        y\n+    }\n+};}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// CHECK: mr {{[0-9]+}}, {{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8, i8, reg, \"mr\");\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// CHECK: mr {{[0-9]+}}, {{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16, i16, reg, \"mr\");\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// CHECK: mr {{[0-9]+}}, {{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32, i32, reg, \"mr\");\n+\n+// CHECK-LABEL: reg_i8_nz:\n+// CHECK: #APP\n+// CHECK: mr {{[0-9]+}}, {{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8_nz, i8, reg_nonzero, \"mr\");\n+\n+// CHECK-LABEL: reg_i16_nz:\n+// CHECK: #APP\n+// CHECK: mr {{[0-9]+}}, {{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16_nz, i16, reg_nonzero, \"mr\");\n+\n+// CHECK-LABEL: reg_i32_nz:\n+// CHECK: #APP\n+// CHECK: mr {{[0-9]+}}, {{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32_nz, i32, reg_nonzero, \"mr\");\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: #APP\n+// CHECK: fmr {{[0-9]+}}, {{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f32, f32, freg, \"fmr\");\n+\n+// CHECK-LABEL: reg_f64:\n+// CHECK: #APP\n+// CHECK: fmr {{[0-9]+}}, {{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f64, f64, freg, \"fmr\");\n+\n+// CHECK-LABEL: reg_i8_r0:\n+// CHECK: #APP\n+// CHECK: mr 0, 0\n+// CHECK: #NO_APP\n+check_reg!(reg_i8_r0, i8, \"0\", \"0\", \"mr\");\n+\n+// CHECK-LABEL: reg_i16_r0:\n+// CHECK: #APP\n+// CHECK: mr 0, 0\n+// CHECK: #NO_APP\n+check_reg!(reg_i16_r0, i16, \"0\", \"0\", \"mr\");\n+\n+// CHECK-LABEL: reg_i32_r0:\n+// CHECK: #APP\n+// CHECK: mr 0, 0\n+// CHECK: #NO_APP\n+check_reg!(reg_i32_r0, i32, \"0\", \"0\", \"mr\");\n+\n+// CHECK-LABEL: reg_i8_r18:\n+// CHECK: #APP\n+// CHECK: mr 18, 18\n+// CHECK: #NO_APP\n+check_reg!(reg_i8_r18, i8, \"18\", \"18\", \"mr\");\n+\n+// CHECK-LABEL: reg_i16_r18:\n+// CHECK: #APP\n+// CHECK: mr 18, 18\n+// CHECK: #NO_APP\n+check_reg!(reg_i16_r18, i16, \"18\", \"18\", \"mr\");\n+\n+// CHECK-LABEL: reg_i32_r18:\n+// CHECK: #APP\n+// CHECK: mr 18, 18\n+// CHECK: #NO_APP\n+check_reg!(reg_i32_r18, i32, \"18\", \"18\", \"mr\");\n+\n+// CHECK-LABEL: reg_f32_f0:\n+// CHECK: #APP\n+// CHECK: fmr 0, 0\n+// CHECK: #NO_APP\n+check_reg!(reg_f32_f0, f32, \"0\", \"f0\", \"fmr\");\n+\n+// CHECK-LABEL: reg_f64_f0:\n+// CHECK: #APP\n+// CHECK: fmr 0, 0\n+// CHECK: #NO_APP\n+check_reg!(reg_f64_f0, f64, \"0\", \"f0\", \"fmr\");"}]}