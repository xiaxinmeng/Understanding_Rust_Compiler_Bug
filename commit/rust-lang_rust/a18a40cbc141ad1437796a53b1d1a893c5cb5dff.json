{"sha": "a18a40cbc141ad1437796a53b1d1a893c5cb5dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGE0MGNiYzE0MWFkMTQzNzc5NmE1M2IxZDFhODkzYzVjYjVkZmY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-21T14:19:01Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-08-21T14:19:01Z"}, "message": "Add indent to macro we could not format", "tree": {"sha": "00d34675243e4b8fc63fe87fe5a8cbf0a41e099b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00d34675243e4b8fc63fe87fe5a8cbf0a41e099b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18a40cbc141ad1437796a53b1d1a893c5cb5dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18a40cbc141ad1437796a53b1d1a893c5cb5dff", "html_url": "https://github.com/rust-lang/rust/commit/a18a40cbc141ad1437796a53b1d1a893c5cb5dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18a40cbc141ad1437796a53b1d1a893c5cb5dff/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e171836c669be2f78e72a1342ce8a4b55761eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e171836c669be2f78e72a1342ce8a4b55761eb0", "html_url": "https://github.com/rust-lang/rust/commit/7e171836c669be2f78e72a1342ce8a4b55761eb0"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "b1f740e6a87ee1d7af5effa85949a8377bb2de21", "filename": "src/macros.rs", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a18a40cbc141ad1437796a53b1d1a893c5cb5dff/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18a40cbc141ad1437796a53b1d1a893c5cb5dff/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=a18a40cbc141ad1437796a53b1d1a893c5cb5dff", "patch": "@@ -19,6 +19,8 @@\n // List-like invocations with parentheses will be formatted as function calls,\n // and those with brackets will be formatted as array literals.\n \n+use std::iter::repeat;\n+\n use syntax::ast;\n use syntax::codemap::BytePos;\n use syntax::parse::new_parser_from_tts;\n@@ -27,7 +29,7 @@ use syntax::symbol;\n use syntax::tokenstream::TokenStream;\n use syntax::util::ThinVec;\n \n-use Shape;\n+use {Indent, Shape};\n use codemap::SpanUtils;\n use comment::{contains_comment, FindUncommented};\n use expr::{rewrite_array, rewrite_call_inner};\n@@ -116,14 +118,14 @@ pub fn rewrite_macro(\n                 Ok(expr) => {\n                     // Recovered errors.\n                     if context.parse_session.span_diagnostic.has_errors() {\n-                        return Some(context.snippet(mac.span));\n+                        return indent_macro_snippet(&context.snippet(mac.span), shape.indent);\n                     }\n \n                     expr\n                 }\n                 Err(mut e) => {\n                     e.cancel();\n-                    return Some(context.snippet(mac.span));\n+                    return indent_macro_snippet(&context.snippet(mac.span), shape.indent);\n                 }\n             };\n \n@@ -242,7 +244,7 @@ pub fn rewrite_macro(\n         }\n         MacroStyle::Braces => {\n             // Skip macro invocations with braces, for now.\n-            None\n+            indent_macro_snippet(&context.snippet(mac.span), shape.indent)\n         }\n     }\n }\n@@ -280,3 +282,58 @@ fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> MacroStyle {\n         MacroStyle::Braces\n     }\n }\n+\n+/// Indent each line according to the specified `indent`.\n+/// e.g.\n+/// ```rust\n+/// foo!{\n+/// x,\n+/// y,\n+/// foo(\n+///     a,\n+///     b,\n+///     c,\n+/// ),\n+/// }\n+/// ```\n+/// will become\n+/// ```rust\n+/// foo!{\n+///     x,\n+///     y,\n+///     foo(\n+///         a,\n+///         b,\n+///         c,\n+//      ),\n+/// }\n+/// ```\n+fn indent_macro_snippet(macro_str: &str, indent: Indent) -> Option<String> {\n+    let min_prefix_space_width =\n+        try_opt!(macro_str.lines().skip(1).map(get_prefix_space_width).min());\n+\n+    let mut lines = macro_str.lines();\n+    let first_line = try_opt!(lines.next());\n+\n+    Some(\n+        String::from(first_line) + \"\\n\" +\n+            &lines\n+                .map(|line| {\n+                    let new_indent_width = indent.width() +\n+                        get_prefix_space_width(line)\n+                            .checked_sub(min_prefix_space_width)\n+                            .unwrap_or(0);\n+                    repeat_white_space(new_indent_width) + line.trim()\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\"\\n\"),\n+    )\n+}\n+\n+fn get_prefix_space_width(s: &str) -> usize {\n+    s.chars().position(|c| c != ' ').unwrap_or(0)\n+}\n+\n+fn repeat_white_space(ws_count: usize) -> String {\n+    repeat(\" \").take(ws_count).collect::<String>()\n+}"}, {"sha": "d8e6efe9199c1bfd60fa6116abd2ae9cba19c36d", "filename": "tests/source/macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a18a40cbc141ad1437796a53b1d1a893c5cb5dff/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18a40cbc141ad1437796a53b1d1a893c5cb5dff/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=a18a40cbc141ad1437796a53b1d1a893c5cb5dff", "patch": "@@ -112,6 +112,7 @@ fn issue1178() {\n \n     foo!(#[doc = \"bar\"] baz);\n }\n+\n fn issue1739() {\n     sql_function!(add_rss_item,\n                   add_rss_item_t,\n@@ -125,6 +126,14 @@ fn issue1739() {\n         .par_map_inplace(|el| *el = 0.);\n }\n \n+fn issue_1885() {\n+    let threads = people.into_iter().map(|name| {\n+        chan_select! {\n+            rx.recv() => {}\n+        }\n+    }).collect::<Vec<_>>();\n+}\n+\n // Put the following tests with macro invocations whose arguments cannot be parsed as expressioins\n // at the end of the file for now.\n "}, {"sha": "21c0b983ff93cbb40a7d82407e23c5e20ad651e5", "filename": "tests/target/macros.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a18a40cbc141ad1437796a53b1d1a893c5cb5dff/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18a40cbc141ad1437796a53b1d1a893c5cb5dff/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=a18a40cbc141ad1437796a53b1d1a893c5cb5dff", "patch": "@@ -146,6 +146,7 @@ fn issue1178() {\n         baz\n     );\n }\n+\n fn issue1739() {\n     sql_function!(\n         add_rss_item,\n@@ -166,6 +167,17 @@ fn issue1739() {\n     ]).par_map_inplace(|el| *el = 0.);\n }\n \n+fn issue_1885() {\n+    let threads = people\n+        .into_iter()\n+        .map(|name| {\n+            chan_select! {\n+                rx.recv() => {}\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+}\n+\n // Put the following tests with macro invocations whose arguments cannot be parsed as expressioins\n // at the end of the file for now.\n "}]}