{"sha": "c33b3492e7877a88ffbefb6fa9dbdfc7c8729abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzM2IzNDkyZTc4NzdhODhmZmJlZmI2ZmE5ZGJkZmM3Yzg3MjlhYmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-28T09:49:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-28T09:49:02Z"}, "message": "Rollup merge of #61241 - spastorino:check-place-iterative, r=oli-obk\n\nCheck place iterative\n\nr? @oli-obk", "tree": {"sha": "43db1b245cafcd69199bf49d158d692f3d45cb89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43db1b245cafcd69199bf49d158d692f3d45cb89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c33b3492e7877a88ffbefb6fa9dbdfc7c8729abf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7QQOCRBK7hj4Ov3rIwAAdHIIACU846YaS87kVHeKCngR88Ri\no+a/08jhKjw0iN/1Ibe3HxJ4CqFSGDNmauh3nIKkPtBVy2QjOCFChIbuaGPkXnDh\n3aoV8gmtgusT0kjMnXLyqchdHJHmHmFlsg1ejBk+PUgP8my8w8G23EFulQGFOpNE\nJI/O6Wv1bQ0BDFoxwWPmSjHYJoM56kLKMOMbeIq4C8LkOUeLkS089RSjwoehBBaL\nQnDH7R+Z5mBrs1dsYzIDbQPWeM4fmE4iZvKnDmoAq1uZ+v7dBWF3G0yNCF7/pB6j\nzgumvQpgSAZv91S1fpbJJkkB+QHmz/g8p7/kz42B98mxmg7Ga4sQhfeRm/PLjqQ=\n=DSEB\n-----END PGP SIGNATURE-----\n", "payload": "tree 43db1b245cafcd69199bf49d158d692f3d45cb89\nparent a449bc3ad0036094f8f615afe81df732c8551706\nparent fb4b62b87bd35019e2c797d30572ba8188feff9c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559036942 +0200\ncommitter GitHub <noreply@github.com> 1559036942 +0200\n\nRollup merge of #61241 - spastorino:check-place-iterative, r=oli-obk\n\nCheck place iterative\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c33b3492e7877a88ffbefb6fa9dbdfc7c8729abf", "html_url": "https://github.com/rust-lang/rust/commit/c33b3492e7877a88ffbefb6fa9dbdfc7c8729abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c33b3492e7877a88ffbefb6fa9dbdfc7c8729abf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a449bc3ad0036094f8f615afe81df732c8551706", "url": "https://api.github.com/repos/rust-lang/rust/commits/a449bc3ad0036094f8f615afe81df732c8551706", "html_url": "https://github.com/rust-lang/rust/commit/a449bc3ad0036094f8f615afe81df732c8551706"}, {"sha": "fb4b62b87bd35019e2c797d30572ba8188feff9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4b62b87bd35019e2c797d30572ba8188feff9c", "html_url": "https://github.com/rust-lang/rust/commit/fb4b62b87bd35019e2c797d30572ba8188feff9c"}], "stats": {"total": 75, "additions": 36, "deletions": 39}, "files": [{"sha": "a1e2d0683d3800a37f3184e06299d15e80ad0d7c", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c33b3492e7877a88ffbefb6fa9dbdfc7c8729abf/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c33b3492e7877a88ffbefb6fa9dbdfc7c8729abf/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=c33b3492e7877a88ffbefb6fa9dbdfc7c8729abf", "patch": "@@ -136,10 +136,10 @@ fn check_rvalue(\n ) -> McfResult {\n     match rvalue {\n         Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => {\n-            check_operand(tcx, mir, operand, span)\n+            check_operand(operand, span)\n         }\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) => {\n-            check_place(tcx, mir, place, span)\n+            check_place(place, span)\n         }\n         Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc::ty::cast::CastTy;\n@@ -153,11 +153,11 @@ fn check_rvalue(\n                 (CastTy::RPtr(_), CastTy::Float) => bug!(),\n                 (CastTy::RPtr(_), CastTy::Int(_)) => bug!(),\n                 (CastTy::Ptr(_), CastTy::RPtr(_)) => bug!(),\n-                _ => check_operand(tcx, mir, operand, span),\n+                _ => check_operand(operand, span),\n             }\n         }\n         Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, _) => {\n-            check_operand(tcx, mir, operand, span)\n+            check_operand(operand, span)\n         }\n         Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), _, _) |\n         Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), _, _) |\n@@ -171,8 +171,8 @@ fn check_rvalue(\n         )),\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n-            check_operand(tcx, mir, lhs, span)?;\n-            check_operand(tcx, mir, rhs, span)?;\n+            check_operand(lhs, span)?;\n+            check_operand(rhs, span)?;\n             let ty = lhs.ty(mir, tcx);\n             if ty.is_integral() || ty.is_bool() || ty.is_char() {\n                 Ok(())\n@@ -191,7 +191,7 @@ fn check_rvalue(\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(mir, tcx);\n             if ty.is_integral() || ty.is_bool() {\n-                check_operand(tcx, mir, operand, span)\n+                check_operand(operand, span)\n             } else {\n                 Err((\n                     span,\n@@ -201,7 +201,7 @@ fn check_rvalue(\n         }\n         Rvalue::Aggregate(_, operands) => {\n             for operand in operands {\n-                check_operand(tcx, mir, operand, span)?;\n+                check_operand(operand, span)?;\n             }\n             Ok(())\n         }\n@@ -216,11 +216,11 @@ fn check_statement(\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(place, rval) => {\n-            check_place(tcx, mir, place, span)?;\n+            check_place(place, span)?;\n             check_rvalue(tcx, mir, rval, span)\n         }\n \n-        StatementKind::FakeRead(_, place) => check_place(tcx, mir, place, span),\n+        StatementKind::FakeRead(_, place) => check_place(place, span),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { .. } => Ok(()),\n@@ -239,43 +239,40 @@ fn check_statement(\n }\n \n fn check_operand(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n     operand: &Operand<'tcx>,\n     span: Span,\n ) -> McfResult {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => {\n-            check_place(tcx, mir, place, span)\n+            check_place(place, span)\n         }\n         Operand::Constant(_) => Ok(()),\n     }\n }\n \n-fn check_place(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n-    place: &Place<'tcx>,\n-    span: Span,\n-) -> McfResult {\n-    match place {\n-        Place::Base(PlaceBase::Local(_)) => Ok(()),\n-        // promoteds are always fine, they are essentially constants\n-        Place::Base(PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. })) => Ok(()),\n-        Place::Base(PlaceBase::Static(box Static { kind: StaticKind::Static(_), .. })) =>\n-            Err((span, \"cannot access `static` items in const fn\".into())),\n-        Place::Projection(proj) => {\n+fn check_place(place: &Place<'tcx>, span: Span) -> McfResult {\n+    place.iterate(|place_base, place_projection| {\n+        for proj in place_projection {\n             match proj.elem {\n-                | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. }\n-                | ProjectionElem::Deref | ProjectionElem::Field(..) | ProjectionElem::Index(_) => {\n-                    check_place(tcx, mir, &proj.base, span)\n-                }\n-                | ProjectionElem::Downcast(..) => {\n-                    Err((span, \"`match` or `if let` in `const fn` is unstable\".into()))\n+                ProjectionElem::Downcast(..) => {\n+                    return Err((span, \"`match` or `if let` in `const fn` is unstable\".into()));\n                 }\n+                ProjectionElem::ConstantIndex { .. }\n+                | ProjectionElem::Subslice { .. }\n+                | ProjectionElem::Deref\n+                | ProjectionElem::Field(..)\n+                | ProjectionElem::Index(_) => {}\n             }\n         }\n-    }\n+\n+        match place_base {\n+            PlaceBase::Static(box Static { kind: StaticKind::Static(_), .. }) => {\n+                Err((span, \"cannot access `static` items in const fn\".into()))\n+            }\n+            PlaceBase::Local(_)\n+            | PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => Ok(()),\n+        }\n+    })\n }\n \n fn check_terminator(\n@@ -290,11 +287,11 @@ fn check_terminator(\n         | TerminatorKind::Resume => Ok(()),\n \n         TerminatorKind::Drop { location, .. } => {\n-            check_place(tcx, mir, location, span)\n+            check_place(location, span)\n         }\n         TerminatorKind::DropAndReplace { location, value, .. } => {\n-            check_place(tcx, mir, location, span)?;\n-            check_operand(tcx, mir, value, span)\n+            check_place(location, span)?;\n+            check_operand(value, span)\n         },\n \n         TerminatorKind::FalseEdges { .. } | TerminatorKind::SwitchInt { .. } => Err((\n@@ -346,10 +343,10 @@ fn check_terminator(\n                     )),\n                 }\n \n-                check_operand(tcx, mir, func, span)?;\n+                check_operand(func, span)?;\n \n                 for arg in args {\n-                    check_operand(tcx, mir, arg, span)?;\n+                    check_operand(arg, span)?;\n                 }\n                 Ok(())\n             } else {\n@@ -363,7 +360,7 @@ fn check_terminator(\n             msg: _,\n             target: _,\n             cleanup: _,\n-        } => check_operand(tcx, mir, cond, span),\n+        } => check_operand(cond, span),\n \n         TerminatorKind::FalseUnwind { .. } => {\n             Err((span, \"loops are not allowed in const fn\".into()))"}]}