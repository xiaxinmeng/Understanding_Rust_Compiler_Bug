{"sha": "bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNmViNmZhNWRmOGI0OGM4NWNmYmQ4YjEzZjUwM2ViYmFmZTlmMjQ=", "commit": {"author": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-03T06:51:47Z"}, "committer": {"name": "Vishnunarayan K I", "email": "appukuttancr@gmail.com", "date": "2020-12-03T06:51:47Z"}, "message": "move intrinsic to CTFE, add FIXME", "tree": {"sha": "17e5676764da4ce5372bca85d29c88182a235481", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e5676764da4ce5372bca85d29c88182a235481"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "html_url": "https://github.com/rust-lang/rust/commit/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24/comments", "author": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vn-ki", "id": 31964688, "node_id": "MDQ6VXNlcjMxOTY0Njg4", "avatar_url": "https://avatars.githubusercontent.com/u/31964688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vn-ki", "html_url": "https://github.com/vn-ki", "followers_url": "https://api.github.com/users/vn-ki/followers", "following_url": "https://api.github.com/users/vn-ki/following{/other_user}", "gists_url": "https://api.github.com/users/vn-ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/vn-ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vn-ki/subscriptions", "organizations_url": "https://api.github.com/users/vn-ki/orgs", "repos_url": "https://api.github.com/users/vn-ki/repos", "events_url": "https://api.github.com/users/vn-ki/events{/privacy}", "received_events_url": "https://api.github.com/users/vn-ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/899a59e7ca7817e8c0f56c474186854c7eb5ea9b", "html_url": "https://github.com/rust-lang/rust/commit/899a59e7ca7817e8c0f56c474186854c7eb5ea9b"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "275496647d9481acd3f8ce7debf5d4d17717361a", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::mir::AssertMessage;\n use rustc_session::Limit;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_target::abi::{Align, Size};\n \n use crate::interpret::{\n     self, compile_time_machine, AllocId, Allocation, Frame, GlobalId, ImmTy, InterpCx,\n@@ -304,6 +305,22 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 };\n                 ecx.write_scalar(Scalar::from_bool(cmp), dest)?;\n             }\n+            sym::const_allocate => {\n+                let size = ecx.read_scalar(args[0])?.to_machine_usize(ecx)?;\n+                let align = ecx.read_scalar(args[1])?.to_machine_usize(ecx)?;\n+\n+                let align = match Align::from_bytes(align) {\n+                    Ok(a) => a,\n+                    Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n+                };\n+\n+                let ptr = ecx.memory.allocate(\n+                    Size::from_bytes(size as u64),\n+                    align,\n+                    interpret::MemoryKind::ConstHeap,\n+                );\n+                ecx.write_scalar(Scalar::Ptr(ptr), dest)?;\n+            }\n             _ => {\n                 return Err(ConstEvalErrKind::NeedsRfc(format!(\n                     \"calling intrinsic `{}`\","}, {"sha": "f666a89ca56decd9af79427d36d37ed196b59af6", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "patch": "@@ -14,11 +14,10 @@ use rustc_middle::ty;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::abi::{Abi, Align, LayoutOf as _, Primitive, Size};\n+use rustc_target::abi::{Abi, LayoutOf as _, Primitive, Size};\n \n use super::{\n-    util::ensure_monomorphic_enough, CheckInAllocMsg, ImmTy, InterpCx, Machine, MemoryKind, OpTy,\n-    PlaceTy,\n+    util::ensure_monomorphic_enough, CheckInAllocMsg, ImmTy, InterpCx, Machine, OpTy, PlaceTy,\n };\n \n mod caller_location;\n@@ -338,22 +337,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n-            sym::const_allocate => {\n-                let size = self.read_scalar(args[0])?.to_machine_usize(self)?;\n-                let align = self.read_scalar(args[1])?.to_machine_usize(self)?;\n-\n-                let align = match Align::from_bytes(align) {\n-                    Ok(a) => a,\n-                    Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n-                };\n-\n-                let ptr = self.memory.allocate(\n-                    Size::from_bytes(size as u64),\n-                    align,\n-                    MemoryKind::ConstHeap,\n-                );\n-                self.write_scalar(Scalar::Ptr(ptr), dest)?;\n-            }\n             sym::offset => {\n                 let ptr = self.read_scalar(args[0])?.check_init()?;\n                 let offset_count = self.read_scalar(args[1])?.to_machine_isize(self)?;"}, {"sha": "3294daabe612501e8e381ea8997b6c000bb676b1", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=bc6eb6fa5df8b48c85cfbd8b13f503ebbafe9f24", "patch": "@@ -28,6 +28,7 @@ pub enum MemoryKind<T> {\n     /// Stack memory. Error if deallocated except during a stack pop.\n     Stack,\n     /// Heap memory.\n+    /// FIXME: this variant should be in const_eval\n     ConstHeap,\n     /// Memory backing vtables. Error if ever deallocated.\n     Vtable,"}]}