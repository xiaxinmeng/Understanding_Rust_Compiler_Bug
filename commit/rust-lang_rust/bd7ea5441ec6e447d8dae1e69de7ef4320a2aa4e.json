{"sha": "bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkN2VhNTQ0MWVjNmU0NDdkOGRhZTFlNjlkZTdlZjQzMjBhMmFhNGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-03T23:07:04Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-08T21:40:45Z"}, "message": "Use `PredicateObligation`s instead of `Predicate`s\n\nKeep more information about trait binding failures.", "tree": {"sha": "ee02aacbe98954838effb64a4d3929cec7f76be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee02aacbe98954838effb64a4d3929cec7f76be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "html_url": "https://github.com/rust-lang/rust/commit/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "485c5fb6e1bf12cd11a8fac5ee94962e17cff74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/485c5fb6e1bf12cd11a8fac5ee94962e17cff74b", "html_url": "https://github.com/rust-lang/rust/commit/485c5fb6e1bf12cd11a8fac5ee94962e17cff74b"}], "stats": {"total": 421, "additions": 280, "deletions": 141}, "files": [{"sha": "5b6db324e6c856dd52fcd413825ccd41dfbef6d1", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -296,7 +296,10 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);\n         self.collect_outlives_from_predicate_list(\n             move |ty| ty == identity_proj,\n-            traits::elaborate_predicates(tcx, trait_predicates),\n+            traits::elaborate_predicates(tcx, trait_predicates)\n+                .into_iter()\n+                .map(|o| o.predicate)\n+                .collect::<Vec<_>>(),\n         )\n         .map(|b| b.1)\n     }"}, {"sha": "3f63d25fb4723ad92109f62fb965a6843e75a20c", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -1,8 +1,10 @@\n use smallvec::smallvec;\n \n+use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, TyCtxt, WithConstness};\n+use rustc_span::Span;\n \n pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -87,7 +89,7 @@ impl<T: AsRef<ty::Predicate<'tcx>>> Extend<T> for PredicateSet<'tcx> {\n /// holds as well. Similarly, if we have `trait Foo: 'static`, and we know that\n /// `T: Foo`, then we know that `T: 'static`.\n pub struct Elaborator<'tcx> {\n-    stack: Vec<ty::Predicate<'tcx>>,\n+    stack: Vec<PredicateObligation<'tcx>>,\n     visited: PredicateSet<'tcx>,\n }\n \n@@ -112,35 +114,60 @@ pub fn elaborate_predicates<'tcx>(\n ) -> Elaborator<'tcx> {\n     let mut visited = PredicateSet::new(tcx);\n     predicates.retain(|pred| visited.insert(pred));\n-    Elaborator { stack: predicates, visited }\n+    let obligations: Vec<_> =\n+        predicates.into_iter().map(|predicate| predicate_obligation(predicate, None)).collect();\n+    elaborate_obligations(tcx, obligations)\n+}\n+\n+pub fn elaborate_obligations<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    mut obligations: Vec<PredicateObligation<'tcx>>,\n+) -> Elaborator<'tcx> {\n+    let mut visited = PredicateSet::new(tcx);\n+    obligations.retain(|obligation| visited.insert(&obligation.predicate));\n+    Elaborator { stack: obligations, visited }\n+}\n+\n+fn predicate_obligation<'tcx>(\n+    predicate: ty::Predicate<'tcx>,\n+    span: Option<Span>,\n+) -> PredicateObligation<'tcx> {\n+    let mut cause = ObligationCause::dummy();\n+    if let Some(span) = span {\n+        cause.span = span;\n+    }\n+    Obligation { cause, param_env: ty::ParamEnv::empty(), recursion_depth: 0, predicate }\n }\n \n impl Elaborator<'tcx> {\n     pub fn filter_to_traits(self) -> FilterToTraits<Self> {\n         FilterToTraits::new(self)\n     }\n \n-    fn elaborate(&mut self, predicate: &ty::Predicate<'tcx>) {\n+    fn elaborate(&mut self, obligation: &PredicateObligation<'tcx>) {\n         let tcx = self.visited.tcx;\n-        match *predicate {\n+        match obligation.predicate {\n             ty::Predicate::Trait(ref data, _) => {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n \n-                let predicates = predicates\n-                    .predicates\n-                    .iter()\n-                    .map(|(pred, _)| pred.subst_supertrait(tcx, &data.to_poly_trait_ref()));\n-                debug!(\"super_predicates: data={:?} predicates={:?}\", data, predicates.clone());\n+                let obligations = predicates.predicates.iter().map(|(pred, span)| {\n+                    predicate_obligation(\n+                        pred.subst_supertrait(tcx, &data.to_poly_trait_ref()),\n+                        Some(*span),\n+                    )\n+                });\n+                debug!(\"super_predicates: data={:?} predicates={:?}\", data, &obligations);\n \n                 // Only keep those bounds that we haven't already seen.\n                 // This is necessary to prevent infinite recursion in some\n                 // cases. One common case is when people define\n                 // `trait Sized: Sized { }` rather than `trait Sized { }`.\n                 let visited = &mut self.visited;\n-                let predicates = predicates.filter(|pred| visited.insert(pred));\n+                let obligations =\n+                    obligations.filter(|obligation| visited.insert(&obligation.predicate));\n \n-                self.stack.extend(predicates);\n+                self.stack.extend(obligations);\n             }\n             ty::Predicate::WellFormed(..) => {\n                 // Currently, we do not elaborate WF predicates,\n@@ -221,25 +248,26 @@ impl Elaborator<'tcx> {\n                                 None\n                             }\n                         })\n-                        .filter(|p| visited.insert(p)),\n+                        .filter(|p| visited.insert(p))\n+                        .map(|p| predicate_obligation(p, None)),\n                 );\n             }\n         }\n     }\n }\n \n impl Iterator for Elaborator<'tcx> {\n-    type Item = ty::Predicate<'tcx>;\n+    type Item = PredicateObligation<'tcx>;\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (self.stack.len(), None)\n     }\n \n-    fn next(&mut self) -> Option<ty::Predicate<'tcx>> {\n+    fn next(&mut self) -> Option<Self::Item> {\n         // Extract next item from top-most stack frame, if any.\n-        if let Some(pred) = self.stack.pop() {\n-            self.elaborate(&pred);\n-            Some(pred)\n+        if let Some(obligation) = self.stack.pop() {\n+            self.elaborate(&obligation);\n+            Some(obligation)\n         } else {\n             None\n         }\n@@ -282,12 +310,12 @@ impl<I> FilterToTraits<I> {\n     }\n }\n \n-impl<'tcx, I: Iterator<Item = ty::Predicate<'tcx>>> Iterator for FilterToTraits<I> {\n+impl<'tcx, I: Iterator<Item = PredicateObligation<'tcx>>> Iterator for FilterToTraits<I> {\n     type Item = ty::PolyTraitRef<'tcx>;\n \n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n-        while let Some(pred) = self.base_iterator.next() {\n-            if let ty::Predicate::Trait(data, _) = pred {\n+        while let Some(obligation) = self.base_iterator.next() {\n+            if let ty::Predicate::Trait(data, _) = obligation.predicate {\n                 return Some(data.to_poly_trait_ref());\n             }\n         }"}, {"sha": "5a00f206a7646892463e56a32264fda2c7cc1ed6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n             .collect();\n         if !traits::normalize_and_test_predicates(\n             tcx,\n-            traits::elaborate_predicates(tcx, predicates).collect(),\n+            traits::elaborate_predicates(tcx, predicates).map(|o| o.predicate).collect(),\n         ) {\n             trace!(\"ConstProp skipped for {:?}: found unsatisfiable predicates\", source.def_id());\n             return;"}, {"sha": "0cb26e082280ec4a5e10a80da6b34acd3652646f", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -1255,8 +1255,8 @@ crate fn required_region_bounds(\n     assert!(!erased_self_ty.has_escaping_bound_vars());\n \n     traits::elaborate_predicates(tcx, predicates)\n-        .filter_map(|predicate| {\n-            match predicate {\n+        .filter_map(|obligation| {\n+            match obligation.predicate {\n                 ty::Predicate::Projection(..)\n                 | ty::Predicate::Trait(..)\n                 | ty::Predicate::Subtype(..)"}, {"sha": "b4c790eebc106242f67d069334f0c182bd803247", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -366,7 +366,8 @@ impl AutoTraitFinder<'tcx> {\n \n             computed_preds.extend(user_computed_preds.iter().cloned());\n             let normalized_preds =\n-                elaborate_predicates(tcx, computed_preds.iter().cloned().collect());\n+                elaborate_predicates(tcx, computed_preds.iter().cloned().collect())\n+                    .map(|o| o.predicate);\n             new_env =\n                 ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal, None);\n         }"}, {"sha": "8cd8f679904de5cfd2339b715b1cee5b9e63fe15", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -976,8 +976,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        for implication in super::elaborate_predicates(self.tcx, vec![*cond]) {\n-            if let ty::Predicate::Trait(implication, _) = implication {\n+        for obligation in super::elaborate_predicates(self.tcx, vec![*cond]) {\n+            if let ty::Predicate::Trait(implication, _) = obligation.predicate {\n                 let error = error.to_poly_trait_ref();\n                 let implication = implication.to_poly_trait_ref();\n                 // FIXME: I'm just not taking associated types at all here.\n@@ -1387,7 +1387,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     (self.tcx.sess.source_map().span_to_snippet(span), &obligation.cause.code)\n                 {\n                     let generics = self.tcx.generics_of(*def_id);\n-                    if !generics.params.is_empty() && !snippet.ends_with('>') {\n+                    if generics.params.iter().filter(|p| p.name.as_str() != \"Self\").next().is_some() && !snippet.ends_with('>') {\n                         // FIXME: To avoid spurious suggestions in functions where type arguments\n                         // where already supplied, we check the snippet to make sure it doesn't\n                         // end with a turbofish. Ideally we would have access to a `PathSegment`"}, {"sha": "1ecc7fdafc442bbfb1fbd38c9b30d3d1d5d0490c", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -142,7 +142,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n \n-        if let ObligationCauseCode::ItemObligation(item) = obligation.cause.code {\n+        if let ObligationCauseCode::ItemObligation(item)\n+        | ObligationCauseCode::BindingObligation(item, _) = obligation.cause.code\n+        {\n             // FIXME: maybe also have some way of handling methods\n             // from other traits? That would require name resolution,\n             // which we might want to be some sort of hygienic."}, {"sha": "f9149b91b1fc1d91ba284f0608e5394d0e61cd0c", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -1345,7 +1345,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::ItemObligation(item_def_id) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let msg = format!(\"required by `{}`\", item_name);\n-\n                 if let Some(sp) = tcx.hir().span_if_local(item_def_id) {\n                     let sp = tcx.sess.source_map().guess_head_span(sp);\n                     err.span_label(sp, &msg);\n@@ -1357,7 +1356,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let msg = format!(\"required by this bound in `{}`\", item_name);\n                 if let Some(ident) = tcx.opt_item_name(item_def_id) {\n-                    err.span_label(ident.span, \"\");\n+                    if !ident.span.overlaps(span) {\n+                        err.span_label(ident.span, \"\");\n+                    }\n                 }\n                 if span != DUMMY_SP {\n                     err.span_label(span, &msg);"}, {"sha": "6d0a3790fb090f68bbcd00c77d9e9133e6e291e6", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -297,7 +297,9 @@ pub fn normalize_param_env_or_error<'tcx>(\n     );\n \n     let mut predicates: Vec<_> =\n-        util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.to_vec()).collect();\n+        util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.to_vec())\n+            .map(|obligation| obligation.predicate)\n+            .collect();\n \n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\", predicates);\n "}, {"sha": "117748fd064717d31fd750b16174ac2e9e753e1c", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -298,7 +298,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Search for a predicate like `Self : Sized` amongst the trait bounds.\n     let predicates = tcx.predicates_of(def_id);\n     let predicates = predicates.instantiate_identity(tcx).predicates;\n-    elaborate_predicates(tcx, predicates).any(|predicate| match predicate {\n+    elaborate_predicates(tcx, predicates).any(|obligation| match obligation.predicate {\n         ty::Predicate::Trait(ref trait_pred, _) => {\n             trait_pred.def_id() == sized_def_id && trait_pred.skip_binder().self_ty().is_param(0)\n         }"}, {"sha": "4d02c5eb2301d3a44a9bc3391f2eca7f30cdbf3e", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -900,7 +900,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let trait_predicates = tcx.predicates_of(def_id);\n     let bounds = trait_predicates.instantiate(tcx, substs);\n-    let bounds = elaborate_predicates(tcx, bounds.predicates);\n+    let bounds = elaborate_predicates(tcx, bounds.predicates).map(|o| o.predicate);\n     assemble_candidates_from_predicates(\n         selcx,\n         obligation,\n@@ -1162,7 +1162,7 @@ fn confirm_object_candidate<'cx, 'tcx>(\n \n         // select only those projections that are actually projecting an\n         // item with the correct name\n-        let env_predicates = env_predicates.filter_map(|p| match p {\n+        let env_predicates = env_predicates.filter_map(|o| match o.predicate {\n             ty::Predicate::Projection(data) => {\n                 if data.projection_def_id() == obligation.predicate.item_def_id {\n                     Some(data)"}, {"sha": "63a6720b97dafeaf2889e3a2a585a5f431a32255", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -312,19 +312,18 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         let item = self.item;\n \n         if let Elaborate::All = elaborate {\n-            let predicates = obligations.iter().map(|obligation| obligation.predicate).collect();\n-            let implied_obligations = traits::elaborate_predicates(tcx, predicates);\n-            let implied_obligations = implied_obligations.map(|pred| {\n+            let implied_obligations = traits::util::elaborate_obligations(tcx, obligations.clone());\n+            let implied_obligations = implied_obligations.map(|obligation| {\n                 let mut cause = cause.clone();\n                 extend_cause_with_original_assoc_item_obligation(\n                     tcx,\n                     trait_ref,\n                     item,\n                     &mut cause,\n-                    &pred,\n+                    &obligation.predicate,\n                     tcx.associated_items(trait_ref.def_id).in_definition_order().copied(),\n                 );\n-                traits::Obligation::new(cause, param_env, pred)\n+                traits::Obligation::new(cause, param_env, obligation.predicate)\n             });\n             self.out.extend(implied_obligations);\n         }\n@@ -613,11 +612,14 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> Vec<traits::PredicateObligation<'tcx>> {\n         let predicates = self.infcx.tcx.predicates_of(def_id).instantiate(self.infcx.tcx, substs);\n-        let cause = self.cause(traits::ItemObligation(def_id));\n         predicates\n             .predicates\n             .into_iter()\n-            .map(|pred| traits::Obligation::new(cause.clone(), self.param_env, pred))\n+            .zip(predicates.spans.into_iter())\n+            .map(|(pred, span)| {\n+                let cause = self.cause(traits::BindingObligation(def_id, span));\n+                traits::Obligation::new(cause, self.param_env, pred)\n+            })\n             .filter(|pred| !pred.has_escaping_bound_vars())\n             .collect()\n     }"}, {"sha": "a7a0564b9b6c9241cb548f860090d0fbac385c7b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -1601,12 +1601,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         for (base_trait_ref, span, constness) in regular_traits_refs_spans {\n             assert_eq!(constness, Constness::NotConst);\n \n-            for trait_ref in traits::elaborate_trait_ref(tcx, base_trait_ref) {\n+            for obligation in traits::elaborate_trait_ref(tcx, base_trait_ref) {\n                 debug!(\n                     \"conv_object_ty_poly_trait_ref: observing object predicate `{:?}`\",\n-                    trait_ref\n+                    obligation.predicate\n                 );\n-                match trait_ref {\n+                match obligation.predicate {\n                     ty::Predicate::Trait(pred, _) => {\n                         associated_types.entry(span).or_default().extend(\n                             tcx.associated_items(pred.def_id())"}, {"sha": "210ba92e8117b87cf18a835cca61c673ef65285b", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -573,13 +573,15 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         };\n \n         traits::elaborate_predicates(self.tcx, predicates.predicates.clone())\n-            .filter_map(|predicate| match predicate {\n+            .filter_map(|obligation| match obligation.predicate {\n                 ty::Predicate::Trait(trait_pred, _) if trait_pred.def_id() == sized_def_id => {\n                     let span = predicates\n                         .predicates\n                         .iter()\n                         .zip(predicates.spans.iter())\n-                        .filter_map(|(p, span)| if *p == predicate { Some(*span) } else { None })\n+                        .filter_map(\n+                            |(p, span)| if *p == obligation.predicate { Some(*span) } else { None },\n+                        )\n                         .next()\n                         .unwrap_or(rustc_span::DUMMY_SP);\n                     Some((trait_pred, span))"}, {"sha": "8508c3510fa0efc206fc73e4e32bee7cf68ce3ad", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -1226,7 +1226,8 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n     // Check elaborated bounds.\n     let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);\n \n-    for pred in implied_obligations {\n+    for obligation in implied_obligations {\n+        let pred = obligation.predicate;\n         // Match the existing behavior.\n         if pred.is_global() && !pred.has_late_bound_regions() {\n             let pred = fcx.normalize_associated_types_in(span, &pred);"}, {"sha": "8c2040719a1c9a23f9f8a6ee97ea9b4bbb5f761f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -1650,7 +1650,7 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n         // prove that the trait applies to the types that were\n         // used, and adding the predicate into this list ensures\n         // that this is done.\n-        let span = tcx.def_span(def_id);\n+        let span = tcx.sess.source_map().guess_head_span(tcx.def_span(def_id));\n         result.predicates =\n             tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(std::iter::once((\n                 ty::TraitRef::identity(tcx, def_id).without_const().to_predicate(),"}, {"sha": "ebfb3684eb0d6f22645b8998b853846b9e8a4f22", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -348,7 +348,10 @@ fn check_predicates<'tcx>(\n                 .extend(obligations.into_iter().map(|obligation| obligation.predicate))\n         }\n     }\n-    impl2_predicates.predicates.extend(traits::elaborate_predicates(tcx, always_applicable_traits));\n+    impl2_predicates.predicates.extend(\n+        traits::elaborate_predicates(tcx, always_applicable_traits)\n+            .map(|obligation| obligation.predicate),\n+    );\n \n     for predicate in impl1_predicates.predicates {\n         if !impl2_predicates.predicates.contains(&predicate) {"}, {"sha": "d5066e39ebc82a1c932b234e6e74deccf0877b92", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -20,7 +20,10 @@ error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent be\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n LL | trait Case1 {\n-   | ----------- required by `Case1`\n+   |       -----\n+LL |     type C: Clone + Iterator<Item:\n+LL |         Send + Iterator<Item:\n+   |         ---- required by this bound in `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n    |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n@@ -33,7 +36,10 @@ error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n LL | trait Case1 {\n-   | ----------- required by `Case1`\n+   |       -----\n+...\n+LL |         > + Sync>;\n+   |             ---- required by this bound in `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n    |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n@@ -46,7 +52,10 @@ error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n LL | trait Case1 {\n-   | ----------- required by `Case1`\n+   |       -----\n+...\n+LL |                 Debug\n+   |                 ----- required by this bound in `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n    |                    ^^^^^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`"}, {"sha": "76d00f9e6f2455d780025c1389697b3896250d28", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0284]: type annotations needed\n   --> $DIR/associated-types-overridden-binding.rs:4:12\n    |\n LL | trait Foo: Iterator<Item = i32> {}\n-   | ------------------------------- required by `Foo`\n+   |       ---           ---------- required by this bound in `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n    |            ^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |\n@@ -12,7 +12,7 @@ error[E0284]: type annotations needed\n   --> $DIR/associated-types-overridden-binding.rs:7:21\n    |\n LL | trait I32Iterator = Iterator<Item = i32>;\n-   | ----------------------------------------- required by `I32Iterator`\n+   |       -----------            ---------- required by this bound in `I32Iterator`\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `Self`\n    |"}, {"sha": "3f6702da2a4a2bf4f8a0a12867f7fa1d3234a3b7", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -128,10 +128,14 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n    |\n LL |     type Ty = Vec<[u8]>;\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/liballoc/vec.rs:LL:COL\n+   |\n+LL | pub struct Vec<T> {\n+   |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::vec::Vec`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "5c169af4eb8ae33380ac6e6a6543b29516b851c3", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -14,10 +14,14 @@ error[E0277]: the size for values of type `dyn Trait` cannot be known at compila\n    |\n LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |            ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/liballoc/vec.rs:LL:COL\n+   |\n+LL | pub struct Vec<T> {\n+   |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::vec::Vec`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37"}, {"sha": "06eca0f692d6ddc8b0d2ec159b4e7fce5024f657", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `F` cannot be sent between threads safely\n   --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:22\n    |\n LL | struct X<F> where F: FnOnce() + 'static + Send {\n-   | ---------------------------------------------- required by `X`\n+   |        -                                  ---- required by this bound in `X`\n ...\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n    |                      ^^^^ `F` cannot be sent between threads safely"}, {"sha": "e188d9810100c0075d3188fe69193027f4dfb692", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n LL | pub struct Foo<A, B>(A, B);\n-   | --------------------------- required by `Foo`\n+   |            --- - required by this bound in `Foo`\n LL | \n LL | impl<A, B> Foo<A, B> {\n    |      - this type parameter needs to be `std::marker::Sized`\n@@ -30,7 +30,7 @@ error[E0277]: the size for values of type `B` cannot be known at compilation tim\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n LL | pub struct Foo<A, B>(A, B);\n-   | --------------------------- required by `Foo`\n+   |            ---    - required by this bound in `Foo`\n LL | \n LL | impl<A, B> Foo<A, B> {\n    |         - this type parameter needs to be `std::marker::Sized`"}, {"sha": "3d7487a4d92a3623836cf55c1ddb834d7ece57d9", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,8 +3,12 @@ error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               -- required by this bound in `std::cmp::AssertParamIsEq`\n    |\n-   = note: required by `std::cmp::AssertParamIsEq`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "00345243cac5d15a2b62e487a43b249930e77b4c", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,8 +3,12 @@ error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               -- required by this bound in `std::cmp::AssertParamIsEq`\n    |\n-   = note: required by `std::cmp::AssertParamIsEq`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "3d0efa1d147ee3d31e2192af94aa4843d4803f6b", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,8 +3,12 @@ error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               -- required by this bound in `std::cmp::AssertParamIsEq`\n    |\n-   = note: required by `std::cmp::AssertParamIsEq`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "2aec8ffdbe7ec9e56ee461ea8c5b17d41b6a1daa", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,8 +3,12 @@ error[E0277]: the trait bound `Error: std::cmp::Eq` is not satisfied\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               -- required by this bound in `std::cmp::AssertParamIsEq`\n    |\n-   = note: required by `std::cmp::AssertParamIsEq`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "a9fd0564ff548f93d03497abfa30972d7e669357", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<B\n   --> $DIR/E0275.rs:5:33\n    |\n LL | trait Foo {}\n-   | --------- required by `Foo`\n+   | --------- required by this bound in `Foo`\n ...\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^"}, {"sha": "88b5c6a0a013c870bcb42129f6245e19d6543d07", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,9 +2,9 @@ error[E0280]: the requirement `for<'a> <Self as Iterator>::Item<'a>: 'a` is not\n   --> $DIR/issue-62326-parameter-out-of-range.rs:7:20\n    |\n LL | trait Iterator {\n-   | -------------- required by `Iterator`\n+   |       --------\n LL |     type Item<'a>: 'a;\n-   |                    ^^\n+   |                    ^^ required by this bound in `Iterator`\n \n error: aborting due to previous error\n "}, {"sha": "dc62ee53c06307aafd725e047a2075236f2eba9e", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -38,7 +38,10 @@ error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::\n   --> $DIR/iterable.rs:19:30\n    |\n LL | trait Iterable {\n-   | -------------- required by `Iterable`\n+   |       --------\n+LL |     type Item<'a> where Self: 'a;\n+LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n+   |                             --------------------- required by this bound in `Iterable`\n ...\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                              ^^^^^^^^^^^^^^ expected associated type, found reference\n@@ -52,7 +55,10 @@ error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as s\n   --> $DIR/iterable.rs:31:30\n    |\n LL | trait Iterable {\n-   | -------------- required by `Iterable`\n+   |       --------\n+LL |     type Item<'a> where Self: 'a;\n+LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n+   |                             --------------------- required by this bound in `Iterable`\n ...\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n    |                              ^^^^^^^^^^^^^^ expected associated type, found reference"}, {"sha": "f06771e9ea59d543171758f64a28a54c6be1f059", "filename": "src/test/ui/issues/issue-18919.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-18919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-18919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -4,4 +4,9 @@ fn ho_func(f: Option<FuncType>) {\n     //~^ ERROR the size for values of type\n }\n \n+enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+\n fn main() {}"}, {"sha": "db94d00b60c67277fc087814b6aa6033a2ea8484", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,10 +3,12 @@ error[E0277]: the size for values of type `dyn for<'r> std::ops::Fn(&'r isize) -\n    |\n LL | fn ho_func(f: Option<FuncType>) {\n    |               ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+...\n+LL | enum Option<T> {\n+   |      ------ - required by this bound in `Option`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::option::Option`\n \n error: aborting due to previous error\n "}, {"sha": "bcdebb2fa342622160fd0a2fdbb64d170cdc6585", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-20005.rs:10:49\n    |\n LL | trait From<Src> {\n-   | --------------- required by `From`\n+   |       ---- --- required by this bound in `From`\n ...\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n    |                                                 ^^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::marker::Sized`"}, {"sha": "ad33eef07cba5f5102765b7c4c9982272630a0bd", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -10,7 +10,7 @@ error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<N\n   --> $DIR/issue-20413.rs:8:36\n    |\n LL | trait Foo {\n-   | --------- required by `Foo`\n+   | --------- required by this bound in `Foo`\n ...\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n@@ -148,7 +148,7 @@ error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<N\n   --> $DIR/issue-20413.rs:8:36\n    |\n LL | trait Foo {\n-   | --------- required by `Foo`\n+   | --------- required by this bound in `Foo`\n ...\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^"}, {"sha": "1dab637e489db29d2fbb7980ae53808d41c3201e", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,10 +3,14 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n    |\n LL |     fn iceman(c: Vec<[i32]>) {}\n    |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/liballoc/vec.rs:LL:COL\n+   |\n+LL | pub struct Vec<T> {\n+   |                - required by this bound in `std::vec::Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::vec::Vec`\n \n error: aborting due to previous error\n "}, {"sha": "42a61995ad9b7bb44a298758cb29a7d4c16003dd", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: Bound` is not satisfied\n   --> $DIR/issue-21837.rs:8:9\n    |\n LL | pub struct Foo<T: Bound>(T);\n-   | ---------------------------- required by `Foo`\n+   |            ---    ----- required by this bound in `Foo`\n ...\n LL | impl<T> Trait2 for Foo<T> {}\n    |         ^^^^^^ the trait `Bound` is not implemented for `T`"}, {"sha": "fea2c7d5d26d720e7097d273c1c2bcaebe8607f0", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-21974.rs:11:19\n    |\n LL | trait Foo {\n-   | --------- required by `Foo`\n+   | --------- required by this bound in `Foo`\n ...\n LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`"}, {"sha": "72716896426e4a146143426445d52678788ccd9d", "filename": "src/test/ui/issues/issue-23281.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -5,4 +5,8 @@ impl Struct {\n     //~^ ERROR the size for values of type\n }\n \n+struct Vec<T> {\n+    t: T,\n+}\n+\n fn main() {}"}, {"sha": "6aa6051f98aed86b1afa9cd915cad75080caed68", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,10 +3,12 @@ error[E0277]: the size for values of type `(dyn std::ops::Fn() + 'static)` canno\n    |\n LL |     pub fn function(funs: Vec<dyn Fn() -> ()>) {}\n    |                           ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+...\n+LL | struct Vec<T> {\n+   |        --- - required by this bound in `Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::vec::Vec`\n \n error: aborting due to previous error\n "}, {"sha": "64d1b68cbed7f3df411a05e53768cda3567059a6", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,9 @@ error[E0271]: type mismatch resolving `<<T as Trait>::A as MultiDispatch<i32>>::\n   --> $DIR/issue-24204.rs:14:12\n    |\n LL | trait Trait: Sized {\n-   | ------------------ required by `Trait`\n+   |       -----\n+LL |     type A: MultiDispatch<Self::B, O = Self>;\n+   |                                    -------- required by this bound in `Trait`\n ...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n    |            ^^^^^^^^^^^^ expected type parameter `T`, found associated type"}, {"sha": "9f5e934295b87f9a892b4370aad4cee40d9df704", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-24424.rs:4:57\n    |\n LL | trait Trait0<'l0>  {}\n-   | ----------------- required by `Trait0`\n+   | ----------------- required by this bound in `Trait0`\n LL | \n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`"}, {"sha": "db5949b692c7d7f7fb371300abcbe470ac51f5b8", "filename": "src/test/ui/iterators/bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `u8` is not an iterator\n   --> $DIR/bound.rs:2:10\n    |\n LL | struct S<I: Iterator>(I);\n-   | ------------------------- required by `S`\n+   |        -    -------- required by this bound in `S`\n LL | struct T(S<u8>);\n    |          ^^^^^ `u8` is not an iterator\n    |"}, {"sha": "5a1ef37f734478e8d523fccc944896b1f3a42cd8", "filename": "src/test/ui/recursion/recursive-requirements.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*const Bar` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n    |\n LL | struct AssertSync<T: Sync>(PhantomData<T>);\n-   | ------------------------------------------- required by `AssertSync`\n+   |        ----------    ---- required by this bound in `AssertSync`\n ...\n LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Bar` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `*const Foo` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n    |\n LL | struct AssertSync<T: Sync>(PhantomData<T>);\n-   | ------------------------------------------- required by `AssertSync`\n+   |        ----------    ---- required by this bound in `AssertSync`\n ...\n LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Foo` cannot be shared between threads safely"}, {"sha": "6b985edae9e28a92feaad365ac68a7b9f81b54b4", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,10 @@ error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:17:19\n    |\n LL | trait Parent {\n-   | ------------ required by `Parent`\n+   |       ------\n+LL |     type Ty;\n+LL |     type Assoc: Child<Self::Ty>;\n+   |                 --------------- required by this bound in `Parent`\n ...\n LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n    |                   ^^^^^^                              - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n@@ -29,7 +32,10 @@ error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:20:5\n    |\n LL | trait Parent {\n-   | ------------ required by `Parent`\n+   |       ------\n+LL |     type Ty;\n+LL |     type Assoc: Child<Self::Ty>;\n+   |                 --------------- required by this bound in `Parent`\n ...\n LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n    |                                                       - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`"}, {"sha": "9ccddda45e2bb1f1029dc6a29a198807daab928d", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -12,18 +12,26 @@ error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satis\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   | \n+  ::: $SRC_DIR/libstd/io/buffered.rs:LL:COL\n+   |\n+LL | pub struct BufWriter<W: Write> {\n+   |                         ----- required by this bound in `std::io::BufWriter`\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n-   = note: required by `std::io::BufWriter`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   | \n+  ::: $SRC_DIR/libstd/io/buffered.rs:LL:COL\n+   |\n+LL | pub struct BufWriter<W: Write> {\n+   |                         ----- required by this bound in `std::io::BufWriter`\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n-   = note: required by `std::io::BufWriter`\n \n error[E0599]: no method named `write_fmt` found for struct `std::io::BufWriter<&dyn std::io::Write>` in the current scope\n   --> $DIR/mut-borrow-needed-by-trait.rs:22:5"}, {"sha": "ffed905eff2cdc86a2631b7df584180ce8f629db", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -13,7 +13,7 @@ error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:23:5\n    |\n LL | struct Outer<T: Send>(T);\n-   | ------------------------- required by `Outer`\n+   |        -----    ---- required by this bound in `Outer`\n ...\n LL |     Outer(TestType);\n    |     ^^^^^^^^^^^^^^^ `dummy::TestType` cannot be sent between threads safely"}, {"sha": "84cde07ed897b64ed073ae577fa849cee860d8bb", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: Foo` is not satisfied\n   --> $DIR/trait-alias-wf.rs:5:14\n    |\n LL | trait A<T: Foo> {}\n-   | --------------- required by `A`\n+   |       -    --- required by this bound in `A`\n LL | trait B<T> = A<T>;\n    |              ^^^^ the trait `Foo` is not implemented for `T`\n    |"}, {"sha": "1b2511be6d0c8ef61d20a89de78301f29c8f96d1", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-fns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `u32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:13:15\n    |\n LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n+   |        ---   ----- required by this bound in `Foo`\n ...\n LL | fn explode(x: Foo<u32>) {}\n    |               ^^^^^^^^ the trait `Trait` is not implemented for `u32`\n@@ -11,7 +11,7 @@ error[E0277]: the trait bound `f32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:16:14\n    |\n LL | enum Bar<T:Trait> {\n-   | ----------------- required by `Bar`\n+   |      ---   ----- required by this bound in `Bar`\n ...\n LL | fn kaboom(y: Bar<f32>) {}\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f32`"}, {"sha": "58dd68c176823c4ddca21e9bd79d7ef462be473d", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-impls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `u16: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-impls.rs:20:6\n    |\n LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n+   |        ---   ----- required by this bound in `Foo`\n ...\n LL | impl PolyTrait<Foo<u16>> for Struct {\n    |      ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u16`"}, {"sha": "f364fd1e14ca83b8f478bf4fdc4ca64c03397ec4", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-locals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-locals.rs:15:14\n    |\n LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n+   |        ---   ----- required by this bound in `Foo`\n ...\n LL |     let baz: Foo<usize> = loop { };\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`"}, {"sha": "17b1288bc6a1fc7feb50d483bf0405128c975b74", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-static.rs:9:11\n    |\n LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n+   |        ---   ----- required by this bound in `Foo`\n ...\n LL | static X: Foo<usize> = Foo {\n    |           ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`"}, {"sha": "d2fa211b487de42f89a18070d130f2f6c38ddcec", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-xc.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,16 +3,22 @@ error[E0277]: the trait bound `usize: trait_bounds_on_structs_and_enums_xc::Trai\n    |\n LL | fn explode(x: Foo<usize>) {}\n    |               ^^^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `usize`\n+   | \n+  ::: $DIR/auxiliary/trait_bounds_on_structs_and_enums_xc.rs:5:18\n    |\n-   = note: required by `trait_bounds_on_structs_and_enums_xc::Foo`\n+LL | pub struct Foo<T:Trait> {\n+   |                  ----- required by this bound in `trait_bounds_on_structs_and_enums_xc::Foo`\n \n error[E0277]: the trait bound `f32: trait_bounds_on_structs_and_enums_xc::Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-xc.rs:10:14\n    |\n LL | fn kaboom(y: Bar<f32>) {}\n    |              ^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `f32`\n+   | \n+  ::: $DIR/auxiliary/trait_bounds_on_structs_and_enums_xc.rs:9:16\n    |\n-   = note: required by `trait_bounds_on_structs_and_enums_xc::Bar`\n+LL | pub enum Bar<T:Trait> {\n+   |                ----- required by this bound in `trait_bounds_on_structs_and_enums_xc::Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ee3e755c95318b016a28d851f7146cbddb41458f", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-xc1.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-xc1.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,8 +3,11 @@ error[E0277]: the trait bound `f64: trait_bounds_on_structs_and_enums_xc::Trait`\n    |\n LL |     let bar: Bar<f64> = return;\n    |              ^^^^^^^^ the trait `trait_bounds_on_structs_and_enums_xc::Trait` is not implemented for `f64`\n+   | \n+  ::: $DIR/auxiliary/trait_bounds_on_structs_and_enums_xc.rs:9:16\n    |\n-   = note: required by `trait_bounds_on_structs_and_enums_xc::Bar`\n+LL | pub enum Bar<T:Trait> {\n+   |                ----- required by this bound in `trait_bounds_on_structs_and_enums_xc::Bar`\n \n error[E0277]: the trait bound `{integer}: trait_bounds_on_structs_and_enums_xc::Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-xc1.rs:8:15"}, {"sha": "16dba294b6c4c8f901eb344eb7f0345729fc52ad", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:13:9\n    |\n LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n+   |        ---   ----- required by this bound in `Foo`\n ...\n LL | impl<T> Foo<T> {\n    |         ^^^^^^ the trait `Trait` is not implemented for `T`\n@@ -16,7 +16,7 @@ error[E0277]: the trait bound `isize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n    |\n LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n+   |        ---   ----- required by this bound in `Foo`\n ...\n LL |     a: Foo<isize>,\n    |     ^^^^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n@@ -25,7 +25,7 @@ error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:23:10\n    |\n LL | enum Bar<T:Trait> {\n-   | ----------------- required by `Bar`\n+   |      ---   ----- required by this bound in `Bar`\n ...\n LL |     Quux(Bar<usize>),\n    |          ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `U: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:27:5\n    |\n LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n+   |        ---   ----- required by this bound in `Foo`\n ...\n LL |     b: Foo<U>,\n    |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n@@ -48,7 +48,7 @@ error[E0277]: the trait bound `V: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:31:21\n    |\n LL | enum Bar<T:Trait> {\n-   | ----------------- required by `Bar`\n+   |      ---   ----- required by this bound in `Bar`\n ...\n LL |     EvenMoreBadness(Bar<V>),\n    |                     ^^^^^^ the trait `Trait` is not implemented for `V`\n@@ -62,7 +62,7 @@ error[E0277]: the trait bound `i32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:35:5\n    |\n LL | struct Foo<T:Trait> {\n-   | ------------------- required by `Foo`\n+   |        ---   ----- required by this bound in `Foo`\n ...\n LL |     Foo<i32>,\n    |     ^^^^^^^^ the trait `Trait` is not implemented for `i32`\n@@ -71,7 +71,7 @@ error[E0277]: the trait bound `u8: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:39:22\n    |\n LL | enum Bar<T:Trait> {\n-   | ----------------- required by `Bar`\n+   |      ---   ----- required by this bound in `Bar`\n ...\n LL |     DictionaryLike { field: Bar<u8> },\n    |                      ^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u8`"}, {"sha": "4109bd700741df224878909853ff11eac5886ce0", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:6:19\n    |\n LL | struct Foo<T, U: FromIterator<T>>(T, U);\n-   | ---------------------------------------- required by `Foo`\n+   |        ---       --------------- required by this bound in `Foo`\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n    |                   ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n@@ -12,7 +12,7 @@ error[E0277]: a value of type `i32` cannot be built from an iterator over elemen\n   --> $DIR/type-check-defaults.rs:8:27\n    |\n LL | struct Foo<T, U: FromIterator<T>>(T, U);\n-   | ---------------------------------------- required by `Foo`\n+   |        ---       --------------- required by this bound in `Foo`\n ...\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n    |                           ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n@@ -50,7 +50,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:21:25\n    |\n LL | trait Super<T: Copy> { }\n-   | -------------------- required by `Super`\n+   |       -----    ---- required by this bound in `Super`\n LL | trait Base<T = String>: Super<T> { }\n    |                         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |"}, {"sha": "ea7771a9c227089959c901ddbcdb12d8bc41f6f3", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-40294.rs:6:19\n    |\n LL | trait Foo: Sized {\n-   | ---------------- required by `Foo`\n+   | ---------------- required by this bound in `Foo`\n ...\n LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`"}, {"sha": "b536325810a3b1d18d0d5b3ed606a732eaefb68e", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,8 +3,12 @@ error[E0277]: the trait bound `U1: std::marker::Copy` is not satisfied\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `std::marker::Copy` is not implemented for `U1`\n+   | \n+  ::: $SRC_DIR/libcore/clone.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n+   |                                 ---- required by this bound in `std::clone::AssertParamIsCopy`\n    |\n-   = note: required by `std::clone::AssertParamIsCopy`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the current scope"}, {"sha": "ae0cd5af4b05335980d1513532b658320f954348", "filename": "src/test/ui/union/union-derive-eq.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -3,8 +3,12 @@ error[E0277]: the trait bound `PartialEqNotEq: std::cmp::Eq` is not satisfied\n    |\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `PartialEqNotEq`\n+   | \n+  ::: $SRC_DIR/libcore/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               -- required by this bound in `std::cmp::AssertParamIsEq`\n    |\n-   = note: required by `std::cmp::AssertParamIsEq`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7f5ce5d02a582f10ee375995dc22544a2184f0e0", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/unsized-enum.rs:6:36\n    |\n LL | enum Foo<U> { FooSome(U), FooNone }\n-   | ----------- required by `Foo`\n+   |      --- - required by this bound in `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time"}, {"sha": "990cea97723e2e115c44a96d1881521f479b0569", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-inherent-impl-self-type.rs:7:17\n    |\n LL | struct S5<Y>(Y);\n-   | ---------------- required by `S5`\n+   |        -- - required by this bound in `S5`\n LL | \n LL | impl<X: ?Sized> S5<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time"}, {"sha": "b9e226ccbf1cdd5f0fdcbf6213c37bf227bbe166", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/unsized-struct.rs:6:36\n    |\n LL | struct Foo<T> { data: T }\n-   | ------------- required by `Foo`\n+   |        --- - required by this bound in `Foo`\n LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time"}, {"sha": "08ceabecb274339710403ccb9b8eaa9336e1536c", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-trait-impl-self-type.rs:10:17\n    |\n LL | struct S5<Y>(Y);\n-   | ---------------- required by `S5`\n+   |        -- - required by this bound in `S5`\n LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time"}, {"sha": "22f31c9f79f84eba8805e0e1fddf55f4f0cf2e65", "filename": "src/test/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `NotCopy: std::marker::Copy` is not satisfied\n   --> $DIR/wf-const-type.rs:10:12\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n-   | --------------------- required by `IsCopy`\n+   |        ------   ---- required by this bound in `IsCopy`\n ...\n LL | const FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`"}, {"sha": "88d8c5990224bff9109d0606e4c3ffc8391784ed", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-bound.rs:10:14\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   | ----------------------- required by `ExtraCopy`\n+   |       ---------   ---- required by this bound in `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "d45ab9529873cc51e56c2626c1ee4073244a9732", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-fields-struct-variant.rs:13:9\n    |\n LL | struct IsCopy<T:Copy> {\n-   | --------------------- required by `IsCopy`\n+   |        ------   ---- required by this bound in `IsCopy`\n ...\n LL |         f: IsCopy<A>\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`"}, {"sha": "013407bcc6826448fb266a765d42e2d7a4be902a", "filename": "src/test/ui/wf/wf-enum-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-fields.rs:12:17\n    |\n LL | struct IsCopy<T:Copy> {\n-   | --------------------- required by `IsCopy`\n+   |        ------   ---- required by this bound in `IsCopy`\n ...\n LL |     SomeVariant(IsCopy<A>)\n    |                 ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`"}, {"sha": "adae536138b6023c98ad705e0b7b8b3ff9a3002b", "filename": "src/test/ui/wf/wf-fn-where-clause.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -13,5 +13,8 @@ fn bar() where Vec<dyn Copy>:, {}\n //~^ ERROR E0277\n //~| ERROR E0038\n \n+struct Vec<T> {\n+    t: T,\n+}\n \n fn main() { }"}, {"sha": "c5a7a5b06116705eab335f686b14fef33a14e759", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-fn-where-clause.rs:8:24\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   | ----------------------- required by `ExtraCopy`\n+   |       ---------   ---- required by this bound in `ExtraCopy`\n LL | \n LL | fn foo<T,U>() where T: ExtraCopy<U>\n    |                        ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`\n@@ -17,10 +17,12 @@ error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` ca\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n    |                ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+...\n+LL | struct Vec<T> {\n+   |        --- - required by this bound in `Vec`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-   = note: required by `std::vec::Vec`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n   --> $DIR/wf-fn-where-clause.rs:12:16"}, {"sha": "7312233aa542ef89ab8c1e960cd548d22ab0ae22", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: MyHash` is not satisfied\n   --> $DIR/wf-impl-associated-type-trait.rs:17:5\n    |\n LL | pub struct MySet<T:MyHash> {\n-   | -------------------------- required by `MySet`\n+   |            -----   ------ required by this bound in `MySet`\n ...\n LL |     type Bar = MySet<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `MyHash` is not implemented for `T`"}, {"sha": "67a5562b6bc5deb73fe32d237f18059758c165f6", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-arg.rs:10:14\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   | ------------------------- required by `MustBeCopy`\n+   |        ----------   ---- required by this bound in `MustBeCopy`\n ...\n LL | fn bar<T>(_: &MustBeCopy<T>)\n    |              ^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "545ee559b3fe3e1f4f5ebcc0d79bd68f32c501be", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-ret.rs:10:16\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   | ------------------------- required by `MustBeCopy`\n+   |        ----------   ---- required by this bound in `MustBeCopy`\n ...\n LL | fn bar<T>() -> MustBeCopy<T>\n    |                ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "0d8c6b14c56e0ce55394b7d8375b5c624301566c", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-type-arg.rs:9:5\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   | ------------------------- required by `MustBeCopy`\n+   |        ----------   ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn(MustBeCopy<T>)\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "b7c8bf303f34c588c7d825e1c8b77af701299577", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-type-ret.rs:9:5\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   | ------------------------- required by `MustBeCopy`\n+   |        ----------   ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: fn() -> MustBeCopy<T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "e54cc17ccbef5bd8b236b2a02052aa3d1dc18123", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-where-clause.rs:10:14\n    |\n LL | trait MustBeCopy<T:Copy> {\n-   | ------------------------ required by `MustBeCopy`\n+   |       ----------   ---- required by this bound in `MustBeCopy`\n ...\n LL |     where T: MustBeCopy<U>\n    |              ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "699c3fe1a6316a481e010fec07104b09ec22d2fa", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-obj-type-trait.rs:11:5\n    |\n LL | struct MustBeCopy<T:Copy> {\n-   | ------------------------- required by `MustBeCopy`\n+   |        ----------   ---- required by this bound in `MustBeCopy`\n ...\n LL |     x: dyn Object<MustBeCopy<T>>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "172e763650a2f40b4e7d2e8c008c70a8c96cb054", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-inherent-impl-method-where-clause.rs:12:27\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   | ----------------------- required by `ExtraCopy`\n+   |       ---------   ---- required by this bound in `ExtraCopy`\n ...\n LL |     fn foo(self) where T: ExtraCopy<U>\n    |                           ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "1ac5aba3cad3bf73b8522425a245af0c08957a6c", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-inherent-impl-where-clause.rs:11:29\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   | ----------------------- required by `ExtraCopy`\n+   |       ---------   ---- required by this bound in `ExtraCopy`\n ...\n LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n    |                             ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "ec31710e86123786eb229b8d3c5ba38ced9d7623", "filename": "src/test/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `NotCopy: std::marker::Copy` is not satisfied\n   --> $DIR/wf-static-type.rs:10:13\n    |\n LL | struct IsCopy<T:Copy> { t: T }\n-   | --------------------- required by `IsCopy`\n+   |        ------   ---- required by this bound in `IsCopy`\n ...\n LL | static FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`"}, {"sha": "848a2eb8beef6722c7426b38d6111737557b963e", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-struct-bound.rs:10:14\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   | ----------------------- required by `ExtraCopy`\n+   |       ---------   ---- required by this bound in `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "a748a1c9c39541f987b3d8ba9d2c6fb3dc5d2d5d", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-struct-field.rs:12:5\n    |\n LL | struct IsCopy<T:Copy> {\n-   | --------------------- required by `IsCopy`\n+   |        ------   ---- required by this bound in `IsCopy`\n ...\n LL |     data: IsCopy<A>\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`"}, {"sha": "e568acabcd00c675ca572e42713af21c866636da", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-associated-type-bound.rs:10:17\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   | ----------------------- required by `ExtraCopy`\n+   |       ---------   ---- required by this bound in `ExtraCopy`\n ...\n LL |     type Type1: ExtraCopy<T>;\n    |                 ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "915f660f54d155ee2cf9bfd5f7bddd484e247837", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `<Self as SomeTrait>::Type1: std::marker::Copy` is\n   --> $DIR/wf-trait-associated-type-trait.rs:11:5\n    |\n LL | struct IsCopy<T:Copy> { x: T }\n-   | --------------------- required by `IsCopy`\n+   |        ------   ---- required by this bound in `IsCopy`\n LL | \n LL | trait SomeTrait {\n    |                - help: consider further restricting the associated type: `where <Self as SomeTrait>::Type1: std::marker::Copy`"}, {"sha": "0db29621e312234ab853b1544e58c473dfaa8990", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-bound.rs:10:14\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   | ----------------------- required by `ExtraCopy`\n+   |       ---------   ---- required by this bound in `ExtraCopy`\n ...\n LL |     where T: ExtraCopy<U>\n    |              ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `U`"}, {"sha": "55fc202ca51291766ff3a9e813ff8bdc7fe33b2a", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-arg.rs:11:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ----------------------- required by `Bar`\n+   |        ---   -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>) {\n    |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`"}, {"sha": "00b153317abccda2c744b006289af26d6b1af38f", "filename": "src/test/ui/wf/wf-trait-default-fn-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-ret.rs:11:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ----------------------- required by `Bar`\n+   |        ---   -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) -> Bar<Self> {\n    |                      ^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`"}, {"sha": "97210a8aa6ad225d52c927f2f0a7a6e9a1c9c78c", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-where-clause.rs:11:31\n    |\n LL | trait Bar<T:Eq+?Sized> { }\n-   | ---------------------- required by `Bar`\n+   |       ---   -- required by this bound in `Bar`\n ...\n LL |     fn bar<A>(&self) where A: Bar<Self> {\n    |                               ^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`"}, {"sha": "190721492a277ca3b780f5775bbdb7758893f870", "filename": "src/test/ui/wf/wf-trait-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-arg.rs:10:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ----------------------- required by `Bar`\n+   |        ---   -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>);\n    |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`"}, {"sha": "b8d10f4f396cf99a0504cd9eae6dd3daef18176f", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-ret.rs:10:22\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ----------------------- required by `Bar`\n+   |        ---   -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) -> &Bar<Self>;\n    |                      ^^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`"}, {"sha": "c138da032ce204864ba38ad17143416c30e1602c", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-where-clause.rs:10:49\n    |\n LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ----------------------- required by `Bar`\n+   |        ---   -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n    |                                                 ^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`"}, {"sha": "5310939af9c3db7abff453bf3a202cfc9a47e654", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=bd7ea5441ec6e447d8dae1e69de7ef4320a2aa4e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-superbound.rs:9:21\n    |\n LL | trait ExtraCopy<T:Copy> { }\n-   | ----------------------- required by `ExtraCopy`\n+   |       ---------   ---- required by this bound in `ExtraCopy`\n LL | \n LL | trait SomeTrait<T>: ExtraCopy<T> {\n    |                     ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}]}