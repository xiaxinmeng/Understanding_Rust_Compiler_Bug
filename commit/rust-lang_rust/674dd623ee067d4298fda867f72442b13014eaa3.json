{"sha": "674dd623ee067d4298fda867f72442b13014eaa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NGRkNjIzZWUwNjdkNDI5OGZkYTg2N2Y3MjQ0MmIxMzAxNGVhYTM=", "commit": {"author": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2020-11-22T15:00:48Z"}, "committer": {"name": "Mikhail Zabaluev", "email": "mikhail.zabaluev@gmail.com", "date": "2020-11-22T15:05:14Z"}, "message": "Reduce branching in write_vectored for BufWriter\n\nDo what write does and optimize for the most likely case:\nslices are much smaller than the buffer. If a slice does not fit\ncompletely in the remaining capacity of the buffer, it is left out\nrather than buffered partially. Special treatment is only left for\noversized slices that are written directly to the underlying writer.", "tree": {"sha": "ecbbe148aa0707d6032e81c4ec48b2162cda0a54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecbbe148aa0707d6032e81c4ec48b2162cda0a54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/674dd623ee067d4298fda867f72442b13014eaa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/674dd623ee067d4298fda867f72442b13014eaa3", "html_url": "https://github.com/rust-lang/rust/commit/674dd623ee067d4298fda867f72442b13014eaa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/674dd623ee067d4298fda867f72442b13014eaa3/comments", "author": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzabaluev", "id": 1198919, "node_id": "MDQ6VXNlcjExOTg5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1198919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzabaluev", "html_url": "https://github.com/mzabaluev", "followers_url": "https://api.github.com/users/mzabaluev/followers", "following_url": "https://api.github.com/users/mzabaluev/following{/other_user}", "gists_url": "https://api.github.com/users/mzabaluev/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzabaluev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzabaluev/subscriptions", "organizations_url": "https://api.github.com/users/mzabaluev/orgs", "repos_url": "https://api.github.com/users/mzabaluev/repos", "events_url": "https://api.github.com/users/mzabaluev/events{/privacy}", "received_events_url": "https://api.github.com/users/mzabaluev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00deeb35c8149508240549f5c9f3908a7ba9ee11", "url": "https://api.github.com/repos/rust-lang/rust/commits/00deeb35c8149508240549f5c9f3908a7ba9ee11", "html_url": "https://github.com/rust-lang/rust/commit/00deeb35c8149508240549f5c9f3908a7ba9ee11"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "3b3399860ba7df7f572530a4dd176476c23d878e", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/674dd623ee067d4298fda867f72442b13014eaa3/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674dd623ee067d4298fda867f72442b13014eaa3/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=674dd623ee067d4298fda867f72442b13014eaa3", "patch": "@@ -343,9 +343,8 @@ impl<W: Write> Write for BufWriter<W> {\n                 Ok(total_len)\n             }\n         } else {\n-            let mut total_written = 0;\n             let mut iter = bufs.iter();\n-            if let Some(buf) = iter.by_ref().find(|&buf| !buf.is_empty()) {\n+            let mut total_written = if let Some(buf) = iter.by_ref().find(|&buf| !buf.is_empty()) {\n                 // This is the first non-empty slice to write, so if it does\n                 // not fit in the buffer, we still get to flush and proceed.\n                 if self.buf.len() + buf.len() > self.buf.capacity() {\n@@ -360,22 +359,18 @@ impl<W: Write> Write for BufWriter<W> {\n                     return r;\n                 } else {\n                     self.buf.extend_from_slice(buf);\n-                    total_written += buf.len();\n+                    buf.len()\n                 }\n-                debug_assert!(total_written != 0);\n-            }\n+            } else {\n+                return Ok(0);\n+            };\n+            debug_assert!(total_written != 0);\n             for buf in iter {\n-                if buf.len() >= self.buf.capacity() {\n-                    // This slice should be written directly, but we have\n-                    // already buffered some of the input. Bail out,\n-                    // expecting it to be handled as the first slice in the\n-                    // next call to write_vectored.\n+                if self.buf.len() + buf.len() > self.buf.capacity() {\n                     break;\n                 } else {\n-                    total_written += self.write_to_buf(buf);\n-                    if self.buf.capacity() == self.buf.len() {\n-                        break;\n-                    }\n+                    self.buf.extend_from_slice(buf);\n+                    total_written += buf.len();\n                 }\n             }\n             Ok(total_written)"}]}