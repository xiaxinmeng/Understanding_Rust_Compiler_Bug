{"sha": "10de762f6cf87a1c41cd047ec6b9970688f48873", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZGU3NjJmNmNmODdhMWM0MWNkMDQ3ZWM2Yjk5NzA2ODhmNDg4NzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-04T09:11:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-04T09:11:34Z"}, "message": "auto merge of #11717 : DiamondLovesYou/rust/master, r=alexcrichton\n\nNote that it still doesn't allow generic types to be marked with #[simd].", "tree": {"sha": "dfab78641d5bc443a8c25aeed03c689e98a89098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfab78641d5bc443a8c25aeed03c689e98a89098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10de762f6cf87a1c41cd047ec6b9970688f48873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10de762f6cf87a1c41cd047ec6b9970688f48873", "html_url": "https://github.com/rust-lang/rust/commit/10de762f6cf87a1c41cd047ec6b9970688f48873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10de762f6cf87a1c41cd047ec6b9970688f48873/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99fe7e4b99b02ac3d3e8d4f52e27603befff8a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99fe7e4b99b02ac3d3e8d4f52e27603befff8a5", "html_url": "https://github.com/rust-lang/rust/commit/e99fe7e4b99b02ac3d3e8d4f52e27603befff8a5"}, {"sha": "7becc0f34cdbf7cc3ec31757ec2a566560e9ff62", "url": "https://api.github.com/repos/rust-lang/rust/commits/7becc0f34cdbf7cc3ec31757ec2a566560e9ff62", "html_url": "https://github.com/rust-lang/rust/commit/7becc0f34cdbf7cc3ec31757ec2a566560e9ff62"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "9d90fdb8011ffa4703a82c74d978d03402f4263d", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/10de762f6cf87a1c41cd047ec6b9970688f48873/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10de762f6cf87a1c41cd047ec6b9970688f48873/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=10de762f6cf87a1c41cd047ec6b9970688f48873", "patch": "@@ -46,6 +46,7 @@\n use std::container::Map;\n use std::libc::c_ulonglong;\n use std::option::{Option, Some, None};\n+use std::num::{Bitwise};\n \n use lib::llvm::{ValueRef, True, IntEQ, IntNE};\n use middle::trans::_match;\n@@ -424,19 +425,22 @@ fn generic_type_of(cx: &CrateContext, r: &Repr, name: Option<&str>, sizing: bool\n             let align = most_aligned.align;\n             let discr_ty = ll_inttype(cx, ity);\n             let discr_size = machine::llsize_of_alloc(cx, discr_ty) as u64;\n+            let align_units = (size + align - 1) / align - 1;\n             let pad_ty = match align {\n-                1 => Type::i8(),\n-                2 => Type::i16(),\n-                4 => Type::i32(),\n-                8 if machine::llalign_of_min(cx, Type::i64()) == 8 => Type::i64(),\n+                1 => Type::array(&Type::i8(), align_units),\n+                2 => Type::array(&Type::i16(), align_units),\n+                4 => Type::array(&Type::i32(), align_units),\n+                8 if machine::llalign_of_min(cx, Type::i64()) == 8 =>\n+                                 Type::array(&Type::i64(), align_units),\n+                a if a.population_count() == 1 => Type::array(&Type::vector(&Type::i32(), a / 4),\n+                                                              align_units),\n                 _ => fail!(\"Unsupported enum alignment: {:?}\", align)\n             };\n             assert_eq!(machine::llalign_of_min(cx, pad_ty) as u64, align);\n-            let align_units = (size + align - 1) / align;\n             assert_eq!(align % discr_size, 0);\n             let fields = ~[discr_ty,\n-              Type::array(&discr_ty, align / discr_size - 1),\n-              Type::array(&pad_ty, align_units - 1)];\n+                           Type::array(&discr_ty, align / discr_size - 1),\n+                           pad_ty];\n             match name {\n                 None => Type::struct_(fields, false),\n                 Some(name) => {"}, {"sha": "900d2befea4320ed762ca886abf7c88f010ecb86", "filename": "src/test/run-pass/simd-generics.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/10de762f6cf87a1c41cd047ec6b9970688f48873/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10de762f6cf87a1c41cd047ec6b9970688f48873/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=10de762f6cf87a1c41cd047ec6b9970688f48873", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+\n+#[feature(simd)];\n+\n+use std::ops;\n+\n+#[simd] struct f32x4(f32, f32, f32, f32);\n+\n+fn add<T: ops::Add<T, T>>(lhs: T, rhs: T) -> T {\n+    lhs + rhs\n+}\n+\n+impl ops::Add<f32x4, f32x4> for f32x4 {\n+    fn add(&self, rhs: &f32x4) -> f32x4 {\n+        *self + *rhs\n+    }\n+}\n+\n+pub fn main() {\n+    let lr = f32x4(1.0f32, 2.0f32, 3.0f32, 4.0f32);\n+\n+    // lame-o\n+    let f32x4(x, y, z, w) = add(lr, lr);\n+    assert_eq!(x, 2.0f32);\n+    assert_eq!(y, 4.0f32);\n+    assert_eq!(z, 6.0f32);\n+    assert_eq!(w, 8.0f32);\n+}"}, {"sha": "4132ec0059ff958075a55bd694c1c6973f0e0829", "filename": "src/test/run-pass/simd-issue-10604.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/10de762f6cf87a1c41cd047ec6b9970688f48873/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10de762f6cf87a1c41cd047ec6b9970688f48873/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs?ref=10de762f6cf87a1c41cd047ec6b9970688f48873", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+\n+#[allow(experimental)];\n+#[feature(simd)];\n+\n+pub fn main() {\n+    let _o = None::<std::unstable::simd::i32x4>;\n+}"}]}