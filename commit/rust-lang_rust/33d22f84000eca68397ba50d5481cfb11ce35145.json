{"sha": "33d22f84000eca68397ba50d5481cfb11ce35145", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZDIyZjg0MDAwZWNhNjgzOTdiYTUwZDU0ODFjZmIxMWNlMzUxNDU=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-03-15T14:34:22Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-03-17T19:09:07Z"}, "message": "BTree: clarify order sanity enforced by range searches", "tree": {"sha": "bb348c7e8bf4b6998c3553b597e16df885168707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb348c7e8bf4b6998c3553b597e16df885168707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33d22f84000eca68397ba50d5481cfb11ce35145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33d22f84000eca68397ba50d5481cfb11ce35145", "html_url": "https://github.com/rust-lang/rust/commit/33d22f84000eca68397ba50d5481cfb11ce35145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33d22f84000eca68397ba50d5481cfb11ce35145/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195ad4830e11a544391abe296b146450dea8411b", "url": "https://api.github.com/repos/rust-lang/rust/commits/195ad4830e11a544391abe296b146450dea8411b", "html_url": "https://github.com/rust-lang/rust/commit/195ad4830e11a544391abe296b146450dea8411b"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "40f3d5510cdc00e2ba896469409c17828af2b5a8", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33d22f84000eca68397ba50d5481cfb11ce35145/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d22f84000eca68397ba50d5481cfb11ce35145/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=33d22f84000eca68397ba50d5481cfb11ce35145", "patch": "@@ -1018,6 +1018,9 @@ impl<K, V> BTreeMap<K, V> {\n     ///\n     /// Panics if range `start > end`.\n     /// Panics if range `start == end` and both bounds are `Excluded`.\n+    /// May panic if the [`Ord`] implementation of type `T` is ill-defined,\n+    /// either because it does not form a total order or because it does not\n+    /// correspond to the [`Ord`] implementation of type `K`.\n     ///\n     /// # Examples\n     ///\n@@ -1061,6 +1064,9 @@ impl<K, V> BTreeMap<K, V> {\n     ///\n     /// Panics if range `start > end`.\n     /// Panics if range `start == end` and both bounds are `Excluded`.\n+    /// May panic if the [`Ord`] implementation of type `T` is ill-defined,\n+    /// either because it does not form a total order or because it does not\n+    /// correspond to the [`Ord`] implementation of type `K`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "4399feaccc9b7a6b137cb9954601bb9eda5d7f8a", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/33d22f84000eca68397ba50d5481cfb11ce35145/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d22f84000eca68397ba50d5481cfb11ce35145/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=33d22f84000eca68397ba50d5481cfb11ce35145", "patch": "@@ -29,11 +29,18 @@ impl<BorrowType, K, V> LeafRange<BorrowType, K, V> {\n \n impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n     /// Finds the distinct leaf edges delimiting a specified range in a tree.\n-    /// Returns either a pair of different handles into the same tree or a pair\n-    /// of empty options.\n+    ///\n+    /// If such distinct edges exist, returns them in ascending order, meaning\n+    /// that a non-zero number of calls to `next_unchecked` on the `front` of\n+    /// the result and/or calls to `next_back_unchecked` on the `back` of the\n+    /// result will eventually reach the same edge.\n+    ///\n+    /// If there are no such edges, i.e., if the tree contains no key within\n+    /// the range, returns a pair of empty options.\n+    ///\n     /// # Safety\n-    /// Unless `BorrowType` is `Immut`, do not use the duplicate handles to\n-    /// visit the same KV twice.\n+    /// Unless `BorrowType` is `Immut`, do not use the handles to visit the same\n+    /// KV twice.\n     unsafe fn find_leaf_edges_spanning_range<Q: ?Sized, R>(\n         self,\n         range: R,"}, {"sha": "7443db95203df55ea9aebdff59156a5d12e35b86", "filename": "library/alloc/src/collections/btree/search.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/33d22f84000eca68397ba50d5481cfb11ce35145/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33d22f84000eca68397ba50d5481cfb11ce35145/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs?ref=33d22f84000eca68397ba50d5481cfb11ce35145", "patch": "@@ -68,13 +68,18 @@ impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Lea\n     /// of the range is different from the edge matching the upper bound, i.e.,\n     /// the nearest node that has at least one key contained in the range.\n     ///\n-    /// If found, returns an `Ok` with that node, the pair of edge indices in it\n-    /// delimiting the range, and the corresponding pair of bounds for\n-    /// continuing the search in the child nodes, in case the node is internal.\n+    /// If found, returns an `Ok` with that node, the strictly ascending pair of\n+    /// edge indices in the node delimiting the range, and the corresponding\n+    /// pair of bounds for continuing the search in the child nodes, in case\n+    /// the node is internal.\n     ///\n     /// If not found, returns an `Err` with the leaf edge matching the entire\n     /// range.\n     ///\n+    /// As a diagnostic service, panics if the range specifies impossible bounds\n+    /// or if it witnesses that the `Ord` implementation of `Q` violates total\n+    /// order or is inconsistent with the `Ord` implementation of `K`.\n+    ///\n     /// The result is meaningful only if the tree is ordered by key.\n     pub fn search_tree_for_bifurcation<'r, Q: ?Sized, R>(\n         mut self,\n@@ -115,6 +120,10 @@ impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Lea\n             let (lower_edge_idx, lower_child_bound) = self.find_lower_bound_index(lower_bound);\n             let (upper_edge_idx, upper_child_bound) = self.find_upper_bound_index(upper_bound);\n             if lower_edge_idx > upper_edge_idx {\n+                // Since we already checked the range bounds, this can only\n+                // happen if `Q: Ord` does not implement a total order or does\n+                // not correspond to the `K: Ord` implementation that is used\n+                // while populating the tree.\n                 panic!(\"Ord is ill-defined in BTreeMap range\")\n             }\n             if lower_edge_idx < upper_edge_idx {"}]}