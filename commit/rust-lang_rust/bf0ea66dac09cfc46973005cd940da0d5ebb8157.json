{"sha": "bf0ea66dac09cfc46973005cd940da0d5ebb8157", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMGVhNjZkYWMwOWNmYzQ2OTczMDA1Y2Q5NDBkYTBkNWViYjgxNTc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-22T01:32:23Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-24T00:42:50Z"}, "message": "libcore: update bytes/str reader to work with regions.\n\nThis optimizes away a copy.", "tree": {"sha": "6d9439acffbcf64c7d1bdc5ff5918697e2b865f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9439acffbcf64c7d1bdc5ff5918697e2b865f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0ea66dac09cfc46973005cd940da0d5ebb8157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0ea66dac09cfc46973005cd940da0d5ebb8157", "html_url": "https://github.com/rust-lang/rust/commit/bf0ea66dac09cfc46973005cd940da0d5ebb8157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0ea66dac09cfc46973005cd940da0d5ebb8157/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b6bea9531c400aa14c69d5193634a7215381b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6bea9531c400aa14c69d5193634a7215381b91", "html_url": "https://github.com/rust-lang/rust/commit/6b6bea9531c400aa14c69d5193634a7215381b91"}], "stats": {"total": 87, "additions": 37, "deletions": 50}, "files": [{"sha": "5d04ab8bf1a6125e3e2d4a3a8039849eb4731dc7", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf0ea66dac09cfc46973005cd940da0d5ebb8157/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0ea66dac09cfc46973005cd940da0d5ebb8157/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=bf0ea66dac09cfc46973005cd940da0d5ebb8157", "patch": "@@ -259,16 +259,17 @@ fn check_variants_T<T: copy>(\n                 // It would be best to test the *crate* for stability, but\n                 // testing the string for stability is easier and ok for now.\n                 let handler = diagnostic::mk_handler(none);\n-                let str3 =\n+                let str3 = do io::with_str_reader(\"\") |rdr| {\n                     @as_str(|a|pprust::print_crate(\n                         codemap,\n                         intr,\n                         diagnostic::mk_span_handler(handler, codemap),\n                         crate2,\n                         filename,\n-                        io::str_reader(~\"\"), a,\n+                        rdr, a,\n                         pprust::no_ann(),\n-                        false));\n+                        false))\n+                };\n                 match cx.mode {\n                   tm_converge => {\n                     check_roundtrip_convergence(str3, 1u);\n@@ -419,7 +420,7 @@ fn parse_and_print(code: @~str) -> ~str {\n     write_file(filename, *code);\n     let crate = parse::parse_crate_from_source_str(\n         filename, code, ~[], sess);\n-    io::with_str_reader(*code, |rdr| {\n+    do io::with_str_reader(*code) |rdr| {\n         as_str(|a|\n                pprust::print_crate(\n                    sess.cm,\n@@ -431,7 +432,7 @@ fn parse_and_print(code: @~str) -> ~str {\n                    rdr, a,\n                    pprust::no_ann(),\n                    false) )\n-    })\n+    }\n }\n \n fn has_raw_pointers(c: ast::crate) -> bool {"}, {"sha": "a2b02f55b228997bfa9a64bf9104fbfee44de855", "filename": "src/libcore/io.rs", "status": "modified", "additions": 30, "deletions": 44, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bf0ea66dac09cfc46973005cd940da0d5ebb8157/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0ea66dac09cfc46973005cd940da0d5ebb8157/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=bf0ea66dac09cfc46973005cd940da0d5ebb8157", "patch": "@@ -272,60 +272,42 @@ fn file_reader(path: ~str) -> result<Reader, ~str> {\n \n // Byte buffer readers\n \n-type ByteBuf = {buf: ~[const u8], mut pos: uint, len: uint};\n+type ByteBuf = {buf: &[const u8], mut pos: uint};\n \n impl ByteBuf: Reader {\n     fn read(buf: &[mut u8], len: uint) -> uint {\n-        let count = uint::min(len, self.len - self.pos);\n+        let count = uint::min(len, self.buf.len() - self.pos);\n \n-        vec::u8::memcpy(buf, vec::const_view(self.buf, self.pos, self.len),\n+        vec::u8::memcpy(buf,\n+                        vec::const_view(self.buf, self.pos, self.buf.len()),\n                         count);\n \n         self.pos += count;\n \n         count\n     }\n     fn read_byte() -> int {\n-        if self.pos == self.len { return -1; }\n+        if self.pos == self.buf.len() { return -1; }\n         let b = self.buf[self.pos];\n         self.pos += 1u;\n         return b as int;\n     }\n     // FIXME (#2738): implement this\n     fn unread_byte(_byte: int) { error!(\"Unimplemented: unread_byte\"); fail; }\n-    fn eof() -> bool { self.pos == self.len }\n+    fn eof() -> bool { self.pos == self.buf.len() }\n     fn seek(offset: int, whence: SeekStyle) {\n         let pos = self.pos;\n-        self.pos = seek_in_buf(offset, pos, self.len, whence);\n+        self.pos = seek_in_buf(offset, pos, self.buf.len(), whence);\n     }\n     fn tell() -> uint { self.pos }\n }\n \n-fn bytes_reader(bytes: ~[u8]) -> Reader {\n-    bytes_reader_between(bytes, 0u, vec::len(bytes))\n+fn with_bytes_reader<t>(bytes: &[u8], f: fn(Reader) -> t) -> t {\n+    f({buf: bytes, mut pos: 0u} as Reader)\n }\n \n-fn bytes_reader_between(bytes: ~[u8], start: uint, end: uint) -> Reader {\n-    {buf: bytes, mut pos: start, len: end} as Reader\n-}\n-\n-fn with_bytes_reader<t>(bytes: ~[u8], f: fn(Reader) -> t) -> t {\n-    f(bytes_reader(bytes))\n-}\n-\n-fn with_bytes_reader_between<t>(bytes: ~[u8], start: uint, end: uint,\n-                                f: fn(Reader) -> t) -> t {\n-    f(bytes_reader_between(bytes, start, end))\n-}\n-\n-fn str_reader(s: ~str) -> Reader {\n-    bytes_reader(str::to_bytes(s))\n-}\n-\n-fn with_str_reader<T>(s: ~str, f: fn(Reader) -> T) -> T {\n-    do str::as_bytes(s) |bytes| {\n-        with_bytes_reader_between(bytes, 0u, str::len(s), f)\n-    }\n+fn with_str_reader<T>(s: &str, f: fn(Reader) -> T) -> T {\n+    str::byte_slice(s, |bytes| with_bytes_reader(bytes, f))\n }\n \n // Writing\n@@ -847,9 +829,10 @@ mod tests {\n \n     #[test]\n     fn test_readchars_empty() {\n-        let inp : io::Reader = io::str_reader(~\"\");\n-        let res : ~[char] = inp.read_chars(128u);\n-        assert(vec::len(res) == 0u);\n+        do io::with_str_reader(~\"\") |inp| {\n+            let res : ~[char] = inp.read_chars(128u);\n+            assert(vec::len(res) == 0u);\n+        }\n     }\n \n     #[test]\n@@ -862,13 +845,14 @@ mod tests {\n             29983, 38152, 30340, 27748,\n             21273, 20999, 32905, 27748];\n         fn check_read_ln(len : uint, s: ~str, ivals: ~[int]) {\n-            let inp : io::Reader = io::str_reader(s);\n-            let res : ~[char] = inp.read_chars(len);\n-            if (len <= vec::len(ivals)) {\n-                assert(vec::len(res) == len);\n+            do io::with_str_reader(s) |inp| {\n+                let res : ~[char] = inp.read_chars(len);\n+                if (len <= vec::len(ivals)) {\n+                    assert(vec::len(res) == len);\n+                }\n+                assert(vec::slice(ivals, 0u, vec::len(res)) ==\n+                       vec::map(res, |x| x as int));\n             }\n-            assert(vec::slice(ivals, 0u, vec::len(res)) ==\n-                   vec::map(res, |x| x as int));\n         }\n         let mut i = 0u;\n         while i < 8u {\n@@ -881,16 +865,18 @@ mod tests {\n \n     #[test]\n     fn test_readchar() {\n-        let inp : io::Reader = io::str_reader(~\"\u751f\");\n-        let res : char = inp.read_char();\n-        assert(res as int == 29983);\n+        do io::with_str_reader(~\"\u751f\") |inp| {\n+            let res : char = inp.read_char();\n+            assert(res as int == 29983);\n+        }\n     }\n \n     #[test]\n     fn test_readchar_empty() {\n-        let inp : io::Reader = io::str_reader(~\"\");\n-        let res : char = inp.read_char();\n-        assert(res as int == -1);\n+        do io::with_str_reader(~\"\") |inp| {\n+            let res : char = inp.read_char();\n+            assert(res as int == -1);\n+        }\n     }\n \n     #[test]"}, {"sha": "b4ae83bb702b732119d7f78aeb55729cb2896c8b", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf0ea66dac09cfc46973005cd940da0d5ebb8157/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0ea66dac09cfc46973005cd940da0d5ebb8157/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=bf0ea66dac09cfc46973005cd940da0d5ebb8157", "patch": "@@ -69,7 +69,7 @@ mod test {\n     #[test]\n     fn read_simple_board() {\n         let s = #include_str(\"./maps/contest1.map\");\n-        read_board_grid(io::str_reader(s));\n+        io::with_str_reader(s, read_board_grid)\n     }\n }\n "}]}