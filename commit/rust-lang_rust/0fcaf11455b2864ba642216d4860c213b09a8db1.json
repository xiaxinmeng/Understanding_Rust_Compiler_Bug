{"sha": "0fcaf11455b2864ba642216d4860c213b09a8db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmY2FmMTE0NTViMjg2NGJhNjQyMjE2ZDQ4NjBjMjEzYjA5YThkYjE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-05-06T15:57:04Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-05-16T21:04:09Z"}, "message": "rustc_codegen_ssa: append blocks to functions w/o creating a builder.", "tree": {"sha": "8869e94e354677917bc58240cdb301996cad9da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8869e94e354677917bc58240cdb301996cad9da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fcaf11455b2864ba642216d4860c213b09a8db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcaf11455b2864ba642216d4860c213b09a8db1", "html_url": "https://github.com/rust-lang/rust/commit/0fcaf11455b2864ba642216d4860c213b09a8db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fcaf11455b2864ba642216d4860c213b09a8db1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "402e9efc56fb21464a0cddf9aeab57c7512cf71d", "url": "https://api.github.com/repos/rust-lang/rust/commits/402e9efc56fb21464a0cddf9aeab57c7512cf71d", "html_url": "https://github.com/rust-lang/rust/commit/402e9efc56fb21464a0cddf9aeab57c7512cf71d"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "bc9d99ed4a122a2a9480e97587e6f393b9da54f9", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=0fcaf11455b2864ba642216d4860c213b09a8db1", "patch": "@@ -118,24 +118,16 @@ macro_rules! builder_methods_for_value_instructions {\n }\n \n impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n-    fn new_block<'b>(cx: &'a CodegenCx<'ll, 'tcx>, llfn: &'ll Value, name: &'b str) -> Self {\n-        let mut bx = Builder::with_cx(cx);\n-        let llbb = unsafe {\n-            let name = SmallCStr::new(name);\n-            llvm::LLVMAppendBasicBlockInContext(cx.llcx, llfn, name.as_ptr())\n-        };\n-        bx.position_at_end(llbb);\n+    fn build(cx: &'a CodegenCx<'ll, 'tcx>, llbb: &'ll BasicBlock) -> Self {\n+        let bx = Builder::with_cx(cx);\n+        unsafe {\n+            llvm::LLVMPositionBuilderAtEnd(bx.llbuilder, llbb);\n+        }\n         bx\n     }\n \n-    fn with_cx(cx: &'a CodegenCx<'ll, 'tcx>) -> Self {\n-        // Create a fresh builder from the crate context.\n-        let llbuilder = unsafe { llvm::LLVMCreateBuilderInContext(cx.llcx) };\n-        Builder { llbuilder, cx }\n-    }\n-\n-    fn build_sibling_block(&self, name: &str) -> Self {\n-        Builder::new_block(self.cx, self.llfn(), name)\n+    fn cx(&self) -> &CodegenCx<'ll, 'tcx> {\n+        self.cx\n     }\n \n     fn llbb(&self) -> &'ll BasicBlock {\n@@ -144,12 +136,22 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn set_span(&mut self, _span: Span) {}\n \n-    fn position_at_end(&mut self, llbb: &'ll BasicBlock) {\n+    fn append_block(cx: &'a CodegenCx<'ll, 'tcx>, llfn: &'ll Value, name: &str) -> &'ll BasicBlock {\n         unsafe {\n-            llvm::LLVMPositionBuilderAtEnd(self.llbuilder, llbb);\n+            let name = SmallCStr::new(name);\n+            llvm::LLVMAppendBasicBlockInContext(cx.llcx, llfn, name.as_ptr())\n         }\n     }\n \n+    fn append_sibling_block(&mut self, name: &str) -> &'ll BasicBlock {\n+        Self::append_block(self.cx, self.llfn(), name)\n+    }\n+\n+    fn build_sibling_block(&mut self, name: &str) -> Self {\n+        let llbb = self.append_sibling_block(name);\n+        Self::build(self.cx, llbb)\n+    }\n+\n     fn ret_void(&mut self) {\n         unsafe {\n             llvm::LLVMBuildRetVoid(self.llbuilder);\n@@ -1144,10 +1146,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildZExt(self.llbuilder, val, dest_ty, UNNAMED) }\n     }\n \n-    fn cx(&self) -> &CodegenCx<'ll, 'tcx> {\n-        self.cx\n-    }\n-\n     fn do_not_inline(&mut self, llret: &'ll Value) {\n         llvm::Attribute::NoInline.apply_callsite(llvm::AttributePlace::Function, llret);\n     }\n@@ -1161,6 +1159,12 @@ impl StaticBuilderMethods for Builder<'a, 'll, 'tcx> {\n }\n \n impl Builder<'a, 'll, 'tcx> {\n+    fn with_cx(cx: &'a CodegenCx<'ll, 'tcx>) -> Self {\n+        // Create a fresh builder from the crate context.\n+        let llbuilder = unsafe { llvm::LLVMCreateBuilderInContext(cx.llcx) };\n+        Builder { llbuilder, cx }\n+    }\n+\n     pub fn llfn(&self) -> &'ll Value {\n         unsafe { llvm::LLVMGetBasicBlockParent(self.llbb()) }\n     }"}, {"sha": "019bf4a09a7870000ef18d685fa297c39642e595", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=0fcaf11455b2864ba642216d4860c213b09a8db1", "patch": "@@ -223,7 +223,8 @@ fn declare_unused_fn(cx: &CodegenCx<'ll, 'tcx>, def_id: &DefId) -> Instance<'tcx\n \n fn codegen_unused_fn_and_counter(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) {\n     let llfn = cx.get_fn(instance);\n-    let mut bx = Builder::new_block(cx, llfn, \"unused_function\");\n+    let llbb = Builder::append_block(cx, llfn, \"unused_function\");\n+    let mut bx = Builder::build(cx, llbb);\n     let fn_name = bx.get_pgo_func_name_var(instance);\n     let hash = bx.const_u64(0);\n     let num_counters = bx.const_u32(1);"}, {"sha": "22d513d66d1cc87aeb4a84abc7473ed09d7650b8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=0fcaf11455b2864ba642216d4860c213b09a8db1", "patch": "@@ -678,7 +678,8 @@ fn gen_fn<'ll, 'tcx>(\n     cx.apply_target_cpu_attr(llfn);\n     // FIXME(eddyb) find a nicer way to do this.\n     unsafe { llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::InternalLinkage) };\n-    let bx = Builder::new_block(cx, llfn, \"entry-block\");\n+    let llbb = Builder::append_block(cx, llfn, \"entry-block\");\n+    let bx = Builder::build(cx, llbb);\n     codegen(bx);\n     llfn\n }"}, {"sha": "ac6a1a90bfd06d377fca53f4fa9f36daf893e72b", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=0fcaf11455b2864ba642216d4860c213b09a8db1", "patch": "@@ -409,7 +409,8 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx.set_frame_pointer_elimination(llfn);\n         cx.apply_target_cpu_attr(llfn);\n \n-        let mut bx = Bx::new_block(&cx, llfn, \"top\");\n+        let llbb = Bx::append_block(&cx, llfn, \"top\");\n+        let mut bx = Bx::build(&cx, llbb);\n \n         bx.insert_reference_to_gdb_debug_scripts_section_global();\n "}, {"sha": "93200bd1f264a4465faf3e8e1366a6779f3fa1a4", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=0fcaf11455b2864ba642216d4860c213b09a8db1", "patch": "@@ -386,7 +386,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Create the failure block and the conditional branch to it.\n         let lltarget = helper.llblock(self, target);\n-        let panic_block = self.new_block(\"panic\");\n+        let panic_block = bx.build_sibling_block(\"panic\");\n         if expected {\n             bx.cond_br(cond, lltarget, panic_block.llbb());\n         } else {\n@@ -1289,8 +1289,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         })\n     }\n \n-    pub fn new_block(&self, name: &str) -> Bx {\n-        Bx::new_block(self.cx, self.llfn, name)\n+    // FIXME(eddyb) replace with `build_sibling_block`/`append_sibling_block`\n+    // (which requires having a `Bx` already, and not all callers do).\n+    fn new_block(&self, name: &str) -> Bx {\n+        let llbb = Bx::append_block(self.cx, self.llfn, name);\n+        Bx::build(self.cx, llbb)\n     }\n \n     /// Get the backend `BasicBlock` for a MIR `BasicBlock`, either already\n@@ -1300,17 +1303,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn llbb(&mut self, bb: mir::BasicBlock) -> Bx::BasicBlock {\n         self.cached_llbbs[bb].unwrap_or_else(|| {\n             // FIXME(eddyb) only name the block if `fewer_names` is `false`.\n-            // FIXME(eddyb) create the block directly, without a builder.\n-            let llbb = self.new_block(&format!(\"{:?}\", bb)).llbb();\n+            let llbb = Bx::append_block(self.cx, self.llfn, &format!(\"{:?}\", bb));\n             self.cached_llbbs[bb] = Some(llbb);\n             llbb\n         })\n     }\n \n     pub fn build_block(&mut self, bb: mir::BasicBlock) -> Bx {\n-        let mut bx = Bx::with_cx(self.cx);\n-        bx.position_at_end(self.llbb(bb));\n-        bx\n+        let llbb = self.llbb(bb);\n+        Bx::build(self.cx, llbb)\n     }\n \n     fn make_return_dest("}, {"sha": "3bbc481b61093fccfa1fe09ae051095f6ebb5aac", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=0fcaf11455b2864ba642216d4860c213b09a8db1", "patch": "@@ -144,7 +144,8 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let debug_context = cx.create_function_debug_context(instance, &fn_abi, llfn, &mir);\n \n-    let mut bx = Bx::new_block(cx, llfn, \"start\");\n+    let start_llbb = Bx::append_block(cx, llfn, \"start\");\n+    let mut bx = Bx::build(cx, start_llbb);\n \n     if mir.basic_blocks().iter().any(|bb| bb.is_cleanup) {\n         bx.set_personality_fn(cx.eh_personality());\n@@ -159,7 +160,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             .indices()\n             .map(|bb| {\n                 if bb == mir::START_BLOCK && !reentrant_start_block {\n-                    Some(bx.llbb())\n+                    Some(start_llbb)\n                 } else {\n                     None\n                 }"}, {"sha": "29b2db5d4d7af2696726f7865dd62c3885b8443c", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcaf11455b2864ba642216d4860c213b09a8db1/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=0fcaf11455b2864ba642216d4860c213b09a8db1", "patch": "@@ -40,14 +40,21 @@ pub trait BuilderMethods<'a, 'tcx>:\n     + HasParamEnv<'tcx>\n     + HasTargetSpec\n {\n-    fn new_block<'b>(cx: &'a Self::CodegenCx, llfn: Self::Function, name: &'b str) -> Self;\n-    fn with_cx(cx: &'a Self::CodegenCx) -> Self;\n-    fn build_sibling_block(&self, name: &str) -> Self;\n+    fn build(cx: &'a Self::CodegenCx, llbb: Self::BasicBlock) -> Self;\n+\n     fn cx(&self) -> &Self::CodegenCx;\n     fn llbb(&self) -> Self::BasicBlock;\n+\n     fn set_span(&mut self, span: Span);\n \n-    fn position_at_end(&mut self, llbb: Self::BasicBlock);\n+    // FIXME(eddyb) replace uses of this with `append_sibling_block`.\n+    fn append_block(cx: &'a Self::CodegenCx, llfn: Self::Function, name: &str) -> Self::BasicBlock;\n+\n+    fn append_sibling_block(&mut self, name: &str) -> Self::BasicBlock;\n+\n+    // FIXME(eddyb) replace with callers using `append_sibling_block`.\n+    fn build_sibling_block(&mut self, name: &str) -> Self;\n+\n     fn ret_void(&mut self);\n     fn ret(&mut self, v: Self::Value);\n     fn br(&mut self, dest: Self::BasicBlock);"}]}