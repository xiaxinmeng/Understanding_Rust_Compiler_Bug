{"sha": "702096da17254239d09e1095b060c083322b8ac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjA5NmRhMTcyNTQyMzlkMDllMTA5NWIwNjBjMDgzMzIyYjhhYzI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T23:15:06Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-10T21:03:08Z"}, "message": "Implement a `find_descendant` method for `MovePath`", "tree": {"sha": "a79627d722163286d6e076d261573e488880b813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a79627d722163286d6e076d261573e488880b813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/702096da17254239d09e1095b060c083322b8ac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/702096da17254239d09e1095b060c083322b8ac2", "html_url": "https://github.com/rust-lang/rust/commit/702096da17254239d09e1095b060c083322b8ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/702096da17254239d09e1095b060c083322b8ac2/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c64dfd76e8fc1e0d2b3d293cc134476e861cbccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64dfd76e8fc1e0d2b3d293cc134476e861cbccb", "html_url": "https://github.com/rust-lang/rust/commit/c64dfd76e8fc1e0d2b3d293cc134476e861cbccb"}], "stats": {"total": 88, "additions": 47, "deletions": 41}, "files": [{"sha": "e4eb8506846c0b60b571ef0fc9603e780f2a2277", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/702096da17254239d09e1095b060c083322b8ac2/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702096da17254239d09e1095b060c083322b8ac2/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=702096da17254239d09e1095b060c083322b8ac2", "patch": "@@ -4,7 +4,6 @@\n use rustc::mir::{BasicBlock, Location};\n use rustc_index::bit_set::{BitIter, BitSet, HybridBitSet};\n \n-use crate::dataflow::move_paths::{HasMoveData, MovePathIndex};\n use crate::dataflow::{BitDenotation, DataflowResults, GenKillSet};\n \n use std::borrow::Borrow;\n@@ -168,43 +167,3 @@ where\n         self.stmt_trans.apply(&mut self.curr_state)\n     }\n }\n-\n-impl<'tcx, T, DR> FlowAtLocation<'tcx, T, DR>\n-where\n-    T: HasMoveData<'tcx> + BitDenotation<'tcx, Idx = MovePathIndex>,\n-    DR: Borrow<DataflowResults<'tcx, T>>,\n-{\n-    pub fn has_any_child_of(&self, mpi: T::Idx) -> Option<T::Idx> {\n-        // We process `mpi` before the loop below, for two reasons:\n-        // - it's a little different from the loop case (we don't traverse its\n-        //   siblings);\n-        // - ~99% of the time the loop isn't reached, and this code is hot, so\n-        //   we don't want to allocate `todo` unnecessarily.\n-        if self.contains(mpi) {\n-            return Some(mpi);\n-        }\n-        let move_data = self.operator().move_data();\n-        let move_path = &move_data.move_paths[mpi];\n-        let mut todo = if let Some(child) = move_path.first_child {\n-            vec![child]\n-        } else {\n-            return None;\n-        };\n-\n-        while let Some(mpi) = todo.pop() {\n-            if self.contains(mpi) {\n-                return Some(mpi);\n-            }\n-            let move_path = &move_data.move_paths[mpi];\n-            if let Some(child) = move_path.first_child {\n-                todo.push(child);\n-            }\n-            // After we've processed the original `mpi`, we should always\n-            // traverse the siblings of any of its children.\n-            if let Some(sibling) = move_path.next_sibling {\n-                todo.push(sibling);\n-            }\n-        }\n-        return None;\n-    }\n-}"}, {"sha": "614a276164334203584bb1a64edf8aa3547f2f3c", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/702096da17254239d09e1095b060c083322b8ac2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/702096da17254239d09e1095b060c083322b8ac2/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=702096da17254239d09e1095b060c083322b8ac2", "patch": "@@ -72,6 +72,41 @@ impl<'tcx> MovePath<'tcx> {\n \n         parents\n     }\n+\n+    /// Finds the closest descendant of `self` for which `f` returns `true` using a breadth-first\n+    /// search.\n+    ///\n+    /// `f` will **not** be called on `self`.\n+    pub fn find_descendant(\n+        &self,\n+        move_paths: &IndexVec<MovePathIndex, MovePath<'_>>,\n+        f: impl Fn(MovePathIndex) -> bool,\n+    ) -> Option<MovePathIndex> {\n+        let mut todo = if let Some(child) = self.first_child {\n+            vec![child]\n+        } else {\n+            return None;\n+        };\n+\n+        while let Some(mpi) = todo.pop() {\n+            if f(mpi) {\n+                return Some(mpi);\n+            }\n+\n+            let move_path = &move_paths[mpi];\n+            if let Some(child) = move_path.first_child {\n+                todo.push(child);\n+            }\n+\n+            // After we've processed the original `mpi`, we should always\n+            // traverse the siblings of any of its children.\n+            if let Some(sibling) = move_path.next_sibling {\n+                todo.push(sibling);\n+            }\n+        }\n+\n+        None\n+    }\n }\n \n impl<'tcx> fmt::Debug for MovePath<'tcx> {\n@@ -333,4 +368,16 @@ impl<'tcx> MoveData<'tcx> {\n             }\n         }\n     }\n+\n+    pub fn find_in_move_path_or_its_descendants(\n+        &self,\n+        root: MovePathIndex,\n+        pred: impl Fn(MovePathIndex) -> bool,\n+    ) -> Option<MovePathIndex> {\n+        if pred(root) {\n+            return Some(root);\n+        }\n+\n+        self.move_paths[root].find_descendant(&self.move_paths, pred)\n+    }\n }"}]}