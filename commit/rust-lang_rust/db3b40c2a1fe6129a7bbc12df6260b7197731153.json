{"sha": "db3b40c2a1fe6129a7bbc12df6260b7197731153", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiM2I0MGMyYTFmZTYxMjlhN2JiYzEyZGY2MjYwYjcxOTc3MzExNTM=", "commit": {"author": {"name": "Philipp Gesang", "email": "phg@phi-gamma.net", "date": "2020-01-21T20:46:38Z"}, "committer": {"name": "Philipp Gesang", "email": "phg@phi-gamma.net", "date": "2020-01-21T20:48:07Z"}, "message": "Cleanup: rewrite conditional as match\n\nAs suggested by @Centril.\n\nSigned-off-by: Philipp Gesang <phg@phi-gamma.net>", "tree": {"sha": "fde7f51bbe28297dff554ef30a9403a420193afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fde7f51bbe28297dff554ef30a9403a420193afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db3b40c2a1fe6129a7bbc12df6260b7197731153", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMVlAWeTE6+fgRVjnE2DsCzzD1m0FAl4nY6MACgkQE2DsCzzD\n1m06DRAAzsfSnL0fzETOrbKYq8hTjmseatPpmRgx36B2OJg6C9CVNLGS4VJsfJNU\nHRva4UATWExyrPr4CB4tfyaV3EibviKfB98wMOIb3Q0eYPUmvIMMotcUs1JVGV9i\nVZmqPFzjbeKu6Z0BYWut7aDOlH8eRhk39U48vjVZ5radkcefRN9CsKY9JXmXacxV\no0TSTQBEYvUsfFnDdkB+IUYtqvNJVqbJWE2htH1PAp/JxCCyuL7ISms9MqnFU5lE\nqFKjI7umRyIlmQJEJ8KrrAt7/N6kTEJE/Nw+E9c3S51VQC4VcV1j+s5aAdMJGcw8\n+C+Z+gewQgLDNdFl+zm38WpsTVctwTu0RJ+FY1v/Qy1HXvt1rYfR53ffjLQe/VpK\nwCMHr0EhweLLgj1XYbG8wR/C7AQwz8bLyy82JzZI0iy8KSWV7L9ofaiY+uBzzcAg\nBLHNcdNwVb865oDjIoJnbKLJtBATMfSYWecnIabrYGl6NovJ9xAHmjEzLwTTDHdd\nfl7jUT1Ku4oEzDalf/28rxnToKpF0R9mVBG1S40qMVI2fa9nPKgb9El1wrEJHd2T\nib5ilVUqFlP58EZSEU2dNsPBNGGlndmqDNE/cT1KTulI2uqlwPEPbhdUWqEzdx4m\n24PDNDT2W0UUwFuYNSEequng5mz0OwIxoRruZOG8GeN51Uj7rcY=\n=csfr\n-----END PGP SIGNATURE-----", "payload": "tree fde7f51bbe28297dff554ef30a9403a420193afa\nparent 02e66baac6882ef30e607d2bca98929f01758957\nauthor Philipp Gesang <phg@phi-gamma.net> 1579639598 +0100\ncommitter Philipp Gesang <phg@phi-gamma.net> 1579639687 +0100\n\nCleanup: rewrite conditional as match\n\nAs suggested by @Centril.\n\nSigned-off-by: Philipp Gesang <phg@phi-gamma.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db3b40c2a1fe6129a7bbc12df6260b7197731153", "html_url": "https://github.com/rust-lang/rust/commit/db3b40c2a1fe6129a7bbc12df6260b7197731153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db3b40c2a1fe6129a7bbc12df6260b7197731153/comments", "author": {"login": "phi-gamma", "id": 1437713, "node_id": "MDQ6VXNlcjE0Mzc3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1437713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phi-gamma", "html_url": "https://github.com/phi-gamma", "followers_url": "https://api.github.com/users/phi-gamma/followers", "following_url": "https://api.github.com/users/phi-gamma/following{/other_user}", "gists_url": "https://api.github.com/users/phi-gamma/gists{/gist_id}", "starred_url": "https://api.github.com/users/phi-gamma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phi-gamma/subscriptions", "organizations_url": "https://api.github.com/users/phi-gamma/orgs", "repos_url": "https://api.github.com/users/phi-gamma/repos", "events_url": "https://api.github.com/users/phi-gamma/events{/privacy}", "received_events_url": "https://api.github.com/users/phi-gamma/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phi-gamma", "id": 1437713, "node_id": "MDQ6VXNlcjE0Mzc3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1437713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phi-gamma", "html_url": "https://github.com/phi-gamma", "followers_url": "https://api.github.com/users/phi-gamma/followers", "following_url": "https://api.github.com/users/phi-gamma/following{/other_user}", "gists_url": "https://api.github.com/users/phi-gamma/gists{/gist_id}", "starred_url": "https://api.github.com/users/phi-gamma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phi-gamma/subscriptions", "organizations_url": "https://api.github.com/users/phi-gamma/orgs", "repos_url": "https://api.github.com/users/phi-gamma/repos", "events_url": "https://api.github.com/users/phi-gamma/events{/privacy}", "received_events_url": "https://api.github.com/users/phi-gamma/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e66baac6882ef30e607d2bca98929f01758957", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e66baac6882ef30e607d2bca98929f01758957", "html_url": "https://github.com/rust-lang/rust/commit/02e66baac6882ef30e607d2bca98929f01758957"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "2ba12baaf6d6e5aac290edba6b61c44ac574b915", "filename": "src/librustc/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/db3b40c2a1fe6129a7bbc12df6260b7197731153/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db3b40c2a1fe6129a7bbc12df6260b7197731153/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=db3b40c2a1fe6129a7bbc12df6260b7197731153", "patch": "@@ -59,49 +59,45 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn describe_enclosure(&self, hir_id: hir::HirId) -> Option<&'static str> {\n         let hir = &self.tcx.hir();\n         let node = hir.find(hir_id)?;\n-        if let hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. }) = &node {\n-            self.describe_generator(*body_id).or_else(|| {\n-                Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n-                    \"an async function\"\n-                } else {\n-                    \"a function\"\n+        match &node {\n+            hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. }) => {\n+                self.describe_generator(*body_id).or_else(|| {\n+                    Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n+                        \"an async function\"\n+                    } else {\n+                        \"a function\"\n+                    })\n                 })\n-            })\n-        } else if let hir::Node::TraitItem(hir::TraitItem {\n-            kind: hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)),\n-            ..\n-        }) = &node\n-        {\n-            self.describe_generator(*body_id).or_else(|| Some(\"a trait method\"))\n-        } else if let hir::Node::ImplItem(hir::ImplItem {\n-            kind: hir::ImplItemKind::Method(sig, body_id),\n-            ..\n-        }) = &node\n-        {\n-            self.describe_generator(*body_id).or_else(|| {\n+            }\n+            hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| Some(\"a trait method\")),\n+            hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Method(sig, body_id),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| {\n                 Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n                     \"an async method\"\n                 } else {\n                     \"a method\"\n                 })\n-            })\n-        } else if let hir::Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability),\n-            ..\n-        }) = &node\n-        {\n-            self.describe_generator(*body_id).or_else(|| {\n+            }),\n+            hir::Node::Expr(hir::Expr {\n+                kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| {\n                 Some(if gen_movability.is_some() { \"an async closure\" } else { \"a closure\" })\n-            })\n-        } else if let hir::Node::Expr(hir::Expr { .. }) = &node {\n-            let parent_hid = hir.get_parent_node(hir_id);\n-            if parent_hid != hir_id {\n-                return self.describe_enclosure(parent_hid);\n-            } else {\n-                None\n+            }),\n+            hir::Node::Expr(hir::Expr { .. }) => {\n+                let parent_hid = hir.get_parent_node(hir_id);\n+                if parent_hid != hir_id {\n+                    return self.describe_enclosure(parent_hid);\n+                } else {\n+                    None\n+                }\n             }\n-        } else {\n-            None\n+            _ => None,\n         }\n     }\n "}]}