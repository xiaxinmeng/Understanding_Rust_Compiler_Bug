{"sha": "f39d0fc10093e2564ddd457aca1755b69f01654b", "node_id": "C_kwDOAAsO6NoAKGYzOWQwZmMxMDA5M2UyNTY0ZGRkNDU3YWNhMTc1NWI2OWYwMTY1NGI", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-03-12T22:27:51Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-03-12T22:27:51Z"}, "message": "Queryify `is_doc_hidden`\n\nIt came up hot on some profiling of rustdoc I did, so hopefully turning\nit into a query will help.", "tree": {"sha": "815e9a20541813371cc460cc6e98df465ccdb902", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/815e9a20541813371cc460cc6e98df465ccdb902"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39d0fc10093e2564ddd457aca1755b69f01654b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39d0fc10093e2564ddd457aca1755b69f01654b", "html_url": "https://github.com/rust-lang/rust/commit/f39d0fc10093e2564ddd457aca1755b69f01654b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39d0fc10093e2564ddd457aca1755b69f01654b/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed2a69c4a9f3e5535461484af6266681fd7d90d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2a69c4a9f3e5535461484af6266681fd7d90d4", "html_url": "https://github.com/rust-lang/rust/commit/ed2a69c4a9f3e5535461484af6266681fd7d90d4"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "44b622c1e3d86dfad26fb2af5a9b2ea603d34ad3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f39d0fc10093e2564ddd457aca1755b69f01654b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39d0fc10093e2564ddd457aca1755b69f01654b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f39d0fc10093e2564ddd457aca1755b69f01654b", "patch": "@@ -1035,6 +1035,11 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    /// Determines whether an item is annotated with `doc(hidden)`.\n+    query is_doc_hidden(def_id: DefId) -> bool {\n+        desc { |tcx| \"checking whether `{}` is `doc(hidden)`\", tcx.def_path_str(def_id) }\n+    }\n+\n     query item_attrs(def_id: DefId) -> &'tcx [ast::Attribute] {\n         desc { |tcx| \"collecting attributes of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern"}, {"sha": "e7cef9e198b6f0438ad6cf63bfcc60ccc6a728e8", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f39d0fc10093e2564ddd457aca1755b69f01654b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39d0fc10093e2564ddd457aca1755b69f01654b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f39d0fc10093e2564ddd457aca1755b69f01654b", "patch": "@@ -41,7 +41,7 @@ use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::CrateStoreDyn;\n use rustc_span::symbol::{kw, Ident, Symbol};\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n use rustc_target::abi::Align;\n \n use std::hash::Hash;\n@@ -2125,14 +2125,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.sess.contains_name(&self.get_attrs(did), attr)\n     }\n \n-    /// Determines whether an item is annotated with `doc(hidden)`.\n-    pub fn is_doc_hidden(self, did: DefId) -> bool {\n-        self.get_attrs(did)\n-            .iter()\n-            .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })\n-            .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))\n-    }\n-\n     /// Returns `true` if this is an `auto trait`.\n     pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {\n         self.trait_def(trait_def_id).has_auto_impl"}, {"sha": "984f5d99852202f00a853cc93b3871073d745811", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f39d0fc10093e2564ddd457aca1755b69f01654b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39d0fc10093e2564ddd457aca1755b69f01654b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=f39d0fc10093e2564ddd457aca1755b69f01654b", "patch": "@@ -21,7 +21,7 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::NodeIdHashingMode;\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{sym, DUMMY_SP};\n use rustc_target::abi::{Integer, Size, TargetDataLayout};\n use smallvec::SmallVec;\n use std::{fmt, iter};\n@@ -1154,6 +1154,14 @@ pub fn normalize_opaque_types<'tcx>(\n     val.fold_with(&mut visitor)\n }\n \n+/// Determines whether an item is annotated with `doc(hidden)`.\n+pub fn is_doc_hidden(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    tcx.get_attrs(def_id)\n+        .iter()\n+        .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })\n+        .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { normalize_opaque_types, ..*providers }\n+    *providers = ty::query::Providers { normalize_opaque_types, is_doc_hidden, ..*providers }\n }"}]}