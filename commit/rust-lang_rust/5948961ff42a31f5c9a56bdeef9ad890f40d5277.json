{"sha": "5948961ff42a31f5c9a56bdeef9ad890f40d5277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDg5NjFmZjQyYTMxZjVjOWE1NmJkZWVmOWFkODkwZjQwZDUyNzc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-18T20:48:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-18T20:48:31Z"}, "message": "Rollup merge of #65513 - RalfJung:fmt, r=Mark-Simulacrum\n\nreorder fmt docs for more clarity\n\nI adjusted these docs in https://github.com/rust-lang/rust/pull/65332 but wasn't happy with the result when seeing it in rustdoc. So this reorders the subsections in the \"Formatting Parameters\" section to be more logical (subsections that reference `width` come after the `width` subsection) and they also all have examples now.", "tree": {"sha": "ec055a506de45acf2143cbc78f6e3bc102c6811e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec055a506de45acf2143cbc78f6e3bc102c6811e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5948961ff42a31f5c9a56bdeef9ad890f40d5277", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqiUfCRBK7hj4Ov3rIwAAdHIIAAuhgWQvOh0jLjG0ABfOPVhf\nAFcFCFlESpFenqslomBd8U7MdDIiJQAVuP3kQ2nWAzFrfW1AhNW26sDT8O+amcTe\nVg1XMhy2Ykyjf47l9KNnnMcqEjKnsclDLASl05ankmsK/GCjmV7ob7SMYGieiHzm\n7DEow9fWoZSETMta4yqBKcQUI4zO68COxR/18NT7XqGSW2YHkL1B9HWAUMq4PIbP\nR0ZZAjEoWov1dM+8LOyepMyHGq33Rys5PKqfIJgIOIpDM6HralpBPOFxvUpwN6KN\nGwPTdR9D+L4vkiDjm51anXFphfaCS5AJZI1SGafJCFc5qvWisrdfylfVvzyUoxg=\n=jCOC\n-----END PGP SIGNATURE-----\n", "payload": "tree ec055a506de45acf2143cbc78f6e3bc102c6811e\nparent 156a55e51d41228145c1c3803ce8c1d37a53b893\nparent c0b7e769a0f76a76fc5d239d886e5b8a69648b10\nauthor Tyler Mandry <tmandry@gmail.com> 1571431711 -0700\ncommitter GitHub <noreply@github.com> 1571431711 -0700\n\nRollup merge of #65513 - RalfJung:fmt, r=Mark-Simulacrum\n\nreorder fmt docs for more clarity\n\nI adjusted these docs in https://github.com/rust-lang/rust/pull/65332 but wasn't happy with the result when seeing it in rustdoc. So this reorders the subsections in the \"Formatting Parameters\" section to be more logical (subsections that reference `width` come after the `width` subsection) and they also all have examples now.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5948961ff42a31f5c9a56bdeef9ad890f40d5277", "html_url": "https://github.com/rust-lang/rust/commit/5948961ff42a31f5c9a56bdeef9ad890f40d5277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5948961ff42a31f5c9a56bdeef9ad890f40d5277/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "156a55e51d41228145c1c3803ce8c1d37a53b893", "url": "https://api.github.com/repos/rust-lang/rust/commits/156a55e51d41228145c1c3803ce8c1d37a53b893", "html_url": "https://github.com/rust-lang/rust/commit/156a55e51d41228145c1c3803ce8c1d37a53b893"}, {"sha": "c0b7e769a0f76a76fc5d239d886e5b8a69648b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b7e769a0f76a76fc5d239d886e5b8a69648b10", "html_url": "https://github.com/rust-lang/rust/commit/c0b7e769a0f76a76fc5d239d886e5b8a69648b10"}], "stats": {"total": 111, "additions": 67, "deletions": 44}, "files": [{"sha": "cbfc55233a1e0e3902444dd66e3bd182cec11c17", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 67, "deletions": 44, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/5948961ff42a31f5c9a56bdeef9ad890f40d5277/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5948961ff42a31f5c9a56bdeef9ad890f40d5277/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=5948961ff42a31f5c9a56bdeef9ad890f40d5277", "patch": "@@ -86,27 +86,74 @@\n //! parameters (corresponding to `format_spec` in the syntax above). These\n //! parameters affect the string representation of what's being formatted.\n //!\n+//! ## Width\n+//!\n+//! ```\n+//! // All of these print \"Hello x    !\"\n+//! println!(\"Hello {:5}!\", \"x\");\n+//! println!(\"Hello {:1$}!\", \"x\", 5);\n+//! println!(\"Hello {1:0$}!\", 5, \"x\");\n+//! println!(\"Hello {:width$}!\", \"x\", width = 5);\n+//! ```\n+//!\n+//! This is a parameter for the \"minimum width\" that the format should take up.\n+//! If the value's string does not fill up this many characters, then the\n+//! padding specified by fill/alignment will be used to take up the required\n+//! space (see below).\n+//!\n+//! The value for the width can also be provided as a [`usize`] in the list of\n+//! parameters by adding a postfix `$`, indicating that the second argument is\n+//! a [`usize`] specifying the width.\n+//!\n+//! Referring to an argument with the dollar syntax does not affect the \"next\n+//! argument\" counter, so it's usually a good idea to refer to arguments by\n+//! position, or use named arguments.\n+//!\n //! ## Fill/Alignment\n //!\n-//! The fill character is provided normally in conjunction with the\n-//! [`width`](#width)\n-//! parameter. This indicates that if the value being formatted is smaller than\n-//! `width` some extra characters will be printed around it. The extra\n-//! characters are specified by `fill`, and the alignment can be one of the\n-//! following options:\n+//! ```\n+//! assert_eq!(format!(\"Hello {:<5}!\", \"x\"),  \"Hello x    !\");\n+//! assert_eq!(format!(\"Hello {:-<5}!\", \"x\"), \"Hello x----!\");\n+//! assert_eq!(format!(\"Hello {:^5}!\", \"x\"),  \"Hello   x  !\");\n+//! assert_eq!(format!(\"Hello {:>5}!\", \"x\"),  \"Hello     x!\");\n+//! ```\n //!\n-//! * `<` - the argument is left-aligned in `width` columns\n-//! * `^` - the argument is center-aligned in `width` columns\n-//! * `>` - the argument is right-aligned in `width` columns\n+//! The optional fill character and alignment is provided normally in conjunction with the\n+//! [`width`](#width) parameter. It must be defined before `width`, right after the `:`.\n+//! This indicates that if the value being formatted is smaller than\n+//! `width` some extra characters will be printed around it.\n+//! Filling comes in the following variants for different alignments:\n+//!\n+//! * `[fill]<` - the argument is left-aligned in `width` columns\n+//! * `[fill]^` - the argument is center-aligned in `width` columns\n+//! * `[fill]>` - the argument is right-aligned in `width` columns\n+//!\n+//! The default [fill/alignment](#fillalignment) for non-numerics is a space and\n+//! left-aligned. The\n+//! defaults for numeric formatters is also a space but with right-alignment. If\n+//! the `0` flag (see below) is specified for numerics, then the implicit fill character is\n+//! `0`.\n //!\n //! Note that alignment may not be implemented by some types. In particular, it\n //! is not generally implemented for the `Debug` trait.  A good way to ensure\n-//! padding is applied is to format your input, then use this resulting string\n-//! to pad your output.\n+//! padding is applied is to format your input, then pad this resulting string\n+//! to obtain your output:\n+//!\n+//! ```\n+//! println!(\"Hello {:^15}!\", format!(\"{:?}\", Some(\"hi\"))); // => \"Hello   Some(\"hi\")   !\"\n+//! ```\n //!\n //! ## Sign/`#`/`0`\n //!\n-//! These can all be interpreted as flags for a particular formatter.\n+//! ```\n+//! assert_eq!(format!(\"Hello {:+}!\", 5), \"Hello +5!\");\n+//! assert_eq!(format!(\"{:#x}!\", 27), \"0x1b!\");\n+//! assert_eq!(format!(\"Hello {:05}!\", 5),  \"Hello 00005!\");\n+//! assert_eq!(format!(\"Hello {:05}!\", -5), \"Hello -0005!\");\n+//! assert_eq!(format!(\"{:#010x}!\", 27), \"0x0000001b!\");\n+//! ```\n+//!\n+//! These are all flags altering the behavior of the formatter.\n //!\n //! * `+` - This is intended for numeric types and indicates that the sign\n //!         should always be printed. Positive signs are never printed by\n@@ -121,44 +168,15 @@\n //!     * `#X` - precedes the argument with a `0x`\n //!     * `#b` - precedes the argument with a `0b`\n //!     * `#o` - precedes the argument with a `0o`\n-//! * `0` - This is used to indicate for integer formats that the padding should\n+//! * `0` - This is used to indicate for integer formats that the padding to `width` should\n //!         both be done with a `0` character as well as be sign-aware. A format\n //!         like `{:08}` would yield `00000001` for the integer `1`, while the\n //!         same format would yield `-0000001` for the integer `-1`. Notice that\n //!         the negative version has one fewer zero than the positive version.\n //!         Note that padding zeroes are always placed after the sign (if any)\n //!         and before the digits. When used together with the `#` flag, a similar\n //!         rule applies: padding zeroes are inserted after the prefix but before\n-//!         the digits.\n-//!\n-//! ## Width\n-//!\n-//! This is a parameter for the \"minimum width\" that the format should take up.\n-//! If the value's string does not fill up this many characters, then the\n-//! padding specified by fill/alignment will be used to take up the required\n-//! space.\n-//!\n-//! The default [fill/alignment](#fillalignment) for non-numerics is a space and\n-//! left-aligned. The\n-//! defaults for numeric formatters is also a space but with right-alignment. If\n-//! the `0` flag is specified for numerics, then the implicit fill character is\n-//! `0`.\n-//!\n-//! The value for the width can also be provided as a [`usize`] in the list of\n-//! parameters by using the dollar syntax indicating that the second argument is\n-//! a [`usize`] specifying the width, for example:\n-//!\n-//! ```\n-//! // All of these print \"Hello x    !\"\n-//! println!(\"Hello {:5}!\", \"x\");\n-//! println!(\"Hello {:1$}!\", \"x\", 5);\n-//! println!(\"Hello {1:0$}!\", 5, \"x\");\n-//! println!(\"Hello {:width$}!\", \"x\", width = 5);\n-//! ```\n-//!\n-//! Referring to an argument with the dollar syntax does not affect the \"next\n-//! argument\" counter, so it's usually a good idea to refer to arguments by\n-//! position, or use named arguments.\n+//!         the digits. The prefix is included in the total width.\n //!\n //! ## Precision\n //!\n@@ -235,9 +253,14 @@\n //! them with the same character. For example, the `{` character is escaped with\n //! `{{` and the `}` character is escaped with `}}`.\n //!\n+//! ```\n+//! assert_eq!(format!(\"Hello {{}}\"), \"Hello {}\");\n+//! assert_eq!(format!(\"{{ Hello\"), \"{ Hello\");\n+//! ```\n+//!\n //! # Syntax\n //!\n-//! To summarize, you can find the full grammar of format strings.\n+//! To summarize, here you can find the full grammar of format strings.\n //! The syntax for the formatting language used is drawn from other languages,\n //! so it should not be too alien. Arguments are formatted with Python-like\n //! syntax, meaning that arguments are surrounded by `{}` instead of the C-like"}]}