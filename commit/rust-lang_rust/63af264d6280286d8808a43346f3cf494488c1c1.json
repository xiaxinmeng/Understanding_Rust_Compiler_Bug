{"sha": "63af264d6280286d8808a43346f3cf494488c1c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYWYyNjRkNjI4MDI4NmQ4ODA4YTQzMzQ2ZjNjZjQ5NDQ4OGMxYzE=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-04T12:59:18Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-04T15:45:31Z"}, "message": "Spread tracing instrumentation into the polymorphization logic", "tree": {"sha": "8cfab8c8315f9f5266060385e35bcf31f11112fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cfab8c8315f9f5266060385e35bcf31f11112fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63af264d6280286d8808a43346f3cf494488c1c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63af264d6280286d8808a43346f3cf494488c1c1", "html_url": "https://github.com/rust-lang/rust/commit/63af264d6280286d8808a43346f3cf494488c1c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63af264d6280286d8808a43346f3cf494488c1c1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0559e50a6c87ca1ff17cce320be5354e318f7468", "url": "https://api.github.com/repos/rust-lang/rust/commits/0559e50a6c87ca1ff17cce320be5354e318f7468", "html_url": "https://github.com/rust-lang/rust/commit/0559e50a6c87ca1ff17cce320be5354e318f7468"}], "stats": {"total": 60, "additions": 27, "deletions": 33}, "files": [{"sha": "5b7c0ac5556465c646161f45dcf48105b8668aa9", "filename": "compiler/rustc_mir/src/monomorphize/polymorphize.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/63af264d6280286d8808a43346f3cf494488c1c1/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63af264d6280286d8808a43346f3cf494488c1c1/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpolymorphize.rs?ref=63af264d6280286d8808a43346f3cf494488c1c1", "patch": "@@ -30,9 +30,8 @@ pub fn provide(providers: &mut Providers) {\n /// Determine which generic parameters are used by the function/method/closure represented by\n /// `def_id`. Returns a bitset where bits representing unused parameters are set (`is_empty`\n /// indicates all parameters are used).\n+#[instrument(skip(tcx))]\n fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n-    debug!(\"unused_generic_params({:?})\", def_id);\n-\n     if !tcx.sess.opts.debugging_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n         return FiniteBitSet::new_empty();\n@@ -46,7 +45,7 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     }\n \n     let generics = tcx.generics_of(def_id);\n-    debug!(\"unused_generic_params: generics={:?}\", generics);\n+    debug!(?generics);\n \n     // Exit early when there are no parameters to be unused.\n     if generics.count() == 0 {\n@@ -57,11 +56,11 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     let context = tcx.hir().body_const_context(def_id.expect_local());\n     match context {\n         Some(ConstContext::ConstFn) | None if !tcx.is_mir_available(def_id) => {\n-            debug!(\"unused_generic_params: (no mir available) def_id={:?}\", def_id);\n+            debug!(\"no mir available\");\n             return FiniteBitSet::new_empty();\n         }\n         Some(_) if !tcx.is_ctfe_mir_available(def_id) => {\n-            debug!(\"unused_generic_params: (no ctfe mir available) def_id={:?}\", def_id);\n+            debug!(\"no ctfe mir available\");\n             return FiniteBitSet::new_empty();\n         }\n         _ => {}\n@@ -72,9 +71,9 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n         generics.count().try_into().expect(\"more generic parameters than can fit into a `u32`\");\n     let mut unused_parameters = FiniteBitSet::<u32>::new_empty();\n     unused_parameters.set_range(0..generics_count);\n-    debug!(\"unused_generic_params: (start) unused_parameters={:?}\", unused_parameters);\n+    debug!(?unused_parameters, \"(start)\");\n     mark_used_by_default_parameters(tcx, def_id, generics, &mut unused_parameters);\n-    debug!(\"unused_generic_params: (after default) unused_parameters={:?}\", unused_parameters);\n+    debug!(?unused_parameters, \"(after default)\");\n \n     // Visit MIR and accumululate used generic parameters.\n     let body = match context {\n@@ -85,10 +84,10 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n     };\n     let mut vis = MarkUsedGenericParams { tcx, def_id, unused_parameters: &mut unused_parameters };\n     vis.visit_body(body);\n-    debug!(\"unused_generic_params: (after visitor) unused_parameters={:?}\", unused_parameters);\n+    debug!(?unused_parameters, \"(after visitor)\");\n \n     mark_used_by_predicates(tcx, def_id, &mut unused_parameters);\n-    debug!(\"unused_generic_params: (end) unused_parameters={:?}\", unused_parameters);\n+    debug!(?unused_parameters, \"(end)\");\n \n     // Emit errors for debugging and testing if enabled.\n     if !unused_parameters.is_empty() {\n@@ -101,6 +100,7 @@ fn unused_generic_params(tcx: TyCtxt<'_>, def_id: DefId) -> FiniteBitSet<u32> {\n /// Some parameters are considered used-by-default, such as non-generic parameters and the dummy\n /// generic parameters from closures, this function marks them as used. `leaf_is_closure` should\n /// be `true` if the item that `unused_generic_params` was invoked on is a closure.\n+#[instrument(skip(tcx, def_id, generics, unused_parameters))]\n fn mark_used_by_default_parameters<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n@@ -109,12 +109,12 @@ fn mark_used_by_default_parameters<'tcx>(\n ) {\n     if !tcx.is_trait(def_id) && (tcx.is_closure(def_id) || tcx.type_of(def_id).is_generator()) {\n         for param in &generics.params {\n-            debug!(\"mark_used_by_default_parameters: (closure/gen) param={:?}\", param);\n+            debug!(?param, \"(closure/gen)\");\n             unused_parameters.clear(param.index);\n         }\n     } else {\n         for param in &generics.params {\n-            debug!(\"mark_used_by_default_parameters: (other) param={:?}\", param);\n+            debug!(?param, \"(other)\");\n             if let ty::GenericParamDefKind::Lifetime = param.kind {\n                 unused_parameters.clear(param.index);\n             }\n@@ -128,23 +128,20 @@ fn mark_used_by_default_parameters<'tcx>(\n \n /// Search the predicates on used generic parameters for any unused generic parameters, and mark\n /// those as used.\n+#[instrument(skip(tcx, def_id))]\n fn mark_used_by_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     unused_parameters: &mut FiniteBitSet<u32>,\n ) {\n     let def_id = tcx.closure_base_def_id(def_id);\n     let predicates = tcx.explicit_predicates_of(def_id);\n-    debug!(\"mark_used_by_predicates: predicates_of={:?}\", predicates);\n \n     let mut current_unused_parameters = FiniteBitSet::new_empty();\n     // Run to a fixed point to support `where T: Trait<U>, U: Trait<V>`, starting with an empty\n     // bit set so that this is skipped if all parameters are already used.\n     while current_unused_parameters != *unused_parameters {\n-        debug!(\n-            \"mark_used_by_predicates: current_unused_parameters={:?} = unused_parameters={:?}\",\n-            current_unused_parameters, unused_parameters\n-        );\n+        debug!(?current_unused_parameters, ?unused_parameters);\n         current_unused_parameters = *unused_parameters;\n \n         for (predicate, _) in predicates.predicates {\n@@ -169,13 +166,13 @@ fn mark_used_by_predicates<'tcx>(\n \n /// Emit errors for the function annotated by `#[rustc_polymorphize_error]`, labelling each generic\n /// parameter which was unused.\n+#[instrument(skip(tcx, generics))]\n fn emit_unused_generic_params_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     generics: &'tcx ty::Generics,\n     unused_parameters: &FiniteBitSet<u32>,\n ) {\n-    debug!(\"emit_unused_generic_params_error: def_id={:?}\", def_id);\n     let base_def_id = tcx.closure_base_def_id(def_id);\n     if !tcx\n         .get_attrs(base_def_id)\n@@ -185,7 +182,6 @@ fn emit_unused_generic_params_error<'tcx>(\n         return;\n     }\n \n-    debug!(\"emit_unused_generic_params_error: unused_parameters={:?}\", unused_parameters);\n     let fn_span = match tcx.opt_item_name(def_id) {\n         Some(ident) => ident.span,\n         _ => tcx.def_span(def_id),\n@@ -197,7 +193,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     while let Some(generics) = next_generics {\n         for param in &generics.params {\n             if unused_parameters.contains(param.index).unwrap_or(false) {\n-                debug!(\"emit_unused_generic_params_error: param={:?}\", param);\n+                debug!(?param);\n                 let def_span = tcx.def_span(param.def_id);\n                 err.span_label(def_span, &format!(\"generic parameter `{}` is unused\", param.name));\n             }\n@@ -219,33 +215,31 @@ struct MarkUsedGenericParams<'a, 'tcx> {\n impl<'a, 'tcx> MarkUsedGenericParams<'a, 'tcx> {\n     /// Invoke `unused_generic_params` on a body contained within the current item (e.g.\n     /// a closure, generator or constant).\n+    #[instrument(skip(self, def_id, substs))]\n     fn visit_child_body(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) {\n         let unused = self.tcx.unused_generic_params(def_id);\n-        debug!(\n-            \"visit_child_body: unused_parameters={:?} unused={:?}\",\n-            self.unused_parameters, unused\n-        );\n+        debug!(?self.unused_parameters, ?unused);\n         for (i, arg) in substs.iter().enumerate() {\n             let i = i.try_into().unwrap();\n             if !unused.contains(i).unwrap_or(false) {\n                 arg.visit_with(self);\n             }\n         }\n-        debug!(\"visit_child_body: unused_parameters={:?}\", self.unused_parameters);\n+        debug!(?self.unused_parameters);\n     }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n+    #[instrument(skip(self, local))]\n     fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n-        debug!(\"visit_local_decl: local_decl={:?}\", local_decl);\n         if local == Local::from_usize(1) {\n             let def_kind = self.tcx.def_kind(self.def_id);\n             if matches!(def_kind, DefKind::Closure | DefKind::Generator) {\n                 // Skip visiting the closure/generator that is currently being processed. This only\n                 // happens because the first argument to the closure is a reference to itself and\n                 // that will call `visit_substs`, resulting in each generic parameter captured being\n                 // considered used by default.\n-                debug!(\"visit_local_decl: skipping closure substs\");\n+                debug!(\"skipping closure substs\");\n                 return;\n             }\n         }\n@@ -263,15 +257,15 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n+    #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n         match c.val {\n             ty::ConstKind::Param(param) => {\n-                debug!(\"visit_const: param={:?}\", param);\n+                debug!(?param);\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n@@ -296,15 +290,15 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n \n         match *ty.kind() {\n             ty::Closure(def_id, substs) | ty::Generator(def_id, substs, ..) => {\n-                debug!(\"visit_ty: def_id={:?}\", def_id);\n+                debug!(?def_id);\n                 // Avoid cycle errors with generators.\n                 if def_id == self.def_id {\n                     return ControlFlow::CONTINUE;\n@@ -316,7 +310,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n                 ControlFlow::CONTINUE\n             }\n             ty::Param(param) => {\n-                debug!(\"visit_ty: param={:?}\", param);\n+                debug!(?param);\n                 self.unused_parameters.clear(param.index);\n                 ControlFlow::CONTINUE\n             }\n@@ -333,8 +327,8 @@ struct HasUsedGenericParams<'a> {\n impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n     type BreakTy = ();\n \n+    #[instrument(skip(self))]\n     fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\"visit_const: c={:?}\", c);\n         if !c.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }\n@@ -351,8 +345,8 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n         }\n     }\n \n+    #[instrument(skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        debug!(\"visit_ty: ty={:?}\", ty);\n         if !ty.has_param_types_or_consts() {\n             return ControlFlow::CONTINUE;\n         }"}]}