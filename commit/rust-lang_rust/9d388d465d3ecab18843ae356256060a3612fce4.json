{"sha": "9d388d465d3ecab18843ae356256060a3612fce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMzg4ZDQ2NWQzZWNhYjE4ODQzYWUzNTYyNTYwNjBhMzYxMmZjZTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:20:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:20:30Z"}, "message": "Rollup merge of #70551 - mark-i-m:ty-err-2, r=varkor\n\nMake all uses of ty::Error delay a span bug\n\nr? @eddyb\n\nA second attempt at https://github.com/rust-lang/rust/pull/70245\n\nresolves https://github.com/rust-lang/rust/issues/70866", "tree": {"sha": "1548bdbeea87a69b4f33eb317f5eb90bd97efe3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1548bdbeea87a69b4f33eb317f5eb90bd97efe3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d388d465d3ecab18843ae356256060a3612fce4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+iuCRBK7hj4Ov3rIwAAdHIIAEc3VSGGYog4UneAlH9n+PAo\nQA9cgFCU5eg096nC3U7f8BQQwCdqaO+cbX6OE7pAw/BQMnlhBmzloj4VaQ2mND5W\nP9f1dE16wajEP3JOzbunCIVJA10nx/GFA7G3YVAUs+rPj6O9rWjNnZXuqb7O+LqQ\nyN5ZdJ5Lsci7imHTuoiZdXpxmJLFgJPBb65KzRbinb65ybp7CiacbftPqwzDqR7U\nkY/VfjEdFjRwC6Q0kHieJTgbpBK5AOGORLw913jJQajVE2VufmKBcYKr0nuQPKEs\nwv2x5IBdWzeMidXZaBrFyelkXlP7nXsRNDmsg2TfUS0AxkKdT96eko5eACFjpK8=\n=cGg0\n-----END PGP SIGNATURE-----\n", "payload": "tree 1548bdbeea87a69b4f33eb317f5eb90bd97efe3a\nparent e55d3f9c5213fe1a25366450127bdff67ad1eca2\nparent cfdbbb5600c0a9f95dd662ce98f463d921e30cf0\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518830 -0700\ncommitter GitHub <noreply@github.com> 1592518830 -0700\n\nRollup merge of #70551 - mark-i-m:ty-err-2, r=varkor\n\nMake all uses of ty::Error delay a span bug\n\nr? @eddyb\n\nA second attempt at https://github.com/rust-lang/rust/pull/70245\n\nresolves https://github.com/rust-lang/rust/issues/70866\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d388d465d3ecab18843ae356256060a3612fce4", "html_url": "https://github.com/rust-lang/rust/commit/9d388d465d3ecab18843ae356256060a3612fce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d388d465d3ecab18843ae356256060a3612fce4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55d3f9c5213fe1a25366450127bdff67ad1eca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55d3f9c5213fe1a25366450127bdff67ad1eca2", "html_url": "https://github.com/rust-lang/rust/commit/e55d3f9c5213fe1a25366450127bdff67ad1eca2"}, {"sha": "cfdbbb5600c0a9f95dd662ce98f463d921e30cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdbbb5600c0a9f95dd662ce98f463d921e30cf0", "html_url": "https://github.com/rust-lang/rust/commit/cfdbbb5600c0a9f95dd662ce98f463d921e30cf0"}], "stats": {"total": 479, "additions": 254, "deletions": 225}, "files": [{"sha": "a64489c04c81dc4e07df0656f11415f4c42b2060", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -195,7 +195,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n                 tcx.def_key(def_id).disambiguated_data.disambiguator\n             ));\n         }\n-        ty::Error\n+        ty::Error(_)\n         | ty::Infer(_)\n         | ty::Placeholder(..)\n         | ty::Projection(..)"}, {"sha": "0c1418d3cad279ebe8d806b3dd9d62af87d1d6fe", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -5,6 +5,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(nll)]\n+#![feature(track_caller)]\n \n pub use emitter::ColorConfig;\n \n@@ -621,6 +622,7 @@ impl Handler {\n         self.inner.borrow_mut().span_bug(span, msg)\n     }\n \n+    #[track_caller]\n     pub fn delay_span_bug(&self, span: impl Into<MultiSpan>, msg: &str) {\n         self.inner.borrow_mut().delay_span_bug(span, msg)\n     }\n@@ -873,6 +875,7 @@ impl HandlerInner {\n         self.emit_diagnostic(diag.set_span(sp));\n     }\n \n+    #[track_caller]\n     fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) {\n         // This is technically `self.treat_err_as_bug()` but `delay_span_bug` is called before\n         // incrementing `err_count` by one, so we need to +1 the comparing.\n@@ -883,6 +886,7 @@ impl HandlerInner {\n         }\n         let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n         diagnostic.set_span(sp.into());\n+        diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n         self.delay_as_bug(diagnostic)\n     }\n "}, {"sha": "427cc55a428ae163846b9230c729e3383c52efa0", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -403,7 +403,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             | ty::Float(..)\n             | ty::Adt(..)\n             | ty::Str\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::Array(..)\n             | ty::Slice(..)\n             | ty::RawPtr(..)"}, {"sha": "2b8c46f1de42def2944d6e2af76d3b18bd56279e", "filename": "src/librustc_infer/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -154,7 +154,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 self.tcx\n                     .mk_const(ty::Const {\n                         val: ty::ConstKind::Placeholder(placeholder_mapped),\n-                        ty: self.tcx.types.err, // FIXME(const_generics)\n+                        ty: self.tcx.ty_error(), // FIXME(const_generics)\n                     })\n                     .into()\n             }"}, {"sha": "02bebe10ed04afa124c57bb82733c103d2c92b4e", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::Float(..)\n             | ty::Adt(..)\n             | ty::Str\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::Array(..)\n             | ty::Slice(..)\n             | ty::RawPtr(..)\n@@ -250,7 +250,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::ConstKind::Param(_)\n             | ty::ConstKind::Value(_)\n             | ty::ConstKind::Unevaluated(..)\n-            | ty::ConstKind::Error => {}\n+            | ty::ConstKind::Error(_) => {}\n         }\n \n         ct.super_fold_with(self)"}, {"sha": "91f4b3323f30efc82a5e2f21e3c3b73cbc221e4d", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -1751,9 +1751,10 @@ impl<'tcx> TypeTrace<'tcx> {\n     }\n \n     pub fn dummy(tcx: TyCtxt<'tcx>) -> TypeTrace<'tcx> {\n+        let err = tcx.ty_error();\n         TypeTrace {\n             cause: ObligationCause::dummy(),\n-            values: Types(ExpectedFound { expected: tcx.types.err, found: tcx.types.err }),\n+            values: Types(ExpectedFound { expected: err, found: err }),\n         }\n     }\n }"}, {"sha": "df166d21a36c3dce423913bb5beeeceb24ed9aa1", "filename": "src/librustc_infer/infer/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fresolve.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -189,15 +189,15 @@ impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n             match t.kind {\n                 ty::Infer(ty::TyVar(vid)) => {\n                     self.err = Some(FixupError::UnresolvedTy(vid));\n-                    self.tcx().types.err\n+                    self.tcx().ty_error()\n                 }\n                 ty::Infer(ty::IntVar(vid)) => {\n                     self.err = Some(FixupError::UnresolvedIntTy(vid));\n-                    self.tcx().types.err\n+                    self.tcx().ty_error()\n                 }\n                 ty::Infer(ty::FloatVar(vid)) => {\n                     self.err = Some(FixupError::UnresolvedFloatTy(vid));\n-                    self.tcx().types.err\n+                    self.tcx().ty_error()\n                 }\n                 ty::Infer(_) => {\n                     bug!(\"Unexpected type in full type resolver: {:?}\", t);\n@@ -228,7 +228,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n             match c.val {\n                 ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                     self.err = Some(FixupError::UnresolvedConst(vid));\n-                    return self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: c.ty });\n+                    return self.tcx().const_error(c.ty);\n                 }\n                 ty::ConstKind::Infer(InferConst::Fresh(_)) => {\n                     bug!(\"Unexpected const in full const resolver: {:?}\", c);"}, {"sha": "90962d210b5b48198f35f9e1391bda8cf16c6aeb", "filename": "src/librustc_infer/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_infer%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fsub.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -119,9 +119,9 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n                 Ok(a)\n             }\n \n-            (&ty::Error, _) | (_, &ty::Error) => {\n+            (&ty::Error(_), _) | (_, &ty::Error(_)) => {\n                 infcx.set_tainted_by_errors();\n-                Ok(self.tcx().types.err)\n+                Ok(self.tcx().ty_error())\n             }\n \n             _ => {"}, {"sha": "1dd6d837d4eafdaffe1f8bdfea93591d07f78eb6", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -889,7 +889,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::Param(..)\n             | ty::Infer(..)\n             | ty::Bound(..)\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)"}, {"sha": "69696ac9e93c062dbd36636b7394b39d149e3541", "filename": "src/librustc_middle/traits/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fquery.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -221,7 +221,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::Ref(..)\n         | ty::Str\n         | ty::Foreign(..)\n-        | ty::Error => true,\n+        | ty::Error(_) => true,\n \n         // [T; N] and [T] have same properties as T.\n         ty::Array(ty, _) | ty::Slice(ty) => trivial_dropck_outlives(tcx, ty),"}, {"sha": "db9229ae3d214b8a49b410908a22acac4e5df86a", "filename": "src/librustc_middle/ty/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2F_match.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -79,7 +79,7 @@ impl TypeRelation<'tcx> for Match<'tcx> {\n                 Err(TypeError::Sorts(relate::expected_found(self, &a, &b)))\n             }\n \n-            (&ty::Error, _) | (_, &ty::Error) => Ok(self.tcx().types.err),\n+            (&ty::Error(_), _) | (_, &ty::Error(_)) => Ok(self.tcx().ty_error()),\n \n             _ => relate::super_relate_tys(self, a, b),\n         }"}, {"sha": "a553630e4270afdb2e7fe323d880ff26259393e1", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -46,7 +46,7 @@ use rustc_session::lint::{Level, Lint};\n use rustc_session::Session;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n \n@@ -145,7 +145,6 @@ pub struct CommonTypes<'tcx> {\n     pub f64: Ty<'tcx>,\n     pub never: Ty<'tcx>,\n     pub self_param: Ty<'tcx>,\n-    pub err: Ty<'tcx>,\n \n     /// Dummy type used for the `Self` of a `TraitRef` created for converting\n     /// a trait object, and which gets removed in `ExistentialTraitRef`.\n@@ -803,7 +802,6 @@ impl<'tcx> CommonTypes<'tcx> {\n             bool: mk(Bool),\n             char: mk(Char),\n             never: mk(Never),\n-            err: mk(Error),\n             isize: mk(Int(ast::IntTy::Isize)),\n             i8: mk(Int(ast::IntTy::I8)),\n             i16: mk(Int(ast::IntTy::I16)),\n@@ -1142,6 +1140,31 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n+    #[track_caller]\n+    pub fn ty_error(self) -> Ty<'tcx> {\n+        self.ty_error_with_message(DUMMY_SP, \"TyKind::Error constructed but no error reported\")\n+    }\n+\n+    /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg to\n+    /// ensure it gets used.\n+    #[track_caller]\n+    pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n+        self.sess.delay_span_bug(span, msg);\n+        self.mk_ty(Error(super::sty::DelaySpanBugEmitted(())))\n+    }\n+\n+    /// Like `err` but for constants.\n+    #[track_caller]\n+    pub fn const_error(self, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n+        self.sess\n+            .delay_span_bug(DUMMY_SP, \"ty::ConstKind::Error constructed but no error reported.\");\n+        self.mk_const(ty::Const {\n+            val: ty::ConstKind::Error(super::sty::DelaySpanBugEmitted(())),\n+            ty,\n+        })\n+    }\n+\n     pub fn consider_optimizing<T: Fn() -> String>(&self, msg: T) -> bool {\n         let cname = self.crate_name(LOCAL_CRATE).as_str();\n         self.sess.consider_optimizing(&cname, msg)\n@@ -1845,7 +1868,7 @@ macro_rules! sty_debug_print {\n                     let variant = match t.kind {\n                         ty::Bool | ty::Char | ty::Int(..) | ty::Uint(..) |\n                             ty::Float(..) | ty::Str | ty::Never => continue,\n-                        ty::Error => /* unimportant */ continue,\n+                        ty::Error(_) => /* unimportant */ continue,\n                         $(ty::$variant(..) => &mut $variant,)*\n                     };\n                     let lt = t.flags.intersects(ty::TypeFlags::HAS_RE_INFER);"}, {"sha": "6113359ca93a72787597bd7ce95eb02757779d6c", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -286,14 +286,14 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Projection(_) => \"associated type\".into(),\n             ty::Param(p) => format!(\"type parameter `{}`\", p).into(),\n             ty::Opaque(..) => \"opaque type\".into(),\n-            ty::Error => \"type error\".into(),\n+            ty::Error(_) => \"type error\".into(),\n         }\n     }\n \n     pub fn prefix_string(&self) -> Cow<'static, str> {\n         match self.kind {\n             ty::Infer(_)\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::Bool\n             | ty::Char\n             | ty::Int(_)"}, {"sha": "b0fb179b18bdfbaecc242c11802e45c46843b99f", "filename": "src/librustc_middle/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -104,7 +104,7 @@ pub fn simplify_type(\n         }\n         ty::Opaque(def_id, _) => Some(OpaqueSimplifiedType(def_id)),\n         ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),\n-        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error => None,\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,\n     }\n }\n "}, {"sha": "bee42be8a5388912e758d69499f9399a163b77ae", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -70,7 +70,7 @@ impl FlagComputation {\n             | &ty::Str\n             | &ty::Foreign(..) => {}\n \n-            &ty::Error => self.add_flags(TypeFlags::HAS_ERROR),\n+            &ty::Error(_) => self.add_flags(TypeFlags::HAS_ERROR),\n \n             &ty::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_TY_PARAM);\n@@ -227,7 +227,7 @@ impl FlagComputation {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n             ty::ConstKind::Value(_) => {}\n-            ty::ConstKind::Error => self.add_flags(TypeFlags::HAS_ERROR),\n+            ty::ConstKind::Error(_) => self.add_flags(TypeFlags::HAS_ERROR),\n         }\n     }\n "}, {"sha": "d58ebdc8dfc4d08789e1337b67e894d26a61d696", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -1245,7 +1245,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 bug!(\"Layout::compute: unexpected type `{}`\", ty)\n             }\n \n-            ty::Param(_) | ty::Error => {\n+            ty::Param(_) | ty::Error(_) => {\n                 return Err(LayoutError::Unknown(ty));\n             }\n         })\n@@ -2141,7 +2141,7 @@ where\n             | ty::Opaque(..)\n             | ty::Param(_)\n             | ty::Infer(_)\n-            | ty::Error => bug!(\"TyAndLayout::field_type: unexpected type `{}`\", this.ty),\n+            | ty::Error(_) => bug!(\"TyAndLayout::field_type: unexpected type `{}`\", this.ty),\n         })\n     }\n "}, {"sha": "1a8693b8df711fa0f7e69513604607813260b4ea", "filename": "src/librustc_middle/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Foutlives.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -171,7 +171,7 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n             ty::Dynamic(..) |     // OutlivesObject, OutlivesFragment (*)\n             ty::Placeholder(..) |\n             ty::Bound(..) |\n-            ty::Error => {\n+            ty::Error(_) => {\n                 // (*) Function pointers and trait objects are both binders.\n                 // In the RFC, this means we would add the bound regions to\n                 // the \"bound regions list\".  In our representation, no such"}, {"sha": "6c8f23c139f6ecf6b6ca579d06c41dceb86c18dc", "filename": "src/librustc_middle/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -298,7 +298,7 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         | ty::Opaque(..)\n         | ty::Infer(_)\n         | ty::Bound(..)\n-        | ty::Error\n+        | ty::Error(_)\n         | ty::GeneratorWitness(..)\n         | ty::Never\n         | ty::Float(_) => None,"}, {"sha": "67b6433b6114327e31737dd164bc38d72d1253a5", "filename": "src/librustc_middle/ty/print/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -144,7 +144,7 @@ impl DefPathBasedNames<'tcx> {\n                 let substs = substs.truncate_to(self.tcx, generics);\n                 self.push_generic_params(substs, iter::empty(), output, debug);\n             }\n-            ty::Error\n+            ty::Error(_)\n             | ty::Bound(..)\n             | ty::Infer(_)\n             | ty::Placeholder(..)"}, {"sha": "17203fcce5e59e7583e6e3f329bdb55035b6e8e2", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -518,7 +518,7 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(write(\"{}\", infer_ty))\n                 }\n             }\n-            ty::Error => p!(write(\"[type error]\")),\n+            ty::Error(_) => p!(write(\"[type error]\")),\n             ty::Param(ref param_ty) => p!(write(\"{}\", param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n                 ty::BoundTyKind::Anon => self.pretty_print_bound_var(debruijn, bound_ty.var)?,\n@@ -919,7 +919,7 @@ pub trait PrettyPrinter<'tcx>:\n                 self.pretty_print_bound_var(debruijn, bound_var)?\n             }\n             ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n-            ty::ConstKind::Error => p!(write(\"[const error]\")),\n+            ty::ConstKind::Error(_) => p!(write(\"[const error]\")),\n         };\n         Ok(self)\n     }"}, {"sha": "0a0ff101b52032fcf2066e08b35800b1c600aaf8", "filename": "src/librustc_middle/ty/query/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -17,7 +17,7 @@ impl<'tcx> Value<'tcx> for &'_ TyS<'_> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n         // SAFETY: This is never called when `Self` is not `Ty<'tcx>`.\n         // FIXME: Represent the above fact in the trait system somehow.\n-        unsafe { std::mem::transmute::<Ty<'tcx>, Ty<'_>>(tcx.types.err) }\n+        unsafe { std::mem::transmute::<Ty<'tcx>, Ty<'_>>(tcx.ty_error()) }\n     }\n }\n \n@@ -33,7 +33,7 @@ impl<'tcx> Value<'tcx> for AdtSizedConstraint<'_> {\n         // FIXME: Represent the above fact in the trait system somehow.\n         unsafe {\n             std::mem::transmute::<AdtSizedConstraint<'tcx>, AdtSizedConstraint<'_>>(\n-                AdtSizedConstraint(tcx.intern_type_list(&[tcx.types.err])),\n+                AdtSizedConstraint(tcx.intern_type_list(&[tcx.ty_error()])),\n             )\n         }\n     }"}, {"sha": "14cddd11c438d813d7ca81dda150f71ef5fc5e0a", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -354,7 +354,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             bug!(\"bound types encountered in super_relate_tys\")\n         }\n \n-        (&ty::Error, _) | (_, &ty::Error) => Ok(tcx.types.err),\n+        (&ty::Error(_), _) | (_, &ty::Error(_)) => Ok(tcx.ty_error()),\n \n         (&ty::Never, _)\n         | (&ty::Char, _)\n@@ -524,7 +524,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n         }\n \n-        (ty::ConstKind::Error, _) | (_, ty::ConstKind::Error) => Ok(ty::ConstKind::Error),\n+        (ty::ConstKind::Error(d), _) | (_, ty::ConstKind::Error(d)) => Ok(ty::ConstKind::Error(d)),\n \n         (ty::ConstKind::Param(a_p), ty::ConstKind::Param(b_p)) if a_p.index == b_p.index => {\n             return Ok(a);"}, {"sha": "f04d31601ea5b5a8e0310d77ccdb1590a282dfed", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -911,7 +911,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             | ty::Int(_)\n             | ty::Uint(_)\n             | ty::Float(_)\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::Infer(_)\n             | ty::Param(..)\n             | ty::Bound(..)\n@@ -952,7 +952,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             | ty::Int(_)\n             | ty::Uint(_)\n             | ty::Float(_)\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::Infer(_)\n             | ty::Bound(..)\n             | ty::Placeholder(..)\n@@ -1051,7 +1051,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(..)\n-            | ty::ConstKind::Error => *self,\n+            | ty::ConstKind::Error(_) => *self,\n         }\n     }\n \n@@ -1063,7 +1063,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(_)\n-            | ty::ConstKind::Error => false,\n+            | ty::ConstKind::Error(_) => false,\n         }\n     }\n }"}, {"sha": "cf11adb0285ac3ad38837dd373426e4f5b4a8127", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -203,9 +203,15 @@ pub enum TyKind<'tcx> {\n \n     /// A placeholder for a type which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error,\n+    Error(DelaySpanBugEmitted),\n }\n \n+/// A type that is not publicly constructable. This prevents people from making `TyKind::Error`\n+/// except through `tcx.err*()`.\n+#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n+#[derive(RustcEncodable, RustcDecodable, HashStable)]\n+pub struct DelaySpanBugEmitted(pub(super) ());\n+\n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(TyKind<'_>, 24);\n@@ -1984,7 +1990,7 @@ impl<'tcx> TyS<'tcx> {\n     #[inline]\n     pub fn has_concrete_skeleton(&self) -> bool {\n         match self.kind {\n-            Param(_) | Infer(_) | Error => false,\n+            Param(_) | Infer(_) | Error(_) => false,\n             _ => true,\n         }\n     }\n@@ -2016,7 +2022,7 @@ impl<'tcx> TyS<'tcx> {\n         match self.kind {\n             FnDef(def_id, substs) => tcx.fn_sig(def_id).subst(tcx, substs),\n             FnPtr(f) => f,\n-            Error => {\n+            Error(_) => {\n                 // ignore errors (#54954)\n                 ty::Binder::dummy(FnSig::fake())\n             }\n@@ -2140,7 +2146,7 @@ impl<'tcx> TyS<'tcx> {\n             // closure type is not yet known\n             Bound(..) | Infer(_) => None,\n \n-            Error => Some(ty::ClosureKind::Fn),\n+            Error(_) => Some(ty::ClosureKind::Fn),\n \n             _ => bug!(\"cannot convert type `{:?}` to a closure kind\", self),\n         }\n@@ -2167,7 +2173,7 @@ impl<'tcx> TyS<'tcx> {\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n-            | ty::Error => true,\n+            | ty::Error(_) => true,\n \n             ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,\n \n@@ -2372,9 +2378,7 @@ impl<'tcx> Const<'tcx> {\n                 // can leak through `val` into the const we return.\n                 Ok(val) => Const::from_value(tcx, val, self.ty),\n                 Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => self,\n-                Err(ErrorHandled::Reported(ErrorReported)) => {\n-                    tcx.mk_const(ty::Const { val: ty::ConstKind::Error, ty: self.ty })\n-                }\n+                Err(ErrorHandled::Reported(ErrorReported)) => tcx.const_error(self.ty),\n             }\n         } else {\n             self\n@@ -2434,7 +2438,7 @@ pub enum ConstKind<'tcx> {\n \n     /// A placeholder for a const which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error,\n+    Error(DelaySpanBugEmitted),\n }\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "47110be53b2521ad09b296e7ecf5793122054996", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -176,7 +176,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let ty::Adt(def, substs) = ty.kind {\n             for field in def.all_fields() {\n                 let field_ty = field.ty(self, substs);\n-                if let Error = field_ty.kind {\n+                if let Error(_) = field_ty.kind {\n                     return true;\n                 }\n             }\n@@ -731,7 +731,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             | ty::Ref(..)\n             | ty::RawPtr(_)\n             | ty::FnDef(..)\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::FnPtr(_) => true,\n             ty::Tuple(_) => self.tuple_fields().all(Self::is_trivially_freeze),\n             ty::Slice(elem_ty) | ty::Array(elem_ty, _) => elem_ty.is_trivially_freeze(),\n@@ -826,7 +826,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             // called for known, fully-monomorphized types.\n             Projection(_) | Opaque(..) | Param(_) | Bound(..) | Placeholder(_) | Infer(_) => false,\n \n-            Foreign(_) | GeneratorWitness(..) | Error => false,\n+            Foreign(_) | GeneratorWitness(..) | Error(_) => false,\n         }\n     }\n \n@@ -1109,7 +1109,7 @@ pub fn needs_drop_components(\n         // Foreign types can never have destructors.\n         ty::Foreign(..) => Ok(SmallVec::new()),\n \n-        ty::Dynamic(..) | ty::Error => Err(AlwaysRequiresDrop),\n+        ty::Dynamic(..) | ty::Error(_) => Err(AlwaysRequiresDrop),\n \n         ty::Slice(ty) => needs_drop_components(ty, target_layout),\n         ty::Array(elem_ty, size) => {"}, {"sha": "d6f504fdb338bff1e68880aa7d2e48b2b2569eab", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -108,7 +108,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n             | ty::Infer(_)\n             | ty::Param(_)\n             | ty::Never\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::Placeholder(..)\n             | ty::Bound(..)\n             | ty::Foreign(..) => {}\n@@ -171,7 +171,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 | ty::ConstKind::Placeholder(_)\n                 | ty::ConstKind::Bound(..)\n                 | ty::ConstKind::Value(_)\n-                | ty::ConstKind::Error => {}\n+                | ty::ConstKind::Error(_) => {}\n \n                 ty::ConstKind::Unevaluated(_, substs, _) => {\n                     stack.extend(substs.iter().rev());"}, {"sha": "beee31812563ed4d536ea5abd4b58fb81222a767", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -264,7 +264,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                             .tcx\n                             .sess\n                             .delay_span_bug(DUMMY_SP, &format!(\"failed to normalize {:?}\", ty));\n-                        (self.infcx.tcx.types.err, None)\n+                        (self.infcx.tcx.ty_error(), None)\n                     });\n                 let constraints2 = self.add_implied_bounds(ty);\n                 normalized_inputs_and_output.push(ty);"}, {"sha": "730601ed5c03a5b541dde99b073ebb7ed2ba8f5a", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -498,7 +498,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             if place_ty.variant_index.is_none() {\n                 if place_ty.ty.references_error() {\n                     assert!(self.errors_reported);\n-                    return PlaceTy::from_ty(self.tcx().types.err);\n+                    return PlaceTy::from_ty(self.tcx().ty_error());\n                 }\n             }\n             place_ty = self.sanitize_projection(place_ty, elem, place, location)\n@@ -725,7 +725,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n     fn error(&mut self) -> Ty<'tcx> {\n         self.errors_reported = true;\n-        self.tcx().types.err\n+        self.tcx().ty_error()\n     }\n \n     fn field_ty("}, {"sha": "379117f3b846a26135307518fd57b5e90267f7f8", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::Dynamic(_, _) => self.pretty_print_type(ty),\n \n             // Placeholders (all printed as `_` to uniformize them).\n-            ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) | ty::Error => {\n+            ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) | ty::Error(_) => {\n                 write!(self, \"_\")?;\n                 Ok(self)\n             }"}, {"sha": "0cb878a49dcf1d59c2d9d519eb89abc78eea48dd", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -527,7 +527,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Early-return cases.\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error => throw_inval!(TypeckError(ErrorReported)),\n+            ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n             ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 let instance = self.resolve(def_id, substs)?;\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation."}, {"sha": "999f2fe76b4dae6cf7d49982e26f847e12228c86", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -561,7 +561,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             | ty::Generator(..) => Ok(false),\n             // Some types only occur during typechecking, they have no layout.\n             // We should not see them here and we could not check them anyway.\n-            ty::Error\n+            ty::Error(_)\n             | ty::Infer(..)\n             | ty::Placeholder(..)\n             | ty::Bound(..)"}, {"sha": "e2cf1bce733d6b2c70959c507cdb39a9b357c86e", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -687,7 +687,7 @@ fn construct_error<'a, 'tcx>(hir: Cx<'a, 'tcx>, body_id: hir::BodyId) -> Body<'t\n     let tcx = hir.tcx();\n     let owner_id = tcx.hir().body_owner(body_id);\n     let span = tcx.hir().span(owner_id);\n-    let ty = tcx.types.err;\n+    let ty = tcx.ty_error();\n     let num_params = match hir.body_owner_kind {\n         hir::BodyOwnerKind::Fn => tcx.hir().fn_decl_by_hir_id(owner_id).unwrap().inputs.len(),\n         hir::BodyOwnerKind::Closure => {\n@@ -909,7 +909,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         self.local_decls[local].mutability = mutability;\n                         self.local_decls[local].source_info.scope = self.source_scope;\n                         self.local_decls[local].local_info = if let Some(kind) = self_binding {\n-                            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(*kind))))\n+                            Some(box LocalInfo::User(ClearCrossCrate::Set(\n+                                BindingForm::ImplicitSelf(*kind),\n+                            )))\n                         } else {\n                             let binding_mode = ty::BindingMode::BindByValue(mutability);\n                             Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var("}, {"sha": "a1796c9433eac0329d92b86558bf7c66303f5cbc", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -478,7 +478,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                                     );\n \n                                     // Not a real fn, but we're not reaching codegen anyways...\n-                                    ty = cx.tcx.types.err;\n+                                    ty = cx.tcx.ty_error();\n                                     InlineAsmOperand::SymFn {\n                                         expr: Expr {\n                                             ty,"}, {"sha": "5c30b2a448c6d3a6b6d86f6c161df8870355f1ef", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -509,7 +509,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Pat<'tcx> {\n         let mut ty = self.tables.node_type(pat.hir_id);\n \n-        if let ty::Error = ty.kind {\n+        if let ty::Error(_) = ty.kind {\n             // Avoid ICEs (e.g., #50577 and #50585).\n             return Pat { span: pat.span, ty, kind: Box::new(PatKind::Wild) };\n         }\n@@ -708,7 +708,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 if adt_def.is_enum() {\n                     let substs = match ty.kind {\n                         ty::Adt(_, substs) | ty::FnDef(_, substs) => substs,\n-                        ty::Error => {\n+                        ty::Error(_) => {\n                             // Avoid ICE (#50585)\n                             return PatKind::Wild;\n                         }\n@@ -1051,7 +1051,7 @@ crate fn compare_const_vals<'tcx>(\n     let b_bits = b.try_eval_bits(tcx, param_env, ty);\n \n     if let (Some(a), Some(b)) = (a_bits, b_bits) {\n-        use ::rustc_apfloat::Float;\n+        use rustc_apfloat::Float;\n         return match ty.kind {\n             ty::Float(ast::FloatTy::F32) => {\n                 let l = ::rustc_apfloat::ieee::Single::from_bits(a);"}, {"sha": "88fb78f85e423add2e3303342314fcd09f6485f5", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -150,7 +150,7 @@ impl ExprVisitor<'tcx> {\n             _ => unreachable!(),\n         };\n         let asm_ty = match ty.kind {\n-            ty::Never | ty::Error => return None,\n+            ty::Never | ty::Error(_) => return None,\n             ty::Int(IntTy::I8) | ty::Uint(UintTy::U8) => Some(InlineAsmType::I8),\n             ty::Int(IntTy::I16) | ty::Uint(UintTy::U16) => Some(InlineAsmType::I16),\n             ty::Int(IntTy::I32) | ty::Uint(UintTy::U32) => Some(InlineAsmType::I32),\n@@ -167,7 +167,7 @@ impl ExprVisitor<'tcx> {\n                 let fields = &adt.non_enum_variant().fields;\n                 let elem_ty = fields[0].ty(self.tcx, substs);\n                 match elem_ty.kind {\n-                    ty::Never | ty::Error => return None,\n+                    ty::Never | ty::Error(_) => return None,\n                     ty::Int(IntTy::I8) | ty::Uint(UintTy::U8) => {\n                         Some(InlineAsmType::VecI8(fields.len() as u64))\n                     }"}, {"sha": "9e6e7ea962bc378f21f3dc34aab3a50e22cdb68b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -220,7 +220,7 @@ where\n             | ty::Ref(..)\n             | ty::FnPtr(..)\n             | ty::Param(..)\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::GeneratorWitness(..) => {}\n             ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {\n                 bug!(\"unexpected type: {:?}\", ty)"}, {"sha": "cae501e942b6552eca0e156cc1b403db4a83fddf", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -520,7 +520,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     pub fn get_expr_data(&self, expr: &hir::Expr<'_>) -> Option<Data> {\n         let hir_node = self.tcx.hir().expect_expr(expr.hir_id);\n         let ty = self.tables.expr_ty_adjusted_opt(&hir_node);\n-        if ty.is_none() || ty.unwrap().kind == ty::Error {\n+        if ty.is_none() || matches!(ty.unwrap().kind, ty::Error(_)) {\n             return None;\n         }\n         match expr.kind {"}, {"sha": "7d117b77cf5e5ab95484cf54b8cdb8fdd5812fb9", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -345,7 +345,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             ty::Never => \"z\",\n \n             // Placeholders (should be demangled as `_`).\n-            ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) | ty::Error => \"p\",\n+            ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) | ty::Error(_) => \"p\",\n \n             _ => \"\",\n         };\n@@ -367,7 +367,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             ty::Tuple(_) if ty.is_unit() => unreachable!(),\n \n             // Placeholders, also handled as part of basic types.\n-            ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) | ty::Error => {\n+            ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) | ty::Error(_) => {\n                 unreachable!()\n             }\n "}, {"sha": "adccdd0b2617a4760602c13c8569fe0fd6c13492", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -941,7 +941,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                             )\n                             .emit();\n \n-                        self.tcx().types.err\n+                        self.tcx().ty_error()\n                     }\n                 }\n             }\n@@ -974,7 +974,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                             )\n                             .emit();\n \n-                        self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: ct.ty })\n+                        self.tcx().const_error(ct.ty)\n                     }\n                 }\n             }\n@@ -1002,7 +1002,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             tcx,\n             ty_op: |ty| {\n                 if ty.references_error() {\n-                    return tcx.types.err;\n+                    return tcx.ty_error();\n                 } else if let ty::Opaque(def_id, substs) = ty.kind {\n                     // Check that this is `impl Trait` type is\n                     // declared by `parent_def_id` -- i.e., one whose"}, {"sha": "706cbf058b713b354ce7d985d4bba9772790c044", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -565,7 +565,7 @@ fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>>\n             }\n         }\n \n-        ty::Error => None,\n+        ty::Error(_) => None,\n \n         ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n             bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty)"}, {"sha": "e5a6c9a2e391a2a548ce895628124e121d676be7", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -1246,7 +1246,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ty::Generator(..) => Some(18),\n                 ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n-                ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => None,\n+                ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error(_) => None,\n             }\n         }\n "}, {"sha": "f4da25debd7cc3b70e5abd3303f68c40974cc6ac", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -948,7 +948,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n              ty| {\n                 let ty = self.resolve_vars_if_possible(&ty);\n                 same &=\n-                    ty.kind != ty::Error\n+                    !matches!(ty.kind, ty::Error(_))\n                         && last_ty.map_or(true, |last_ty| {\n                             // FIXME: ideally we would use `can_coerce` here instead, but `typeck` comes\n                             // *after* in the dependency graph."}, {"sha": "ed108613bfa233735952dcd4dc35c60c5e22be2d", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -784,7 +784,7 @@ struct Progress<'tcx> {\n \n impl<'tcx> Progress<'tcx> {\n     fn error(tcx: TyCtxt<'tcx>) -> Self {\n-        Progress { ty: tcx.types.err, obligations: vec![] }\n+        Progress { ty: tcx.ty_error(), obligations: vec![] }\n     }\n \n     fn with_addl_obligations(mut self, mut obligations: Vec<PredicateObligation<'tcx>>) -> Self {\n@@ -1085,7 +1085,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Bound(..)\n                     | ty::Placeholder(..)\n                     | ty::Infer(..)\n-                    | ty::Error => false,\n+                    | ty::Error(_) => false,\n                 }\n             }\n             super::ImplSourceParam(..) => {\n@@ -1440,8 +1440,8 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n                 obligation, poly_cache_entry, e,\n             );\n             debug!(\"confirm_param_env_candidate: {}\", msg);\n-            infcx.tcx.sess.delay_span_bug(obligation.cause.span, &msg);\n-            Progress { ty: infcx.tcx.types.err, obligations: vec![] }\n+            let err = infcx.tcx.ty_error_with_message(obligation.cause.span, &msg);\n+            Progress { ty: err, obligations: vec![] }\n         }\n     }\n }\n@@ -1460,7 +1460,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     let param_env = obligation.param_env;\n     let assoc_ty = match assoc_ty_def(selcx, impl_def_id, assoc_item_id) {\n         Ok(assoc_ty) => assoc_ty,\n-        Err(ErrorReported) => return Progress { ty: tcx.types.err, obligations: nested },\n+        Err(ErrorReported) => return Progress { ty: tcx.ty_error(), obligations: nested },\n     };\n \n     if !assoc_ty.item.defaultness.has_value() {\n@@ -1472,16 +1472,18 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n             \"confirm_impl_candidate: no associated type {:?} for {:?}\",\n             assoc_ty.item.ident, obligation.predicate\n         );\n-        return Progress { ty: tcx.types.err, obligations: nested };\n+        return Progress { ty: tcx.ty_error(), obligations: nested };\n     }\n     let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n     let substs =\n         translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);\n     let ty = tcx.type_of(assoc_ty.item.def_id);\n     if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n-        tcx.sess\n-            .delay_span_bug(DUMMY_SP, \"impl item and trait item have different parameter counts\");\n-        Progress { ty: tcx.types.err, obligations: nested }\n+        let err = tcx.ty_error_with_message(\n+            DUMMY_SP,\n+            \"impl item and trait item have different parameter counts\",\n+        );\n+        Progress { ty: err, obligations: nested }\n     } else {\n         Progress { ty: ty.subst(tcx, substs), obligations: nested }\n     }"}, {"sha": "d07c95270e0040411e00fe825053eb5c15cd85cc", "filename": "src/librustc_trait_selection/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -101,7 +101,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::Ref(..)\n         | ty::Str\n         | ty::Foreign(..)\n-        | ty::Error => true,\n+        | ty::Error(_) => true,\n \n         // [T; N] and [T] have same properties as T.\n         ty::Array(ty, _) | ty::Slice(ty) => trivial_dropck_outlives(tcx, ty),"}, {"sha": "3fd566eab437e8899c4f2e7b7cdf7ae57dc27eb0", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -1569,7 +1569,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n-            | ty::Error => {\n+            | ty::Error(_) => {\n                 // safe for everything\n                 Where(ty::Binder::dummy(Vec::new()))\n             }\n@@ -1613,7 +1613,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Infer(ty::FloatVar(_))\n             | ty::FnDef(..)\n             | ty::FnPtr(_)\n-            | ty::Error => Where(ty::Binder::dummy(Vec::new())),\n+            | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),\n \n             ty::Uint(_)\n             | ty::Int(_)\n@@ -1690,7 +1690,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::FnDef(..)\n             | ty::FnPtr(_)\n             | ty::Str\n-            | ty::Error\n+            | ty::Error(_)\n             | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Never\n             | ty::Char => Vec::new(),"}, {"sha": "201edf27a655cbba3d77ea2eb6e96492c8c8f26c", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n             ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n             }\n-            ty::Error => {\n+            ty::Error(_) => {\n                 self.tcx().sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n                 // We still want to check other types after encountering an error,\n                 // as this may still emit relevant errors."}, {"sha": "1825c159ff3fba47bedffdf47e277c2becd5b95f", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -392,7 +392,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 ));\n                             }\n                         }\n-                        ty::ConstKind::Error\n+                        ty::ConstKind::Error(_)\n                         | ty::ConstKind::Param(_)\n                         | ty::ConstKind::Bound(..)\n                         | ty::ConstKind::Placeholder(..) => {\n@@ -412,7 +412,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 | ty::Int(..)\n                 | ty::Uint(..)\n                 | ty::Float(..)\n-                | ty::Error\n+                | ty::Error(_)\n                 | ty::Str\n                 | ty::GeneratorWitness(..)\n                 | ty::Never"}, {"sha": "c9dd06e9f1ba2ade7d14e1c19bc517a7acb6fbe9", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -168,7 +168,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             ty::PredicateKind::WellFormed(arg) => match arg.unpack() {\n                 GenericArgKind::Type(ty) => match ty.kind {\n                     // These types are always WF.\n-                    ty::Str | ty::Placeholder(..) | ty::Error | ty::Never => {\n+                    ty::Str | ty::Placeholder(..) | ty::Error(_) | ty::Never => {\n                         chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n                     }\n \n@@ -376,7 +376,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             })\n             .intern(interner),\n             Infer(_infer) => unimplemented!(),\n-            Error => unimplemented!(),\n+            Error(_) => unimplemented!(),\n         }\n     }\n }"}, {"sha": "6339f8288d54e7f3c370b574099aeffc4e9451fd", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -271,7 +271,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n             constraints.dtorck_types.push(ty);\n         }\n \n-        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => {\n+        ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error(_) => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved.\n             return Err(NoSolution);"}, {"sha": "cf70a845af0aa54c3c83795e3b810d6d96eb7844", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -20,7 +20,7 @@ fn sized_constraint_for_ty<'tcx>(\n         Bool | Char | Int(..) | Uint(..) | Float(..) | RawPtr(..) | Ref(..) | FnDef(..)\n         | FnPtr(_) | Array(..) | Closure(..) | Generator(..) | Never => vec![],\n \n-        Str | Dynamic(..) | Slice(_) | Foreign(..) | Error | GeneratorWitness(..) => {\n+        Str | Dynamic(..) | Slice(_) | Foreign(..) | Error(_) | GeneratorWitness(..) => {\n             // these are never sized - return the target type\n             vec![ty]\n         }"}, {"sha": "7cdcb2face8232f97a4ba43dc3caed1d084b128d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -819,7 +819,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => {\n                     if let (hir::TyKind::Infer, false) = (&ty.kind, self.allow_ty_infer()) {\n                         inferred_params.push(ty.span);\n-                        tcx.types.err.into()\n+                        tcx.ty_error().into()\n                     } else {\n                         self.ast_ty_to_ty(&ty).into()\n                     }\n@@ -845,7 +845,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             // careful!\n                             if default_needs_object_self(param) {\n                                 missing_type_params.push(param.name.to_string());\n-                                tcx.types.err.into()\n+                                tcx.ty_error().into()\n                             } else {\n                                 // This is a default type parameter.\n                                 self.normalize_ty(\n@@ -865,7 +865,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             self.ty_infer(param, span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n-                            tcx.types.err.into()\n+                            tcx.ty_error().into()\n                         }\n                     }\n                     GenericParamDefKind::Const => {\n@@ -876,7 +876,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             self.ct_infer(ty, Some(param), span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n-                            tcx.mk_const(ty::Const { val: ty::ConstKind::Error, ty }).into()\n+                            tcx.const_error(ty).into()\n                         }\n                     }\n                 }\n@@ -1607,7 +1607,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"at least one trait is required for an object type\"\n             )\n             .emit();\n-            return tcx.types.err;\n+            return tcx.ty_error();\n         }\n \n         // Check that there are no gross object safety violations;\n@@ -1624,7 +1624,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     &object_safety_violations[..],\n                 )\n                 .emit();\n-                return tcx.types.err;\n+                return tcx.ty_error();\n             }\n         }\n \n@@ -2434,7 +2434,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 &path_str,\n                 item_segment.ident.name,\n             );\n-            return tcx.types.err;\n+            return tcx.ty_error();\n         };\n \n         debug!(\"qpath_to_ty: self_type={:?}\", self_ty);\n@@ -2792,7 +2792,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n             Res::Err => {\n                 self.set_tainted_by_errors();\n-                self.tcx().types.err\n+                self.tcx().ty_error()\n             }\n             _ => span_bug!(span, \"unexpected resolution: {:?}\", path.res),\n         }\n@@ -2860,7 +2860,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 };\n                 self.associated_path_to_ty(ast_ty.hir_id, ast_ty.span, ty, res, segment, false)\n                     .map(|(ty, _, _)| ty)\n-                    .unwrap_or(tcx.types.err)\n+                    .unwrap_or_else(|_| tcx.ty_error())\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n                 let length_def_id = tcx.hir().local_def_id(length.hir_id);\n@@ -2878,7 +2878,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .span_label(ast_ty.span, \"reserved keyword\")\n                 .emit();\n \n-                tcx.types.err\n+                tcx.ty_error()\n             }\n             hir::TyKind::Infer => {\n                 // Infer also appears as the type of arguments or return\n@@ -2887,7 +2887,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // handled specially and will not descend into this routine.\n                 self.ty_infer(None, ast_ty.span)\n             }\n-            hir::TyKind::Err => tcx.types.err,\n+            hir::TyKind::Err => tcx.ty_error(),\n         };\n \n         debug!(\"ast_ty_to_ty: result_ty={:?}\", result_ty);"}, {"sha": "9e23f5df3c6a8a367d9fc5821979f40ec464be49", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 && i != 0\n                 && self.if_fallback_coercion(expr.span, &arms[0].body, &mut coercion)\n             {\n-                tcx.types.err\n+                tcx.ty_error()\n             } else {\n                 // Only call this if this is not an `if` expr with an expected type and no `else`\n                 // clause to avoid duplicated type errors. (#60254)"}, {"sha": "13695be83a9da7bfe0b1dbcff73ae87421b88965", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (\n                     ty::Binder::bind(self.tcx.mk_fn_sig(\n                         self.err_args(arg_exprs.len()).into_iter(),\n-                        self.tcx.types.err,\n+                        self.tcx.ty_error(),\n                         false,\n                         hir::Unsafety::Normal,\n                         abi::Abi::Rust,"}, {"sha": "c55f0cf1fcb6811699149e3100ef5cfb3eafa0e0", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             | ty::Generator(..)\n             | ty::Adt(..)\n             | ty::Never\n-            | ty::Error => {\n+            | ty::Error(_) => {\n                 self.tcx\n                     .sess\n                     .delay_span_bug(span, &format!(\"`{:?}` should be sized but is not?\", t));"}, {"sha": "6d09ddc925ffe1f22ec44e5cf5f10326a4899cee", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -700,7 +700,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let supplied_arguments = decl.inputs.iter().map(|a| {\n             // Convert the types that the user supplied (if any), but ignore them.\n             astconv.ast_ty_to_ty(a);\n-            self.tcx.types.err\n+            self.tcx.ty_error()\n         });\n \n         if let hir::FnRetTy::Return(ref output) = decl.output {\n@@ -709,7 +709,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let result = ty::Binder::bind(self.tcx.mk_fn_sig(\n             supplied_arguments,\n-            self.tcx.types.err,\n+            self.tcx.ty_error(),\n             decl.c_variadic,\n             hir::Unsafety::Normal,\n             Abi::RustCall,"}, {"sha": "dd3f292fb56846efc60dc75ac9d8c043e1ba51db", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -162,7 +162,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         // Just ignore error types.\n         if a.references_error() || b.references_error() {\n-            return success(vec![], self.fcx.tcx.types.err, vec![]);\n+            return success(vec![], self.fcx.tcx.ty_error(), vec![]);\n         }\n \n         if a.is_never() {\n@@ -864,7 +864,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (adjustments, _) = self.register_infer_ok_obligations(ok);\n         self.apply_adjustments(expr, adjustments);\n-        Ok(if expr_ty.references_error() { self.tcx.types.err } else { target })\n+        Ok(if expr_ty.references_error() { self.tcx.ty_error() } else { target })\n     }\n \n     /// Same as `try_coerce()`, but without side-effects.\n@@ -1239,7 +1239,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         // If we see any error types, just propagate that error\n         // upwards.\n         if expression_ty.references_error() || self.merged_ty().references_error() {\n-            self.final_ty = Some(fcx.tcx.types.err);\n+            self.final_ty = Some(fcx.tcx.ty_error());\n             return;\n         }\n \n@@ -1396,7 +1396,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n \n                 err.emit_unless(assign_to_bool || unsized_return);\n \n-                self.final_ty = Some(fcx.tcx.types.err);\n+                self.final_ty = Some(fcx.tcx.ty_error());\n             }\n         }\n     }"}, {"sha": "69cfafc21648f114541db00c36f37b32fb0c2aea", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     tcx.types.never\n                 } else {\n                     // There was an error; make type-check fail.\n-                    tcx.types.err\n+                    tcx.ty_error()\n                 }\n             }\n             ExprKind::Ret(ref expr_opt) => self.check_expr_return(expr_opt.as_deref(), expr),\n@@ -284,7 +284,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Field(ref base, field) => self.check_field(expr, needs, &base, field),\n             ExprKind::Index(ref base, ref idx) => self.check_expr_index(base, idx, needs, expr),\n             ExprKind::Yield(ref value, ref src) => self.check_expr_yield(value, expr, src),\n-            hir::ExprKind::Err => tcx.types.err,\n+            hir::ExprKind::Err => tcx.ty_error(),\n         }\n     }\n \n@@ -360,7 +360,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp, None);\n                         }\n                         err.emit();\n-                        oprnd_t = tcx.types.err;\n+                        oprnd_t = tcx.ty_error();\n                     }\n                 }\n                 hir::UnOp::UnNot => {\n@@ -410,7 +410,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let tm = ty::TypeAndMut { ty, mutbl };\n         match kind {\n-            _ if tm.ty.references_error() => self.tcx.types.err,\n+            _ if tm.ty.references_error() => self.tcx.ty_error(),\n             hir::BorrowKind::Raw => {\n                 self.check_named_place_expr(oprnd);\n                 self.tcx.mk_ptr(tm)\n@@ -476,11 +476,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = match res {\n             Res::Err => {\n                 self.set_tainted_by_errors();\n-                tcx.types.err\n+                tcx.ty_error()\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {\n                 report_unexpected_variant_res(tcx, res, expr.span);\n-                tcx.types.err\n+                tcx.ty_error()\n             }\n             _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,\n         };\n@@ -560,19 +560,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         Some(ctxt) => ctxt.coerce.as_ref().map(|coerce| coerce.expected_ty()),\n                         None => {\n                             // Avoid ICE when `break` is inside a closure (#65383).\n-                            self.tcx.sess.delay_span_bug(\n+                            return tcx.ty_error_with_message(\n                                 expr.span,\n                                 \"break was outside loop, but no error was emitted\",\n                             );\n-                            return tcx.types.err;\n                         }\n                     }\n                 };\n \n                 // If the loop context is not a `loop { }`, then break with\n                 // a value is illegal, and `opt_coerce_to` will be `None`.\n                 // Just set expectation to error in that case.\n-                let coerce_to = opt_coerce_to.unwrap_or(tcx.types.err);\n+                let coerce_to = opt_coerce_to.unwrap_or_else(|| tcx.ty_error());\n \n                 // Recurse without `enclosing_breakables` borrowed.\n                 e_ty = self.check_expr_with_hint(e, coerce_to);\n@@ -592,11 +591,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(ctxt) => ctxt,\n                 None => {\n                     // Avoid ICE when `break` is inside a closure (#65383).\n-                    self.tcx.sess.delay_span_bug(\n+                    return tcx.ty_error_with_message(\n                         expr.span,\n                         \"break was outside loop, but no error was emitted\",\n                     );\n-                    return tcx.types.err;\n                 }\n             };\n \n@@ -649,14 +647,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // this can only happen if the `break` was not\n             // inside a loop at all, which is caught by the\n             // loop-checking pass.\n-            self.tcx\n-                .sess\n-                .delay_span_bug(expr.span, \"break was outside loop, but no error was emitted\");\n+            let err = self.tcx.ty_error_with_message(\n+                expr.span,\n+                \"break was outside loop, but no error was emitted\",\n+            );\n \n             // We still need to assign a type to the inner expression to\n             // prevent the ICE in #43162.\n             if let Some(ref e) = expr_opt {\n-                self.check_expr_with_hint(e, tcx.types.err);\n+                self.check_expr_with_hint(e, err);\n \n                 // ... except when we try to 'break rust;'.\n                 // ICE this expression in particular (see #43162).\n@@ -666,8 +665,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n+\n             // There was an error; make type-check fail.\n-            tcx.types.err\n+            err\n         }\n     }\n \n@@ -803,7 +803,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);\n \n         if lhs_ty.references_error() || rhs_ty.references_error() {\n-            self.tcx.types.err\n+            self.tcx.ty_error()\n         } else {\n             self.tcx.mk_unit()\n         }\n@@ -957,7 +957,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Eagerly check for some obvious errors.\n         if t_expr.references_error() || t_cast.references_error() {\n-            self.tcx.types.err\n+            self.tcx.ty_error()\n         } else {\n             // Defer other checks until we're done type checking.\n             let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n@@ -966,7 +966,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }\n-                Err(ErrorReported) => self.tcx.types.err,\n+                Err(ErrorReported) => self.tcx.ty_error(),\n             }\n         }\n     }\n@@ -1041,7 +1041,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         if element_ty.references_error() {\n-            return tcx.types.err;\n+            return tcx.ty_error();\n         }\n \n         tcx.mk_ty(ty::Array(t, count))\n@@ -1071,7 +1071,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         });\n         let tuple = self.tcx.mk_tup(elt_ts_iter);\n         if tuple.references_error() {\n-            self.tcx.types.err\n+            self.tcx.ty_error()\n         } else {\n             self.require_type_is_sized(tuple, expr.span, traits::TupleInitializerSized);\n             tuple\n@@ -1092,7 +1092,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             variant_ty\n         } else {\n             self.check_struct_fields_on_error(fields, base_expr);\n-            return self.tcx.types.err;\n+            return self.tcx.ty_error();\n         };\n \n         let path_span = match *qpath {\n@@ -1233,7 +1233,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.report_unknown_field(adt_ty, variant, field, ast_fields, kind_name, span);\n                 }\n \n-                tcx.types.err\n+                tcx.ty_error()\n             };\n \n             // Make sure to give a type to the field even if there's\n@@ -1519,7 +1519,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .emit();\n         }\n \n-        self.tcx().types.err\n+        self.tcx().ty_error()\n     }\n \n     fn ban_nonexisting_field(\n@@ -1775,7 +1775,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     err.emit();\n-                    self.tcx.types.err\n+                    self.tcx.ty_error()\n                 }\n             }\n         }\n@@ -1887,7 +1887,7 @@ pub(super) fn ty_kind_suggestion(ty: Ty<'_>) -> Option<&'static str> {\n         ty::Char => \"'a'\",\n         ty::Int(_) | ty::Uint(_) => \"42\",\n         ty::Float(_) => \"3.14159\",\n-        ty::Error | ty::Never => return None,\n+        ty::Error(_) | ty::Never => return None,\n         _ => \"value\",\n     })\n }"}, {"sha": "8651c643cee879dbcbd44acbf51b0d6763207032", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -141,11 +141,10 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         let (_, n) = match autoderef.nth(pick.autoderefs) {\n             Some(n) => n,\n             None => {\n-                self.tcx.sess.delay_span_bug(\n+                return self.tcx.ty_error_with_message(\n                     rustc_span::DUMMY_SP,\n                     &format!(\"failed autoderef {}\", pick.autoderefs),\n                 );\n-                return self.tcx.types.err;\n             }\n         };\n         assert_eq!(n, pick.autoderefs);"}, {"sha": "93bcd5cf29149d0138259f2b924fbb7365b90d33", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -400,7 +400,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .probe_instantiate_query_response(span, &orig_values, ty)\n                     .unwrap_or_else(|_| span_bug!(span, \"instantiating {:?} failed?\", ty));\n                 let ty = self.structurally_resolved_type(span, ty.value);\n-                assert_eq!(ty, self.tcx.types.err);\n+                assert!(matches!(ty.kind, ty::Error(_)));\n                 return Err(MethodError::NoMatch(NoMatchData::new(\n                     Vec::new(),\n                     Vec::new(),\n@@ -478,7 +478,7 @@ fn method_autoderef_steps<'tcx>(\n \n         let final_ty = autoderef.maybe_ambiguous_final_ty();\n         let opt_bad_ty = match final_ty.kind {\n-            ty::Infer(ty::TyVar(_)) | ty::Error => Some(MethodAutoderefBadTy {\n+            ty::Infer(ty::TyVar(_)) | ty::Error(_) => Some(MethodAutoderefBadTy {\n                 reached_raw_pointer,\n                 ty: infcx\n                     .make_query_response_ignoring_pending_obligations(inference_vars, final_ty),"}, {"sha": "9dce2851ed42c3b4677da5777300bee98941f29a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -967,8 +967,7 @@ fn diagnostic_only_typeck_tables_of<'tcx>(\n ) -> &ty::TypeckTables<'tcx> {\n     let fallback = move || {\n         let span = tcx.hir().span(tcx.hir().as_local_hir_id(def_id));\n-        tcx.sess.delay_span_bug(span, \"diagnostic only typeck table used\");\n-        tcx.types.err\n+        tcx.ty_error_with_message(span, \"diagnostic only typeck table used\")\n     };\n     typeck_tables_of_with_fallback(tcx, def_id, fallback)\n }\n@@ -3387,7 +3386,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn node_ty(&self, id: hir::HirId) -> Ty<'tcx> {\n         match self.tables.borrow().node_types().get(id) {\n             Some(&t) => t,\n-            None if self.is_tainted_by_errors() => self.tcx.types.err,\n+            None if self.is_tainted_by_errors() => self.tcx.ty_error(),\n             None => {\n                 bug!(\n                     \"no type for node {}: {} in fcx {}\",\n@@ -3501,7 +3500,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         assert!(ty.is_ty_infer());\n         let fallback = match self.type_is_unconstrained_numeric(ty) {\n-            _ if self.is_tainted_by_errors() => self.tcx().types.err,\n+            _ if self.is_tainted_by_errors() => self.tcx().ty_error(),\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n             Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n@@ -3774,7 +3773,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 tuple_arguments,\n                 None,\n             );\n-            return self.tcx.types.err;\n+            return self.tcx.ty_error();\n         }\n \n         let method = method.unwrap();\n@@ -4161,7 +4160,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn err_args(&self, len: usize) -> Vec<Ty<'tcx>> {\n-        vec![self.tcx.types.err; len]\n+        vec![self.tcx.ty_error(); len]\n     }\n \n     /// Given a vec of evaluated `FulfillmentError`s and an `fn` call argument expressions, we walk\n@@ -4305,7 +4304,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 opt_ty.unwrap_or_else(|| self.next_float_var())\n             }\n             ast::LitKind::Bool(_) => tcx.types.bool,\n-            ast::LitKind::Err(_) => tcx.types.err,\n+            ast::LitKind::Err(_) => tcx.ty_error(),\n         }\n     }\n \n@@ -4442,7 +4441,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 };\n                 let result =\n                     AstConv::associated_path_to_ty(self, hir_id, path_span, ty, res, segment, true);\n-                let ty = result.map(|(ty, _, _)| ty).unwrap_or(self.tcx().types.err);\n+                let ty = result.map(|(ty, _, _)| ty).unwrap_or_else(|_| self.tcx().ty_error());\n                 let result = result.map(|(_, kind, def_id)| (kind, def_id));\n \n                 // Write back the new resolution.\n@@ -4570,7 +4569,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) {\n         if ty.references_error() {\n-            // Override the types everywhere with `types.err` to avoid knock on errors.\n+            // Override the types everywhere with `err()` to avoid knock on errors.\n             self.write_ty(local.hir_id, ty);\n             self.write_ty(local.pat.hir_id, ty);\n             let local_ty = LocalTy { decl_ty, revealed_ty: ty };\n@@ -4790,7 +4789,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut ty = ctxt.coerce.unwrap().complete(self);\n \n         if self.has_errors.get() || ty.references_error() {\n-            ty = self.tcx.types.err\n+            ty = self.tcx.ty_error()\n         }\n \n         self.write_ty(blk.hir_id, ty);\n@@ -5378,7 +5377,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => return None,\n         };\n         let last_expr_ty = self.node_ty(last_expr.hir_id);\n-        if matches!(last_expr_ty.kind, ty::Error)\n+        if matches!(last_expr_ty.kind, ty::Error(_))\n             || self.can_sub(self.param_env, last_expr_ty, expected_ty).is_err()\n         {\n             return None;\n@@ -5538,7 +5537,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     err.emit();\n \n-                    return (tcx.types.err, res);\n+                    return (tcx.ty_error(), res);\n                 }\n             }\n         } else {\n@@ -5731,8 +5730,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .note(\"type must be known at this point\")\n                     .emit();\n             }\n-            self.demand_suptype(sp, self.tcx.types.err, ty);\n-            self.tcx.types.err\n+            let err = self.tcx.ty_error();\n+            self.demand_suptype(sp, err, ty);\n+            err\n         }\n     }\n "}, {"sha": "fe508709116473a35fd75db9b72d589482d82fc6", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                 }\n-                self.tcx.types.err\n+                self.tcx.ty_error()\n             }\n         };\n \n@@ -709,7 +709,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     err.emit();\n                 }\n-                self.tcx.types.err\n+                self.tcx.ty_error()\n             }\n         }\n     }"}, {"sha": "7965c9c9ce12aed4d391d9359a26eac35abf46c0", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -442,7 +442,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // There exists a side that didn't meet our criteria that the end-point\n             // be of a numeric or char type, as checked in `calc_side` above.\n             self.emit_err_pat_range(span, lhs, rhs);\n-            return self.tcx.types.err;\n+            return self.tcx.ty_error();\n         }\n \n         // Now that we know the types can be unified we find the unified type\n@@ -673,11 +673,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             variant_ty\n         } else {\n+            let err = self.tcx.ty_error();\n             for field in fields {\n                 let ti = TopInfo { parent_pat: Some(&pat), ..ti };\n-                self.check_pat(&field.pat, self.tcx.types.err, def_bm, ti);\n+                self.check_pat(&field.pat, err, def_bm, ti);\n             }\n-            return self.tcx.types.err;\n+            return err;\n         };\n \n         // Type-check the path.\n@@ -687,7 +688,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.check_struct_pat_fields(pat_ty, &pat, variant, fields, etc, def_bm, ti) {\n             pat_ty\n         } else {\n-            self.tcx.types.err\n+            self.tcx.ty_error()\n         }\n     }\n \n@@ -705,11 +706,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match res {\n             Res::Err => {\n                 self.set_tainted_by_errors();\n-                return tcx.types.err;\n+                return tcx.ty_error();\n             }\n             Res::Def(DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fictive | CtorKind::Fn), _) => {\n                 report_unexpected_variant_res(tcx, res, pat.span);\n-                return tcx.types.err;\n+                return tcx.ty_error();\n             }\n             Res::SelfCtor(..)\n             | Res::Def(\n@@ -788,7 +789,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let on_error = || {\n             let parent_pat = Some(pat);\n             for pat in subpats {\n-                self.check_pat(&pat, tcx.types.err, def_bm, TopInfo { parent_pat, ..ti });\n+                self.check_pat(&pat, tcx.ty_error(), def_bm, TopInfo { parent_pat, ..ti });\n             }\n         };\n         let report_unexpected_res = |res: Res| {\n@@ -824,26 +825,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if res == Res::Err {\n             self.set_tainted_by_errors();\n             on_error();\n-            return self.tcx.types.err;\n+            return self.tcx.ty_error();\n         }\n \n         // Type-check the path.\n         let (pat_ty, res) =\n             self.instantiate_value_path(segments, opt_ty, res, pat.span, pat.hir_id);\n         if !pat_ty.is_fn() {\n             report_unexpected_res(res);\n-            return tcx.types.err;\n+            return tcx.ty_error();\n         }\n \n         let variant = match res {\n             Res::Err => {\n                 self.set_tainted_by_errors();\n                 on_error();\n-                return tcx.types.err;\n+                return tcx.ty_error();\n             }\n             Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) => {\n                 report_unexpected_res(res);\n-                return tcx.types.err;\n+                return tcx.ty_error();\n             }\n             Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => tcx.expect_variant_res(res),\n             _ => bug!(\"unexpected pattern resolution: {:?}\", res),\n@@ -880,7 +881,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Pattern has wrong number of fields.\n             self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n             on_error();\n-            return tcx.types.err;\n+            return tcx.ty_error();\n         }\n         pat_ty\n     }\n@@ -1001,9 +1002,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.emit();\n             // Walk subpatterns with an expected type of `err` in this case to silence\n             // further errors being emitted when using the bindings. #50333\n-            let element_tys_iter = (0..max_len).map(|_| tcx.types.err);\n+            let element_tys_iter = (0..max_len).map(|_| tcx.ty_error());\n             for (_, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n-                self.check_pat(elem, &tcx.types.err, def_bm, ti);\n+                self.check_pat(elem, &tcx.ty_error(), def_bm, ti);\n             }\n             tcx.mk_tup(element_tys_iter)\n         } else {\n@@ -1052,7 +1053,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Occupied(occupied) => {\n                     self.error_field_already_bound(span, field.ident, *occupied.get());\n                     no_field_errors = false;\n-                    tcx.types.err\n+                    tcx.ty_error()\n                 }\n                 Vacant(vacant) => {\n                     vacant.insert(span);\n@@ -1066,7 +1067,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .unwrap_or_else(|| {\n                             inexistent_fields.push(field.ident);\n                             no_field_errors = false;\n-                            tcx.types.err\n+                            tcx.ty_error()\n                         })\n                 }\n             };\n@@ -1281,7 +1282,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.demand_eqtype_pat(span, expected, box_ty, ti);\n             (box_ty, inner_ty)\n         } else {\n-            (tcx.types.err, tcx.types.err)\n+            let err = tcx.ty_error();\n+            (err, err)\n         };\n         self.check_pat(&inner, inner_ty, def_bm, ti);\n         box_ty\n@@ -1327,7 +1329,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n         } else {\n-            (tcx.types.err, tcx.types.err)\n+            let err = tcx.ty_error();\n+            (err, err)\n         };\n         self.check_pat(&inner, inner_ty, def_bm, TopInfo { parent_pat: Some(&pat), ..ti });\n         rptr_ty\n@@ -1378,7 +1381,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if !expected.references_error() {\n                     self.error_expected_array_or_slice(span, expected);\n                 }\n-                let err = self.tcx.types.err;\n+                let err = self.tcx.ty_error();\n                 (err, Some(err), err)\n             }\n         };\n@@ -1445,7 +1448,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         // If we get here, we must have emitted an error.\n-        (Some(self.tcx.types.err), arr_ty)\n+        (Some(self.tcx.ty_error()), arr_ty)\n     }\n \n     fn error_scrutinee_inconsistent_length(&self, span: Span, min_len: u64, size: u64) {"}, {"sha": "8403c99f01bb57d549fe104e9a9ceedd7af29efb", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (closure_def_id, substs) = match ty.kind {\n             ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs)),\n             ty::Generator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n-            ty::Error => {\n+            ty::Error(_) => {\n                 // #51714: skip analysis when we have already encountered type errors\n                 return;\n             }"}, {"sha": "ba806430f17fda879afc75f85fcdadd7f87d7ad1", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -208,11 +208,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                     // to access an unexistend index. We assume that more relevant errors will\n                     // already have been emitted, so we only gate on this with an ICE if no\n                     // error has been emitted. (#64638)\n-                    self.tcx().sess.delay_span_bug(\n+                    self.fcx.tcx.ty_error_with_message(\n                         e.span,\n                         &format!(\"bad index {:?} for base: `{:?}`\", index, base),\n-                    );\n-                    self.fcx.tcx.types.err\n+                    )\n                 });\n                 let index_ty = self.fcx.resolve_vars_if_possible(&index_ty);\n \n@@ -681,7 +680,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 self.report_type_error(t);\n                 self.replaced_with_error = true;\n-                self.tcx().types.err\n+                self.tcx().ty_error()\n             }\n         }\n     }\n@@ -698,7 +697,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 self.report_const_error(ct);\n                 self.replaced_with_error = true;\n-                self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: ct.ty })\n+                self.tcx().const_error(ct.ty)\n             }\n         }\n     }"}, {"sha": "8c6161a62647346b780450776524de5e5228a51d", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> Checker<'tcx> {\n \n fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     // Destructors only work on nominal types.\n-    if let ty::Adt(..) | ty::Error = tcx.type_of(impl_did).kind {\n+    if let ty::Adt(..) | ty::Error(_) = tcx.type_of(impl_did).kind {\n         return;\n     }\n "}, {"sha": "93ee87f6c572ee5bd164247dcb11fefcabfe8789", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -296,7 +296,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     item.span,\n                 );\n             }\n-            ty::Error => {}\n+            ty::Error(_) => {}\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "3bd75095bb6021db986c5bd682a2dec7d93dd3eb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -307,8 +307,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        self.tcx().sess.delay_span_bug(span, \"bad placeholder type\");\n-        self.tcx().types.err\n+        self.tcx().ty_error_with_message(span, \"bad_placeholder_type\")\n     }\n \n     fn ct_infer(\n@@ -318,8 +317,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n         bad_placeholder_type(self.tcx(), vec![span]).emit();\n-\n-        self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty })\n+        self.tcx().const_error(ty)\n     }\n \n     fn projected_ty_from_poly_trait_ref(\n@@ -419,7 +417,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                 _ => {}\n             }\n             err.emit();\n-            self.tcx().types.err\n+            self.tcx().ty_error()\n         }\n     }\n \n@@ -1465,7 +1463,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     visitor.visit_ty(ty);\n                     let mut diag = bad_placeholder_type(tcx, visitor.0);\n                     let ret_ty = fn_sig.output();\n-                    if ret_ty != tcx.types.err {\n+                    if ret_ty != tcx.ty_error() {\n                         diag.span_suggestion(\n                             ty.span,\n                             \"replace with the correct return type\",\n@@ -2004,12 +2002,11 @@ fn associated_item_predicates(\n             // once they are handled by the trait system.\n             ty::GenericParamDefKind::Type { .. } => {\n                 unimplemented_error(\"type\");\n-                tcx.types.err.into()\n+                tcx.ty_error().into()\n             }\n             ty::GenericParamDefKind::Const => {\n                 unimplemented_error(\"const\");\n-                tcx.mk_const(ty::Const { val: ty::ConstKind::Error, ty: tcx.type_of(param.def_id) })\n-                    .into()\n+                tcx.const_error(tcx.type_of(param.def_id)).into()\n             }\n         }\n     };"}, {"sha": "cf5f2ec69d8d85ee3e0b93d5545d6595338d60b0", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -127,7 +127,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                 // Some error in the\n                                 // owner fn prevented us from populating\n                                 // the `concrete_opaque_types` table.\n-                                tcx.types.err\n+                                tcx.ty_error()\n                             } else {\n                                 // We failed to resolve the opaque type or it\n                                 // resolves to itself. Return the non-revealed\n@@ -217,11 +217,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         })\n                         | Node::TraitRef(&TraitRef { path, .. }) => &*path,\n                         _ => {\n-                            tcx.sess.delay_span_bug(\n+                            return tcx.ty_error_with_message(\n                                 DUMMY_SP,\n                                 &format!(\"unexpected const parent path {:?}\", parent_node),\n                             );\n-                            return tcx.types.err;\n                         }\n                     };\n \n@@ -254,14 +253,13 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                         }\n                         Res::Def(_, def_id) => tcx.generics_of(def_id),\n                         res => {\n-                            tcx.sess.delay_span_bug(\n+                            return tcx.ty_error_with_message(\n                                 DUMMY_SP,\n                                 &format!(\n                                     \"unexpected anon const res {:?} in path: {:?}\",\n                                     res, path,\n                                 ),\n-                            );\n-                            return tcx.types.err;\n+                                );\n                         }\n                     };\n \n@@ -283,24 +281,21 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     } else {\n                         // This is no generic parameter associated with the arg. This is\n                         // probably from an extra arg where one is not needed.\n-                        tcx.sess.delay_span_bug(\n+                        tcx.ty_error_with_message(\n                             DUMMY_SP,\n                             &format!(\n-                                \"missing generic parameter for `AnonConst`, parent: {:?}, res: {:?}\",\n+                                \"missing generic parameter for `AnonConst`, \\\n+                                 parent: {:?}, res: {:?}\",\n                                 parent_node, res\n                             ),\n-                        );\n-                        tcx.types.err\n+                        )\n                     }\n                 }\n \n-                x => {\n-                    tcx.sess.delay_span_bug(\n-                        DUMMY_SP,\n-                        &format!(\"unexpected const parent in type_of_def_id(): {:?}\", x),\n-                    );\n-                    tcx.types.err\n-                }\n+                x => tcx.ty_error_with_message(\n+                    DUMMY_SP,\n+                    &format!(\"unexpected const parent in type_of_def_id(): {:?}\", x),\n+                ),\n             }\n         }\n \n@@ -568,7 +563,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         None => {\n             let span = tcx.def_span(def_id);\n             tcx.sess.span_err(span, \"could not find defining uses\");\n-            tcx.types.err\n+            tcx.ty_error()\n         }\n     }\n }\n@@ -605,7 +600,7 @@ fn let_position_impl_trait_type(tcx: TyCtxt<'_>, opaque_ty_id: LocalDefId) -> Ty\n             if let Some(ErrorReported) = owner_tables.tainted_by_errors {\n                 // Some error in the owner fn prevented us from populating the\n                 // `concrete_opaque_types` table.\n-                tcx.types.err\n+                tcx.ty_error()\n             } else {\n                 // We failed to resolve the opaque type or it resolves to\n                 // itself. Return the non-revealed type, which should result in\n@@ -655,7 +650,7 @@ fn infer_placeholder_type(\n         }\n         None => {\n             let mut diag = bad_placeholder_type(tcx, vec![span]);\n-            if ty != tcx.types.err {\n+            if !matches!(ty.kind, ty::Error(_)) {\n                 diag.span_suggestion(\n                     span,\n                     \"replace `_` with the correct type\","}, {"sha": "cae09267994e3fe94af54dc80e41d95cedb4c0a1", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -339,7 +339,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_sig(current, sig, variance);\n             }\n \n-            ty::Error => {\n+            ty::Error(_) => {\n                 // we encounter this when walking the trait references for object\n                 // types, where we use Error as the Self type\n             }"}, {"sha": "73fe87b05d477e6f3d25ed64e24c7252b03a976e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -1717,7 +1717,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Placeholder(..) => panic!(\"Placeholder\"),\n             ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n             ty::Infer(..) => panic!(\"Infer\"),\n-            ty::Error => panic!(\"Error\"),\n+            ty::Error(_) => panic!(\"Error\"),\n         }\n     }\n }"}, {"sha": "973294e985f7a45a65e4c99e946bf31df508dd52", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -37,7 +37,7 @@ fn main() {\n         TyKind::Bound(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Placeholder(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Infer(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n-        TyKind::Error => (), //~ ERROR usage of `ty::TyKind::<kind>`\n+        TyKind::Error(_) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n     }\n \n     if let ty::Int(int_ty) = kind {}"}, {"sha": "d6e4c85c190d5af36da784f4a5ddcb52b7a87394", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d388d465d3ecab18843ae356256060a3612fce4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d388d465d3ecab18843ae356256060a3612fce4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=9d388d465d3ecab18843ae356256060a3612fce4", "patch": "@@ -169,7 +169,7 @@ LL |         TyKind::Infer(..) => (),\n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:40:9\n    |\n-LL |         TyKind::Error => (),\n+LL |         TyKind::Error(_) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`"}]}