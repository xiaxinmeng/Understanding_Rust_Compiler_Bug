{"sha": "a80d6423e68673ed3528aa5a2042a560381a2d3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MGQ2NDIzZTY4NjczZWQzNTI4YWE1YTIwNDJhNTYwMzgxYTJkM2Q=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-20T14:01:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-20T14:01:42Z"}, "message": "Merge pull request #1074 from bjorn3/fix_weak_linkage\n\nFix weak linkage", "tree": {"sha": "d09008e0c73f798f98c0bca0838c0e1b04c4ac26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d09008e0c73f798f98c0bca0838c0e1b04c4ac26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a80d6423e68673ed3528aa5a2042a560381a2d3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPoJGCRBK7hj4Ov3rIwAAdHIIAFicw0OM28Ezw0L9WFOgIhTK\nyx2Ju20BFOhnnDRAcQ9m0u8/aD9ELRokeSaYn5dyt2xGP7B82MIcwQmrtxPbWCpD\n2dtY9dFi5stQTT+OjzFz/ggSriZ3uoKi7hERDVvTvzm9dIHltPxcc/IlqzBrT6AG\nEsQKLFyzNl7JkolDGaAkGrNcA/4wAGduGVazE6omAx9eTkpAFDsmF7lH+Ut6ZgLa\nRn+cb7lGutvjIKRZmjFUrxN99ZlOG4dSJf2CcSGPaLeM1vj9mSQ5Q8UwuDJsnScs\nZvl56MG5D+aDiKlIGV1OawzPLOX6V4H3J+wSrwYID9ZcdgX3ParaNNlNhAoEN9U=\n=SOMt\n-----END PGP SIGNATURE-----\n", "payload": "tree d09008e0c73f798f98c0bca0838c0e1b04c4ac26\nparent 02b7cdc316b733649635fe7df1051429b0dfe25b\nparent ca9fc101c00e33a0735a3bd2fa44eeeb7841422f\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1597932102 +0200\ncommitter GitHub <noreply@github.com> 1597932102 +0200\n\nMerge pull request #1074 from bjorn3/fix_weak_linkage\n\nFix weak linkage"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a80d6423e68673ed3528aa5a2042a560381a2d3d", "html_url": "https://github.com/rust-lang/rust/commit/a80d6423e68673ed3528aa5a2042a560381a2d3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a80d6423e68673ed3528aa5a2042a560381a2d3d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b7cdc316b733649635fe7df1051429b0dfe25b", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b7cdc316b733649635fe7df1051429b0dfe25b", "html_url": "https://github.com/rust-lang/rust/commit/02b7cdc316b733649635fe7df1051429b0dfe25b"}, {"sha": "ca9fc101c00e33a0735a3bd2fa44eeeb7841422f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9fc101c00e33a0735a3bd2fa44eeeb7841422f", "html_url": "https://github.com/rust-lang/rust/commit/ca9fc101c00e33a0735a3bd2fa44eeeb7841422f"}], "stats": {"total": 150, "additions": 60, "deletions": 90}, "files": [{"sha": "d79f9f5f79c5b3188bb23ff0d92b034234015dbc", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a80d6423e68673ed3528aa5a2042a560381a2d3d/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d6423e68673ed3528aa5a2042a560381a2d3d/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=a80d6423e68673ed3528aa5a2042a560381a2d3d", "patch": "@@ -241,19 +241,22 @@ fn main() {\n \n     assert_eq!(((|()| 42u8) as fn(()) -> u8)(()), 42);\n \n-    extern {\n-        #[linkage = \"extern_weak\"]\n-        static ABC: *const u8;\n-    }\n-\n+    #[cfg(not(jit))]\n     {\n         extern {\n             #[linkage = \"extern_weak\"]\n             static ABC: *const u8;\n         }\n-    }\n \n-    unsafe { assert_eq!(ABC as usize, 0); }\n+        {\n+            extern {\n+                #[linkage = \"extern_weak\"]\n+                static ABC: *const u8;\n+            }\n+        }\n+\n+        unsafe { assert_eq!(ABC as usize, 0); }\n+    }\n \n     &mut (|| Some(0 as *const ())) as &mut dyn FnMut() -> Option<*const ()>;\n "}, {"sha": "29b891c6eb5c6595ccbabf0c1bc72bc7e9776472", "filename": "patches/0025-Remove-usage-of-extern_weak-in-thread_local_dtor.patch", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/02b7cdc316b733649635fe7df1051429b0dfe25b/patches%2F0025-Remove-usage-of-extern_weak-in-thread_local_dtor.patch", "raw_url": "https://github.com/rust-lang/rust/raw/02b7cdc316b733649635fe7df1051429b0dfe25b/patches%2F0025-Remove-usage-of-extern_weak-in-thread_local_dtor.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0025-Remove-usage-of-extern_weak-in-thread_local_dtor.patch?ref=02b7cdc316b733649635fe7df1051429b0dfe25b", "patch": "@@ -1,45 +0,0 @@\n-From 7496bb94a2fb2bc34629c9781c3bc3a470becaee Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Fri, 10 Apr 2020 13:47:42 +0200\n-Subject: [PATCH] Remove usage of extern_weak in thread_local_dtor\n-\n----\n- library/std/src/sys/unix/thread_local_dtor.rs | 20 --------------------\n- 1 files changed, 0 insertions(+), 20 deletions(-)\n-\n-diff --git a/library/std/src/sys/unix/thread_local_dtor.rs b/library/std/src/sys/unix/thread_local_dtor.rs\n-index 8730b4d..8d6e3d5 100644\n---- a/library/std/src/sys/unix/thread_local_dtor.rs\n-+++ b/library/std/src/sys/unix/thread_local_dtor.rs\n-@@ -15,28 +15,8 @@\n-     target_os = \"emscripten\"\n- ))]\n- pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n--    use crate::mem;\n-     use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n- \n--    extern \"C\" {\n--        #[linkage = \"extern_weak\"]\n--        static __dso_handle: *mut u8;\n--        #[linkage = \"extern_weak\"]\n--        static __cxa_thread_atexit_impl: *const libc::c_void;\n--    }\n--    if !__cxa_thread_atexit_impl.is_null() {\n--        type F = unsafe extern \"C\" fn(\n--            dtor: unsafe extern \"C\" fn(*mut u8),\n--            arg: *mut u8,\n--            dso_handle: *mut u8,\n--        ) -> libc::c_int;\n--        mem::transmute::<*const libc::c_void, F>(__cxa_thread_atexit_impl)(\n--            dtor,\n--            t,\n--            &__dso_handle as *const _ as *mut _,\n--        );\n--        return;\n--    }\n-     register_dtor_fallback(t, dtor);\n- }\n- \n--- \n-2.20.1\n-"}, {"sha": "0ed05c56d7439805f1cf3577b194eea9a19a10c5", "filename": "src/constant.rs", "status": "modified", "additions": 44, "deletions": 36, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a80d6423e68673ed3528aa5a2042a560381a2d3d/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d6423e68673ed3528aa5a2042a560381a2d3d/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a80d6423e68673ed3528aa5a2042a560381a2d3d", "patch": "@@ -43,8 +43,7 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CValue<'tcx> {\n-    let linkage = crate::linkage::get_static_ref_linkage(fx.tcx, def_id);\n-    let data_id = data_id_for_static(fx.tcx, fx.module, def_id, linkage);\n+    let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(local_data_id, format!(\"tls {:?}\", def_id));\n@@ -57,8 +56,7 @@ fn codegen_static_ref<'tcx>(\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CPlace<'tcx> {\n-    let linkage = crate::linkage::get_static_ref_linkage(fx.tcx, def_id);\n-    let data_id = data_id_for_static(fx.tcx, fx.module, def_id, linkage);\n+    let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n@@ -159,8 +157,7 @@ pub(crate) fn trans_const_value<'tcx>(\n                         }\n                         Some(GlobalAlloc::Static(def_id)) => {\n                             assert!(fx.tcx.is_static(def_id));\n-                            let linkage = crate::linkage::get_static_ref_linkage(fx.tcx, def_id);\n-                            let data_id = data_id_for_static(fx.tcx, fx.module, def_id, linkage);\n+                            let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n                             let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n                             fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n@@ -226,8 +223,20 @@ fn data_id_for_static(\n     tcx: TyCtxt<'_>,\n     module: &mut Module<impl Backend>,\n     def_id: DefId,\n-    linkage: Linkage,\n+    definition: bool,\n ) -> DataId {\n+    let rlinkage = tcx.codegen_fn_attrs(def_id).linkage;\n+    let linkage = if definition {\n+        crate::linkage::get_static_linkage(tcx, def_id)\n+    } else {\n+        if rlinkage == Some(rustc_middle::mir::mono::Linkage::ExternalWeak)\n+        || rlinkage == Some(rustc_middle::mir::mono::Linkage::WeakAny) {\n+            Linkage::Preemptible\n+        } else {\n+            Linkage::Import\n+        }\n+    };\n+\n     let instance = Instance::mono(tcx, def_id).polymorphize(tcx);\n     let symbol_name = tcx.symbol_name(instance).name;\n     let ty = instance.ty(tcx, ParamEnv::reveal_all());\n@@ -255,26 +264,39 @@ fn data_id_for_static(\n         )\n         .unwrap();\n \n-    if linkage == Linkage::Preemptible {\n-        if let ty::RawPtr(_) = ty.kind {\n-        } else {\n-            tcx.sess.span_fatal(\n-                tcx.def_span(def_id),\n-                \"must have type `*const T` or `*mut T` due to `#[linkage]` attribute\",\n+    if rlinkage.is_some() {\n+        // Comment copied from https://github.com/rust-lang/rust/blob/45060c2a66dfd667f88bd8b94261b28a58d85bd5/src/librustc_codegen_llvm/consts.rs#L141\n+        // Declare an internal global `extern_with_linkage_foo` which\n+        // is initialized with the address of `foo`.  If `foo` is\n+        // discarded during linking (for example, if `foo` has weak\n+        // linkage and there are no definitions), then\n+        // `extern_with_linkage_foo` will instead be initialized to\n+        // zero.\n+\n+        let ref_name = format!(\"_rust_extern_with_linkage_{}\", symbol_name);\n+        let ref_data_id = module\n+            .declare_data(\n+                &ref_name,\n+                Linkage::Local,\n+                true,\n+                false,\n+                Some(align.try_into().unwrap()),\n             )\n-        }\n-\n+            .unwrap();\n         let mut data_ctx = DataContext::new();\n-        data_ctx.define_zeroinit(pointer_ty(tcx).bytes() as usize);\n-        match module.define_data(data_id, &data_ctx) {\n-            // Everytime a weak static is referenced, there will be a zero pointer definition,\n+        let data = module.declare_data_in_data(data_id, &mut data_ctx);\n+        data_ctx.define(std::iter::repeat(0).take(pointer_ty(tcx).bytes() as usize).collect());\n+        data_ctx.write_data_addr(0, data, 0);\n+        match module.define_data(ref_data_id, &data_ctx) {\n+            // Every time the static is referenced there will be another definition of this global,\n             // so duplicate definitions are expected and allowed.\n             Err(ModuleError::DuplicateDefinition(_)) => {}\n             res => res.unwrap(),\n         }\n+        ref_data_id\n+    } else {\n+        data_id\n     }\n-\n-    data_id\n }\n \n fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mut ConstantCx) {\n@@ -301,16 +323,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     _ => bug!(\"static const eval returned {:#?}\", const_),\n                 };\n \n-                let data_id = data_id_for_static(\n-                    tcx,\n-                    module,\n-                    def_id,\n-                    if tcx.is_reachable_non_generic(def_id) {\n-                        Linkage::Export\n-                    } else {\n-                        Linkage::Export // FIXME Set hidden visibility\n-                    },\n-                );\n+                let data_id = data_id_for_static(tcx, module, def_id, true);\n                 (data_id, alloc, section_name)\n             }\n         };\n@@ -360,12 +373,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     // Don't push a `TodoItem::Static` here, as it will cause statics used by\n                     // multiple crates to be duplicated between them. It isn't necessary anyway,\n                     // as it will get pushed by `codegen_static` when necessary.\n-                    data_id_for_static(\n-                        tcx,\n-                        module,\n-                        def_id,\n-                        crate::linkage::get_static_ref_linkage(tcx, def_id),\n-                    )\n+                    data_id_for_static(tcx, module, def_id, false)\n                 }\n             };\n "}, {"sha": "23940c33f1feac97f2bc30b7aaf16d5deb8ac6bb", "filename": "src/linkage.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a80d6423e68673ed3528aa5a2042a560381a2d3d/src%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80d6423e68673ed3528aa5a2042a560381a2d3d/src%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinkage.rs?ref=a80d6423e68673ed3528aa5a2042a560381a2d3d", "patch": "@@ -11,7 +11,7 @@ pub(crate) fn get_clif_linkage(mono_item: MonoItem<'_>, linkage: RLinkage, visib\n     }\n }\n \n-pub(crate) fn get_static_ref_linkage(tcx: TyCtxt<'_>, def_id: DefId) -> Linkage {\n+pub(crate) fn get_static_linkage(tcx: TyCtxt<'_>, def_id: DefId) -> Linkage {\n     let fn_attrs = tcx.codegen_fn_attrs(def_id);\n \n     if let Some(linkage) = fn_attrs.linkage {\n@@ -22,6 +22,10 @@ pub(crate) fn get_static_ref_linkage(tcx: TyCtxt<'_>, def_id: DefId) -> Linkage\n             _ => panic!(\"{:?}\", linkage),\n         }\n     } else {\n-        Linkage::Import\n+        if tcx.is_reachable_non_generic(def_id) {\n+            Linkage::Export\n+        } else {\n+            Linkage::Export // FIXME use Linkage::Hidden\n+        }\n     }\n }"}]}