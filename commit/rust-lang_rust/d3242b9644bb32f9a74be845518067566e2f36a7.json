{"sha": "d3242b9644bb32f9a74be845518067566e2f36a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMjQyYjk2NDRiYjMyZjlhNzRiZTg0NTUxODA2NzU2NmUyZjM2YTc=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-05-11T19:04:58Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-14T00:35:13Z"}, "message": "Bug fixes.\n\nFixed infinite loop on anonymous objects in parser; added\nexpr_anon_obj to walk.rs; fixed syntax of test case.", "tree": {"sha": "60d52552c54048712d05e75f5fb053fd43bc8edf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d52552c54048712d05e75f5fb053fd43bc8edf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3242b9644bb32f9a74be845518067566e2f36a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3242b9644bb32f9a74be845518067566e2f36a7", "html_url": "https://github.com/rust-lang/rust/commit/d3242b9644bb32f9a74be845518067566e2f36a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3242b9644bb32f9a74be845518067566e2f36a7/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c1c5b39482158f078b5b10164c024edf345e386", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c1c5b39482158f078b5b10164c024edf345e386", "html_url": "https://github.com/rust-lang/rust/commit/6c1c5b39482158f078b5b10164c024edf345e386"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "eda09276184ce8bc3e56b250bb3d74be140a86e4", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3242b9644bb32f9a74be845518067566e2f36a7/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3242b9644bb32f9a74be845518067566e2f36a7/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=d3242b9644bb32f9a74be845518067566e2f36a7", "patch": "@@ -379,18 +379,6 @@ type anon_obj = rec(\n     // with_obj: the original object being extended, if it exists.\n     Option.t[ident] with_obj);\n \n-tag mod_index_entry {\n-    mie_view_item(@view_item);\n-    mie_item(@item);\n-    mie_tag_variant(@item /* tag item */, uint /* variant index */);\n-}\n-\n-tag native_mod_index_entry {\n-    nmie_view_item(@view_item);\n-    nmie_item(@native_item);\n-}\n-\n-type mod_index = hashmap[ident,mod_index_entry];\n type _mod = rec(vec[@view_item] view_items,\n                 vec[@item] items);\n "}, {"sha": "a02a2fa4b0b81493a54b9f0757ae3c87b915223a", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3242b9644bb32f9a74be845518067566e2f36a7/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3242b9644bb32f9a74be845518067566e2f36a7/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=d3242b9644bb32f9a74be845518067566e2f36a7", "patch": "@@ -806,26 +806,40 @@ fn parse_bottom_expr(parser p) -> @ast::expr {\n         auto ty_params = parse_ty_params(p);\n \n         // Only make people type () if they're actually adding new fields\n-        let option.t[vec[ast.obj_field]] fields = none[vec[ast.obj_field]];\n+        let option.t[vec[ast::obj_field]] fields = none[vec[ast::obj_field]];\n         if (p.peek() == token::LPAREN) {\n             auto pf = parse_obj_field;\n+            expect(p, token::LBRACE);\n+            while (p.peek() != token::RBRACE) {\n+                alt (p.peek()) {\n+                    case (token.WITH) { \n+                        p.bump();\n+                        with_obj = some[ast::ident](parse_ident(p));\n+                    }\n+                    case (_) {\n+                        Vec.push[@ast::method](meths,\n+                                              parse_method(p));\n+                    }\n+                }\n+            }\n+\n             hi = p.get_hi_pos();\n             expect(p, token::LPAREN);\n-            fields = some[vec[ast.obj_field]]\n-                (parse_seq_to_end[ast.obj_field] \n+            fields = some[vec[ast::obj_field]]\n+                (parse_seq_to_end[ast::obj_field] \n                  (token::RPAREN,\n                   some(token::COMMA),\n                   pf, hi, p));\n         }\n \n-        let vec[@ast.method] meths = vec();\n-        let option.t[ast.ident] with_obj = none[ast.ident];\n+        let vec[@ast::method] meths = vec();\n+        let option.t[ast::ident] with_obj = none[ast::ident];\n \n         expect(p, token::LBRACE);\n         while (p.peek() != token::RBRACE) {\n             alt (p.peek()) {\n                 case (token::WITH) { \n-                    with_obj = some[ast.ident](parse_ident(p));\n+                    with_obj = some[ast::ident](parse_ident(p));\n                 }\n                 case (_) {\n                     // fall through\n@@ -841,13 +855,13 @@ fn parse_bottom_expr(parser p) -> @ast::expr {\n \n         // We don't need to pull \".node\" out of fields because it's not a\n         // \"spanned\".\n-        let ast.anon_obj ob = rec(fields=fields,\n+        let ast::anon_obj ob = rec(fields=fields,\n                                   methods=meths,\n                                   with_obj=with_obj);\n \n         auto odid = rec(ty=p.next_def_id(), ctor=p.next_def_id());\n \n-        ex = ast.expr_anon_obj(ob, ty_params, odid, ast.ann_none);\n+        ex = ast::expr_anon_obj(ob, ty_params, odid, ast::ann_none);\n \n     } else if (eat_word(p, \"bind\")) {\n         auto e = parse_expr_res(p, RESTRICT_NO_CALL_EXPRS);"}, {"sha": "8dbcca0783cf0dbef08ffbd43879ea01dcd8880c", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3242b9644bb32f9a74be845518067566e2f36a7/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3242b9644bb32f9a74be845518067566e2f36a7/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=d3242b9644bb32f9a74be845518067566e2f36a7", "patch": "@@ -433,6 +433,8 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n         case (ast::expr_chan(?x, _)) {\n             walk_expr(v, x);\n         }\n+\n+        case (ast.expr_anon_obj(_,_,_,_)) { }\n     }\n     v.visit_expr_post(e);\n }"}, {"sha": "c76123fe7e1758bc3860b226555316e8d55c939b", "filename": "src/test/run-pass/method-overriding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3242b9644bb32f9a74be845518067566e2f36a7/src%2Ftest%2Frun-pass%2Fmethod-overriding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3242b9644bb32f9a74be845518067566e2f36a7/src%2Ftest%2Frun-pass%2Fmethod-overriding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-overriding.rs?ref=d3242b9644bb32f9a74be845518067566e2f36a7", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     };\n \n     // Extending an object with a new field\n-    auto my_c = obj(quux) { with my_a } ;\n+    auto my_c = obj(int quux) { with my_a } ;\n \n     // Should this be legal?\n     auto my_d = obj() { with my_a } ;"}]}