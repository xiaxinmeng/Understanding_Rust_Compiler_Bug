{"sha": "2bd16f3c81af80718403e2e202fd0d59e8f94c60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZDE2ZjNjODFhZjgwNzE4NDAzZTJlMjAyZmQwZDU5ZThmOTRjNjA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-01-11T14:12:39Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:03Z"}, "message": "Improve opaque type lifetime errors\n\n* Use better span for member constraint errors\n* Avoid a bad suggestion\n* Don't report member constraint errors if we have other universal\n  region errors.", "tree": {"sha": "687aa391c14a967b63e33029fbf0264881b284ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/687aa391c14a967b63e33029fbf0264881b284ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd16f3c81af80718403e2e202fd0d59e8f94c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd16f3c81af80718403e2e202fd0d59e8f94c60", "html_url": "https://github.com/rust-lang/rust/commit/2bd16f3c81af80718403e2e202fd0d59e8f94c60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd16f3c81af80718403e2e202fd0d59e8f94c60/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cfa7d1dfb8a83c24ba3220d6740388546c664b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfa7d1dfb8a83c24ba3220d6740388546c664b9", "html_url": "https://github.com/rust-lang/rust/commit/5cfa7d1dfb8a83c24ba3220d6740388546c664b9"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "327e1da64c4cd403385e0d9610388273152c905b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2bd16f3c81af80718403e2e202fd0d59e8f94c60", "patch": "@@ -405,17 +405,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n \n                     RegionResolutionError::MemberConstraintFailure {\n-                        opaque_type_def_id,\n                         hidden_ty,\n                         member_region,\n-                        span: _,\n-                        choice_regions: _,\n+                        span,\n                     } => {\n                         let hidden_ty = self.resolve_vars_if_possible(&hidden_ty);\n                         opaque_types::unexpected_hidden_region_diagnostic(\n                             self.tcx,\n                             Some(region_scope_tree),\n-                            opaque_type_def_id,\n+                            span,\n                             hidden_ty,\n                             member_region,\n                         )"}, {"sha": "1b204e5ba6cb335364561f8688107c11f1576ec1", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=2bd16f3c81af80718403e2e202fd0d59e8f94c60", "patch": "@@ -18,7 +18,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n-use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::Span;\n use std::fmt;\n@@ -95,13 +94,7 @@ pub enum RegionResolutionError<'tcx> {\n     /// Indicates a failure of a `MemberConstraint`. These arise during\n     /// impl trait processing explicitly -- basically, the impl trait's hidden type\n     /// included some region that it was not supposed to.\n-    MemberConstraintFailure {\n-        span: Span,\n-        opaque_type_def_id: DefId,\n-        hidden_ty: Ty<'tcx>,\n-        member_region: Region<'tcx>,\n-        choice_regions: Vec<Region<'tcx>>,\n-    },\n+    MemberConstraintFailure { span: Span, hidden_ty: Ty<'tcx>, member_region: Region<'tcx> },\n }\n \n struct RegionAndOrigin<'tcx> {\n@@ -656,10 +649,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 let span = self.tcx().def_span(member_constraint.opaque_type_def_id);\n                 errors.push(RegionResolutionError::MemberConstraintFailure {\n                     span,\n-                    opaque_type_def_id: member_constraint.opaque_type_def_id,\n                     hidden_ty: member_constraint.hidden_ty,\n                     member_region,\n-                    choice_regions: choice_regions.collect(),\n                 });\n             }\n         }"}, {"sha": "4edacd4731c488337b7e1f9cc106e7bb8186b784", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=2bd16f3c81af80718403e2e202fd0d59e8f94c60", "patch": "@@ -595,11 +595,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n pub fn unexpected_hidden_region_diagnostic(\n     tcx: TyCtxt<'tcx>,\n     region_scope_tree: Option<&region::ScopeTree>,\n-    opaque_type_def_id: DefId,\n+    span: Span,\n     hidden_ty: Ty<'tcx>,\n     hidden_region: ty::Region<'tcx>,\n ) -> DiagnosticBuilder<'tcx> {\n-    let span = tcx.def_span(opaque_type_def_id);\n     let mut err = struct_span_err!(\n         tcx.sess,\n         span,\n@@ -851,7 +850,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     unexpected_hidden_region_diagnostic(\n                         self.tcx,\n                         None,\n-                        self.opaque_type_def_id,\n+                        self.tcx.def_span(self.opaque_type_def_id),\n                         hidden_ty,\n                         r,\n                     )"}, {"sha": "b393d4bc2a5b36d72dfc723f38009c5bf60c556c", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=2bd16f3c81af80718403e2e202fd0d59e8f94c60", "patch": "@@ -6,7 +6,6 @@ use rustc::infer::{\n use rustc::mir::ConstraintCategory;\n use rustc::ty::{self, RegionVid, Ty};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc_hir::def_id::DefId;\n use rustc_span::symbol::kw;\n use rustc_span::Span;\n \n@@ -58,8 +57,8 @@ crate enum RegionErrorKind<'tcx> {\n \n     /// An unexpected hidden region for an opaque type.\n     UnexpectedHiddenRegion {\n-        /// The def id of the opaque type.\n-        opaque_type_def_id: DefId,\n+        /// The span for the member constraint.\n+        span: Span,\n         /// The hidden type.\n         hidden_ty: Ty<'tcx>,\n         /// The unexpected region.\n@@ -194,18 +193,16 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                RegionErrorKind::UnexpectedHiddenRegion {\n-                    opaque_type_def_id,\n-                    hidden_ty,\n-                    member_region,\n-                } => {\n+                RegionErrorKind::UnexpectedHiddenRegion { span, hidden_ty, member_region } => {\n                     let region_scope_tree = &self.infcx.tcx.region_scope_tree(self.mir_def_id);\n+                    let named_ty = self.regioncx.name_regions(self.infcx.tcx, hidden_ty);\n+                    let named_region = self.regioncx.name_regions(self.infcx.tcx, member_region);\n                     opaque_types::unexpected_hidden_region_diagnostic(\n                         self.infcx.tcx,\n                         Some(region_scope_tree),\n-                        opaque_type_def_id,\n-                        hidden_ty,\n-                        member_region,\n+                        span,\n+                        named_ty,\n+                        named_region,\n                     )\n                     .buffer(&mut self.errors_buffer);\n                 }\n@@ -588,6 +585,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             {\n                                 found = true;\n                                 break;\n+                            } else {\n+                                // If there's already a lifetime bound, don't\n+                                // suggest anything.\n+                                return;\n                             }\n                         }\n                     }"}, {"sha": "8435e6bc885ba162a89344b6bed5ac42551ecd87", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=2bd16f3c81af80718403e2e202fd0d59e8f94c60", "patch": "@@ -511,7 +511,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.check_universal_regions(body, outlives_requirements.as_mut(), &mut errors_buffer);\n         }\n \n-        self.check_member_constraints(infcx, &mut errors_buffer);\n+        if errors_buffer.is_empty() {\n+            self.check_member_constraints(infcx, &mut errors_buffer);\n+        }\n \n         let outlives_requirements = outlives_requirements.unwrap_or(vec![]);\n \n@@ -1604,7 +1606,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // If not, report an error.\n             let member_region = infcx.tcx.mk_region(ty::ReVar(member_region_vid));\n             errors_buffer.push(RegionErrorKind::UnexpectedHiddenRegion {\n-                opaque_type_def_id: m_c.opaque_type_def_id,\n+                span: m_c.definition_span,\n                 hidden_ty: m_c.hidden_ty,\n                 member_region,\n             });"}, {"sha": "71702eb84e7846f72cc42ca8b7d889e4405f2579", "filename": "src/librustc_mir/borrow_check/region_infer/opaque_types.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd16f3c81af80718403e2e202fd0d59e8f94c60/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs?ref=2bd16f3c81af80718403e2e202fd0d59e8f94c60", "patch": "@@ -1,5 +1,5 @@\n use rustc::infer::InferCtxt;\n-use rustc::ty;\n+use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n@@ -119,4 +119,23 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             })\n             .collect()\n     }\n+\n+    /// Map the regions in the type to named regions. This is similar to what\n+    /// `infer_opaque_types` does, but can infer any universal region, not only\n+    /// ones from the substs for the opaque type. It also doesn't double check\n+    /// that the regions produced are in fact equal to the named region they are\n+    /// replaced with. This is fine because this function is only to improve the\n+    /// region names in error messages.\n+    pub(in crate::borrow_check) fn name_regions<T>(&self, tcx: TyCtxt<'tcx>, ty: T) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        tcx.fold_regions(&ty, &mut false, |region, _| match *region {\n+            ty::ReVar(vid) => {\n+                let upper_bound = self.universal_upper_bound(vid);\n+                self.definitions[upper_bound].external_name.unwrap_or(region)\n+            }\n+            _ => region,\n+        })\n+    }\n }"}]}