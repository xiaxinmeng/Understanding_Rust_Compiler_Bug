{"sha": "1361b02c9fc9a96ab4baf82994a0f1b29beff41a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNjFiMDJjOWZjOWE5NmFiNGJhZjgyOTk0YTBmMWIyOWJlZmY0MWE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-27T10:31:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-27T10:31:53Z"}, "message": "Rollup merge of #74088 - tmiasko:write-all-vectored-empty, r=KodrAus\n\nAvoid writes without any data in `Write::write_all_vectored`\n\nPreviously, when non-empty sequence of empty IoSlices have been provided\nto `Write::write_all_vectored`, the buffers would be written as is with\n`Write::write_vectored` and subsequently the return value `Ok(0)` would\nbe misinterpreted as an error.\n\nAvoid writes without any data by advancing the buffers first. This\nmatches the documented behaviour of `Write::write_all_vectored`\nand is analogous to what happens in `Write::write_all`.", "tree": {"sha": "eed3fc7fa7f630874736473322c393e0f0961e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eed3fc7fa7f630874736473322c393e0f0961e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1361b02c9fc9a96ab4baf82994a0f1b29beff41a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfHq0ZCRBK7hj4Ov3rIwAAdHIIAA7jN+wRqszMF3mLWStj/Yo7\nfc7f2m+OYTbvwAkcMd295W+2S7wJ75hbhRl3ZxFUo9y9kqXlHweII5hptE0jlRVW\nGgOgn6sljIj0RjM9qnqIHaVKYw3WA2v90GLzsYlJvn9eUwG2fUArabDk+cCzohMH\nptNON3/d7Etqwtcw7D36GMTQLvLKMgSj+sHtwaTN3KP1O+7ZFeicZ2HG4QLoUMxl\nk0EWEkr6HRA2XFLB1Bdz9pGZzTu9sgP1N+27IFPr4Gp2Au11s3HMezbeAtiKgtd7\ntjGwQ2iMpbG+r+qVg06C3xlReD40eOcaLUevyry2lsiCq6I70WNL+PbKsw/9lAk=\n=el+o\n-----END PGP SIGNATURE-----\n", "payload": "tree eed3fc7fa7f630874736473322c393e0f0961e44\nparent 1841fb97e17f5e41c609cd11ab114c7ac1f3de2a\nparent 7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1595845913 +0900\ncommitter GitHub <noreply@github.com> 1595845913 +0900\n\nRollup merge of #74088 - tmiasko:write-all-vectored-empty, r=KodrAus\n\nAvoid writes without any data in `Write::write_all_vectored`\n\nPreviously, when non-empty sequence of empty IoSlices have been provided\nto `Write::write_all_vectored`, the buffers would be written as is with\n`Write::write_vectored` and subsequently the return value `Ok(0)` would\nbe misinterpreted as an error.\n\nAvoid writes without any data by advancing the buffers first. This\nmatches the documented behaviour of `Write::write_all_vectored`\nand is analogous to what happens in `Write::write_all`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1361b02c9fc9a96ab4baf82994a0f1b29beff41a", "html_url": "https://github.com/rust-lang/rust/commit/1361b02c9fc9a96ab4baf82994a0f1b29beff41a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1361b02c9fc9a96ab4baf82994a0f1b29beff41a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a", "html_url": "https://github.com/rust-lang/rust/commit/1841fb97e17f5e41c609cd11ab114c7ac1f3de2a"}, {"sha": "7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c", "html_url": "https://github.com/rust-lang/rust/commit/7a5d3abfb1aa3a38e0b3b3508c760fc8e712226c"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "9eb54c2cc0044ae1dc8b4af9437bd977dcf4e83a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1361b02c9fc9a96ab4baf82994a0f1b29beff41a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1361b02c9fc9a96ab4baf82994a0f1b29beff41a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1361b02c9fc9a96ab4baf82994a0f1b29beff41a", "patch": "@@ -251,7 +251,6 @@\n \n use crate::cmp;\n use crate::fmt;\n-use crate::mem;\n use crate::memchr;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n@@ -1435,12 +1434,15 @@ pub trait Write {\n     /// ```\n     #[unstable(feature = \"write_all_vectored\", issue = \"70436\")]\n     fn write_all_vectored(&mut self, mut bufs: &mut [IoSlice<'_>]) -> Result<()> {\n+        // Guarantee that bufs is empty if it contains no data,\n+        // to avoid calling write_vectored if there is no data to be written.\n+        bufs = IoSlice::advance(bufs, 0);\n         while !bufs.is_empty() {\n             match self.write_vectored(bufs) {\n                 Ok(0) => {\n                     return Err(Error::new(ErrorKind::WriteZero, \"failed to write whole buffer\"));\n                 }\n-                Ok(n) => bufs = IoSlice::advance(mem::take(&mut bufs), n),\n+                Ok(n) => bufs = IoSlice::advance(bufs, n),\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => return Err(e),\n             }\n@@ -2958,6 +2960,7 @@ mod tests {\n         #[rustfmt::skip] // Becomes unreadable otherwise.\n         let tests: Vec<(_, &'static [u8])> = vec![\n             (vec![], &[]),\n+            (vec![IoSlice::new(&[]), IoSlice::new(&[])], &[]),\n             (vec![IoSlice::new(&[1])], &[1]),\n             (vec![IoSlice::new(&[1, 2])], &[1, 2]),\n             (vec![IoSlice::new(&[1, 2, 3])], &[1, 2, 3]),"}]}