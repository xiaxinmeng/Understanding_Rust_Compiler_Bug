{"sha": "23d033e17788d828aad233ff7c55652ac310d0b8", "node_id": "C_kwDOAAsO6NoAKDIzZDAzM2UxNzc4OGQ4MjhhYWQyMzNmZjdjNTU2NTJhYzMxMGQwYjg", "commit": {"author": {"name": "AlexApps99", "email": "alex.apps99@gmail.com", "date": "2021-10-21T21:03:18Z"}, "committer": {"name": "AlexApps99", "email": "alex.apps99@gmail.com", "date": "2021-10-21T21:03:18Z"}, "message": "Added const versions of common numeric operations\n\n# Conflicts:\n#\tlibrary/core/src/lib.rs", "tree": {"sha": "b8476db43933646f0045b73f0fa5714ce5fa3aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8476db43933646f0045b73f0fa5714ce5fa3aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d033e17788d828aad233ff7c55652ac310d0b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEWDk/cyqABrTAI/8UfN6rcfdKpo0FAmFx1ZcACgkQfN6rcfdK\npo1iiAv/YdgwOMySGK/rC0DhGXbQBEkZxbP02KhBXpoNKsfYogCz4TNI2F5cuGHM\nOiPnxTuEgoVN9l3iLfIxUsbVtm95IrsrG6KYDw8VrnTssnMkLd5X3sRDP/BdWdnv\nVgWBLMf3okJxfvnmsL7htohv/gWTGiQrF21MpQ0Gluats1qDijrXiW3tjUrzR00v\n0AEBT/LAwFg7x9YOM9U88jxtBXjObkEdRks8J4OytelCOl4SqrllPFu6KfEg1Iel\n3wGxqKnX9TM3lUpv9qjWxiL9SVzNaRfpJ6NqU/FD95eGilE4SB9cQNrdDmWfjt5H\neQCTq5C3TGVt93OlFPFYjMcQRtCP4uuyEV8vQ+JKTIHj8XVxtdb1PA9vQgOzPlxg\nUfAdWY34RnOVeOpQeDhmEVfvE8Jijt+/fvhjXG5AyFIFajhCEYOJBKhQoT2Pp6Tg\nb+6PXmMfpDc9z3Hh8HMs55t81YacgzOHLz+7+YN9EZ+d3Yi3BxizXHkBgoz5sSpH\nFzFri+9I\n=k1sn\n-----END PGP SIGNATURE-----", "payload": "tree b8476db43933646f0045b73f0fa5714ce5fa3aa0\nparent 547a6ffee0cf4da9929a9e3d49546dc87d607735\nauthor AlexApps99 <alex.apps99@gmail.com> 1634850198 +1300\ncommitter AlexApps99 <alex.apps99@gmail.com> 1634850198 +1300\n\nAdded const versions of common numeric operations\n\n# Conflicts:\n#\tlibrary/core/src/lib.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d033e17788d828aad233ff7c55652ac310d0b8", "html_url": "https://github.com/rust-lang/rust/commit/23d033e17788d828aad233ff7c55652ac310d0b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d033e17788d828aad233ff7c55652ac310d0b8/comments", "author": {"login": "AlexApps99", "id": 30854646, "node_id": "MDQ6VXNlcjMwODU0NjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/30854646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexApps99", "html_url": "https://github.com/AlexApps99", "followers_url": "https://api.github.com/users/AlexApps99/followers", "following_url": "https://api.github.com/users/AlexApps99/following{/other_user}", "gists_url": "https://api.github.com/users/AlexApps99/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexApps99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexApps99/subscriptions", "organizations_url": "https://api.github.com/users/AlexApps99/orgs", "repos_url": "https://api.github.com/users/AlexApps99/repos", "events_url": "https://api.github.com/users/AlexApps99/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexApps99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AlexApps99", "id": 30854646, "node_id": "MDQ6VXNlcjMwODU0NjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/30854646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexApps99", "html_url": "https://github.com/AlexApps99", "followers_url": "https://api.github.com/users/AlexApps99/followers", "following_url": "https://api.github.com/users/AlexApps99/following{/other_user}", "gists_url": "https://api.github.com/users/AlexApps99/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexApps99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexApps99/subscriptions", "organizations_url": "https://api.github.com/users/AlexApps99/orgs", "repos_url": "https://api.github.com/users/AlexApps99/repos", "events_url": "https://api.github.com/users/AlexApps99/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexApps99/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547a6ffee0cf4da9929a9e3d49546dc87d607735", "url": "https://api.github.com/repos/rust-lang/rust/commits/547a6ffee0cf4da9929a9e3d49546dc87d607735", "html_url": "https://github.com/rust-lang/rust/commit/547a6ffee0cf4da9929a9e3d49546dc87d607735"}], "stats": {"total": 338, "additions": 232, "deletions": 106}, "files": [{"sha": "b5c1bf6897c180d1b0b06348a8156cd73cfd3da9", "filename": "library/core/src/internal_macros.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Finternal_macros.rs?ref=23d033e17788d828aad233ff7c55652ac310d0b8", "patch": "@@ -5,6 +5,22 @@ macro_rules! forward_ref_unop {\n         forward_ref_unop!(impl $imp, $method for $t,\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n     };\n+    (impl const $imp:ident, $method:ident for $t:ty) => {\n+        forward_ref_unop!(impl const $imp, $method for $t,\n+                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n+    };\n+    (impl const $imp:ident, $method:ident for $t:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const $imp for &$t {\n+            type Output = <$t as $imp>::Output;\n+\n+            #[inline]\n+            fn $method(self) -> <$t as $imp>::Output {\n+                $imp::$method(*self)\n+            }\n+        }\n+    };\n     (impl $imp:ident, $method:ident for $t:ty, #[$attr:meta]) => {\n         #[$attr]\n         impl $imp for &$t {\n@@ -25,6 +41,44 @@ macro_rules! forward_ref_binop {\n         forward_ref_binop!(impl $imp, $method for $t, $u,\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n     };\n+    (impl const $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        forward_ref_binop!(impl const $imp, $method for $t, $u,\n+                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n+    };\n+    (impl const $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl<'a> const $imp<$u> for &'a $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: $u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, other)\n+            }\n+        }\n+\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const $imp<&$u> for $t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(self, *other)\n+            }\n+        }\n+\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const $imp<&$u> for &$t {\n+            type Output = <$t as $imp<$u>>::Output;\n+\n+            #[inline]\n+            fn $method(self, other: &$u) -> <$t as $imp<$u>>::Output {\n+                $imp::$method(*self, *other)\n+            }\n+        }\n+    };\n     (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n         #[$attr]\n         impl<'a> $imp<$u> for &'a $t {\n@@ -65,6 +119,20 @@ macro_rules! forward_ref_op_assign {\n         forward_ref_op_assign!(impl $imp, $method for $t, $u,\n                 #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]);\n     };\n+    (impl const $imp:ident, $method:ident for $t:ty, $u:ty) => {\n+        forward_ref_op_assign!(impl const $imp, $method for $t, $u,\n+                #[stable(feature = \"op_assign_builtins_by_ref\", since = \"1.22.0\")]);\n+    };\n+    (impl const $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n+        #[$attr]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const $imp<&$u> for $t {\n+            #[inline]\n+            fn $method(&mut self, other: &$u) {\n+                $imp::$method(self, *other);\n+            }\n+        }\n+    };\n     (impl $imp:ident, $method:ident for $t:ty, $u:ty, #[$attr:meta]) => {\n         #[$attr]\n         impl $imp<&$u> for $t {"}, {"sha": "87857873dfd883d760ae11e0486ef6d2bfbde44a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=23d033e17788d828aad233ff7c55652ac310d0b8", "patch": "@@ -116,6 +116,7 @@\n #![feature(const_maybe_uninit_as_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_num_from_num)]\n+#![feature(const_ops)]\n #![feature(const_option)]\n #![feature(const_pin)]\n #![feature(const_replace)]"}, {"sha": "7708094e1fceab656457dbd297339a35f914319e", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=23d033e17788d828aad233ff7c55652ac310d0b8", "patch": "@@ -92,7 +92,8 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOr for $Ty {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOr for $Ty {\n                 type Output = Self;\n                 #[inline]\n                 fn bitor(self, rhs: Self) -> Self::Output {\n@@ -103,7 +104,8 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOr<$Int> for $Ty {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOr<$Int> for $Ty {\n                 type Output = Self;\n                 #[inline]\n                 fn bitor(self, rhs: $Int) -> Self::Output {\n@@ -115,7 +117,8 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOr<$Ty> for $Int {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOr<$Ty> for $Int {\n                 type Output = $Ty;\n                 #[inline]\n                 fn bitor(self, rhs: $Ty) -> Self::Output {\n@@ -127,15 +130,17 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOrAssign for $Ty {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOrAssign for $Ty {\n                 #[inline]\n                 fn bitor_assign(&mut self, rhs: Self) {\n                     *self = *self | rhs;\n                 }\n             }\n \n             #[stable(feature = \"nonzero_bitor\", since = \"1.45.0\")]\n-            impl BitOrAssign<$Int> for $Ty {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const BitOrAssign<$Int> for $Ty {\n                 #[inline]\n                 fn bitor_assign(&mut self, rhs: $Int) {\n                     *self = *self | rhs;\n@@ -257,7 +262,8 @@ macro_rules! nonzero_integers_div {\n     ( $( $Ty: ident($Int: ty); )+ ) => {\n         $(\n             #[stable(feature = \"nonzero_div\", since = \"1.51.0\")]\n-            impl Div<$Ty> for $Int {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const Div<$Ty> for $Int {\n                 type Output = $Int;\n                 /// This operation rounds towards zero,\n                 /// truncating any fractional part of the exact result, and cannot panic.\n@@ -270,7 +276,8 @@ macro_rules! nonzero_integers_div {\n             }\n \n             #[stable(feature = \"nonzero_div\", since = \"1.51.0\")]\n-            impl Rem<$Ty> for $Int {\n+            #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+            impl const Rem<$Ty> for $Int {\n                 type Output = $Int;\n                 /// This operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n                 #[inline]"}, {"sha": "a0e42c51e4517a8091baa59893d90752983cac9b", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 77, "deletions": 51, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=23d033e17788d828aad233ff7c55652ac310d0b8", "patch": "@@ -87,7 +87,8 @@ impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n macro_rules! sh_impl_signed {\n     ($t:ident, $f:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shl<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shl<$f> for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n@@ -99,20 +100,22 @@ macro_rules! sh_impl_signed {\n                 }\n             }\n         }\n-        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n+        forward_ref_binop! { impl const Shl, shl for Wrapping<$t>, $f,\n         #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShlAssign<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShlAssign<$f> for Wrapping<$t> {\n             #[inline]\n             fn shl_assign(&mut self, other: $f) {\n                 *self = *self << other;\n             }\n         }\n-        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n+        forward_ref_op_assign! { impl const ShlAssign, shl_assign for Wrapping<$t>, $f }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shr<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shr<$f> for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n@@ -124,63 +127,68 @@ macro_rules! sh_impl_signed {\n                 }\n             }\n         }\n-        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n+        forward_ref_binop! { impl const Shr, shr for Wrapping<$t>, $f,\n         #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShrAssign<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShrAssign<$f> for Wrapping<$t> {\n             #[inline]\n             fn shr_assign(&mut self, other: $f) {\n                 *self = *self >> other;\n             }\n         }\n-        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n+        forward_ref_op_assign! { impl const ShrAssign, shr_assign for Wrapping<$t>, $f }\n     };\n }\n \n macro_rules! sh_impl_unsigned {\n     ($t:ident, $f:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shl<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shl<$f> for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn shl(self, other: $f) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_shl((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n-        forward_ref_binop! { impl Shl, shl for Wrapping<$t>, $f,\n+        forward_ref_binop! { impl const Shl, shl for Wrapping<$t>, $f,\n         #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShlAssign<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShlAssign<$f> for Wrapping<$t> {\n             #[inline]\n             fn shl_assign(&mut self, other: $f) {\n                 *self = *self << other;\n             }\n         }\n-        forward_ref_op_assign! { impl ShlAssign, shl_assign for Wrapping<$t>, $f }\n+        forward_ref_op_assign! { impl const ShlAssign, shl_assign for Wrapping<$t>, $f }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shr<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shr<$f> for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn shr(self, other: $f) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_shr((other & self::shift_max::$t as $f) as u32))\n             }\n         }\n-        forward_ref_binop! { impl Shr, shr for Wrapping<$t>, $f,\n+        forward_ref_binop! { impl const Shr, shr for Wrapping<$t>, $f,\n         #[stable(feature = \"wrapping_ref_ops\", since = \"1.39.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShrAssign<$f> for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShrAssign<$f> for Wrapping<$t> {\n             #[inline]\n             fn shr_assign(&mut self, other: $f) {\n                 *self = *self >> other;\n             }\n         }\n-        forward_ref_op_assign! { impl ShrAssign, shr_assign for Wrapping<$t>, $f }\n+        forward_ref_op_assign! { impl const ShrAssign, shr_assign for Wrapping<$t>, $f }\n     };\n }\n \n@@ -209,49 +217,54 @@ sh_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n macro_rules! wrapping_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Add for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Add for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn add(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_add(other.0))\n             }\n         }\n-        forward_ref_binop! { impl Add, add for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const Add, add for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl AddAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const AddAssign for Wrapping<$t> {\n             #[inline]\n             fn add_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self + other;\n             }\n         }\n-        forward_ref_op_assign! { impl AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Sub for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Sub for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn sub(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_sub(other.0))\n             }\n         }\n-        forward_ref_binop! { impl Sub, sub for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const Sub, sub for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl SubAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const SubAssign for Wrapping<$t> {\n             #[inline]\n             fn sub_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self - other;\n             }\n         }\n-        forward_ref_op_assign! { impl SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Mul for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Mul for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n@@ -263,140 +276,153 @@ macro_rules! wrapping_impl {\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl MulAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const MulAssign for Wrapping<$t> {\n             #[inline]\n             fn mul_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self * other;\n             }\n         }\n-        forward_ref_op_assign! { impl MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n-        impl Div for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Div for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn div(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_div(other.0))\n             }\n         }\n-        forward_ref_binop! { impl Div, div for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const Div, div for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl DivAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const DivAssign for Wrapping<$t> {\n             #[inline]\n             fn div_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self / other;\n             }\n         }\n-        forward_ref_op_assign! { impl DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n-        impl Rem for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Rem for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn rem(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0.wrapping_rem(other.0))\n             }\n         }\n-        forward_ref_binop! { impl Rem, rem for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const Rem, rem for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl RemAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const RemAssign for Wrapping<$t> {\n             #[inline]\n             fn rem_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self % other;\n             }\n         }\n-        forward_ref_op_assign! { impl RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Not for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Not for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn not(self) -> Wrapping<$t> {\n                 Wrapping(!self.0)\n             }\n         }\n-        forward_ref_unop! { impl Not, not for Wrapping<$t>,\n+        forward_ref_unop! { impl const Not, not for Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitXor for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXor for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn bitxor(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0 ^ other.0)\n             }\n         }\n-        forward_ref_binop! { impl BitXor, bitxor for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const BitXor, bitxor for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitXorAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXorAssign for Wrapping<$t> {\n             #[inline]\n             fn bitxor_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self ^ other;\n             }\n         }\n-        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitOr for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOr for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn bitor(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0 | other.0)\n             }\n         }\n-        forward_ref_binop! { impl BitOr, bitor for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const BitOr, bitor for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitOrAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOrAssign for Wrapping<$t> {\n             #[inline]\n             fn bitor_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self | other;\n             }\n         }\n-        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitAnd for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAnd for Wrapping<$t> {\n             type Output = Wrapping<$t>;\n \n             #[inline]\n             fn bitand(self, other: Wrapping<$t>) -> Wrapping<$t> {\n                 Wrapping(self.0 & other.0)\n             }\n         }\n-        forward_ref_binop! { impl BitAnd, bitand for Wrapping<$t>, Wrapping<$t>,\n+        forward_ref_binop! { impl const BitAnd, bitand for Wrapping<$t>, Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitAndAssign for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAndAssign for Wrapping<$t> {\n             #[inline]\n             fn bitand_assign(&mut self, other: Wrapping<$t>) {\n                 *self = *self & other;\n             }\n         }\n-        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n+        forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n \n         #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n-        impl Neg for Wrapping<$t> {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Neg for Wrapping<$t> {\n             type Output = Self;\n             #[inline]\n             fn neg(self) -> Self {\n                 Wrapping(0) - self\n             }\n         }\n-        forward_ref_unop! { impl Neg, neg for Wrapping<$t>,\n+        forward_ref_unop! { impl const Neg, neg for Wrapping<$t>,\n                 #[stable(feature = \"wrapping_ref\", since = \"1.14.0\")] }\n \n     )*)"}, {"sha": "e954742938910cc4f36ea5f2432e7fe761a7a851", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=23d033e17788d828aad233ff7c55652ac310d0b8", "patch": "@@ -92,15 +92,16 @@ pub trait Add<Rhs = Self> {\n macro_rules! add_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Add for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Add for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn add(self, other: $t) -> $t { self + other }\n         }\n \n-        forward_ref_binop! { impl Add, add for $t, $t }\n+        forward_ref_binop! { impl const Add, add for $t, $t }\n     )*)\n }\n \n@@ -198,15 +199,16 @@ pub trait Sub<Rhs = Self> {\n macro_rules! sub_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Sub for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Sub for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn sub(self, other: $t) -> $t { self - other }\n         }\n \n-        forward_ref_binop! { impl Sub, sub for $t, $t }\n+        forward_ref_binop! { impl const Sub, sub for $t, $t }\n     )*)\n }\n \n@@ -326,15 +328,16 @@ pub trait Mul<Rhs = Self> {\n macro_rules! mul_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Mul for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Mul for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn mul(self, other: $t) -> $t { self * other }\n         }\n \n-        forward_ref_binop! { impl Mul, mul for $t, $t }\n+        forward_ref_binop! { impl const Mul, mul for $t, $t }\n     )*)\n }\n \n@@ -464,14 +467,15 @@ macro_rules! div_impl_integer {\n         ///\n         #[doc = $panic]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Div for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Div for $t {\n             type Output = $t;\n \n             #[inline]\n             fn div(self, other: $t) -> $t { self / other }\n         }\n \n-        forward_ref_binop! { impl Div, div for $t, $t }\n+        forward_ref_binop! { impl const Div, div for $t, $t }\n     )*)*)\n }\n \n@@ -483,14 +487,15 @@ div_impl_integer! {\n macro_rules! div_impl_float {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Div for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Div for $t {\n             type Output = $t;\n \n             #[inline]\n             fn div(self, other: $t) -> $t { self / other }\n         }\n \n-        forward_ref_binop! { impl Div, div for $t, $t }\n+        forward_ref_binop! { impl const Div, div for $t, $t }\n     )*)\n }\n \n@@ -564,14 +569,15 @@ macro_rules! rem_impl_integer {\n         ///\n         #[doc = $panic]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Rem for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Rem for $t {\n             type Output = $t;\n \n             #[inline]\n             fn rem(self, other: $t) -> $t { self % other }\n         }\n \n-        forward_ref_binop! { impl Rem, rem for $t, $t }\n+        forward_ref_binop! { impl const Rem, rem for $t, $t }\n     )*)*)\n }\n \n@@ -598,14 +604,15 @@ macro_rules! rem_impl_float {\n         /// assert_eq!(x % y, remainder);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Rem for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Rem for $t {\n             type Output = $t;\n \n             #[inline]\n             fn rem(self, other: $t) -> $t { self % other }\n         }\n \n-        forward_ref_binop! { impl Rem, rem for $t, $t }\n+        forward_ref_binop! { impl const Rem, rem for $t, $t }\n     )*)\n }\n \n@@ -671,15 +678,16 @@ pub trait Neg {\n macro_rules! neg_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Neg for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Neg for $t {\n             type Output = $t;\n \n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn neg(self) -> $t { -self }\n         }\n \n-        forward_ref_unop! { impl Neg, neg for $t }\n+        forward_ref_unop! { impl const Neg, neg for $t }\n     )*)\n }\n \n@@ -739,13 +747,14 @@ pub trait AddAssign<Rhs = Self> {\n macro_rules! add_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl AddAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const AddAssign for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn add_assign(&mut self, other: $t) { *self += other }\n         }\n \n-        forward_ref_op_assign! { impl AddAssign, add_assign for $t, $t }\n+        forward_ref_op_assign! { impl const AddAssign, add_assign for $t, $t }\n     )+)\n }\n \n@@ -805,13 +814,14 @@ pub trait SubAssign<Rhs = Self> {\n macro_rules! sub_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl SubAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const SubAssign for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn sub_assign(&mut self, other: $t) { *self -= other }\n         }\n \n-        forward_ref_op_assign! { impl SubAssign, sub_assign for $t, $t }\n+        forward_ref_op_assign! { impl const SubAssign, sub_assign for $t, $t }\n     )+)\n }\n \n@@ -862,13 +872,14 @@ pub trait MulAssign<Rhs = Self> {\n macro_rules! mul_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl MulAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const MulAssign for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn mul_assign(&mut self, other: $t) { *self *= other }\n         }\n \n-        forward_ref_op_assign! { impl MulAssign, mul_assign for $t, $t }\n+        forward_ref_op_assign! { impl const MulAssign, mul_assign for $t, $t }\n     )+)\n }\n \n@@ -919,12 +930,13 @@ pub trait DivAssign<Rhs = Self> {\n macro_rules! div_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl DivAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const DivAssign for $t {\n             #[inline]\n             fn div_assign(&mut self, other: $t) { *self /= other }\n         }\n \n-        forward_ref_op_assign! { impl DivAssign, div_assign for $t, $t }\n+        forward_ref_op_assign! { impl const DivAssign, div_assign for $t, $t }\n     )+)\n }\n \n@@ -979,12 +991,13 @@ pub trait RemAssign<Rhs = Self> {\n macro_rules! rem_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl RemAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const RemAssign for $t {\n             #[inline]\n             fn rem_assign(&mut self, other: $t) { *self %= other }\n         }\n \n-        forward_ref_op_assign! { impl RemAssign, rem_assign for $t, $t }\n+        forward_ref_op_assign! { impl const RemAssign, rem_assign for $t, $t }\n     )+)\n }\n "}, {"sha": "255f6cb7933a244271100cc9cd556cf06e8938c8", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d033e17788d828aad233ff7c55652ac310d0b8/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=23d033e17788d828aad233ff7c55652ac310d0b8", "patch": "@@ -54,14 +54,15 @@ pub trait Not {\n macro_rules! not_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Not for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Not for $t {\n             type Output = $t;\n \n             #[inline]\n             fn not(self) -> $t { !self }\n         }\n \n-        forward_ref_unop! { impl Not, not for $t }\n+        forward_ref_unop! { impl const Not, not for $t }\n     )*)\n }\n \n@@ -154,14 +155,15 @@ pub trait BitAnd<Rhs = Self> {\n macro_rules! bitand_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitAnd for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAnd for $t {\n             type Output = $t;\n \n             #[inline]\n             fn bitand(self, rhs: $t) -> $t { self & rhs }\n         }\n \n-        forward_ref_binop! { impl BitAnd, bitand for $t, $t }\n+        forward_ref_binop! { impl const BitAnd, bitand for $t, $t }\n     )*)\n }\n \n@@ -254,14 +256,15 @@ pub trait BitOr<Rhs = Self> {\n macro_rules! bitor_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitOr for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOr for $t {\n             type Output = $t;\n \n             #[inline]\n             fn bitor(self, rhs: $t) -> $t { self | rhs }\n         }\n \n-        forward_ref_binop! { impl BitOr, bitor for $t, $t }\n+        forward_ref_binop! { impl const BitOr, bitor for $t, $t }\n     )*)\n }\n \n@@ -354,14 +357,15 @@ pub trait BitXor<Rhs = Self> {\n macro_rules! bitxor_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl BitXor for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXor for $t {\n             type Output = $t;\n \n             #[inline]\n             fn bitxor(self, other: $t) -> $t { self ^ other }\n         }\n \n-        forward_ref_binop! { impl BitXor, bitxor for $t, $t }\n+        forward_ref_binop! { impl const BitXor, bitxor for $t, $t }\n     )*)\n }\n \n@@ -451,7 +455,8 @@ pub trait Shl<Rhs = Self> {\n macro_rules! shl_impl {\n     ($t:ty, $f:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shl<$f> for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shl<$f> for $t {\n             type Output = $t;\n \n             #[inline]\n@@ -461,7 +466,7 @@ macro_rules! shl_impl {\n             }\n         }\n \n-        forward_ref_binop! { impl Shl, shl for $t, $f }\n+        forward_ref_binop! { impl const Shl, shl for $t, $f }\n     };\n }\n \n@@ -569,7 +574,8 @@ pub trait Shr<Rhs = Self> {\n macro_rules! shr_impl {\n     ($t:ty, $f:ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Shr<$f> for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const Shr<$f> for $t {\n             type Output = $t;\n \n             #[inline]\n@@ -579,7 +585,7 @@ macro_rules! shr_impl {\n             }\n         }\n \n-        forward_ref_binop! { impl Shr, shr for $t, $f }\n+        forward_ref_binop! { impl const Shr, shr for $t, $f }\n     };\n }\n \n@@ -704,12 +710,13 @@ pub trait BitAndAssign<Rhs = Self> {\n macro_rules! bitand_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitAndAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAndAssign for $t {\n             #[inline]\n             fn bitand_assign(&mut self, other: $t) { *self &= other }\n         }\n \n-        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for $t, $t }\n+        forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for $t, $t }\n     )+)\n }\n \n@@ -775,12 +782,13 @@ pub trait BitOrAssign<Rhs = Self> {\n macro_rules! bitor_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitOrAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOrAssign for $t {\n             #[inline]\n             fn bitor_assign(&mut self, other: $t) { *self |= other }\n         }\n \n-        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for $t, $t }\n+        forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for $t, $t }\n     )+)\n }\n \n@@ -846,12 +854,13 @@ pub trait BitXorAssign<Rhs = Self> {\n macro_rules! bitxor_assign_impl {\n     ($($t:ty)+) => ($(\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl BitXorAssign for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXorAssign for $t {\n             #[inline]\n             fn bitxor_assign(&mut self, other: $t) { *self ^= other }\n         }\n \n-        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for $t, $t }\n+        forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for $t, $t }\n     )+)\n }\n \n@@ -907,15 +916,16 @@ pub trait ShlAssign<Rhs = Self> {\n macro_rules! shl_assign_impl {\n     ($t:ty, $f:ty) => {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShlAssign<$f> for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShlAssign<$f> for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn shl_assign(&mut self, other: $f) {\n                 *self <<= other\n             }\n         }\n \n-        forward_ref_op_assign! { impl ShlAssign, shl_assign for $t, $f }\n+        forward_ref_op_assign! { impl const ShlAssign, shl_assign for $t, $f }\n     };\n }\n \n@@ -989,15 +999,16 @@ pub trait ShrAssign<Rhs = Self> {\n macro_rules! shr_assign_impl {\n     ($t:ty, $f:ty) => {\n         #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-        impl ShrAssign<$f> for $t {\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const ShrAssign<$f> for $t {\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             fn shr_assign(&mut self, other: $f) {\n                 *self >>= other\n             }\n         }\n \n-        forward_ref_op_assign! { impl ShrAssign, shr_assign for $t, $f }\n+        forward_ref_op_assign! { impl const ShrAssign, shr_assign for $t, $f }\n     };\n }\n "}]}