{"sha": "e6217972644588a3be4fecb85b195f17b0220047", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MjE3OTcyNjQ0NTg4YTNiZTRmZWNiODViMTk1ZjE3YjAyMjAwNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-10T23:26:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-10T23:26:21Z"}, "message": "Auto merge of #65241 - tmiasko:no-std-san, r=alexcrichton\n\nbuild-std compatible sanitizer support\n\n### Motivation\n\nWhen using `-Z sanitizer=*` feature it is essential that both user code and\nstandard library is instrumented. Otherwise the utility of sanitizer will be\nlimited, or its use will be impractical like in the case of memory sanitizer.\n\nThe recently introduced cargo feature build-std makes it possible to rebuild\nstandard library with arbitrary rustc flags. Unfortunately, those changes alone\ndo not make it easy to rebuild standard library with sanitizers, since runtimes\nare dependencies of std that have to be build in specific environment,\ngenerally not available outside rustbuild process. Additionally rebuilding them\nrequires presence of llvm-config and compiler-rt sources.\n\nThe goal of changes proposed here is to make it possible to avoid rebuilding\nsanitizer runtimes when rebuilding the std, thus making it possible to\ninstrument standard library for use with sanitizer with simple, although\nverbose command:\n\n```\nenv CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUSTFLAGS=-Zsanitizer=thread cargo test -Zbuild-std --target x86_64-unknown-linux-gnu\n```\n\n### Implementation\n\n* Sanitizer runtimes are no long packed into crates. Instead, libraries build\n  from compiler-rt are used as is, after renaming them into `librusc_rt.*`.\n* rustc obtains runtimes from target libdir for default sysroot, so that\n  they are not required in custom build sysroots created with build-std.\n* The runtimes are only linked-in into executables to address issue #64629.\n  (in previous design it was hard to avoid linking runtimes into static\n  libraries produced by rustc as demonstrated by sanitizer-staticlib-link\n  test, which still passes despite changes made in #64780).\n\ncc @kennytm, @japaric, @firstyear, @choller", "tree": {"sha": "09dc5a518f57f77a7456b0be78cc747adc7d1790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09dc5a518f57f77a7456b0be78cc747adc7d1790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6217972644588a3be4fecb85b195f17b0220047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6217972644588a3be4fecb85b195f17b0220047", "html_url": "https://github.com/rust-lang/rust/commit/e6217972644588a3be4fecb85b195f17b0220047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6217972644588a3be4fecb85b195f17b0220047/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175631311716d7dfeceec40d2587cde7142ffa8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/175631311716d7dfeceec40d2587cde7142ffa8c", "html_url": "https://github.com/rust-lang/rust/commit/175631311716d7dfeceec40d2587cde7142ffa8c"}, {"sha": "e88f071ed373f1eb572dee6bc6898508425126e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88f071ed373f1eb572dee6bc6898508425126e5", "html_url": "https://github.com/rust-lang/rust/commit/e88f071ed373f1eb572dee6bc6898508425126e5"}], "stats": {"total": 1063, "additions": 398, "deletions": 665}, "files": [{"sha": "680a454fb68eaf0c2210a06e134d1aa378704b75", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -3345,17 +3345,6 @@ dependencies = [\n  \"smallvec 1.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_asan\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"alloc\",\n- \"build_helper\",\n- \"cmake\",\n- \"compiler_builtins\",\n- \"core\",\n-]\n-\n [[package]]\n name = \"rustc_ast_lowering\"\n version = \"0.0.0\"\n@@ -3674,17 +3663,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"rustc_lsan\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"alloc\",\n- \"build_helper\",\n- \"cmake\",\n- \"compiler_builtins\",\n- \"core\",\n-]\n-\n [[package]]\n name = \"rustc_macros\"\n version = \"0.1.0\"\n@@ -3746,17 +3724,6 @@ dependencies = [\n  \"syntax\",\n ]\n \n-[[package]]\n-name = \"rustc_msan\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"alloc\",\n- \"build_helper\",\n- \"cmake\",\n- \"compiler_builtins\",\n- \"core\",\n-]\n-\n [[package]]\n name = \"rustc_parse\"\n version = \"0.0.0\"\n@@ -3929,17 +3896,6 @@ dependencies = [\n  \"syntax\",\n ]\n \n-[[package]]\n-name = \"rustc_tsan\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"alloc\",\n- \"build_helper\",\n- \"cmake\",\n- \"compiler_builtins\",\n- \"core\",\n-]\n-\n [[package]]\n name = \"rustc_typeck\"\n version = \"0.0.0\"\n@@ -4301,10 +4257,6 @@ dependencies = [\n  \"panic_unwind\",\n  \"profiler_builtins\",\n  \"rand 0.7.0\",\n- \"rustc_asan\",\n- \"rustc_lsan\",\n- \"rustc_msan\",\n- \"rustc_tsan\",\n  \"unwind\",\n  \"wasi 0.9.0+wasi-snapshot-preview1\",\n ]"}, {"sha": "00c8e72a8f6851c82c68a4f0cd2925d8fd3ed584", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -343,6 +343,7 @@ impl<'a> Builder<'a> {\n                 tool::Rustdoc,\n                 tool::Clippy,\n                 native::Llvm,\n+                native::Sanitizers,\n                 tool::Rustfmt,\n                 tool::Miri,\n                 native::Lld"}, {"sha": "b76515763fbdb19a18d6049418ac28ee6d8165ab", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -45,7 +45,7 @@ impl Step for Std {\n         let compiler = builder.compiler(0, builder.config.build);\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n-        std_cargo(builder, &compiler, target, &mut cargo);\n+        std_cargo(builder, target, &mut cargo);\n \n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo("}, {"sha": "eced03506ab9ff64fcdcf91acf072556ea74c8d8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -87,7 +87,7 @@ impl Step for Std {\n         target_deps.extend(copy_third_party_objects(builder, &compiler, target).into_iter());\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n-        std_cargo(builder, &compiler, target, &mut cargo);\n+        std_cargo(builder, target, &mut cargo);\n \n         builder.info(&format!(\n             \"Building stage{} std artifacts ({} -> {})\",\n@@ -153,17 +153,18 @@ fn copy_third_party_objects(\n         copy_and_stamp(Path::new(&src), \"libunwind.a\");\n     }\n \n+    if builder.config.sanitizers && compiler.stage != 0 {\n+        // The sanitizers are only copied in stage1 or above,\n+        // to avoid creating dependency on LLVM.\n+        target_deps.extend(copy_sanitizers(builder, &compiler, target));\n+    }\n+\n     target_deps\n }\n \n /// Configure cargo to compile the standard library, adding appropriate env vars\n /// and such.\n-pub fn std_cargo(\n-    builder: &Builder<'_>,\n-    compiler: &Compiler,\n-    target: Interned<String>,\n-    cargo: &mut Cargo,\n-) {\n+pub fn std_cargo(builder: &Builder<'_>, target: Interned<String>, cargo: &mut Cargo) {\n     if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n@@ -206,19 +207,6 @@ pub fn std_cargo(\n         let mut features = builder.std_features();\n         features.push_str(&compiler_builtins_c_feature);\n \n-        if compiler.stage != 0 && builder.config.sanitizers {\n-            // This variable is used by the sanitizer runtime crates, e.g.\n-            // rustc_lsan, to build the sanitizer runtime from C code\n-            // When this variable is missing, those crates won't compile the C code,\n-            // so we don't set this variable during stage0 where llvm-config is\n-            // missing\n-            // We also only build the runtimes when --enable-sanitizers (or its\n-            // config.toml equivalent) is used\n-            let llvm_config = builder.ensure(native::Llvm { target: builder.config.build });\n-            cargo.env(\"LLVM_CONFIG\", llvm_config);\n-            cargo.env(\"RUSTC_BUILD_SANITIZERS\", \"1\");\n-        }\n-\n         cargo\n             .arg(\"--features\")\n             .arg(features)\n@@ -276,31 +264,43 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         let hostdir = builder.sysroot_libdir(target_compiler, compiler.host);\n         add_to_sysroot(builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n-\n-        if builder.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n-            // The sanitizers are only built in stage1 or above, so the dylibs will\n-            // be missing in stage0 and causes panic. See the `std()` function above\n-            // for reason why the sanitizers are not built in stage0.\n-            copy_apple_sanitizer_dylibs(builder, &builder.native_dir(target), \"osx\", &libdir);\n-        }\n     }\n }\n \n-fn copy_apple_sanitizer_dylibs(\n+/// Copies sanitizer runtime libraries into target libdir.\n+fn copy_sanitizers(\n     builder: &Builder<'_>,\n-    native_dir: &Path,\n-    platform: &str,\n-    into: &Path,\n-) {\n-    for &sanitizer in &[\"asan\", \"tsan\"] {\n-        let filename = format!(\"lib__rustc__clang_rt.{}_{}_dynamic.dylib\", sanitizer, platform);\n-        let mut src_path = native_dir.join(sanitizer);\n-        src_path.push(\"build\");\n-        src_path.push(\"lib\");\n-        src_path.push(\"darwin\");\n-        src_path.push(&filename);\n-        builder.copy(&src_path, &into.join(filename));\n+    compiler: &Compiler,\n+    target: Interned<String>,\n+) -> Vec<PathBuf> {\n+    let runtimes: Vec<native::SanitizerRuntime> = builder.ensure(native::Sanitizers { target });\n+\n+    if builder.config.dry_run {\n+        return Vec::new();\n+    }\n+\n+    let mut target_deps = Vec::new();\n+    let libdir = builder.sysroot_libdir(*compiler, target);\n+\n+    for runtime in &runtimes {\n+        let dst = libdir.join(&runtime.name);\n+        builder.copy(&runtime.path, &dst);\n+\n+        if target == \"x86_64-apple-darwin\" {\n+            // Update the library install name reflect the fact it has been renamed.\n+            let status = Command::new(\"install_name_tool\")\n+                .arg(\"-id\")\n+                .arg(format!(\"@rpath/{}\", runtime.name))\n+                .arg(&dst)\n+                .status()\n+                .expect(\"failed to execute `install_name_tool`\");\n+            assert!(status.success());\n+        }\n+\n+        target_deps.push(dst);\n     }\n+\n+    target_deps\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "8d13df3ee21a49e2f179a68ae999d8cb041dca59", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -984,10 +984,6 @@ impl Step for Src {\n             \"src/libcore\",\n             \"src/libpanic_abort\",\n             \"src/libpanic_unwind\",\n-            \"src/librustc_asan\",\n-            \"src/librustc_lsan\",\n-            \"src/librustc_msan\",\n-            \"src/librustc_tsan\",\n             \"src/libstd\",\n             \"src/libunwind\",\n             \"src/libtest\","}, {"sha": "204056598d9004882914c0cc1f8cf4980f8f235f", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -391,7 +391,7 @@ impl Step for Std {\n \n         let run_cargo_rustdoc_for = |package: &str| {\n             let mut cargo = builder.cargo(compiler, Mode::Std, target, \"rustdoc\");\n-            compile::std_cargo(builder, &compiler, target, &mut cargo);\n+            compile::std_cargo(builder, target, &mut cargo);\n \n             // Keep a whitelist so we do not build internal stdlib crates, these will be\n             // build by the rustc step later if enabled."}, {"sha": "ce977f1bbc44e5c0eda159230ba65cda643746d1", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -546,3 +546,118 @@ impl Step for TestHelpers {\n             .compile(\"rust_test_helpers\");\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Sanitizers {\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Sanitizers {\n+    type Output = Vec<SanitizerRuntime>;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/llvm-project/compiler-rt\").path(\"src/sanitizers\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Sanitizers { target: run.target });\n+    }\n+\n+    /// Builds sanitizer runtime libraries.\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let compiler_rt_dir = builder.src.join(\"src/llvm-project/compiler-rt\");\n+        if !compiler_rt_dir.exists() {\n+            return Vec::new();\n+        }\n+\n+        let out_dir = builder.native_dir(self.target).join(\"sanitizers\");\n+        let runtimes = supported_sanitizers(&out_dir, self.target);\n+        if runtimes.is_empty() {\n+            return runtimes;\n+        }\n+\n+        let llvm_config = builder.ensure(Llvm { target: builder.config.build });\n+        if builder.config.dry_run {\n+            return runtimes;\n+        }\n+\n+        let done_stamp = out_dir.join(\"sanitizers-finished-building\");\n+        if done_stamp.exists() {\n+            builder.info(&format!(\n+                \"Assuming that sanitizers rebuild is not necessary. \\\n+                To force a rebuild, remove the file `{}`\",\n+                done_stamp.display()\n+            ));\n+            return runtimes;\n+        }\n+\n+        builder.info(&format!(\"Building sanitizers for {}\", self.target));\n+        let _time = util::timeit(&builder);\n+\n+        let mut cfg = cmake::Config::new(&compiler_rt_dir);\n+        cfg.target(&self.target);\n+        cfg.host(&builder.config.build);\n+        cfg.profile(\"Release\");\n+\n+        cfg.define(\"CMAKE_C_COMPILER_TARGET\", self.target);\n+        cfg.define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_BUILD_CRT\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_BUILD_LIBFUZZER\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_BUILD_PROFILE\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\");\n+        cfg.define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\");\n+        cfg.define(\"COMPILER_RT_DEFAULT_TARGET_ONLY\", \"ON\");\n+        cfg.define(\"COMPILER_RT_USE_LIBCXX\", \"OFF\");\n+        cfg.define(\"LLVM_CONFIG_PATH\", &llvm_config);\n+\n+        t!(fs::create_dir_all(&out_dir));\n+        cfg.out_dir(out_dir);\n+\n+        for runtime in &runtimes {\n+            cfg.build_target(&runtime.cmake_target);\n+            cfg.build();\n+        }\n+\n+        t!(fs::write(&done_stamp, b\"\"));\n+\n+        runtimes\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct SanitizerRuntime {\n+    /// CMake target used to build the runtime.\n+    pub cmake_target: String,\n+    /// Path to the built runtime library.\n+    pub path: PathBuf,\n+    /// Library filename that will be used rustc.\n+    pub name: String,\n+}\n+\n+/// Returns sanitizers available on a given target.\n+fn supported_sanitizers(out_dir: &Path, target: Interned<String>) -> Vec<SanitizerRuntime> {\n+    let mut result = Vec::new();\n+    match &*target {\n+        \"x86_64-apple-darwin\" => {\n+            for s in &[\"asan\", \"lsan\", \"tsan\"] {\n+                result.push(SanitizerRuntime {\n+                    cmake_target: format!(\"clang_rt.{}_osx_dynamic\", s),\n+                    path: out_dir\n+                        .join(&format!(\"build/lib/darwin/libclang_rt.{}_osx_dynamic.dylib\", s)),\n+                    name: format!(\"librustc_rt.{}.dylib\", s),\n+                });\n+            }\n+        }\n+        \"x86_64-unknown-linux-gnu\" => {\n+            for s in &[\"asan\", \"lsan\", \"msan\", \"tsan\"] {\n+                result.push(SanitizerRuntime {\n+                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n+                    path: out_dir.join(&format!(\"build/lib/linux/libclang_rt.{}-x86_64.a\", s)),\n+                    name: format!(\"librustc_rt.{}.a\", s),\n+                });\n+            }\n+        }\n+        _ => {}\n+    }\n+    result\n+}"}, {"sha": "10e07489e1212ce76f804a177b1fa8cc5c7ee8cf", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -1659,7 +1659,7 @@ impl Step for Crate {\n         let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         match mode {\n             Mode::Std => {\n-                compile::std_cargo(builder, &compiler, target, &mut cargo);\n+                compile::std_cargo(builder, target, &mut cargo);\n             }\n             Mode::Rustc => {\n                 builder.ensure(compile::Rustc { compiler, target });"}, {"sha": "43c3c5773ce5b2d45cd32ee1157cf2d8ce0dc1b2", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 0, "deletions": 104, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -1,7 +1,5 @@\n-use std::fs::File;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n-use std::thread;\n use std::time::{SystemTime, UNIX_EPOCH};\n use std::{env, fs};\n \n@@ -181,108 +179,6 @@ pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n     }\n }\n \n-#[must_use]\n-pub struct NativeLibBoilerplate {\n-    pub src_dir: PathBuf,\n-    pub out_dir: PathBuf,\n-}\n-\n-impl NativeLibBoilerplate {\n-    /// On macOS we don't want to ship the exact filename that compiler-rt builds.\n-    /// This conflicts with the system and ours is likely a wildly different\n-    /// version, so they can't be substituted.\n-    ///\n-    /// As a result, we rename it here but we need to also use\n-    /// `install_name_tool` on macOS to rename the commands listed inside of it to\n-    /// ensure it's linked against correctly.\n-    pub fn fixup_sanitizer_lib_name(&self, sanitizer_name: &str) {\n-        if env::var(\"TARGET\").unwrap() != \"x86_64-apple-darwin\" {\n-            return;\n-        }\n-\n-        let dir = self.out_dir.join(\"build/lib/darwin\");\n-        let name = format!(\"clang_rt.{}_osx_dynamic\", sanitizer_name);\n-        let src = dir.join(&format!(\"lib{}.dylib\", name));\n-        let new_name = format!(\"lib__rustc__{}.dylib\", name);\n-        let dst = dir.join(&new_name);\n-\n-        println!(\"{} => {}\", src.display(), dst.display());\n-        fs::rename(&src, &dst).unwrap();\n-        let status = Command::new(\"install_name_tool\")\n-            .arg(\"-id\")\n-            .arg(format!(\"@rpath/{}\", new_name))\n-            .arg(&dst)\n-            .status()\n-            .expect(\"failed to execute `install_name_tool`\");\n-        assert!(status.success());\n-    }\n-}\n-\n-impl Drop for NativeLibBoilerplate {\n-    fn drop(&mut self) {\n-        if !thread::panicking() {\n-            t!(File::create(self.out_dir.join(\"rustbuild.timestamp\")));\n-        }\n-    }\n-}\n-\n-// Perform standard preparations for native libraries that are build only once for all stages.\n-// Emit rerun-if-changed and linking attributes for Cargo, check if any source files are\n-// updated, calculate paths used later in actual build with CMake/make or C/C++ compiler.\n-// If Err is returned, then everything is up-to-date and further build actions can be skipped.\n-// Timestamps are created automatically when the result of `native_lib_boilerplate` goes out\n-// of scope, so all the build actions should be completed until then.\n-pub fn native_lib_boilerplate(\n-    src_dir: &Path,\n-    out_name: &str,\n-    link_name: &str,\n-    search_subdir: &str,\n-) -> Result<NativeLibBoilerplate, ()> {\n-    rerun_if_changed_anything_in_dir(src_dir);\n-\n-    let out_dir =\n-        env::var_os(\"RUSTBUILD_NATIVE_DIR\").unwrap_or_else(|| env::var_os(\"OUT_DIR\").unwrap());\n-    let out_dir = PathBuf::from(out_dir).join(out_name);\n-    t!(fs::create_dir_all(&out_dir));\n-    if link_name.contains('=') {\n-        println!(\"cargo:rustc-link-lib={}\", link_name);\n-    } else {\n-        println!(\"cargo:rustc-link-lib=static={}\", link_name);\n-    }\n-    println!(\"cargo:rustc-link-search=native={}\", out_dir.join(search_subdir).display());\n-\n-    let timestamp = out_dir.join(\"rustbuild.timestamp\");\n-    if !up_to_date(Path::new(\"build.rs\"), &timestamp) || !up_to_date(src_dir, &timestamp) {\n-        Ok(NativeLibBoilerplate { src_dir: src_dir.to_path_buf(), out_dir })\n-    } else {\n-        Err(())\n-    }\n-}\n-\n-pub fn sanitizer_lib_boilerplate(\n-    sanitizer_name: &str,\n-) -> Result<(NativeLibBoilerplate, String), ()> {\n-    let (link_name, search_path, apple) = match &*env::var(\"TARGET\").unwrap() {\n-        \"x86_64-unknown-linux-gnu\" => {\n-            (format!(\"clang_rt.{}-x86_64\", sanitizer_name), \"build/lib/linux\", false)\n-        }\n-        \"x86_64-apple-darwin\" => {\n-            (format!(\"clang_rt.{}_osx_dynamic\", sanitizer_name), \"build/lib/darwin\", true)\n-        }\n-        _ => return Err(()),\n-    };\n-    let to_link = if apple {\n-        format!(\"dylib=__rustc__{}\", link_name)\n-    } else {\n-        format!(\"static={}\", link_name)\n-    };\n-    // This env var is provided by rustbuild to tell us where `compiler-rt`\n-    // lives.\n-    let dir = env::var_os(\"RUST_COMPILER_RT_ROOT\").unwrap();\n-    let lib = native_lib_boilerplate(dir.as_ref(), sanitizer_name, &to_link, search_path)?;\n-    Ok((lib, link_name))\n-}\n-\n fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());"}, {"sha": "cbb90bd3bb3316512f357e24add4366dbb88c2ec", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -0,0 +1,163 @@\n+# `sanitizer`\n+\n+The tracking issue for this feature is: [#39699](https://github.com/rust-lang/rust/issues/39699).\n+\n+------------------------\n+\n+This feature allows for use of one of following sanitizers:\n+\n+* [AddressSanitizer][clang-asan] a faster memory error detector. Can\n+  detect out-of-bounds access to heap, stack, and globals, use after free, use\n+  after return, double free, invalid free, memory leaks.\n+* [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n+* [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n+* [ThreadSanitizer][clang-tsan] a fast data race detector.\n+\n+To enable a sanitizer compile with `-Zsanitizer=...` option, where value is one\n+of `address`, `leak`, `memory` or `thread`.\n+\n+# Examples\n+\n+This sections show various issues that can be detected with sanitizers.  For\n+simplicity, the examples are prepared under assumption that optimization level\n+used is zero.\n+\n+## AddressSanitizer\n+\n+Stack buffer overflow:\n+\n+```shell\n+$ cat a.rs\n+fn main() {\n+    let xs = [0, 1, 2, 3];\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n+}\n+$ rustc -Zsanitizer=address a.rs\n+$ ./a\n+=================================================================\n+==10029==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffcc15f43d0 at pc 0x55f77dc015c5 bp 0x7ffcc15f4390 sp 0x7ffcc15f4388\n+READ of size 4 at 0x7ffcc15f43d0 thread T0\n+    #0 0x55f77dc015c4 in a::main::hab3bd2a745c2d0ac (/tmp/a+0xa5c4)\n+    #1 0x55f77dc01cdb in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::haa8c76d1faa7b7ca (/tmp/a+0xacdb)\n+    #2 0x55f77dc90f02 in std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hfeb9a1aef9ac820d /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/rt.rs:48:12\n+    #3 0x55f77dc90f02 in std::panicking::try::do_call::h12f0919717b8e0a6 /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/panicking.rs:288:39\n+    #4 0x55f77dc926c9 in __rust_maybe_catch_panic /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libpanic_unwind/lib.rs:80:7\n+    #5 0x55f77dc9197c in std::panicking::try::h413b21cdcd6cfd86 /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/panicking.rs:267:12\n+    #6 0x55f77dc9197c in std::panic::catch_unwind::hc5cc8ef2fd73424d /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/panic.rs:396:8\n+    #7 0x55f77dc9197c in std::rt::lang_start_internal::h2039f418ab92218f /rustc/c27f7568bc74c418996892028a629eed5a7f5f00/src/libstd/rt.rs:47:24\n+    #8 0x55f77dc01c61 in std::rt::lang_start::ha905d28f6b61d691 (/tmp/a+0xac61)\n+    #9 0x55f77dc0163a in main (/tmp/a+0xa63a)\n+    #10 0x7f9b3cf5bbba in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x26bba)\n+    #11 0x55f77dc01289 in _start (/tmp/a+0xa289)\n+\n+Address 0x7ffcc15f43d0 is located in stack of thread T0 at offset 48 in frame\n+    #0 0x55f77dc0135f in a::main::hab3bd2a745c2d0ac (/tmp/a+0xa35f)\n+\n+  This frame has 1 object(s):\n+    [32, 48) 'xs' <== Memory access at offset 48 overflows this variable\n+HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n+      (longjmp and C++ exceptions *are* supported)\n+SUMMARY: AddressSanitizer: stack-buffer-overflow (/tmp/a+0xa5c4) in a::main::hab3bd2a745c2d0ac\n+Shadow bytes around the buggy address:\n+  0x1000182b6820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+=>0x1000182b6870: 00 00 00 00 f1 f1 f1 f1 00 00[f3]f3 00 00 00 00\n+  0x1000182b6880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b6890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b68a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b68b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+  0x1000182b68c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n+Shadow byte legend (one shadow byte represents 8 application bytes):\n+  Addressable:           00\n+  Partially addressable: 01 02 03 04 05 06 07 \n+  Heap left redzone:       fa\n+  Freed heap region:       fd\n+  Stack left redzone:      f1\n+  Stack mid redzone:       f2\n+  Stack right redzone:     f3\n+  Stack after return:      f5\n+  Stack use after scope:   f8\n+  Global redzone:          f9\n+  Global init order:       f6\n+  Poisoned by user:        f7\n+  Container overflow:      fc\n+  Array cookie:            ac\n+  Intra object redzone:    bb\n+  ASan internal:           fe\n+  Left alloca redzone:     ca\n+  Right alloca redzone:    cb\n+  Shadow gap:              cc\n+==10029==ABORTING\n+```\n+\n+## MemorySanitizer\n+\n+Use of uninitialized memory. Note that we are using `-Zbuild-std` to instrument\n+standard library, and passing `-msan-track-origins=2` to the LLVM to track\n+origins of uninitialized memory:\n+\n+```shell\n+$ cat src/main.rs\n+use std::mem::MaybeUninit;\n+\n+fn main() {\n+    unsafe {\n+        let a = MaybeUninit::<[usize; 4]>::uninit();\n+        let a = a.assume_init();\n+        println!(\"{}\", a[2]);\n+    }\n+}\n+\n+$ env RUSTFLAGS=\"-Zsanitizer=memory -Cllvm-args=-msan-track-origins=2\" cargo -Zbuild-std run --target x86_64-unknown-linux-gnu\n+==9416==WARNING: MemorySanitizer: use-of-uninitialized-value\n+    #0 0x560c04f7488a in core::fmt::num::imp::fmt_u64::haa293b0b098501ca $RUST/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/src/libcore/fmt/num.rs:202:16\n+...\n+  Uninitialized value was stored to memory at\n+    #0 0x560c04ae898a in __msan_memcpy.part.0 $RUST/src/llvm-project/compiler-rt/lib/msan/msan_interceptors.cc:1558:3\n+    #1 0x560c04b2bf88 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:6:16\n+\n+  Uninitialized value was created by an allocation of 'a' in the stack frame of function '_ZN6memory4main17hd2333c1899d997f5E'\n+    #0 0x560c04b2bc50 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:3\n+```\n+\n+\n+# Instrumentation of external dependencies and std\n+\n+The sanitizers to varying degrees work correctly with partially instrumented\n+code. On the one extreme is LeakSanitizer that doesn't use any compile time\n+instrumentation, on the other is MemorySanitizer that requires that all program\n+code to be instrumented (failing to achieve that will inevitably result in\n+false positives).\n+\n+It is strongly recommended to combine sanitizers with recompiled and\n+instrumented standard library, for example using [cargo `-Zbuild-std`\n+functionality][build-std].\n+\n+[build-std]: https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std\n+\n+# Build scripts and procedural macros\n+\n+Use of sanitizers together with build scripts and procedural macros is\n+technically possible, but in almost all cases it would be best avoided.  This\n+is especially true for procedural macros which would require an instrumented\n+version of rustc.\n+\n+In more practical terms when using cargo always remember to pass `--target`\n+flag, so that rustflags will not be applied to build scripts and procedural\n+macros.\n+\n+# Additional Information\n+\n+* [Sanitizers project page](https://github.com/google/sanitizers/wiki/)\n+* [AddressSanitizer in Clang][clang-asan]\n+* [LeakSanitizer in Clang][clang-lsan]\n+* [MemorySanitizer in Clang][clang-msan]\n+* [ThreadSanitizer in Clang][clang-tsan]\n+\n+[clang-asan]: https://clang.llvm.org/docs/AddressSanitizer.html\n+[clang-lsan]: https://clang.llvm.org/docs/LeakSanitizer.html\n+[clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n+[clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html"}, {"sha": "82ae67fc05ac3ce680f6bad3c4e8871252229690", "filename": "src/doc/unstable-book/src/library-features/sanitizer-runtime-lib.md", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsanitizer-runtime-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsanitizer-runtime-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsanitizer-runtime-lib.md?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,5 +0,0 @@\n-# `sanitizer_runtime_lib`\n-\n-This feature is internal to the Rust compiler and is not intended for general use.\n-\n-------------------------"}, {"sha": "9de46f86200e14a885a6fc4ed41b00f80590f2fd", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -686,10 +686,6 @@ rustc_queries! {\n             fatal_cycle\n             desc { \"checking if the crate has_panic_handler\" }\n         }\n-        query is_sanitizer_runtime(_: CrateNum) -> bool {\n-            fatal_cycle\n-            desc { \"query a crate is `#![sanitizer_runtime]`\" }\n-        }\n         query is_profiler_runtime(_: CrateNum) -> bool {\n             fatal_cycle\n             desc { \"query a crate is `#![profiler_runtime]`\" }"}, {"sha": "df117de8720e067142a0b0c18ddee60bbf1919ed", "filename": "src/librustc_asan/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_asan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_asan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-build = \"build.rs\"\n-name = \"rustc_asan\"\n-version = \"0.0.0\"\n-edition = \"2018\"\n-\n-[lib]\n-name = \"rustc_asan\"\n-path = \"lib.rs\"\n-test = false\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.38\"\n-\n-[dependencies]\n-alloc = { path = \"../liballoc\" }\n-core = { path = \"../libcore\" }\n-compiler_builtins = \"0.1.0\""}, {"sha": "e276dc16c35eee447bab6e79112eb297a5013a27", "filename": "src/librustc_asan/build.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,30 +0,0 @@\n-use build_helper::sanitizer_lib_boilerplate;\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUSTC_BUILD_SANITIZERS\");\n-    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n-        return;\n-    }\n-    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        build_helper::restore_library_path();\n-\n-        let (native, target) = match sanitizer_lib_boilerplate(\"asan\") {\n-            Ok(native) => native,\n-            _ => return,\n-        };\n-\n-        Config::new(&native.src_dir)\n-            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n-            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n-            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n-            .out_dir(&native.out_dir)\n-            .build_target(&target)\n-            .build();\n-        native.fixup_sanitizer_lib_name(\"asan\");\n-    }\n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-}"}, {"sha": "bdbc154f4e861c615f07fc8907d0f8a78d6f7b27", "filename": "src/librustc_asan/lib.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,10 +0,0 @@\n-#![sanitizer_runtime]\n-#![feature(nll)]\n-#![feature(sanitizer_runtime)]\n-#![feature(staged_api)]\n-#![no_std]\n-#![unstable(\n-    feature = \"sanitizer_runtime_lib\",\n-    reason = \"internal implementation detail of sanitizers\",\n-    issue = \"none\"\n-)]"}, {"sha": "17582862c4d6a1ec7a4db3c250c76b2f993ba53a", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 42, "deletions": 47, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -531,6 +531,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n     {\n         let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor, target_cpu);\n+        link_sanitizer_runtime(sess, crate_type, &mut *linker);\n         link_args::<B>(\n             &mut *linker,\n             flavor,\n@@ -735,6 +736,47 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     }\n }\n \n+fn link_sanitizer_runtime(sess: &Session, crate_type: config::CrateType, linker: &mut dyn Linker) {\n+    let sanitizer = match &sess.opts.debugging_opts.sanitizer {\n+        Some(s) => s,\n+        None => return,\n+    };\n+\n+    if crate_type != config::CrateType::Executable {\n+        return;\n+    }\n+\n+    let name = match sanitizer {\n+        Sanitizer::Address => \"asan\",\n+        Sanitizer::Leak => \"lsan\",\n+        Sanitizer::Memory => \"msan\",\n+        Sanitizer::Thread => \"tsan\",\n+    };\n+\n+    let default_sysroot = filesearch::get_or_default_sysroot();\n+    let default_tlib =\n+        filesearch::make_target_lib_path(&default_sysroot, sess.opts.target_triple.triple());\n+\n+    match sess.opts.target_triple.triple() {\n+        \"x86_64-apple-darwin\" => {\n+            // On Apple platforms, the sanitizer is always built as a dylib, and\n+            // LLVM will link to `@rpath/*.dylib`, so we need to specify an\n+            // rpath to the library as well (the rpath should be absolute, see\n+            // PR #41352 for details).\n+            let libname = format!(\"rustc_rt.{}\", name);\n+            let rpath = default_tlib.to_str().expect(\"non-utf8 component in path\");\n+            linker.args(&[\"-Wl,-rpath\".into(), \"-Xlinker\".into(), rpath.into()]);\n+            linker.link_dylib(Symbol::intern(&libname));\n+        }\n+        \"x86_64-unknown-linux-gnu\" => {\n+            let filename = format!(\"librustc_rt.{}.a\", name);\n+            let path = default_tlib.join(&filename);\n+            linker.link_whole_rlib(&path);\n+        }\n+        _ => {}\n+    }\n+}\n+\n /// Returns a boolean indicating whether the specified crate should be ignored\n /// during LTO.\n ///\n@@ -1415,12 +1457,6 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n             _ if codegen_results.crate_info.profiler_runtime == Some(cnum) => {\n                 add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, crate_type, cnum);\n             }\n-            _ if codegen_results.crate_info.sanitizer_runtime == Some(cnum)\n-                && crate_type == config::CrateType::Executable =>\n-            {\n-                // Link the sanitizer runtimes only if we are actually producing an executable\n-                link_sanitizer_runtime::<B>(cmd, sess, codegen_results, tmpdir, cnum);\n-            }\n             // compiler-builtins are always placed last to ensure that they're\n             // linked correctly.\n             _ if codegen_results.crate_info.compiler_builtins == Some(cnum) => {\n@@ -1457,47 +1493,6 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         }\n     }\n \n-    // We must link the sanitizer runtime using -Wl,--whole-archive but since\n-    // it's packed in a .rlib, it contains stuff that are not objects that will\n-    // make the linker error. So we must remove those bits from the .rlib before\n-    // linking it.\n-    fn link_sanitizer_runtime<'a, B: ArchiveBuilder<'a>>(\n-        cmd: &mut dyn Linker,\n-        sess: &'a Session,\n-        codegen_results: &CodegenResults,\n-        tmpdir: &Path,\n-        cnum: CrateNum,\n-    ) {\n-        let src = &codegen_results.crate_info.used_crate_source[&cnum];\n-        let cratepath = &src.rlib.as_ref().unwrap().0;\n-\n-        if sess.target.target.options.is_like_osx {\n-            // On Apple platforms, the sanitizer is always built as a dylib, and\n-            // LLVM will link to `@rpath/*.dylib`, so we need to specify an\n-            // rpath to the library as well (the rpath should be absolute, see\n-            // PR #41352 for details).\n-            //\n-            // FIXME: Remove this logic into librustc_*san once Cargo supports it\n-            let rpath = cratepath.parent().unwrap();\n-            let rpath = rpath.to_str().expect(\"non-utf8 component in path\");\n-            cmd.args(&[\"-Wl,-rpath\".into(), \"-Xlinker\".into(), rpath.into()]);\n-        }\n-\n-        let dst = tmpdir.join(cratepath.file_name().unwrap());\n-        let mut archive = <B as ArchiveBuilder>::new(sess, &dst, Some(cratepath));\n-        archive.update_symbols();\n-\n-        for f in archive.src_files() {\n-            if f.ends_with(RLIB_BYTECODE_EXTENSION) || f == METADATA_FILENAME {\n-                archive.remove_file(&f);\n-            }\n-        }\n-\n-        archive.build();\n-\n-        cmd.link_whole_rlib(&dst);\n-    }\n-\n     // Adds the static \"rlib\" versions of all crates to the command line.\n     // There's a bit of magic which happens here specifically related to LTO and\n     // dynamic libraries. Specifically:"}, {"sha": "ab5d67e57831b87eef56bee559a1a117004f4ce0", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -730,7 +730,6 @@ impl CrateInfo {\n             panic_runtime: None,\n             compiler_builtins: None,\n             profiler_runtime: None,\n-            sanitizer_runtime: None,\n             is_no_builtins: Default::default(),\n             native_libraries: Default::default(),\n             used_libraries: tcx.native_libraries(LOCAL_CRATE),\n@@ -766,9 +765,6 @@ impl CrateInfo {\n             if tcx.is_profiler_runtime(cnum) {\n                 info.profiler_runtime = Some(cnum);\n             }\n-            if tcx.is_sanitizer_runtime(cnum) {\n-                info.sanitizer_runtime = Some(cnum);\n-            }\n             if tcx.is_no_builtins(cnum) {\n                 info.is_no_builtins.insert(cnum);\n             }"}, {"sha": "ee527ecb509b27417013717381c78cfc2c9b70e4", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -122,7 +122,6 @@ pub struct CrateInfo {\n     pub panic_runtime: Option<CrateNum>,\n     pub compiler_builtins: Option<CrateNum>,\n     pub profiler_runtime: Option<CrateNum>,\n-    pub sanitizer_runtime: Option<CrateNum>,\n     pub is_no_builtins: FxHashSet<CrateNum>,\n     pub native_libraries: FxHashMap<CrateNum, Lrc<Vec<NativeLibrary>>>,\n     pub crate_name: FxHashMap<CrateNum, String>,"}, {"sha": "319cd88f24586e4d174264682a8d4d88bafd4001", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -192,9 +192,6 @@ declare_features! (\n     /// Allows using the `unadjusted` ABI; perma-unstable.\n     (active, abi_unadjusted, \"1.16.0\", None, None),\n \n-    /// Allows identifying crates that contain sanitizer runtimes.\n-    (active, sanitizer_runtime, \"1.17.0\", None, None),\n-\n     /// Used to identify crates that contain the profiler runtime.\n     (active, profiler_runtime, \"1.18.0\", None, None),\n "}, {"sha": "a38726e3de81fad8a3e7ff5173de7513600785e7", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -409,11 +409,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate \\\n         which contains compiler-rt intrinsics and will never be stable\",\n     ),\n-    gated!(\n-        sanitizer_runtime, Whitelisted, template!(Word),\n-        \"the `#[sanitizer_runtime]` attribute is used to identify crates that contain the runtime \\\n-        of a sanitizer and will never be stable\",\n-    ),\n     gated!(\n         profiler_runtime, Whitelisted, template!(Word),\n         \"the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` crate \\"}, {"sha": "d5b6fe81c7be8af0091b2bd55cc16af77291fc37", "filename": "src/librustc_feature/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -74,6 +74,8 @@ declare_features! (\n     (removed, pushpop_unsafe, \"1.2.0\", None, None, None),\n     (removed, needs_allocator, \"1.4.0\", Some(27389), None,\n      Some(\"subsumed by `#![feature(allocator_internals)]`\")),\n+    /// Allows identifying crates that contain sanitizer runtimes.\n+    (removed, sanitizer_runtime, \"1.17.0\", None, None, None),\n     (removed, proc_macro_mod, \"1.27.0\", Some(54727), None,\n      Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n     (removed, proc_macro_expr, \"1.27.0\", Some(54727), None,"}, {"sha": "9a24361f44e6443feda59965d374de0b5a80337e", "filename": "src/librustc_lsan/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-build = \"build.rs\"\n-name = \"rustc_lsan\"\n-version = \"0.0.0\"\n-edition = \"2018\"\n-\n-[lib]\n-name = \"rustc_lsan\"\n-path = \"lib.rs\"\n-test = false\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.38\"\n-\n-[dependencies]\n-alloc = { path = \"../liballoc\" }\n-core = { path = \"../libcore\" }\n-compiler_builtins = \"0.1.0\""}, {"sha": "6201bc9356dce50bcdb8ea692ae9422f8cf8d3b8", "filename": "src/librustc_lsan/build.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,29 +0,0 @@\n-use build_helper::sanitizer_lib_boilerplate;\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUSTC_BUILD_SANITIZERS\");\n-    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n-        return;\n-    }\n-    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        build_helper::restore_library_path();\n-\n-        let (native, target) = match sanitizer_lib_boilerplate(\"lsan\") {\n-            Ok(native) => native,\n-            _ => return,\n-        };\n-\n-        Config::new(&native.src_dir)\n-            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n-            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n-            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n-            .out_dir(&native.out_dir)\n-            .build_target(&target)\n-            .build();\n-    }\n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-}"}, {"sha": "bdbc154f4e861c615f07fc8907d0f8a78d6f7b27", "filename": "src/librustc_lsan/lib.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,10 +0,0 @@\n-#![sanitizer_runtime]\n-#![feature(nll)]\n-#![feature(sanitizer_runtime)]\n-#![feature(staged_api)]\n-#![no_std]\n-#![unstable(\n-    feature = \"sanitizer_runtime_lib\",\n-    reason = \"internal implementation detail of sanitizers\",\n-    issue = \"none\"\n-)]"}, {"sha": "181f872154c5107e55776b767d5c7a358bf23713", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 104, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -6,7 +6,7 @@ use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob\n use rustc::hir::map::Definitions;\n use rustc::middle::cstore::DepKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n-use rustc::session::config::{self, Sanitizer};\n+use rustc::session::config;\n use rustc::session::search_paths::PathKind;\n use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::TyCtxt;\n@@ -671,108 +671,6 @@ impl<'a> CrateLoader<'a> {\n         self.inject_dependency_if(cnum, \"a panic runtime\", &|data| data.needs_panic_runtime());\n     }\n \n-    fn inject_sanitizer_runtime(&mut self) {\n-        if let Some(ref sanitizer) = self.sess.opts.debugging_opts.sanitizer {\n-            // Sanitizers can only be used on some tested platforms with\n-            // executables linked to `std`\n-            const ASAN_SUPPORTED_TARGETS: &[&str] =\n-                &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n-            const TSAN_SUPPORTED_TARGETS: &[&str] =\n-                &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n-            const LSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n-            const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n-\n-            let supported_targets = match *sanitizer {\n-                Sanitizer::Address => ASAN_SUPPORTED_TARGETS,\n-                Sanitizer::Thread => TSAN_SUPPORTED_TARGETS,\n-                Sanitizer::Leak => LSAN_SUPPORTED_TARGETS,\n-                Sanitizer::Memory => MSAN_SUPPORTED_TARGETS,\n-            };\n-            if !supported_targets.contains(&&*self.sess.opts.target_triple.triple()) {\n-                self.sess.err(&format!(\n-                    \"{:?}Sanitizer only works with the `{}` target\",\n-                    sanitizer,\n-                    supported_targets.join(\"` or `\")\n-                ));\n-                return;\n-            }\n-\n-            // firstyear 2017 - during testing I was unable to access an OSX machine\n-            // to make this work on different crate types. As a result, today I have\n-            // only been able to test and support linux as a target.\n-            if self.sess.opts.target_triple.triple() == \"x86_64-unknown-linux-gnu\" {\n-                if !self.sess.crate_types.borrow().iter().all(|ct| {\n-                    match *ct {\n-                        // Link the runtime\n-                        config::CrateType::Executable => true,\n-                        // This crate will be compiled with the required\n-                        // instrumentation pass\n-                        config::CrateType::Staticlib\n-                        | config::CrateType::Rlib\n-                        | config::CrateType::Dylib\n-                        | config::CrateType::Cdylib => false,\n-                        _ => {\n-                            self.sess.err(&format!(\n-                                \"Only executables, staticlibs, \\\n-                                cdylibs, dylibs and rlibs can be compiled with \\\n-                                `-Z sanitizer`\"\n-                            ));\n-                            false\n-                        }\n-                    }\n-                }) {\n-                    return;\n-                }\n-            } else {\n-                if !self.sess.crate_types.borrow().iter().all(|ct| {\n-                    match *ct {\n-                        // Link the runtime\n-                        config::CrateType::Executable => true,\n-                        // This crate will be compiled with the required\n-                        // instrumentation pass\n-                        config::CrateType::Rlib => false,\n-                        _ => {\n-                            self.sess.err(&format!(\n-                                \"Only executables and rlibs can be \\\n-                                                    compiled with `-Z sanitizer`\"\n-                            ));\n-                            false\n-                        }\n-                    }\n-                }) {\n-                    return;\n-                }\n-            }\n-\n-            let mut uses_std = false;\n-            self.cstore.iter_crate_data(|_, data| {\n-                if data.name() == sym::std {\n-                    uses_std = true;\n-                }\n-            });\n-\n-            if uses_std {\n-                let name = Symbol::intern(match sanitizer {\n-                    Sanitizer::Address => \"rustc_asan\",\n-                    Sanitizer::Leak => \"rustc_lsan\",\n-                    Sanitizer::Memory => \"rustc_msan\",\n-                    Sanitizer::Thread => \"rustc_tsan\",\n-                });\n-                info!(\"loading sanitizer: {}\", name);\n-\n-                let cnum = self.resolve_crate(name, DUMMY_SP, DepKind::Explicit, None);\n-                let data = self.cstore.get_crate_data(cnum);\n-\n-                // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n-                if !data.is_sanitizer_runtime() {\n-                    self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\", name));\n-                }\n-            } else {\n-                self.sess.err(\"Must link std to be compiled with `-Z sanitizer`\");\n-            }\n-        }\n-    }\n-\n     fn inject_profiler_runtime(&mut self) {\n         if self.sess.opts.debugging_opts.profile || self.sess.opts.cg.profile_generate.enabled() {\n             info!(\"loading profiler\");\n@@ -924,7 +822,6 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     pub fn postprocess(&mut self, krate: &ast::Crate) {\n-        self.inject_sanitizer_runtime();\n         self.inject_profiler_runtime();\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);"}, {"sha": "eb3dcfa72278ec7bee30db726fb0b8826c38930b", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -1587,10 +1587,6 @@ impl<'a, 'tcx> CrateMetadata {\n         self.root.panic_runtime\n     }\n \n-    crate fn is_sanitizer_runtime(&self) -> bool {\n-        self.root.sanitizer_runtime\n-    }\n-\n     crate fn is_profiler_runtime(&self) -> bool {\n         self.root.profiler_runtime\n     }"}, {"sha": "c45e1994bc5c5916510699bb37c4c168a2d64216", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -161,7 +161,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_compiler_builtins => { cdata.root.compiler_builtins }\n     has_global_allocator => { cdata.root.has_global_allocator }\n     has_panic_handler => { cdata.root.has_panic_handler }\n-    is_sanitizer_runtime => { cdata.root.sanitizer_runtime }\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n     panic_strategy => { cdata.root.panic_strategy }\n     extern_crate => {"}, {"sha": "7f8791d0c34dc467811e0045782d139c0b3f1bdd", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -514,7 +514,6 @@ impl<'tcx> EncodeContext<'tcx> {\n             no_builtins: attr::contains_name(&attrs, sym::no_builtins),\n             panic_runtime: attr::contains_name(&attrs, sym::panic_runtime),\n             profiler_runtime: attr::contains_name(&attrs, sym::profiler_runtime),\n-            sanitizer_runtime: attr::contains_name(&attrs, sym::sanitizer_runtime),\n             symbol_mangling_version: tcx.sess.opts.debugging_opts.symbol_mangling_version,\n \n             crate_deps,"}, {"sha": "426ea62b8cd4c6625f1038f9d8a702d36f6a34f0", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -209,7 +209,6 @@ crate struct CrateRoot<'tcx> {\n     no_builtins: bool,\n     panic_runtime: bool,\n     profiler_runtime: bool,\n-    sanitizer_runtime: bool,\n     symbol_mangling_version: SymbolManglingVersion,\n }\n "}, {"sha": "bda4078572501d937cc2b55692633f22026c42bf", "filename": "src/librustc_msan/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_msan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_msan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-build = \"build.rs\"\n-name = \"rustc_msan\"\n-version = \"0.0.0\"\n-edition = \"2018\"\n-\n-[lib]\n-name = \"rustc_msan\"\n-path = \"lib.rs\"\n-test = false\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.38\"\n-\n-[dependencies]\n-alloc = { path = \"../liballoc\" }\n-core = { path = \"../libcore\" }\n-compiler_builtins = \"0.1.0\""}, {"sha": "dc08d51b51cb06f1058402b0760653a14e645543", "filename": "src/librustc_msan/build.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,29 +0,0 @@\n-use build_helper::sanitizer_lib_boilerplate;\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUSTC_BUILD_SANITIZERS\");\n-    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n-        return;\n-    }\n-    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        build_helper::restore_library_path();\n-\n-        let (native, target) = match sanitizer_lib_boilerplate(\"msan\") {\n-            Ok(native) => native,\n-            _ => return,\n-        };\n-\n-        Config::new(&native.src_dir)\n-            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n-            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n-            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n-            .out_dir(&native.out_dir)\n-            .build_target(&target)\n-            .build();\n-    }\n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-}"}, {"sha": "bdbc154f4e861c615f07fc8907d0f8a78d6f7b27", "filename": "src/librustc_msan/lib.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,10 +0,0 @@\n-#![sanitizer_runtime]\n-#![feature(nll)]\n-#![feature(sanitizer_runtime)]\n-#![feature(staged_api)]\n-#![no_std]\n-#![unstable(\n-    feature = \"sanitizer_runtime_lib\",\n-    reason = \"internal implementation detail of sanitizers\",\n-    issue = \"none\"\n-)]"}, {"sha": "d979247b46d3af81bb97d307a6575d966f0c3d97", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -1124,6 +1124,32 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n                   See https://github.com/rust-lang/rust/issues/61002 for details.\",\n         );\n     }\n+\n+    // Sanitizers can only be used on some tested platforms.\n+    if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n+        const ASAN_SUPPORTED_TARGETS: &[&str] =\n+            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n+        const TSAN_SUPPORTED_TARGETS: &[&str] =\n+            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n+        const LSAN_SUPPORTED_TARGETS: &[&str] =\n+            &[\"x86_64-unknown-linux-gnu\", \"x86_64-apple-darwin\"];\n+        const MSAN_SUPPORTED_TARGETS: &[&str] = &[\"x86_64-unknown-linux-gnu\"];\n+\n+        let supported_targets = match *sanitizer {\n+            Sanitizer::Address => ASAN_SUPPORTED_TARGETS,\n+            Sanitizer::Thread => TSAN_SUPPORTED_TARGETS,\n+            Sanitizer::Leak => LSAN_SUPPORTED_TARGETS,\n+            Sanitizer::Memory => MSAN_SUPPORTED_TARGETS,\n+        };\n+\n+        if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {\n+            sess.err(&format!(\n+                \"{:?}Sanitizer only works with the `{}` target\",\n+                sanitizer,\n+                supported_targets.join(\"` or `\")\n+            ));\n+        }\n+    }\n }\n \n /// Hash value constructed out of all the `-C metadata` arguments passed to the"}, {"sha": "82045dd0cddc7811bcef0458e8cb5fd7b042929c", "filename": "src/librustc_tsan/Cargo.toml", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,20 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-build = \"build.rs\"\n-name = \"rustc_tsan\"\n-version = \"0.0.0\"\n-edition = \"2018\"\n-\n-[lib]\n-name = \"rustc_tsan\"\n-path = \"lib.rs\"\n-test = false\n-\n-[build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.38\"\n-\n-[dependencies]\n-alloc = { path = \"../liballoc\" }\n-core = { path = \"../libcore\" }\n-compiler_builtins = \"0.1.0\""}, {"sha": "570642a2eaa7645946c4bf11b85a52e13e25e206", "filename": "src/librustc_tsan/build.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,30 +0,0 @@\n-use build_helper::sanitizer_lib_boilerplate;\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    println!(\"cargo:rerun-if-env-changed=RUSTC_BUILD_SANITIZERS\");\n-    if env::var(\"RUSTC_BUILD_SANITIZERS\") != Ok(\"1\".to_string()) {\n-        return;\n-    }\n-    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        build_helper::restore_library_path();\n-\n-        let (native, target) = match sanitizer_lib_boilerplate(\"tsan\") {\n-            Ok(native) => native,\n-            _ => return,\n-        };\n-\n-        Config::new(&native.src_dir)\n-            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n-            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n-            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n-            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n-            .out_dir(&native.out_dir)\n-            .build_target(&target)\n-            .build();\n-        native.fixup_sanitizer_lib_name(\"tsan\");\n-    }\n-    println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");\n-}"}, {"sha": "bdbc154f4e861c615f07fc8907d0f8a78d6f7b27", "filename": "src/librustc_tsan/lib.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,10 +0,0 @@\n-#![sanitizer_runtime]\n-#![feature(nll)]\n-#![feature(sanitizer_runtime)]\n-#![feature(staged_api)]\n-#![no_std]\n-#![unstable(\n-    feature = \"sanitizer_runtime_lib\",\n-    reason = \"internal implementation detail of sanitizers\",\n-    issue = \"none\"\n-)]"}, {"sha": "c9ff93eac0295f3f2db15754a22ccf2631d14f43", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -34,16 +34,6 @@ features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into li\n [dev-dependencies]\n rand = \"0.7\"\n \n-[target.x86_64-apple-darwin.dependencies]\n-rustc_asan = { path = \"../librustc_asan\" }\n-rustc_tsan = { path = \"../librustc_tsan\" }\n-\n-[target.x86_64-unknown-linux-gnu.dependencies]\n-rustc_asan = { path = \"../librustc_asan\" }\n-rustc_lsan = { path = \"../librustc_lsan\" }\n-rustc_msan = { path = \"../librustc_msan\" }\n-rustc_tsan = { path = \"../librustc_tsan\" }\n-\n [target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n "}, {"sha": "7f5e9049b2f77e3acd72cb1bef34b33ef39e377e", "filename": "src/test/run-make-fulldeps/sanitizer-address/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -23,7 +23,7 @@ endif\n endif\n \n all:\n-\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) librustc_asan\n+\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) rustc_rt.asan\n \t# Verify that stack buffer overflow is detected:\n \t$(TMPDIR)/overflow 2>&1 | $(CGREP) stack-buffer-overflow\n \t# Verify that variable name is included in address sanitizer report:"}, {"sha": "9581ac565ea0221441fd88ce1feb1200c8d9a94b", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-cratetype/Makefile", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2FMakefile?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,16 +0,0 @@\n-# needs-sanitizer-support\n-\n--include ../tools.mk\n-\n-# NOTE the address sanitizer only supports x86_64 linux and macOS\n-\n-ifeq ($(TARGET),x86_64-apple-darwin)\n-EXTRA_RUSTFLAG=-C rpath\n-else\n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-EXTRA_RUSTFLAG=\n-endif\n-endif\n-\n-all:\n-\t$(RUSTC) -Z sanitizer=address --crate-type proc-macro --target $(TARGET) hello.rs 2>&1 | $(CGREP) '-Z sanitizer'"}, {"sha": "e7a11a969c037e00a796aafeff6258501ec15e9a", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-cratetype/hello.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-cratetype%2Fhello.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,3 +0,0 @@\n-fn main() {\n-    println!(\"Hello, world!\");\n-}"}, {"sha": "2a23f0fe3d4ef1d5465db9e0b7ecf59ac0c44b9c", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-target/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -2,4 +2,4 @@\n \n all:\n \t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | \\\n-\t\t$(CGREP) 'LeakSanitizer only works with the `x86_64-unknown-linux-gnu` target'\n+\t\t$(CGREP) 'LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target'"}, {"sha": "d8598b8ac93f90815226bf832d06c647d8bc6dac", "filename": "src/test/run-make-fulldeps/sanitizer-leak/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -7,5 +7,5 @@\n # FIXME(#46126) ThinLTO for libstd broke this test\n \n all:\n-\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) librustc_lsan\n+\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) rustc_rt.lsan\n \t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'"}, {"sha": "8bc9df1b4baebbaa5d23d2521e1891439df19d97", "filename": "src/test/run-make-fulldeps/sanitizer-memory/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6217972644588a3be4fecb85b195f17b0220047/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e6217972644588a3be4fecb85b195f17b0220047/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile?ref=e6217972644588a3be4fecb85b195f17b0220047", "patch": "@@ -5,7 +5,7 @@\n # only-x86_64\n \n all:\n-\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) librustc_msan\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) rustc_rt.msan\n \t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n-\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args maybeuninit.rs | $(CGREP) librustc_msan\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args maybeuninit.rs | $(CGREP) rustc_rt.msan\n \t$(TMPDIR)/maybeuninit 2>&1 | $(CGREP) use-of-uninitialized-value"}, {"sha": "3b972c117a6ffaa0e00876f8f0936eeb5ef53843", "filename": "src/test/ui/feature-gates/feature-gate-sanitizer-runtime.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-sanitizer-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-sanitizer-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-sanitizer-runtime.rs?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,3 +0,0 @@\n-#![sanitizer_runtime] //~ ERROR the `#[sanitizer_runtime]` attribute is\n-\n-fn main() {}"}, {"sha": "b13ec215f8c08c0cab1d38adae880ab37ad51d59", "filename": "src/test/ui/feature-gates/feature-gate-sanitizer-runtime.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-sanitizer-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/175631311716d7dfeceec40d2587cde7142ffa8c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-sanitizer-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-sanitizer-runtime.stderr?ref=175631311716d7dfeceec40d2587cde7142ffa8c", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: the `#[sanitizer_runtime]` attribute is used to identify crates that contain the runtime of a sanitizer and will never be stable\n-  --> $DIR/feature-gate-sanitizer-runtime.rs:1:1\n-   |\n-LL | #![sanitizer_runtime]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(sanitizer_runtime)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}