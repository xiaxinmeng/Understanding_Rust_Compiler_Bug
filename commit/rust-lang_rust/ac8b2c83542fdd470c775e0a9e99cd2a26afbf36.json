{"sha": "ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOGIyYzgzNTQyZmRkNDcwYzc3NWUwYTllOTljZDJhMjZhZmJmMzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-08T21:41:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-08T23:05:13Z"}, "message": "rustdoc: Don't bother reporting the type of return values", "tree": {"sha": "d08cbb634828efac378c2e435e2f12a5b44c92e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d08cbb634828efac378c2e435e2f12a5b44c92e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "html_url": "https://github.com/rust-lang/rust/commit/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c28b2c1d111c285148f977a0f39c35cac264db5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c28b2c1d111c285148f977a0f39c35cac264db5", "html_url": "https://github.com/rust-lang/rust/commit/5c28b2c1d111c285148f977a0f39c35cac264db5"}], "stats": {"total": 259, "additions": 19, "deletions": 240}, "files": [{"sha": "896d1a9dfa875adc2c95126d66c69d7608bc93e8", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "patch": "@@ -70,8 +70,7 @@ type argdoc = {\n };\n \n type retdoc = {\n-    desc: option<str>,\n-    ty: option<str>\n+    desc: option<str>\n };\n \n type enumdoc = {"}, {"sha": "f52ac727c02d0ff66e7bbe463e269d93524986c9", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "patch": "@@ -136,8 +136,7 @@ fn fndoc_from_fn(\n         item: itemdoc,\n         args: argdocs_from_args(decl.inputs),\n         return: {\n-            desc: none,\n-            ty: none\n+            desc: none\n         },\n         failure: none,\n         sig: none\n@@ -253,8 +252,7 @@ fn ifacedoc_from_iface(\n                 desc: none,\n                 args: argdocs_from_args(method.decl.inputs),\n                 return: {\n-                    desc: none,\n-                    ty: none\n+                    desc: none\n                 },\n                 failure: none,\n                 sig: none\n@@ -296,8 +294,7 @@ fn impldoc_from_impl(\n                 desc: none,\n                 args: argdocs_from_args(method.decl.inputs),\n                 return: {\n-                    desc: none,\n-                    ty: none\n+                    desc: none\n                 },\n                 failure: none,\n                 sig: none"}, {"sha": "32c178de00b6c5bf3a24d62e4f0d6fbbadfd6f38", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "patch": "@@ -531,37 +531,29 @@ fn write_return(\n     ctxt: ctxt,\n     doc: doc::retdoc\n ) {\n-    alt doc.ty {\n-      some(ty) {\n-        ctxt.w.write_str(#fmt(\"Returns `%s`\", ty));\n-        alt doc.desc {\n-          some(d) {\n-            ctxt.w.write_line(#fmt(\" - %s\", d));\n-            ctxt.w.write_line(\"\");\n-          }\n-          none {\n-            ctxt.w.write_line(\"\");\n-            ctxt.w.write_line(\"\");\n-          }\n-        }\n+    alt doc.desc {\n+      some(d) {\n+        ctxt.w.write_line(#fmt(\"Returns - %s\", d));\n+        ctxt.w.write_line(\"\");\n       }\n       none { }\n     }\n }\n \n #[test]\n fn should_write_return_type_on_new_line() {\n-    let markdown = test::render(\"fn a() -> int { }\");\n-    assert str::contains(markdown, \"\\nReturns `int`\");\n+    let markdown = test::render(\n+        \"#[doc(return = \\\"test\\\")] fn a() -> int { }\");\n+    assert str::contains(markdown, \"\\nReturns - test\");\n }\n \n #[test]\n fn should_write_blank_line_between_return_type_and_next_header() {\n     let markdown = test::render(\n-        \"fn a() -> int { } \\\n+        \"#[doc(return = \\\"test\\\")] fn a() -> int { } \\\n          fn b() -> int { }\"\n     );\n-    assert str::contains(markdown, \"Returns `int`\\n\\n##\");\n+    assert str::contains(markdown, \"Returns - test\\n\\n##\");\n }\n \n #[test]\n@@ -578,14 +570,6 @@ fn should_write_blank_line_after_return_description() {\n     assert str::contains(markdown, \"blorp\\n\\n\");\n }\n \n-#[test]\n-fn should_write_return_description_on_same_line_as_type() {\n-    let markdown = test::render(\n-        \"#[doc(return = \\\"blorp\\\")] fn a() -> int { }\"\n-    );\n-    assert str::contains(markdown, \"Returns `int` - blorp\");\n-}\n-\n fn write_failure(ctxt: ctxt, str: option<str>) {\n     alt str {\n       some(str) {\n@@ -823,8 +807,8 @@ fn should_not_write_iface_method_arguments_if_none() {\n #[test]\n fn should_write_iface_method_return_info() {\n     let markdown = test::render(\n-        \"iface a { fn a() -> int; }\");\n-    assert str::contains(markdown, \"Returns `int`\");\n+        \"iface a { #[doc(return = \\\"test\\\")] fn a() -> int; }\");\n+    assert str::contains(markdown, \"Returns - test\");\n }\n \n #[test]\n@@ -905,8 +889,8 @@ fn should_not_write_impl_method_arguments_if_none() {\n #[test]\n fn should_write_impl_method_return_info() {\n     let markdown = test::render(\n-        \"impl a for int { fn a() -> int { } }\");\n-    assert str::contains(markdown, \"Returns `int`\");\n+        \"impl a for int { #[doc(return = \\\"test\\\")] fn a() -> int { } }\");\n+    assert str::contains(markdown, \"Returns - test\");\n }\n \n #[test]"}, {"sha": "dc4194e0fc79574053f4192db772f85ca9c2b2b8", "filename": "src/rustdoc/prune_undoc_details_pass.rs", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Fprune_undoc_details_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Fprune_undoc_details_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_details_pass.rs?ref=ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "patch": "@@ -31,8 +31,7 @@ fn fold_fn(\n     let doc = fold::default_seq_fold_fn(fold, doc);\n \n     {\n-        args: prune_args(doc.args),\n-        return: prune_return(doc.return)\n+        args: prune_args(doc.args)\n         with doc\n     }\n }\n@@ -47,35 +46,12 @@ fn prune_args(docs: [doc::argdoc]) -> [doc::argdoc] {\n     }\n }\n \n-fn prune_return(doc: doc::retdoc) -> doc::retdoc {\n-    {\n-        ty: if option::is_some(doc.desc) {\n-            doc.ty\n-        } else {\n-            none\n-        }\n-        with doc\n-    }\n-}\n-\n #[test]\n fn should_elide_undocumented_arguments() {\n     let doc = test::mk_doc(\"#[doc = \\\"hey\\\"] fn a(b: int) { }\");\n     assert vec::is_empty(doc.cratemod().fns()[0].args);\n }\n \n-#[test]\n-fn should_elide_undocumented_return_values() {\n-    let source = \"#[doc = \\\"fonz\\\"] fn a() -> int { }\";\n-    astsrv::from_str(source) {|srv|\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = tystr_pass::mk_pass().f(srv, doc);\n-        let doc = attr_pass::mk_pass().f(srv, doc);\n-        let doc = run(srv, doc);\n-        assert doc.cratemod().fns()[0].return.ty == none;\n-    }\n-}\n-\n fn fold_res(\n     fold: fold::fold<()>,\n     doc: doc::resdoc\n@@ -110,8 +86,7 @@ fn fold_iface(\n fn prune_methods(docs: [doc::methoddoc]) -> [doc::methoddoc] {\n     par::anymap(docs) {|doc|\n         {\n-            args: prune_args(doc.args),\n-            return: prune_return(doc.return)\n+            args: prune_args(doc.args)\n             with doc\n         }\n     }\n@@ -123,12 +98,6 @@ fn should_elide_undocumented_iface_method_args() {\n     assert vec::is_empty(doc.cratemod().ifaces()[0].methods[0].args);\n }\n \n-#[test]\n-fn should_elide_undocumented_iface_method_return_values() {\n-    let doc = test::mk_doc(\"#[doc = \\\"hey\\\"] iface i { fn a() -> int; }\");\n-    assert doc.cratemod().ifaces()[0].methods[0].return.ty == none;\n-}\n-\n fn fold_impl(\n     fold: fold::fold<()>,\n     doc: doc::impldoc\n@@ -148,13 +117,6 @@ fn should_elide_undocumented_impl_method_args() {\n     assert vec::is_empty(doc.cratemod().impls()[0].methods[0].args);\n }\n \n-#[test]\n-fn should_elide_undocumented_impl_method_return_values() {\n-    let doc = test::mk_doc(\n-        \"#[doc = \\\"hey\\\"] impl i for int { fn a() -> int { } }\");\n-    assert doc.cratemod().impls()[0].methods[0].return.ty == none;\n-}\n-\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: str) -> doc::doc {"}, {"sha": "2188da77df1c19f3d92dd966d71d7c4b35358f4d", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b2c83542fdd470c775e0a9e99cd2a26afbf36/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=ac8b2c83542fdd470c775e0a9e99cd2a26afbf36", "patch": "@@ -40,7 +40,6 @@ fn fold_fn(\n     let srv = fold.ctxt;\n \n     {\n-        return: merge_ret_ty(srv, doc.id(), doc.return),\n         sig: get_fn_sig(srv, doc.id())\n         with doc\n     }\n@@ -75,88 +74,6 @@ fn should_add_native_fn_sig() {\n     assert doc.cratemod().nmods()[0].fns[0].sig == some(\"fn a() -> int\");\n }\n \n-fn merge_ret_ty(\n-    srv: astsrv::srv,\n-    fn_id: doc::ast_id,\n-    doc: doc::retdoc\n-) -> doc::retdoc {\n-    alt get_ret_ty(srv, fn_id) {\n-      some(ty) {\n-        {\n-            ty: some(ty)\n-            with doc\n-        }\n-      }\n-      none { doc }\n-    }\n-}\n-\n-fn get_ret_ty(srv: astsrv::srv, fn_id: doc::ast_id) -> option<str> {\n-    astsrv::exec(srv) {|ctxt|\n-        alt check ctxt.ast_map.get(fn_id) {\n-          ast_map::node_item(@{\n-            node: ast::item_fn(decl, _, _), _\n-          }, _) |\n-          ast_map::node_native_item(@{\n-            node: ast::native_item_fn(decl, _), _\n-          }, _, _) {\n-            ret_ty_to_str(decl)\n-          }\n-        }\n-    }\n-}\n-\n-fn ret_ty_to_str(decl: ast::fn_decl) -> option<str> {\n-    if decl.output.node != ast::ty_nil {\n-        some(pprust::ty_to_str(decl.output))\n-    } else {\n-        // Nil-typed return values are not interesting\n-        none\n-    }\n-}\n-\n-#[test]\n-fn should_add_fn_ret_types() {\n-    let doc = test::mk_doc(\"fn a() -> int { }\");\n-    assert doc.cratemod().fns()[0].return.ty == some(\"int\");\n-}\n-\n-#[test]\n-fn should_not_add_nil_ret_type() {\n-    let doc = test::mk_doc(\"fn a() { }\");\n-    assert doc.cratemod().fns()[0].return.ty == none;\n-}\n-\n-#[test]\n-fn should_add_native_fn_ret_types() {\n-    let doc = test::mk_doc(\"native mod a { fn a() -> int; }\");\n-    assert doc.cratemod().nmods()[0].fns[0].return.ty == some(\"int\");\n-}\n-\n-fn get_arg_tys(srv: astsrv::srv, fn_id: doc::ast_id) -> [(str, str)] {\n-    astsrv::exec(srv) {|ctxt|\n-        alt check ctxt.ast_map.get(fn_id) {\n-          ast_map::node_item(@{\n-            node: ast::item_fn(decl, _, _), _\n-          }, _) |\n-          ast_map::node_item(@{\n-            node: ast::item_res(decl, _, _, _, _), _\n-          }, _) |\n-          ast_map::node_native_item(@{\n-            node: ast::native_item_fn(decl, _), _\n-          }, _, _) {\n-            decl_arg_tys(decl)\n-          }\n-        }\n-    }\n-}\n-\n-fn decl_arg_tys(decl: ast::fn_decl) -> [(str, str)] {\n-    par::seqmap(decl.inputs) {|arg|\n-        (arg.ident, pprust::ty_to_str(arg.ty))\n-    }\n-}\n-\n fn fold_const(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::constdoc\n@@ -265,68 +182,12 @@ fn merge_methods(\n ) -> [doc::methoddoc] {\n     par::anymap(docs) {|doc|\n         {\n-            return: merge_method_ret_ty(\n-                srv,\n-                item_id,\n-                doc.return,\n-                doc.name),\n             sig: get_method_sig(srv, item_id, doc.name)\n             with doc\n         }\n     }\n }\n \n-fn merge_method_ret_ty(\n-    srv: astsrv::srv,\n-    item_id: doc::ast_id,\n-    doc: doc::retdoc,\n-    method_name: str\n-) -> doc::retdoc {\n-    alt get_method_ret_ty(srv, item_id, method_name) {\n-      some(ty) {\n-        {\n-            ty: some(ty)\n-            with doc\n-        }\n-      }\n-      none { doc }\n-    }\n-}\n-\n-fn get_method_ret_ty(\n-    srv: astsrv::srv,\n-    item_id: doc::ast_id,\n-    method_name: str\n-) -> option<str> {\n-    astsrv::exec(srv) {|ctxt|\n-        alt ctxt.ast_map.get(item_id) {\n-          ast_map::node_item(@{\n-            node: ast::item_iface(_, methods), _\n-          }, _) {\n-            alt check vec::find(methods) {|method|\n-                method.ident == method_name\n-            } {\n-                some(method) {\n-                    ret_ty_to_str(method.decl)\n-                }\n-            }\n-          }\n-          ast_map::node_item(@{\n-            node: ast::item_impl(_, _, _, methods), _\n-          }, _) {\n-            alt check vec::find(methods) {|method|\n-                method.ident == method_name\n-            } {\n-                some(method) {\n-                    ret_ty_to_str(method.decl)\n-                }\n-            }\n-          }\n-          _ { fail }\n-        }\n-    }\n-}\n-\n fn get_method_sig(\n     srv: astsrv::srv,\n     item_id: doc::ast_id,\n@@ -366,18 +227,6 @@ fn should_add_iface_method_sigs() {\n     assert doc.cratemod().ifaces()[0].methods[0].sig == some(\"fn a() -> int\");\n }\n \n-#[test]\n-fn should_add_iface_method_ret_types() {\n-    let doc = test::mk_doc(\"iface i { fn a() -> int; }\");\n-    assert doc.cratemod().ifaces()[0].methods[0].return.ty == some(\"int\");\n-}\n-\n-#[test]\n-fn should_not_add_iface_method_nil_ret_type() {\n-    let doc = test::mk_doc(\"iface i { fn a(); }\");\n-    assert doc.cratemod().ifaces()[0].methods[0].return.ty == none;\n-}\n-\n fn fold_impl(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::impldoc\n@@ -431,18 +280,6 @@ fn should_add_impl_method_sigs() {\n     assert doc.cratemod().impls()[0].methods[0].sig == some(\"fn a() -> int\");\n }\n \n-#[test]\n-fn should_add_impl_method_ret_types() {\n-    let doc = test::mk_doc(\"impl i for int { fn a() -> int { fail } }\");\n-    assert doc.cratemod().impls()[0].methods[0].return.ty == some(\"int\");\n-}\n-\n-#[test]\n-fn should_not_add_impl_method_nil_ret_type() {\n-    let doc = test::mk_doc(\"impl i for int { fn a() { } }\");\n-    assert doc.cratemod().impls()[0].methods[0].return.ty == none;\n-}\n-\n fn fold_type(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::tydoc"}]}