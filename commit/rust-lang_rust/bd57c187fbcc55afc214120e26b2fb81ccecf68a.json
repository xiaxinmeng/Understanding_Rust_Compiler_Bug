{"sha": "bd57c187fbcc55afc214120e26b2fb81ccecf68a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNTdjMTg3ZmJjYzU1YWZjMjE0MTIwZTI2YjJmYjgxY2NlY2Y2OGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-11T15:14:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-11T15:14:04Z"}, "message": "Rollup merge of #61698 - davidtwco:ice-const-generic-length, r=varkor\n\ntypeck: Fix const generic in repeat param ICE.\n\nFixes #61336. Turns out this wasn't related to #49147 after all.\n\nr? @varkor", "tree": {"sha": "54688abfa9072ba2e4bcda8edbe38c302be931a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54688abfa9072ba2e4bcda8edbe38c302be931a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd57c187fbcc55afc214120e26b2fb81ccecf68a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc/8U8CRBK7hj4Ov3rIwAAdHIIAEcPwkAHoH+i+spD9AC6z1wV\nwEAnlgu9B/Iw+YKsN4ORUmPRbHYooadlT/4jRxs2CkV+HxZI9ur/9pR/oJ5cppQU\nl+Q+eBYJOfGTMEsQ6Fiag0nQw+1ZPDWD4lA+NBOIkbJNH0LQCZQOtdIGTzTua01I\nDe9bH1holNgyDWVpG69MbYpEQB4RXo/i3NDbjb1RPNh0ta/NZ5lsIXGoSxGqKCcr\nai6p5+v97X1DCjr5pBm9G/kcrb6RXAlwGU/D9Ywq0DXl4KX+LngsZ05ubqwsyYbi\n/Txhrms8sXa33u8/ONcHk57ecoPPUMnXwJ5KuHnSzUz7suzN5unJ9msHtnzsiwI=\n=k5EX\n-----END PGP SIGNATURE-----\n", "payload": "tree 54688abfa9072ba2e4bcda8edbe38c302be931a3\nparent b3169552e2bf6ba8f9d3a8898acdcbd8f6aa3ac6\nparent 9ed4674269f3d1ecedfd173e279087d256d66e77\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560266044 +0200\ncommitter GitHub <noreply@github.com> 1560266044 +0200\n\nRollup merge of #61698 - davidtwco:ice-const-generic-length, r=varkor\n\ntypeck: Fix const generic in repeat param ICE.\n\nFixes #61336. Turns out this wasn't related to #49147 after all.\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd57c187fbcc55afc214120e26b2fb81ccecf68a", "html_url": "https://github.com/rust-lang/rust/commit/bd57c187fbcc55afc214120e26b2fb81ccecf68a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd57c187fbcc55afc214120e26b2fb81ccecf68a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3169552e2bf6ba8f9d3a8898acdcbd8f6aa3ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3169552e2bf6ba8f9d3a8898acdcbd8f6aa3ac6", "html_url": "https://github.com/rust-lang/rust/commit/b3169552e2bf6ba8f9d3a8898acdcbd8f6aa3ac6"}, {"sha": "9ed4674269f3d1ecedfd173e279087d256d66e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed4674269f3d1ecedfd173e279087d256d66e77", "html_url": "https://github.com/rust-lang/rust/commit/9ed4674269f3d1ecedfd173e279087d256d66e77"}], "stats": {"total": 129, "additions": 104, "deletions": 25}, "files": [{"sha": "5a46c9d440b5d82bb1378d636ed8fc8201409b93", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=bd57c187fbcc55afc214120e26b2fb81ccecf68a", "patch": "@@ -2155,6 +2155,17 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         result_ty\n     }\n \n+    /// Returns the `DefId` of the constant parameter that the provided expression is a path to.\n+    pub fn const_param_def_id(&self, expr: &hir::Expr) -> Option<DefId> {\n+        match &expr.node {\n+            ExprKind::Path(hir::QPath::Resolved(_, path)) => match path.res {\n+                Res::Def(DefKind::ConstParam, did) => Some(did),\n+                _ => None,\n+            },\n+            _ => None,\n+        }\n+    }\n+\n     pub fn ast_const_to_const(\n         &self,\n         ast_const: &hir::AnonConst,\n@@ -2185,19 +2196,17 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             }\n         }\n \n-        if let ExprKind::Path(ref qpath) = expr.node {\n-            if let hir::QPath::Resolved(_, ref path) = qpath {\n-                if let Res::Def(DefKind::ConstParam, def_id) = path.res {\n-                    let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-                    let item_id = tcx.hir().get_parent_node(node_id);\n-                    let item_def_id = tcx.hir().local_def_id(item_id);\n-                    let generics = tcx.generics_of(item_def_id);\n-                    let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(node_id)];\n-                    let name = tcx.hir().name(node_id).as_interned_str();\n-                    const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n-                }\n-            }\n-        };\n+        if let Some(def_id) = self.const_param_def_id(expr) {\n+            // Find the name and index of the const parameter by indexing the generics of the\n+            // parent item and construct a `ParamConst`.\n+            let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n+            let item_id = tcx.hir().get_parent_node(node_id);\n+            let item_def_id = tcx.hir().local_def_id(item_id);\n+            let generics = tcx.generics_of(item_def_id);\n+            let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(node_id)];\n+            let name = tcx.hir().name(node_id).as_interned_str();\n+            const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n+        }\n \n         tcx.mk_const(const_)\n     }"}, {"sha": "e35df6cd494a2fbfbb8a251d4d0c10b0eb0573e5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bd57c187fbcc55afc214120e26b2fb81ccecf68a", "patch": "@@ -2504,6 +2504,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n+    /// Returns the `DefId` of the constant parameter that the provided expression is a path to.\n+    pub fn const_param_def_id(&self, hir_c: &hir::AnonConst) -> Option<DefId> {\n+        AstConv::const_param_def_id(self, &self.tcx.hir().body(hir_c.body).value)\n+    }\n+\n     pub fn to_const(&self, ast_c: &hir::AnonConst, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n         AstConv::ast_const_to_const(self, ast_c, ty)\n     }\n@@ -4479,19 +4484,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::Repeat(ref element, ref count) => {\n                 let count_def_id = tcx.hir().local_def_id_from_hir_id(count.hir_id);\n-                let param_env = ty::ParamEnv::empty();\n-                let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), count_def_id);\n-                let instance = ty::Instance::resolve(\n-                    tcx.global_tcx(),\n-                    param_env,\n-                    count_def_id,\n-                    substs,\n-                ).unwrap();\n-                let global_id = GlobalId {\n-                    instance,\n-                    promoted: None\n+                let count = if self.const_param_def_id(count).is_some() {\n+                    Ok(self.to_const(count, self.tcx.type_of(count_def_id)))\n+                } else {\n+                    let param_env = ty::ParamEnv::empty();\n+                    let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), count_def_id);\n+                    let instance = ty::Instance::resolve(\n+                        tcx.global_tcx(),\n+                        param_env,\n+                        count_def_id,\n+                        substs,\n+                    ).unwrap();\n+                    let global_id = GlobalId {\n+                        instance,\n+                        promoted: None\n+                    };\n+\n+                    tcx.const_eval(param_env.and(global_id))\n                 };\n-                let count = tcx.const_eval(param_env.and(global_id));\n \n                 let uty = match expected {\n                     ExpectHasType(uty) => {"}, {"sha": "5b5e431bf2ff6d6824e010b8469010d88f753cad", "filename": "src/test/ui/const-generics/issue-61336-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.rs?ref=bd57c187fbcc55afc214120e26b2fb81ccecf68a", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n+    [x; N]\n+    //~^ ERROR array lengths can't depend on generic parameters\n+}\n+\n+fn main() {\n+    let x: [u32; 5] = f::<u32, 5>(3);\n+    assert_eq!(x, [3u32; 5]);\n+}"}, {"sha": "1a5bb9f763bcf73a4ab4a709254ecb02ab220217", "filename": "src/test/ui/const-generics/issue-61336-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr?ref=bd57c187fbcc55afc214120e26b2fb81ccecf68a", "patch": "@@ -0,0 +1,14 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61336-1.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error: array lengths can't depend on generic parameters\n+  --> $DIR/issue-61336-1.rs:5:9\n+   |\n+LL |     [x; N]\n+   |         ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "95930371d59744af11fc93105be874800ac1acc4", "filename": "src/test/ui/const-generics/issue-61336.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.rs?ref=bd57c187fbcc55afc214120e26b2fb81ccecf68a", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n+    [x; N]\n+}\n+\n+fn g<T, const N: usize>(x: T) -> [T; N] {\n+    [x; N]\n+    //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied [E0277]\n+}\n+\n+fn main() {\n+    let x: [u32; 5] = f::<u32, 5>(3);\n+    assert_eq!(x, [3u32; 5]);\n+}"}, {"sha": "9939a5998340f5efcb74a89590dae72b49f9df2c", "filename": "src/test/ui/const-generics/issue-61336.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd57c187fbcc55afc214120e26b2fb81ccecf68a/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr?ref=bd57c187fbcc55afc214120e26b2fb81ccecf68a", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61336.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/issue-61336.rs:9:5\n+   |\n+LL |     [x; N]\n+   |     ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}