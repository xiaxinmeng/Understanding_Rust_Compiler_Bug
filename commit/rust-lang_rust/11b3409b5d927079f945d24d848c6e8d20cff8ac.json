{"sha": "11b3409b5d927079f945d24d848c6e8d20cff8ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjM0MDliNWQ5MjcwNzlmOTQ1ZDI0ZDg0OGM2ZThkMjBjZmY4YWM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-11T21:16:15Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-19T18:36:05Z"}, "message": "Remove FingerprintEncoder/Decoder.", "tree": {"sha": "d5fbb5dd2b1446fe3fe017abd9fc0622b04e329a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5fbb5dd2b1446fe3fe017abd9fc0622b04e329a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b3409b5d927079f945d24d848c6e8d20cff8ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b3409b5d927079f945d24d848c6e8d20cff8ac", "html_url": "https://github.com/rust-lang/rust/commit/11b3409b5d927079f945d24d848c6e8d20cff8ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b3409b5d927079f945d24d848c6e8d20cff8ac/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09a638820e6a2383b9b84333aa588ced80982d0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/09a638820e6a2383b9b84333aa588ced80982d0a", "html_url": "https://github.com/rust-lang/rust/commit/09a638820e6a2383b9b84333aa588ced80982d0a"}], "stats": {"total": 93, "additions": 10, "deletions": 83}, "files": [{"sha": "81b115fac0d0e0ebc6cabfecc1de483f413f8edc", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 10, "deletions": 56, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/11b3409b5d927079f945d24d848c6e8d20cff8ac/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b3409b5d927079f945d24d848c6e8d20cff8ac/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=11b3409b5d927079f945d24d848c6e8d20cff8ac", "patch": "@@ -1,8 +1,5 @@\n use crate::stable_hasher;\n-use rustc_serialize::{\n-    opaque::{self, EncodeResult, FileEncodeResult},\n-    Decodable, Decoder, Encodable, Encoder,\n-};\n+use rustc_serialize::{Decodable, Encodable};\n use std::hash::{Hash, Hasher};\n use std::mem::{self, MaybeUninit};\n \n@@ -63,16 +60,6 @@ impl Fingerprint {\n     pub fn to_hex(&self) -> String {\n         format!(\"{:x}{:x}\", self.0, self.1)\n     }\n-\n-    pub fn decode_opaque(decoder: &mut opaque::Decoder<'_>) -> Result<Fingerprint, String> {\n-        let mut bytes: [MaybeUninit<u8>; 16] = MaybeUninit::uninit_array();\n-\n-        decoder.read_raw_bytes(&mut bytes)?;\n-\n-        let [l, r]: [u64; 2] = unsafe { mem::transmute(bytes) };\n-\n-        Ok(Fingerprint(u64::from_le(l), u64::from_le(r)))\n-    }\n }\n \n impl std::fmt::Display for Fingerprint {\n@@ -130,55 +117,22 @@ impl stable_hasher::StableHasherResult for Fingerprint {\n impl_stable_hash_via_hash!(Fingerprint);\n \n impl<E: rustc_serialize::Encoder> Encodable<E> for Fingerprint {\n+    #[inline]\n     fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n-        s.encode_fingerprint(self)\n+        let bytes: [u8; 16] = unsafe { mem::transmute([self.0.to_le(), self.1.to_le()]) };\n+        s.emit_raw_bytes(&bytes)?;\n+        Ok(())\n     }\n }\n \n impl<D: rustc_serialize::Decoder> Decodable<D> for Fingerprint {\n+    #[inline]\n     fn decode(d: &mut D) -> Result<Self, D::Error> {\n-        d.decode_fingerprint()\n-    }\n-}\n-\n-pub trait FingerprintEncoder: rustc_serialize::Encoder {\n-    fn encode_fingerprint(&mut self, f: &Fingerprint) -> Result<(), Self::Error>;\n-}\n-\n-pub trait FingerprintDecoder: rustc_serialize::Decoder {\n-    fn decode_fingerprint(&mut self) -> Result<Fingerprint, Self::Error>;\n-}\n-\n-impl<E: rustc_serialize::Encoder> FingerprintEncoder for E {\n-    default fn encode_fingerprint(&mut self, _: &Fingerprint) -> Result<(), E::Error> {\n-        panic!(\"Cannot encode `Fingerprint` with `{}`\", std::any::type_name::<E>());\n-    }\n-}\n-\n-impl FingerprintEncoder for opaque::Encoder {\n-    fn encode_fingerprint(&mut self, f: &Fingerprint) -> EncodeResult {\n-        let bytes: [u8; 16] = unsafe { mem::transmute([f.0.to_le(), f.1.to_le()]) };\n-        self.emit_raw_bytes(&bytes)?;\n-        Ok(())\n-    }\n-}\n-\n-impl FingerprintEncoder for opaque::FileEncoder {\n-    fn encode_fingerprint(&mut self, f: &Fingerprint) -> FileEncodeResult {\n-        let bytes: [u8; 16] = unsafe { mem::transmute([f.0.to_le(), f.1.to_le()]) };\n-        self.emit_raw_bytes(&bytes)\n-    }\n-}\n-\n-impl<D: rustc_serialize::Decoder> FingerprintDecoder for D {\n-    default fn decode_fingerprint(&mut self) -> Result<Fingerprint, D::Error> {\n-        panic!(\"Cannot decode `Fingerprint` with `{}`\", std::any::type_name::<D>());\n-    }\n-}\n+        let mut bytes: [MaybeUninit<u8>; 16] = MaybeUninit::uninit_array();\n+        d.read_raw_bytes(&mut bytes)?;\n \n-impl FingerprintDecoder for opaque::Decoder<'_> {\n-    fn decode_fingerprint(&mut self) -> Result<Fingerprint, String> {\n-        Fingerprint::decode_opaque(self)\n+        let [l, r]: [u64; 2] = unsafe { mem::transmute(bytes) };\n+        Ok(Fingerprint(u64::from_le(l), u64::from_le(r)))\n     }\n }\n "}, {"sha": "e8891e471f9dafa3289789a02e02a4cbf102b8f7", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11b3409b5d927079f945d24d848c6e8d20cff8ac/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b3409b5d927079f945d24d848c6e8d20cff8ac/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=11b3409b5d927079f945d24d848c6e8d20cff8ac", "patch": "@@ -7,7 +7,6 @@ use crate::rmeta::*;\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n-use rustc_data_structures::fingerprint::{Fingerprint, FingerprintDecoder};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lock, LockGuard, Lrc, OnceCell};\n@@ -351,12 +350,6 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {\n     }\n }\n \n-impl<'a, 'tcx> FingerprintDecoder for DecodeContext<'a, 'tcx> {\n-    fn decode_fingerprint(&mut self) -> Result<Fingerprint, String> {\n-        Fingerprint::decode_opaque(&mut self.opaque)\n-    }\n-}\n-\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {\n     fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Result<SyntaxContext, String> {\n         let cdata = decoder.cdata();"}, {"sha": "09b9ceb9901863b3f6aba879a6d3881f1436650a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11b3409b5d927079f945d24d848c6e8d20cff8ac/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b3409b5d927079f945d24d848c6e8d20cff8ac/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=11b3409b5d927079f945d24d848c6e8d20cff8ac", "patch": "@@ -1,7 +1,6 @@\n use crate::rmeta::table::{FixedSizeEncoding, TableBuilder};\n use crate::rmeta::*;\n \n-use rustc_data_structures::fingerprint::{Fingerprint, FingerprintEncoder};\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{join, par_iter, Lrc, ParallelIterator};\n@@ -308,12 +307,6 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {\n     }\n }\n \n-impl<'a, 'tcx> FingerprintEncoder for EncodeContext<'a, 'tcx> {\n-    fn encode_fingerprint(&mut self, f: &Fingerprint) -> Result<(), Self::Error> {\n-        self.opaque.encode_fingerprint(f)\n-    }\n-}\n-\n impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {\n     const CLEAR_CROSS_CRATE: bool = true;\n "}, {"sha": "ff11314d2ffd1c82e62ed6a08ae78b62cf8ce2d0", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11b3409b5d927079f945d24d848c6e8d20cff8ac/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b3409b5d927079f945d24d848c6e8d20cff8ac/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=11b3409b5d927079f945d24d848c6e8d20cff8ac", "patch": "@@ -4,7 +4,6 @@ use crate::mir::{self, interpret};\n use crate::ty::codec::{RefDecodable, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n-use rustc_data_structures::fingerprint::{Fingerprint, FingerprintDecoder, FingerprintEncoder};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, OnceCell};\n use rustc_data_structures::thin_vec::ThinVec;\n@@ -913,12 +912,6 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for DefId {\n     }\n }\n \n-impl<'a, 'tcx> FingerprintDecoder for CacheDecoder<'a, 'tcx> {\n-    fn decode_fingerprint(&mut self) -> Result<Fingerprint, Self::Error> {\n-        Fingerprint::decode_opaque(&mut self.opaque)\n-    }\n-}\n-\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx FxHashSet<LocalDefId> {\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Result<Self, String> {\n         RefDecodable::decode(d)\n@@ -1011,12 +1004,6 @@ where\n     }\n }\n \n-impl<'a, 'tcx, E: OpaqueEncoder> FingerprintEncoder for CacheEncoder<'a, 'tcx, E> {\n-    fn encode_fingerprint(&mut self, f: &Fingerprint) -> Result<(), E::Error> {\n-        self.encoder.encode_fingerprint(f)\n-    }\n-}\n-\n impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for SyntaxContext\n where\n     E: 'a + OpaqueEncoder,"}]}