{"sha": "de7c9e753d449a02a39610cf657c11dc6af86774", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2M5ZTc1M2Q0NDlhMDJhMzk2MTBjZjY1N2MxMWRjNmFmODY3NzQ=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-17T14:17:01Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T20:50:17Z"}, "message": "Use `LocalDefId` in `typeck_tables_of` and `used_trait_imports` queries", "tree": {"sha": "f78fd2b9126be729343eb2b5a29b810a48516fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f78fd2b9126be729343eb2b5a29b810a48516fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7c9e753d449a02a39610cf657c11dc6af86774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7c9e753d449a02a39610cf657c11dc6af86774", "html_url": "https://github.com/rust-lang/rust/commit/de7c9e753d449a02a39610cf657c11dc6af86774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7c9e753d449a02a39610cf657c11dc6af86774/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ec74e60f238f694b46c976d6217e7cf8d4cf1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/46ec74e60f238f694b46c976d6217e7cf8d4cf1a", "html_url": "https://github.com/rust-lang/rust/commit/46ec74e60f238f694b46c976d6217e7cf8d4cf1a"}], "stats": {"total": 137, "additions": 79, "deletions": 58}, "files": [{"sha": "be9811a9c1283cef56ef2864086183af3281b669", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -459,12 +459,13 @@ rustc_queries! {\n             desc { \"type-checking all item bodies\" }\n         }\n \n-        query typeck_tables_of(key: DefId) -> &'tcx ty::TypeckTables<'tcx> {\n-            desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key) }\n-            cache_on_disk_if { key.is_local() }\n+        query typeck_tables_of(key: LocalDefId) -> &'tcx ty::TypeckTables<'tcx> {\n+            desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+            cache_on_disk_if { true }\n         }\n-        query diagnostic_only_typeck_tables_of(key: DefId) -> &'tcx ty::TypeckTables<'tcx> {\n-            cache_on_disk_if { key.is_local() }\n+        query diagnostic_only_typeck_tables_of(key: LocalDefId) -> &'tcx ty::TypeckTables<'tcx> {\n+            desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n+            cache_on_disk_if { true }\n             load_cached(tcx, id) {\n                 let typeck_tables: Option<ty::TypeckTables<'tcx>> = tcx\n                     .queries.on_disk_cache\n@@ -476,8 +477,9 @@ rustc_queries! {\n     }\n \n     Other {\n-        query used_trait_imports(key: DefId) -> &'tcx DefIdSet {\n-            cache_on_disk_if { key.is_local() }\n+        query used_trait_imports(key: LocalDefId) -> &'tcx DefIdSet {\n+            desc { |tcx| \"used_trait_imports `{}`\", tcx.def_path_str(key.to_def_id()) }\n+            cache_on_disk_if { true }\n         }\n     }\n "}, {"sha": "0abe44b31065d2171a1ab4c316df7090196ad778", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -2637,7 +2637,7 @@ pub enum ImplOverlapKind {\n \n impl<'tcx> TyCtxt<'tcx> {\n     pub fn body_tables(self, body: hir::BodyId) -> &'tcx TypeckTables<'tcx> {\n-        self.typeck_tables_of(self.hir().body_owner_def_id(body).to_def_id())\n+        self.typeck_tables_of(self.hir().body_owner_def_id(body))\n     }\n \n     /// Returns an iterator of the `DefId`s for all body-owners in this"}, {"sha": "749265458302554de459068eca8112e203f9cdf0", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -191,7 +191,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     .ty;\n             let needs_note = match ty.kind {\n                 ty::Closure(id, _) => {\n-                    let tables = self.infcx.tcx.typeck_tables_of(id);\n+                    let tables = self.infcx.tcx.typeck_tables_of(id.expect_local());\n                     let hir_id = self.infcx.tcx.hir().as_local_hir_id(id.expect_local());\n \n                     tables.closure_kind_origins().get(hir_id).is_none()\n@@ -880,7 +880,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 match &self\n                                     .infcx\n                                     .tcx\n-                                    .typeck_tables_of(self.mir_def_id)\n+                                    .typeck_tables_of(def_id)\n                                     .node_type(fn_hir_id)\n                                     .kind\n                                 {"}, {"sha": "9e4458e7104ff6b5bb5a049b44e6c0f7e20b60d3", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -97,7 +97,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 debug!(\"add_moved_or_invoked_closure_note: closure={:?}\", closure);\n                 if let ty::Closure(did, _) = self.body.local_decls[closure].ty.kind {\n-                    let hir_id = self.infcx.tcx.hir().as_local_hir_id(did.expect_local());\n+                    let did = did.expect_local();\n+                    let hir_id = self.infcx.tcx.hir().as_local_hir_id(did);\n \n                     if let Some((span, name)) =\n                         self.infcx.tcx.typeck_tables_of(did).closure_kind_origins().get(hir_id)\n@@ -119,7 +120,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // Check if we are just moving a closure after it has been invoked.\n         if let Some(target) = target {\n             if let ty::Closure(did, _) = self.body.local_decls[target].ty.kind {\n-                let hir_id = self.infcx.tcx.hir().as_local_hir_id(did.expect_local());\n+                let did = did.expect_local();\n+                let hir_id = self.infcx.tcx.hir().as_local_hir_id(did);\n \n                 if let Some((span, name)) =\n                     self.infcx.tcx.typeck_tables_of(did).closure_kind_origins().get(hir_id)"}, {"sha": "894a997ea7a4da4d781f561bf4d797f3f623bed8", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if !self.tcx().is_closure(self.mir_def_id) {\n             user_provided_sig = None;\n         } else {\n-            let typeck_tables = self.tcx().typeck_tables_of(self.mir_def_id);\n+            let typeck_tables = self.tcx().typeck_tables_of(self.mir_def_id.expect_local());\n             user_provided_sig = match typeck_tables.user_provided_sigs.get(&self.mir_def_id) {\n                 None => None,\n                 Some(user_provided_poly_sig) => {"}, {"sha": "428b6c8f85437fe921f085326db941824cf349d8", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -1232,7 +1232,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let param_env = self.param_env;\n         let body = self.body;\n-        let concrete_opaque_types = &tcx.typeck_tables_of(anon_owner_def_id).concrete_opaque_types;\n+        let concrete_opaque_types =\n+            &tcx.typeck_tables_of(anon_owner_def_id.expect_local()).concrete_opaque_types;\n         let mut opaque_type_values = Vec::new();\n \n         debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", self.mir_def_id);"}, {"sha": "d70ee8f9d5ec56c4780f75d71407a98247da70e4", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -498,7 +498,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 let defining_ty = if self.mir_def_id == closure_base_def_id {\n                     tcx.type_of(closure_base_def_id)\n                 } else {\n-                    let tables = tcx.typeck_tables_of(self.mir_def_id);\n+                    let tables = tcx.typeck_tables_of(self.mir_def_id.expect_local());\n                     tables.node_type(self.mir_hir_id)\n                 };\n "}, {"sha": "95c5d0f0b10590df317cc63025999a29237a40e7", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -289,9 +289,11 @@ pub fn const_eval_raw_provider<'tcx>(\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n \n-    if def_id.is_local() && tcx.has_typeck_tables(def_id) {\n-        if let Some(error_reported) = tcx.typeck_tables_of(def_id).tainted_by_errors {\n-            return Err(ErrorHandled::Reported(error_reported));\n+    if let Some(def_id) = def_id.as_local() {\n+        if tcx.has_typeck_tables(def_id) {\n+            if let Some(error_reported) = tcx.typeck_tables_of(def_id).tainted_by_errors {\n+                return Err(ErrorHandled::Reported(error_reported));\n+            }\n         }\n     }\n "}, {"sha": "82e1984e4623d69abdbd6b9368eff1dd031d7255", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -402,9 +402,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         let did = instance.def_id();\n-        if did.is_local() && self.tcx.has_typeck_tables(did) {\n-            if let Some(error_reported) = self.tcx.typeck_tables_of(did).tainted_by_errors {\n-                throw_inval!(TypeckError(error_reported))\n+        if let Some(did) = did.as_local() {\n+            if self.tcx.has_typeck_tables(did) {\n+                if let Some(error_reported) = self.tcx.typeck_tables_of(did).tainted_by_errors {\n+                    throw_inval!(TypeckError(error_reported))\n+                }\n             }\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);"}, {"sha": "838a5b32fc80b403cd7876faf78ac43368c1a113", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -199,9 +199,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             // generators and closures.\n             ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {\n                 let mut name = None;\n-                if def_id.is_local() {\n+                if let Some(def_id) = def_id.as_local() {\n                     let tables = self.ecx.tcx.typeck_tables_of(def_id);\n-                    if let Some(upvars) = tables.upvar_list.get(&def_id) {\n+                    if let Some(upvars) = tables.upvar_list.get(&def_id.to_def_id()) {\n                         // Sometimes the index is beyond the number of upvars (seen\n                         // for a generator).\n                         if let Some((&var_hir_id, _)) = upvars.get_index(field) {"}, {"sha": "b407276cfbecd8fb17db174fe761ee0413f1c061", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -132,7 +132,7 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n         let owner_def_id = self.tcx.hir().body_owner_def_id(body_id);\n         let body = self.tcx.hir().body(body_id);\n         let param_env = self.tcx.param_env(owner_def_id.to_def_id());\n-        let tables = self.tcx.typeck_tables_of(owner_def_id.to_def_id());\n+        let tables = self.tcx.typeck_tables_of(owner_def_id);\n         ExprVisitor { tcx: self.tcx, param_env, tables }.visit_body(body);\n         self.visit_body(body);\n     }"}, {"sha": "8f736c1dd549bbf810536c2245882e5701d04308", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -101,7 +101,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n use rustc_middle::hir::map::Map;\n@@ -398,7 +398,7 @@ fn visit_fn<'tcx>(\n     intravisit::walk_fn(&mut fn_maps, fk, decl, body_id, sp, id);\n \n     // compute liveness\n-    let mut lsets = Liveness::new(&mut fn_maps, def_id.to_def_id());\n+    let mut lsets = Liveness::new(&mut fn_maps, def_id);\n     let entry_ln = lsets.compute(&body.value);\n \n     // check for various error conditions\n@@ -671,7 +671,7 @@ struct Liveness<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Liveness<'a, 'tcx> {\n-    fn new(ir: &'a mut IrMaps<'tcx>, def_id: DefId) -> Liveness<'a, 'tcx> {\n+    fn new(ir: &'a mut IrMaps<'tcx>, def_id: LocalDefId) -> Liveness<'a, 'tcx> {\n         // Special nodes and variables:\n         // - exit_ln represents the end of the fn, either by return or panic\n         // - implicit_ret_var is a pseudo-variable that represents"}, {"sha": "4336b3d820b25b264cbe0c49acd79f963b9fe131", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -107,7 +107,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     where\n         F: FnOnce(&mut Self),\n     {\n-        let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id).to_def_id();\n+        let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n \n         let tables = if self.tcx.has_typeck_tables(item_def_id) {\n             self.tcx.typeck_tables_of(item_def_id)"}, {"sha": "5ec2d68ab2a7d52048b9ff211796181a9a694918", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -1243,7 +1243,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let tables: &TypeckTables<'tcx> = match &in_progress_tables {\n             Some(t) if t.hir_owner.map(|owner| owner.to_def_id()) == Some(generator_did_root) => t,\n             _ => {\n-                query_tables = self.tcx.typeck_tables_of(generator_did);\n+                query_tables = self.tcx.typeck_tables_of(generator_did.expect_local());\n                 &query_tables\n             }\n         };"}, {"sha": "2e008868b8adc834d28d2fe794cf8ac5e447d72a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -853,7 +853,7 @@ fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     }\n }\n \n-fn used_trait_imports(tcx: TyCtxt<'_>, def_id: DefId) -> &DefIdSet {\n+fn used_trait_imports(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &DefIdSet {\n     &*tcx.typeck_tables_of(def_id).used_trait_imports\n }\n \n@@ -968,20 +968,19 @@ where\n     val.fold_with(&mut FixupFolder { tcx })\n }\n \n-fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &ty::TypeckTables<'tcx> {\n-    let fallback = move || tcx.type_of(def_id);\n+fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckTables<'tcx> {\n+    let fallback = move || tcx.type_of(def_id.to_def_id());\n     typeck_tables_of_with_fallback(tcx, def_id, fallback)\n }\n \n /// Used only to get `TypeckTables` for type inference during error recovery.\n /// Currently only used for type inference of `static`s and `const`s to avoid type cycle errors.\n fn diagnostic_only_typeck_tables_of<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n ) -> &ty::TypeckTables<'tcx> {\n-    assert!(def_id.is_local());\n     let fallback = move || {\n-        let span = tcx.hir().span(tcx.hir().as_local_hir_id(def_id.expect_local()));\n+        let span = tcx.hir().span(tcx.hir().as_local_hir_id(def_id));\n         tcx.sess.delay_span_bug(span, \"diagnostic only typeck table used\");\n         tcx.types.err\n     };\n@@ -990,17 +989,17 @@ fn diagnostic_only_typeck_tables_of<'tcx>(\n \n fn typeck_tables_of_with_fallback<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     fallback: impl Fn() -> Ty<'tcx> + 'tcx,\n ) -> &'tcx ty::TypeckTables<'tcx> {\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n-    let outer_def_id = tcx.closure_base_def_id(def_id);\n+    let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id()).expect_local();\n     if outer_def_id != def_id {\n         return tcx.typeck_tables_of(outer_def_id);\n     }\n \n-    let id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+    let id = tcx.hir().as_local_hir_id(def_id);\n     let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n@@ -1009,7 +1008,7 @@ fn typeck_tables_of_with_fallback<'tcx>(\n     });\n     let body = tcx.hir().body(body_id);\n \n-    let tables = Inherited::build(tcx, def_id.expect_local()).enter(|inh| {\n+    let tables = Inherited::build(tcx, def_id).enter(|inh| {\n         let param_env = tcx.param_env(def_id);\n         let fcx = if let (Some(header), Some(decl)) = (fn_header, fn_decl) {\n             let fn_sig = if crate::collect::get_infer_ret_ty(&decl.output).is_some() {\n@@ -1029,7 +1028,7 @@ fn typeck_tables_of_with_fallback<'tcx>(\n             check_abi(tcx, span, fn_sig.abi());\n \n             // Compute the fty from point of view of inside the fn.\n-            let fn_sig = tcx.liberate_late_bound_regions(def_id, &fn_sig);\n+            let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), &fn_sig);\n             let fn_sig = inh.normalize_associated_types_in(\n                 body.value.span,\n                 body_id.hir_id,\n@@ -1121,7 +1120,7 @@ fn typeck_tables_of_with_fallback<'tcx>(\n         // because they don't constrain other type variables.\n         fcx.closure_analyze(body);\n         assert!(fcx.deferred_call_resolutions.borrow().is_empty());\n-        fcx.resolve_generator_interiors(def_id);\n+        fcx.resolve_generator_interiors(def_id.to_def_id());\n \n         for (ty, span, code) in fcx.deferred_sized_obligations.borrow_mut().drain(..) {\n             let ty = fcx.normalize_ty(span, ty);"}, {"sha": "ce1538bfa49c351298832a67f9a6906f4069914e", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -12,7 +12,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);\n-        let imports = tcx.used_trait_imports(item_def_id.to_def_id());\n+        let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n         used_trait_imports.extend(imports.iter());\n     }"}, {"sha": "fcd97715b73006105bc7c43183fa82e4ee7652a0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -1459,9 +1459,10 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     use rustc_hir::Node::*;\n     use rustc_hir::*;\n \n-    let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+    let def_id = def_id.expect_local();\n+    let hir_id = tcx.hir().as_local_hir_id(def_id);\n \n-    let icx = ItemCtxt::new(tcx, def_id);\n+    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n@@ -1516,7 +1517,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             ..\n         }) => {\n             let abi = tcx.hir().get_foreign_abi(hir_id);\n-            compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi, ident)\n+            compute_sig_of_foreign_fn_decl(tcx, def_id.to_def_id(), fn_decl, abi, ident)\n         }\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {"}, {"sha": "5302b0cdb7809e24325cfc49a82616336e58fe25", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7c9e753d449a02a39610cf657c11dc6af86774/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=de7c9e753d449a02a39610cf657c11dc6af86774", "patch": "@@ -34,7 +34,13 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             TraitItemKind::Const(ref ty, body_id) => body_id\n                 .and_then(|body_id| {\n                     if is_suggestable_infer_ty(ty) {\n-                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident))\n+                        Some(infer_placeholder_type(\n+                            tcx,\n+                            def_id.expect_local(),\n+                            body_id,\n+                            ty.span,\n+                            item.ident,\n+                        ))\n                     } else {\n                         None\n                     }\n@@ -53,7 +59,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             ImplItemKind::Const(ref ty, body_id) => {\n                 if is_suggestable_infer_ty(ty) {\n-                    infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n+                    infer_placeholder_type(tcx, def_id.expect_local(), body_id, ty.span, item.ident)\n                 } else {\n                     icx.to_ty(ty)\n                 }\n@@ -78,7 +84,13 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             match item.kind {\n                 ItemKind::Static(ref ty, .., body_id) | ItemKind::Const(ref ty, body_id) => {\n                     if is_suggestable_infer_ty(ty) {\n-                        infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n+                        infer_placeholder_type(\n+                            tcx,\n+                            def_id.expect_local(),\n+                            body_id,\n+                            ty.span,\n+                            item.ident,\n+                        )\n                     } else {\n                         icx.to_ty(ty)\n                     }\n@@ -108,7 +120,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                             // We shouldn't leak borrowck results through impl trait in bindings.\n                             // For example, we shouldn't be able to tell if `x` in\n                             // `let x: impl Sized + 'a = &()` has type `&'static ()` or `&'a ()`.\n-                            &tcx.typeck_tables_of(owner).concrete_opaque_types\n+                            &tcx.typeck_tables_of(owner.expect_local()).concrete_opaque_types\n                         }\n                         OpaqueTyOrigin::TypeAlias => {\n                             span_bug!(item.span, \"Type alias impl trait shouldn't have an owner\")\n@@ -126,7 +138,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                 ),\n                             );\n                             if let Some(ErrorReported) =\n-                                tcx.typeck_tables_of(owner).tainted_by_errors\n+                                tcx.typeck_tables_of(owner.expect_local()).tainted_by_errors\n                             {\n                                 // Some error in the\n                                 // owner fn prevented us from populating\n@@ -405,7 +417,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n \n     impl ConstraintLocator<'_> {\n-        fn check(&mut self, def_id: DefId) {\n+        fn check(&mut self, def_id: LocalDefId) {\n             // Don't try to check items that cannot possibly constrain the type.\n             if !self.tcx.has_typeck_tables(def_id) {\n                 debug!(\n@@ -512,32 +524,32 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n             if let hir::ExprKind::Closure(..) = ex.kind {\n                 let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n-                self.check(def_id.to_def_id());\n+                self.check(def_id);\n             }\n             intravisit::walk_expr(self, ex);\n         }\n         fn visit_item(&mut self, it: &'tcx Item<'tcx>) {\n             debug!(\"find_existential_constraints: visiting {:?}\", it);\n-            let def_id = self.tcx.hir().local_def_id(it.hir_id).to_def_id();\n+            let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             // The opaque type itself or its children are not within its reveal scope.\n-            if def_id != self.def_id {\n+            if def_id.to_def_id() != self.def_id {\n                 self.check(def_id);\n                 intravisit::walk_item(self, it);\n             }\n         }\n         fn visit_impl_item(&mut self, it: &'tcx ImplItem<'tcx>) {\n             debug!(\"find_existential_constraints: visiting {:?}\", it);\n-            let def_id = self.tcx.hir().local_def_id(it.hir_id).to_def_id();\n+            let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             // The opaque type itself or its children are not within its reveal scope.\n-            if def_id != self.def_id {\n+            if def_id.to_def_id() != self.def_id {\n                 self.check(def_id);\n                 intravisit::walk_impl_item(self, it);\n             }\n         }\n         fn visit_trait_item(&mut self, it: &'tcx TraitItem<'tcx>) {\n             debug!(\"find_existential_constraints: visiting {:?}\", it);\n             let def_id = self.tcx.hir().local_def_id(it.hir_id);\n-            self.check(def_id.to_def_id());\n+            self.check(def_id);\n             intravisit::walk_trait_item(self, it);\n         }\n     }\n@@ -586,7 +598,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n fn infer_placeholder_type(\n     tcx: TyCtxt<'_>,\n-    def_id: DefId,\n+    def_id: LocalDefId,\n     body_id: hir::BodyId,\n     span: Span,\n     item_ident: Ident,"}]}