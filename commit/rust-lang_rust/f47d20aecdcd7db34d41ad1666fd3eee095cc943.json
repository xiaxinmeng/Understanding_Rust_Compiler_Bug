{"sha": "f47d20aecdcd7db34d41ad1666fd3eee095cc943", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0N2QyMGFlY2RjZDdkYjM0ZDQxYWQxNjY2ZmQzZWVlMDk1Y2M5NDM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-06T02:13:19Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-21T09:55:19Z"}, "message": "Use a span from the correct file for the inner span of a module\n\nThis basically only affects modules which are empty (or only contain comments).\n\nCloses #26755", "tree": {"sha": "7bad65f9a57209784410c8af9e2b42a5009eaea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bad65f9a57209784410c8af9e2b42a5009eaea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47d20aecdcd7db34d41ad1666fd3eee095cc943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47d20aecdcd7db34d41ad1666fd3eee095cc943", "html_url": "https://github.com/rust-lang/rust/commit/f47d20aecdcd7db34d41ad1666fd3eee095cc943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47d20aecdcd7db34d41ad1666fd3eee095cc943/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf34187a2f874690798b06d9350c1f6c4755243a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf34187a2f874690798b06d9350c1f6c4755243a", "html_url": "https://github.com/rust-lang/rust/commit/bf34187a2f874690798b06d9350c1f6c4755243a"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "d4eeaa1de109c9ef91add8b229e2645bd528c8f3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f47d20aecdcd7db34d41ad1666fd3eee095cc943", "patch": "@@ -1947,6 +1947,10 @@ impl Span {\n \n impl Clean<Span> for syntax::codemap::Span {\n     fn clean(&self, cx: &DocContext) -> Span {\n+        if *self == DUMMY_SP {\n+            return Span::empty();\n+        }\n+\n         let cm = cx.sess().codemap();\n         let filename = cm.span_to_filename(*self);\n         let lo = cm.lookup_char_pos(self.lo);"}, {"sha": "e6bc3218897d91f3ec907c86cc256a81a1504343", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=f47d20aecdcd7db34d41ad1666fd3eee095cc943", "patch": "@@ -894,7 +894,7 @@ impl CodeMap {\n         FileMapAndBytePos {fm: fm, pos: offset}\n     }\n \n-    /// Converts an absolute BytePos to a CharPos relative to the filemap and above.\n+    /// Converts an absolute BytePos to a CharPos relative to the filemap.\n     pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {\n         let idx = self.lookup_filemap_idx(bpos);\n         let files = self.files.borrow();"}, {"sha": "621335ecd979cf1ee5a97a03c09881ec280127cf", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=f47d20aecdcd7db34d41ad1666fd3eee095cc943", "patch": "@@ -231,6 +231,7 @@ impl<'a> StringReader<'a> {\n             None => {\n                 if self.is_eof() {\n                     self.peek_tok = token::Eof;\n+                    self.peek_span = codemap::mk_sp(self.filemap.end_pos, self.filemap.end_pos);\n                 } else {\n                     let start_bytepos = self.last_pos;\n                     self.peek_tok = self.next_token_inner();"}, {"sha": "34a63fc92feaa1bc00738f45c6652a192b780a3f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f47d20aecdcd7db34d41ad1666fd3eee095cc943", "patch": "@@ -11,7 +11,7 @@\n //! The main parser interface\n \n use ast;\n-use codemap::{Span, CodeMap, FileMap};\n+use codemap::{self, Span, CodeMap, FileMap};\n use diagnostic::{SpanHandler, Handler, Auto, FatalError};\n use parse::attr::ParserAttr;\n use parse::parser::Parser;\n@@ -203,7 +203,14 @@ pub fn new_sub_parser_from_file<'a>(sess: &'a ParseSess,\n pub fn filemap_to_parser<'a>(sess: &'a ParseSess,\n                              filemap: Rc<FileMap>,\n                              cfg: ast::CrateConfig) -> Parser<'a> {\n-    tts_to_parser(sess, filemap_to_tts(sess, filemap), cfg)\n+    let end_pos = filemap.end_pos;\n+    let mut parser = tts_to_parser(sess, filemap_to_tts(sess, filemap), cfg);\n+\n+    if parser.token == token::Eof && parser.span == codemap::DUMMY_SP {\n+        parser.span = codemap::mk_sp(end_pos, end_pos);\n+    }\n+\n+    parser\n }\n \n // must preserve old name for now, because quote! from the *existing*"}, {"sha": "db1b2489f1d9e8f538ebc529a74c21390afd2ee6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47d20aecdcd7db34d41ad1666fd3eee095cc943/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f47d20aecdcd7db34d41ad1666fd3eee095cc943", "patch": "@@ -4824,8 +4824,14 @@ impl<'a> Parser<'a> {\n             return Err(self.fatal(&format!(\"expected item, found `{}`\", token_str)));\n         }\n \n+        let hi = if self.span == codemap::DUMMY_SP {\n+            inner_lo\n+        } else {\n+            self.span.lo\n+        };\n+\n         Ok(ast::Mod {\n-            inner: mk_sp(inner_lo, self.span.lo),\n+            inner: mk_sp(inner_lo, hi),\n             items: items\n         })\n     }\n@@ -4869,8 +4875,7 @@ impl<'a> Parser<'a> {\n \n     fn push_mod_path(&mut self, id: Ident, attrs: &[Attribute]) {\n         let default_path = self.id_to_interned_str(id);\n-        let file_path = match ::attr::first_attr_value_str_by_name(attrs,\n-                                                                   \"path\") {\n+        let file_path = match ::attr::first_attr_value_str_by_name(attrs, \"path\") {\n             Some(d) => d,\n             None => default_path,\n         };\n@@ -5003,13 +5008,12 @@ impl<'a> Parser<'a> {\n         included_mod_stack.push(path.clone());\n         drop(included_mod_stack);\n \n-        let mut p0 =\n-            new_sub_parser_from_file(self.sess,\n-                                     self.cfg.clone(),\n-                                     &path,\n-                                     owns_directory,\n-                                     Some(name),\n-                                     id_sp);\n+        let mut p0 = new_sub_parser_from_file(self.sess,\n+                                              self.cfg.clone(),\n+                                              &path,\n+                                              owns_directory,\n+                                              Some(name),\n+                                              id_sp);\n         let mod_inner_lo = p0.span.lo;\n         let mod_attrs = p0.parse_inner_attributes();\n         let m0 = try!(p0.parse_mod_items(&token::Eof, mod_inner_lo));"}]}