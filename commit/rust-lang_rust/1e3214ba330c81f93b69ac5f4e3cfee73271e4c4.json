{"sha": "1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMzIxNGJhMzMwYzgxZjkzYjY5YWM1ZjRlM2NmZWU3MzI3MWU0YzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-01T22:58:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-01T23:48:26Z"}, "message": "Normalize the associated types in closure and closure upvar types.", "tree": {"sha": "f24112d4d10e311e036ced1c453bdc5697061877", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f24112d4d10e311e036ced1c453bdc5697061877"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "html_url": "https://github.com/rust-lang/rust/commit/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f848cde5fd8741faf6306801766ae2a937db35", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f848cde5fd8741faf6306801766ae2a937db35", "html_url": "https://github.com/rust-lang/rust/commit/78f848cde5fd8741faf6306801766ae2a937db35"}], "stats": {"total": 189, "additions": 145, "deletions": 44}, "files": [{"sha": "f9dced088f8c124b7d2ba2daa71576e4ee2cdb82", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "patch": "@@ -1781,6 +1781,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                substs.repr(self.tcx()));\n \n         let closure_type = self.closure_typer.unboxed_closure_type(closure_def_id, substs);\n+\n+        debug!(\"confirm_unboxed_closure_candidate: closure_def_id={} closure_type={}\",\n+               closure_def_id.repr(self.tcx()),\n+               closure_type.repr(self.tcx()));\n+\n         let closure_sig = &closure_type.sig;\n         let arguments_tuple = closure_sig.0.inputs[0];\n         let trait_substs ="}, {"sha": "a83f03c2c16f9502c8bb101f86d33a1fe79c5c4e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "patch": "@@ -5665,7 +5665,7 @@ pub fn tup_fields<'tcx>(v: &[Ty<'tcx>]) -> Vec<field<'tcx>> {\n     }).collect()\n }\n \n-#[deriving(Copy)]\n+#[deriving(Copy, Clone)]\n pub struct UnboxedClosureUpvar<'tcx> {\n     pub def: def::Def,\n     pub span: Span,\n@@ -7099,12 +7099,30 @@ pub trait HasProjectionTypes {\n     fn has_projection_types(&self) -> bool;\n }\n \n+impl<'tcx,T:HasProjectionTypes> HasProjectionTypes for Vec<T> {\n+    fn has_projection_types(&self) -> bool {\n+        self.iter().any(|p| p.has_projection_types())\n+    }\n+}\n+\n impl<'tcx,T:HasProjectionTypes> HasProjectionTypes for VecPerParamSpace<T> {\n     fn has_projection_types(&self) -> bool {\n         self.iter().any(|p| p.has_projection_types())\n     }\n }\n \n+impl<'tcx> HasProjectionTypes for ClosureTy<'tcx> {\n+    fn has_projection_types(&self) -> bool {\n+        self.sig.has_projection_types()\n+    }\n+}\n+\n+impl<'tcx> HasProjectionTypes for UnboxedClosureUpvar<'tcx> {\n+    fn has_projection_types(&self) -> bool {\n+        self.ty.has_projection_types()\n+    }\n+}\n+\n impl<'tcx> HasProjectionTypes for ty::GenericBounds<'tcx> {\n     fn has_projection_types(&self) -> bool {\n         self.predicates.has_projection_types()\n@@ -7304,3 +7322,23 @@ impl ReferencesError for Region\n         false\n     }\n }\n+\n+impl<'tcx> Repr<'tcx> for ClosureTy<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        format!(\"ClosureTy({},{},{},{},{},{})\",\n+                self.unsafety,\n+                self.onceness,\n+                self.store,\n+                self.bounds.repr(tcx),\n+                self.sig.repr(tcx),\n+                self.abi)\n+    }\n+}\n+\n+impl<'tcx> Repr<'tcx> for UnboxedClosureUpvar<'tcx> {\n+    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n+        format!(\"UnboxedClosureUpvar({},{})\",\n+                self.def.repr(tcx),\n+                self.ty.repr(tcx))\n+    }\n+}"}, {"sha": "83d2f6fb0e6d58909000c0c6171ea414a8f648f9", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "patch": "@@ -532,6 +532,16 @@ impl<'tcx,T,U> TypeFoldable<'tcx> for ty::OutlivesPredicate<T,U>\n     }\n }\n \n+impl<'tcx> TypeFoldable<'tcx> for ty::UnboxedClosureUpvar<'tcx> {\n+    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::UnboxedClosureUpvar<'tcx> {\n+        ty::UnboxedClosureUpvar {\n+            def: self.def,\n+            span: self.span,\n+            ty: self.ty.fold_with(folder),\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // \"super\" routines: these are the default implementations for TypeFolder.\n //"}, {"sha": "18155d756807ce037df7de78ad12e53b12f08836", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "patch": "@@ -43,7 +43,7 @@ use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::subst;\n use middle::weak_lang_items;\n use middle::subst::{Subst, Substs};\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, Ty, UnboxedClosureTyper};\n use session::config::{mod, NoDebugInfo, FullDebugInfo};\n use session::Session;\n use trans::_match;\n@@ -257,12 +257,12 @@ fn get_extern_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<'tcx>,\n }\n \n pub fn self_type_for_unboxed_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                     closure_id: ast::DefId,\n-                                     fn_ty: Ty<'tcx>)\n-                                     -> Ty<'tcx> {\n-    let unboxed_closures = ccx.tcx().unboxed_closures.borrow();\n-    let unboxed_closure = &(*unboxed_closures)[closure_id];\n-    match unboxed_closure.kind {\n+                                               closure_id: ast::DefId,\n+                                               fn_ty: Ty<'tcx>)\n+                                               -> Ty<'tcx>\n+{\n+    let unboxed_closure_kind = ccx.tcx().unboxed_closure_kind(closure_id);\n+    match unboxed_closure_kind {\n         ty::FnUnboxedClosureKind => {\n             ty::mk_imm_rptr(ccx.tcx(), ccx.tcx().mk_region(ty::ReStatic), fn_ty)\n         }\n@@ -291,13 +291,15 @@ pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             (f.sig.0.inputs.clone(), f.sig.0.output, f.abi, Some(Type::i8p(ccx)))\n         }\n         ty::ty_unboxed_closure(closure_did, _, substs) => {\n-            let unboxed_closures = ccx.tcx().unboxed_closures.borrow();\n-            let unboxed_closure = &(*unboxed_closures)[closure_did];\n-            let function_type = unboxed_closure.closure_type.clone();\n+            let typer = common::NormalizingUnboxedClosureTyper::new(ccx.tcx());\n+            let function_type = typer.unboxed_closure_type(closure_did, substs);\n             let self_type = self_type_for_unboxed_closure(ccx, closure_did, fn_ty);\n             let llenvironment_type = type_of_explicit_arg(ccx, self_type);\n-            (function_type.sig.0.inputs.iter().map(|t| t.subst(ccx.tcx(), substs)).collect(),\n-             function_type.sig.0.output.subst(ccx.tcx(), substs),\n+            debug!(\"decl_rust_fn: function_type={} self_type={}\",\n+                   function_type.repr(ccx.tcx()),\n+                   self_type.repr(ccx.tcx()));\n+            (function_type.sig.0.inputs,\n+             function_type.sig.0.output,\n              RustCall,\n              Some(llenvironment_type))\n         }\n@@ -2436,11 +2438,9 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n         ty::ty_closure(ref f) => (f.sig.clone(), f.abi, true),\n         ty::ty_bare_fn(_, ref f) => (f.sig.clone(), f.abi, false),\n         ty::ty_unboxed_closure(closure_did, _, substs) => {\n-            let unboxed_closures = ccx.tcx().unboxed_closures.borrow();\n-            let ref function_type = (*unboxed_closures)[closure_did]\n-                                                    .closure_type;\n-\n-            (function_type.sig.subst(ccx.tcx(), substs), RustCall, true)\n+            let typer = common::NormalizingUnboxedClosureTyper::new(ccx.tcx());\n+            let function_type = typer.unboxed_closure_type(closure_did, substs);\n+            (function_type.sig, RustCall, true)\n         }\n         _ => ccx.sess().bug(\"expected closure or function.\")\n     };"}, {"sha": "93a5b54fde3e5286b946a6930f96e2bbfb8404dd", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "patch": "@@ -22,11 +22,11 @@ use trans::common::*;\n use trans::datum::{Datum, DatumBlock, Expr, Lvalue, rvalue_scratch_datum};\n use trans::debuginfo;\n use trans::expr;\n-use trans::monomorphize::MonoId;\n+use trans::monomorphize::{mod, MonoId};\n use trans::type_of::*;\n use trans::type_::Type;\n-use middle::ty::{mod, Ty};\n-use middle::subst::{Subst, Substs};\n+use middle::ty::{mod, Ty, UnboxedClosureTyper};\n+use middle::subst::{Substs};\n use session::config::FullDebugInfo;\n use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n@@ -464,7 +464,7 @@ pub fn get_or_create_declaration_if_unboxed_closure<'blk, 'tcx>(bcx: Block<'blk,\n     }\n \n     let function_type = ty::node_id_to_type(bcx.tcx(), closure_id.node);\n-    let function_type = function_type.subst(bcx.tcx(), substs);\n+    let function_type = monomorphize::apply_param_substs(bcx.tcx(), substs, &function_type);\n \n     // Normalize type so differences in regions and typedefs don't cause\n     // duplicate declarations\n@@ -511,7 +511,8 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n                              body: &ast::Block,\n                              id: ast::NodeId,\n                              dest: expr::Dest)\n-                             -> Block<'blk, 'tcx> {\n+                             -> Block<'blk, 'tcx>\n+{\n     let _icx = push_ctxt(\"closure::trans_unboxed_closure\");\n \n     debug!(\"trans_unboxed_closure()\");\n@@ -522,9 +523,13 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n         closure_id,\n         bcx.fcx.param_substs).unwrap();\n \n-    let function_type = (*bcx.tcx().unboxed_closures.borrow())[closure_id]\n-                                                              .closure_type\n-                                                              .clone();\n+    // Get the type of this closure. Use the current `param_substs` as\n+    // the closure substitutions. This makes sense because the closure\n+    // takes the same set of type arguments as the enclosing fn, and\n+    // this function (`trans_unboxed_closure`) is invoked at the point\n+    // of the closure expression.\n+    let typer = NormalizingUnboxedClosureTyper::new(bcx.tcx());\n+    let function_type = typer.unboxed_closure_type(closure_id, bcx.fcx.param_substs);\n     let function_type = ty::mk_closure(bcx.tcx(), function_type);\n \n     let freevars: Vec<ty::Freevar> ="}, {"sha": "aa8822408806365fc4fa34b1269544be2257267d", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "patch": "@@ -632,27 +632,26 @@ impl<'blk, 'tcx> ty::UnboxedClosureTyper<'tcx> for BlockS<'blk, 'tcx> {\n                             def_id: ast::DefId)\n                             -> ty::UnboxedClosureKind\n     {\n-        self.tcx().unboxed_closure_kind(def_id)\n+        let typer = NormalizingUnboxedClosureTyper::new(self.tcx());\n+        typer.unboxed_closure_kind(def_id)\n     }\n \n     fn unboxed_closure_type(&self,\n                             def_id: ast::DefId,\n                             substs: &subst::Substs<'tcx>)\n                             -> ty::ClosureTy<'tcx>\n     {\n-        // the substitutions in `substs` are already monomorphized, so we can\n-        // ignore `param_substs`\n-        self.tcx().unboxed_closure_type(def_id, substs)\n+        let typer = NormalizingUnboxedClosureTyper::new(self.tcx());\n+        typer.unboxed_closure_type(def_id, substs)\n     }\n \n     fn unboxed_closure_upvars(&self,\n                               def_id: ast::DefId,\n                               substs: &Substs<'tcx>)\n                               -> Option<Vec<ty::UnboxedClosureUpvar<'tcx>>>\n     {\n-        // the substitutions in `substs` are already monomorphized, so we can\n-        // ignore `param_substs`\n-        ty::unboxed_closure_upvars(self.tcx(), def_id, substs)\n+        let typer = NormalizingUnboxedClosureTyper::new(self.tcx());\n+        typer.unboxed_closure_upvars(def_id, substs)\n     }\n }\n \n@@ -948,7 +947,8 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     // Do the initial selection for the obligation. This yields the\n     // shallow result we are looking for -- that is, what specific impl.\n-    let mut selcx = traits::SelectionContext::new(&infcx, &param_env, tcx);\n+    let typer = NormalizingUnboxedClosureTyper::new(infcx.tcx);\n+    let mut selcx = traits::SelectionContext::new(&infcx, &param_env, &typer);\n     let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n                                              trait_ref.to_poly_trait_predicate());\n     let selection = match selcx.select(&obligation) {\n@@ -992,6 +992,47 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     vtable\n }\n \n+pub struct NormalizingUnboxedClosureTyper<'a,'tcx:'a> {\n+    tcx: &'a ty::ctxt<'tcx>\n+}\n+\n+impl<'a,'tcx> NormalizingUnboxedClosureTyper<'a,'tcx> {\n+    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> NormalizingUnboxedClosureTyper<'a,'tcx> {\n+        NormalizingUnboxedClosureTyper { tcx: tcx }\n+    }\n+}\n+\n+impl<'a,'tcx> ty::UnboxedClosureTyper<'tcx> for NormalizingUnboxedClosureTyper<'a,'tcx> {\n+    fn unboxed_closure_kind(&self,\n+                            def_id: ast::DefId)\n+                            -> ty::UnboxedClosureKind\n+    {\n+        self.tcx.unboxed_closure_kind(def_id)\n+    }\n+\n+    fn unboxed_closure_type(&self,\n+                            def_id: ast::DefId,\n+                            substs: &subst::Substs<'tcx>)\n+                            -> ty::ClosureTy<'tcx>\n+    {\n+        // the substitutions in `substs` are already monomorphized,\n+        // but we still must normalize associated types\n+        let closure_ty = self.tcx.unboxed_closure_type(def_id, substs);\n+        monomorphize::normalize_associated_type(self.tcx, &closure_ty)\n+    }\n+\n+    fn unboxed_closure_upvars(&self,\n+                              def_id: ast::DefId,\n+                              substs: &Substs<'tcx>)\n+                              -> Option<Vec<ty::UnboxedClosureUpvar<'tcx>>>\n+    {\n+        // the substitutions in `substs` are already monomorphized,\n+        // but we still must normalize associated types\n+        let result = ty::unboxed_closure_upvars(self.tcx, def_id, substs);\n+        monomorphize::normalize_associated_type(self.tcx, &result)\n+    }\n+}\n+\n pub fn drain_fulfillment_cx<'a,'tcx,T>(span: Span,\n                                        infcx: &infer::InferCtxt<'a,'tcx>,\n                                        param_env: &ty::ParameterEnvironment<'tcx>,\n@@ -1006,7 +1047,8 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(span: Span,\n     // In principle, we only need to do this so long as `result`\n     // contains unbound type parameters. It could be a slight\n     // optimization to stop iterating early.\n-    match fulfill_cx.select_all_or_error(infcx, param_env, infcx.tcx) {\n+    let typer = NormalizingUnboxedClosureTyper::new(infcx.tcx);\n+    match fulfill_cx.select_all_or_error(infcx, param_env, &typer) {\n         Ok(()) => { }\n         Err(errors) => {\n             if errors.iter().all(|e| e.is_overflow()) {"}, {"sha": "c651255226b5adc080a2ed5c6cf0ad410a2ab005", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "patch": "@@ -194,13 +194,13 @@ use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::*;\n use metadata::csearch;\n-use middle::subst::{mod, Subst, Substs};\n+use middle::subst::{mod, Substs};\n use trans::{mod, adt, machine, type_of};\n use trans::common::*;\n use trans::_match::{BindingInfo, TrByCopy, TrByMove, TrByRef};\n use trans::monomorphize;\n use trans::type_::Type;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{mod, Ty, UnboxedClosureTyper};\n use middle::pat_util;\n use session::config::{mod, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n@@ -470,9 +470,9 @@ impl<'tcx> TypeMap<'tcx> {\n                                                         closure_ty.clone(),\n                                                         &mut unique_type_id);\n             },\n-            ty::ty_unboxed_closure(ref def_id, _, substs) => {\n-                let closure_ty = cx.tcx().unboxed_closures.borrow()\n-                                   .get(def_id).unwrap().closure_type.subst(cx.tcx(), substs);\n+            ty::ty_unboxed_closure(def_id, _, substs) => {\n+                let typer = NormalizingUnboxedClosureTyper::new(cx.tcx());\n+                let closure_ty = typer.unboxed_closure_type(def_id, substs);\n                 self.get_unique_type_id_of_closure_type(cx,\n                                                         closure_ty,\n                                                         &mut unique_type_id);\n@@ -3020,9 +3020,9 @@ fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_closure(ref closurety) => {\n             subroutine_type_metadata(cx, unique_type_id, &closurety.sig, usage_site_span)\n         }\n-        ty::ty_unboxed_closure(ref def_id, _, substs) => {\n-            let sig = cx.tcx().unboxed_closures.borrow()\n-                        .get(def_id).unwrap().closure_type.sig.subst(cx.tcx(), substs);\n+        ty::ty_unboxed_closure(def_id, _, substs) => {\n+            let typer = NormalizingUnboxedClosureTyper::new(cx.tcx());\n+            let sig = typer.unboxed_closure_type(def_id, substs).sig;\n             subroutine_type_metadata(cx, unique_type_id, &sig, usage_site_span)\n         }\n         ty::ty_struct(def_id, substs) => {"}, {"sha": "7c8ba08d987504964fe497fea513a123ca0a296a", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3214ba330c81f93b69ac5f4e3cfee73271e4c4/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=1e3214ba330c81f93b69ac5f4e3cfee73271e4c4", "patch": "@@ -323,7 +323,8 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n \n     let infcx = infer::new_infer_ctxt(tcx);\n     let param_env = ty::empty_parameter_environment();\n-    let mut selcx = traits::SelectionContext::new(&infcx, &param_env, tcx);\n+    let typer = NormalizingUnboxedClosureTyper::new(infcx.tcx);\n+    let mut selcx = traits::SelectionContext::new(&infcx, &param_env, &typer);\n     let cause = traits::ObligationCause::dummy();\n     let traits::Normalized { value: result, obligations } =\n         traits::normalize(&mut selcx, cause, value);"}]}