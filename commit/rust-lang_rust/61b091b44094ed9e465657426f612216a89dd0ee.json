{"sha": "61b091b44094ed9e465657426f612216a89dd0ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYjA5MWI0NDA5NGVkOWU0NjU2NTc0MjZmNjEyMjE2YTg5ZGQwZWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-28T16:17:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-28T16:17:36Z"}, "message": "Rollup merge of #69541 - dotdash:format, r=Mark-Simulacrum\n\nRemove unneeded calls to format!()", "tree": {"sha": "39051db30afb0bf6cdca5c6d37cda1290280d2d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39051db30afb0bf6cdca5c6d37cda1290280d2d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61b091b44094ed9e465657426f612216a89dd0ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWT0gCRBK7hj4Ov3rIwAAdHIIAIp29vIeriMgQ1gI3jYEFt3Z\nqPW7LeiemE4GSYBHab5ji6TYNKRyPLs40i9cYTnM8mR2SuInCbtvbDG8k5K/KY23\nwzfZIv31cWvIxvTQW+czOJy3q6E8dWmjB5hLXtgOcUcCwZPHfl8hN2tBQT017ra0\nMjuqUqS9utr2HDJyHPY7/O2idRKErlU+njKpAA08NZCMUEIjHgF1e4Y2gHobP18V\nMEFme3cIrH5Aa8wvJURS3wACu6jjSyOVHgz3DL31g/nM+SX95fu+VYiOPrPzLebA\nMaVye8qxPXWW4N84iUrBXEzCFbHtcAyA5Xxq/ALxyB2/8knIGFyt2pKcqw0NKyQ=\n=ZMfo\n-----END PGP SIGNATURE-----\n", "payload": "tree 39051db30afb0bf6cdca5c6d37cda1290280d2d9\nparent b95945c8d642b0b6949e19a185d1dd916ee6ec31\nparent c1de0b1b70cfb58cec5d35d0cd790e51618c6d53\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1582906656 +0100\ncommitter GitHub <noreply@github.com> 1582906656 +0100\n\nRollup merge of #69541 - dotdash:format, r=Mark-Simulacrum\n\nRemove unneeded calls to format!()\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61b091b44094ed9e465657426f612216a89dd0ee", "html_url": "https://github.com/rust-lang/rust/commit/61b091b44094ed9e465657426f612216a89dd0ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61b091b44094ed9e465657426f612216a89dd0ee/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b95945c8d642b0b6949e19a185d1dd916ee6ec31", "url": "https://api.github.com/repos/rust-lang/rust/commits/b95945c8d642b0b6949e19a185d1dd916ee6ec31", "html_url": "https://github.com/rust-lang/rust/commit/b95945c8d642b0b6949e19a185d1dd916ee6ec31"}, {"sha": "c1de0b1b70cfb58cec5d35d0cd790e51618c6d53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1de0b1b70cfb58cec5d35d0cd790e51618c6d53", "html_url": "https://github.com/rust-lang/rust/commit/c1de0b1b70cfb58cec5d35d0cd790e51618c6d53"}], "stats": {"total": 87, "additions": 34, "deletions": 53}, "files": [{"sha": "b00b1656bf7500d890d14e00bfa0fb73369a195f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -601,7 +601,7 @@ impl RustcDefaultCalls {\n             });\n             compiler.codegen_backend().link(&sess, Box::new(codegen_results), &outputs)\n         } else {\n-            sess.fatal(&format!(\"rlink must be a file\"))\n+            sess.fatal(\"rlink must be a file\")\n         }\n     }\n "}, {"sha": "dff243a51b39f2f2b8f5fee6e121356dfeb07e92", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -1668,10 +1668,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         }\n                     }\n                 } else {\n-                    let mut err = self.cx.struct_span_err(\n-                        it.span(),\n-                        &format!(\"expected path to external documentation\"),\n-                    );\n+                    let mut err = self\n+                        .cx\n+                        .struct_span_err(it.span(), \"expected path to external documentation\");\n \n                     // Check if the user erroneously used `doc(include(...))` syntax.\n                     let literal = it.meta_item_list().and_then(|list| {"}, {"sha": "4dd08b517e1f214527903f66a35f3945cb7bcd17", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -81,10 +81,7 @@ impl AssertModuleSource<'tcx> {\n         if !self.tcx.sess.opts.debugging_opts.query_dep_graph {\n             self.tcx.sess.span_fatal(\n                 attr.span,\n-                &format!(\n-                    \"found CGU-reuse attribute but `-Zquery-dep-graph` \\\n-                          was not specified\"\n-                ),\n+                \"found CGU-reuse attribute but `-Zquery-dep-graph` was not specified\",\n             );\n         }\n "}, {"sha": "f6e2956e5b2fc86c82e39c0a174615ebac5d285a", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -537,10 +537,7 @@ impl FindAllAttrs<'tcx> {\n             if !checked_attrs.contains(&attr.id) {\n                 self.tcx.sess.span_err(\n                     attr.span,\n-                    &format!(\n-                        \"found unchecked \\\n-                    `#[rustc_dirty]` / `#[rustc_clean]` attribute\"\n-                    ),\n+                    \"found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\",\n                 );\n             }\n         }"}, {"sha": "0dec5ae6da57a3054ae82fa80c5bc63bcab2efda", "filename": "src/librustc_infer/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -39,10 +39,10 @@ pub struct OverlapResult<'tcx> {\n }\n \n pub fn add_placeholder_note(err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n-    err.note(&format!(\n+    err.note(\n         \"this behavior recently changed as a result of a bug fix; \\\n-         see rust-lang/rust#56105 for details\"\n-    ));\n+         see rust-lang/rust#56105 for details\",\n+    );\n }\n \n /// If there are types that satisfy both impls, invokes `on_overlap`"}, {"sha": "ca5f6b8b7b20800f97f321b4cbce507f09f4bef8", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -935,9 +935,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             // Already reported in the query.\n             ConstEvalFailure(ErrorHandled::Reported) => {\n-                self.tcx\n-                    .sess\n-                    .delay_span_bug(span, &format!(\"constant in type had an ignored error\"));\n+                self.tcx.sess.delay_span_bug(span, \"constant in type had an ignored error\");\n                 return;\n             }\n "}, {"sha": "647224bc8d6b7f025e3504cfd9a54d6f6533c6eb", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -680,10 +680,7 @@ impl<'a> CrateLoader<'a> {\n \n             // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n             if !data.is_profiler_runtime() {\n-                self.sess.err(&format!(\n-                    \"the crate `profiler_builtins` is not \\\n-                                        a profiler runtime\"\n-                ));\n+                self.sess.err(\"the crate `profiler_builtins` is not a profiler runtime\");\n             }\n         }\n     }"}, {"sha": "9ba44a4d18e5813b9c3ada4c5648b47f40b779e1", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -65,10 +65,8 @@ impl NonConstOp for Downcast {\n pub struct FnCallIndirect;\n impl NonConstOp for FnCallIndirect {\n     fn emit_error(&self, item: &Item<'_, '_>, span: Span) {\n-        let mut err = item\n-            .tcx\n-            .sess\n-            .struct_span_err(span, &format!(\"function pointers are not allowed in const fn\"));\n+        let mut err =\n+            item.tcx.sess.struct_span_err(span, \"function pointers are not allowed in const fn\");\n         err.emit();\n     }\n }"}, {"sha": "ef01df2ea05b418d6cb994de405719553eff4f06", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -121,15 +121,12 @@ impl<'a> Parser<'a> {\n                         .span_label(attrs[0].span, \"attributes must go before parameters\")\n                         .emit();\n                     } else {\n-                        self.struct_span_err(\n-                            attrs[0].span,\n-                            &format!(\"attribute without generic parameters\"),\n-                        )\n-                        .span_label(\n-                            attrs[0].span,\n-                            \"attributes are only permitted when preceding parameters\",\n-                        )\n-                        .emit();\n+                        self.struct_span_err(attrs[0].span, \"attribute without generic parameters\")\n+                            .span_label(\n+                                attrs[0].span,\n+                                \"attributes are only permitted when preceding parameters\",\n+                            )\n+                            .emit();\n                     }\n                 }\n                 break;"}, {"sha": "1511742446b6ea4ddb05958ffd99f698bd3ed3ab", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -64,9 +64,9 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n     for (name, &item) in WEAK_ITEMS_REFS.iter() {\n         if missing.contains(&item) && !whitelisted(tcx, item) && items.require(item).is_err() {\n             if item == lang_items::PanicImplLangItem {\n-                tcx.sess.err(&format!(\"`#[panic_handler]` function required, but not found\"));\n+                tcx.sess.err(\"`#[panic_handler]` function required, but not found\");\n             } else if item == lang_items::OomLangItem {\n-                tcx.sess.err(&format!(\"`#[alloc_error_handler]` function required, but not found\"));\n+                tcx.sess.err(\"`#[alloc_error_handler]` function required, but not found\");\n             } else {\n                 tcx.sess.err(&format!(\"language item required, but not found: `{}`\", name));\n             }"}, {"sha": "b0206bb1a7a1616fee4d66ed9851481a52e93479", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -143,7 +143,7 @@ impl<'a> Resolver<'a> {\n                 if has_generic_params == HasGenericParams::Yes {\n                     // Try to retrieve the span of the function signature and generate a new\n                     // message with a local type or const parameter.\n-                    let sugg_msg = &format!(\"try using a local generic parameter instead\");\n+                    let sugg_msg = \"try using a local generic parameter instead\";\n                     if let Some((sugg_span, snippet)) = sm.generate_local_type_param_snippet(span) {\n                         // Suggest the modification to the user\n                         err.span_suggestion(\n@@ -158,7 +158,7 @@ impl<'a> Resolver<'a> {\n                             format!(\"try adding a local generic parameter in this method instead\"),\n                         );\n                     } else {\n-                        err.help(&format!(\"try using a local generic parameter instead\"));\n+                        err.help(\"try using a local generic parameter instead\");\n                     }\n                 }\n "}, {"sha": "8392d2b50d22e30d124d5b8e9df93522383e2410", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -1500,10 +1500,8 @@ fn parse_libs(\n             {\n                 early_error(\n                     error_format,\n-                    &format!(\n-                        \"the library kind 'static-nobundle' is only \\\n-                         accepted on the nightly compiler\"\n-                    ),\n+                    \"the library kind 'static-nobundle' is only \\\n+                     accepted on the nightly compiler\",\n                 );\n             }\n             let mut name_parts = name.splitn(2, ':');"}, {"sha": "98f4c509b5d8c44a36e7b98791c7ba15bd1a2723", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -964,10 +964,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ),\n             );\n         }\n-        err.note(&format!(\n+        err.note(\n             \"because of the default `Self` reference, type parameters must be \\\n-                            specified on object types\"\n-        ));\n+                  specified on object types\",\n+        );\n         err.emit();\n     }\n "}, {"sha": "49fa45836e134317b01862dbc155b87b023c95c2", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -283,10 +283,10 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     \"no base type found for inherent implementation\"\n                 )\n                 .span_label(ty.span, \"impl requires a base type\")\n-                .note(&format!(\n+                .note(\n                     \"either implement a trait on it or create a newtype \\\n-                                    to wrap it instead\"\n-                ))\n+                       to wrap it instead\",\n+                )\n                 .emit();\n                 return;\n             }"}, {"sha": "a626bf101a6d179344c6a7e79ce281db22224e9c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61b091b44094ed9e465657426f612216a89dd0ee/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=61b091b44094ed9e465657426f612216a89dd0ee", "patch": "@@ -1283,10 +1283,10 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                             param.hir_id,\n                             param.span,\n                             |lint| {\n-                                lint.build(&format!(\n+                                lint.build(\n                                     \"defaults for type parameters are only allowed in \\\n-                                        `struct`, `enum`, `type`, or `trait` definitions.\"\n-                                ))\n+                                            `struct`, `enum`, `type`, or `trait` definitions.\",\n+                                )\n                                 .emit();\n                             },\n                         );"}]}