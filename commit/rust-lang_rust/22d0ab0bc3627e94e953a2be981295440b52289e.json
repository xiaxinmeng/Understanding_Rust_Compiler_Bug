{"sha": "22d0ab0bc3627e94e953a2be981295440b52289e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZDBhYjBiYzM2MjdlOTRlOTUzYTJiZTk4MTI5NTQ0MGI1MjI4OWU=", "commit": {"author": {"name": "alecmocatta", "email": "alec@mocatta.net", "date": "2018-07-23T23:47:34Z"}, "committer": {"name": "alecmocatta", "email": "alec@mocatta.net", "date": "2018-07-24T00:30:43Z"}, "message": "Pass multiple linker arguments rather than concatenate with commas; -l library -> -llibrary to work with apple's ld", "tree": {"sha": "29e6487695817204c443bb025c120acba54b1341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e6487695817204c443bb025c120acba54b1341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22d0ab0bc3627e94e953a2be981295440b52289e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEPCVkzGdvYolEtC5PaN7JZEg0JiUFAltWczQACgkQaN7JZEg0\nJiXHthAAkgafH4KIlxTr1WSyc/NqZc7oQwjegzneKQk8fJQ4gJl1vNYS+zMHidLs\nwbMIgWjmGRB490JLTSeh1jY82iSjjzEOR5OhSvLYtIrv+HtfGOPgxGjw06YnuU7/\nR8ucgRFW33gwRKE0WobkfIdTg8nRflH4g0bzIz25h7m24c6EMCeD2mevAYBrV/6J\nsbGQBpNjeBL9pAv4liwGyP5Aq6fDeQRkvUl39w6EQ7gZi4xuirOAX6qnZZ4Yi48s\nlFr2Lo1/ALm369BbShx9z1CA9L5CYt/rKcELBVyOf5cwJXN4BxwuVWGaeU/w/WJn\nhaQyvz9lLA01BhCxpcgoT82dNK8e0aECQLZNq7mdsWvA4caiyn7jo42akPMZkF3r\nA+H64E5WiCXEe43S0XOy+MJvzzQkPLgz1G+pCl69zDQMLIluCap4wwPrv0UdtZ/5\nvaq9TF9vF14VzMZZK7ai//AfR/ySkBCtSZGpbR37m+Tf86dw0zkGDIKcJ5+RLzJ6\nEzx4Cr40fVdUuS3o9YaEVIb7plbEbxBxmk22cjUuh27eqijS3ulW+NNoMMljL0H4\n+yR2nCduz63IgF+sGXe+SgvwYW/BiSZToVxnjsw4zL2mJoR0PdksJa05y59m5YYn\nSfv7znI5+Qd+ZvyIdLBpQM8cTle4ZEgibYpdIFz7Y/9RNfAtiPc=\n=zi33\n-----END PGP SIGNATURE-----", "payload": "tree 29e6487695817204c443bb025c120acba54b1341\nparent 00204c2f52ec0280bda17de347c79f88e9c6b479\nauthor alecmocatta <alec@mocatta.net> 1532389654 +0100\ncommitter alecmocatta <alec@mocatta.net> 1532392243 +0100\n\nPass multiple linker arguments rather than concatenate with commas; -l library -> -llibrary to work with apple's ld\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22d0ab0bc3627e94e953a2be981295440b52289e", "html_url": "https://github.com/rust-lang/rust/commit/22d0ab0bc3627e94e953a2be981295440b52289e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22d0ab0bc3627e94e953a2be981295440b52289e/comments", "author": {"login": "alecmocatta", "id": 1136246, "node_id": "MDQ6VXNlcjExMzYyNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1136246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecmocatta", "html_url": "https://github.com/alecmocatta", "followers_url": "https://api.github.com/users/alecmocatta/followers", "following_url": "https://api.github.com/users/alecmocatta/following{/other_user}", "gists_url": "https://api.github.com/users/alecmocatta/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecmocatta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecmocatta/subscriptions", "organizations_url": "https://api.github.com/users/alecmocatta/orgs", "repos_url": "https://api.github.com/users/alecmocatta/repos", "events_url": "https://api.github.com/users/alecmocatta/events{/privacy}", "received_events_url": "https://api.github.com/users/alecmocatta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alecmocatta", "id": 1136246, "node_id": "MDQ6VXNlcjExMzYyNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1136246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alecmocatta", "html_url": "https://github.com/alecmocatta", "followers_url": "https://api.github.com/users/alecmocatta/followers", "following_url": "https://api.github.com/users/alecmocatta/following{/other_user}", "gists_url": "https://api.github.com/users/alecmocatta/gists{/gist_id}", "starred_url": "https://api.github.com/users/alecmocatta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alecmocatta/subscriptions", "organizations_url": "https://api.github.com/users/alecmocatta/orgs", "repos_url": "https://api.github.com/users/alecmocatta/repos", "events_url": "https://api.github.com/users/alecmocatta/events{/privacy}", "received_events_url": "https://api.github.com/users/alecmocatta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00204c2f52ec0280bda17de347c79f88e9c6b479", "url": "https://api.github.com/repos/rust-lang/rust/commits/00204c2f52ec0280bda17de347c79f88e9c6b479", "html_url": "https://github.com/rust-lang/rust/commit/00204c2f52ec0280bda17de347c79f88e9c6b479"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "4a5de6426b2d67108554e4a6dc3d9741f9aa14ee", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/22d0ab0bc3627e94e953a2be981295440b52289e/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22d0ab0bc3627e94e953a2be981295440b52289e/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=22d0ab0bc3627e94e953a2be981295440b52289e", "patch": "@@ -218,24 +218,26 @@ impl<'a> GccLinker<'a> {\n }\n \n impl<'a> Linker for GccLinker<'a> {\n-    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(\"-l\").arg(lib); }\n-    fn link_staticlib(&mut self, lib: &str) { self.hint_static(); self.cmd.arg(\"-l\").arg(lib); }\n+    fn link_dylib(&mut self, lib: &str) { self.hint_dynamic(); self.cmd.arg(format!(\"-l{}\",lib)); }\n+    fn link_staticlib(&mut self, lib: &str) {\n+        self.hint_static(); self.cmd.arg(format!(\"-l{}\",lib));\n+    }\n     fn link_rlib(&mut self, lib: &Path) { self.hint_static(); self.cmd.arg(lib); }\n     fn include_path(&mut self, path: &Path) { self.cmd.arg(\"-L\").arg(path); }\n     fn framework_path(&mut self, path: &Path) { self.cmd.arg(\"-F\").arg(path); }\n     fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n     fn no_position_independent_executable(&mut self) { self.cmd.arg(\"-no-pie\"); }\n-    fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n-    fn partial_relro(&mut self) { self.linker_arg(\"-z,relro\"); }\n-    fn no_relro(&mut self) { self.linker_arg(\"-z,norelro\"); }\n+    fn full_relro(&mut self) { self.linker_arg(\"-zrelro\"); self.linker_arg(\"-znow\"); }\n+    fn partial_relro(&mut self) { self.linker_arg(\"-zrelro\"); }\n+    fn no_relro(&mut self) { self.linker_arg(\"-znorelro\"); }\n     fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n     fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n         self.hint_dynamic();\n-        self.cmd.arg(\"-l\").arg(lib);\n+        self.cmd.arg(format!(\"-l{}\",lib));\n     }\n \n     fn link_framework(&mut self, framework: &str) {\n@@ -253,23 +255,22 @@ impl<'a> Linker for GccLinker<'a> {\n         self.hint_static();\n         let target = &self.sess.target.target;\n         if !target.options.is_like_osx {\n-            self.linker_arg(\"--whole-archive\").cmd.arg(\"-l\").arg(lib);\n+            self.linker_arg(\"--whole-archive\").cmd.arg(format!(\"-l{}\",lib));\n             self.linker_arg(\"--no-whole-archive\");\n         } else {\n             // -force_load is the macOS equivalent of --whole-archive, but it\n             // involves passing the full path to the library to link.\n-            let mut v = OsString::from(\"-force_load,\");\n-            v.push(&archive::find_library(lib, search_path, &self.sess));\n-            self.linker_arg(&v);\n+            self.linker_arg(\"-force_load\");\n+            let lib = archive::find_library(lib, search_path, &self.sess);\n+            self.linker_arg(&lib);\n         }\n     }\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n         self.hint_static();\n         if self.sess.target.target.options.is_like_osx {\n-            let mut v = OsString::from(\"-force_load,\");\n-            v.push(lib);\n-            self.linker_arg(&v);\n+            self.linker_arg(\"-force_load\");\n+            self.linker_arg(&lib);\n         } else {\n             self.linker_arg(\"--whole-archive\").cmd.arg(lib);\n             self.linker_arg(\"--no-whole-archive\");\n@@ -294,8 +295,7 @@ impl<'a> Linker for GccLinker<'a> {\n         if self.sess.target.target.options.is_like_osx {\n             self.linker_arg(\"-dead_strip\");\n         } else if self.sess.target.target.options.is_like_solaris {\n-            self.linker_arg(\"-z\");\n-            self.linker_arg(\"ignore\");\n+            self.linker_arg(\"-zignore\");\n \n         // If we're building a dylib, we don't use --gc-sections because LLVM\n         // has already done the best it can do, and we also don't want to\n@@ -369,7 +369,8 @@ impl<'a> Linker for GccLinker<'a> {\n             // the right `-Wl,-install_name` with an `@rpath` in it.\n             if self.sess.opts.cg.rpath ||\n                self.sess.opts.debugging_opts.osx_rpath_install_name {\n-                let mut v = OsString::from(\"-install_name,@rpath/\");\n+                self.linker_arg(\"-install_name\");\n+                let mut v = OsString::from(\"@rpath/\");\n                 v.push(out_filename.file_name().unwrap());\n                 self.linker_arg(&v);\n             }\n@@ -448,7 +449,7 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn subsystem(&mut self, subsystem: &str) {\n-        self.linker_arg(&format!(\"--subsystem,{}\", subsystem));\n+        self.linker_arg(&format!(\"--subsystem={}\", subsystem));\n     }\n \n     fn finalize(&mut self) -> Command {"}]}