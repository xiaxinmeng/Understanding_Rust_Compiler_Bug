{"sha": "786963d33d4b267713dd6a61ed2bfa7dab90919b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Njk2M2QzM2Q0YjI2NzcxM2RkNmE2MWVkMmJmYTdkYWI5MDkxOWI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-09-02T00:25:06Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-09-02T00:41:10Z"}, "message": "Add a constraint in trans\n\nExperimenting with adding typestate constraints in the compiler.\nAdded a constraint to GEP_tag that says the variant index is in\nbounds. Added necessary checks.", "tree": {"sha": "6d58bfa94b75bdc7c7b5c6e0dbd871a8c0038378", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d58bfa94b75bdc7c7b5c6e0dbd871a8c0038378"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/786963d33d4b267713dd6a61ed2bfa7dab90919b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/786963d33d4b267713dd6a61ed2bfa7dab90919b", "html_url": "https://github.com/rust-lang/rust/commit/786963d33d4b267713dd6a61ed2bfa7dab90919b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/786963d33d4b267713dd6a61ed2bfa7dab90919b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60d0a9227b4c1d7754f17bc26ef5c46ca4b36231", "url": "https://api.github.com/repos/rust-lang/rust/commits/60d0a9227b4c1d7754f17bc26ef5c46ca4b36231", "html_url": "https://github.com/rust-lang/rust/commit/60d0a9227b4c1d7754f17bc26ef5c46ca4b36231"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "ef2695fb2ab9461a17fcf579e1cdd5565a7a1e07", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/786963d33d4b267713dd6a61ed2bfa7dab90919b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786963d33d4b267713dd6a61ed2bfa7dab90919b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=786963d33d4b267713dd6a61ed2bfa7dab90919b", "patch": "@@ -777,22 +777,25 @@ fn GEP_tup_like(cx: &@block_ctxt, t: ty::t, base: ValueRef, ixs: &[int]) ->\n // meaningless, as it will be cast away.\n fn GEP_tag(cx: @block_ctxt, llblobptr: ValueRef, tag_id: &ast::def_id,\n            variant_id: &ast::def_id, ty_substs: &[ty::t], ix: uint)\n-    -> result {\n+    : valid_variant_index(ix, cx, tag_id, variant_id) -> result {\n     let variant = ty::tag_variant_with_id(bcx_tcx(cx), tag_id, variant_id);\n     // Synthesize a tuple type so that GEP_tup_like() can work its magic.\n     // Separately, store the type of the element we're interested in.\n \n     let arg_tys = variant.args;\n-    let elem_ty = ty::mk_nil(bcx_tcx(cx)); // typestate infelicity\n \n-    let i = 0u;\n     let true_arg_tys: [ty::t] = [];\n     for aty: ty::t in arg_tys {\n         let arg_ty = ty::substitute_type_params(bcx_tcx(cx), ty_substs, aty);\n         true_arg_tys += [arg_ty];\n-        if i == ix { elem_ty = arg_ty; }\n-        i += 1u;\n     }\n+\n+    // We know that ix < len(variant.args) -- so\n+    // it's safe to do this. (Would be nice to have\n+    // typestate guarantee that a dynamic bounds check\n+    // error can't happen here, but that's in the future.)\n+    let elem_ty = true_arg_tys[ix];\n+\n     let tup_ty = ty::mk_tup(bcx_tcx(cx), true_arg_tys);\n     // Cast the blob pointer to the appropriate type, if we need to (i.e. if\n     // the blob pointer isn't dynamically sized).\n@@ -1670,8 +1673,10 @@ fn iter_structural_ty(cx: @block_ctxt, av: ValueRef, t: ty::t,\n         alt ty::struct(ccx.tcx, fn_ty) {\n           ty::ty_fn(_, args, _, _, _) {\n             let j = 0u;\n+            let v_id = variant.id;\n             for a: ty::arg in args {\n-                let rslt = GEP_tag(cx, a_tup, tid, variant.id, tps, j);\n+                check valid_variant_index(j, cx, tid, v_id);\n+                let rslt = GEP_tag(cx, a_tup, tid, v_id, tps, j);\n                 let llfldp_a = rslt.val;\n                 cx = rslt.bcx;\n                 let ty_subst = ty::substitute_type_params(ccx.tcx, tps, a.ty);\n@@ -5352,10 +5357,12 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n             GEP(bcx, lltagptr, [C_int(0), C_int(1)])\n         };\n     i = 0u;\n+    let t_id = ast_util::local_def(tag_id);\n+    let v_id = ast_util::local_def(variant.node.id);\n     for va: ast::variant_arg in variant.node.args {\n+        check valid_variant_index(i, bcx, t_id, v_id);\n         let rslt =\n-            GEP_tag(bcx, llblobptr, ast_util::local_def(tag_id),\n-                    ast_util::local_def(variant.node.id), ty_param_substs, i);\n+            GEP_tag(bcx, llblobptr, t_id, v_id, ty_param_substs, i);\n         bcx = rslt.bcx;\n         let lldestptr = rslt.val;\n         // If this argument to this function is a tag, it'll have come in to"}, {"sha": "9157ea579ad5a7fba1288f8aadc8460c3ef8df6d", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786963d33d4b267713dd6a61ed2bfa7dab90919b/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786963d33d4b267713dd6a61ed2bfa7dab90919b/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=786963d33d4b267713dd6a61ed2bfa7dab90919b", "patch": "@@ -216,9 +216,12 @@ fn extract_variant_args(bcx: @block_ctxt, pat_id: ast::node_id,\n         blobptr = GEP(bcx, tagptr, [C_int(0), C_int(1)]);\n     }\n     let i = 0u;\n+    let vdefs_tg = vdefs.tg;\n+    let vdefs_var = vdefs.var;\n     while i < size {\n+        check valid_variant_index(i, bcx, vdefs_tg, vdefs_var);\n         let r =\n-            trans::GEP_tag(bcx, blobptr, vdefs.tg, vdefs.var, ty_param_substs,\n+            trans::GEP_tag(bcx, blobptr, vdefs_tg, vdefs_var, ty_param_substs,\n                            i);\n         bcx = r.bcx;\n         args += [r.val];"}, {"sha": "816bd6550993e063da38672124d2ab21bf68f00d", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/786963d33d4b267713dd6a61ed2bfa7dab90919b/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786963d33d4b267713dd6a61ed2bfa7dab90919b/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=786963d33d4b267713dd6a61ed2bfa7dab90919b", "patch": "@@ -881,6 +881,18 @@ fn C_shape(ccx: &@crate_ctxt, bytes: &[u8]) -> ValueRef {\n     ret llvm::LLVMConstPointerCast(llglobal, T_ptr(T_i8()));\n }\n \n+\n+pure fn valid_variant_index(ix:uint, cx:@block_ctxt, tag_id: &ast::def_id,\n+                            variant_id: &ast::def_id) -> bool {\n+    // Handwaving: it's ok to pretend this code is referentially\n+    // transparent, because the relevant parts of the type context don't\n+    // change. (We're not adding new variants during trans.)\n+    unchecked {\n+      let variant = ty::tag_variant_with_id(bcx_tcx(cx), tag_id, variant_id);\n+      ix < vec::len(variant.args)\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}