{"sha": "84b056d5970b3f91073de0414a03d613ecc1009f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YjA1NmQ1OTcwYjNmOTEwNzNkZTA0MTRhMDNkNjEzZWNjMTAwOWY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2021-01-16T23:25:18Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2021-01-16T23:34:54Z"}, "message": "prevent potential bug in `encode_with_shorthand`.", "tree": {"sha": "a01820e17050db3ed5417e8691fcba837748135d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a01820e17050db3ed5417e8691fcba837748135d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84b056d5970b3f91073de0414a03d613ecc1009f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84b056d5970b3f91073de0414a03d613ecc1009f", "html_url": "https://github.com/rust-lang/rust/commit/84b056d5970b3f91073de0414a03d613ecc1009f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84b056d5970b3f91073de0414a03d613ecc1009f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef589490a709984d3be80c9b59a1a10a4dd05e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef589490a709984d3be80c9b59a1a10a4dd05e3c", "html_url": "https://github.com/rust-lang/rust/commit/ef589490a709984d3be80c9b59a1a10a4dd05e3c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "7ad80e748aadedb6622efa56174e5c9d947250d5", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84b056d5970b3f91073de0414a03d613ecc1009f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84b056d5970b3f91073de0414a03d613ecc1009f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=84b056d5970b3f91073de0414a03d613ecc1009f", "patch": "@@ -18,7 +18,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::Span;\n-use std::convert::{TryFrom, TryInto};\n use std::hash::Hash;\n use std::intrinsics;\n use std::marker::DiscriminantKind;\n@@ -95,7 +94,8 @@ where\n     E: TyEncoder<'tcx>,\n     M: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<T, usize>,\n     T: EncodableWithShorthand<'tcx, E>,\n-    <T::Variant as DiscriminantKind>::Discriminant: Ord + TryFrom<usize>,\n+    // The discriminant and shorthand must have the same size.\n+    T::Variant: DiscriminantKind<Discriminant = isize>,\n {\n     let existing_shorthand = cache(encoder).get(value).copied();\n     if let Some(shorthand) = existing_shorthand {\n@@ -111,7 +111,7 @@ where\n     // The shorthand encoding uses the same usize as the\n     // discriminant, with an offset so they can't conflict.\n     let discriminant = intrinsics::discriminant_value(variant);\n-    assert!(discriminant < SHORTHAND_OFFSET.try_into().ok().unwrap());\n+    assert!(SHORTHAND_OFFSET > discriminant as usize);\n \n     let shorthand = start + SHORTHAND_OFFSET;\n "}]}