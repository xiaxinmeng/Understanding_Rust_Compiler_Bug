{"sha": "659bfe5d572da42746814df60d857db7a93ecf27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OWJmZTVkNTcyZGE0Mjc0NjgxNGRmNjBkODU3ZGI3YTkzZWNmMjc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-24T15:16:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-24T15:16:38Z"}, "message": "Rollup merge of #43428 - waywardmonkeys:doc-fixes, r=estebank\n\nFix some doc/comment typos.", "tree": {"sha": "8880774bc8cae0dad46947327268f8864ef79b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8880774bc8cae0dad46947327268f8864ef79b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659bfe5d572da42746814df60d857db7a93ecf27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659bfe5d572da42746814df60d857db7a93ecf27", "html_url": "https://github.com/rust-lang/rust/commit/659bfe5d572da42746814df60d857db7a93ecf27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659bfe5d572da42746814df60d857db7a93ecf27/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd2331c2692f7f15d432e8320bbfaf9be3de7d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2331c2692f7f15d432e8320bbfaf9be3de7d7c", "html_url": "https://github.com/rust-lang/rust/commit/fd2331c2692f7f15d432e8320bbfaf9be3de7d7c"}, {"sha": "539df8121bf799526bcb36a1613ac3fd3e255a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/539df8121bf799526bcb36a1613ac3fd3e255a61", "html_url": "https://github.com/rust-lang/rust/commit/539df8121bf799526bcb36a1613ac3fd3e255a61"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "95b27751a6aaf973976cb4b2f69ebf9a03f0b4fd", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -847,7 +847,7 @@ macro_rules! generate_pattern_iterators {\n         internal:\n             $internal_iterator:ident yielding ($iterty:ty);\n \n-        // Kind of delgation - either single ended or double ended\n+        // Kind of delegation - either single ended or double ended\n         delegate $($t:tt)*\n     } => {\n         $(#[$forward_iterator_attribute])*"}, {"sha": "c4ff95b1d6a49dffc151b9a8c516e6218ab7f03b", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -83,7 +83,7 @@ pub enum SearchStep {\n     /// Note that there might be more than one `Reject` between two `Match`es,\n     /// there is no requirement for them to be combined into one.\n     Reject(usize, usize),\n-    /// Expresses that every byte of the haystack has been visted, ending\n+    /// Expresses that every byte of the haystack has been visited, ending\n     /// the iteration.\n     Done\n }\n@@ -101,7 +101,7 @@ pub enum SearchStep {\n /// the haystack. This enables consumers of this trait to\n /// slice the haystack without additional runtime checks.\n pub unsafe trait Searcher<'a> {\n-    /// Getter for the underlaying string to be searched in\n+    /// Getter for the underlying string to be searched in\n     ///\n     /// Will always return the same `&str`\n     fn haystack(&self) -> &'a str;\n@@ -1153,7 +1153,7 @@ impl TwoWaySearcher {\n     // The maximal suffix is a possible critical factorization (u', v') of `arr`.\n     //\n     // Returns `i` where `i` is the starting index of v', from the back;\n-    // returns immedately when a period of `known_period` is reached.\n+    // returns immediately when a period of `known_period` is reached.\n     //\n     // `order_greater` determines if lexical order is `<` or `>`. Both\n     // orders must be computed -- the ordering with the largest `i` gives"}, {"sha": "46e55102966520d5ddf5afc161df1a619e7aa5dd", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -88,15 +88,15 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     // vary across impls\n     let target_substs = match target_node {\n         specialization_graph::Node::Impl(target_impl) => {\n-            // no need to translate if we're targetting the impl we started with\n+            // no need to translate if we're targeting the impl we started with\n             if source_impl == target_impl {\n                 return source_substs;\n             }\n \n             fulfill_implication(infcx, param_env, source_trait_ref, target_impl)\n                 .unwrap_or_else(|_| {\n                     bug!(\"When translating substitutions for specialization, the expected \\\n-                          specializaiton failed to hold\")\n+                          specialization failed to hold\")\n                 })\n         }\n         specialization_graph::Node::Trait(..) => source_trait_ref.substs,\n@@ -107,7 +107,7 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n }\n \n /// Given a selected impl described by `impl_data`, returns the\n-/// definition and substitions for the method with the name `name`\n+/// definition and substitutions for the method with the name `name`\n /// the kind `kind`, and trait method substitutions `substs`, in\n /// that impl, a less specialized impl, or the trait default,\n /// whichever applies.\n@@ -305,7 +305,7 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n     // The coherence checking implementation seems to rely on impls being\n     // iterated over (roughly) in definition order, so we are sorting by\n     // negated CrateNum (so remote definitions are visited first) and then\n-    // by a flattend version of the DefIndex.\n+    // by a flattened version of the DefIndex.\n     trait_impls.sort_unstable_by_key(|def_id| {\n         (-(def_id.krate.as_u32() as i64),\n          def_id.index.address_space().index(),"}, {"sha": "6e70944ce642f09ba23e8e76964cdeada774883d", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -117,11 +117,11 @@ enum NodeState {\n     /// non-ambiguous result.\n     Pending,\n \n-    /// This obligation was selected successfuly, but may or\n+    /// This obligation was selected successfully, but may or\n     /// may not have subobligations.\n     Success,\n \n-    /// This obligation was selected sucessfully, but it has\n+    /// This obligation was selected successfully, but it has\n     /// a pending subobligation.\n     Waiting,\n "}, {"sha": "648c376de1cdb583dcdbf909a06e5a0fb62f08b2", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n     /// NOTE: lvalues behind references *do not* get a move path, which is\n     /// problematic for borrowck.\n     ///\n-    /// Maybe we should have seperate \"borrowck\" and \"moveck\" modes.\n+    /// Maybe we should have separate \"borrowck\" and \"moveck\" modes.\n     fn move_path_for(&mut self, lval: &Lvalue<'tcx>)\n                      -> Result<MovePathIndex, MovePathError>\n     {"}, {"sha": "904cfb2acd74130da68b3043ce97aad838de2d9e", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -251,7 +251,7 @@ pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                                                                 exported_symbols,\n                                                                 trans_items);\n \n-    debug_dump(tcx, \"INITIAL PARTITONING:\", initial_partitioning.codegen_units.iter());\n+    debug_dump(tcx, \"INITIAL PARTITIONING:\", initial_partitioning.codegen_units.iter());\n \n     // If the partitioning should produce a fixed count of codegen units, merge\n     // until that count is reached.\n@@ -261,7 +261,7 @@ pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n         debug_dump(tcx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n     }\n \n-    // In the next step, we use the inlining map to determine which addtional\n+    // In the next step, we use the inlining map to determine which additional\n     // translation items have to go into each codegen unit. These additional\n     // translation items can be drop-glue, functions from external crates, and\n     // local functions the definition of which is marked with #[inline]."}, {"sha": "6d67bbc06cc1b1a84bc8d3a0a478c1d5caacef1a", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -729,15 +729,15 @@ pub trait SpecializationError {\n     /// `S` is the encoder/decoder state type,\n     /// `T` is the type being encoded/decoded, and\n     /// the arguments are the names of the trait\n-    /// and method that should've been overriden.\n+    /// and method that should've been overridden.\n     fn not_found<S, T: ?Sized>(trait_name: &'static str,\n                                method_name: &'static str) -> Self;\n }\n \n impl<E> SpecializationError for E {\n     default fn not_found<S, T: ?Sized>(trait_name: &'static str,\n                                        method_name: &'static str) -> E {\n-        panic!(\"missing specializaiton: `<{} as {}<{}>>::{}` not overriden\",\n+        panic!(\"missing specialization: `<{} as {}<{}>>::{}` not overridden\",\n                unsafe { intrinsics::type_name::<S>() },\n                trait_name,\n                unsafe { intrinsics::type_name::<T>() },"}, {"sha": "12241b3f88187f17ba2c8653057c21faac58013e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -203,7 +203,7 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n // so we round that up to 128.\n //\n // At a load factor of \u03b1, the odds of finding the target bucket after exactly n\n-// unsuccesful probes[1] are\n+// unsuccessful probes[1] are\n //\n // Pr_\u03b1{displacement = n} =\n // (1 - \u03b1) / \u03b1 * \u2211_{k\u22651} e^(-k\u03b1) * (k\u03b1)^(k+n) / (k + n)! * (1 - k\u03b1 / (k + n + 1))"}, {"sha": "619d079542142100b5d1dc6ab39ea99865c8d1ea", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -476,7 +476,7 @@ impl<'a> Hash for PrefixComponent<'a> {\n \n /// A single component of a path.\n ///\n-/// A `Component` roughtly corresponds to a substring between path separators\n+/// A `Component` roughly corresponds to a substring between path separators\n /// (`/` or `\\`).\n ///\n /// This `enum` is created by iterating over [`Components`], which in turn is\n@@ -571,7 +571,7 @@ impl<'a> AsRef<OsStr> for Component<'a> {\n     }\n }\n \n-/// An interator over the [`Component`]s of a [`Path`].\n+/// An iterator over the [`Component`]s of a [`Path`].\n ///\n /// This `struct` is created by the [`components`] method on [`Path`].\n /// See its documentation for more.\n@@ -2019,7 +2019,7 @@ impl Path {\n     /// * Repeated separators are ignored, so `a/b` and `a//b` both have\n     ///   `a` and `b` as components.\n     ///\n-    /// * Occurences of `.` are normalized away, except if they are at the\n+    /// * Occurrences of `.` are normalized away, except if they are at the\n     ///   beginning of the path. For example, `a/./b`, `a/b/`, `a/b/.` and\n     ///   `a/b` all have `a` and `b` as components, but `./a/b` starts with\n     ///   an additional [`CurDir`] component."}, {"sha": "c35676f2709ccf2831838e3791c21d34d5ffe296", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -190,7 +190,7 @@ pub use self::local::{LocalKey, LocalKeyState, AccessError};\n /// - [`name`]: allows to give a name to the thread which is currently\n ///   only used in `panic` messages.\n /// - [`stack_size`]: specifies the desired stack size. Note that this can\n-///   be overriden by the OS.\n+///   be overridden by the OS.\n ///\n /// If the [`stack_size`] field is not specified, the stack size\n /// will be the `RUST_MIN_STACK` environment variable. If it is\n@@ -529,7 +529,7 @@ pub fn current() -> Thread {\n /// Thus the pattern of `yield`ing after a failed poll is rather common when\n /// implementing low-level shared resources or synchronization primitives.\n ///\n-/// However programmers will usualy prefer to use, [`channel`]s, [`Condvar`]s,\n+/// However programmers will usually prefer to use, [`channel`]s, [`Condvar`]s,\n /// [`Mutex`]es or [`join`] for their synchronisation routines, as they avoid\n /// thinking about thread schedulling.\n ///\n@@ -770,7 +770,7 @@ pub fn park_timeout_ms(ms: u32) {\n /// preemption or platform differences that may not cause the maximum\n /// amount of time waited to be precisely `dur` long.\n ///\n-/// See the [park dococumentation][park] for more details.\n+/// See the [park documentation][park] for more details.\n ///\n /// # Platform behavior\n ///\n@@ -891,7 +891,7 @@ struct Inner {\n /// The [`thread::current`] function is available even for threads not spawned\n /// by the APIs of this module.\n ///\n-/// There is usualy no need to create a `Thread` struct yourself, one\n+/// There is usually no need to create a `Thread` struct yourself, one\n /// should instead use a function like `spawn` to create new threads, see the\n /// docs of [`Builder`] and [`spawn`] for more details.\n ///"}, {"sha": "820adc60999a45ff84d77b34920ac3a6ae9c0eb5", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -312,7 +312,7 @@ impl MultiSpan {\n         &self.primary_spans\n     }\n \n-    /// Replaces all occurances of one Span with another. Used to move Spans in areas that don't\n+    /// Replaces all occurrences of one Span with another. Used to move Spans in areas that don't\n     /// display well (like std macros). Returns true if replacements occurred.\n     pub fn replace(&mut self, before: Span, after: Span) -> bool {\n         let mut replacements_occurred = false;"}, {"sha": "6c3bc45d34aa49da123af35f8f69dc70b3fc2ba3", "filename": "src/test/parse-fail/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Ftest%2Fparse-fail%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Ftest%2Fparse-fail%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fdefault.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: -Z parse-only\n \n-// Test successful and unsucessful parsing of the `default` contextual keyword\n+// Test successful and unsuccessful parsing of the `default` contextual keyword\n \n trait Foo {\n     fn foo<T: Default>() -> T;"}, {"sha": "1236acf35112181ef840f2f65ee4199a19ec3b4d", "filename": "src/test/run-pass/backtrace-debuginfo-aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo-aux.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -16,7 +16,7 @@ pub fn callback<F>(f: F) where F: FnOnce((&'static str, u32)) {\n }\n \n // LLVM does not yet output the required debug info to support showing inlined\n-// function calls in backtraces when targetting MSVC, so disable inlining in\n+// function calls in backtraces when targeting MSVC, so disable inlining in\n // this case.\n #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n #[cfg_attr(target_env = \"msvc\", inline(never))]"}, {"sha": "b2ab25c44b82a4ece3c97ef597e11ba44037e5ce", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/659bfe5d572da42746814df60d857db7a93ecf27/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659bfe5d572da42746814df60d857db7a93ecf27/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=659bfe5d572da42746814df60d857db7a93ecf27", "patch": "@@ -10,7 +10,7 @@\n \n // We disable tail merging here because it can't preserve debuginfo and thus\n // potentially breaks the backtraces. Also, subtle changes can decide whether\n-// tail merging suceeds, so the test might work today but fail tomorrow due to a\n+// tail merging succeeds, so the test might work today but fail tomorrow due to a\n // seemingly completely unrelated change.\n // Unfortunately, LLVM has no \"disable\" option for this, so we have to set\n // \"enable\" to 0 instead.\n@@ -88,7 +88,7 @@ fn inner(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n }\n \n // LLVM does not yet output the required debug info to support showing inlined\n-// function calls in backtraces when targetting MSVC, so disable inlining in\n+// function calls in backtraces when targeting MSVC, so disable inlining in\n // this case.\n #[cfg_attr(not(target_env = \"msvc\"), inline(always))]\n #[cfg_attr(target_env = \"msvc\", inline(never))]"}]}