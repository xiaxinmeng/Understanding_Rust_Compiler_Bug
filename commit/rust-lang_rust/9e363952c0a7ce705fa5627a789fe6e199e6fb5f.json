{"sha": "9e363952c0a7ce705fa5627a789fe6e199e6fb5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMzYzOTUyYzBhN2NlNzA1ZmE1NjI3YTc4OWZlNmUxOTllNmZiNWY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-19T03:45:48Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-19T03:45:48Z"}, "message": "Dump local values when they are read.", "tree": {"sha": "c0db1728e86a9d4f6a7aa4a7e0ce4b5a239cd504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0db1728e86a9d4f6a7aa4a7e0ce4b5a239cd504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e363952c0a7ce705fa5627a789fe6e199e6fb5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e363952c0a7ce705fa5627a789fe6e199e6fb5f", "html_url": "https://github.com/rust-lang/rust/commit/9e363952c0a7ce705fa5627a789fe6e199e6fb5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e363952c0a7ce705fa5627a789fe6e199e6fb5f/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c938553a1049bac96d43135f76189b79a051fbc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c938553a1049bac96d43135f76189b79a051fbc1", "html_url": "https://github.com/rust-lang/rust/commit/c938553a1049bac96d43135f76189b79a051fbc1"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "cc9835fb6e073ea5a1cccd3a05fef35e748bd4bd", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e363952c0a7ce705fa5627a789fe6e199e6fb5f/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e363952c0a7ce705fa5627a789fe6e199e6fb5f/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=9e363952c0a7ce705fa5627a789fe6e199e6fb5f", "patch": "@@ -891,6 +891,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             Projection(ref proj) => return self.eval_lvalue_projection(proj),\n         };\n+\n+        self.dump_local(lvalue);\n+\n         Ok(lvalue)\n     }\n \n@@ -1422,6 +1425,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n+    fn dump_local(&self, lvalue: Lvalue) {\n+        if let Lvalue::Local { frame, local } = lvalue {\n+            if let Some(val) = self.stack[frame].get_local(local) {\n+                match val {\n+                    Value::ByRef(ptr) => {\n+                        trace!(\"frame[{}] {:?}:\", frame, local);\n+                        self.memory.dump(ptr.alloc_id);\n+                    }\n+                    Value::ByVal(a) => {\n+                        trace!(\"frame[{}] {:?}: {:?}\", frame, local, a);\n+                    }\n+                    Value::ByValPair(a, b) => {\n+                        trace!(\"frame[{}] {:?}: ({:?}, {:?})\", frame, local, a, b);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn dump_locals(&self, limit: usize) {\n         for (frame_index, frame) in self.stack.iter().enumerate() {\n             trace!(\"frame[{}]:\", frame_index);"}]}