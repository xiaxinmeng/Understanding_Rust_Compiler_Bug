{"sha": "728496929292c692aaad005bdbf4376bb1d78c4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyODQ5NjkyOTI5MmM2OTJhYWFkMDA1YmRiZjQzNzZiYjFkNzhjNGY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-22T00:22:45Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-22T19:25:08Z"}, "message": "Eliminate many match checks in rustc", "tree": {"sha": "07e7440ab435a3dd95509947f913774de9fa6e3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e7440ab435a3dd95509947f913774de9fa6e3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728496929292c692aaad005bdbf4376bb1d78c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728496929292c692aaad005bdbf4376bb1d78c4f", "html_url": "https://github.com/rust-lang/rust/commit/728496929292c692aaad005bdbf4376bb1d78c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728496929292c692aaad005bdbf4376bb1d78c4f/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e620ac030eddc9a12ada8a209e8ffeda6e10427", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e620ac030eddc9a12ada8a209e8ffeda6e10427", "html_url": "https://github.com/rust-lang/rust/commit/0e620ac030eddc9a12ada8a209e8ffeda6e10427"}], "stats": {"total": 149, "additions": 61, "deletions": 88}, "files": [{"sha": "9560faa0f0ab3c37138455b1b543059163f9561c", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -68,19 +68,15 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           // If the fuzzer moves a block-ending-in-semicolon into callee\n           // position, the pretty-printer can't preserve this even by\n           // parenthesizing!!  See email to marijn.\n-          ast::expr_if(_, _, _) => { false }\n-          ast::expr_block(_) => { false }\n-          ast::expr_match(_, _, _) => { false }\n-          ast::expr_while(_, _) => { false }\n+          ast::expr_if(*) | ast::expr_block(*)\n+          | ast::expr_match(*) | ast::expr_while(*)  => { false }\n \n           // https://github.com/mozilla/rust/issues/929\n-          ast::expr_cast(_, _) => { false }\n-          ast::expr_assert(_) => { false }\n-          ast::expr_binary(_, _, _) => { false }\n-          ast::expr_assign(_, _) => { false }\n-          ast::expr_assign_op(_, _, _) => { false }\n+          ast::expr_cast(*) | ast::expr_assert(*) |\n+          ast::expr_binary(*) | ast::expr_assign(*) |\n+          ast::expr_assign_op(*) => { false }\n \n-          ast::expr_fail(option::none) => { false }\n+          ast::expr_fail(option::none) |\n           ast::expr_ret(option::none) => { false }\n \n           // https://github.com/mozilla/rust/issues/953"}, {"sha": "4082f223e4aaf2ba9918e123012b4947761873e8", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -6,8 +6,8 @@ import ast_util::operator_prec;\n \n fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     match e.node {\n-      ast::expr_if(_, _, _) | ast::expr_match(_, _, _) | ast::expr_block(_)\n-      | ast::expr_while(_, _) | ast::expr_loop(_, _)\n+      ast::expr_if(*) | ast::expr_match(*) | ast::expr_block(_)\n+      | ast::expr_while(*) | ast::expr_loop(*)\n       | ast::expr_call(_, _, true) => false,\n       _ => true\n     }"}, {"sha": "dd0648666cc7aaecf7d968e03f63bed0a8d4ba9a", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -84,7 +84,7 @@ mod write {\n         if opts.save_temps {\n             match opts.output_type {\n               output_type_bitcode => {\n-                if opts.optimize != 0u {\n+                if opts.optimize != session::No {\n                     let filename = mk_intermediate_name(output, ~\"no-opt.bc\");\n                     str::as_c_str(filename, |buf| {\n                         llvm::LLVMWriteBitcodeToFile(llmod, buf)\n@@ -107,7 +107,7 @@ mod write {\n         // Also: Should we expose and use the pass lists used by the opt\n         // tool?\n \n-        if opts.optimize != 0u {\n+        if opts.optimize != session::No {\n             let fpm = mk_pass_manager();\n             llvm::LLVMAddTargetData(td.lltd, fpm.llpm);\n \n@@ -118,8 +118,8 @@ mod write {\n             llvm::LLVMPassManagerBuilderDispose(FPMB);\n \n             llvm::LLVMRunPassManager(fpm.llpm, llmod);\n-            let mut threshold = 225u;\n-            if opts.optimize == 3u { threshold = 275u; }\n+            let mut threshold = 225;\n+            if opts.optimize == session::Aggressive { threshold = 275; }\n \n             let MPMB = llvm::LLVMPassManagerBuilderCreate();\n             llvm::LLVMPassManagerBuilderSetOptLevel(MPMB,\n@@ -146,11 +146,11 @@ mod write {\n             let LLVMOptDefault    = 2 as c_int; // -O2, -Os\n             let LLVMOptAggressive = 3 as c_int; // -O3\n \n-            let mut CodeGenOptLevel = match check opts.optimize {\n-              0u => LLVMOptNone,\n-              1u => LLVMOptLess,\n-              2u => LLVMOptDefault,\n-              3u => LLVMOptAggressive\n+            let mut CodeGenOptLevel = match opts.optimize {\n+              session::No => LLVMOptNone,\n+              session::Less => LLVMOptLess,\n+              session::Default => LLVMOptDefault,\n+              session::Aggressive => LLVMOptAggressive\n             };\n \n             let mut FileType;"}, {"sha": "106cce91ccbfccb35c78d63e8b32221d03793dbe", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n import metadata::{creader, cstore, filesearch};\n-import session::{session, session_};\n+import session::{session, session_, OptLevel, No, Less, Default, Aggressive};\n import syntax::parse;\n import syntax::{ast, codemap};\n import syntax::attr;\n@@ -488,24 +488,24 @@ fn build_session_options(matches: getopts::matches,\n       link::output_type_llvm_assembly | link::output_type_assembly => (),\n       _ => debugging_opts |= session::no_asm_comments\n     }\n-    let opt_level: uint =\n+    let opt_level =\n         if opt_present(matches, ~\"O\") {\n             if opt_present(matches, ~\"opt-level\") {\n                 early_error(demitter, ~\"-O and --opt-level both provided\");\n             }\n-            2u\n+            Default\n         } else if opt_present(matches, ~\"opt-level\") {\n             match getopts::opt_str(matches, ~\"opt-level\") {\n-              ~\"0\" => 0u,\n-              ~\"1\" => 1u,\n-              ~\"2\" => 2u,\n-              ~\"3\" => 3u,\n+              ~\"0\" => No,\n+              ~\"1\" => Less,\n+              ~\"2\" => Default,\n+              ~\"3\" => Aggressive,\n               _ => {\n                 early_error(demitter, ~\"optimization level needs \" +\n                             ~\"to be between 0-3\")\n               }\n             }\n-        } else { 0u };\n+        } else { No };\n     let target =\n         match target_opt {\n             none => host_triple(),"}, {"sha": "5115fb4234ac98cd3b4a7fda824f5e4439335044", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -70,12 +70,19 @@ fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ]\n }\n \n+enum OptLevel {\n+    No, // -O0\n+    Less, // -O1\n+    Default, // -O2\n+    Aggressive // -O3\n+}\n+\n type options =\n     // The crate config requested for the session, which may be combined\n     // with additional crate configurations during the compile process\n     {crate_type: crate_type,\n      static: bool,\n-     optimize: uint,\n+     optimize: OptLevel,\n      debuginfo: bool,\n      extra_debuginfo: bool,\n      lint_opts: ~[(lint::lint, lint::level)],\n@@ -179,6 +186,11 @@ impl session {\n     fn debugging_opt(opt: uint) -> bool {\n         (self.opts.debugging_opts & opt) != 0u\n     }\n+    // This exists to help with refactoring to eliminate impossible\n+    // cases later on\n+    fn impossible_case(sp: span, msg: ~str) -> ! {\n+        self.span_bug(sp, #fmt(\"Impossible case reached: %s\", msg));\n+    }\n     fn ppregions() -> bool { self.debugging_opt(ppregions) }\n     fn time_passes() -> bool { self.debugging_opt(time_passes) }\n     fn count_llvm_insns() -> bool { self.debugging_opt(count_llvm_insns) }\n@@ -199,7 +211,7 @@ fn basic_options() -> @options {\n     @{\n         crate_type: session::lib_crate,\n         static: false,\n-        optimize: 0u,\n+        optimize: No,\n         debuginfo: false,\n         extra_debuginfo: false,\n         lint_opts: ~[],"}, {"sha": "d8c5db4cd753a58d8cf9ae348edc09df1b8369db", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -509,8 +509,8 @@ impl ebml::ebml_deserializer: vtable_deserialization_helpers {\n         -> typeck::vtable_origin {\n         do self.read_enum(~\"vtable_origin\") {\n             do self.read_enum_variant |i| {\n-                match check i {\n-                  0u => {\n+                match i {\n+                  0 => {\n                     typeck::vtable_static(\n                         do self.read_enum_variant_arg(0u) {\n                             self.read_def_id(xcx)\n@@ -523,7 +523,7 @@ impl ebml::ebml_deserializer: vtable_deserialization_helpers {\n                         }\n                     )\n                   }\n-                  1u => {\n+                  1 => {\n                     typeck::vtable_param(\n                         do self.read_enum_variant_arg(0u) {\n                             self.read_uint()\n@@ -533,7 +533,7 @@ impl ebml::ebml_deserializer: vtable_deserialization_helpers {\n                         }\n                     )\n                   }\n-                  2u => {\n+                  2 => {\n                     typeck::vtable_trait(\n                         do self.read_enum_variant_arg(0u) {\n                             self.read_def_id(xcx)\n@@ -543,6 +543,8 @@ impl ebml::ebml_deserializer: vtable_deserialization_helpers {\n                         }\n                     )\n                   }\n+                  // hard to avoid - user input\n+                  _ => fail ~\"bad enum variant\"\n                 }\n             }\n         }"}, {"sha": "e1760a7dde1866950f004cf629604e7a2c0433f6", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -44,7 +44,7 @@ fn collect_freevars(def_map: resolve3::DefMap, blk: ast::blk)\n                     visit::visit_expr(expr, depth + 1, v);\n                 }\n               }\n-              ast::expr_fn_block(_, _, _) => {\n+              ast::expr_fn_block(*) => {\n                 visit::visit_expr(expr, depth + 1, v);\n               }\n               ast::expr_path(path) => {"}, {"sha": "e73cf84d9474b287eabe8982f6657f04fd3c5be6", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -191,7 +191,7 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n             // if this is the last use of the variable, then it will be\n             // a move and not a copy\n             let is_move = {\n-                match check cx.last_use_map.find(fn_id) {\n+                match cx.last_use_map.find(fn_id) {\n                   some(vars) => (*vars).contains(id),\n                   none => false\n                 }\n@@ -218,7 +218,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n \n     // Handle any kind bounds on type parameters\n     do option::iter(cx.tcx.node_type_substs.find(e.id)) |ts| {\n-        let bounds = match check e.node {\n+        let bounds = match e.node {\n           expr_path(_) => {\n             let did = ast_util::def_id_of_def(cx.tcx.def_map.get(e.id));\n             ty::lookup_item_type(cx.tcx, did).bounds"}, {"sha": "9105d81187241c199656f06021203c65c46fd9ec", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -55,23 +55,6 @@ enum lint {\n     non_camel_case_types\n }\n \n-// This is pretty unfortunate. We really want some sort of \"deriving Enum\"\n-// type of thing.\n-fn int_to_lint(i: int) -> lint {\n-    match check i {\n-      0 => ctypes,\n-      1 => unused_imports,\n-      2 => while_true,\n-      3 => path_statement,\n-      4 => implicit_copies,\n-      5 => unrecognized_lint,\n-      6 => non_implicitly_copyable_typarams,\n-      7 => vecs_implicitly_copyable,\n-      8 => deprecated_mode,\n-      9 => non_camel_case_types\n-    }\n-}\n-\n fn level_to_str(lv: level) -> ~str {\n     match lv {\n       allow => ~\"allow\",\n@@ -537,7 +520,7 @@ fn check_fn(tcx: ty::ctxt, fk: visit::fn_kind, decl: ast::fn_decl,\n     }\n \n     let fn_ty = ty::node_id_to_type(tcx, id);\n-    match check ty::get(fn_ty).struct {\n+    match ty::get(fn_ty).struct {\n       ty::ty_fn(fn_ty) => {\n         let mut counter = 0;\n         do vec::iter2(fn_ty.inputs, decl.inputs) |arg_ty, arg_ast| {\n@@ -572,6 +555,8 @@ fn check_fn(tcx: ty::ctxt, fk: visit::fn_kind, decl: ast::fn_decl,\n             }\n         }\n       }\n+      _ => tcx.sess.impossible_case(span, ~\"check_fn: function has \\\n+             non-fn type\")\n     }\n }\n "}, {"sha": "3304f0c4a54169dfb64268d9f717868f76b67dc1", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -272,7 +272,7 @@ fn build_closure(bcx0: block,\n             vec::push(env_vals, env_ref(lv.val, ty, lv.kind));\n           }\n           capture::cap_copy => {\n-            let mv = match check ccx.maps.last_use_map.find(id) {\n+            let mv = match ccx.maps.last_use_map.find(id) {\n               none => false,\n               some(vars) => (*vars).contains(nid)\n             };"}, {"sha": "4be8955541bb7bf25436c94b8f5389f48637f030", "filename": "src/rustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -246,7 +246,7 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n         let ety = ty::expr_ty(cx.tcx, e), llty = type_of::type_of(cx, ety);\n         let basety = ty::expr_ty(cx.tcx, base);\n         let v = const_expr(cx, base);\n-        match check (base::cast_type_kind(basety),\n+        match (base::cast_type_kind(basety),\n                      base::cast_type_kind(ety)) {\n \n           (base::cast_integral, base::cast_integral) => {\n@@ -264,6 +264,8 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n             if ty::type_is_signed(ety) { llvm::LLVMConstFPToSI(v, llty) }\n             else { llvm::LLVMConstFPToUI(v, llty) }\n           }\n+          _ => cx.sess.impossible_case(e.span,\n+                                       ~\"bad combination of types for cast\")\n         }\n       }\n       ast::expr_addr_of(ast::m_imm, sub) => {"}, {"sha": "68bdd983d8b9d7b0ff4db4c5660ed18f5e1069b3", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728496929292c692aaad005bdbf4376bb1d78c4f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=728496929292c692aaad005bdbf4376bb1d78c4f", "patch": "@@ -180,7 +180,7 @@ fn create_compile_unit(cx: @crate_ctxt)\n                          llstr(work_dir),\n                          llstr(env!{\"CFG_VERSION\"}),\n                          lli1(true), // deprecated: main compile unit\n-                         lli1(cx.sess.opts.optimize != 0u),\n+                         lli1(cx.sess.opts.optimize != session::No),\n                          llstr(~\"\"), // flags (???)\n                          lli32(0) // runtime version (???)\n                         ];\n@@ -281,7 +281,7 @@ fn size_and_align_of(cx: @crate_ctxt, t: ty::t) -> (int, int) {\n      shape::llalign_of_pref(cx, llty) as int)\n }\n \n-fn create_basic_type(cx: @crate_ctxt, t: ty::t, ty: ast::prim_ty, span: span)\n+fn create_basic_type(cx: @crate_ctxt, t: ty::t, span: span)\n     -> @metadata<tydesc_md> {\n     let cache = get_cache(cx);\n     let tg = BasicTypeDescriptorTag;\n@@ -291,29 +291,7 @@ fn create_basic_type(cx: @crate_ctxt, t: ty::t, ty: ast::prim_ty, span: span)\n       option::none => ()\n     }\n \n-    let (name, encoding) = match check ty {\n-      ast::ty_bool => (~\"bool\", DW_ATE_boolean),\n-      ast::ty_int(m) => match m {\n-        ast::ty_char => (~\"char\", DW_ATE_unsigned),\n-        ast::ty_i => (~\"int\", DW_ATE_signed),\n-        ast::ty_i8 => (~\"i8\", DW_ATE_signed_char),\n-        ast::ty_i16 => (~\"i16\", DW_ATE_signed),\n-        ast::ty_i32 => (~\"i32\", DW_ATE_signed),\n-        ast::ty_i64 => (~\"i64\", DW_ATE_signed)\n-      },\n-      ast::ty_uint(m) => match m {\n-        ast::ty_u => (~\"uint\", DW_ATE_unsigned),\n-        ast::ty_u8 => (~\"u8\", DW_ATE_unsigned_char),\n-        ast::ty_u16 => (~\"u16\", DW_ATE_unsigned),\n-        ast::ty_u32 => (~\"u32\", DW_ATE_unsigned),\n-        ast::ty_u64 => (~\"u64\", DW_ATE_unsigned)\n-      },\n-      ast::ty_float(m) => match m {\n-        ast::ty_f => (~\"float\", DW_ATE_float),\n-        ast::ty_f32 => (~\"f32\", DW_ATE_float),\n-        ast::ty_f64 => (~\"f64\", DW_ATE_float)\n-      }\n-    };\n+    let (name, encoding) = (~\"uint\", DW_ATE_unsigned);\n \n     let fname = filename_from_span(cx, span);\n     let file_node = create_file(cx, fname);\n@@ -443,8 +421,7 @@ fn create_boxed_type(cx: @crate_ctxt, outer: ty::t, _inner: ty::t,\n     let file_node = create_file(cx, fname);\n     //let cu_node = create_compile_unit_metadata(cx, fname);\n     let uint_t = ty::mk_uint(cx.tcx);\n-    let refcount_type = create_basic_type(cx, uint_t,\n-                                          ast::ty_uint(ast::ty_u), span);\n+    let refcount_type = create_basic_type(cx, uint_t, span);\n     let scx = create_structure(file_node, ty_to_str(cx.tcx, outer), 0);\n     add_member(scx, ~\"refcnt\", 0, sys::size_of::<uint>() as int,\n                sys::min_align_of::<uint>() as int, refcount_type.node);\n@@ -495,8 +472,7 @@ fn create_vec(cx: @crate_ctxt, vec_t: ty::t, elem_t: ty::t,\n     let file_node = create_file(cx, fname);\n     let elem_ty_md = create_ty(cx, elem_t, elem_ty);\n     let scx = create_structure(file_node, ty_to_str(cx.tcx, vec_t), 0);\n-    let size_t_type = create_basic_type(cx, ty::mk_uint(cx.tcx),\n-                                        ast::ty_uint(ast::ty_u), vec_ty_span);\n+    let size_t_type = create_basic_type(cx, ty::mk_uint(cx.tcx), vec_ty_span);\n     add_member(scx, ~\"fill\", 0, sys::size_of::<libc::size_t>() as int,\n                sys::min_align_of::<libc::size_t>() as int, size_t_type.node);\n     add_member(scx, ~\"alloc\", 0, sys::size_of::<libc::size_t>() as int,\n@@ -814,7 +790,7 @@ fn create_function(fcx: fn_ctxt) -> @metadata<subprogram_md> {\n                        lli32(0i), //index into virt func\n                        /*llnull()*/ lli32(0), // base type with vtbl\n                        lli32(256), // flags\n-                       lli1(cx.sess.opts.optimize != 0u),\n+                       lli1(cx.sess.opts.optimize != session::No),\n                        fcx.llfn\n                        //list of template params\n                        //func decl descriptor"}]}