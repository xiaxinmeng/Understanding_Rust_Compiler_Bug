{"sha": "7011e30352583b5965c4a9118ca2c14b8ab24454", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMTFlMzAzNTI1ODNiNTk2NWM0YTkxMThjYTJjMTRiOGFiMjQ0NTQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-23T19:48:33Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T16:19:29Z"}, "message": "trans: Remove the old ExprOrMethodCall.", "tree": {"sha": "f86959e475a2db8bda2601ea50c9a75ff32b10b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f86959e475a2db8bda2601ea50c9a75ff32b10b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7011e30352583b5965c4a9118ca2c14b8ab24454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7011e30352583b5965c4a9118ca2c14b8ab24454", "html_url": "https://github.com/rust-lang/rust/commit/7011e30352583b5965c4a9118ca2c14b8ab24454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7011e30352583b5965c4a9118ca2c14b8ab24454/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "url": "https://api.github.com/repos/rust-lang/rust/commits/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958", "html_url": "https://github.com/rust-lang/rust/commit/55b5a365ef64c6c1a53e348a5a5a5ff1cac1d958"}], "stats": {"total": 67, "additions": 18, "deletions": 49}, "files": [{"sha": "aaaa636ea841fe03aa9ffa06727d34605f27c157", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7011e30352583b5965c4a9118ca2c14b8ab24454/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7011e30352583b5965c4a9118ca2c14b8ab24454/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=7011e30352583b5965c4a9118ca2c14b8ab24454", "patch": "@@ -1200,41 +1200,6 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     infer::drain_fulfillment_cx(&infcx, &mut fulfill_cx, &()).is_ok()\n }\n \n-// Key used to lookup values supplied for type parameters in an expr.\n-#[derive(Copy, Clone, PartialEq, Debug)]\n-pub enum ExprOrMethodCall {\n-    // Type parameters for a path like `None::<int>`\n-    ExprId(ast::NodeId),\n-\n-    // Type parameters for a method call like `a.foo::<int>()`\n-    MethodCallKey(ty::MethodCall)\n-}\n-\n-pub fn node_id_substs<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                node: ExprOrMethodCall,\n-                                param_substs: &subst::Substs<'tcx>)\n-                                -> &'tcx subst::Substs<'tcx> {\n-    let tcx = ccx.tcx();\n-\n-    let substs = match node {\n-        ExprId(id) => {\n-            tcx.node_id_item_substs(id).substs\n-        }\n-        MethodCallKey(method_call) => {\n-            tcx.tables.borrow().method_map[&method_call].substs.clone()\n-        }\n-    };\n-\n-    if substs.types.needs_infer() {\n-        tcx.sess.bug(&format!(\"type parameters for node {:?} include inference types: {:?}\",\n-                              node, substs));\n-    }\n-\n-    ccx.tcx().mk_substs(monomorphize::apply_param_substs(tcx,\n-                                                         param_substs,\n-                                                         &substs.erase_regions()))\n-}\n-\n pub fn langcall(bcx: Block,\n                 span: Option<Span>,\n                 msg: &str,"}, {"sha": "4a05f7b80c669ccd38a34caafbacbca3cca68104", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7011e30352583b5965c4a9118ca2c14b8ab24454/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7011e30352583b5965c4a9118ca2c14b8ab24454/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=7011e30352583b5965c4a9118ca2c14b8ab24454", "patch": "@@ -23,10 +23,10 @@ use trans::{adt, closure, debuginfo, expr, inline, machine};\n use trans::base::{self, exported_name, push_ctxt};\n use trans::callee::Callee;\n use trans::collector::{self, TransItem};\n-use trans::common::{self, type_is_sized, ExprOrMethodCall, node_id_substs, C_nil, const_get_elt};\n+use trans::common::{type_is_sized, C_nil, const_get_elt};\n use trans::common::{CrateContext, C_integral, C_floating, C_bool, C_str_slice, C_bytes, val_ty};\n use trans::common::{C_struct, C_undef, const_to_opt_int, const_to_opt_uint, VariantInfo, C_uint};\n-use trans::common::{type_is_fat_ptr, Field, C_vector, C_array, C_null, ExprId, MethodCallKey};\n+use trans::common::{type_is_fat_ptr, Field, C_vector, C_array, C_null};\n use trans::datum::{Datum, Lvalue};\n use trans::declare;\n use trans::monomorphize;\n@@ -195,27 +195,31 @@ fn const_deref<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n }\n \n fn const_fn_call<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                           node: ExprOrMethodCall,\n                            def_id: DefId,\n+                           substs: Substs<'tcx>,\n                            arg_vals: &[ValueRef],\n                            param_substs: &'tcx Substs<'tcx>,\n                            trueconst: TrueConst) -> Result<ValueRef, ConstEvalFailure> {\n     let fn_like = const_eval::lookup_const_fn_by_id(ccx.tcx(), def_id);\n     let fn_like = fn_like.expect(\"lookup_const_fn_by_id failed in const_fn_call\");\n \n+    let body = match fn_like.body().expr {\n+        Some(ref expr) => expr,\n+        None => return Ok(C_nil(ccx))\n+    };\n+\n     let args = &fn_like.decl().inputs;\n     assert_eq!(args.len(), arg_vals.len());\n \n     let arg_ids = args.iter().map(|arg| arg.pat.id);\n     let fn_args = arg_ids.zip(arg_vals.iter().cloned()).collect();\n \n-    let substs = node_id_substs(ccx, node, param_substs);\n-    match fn_like.body().expr {\n-        Some(ref expr) => {\n-            const_expr(ccx, &expr, substs, Some(&fn_args), trueconst).map(|(res, _)| res)\n-        },\n-        None => Ok(C_nil(ccx)),\n-    }\n+    let substs = monomorphize::apply_param_substs(ccx.tcx(),\n+                                                  param_substs,\n+                                                  &substs.erase_regions());\n+    let substs = ccx.tcx().mk_substs(substs);\n+\n+    const_expr(ccx, body, substs, Some(&fn_args), trueconst).map(|(res, _)| res)\n }\n \n pub fn get_const_expr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n@@ -947,8 +951,8 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 Def::Fn(did) | Def::Method(did) => {\n                     try!(const_fn_call(\n                         cx,\n-                        ExprId(callee.id),\n                         did,\n+                        cx.tcx().node_id_item_substs(callee.id).substs,\n                         &arg_vals,\n                         param_substs,\n                         trueconst,\n@@ -976,9 +980,9 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         hir::ExprMethodCall(_, _, ref args) => {\n             let arg_vals = try!(map_list(args));\n             let method_call = ty::MethodCall::expr(e.id);\n-            let method_did = cx.tcx().tables.borrow().method_map[&method_call].def_id;\n-            try!(const_fn_call(cx, MethodCallKey(method_call),\n-                               method_did, &arg_vals, param_substs, trueconst))\n+            let method = cx.tcx().tables.borrow().method_map[&method_call];\n+            try!(const_fn_call(cx, method.def_id, method.substs.clone(),\n+                               &arg_vals, param_substs, trueconst))\n         },\n         hir::ExprType(ref e, _) => try!(const_expr(cx, &e, param_substs, fn_args, trueconst)).0,\n         hir::ExprBlock(ref block) => {"}]}