{"sha": "bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZTQ1OTc0YTE4YWY2MzE5MWQ0MGE2YWM1YmViMGNmMmFiOWM5Zjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-22T23:08:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-22T23:08:35Z"}, "message": "Auto merge of #39866 - steveklabnik:unstable-book, r=alexcrichton\n\nCreate the Unstable Book\n\nPart of https://github.com/rust-lang/rust/issues/39588\n\nThis isn't done yet. To do:\n\n- [x] import the nightly book contents here\n- [ ] possibly write some more chapters\n\nThis will _not_ be done before it lands; that's part of the whole unstable thing.", "tree": {"sha": "63744c8d78aac8b988ee952ac52db0a34e3d3727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63744c8d78aac8b988ee952ac52db0a34e3d3727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "html_url": "https://github.com/rust-lang/rust/commit/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "html_url": "https://github.com/rust-lang/rust/commit/fc6f092c21a7a7249a9f8860f3cd10160aa36c02"}, {"sha": "06e311b66a833cc99bddbf3b7afaed609230e463", "url": "https://api.github.com/repos/rust-lang/rust/commits/06e311b66a833cc99bddbf3b7afaed609230e463", "html_url": "https://github.com/rust-lang/rust/commit/06e311b66a833cc99bddbf3b7afaed609230e463"}], "stats": {"total": 2071, "additions": 1502, "deletions": 569}, "files": [{"sha": "fe183c5bce8e81778a152e00b63bbbc1de96a86c", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -577,6 +577,15 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          })\n          .default(build.config.docs)\n          .run(move |s| doc::rustbook(build, s.target, \"reference\"));\n+    rules.doc(\"doc-unstable-book\", \"src/doc/unstable-book\")\n+         .dep(move |s| {\n+             s.name(\"tool-rustbook\")\n+              .host(&build.config.build)\n+              .target(&build.config.build)\n+              .stage(0)\n+         })\n+         .default(build.config.docs)\n+         .run(move |s| doc::rustbook(build, s.target, \"unstable-book\"));\n     rules.doc(\"doc-standalone\", \"src/doc\")\n          .dep(move |s| {\n              s.name(\"rustc\")"}, {"sha": "ade4d52c1eb318632af66c89c88fd8694513b0b1", "filename": "src/doc/book/src/README.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FREADME.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -21,15 +21,13 @@ is the first. After this:\n * [Tutorial: Guessing Game][gg] - Learn some Rust with a small project.\n * [Syntax and Semantics][ss] - Each bit of Rust, broken down into small chunks.\n * [Effective Rust][er] - Higher-level concepts for writing excellent Rust code.\n-* [Nightly Rust][nr] - Cutting-edge features that aren\u2019t in stable builds yet.\n * [Glossary][gl] - A reference of terms used in the book.\n * [Bibliography][bi] - Background on Rust's influences, papers about Rust.\n \n [gs]: getting-started.html\n [gg]: guessing-game.html\n [er]: effective-rust.html\n [ss]: syntax-and-semantics.html\n-[nr]: nightly-rust.html\n [gl]: glossary.html\n [bi]: bibliography.html\n "}, {"sha": "c3763cdf9d6d7ad7f3a0706c8b1747c27d53b499", "filename": "src/doc/book/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2FSUMMARY.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -55,18 +55,6 @@\n     * [Release Channels](release-channels.md)\n     * [Using Rust without the standard library](using-rust-without-the-standard-library.md)\n     * [Procedural Macros (and custom derive)](procedural-macros.md)\n-* [Nightly Rust](nightly-rust.md)\n-    * [Compiler Plugins](compiler-plugins.md)\n-    * [Inline Assembly](inline-assembly.md)\n-    * [No stdlib](no-stdlib.md)\n-    * [Intrinsics](intrinsics.md)\n-    * [Lang items](lang-items.md)\n-    * [Advanced linking](advanced-linking.md)\n-    * [Benchmark Tests](benchmark-tests.md)\n-    * [Box Syntax and Patterns](box-syntax-and-patterns.md)\n-    * [Slice Patterns](slice-patterns.md)\n-    * [Associated Constants](associated-constants.md)\n-    * [Custom Allocators](custom-allocators.md)\n * [Glossary](glossary.md)\n * [Syntax Index](syntax-index.md)\n * [Bibliography](bibliography.md)"}, {"sha": "a882d6d2ebe0779a565f418d9a4070944939d223", "filename": "src/doc/book/src/advanced-linking.md", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fadvanced-linking.md?ref=fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "patch": "@@ -1,145 +0,0 @@\n-# Advanced Linking\n-\n-The common cases of linking with Rust have been covered earlier in this book,\n-but supporting the range of linking possibilities made available by other\n-languages is important for Rust to achieve seamless interaction with native\n-libraries.\n-\n-# Link args\n-\n-There is one other way to tell `rustc` how to customize linking, and that is via\n-the `link_args` attribute. This attribute is applied to `extern` blocks and\n-specifies raw flags which need to get passed to the linker when producing an\n-artifact. An example usage would be:\n-\n-```rust,no_run\n-#![feature(link_args)]\n-\n-#[link_args = \"-foo -bar -baz\"]\n-extern {}\n-# fn main() {}\n-```\n-\n-Note that this feature is currently hidden behind the `feature(link_args)` gate\n-because this is not a sanctioned way of performing linking. Right now `rustc`\n-shells out to the system linker (`gcc` on most systems, `link.exe` on MSVC),\n-so it makes sense to provide extra command line\n-arguments, but this will not always be the case. In the future `rustc` may use\n-LLVM directly to link native libraries, in which case `link_args` will have no\n-meaning. You can achieve the same effect as the `link_args` attribute with the\n-`-C link-args` argument to `rustc`.\n-\n-It is highly recommended to *not* use this attribute, and rather use the more\n-formal `#[link(...)]` attribute on `extern` blocks instead.\n-\n-# Static linking\n-\n-Static linking refers to the process of creating output that contains all\n-required libraries and so doesn't need libraries installed on every system where\n-you want to use your compiled project. Pure-Rust dependencies are statically\n-linked by default so you can use created binaries and libraries without\n-installing Rust everywhere. By contrast, native libraries\n-(e.g. `libc` and `libm`) are usually dynamically linked, but it is possible to\n-change this and statically link them as well.\n-\n-Linking is a very platform-dependent topic, and static linking may not even be\n-possible on some platforms! This section assumes some basic familiarity with\n-linking on your platform of choice.\n-\n-## Linux\n-\n-By default, all Rust programs on Linux will link to the system `libc` along with\n-a number of other libraries. Let's look at an example on a 64-bit Linux machine\n-with GCC and `glibc` (by far the most common `libc` on Linux):\n-\n-```text\n-$ cat example.rs\n-fn main() {}\n-$ rustc example.rs\n-$ ldd example\n-        linux-vdso.so.1 =>  (0x00007ffd565fd000)\n-        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fa81889c000)\n-        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa81867e000)\n-        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fa818475000)\n-        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fa81825f000)\n-        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa817e9a000)\n-        /lib64/ld-linux-x86-64.so.2 (0x00007fa818cf9000)\n-        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fa817b93000)\n-```\n-\n-Dynamic linking on Linux can be undesirable if you wish to use new library\n-features on old systems or target systems which do not have the required\n-dependencies for your program to run.\n-\n-Static linking is supported via an alternative `libc`, [`musl`](http://www.musl-libc.org). You can compile\n-your own version of Rust with `musl` enabled and install it into a custom\n-directory with the instructions below:\n-\n-```text\n-$ mkdir musldist\n-$ PREFIX=$(pwd)/musldist\n-$\n-$ # Build musl\n-$ curl -O http://www.musl-libc.org/releases/musl-1.1.10.tar.gz\n-$ tar xf musl-1.1.10.tar.gz\n-$ cd musl-1.1.10/\n-musl-1.1.10 $ ./configure --disable-shared --prefix=$PREFIX\n-musl-1.1.10 $ make\n-musl-1.1.10 $ make install\n-musl-1.1.10 $ cd ..\n-$ du -h musldist/lib/libc.a\n-2.2M    musldist/lib/libc.a\n-$\n-$ # Build libunwind.a\n-$ curl -O http://llvm.org/releases/3.7.0/llvm-3.7.0.src.tar.xz\n-$ tar xf llvm-3.7.0.src.tar.xz\n-$ cd llvm-3.7.0.src/projects/\n-llvm-3.7.0.src/projects $ curl http://llvm.org/releases/3.7.0/libunwind-3.7.0.src.tar.xz | tar xJf -\n-llvm-3.7.0.src/projects $ mv libunwind-3.7.0.src libunwind\n-llvm-3.7.0.src/projects $ mkdir libunwind/build\n-llvm-3.7.0.src/projects $ cd libunwind/build\n-llvm-3.7.0.src/projects/libunwind/build $ cmake -DLLVM_PATH=../../.. -DLIBUNWIND_ENABLE_SHARED=0 ..\n-llvm-3.7.0.src/projects/libunwind/build $ make\n-llvm-3.7.0.src/projects/libunwind/build $ cp lib/libunwind.a $PREFIX/lib/\n-llvm-3.7.0.src/projects/libunwind/build $ cd ../../../../\n-$ du -h musldist/lib/libunwind.a\n-164K    musldist/lib/libunwind.a\n-$\n-$ # Build musl-enabled rust\n-$ git clone https://github.com/rust-lang/rust.git muslrust\n-$ cd muslrust\n-muslrust $ ./configure --target=x86_64-unknown-linux-musl --musl-root=$PREFIX --prefix=$PREFIX\n-muslrust $ make\n-muslrust $ make install\n-muslrust $ cd ..\n-$ du -h musldist/bin/rustc\n-12K     musldist/bin/rustc\n-```\n-\n-You now have a build of a `musl`-enabled Rust! Because we've installed it to a\n-custom prefix we need to make sure our system can find the binaries and appropriate\n-libraries when we try and run it:\n-\n-```text\n-$ export PATH=$PREFIX/bin:$PATH\n-$ export LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH\n-```\n-\n-Let's try it out!\n-\n-```text\n-$ echo 'fn main() { println!(\"hi!\"); panic!(\"failed\"); }' > example.rs\n-$ rustc --target=x86_64-unknown-linux-musl example.rs\n-$ ldd example\n-        not a dynamic executable\n-$ ./example\n-hi!\n-thread 'main' panicked at 'failed', example.rs:1\n-```\n-\n-Success! This binary can be copied to almost any Linux machine with the same\n-machine architecture and run without issues.\n-\n-`cargo build` also permits the `--target` option so you should be able to build\n-your crates as normal. However, you may need to recompile your native libraries\n-against `musl` before they can be linked against."}, {"sha": "f03e881f47404300c47ebc313468a6658f4bfef6", "filename": "src/doc/book/src/box-syntax-and-patterns.md", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fbox-syntax-and-patterns.md?ref=fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "patch": "@@ -1,100 +0,0 @@\n-#  Box Syntax and Patterns\n-\n-Currently the only stable way to create a `Box` is via the `Box::new` method.\n-Also it is not possible in stable Rust to destructure a `Box` in a match\n-pattern. The unstable `box` keyword can be used to both create and destructure\n-a `Box`. An example usage would be:\n-\n-```rust\n-#![feature(box_syntax, box_patterns)]\n-\n-fn main() {\n-    let b = Some(box 5);\n-    match b {\n-        Some(box n) if n < 0 => {\n-            println!(\"Box contains negative number {}\", n);\n-        },\n-        Some(box n) if n >= 0 => {\n-            println!(\"Box contains non-negative number {}\", n);\n-        },\n-        None => {\n-            println!(\"No box\");\n-        },\n-        _ => unreachable!()\n-    }\n-}\n-```\n-\n-Note that these features are currently hidden behind the `box_syntax` (box\n-creation) and `box_patterns` (destructuring and pattern matching) gates\n-because the syntax may still change in the future.\n-\n-# Returning Pointers\n-\n-In many languages with pointers, you'd return a pointer from a function\n-so as to avoid copying a large data structure. For example:\n-\n-```rust\n-struct BigStruct {\n-    one: i32,\n-    two: i32,\n-    // Etc.\n-    one_hundred: i32,\n-}\n-\n-fn foo(x: Box<BigStruct>) -> Box<BigStruct> {\n-    Box::new(*x)\n-}\n-\n-fn main() {\n-    let x = Box::new(BigStruct {\n-        one: 1,\n-        two: 2,\n-        one_hundred: 100,\n-    });\n-\n-    let y = foo(x);\n-}\n-```\n-\n-The idea is that by passing around a box, you're only copying a pointer, rather\n-than the hundred `i32`s that make up the `BigStruct`.\n-\n-This is an antipattern in Rust. Instead, write this:\n-\n-```rust\n-#![feature(box_syntax)]\n-\n-struct BigStruct {\n-    one: i32,\n-    two: i32,\n-    // Etc.\n-    one_hundred: i32,\n-}\n-\n-fn foo(x: Box<BigStruct>) -> BigStruct {\n-    *x\n-}\n-\n-fn main() {\n-    let x = Box::new(BigStruct {\n-        one: 1,\n-        two: 2,\n-        one_hundred: 100,\n-    });\n-\n-    let y: Box<BigStruct> = box foo(x);\n-}\n-```\n-\n-This gives you flexibility without sacrificing performance.\n-\n-You may think that this gives us terrible performance: return a value and then\n-immediately box it up ?! Isn't this pattern the worst of both worlds? Rust is\n-smarter than that. There is no copy in this code. `main` allocates enough room\n-for the `box`, passes a pointer to that memory into `foo` as `x`, and then\n-`foo` writes the value straight into the `Box<T>`.\n-\n-This is important enough that it bears repeating: pointers are not for\n-optimizing returning values from your code. Allow the caller to choose how they\n-want to use your output."}, {"sha": "26cd718475eab896f06f97a57428b47568f8afc1", "filename": "src/doc/book/src/casting-between-types.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -151,12 +151,9 @@ elements of the array. These kinds of casts are very dangerous, because they\n make assumptions about the way that multiple underlying structures are\n implemented. For this, we need something more dangerous.\n \n-The `transmute` function is provided by a [compiler intrinsic][intrinsics], and\n-what it does is very simple, but very scary. It tells Rust to treat a value of\n-one type as though it were another type. It does this regardless of the\n-typechecking system, and completely trusts you.\n-\n-[intrinsics]: intrinsics.html\n+The `transmute` function is very simple, but very scary. It tells Rust to treat\n+a value of one type as though it were another type. It does this regardless of\n+the typechecking system, and completely trusts you.\n \n In our previous example, we know that an array of four `u8`s represents a `u32`\n properly, and so we want to do the cast. Using `transmute` instead of `as`,"}, {"sha": "0562e9fc430f68737a46c6d26ede8b9fbd01bd2f", "filename": "src/doc/book/src/conditional-compilation.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconditional-compilation.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -79,16 +79,13 @@ Will be the same as `#[b]` if `a` is set by `cfg` attribute, and nothing otherwi\n \n # cfg!\n \n-The `cfg!` [syntax extension][compilerplugins] lets you use these kinds of flags\n-elsewhere in your code, too:\n+The `cfg!` macro lets you use these kinds of flags elsewhere in your code, too:\n \n ```rust\n if cfg!(target_os = \"macos\") || cfg!(target_os = \"ios\") {\n     println!(\"Think Different!\");\n }\n ```\n \n-[compilerplugins]: compiler-plugins.html\n-\n These will be replaced by a `true` or `false` at compile-time, depending on the\n configuration settings."}, {"sha": "9bd64d3817955a472baac17a9928103604e813f2", "filename": "src/doc/book/src/lang-items.md", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Flang-items.md?ref=fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "patch": "@@ -1,84 +0,0 @@\n-# Lang items\n-\n-> **Note**: lang items are often provided by crates in the Rust distribution,\n-> and lang items themselves have an unstable interface. It is recommended to use\n-> officially distributed crates instead of defining your own lang items.\n-\n-The `rustc` compiler has certain pluggable operations, that is,\n-functionality that isn't hard-coded into the language, but is\n-implemented in libraries, with a special marker to tell the compiler\n-it exists. The marker is the attribute `#[lang = \"...\"]` and there are\n-various different values of `...`, i.e. various different 'lang\n-items'.\n-\n-For example, `Box` pointers require two lang items, one for allocation\n-and one for deallocation. A freestanding program that uses the `Box`\n-sugar for dynamic allocations via `malloc` and `free`:\n-\n-```rust,ignore\n-#![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n-#![no_std]\n-use core::intrinsics;\n-\n-extern crate libc;\n-\n-#[lang = \"owned_box\"]\n-pub struct Box<T>(*mut T);\n-\n-#[lang = \"exchange_malloc\"]\n-unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n-    let p = libc::malloc(size as libc::size_t) as *mut u8;\n-\n-    // Check if `malloc` failed:\n-    if p as usize == 0 {\n-        intrinsics::abort();\n-    }\n-\n-    p\n-}\n-\n-#[lang = \"exchange_free\"]\n-unsafe fn deallocate(ptr: *mut u8, _size: usize, _align: usize) {\n-    libc::free(ptr as *mut libc::c_void)\n-}\n-\n-#[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n-    deallocate(ptr as *mut u8, ::core::mem::size_of_val(&*ptr), ::core::mem::align_of_val(&*ptr));\n-}\n-\n-#[start]\n-fn main(argc: isize, argv: *const *const u8) -> isize {\n-    let x = box 1;\n-\n-    0\n-}\n-\n-#[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n-#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n-# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n-# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n-# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n-```\n-\n-Note the use of `abort`: the `exchange_malloc` lang item is assumed to\n-return a valid pointer, and so needs to do the check internally.\n-\n-Other features provided by lang items include:\n-\n-- overloadable operators via traits: the traits corresponding to the\n-  `==`, `<`, dereferencing (`*`) and `+` (etc.) operators are all\n-  marked with lang items; those specific four are `eq`, `ord`,\n-  `deref`, and `add` respectively.\n-- stack unwinding and general failure; the `eh_personality`,\n-  `eh_unwind_resume`, `fail` and `fail_bounds_checks` lang items.\n-- the traits in `std::marker` used to indicate types of\n-  various kinds; lang items `send`, `sync` and `copy`.\n-- the marker types and variance indicators found in\n-  `std::marker`; lang items `covariant_type`,\n-  `contravariant_lifetime`, etc.\n-\n-Lang items are loaded lazily by the compiler; e.g. if one never uses\n-`Box` then there is no need to define functions for `exchange_malloc`\n-and `exchange_free`. `rustc` will emit an error when an item is needed\n-but not found in the current crate or any that it depends on."}, {"sha": "fa8e8975a5b01bf4c90507df3de6f7a0e597f6e4", "filename": "src/doc/book/src/macros.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -761,12 +761,3 @@ to typecheck, and don\u2019t want to worry about writing out the body of the\n function. One example of this situation is implementing a trait with multiple\n required methods, where you want to tackle one at a time. Define the others\n as `unimplemented!` until you\u2019re ready to write them.\n-\n-# Procedural macros\n-\n-If Rust\u2019s macro system can\u2019t do what you need, you may want to write a\n-[compiler plugin](compiler-plugins.html) instead. Compared to `macro_rules!`\n-macros, this is significantly more work, the interfaces are much less stable,\n-and bugs can be much harder to track down. In exchange you get the\n-flexibility of running arbitrary Rust code within the compiler. Syntax\n-extension plugins are sometimes called \u2018procedural macros\u2019 for this reason."}, {"sha": "5dfaa9e0fa8009551a2bc19067b294adf2c5ab39", "filename": "src/doc/book/src/nightly-rust.md", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/fc6f092c21a7a7249a9f8860f3cd10160aa36c02/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fnightly-rust.md?ref=fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "patch": "@@ -1,100 +0,0 @@\n-# Nightly Rust\n-\n-Rust provides three distribution channels for Rust: nightly, beta, and stable.\n-Unstable features are only available on nightly Rust. For more details on this\n-process, see [Stability as a deliverable][stability].\n-\n-[stability]: http://blog.rust-lang.org/2014/10/30/Stability.html\n-\n-To install nightly Rust, you can use [rustup.rs][rustup]:\n-\n-[rustup]: https://rustup.rs\n-\n-```bash\n-$ curl https://sh.rustup.rs -sSf | sh\n-$ rustup install nightly\n-```\n-\n-If you're concerned about the [potential insecurity][insecurity] of using `curl\n-| sh`, please keep reading and see our disclaimer below. And feel free to\n-use a two-step version of the installation and examine our installation script:\n-\n-```bash\n-$ curl https://sh.rustup.rs -sSf -o rustup.sh\n-$ sh rustup.sh\n-$ rustup install nightly\n-```\n-\n-[insecurity]: http://curlpipesh.tumblr.com\n-\n-If you're on Windows, please download the [rustup installer][installer]\n-and run it.\n-\n-[installer]: https://win.rustup.rs\n-\n-## Uninstalling\n-\n-If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.\n-Not every programming language is great for everyone. Just run the uninstall\n-command:\n-\n-```bash\n-$ rustup self uninstall\n-```\n-\n-Some people, and somewhat rightfully so, get very upset when we tell you to\n-`curl | sh`. Basically, when you do this, you are trusting that the good\n-people who maintain Rust aren't going to hack your computer and do bad things.\n-That's a good instinct! If you're one of those people, please check out the\n-documentation on [building Rust from Source][from-source], or [the official\n-binary downloads][install-page].\n-\n-[from-source]: https://github.com/rust-lang/rust#building-from-source\n-[install-page]: https://www.rust-lang.org/install.html\n-\n-Oh, we should also mention the officially supported platforms:\n-\n-* Windows (7+)\n-* Linux (2.6.18 or later, various distributions), x86 and x86-64\n-* OSX 10.7 (Lion) or greater, x86 and x86-64\n-\n-We extensively test Rust on these platforms, and a few others, too, like\n-Android. But these are the ones most likely to work, as they have the most\n-testing.\n-\n-Finally, a comment about Windows. Rust considers Windows to be a first-class\n-platform upon release, but if we're honest, the Windows experience isn't as\n-integrated as the Linux/OS X experience is. We're working on it! If anything\n-does not work, it is a bug. Please let us know if that happens. Each and every\n-commit is tested against Windows like any other platform.\n-\n-If you've got Rust installed, you can open up a shell, and type this:\n-\n-```bash\n-$ rustc --version\n-```\n-\n-You should see the version number, commit hash, commit date and build date:\n-\n-```bash\n-rustc 1.0.0-nightly (f11f3e7ba 2015-01-04) (built 2015-01-06)\n-```\n-\n-If you did, Rust has been installed successfully! Congrats!\n-\n-This installer also installs a copy of the documentation locally, so you can\n-read it offline. On UNIX systems, `/usr/local/share/doc/rust` is the location.\n-On Windows, it's in a `share/doc` directory, inside wherever you installed Rust\n-to.\n-\n-If not, there are a number of places where you can get help. The easiest is\n-[the #rust IRC channel on irc.mozilla.org][irc], which you can access through\n-[Mibbit][mibbit]. Click that link, and you'll be chatting with other Rustaceans\n-(a silly nickname we call ourselves), and we can help you out. Other great\n-resources include [the users forum][users], and [Stack Overflow][stackoverflow].\n-\n-[irc]: irc://irc.mozilla.org/#rust\n-[mibbit]: http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust\n-[users]: https://users.rust-lang.org/\n-[stackoverflow]: http://stackoverflow.com/questions/tagged/rust\n-"}, {"sha": "9bf59fe2abdc37d22820d6331ba661755b009ec3", "filename": "src/doc/book/src/unsafe.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Funsafe.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -139,4 +139,4 @@ I\u2019ll repeat again: even though you _can_ do arbitrary things in unsafe blocks\n and functions doesn\u2019t mean you should. The compiler will act as though you\u2019re\n upholding its invariants, so be careful!\n \n-[intrinsics]: intrinsics.html\n+[intrinsics]: ../unstable-book/intrinsics.html"}, {"sha": "709d10f4e47913dd63ad669e1a6e7484e5984d8e", "filename": "src/doc/book/src/using-rust-without-the-standard-library.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fusing-rust-without-the-standard-library.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -9,7 +9,7 @@ don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n > Note: This feature is technically stable, but there are some caveats. For\n > one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n > For details on binaries without the standard library, see [the nightly\n-> chapter on `#![no_std]`](no-stdlib.html)\n+> chapter on 'lang items'](../unstable-book/lang-items.html#using-libc)\n \n To use `#![no_std]`, add it to your crate root:\n "}, {"sha": "1ba28c0117db553664dfd1cd5fe74dddfcb22486", "filename": "src/doc/guide-plugins.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fguide-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Fguide-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-plugins.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -1,4 +1,4 @@\n % The (old) Rust Compiler Plugins Guide\n \n This content has moved into\n-[the Rust Programming Language book](book/compiler-plugins.html).\n+[the Unstable Book](unstable-book/plugin.html)."}, {"sha": "8f3fdbf3679c1ada9fed4140d05ffc6f44a540aa", "filename": "src/doc/reference/src/attributes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Freference%2Fsrc%2Fattributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Freference%2Fsrc%2Fattributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference%2Fsrc%2Fattributes.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -317,7 +317,7 @@ For any lint check `C`:\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n along with their default settings.  [Compiler\n-plugins](../book/compiler-plugins.html#lint-plugins) can provide additional\n+plugins](../unstable-book/plugin.html#lint-plugins) can provide additional\n lint checks.\n \n ```{.ignore}"}, {"sha": "d64c40dcad835ad90d08d03d527c70ee29def69e", "filename": "src/doc/reference/src/macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Freference%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Freference%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference%2Fsrc%2Fmacros.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -14,4 +14,4 @@ And one unstable way: [compiler plugins].\n \n [Macros]: ../book/macros.html\n [Procedural Macros]: ../book/procedural-macros.html\n-[compiler plugins]: ../book/compiler-plugins.html\n+[compiler plugins]: ../unstable-book/plugin.html"}, {"sha": "7585238efedfc33acdd9494b0269951aaf3909ec", "filename": "src/doc/unstable-book/.gitignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2F.gitignore?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1 @@\n+book"}, {"sha": "ee8ae9a9839e9f409b38d15cce65baa1df64d908", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,94 @@\n+[The Unstable Book](the-unstable-book.md)\n+\n+- [asm](asm.md)\n+- [alloc_system](alloc-system.md)\n+- [alloc_jemalloc](alloc-jemalloc.md)\n+- [test](test.md)\n+- [concat_idents](concat-idents.md)\n+- [link_args](link-args.md)\n+- [log_syntax](log-syntax.md)\n+- [non_ascii_idents](non-ascii-idents.md)\n+- [plugin_registrar](plugin-registrar.md)\n+- [thread_local](thread-local.md)\n+- [trace_macros](trace-macros.md)\n+- [intrinsics](intrinsics.md)\n+- [lang_items](lang-items.md)\n+- [link_llvm_intrinsics](link-llvm-intrinsics.md)\n+- [linkage](linkage.md)\n+- [quote](quote.md)\n+- [simd](simd.md)\n+- [rustc_diagnostic_macros](rustc-diagnostic-macros.md)\n+- [advanced_slice_patterns](advanced-slice-patterns.md)\n+- [box_syntax](box-syntax.md)\n+- [placement_in_syntax](placement-in-syntax.md)\n+- [unboxed_closures](unboxed-closures.md)\n+- [allocator](allocator.md)\n+- [fundamental](fundamental.md)\n+- [main](main.md)\n+- [needs_allocator](needs-allocator.md)\n+- [on_unimplemented](on-unimplemented.md)\n+- [plugin](plugin.md)\n+- [simd_ffi](simd-ffi.md)\n+- [start](start.md)\n+- [structural_match](structural-match.md)\n+- [panic_runtime](panic-runtime.md)\n+- [needs_panic_runtime](needs-panic-runtime.md)\n+- [optin_builtin_traits](optin-builtin-traits.md)\n+- [macro_reexport](macro-reexport.md)\n+- [staged_api](staged-api.md)\n+- [no_core](no-core.md)\n+- [box_patterns](box-patterns.md)\n+- [dropck_parametricity](dropck-parametricity.md)\n+- [dropck_eyepatch](dropck-eyepatch.md)\n+- [custom_attribute](custom-attribute.md)\n+- [custom_derive](custom-derive.md)\n+- [rustc_attrs](rustc-attrs.md)\n+- [allow_internal_unstable](allow-internal-unstable.md)\n+- [slice_patterns](slice-patterns.md)\n+- [associated_consts](associated-consts.md)\n+- [const_fn](const-fn.md)\n+- [const_indexing](const-indexing.md)\n+- [prelude_import](prelude-import.md)\n+- [static_recursion](static-recursion.md)\n+- [default_type_parameter_fallback](default-type-parameter-fallback.md)\n+- [associated_type_defaults](associated-type-defaults.md)\n+- [repr_simd](repr-simd.md)\n+- [cfg_target_feature](cfg-target-feature.md)\n+- [platform_intrinsics](platform-intrinsics.md)\n+- [unwind_attributes](unwind-attributes.md)\n+- [naked_functions](naked-functions.md)\n+- [no_debug](no-debug.md)\n+- [omit_gdb_pretty_printer_section](omit-gdb-pretty-printer-section.md)\n+- [cfg_target_vendor](cfg-target-vendor.md)\n+- [stmt_expr_attributes](stmt-expr-attributes.md)\n+- [type_ascription](type-ascription.md)\n+- [cfg_target_thread_local](cfg-target-thread-local.md)\n+- [abi_vectorcall](abi-vectorcall.md)\n+- [inclusive_range_syntax](inclusive-range-syntax.md)\n+- [exclusive_range_pattern](exclusive-range-pattern.md)\n+- [specialization](specialization.md)\n+- [pub_restricted](pub-restricted.md)\n+- [drop_types_in_const](drop-types-in-const.md)\n+- [cfg_target_has_atomic](cfg-target-has-atomic.md)\n+- [conservative_impl_trait](conservative-impl-trait.md)\n+- [relaxed_adts](relaxed-adts.md)\n+- [never_type](never-type.md)\n+- [attr_literals](attr-literals.md)\n+- [abi_sysv64](abi-sysv64.md)\n+- [untagged_unions](untagged-unions.md)\n+- [compiler_builtins](compiler-builtins.md)\n+- [generic_param_attrs](generic-param-attrs.md)\n+- [field_init_shorthand](field-init-shorthand.md)\n+- [windows_subsystem](windows-subsystem.md)\n+- [link_cfg](link-cfg.md)\n+- [use_extern_macros](use-extern-macros.md)\n+- [loop_break_value](loop-break-value.md)\n+- [target_feature](target-feature.md)\n+- [abi_ptx](abi-ptx.md)\n+- [i128_type](i128-type.md)\n+- [abi_unadjusted](abi-unadjusted.md)\n+- [proc_macro](proc-macro.md)\n+- [struct_field_attributes](struct-field-attributes.md)\n+- [static_nobundle](static-nobundle.md)\n+- [abi_msp430_interrupt](abi-msp430-interrupt.md)\n+- [sanitizer_runtime](sanitizer-runtime.md)"}, {"sha": "9b2c7f298979d016ec2927f099185b4d54fadbc5", "filename": "src/doc/unstable-book/src/abi-msp430-interrupt.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,7 @@\n+# `abi_msp430_interrupt`\n+\n+The tracking issue for this feature is: [#38487]\n+\n+[#38487]: https://github.com/rust-lang/rust/issues/38487\n+\n+------------------------"}, {"sha": "9c1b8868aceb4bd5d208cf14691f4d781abd4874", "filename": "src/doc/unstable-book/src/abi-ptx.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,5 @@\n+# `abi_ptx`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------"}, {"sha": "27f61d56342cf786aaed6548c852d338b86f0e4f", "filename": "src/doc/unstable-book/src/abi-sysv64.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-sysv64.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-sysv64.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-sysv64.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,7 @@\n+# `abi_sysv64`\n+\n+The tracking issue for this feature is: [#36167]\n+\n+[#36167]: https://github.com/rust-lang/rust/issues/36167\n+\n+------------------------"}, {"sha": "2e3113abdbf2bcff759c868dede0d62d16a4392a", "filename": "src/doc/unstable-book/src/abi-unadjusted.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-unadjusted.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-unadjusted.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-unadjusted.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `abi_unadjusted`\n+\n+The tracking issue for this feature is: none.\n+\n+------------------------\n+"}, {"sha": "3e36b1569fd4a4c8ad846316cdfb37ca199e7fa8", "filename": "src/doc/unstable-book/src/abi-vectorcall.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-vectorcall.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-vectorcall.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-vectorcall.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,7 @@\n+# `abi_vectorcall`\n+\n+The tracking issue for this feature is: none.\n+\n+------------------------\n+\n+"}, {"sha": "30d22ca8208bff24c1b24f3ce7c3833e9a33609a", "filename": "src/doc/unstable-book/src/advanced-slice-patterns.md", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fadvanced-slice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fadvanced-slice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fadvanced-slice-patterns.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -1,20 +1,13 @@\n-# Slice patterns\n+# `advanced_slice_patterns`\n \n-If you want to match against a slice or array, you can use `&` with the\n-`slice_patterns` feature:\n+The tracking issue for this feature is: [#23121]\n \n-```rust\n-#![feature(slice_patterns)]\n+[#23121]: https://github.com/rust-lang/rust/issues/23121\n \n-fn main() {\n-    let v = vec![\"match_this\", \"1\"];\n+See also [`slice_patterns`](slice-patterns.html).\n+\n+------------------------\n \n-    match &v[..] {\n-        &[\"match_this\", second] => println!(\"The second element is {}\", second),\n-        _ => {},\n-    }\n-}\n-```\n \n The `advanced_slice_patterns` gate lets you use `..` to indicate any number of\n elements inside a pattern matching a slice. This wildcard can only be used once", "previous_filename": "src/doc/book/src/slice-patterns.md"}, {"sha": "9bffa2ff99bf3d0db7fdcc0455d610fe9b187115", "filename": "src/doc/unstable-book/src/alloc-jemalloc.md", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-jemalloc.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,62 @@\n+# `alloc_jemalloc`\n+\n+The tracking issue for this feature is: [#33082]\n+\n+[#33082]: https://github.com/rust-lang/rust/issues/33082\n+\n+See also [`alloc_system`](alloc-system.html).\n+\n+------------------------\n+\n+The compiler currently ships two default allocators: `alloc_system` and\n+`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n+are normal Rust crates and contain an implementation of the routines to\n+allocate and deallocate memory. The standard library is not compiled assuming\n+either one, and the compiler will decide which allocator is in use at\n+compile-time depending on the type of output artifact being produced.\n+\n+Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n+available). In this situation the compiler \"controls the world\" in the sense of\n+it has power over the final link. Primarily this means that the allocator\n+decision can be left up the compiler.\n+\n+Dynamic and static libraries, however, will use `alloc_system` by default. Here\n+Rust is typically a 'guest' in another application or another world where it\n+cannot authoritatively decide what allocator is in use. As a result it resorts\n+back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n+memory.\n+\n+# Switching Allocators\n+\n+Although the compiler's default choices may work most of the time, it's often\n+necessary to tweak certain aspects. Overriding the compiler's decision about\n+which allocator is in use is done simply by linking to the desired allocator:\n+\n+```rust,no_run\n+#![feature(alloc_system)]\n+\n+extern crate alloc_system;\n+\n+fn main() {\n+    let a = Box::new(4); // Allocates from the system allocator.\n+    println!(\"{}\", a);\n+}\n+```\n+\n+In this example the binary generated will not link to jemalloc by default but\n+instead use the system allocator. Conversely to generate a dynamic library which\n+uses jemalloc by default one would write:\n+\n+```rust,ignore\n+#![feature(alloc_jemalloc)]\n+#![crate_type = \"dylib\"]\n+\n+extern crate alloc_jemalloc;\n+\n+pub fn foo() {\n+    let a = Box::new(4); // Allocates from jemalloc.\n+    println!(\"{}\", a);\n+}\n+# fn main() {}\n+```\n+"}, {"sha": "6fa89179d8e1150c54e4367b394ae3f60d1214f3", "filename": "src/doc/unstable-book/src/alloc-system.md", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Falloc-system.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,62 @@\n+# `alloc_system`\n+\n+The tracking issue for this feature is: [#33082]\n+\n+[#33082]: https://github.com/rust-lang/rust/issues/33082\n+\n+See also [`alloc_jemalloc`](alloc-jemalloc.html).\n+\n+------------------------\n+\n+The compiler currently ships two default allocators: `alloc_system` and\n+`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n+are normal Rust crates and contain an implementation of the routines to\n+allocate and deallocate memory. The standard library is not compiled assuming\n+either one, and the compiler will decide which allocator is in use at\n+compile-time depending on the type of output artifact being produced.\n+\n+Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n+available). In this situation the compiler \"controls the world\" in the sense of\n+it has power over the final link. Primarily this means that the allocator\n+decision can be left up the compiler.\n+\n+Dynamic and static libraries, however, will use `alloc_system` by default. Here\n+Rust is typically a 'guest' in another application or another world where it\n+cannot authoritatively decide what allocator is in use. As a result it resorts\n+back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n+memory.\n+\n+# Switching Allocators\n+\n+Although the compiler's default choices may work most of the time, it's often\n+necessary to tweak certain aspects. Overriding the compiler's decision about\n+which allocator is in use is done simply by linking to the desired allocator:\n+\n+```rust,no_run\n+#![feature(alloc_system)]\n+\n+extern crate alloc_system;\n+\n+fn main() {\n+    let a = Box::new(4); // Allocates from the system allocator.\n+    println!(\"{}\", a);\n+}\n+```\n+\n+In this example the binary generated will not link to jemalloc by default but\n+instead use the system allocator. Conversely to generate a dynamic library which\n+uses jemalloc by default one would write:\n+\n+```rust,ignore\n+#![feature(alloc_jemalloc)]\n+#![crate_type = \"dylib\"]\n+\n+extern crate alloc_jemalloc;\n+\n+pub fn foo() {\n+    let a = Box::new(4); // Allocates from jemalloc.\n+    println!(\"{}\", a);\n+}\n+# fn main() {}\n+```\n+"}, {"sha": "7261641698f48ff0080d18d91f5f00d81ce0cd7e", "filename": "src/doc/unstable-book/src/allocator.md", "status": "renamed", "additions": 7, "deletions": 64, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fallocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fallocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fallocator.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -1,69 +1,10 @@\n-# Custom Allocators\n+# `allocator`\n \n-Allocating memory isn't always the easiest thing to do, and while Rust generally\n-takes care of this by default it often becomes necessary to customize how\n-allocation occurs. The compiler and standard library currently allow switching\n-out the default global allocator in use at compile time. The design is currently\n-spelled out in [RFC 1183][rfc] but this will walk you through how to get your\n-own allocator up and running.\n+The tracking issue for this feature is: [#27389]\n \n-[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1183-swap-out-jemalloc.md\n+[#27389]: https://github.com/rust-lang/rust/issues/27389\n \n-# Default Allocator\n-\n-The compiler currently ships two default allocators: `alloc_system` and\n-`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n-are normal Rust crates and contain an implementation of the routines to\n-allocate and deallocate memory. The standard library is not compiled assuming\n-either one, and the compiler will decide which allocator is in use at\n-compile-time depending on the type of output artifact being produced.\n-\n-Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n-available). In this situation the compiler \"controls the world\" in the sense of\n-it has power over the final link. Primarily this means that the allocator\n-decision can be left up the compiler.\n-\n-Dynamic and static libraries, however, will use `alloc_system` by default. Here\n-Rust is typically a 'guest' in another application or another world where it\n-cannot authoritatively decide what allocator is in use. As a result it resorts\n-back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n-memory.\n-\n-# Switching Allocators\n-\n-Although the compiler's default choices may work most of the time, it's often\n-necessary to tweak certain aspects. Overriding the compiler's decision about\n-which allocator is in use is done simply by linking to the desired allocator:\n-\n-```rust,no_run\n-#![feature(alloc_system)]\n-\n-extern crate alloc_system;\n-\n-fn main() {\n-    let a = Box::new(4); // Allocates from the system allocator.\n-    println!(\"{}\", a);\n-}\n-```\n-\n-In this example the binary generated will not link to jemalloc by default but\n-instead use the system allocator. Conversely to generate a dynamic library which\n-uses jemalloc by default one would write:\n-\n-```rust,ignore\n-#![feature(alloc_jemalloc)]\n-#![crate_type = \"dylib\"]\n-\n-extern crate alloc_jemalloc;\n-\n-pub fn foo() {\n-    let a = Box::new(4); // Allocates from jemalloc.\n-    println!(\"{}\", a);\n-}\n-# fn main() {}\n-```\n-\n-# Writing a custom allocator\n+------------------------\n \n Sometimes even the choices of jemalloc vs the system allocator aren't enough and\n an entirely new custom allocator is required. In this you'll write your own\n@@ -154,7 +95,7 @@ fn main() {\n }\n ```\n \n-# Custom allocator limitations\n+## Custom allocator limitations\n \n There are a few restrictions when working with custom allocators which may cause\n compiler errors:\n@@ -169,3 +110,5 @@ compiler errors:\n   depend on a crate which needs an allocator (e.g. circular dependencies are not\n   allowed). This basically means that allocators must restrict themselves to\n   libcore currently.\n+\n+", "previous_filename": "src/doc/book/src/custom-allocators.md"}, {"sha": "74709ad5aeb4dedad1e77836a93e88031d08e43f", "filename": "src/doc/unstable-book/src/allow-internal-unstable.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fallow-internal-unstable.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fallow-internal-unstable.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fallow-internal-unstable.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `allow_internal_unstable`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "032d9d81240266ec346bcf03dceaf1ac46de3fb6", "filename": "src/doc/unstable-book/src/asm.md", "status": "renamed", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fasm.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -1,4 +1,10 @@\n-# Inline Assembly\n+# `asm`\n+\n+The tracking issue for this feature is: [#29722]\n+\n+[#29722]: https://github.com/rust-lang/rust/issues/29722\n+\n+------------------------\n \n For extremely low-level manipulations and performance reasons, one\n might wish to control the CPU directly. Rust supports using inline\n@@ -182,3 +188,4 @@ documentation as well][llvm-docs] for more information about clobbers,\n constraints, etc.\n \n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n+", "previous_filename": "src/doc/book/src/inline-assembly.md"}, {"sha": "d661108e7d95ed7517cdaecb67e8deab12c1eccb", "filename": "src/doc/unstable-book/src/associated-consts.md", "status": "renamed", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-consts.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-consts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-consts.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -1,4 +1,10 @@\n-# Associated Constants\n+# `associated_consts`\n+\n+The tracking issue for this feature is: [#29646]\n+\n+[#29646]: https://github.com/rust-lang/rust/issues/29646\n+\n+------------------------\n \n With the `associated_consts` feature, you can define constants like this:\n ", "previous_filename": "src/doc/book/src/associated-constants.md"}, {"sha": "56cc8a5b3060aac34be6ea9bd100e74ef1dd7254", "filename": "src/doc/unstable-book/src/associated-type-defaults.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-type-defaults.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-type-defaults.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fassociated-type-defaults.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `associated_type_defaults`\n+\n+The tracking issue for this feature is: [#29661]\n+\n+[#29661]: https://github.com/rust-lang/rust/issues/29661\n+\n+------------------------\n+\n+\n+"}, {"sha": "67eee214a4f247e4f012fe59dd0e5574d0b60519", "filename": "src/doc/unstable-book/src/attr-literals.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fattr-literals.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `attr_literals`\n+\n+The tracking issue for this feature is: [#34981]\n+\n+[#34981]: https://github.com/rust-lang/rust/issues/34981\n+\n+------------------------\n+\n+\n+"}, {"sha": "86346364a71356caf4d19ad45f82c36d05d4d5c3", "filename": "src/doc/unstable-book/src/box-patterns.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-patterns.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,32 @@\n+# `box_patterns`\n+\n+The tracking issue for this feature is: [#29641]\n+\n+[#29641]: https://github.com/rust-lang/rust/issues/29641\n+\n+See also [`box_syntax`](box-syntax.html)\n+\n+------------------------\n+\n+Box patterns let you match on `Box<T>`s:\n+\n+\n+```rust\n+#![feature(box_patterns)]\n+\n+fn main() {\n+    let b = Some(Box::new(5));\n+    match b {\n+        Some(box n) if n < 0 => {\n+            println!(\"Box contains negative number {}\", n);\n+        },\n+        Some(box n) if n >= 0 => {\n+            println!(\"Box contains non-negative number {}\", n);\n+        },\n+        None => {\n+            println!(\"No box\");\n+        },\n+        _ => unreachable!()\n+    }\n+}\n+```"}, {"sha": "47aade0d04563016192fac4f0d8a8c0a6f930a79", "filename": "src/doc/unstable-book/src/box-syntax.md", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fbox-syntax.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,22 @@\n+# `box_syntax`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+See also [`box_patterns`](box-patterns.html)\n+\n+------------------------\n+\n+Currently the only stable way to create a `Box` is via the `Box::new` method.\n+Also it is not possible in stable Rust to destructure a `Box` in a match\n+pattern. The unstable `box` keyword can be used to create a `Box`. An example\n+usage would be:\n+\n+```rust\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let b = box 5;\n+}\n+```"}, {"sha": "ddd88bdc2cb17e257db75a708b4a7f0c87534f10", "filename": "src/doc/unstable-book/src/cfg-target-feature.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-feature.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-feature.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-feature.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `cfg_target_feature`\n+\n+The tracking issue for this feature is: [#29717]\n+\n+[#29717]: https://github.com/rust-lang/rust/issues/29717\n+\n+------------------------\n+\n+\n+"}, {"sha": "7496e42e1cd84a6e3d3955146a9c9ec286d75c30", "filename": "src/doc/unstable-book/src/cfg-target-has-atomic.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-has-atomic.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-has-atomic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-has-atomic.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `cfg_target_has_atomic`\n+\n+The tracking issue for this feature is: [#32976]\n+\n+[#32976]: https://github.com/rust-lang/rust/issues/32976\n+\n+------------------------\n+\n+\n+"}, {"sha": "a5adb38db3df0040ce42fbbc9853b37d284b0ef8", "filename": "src/doc/unstable-book/src/cfg-target-thread-local.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-thread-local.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-thread-local.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-thread-local.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `cfg_target_thread_local`\n+\n+The tracking issue for this feature is: [#29594]\n+\n+[#29594]: https://github.com/rust-lang/rust/issues/29594\n+\n+------------------------\n+\n+\n+"}, {"sha": "ddd88bdc2cb17e257db75a708b4a7f0c87534f10", "filename": "src/doc/unstable-book/src/cfg-target-vendor.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-vendor.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-vendor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcfg-target-vendor.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `cfg_target_feature`\n+\n+The tracking issue for this feature is: [#29717]\n+\n+[#29717]: https://github.com/rust-lang/rust/issues/29717\n+\n+------------------------\n+\n+\n+"}, {"sha": "3ec3cba257a99f10b7a2b541a63783c180741dae", "filename": "src/doc/unstable-book/src/compiler-builtins.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `compiler_builtins`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "c9a48293dba684c2105ae6e83a77b047df5810b8", "filename": "src/doc/unstable-book/src/concat-idents.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `concat_idents`\n+\n+The tracking issue for this feature is: [#29599]\n+\n+[#29599]: https://github.com/rust-lang/rust/issues/29599\n+\n+------------------------\n+\n+\n+"}, {"sha": "7d8bda439bd347219eafa33e3c70c62302e05d8a", "filename": "src/doc/unstable-book/src/conservative-impl-trait.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `conservative_impl_trait`\n+\n+The tracking issue for this feature is: [#34511]\n+\n+[#34511]: https://github.com/rust-lang/rust/issues/34511\n+\n+------------------------\n+\n+\n+"}, {"sha": "9b7942c408a2483fdb871c77653fe0c80bac699d", "filename": "src/doc/unstable-book/src/const-fn.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `const_fn`\n+\n+The tracking issue for this feature is: [#24111]\n+\n+[#24111]: https://github.com/rust-lang/rust/issues/24111\n+\n+------------------------\n+\n+\n+"}, {"sha": "bd92b0b1b478fdc3422f261f4aaa6162d6634d1b", "filename": "src/doc/unstable-book/src/const-indexing.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `const_indexing`\n+\n+The tracking issue for this feature is: [#29947]\n+\n+[#29947]: https://github.com/rust-lang/rust/issues/29947\n+\n+------------------------\n+\n+\n+"}, {"sha": "838f09670d2cd2cd6d079133134597dbbf1b6d1b", "filename": "src/doc/unstable-book/src/custom-attribute.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-attribute.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `custom_attribute`\n+\n+The tracking issue for this feature is: [#29642]\n+\n+[#29642]: https://github.com/rust-lang/rust/issues/29642\n+\n+------------------------\n+\n+\n+"}, {"sha": "d5fdd2b708bb8c5c869d610ee017e096f8cec28a", "filename": "src/doc/unstable-book/src/custom-derive.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-derive.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-derive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcustom-derive.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `custom_derive`\n+\n+The tracking issue for this feature is: [#29644]\n+\n+[#29644]: https://github.com/rust-lang/rust/issues/29644\n+\n+------------------------\n+\n+\n+"}, {"sha": "fd16dbf898537141e0c2a5412b9c36ae8d8be119", "filename": "src/doc/unstable-book/src/default-type-parameter-fallback.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fdefault-type-parameter-fallback.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fdefault-type-parameter-fallback.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdefault-type-parameter-fallback.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `default_type_parameter_fallback`\n+\n+The tracking issue for this feature is: [#27336]\n+\n+[#27336]: https://github.com/rust-lang/rust/issues/27336\n+\n+------------------------\n+\n+\n+"}, {"sha": "b3367d0df4459f877259ad9676003c9d275a3ad3", "filename": "src/doc/unstable-book/src/drop-types-in-const.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fdrop-types-in-const.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fdrop-types-in-const.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdrop-types-in-const.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `drop_types_in_const`\n+\n+The tracking issue for this feature is: [#33156]\n+\n+[#33156]: https://github.com/rust-lang/rust/issues/33156\n+\n+------------------------\n+\n+\n+"}, {"sha": "2f189e9b6454ad6707197b0f0925d38c4d8d3c13", "filename": "src/doc/unstable-book/src/dropck-eyepatch.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-eyepatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-eyepatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-eyepatch.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `dropck_eyepatch`\n+\n+The tracking issue for this feature is: [#34761]\n+\n+[#34761]: https://github.com/rust-lang/rust/issues/34761\n+\n+------------------------\n+\n+\n+"}, {"sha": "c5ae721954b82c11ae19ecec4786fd90ef2b21b6", "filename": "src/doc/unstable-book/src/dropck-parametricity.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-parametricity.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-parametricity.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fdropck-parametricity.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `dropck_parametricity`\n+\n+The tracking issue for this feature is: [#28498]\n+\n+[#28498]: https://github.com/rust-lang/rust/issues/28498\n+\n+------------------------\n+\n+\n+"}, {"sha": "b669ce83132d460ea5e9c8f569721e30dfd6698e", "filename": "src/doc/unstable-book/src/exclusive-range-pattern.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fexclusive-range-pattern.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fexclusive-range-pattern.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fexclusive-range-pattern.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `exclusive_range_pattern`\n+\n+The tracking issue for this feature is: [#37854]\n+\n+[#37854]: https://github.com/rust-lang/rust/issues/37854\n+\n+------------------------\n+\n+\n+"}, {"sha": "e737dbaa4ec02cbeb7e24c347a72bdb9441cb48e", "filename": "src/doc/unstable-book/src/field-init-shorthand.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffield-init-shorthand.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `field_init_shorthand`\n+\n+The tracking issue for this feature is: [#37340]\n+\n+[#37340]: https://github.com/rust-lang/rust/issues/37340\n+\n+------------------------\n+\n+\n+"}, {"sha": "a068dadf95d12fef85e97707b2bba1e79415b82b", "filename": "src/doc/unstable-book/src/fundamental.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ffundamental.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ffundamental.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ffundamental.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `fundamental`\n+\n+The tracking issue for this feature is: [#29635]\n+\n+[#29635]: https://github.com/rust-lang/rust/issues/29635\n+\n+------------------------\n+\n+\n+"}, {"sha": "ba49c850e4d600cf14d780a301e7b73e68fab0e6", "filename": "src/doc/unstable-book/src/generic-param-attrs.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fgeneric-param-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fgeneric-param-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fgeneric-param-attrs.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `generic_param_attrs`\n+\n+The tracking issue for this feature is: [#34761]\n+\n+[#34761]: https://github.com/rust-lang/rust/issues/34761\n+\n+------------------------\n+\n+\n+"}, {"sha": "ffcf45feb2ad7ef5d1b570f887cbd6d21bdc3611", "filename": "src/doc/unstable-book/src/i128-type.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `i128_type`\n+\n+The tracking issue for this feature is: [#35118]\n+\n+[#35118]: https://github.com/rust-lang/rust/issues/35118\n+\n+------------------------\n+\n+\n+"}, {"sha": "74d85536399d72f93096fce8091cb67d6167ddbe", "filename": "src/doc/unstable-book/src/inclusive-range-syntax.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Finclusive-range-syntax.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `inclusive_range_syntax`\n+\n+The tracking issue for this feature is: [#28237]\n+\n+[#28237]: https://github.com/rust-lang/rust/issues/28237\n+\n+------------------------\n+\n+\n+"}, {"sha": "bc35c2a0305332c3a84037ad967f15dc160286ec", "filename": "src/doc/unstable-book/src/intrinsics.md", "status": "renamed", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fintrinsics.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -1,8 +1,13 @@\n-# Intrinsics\n+# `intrinsics`\n+\n+The tracking issue for this feature is: None.\n+\n+Intrinsics are never intended to be stable directly, but intrinsics are often\n+exported in some sort of stable manner. Prefer using the stable interfaces to\n+the intrinsic directly when you can.\n+\n+------------------------\n \n-> **Note**: intrinsics will forever have an unstable interface, it is\n-> recommended to use the stable interfaces of libcore rather than intrinsics\n-> directly.\n \n These are imported as if they were FFI functions, with the special\n `rust-intrinsic` ABI. For example, if one was in a freestanding", "previous_filename": "src/doc/book/src/intrinsics.md"}, {"sha": "375b8bd6b8224170b25a61d8e72433ae7430cb62", "filename": "src/doc/unstable-book/src/lang-items.md", "status": "renamed", "additions": 88, "deletions": 14, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flang-items.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -1,23 +1,97 @@\n-# No stdlib\n+# `lang_items`\n \n-Rust\u2019s standard library provides a lot of useful functionality, but assumes\n-support for various features of its host system: threads, networking, heap\n-allocation, and others. There are systems that do not have these features,\n-however, and Rust can work with those too! To do so, we tell Rust that we\n-don\u2019t want to use the standard library via an attribute: `#![no_std]`.\n+The tracking issue for this feature is: None.\n \n-> Note: This feature is technically stable, but there are some caveats. For\n-> one, you can build a `#![no_std]` _library_ on stable, but not a _binary_.\n-> For details on libraries without the standard library, see [the chapter on\n-> `#![no_std]`](using-rust-without-the-standard-library.html)\n+------------------------\n \n-Obviously there's more to life than just libraries: one can use\n-`#[no_std]` with an executable.\n+The `rustc` compiler has certain pluggable operations, that is,\n+functionality that isn't hard-coded into the language, but is\n+implemented in libraries, with a special marker to tell the compiler\n+it exists. The marker is the attribute `#[lang = \"...\"]` and there are\n+various different values of `...`, i.e. various different 'lang\n+items'.\n+\n+For example, `Box` pointers require two lang items, one for allocation\n+and one for deallocation. A freestanding program that uses the `Box`\n+sugar for dynamic allocations via `malloc` and `free`:\n+\n+```rust,ignore\n+#![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n+#![no_std]\n+use core::intrinsics;\n+\n+extern crate libc;\n+\n+#[lang = \"owned_box\"]\n+pub struct Box<T>(*mut T);\n+\n+#[lang = \"exchange_malloc\"]\n+unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n+    let p = libc::malloc(size as libc::size_t) as *mut u8;\n+\n+    // Check if `malloc` failed:\n+    if p as usize == 0 {\n+        intrinsics::abort();\n+    }\n+\n+    p\n+}\n+\n+#[lang = \"exchange_free\"]\n+unsafe fn deallocate(ptr: *mut u8, _size: usize, _align: usize) {\n+    libc::free(ptr as *mut libc::c_void)\n+}\n+\n+#[lang = \"box_free\"]\n+unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n+    deallocate(ptr as *mut u8, ::core::mem::size_of_val(&*ptr), ::core::mem::align_of_val(&*ptr));\n+}\n+\n+#[start]\n+fn main(argc: isize, argv: *const *const u8) -> isize {\n+    let x = box 1;\n+\n+    0\n+}\n+\n+#[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n+#[lang = \"panic_fmt\"] extern fn rust_begin_panic() -> ! { unsafe { intrinsics::abort() } }\n+# #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n+# #[no_mangle] pub extern fn rust_eh_register_frames () {}\n+# #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n+```\n+\n+Note the use of `abort`: the `exchange_malloc` lang item is assumed to\n+return a valid pointer, and so needs to do the check internally.\n+\n+Other features provided by lang items include:\n+\n+- overloadable operators via traits: the traits corresponding to the\n+  `==`, `<`, dereferencing (`*`) and `+` (etc.) operators are all\n+  marked with lang items; those specific four are `eq`, `ord`,\n+  `deref`, and `add` respectively.\n+- stack unwinding and general failure; the `eh_personality`,\n+  `eh_unwind_resume`, `fail` and `fail_bounds_checks` lang items.\n+- the traits in `std::marker` used to indicate types of\n+  various kinds; lang items `send`, `sync` and `copy`.\n+- the marker types and variance indicators found in\n+  `std::marker`; lang items `covariant_type`,\n+  `contravariant_lifetime`, etc.\n+\n+Lang items are loaded lazily by the compiler; e.g. if one never uses\n+`Box` then there is no need to define functions for `exchange_malloc`\n+and `exchange_free`. `rustc` will emit an error when an item is needed\n+but not found in the current crate or any that it depends on.\n+\n+Most lang items are defined by `libcore`, but if you're trying to build\n+an executable without the standard library, you'll run into the need\n+for lang items. The rest of this page focuses on this use-case, even though\n+lang items are a bit broader than that.\n \n ### Using libc\n \n-In order to build a `#[no_std]` executable we will need libc as a dependency. We can specify\n-this using our `Cargo.toml` file:\n+In order to build a `#[no_std]` executable we will need libc as a dependency.\n+We can specify this using our `Cargo.toml` file:\n \n ```toml\n [dependencies]", "previous_filename": "src/doc/book/src/no-stdlib.md"}, {"sha": "2507197661a9de4d76efc9391dce8c692bedd2e9", "filename": "src/doc/unstable-book/src/link-args.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-args.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-args.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-args.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,32 @@\n+# `link_args`\n+\n+The tracking issue for this feature is: [#29596]\n+\n+[#29596]: https://github.com/rust-lang/rust/issues/29596\n+\n+------------------------\n+\n+You can tell `rustc` how to customize linking, and that is via the `link_args`\n+attribute. This attribute is applied to `extern` blocks and specifies raw flags\n+which need to get passed to the linker when producing an artifact. An example\n+usage would be:\n+\n+```rust,no_run\n+#![feature(link_args)]\n+\n+#[link_args = \"-foo -bar -baz\"]\n+extern {}\n+# fn main() {}\n+```\n+\n+Note that this feature is currently hidden behind the `feature(link_args)` gate\n+because this is not a sanctioned way of performing linking. Right now `rustc`\n+shells out to the system linker (`gcc` on most systems, `link.exe` on MSVC), so\n+it makes sense to provide extra command line arguments, but this will not\n+always be the case. In the future `rustc` may use LLVM directly to link native\n+libraries, in which case `link_args` will have no meaning. You can achieve the\n+same effect as the `link_args` attribute with the `-C link-args` argument to\n+`rustc`.\n+\n+It is highly recommended to *not* use this attribute, and rather use the more\n+formal `#[link(...)]` attribute on `extern` blocks instead."}, {"sha": "7393d0628e4f5b716a2135c801921e33ae0ef195", "filename": "src/doc/unstable-book/src/link-cfg.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-cfg.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `link_cfg`\n+\n+The tracking issue for this feature is: [#37406]\n+\n+[#37406]: https://github.com/rust-lang/rust/issues/37406\n+\n+------------------------\n+\n+\n+"}, {"sha": "ba639cb57fc6d2e9ccab9b14bcd05192650ca079", "filename": "src/doc/unstable-book/src/link-llvm-intrinsics.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-llvm-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-llvm-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flink-llvm-intrinsics.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `link_llvm_intrinsics`\n+\n+The tracking issue for this feature is: [#29602]\n+\n+[#29602]: https://github.com/rust-lang/rust/issues/29602\n+\n+------------------------\n+\n+\n+"}, {"sha": "5773d28a00ecc2cc7e9e52438331d74972c9f32d", "filename": "src/doc/unstable-book/src/linkage.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flinkage.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flinkage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flinkage.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `linkage`\n+\n+The tracking issue for this feature is: [#29603]\n+\n+[#29603]: https://github.com/rust-lang/rust/issues/29603\n+\n+------------------------\n+\n+\n+"}, {"sha": "b13f5ccfd9179a343bc9813f6768b4aee86a8fb1", "filename": "src/doc/unstable-book/src/log-syntax.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flog-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flog-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flog-syntax.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `log_syntax`\n+\n+The tracking issue for this feature is: [#29598]\n+\n+[#29598]: https://github.com/rust-lang/rust/issues/29598\n+\n+------------------------\n+\n+\n+"}, {"sha": "54d6e62ce4c526b088fbfb2d22940bddd35d4b57", "filename": "src/doc/unstable-book/src/loop-break-value.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Floop-break-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Floop-break-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Floop-break-value.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `loop_break_value`\n+\n+The tracking issue for this feature is: [#37339]\n+\n+[#37339]: https://github.com/rust-lang/rust/issues/37339\n+\n+------------------------\n+\n+\n+"}, {"sha": "32ffa3b4c31e52a9dce64323578f35da6821ee5d", "filename": "src/doc/unstable-book/src/macro-reexport.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fmacro-reexport.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fmacro-reexport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmacro-reexport.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `macro_reexport`\n+\n+The tracking issue for this feature is: [#29638]\n+\n+[#29638]: https://github.com/rust-lang/rust/issues/29638\n+\n+------------------------\n+\n+\n+"}, {"sha": "579aabfff88b90c98639d86ce36d33c46a1da6d9", "filename": "src/doc/unstable-book/src/main.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fmain.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fmain.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fmain.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `main`\n+\n+The tracking issue for this feature is: [#29634]\n+\n+[#29634]: https://github.com/rust-lang/rust/issues/29634\n+\n+------------------------\n+\n+\n+"}, {"sha": "e56ce4770aab00a78565e78e5d055243143e5465", "filename": "src/doc/unstable-book/src/naked-functions.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fnaked-functions.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fnaked-functions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnaked-functions.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `naked_functions`\n+\n+The tracking issue for this feature is: [#32408]\n+\n+[#32408]: https://github.com/rust-lang/rust/issues/32408\n+\n+------------------------\n+\n+\n+"}, {"sha": "22aa10b2183cb2f580a5e9c962cf007aaf0b079f", "filename": "src/doc/unstable-book/src/needs-allocator.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-allocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-allocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-allocator.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `needs_allocator`\n+\n+The tracking issue for this feature is: [#27389]\n+\n+[#27389]: https://github.com/rust-lang/rust/issues/27389\n+\n+------------------------\n+\n+\n+"}, {"sha": "627c946c1bb271fd9fd91b457ae7d85465fcb6d4", "filename": "src/doc/unstable-book/src/needs-panic-runtime.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-panic-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-panic-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fneeds-panic-runtime.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `needs_panic_runtime`\n+\n+The tracking issue for this feature is: [#32837]\n+\n+[#32837]: https://github.com/rust-lang/rust/issues/32837\n+\n+------------------------\n+\n+\n+"}, {"sha": "3b3729a4b21d79ee0ce5b218cca43fe3919be5e2", "filename": "src/doc/unstable-book/src/never-type.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnever-type.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `never_type`\n+\n+The tracking issue for this feature is: [#35121]\n+\n+[#35121]: https://github.com/rust-lang/rust/issues/35121\n+\n+------------------------\n+\n+\n+"}, {"sha": "6238753447c9cdd01ab7868451bf2956e0d8411c", "filename": "src/doc/unstable-book/src/no-core.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-core.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-core.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-core.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `no_core`\n+\n+The tracking issue for this feature is: [#29639]\n+\n+[#29639]: https://github.com/rust-lang/rust/issues/29639\n+\n+------------------------\n+\n+\n+"}, {"sha": "7536ed9d4e106e3469db46bc0ec5639cf28c4838", "filename": "src/doc/unstable-book/src/no-debug.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-debug.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-debug.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fno-debug.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `no_debug`\n+\n+The tracking issue for this feature is: [#29721]\n+\n+[#29721]: https://github.com/rust-lang/rust/issues/29721\n+\n+------------------------\n+\n+\n+"}, {"sha": "f426022ab3a5161cc05a24b30912ad84605b7270", "filename": "src/doc/unstable-book/src/non-ascii-idents.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `non_ascii_idents`\n+\n+The tracking issue for this feature is: [#28979]\n+\n+[#28979]: https://github.com/rust-lang/rust/issues/28979\n+\n+------------------------\n+\n+\n+"}, {"sha": "d8ac520fcb5e2cd1e008566fdbacbfd7482cbb00", "filename": "src/doc/unstable-book/src/omit-gdb-pretty-printer-section.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fomit-gdb-pretty-printer-section.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fomit-gdb-pretty-printer-section.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fomit-gdb-pretty-printer-section.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `omit_gdb_pretty_printer_section`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "81f284d0a6a3e0bb52573dd92ba162ea2ebb2d3a", "filename": "src/doc/unstable-book/src/on-unimplemented.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fon-unimplemented.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `on_unimplemented`\n+\n+The tracking issue for this feature is: [#29628]\n+\n+[#29628]: https://github.com/rust-lang/rust/issues/29628\n+\n+------------------------\n+\n+\n+"}, {"sha": "0b2d60accd59a95a3049cf7d5dd7ddc5c0342b2b", "filename": "src/doc/unstable-book/src/optin-builtin-traits.md", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Foptin-builtin-traits.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,9 @@\n+# `optin_builtin_traits`\n+\n+The tracking issue for this feature is: [#13231]\n+\n+[#13231]: https://github.com/rust-lang/rust/issues/13231\n+\n+------------------------\n+\n+"}, {"sha": "65b067e8296131e8ade4df36e8ba7b2b9a9369d2", "filename": "src/doc/unstable-book/src/panic-runtime.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpanic-runtime.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `panic_runtime`\n+\n+The tracking issue for this feature is: [#32837]\n+\n+[#32837]: https://github.com/rust-lang/rust/issues/32837\n+\n+------------------------\n+\n+\n+"}, {"sha": "da12559a01b86b0935695b1b84c798621d6ec48e", "filename": "src/doc/unstable-book/src/placement-in-syntax.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplacement-in-syntax.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `placement_in_syntax`\n+\n+The tracking issue for this feature is: [#27779]\n+\n+[#27779]: https://github.com/rust-lang/rust/issues/27779\n+\n+------------------------\n+\n+\n+"}, {"sha": "377ac8f7342ef0e36698392230981d27198e31d8", "filename": "src/doc/unstable-book/src/platform-intrinsics.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fplatform-intrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fplatform-intrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplatform-intrinsics.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `platform_intrinsics`\n+\n+The tracking issue for this feature is: [#27731]\n+\n+[#27731]: https://github.com/rust-lang/rust/issues/27731\n+\n+------------------------\n+\n+\n+"}, {"sha": "ca3738bd93f831dbb5b5955f2d227468f121c7f9", "filename": "src/doc/unstable-book/src/plugin-registrar.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin-registrar.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin-registrar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin-registrar.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,13 @@\n+# `plugin_registrar`\n+\n+The tracking issue for this feature is: [#29597]\n+\n+[#29597]: https://github.com/rust-lang/rust/issues/29597\n+\n+This feature is part of \"compiler plugins.\" It will often be used with the\n+[`plugin`] and `rustc_private` features as well. For more details, see\n+their docs.\n+\n+[`plugin`]: plugin.html\n+\n+------------------------"}, {"sha": "ca69b7084d3e64b903beb8d8674f90a096786c24", "filename": "src/doc/unstable-book/src/plugin.md", "status": "added", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fplugin.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,263 @@\n+# `plugin`\n+\n+The tracking issue for this feature is: [#29597]\n+\n+[#29597]: https://github.com/rust-lang/rust/issues/29597\n+\n+\n+This feature is part of \"compiler plugins.\" It will often be used with the\n+[`plugin_registrar`] and `rustc_private` features.\n+\n+[`plugin_registrar`]: plugin-registrar.html\n+\n+------------------------\n+\n+`rustc` can load compiler plugins, which are user-provided libraries that\n+extend the compiler's behavior with new syntax extensions, lint checks, etc.\n+\n+A plugin is a dynamic library crate with a designated *registrar* function that\n+registers extensions with `rustc`. Other crates can load these extensions using\n+the crate attribute `#![plugin(...)]`.  See the\n+`rustc_plugin` documentation for more about the\n+mechanics of defining and loading a plugin.\n+\n+If present, arguments passed as `#![plugin(foo(... args ...))]` are not\n+interpreted by rustc itself.  They are provided to the plugin through the\n+`Registry`'s `args` method.\n+\n+In the vast majority of cases, a plugin should *only* be used through\n+`#![plugin]` and not through an `extern crate` item.  Linking a plugin would\n+pull in all of libsyntax and librustc as dependencies of your crate.  This is\n+generally unwanted unless you are building another plugin.  The\n+`plugin_as_library` lint checks these guidelines.\n+\n+The usual practice is to put compiler plugins in their own crate, separate from\n+any `macro_rules!` macros or ordinary Rust code meant to be used by consumers\n+of a library.\n+\n+# Syntax extensions\n+\n+Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n+is the procedural macro. These are invoked the same way as [ordinary\n+macros](../book/macros.html), but the expansion is performed by arbitrary Rust\n+code that manipulates syntax trees at\n+compile time.\n+\n+Let's write a plugin\n+[`roman_numerals.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/roman_numerals.rs)\n+that implements Roman numeral integer literals.\n+\n+```rust,ignore\n+#![crate_type=\"dylib\"]\n+#![feature(plugin_registrar, rustc_private)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+extern crate rustc_plugin;\n+\n+use syntax::parse::token;\n+use syntax::tokenstream::TokenTree;\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n+use syntax::ext::build::AstBuilder;  // A trait for expr_usize.\n+use syntax::ext::quote::rt::Span;\n+use rustc_plugin::Registry;\n+\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult + 'static> {\n+\n+    static NUMERALS: &'static [(&'static str, usize)] = &[\n+        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n+        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n+        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n+        (\"I\",    1)];\n+\n+    if args.len() != 1 {\n+        cx.span_err(\n+            sp,\n+            &format!(\"argument should be a single identifier, but got {} arguments\", args.len()));\n+        return DummyResult::any(sp);\n+    }\n+\n+    let text = match args[0] {\n+        TokenTree::Token(_, token::Ident(s)) => s.to_string(),\n+        _ => {\n+            cx.span_err(sp, \"argument should be a single identifier\");\n+            return DummyResult::any(sp);\n+        }\n+    };\n+\n+    let mut text = &*text;\n+    let mut total = 0;\n+    while !text.is_empty() {\n+        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n+            Some(&(rn, val)) => {\n+                total += val;\n+                text = &text[rn.len()..];\n+            }\n+            None => {\n+                cx.span_err(sp, \"invalid Roman numeral\");\n+                return DummyResult::any(sp);\n+            }\n+        }\n+    }\n+\n+    MacEager::expr(cx.expr_usize(sp, total))\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_macro(\"rn\", expand_rn);\n+}\n+```\n+\n+Then we can use `rn!()` like any other macro:\n+\n+```rust,ignore\n+#![feature(plugin)]\n+#![plugin(roman_numerals)]\n+\n+fn main() {\n+    assert_eq!(rn!(MMXV), 2015);\n+}\n+```\n+\n+The advantages over a simple `fn(&str) -> u32` are:\n+\n+* The (arbitrarily complex) conversion is done at compile time.\n+* Input validation is also performed at compile time.\n+* It can be extended to allow use in patterns, which effectively gives\n+  a way to define new literal syntax for any data type.\n+\n+In addition to procedural macros, you can define new\n+[`derive`](../reference/attributes.html#derive)-like attributes and other kinds\n+of extensions.  See `Registry::register_syntax_extension` and the\n+`SyntaxExtension` enum.  For a more involved macro example, see\n+[`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n+\n+\n+## Tips and tricks\n+\n+Some of the [macro debugging tips](../book/macros.html#debugging-macro-code) are applicable.\n+\n+You can use `syntax::parse` to turn token trees into\n+higher-level syntax elements like expressions:\n+\n+```rust,ignore\n+fn expand_foo(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult+'static> {\n+\n+    let mut parser = cx.new_parser_from_tts(args);\n+\n+    let expr: P<Expr> = parser.parse_expr();\n+```\n+\n+Looking through [`libsyntax` parser\n+code](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs)\n+will give you a feel for how the parsing infrastructure works.\n+\n+Keep the `Span`s of everything you parse, for better error reporting. You can\n+wrap `Spanned` around your custom data structures.\n+\n+Calling `ExtCtxt::span_fatal` will immediately abort compilation. It's better to\n+instead call `ExtCtxt::span_err` and return `DummyResult` so that the compiler\n+can continue and find further errors.\n+\n+To print syntax fragments for debugging, you can use `span_note` together with\n+`syntax::print::pprust::*_to_string`.\n+\n+The example above produced an integer literal using `AstBuilder::expr_usize`.\n+As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n+quasiquote macros. They are undocumented and very rough around the edges.\n+However, the implementation may be a good starting point for an improved\n+quasiquote as an ordinary plugin library.\n+\n+\n+# Lint plugins\n+\n+Plugins can extend [Rust's lint\n+infrastructure](../reference/attributes.html#lint-check-attributes) with\n+additional checks for code style, safety, etc. Now let's write a plugin\n+[`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/run-pass-fulldeps/auxiliary/lint_plugin_test.rs)\n+that warns about any item named `lintme`.\n+\n+```rust,ignore\n+#![feature(plugin_registrar)]\n+#![feature(box_syntax, rustc_private)]\n+\n+extern crate syntax;\n+\n+// Load rustc as a plugin to get macros\n+#[macro_use]\n+extern crate rustc;\n+extern crate rustc_plugin;\n+\n+use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n+                  EarlyLintPassObject, LintArray};\n+use rustc_plugin::Registry;\n+use syntax::ast;\n+\n+declare_lint!(TEST_LINT, Warn, \"Warn about items named 'lintme'\");\n+\n+struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT)\n+    }\n+}\n+\n+impl EarlyLintPass for Pass {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n+        if it.ident.name.as_str() == \"lintme\" {\n+            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_early_lint_pass(box Pass as EarlyLintPassObject);\n+}\n+```\n+\n+Then code like\n+\n+```rust,ignore\n+#![plugin(lint_plugin_test)]\n+\n+fn lintme() { }\n+```\n+\n+will produce a compiler warning:\n+\n+```txt\n+foo.rs:4:1: 4:16 warning: item is named 'lintme', #[warn(test_lint)] on by default\n+foo.rs:4 fn lintme() { }\n+         ^~~~~~~~~~~~~~~\n+```\n+\n+The components of a lint plugin are:\n+\n+* one or more `declare_lint!` invocations, which define static `Lint` structs;\n+\n+* a struct holding any state needed by the lint pass (here, none);\n+\n+* a `LintPass`\n+  implementation defining how to check each syntax element. A single\n+  `LintPass` may call `span_lint` for several different `Lint`s, but should\n+  register them all through the `get_lints` method.\n+\n+Lint passes are syntax traversals, but they run at a late stage of compilation\n+where type information is available. `rustc`'s [built-in\n+lints](https://github.com/rust-lang/rust/blob/master/src/librustc/lint/builtin.rs)\n+mostly use the same infrastructure as lint plugins, and provide examples of how\n+to access type information.\n+\n+Lints defined by plugins are controlled by the usual [attributes and compiler\n+flags](../reference/attributes.html#lint-check-attributes), e.g.\n+`#[allow(test_lint)]` or `-A test-lint`. These identifiers are derived from the\n+first argument to `declare_lint!`, with appropriate case and punctuation\n+conversion.\n+\n+You can run `rustc -W help foo.rs` to see a list of lints known to `rustc`,\n+including those provided by plugins loaded by `foo.rs`."}, {"sha": "75dae5cfb7401b0c8766dfb1cd0adea459b0bf00", "filename": "src/doc/unstable-book/src/prelude-import.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fprelude-import.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fprelude-import.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fprelude-import.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `prelude_import`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "f8b53bd5a2fd398a9119c3b1506dff84550f4db3", "filename": "src/doc/unstable-book/src/proc-macro.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fproc-macro.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `proc_macro`\n+\n+The tracking issue for this feature is: [#38356]\n+\n+[#38356]: https://github.com/rust-lang/rust/issues/38356\n+\n+------------------------\n+\n+\n+"}, {"sha": "730461813cbec5fe56e6aeae9d2a670683e012d9", "filename": "src/doc/unstable-book/src/pub-restricted.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fpub-restricted.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `pub_restricted`\n+\n+The tracking issue for this feature is: [#32409]\n+\n+[#32409]: https://github.com/rust-lang/rust/issues/32409\n+\n+------------------------\n+\n+\n+"}, {"sha": "b4e078d920c4eec9f12852cb9a36cbf4c22cb003", "filename": "src/doc/unstable-book/src/quote.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fquote.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fquote.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fquote.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `quote`\n+\n+The tracking issue for this feature is: [#29601]\n+\n+[#29601]: https://github.com/rust-lang/rust/issues/29601\n+\n+------------------------\n+\n+\n+"}, {"sha": "170570e06a2ed828c583c5033c5237e973f02345", "filename": "src/doc/unstable-book/src/relaxed-adts.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Frelaxed-adts.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Frelaxed-adts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frelaxed-adts.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `relaxed_adts`\n+\n+The tracking issue for this feature is: [#35626]\n+\n+[#35626]: https://github.com/rust-lang/rust/issues/35626\n+\n+------------------------\n+\n+\n+"}, {"sha": "c6f051e4fffc1220b137bf8947c49b25d46bf6f5", "filename": "src/doc/unstable-book/src/repr-simd.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Frepr-simd.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Frepr-simd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frepr-simd.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `repr_simd`\n+\n+The tracking issue for this feature is: [#27731]\n+\n+[#27731]: https://github.com/rust-lang/rust/issues/27731\n+\n+------------------------\n+\n+\n+"}, {"sha": "d1f18cead068372c9c7991ca8f6afe570cd9587f", "filename": "src/doc/unstable-book/src/rustc-attrs.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-attrs.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `rustc_attrs`\n+\n+The tracking issue for this feature is: [#29642]\n+\n+[#29642]: https://github.com/rust-lang/rust/issues/29642\n+\n+------------------------\n+\n+\n+"}, {"sha": "0df6ca12089eebf94b7ed3243c74ae2b0ec2497d", "filename": "src/doc/unstable-book/src/rustc-diagnostic-macros.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-diagnostic-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-diagnostic-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Frustc-diagnostic-macros.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `rustc_diagnostic_macros`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "f19504de58e120ff98c04ca921bc071a7735d9ba", "filename": "src/doc/unstable-book/src/sanitizer-runtime.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsanitizer-runtime.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `sanitizer_runtime`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "d85779c3d3dc9c9171d7e7df869a0a21733c18f5", "filename": "src/doc/unstable-book/src/simd-ffi.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd-ffi.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `simd_ffi`\n+\n+The tracking issue for this feature is: [#27731]\n+\n+[#27731]: https://github.com/rust-lang/rust/issues/27731\n+\n+------------------------\n+\n+\n+"}, {"sha": "13c9722c5243a0250c51d82eac5b80f27740fbe2", "filename": "src/doc/unstable-book/src/simd.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsimd.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `simd`\n+\n+The tracking issue for this feature is: [#27731]\n+\n+[#27731]: https://github.com/rust-lang/rust/issues/27731\n+\n+------------------------\n+\n+\n+"}, {"sha": "1e9e1eaafda46dade9f4c92cc49035259251d6e0", "filename": "src/doc/unstable-book/src/slice-patterns.md", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fslice-patterns.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,27 @@\n+# `slice_patterns`\n+\n+The tracking issue for this feature is: [#23121]\n+\n+[#23121]: https://github.com/rust-lang/rust/issues/23121\n+\n+See also [`advanced_slice_patterns`](advanced-slice-patterns.html).\n+\n+------------------------\n+\n+\n+If you want to match against a slice or array, you can use `&` with the\n+`slice_patterns` feature:\n+\n+```rust\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    let v = vec![\"match_this\", \"1\"];\n+\n+    match &v[..] {\n+        &[\"match_this\", second] => println!(\"The second element is {}\", second),\n+        _ => {},\n+    }\n+}\n+```\n+"}, {"sha": "59f27343b66df37f6075f3182d98753500f2739c", "filename": "src/doc/unstable-book/src/specialization.md", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fspecialization.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,8 @@\n+# `specialization`\n+\n+The tracking issue for this feature is: [#31844]\n+\n+------------------------\n+\n+\n+"}, {"sha": "1409e570e887ba1cfe6ae87834e6d6d481000d93", "filename": "src/doc/unstable-book/src/staged-api.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstaged-api.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstaged-api.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstaged-api.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `staged_api`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "1ea6d59c78d5b46362ce83fdb334b3fc08c56874", "filename": "src/doc/unstable-book/src/start.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstart.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstart.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstart.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `start`\n+\n+The tracking issue for this feature is: [#29633]\n+\n+[#29633]: https://github.com/rust-lang/rust/issues/29633\n+\n+------------------------\n+\n+\n+"}, {"sha": "97b9d71d433a4b5a2e8089ccc3956968def71681", "filename": "src/doc/unstable-book/src/static-nobundle.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-nobundle.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-nobundle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-nobundle.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `static_nobundle`\n+\n+The tracking issue for this feature is: [#37403]\n+\n+[#37403]: https://github.com/rust-lang/rust/issues/37403\n+\n+------------------------\n+\n+\n+"}, {"sha": "d419ea41c6ffb264b330ec100b6ab386078f6c3e", "filename": "src/doc/unstable-book/src/static-recursion.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstatic-recursion.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `static_recursion`\n+\n+The tracking issue for this feature is: [#29719]\n+\n+[#29719]: https://github.com/rust-lang/rust/issues/29719\n+\n+------------------------\n+\n+\n+"}, {"sha": "71092fcf29040e5635b95db92fcedbde94c9b011", "filename": "src/doc/unstable-book/src/stmt-expr-attributes.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstmt-expr-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstmt-expr-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstmt-expr-attributes.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `stmt_expr_attributes`\n+\n+The tracking issue for this feature is: [#15701]\n+\n+[#15701]: https://github.com/rust-lang/rust/issues/15701\n+\n+------------------------\n+\n+\n+"}, {"sha": "1a94562968d192a11db9be21bda24c6f2e7f081e", "filename": "src/doc/unstable-book/src/struct-field-attributes.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstruct-field-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstruct-field-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstruct-field-attributes.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `struct_field_attributes`\n+\n+The tracking issue for this feature is: [#38814]\n+\n+[#38814]: https://github.com/rust-lang/rust/issues/38814\n+\n+------------------------\n+\n+\n+"}, {"sha": "b3ca26e6474deffcc886999d9ccfdd4841b7ccca", "filename": "src/doc/unstable-book/src/structural-match.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstructural-match.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fstructural-match.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fstructural-match.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `structural_match`\n+\n+The tracking issue for this feature is: [#31434]\n+\n+[#31434]: https://github.com/rust-lang/rust/issues/31434\n+\n+------------------------\n+\n+\n+"}, {"sha": "85ab1ab39efe643901cdd7e1a7fe4457dca80f99", "filename": "src/doc/unstable-book/src/target-feature.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ftarget-feature.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ftarget-feature.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftarget-feature.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `target_feature`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "6b4a3a677db61a75427365a435901103b6c09b7b", "filename": "src/doc/unstable-book/src/test.md", "status": "renamed", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ftest.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ftest.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftest.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -1,7 +1,13 @@\n-# Benchmark tests\n+# `test`\n \n-Rust supports benchmark tests, which can test the performance of your\n-code. Let's make our `src/lib.rs` look like this (comments elided):\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+\n+The internals of the `test` crate are unstable, behind the `test` flag.  The\n+most widely used part of the `test` crate are benchmark tests, which can test\n+the performance of your code.  Let's make our `src/lib.rs` look like this\n+(comments elided):\n \n ```rust,ignore\n #![feature(test)]", "previous_filename": "src/doc/book/src/benchmark-tests.md"}, {"sha": "dfbfe4cab97381c37e57823b5a47aed57f346605", "filename": "src/doc/unstable-book/src/the-unstable-book.md", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthe-unstable-book.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,22 @@\n+# The Unstable Book\n+\n+Welcome to the Unstable Book! This book consists of a number of chapters,\n+each one organized by a \"feature flag.\" That is, when using an unstable\n+feature of Rust, you must use a flag, like this:\n+\n+```rust\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let five = box 5;\n+}\n+```\n+\n+The `box_syntax` feature [has a chapter][box] describing how to use it.\n+\n+[box]: box-syntax.html\n+\n+Because this documentation relates to unstable features, we make no guarantees\n+that what is contained here is accurate or up to date. It's developed on a\n+best-effort basis. Each page will have a link to its tracking issue with the\n+latest developments; you might want to check those as well."}, {"sha": "83de2f9cd4b5471a88f99711ffd193eda0c0e85c", "filename": "src/doc/unstable-book/src/thread-local.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fthread-local.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `thread_local`\n+\n+The tracking issue for this feature is: [#29594]\n+\n+[#29594]: https://github.com/rust-lang/rust/issues/29594\n+\n+------------------------\n+\n+\n+"}, {"sha": "856f1b0a7bbb05446adfaaeffa7f37c69777cba4", "filename": "src/doc/unstable-book/src/trace-macros.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrace-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrace-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftrace-macros.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `trace_macros`\n+\n+The tracking issue for this feature is: [#29598]\n+\n+[#29598]: https://github.com/rust-lang/rust/issues/29598\n+\n+------------------------\n+\n+\n+"}, {"sha": "3ebd0d87ccff995850e909133571ebe1d4482be2", "filename": "src/doc/unstable-book/src/type-ascription.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ftype-ascription.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Ftype-ascription.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftype-ascription.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `type_ascription`\n+\n+The tracking issue for this feature is: [#23416]\n+\n+[#23416]: https://github.com/rust-lang/rust/issues/23416\n+\n+------------------------\n+\n+\n+"}, {"sha": "2cbb436ce0bb16446d45fb2299fc85ee09cc530d", "filename": "src/doc/unstable-book/src/unboxed-closures.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funboxed-closures.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `unboxed_closures`\n+\n+The tracking issue for this feature is: [#29625]\n+\n+[#29625]: https://github.com/rust-lang/rust/issues/29625\n+\n+------------------------\n+\n+\n+"}, {"sha": "6fe4f088ac237fcf9b0e83b3ec439af1a9067cf3", "filename": "src/doc/unstable-book/src/untagged-unions.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Funtagged-unions.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Funtagged-unions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funtagged-unions.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `untagged_unions`\n+\n+The tracking issue for this feature is: [#32836]\n+\n+[#32836]: https://github.com/rust-lang/rust/issues/32836\n+\n+------------------------\n+\n+\n+"}, {"sha": "0167a33b081a568bf32c0f46daea4b86bf3714d1", "filename": "src/doc/unstable-book/src/unwind-attributes.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Funwind-attributes.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Funwind-attributes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Funwind-attributes.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,6 @@\n+# `unwind_attributes`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+"}, {"sha": "bc6149115028f393940206e04a62ea25df39314b", "filename": "src/doc/unstable-book/src/use-extern-macros.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fuse-extern-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fuse-extern-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fuse-extern-macros.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `use_extern_macros`\n+\n+The tracking issue for this feature is: [#35896]\n+\n+[#35896]: https://github.com/rust-lang/rust/issues/35896\n+\n+------------------------\n+\n+\n+"}, {"sha": "80583352fbf967d5a77b9d525b3d993f7a2525fc", "filename": "src/doc/unstable-book/src/windows-subsystem.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fwindows-subsystem.md?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -0,0 +1,10 @@\n+# `windows_subsystem`\n+\n+The tracking issue for this feature is: [#37499]\n+\n+[#37499]: https://github.com/rust-lang/rust/issues/37499\n+\n+------------------------\n+\n+\n+"}, {"sha": "b7be084fa0bab8453b078b507bf320572ad22a5a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bfe45974a18af63191d40a6ac5beb0cf2ab9c9f7", "patch": "@@ -91,11 +91,14 @@ macro_rules! declare_features {\n     }\n }\n \n-// If you change this list without updating src/doc/reference.md, @cmr will be sad\n+// If you change this, please modify src/doc/unstable-book as well.\n+//\n // Don't ever remove anything from this list; set them to 'Removed'.\n+//\n // The version numbers here correspond to the version in which the current status\n // was set. This is most important for knowing when a particular feature became\n // stable (active).\n+//\n // NB: The featureck.py script parses this information directly out of the source\n // so take care when modifying it.\n \n@@ -385,7 +388,9 @@ declare_features! (\n     // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n     (accepted, field_init_shorthand, \"1.17.0\", Some(37340)),\n );\n-// (changing above list without updating src/doc/reference.md makes @cmr sad)\n+// If you change this, please modify src/doc/unstable-book as well. You must\n+// move that documentation into the relevant place in the other docs, and\n+// remove the chapter on the flag.\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n pub enum AttributeType {"}]}