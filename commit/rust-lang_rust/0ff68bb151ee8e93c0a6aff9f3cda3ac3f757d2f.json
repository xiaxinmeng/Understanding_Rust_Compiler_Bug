{"sha": "0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZjY4YmIxNTFlZThlOTNjMGE2YWZmOWYzY2RhM2FjM2Y3NTdkMmY=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-26T02:30:14Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-26T02:30:14Z"}, "message": "Improve `redundant_slicing`\nFix bad suggestion when a reborrow might be required\nFix bad suggestion when the value being sliced is a macro call\nDon't lint inside of a macro due to the previous context sensitive changes", "tree": {"sha": "b235081a0266454f53b5141ead29743da136123c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b235081a0266454f53b5141ead29743da136123c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBdR5YACgkQ2lnoZDo37QbWCQEAqFDZyrvFORFzWcsFpe61gQPd\nJVkX3MULKDHHQ8URqoEBALseGi7zWJ+drgLdZ80QhFdLjHREghDcbLX7Cb0gU+cD\n=AvwO\n-----END PGP SIGNATURE-----", "payload": "tree b235081a0266454f53b5141ead29743da136123c\nparent f41d68faa6ecaf8756ee72d329e4ba50aaac525d\nauthor Jason Newcomb <jsnewcomb@pm.me> 1616725814 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1616725814 -0400\n\nImprove `redundant_slicing`\nFix bad suggestion when a reborrow might be required\nFix bad suggestion when the value being sliced is a macro call\nDon't lint inside of a macro due to the previous context sensitive changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f", "html_url": "https://github.com/rust-lang/rust/commit/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f41d68faa6ecaf8756ee72d329e4ba50aaac525d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f41d68faa6ecaf8756ee72d329e4ba50aaac525d", "html_url": "https://github.com/rust-lang/rust/commit/f41d68faa6ecaf8756ee72d329e4ba50aaac525d"}], "stats": {"total": 98, "additions": 78, "deletions": 20}, "files": [{"sha": "9c6cd7b4fa625f0200a16891a1ac4ea7331b22dd", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f", "patch": "@@ -1,11 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::is_type_lang_item;\n+use clippy_utils::{get_parent_expr, in_macro};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, LangItem};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::{lint::in_external_macro, ty::TyS};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::TyS;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -40,26 +41,44 @@ declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING]);\n \n impl LateLintPass<'_> for RedundantSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if in_macro(expr.span) {\n             return;\n         }\n \n+        let ctxt = expr.span.ctxt();\n         if_chain! {\n-            if let ExprKind::AddrOf(_, _, addressee) = expr.kind;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, mutability, addressee) = expr.kind;\n+            if addressee.span.ctxt() == ctxt;\n             if let ExprKind::Index(indexed, range) = addressee.kind;\n             if is_type_lang_item(cx, cx.typeck_results().expr_ty_adjusted(range), LangItem::RangeFull);\n             if TyS::same_type(cx.typeck_results().expr_ty(expr), cx.typeck_results().expr_ty(indexed));\n             then {\n                 let mut app = Applicability::MachineApplicable;\n-                let hint = snippet_with_applicability(cx, indexed.span, \"..\", &mut app).into_owned();\n+                let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n+\n+                let (reborrow_str, help_str) = if mutability == Mutability::Mut {\n+                    // The slice was used to reborrow the mutable reference.\n+                    (\"&mut *\", \"reborrow the original value instead\")\n+                } else if matches!(\n+                    get_parent_expr(cx, expr),\n+                    Some(Expr {\n+                        kind: ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, _),\n+                        ..\n+                    })\n+                ) {\n+                    // The slice was used to make a temporary reference.\n+                    (\"&*\", \"reborrow the original value instead\")\n+                } else {\n+                    (\"\", \"use the original value instead\")\n+                };\n \n                 span_lint_and_sugg(\n                     cx,\n                     REDUNDANT_SLICING,\n                     expr.span,\n                     \"redundant slicing of the whole range\",\n-                    \"use the original slice instead\",\n-                    hint,\n+                    help_str,\n+                    format!(\"{}{}\", reborrow_str, snip),\n                     app,\n                 );\n             }"}, {"sha": "554b6ba36ae0dd0451598c3beabb8d5390a38a99", "filename": "tests/ui/redundant_slicing.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f/tests%2Fui%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f/tests%2Fui%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.rs?ref=0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f", "patch": "@@ -2,10 +2,31 @@\n #![warn(clippy::redundant_slicing)]\n \n fn main() {\n-    let x: &[u32] = &[0];\n-    let err = &x[..];\n+    let slice: &[u32] = &[0];\n+    let _ = &slice[..];\n \n     let v = vec![0];\n-    let ok = &v[..];\n-    let err = &(&v[..])[..];\n+    let _ = &v[..]; // Changes the type\n+    let _ = &(&v[..])[..]; // Outer borrow is redundant\n+\n+    static S: &[u8] = &[0, 1, 2];\n+    let err = &mut &S[..]; // Should reborrow instead of slice\n+\n+    let mut vec = vec![0];\n+    let mut_slice = &mut *vec;\n+    let _ = &mut mut_slice[..]; // Should reborrow instead of slice\n+\n+    macro_rules! m {\n+        ($e:expr) => {\n+            $e\n+        };\n+    }\n+    let _ = &m!(slice)[..];\n+\n+    macro_rules! m2 {\n+        ($e:expr) => {\n+            &$e[..]\n+        };\n+    }\n+    let _ = m2!(slice); // Don't lint in a macro\n }"}, {"sha": "bbd10eafbbe7807e3e9b8f8e96fc8ada4936b999", "filename": "tests/ui/redundant_slicing.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f/tests%2Fui%2Fredundant_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f/tests%2Fui%2Fredundant_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_slicing.stderr?ref=0ff68bb151ee8e93c0a6aff9f3cda3ac3f757d2f", "patch": "@@ -1,16 +1,34 @@\n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:6:15\n+  --> $DIR/redundant_slicing.rs:6:13\n    |\n-LL |     let err = &x[..];\n-   |               ^^^^^^ help: use the original slice instead: `x`\n+LL |     let _ = &slice[..];\n+   |             ^^^^^^^^^^ help: use the original value instead: `slice`\n    |\n    = note: `-D clippy::redundant-slicing` implied by `-D warnings`\n \n error: redundant slicing of the whole range\n-  --> $DIR/redundant_slicing.rs:10:15\n+  --> $DIR/redundant_slicing.rs:10:13\n    |\n-LL |     let err = &(&v[..])[..];\n-   |               ^^^^^^^^^^^^^ help: use the original slice instead: `(&v[..])`\n+LL |     let _ = &(&v[..])[..]; // Outer borrow is redundant\n+   |             ^^^^^^^^^^^^^ help: use the original value instead: `(&v[..])`\n \n-error: aborting due to 2 previous errors\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:13:20\n+   |\n+LL |     let err = &mut &S[..]; // Should reborrow instead of slice\n+   |                    ^^^^^^ help: reborrow the original value instead: `&*S`\n+\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:17:13\n+   |\n+LL |     let _ = &mut mut_slice[..]; // Should reborrow instead of slice\n+   |             ^^^^^^^^^^^^^^^^^^ help: reborrow the original value instead: `&mut *mut_slice`\n+\n+error: redundant slicing of the whole range\n+  --> $DIR/redundant_slicing.rs:24:13\n+   |\n+LL |     let _ = &m!(slice)[..];\n+   |             ^^^^^^^^^^^^^^ help: use the original value instead: `slice`\n+\n+error: aborting due to 5 previous errors\n "}]}