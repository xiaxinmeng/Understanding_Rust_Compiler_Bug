{"sha": "243c8e91cffa9acfbbf8c1a81e5af0d8e6498299", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0M2M4ZTkxY2ZmYTlhY2ZiYmY4YzFhODFlNWFmMGQ4ZTY0OTgyOTk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-20T20:23:11Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-20T20:23:34Z"}, "message": "Apply some review suggestions", "tree": {"sha": "5eea4ee30edb6fcf66f4ff910f1d170d1c9a57c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eea4ee30edb6fcf66f4ff910f1d170d1c9a57c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/243c8e91cffa9acfbbf8c1a81e5af0d8e6498299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/243c8e91cffa9acfbbf8c1a81e5af0d8e6498299", "html_url": "https://github.com/rust-lang/rust/commit/243c8e91cffa9acfbbf8c1a81e5af0d8e6498299", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/243c8e91cffa9acfbbf8c1a81e5af0d8e6498299/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48060f1a63aa8b1ae04b34c3597f691d4b5e13db", "url": "https://api.github.com/repos/rust-lang/rust/commits/48060f1a63aa8b1ae04b34c3597f691d4b5e13db", "html_url": "https://github.com/rust-lang/rust/commit/48060f1a63aa8b1ae04b34c3597f691d4b5e13db"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "b487b39952174790d93702ad450406504b7efdbb", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/243c8e91cffa9acfbbf8c1a81e5af0d8e6498299/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243c8e91cffa9acfbbf8c1a81e5af0d8e6498299/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=243c8e91cffa9acfbbf8c1a81e5af0d8e6498299", "patch": "@@ -8,7 +8,7 @@ use crate::html::layout;\n use crate::html::render::{SharedContext, BASIC_KEYWORDS};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_span::source_map::FileName;\n-use std::ffi::{OsStr, OsString};\n+use std::ffi::OsStr;\n use std::fs;\n use std::path::{Component, Path, PathBuf};\n \n@@ -100,13 +100,13 @@ impl<'a> SourceCollector<'a> {\n         });\n         self.scx.ensure_dir(&cur)?;\n \n-        let src_fname =\n-            String::from(p.file_name().expect(\"source has no filename\").to_string_lossy());\n-        let fname = OsString::from(src_fname.clone() + \".html\");\n+        let src_fname = p.file_name().expect(\"source has no filename\").to_os_string();\n+        let mut fname = src_fname.clone();\n+        fname.push(\".html\");\n         cur.push(&fname);\n         href.push_str(&fname.to_string_lossy());\n \n-        let title = format!(\"{} \u2013 source\", src_fname,);\n+        let title = format!(\"{} - source\", src_fname.to_string_lossy());\n         let desc = format!(\"Source of the Rust file `{}`.\", filename);\n         let page = layout::Page {\n             title: &title,"}]}