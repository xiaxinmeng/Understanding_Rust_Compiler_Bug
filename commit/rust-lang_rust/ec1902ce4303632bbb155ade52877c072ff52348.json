{"sha": "ec1902ce4303632bbb155ade52877c072ff52348", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMTkwMmNlNDMwMzYzMmJiYjE1NWFkZTUyODc3YzA3MmZmNTIzNDg=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-27T15:20:32Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-23T01:18:11Z"}, "message": "cargo dev crater: throw an error if we can't find our specified crate in the .toml list", "tree": {"sha": "6bc8ad187c773044a221858b59b1f4246ff364b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bc8ad187c773044a221858b59b1f4246ff364b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec1902ce4303632bbb155ade52877c072ff52348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1902ce4303632bbb155ade52877c072ff52348", "html_url": "https://github.com/rust-lang/rust/commit/ec1902ce4303632bbb155ade52877c072ff52348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec1902ce4303632bbb155ade52877c072ff52348/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ef1e282ef4c444ce7e5694547aaff4d55c5059", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ef1e282ef4c444ce7e5694547aaff4d55c5059", "html_url": "https://github.com/rust-lang/rust/commit/b6ef1e282ef4c444ce7e5694547aaff4d55c5059"}], "stats": {"total": 73, "additions": 48, "deletions": 25}, "files": [{"sha": "0333a260db1185ba3d26c2c069f1a1f302321739", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec1902ce4303632bbb155ade52877c072ff52348/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec1902ce4303632bbb155ade52877c072ff52348/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=ec1902ce4303632bbb155ade52877c072ff52348", "patch": "@@ -4,20 +4,22 @@ version = \"0.0.1\"\n authors = [\"Philipp Hansch <dev@phansch.net>\"]\n edition = \"2018\"\n \n+\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n-flate2 = \"1.0.19\"\n+flate2 = { version = \"1.0.19\" , optional = true}\n itertools = \"0.9\"\n opener = \"0.4\"\n regex = \"1\"\n-serde = {version = \"1.0\", features = [\"derive\"]}\n-serde_json = \"1.0\"\n+serde = { version = \"1.0\", features = [\"derive\"]}\n+serde_json = { version = \"1.0\" , optional = true}\n shell-escape = \"0.1\"\n-tar = \"0.4.30\"\n-toml = \"0.5\"\n-ureq = \"2.0.0-rc3\"\n+tar = { version = \"0.4.30\" , optional = true}\n+toml = { version = \"0.5\" , optional = true}\n+ureq = { version = \"2.0.0-rc3\" , optional = true}\n walkdir = \"2\"\n \n [features]\n+crater = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\"]\n deny-warnings = []"}, {"sha": "61ada2c2f233ff7349389ad8fe06a26cc57f3af0", "filename": "clippy_dev/src/crater.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec1902ce4303632bbb155ade52877c072ff52348/clippy_dev%2Fsrc%2Fcrater.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1902ce4303632bbb155ade52877c072ff52348/clippy_dev%2Fsrc%2Fcrater.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fcrater.rs?ref=ec1902ce4303632bbb155ade52877c072ff52348", "patch": "@@ -4,6 +4,7 @@\n // When a new lint is introduced, we can search the results for new warnings and check for false\n // positives.\n \n+#![cfg(feature = \"crater\")]\n #![allow(clippy::filter_map)]\n \n use crate::clippy_project_root;\n@@ -218,17 +219,29 @@ pub fn run(clap_config: &ArgMatches) {\n     // download and extract the crates, then run clippy on them and collect clippys warnings\n     // flatten into one big list of warnings\n \n+    let crates = read_crates();\n+\n     let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n-        // only check a single\n-        read_crates()\n+        // if we don't have the specified crated in the .toml, throw an error\n+        if !crates.iter().any(|krate| krate.name == only_one_crate) {\n+            eprintln!(\n+                \"ERROR: could not find crate '{}' in clippy_dev/crater_crates.toml\",\n+                only_one_crate\n+            );\n+            std::process::exit(1);\n+        }\n+\n+        // only check a single crate that was passed via cmdline\n+        crates\n             .into_iter()\n             .map(|krate| krate.download_and_extract())\n             .filter(|krate| krate.name == only_one_crate)\n             .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))\n             .flatten()\n             .collect()\n     } else {\n-        read_crates()\n+        // check all crates (default)\n+        crates\n             .into_iter()\n             .map(|krate| krate.download_and_extract())\n             .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))"}, {"sha": "e10c3dbe0bd6f6d67aec29d30eab53bfae8fc7a9", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ec1902ce4303632bbb155ade52877c072ff52348/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1902ce4303632bbb155ade52877c072ff52348/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=ec1902ce4303632bbb155ade52877c072ff52348", "patch": "@@ -1,7 +1,10 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use clap::{App, Arg, ArgMatches, SubCommand};\n-use clippy_dev::{bless, crater, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n+use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n+\n+#[cfg(feature = \"crater\")]\n+use clippy_dev::crater;\n \n fn main() {\n     let matches = get_clap_config();\n@@ -10,6 +13,7 @@ fn main() {\n         (\"bless\", Some(matches)) => {\n             bless::bless(matches.is_present(\"ignore-timestamp\"));\n         },\n+        #[cfg(feature = \"crater\")]\n         (\"crater\", Some(matches)) => {\n             crater::run(&matches);\n         },\n@@ -49,8 +53,19 @@ fn main() {\n }\n \n fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    App::new(\"Clippy developer tooling\")\n-        .subcommand(\n+    #[cfg(feature = \"crater\")]\n+    let crater_sbcmd = SubCommand::with_name(\"crater\")\n+        .about(\"run clippy on a set of crates and check output\")\n+        .arg(\n+            Arg::with_name(\"only\")\n+                .takes_value(true)\n+                .value_name(\"CRATE\")\n+                .long(\"only\")\n+                .help(\"only process a single crate of the list\"),\n+        );\n+\n+    let app = App::new(\"Clippy developer tooling\")\n+            .subcommand(\n             SubCommand::with_name(\"bless\")\n                 .about(\"bless the test output changes\")\n                 .arg(\n@@ -59,17 +74,6 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         .help(\"Include files updated before clippy was built\"),\n                 ),\n         )\n-        .subcommand(\n-            SubCommand::with_name(\"crater\")\n-                .about(\"run clippy on a set of crates and check output\")\n-                .arg(\n-                    Arg::with_name(\"only\")\n-                        .takes_value(true)\n-                        .value_name(\"CRATE\")\n-                        .long(\"only\")\n-                        .help(\"only process a single crate of the list\"),\n-                ),\n-        )\n         .subcommand(\n             SubCommand::with_name(\"fmt\")\n                 .about(\"Run rustfmt on all projects and tests\")\n@@ -177,6 +181,10 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         .validator_os(serve::validate_port),\n                 )\n                 .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n-        )\n-        .get_matches()\n+        );\n+\n+    #[cfg(feature = \"crater\")]\n+    let app = app.subcommand(crater_sbcmd);\n+\n+    app.get_matches()\n }"}]}