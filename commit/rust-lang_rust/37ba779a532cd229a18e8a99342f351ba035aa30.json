{"sha": "37ba779a532cd229a18e8a99342f351ba035aa30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YmE3NzlhNTMyY2QyMjlhMThlOGE5OTM0MmYzNTFiYTAzNWFhMzA=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-06T09:30:40Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-11T10:40:24Z"}, "message": "move flat_map_identity to its own module", "tree": {"sha": "6a9bbd5496eb4d313cacf9706570fe2493b6589c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a9bbd5496eb4d313cacf9706570fe2493b6589c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ba779a532cd229a18e8a99342f351ba035aa30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ba779a532cd229a18e8a99342f351ba035aa30", "html_url": "https://github.com/rust-lang/rust/commit/37ba779a532cd229a18e8a99342f351ba035aa30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ba779a532cd229a18e8a99342f351ba035aa30/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f430384f04ee3ee62156a9e3060ba4d9054278b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f430384f04ee3ee62156a9e3060ba4d9054278b5", "html_url": "https://github.com/rust-lang/rust/commit/f430384f04ee3ee62156a9e3060ba4d9054278b5"}], "stats": {"total": 109, "additions": 59, "deletions": 50}, "files": [{"sha": "ce3194f8a2373ef809cacc548beee4938b7ef04f", "filename": "clippy_lints/src/methods/flat_map_identity.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/37ba779a532cd229a18e8a99342f351ba035aa30/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba779a532cd229a18e8a99342f351ba035aa30/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs?ref=37ba779a532cd229a18e8a99342f351ba035aa30", "patch": "@@ -0,0 +1,57 @@\n+use crate::utils::{match_qpath, match_trait_method, paths, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::Span;\n+\n+use super::FLAT_MAP_IDENTITY;\n+\n+/// lint use of `flat_map` for `Iterators` where `flatten` would be sufficient\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'_>,\n+    flat_map_args: &'tcx [hir::Expr<'_>],\n+    flat_map_span: Span,\n+) {\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let arg_node = &flat_map_args[1].kind;\n+\n+        let apply_lint = |message: &str| {\n+            span_lint_and_sugg(\n+                cx,\n+                FLAT_MAP_IDENTITY,\n+                flat_map_span.with_hi(expr.span.hi()),\n+                message,\n+                \"try\",\n+                \"flatten()\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        };\n+\n+        if_chain! {\n+            if let hir::ExprKind::Closure(_, _, body_id, _, _) = arg_node;\n+            let body = cx.tcx.hir().body(*body_id);\n+\n+            if let hir::PatKind::Binding(_, _, binding_ident, _) = body.params[0].pat.kind;\n+            if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = body.value.kind;\n+\n+            if path.segments.len() == 1;\n+            if path.segments[0].ident.name == binding_ident.name;\n+\n+            then {\n+                apply_lint(\"called `flat_map(|x| x)` on an `Iterator`\");\n+            }\n+        }\n+\n+        if_chain! {\n+            if let hir::ExprKind::Path(ref qpath) = arg_node;\n+\n+            if match_qpath(qpath, &paths::STD_CONVERT_IDENTITY);\n+\n+            then {\n+                apply_lint(\"called `flat_map(std::convert::identity)` on an `Iterator`\");\n+            }\n+        }\n+    }\n+}"}, {"sha": "6a425e6e3ed0b51f943785263275b04080860b91", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/37ba779a532cd229a18e8a99342f351ba035aa30/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ba779a532cd229a18e8a99342f351ba035aa30/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=37ba779a532cd229a18e8a99342f351ba035aa30", "patch": "@@ -10,6 +10,7 @@ mod filter_map_identity;\n mod filter_map_map;\n mod filter_map_next;\n mod filter_next;\n+mod flat_map_identity;\n mod from_iter_instead_of_collect;\n mod get_unwrap;\n mod implicit_clone;\n@@ -1709,7 +1710,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"map\", \"find\"] => filter_map::check(cx, expr, true),\n             [\"flat_map\", \"filter\"] => filter_flat_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", \"filter_map\"] => filter_map_flat_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n-            [\"flat_map\", ..] => lint_flat_map_identity(cx, expr, arg_lists[0], method_spans[0]),\n+            [\"flat_map\", ..] => flat_map_identity::check(cx, expr, arg_lists[0], method_spans[0]),\n             [\"flatten\", \"map\"] => lint_map_flatten(cx, expr, arg_lists[1]),\n             [\"is_some\", \"find\"] => lint_search_is_some(cx, expr, \"find\", arg_lists[1], arg_lists[0], method_spans[1]),\n             [\"is_some\", \"position\"] => {\n@@ -2755,55 +2756,6 @@ fn lint_map_or_none<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n     );\n }\n \n-/// lint use of `flat_map` for `Iterators` where `flatten` would be sufficient\n-fn lint_flat_map_identity<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    flat_map_args: &'tcx [hir::Expr<'_>],\n-    flat_map_span: Span,\n-) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        let arg_node = &flat_map_args[1].kind;\n-\n-        let apply_lint = |message: &str| {\n-            span_lint_and_sugg(\n-                cx,\n-                FLAT_MAP_IDENTITY,\n-                flat_map_span.with_hi(expr.span.hi()),\n-                message,\n-                \"try\",\n-                \"flatten()\".to_string(),\n-                Applicability::MachineApplicable,\n-            );\n-        };\n-\n-        if_chain! {\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = arg_node;\n-            let body = cx.tcx.hir().body(*body_id);\n-\n-            if let hir::PatKind::Binding(_, _, binding_ident, _) = body.params[0].pat.kind;\n-            if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = body.value.kind;\n-\n-            if path.segments.len() == 1;\n-            if path.segments[0].ident.name == binding_ident.name;\n-\n-            then {\n-                apply_lint(\"called `flat_map(|x| x)` on an `Iterator`\");\n-            }\n-        }\n-\n-        if_chain! {\n-            if let hir::ExprKind::Path(ref qpath) = arg_node;\n-\n-            if match_qpath(qpath, &paths::STD_CONVERT_IDENTITY);\n-\n-            then {\n-                apply_lint(\"called `flat_map(std::convert::identity)` on an `Iterator`\");\n-            }\n-        }\n-    }\n-}\n-\n /// lint searching an Iterator followed by `is_some()`\n /// or calling `find()` on a string followed by `is_some()`\n fn lint_search_is_some<'tcx>("}]}