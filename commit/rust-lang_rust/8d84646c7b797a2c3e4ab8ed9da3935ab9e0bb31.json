{"sha": "8d84646c7b797a2c3e4ab8ed9da3935ab9e0bb31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODQ2NDZjN2I3OTdhMmMzZTRhYjhlZDlkYTM5MzVhYjllMGJiMzE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-10-01T19:01:14Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-10-01T19:05:14Z"}, "message": "Don't mark zero-sized arrays as indirectly mutable when borrowed", "tree": {"sha": "6537313cedddb75e7eeb29726806771a7cf1eedc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6537313cedddb75e7eeb29726806771a7cf1eedc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d84646c7b797a2c3e4ab8ed9da3935ab9e0bb31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d84646c7b797a2c3e4ab8ed9da3935ab9e0bb31", "html_url": "https://github.com/rust-lang/rust/commit/8d84646c7b797a2c3e4ab8ed9da3935ab9e0bb31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d84646c7b797a2c3e4ab8ed9da3935ab9e0bb31/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ad38f99cfc4ffa0f943f22834cc56afcef06e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ad38f99cfc4ffa0f943f22834cc56afcef06e1", "html_url": "https://github.com/rust-lang/rust/commit/a1ad38f99cfc4ffa0f943f22834cc56afcef06e1"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "990425c3252e0ecab664b93cc2903ef9a04cec57", "filename": "src/librustc_mir/dataflow/impls/indirect_mutation.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8d84646c7b797a2c3e4ab8ed9da3935ab9e0bb31/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d84646c7b797a2c3e4ab8ed9da3935ab9e0bb31/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs?ref=8d84646c7b797a2c3e4ab8ed9da3935ab9e0bb31", "patch": "@@ -97,28 +97,44 @@ struct TransferFunction<'a, 'mir, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n+impl<'tcx> TransferFunction<'_, '_, 'tcx> {\n+    /// Returns `true` if this borrow would allow mutation of the `borrowed_place`.\n+    fn borrow_allows_mutation(\n+        &self,\n+        kind: mir::BorrowKind,\n+        borrowed_place: &mir::Place<'tcx>,\n+    ) -> bool {\n+        let borrowed_ty = borrowed_place.ty(self.body, self.tcx).ty;\n+\n+        // Zero-sized types cannot be mutated, since there is nothing inside to mutate.\n+        //\n+        // FIXME: For now, we only exempt arrays of length zero. We need to carefully\n+        // consider the effects before extending this to all ZSTs.\n+        if let ty::Array(_, len) = borrowed_ty.kind {\n+            if len.try_eval_usize(self.tcx, self.param_env) == Some(0) {\n+                return false;\n+            }\n+        }\n+\n+        match kind {\n+            mir::BorrowKind::Mut { .. } => true,\n+\n+            | mir::BorrowKind::Shared\n+            | mir::BorrowKind::Shallow\n+            | mir::BorrowKind::Unique\n+            => !borrowed_ty.is_freeze(self.tcx, self.param_env, DUMMY_SP),\n+        }\n+    }\n+}\n+\n impl<'tcx> Visitor<'tcx> for TransferFunction<'_, '_, 'tcx> {\n     fn visit_rvalue(\n         &mut self,\n         rvalue: &mir::Rvalue<'tcx>,\n         location: Location,\n     ) {\n         if let mir::Rvalue::Ref(_, kind, ref borrowed_place) = *rvalue {\n-            let is_mut = match kind {\n-                mir::BorrowKind::Mut { .. } => true,\n-\n-                | mir::BorrowKind::Shared\n-                | mir::BorrowKind::Shallow\n-                | mir::BorrowKind::Unique\n-                => {\n-                    !borrowed_place\n-                        .ty(self.body, self.tcx)\n-                        .ty\n-                        .is_freeze(self.tcx, self.param_env, DUMMY_SP)\n-                }\n-            };\n-\n-            if is_mut {\n+            if self.borrow_allows_mutation(kind, borrowed_place) {\n                 match borrowed_place.base {\n                     mir::PlaceBase::Local(borrowed_local) if !borrowed_place.is_indirect()\n                         => self.trans.gen(borrowed_local),"}]}