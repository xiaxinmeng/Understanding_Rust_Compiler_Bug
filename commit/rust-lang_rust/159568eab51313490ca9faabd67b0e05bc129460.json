{"sha": "159568eab51313490ca9faabd67b0e05bc129460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTU2OGVhYjUxMzEzNDkwY2E5ZmFhYmQ2N2IwZTA1YmMxMjk0NjA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-02T00:37:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-04T05:55:51Z"}, "message": "core: Flesh out the either traits", "tree": {"sha": "2469a50749ebb51d0492d1814c1767f201ca22a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2469a50749ebb51d0492d1814c1767f201ca22a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/159568eab51313490ca9faabd67b0e05bc129460", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/159568eab51313490ca9faabd67b0e05bc129460", "html_url": "https://github.com/rust-lang/rust/commit/159568eab51313490ca9faabd67b0e05bc129460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/159568eab51313490ca9faabd67b0e05bc129460/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ed7d9b6ee0f254c8f1a760373cf8d6f1f8682c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ed7d9b6ee0f254c8f1a760373cf8d6f1f8682c", "html_url": "https://github.com/rust-lang/rust/commit/f4ed7d9b6ee0f254c8f1a760373cf8d6f1f8682c"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "5e9ccd841957fb578b721f8a0ceb4ec4d58df27e", "filename": "src/libcore/either.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/159568eab51313490ca9faabd67b0e05bc129460/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/159568eab51313490ca9faabd67b0e05bc129460/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=159568eab51313490ca9faabd67b0e05bc129460", "patch": "@@ -150,6 +150,23 @@ pub pure fn unwrap_right<T,U>(eith: Either<T,U>) -> U {\n }\n \n impl<T, U> Either<T, U> {\n+    #[inline(always)]\n+    fn either<V>(&self, f_left: fn(&T) -> V, f_right: fn(&U) -> V) -> V {\n+        either(f_left, f_right, self)\n+    }\n+\n+    #[inline(always)]\n+    fn flip(self) -> Either<U, T> { flip(self) }\n+\n+    #[inline(always)]\n+    fn to_result(self) -> Result<U, T> { to_result(self) }\n+\n+    #[inline(always)]\n+    fn is_left(&self) -> bool { is_left(self) }\n+\n+    #[inline(always)]\n+    fn is_right(&self) -> bool { is_right(self) }\n+\n     #[inline(always)]\n     fn unwrap_left(self) -> T { unwrap_left(self) }\n "}]}