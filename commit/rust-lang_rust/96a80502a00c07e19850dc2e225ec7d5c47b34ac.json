{"sha": "96a80502a00c07e19850dc2e225ec7d5c47b34ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YTgwNTAyYTAwYzA3ZTE5ODUwZGMyZTIyNWVjN2Q1YzQ3YjM0YWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-08T01:34:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-08T01:34:00Z"}, "message": "Rollup merge of #61641 - spastorino:revert-to-recursion-on-local-analyzer, r=oli-obk\n\nRevert \"Make LocalAnalizer visitor iterate instead of recurse\"\n\nThis reverts commit 0cfaa28bc5edda198571fca9410cbc9f71b8d17a.\n\nr? @oli-obk", "tree": {"sha": "fe7c30eda8cd33813a7063645034538728cbc132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe7c30eda8cd33813a7063645034538728cbc132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96a80502a00c07e19850dc2e225ec7d5c47b34ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc+xCICRBK7hj4Ov3rIwAAdHIIAHbzj6zO2PkByLDps5OHDViw\n+zlM9iVPTCxQkjbrTroTHnfaA7rWKcBRa2efWrILPZaGkkfYnV+hk0whAstzxInp\nx4pDLbjUXEQaBg7L2skpeigGhuJW0pd12AArtBTBUDQxFZdgvlDAs+U4dFfalsUj\nClpfm65hjDIePeVSsSkGaIIPqDT2fT1dYtxl7yn1o3AjytS7WL1CFC7ps9u8IUAe\nMnQoox7sZew1Is3L5aVxBfy/aL1e5Y61WwG7fNb3rdcud7u/b/bJK+pgx3awSrPN\nSU368IG8tWuDdG7be4nYyvi8i2ceozBFwCQaW6WjpetyVZpeUShN+SwJRxDZ2WA=\n=nHev\n-----END PGP SIGNATURE-----\n", "payload": "tree fe7c30eda8cd33813a7063645034538728cbc132\nparent 6d25bcdb750b6619baa251683caf475a995aa467\nparent 4c326174d2c2e47bdd0f02e0f422f683107ec556\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559957640 +0200\ncommitter GitHub <noreply@github.com> 1559957640 +0200\n\nRollup merge of #61641 - spastorino:revert-to-recursion-on-local-analyzer, r=oli-obk\n\nRevert \"Make LocalAnalizer visitor iterate instead of recurse\"\n\nThis reverts commit 0cfaa28bc5edda198571fca9410cbc9f71b8d17a.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96a80502a00c07e19850dc2e225ec7d5c47b34ac", "html_url": "https://github.com/rust-lang/rust/commit/96a80502a00c07e19850dc2e225ec7d5c47b34ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96a80502a00c07e19850dc2e225ec7d5c47b34ac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d25bcdb750b6619baa251683caf475a995aa467", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d25bcdb750b6619baa251683caf475a995aa467", "html_url": "https://github.com/rust-lang/rust/commit/6d25bcdb750b6619baa251683caf475a995aa467"}, {"sha": "4c326174d2c2e47bdd0f02e0f422f683107ec556", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c326174d2c2e47bdd0f02e0f422f683107ec556", "html_url": "https://github.com/rust-lang/rust/commit/4c326174d2c2e47bdd0f02e0f422f683107ec556"}], "stats": {"total": 85, "additions": 37, "deletions": 48}, "files": [{"sha": "bb6a13ed15a52cdeb3f3485ac6c69b56825456e4", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 37, "deletions": 48, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/96a80502a00c07e19850dc2e225ec7d5c47b34ac/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96a80502a00c07e19850dc2e225ec7d5c47b34ac/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=96a80502a00c07e19850dc2e225ec7d5c47b34ac", "patch": "@@ -154,62 +154,51 @@ impl<'mir, 'a: 'mir, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                    context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_place(place={:?}, context={:?})\", place, context);\n-        let mut context = context;\n         let cx = self.fx.cx;\n \n-        place.iterate(|place_base, place_projections| {\n-            for proj in place_projections {\n-                // Allow uses of projections that are ZSTs or from scalar fields.\n-                let is_consume = match context {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => true,\n-                    _ => false\n-                };\n-                if is_consume {\n-                    let base_ty = proj.base.ty(self.fx.mir, cx.tcx());\n-                    let base_ty = self.fx.monomorphize(&base_ty);\n-\n-                    // ZSTs don't require any actual memory access.\n-                    let elem_ty = base_ty\n-                        .projection_ty(cx.tcx(), &proj.elem)\n-                        .ty;\n-                    let elem_ty = self.fx.monomorphize(&elem_ty);\n-                    if cx.layout_of(elem_ty).is_zst() {\n-                        return;\n-                    }\n-\n-                    if let mir::ProjectionElem::Field(..) = proj.elem {\n-                        let layout = cx.layout_of(base_ty.ty);\n-                        if cx.is_backend_immediate(layout) || cx.is_backend_scalar_pair(layout) {\n-                            // Recurse with the same context, instead of `Projection`,\n-                            // potentially stopping at non-operand projections,\n-                            // which would trigger `not_ssa` on locals.\n-                            continue;\n-                        }\n-                    }\n+        if let mir::Place::Projection(ref proj) = *place {\n+            // Allow uses of projections that are ZSTs or from scalar fields.\n+            let is_consume = match context {\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => true,\n+                _ => false\n+            };\n+            if is_consume {\n+                let base_ty = proj.base.ty(self.fx.mir, cx.tcx());\n+                let base_ty = self.fx.monomorphize(&base_ty);\n+\n+                // ZSTs don't require any actual memory access.\n+                let elem_ty = base_ty\n+                    .projection_ty(cx.tcx(), &proj.elem)\n+                    .ty;\n+                let elem_ty = self.fx.monomorphize(&elem_ty);\n+                if cx.layout_of(elem_ty).is_zst() {\n+                    return;\n                 }\n \n-                // A deref projection only reads the pointer, never needs the place.\n-                if let mir::ProjectionElem::Deref = proj.elem {\n-                    return self.visit_place(\n-                        &proj.base,\n-                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                        location\n-                    );\n+                if let mir::ProjectionElem::Field(..) = proj.elem {\n+                    let layout = cx.layout_of(base_ty.ty);\n+                    if cx.is_backend_immediate(layout) || cx.is_backend_scalar_pair(layout) {\n+                        // Recurse with the same context, instead of `Projection`,\n+                        // potentially stopping at non-operand projections,\n+                        // which would trigger `not_ssa` on locals.\n+                        self.visit_place(&proj.base, context, location);\n+                        return;\n+                    }\n                 }\n-\n-                context = if context.is_mutating_use() {\n-                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                } else {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                };\n             }\n \n-            // Default base visit behavior\n-            if let mir::PlaceBase::Local(local) = place_base {\n-                self.visit_local(local, context, location);\n+            // A deref projection only reads the pointer, never needs the place.\n+            if let mir::ProjectionElem::Deref = proj.elem {\n+                return self.visit_place(\n+                    &proj.base,\n+                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                    location\n+                );\n             }\n-        });\n+        }\n+\n+        self.super_place(place, context, location);\n     }\n \n     fn visit_local(&mut self,"}]}