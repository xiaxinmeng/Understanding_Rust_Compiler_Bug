{"sha": "7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "node_id": "C_kwDOAAsO6NoAKDdmM2FmNzI2MDY1ZDllYWFiZjkzZDg3ZjIyZDk3ZjYwY2NhN2E1ZjE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-26T21:09:39Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:29:26Z"}, "message": "Use ty::OpaqueTy everywhere", "tree": {"sha": "d3501a3fc742f5e786697c99c7e230a497551e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3501a3fc742f5e786697c99c7e230a497551e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "html_url": "https://github.com/rust-lang/rust/commit/7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918ede64740b3610dfd8b43ff0d995261a236ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/918ede64740b3610dfd8b43ff0d995261a236ac5", "html_url": "https://github.com/rust-lang/rust/commit/918ede64740b3610dfd8b43ff0d995261a236ac5"}], "stats": {"total": 274, "additions": 156, "deletions": 118}, "files": [{"sha": "c777f9a7401af9fae82fb0bcbd1debdd11ff7b2c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -697,8 +697,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     .map_bound(|p| p.predicates),\n                 None,\n             ),\n-            ty::Opaque(did, substs) => {\n-                find_fn_kind_from_did(tcx.bound_explicit_item_bounds(*did), Some(*substs))\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+                find_fn_kind_from_did(tcx.bound_explicit_item_bounds(*def_id), Some(*substs))\n             }\n             ty::Closure(_, substs) => match substs.as_closure().kind() {\n                 ty::ClosureKind::Fn => Some(hir::Mutability::Not),"}, {"sha": "b885590f7396f2c796a01dd01960f5406ae301e7", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -504,7 +504,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n \n         let mut output_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n-        if let ty::Opaque(def_id, _) = *output_ty.kind() {\n+        if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *output_ty.kind() {\n             output_ty = self.infcx.tcx.type_of(def_id)\n         };\n "}, {"sha": "87dd0a665d340b70378bf97baf502f77d37ccf28", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -83,7 +83,7 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n                 ConstValue::from_machine_usize(adt.variants().len() as u64, &tcx)\n             }\n             ty::Projection(_)\n-            | ty::Opaque(_, _)\n+            | ty::Opaque(ty::OpaqueTy { def_id: _, substs: _ })\n             | ty::Param(_)\n             | ty::Placeholder(_)\n             | ty::Infer(_) => throw_inval!(TooGeneric),"}, {"sha": "62ed8f0c0f7bb89252b053ea0729c2ee0d49f88d", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 };\n \n                 let kind = match parent_ty.ty.kind() {\n-                    &ty::Opaque(def_id, substs) => {\n+                    &ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                         self.tcx.bound_type_of(def_id).subst(self.tcx, substs).kind()\n                     }\n                     kind => kind,"}, {"sha": "ecb46d12a0141765b1e778934e91623272c2326e", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             // Types with identity (print the module path).\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Opaque(def_id, substs)\n+            | ty::Opaque(ty::OpaqueTy { def_id, substs })\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),"}, {"sha": "c696f93897c13e9b6ec3a0f867cbca081ab8c62b", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -1440,7 +1440,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> E\n                 impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n-                            ty::Opaque(def, _) => {\n+                            ty::Opaque(ty::OpaqueTy { def_id: def, substs: _ }) => {\n                                 self.0.push(def);\n                                 ControlFlow::CONTINUE\n                             }"}, {"sha": "f838ec7025fd8e9faf866f63b64805d996a22845", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -666,7 +666,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let scope = tcx.hir().get_defining_scope(hir_id);\n-    let mut locator = ConstraintLocator { def_id: def_id, tcx, found: None, typeck_types: vec![] };\n+    let mut locator = ConstraintLocator { def_id, tcx, found: None, typeck_types: vec![] };\n \n     debug!(?scope);\n \n@@ -803,7 +803,7 @@ fn find_opaque_ty_constraints_for_rpit(\n     if let Some(concrete) = concrete {\n         let scope = tcx.hir().local_def_id_to_hir_id(owner_def_id);\n         debug!(?scope);\n-        let mut locator = ConstraintChecker { def_id: def_id, tcx, found: concrete };\n+        let mut locator = ConstraintChecker { def_id, tcx, found: concrete };\n \n         match tcx.hir().get(scope) {\n             Node::Item(it) => intravisit::walk_item(&mut locator, it),"}, {"sha": "31806ff6766ea976b96a1fa5556a8007c8a835e8", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_invariant_substs(current, data.substs, variance);\n             }\n \n-            ty::Opaque(_, substs) => {\n+            ty::Opaque(ty::OpaqueTy { def_id: _, substs }) => {\n                 self.add_constraints_from_invariant_substs(current, substs, variance);\n             }\n "}, {"sha": "e3afc117bb2ad8048ed3b53000d5327e8242f72f", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -518,7 +518,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 let substs = sig.output().walk().find_map(|arg| {\n                     if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                        && let ty::Opaque(def_id, substs) = *ty.kind()\n+                        && let ty::Opaque(ty::OpaqueTy { def_id, substs }) = *ty.kind()\n                         && def_id == rpit_def_id\n                     {\n                         Some(substs)"}, {"sha": "6035e6e4db41ebfc95e649f8c451b6bc1637b8b7", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -119,7 +119,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n             ty::Projection(pi) => Some(PointerKind::OfProjection(pi)),\n-            ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+                Some(PointerKind::OfOpaque(def_id, substs))\n+            }\n             ty::Param(p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information.\n             ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) => None,"}, {"sha": "3e3126cd446f9f01347bdce96becbac659b44911", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty: Ty<'tcx>,\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         match *expected_ty.kind() {\n-            ty::Opaque(def_id, substs) => self.deduce_signature_from_predicates(\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => self.deduce_signature_from_predicates(\n                 self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n             ),\n             ty::Dynamic(ref object_type, ..) => {\n@@ -677,7 +677,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     get_future_output(obligation.predicate, obligation.cause.span)\n                 })?\n             }\n-            ty::Opaque(def_id, substs) => self\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => self\n                 .tcx\n                 .bound_explicit_item_bounds(def_id)\n                 .subst_iter_copied(self.tcx, substs)"}, {"sha": "9dd3b3741f9df60a371cc25e6a5e075a8215f2c8", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -1805,7 +1805,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         {\n             let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);\n             // Get the `impl Trait`'s `DefId`.\n-            if let ty::Opaque(def_id, _) = ty.kind()\n+            if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = ty.kind()\n                 // Get the `impl Trait`'s `Item` so that we can get its trait bounds and\n                 // get the `Trait`'s `DefId`.\n                 && let hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, .. }) ="}, {"sha": "bd226e1f8b18e31046a2d70b314836a8284bdf66", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -2391,7 +2391,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Param(param_ty) => {\n                 self.point_at_param_definition(&mut err, param_ty);\n             }\n-            ty::Opaque(_, _) => {\n+            ty::Opaque(ty::OpaqueTy { def_id: _, substs: _ }) => {\n                 self.suggest_await_on_field_access(&mut err, ident, base, base_ty.peel_refs());\n             }\n             _ => {}"}, {"sha": "a556af81b4f09b9a194c6a2d2f0d5ccd773b3b14", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -716,7 +716,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if formal_ret.has_infer_types() {\n             for ty in ret_ty.walk() {\n                 if let ty::subst::GenericArgKind::Type(ty) = ty.unpack()\n-                    && let ty::Opaque(def_id, _) = *ty.kind()\n+                    && let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *ty.kind()\n                     && let Some(def_id) = def_id.as_local()\n                     && self.opaque_type_origin(def_id, DUMMY_SP).is_some() {\n                     return None;"}, {"sha": "77821556eaf09f3098f1912c87427fd60b69725c", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -2124,7 +2124,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                 }\n-                ty::Opaque(new_def_id, _)\n+                ty::Opaque(ty::OpaqueTy { def_id: new_def_id, substs: _ })\n                 | ty::Closure(new_def_id, _)\n                 | ty::FnDef(new_def_id, _) => {\n                     def_id = new_def_id;"}, {"sha": "c0534ea89d8a00f76fbaee093986f28e3f15b05c", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -174,7 +174,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let fn_sig = substs.as_closure().sig();\n                     Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().map_bound(|inputs| &inputs[1..])))\n                 }\n-                ty::Opaque(def_id, substs) => {\n+                ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                     self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                         if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n                         && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()"}, {"sha": "58d1d39d215a581fc237da9ab40693a84be41327", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -563,7 +563,7 @@ fn check_must_not_suspend_ty<'tcx>(\n         }\n         ty::Adt(def, _) => check_must_not_suspend_def(fcx.tcx, def.did(), hir_id, data),\n         // FIXME: support adding the attribute to TAITs\n-        ty::Opaque(def, _) => {\n+        ty::Opaque(ty::OpaqueTy { def_id: def, substs: _ }) => {\n             let mut has_emitted = false;\n             for &(predicate, _) in fcx.tcx.explicit_item_bounds(def) {\n                 // We only look at the `DefId`, so it is safe to skip the binder here."}, {"sha": "f14cac868ea4be4c636e0fab9f47d173416076d4", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -546,7 +546,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n                 type BreakTy = ();\n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                    if let ty::Opaque(def_id, _) = *t.kind() {\n+                    if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *t.kind() {\n                         if def_id == self.def_id.to_def_id() {\n                             return ControlFlow::Break(());\n                         }"}, {"sha": "4f6a0630d3d1fda66fed7a8467058194a627e38d", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -675,7 +675,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 // relatable.\n                 Ok(t)\n             }\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                 let s = self.relate(substs, substs)?;\n                 Ok(if s == substs { t } else { self.infcx.tcx.mk_opaque(def_id, s) })\n             }"}, {"sha": "c0056c27a582df29dd04ebb1750fbb599eb35afb", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -100,11 +100,15 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n                 self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;\n             }\n \n-            (&ty::Opaque(a_def_id, _), &ty::Opaque(b_def_id, _)) if a_def_id == b_def_id => {\n+            (\n+                &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: _ }),\n+                &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }),\n+            ) if a_def_id == b_def_id => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;\n             }\n-            (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..))\n-                if self.fields.define_opaque_types && did.is_local() =>\n+            (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), _)\n+            | (_, &ty::Opaque(ty::OpaqueTy { def_id, substs: _ }))\n+                if self.fields.define_opaque_types && def_id.is_local() =>\n             {\n                 self.fields.obligations.extend(\n                     infcx"}, {"sha": "fea6213375953e7f89e2b1748558e8ddc037ba7f", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -338,8 +338,9 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n \n impl<'tcx> InferCtxt<'tcx> {\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+        // FIXME(alias): Merge these\n         let (def_id, substs) = match *ty.kind() {\n-            ty::Opaque(def_id, substs) => (def_id, substs),\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n             ty::Projection(data)\n                 if self.tcx.def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder =>\n             {\n@@ -1729,8 +1730,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 TypeError::Sorts(values) => {\n                     let extra = expected == found;\n                     let sort_string = |ty: Ty<'tcx>, path: Option<PathBuf>| {\n+                        // FIXME(alias): Merge these\n                         let mut s = match (extra, ty.kind()) {\n-                            (true, ty::Opaque(def_id, _)) => {\n+                            (true, ty::Opaque(ty::OpaqueTy { def_id, .. })) => {\n                                 let sm = self.tcx.sess.source_map();\n                                 let pos = sm.lookup_char_pos(self.tcx.def_span(*def_id).lo());\n                                 format!(\n@@ -2383,7 +2385,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         // fn get_later<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n                         // suggest:\n                         // fn get_later<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-                        ty::Closure(_, _substs) | ty::Opaque(_, _substs) if return_impl_trait => {\n+                        ty::Closure(_, _substs)\n+                        | ty::Opaque(ty::OpaqueTy { def_id: _, substs: _substs })\n+                            if return_impl_trait =>\n+                        {\n                             new_binding_suggestion(&mut err, type_param_span);\n                         }\n                         _ => {\n@@ -2765,7 +2770,7 @@ impl TyCategory {\n     pub fn from_ty(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Self, DefId)> {\n         match *ty.kind() {\n             ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n-            ty::Opaque(def_id, _) => Some((Self::Opaque, def_id)),\n+            ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => Some((Self::Opaque, def_id)),\n             ty::Generator(def_id, ..) => {\n                 Some((Self::Generator(tcx.generator_kind(def_id).unwrap()), def_id))\n             }"}, {"sha": "fe134830d6858b08bbfad315509297bd0d3ff6f3", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -486,12 +486,14 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             _ if self.same_type_modulo_infer(last_expr_ty, expected_ty) => {\n                 StatementAsExpression::CorrectType\n             }\n-            (ty::Opaque(last_def_id, _), ty::Opaque(exp_def_id, _))\n-                if last_def_id == exp_def_id =>\n-            {\n-                StatementAsExpression::CorrectType\n-            }\n-            (ty::Opaque(last_def_id, last_bounds), ty::Opaque(exp_def_id, exp_bounds)) => {\n+            (\n+                ty::Opaque(ty::OpaqueTy { def_id: last_def_id, substs: _ }),\n+                ty::Opaque(ty::OpaqueTy { def_id: exp_def_id, substs: _ }),\n+            ) if last_def_id == exp_def_id => StatementAsExpression::CorrectType,\n+            (\n+                ty::Opaque(ty::OpaqueTy { def_id: last_def_id, substs: last_bounds }),\n+                ty::Opaque(ty::OpaqueTy { def_id: exp_def_id, substs: exp_bounds }),\n+            ) => {\n                 debug!(\n                     \"both opaque, likely future {:?} {:?} {:?} {:?}\",\n                     last_def_id, last_bounds, exp_def_id, exp_bounds\n@@ -507,7 +509,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     (\n                         hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: last_bounds, .. }),\n                         hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds: exp_bounds, .. }),\n-                    ) if std::iter::zip(*last_bounds, *exp_bounds).all(|(left, right)| {\n+                    ) if iter::zip(*last_bounds, *exp_bounds).all(|(left, right)| {\n                         match (left, right) {\n                             (\n                                 hir::GenericBound::Trait(tl, ml),"}, {"sha": "6513abd38795ddd34b174dfaf25d970829815d20", "filename": "compiler/rustc_infer/src/infer/lattice.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -105,11 +105,13 @@ where\n             Ok(v)\n         }\n \n-        (&ty::Opaque(a_def_id, _), &ty::Opaque(b_def_id, _)) if a_def_id == b_def_id => {\n-            infcx.super_combine_tys(this, a, b)\n-        }\n-        (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..))\n-            if this.define_opaque_types() && did.is_local() =>\n+        (\n+            &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: _ }),\n+            &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }),\n+        ) if a_def_id == b_def_id => infcx.super_combine_tys(this, a, b),\n+        (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), _)\n+        | (_, &ty::Opaque(ty::OpaqueTy { def_id, substs: _ }))\n+            if this.define_opaque_types() && def_id.is_local() =>\n         {\n             this.add_obligations(\n                 infcx"}, {"sha": "e0f9220ca5f08a9577aa49384622597e2ee1f118", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -608,16 +608,20 @@ where\n \n             (&ty::Infer(ty::TyVar(vid)), _) => self.relate_ty_var((vid, b)),\n \n-            (&ty::Opaque(a_def_id, _), &ty::Opaque(b_def_id, _)) if a_def_id == b_def_id => {\n-                infcx.super_combine_tys(self, a, b).or_else(|err| {\n-                    self.tcx().sess.delay_span_bug(\n-                        self.delegate.span(),\n-                        \"failure to relate an opaque to itself should result in an error later on\",\n-                    );\n-                    if a_def_id.is_local() { self.relate_opaques(a, b) } else { Err(err) }\n-                })\n-            }\n-            (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..)) if did.is_local() => {\n+            (\n+                &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: _ }),\n+                &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }),\n+            ) if a_def_id == b_def_id => infcx.super_combine_tys(self, a, b).or_else(|err| {\n+                self.tcx().sess.delay_span_bug(\n+                    self.delegate.span(),\n+                    \"failure to relate an opaque to itself should result in an error later on\",\n+                );\n+                if a_def_id.is_local() { self.relate_opaques(a, b) } else { Err(err) }\n+            }),\n+            (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), _)\n+            | (_, &ty::Opaque(ty::OpaqueTy { def_id, substs: _ }))\n+                if def_id.is_local() =>\n+            {\n                 self.relate_opaques(a, b)\n             }\n "}, {"sha": "495369031d1d5473d4d2aa64b7486f11abf1c263", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -66,7 +66,9 @@ impl<'tcx> InferCtxt<'tcx> {\n             lt_op: |lt| lt,\n             ct_op: |ct| ct,\n             ty_op: |ty| match *ty.kind() {\n-                ty::Opaque(def_id, _substs) if replace_opaque_type(def_id) => {\n+                ty::Opaque(ty::OpaqueTy { def_id, substs: _substs })\n+                    if replace_opaque_type(def_id) =>\n+                {\n                     let def_span = self.tcx.def_span(def_id);\n                     let span = if span.contains(def_span) { def_span } else { span };\n                     let code = traits::ObligationCauseCode::OpaqueReturnType(None);\n@@ -104,7 +106,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n         let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n         let process = |a: Ty<'tcx>, b: Ty<'tcx>, a_is_expected| match *a.kind() {\n-            ty::Opaque(def_id, substs) if def_id.is_local() => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) if def_id.is_local() => {\n                 let def_id = def_id.expect_local();\n                 let origin = match self.defining_use_anchor {\n                     DefiningAnchor::Bind(_) => {\n@@ -147,18 +149,19 @@ impl<'tcx> InferCtxt<'tcx> {\n                     DefiningAnchor::Bubble => self.opaque_ty_origin_unchecked(def_id, cause.span),\n                     DefiningAnchor::Error => return None,\n                 };\n-                if let ty::Opaque(did2, _) = *b.kind() {\n+                if let ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }) = *b.kind() {\n                     // We could accept this, but there are various ways to handle this situation, and we don't\n                     // want to make a decision on it right now. Likely this case is so super rare anyway, that\n                     // no one encounters it in practice.\n                     // It does occur however in `fn fut() -> impl Future<Output = i32> { async { 42 } }`,\n                     // where it is of no concern, so we only check for TAITs.\n-                    if let Some(OpaqueTyOrigin::TyAlias) =\n-                        did2.as_local().and_then(|did2| self.opaque_type_origin(did2, cause.span))\n+                    if let Some(OpaqueTyOrigin::TyAlias) = b_def_id\n+                        .as_local()\n+                        .and_then(|b_def_id| self.opaque_type_origin(b_def_id, cause.span))\n                     {\n                         self.tcx.sess.emit_err(OpaqueHiddenTypeDiag {\n                             span: cause.span,\n-                            hidden_type: self.tcx.def_span(did2),\n+                            hidden_type: self.tcx.def_span(b_def_id),\n                             opaque_type: self.tcx.def_span(def_id),\n                         });\n                     }\n@@ -475,7 +478,7 @@ where\n                 substs.as_generator().resume_ty().visit_with(self);\n             }\n \n-            ty::Opaque(def_id, ref substs) => {\n+            ty::Opaque(ty::OpaqueTy { def_id, ref substs }) => {\n                 // Skip lifetime paramters that are not captures.\n                 let variances = self.tcx.variances_of(*def_id);\n \n@@ -578,7 +581,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     }\n                     // Replace all other mentions of the same opaque type with the hidden type,\n                     // as the bounds must hold on the hidden type after all.\n-                    ty::Opaque(def_id2, substs2)\n+                    ty::Opaque(ty::OpaqueTy { def_id: def_id2, substs: substs2 })\n                         if def_id.to_def_id() == def_id2 && substs == substs2 =>\n                     {\n                         hidden_ty"}, {"sha": "ea3b0efb85bb1dde2472d02c3525304e32e151c2", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -130,7 +130,7 @@ fn compute_components<'tcx>(\n             // outlives any other lifetime, which is unsound.\n             // See https://github.com/rust-lang/rust/issues/84305 for\n             // more details.\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                 out.push(Component::Opaque(def_id, substs));\n             },\n "}, {"sha": "3fc3e6b09df0927307cafe56864d197f9967b983", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -338,7 +338,7 @@ where\n             substs,\n             true,\n             |ty| match *ty.kind() {\n-                ty::Opaque(def_id, substs) => (def_id, substs),\n+                ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n                 _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n             },\n         );"}, {"sha": "f05d6614515712e50094bd6bbff6182f12187387", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -130,12 +130,16 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                 Ok(self.tcx().ty_error_with_guaranteed(e))\n             }\n \n-            (&ty::Opaque(a_def_id, _), &ty::Opaque(b_def_id, _)) if a_def_id == b_def_id => {\n+            (\n+                &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: _ }),\n+                &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: _ }),\n+            ) if a_def_id == b_def_id => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;\n                 Ok(a)\n             }\n-            (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..))\n-                if self.fields.define_opaque_types && did.is_local() =>\n+            (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), _)\n+            | (_, &ty::Opaque(ty::OpaqueTy { def_id, substs: _ }))\n+                if self.fields.define_opaque_types && def_id.is_local() =>\n             {\n                 self.fields.obligations.extend(\n                     infcx"}, {"sha": "863c19bd3d60b2bd0bea22baca57af1fbee5eb46", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n                     // then we can emit a suggestion to add the bound.\n                     let add_bound = match (proj_term.kind(), assoc_pred.kind().skip_binder()) {\n                         (\n-                            ty::Opaque(def_id, _),\n+                            ty::Opaque(ty::OpaqueTy { def_id, substs: _ }),\n                             ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)),\n                         ) => Some(AddBound {\n                             suggest_span: cx.tcx.def_span(*def_id).shrink_to_hi(),"}, {"sha": "14882be3e012c5ea7da6b02d081e3f99209540fc", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n \n         if let hir::ExprKind::Match(await_expr, _arms, hir::MatchSource::AwaitDesugar) = expr.kind\n             && let ty = cx.typeck_results().expr_ty(&await_expr)\n-            && let ty::Opaque(future_def_id, _) = ty.kind()\n+            && let ty::Opaque(ty::OpaqueTy { def_id: future_def_id, substs: _ }) = ty.kind()\n             && cx.tcx.ty_is_opaque_future(ty)\n             // FIXME: This also includes non-async fns that return `impl Future`.\n             && let async_fn_def_id = cx.tcx.parent(*future_def_id)\n@@ -251,7 +251,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         .map(|inner| MustUsePath::Boxed(Box::new(inner)))\n                 }\n                 ty::Adt(def, _) => is_def_must_use(cx, def.did(), span),\n-                ty::Opaque(def, _) => {\n+                ty::Opaque(ty::OpaqueTy { def_id: def, substs: _ }) => {\n                     elaborate_predicates_with_span(\n                         cx.tcx,\n                         cx.tcx.explicit_item_bounds(def).iter().cloned(),"}, {"sha": "c56f6073b05f847f7515a960070e5c47aeab6874", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -117,6 +117,7 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type BinderListTy = Binder<'tcx, &'tcx List<Ty<'tcx>>>;\n     type ListTy = &'tcx List<Ty<'tcx>>;\n     type ProjectionTy = ty::ProjectionTy<'tcx>;\n+    type OpaqueTy = ty::OpaqueTy<'tcx>;\n     type ParamTy = ParamTy;\n     type BoundTy = ty::BoundTy;\n     type PlaceholderType = ty::PlaceholderType;\n@@ -2323,7 +2324,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Given a `ty`, return whether it's an `impl Future<...>`.\n     pub fn ty_is_opaque_future(self, ty: Ty<'_>) -> bool {\n-        let ty::Opaque(def_id, _) = ty.kind() else { return false };\n+        let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = ty.kind() else { return false };\n         let future_trait = self.require_lang_item(LangItem::Future, None);\n \n         self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n@@ -2668,7 +2669,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Opaque(def_id, substs))\n+        self.mk_ty(Opaque(ty::OpaqueTy { def_id, substs }))\n     }\n \n     pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {"}, {"sha": "8657010eb1b92baf1678e231a657200246df8e26", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -4,7 +4,7 @@ use std::ops::ControlFlow;\n \n use crate::ty::{\n     visit::TypeVisitable, Const, ConstKind, DefIdTree, ExistentialPredicate, InferConst, InferTy,\n-    PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    OpaqueTy, PolyTraitPredicate, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -457,11 +457,11 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n                 return ControlFlow::Break(());\n             }\n \n-            Opaque(did, _) => {\n-                let parent = self.tcx.parent(*did);\n+            Opaque(OpaqueTy { def_id, substs: _ }) => {\n+                let parent = self.tcx.parent(*def_id);\n                 if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = self.tcx.def_kind(parent)\n-                    && let Opaque(parent_did, _) = self.tcx.type_of(parent).kind()\n-                    && parent_did == did\n+                    && let Opaque(OpaqueTy { def_id: parent_opaque_def_id, substs: _ }) = self.tcx.type_of(parent).kind()\n+                    && parent_opaque_def_id == def_id\n                 {\n                     // Okay\n                 } else {"}, {"sha": "f7689820d3bb6381195f9515611e025880474483", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -779,7 +779,7 @@ fn foo(&self) -> Self::T { String::new() }\n         ty: Ty<'tcx>,\n     ) -> bool {\n         let assoc = self.associated_item(proj_ty.item_def_id);\n-        if let ty::Opaque(def_id, _) = *proj_ty.self_ty().kind() {\n+        if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *proj_ty.self_ty().kind() {\n             let opaque_local_def_id = def_id.as_local();\n             let opaque_hir_ty = if let Some(opaque_local_def_id) = opaque_local_def_id {\n                 match &self.hir().expect_item(opaque_local_def_id).kind {"}, {"sha": "cd93eb71f71f2fcd3963e87f4691f9fed42878a0", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -160,7 +160,7 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n-            &ty::Opaque(_, substs) => {\n+            &ty::Opaque(ty::OpaqueTy { def_id: _, substs }) => {\n                 self.add_flags(TypeFlags::HAS_TY_OPAQUE);\n                 self.add_substs(substs);\n             }"}, {"sha": "42ebc96c022cd7bbecd3cd5615d94259681cda23", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -728,7 +728,7 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                 // FIXME(eddyb) print this with `print_def_path`.\n                 // We use verbose printing in 'NO_QUERIES' mode, to\n                 // avoid needing to call `predicates_of`. This should\n@@ -743,7 +743,9 @@ pub trait PrettyPrinter<'tcx>:\n                 let parent = self.tcx().parent(def_id);\n                 match self.tcx().def_kind(parent) {\n                     DefKind::TyAlias | DefKind::AssocTy => {\n-                        if let ty::Opaque(d, _) = *self.tcx().type_of(parent).kind() {\n+                        if let ty::Opaque(ty::OpaqueTy { def_id: d, substs: _ }) =\n+                            *self.tcx().type_of(parent).kind()\n+                        {\n                             if d == def_id {\n                                 // If the type alias directly starts with the `impl` of the\n                                 // opaque type we're printing, then skip the `::{opaque#1}`."}, {"sha": "6d285f7f4924d6ab7b6325fb5a44014b7f1c8c34", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -564,9 +564,10 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))\n         }\n \n-        (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))\n-            if a_def_id == b_def_id =>\n-        {\n+        (\n+            &ty::Opaque(ty::OpaqueTy { def_id: a_def_id, substs: a_substs }),\n+            &ty::Opaque(ty::OpaqueTy { def_id: b_def_id, substs: b_substs }),\n+        ) if a_def_id == b_def_id => {\n             if relation.intercrate() {\n                 // During coherence, opaque types should be treated as equal to each other, even if their generic params\n                 // differ, as they could resolve to the same hidden type, even for different generic params."}, {"sha": "69627385235cc8180d58f2271861ca801c425546", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -652,7 +652,9 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.try_fold_with(folder)?),\n             ty::Closure(did, substs) => ty::Closure(did, substs.try_fold_with(folder)?),\n             ty::Projection(data) => ty::Projection(data.try_fold_with(folder)?),\n-            ty::Opaque(did, substs) => ty::Opaque(did, substs.try_fold_with(folder)?),\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+                ty::Opaque(ty::OpaqueTy { def_id, substs: substs.try_fold_with(folder)? })\n+            }\n \n             ty::Bool\n             | ty::Char\n@@ -698,7 +700,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n             ty::Projection(ref data) => data.visit_with(visitor),\n-            ty::Opaque(_, ref substs) => substs.visit_with(visitor),\n+            ty::Opaque(ty::OpaqueTy { def_id: _, ref substs }) => substs.visit_with(visitor),\n \n             ty::Bool\n             | ty::Char"}, {"sha": "c1ef703e62da49cac596e92663215bc95b917239", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -826,7 +826,7 @@ impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if let ty::Opaque(def_id, substs) = *t.kind() {\n+        if let ty::Opaque(ty::OpaqueTy { def_id, substs }) = *t.kind() {\n             self.expand_opaque_ty(def_id, substs).unwrap_or(t)\n         } else if t.has_opaque_types() {\n             t.super_fold_with(self)"}, {"sha": "958549e11ca9aba81e976514488f7b26129d3fbb", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -188,7 +188,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 }));\n             }\n             ty::Adt(_, substs)\n-            | ty::Opaque(_, substs)\n+            | ty::Opaque(ty::OpaqueTy { def_id: _, substs })\n             | ty::Closure(_, substs)\n             | ty::Generator(_, substs, _)\n             | ty::FnDef(_, substs) => {"}, {"sha": "ecf05cc32190e6226ea99bb8d36829fc236dff64", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -849,7 +849,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n             };\n \n             let kind = match parent_ty.ty.kind() {\n-                &ty::Opaque(def_id, substs) => {\n+                &ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                     self.tcx.bound_type_of(def_id).subst(self.tcx, substs).kind()\n                 }\n                 kind => kind,"}, {"sha": "6a4bbea79d13cb5bd427c86f0154a91799a9658a", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -241,7 +241,7 @@ where\n                     self.def_id_visitor.visit_def_id(def_id, \"trait\", &trait_ref)?;\n                 }\n             }\n-            ty::Opaque(def_id, ..) => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => {\n                 // Skip repeated `Opaque`s to avoid infinite recursion.\n                 if self.visited_opaque_tys.insert(def_id) {\n                     // The intent is to treat `impl Trait1 + Trait2` identically to"}, {"sha": "36c1463736eb65987cb65c4e614befc43e0b92c3", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -216,7 +216,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n-            | ty::Opaque(def_id, substs)\n+            | ty::Opaque(ty::OpaqueTy { def_id, substs })\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),"}, {"sha": "b3d19e329973dfce8c3126840781e7b411ca32fb", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -439,7 +439,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // Mangle all nominal types as paths.\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Opaque(def_id, substs)\n+            | ty::Opaque(ty::OpaqueTy { def_id, substs })\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {"}, {"sha": "7a391037f31b5b2e31d66467af3f8d262817ce01", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -855,7 +855,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     fn_sig.inputs().map_bound(|inputs| &inputs[1..]),\n                 ))\n             }\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                 self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                     if let ty::PredicateKind::Clause(ty::Clause::Projection(proj)) = pred.kind().skip_binder()\n                     && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n@@ -2644,7 +2644,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 Some(ident) => err.span_note(ident.span, &msg),\n                                 None => err.note(&msg),\n                             },\n-                            ty::Opaque(def_id, _) => {\n+                            ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => {\n                                 // Avoid printing the future from `core::future::identity_future`, it's not helpful\n                                 if tcx.parent(*def_id) == identity_future {\n                                     break 'print;"}, {"sha": "69f0e9865dceffa75e0ab6ed2b8b2bb9ceeae92d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -496,7 +496,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),\n@@ -1378,7 +1378,9 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n         ty::Projection(ref data) => tcx.bound_item_bounds(data.item_def_id).subst(tcx, data.substs),\n-        ty::Opaque(def_id, substs) => tcx.bound_item_bounds(def_id).subst(tcx, substs),\n+        ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n+            tcx.bound_item_bounds(def_id).subst(tcx, substs)\n+        }\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity."}, {"sha": "41a162a9f6738917e0f8a35375cec5a2e9916783", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -205,7 +205,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) if !substs.has_escaping_bound_vars() => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),"}, {"sha": "4cd2d445bd0be880cb6fe8d1ceab616f7c74527b", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -830,7 +830,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::GeneratorWitness(_)\n             | ty::Never\n             | ty::Projection(_)\n-            | ty::Opaque(_, _)\n+            | ty::Opaque(ty::OpaqueTy { def_id: _, substs: _ })\n             | ty::Param(_)\n             | ty::Bound(_, _)\n             | ty::Error(_)"}, {"sha": "cd3025024fe36de9337268535503d7a7699668da", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -156,7 +156,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n             ty::Projection(proj) => (proj.item_def_id, proj.substs),\n-            ty::Opaque(def_id, substs) => (def_id, substs),\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n "}, {"sha": "054bbf8fb0ef3b142314ae0668fa1fd931e7a939", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -1596,7 +1596,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n             ty::Projection(ref data) => (data.item_def_id, data.substs),\n-            ty::Opaque(def_id, substs) => (def_id, substs),\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => (def_id, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n@@ -2260,7 +2260,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())\n             }\n \n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                 // We can resolve the `impl Trait` to its concrete type,\n                 // which enforces a DAG between the functions requiring\n                 // the auto trait bounds in question."}, {"sha": "ab678e4d98f81bec6ba72efd4918826eb37accb7", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -648,12 +648,12 @@ impl<'tcx> WfPredicates<'tcx> {\n                     // types appearing in the fn signature\n                 }\n \n-                ty::Opaque(did, substs) => {\n+                ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                     // All of the requirements on type parameters\n                     // have already been checked for `impl Trait` in\n                     // return position. We do need to check type-alias-impl-trait though.\n-                    if ty::is_impl_trait_defn(self.tcx, did).is_none() {\n-                        let obligations = self.nominal_obligations(did, substs);\n+                    if ty::is_impl_trait_defn(self.tcx, def_id).is_none() {\n+                        let obligations = self.nominal_obligations(def_id, substs);\n                         self.out.extend(obligations);\n                     }\n                 }"}, {"sha": "6c841b94fc04b86d9d9322770113ca478f9ede37", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -432,7 +432,9 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                         (ast::Mutability::Not, chalk_ir::Mutability::Not) => true,\n                     }\n                 }\n-                (&ty::Opaque(def_id, ..), OpaqueType(opaque_ty_id, ..)) => def_id == opaque_ty_id.0,\n+                (&ty::Opaque(ty::OpaqueTy { def_id, substs: _ }), OpaqueType(opaque_ty_id, ..)) => {\n+                    def_id == opaque_ty_id.0\n+                }\n                 (&ty::FnDef(def_id, ..), FnDef(fn_def_id, ..)) => def_id == fn_def_id.0,\n                 (&ty::Str, Str) => true,\n                 (&ty::Never, Never) => true,\n@@ -786,7 +788,7 @@ impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if let ty::Opaque(def_id, substs) = *ty.kind() {\n+        if let ty::Opaque(ty::OpaqueTy { def_id, substs }) = *ty.kind() {\n             if def_id == self.opaque_ty_id.0 && substs == self.identity_substs {\n                 return self.tcx.mk_ty(ty::Bound(\n                     self.binder_index,"}, {"sha": "8a2de801a19c8540c4b8623e1068447c11034af5", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -354,7 +354,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 chalk_ir::TyKind::Tuple(types.len(), types.as_substs().lower_into(interner))\n             }\n             ty::Projection(proj) => chalk_ir::TyKind::Alias(proj.lower_into(interner)),\n-            ty::Opaque(def_id, substs) => {\n+            ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n                 chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {\n                     opaque_ty_id: chalk_ir::OpaqueTyId(def_id),\n                     substitution: substs.lower_into(interner),\n@@ -442,9 +442,10 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                 mutbl.lower_into(interner),\n             ),\n             TyKind::Str => ty::Str,\n-            TyKind::OpaqueType(opaque_ty, substitution) => {\n-                ty::Opaque(opaque_ty.0, substitution.lower_into(interner))\n-            }\n+            TyKind::OpaqueType(opaque_ty, substitution) => ty::Opaque(ty::OpaqueTy {\n+                def_id: opaque_ty.0,\n+                substs: substitution.lower_into(interner),\n+            }),\n             TyKind::AssociatedType(assoc_ty, substitution) => ty::Projection(ty::ProjectionTy {\n                 substs: substitution.lower_into(interner),\n                 item_def_id: assoc_ty.0,\n@@ -460,9 +461,10 @@ impl<'tcx> LowerInto<'tcx, Ty<'tcx>> for &chalk_ir::Ty<RustInterner<'tcx>> {\n                     item_def_id: projection.associated_ty_id.0,\n                     substs: projection.substitution.lower_into(interner),\n                 }),\n-                chalk_ir::AliasTy::Opaque(opaque) => {\n-                    ty::Opaque(opaque.opaque_ty_id.0, opaque.substitution.lower_into(interner))\n-                }\n+                chalk_ir::AliasTy::Opaque(opaque) => ty::Opaque(ty::OpaqueTy {\n+                    def_id: opaque.opaque_ty_id.0,\n+                    substs: opaque.substitution.lower_into(interner),\n+                }),\n             },\n             TyKind::Function(_quantified_ty) => unimplemented!(),\n             TyKind::BoundVar(_bound) => ty::Bound("}, {"sha": "8ebdea883903cb900f3e20602ad29258311bb3bf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -1833,7 +1833,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             }\n         }\n \n-        ty::Opaque(def_id, substs) => {\n+        ty::Opaque(ty::OpaqueTy { def_id, substs }) => {\n             // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n             // by looking up the bounds associated with the def_id.\n             let bounds = cx"}, {"sha": "8a7a65c860016d0ac1b51e8716462d5327b4d68a", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Clause, EarlyBinder, Opaque, PredicateKind};\n+use rustc_middle::ty::{Clause, EarlyBinder, Opaque, OpaqueTy, PredicateKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n@@ -62,11 +62,11 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             return;\n         }\n         let ret_ty = return_ty(cx, hir_id);\n-        if let Opaque(id, subst) = *ret_ty.kind() {\n-            let preds = cx.tcx.explicit_item_bounds(id);\n+        if let Opaque(OpaqueTy { def_id, substs }) = *ret_ty.kind() {\n+            let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for &(p, _span) in preds {\n-                let p = EarlyBinder(p).subst(cx.tcx, subst);\n+                let p = EarlyBinder(p).subst(cx.tcx, substs);\n                 if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n                     if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;"}, {"sha": "f5f70b195c981dd6e53d45027431c7fcd9c9b7a5", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3af726065d9eaabf93d87f22d97f60cca7a5f1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=7f3af726065d9eaabf93d87f22d97f60cca7a5f1", "patch": "@@ -79,7 +79,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                 return true;\n             }\n \n-            if let ty::Opaque(def_id, _) = *inner_ty.kind() {\n+            if let ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) = *inner_ty.kind() {\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     match predicate.kind().skip_binder() {\n                         // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n@@ -250,7 +250,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             is_must_use_ty(cx, *ty)\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Opaque(def_id, _) => {\n+        ty::Opaque(ty::OpaqueTy { def_id, substs: _ }) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n@@ -631,7 +631,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Opaque(id, _) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(id), cx.tcx.opt_parent(id)),\n+        ty::Opaque(ty::OpaqueTy{ def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();"}]}