{"sha": "3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYThkMzY3N2E5YmJhYTAwYWQ4YjRlNWQ0ZjVhNGVlNjAzNTdhMTM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-10-08T23:27:37Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-10-08T23:27:37Z"}, "message": "Merge pull request #429 from marcusklaas/method-calls2\n\nTry \"overflowing\" the final function argument when it's a closure", "tree": {"sha": "55d4eaeb825121e6355edf40ef6f551179982cd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55d4eaeb825121e6355edf40ef6f551179982cd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "html_url": "https://github.com/rust-lang/rust/commit/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a6795509c130f7ac53d59b273bf52f6f06693a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a6795509c130f7ac53d59b273bf52f6f06693a", "html_url": "https://github.com/rust-lang/rust/commit/e7a6795509c130f7ac53d59b273bf52f6f06693a"}, {"sha": "ccd404ac6f5f8cd9ac1cbb11494b65e336294432", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd404ac6f5f8cd9ac1cbb11494b65e336294432", "html_url": "https://github.com/rust-lang/rust/commit/ccd404ac6f5f8cd9ac1cbb11494b65e336294432"}], "stats": {"total": 179, "additions": 131, "deletions": 48}, "files": [{"sha": "325841fbfd1b6e9667418c4c9d89c51037788b95", "filename": "src/expr.rs", "status": "modified", "additions": 83, "deletions": 26, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "patch": "@@ -10,13 +10,14 @@\n \n use std::cmp::Ordering;\n use std::borrow::Borrow;\n+use std::mem::swap;\n \n use Indent;\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n             DefinitiveListTactic, definitive_tactic, ListItem, format_fn_args};\n use string::{StringFormat, rewrite_string};\n-use utils::{span_after, extra_offset, last_line_width, wrap_str, binary_search};\n+use utils::{span_after, extra_offset, last_line_width, wrap_str, binary_search, first_line_width};\n use visitor::FmtVisitor;\n use config::{StructLitStyle, MultilineStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment};\n@@ -223,29 +224,27 @@ fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n {\n     let max_width = try_opt!(width.checked_sub(prefix.len() + infix.len() + suffix.len()));\n \n-    binary_search(1,\n-                  max_width,\n-                  |lhs_budget| {\n-                      let lhs_offset = offset + prefix.len();\n-                      let lhs_str = match lhs.rewrite(context, lhs_budget, lhs_offset) {\n-                          Some(result) => result,\n-                          None => return Err(Ordering::Greater),\n-                      };\n-\n-                      let last_line_width = last_line_width(&lhs_str);\n-                      let rhs_budget = match max_width.checked_sub(last_line_width) {\n-                          Some(b) => b,\n-                          None => return Err(Ordering::Less),\n-                      };\n-                      let rhs_indent = offset + last_line_width + prefix.len() + infix.len();\n-\n-                      let rhs_str = match rhs.rewrite(context, rhs_budget, rhs_indent) {\n-                          Some(result) => result,\n-                          None => return Err(Ordering::Less),\n-                      };\n-\n-                      Ok(format!(\"{}{}{}{}{}\", prefix, lhs_str, infix, rhs_str, suffix))\n-                  })\n+    binary_search(1, max_width, |lhs_budget| {\n+        let lhs_offset = offset + prefix.len();\n+        let lhs_str = match lhs.rewrite(context, lhs_budget, lhs_offset) {\n+            Some(result) => result,\n+            None => return Err(Ordering::Greater),\n+        };\n+\n+        let last_line_width = last_line_width(&lhs_str);\n+        let rhs_budget = match max_width.checked_sub(last_line_width) {\n+            Some(b) => b,\n+            None => return Err(Ordering::Less),\n+        };\n+        let rhs_indent = offset + last_line_width + prefix.len() + infix.len();\n+\n+        let rhs_str = match rhs.rewrite(context, rhs_budget, rhs_indent) {\n+            Some(result) => result,\n+            None => return Err(Ordering::Less),\n+        };\n+\n+        Ok(format!(\"{}{}{}{}{}\", prefix, lhs_str, infix, rhs_str, suffix))\n+    })\n }\n \n pub fn rewrite_array<'a, I>(expr_iter: I,\n@@ -1135,7 +1134,8 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n         None => return Err(Ordering::Greater),\n     };\n     let offset = offset + extra_offset + 1;\n-    let block_indent = if args.len() == 1 {\n+    let arg_count = args.len();\n+    let block_indent = if arg_count == 1 {\n         context.block_indent\n     } else {\n         offset\n@@ -1150,8 +1150,65 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                              |item| item.rewrite(&inner_context, remaining_width, offset),\n                              span.lo,\n                              span.hi);\n+    let mut item_vec: Vec<_> = items.collect();\n+\n+    // Try letting the last argument overflow to the next line with block\n+    // indentation. If its first line fits on one line with the other arguments,\n+    // we format the function arguments horizontally.\n+    let overflow_last = match args.last().map(|x| &x.node) {\n+        Some(&ast::Expr_::ExprClosure(..)) |\n+        Some(&ast::Expr_::ExprBlock(..)) if arg_count > 1 => true,\n+        _ => false,\n+    } && context.config.chains_overflow_last;\n+\n+    let mut orig_last = None;\n+    let mut placeholder = None;\n+\n+    // Replace the last item with its first line to see if it fits with\n+    // first arguments.\n+    if overflow_last {\n+        let inner_context = &RewriteContext { block_indent: context.block_indent, ..*context };\n+        let rewrite = args.last().unwrap().rewrite(&inner_context, remaining_width, offset);\n+\n+        if let Some(rewrite) = rewrite {\n+            let rewrite_first_line = Some(rewrite[..first_line_width(&rewrite)].to_owned());\n+            placeholder = Some(rewrite);\n+\n+            swap(&mut item_vec[arg_count - 1].item, &mut orig_last);\n+            item_vec[arg_count - 1].item = rewrite_first_line;\n+        }\n+    }\n+\n+    let tactic = definitive_tactic(&item_vec,\n+                                   ListTactic::LimitedHorizontalVertical(context.config\n+                                                                                .fn_call_width),\n+                                   remaining_width);\n+\n+    // Replace the stub with the full overflowing last argument if the rewrite\n+    // succeeded and its first line fits with the other arguments.\n+    match (overflow_last, tactic, placeholder) {\n+        (true, DefinitiveListTactic::Horizontal, placeholder @ Some(..)) => {\n+            item_vec[arg_count - 1].item = placeholder;\n+        }\n+        (true, _, _) => {\n+            item_vec[arg_count - 1].item = orig_last;\n+        }\n+        (false, _, _) => {}\n+    }\n+\n+    let fmt = ListFormatting {\n+        tactic: tactic,\n+        separator: \",\",\n+        trailing_separator: SeparatorTactic::Never,\n+        indent: offset,\n+        width: width,\n+        ends_with_newline: false,\n+        config: context.config,\n+    };\n+\n+    // format_fn_args(items, remaining_width, offset, context.config)\n \n-    let list_str = match format_fn_args(items, remaining_width, offset, context.config) {\n+    let list_str = match write_list(&item_vec, &fmt) {\n         Some(str) => str,\n         None => return Err(Ordering::Less),\n     };"}, {"sha": "f33b7a3014f3fc23cc152e47b123e6a7e7450e1a", "filename": "src/missed_spans.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "patch": "@@ -22,16 +22,15 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn format_missing_with_indent(&mut self, end: BytePos) {\n         let config = self.config;\n-        self.format_missing_inner(end,\n-                                  |this, last_snippet, snippet| {\n-                                      this.buffer.push_str(last_snippet.trim_right());\n-                                      if last_snippet == snippet {\n-                                          // No new lines in the snippet.\n-                                          this.buffer.push_str(\"\\n\");\n-                                      }\n-                                      let indent = this.block_indent.to_string(config);\n-                                      this.buffer.push_str(&indent);\n-                                  })\n+        self.format_missing_inner(end, |this, last_snippet, snippet| {\n+            this.buffer.push_str(last_snippet.trim_right());\n+            if last_snippet == snippet {\n+                // No new lines in the snippet.\n+                this.buffer.push_str(\"\\n\");\n+            }\n+            let indent = this.block_indent.to_string(config);\n+            this.buffer.push_str(&indent);\n+        })\n     }\n \n     fn format_missing_inner<F: Fn(&mut FmtVisitor, &str, &str)>(&mut self,"}, {"sha": "2a400b306d296ee2daf1fd92f71b4399697c106d", "filename": "tests/source/chains.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "patch": "@@ -23,6 +23,20 @@ fn main() {\n             2\n         });\n \n+    some_fuuuuuuuuunction()\n+        .method_call_a(aaaaa, bbbbb, |c| {\n+            let x = c;\n+            x\n+        });\n+\n+    some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n+        let x = c;\n+        x\n+    }).method_call_b(aaaaa, bbbbb, |c| {\n+        let x = c;\n+        x\n+    });\n+\n     fffffffffffffffffffffffffffffffffff(a,\n                                         {\n                                             SCRIPT_TASK_ROOT"}, {"sha": "ea9b6867efe2ed636afd4ca832be1ae7fa649326", "filename": "tests/target/chains.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "patch": "@@ -30,12 +30,26 @@ fn main() {\n         }\n     });\n \n-    fffffffffffffffffffffffffffffffffff(a,\n-                                        {\n-                                            SCRIPT_TASK_ROOT.with(|root| {\n-                                                *root.borrow_mut() = Some(&script_task);\n-                                            });\n-                                        });\n+    some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n+        let x = c;\n+        x\n+    });\n+\n+    some_fuuuuuuuuunction()\n+        .method_call_a(aaaaa, bbbbb, |c| {\n+            let x = c;\n+            x\n+        })\n+        .method_call_b(aaaaa, bbbbb, |c| {\n+            let x = c;\n+            x\n+        });\n+\n+    fffffffffffffffffffffffffffffffffff(a, {\n+        SCRIPT_TASK_ROOT.with(|root| {\n+            *root.borrow_mut() = Some(&script_task);\n+        });\n+    });\n \n     let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx.map(|x| x + 5)\n                                                                           .map(|x| x / 2)"}, {"sha": "e3160285c4d892ec3d801c4ab4bcdd1d8dba53bc", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=3ca8d3677a9bbaa00ad8b4e5d4f5a4ee60357a13", "patch": "@@ -76,12 +76,11 @@ fn main() {\n \t\t}\n \t});\n \n-\tfffffffffffffffffffffffffffffffffff(a,\n-\t                                    {\n-\t\t                                    SCRIPT_TASK_ROOT.with(|root| {\n-\t\t\t                                    *root.borrow_mut() = Some(&script_task);\n-\t\t                                    });\n-\t                                    });\n+\tfffffffffffffffffffffffffffffffffff(a, {\n+\t\tSCRIPT_TASK_ROOT.with(|root| {\n+\t\t\t*root.borrow_mut() = Some(&script_task);\n+\t\t});\n+\t});\n \ta.b\n \t .c\n \t .d();"}]}