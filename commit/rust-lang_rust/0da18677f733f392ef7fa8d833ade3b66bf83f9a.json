{"sha": "0da18677f733f392ef7fa8d833ade3b66bf83f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYTE4Njc3ZjczM2YzOTJlZjdmYThkODMzYWRlM2I2NmJmODNmOWE=", "commit": {"author": {"name": "Alex Hamilton", "email": "alex.hamilton@ou.edu", "date": "2019-01-10T20:56:28Z"}, "committer": {"name": "Alex Hamilton", "email": "alex.hamilton@ou.edu", "date": "2019-01-29T21:33:04Z"}, "message": "Add match_wild lint (#3649).\n\nThis lint prevents using a wildcard in a match.", "tree": {"sha": "8edf2d214536ce4caca1d03177adae758d0ea534", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8edf2d214536ce4caca1d03177adae758d0ea534"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da18677f733f392ef7fa8d833ade3b66bf83f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da18677f733f392ef7fa8d833ade3b66bf83f9a", "html_url": "https://github.com/rust-lang/rust/commit/0da18677f733f392ef7fa8d833ade3b66bf83f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da18677f733f392ef7fa8d833ade3b66bf83f9a/comments", "author": {"login": "Aehmlo", "id": 1622250, "node_id": "MDQ6VXNlcjE2MjIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1622250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aehmlo", "html_url": "https://github.com/Aehmlo", "followers_url": "https://api.github.com/users/Aehmlo/followers", "following_url": "https://api.github.com/users/Aehmlo/following{/other_user}", "gists_url": "https://api.github.com/users/Aehmlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aehmlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aehmlo/subscriptions", "organizations_url": "https://api.github.com/users/Aehmlo/orgs", "repos_url": "https://api.github.com/users/Aehmlo/repos", "events_url": "https://api.github.com/users/Aehmlo/events{/privacy}", "received_events_url": "https://api.github.com/users/Aehmlo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aehmlo", "id": 1622250, "node_id": "MDQ6VXNlcjE2MjIyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1622250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aehmlo", "html_url": "https://github.com/Aehmlo", "followers_url": "https://api.github.com/users/Aehmlo/followers", "following_url": "https://api.github.com/users/Aehmlo/following{/other_user}", "gists_url": "https://api.github.com/users/Aehmlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aehmlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aehmlo/subscriptions", "organizations_url": "https://api.github.com/users/Aehmlo/orgs", "repos_url": "https://api.github.com/users/Aehmlo/repos", "events_url": "https://api.github.com/users/Aehmlo/events{/privacy}", "received_events_url": "https://api.github.com/users/Aehmlo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107", "html_url": "https://github.com/rust-lang/rust/commit/6b1a2a9c3e1c8443d30247aa0d02f64d9f44e107"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "4be045175bb2ec7063ef8cb711b2aa9af4c538b2", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0da18677f733f392ef7fa8d833ade3b66bf83f9a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da18677f733f392ef7fa8d833ade3b66bf83f9a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=0da18677f733f392ef7fa8d833ade3b66bf83f9a", "patch": "@@ -187,6 +187,25 @@ declare_clippy_lint! {\n     \"a match on an Option value instead of using `as_ref()` or `as_mut`\"\n }\n \n+/// **What it does:** Checks for wildcard matches using `_`.\n+///\n+/// **Why is this bad?** New variants added by library updates can be missed.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// match x {\n+///     A => {},\n+///     _ => {}\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub MATCH_WILD,\n+    restriction,\n+    \"a wildcard match arm using `_`\"\n+}\n+\n #[allow(missing_copy_implementations)]\n pub struct MatchPass;\n \n@@ -199,7 +218,8 @@ impl LintPass for MatchPass {\n             SINGLE_MATCH_ELSE,\n             MATCH_OVERLAPPING_ARM,\n             MATCH_WILD_ERR_ARM,\n-            MATCH_AS_REF\n+            MATCH_AS_REF,\n+            MATCH_WILD\n         )\n     }\n \n@@ -218,6 +238,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n             check_match_bool(cx, ex, arms, expr);\n             check_overlapping_arms(cx, ex, arms);\n             check_wild_err_arm(cx, ex, arms);\n+            check_wild_arm(cx, ex, arms);\n             check_match_as_ref(cx, ex, arms, expr);\n         }\n         if let ExprKind::Match(ref ex, ref arms, _) = expr.node {\n@@ -442,6 +463,22 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n     }\n }\n \n+fn check_wild_arm(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n+    let ex_ty = walk_ptrs_ty(cx.tables.expr_ty(ex));\n+    if match_type(cx, ex_ty, &paths::RESULT) {\n+        for arm in arms {\n+            if is_wild(&arm.pats[0]) {\n+                span_note_and_lint(cx,\n+                    MATCH_WILD,\n+                    arm.pats[0].span,\n+                    \"Wildcard match will miss any future added variants.\",\n+                    arm.pats[0].span,\n+                    \"to resolve, match each variant explicitly\");\n+            }\n+        }\n+    }\n+}\n+\n // If the block contains only a `panic!` macro (as expression or statement)\n fn is_panic_block(block: &Block) -> bool {\n     match (&block.expr, block.stmts.len(), block.stmts.first()) {"}]}