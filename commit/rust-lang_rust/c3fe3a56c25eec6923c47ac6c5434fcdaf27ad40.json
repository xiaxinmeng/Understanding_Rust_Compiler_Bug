{"sha": "c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZmUzYTU2YzI1ZWVjNjkyM2M0N2FjNmM1NDM0ZmNkYWYyN2FkNDA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-07T00:02:58Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-09T01:10:05Z"}, "message": "Allow mentioning an optional epoch on features", "tree": {"sha": "70001dd13884ab6d614deecce491d7fc77314188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70001dd13884ab6d614deecce491d7fc77314188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40", "html_url": "https://github.com/rust-lang/rust/commit/c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4338bd178d725c91fa052682ef6e26cc4280bf75", "url": "https://api.github.com/repos/rust-lang/rust/commits/4338bd178d725c91fa052682ef6e26cc4280bf75", "html_url": "https://github.com/rust-lang/rust/commit/4338bd178d725c91fa052682ef6e26cc4280bf75"}], "stats": {"total": 371, "additions": 186, "deletions": 185}, "files": [{"sha": "c53fa2bd9a6c26b77360b42aed531365714c98ce", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 186, "deletions": 185, "changes": 371, "blob_url": "https://github.com/rust-lang/rust/blob/c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c3fe3a56c25eec6923c47ac6c5434fcdaf27ad40", "patch": "@@ -28,6 +28,7 @@ use self::AttributeGate::*;\n use abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd, RangeSyntax};\n use attr;\n+use epoch::Epoch;\n use codemap::Spanned;\n use syntax_pos::Span;\n use errors::{DiagnosticBuilder, Handler, FatalError};\n@@ -54,12 +55,12 @@ macro_rules! set {\n }\n \n macro_rules! declare_features {\n-    ($((active, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((active, $feature: ident, $ver: expr, $issue: expr, $epoch: expr),)+) => {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         const ACTIVE_FEATURES:\n-                &'static [(&'static str, &'static str, Option<u32>, fn(&mut Features, Span))] =\n-            &[$((stringify!($feature), $ver, $issue, set!($feature))),+];\n+                &'static [(&'static str, &'static str, Option<u32>, Option<Epoch>, fn(&mut Features, Span))] =\n+            &[$((stringify!($feature), $ver, $issue, $epoch, set!($feature))),+];\n \n         /// A set of features to be used by later passes.\n         #[derive(Clone)]\n@@ -88,21 +89,21 @@ macro_rules! declare_features {\n         }\n     };\n \n-    ($((removed, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Represents unstable features which have since been removed (it was once Active)\n         const REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n         ];\n     };\n \n-    ($((stable_removed, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((stable_removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Represents stable features which have since been removed (it was once Accepted)\n         const STABLE_REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n         ];\n     };\n \n-    ($((accepted, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((accepted, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Those language feature has since been Accepted (it was once Active)\n         const ACCEPTED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n@@ -122,436 +123,436 @@ macro_rules! declare_features {\n // source, so take care when modifying it.\n \n declare_features! (\n-    (active, asm, \"1.0.0\", Some(29722)),\n-    (active, concat_idents, \"1.0.0\", Some(29599)),\n-    (active, link_args, \"1.0.0\", Some(29596)),\n-    (active, log_syntax, \"1.0.0\", Some(29598)),\n-    (active, non_ascii_idents, \"1.0.0\", Some(28979)),\n-    (active, plugin_registrar, \"1.0.0\", Some(29597)),\n-    (active, thread_local, \"1.0.0\", Some(29594)),\n-    (active, trace_macros, \"1.0.0\", Some(29598)),\n+    (active, asm, \"1.0.0\", Some(29722), None),\n+    (active, concat_idents, \"1.0.0\", Some(29599), None),\n+    (active, link_args, \"1.0.0\", Some(29596), None),\n+    (active, log_syntax, \"1.0.0\", Some(29598), None),\n+    (active, non_ascii_idents, \"1.0.0\", Some(28979), None),\n+    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n+    (active, thread_local, \"1.0.0\", Some(29594), None),\n+    (active, trace_macros, \"1.0.0\", Some(29598), None),\n \n     // rustc internal, for now:\n-    (active, intrinsics, \"1.0.0\", None),\n-    (active, lang_items, \"1.0.0\", None),\n+    (active, intrinsics, \"1.0.0\", None, None),\n+    (active, lang_items, \"1.0.0\", None, None),\n \n-    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602)),\n-    (active, linkage, \"1.0.0\", Some(29603)),\n-    (active, quote, \"1.0.0\", Some(29601)),\n+    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n+    (active, linkage, \"1.0.0\", Some(29603), None),\n+    (active, quote, \"1.0.0\", Some(29601), None),\n \n \n     // rustc internal\n-    (active, rustc_diagnostic_macros, \"1.0.0\", None),\n-    (active, rustc_const_unstable, \"1.0.0\", None),\n-    (active, advanced_slice_patterns, \"1.0.0\", Some(23121)),\n-    (active, box_syntax, \"1.0.0\", Some(27779)),\n-    (active, placement_in_syntax, \"1.0.0\", Some(27779)),\n-    (active, unboxed_closures, \"1.0.0\", Some(29625)),\n-\n-    (active, fundamental, \"1.0.0\", Some(29635)),\n-    (active, main, \"1.0.0\", Some(29634)),\n-    (active, needs_allocator, \"1.4.0\", Some(27389)),\n-    (active, on_unimplemented, \"1.0.0\", Some(29628)),\n-    (active, plugin, \"1.0.0\", Some(29597)),\n-    (active, simd_ffi, \"1.0.0\", Some(27731)),\n-    (active, start, \"1.0.0\", Some(29633)),\n-    (active, structural_match, \"1.8.0\", Some(31434)),\n-    (active, panic_runtime, \"1.10.0\", Some(32837)),\n-    (active, needs_panic_runtime, \"1.10.0\", Some(32837)),\n+    (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n+    (active, rustc_const_unstable, \"1.0.0\", None, None),\n+    (active, advanced_slice_patterns, \"1.0.0\", Some(23121), None),\n+    (active, box_syntax, \"1.0.0\", Some(27779), None),\n+    (active, placement_in_syntax, \"1.0.0\", Some(27779), None),\n+    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n+\n+    (active, fundamental, \"1.0.0\", Some(29635), None),\n+    (active, main, \"1.0.0\", Some(29634), None),\n+    (active, needs_allocator, \"1.4.0\", Some(27389), None),\n+    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n+    (active, plugin, \"1.0.0\", Some(29597), None),\n+    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+    (active, start, \"1.0.0\", Some(29633), None),\n+    (active, structural_match, \"1.8.0\", Some(31434), None),\n+    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n+    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n     // OIBIT specific features\n-    (active, optin_builtin_traits, \"1.0.0\", Some(13231)),\n+    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n     // macro re-export needs more discussion and stabilization\n-    (active, macro_reexport, \"1.0.0\", Some(29638)),\n+    (active, macro_reexport, \"1.0.0\", Some(29638), None),\n \n     // Allows use of #[staged_api]\n     // rustc internal\n-    (active, staged_api, \"1.0.0\", None),\n+    (active, staged_api, \"1.0.0\", None, None),\n \n     // Allows using #![no_core]\n-    (active, no_core, \"1.3.0\", Some(29639)),\n+    (active, no_core, \"1.3.0\", Some(29639), None),\n \n     // Allows using `box` in patterns; RFC 469\n-    (active, box_patterns, \"1.0.0\", Some(29641)),\n+    (active, box_patterns, \"1.0.0\", Some(29641), None),\n \n     // Allows using the unsafe_destructor_blind_to_params attribute;\n     // RFC 1238\n-    (active, dropck_parametricity, \"1.3.0\", Some(28498)),\n+    (active, dropck_parametricity, \"1.3.0\", Some(28498), None),\n \n     // Allows using the may_dangle attribute; RFC 1327\n-    (active, dropck_eyepatch, \"1.10.0\", Some(34761)),\n+    (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n \n     // Allows the use of custom attributes; RFC 572\n-    (active, custom_attribute, \"1.0.0\", Some(29642)),\n+    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n \n     // Allows the use of #[derive(Anything)] as sugar for\n     // #[derive_Anything].\n-    (active, custom_derive, \"1.0.0\", Some(29644)),\n+    (active, custom_derive, \"1.0.0\", Some(29644), None),\n \n     // Allows the use of rustc_* attributes; RFC 572\n-    (active, rustc_attrs, \"1.0.0\", Some(29642)),\n+    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n \n     // Allows the use of non lexical lifetimes; RFC 2094\n-    (active, nll, \"1.0.0\", Some(43234)),\n+    (active, nll, \"1.0.0\", Some(43234), None),\n \n     // Allows the use of #[allow_internal_unstable]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n     //\n     // rustc internal\n-    (active, allow_internal_unstable, \"1.0.0\", None),\n+    (active, allow_internal_unstable, \"1.0.0\", None, None),\n \n     // Allows the use of #[allow_internal_unsafe]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n     //\n     // rustc internal\n-    (active, allow_internal_unsafe, \"1.0.0\", None),\n+    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n \n     // #23121. Array patterns have some hazards yet.\n-    (active, slice_patterns, \"1.0.0\", Some(23121)),\n+    (active, slice_patterns, \"1.0.0\", Some(23121), None),\n \n     // Allows the definition of `const fn` functions.\n-    (active, const_fn, \"1.2.0\", Some(24111)),\n+    (active, const_fn, \"1.2.0\", Some(24111), None),\n \n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal\n-    (active, prelude_import, \"1.2.0\", None),\n+    (active, prelude_import, \"1.2.0\", None, None),\n \n     // Allows default type parameters to influence type inference.\n-    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336)),\n+    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n \n     // Allows associated type defaults\n-    (active, associated_type_defaults, \"1.2.0\", Some(29661)),\n+    (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n     // allow `repr(simd)`, and importing the various simd intrinsics\n-    (active, repr_simd, \"1.4.0\", Some(27731)),\n+    (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n     // Allows cfg(target_feature = \"...\").\n-    (active, cfg_target_feature, \"1.4.0\", Some(29717)),\n+    (active, cfg_target_feature, \"1.4.0\", Some(29717), None),\n \n     // allow `extern \"platform-intrinsic\" { ... }`\n-    (active, platform_intrinsics, \"1.4.0\", Some(27731)),\n+    (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n     // allow `#[unwind(..)]`\n     // rust runtime internal\n-    (active, unwind_attributes, \"1.4.0\", None),\n+    (active, unwind_attributes, \"1.4.0\", None, None),\n \n     // allow the use of `#[naked]` on functions.\n-    (active, naked_functions, \"1.9.0\", Some(32408)),\n+    (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n     // allow `#[no_debug]`\n-    (active, no_debug, \"1.5.0\", Some(29721)),\n+    (active, no_debug, \"1.5.0\", Some(29721), None),\n \n     // allow `#[omit_gdb_pretty_printer_section]`\n     // rustc internal.\n-    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None),\n+    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n \n     // Allows cfg(target_vendor = \"...\").\n-    (active, cfg_target_vendor, \"1.5.0\", Some(29718)),\n+    (active, cfg_target_vendor, \"1.5.0\", Some(29718), None),\n \n     // Allow attributes on expressions and non-item statements\n-    (active, stmt_expr_attributes, \"1.6.0\", Some(15701)),\n+    (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n \n     // allow using type ascription in expressions\n-    (active, type_ascription, \"1.6.0\", Some(23416)),\n+    (active, type_ascription, \"1.6.0\", Some(23416), None),\n \n     // Allows cfg(target_thread_local)\n-    (active, cfg_target_thread_local, \"1.7.0\", Some(29594)),\n+    (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n \n     // rustc internal\n-    (active, abi_vectorcall, \"1.7.0\", None),\n+    (active, abi_vectorcall, \"1.7.0\", None, None),\n \n     // a..=b and ..=b\n-    (active, inclusive_range_syntax, \"1.7.0\", Some(28237)),\n+    (active, inclusive_range_syntax, \"1.7.0\", Some(28237), None),\n \n     // X..Y patterns\n-    (active, exclusive_range_pattern, \"1.11.0\", Some(37854)),\n+    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n     // impl specialization (RFC 1210)\n-    (active, specialization, \"1.7.0\", Some(31844)),\n+    (active, specialization, \"1.7.0\", Some(31844), None),\n \n     // Allows cfg(target_has_atomic = \"...\").\n-    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976)),\n+    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n     // Allows `impl Trait` in function return types.\n-    (active, conservative_impl_trait, \"1.12.0\", Some(34511)),\n+    (active, conservative_impl_trait, \"1.12.0\", Some(34511), None),\n \n     // Allows `impl Trait` in function arguments.\n-    (active, universal_impl_trait, \"1.23.0\", Some(34511)),\n+    (active, universal_impl_trait, \"1.23.0\", Some(34511), None),\n \n     // The `!` type\n-    (active, never_type, \"1.13.0\", Some(35121)),\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n \n     // Allows all literals in attribute lists and values of key-value pairs.\n-    (active, attr_literals, \"1.13.0\", Some(34981)),\n+    (active, attr_literals, \"1.13.0\", Some(34981), None),\n \n     // Allows untagged unions `union U { ... }`\n-    (active, untagged_unions, \"1.13.0\", Some(32836)),\n+    (active, untagged_unions, \"1.13.0\", Some(32836), None),\n \n     // Used to identify the `compiler_builtins` crate\n     // rustc internal\n-    (active, compiler_builtins, \"1.13.0\", None),\n+    (active, compiler_builtins, \"1.13.0\", None, None),\n \n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n-    (active, generic_param_attrs, \"1.11.0\", Some(34761)),\n+    (active, generic_param_attrs, \"1.11.0\", Some(34761), None),\n \n     // Allows #[link(..., cfg(..))]\n-    (active, link_cfg, \"1.14.0\", Some(37406)),\n+    (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n-    (active, use_extern_macros, \"1.15.0\", Some(35896)),\n+    (active, use_extern_macros, \"1.15.0\", Some(35896), None),\n \n     // Allows #[target_feature(...)]\n-    (active, target_feature, \"1.15.0\", None),\n+    (active, target_feature, \"1.15.0\", None, None),\n \n     // `extern \"ptx-*\" fn()`\n-    (active, abi_ptx, \"1.15.0\", None),\n+    (active, abi_ptx, \"1.15.0\", None, None),\n \n     // The `i128` type\n-    (active, i128_type, \"1.16.0\", Some(35118)),\n+    (active, i128_type, \"1.16.0\", Some(35118), None),\n \n     // The `repr(i128)` annotation for enums\n-    (active, repr128, \"1.16.0\", Some(35118)),\n+    (active, repr128, \"1.16.0\", Some(35118), None),\n \n     // The `unadjusted` ABI. Perma unstable.\n-    (active, abi_unadjusted, \"1.16.0\", None),\n+    (active, abi_unadjusted, \"1.16.0\", None, None),\n \n     // Procedural macros 2.0.\n-    (active, proc_macro, \"1.16.0\", Some(38356)),\n+    (active, proc_macro, \"1.16.0\", Some(38356), None),\n \n     // Declarative macros 2.0 (`macro`).\n-    (active, decl_macro, \"1.17.0\", Some(39412)),\n+    (active, decl_macro, \"1.17.0\", Some(39412), None),\n \n     // Allows #[link(kind=\"static-nobundle\"...]\n-    (active, static_nobundle, \"1.16.0\", Some(37403)),\n+    (active, static_nobundle, \"1.16.0\", Some(37403), None),\n \n     // `extern \"msp430-interrupt\" fn()`\n-    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487)),\n+    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n \n     // Used to identify crates that contain sanitizer runtimes\n     // rustc internal\n-    (active, sanitizer_runtime, \"1.17.0\", None),\n+    (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n     // Used to identify crates that contain the profiler runtime\n     // rustc internal\n-    (active, profiler_runtime, \"1.18.0\", None),\n+    (active, profiler_runtime, \"1.18.0\", None, None),\n \n     // `extern \"x86-interrupt\" fn()`\n-    (active, abi_x86_interrupt, \"1.17.0\", Some(40180)),\n+    (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n \n     // Allows the `catch {...}` expression\n-    (active, catch_expr, \"1.17.0\", Some(31436)),\n+    (active, catch_expr, \"1.17.0\", Some(31436), None),\n \n     // Used to preserve symbols (see llvm.used)\n-    (active, used, \"1.18.0\", Some(40289)),\n+    (active, used, \"1.18.0\", Some(40289), None),\n \n     // Allows module-level inline assembly by way of global_asm!()\n-    (active, global_asm, \"1.18.0\", Some(35119)),\n+    (active, global_asm, \"1.18.0\", Some(35119), None),\n \n     // Allows overlapping impls of marker traits\n-    (active, overlapping_marker_traits, \"1.18.0\", Some(29864)),\n+    (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n     // Allows use of the :vis macro fragment specifier\n-    (active, macro_vis_matcher, \"1.18.0\", Some(41022)),\n+    (active, macro_vis_matcher, \"1.18.0\", Some(41022), None),\n \n     // rustc internal\n-    (active, abi_thiscall, \"1.19.0\", None),\n+    (active, abi_thiscall, \"1.19.0\", None, None),\n \n     // Allows a test to fail without failing the whole suite\n-    (active, allow_fail, \"1.19.0\", Some(42219)),\n+    (active, allow_fail, \"1.19.0\", Some(42219), None),\n \n     // Allows unsized tuple coercion.\n-    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877)),\n+    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n \n     // Generators\n-    (active, generators, \"1.21.0\", None),\n+    (active, generators, \"1.21.0\", None, None),\n \n     // Trait aliases\n-    (active, trait_alias, \"1.24.0\", Some(41517)),\n+    (active, trait_alias, \"1.24.0\", Some(41517), None),\n \n     // global allocators and their internals\n-    (active, global_allocator, \"1.20.0\", None),\n-    (active, allocator_internals, \"1.20.0\", None),\n+    (active, global_allocator, \"1.20.0\", None, None),\n+    (active, allocator_internals, \"1.20.0\", None, None),\n \n     // #[doc(cfg(...))]\n-    (active, doc_cfg, \"1.21.0\", Some(43781)),\n+    (active, doc_cfg, \"1.21.0\", Some(43781), None),\n     // #[doc(masked)]\n-    (active, doc_masked, \"1.21.0\", Some(44027)),\n+    (active, doc_masked, \"1.21.0\", Some(44027), None),\n     // #[doc(spotlight)]\n-    (active, doc_spotlight, \"1.22.0\", Some(45040)),\n+    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n     // #[doc(include=\"some-file\")]\n-    (active, external_doc, \"1.22.0\", Some(44732)),\n+    (active, external_doc, \"1.22.0\", Some(44732), None),\n \n     // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n-    (active, fn_must_use, \"1.21.0\", Some(43302)),\n+    (active, fn_must_use, \"1.21.0\", Some(43302), None),\n \n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n-    (active, non_exhaustive, \"1.22.0\", Some(44109)),\n+    (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n     // Copy/Clone closures (RFC 2132)\n-    (active, clone_closures, \"1.22.0\", Some(44490)),\n-    (active, copy_closures, \"1.22.0\", Some(44490)),\n+    (active, clone_closures, \"1.22.0\", Some(44490), None),\n+    (active, copy_closures, \"1.22.0\", Some(44490), None),\n \n     // allow `'_` placeholder lifetimes\n-    (active, underscore_lifetimes, \"1.22.0\", Some(44524)),\n+    (active, underscore_lifetimes, \"1.22.0\", Some(44524), None),\n \n     // allow `..=` in patterns (RFC 1192)\n-    (active, dotdoteq_in_patterns, \"1.22.0\", Some(28237)),\n+    (active, dotdoteq_in_patterns, \"1.22.0\", Some(28237), None),\n \n     // Default match binding modes (RFC 2005)\n-    (active, match_default_bindings, \"1.22.0\", Some(42640)),\n+    (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n \n     // Trait object syntax with `dyn` prefix\n-    (active, dyn_trait, \"1.22.0\", Some(44662)),\n+    (active, dyn_trait, \"1.22.0\", Some(44662), None),\n \n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n-    (active, crate_visibility_modifier, \"1.23.0\", Some(45388)),\n+    (active, crate_visibility_modifier, \"1.23.0\", Some(45388), None),\n \n     // extern types\n-    (active, extern_types, \"1.23.0\", Some(43467)),\n+    (active, extern_types, \"1.23.0\", Some(43467), None),\n \n     // Allow trait methods with arbitrary self types\n-    (active, arbitrary_self_types, \"1.23.0\", Some(44874)),\n+    (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n     // `crate` in paths\n-    (active, crate_in_paths, \"1.23.0\", Some(45477)),\n+    (active, crate_in_paths, \"1.23.0\", Some(45477), None),\n \n     // In-band lifetime bindings (e.g. `fn foo(x: &'a u8) -> &'a u8`)\n-    (active, in_band_lifetimes, \"1.23.0\", Some(44524)),\n+    (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n     // generic associated types (RFC 1598)\n-    (active, generic_associated_types, \"1.23.0\", Some(44265)),\n+    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     // Resolve absolute paths as paths from other crates\n-    (active, extern_absolute_paths, \"1.24.0\", Some(44660)),\n+    (active, extern_absolute_paths, \"1.24.0\", Some(44660), None),\n \n     // `foo.rs` as an alternative to `foo/mod.rs`\n-    (active, non_modrs_mods, \"1.24.0\", Some(44660)),\n+    (active, non_modrs_mods, \"1.24.0\", Some(44660), None),\n \n     // Termination trait in main (RFC 1937)\n-    (active, termination_trait, \"1.24.0\", Some(43301)),\n+    (active, termination_trait, \"1.24.0\", Some(43301), None),\n \n     // Allows use of the :lifetime macro fragment specifier\n-    (active, macro_lifetime_matcher, \"1.24.0\", Some(46895)),\n+    (active, macro_lifetime_matcher, \"1.24.0\", Some(46895), None),\n \n     // `extern` in paths\n-    (active, extern_in_paths, \"1.23.0\", Some(44660)),\n+    (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n \n     // Allows `#[repr(transparent)]` attribute on newtype structs\n-    (active, repr_transparent, \"1.25.0\", Some(43036)),\n+    (active, repr_transparent, \"1.25.0\", Some(43036), None),\n \n     // Use `?` as the Kleene \"at most one\" operator\n-    (active, macro_at_most_once_rep, \"1.25.0\", Some(48075)),\n+    (active, macro_at_most_once_rep, \"1.25.0\", Some(48075), None),\n \n     // Multiple patterns with `|` in `if let` and `while let`\n-    (active, if_while_or_patterns, \"1.26.0\", Some(48215)),\n+    (active, if_while_or_patterns, \"1.26.0\", Some(48215), None),\n \n     // Parentheses in patterns\n-    (active, pattern_parentheses, \"1.26.0\", None),\n+    (active, pattern_parentheses, \"1.26.0\", None, None),\n );\n \n declare_features! (\n-    (removed, import_shadowing, \"1.0.0\", None),\n-    (removed, managed_boxes, \"1.0.0\", None),\n+    (removed, import_shadowing, \"1.0.0\", None, None),\n+    (removed, managed_boxes, \"1.0.0\", None, None),\n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n-    (removed, negate_unsigned, \"1.0.0\", Some(29645)),\n-    (removed, reflect, \"1.0.0\", Some(27749)),\n+    (removed, negate_unsigned, \"1.0.0\", Some(29645), None),\n+    (removed, reflect, \"1.0.0\", Some(27749), None),\n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n-    (removed, opt_out_copy, \"1.0.0\", None),\n-    (removed, quad_precision_float, \"1.0.0\", None),\n-    (removed, struct_inherit, \"1.0.0\", None),\n-    (removed, test_removed_feature, \"1.0.0\", None),\n-    (removed, visible_private_types, \"1.0.0\", None),\n-    (removed, unsafe_no_drop_flag, \"1.0.0\", None),\n+    (removed, opt_out_copy, \"1.0.0\", None, None),\n+    (removed, quad_precision_float, \"1.0.0\", None, None),\n+    (removed, struct_inherit, \"1.0.0\", None, None),\n+    (removed, test_removed_feature, \"1.0.0\", None, None),\n+    (removed, visible_private_types, \"1.0.0\", None, None),\n+    (removed, unsafe_no_drop_flag, \"1.0.0\", None, None),\n     // Allows using items which are missing stability attributes\n     // rustc internal\n-    (removed, unmarked_api, \"1.0.0\", None),\n-    (removed, pushpop_unsafe, \"1.2.0\", None),\n-    (removed, allocator, \"1.0.0\", None),\n+    (removed, unmarked_api, \"1.0.0\", None, None),\n+    (removed, pushpop_unsafe, \"1.2.0\", None, None),\n+    (removed, allocator, \"1.0.0\", None, None),\n     // Allows the `#[simd]` attribute -- removed in favor of `#[repr(simd)]`\n-    (removed, simd, \"1.0.0\", Some(27731)),\n+    (removed, simd, \"1.0.0\", Some(27731), None),\n );\n \n declare_features! (\n-    (stable_removed, no_stack_check, \"1.0.0\", None),\n+    (stable_removed, no_stack_check, \"1.0.0\", None, None),\n );\n \n declare_features! (\n-    (accepted, associated_types, \"1.0.0\", None),\n+    (accepted, associated_types, \"1.0.0\", None, None),\n     // allow overloading augmented assignment operations like `a += b`\n-    (accepted, augmented_assignments, \"1.8.0\", Some(28235)),\n+    (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n     // allow empty structs and enum variants with braces\n-    (accepted, braced_empty_structs, \"1.8.0\", Some(29720)),\n+    (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n     // Allows indexing into constant arrays.\n-    (accepted, const_indexing, \"1.24.0\", Some(29947)),\n-    (accepted, default_type_params, \"1.0.0\", None),\n-    (accepted, globs, \"1.0.0\", None),\n-    (accepted, if_let, \"1.0.0\", None),\n+    (accepted, const_indexing, \"1.24.0\", Some(29947), None),\n+    (accepted, default_type_params, \"1.0.0\", None, None),\n+    (accepted, globs, \"1.0.0\", None, None),\n+    (accepted, if_let, \"1.0.0\", None, None),\n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n-    (accepted, issue_5723_bootstrap, \"1.0.0\", None),\n-    (accepted, macro_rules, \"1.0.0\", None),\n+    (accepted, issue_5723_bootstrap, \"1.0.0\", None, None),\n+    (accepted, macro_rules, \"1.0.0\", None, None),\n     // Allows using #![no_std]\n-    (accepted, no_std, \"1.6.0\", None),\n-    (accepted, slicing_syntax, \"1.0.0\", None),\n-    (accepted, struct_variant, \"1.0.0\", None),\n+    (accepted, no_std, \"1.6.0\", None, None),\n+    (accepted, slicing_syntax, \"1.0.0\", None, None),\n+    (accepted, struct_variant, \"1.0.0\", None, None),\n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n-    (accepted, test_accepted_feature, \"1.0.0\", None),\n-    (accepted, tuple_indexing, \"1.0.0\", None),\n+    (accepted, test_accepted_feature, \"1.0.0\", None, None),\n+    (accepted, tuple_indexing, \"1.0.0\", None, None),\n     // Allows macros to appear in the type position.\n-    (accepted, type_macros, \"1.13.0\", Some(27245)),\n-    (accepted, while_let, \"1.0.0\", None),\n+    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n+    (accepted, while_let, \"1.0.0\", None, None),\n     // Allows `#[deprecated]` attribute\n-    (accepted, deprecated, \"1.9.0\", Some(29935)),\n+    (accepted, deprecated, \"1.9.0\", Some(29935), None),\n     // `expr?`\n-    (accepted, question_mark, \"1.13.0\", Some(31436)),\n+    (accepted, question_mark, \"1.13.0\", Some(31436), None),\n     // Allows `..` in tuple (struct) patterns\n-    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627)),\n-    (accepted, item_like_imports, \"1.15.0\", Some(35120)),\n+    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n+    (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     // Allows using `Self` and associated types in struct expressions and patterns.\n-    (accepted, more_struct_aliases, \"1.16.0\", Some(37544)),\n+    (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n     // elide `'static` lifetimes in `static`s and `const`s\n-    (accepted, static_in_const, \"1.17.0\", Some(35897)),\n+    (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n     // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n-    (accepted, field_init_shorthand, \"1.17.0\", Some(37340)),\n+    (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n     // Allows the definition recursive static items.\n-    (accepted, static_recursion, \"1.17.0\", Some(29719)),\n+    (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n     // pub(restricted) visibilities (RFC 1422)\n-    (accepted, pub_restricted, \"1.18.0\", Some(32409)),\n+    (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n     // The #![windows_subsystem] attribute\n-    (accepted, windows_subsystem, \"1.18.0\", Some(37499)),\n+    (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n     // Allows `break {expr}` with a value inside `loop`s.\n-    (accepted, loop_break_value, \"1.19.0\", Some(37339)),\n+    (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n     // Permits numeric fields in struct expressions and patterns.\n-    (accepted, relaxed_adts, \"1.19.0\", Some(35626)),\n+    (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n     // Coerces non capturing closures to function pointers\n-    (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817)),\n+    (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n     // Allows attributes on struct literal fields.\n-    (accepted, struct_field_attributes, \"1.20.0\", Some(38814)),\n+    (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n-    (accepted, associated_consts, \"1.20.0\", Some(29646)),\n+    (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     // Usage of the `compile_error!` macro\n-    (accepted, compile_error, \"1.20.0\", Some(40872)),\n+    (accepted, compile_error, \"1.20.0\", Some(40872), None),\n     // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n-    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865)),\n+    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n     // Allow Drop types in constants (RFC 1440)\n-    (accepted, drop_types_in_const, \"1.22.0\", Some(33156)),\n+    (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n     // Allows the sysV64 ABI to be specified on all platforms\n     // instead of just the platforms on which it is the C ABI\n-    (accepted, abi_sysv64, \"1.24.0\", Some(36167)),\n+    (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n     // Allows `repr(align(16))` struct attribute (RFC 1358)\n-    (accepted, repr_align, \"1.25.0\", Some(33626)),\n+    (accepted, repr_align, \"1.25.0\", Some(33626), None),\n     // allow '|' at beginning of match arms (RFC 1925)\n-    (accepted, match_beginning_vert, \"1.25.0\", Some(44101)),\n+    (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n     // Nested groups in `use` (RFC 2128)\n-    (accepted, use_nested_groups, \"1.25.0\", Some(44494)),\n+    (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1818,8 +1819,8 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> F\n                         continue\n                     };\n \n-                    if let Some(&(_, _, _, set)) = ACTIVE_FEATURES.iter()\n-                        .find(|& &(n, _, _, _)| name == n) {\n+                    if let Some(&(_, _, _, _, set)) = ACTIVE_FEATURES.iter()\n+                        .find(|& &(n, ..)| name == n) {\n                         set(&mut features, mi.span);\n                         feature_checker.collect(&features, mi.span);\n                     }"}]}