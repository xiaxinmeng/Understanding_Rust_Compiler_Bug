{"sha": "ff3e06fbe67264eab91743bba61024598b9a4b1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmM2UwNmZiZTY3MjY0ZWFiOTE3NDNiYmE2MTAyNDU5OGI5YTRiMWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T12:27:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T17:12:50Z"}, "message": "rustc_metadata: Give a constructor to `CrateMetadata`", "tree": {"sha": "4d2e6e0a68c4fec2c7b0db6efd9c4acca958afae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d2e6e0a68c4fec2c7b0db6efd9c4acca958afae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff3e06fbe67264eab91743bba61024598b9a4b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3e06fbe67264eab91743bba61024598b9a4b1e", "html_url": "https://github.com/rust-lang/rust/commit/ff3e06fbe67264eab91743bba61024598b9a4b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff3e06fbe67264eab91743bba61024598b9a4b1e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdce69dd8328138383c6e4f4b13c06e371f7400d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdce69dd8328138383c6e4f4b13c06e371f7400d", "html_url": "https://github.com/rust-lang/rust/commit/bdce69dd8328138383c6e4f4b13c06e371f7400d"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "6d5bd5d3a09957849f135aee18d3b1127f30a64b", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ff3e06fbe67264eab91743bba61024598b9a4b1e/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3e06fbe67264eab91743bba61024598b9a4b1e/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ff3e06fbe67264eab91743bba61024598b9a4b1e", "patch": "@@ -3,19 +3,15 @@\n use crate::cstore::{self, CStore};\n use crate::locator::{CrateLocator, CratePaths};\n use crate::rmeta::{CrateRoot, CrateDep, MetadataBlob};\n-use rustc_data_structures::sync::{Lock, Once, AtomicCell};\n \n use rustc::hir::def_id::CrateNum;\n use rustc_data_structures::svh::Svh;\n-use rustc::dep_graph::DepNodeIndex;\n use rustc::middle::cstore::DepKind;\n-use rustc::mir::interpret::AllocDecodingState;\n use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc::session::search_paths::PathKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n-use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n use rustc::hir::def_id::LOCAL_CRATE;\n@@ -217,8 +213,6 @@ impl<'a> CrateLoader<'a> {\n \n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span, dep_kind);\n \n-        let dependencies: Vec<CrateNum> = cnum_map.iter().cloned().collect();\n-\n         let raw_proc_macros =  crate_root.proc_macro_data.map(|_| {\n             let temp_root;\n             let (dlsym_source, dlsym_root) = match &host_lib {\n@@ -230,37 +224,18 @@ impl<'a> CrateLoader<'a> {\n             self.dlsym_proc_macros(&dlsym_dylib.0, dlsym_root.disambiguator, span)\n         });\n \n-        let interpret_alloc_index: Vec<u32> = crate_root.interpret_alloc_index\n-                                                        .decode(&metadata)\n-                                                        .collect();\n-        let trait_impls = crate_root\n-            .impls\n-            .decode((&metadata, self.sess))\n-            .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))\n-            .collect();\n-\n-        let def_path_table = record_time(&self.sess.perf_stats.decode_def_path_tables_time, || {\n-            crate_root.def_path_table.decode((&metadata, self.sess))\n-        });\n-\n-        self.cstore.set_crate_data(cnum, cstore::CrateMetadata {\n-            extern_crate: Lock::new(None),\n-            def_path_table,\n-            trait_impls,\n-            root: crate_root,\n-            host_hash,\n-            blob: metadata,\n-            cnum_map,\n+        self.cstore.set_crate_data(cnum, cstore::CrateMetadata::new(\n+            self.sess,\n+            metadata,\n+            crate_root,\n+            raw_proc_macros,\n             cnum,\n-            dependencies: Lock::new(dependencies),\n-            source_map_import_info: Once::new(),\n-            alloc_decoding_state: AllocDecodingState::new(interpret_alloc_index),\n-            dep_kind: Lock::new(dep_kind),\n+            cnum_map,\n+            dep_kind,\n             source,\n             private_dep,\n-            raw_proc_macros,\n-            dep_node_index: AtomicCell::new(DepNodeIndex::INVALID),\n-        });\n+            host_hash,\n+        ));\n \n         cnum\n     }"}, {"sha": "d19f05619d9652f817dfddfe38c9a4fcc6dad436", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ff3e06fbe67264eab91743bba61024598b9a4b1e/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3e06fbe67264eab91743bba61024598b9a4b1e/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=ff3e06fbe67264eab91743bba61024598b9a4b1e", "patch": "@@ -7,7 +7,9 @@ use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::cstore::{CrateSource, DepKind, ExternCrate};\n use rustc::mir::interpret::AllocDecodingState;\n+use rustc::session::Session;\n use rustc_index::vec::IndexVec;\n+use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::sync::{Lrc, Lock, Once, AtomicCell};\n use rustc_data_structures::svh::Svh;\n@@ -97,6 +99,48 @@ pub enum LoadedMacro {\n     ProcMacro(SyntaxExtension),\n }\n \n+impl CrateMetadata {\n+    crate fn new(\n+        sess: &Session,\n+        blob: MetadataBlob,\n+        root: CrateRoot<'static>,\n+        raw_proc_macros: Option<&'static [ProcMacro]>,\n+        cnum: CrateNum,\n+        cnum_map: CrateNumMap,\n+        dep_kind: DepKind,\n+        source: CrateSource,\n+        private_dep: bool,\n+        host_hash: Option<Svh>,\n+    ) -> CrateMetadata {\n+        let def_path_table = record_time(&sess.perf_stats.decode_def_path_tables_time, || {\n+            root.def_path_table.decode((&blob, sess))\n+        });\n+        let trait_impls = root.impls.decode((&blob, sess))\n+            .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls)).collect();\n+        let alloc_decoding_state =\n+            AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());\n+        let dependencies = Lock::new(cnum_map.iter().cloned().collect());\n+        CrateMetadata {\n+            blob,\n+            root,\n+            def_path_table,\n+            trait_impls,\n+            raw_proc_macros,\n+            source_map_import_info: Once::new(),\n+            alloc_decoding_state,\n+            dep_node_index: AtomicCell::new(DepNodeIndex::INVALID),\n+            cnum,\n+            cnum_map,\n+            dependencies,\n+            dep_kind: Lock::new(dep_kind),\n+            source,\n+            private_dep,\n+            host_hash,\n+            extern_crate: Lock::new(None),\n+        }\n+    }\n+}\n+\n impl Default for CStore {\n     fn default() -> Self {\n         CStore {"}]}