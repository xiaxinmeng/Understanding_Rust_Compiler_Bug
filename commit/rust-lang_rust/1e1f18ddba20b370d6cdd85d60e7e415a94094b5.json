{"sha": "1e1f18ddba20b370d6cdd85d60e7e415a94094b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWYxOGRkYmEyMGIzNzBkNmNkZDg1ZDYwZTdlNDE1YTk0MDk0YjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-26T11:49:45Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-31T00:31:41Z"}, "message": "make a free fn for creating the URR", "tree": {"sha": "a17f61ffc51640e7d5f46a5af73fdf1ec6633e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a17f61ffc51640e7d5f46a5af73fdf1ec6633e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1f18ddba20b370d6cdd85d60e7e415a94094b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1f18ddba20b370d6cdd85d60e7e415a94094b5", "html_url": "https://github.com/rust-lang/rust/commit/1e1f18ddba20b370d6cdd85d60e7e415a94094b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1f18ddba20b370d6cdd85d60e7e415a94094b5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d42bc58b1dc881883444142e7898206a12bf5064", "url": "https://api.github.com/repos/rust-lang/rust/commits/d42bc58b1dc881883444142e7898206a12bf5064", "html_url": "https://github.com/rust-lang/rust/commit/d42bc58b1dc881883444142e7898206a12bf5064"}], "stats": {"total": 85, "additions": 42, "deletions": 43}, "files": [{"sha": "a539bf5f3aa96d75ebb973e8f30ff22fc1fa9766", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1e1f18ddba20b370d6cdd85d60e7e415a94094b5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1f18ddba20b370d6cdd85d60e7e415a94094b5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=1e1f18ddba20b370d6cdd85d60e7e415a94094b5", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n use borrow_check::location::LocationTable;\n-use borrow_check::nll::ToRegionVid;\n use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::type_check::constraint_conversion;\n use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n use borrow_check::nll::universal_regions::UniversalRegions;\n+use borrow_check::nll::ToRegionVid;\n use rustc::hir::def_id::DefId;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;\n@@ -53,37 +53,37 @@ crate struct UniversalRegionRelations<'tcx> {\n     inverse_outlives: TransitiveRelation<RegionVid>,\n }\n \n-impl UniversalRegionRelations<'tcx> {\n-    crate fn create(\n-        infcx: &InferCtxt<'_, '_, 'tcx>,\n-        mir_def_id: DefId,\n-        param_env: ty::ParamEnv<'tcx>,\n-        location_table: &LocationTable,\n-        implicit_region_bound: Option<ty::Region<'tcx>>,\n-        universal_regions: &Rc<UniversalRegions<'tcx>>,\n-        constraints: &mut MirTypeckRegionConstraints<'tcx>,\n-        all_facts: &mut Option<AllFacts>,\n-    ) -> Self {\n-        let mir_node_id = infcx.tcx.hir.as_local_node_id(mir_def_id).unwrap();\n-        UniversalRegionRelationsBuilder {\n-            infcx,\n-            mir_def_id,\n-            mir_node_id,\n-            param_env,\n-            implicit_region_bound,\n-            constraints,\n-            location_table,\n-            all_facts,\n+crate fn create(\n+    infcx: &InferCtxt<'_, '_, 'tcx>,\n+    mir_def_id: DefId,\n+    param_env: ty::ParamEnv<'tcx>,\n+    location_table: &LocationTable,\n+    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    universal_regions: &Rc<UniversalRegions<'tcx>>,\n+    constraints: &mut MirTypeckRegionConstraints<'tcx>,\n+    all_facts: &mut Option<AllFacts>,\n+) -> Rc<UniversalRegionRelations<'tcx>> {\n+    let mir_node_id = infcx.tcx.hir.as_local_node_id(mir_def_id).unwrap();\n+    UniversalRegionRelationsBuilder {\n+        infcx,\n+        mir_def_id,\n+        mir_node_id,\n+        param_env,\n+        implicit_region_bound,\n+        constraints,\n+        location_table,\n+        all_facts,\n+        universal_regions: universal_regions.clone(),\n+        relations: UniversalRegionRelations {\n             universal_regions: universal_regions.clone(),\n-            relations: UniversalRegionRelations {\n-                universal_regions: universal_regions.clone(),\n-                region_bound_pairs: Vec::new(),\n-                outlives: TransitiveRelation::new(),\n-                inverse_outlives: TransitiveRelation::new(),\n-            },\n-        }.create()\n-    }\n+            region_bound_pairs: Vec::new(),\n+            outlives: TransitiveRelation::new(),\n+            inverse_outlives: TransitiveRelation::new(),\n+        },\n+    }.create()\n+}\n \n+impl UniversalRegionRelations<'tcx> {\n     /// Records in the `outlives_relation` (and\n     /// `inverse_outlives_relation`) that `fr_a: fr_b`. Invoked by the\n     /// builder below.\n@@ -212,7 +212,7 @@ struct UniversalRegionRelationsBuilder<'this, 'gcx: 'tcx, 'tcx: 'this> {\n }\n \n impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n-    crate fn create(mut self) -> UniversalRegionRelations<'tcx> {\n+    crate fn create(mut self) -> Rc<UniversalRegionRelations<'tcx>> {\n         let unnormalized_input_output_tys = self\n             .universal_regions\n             .unnormalized_input_tys\n@@ -277,7 +277,7 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n             ).convert_all(&data);\n         }\n \n-        self.relations\n+        Rc::new(self.relations)\n     }\n \n     /// Update the type of a single local, which should represent"}, {"sha": "d4a4e17849c8e1af063f49f3bf8c3cdb0951279c", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e1f18ddba20b370d6cdd85d60e7e415a94094b5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1f18ddba20b370d6cdd85d60e7e415a94094b5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=1e1f18ddba20b370d6cdd85d60e7e415a94094b5", "patch": "@@ -132,17 +132,16 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         type_tests: Vec::default(),\n     };\n \n-    let universal_region_relations =\n-        Rc::new(free_region_relations::UniversalRegionRelations::create(\n-            infcx,\n-            mir_def_id,\n-            param_env,\n-            location_table,\n-            Some(implicit_region_bound),\n-            universal_regions,\n-            &mut constraints,\n-            all_facts,\n-        ));\n+    let universal_region_relations = free_region_relations::create(\n+        infcx,\n+        mir_def_id,\n+        param_env,\n+        location_table,\n+        Some(implicit_region_bound),\n+        universal_regions,\n+        &mut constraints,\n+        all_facts,\n+    );\n \n     {\n         let mut borrowck_context = BorrowCheckContext {"}]}