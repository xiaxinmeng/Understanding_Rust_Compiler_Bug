{"sha": "a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDA4ZmFjOTdmODFhM2ZjNTE2NjhiMGM3ZmEwZTJlNmYyYTU5OWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-23T13:19:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-23T13:19:18Z"}, "message": "Auto merge of #77090 - rust-lang:revert-76110-convert-openoptions-cint, r=dtolnay\n\nRevert \"Function to convert OpenOptions to c_int\"\n\nReverts rust-lang/rust#76110. This broke Rust's stability guarantees.\n\nCloses https://github.com/rust-lang/rust/issues/77089.\n\nr? `@joshtriplett`", "tree": {"sha": "83c27159ea7a1d673de941ba1669abc56280b046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c27159ea7a1d673de941ba1669abc56280b046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b", "html_url": "https://github.com/rust-lang/rust/commit/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33aa8be8b5fa6872186a94d9e1fa5088da386e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/33aa8be8b5fa6872186a94d9e1fa5088da386e4b", "html_url": "https://github.com/rust-lang/rust/commit/33aa8be8b5fa6872186a94d9e1fa5088da386e4b"}, {"sha": "15f08d6ddfa1d6e50f783196bd63cacf7d015b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f08d6ddfa1d6e50f783196bd63cacf7d015b3e", "html_url": "https://github.com/rust-lang/rust/commit/15f08d6ddfa1d6e50f783196bd63cacf7d015b3e"}], "stats": {"total": 35, "additions": 0, "deletions": 35}, "files": [{"sha": "4b9f4ceb29c490f857eccb729d26289eb8dbb69d", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b", "patch": "@@ -348,31 +348,6 @@ pub trait OpenOptionsExt {\n     /// ```\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n     fn custom_flags(&mut self, flags: i32) -> &mut Self;\n-\n-    /// Get the flags as [`libc::c_int`].\n-    ///\n-    /// This method allows the reuse of the OpenOptions as flags argument for [`libc::open`].\n-    ///\n-    /// [`libc::c_int`]: https://docs.rs/libc/*/libc/type.c_int.html\n-    /// [`libc::open`]: https://docs.rs/libc/*/libc/fn.open.html\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```no_run\n-    /// # #![feature(rustc_private)]\n-    /// #![feature(open_options_ext_as_flags)]\n-    /// extern crate libc;\n-    /// use std::ffi::CString;\n-    /// use std::fs::OpenOptions;\n-    /// use std::os::unix::fs::OpenOptionsExt;\n-    ///\n-    /// let mut options = OpenOptions::new();\n-    /// options.write(true).read(true);\n-    /// let file_name = CString::new(\"foo.txt\").unwrap();\n-    /// let file = unsafe { libc::open(file_name.as_c_str().as_ptr(), options.as_flags().unwrap()) };\n-    /// ```\n-    #[unstable(feature = \"open_options_ext_as_flags\", issue = \"76801\")]\n-    fn as_flags(&self) -> io::Result<libc::c_int>;\n }\n \n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n@@ -386,10 +361,6 @@ impl OpenOptionsExt for OpenOptions {\n         self.as_inner_mut().custom_flags(flags);\n         self\n     }\n-\n-    fn as_flags(&self) -> io::Result<libc::c_int> {\n-        self.as_inner().as_flags()\n-    }\n }\n \n /// Unix-specific extensions to [`fs::Metadata`]."}, {"sha": "566ac0920dc8f5762842b3585c20fc1cb5fc6d06", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=a6008fac97f81a3fc51668b0c7fa0e2e6f2a599b", "patch": "@@ -656,12 +656,6 @@ impl OpenOptions {\n         self.mode = mode as mode_t;\n     }\n \n-    pub fn as_flags(&self) -> io::Result<c_int> {\n-        let access_mode = self.get_access_mode()?;\n-        let creation_mode = self.get_creation_mode()?;\n-        Ok(creation_mode | access_mode | self.custom_flags)\n-    }\n-\n     fn get_access_mode(&self) -> io::Result<c_int> {\n         match (self.read, self.write, self.append) {\n             (true, false, false) => Ok(libc::O_RDONLY),"}]}