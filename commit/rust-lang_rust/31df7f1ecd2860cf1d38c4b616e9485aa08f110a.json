{"sha": "31df7f1ecd2860cf1d38c4b616e9485aa08f110a", "node_id": "C_kwDOAAsO6NoAKDMxZGY3ZjFlY2QyODYwY2YxZDM4YzRiNjE2ZTk0ODVhYTA4ZjExMGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-25T02:37:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-25T02:37:12Z"}, "message": "Rollup merge of #109568 - RalfJung:miri-raw-ptr-dyn, r=oli-obk\n\nmiri: fix raw pointer dyn receivers\n\nr? `@oli-obk`\nFixes https://github.com/rust-lang/miri/issues/2786", "tree": {"sha": "4fed1a7629322b0e78c34f97749a71a83a90258f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fed1a7629322b0e78c34f97749a71a83a90258f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31df7f1ecd2860cf1d38c4b616e9485aa08f110a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHl5YCRBK7hj4Ov3rIwAAUM4IAKPadzx8TS9C2oUGnY1bP7n6\n0RHRjRryWPRDnEYQe1WM3hiy6E7Xy/cJurlmJ5mouFgVn1J6h76tvQ/DMCAcyyS4\norsX1O5c/jBGnl6PTdeJB3fWB0Pn7hwjS6ienJpiNzEjPKPDYvKysgWn/sgYufys\n7bJcp1Y6Lwy+j9riWKxsmq4oPyO6AUWe0N6ZBwzS0y47d/5w8Txz8zaDVRDWhHpG\nsiP2rWlzOnvBC6PFqcqvcEOV76XZZzwss8K2aFwmrVfy/BXQVt3k4G6EVX3eTu12\nYWZBhhOJw+mbrgb9weuBORdT5PaQD4hL7Tfkdswrbm5pT6syQQat2NCEeCwtH9k=\n=FLwh\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fed1a7629322b0e78c34f97749a71a83a90258f\nparent 3b49ad3814ba36d55273ab0a0dba085b8953c960\nparent c2fddfd8e256855c11529b79a4987b2137590f90\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679711832 +0100\ncommitter GitHub <noreply@github.com> 1679711832 +0100\n\nRollup merge of #109568 - RalfJung:miri-raw-ptr-dyn, r=oli-obk\n\nmiri: fix raw pointer dyn receivers\n\nr? `@oli-obk`\nFixes https://github.com/rust-lang/miri/issues/2786\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31df7f1ecd2860cf1d38c4b616e9485aa08f110a", "html_url": "https://github.com/rust-lang/rust/commit/31df7f1ecd2860cf1d38c4b616e9485aa08f110a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31df7f1ecd2860cf1d38c4b616e9485aa08f110a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b49ad3814ba36d55273ab0a0dba085b8953c960", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b49ad3814ba36d55273ab0a0dba085b8953c960", "html_url": "https://github.com/rust-lang/rust/commit/3b49ad3814ba36d55273ab0a0dba085b8953c960"}, {"sha": "c2fddfd8e256855c11529b79a4987b2137590f90", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2fddfd8e256855c11529b79a4987b2137590f90", "html_url": "https://github.com/rust-lang/rust/commit/c2fddfd8e256855c11529b79a4987b2137590f90"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "fc83985eaca22fdc5596fc370081327353b70c23", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31df7f1ecd2860cf1d38c4b616e9485aa08f110a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31df7f1ecd2860cf1d38c4b616e9485aa08f110a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=31df7f1ecd2860cf1d38c4b616e9485aa08f110a", "patch": "@@ -539,7 +539,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let mut receiver = args[0].clone();\n                 let receiver_place = loop {\n                     match receiver.layout.ty.kind() {\n-                        ty::Ref(..) | ty::RawPtr(..) => break self.deref_operand(&receiver)?,\n+                        ty::Ref(..) | ty::RawPtr(..) => {\n+                            // We do *not* use `deref_operand` here: we don't want to conceptually\n+                            // create a place that must be dereferenceable, since the receiver might\n+                            // be a raw pointer and (for `*const dyn Trait`) we don't need to\n+                            // actually access memory to resolve this method.\n+                            // Also see <https://github.com/rust-lang/miri/issues/2786>.\n+                            let val = self.read_immediate(&receiver)?;\n+                            break self.ref_to_mplace(&val)?;\n+                        }\n                         ty::Dynamic(.., ty::Dyn) => break receiver.assert_mem_place(), // no immediate unsized values\n                         ty::Dynamic(.., ty::DynStar) => {\n                             // Not clear how to handle this, so far we assume the receiver is always a pointer."}, {"sha": "fc58775a195e81914f8c0e09995bcfea87b12fb1", "filename": "src/tools/miri/tests/pass/dyn-arbitrary-self.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/31df7f1ecd2860cf1d38c4b616e9485aa08f110a/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-arbitrary-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31df7f1ecd2860cf1d38c4b616e9485aa08f110a/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-arbitrary-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdyn-arbitrary-self.rs?ref=31df7f1ecd2860cf1d38c4b616e9485aa08f110a", "patch": "@@ -123,8 +123,35 @@ fn pointers_and_wrappers() {\n     assert_eq!(wpw.wrapper_ptr_wrapper(), 7);\n }\n \n+fn raw_ptr_receiver() {\n+    use std::ptr;\n+\n+    trait Foo {\n+        fn foo(self: *const Self) -> &'static str;\n+    }\n+\n+    impl Foo for i32 {\n+        fn foo(self: *const Self) -> &'static str {\n+            \"I'm an i32!\"\n+        }\n+    }\n+\n+    impl Foo for u32 {\n+        fn foo(self: *const Self) -> &'static str {\n+            \"I'm a u32!\"\n+        }\n+    }\n+\n+    let null_i32 = ptr::null::<i32>() as *const dyn Foo;\n+    let null_u32 = ptr::null::<u32>() as *const dyn Foo;\n+\n+    assert_eq!(\"I'm an i32!\", null_i32.foo());\n+    assert_eq!(\"I'm a u32!\", null_u32.foo());\n+}\n+\n fn main() {\n     pin_box_dyn();\n     stdlib_pointers();\n     pointers_and_wrappers();\n+    raw_ptr_receiver();\n }"}]}