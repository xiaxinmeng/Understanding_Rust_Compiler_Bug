{"sha": "c648bd55580a918d6f26f39bc167913a9da5ae3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NDhiZDU1NTgwYTkxOGQ2ZjI2ZjM5YmMxNjc5MTNhOWRhNWFlM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-09T08:47:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-09T08:47:38Z"}, "message": "Auto merge of #81384 - tmiasko:partial-ord, r=petrochenkov\n\nFix derived PartialOrd operators\n\nThe derived implementation of `partial_cmp` compares matching fields one\nby one, stopping the computation when the result of a comparison is not\nequal to `Some(Equal)`.\n\nOn the other hand the derived implementation for `lt`, `le`, `gt` and\n`ge` continues the computation when the result of a field comparison is\n`None`, consequently those operators are not transitive and inconsistent\nwith `partial_cmp`.\n\nFix the inconsistency by using the default implementation that fall-backs\nto the `partial_cmp`. This also avoids creating very deeply nested\nclosures that were quite costly to compile.\n\nFixes #81373.\nHelps with #81278, #80118.", "tree": {"sha": "b365028cade2f02b40ab3af5230d39bc3dcb5500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b365028cade2f02b40ab3af5230d39bc3dcb5500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c648bd55580a918d6f26f39bc167913a9da5ae3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c648bd55580a918d6f26f39bc167913a9da5ae3d", "html_url": "https://github.com/rust-lang/rust/commit/c648bd55580a918d6f26f39bc167913a9da5ae3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c648bd55580a918d6f26f39bc167913a9da5ae3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4008fe94935d05ffb3a48fc5b7149070bb45550", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4008fe94935d05ffb3a48fc5b7149070bb45550", "html_url": "https://github.com/rust-lang/rust/commit/f4008fe94935d05ffb3a48fc5b7149070bb45550"}, {"sha": "62366ee6f14ed2798130aeedfbfe51e0d208d2c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/62366ee6f14ed2798130aeedfbfe51e0d208d2c6", "html_url": "https://github.com/rust-lang/rust/commit/62366ee6f14ed2798130aeedfbfe51e0d208d2c6"}], "stats": {"total": 1801, "additions": 83, "deletions": 1718}, "files": [{"sha": "db808bf2ff51e54776e19db62b9a91a4418339ed", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 7, "deletions": 190, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -1,13 +1,11 @@\n-pub use OrderingOp::*;\n-\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n-use crate::deriving::{path_local, path_std, pathvec_std};\n+use crate::deriving::{path_std, pathvec_std};\n \n use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, BinOpKind, Expr, MetaItem};\n+use rustc_ast::{Expr, MetaItem};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n \n pub fn expand_deriving_partial_ord(\n@@ -17,26 +15,6 @@ pub fn expand_deriving_partial_ord(\n     item: &Annotatable,\n     push: &mut dyn FnMut(Annotatable),\n ) {\n-    macro_rules! md {\n-        ($name:expr, $op:expr, $equal:expr) => {{\n-            let inline = cx.meta_word(span, sym::inline);\n-            let attrs = vec![cx.attribute(inline)];\n-            MethodDef {\n-                name: $name,\n-                generics: Bounds::empty(),\n-                explicit_self: borrowed_explicit_self(),\n-                args: vec![(borrowed_self(), sym::other)],\n-                ret_ty: Literal(path_local!(bool)),\n-                attributes: attrs,\n-                is_unsafe: false,\n-                unify_fieldless_variants: true,\n-                combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n-                    cs_op($op, $equal, cx, span, substr)\n-                })),\n-            }\n-        }};\n-    }\n-\n     let ordering_ty = Literal(path_std!(cmp::Ordering));\n     let ret_ty = Literal(Path::new_(\n         pathvec_std!(option::Option),\n@@ -62,21 +40,6 @@ pub fn expand_deriving_partial_ord(\n         })),\n     };\n \n-    // avoid defining extra methods if we can\n-    // c-like enums, enums without any fields and structs without fields\n-    // can safely define only `partial_cmp`.\n-    let methods = if is_type_without_fields(item) {\n-        vec![partial_cmp_def]\n-    } else {\n-        vec![\n-            partial_cmp_def,\n-            md!(sym::lt, true, false),\n-            md!(sym::le, true, true),\n-            md!(sym::gt, false, false),\n-            md!(sym::ge, false, true),\n-        ]\n-    };\n-\n     let trait_def = TraitDef {\n         span,\n         attributes: vec![],\n@@ -85,39 +48,12 @@ pub fn expand_deriving_partial_ord(\n         generics: Bounds::empty(),\n         is_unsafe: false,\n         supports_unions: false,\n-        methods,\n+        methods: vec![partial_cmp_def],\n         associated_types: Vec::new(),\n     };\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-#[derive(Copy, Clone)]\n-pub enum OrderingOp {\n-    PartialCmpOp,\n-    LtOp,\n-    LeOp,\n-    GtOp,\n-    GeOp,\n-}\n-\n-pub fn some_ordering_collapsed(\n-    cx: &mut ExtCtxt<'_>,\n-    span: Span,\n-    op: OrderingOp,\n-    self_arg_tags: &[Ident],\n-) -> P<ast::Expr> {\n-    let lft = cx.expr_ident(span, self_arg_tags[0]);\n-    let rgt = cx.expr_addr_of(span, cx.expr_ident(span, self_arg_tags[1]));\n-    let op_sym = match op {\n-        PartialCmpOp => sym::partial_cmp,\n-        LtOp => sym::lt,\n-        LeOp => sym::le,\n-        GtOp => sym::gt,\n-        GeOp => sym::ge,\n-    };\n-    cx.expr_method_call(span, lft, Ident::new(op_sym, span), vec![rgt])\n-}\n-\n pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> P<Expr> {\n     let test_id = Ident::new(sym::cmp, span);\n     let ordering = cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, sym::Equal]));\n@@ -171,132 +107,13 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n             } else {\n-                some_ordering_collapsed(cx, span, PartialCmpOp, tag_tuple)\n+                let lft = cx.expr_ident(span, tag_tuple[0]);\n+                let rgt = cx.expr_addr_of(span, cx.expr_ident(span, tag_tuple[1]));\n+                cx.expr_method_call(span, lft, Ident::new(sym::partial_cmp, span), vec![rgt])\n             }\n         }),\n         cx,\n         span,\n         substr,\n     )\n }\n-\n-/// Strict inequality.\n-fn cs_op(\n-    less: bool,\n-    inclusive: bool,\n-    cx: &mut ExtCtxt<'_>,\n-    span: Span,\n-    substr: &Substructure<'_>,\n-) -> P<Expr> {\n-    let ordering_path = |cx: &mut ExtCtxt<'_>, name: &str| {\n-        cx.expr_path(\n-            cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, Symbol::intern(name)])),\n-        )\n-    };\n-\n-    let par_cmp = |cx: &mut ExtCtxt<'_>, span, self_f: P<Expr>, other_fs: &[P<Expr>], default| {\n-        let other_f = match other_fs {\n-            [o_f] => o_f,\n-            _ => cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\"),\n-        };\n-\n-        // `PartialOrd::partial_cmp(self.fi, other.fi)`\n-        let cmp_path = cx.expr_path(\n-            cx.path_global(span, cx.std_path(&[sym::cmp, sym::PartialOrd, sym::partial_cmp])),\n-        );\n-        let cmp = cx.expr_call(\n-            span,\n-            cmp_path,\n-            vec![cx.expr_addr_of(span, self_f), cx.expr_addr_of(span, other_f.clone())],\n-        );\n-\n-        let default = ordering_path(cx, default);\n-        // `Option::unwrap_or(_, Ordering::Equal)`\n-        let unwrap_path = cx.expr_path(\n-            cx.path_global(span, cx.std_path(&[sym::option, sym::Option, sym::unwrap_or])),\n-        );\n-        cx.expr_call(span, unwrap_path, vec![cmp, default])\n-    };\n-\n-    let fold = cs_fold1(\n-        false, // need foldr\n-        |cx, span, subexpr, self_f, other_fs| {\n-            // build up a series of `partial_cmp`s from the inside\n-            // out (hence foldr) to get lexical ordering, i.e., for op ==\n-            // `ast::lt`\n-            //\n-            // ```\n-            // Ordering::then_with(\n-            //    Option::unwrap_or(\n-            //        PartialOrd::partial_cmp(self.f1, other.f1), Ordering::Equal)\n-            //    ),\n-            //    Option::unwrap_or(\n-            //        PartialOrd::partial_cmp(self.f2, other.f2), Ordering::Greater)\n-            //    )\n-            // )\n-            // == Ordering::Less\n-            // ```\n-            //\n-            // and for op ==\n-            // `ast::le`\n-            //\n-            // ```\n-            // Ordering::then_with(\n-            //    Option::unwrap_or(\n-            //        PartialOrd::partial_cmp(self.f1, other.f1), Ordering::Equal)\n-            //    ),\n-            //    Option::unwrap_or(\n-            //        PartialOrd::partial_cmp(self.f2, other.f2), Ordering::Greater)\n-            //    )\n-            // )\n-            // != Ordering::Greater\n-            // ```\n-            //\n-            // The optimiser should remove the redundancy. We explicitly\n-            // get use the binops to avoid auto-deref dereferencing too many\n-            // layers of pointers, if the type includes pointers.\n-\n-            // `Option::unwrap_or(PartialOrd::partial_cmp(self.fi, other.fi), Ordering::Equal)`\n-            let par_cmp = par_cmp(cx, span, self_f, other_fs, \"Equal\");\n-\n-            // `Ordering::then_with(Option::unwrap_or(..), ..)`\n-            let then_with_path = cx.expr_path(\n-                cx.path_global(span, cx.std_path(&[sym::cmp, sym::Ordering, sym::then_with])),\n-            );\n-            cx.expr_call(span, then_with_path, vec![par_cmp, cx.lambda0(span, subexpr)])\n-        },\n-        |cx, args| match args {\n-            Some((span, self_f, other_fs)) => {\n-                let opposite = if less { \"Greater\" } else { \"Less\" };\n-                par_cmp(cx, span, self_f, other_fs, opposite)\n-            }\n-            None => cx.expr_bool(span, inclusive),\n-        },\n-        Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n-            if self_args.len() != 2 {\n-                cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")\n-            } else {\n-                let op = match (less, inclusive) {\n-                    (false, false) => GtOp,\n-                    (false, true) => GeOp,\n-                    (true, false) => LtOp,\n-                    (true, true) => LeOp,\n-                };\n-                some_ordering_collapsed(cx, span, op, tag_tuple)\n-            }\n-        }),\n-        cx,\n-        span,\n-        substr,\n-    );\n-\n-    match *substr.fields {\n-        EnumMatching(.., ref all_fields) | Struct(.., ref all_fields) if !all_fields.is_empty() => {\n-            let ordering = ordering_path(cx, if less ^ inclusive { \"Less\" } else { \"Greater\" });\n-            let comp_op = if inclusive { BinOpKind::Ne } else { BinOpKind::Eq };\n-\n-            cx.expr_binary(span, comp_op, fold, ordering)\n-        }\n-        _ => fold,\n-    }\n-}"}, {"sha": "3954fc3d0bd981e5b6cdf6abd5e001aeb95e334d", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,82 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-ge-{closure#0}-{closure#0} - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize, // Count: 1 - `PartialOrd` compared `minor` values in 3.2.1 vs. 3.3.0</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n-8:5-8:17: @0[4]: _3 = &amp;(*_4)\n-8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n-8:5-8:17: @0[8]: _5 = &amp;(*_6)\n-8:5-8:17: @0.Call: _2 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n-8:5-8:17: @1[3]: _7 = std::cmp::Ordering::Less\n-8:5-8:17: @1.Call: _0 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n-8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n-</body>\n-</html>"}, {"sha": "86e18b3dbfd7b9bf541e67f7b4d428938c805bcb", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge-{closure#0}.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,83 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-ge-{closure#0} - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n-7:5-7:17: @0[5]: _4 = &amp;(*_5)\n-7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n-7:5-7:17: @0[9]: _6 = &amp;(*_7)\n-7:5-7:17: @0.Call: _3 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n-7:5-7:17: @1[3]: _8 = std::cmp::Ordering::Equal\n-7:5-7:17: @1.Call: _2 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n-7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n-7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n-</body>\n-</html>"}, {"sha": "652dc277081135305cbeb982c363842c8cf5f0ca", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,92 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-ge - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n-4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n-4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n-4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n-4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n-4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n-4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n-4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n-4:39-4:49: @0[20]: _14 = &amp;(*_6)\n-4:39-4:49: @0[21]: _13 = &amp;(*_14)\n-4:39-4:49: @0[24]: _16 = &amp;(*_3)\n-4:39-4:49: @0[25]: _15 = &amp;(*_16)\n-4:39-4:49: @0.Call: _12 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n-4:39-4:49: @1[3]: _17 = std::cmp::Ordering::Equal\n-4:39-4:49: @1.Call: _11 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n-4:39-4:49: @2[4]: _19 = &amp;_7\n-4:39-4:49: @2[6]: _20 = &amp;_4\n-4:39-4:49: @2[8]: _21 = &amp;_8\n-4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span></span></div>\n-</body>\n-</html>"}, {"sha": "57fc5d8d6dede92f67add88ef93cdee5f635faea", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,82 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-gt-{closure#0}-{closure#0} - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize, // Count: 1 - `PartialOrd` compared `minor` values in 3.2.1 vs. 3.3.0</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n-8:5-8:17: @0[4]: _3 = &amp;(*_4)\n-8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n-8:5-8:17: @0[8]: _5 = &amp;(*_6)\n-8:5-8:17: @0.Call: _2 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n-8:5-8:17: @1[3]: _7 = std::cmp::Ordering::Less\n-8:5-8:17: @1.Call: _0 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n-8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n-</body>\n-</html>"}, {"sha": "6fbcdff5ab7f7dcb1362a7c977f9b1627483997f", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt-{closure#0}.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,83 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-gt-{closure#0} - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n-7:5-7:17: @0[5]: _4 = &amp;(*_5)\n-7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n-7:5-7:17: @0[9]: _6 = &amp;(*_7)\n-7:5-7:17: @0.Call: _3 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n-7:5-7:17: @1[3]: _8 = std::cmp::Ordering::Equal\n-7:5-7:17: @1.Call: _2 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n-7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n-7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n-</body>\n-</html>"}, {"sha": "37f2661cf1809fb17a787094be97e616b0dc0d06", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,92 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-gt - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n-4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n-4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n-4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n-4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n-4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n-4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n-4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n-4:39-4:49: @0[20]: _14 = &amp;(*_6)\n-4:39-4:49: @0[21]: _13 = &amp;(*_14)\n-4:39-4:49: @0[24]: _16 = &amp;(*_3)\n-4:39-4:49: @0[25]: _15 = &amp;(*_16)\n-4:39-4:49: @0.Call: _12 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n-4:39-4:49: @1[3]: _17 = std::cmp::Ordering::Equal\n-4:39-4:49: @1.Call: _11 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n-4:39-4:49: @2[4]: _19 = &amp;_7\n-4:39-4:49: @2[6]: _20 = &amp;_4\n-4:39-4:49: @2[8]: _21 = &amp;_8\n-4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span></span></div>\n-</body>\n-</html>"}, {"sha": "5789988c991690d402b8a3029b80cce9c04efb87", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,82 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-le-{closure#0}-{closure#0} - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize, // Count: 1 - `PartialOrd` compared `minor` values in 3.2.1 vs. 3.3.0</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n-8:5-8:17: @0[4]: _3 = &amp;(*_4)\n-8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n-8:5-8:17: @0[8]: _5 = &amp;(*_6)\n-8:5-8:17: @0.Call: _2 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n-8:5-8:17: @1[3]: _7 = std::cmp::Ordering::Greater\n-8:5-8:17: @1.Call: _0 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n-8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n-</body>\n-</html>"}, {"sha": "de7c38bc9c4fa15b0500a493f58a3b6594e81b96", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le-{closure#0}.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,83 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-le-{closure#0} - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n-7:5-7:17: @0[5]: _4 = &amp;(*_5)\n-7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n-7:5-7:17: @0[9]: _6 = &amp;(*_7)\n-7:5-7:17: @0.Call: _3 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n-7:5-7:17: @1[3]: _8 = std::cmp::Ordering::Equal\n-7:5-7:17: @1.Call: _2 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n-7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n-7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n-</body>\n-</html>"}, {"sha": "1f3068868f618717fcb87498616f2f12b104a989", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,92 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-le - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n-4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n-4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n-4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n-4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n-4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n-4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n-4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n-4:39-4:49: @0[20]: _14 = &amp;(*_6)\n-4:39-4:49: @0[21]: _13 = &amp;(*_14)\n-4:39-4:49: @0[24]: _16 = &amp;(*_3)\n-4:39-4:49: @0[25]: _15 = &amp;(*_16)\n-4:39-4:49: @0.Call: _12 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n-4:39-4:49: @1[3]: _17 = std::cmp::Ordering::Equal\n-4:39-4:49: @1.Call: _11 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n-4:39-4:49: @2[4]: _19 = &amp;_7\n-4:39-4:49: @2[6]: _20 = &amp;_4\n-4:39-4:49: @2[8]: _21 = &amp;_8\n-4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span></span></div>\n-</body>\n-</html>"}, {"sha": "746daab5ac1c942cbd8291b88dc235c923e59d1c", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,82 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-lt-{closure#0}-{closure#0} - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize, // Count: 1 - `PartialOrd` compared `minor` values in 3.2.1 vs. 3.3.0</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n-8:5-8:17: @0[4]: _3 = &amp;(*_4)\n-8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n-8:5-8:17: @0[8]: _5 = &amp;(*_6)\n-8:5-8:17: @0.Call: _2 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n-8:5-8:17: @1[3]: _7 = std::cmp::Ordering::Greater\n-8:5-8:17: @1.Call: _0 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n-8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n-</body>\n-</html>"}, {"sha": "0867a7ad3641ba7e1537f1624ad8ecab206b9d6a", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt-{closure#0}.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,83 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-lt-{closure#0} - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n-7:5-7:17: @0[5]: _4 = &amp;(*_5)\n-7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n-7:5-7:17: @0[9]: _6 = &amp;(*_7)\n-7:5-7:17: @0.Call: _3 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n-7:5-7:17: @1[3]: _8 = std::cmp::Ordering::Equal\n-7:5-7:17: @1.Call: _2 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n-7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n-7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n-</body>\n-</html>"}, {"sha": "abcd7147c6fb3dc58dab17b4ce9446c2c6b1c9e3", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt.-------.InstrumentCoverage.0.html", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/f4008fe94935d05ffb3a48fc5b7149070bb45550/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html?ref=f4008fe94935d05ffb3a48fc5b7149070bb45550", "patch": "@@ -1,92 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-\n-Preview this file as rendered HTML from the github source at:\n-https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html\n-\n-For revisions in Pull Requests (PR):\n-  * Replace \"rust-lang\" with the github PR author\n-  * Replace \"master\" with the PR branch name\n-\n--->\n-<html>\n-<head>\n-<title>partial_eq.{impl#2}-lt - Coverage Spans</title>\n-<style>\n-    .line {\n-        counter-increment: line;\n-    }\n-    .line:before {\n-        content: counter(line) \": \";\n-        font-family: Menlo, Monaco, monospace;\n-        font-style: italic;\n-        width: 3.8em;\n-        display: inline-block;\n-        text-align: right;\n-        filter: opacity(50%);\n-        -webkit-user-select: none;\n-    }\n-    .code {\n-        color: #dddddd;\n-        background-color: #222222;\n-        font-family: Menlo, Monaco, monospace;\n-        line-height: 1.4em;\n-        border-bottom: 2px solid #222222;\n-        white-space: pre;\n-        display: inline-block;\n-    }\n-    .odd {\n-        background-color: #55bbff;\n-        color: #223311;\n-    }\n-    .even {\n-        background-color: #ee7756;\n-        color: #551133;\n-    }\n-    .code {\n-        --index: calc(var(--layer) - 1);\n-        padding-top: calc(var(--index) * 0.15em);\n-        filter:\n-            hue-rotate(calc(var(--index) * 25deg))\n-            saturate(calc(100% - (var(--index) * 2%)))\n-            brightness(calc(100% - (var(--index) * 1.5%)));\n-    }\n-    .annotation {\n-        color: #4444ff;\n-        font-family: monospace;\n-        font-style: italic;\n-        display: none;\n-        -webkit-user-select: none;\n-    }\n-    body:active .annotation {\n-        /* requires holding mouse down anywhere on the page */\n-        display: inline-block;\n-    }\n-    span:hover .annotation {\n-        /* requires hover over a span ONLY on its first line */\n-        display: inline-block;\n-    }\n-</style>\n-</head>\n-<body>\n-<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n-4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n-4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n-4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n-4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n-4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n-4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n-4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n-4:39-4:49: @0[20]: _14 = &amp;(*_6)\n-4:39-4:49: @0[21]: _13 = &amp;(*_14)\n-4:39-4:49: @0[24]: _16 = &amp;(*_3)\n-4:39-4:49: @0[25]: _15 = &amp;(*_16)\n-4:39-4:49: @0.Call: _12 = &lt;usize as std::cmp::PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n-4:39-4:49: @1[3]: _17 = std::cmp::Ordering::Equal\n-4:39-4:49: @1.Call: _11 = std::option::Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n-4:39-4:49: @2[4]: _19 = &amp;_7\n-4:39-4:49: @2[6]: _20 = &amp;_4\n-4:39-4:49: @2[8]: _21 = &amp;_8\n-4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span></span></div>\n-</body>\n-</html>"}, {"sha": "9078a7ffa4fd70efe0f435172ad5f238a65e8b49", "filename": "src/test/ui/derives/derive-partial-ord.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderive-partial-ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderive-partial-ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-partial-ord.rs?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -0,0 +1,60 @@\n+// Checks that in a derived implementation of PartialOrd the lt, le, ge, gt methods are consistent\n+// with partial_cmp. Also verifies that implementation is consistent with that for tuples.\n+//\n+// run-pass\n+\n+#[derive(PartialEq, PartialOrd)]\n+struct P(f64, f64);\n+\n+fn main() {\n+    let values: &[f64] = &[1.0, 2.0, f64::NAN];\n+    for a in values {\n+        for b in values {\n+            for c in values {\n+                for d in values {\n+                    // Check impl for a tuple.\n+                    check(&(*a, *b), &(*c, *d));\n+\n+                    // Check derived impl.\n+                    check(&P(*a, *b), &P(*c, *d));\n+\n+                    // Check that impls agree with each other.\n+                    assert_eq!(\n+                        PartialOrd::partial_cmp(&(*a, *b), &(*c, *d)),\n+                        PartialOrd::partial_cmp(&P(*a, *b), &P(*c, *d)),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check<T: PartialOrd>(a: &T, b: &T) {\n+    use std::cmp::Ordering::*;\n+    match PartialOrd::partial_cmp(a, b) {\n+        None => {\n+            assert!(!(a < b));\n+            assert!(!(a <= b));\n+            assert!(!(a > b));\n+            assert!(!(a >= b));\n+        }\n+        Some(Equal) => {\n+            assert!(!(a < b));\n+            assert!(a <= b);\n+            assert!(!(a > b));\n+            assert!(a >= b);\n+        }\n+        Some(Less) => {\n+            assert!(a < b);\n+            assert!(a <= b);\n+            assert!(!(a > b));\n+            assert!(!(a >= b));\n+        }\n+        Some(Greater) => {\n+            assert!(!(a < b));\n+            assert!(!(a <= b));\n+            assert!(a > b);\n+            assert!(a >= b);\n+        }\n+    }\n+}"}, {"sha": "a769c137657ccc1a677f2ed773ade757f7e90b0d", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.rs?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -7,10 +7,6 @@ struct Error;\n enum Enum {\n    A {\n      x: Error //~ ERROR can't compare `Error` with `Error`\n-              //~| ERROR can't compare `Error` with `Error`\n-              //~| ERROR can't compare `Error` with `Error`\n-              //~| ERROR can't compare `Error` with `Error`\n-              //~| ERROR can't compare `Error` with `Error`\n    }\n }\n "}, {"sha": "9f2f47add1278ae13f99780a3c15a9d24765141e", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -8,46 +8,6 @@ LL |      x: Error\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n-   |\n-LL |      x: Error\n-   |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n-   |\n-LL |      x: Error\n-   |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n-   |\n-LL |      x: Error\n-   |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:9:6\n-   |\n-LL |      x: Error\n-   |      ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4f0d794e42d761bf658dc94509bcd4c59028c1f9", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.rs?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -7,10 +7,6 @@ struct Error;\n enum Enum {\n    A(\n      Error //~ ERROR can't compare `Error` with `Error`\n-           //~| ERROR can't compare `Error` with `Error`\n-           //~| ERROR can't compare `Error` with `Error`\n-           //~| ERROR can't compare `Error` with `Error`\n-           //~| ERROR can't compare `Error` with `Error`\n      )\n }\n "}, {"sha": "25073c5718c9de4cc64f30057f5843110a365782", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -8,46 +8,6 @@ LL |      Error\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n-   |\n-LL |      Error\n-   |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n-   |\n-LL |      Error\n-   |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n-   |\n-LL |      Error\n-   |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-enum.rs:9:6\n-   |\n-LL |      Error\n-   |      ^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "da857c6743575e4b876b0d2c5efab8be1032e765", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.rs?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -6,10 +6,6 @@ struct Error;\n #[derive(PartialOrd,PartialEq)]\n struct Struct {\n     x: Error //~ ERROR can't compare `Error` with `Error`\n-             //~| ERROR can't compare `Error` with `Error`\n-             //~| ERROR can't compare `Error` with `Error`\n-             //~| ERROR can't compare `Error` with `Error`\n-             //~| ERROR can't compare `Error` with `Error`\n }\n \n fn main() {}"}, {"sha": "b514dd9993f7f2eccee63a6e5573b2e63e8dea29", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -8,46 +8,6 @@ LL |     x: Error\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n-   |\n-LL |     x: Error\n-   |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n-   |\n-LL |     x: Error\n-   |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n-   |\n-LL |     x: Error\n-   |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-struct.rs:8:5\n-   |\n-LL |     x: Error\n-   |     ^^^^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "61d5076708800b7973b42eb4ee64abc0739f7184", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.rs?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -6,10 +6,6 @@ struct Error;\n #[derive(PartialOrd,PartialEq)]\n struct Struct(\n     Error //~ ERROR can't compare `Error` with `Error`\n-          //~| ERROR can't compare `Error` with `Error`\n-          //~| ERROR can't compare `Error` with `Error`\n-          //~| ERROR can't compare `Error` with `Error`\n-          //~| ERROR can't compare `Error` with `Error`\n );\n \n fn main() {}"}, {"sha": "c098f6bfb36acd802d652b3f2be133629a4cce90", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -8,46 +8,6 @@ LL |     Error\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n-   |\n-LL |     Error\n-   |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n-   |\n-LL |     Error\n-   |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n-   |\n-LL |     Error\n-   |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Error` with `Error`\n-  --> $DIR/derives-span-PartialOrd-tuple-struct.rs:8:5\n-   |\n-LL |     Error\n-   |     ^^^^^ no implementation for `Error < Error` and `Error > Error`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Error`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "13e627a492f404d4cb9eb9d9ca8313257e042a0c", "filename": "src/test/ui/issues/issue-34229.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.rs?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -1,9 +1,5 @@\n #[derive(PartialEq)] struct Comparable;\n #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n //~^ ERROR can't compare `Comparable`\n-//~| ERROR can't compare `Comparable`\n-//~| ERROR can't compare `Comparable`\n-//~| ERROR can't compare `Comparable`\n-//~| ERROR can't compare `Comparable`\n \n fn main() {}"}, {"sha": "7268e94c8d167e2c69e7fc5419830434524e0c74", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -8,46 +8,6 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0277]: can't compare `Comparable` with `Comparable`\n-  --> $DIR/issue-34229.rs:2:46\n-   |\n-LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n-   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Comparable`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Comparable` with `Comparable`\n-  --> $DIR/issue-34229.rs:2:46\n-   |\n-LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n-   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Comparable`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Comparable` with `Comparable`\n-  --> $DIR/issue-34229.rs:2:46\n-   |\n-LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n-   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Comparable`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `Comparable` with `Comparable`\n-  --> $DIR/issue-34229.rs:2:46\n-   |\n-LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n-   |                                              ^^^^^^^^^^ no implementation for `Comparable < Comparable` and `Comparable > Comparable`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `Comparable`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "e28e47435c2c2fa999be8b7eabec626e9f8cb160", "filename": "src/test/ui/range/range_traits-1.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Frange%2Frange_traits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Frange%2Frange_traits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.rs?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -4,45 +4,21 @@ use std::ops::*;\n struct AllTheRanges {\n     a: Range<usize>,\n     //~^ ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n     //~| ERROR Ord\n     b: RangeTo<usize>,\n     //~^ ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n     //~| ERROR Ord\n     c: RangeFrom<usize>,\n     //~^ ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n     //~| ERROR Ord\n     d: RangeFull,\n     //~^ ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n     //~| ERROR Ord\n     e: RangeInclusive<usize>,\n     //~^ ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n     //~| ERROR Ord\n     f: RangeToInclusive<usize>,\n     //~^ ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n-    //~| ERROR can't compare\n     //~| ERROR Ord\n }\n "}, {"sha": "e2c1eeb292a7bf10bd5d97173db8f69b5ff7bbb5", "filename": "src/test/ui/range/range_traits-1.stderr", "status": "modified", "additions": 11, "deletions": 251, "changes": 262, "blob_url": "https://github.com/rust-lang/rust/blob/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c648bd55580a918d6f26f39bc167913a9da5ae3d/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr?ref=c648bd55580a918d6f26f39bc167913a9da5ae3d", "patch": "@@ -9,7 +9,7 @@ LL |     a: Range<usize>,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n-  --> $DIR/range_traits-1.rs:12:5\n+  --> $DIR/range_traits-1.rs:8:5\n    |\n LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n@@ -19,7 +19,7 @@ LL |     b: RangeTo<usize>,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n-  --> $DIR/range_traits-1.rs:19:5\n+  --> $DIR/range_traits-1.rs:11:5\n    |\n LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n@@ -29,7 +29,7 @@ LL |     c: RangeFrom<usize>,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n-  --> $DIR/range_traits-1.rs:26:5\n+  --> $DIR/range_traits-1.rs:14:5\n    |\n LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n@@ -39,7 +39,7 @@ LL |     d: RangeFull,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:33:5\n+  --> $DIR/range_traits-1.rs:17:5\n    |\n LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n@@ -49,247 +49,7 @@ LL |     e: RangeInclusive<usize>,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:40:5\n-   |\n-LL |     f: RangeToInclusive<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n-  --> $DIR/range_traits-1.rs:5:5\n-   |\n-LL |     a: Range<usize>,\n-   |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::Range<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n-  --> $DIR/range_traits-1.rs:12:5\n-   |\n-LL |     b: RangeTo<usize>,\n-   |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n-  --> $DIR/range_traits-1.rs:19:5\n-   |\n-LL |     c: RangeFrom<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n-  --> $DIR/range_traits-1.rs:26:5\n-   |\n-LL |     d: RangeFull,\n-   |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFull`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:33:5\n-   |\n-LL |     e: RangeInclusive<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:40:5\n-   |\n-LL |     f: RangeToInclusive<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n-  --> $DIR/range_traits-1.rs:5:5\n-   |\n-LL |     a: Range<usize>,\n-   |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::Range<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n-  --> $DIR/range_traits-1.rs:12:5\n-   |\n-LL |     b: RangeTo<usize>,\n-   |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n-  --> $DIR/range_traits-1.rs:19:5\n-   |\n-LL |     c: RangeFrom<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n-  --> $DIR/range_traits-1.rs:26:5\n-   |\n-LL |     d: RangeFull,\n-   |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFull`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:33:5\n-   |\n-LL |     e: RangeInclusive<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:40:5\n-   |\n-LL |     f: RangeToInclusive<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n-  --> $DIR/range_traits-1.rs:5:5\n-   |\n-LL |     a: Range<usize>,\n-   |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::Range<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n-  --> $DIR/range_traits-1.rs:12:5\n-   |\n-LL |     b: RangeTo<usize>,\n-   |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n-  --> $DIR/range_traits-1.rs:19:5\n-   |\n-LL |     c: RangeFrom<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n-  --> $DIR/range_traits-1.rs:26:5\n-   |\n-LL |     d: RangeFull,\n-   |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFull`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:33:5\n-   |\n-LL |     e: RangeInclusive<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:40:5\n-   |\n-LL |     f: RangeToInclusive<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::Range<usize>` with `std::ops::Range<usize>`\n-  --> $DIR/range_traits-1.rs:5:5\n-   |\n-LL |     a: Range<usize>,\n-   |     ^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<usize> < std::ops::Range<usize>` and `std::ops::Range<usize> > std::ops::Range<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::Range<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n-  --> $DIR/range_traits-1.rs:12:5\n-   |\n-LL |     b: RangeTo<usize>,\n-   |     ^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeTo<usize> < std::ops::RangeTo<usize>` and `std::ops::RangeTo<usize> > std::ops::RangeTo<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n-  --> $DIR/range_traits-1.rs:19:5\n-   |\n-LL |     c: RangeFrom<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeFrom<usize> < std::ops::RangeFrom<usize>` and `std::ops::RangeFrom<usize> > std::ops::RangeFrom<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n-  --> $DIR/range_traits-1.rs:26:5\n-   |\n-LL |     d: RangeFull,\n-   |     ^^^^^^^^^^^^ no implementation for `std::ops::RangeFull < std::ops::RangeFull` and `std::ops::RangeFull > std::ops::RangeFull`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFull`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:33:5\n-   |\n-LL |     e: RangeInclusive<usize>,\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeInclusive<usize> < std::ops::RangeInclusive<usize>` and `std::ops::RangeInclusive<usize> > std::ops::RangeInclusive<usize>`\n-   |\n-   = help: the trait `PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n-   = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n-  --> $DIR/range_traits-1.rs:40:5\n+  --> $DIR/range_traits-1.rs:20:5\n    |\n LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::RangeToInclusive<usize> < std::ops::RangeToInclusive<usize>` and `std::ops::RangeToInclusive<usize> > std::ops::RangeToInclusive<usize>`\n@@ -308,7 +68,7 @@ LL |     a: Range<usize>,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeTo<usize>: Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:12:5\n+  --> $DIR/range_traits-1.rs:8:5\n    |\n LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeTo<usize>`\n@@ -317,7 +77,7 @@ LL |     b: RangeTo<usize>,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFrom<usize>: Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:19:5\n+  --> $DIR/range_traits-1.rs:11:5\n    |\n LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFrom<usize>`\n@@ -326,7 +86,7 @@ LL |     c: RangeFrom<usize>,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFull: Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:26:5\n+  --> $DIR/range_traits-1.rs:14:5\n    |\n LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFull`\n@@ -335,7 +95,7 @@ LL |     d: RangeFull,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeInclusive<usize>: Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:33:5\n+  --> $DIR/range_traits-1.rs:17:5\n    |\n LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeInclusive<usize>`\n@@ -344,14 +104,14 @@ LL |     e: RangeInclusive<usize>,\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeToInclusive<usize>: Ord` is not satisfied\n-  --> $DIR/range_traits-1.rs:40:5\n+  --> $DIR/range_traits-1.rs:20:5\n    |\n LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeToInclusive<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}