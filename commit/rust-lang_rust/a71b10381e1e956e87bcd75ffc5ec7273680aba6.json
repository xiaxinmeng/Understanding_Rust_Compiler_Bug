{"sha": "a71b10381e1e956e87bcd75ffc5ec7273680aba6", "node_id": "C_kwDOAAsO6NoAKGE3MWIxMDM4MWUxZTk1NmU4N2JjZDc1ZmZjNWVjNzI3MzY4MGFiYTY", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-06T23:31:17Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:22Z"}, "message": "Add imperfectly overlapping test", "tree": {"sha": "423a3ad033d0917e74910b24e995db3473ed1c9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423a3ad033d0917e74910b24e995db3473ed1c9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a71b10381e1e956e87bcd75ffc5ec7273680aba6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRDoACgkQGBtJ+fOP\nM3THuAwAm+dGZ1BJRhsXitsPggHBtZnvQa8IoGXa5biZQcOTlpHQs5oJsTc2EQ0Q\nMFX4wLXf0Qz+rSzpiSQCpzyupDfNplBcvfoYtsalk0fBr6Nl4xMlr2XW29mHDDn4\nyfLmd9Rmqxyv6f6KEem8CJaOVL6iST6PV3KfdaGDUeN2/VnVOp/2JG073f3G/Q8l\nqoupyOw5JD0Zd/ivQj30BeKnwzbzdJpiVJr7se8yUqBbL9PCr2KWc41M+yIWVKAW\nWtEA5LIj9psMf+sobpxWuW0EA3HvrkqTbihpLufE8ZfE+8LbMIHFzG3A+oM2tRQp\nbWx875M/OoHtB6rYR5Srj1mq+OXn0EH2dmYC4gUKgop+W6ApX5qahiDSjCR3JinC\n9AnFD7sWRM4/FXI9AvjV54Gug6N9O325zh0NL08cwS5nCP+YKYz9GUPfpO3cYYh+\nYSBgqUbxODvkyog8lGpbOHd8BwBirPg1bwdBJRBhUXx9fchx8d3b42HkUtan02vL\n3c5UUc5r\n=RPCM\n-----END PGP SIGNATURE-----", "payload": "tree 423a3ad033d0917e74910b24e995db3473ed1c9c\nparent 53f4887659fd587ca551db664c317fb15998dfd0\nauthor Andy Wang <cbeuw.andy@gmail.com> 1651879877 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539322 +0100\n\nAdd imperfectly overlapping test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a71b10381e1e956e87bcd75ffc5ec7273680aba6", "html_url": "https://github.com/rust-lang/rust/commit/a71b10381e1e956e87bcd75ffc5ec7273680aba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a71b10381e1e956e87bcd75ffc5ec7273680aba6/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f4887659fd587ca551db664c317fb15998dfd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f4887659fd587ca551db664c317fb15998dfd0", "html_url": "https://github.com/rust-lang/rust/commit/53f4887659fd587ca551db664c317fb15998dfd0"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "90820d4348df51c0c0df0807c9be7ab383fe785e", "filename": "tests/run-pass/concurrency/weak_memory.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a71b10381e1e956e87bcd75ffc5ec7273680aba6/tests%2Frun-pass%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71b10381e1e956e87bcd75ffc5ec7273680aba6/tests%2Frun-pass%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fweak_memory.rs?ref=a71b10381e1e956e87bcd75ffc5ec7273680aba6", "patch": "@@ -28,9 +28,10 @@\n // M. Batty, S. Owens, S. Sarkar, P. Sewell and T. Weber,\n // \"Mathematizing C++ concurrency\", ACM SIGPLAN Notices, vol. 46, no. 1, pp. 55-66, 2011.\n // Available: https://ss265.host.cs.st-andrews.ac.uk/papers/n3132.pdf.\n+#![feature(atomic_from_mut)]\n \n use std::sync::atomic::Ordering::*;\n-use std::sync::atomic::{fence, AtomicUsize};\n+use std::sync::atomic::{fence, AtomicU16, AtomicU32, AtomicUsize};\n use std::thread::{spawn, yield_now};\n \n #[derive(Copy, Clone)]\n@@ -196,6 +197,26 @@ fn test_mixed_access() {\n     assert_eq!(r2, 2);\n }\n \n+// Strictly speaking, atomic accesses that imperfectly overlap with existing\n+// atomic objects are UB. Nonetheless we'd like to provide a sane value when\n+// the access is not racy.\n+fn test_imperfectly_overlapping_access() {\n+    let mut qword = AtomicU32::new(42);\n+    assert_eq!(qword.load(Relaxed), 42);\n+    qword.store(u32::to_be(0xabbafafa), Relaxed);\n+\n+    let qword_mut = qword.get_mut();\n+\n+    let dwords_mut = unsafe { std::mem::transmute::<&mut u32, &mut [u16; 2]>(qword_mut) };\n+\n+    let (hi_mut, lo_mut) = dwords_mut.split_at_mut(1);\n+\n+    let (hi, lo) = (AtomicU16::from_mut(&mut hi_mut[0]), AtomicU16::from_mut(&mut lo_mut[0]));\n+\n+    assert_eq!(u16::from_be(hi.load(Relaxed)), 0xabba);\n+    assert_eq!(u16::from_be(lo.load(Relaxed)), 0xfafa);\n+}\n+\n // The following two tests are taken from Repairing Sequential Consistency in C/C++11\n // by Lahav et al.\n // https://plv.mpi-sws.org/scfix/paper.pdf\n@@ -270,6 +291,7 @@ fn test_cpp20_rwc_syncs() {\n }\n \n pub fn main() {\n+    test_imperfectly_overlapping_access();\n     // TODO: does this make chances of spurious success\n     // \"sufficiently low\"? This also takes a long time to run,\n     // prehaps each function should be its own test case so they"}]}