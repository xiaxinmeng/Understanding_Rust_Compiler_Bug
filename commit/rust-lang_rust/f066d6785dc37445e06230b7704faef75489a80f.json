{"sha": "f066d6785dc37445e06230b7704faef75489a80f", "node_id": "C_kwDOAAsO6NoAKGYwNjZkNjc4NWRjMzc0NDVlMDYyMzBiNzcwNGZhZWY3NTQ4OWE4MGY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T10:20:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-21T11:09:27Z"}, "message": "Detect uninhabited types early in const eval.", "tree": {"sha": "d36a256187c4a2b73a659aa979213a3b3ffcf864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36a256187c4a2b73a659aa979213a3b3ffcf864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f066d6785dc37445e06230b7704faef75489a80f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f066d6785dc37445e06230b7704faef75489a80f", "html_url": "https://github.com/rust-lang/rust/commit/f066d6785dc37445e06230b7704faef75489a80f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f066d6785dc37445e06230b7704faef75489a80f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83dec62b2661ffa925bb63544a4b075577b07c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/83dec62b2661ffa925bb63544a4b075577b07c16", "html_url": "https://github.com/rust-lang/rust/commit/83dec62b2661ffa925bb63544a4b075577b07c16"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "350ce529ef538855dd996453804a6935b932214c", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f066d6785dc37445e06230b7704faef75489a80f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f066d6785dc37445e06230b7704faef75489a80f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=f066d6785dc37445e06230b7704faef75489a80f", "patch": "@@ -335,8 +335,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     #[inline(always)]\n-    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>, _layout: TyAndLayout<'tcx>) -> bool {\n-        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+    fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>, layout: TyAndLayout<'tcx>) -> bool {\n+        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks || layout.abi.is_uninhabited()\n     }\n \n     fn alignment_check_failed("}, {"sha": "10edae437ee74283ab235c68f54142f1c24da29c", "filename": "tests/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=f066d6785dc37445e06230b7704faef75489a80f", "patch": "@@ -14,12 +14,12 @@ union MaybeUninit<T: Copy> {\n }\n \n const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ ERROR evaluation of constant value failed\n \n const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {}"}, {"sha": "733975fc0e9ce5e3011048f7e66f6a5860f54948", "filename": "tests/ui/consts/const-eval/ub-uninhabit.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.stderr?ref=f066d6785dc37445e06230b7704faef75489a80f", "patch": "@@ -1,11 +1,8 @@\n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:16:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-uninhabit.rs:16:35\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {}\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a value of uninhabited type Bar\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-uninhabit.rs:19:1\n@@ -18,14 +15,11 @@ LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n                HEX_DUMP\n            }\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:22:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-uninhabit.rs:22:42\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0]: encountered a value of uninhabited type Bar\n \n error: aborting due to 3 previous errors\n "}, {"sha": "231005d7e3975dc8bfe47d3a9f34abc7869efcf3", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=f066d6785dc37445e06230b7704faef75489a80f", "patch": "@@ -24,14 +24,11 @@ note: inside `FOO`\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n    |                                 ^^^^^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:21:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 0, align: 1) {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered a value of uninhabited type empty::Void\n \n warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:21:42"}, {"sha": "231005d7e3975dc8bfe47d3a9f34abc7869efcf3", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=f066d6785dc37445e06230b7704faef75489a80f", "patch": "@@ -24,14 +24,11 @@ note: inside `FOO`\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n    |                                 ^^^^^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:21:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/validate_uninhabited_zsts.rs:21:42\n    |\n LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at [0].0: encountered a value of uninhabited type empty::Void\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 0, align: 1) {}\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .0: encountered a value of uninhabited type empty::Void\n \n warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:21:42"}, {"sha": "b6783175dd3795bfc0b0eebb20e453bee4c5977d", "filename": "tests/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=f066d6785dc37445e06230b7704faef75489a80f", "patch": "@@ -19,7 +19,7 @@ pub mod empty {\n const FOO: [empty::Empty; 3] = [foo(); 3];\n \n const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ ERROR evaluation of constant value failed\n //~| WARN the type `empty::Empty` does not permit zero-initialization\n \n fn main() {"}, {"sha": "9275a8a072ddecb68274ef93346854ee23296d6b", "filename": "tests/ui/consts/issue-64506.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fissue-64506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fissue-64506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-64506.rs?ref=f066d6785dc37445e06230b7704faef75489a80f", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// check-fail\n \n #[derive(Copy, Clone)]\n pub struct ChildStdin {\n@@ -14,6 +14,7 @@ const FOO: () = {\n         b: (),\n     }\n     let x = unsafe { Foo { b: () }.a };\n+    //~^ ERROR: evaluation of constant value failed\n     let x = &x.inner;\n };\n "}, {"sha": "31a5b1df837c5b186927af14c0593d7ef428f433", "filename": "tests/ui/consts/issue-64506.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fissue-64506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f066d6785dc37445e06230b7704faef75489a80f/tests%2Fui%2Fconsts%2Fissue-64506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-64506.stderr?ref=f066d6785dc37445e06230b7704faef75489a80f", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-64506.rs:16:22\n+   |\n+LL |     let x = unsafe { Foo { b: () }.a };\n+   |                      ^^^^^^^^^^^^^^^ constructing invalid value at .inner: encountered a value of uninhabited type AnonPipe\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}