{"sha": "c6b51547c14780a0473a5bcae90c8d4b0530b7c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YjUxNTQ3YzE0NzgwYTA0NzNhNWJjYWU5MGM4ZDRiMDUzMGI3Yzg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-07T00:44:42Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-07T17:27:29Z"}, "message": "In typeck, don't assume traits with default methods are in the same crate\n\nBut note that default methods still don't work cross-crate (see #2794) --\nthis just makes it so that when a method is missing in a cross-crate impl,\nthe right error message gets printed.\n\nCloses #3344", "tree": {"sha": "1eee892474197e0e09b090d094e254864706ff6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eee892474197e0e09b090d094e254864706ff6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6b51547c14780a0473a5bcae90c8d4b0530b7c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b51547c14780a0473a5bcae90c8d4b0530b7c8", "html_url": "https://github.com/rust-lang/rust/commit/c6b51547c14780a0473a5bcae90c8d4b0530b7c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6b51547c14780a0473a5bcae90c8d4b0530b7c8/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd3cc6d17b68ef18199a54372963b00ba8a0a84f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3cc6d17b68ef18199a54372963b00ba8a0a84f", "html_url": "https://github.com/rust-lang/rust/commit/cd3cc6d17b68ef18199a54372963b00ba8a0a84f"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "dd48c2183a7d78550a255051abe2a80f04f07808", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6b51547c14780a0473a5bcae90c8d4b0530b7c8/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b51547c14780a0473a5bcae90c8d4b0530b7c8/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=c6b51547c14780a0473a5bcae90c8d4b0530b7c8", "patch": "@@ -190,6 +190,7 @@ export serialize_region_variance, deserialize_region_variance;\n export opt_region_variance;\n export serialize_opt_region_variance, deserialize_opt_region_variance;\n export determine_inherited_purity;\n+export provided_trait_methods;\n \n // Data types\n \n@@ -3069,6 +3070,24 @@ fn store_trait_methods(cx: ctxt, id: ast::node_id, ms: @~[method]) {\n     cx.trait_method_cache.insert(ast_util::local_def(id), ms);\n }\n \n+fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[@ast::method] {\n+    if is_local(id) {\n+        match cx.items.find(id.node) {\n+            Some(ast_map::node_item(@{node: item_trait(_, _, ms),_}, _)) =>\n+                match ast_util::split_trait_methods(ms) {\n+                   (_, p) => p\n+                },\n+            _ => cx.sess.bug(#fmt(\"provided_trait_methods: %? is not a trait\",\n+                                  id))\n+        }\n+    }\n+    else {\n+        // FIXME #2794: default methods for traits don't work cross-crate\n+        ~[]\n+    }\n+}\n+\n+\n fn trait_methods(cx: ctxt, id: ast::def_id) -> @~[method] {\n     match cx.trait_method_cache.find(id) {\n       // Local traits are supposed to have been added explicitly."}, {"sha": "43d6cf14d93806760989bdf6cfe9f7e4c0477adb", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c6b51547c14780a0473a5bcae90c8d4b0530b7c8/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b51547c14780a0473a5bcae90c8d4b0530b7c8/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=c6b51547c14780a0473a5bcae90c8d4b0530b7c8", "patch": "@@ -343,33 +343,22 @@ fn check_methods_against_trait(ccx: @crate_ctxt,\n               // implementation in the trait itself.  If not, raise a\n               // \"missing method\" error.\n \n-              match tcx.items.get(did.node) {\n-                ast_map::node_item(\n-                    @{node: ast::item_trait(_, _, trait_methods), _}, _) => {\n-                  let (_, provided_methods) =\n-                      split_trait_methods(trait_methods);\n-\n-                  match vec::find(provided_methods, |provided_method|\n-                                provided_method.ident == trait_m.ident) {\n-                    Some(_) => {\n-                      // If there's a provided method with the name we\n-                      // want, then we're fine; nothing else to do.\n-                    }\n-                    None => {\n-                      tcx.sess.span_err(\n-                          a_trait_ty.path.span,\n-                          fmt!(\"missing method `%s`\",\n-                               tcx.sess.str_of(trait_m.ident)));\n-                    }\n-                  }\n+              let provided_methods = ty::provided_trait_methods(tcx, did);\n+              match vec::find(provided_methods, |provided_method|\n+                              provided_method.ident == trait_m.ident) {\n+                Some(_) => {\n+                    // If there's a provided method with the name we\n+                    // want, then we're fine; nothing else to do.\n                 }\n-                _ => {\n-                    tcx.sess.bug(~\"check_methods_against_trait(): trait_ref \\\n-                                   didn't refer to a trait\");\n+                None => {\n+                    tcx.sess.span_err(\n+                        a_trait_ty.path.span,\n+                        fmt!(\"missing method `%s`\",\n+                             tcx.sess.str_of(trait_m.ident)));\n                 }\n               }\n           }\n-        } // alt\n+        } // match\n     } // |trait_m|\n } // fn\n "}, {"sha": "a9fa659398639f3fca678337da2b02fe24396358", "filename": "src/test/compile-fail/issue-3344.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6b51547c14780a0473a5bcae90c8d4b0530b7c8/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b51547c14780a0473a5bcae90c8d4b0530b7c8/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=c6b51547c14780a0473a5bcae90c8d4b0530b7c8", "patch": "@@ -0,0 +1,7 @@\n+enum thing = uint;\n+impl thing : cmp::Ord { //~ ERROR missing method `gt`\n+    pure fn lt(&&other: thing) -> bool { *self < *other }\n+    pure fn le(&&other: thing) -> bool { *self < *other }\n+    pure fn ge(&&other: thing) -> bool { *self < *other }\n+}\n+fn main() {}"}]}