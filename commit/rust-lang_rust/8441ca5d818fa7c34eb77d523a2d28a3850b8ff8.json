{"sha": "8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "node_id": "C_kwDOAAsO6NoAKDg0NDFjYTVkODE4ZmE3YzM0ZWI3N2Q1MjNhMmQyOGEzODUwYjhmZjg", "commit": {"author": {"name": "Andrew Pollack", "email": "andrewpkq@gmail.com", "date": "2022-12-19T19:24:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-19T19:24:59Z"}, "message": "Revert \"Replace usage of `ResumeTy` in async lowering with `Context`\"", "tree": {"sha": "b129e508a28a986cc25eed22f736e421498e12f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b129e508a28a986cc25eed22f736e421498e12f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjoLqLCRBK7hj4Ov3rIwAA8cAIAKBq6ZvjDBISp0O1e7ov0S0v\nxDoFwp6IaU7rBHrZrKapNrmqQsDSigKrNE3qPUerJHaOSTDMvX2LzZIh4ounjP3e\n2Co2ABqQDmz8h/uTG86VF4J0K4rV6c2WsYWv4+0hW8dAfZ0PEJZwV4dapgSXXwTZ\nHsBaF0GnMtsCWFzOw/8NXY4W+mzrdSvER/be4NhUcouCrFdWkkl2KUzvI+9gkdeN\nPwBzPiKawsLNf8FMbYJa0Te5flBZay1DhJYuffa47Qk1qdW3RbX7C6/39Kta1p60\nSwyfrMsk/AgWLa0ItJefbIwOHVXvShkRaYavjcf8CJeVAZ+D/vPdmmqTlkv5+fU=\n=Y50D\n-----END PGP SIGNATURE-----\n", "payload": "tree b129e508a28a986cc25eed22f736e421498e12f9\nparent 7ab803891dd95a04f3b2143e40b26f03b608b4bc\nauthor Andrew Pollack <andrewpkq@gmail.com> 1671477899 -0800\ncommitter GitHub <noreply@github.com> 1671477899 -0800\n\nRevert \"Replace usage of `ResumeTy` in async lowering with `Context`\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "html_url": "https://github.com/rust-lang/rust/commit/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/comments", "author": {"login": "andrewpollack", "id": 24868505, "node_id": "MDQ6VXNlcjI0ODY4NTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24868505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewpollack", "html_url": "https://github.com/andrewpollack", "followers_url": "https://api.github.com/users/andrewpollack/followers", "following_url": "https://api.github.com/users/andrewpollack/following{/other_user}", "gists_url": "https://api.github.com/users/andrewpollack/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewpollack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewpollack/subscriptions", "organizations_url": "https://api.github.com/users/andrewpollack/orgs", "repos_url": "https://api.github.com/users/andrewpollack/repos", "events_url": "https://api.github.com/users/andrewpollack/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewpollack/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ab803891dd95a04f3b2143e40b26f03b608b4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab803891dd95a04f3b2143e40b26f03b608b4bc", "html_url": "https://github.com/rust-lang/rust/commit/7ab803891dd95a04f3b2143e40b26f03b608b4bc"}], "stats": {"total": 113, "additions": 43, "deletions": 70}, "files": [{"sha": "a3f5c18f2e75cfe836ecd66639d9114fd3ccbd1a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::def::Res;\n use rustc_hir::definitions::DefPathData;\n use rustc_session::errors::report_lit_error;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n-use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::DUMMY_SP;\n use thin_vec::thin_vec;\n \n@@ -596,38 +596,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> hir::ExprKind<'hir> {\n         let output = ret_ty.unwrap_or_else(|| hir::FnRetTy::DefaultReturn(self.lower_span(span)));\n \n-        // Resume argument type, which should be `&mut Context<'_>`.\n-        // NOTE: Using the `'static` lifetime here is technically cheating.\n-        // The `Future::poll` argument really is `&'a mut Context<'b>`, but we cannot\n-        // express the fact that we are not storing it across yield-points yet,\n-        // and we would thus run into lifetime errors.\n-        // See <https://github.com/rust-lang/rust/issues/68923>.\n-        // Our lowering makes sure we are not mis-using the `_task_context` input type\n-        // in the sense that we are indeed not using it across yield points. We\n-        // get a fresh `&mut Context` for each resume / call of `Future::poll`.\n-        // This \"cheating\" was previously done with a `ResumeTy` that contained a raw\n-        // pointer, and a `get_context` accessor that pulled the `Context` lifetimes\n-        // out of thin air.\n-        let context_lifetime_ident = Ident::with_dummy_span(kw::StaticLifetime);\n-        let context_lifetime = self.arena.alloc(hir::Lifetime {\n-            hir_id: self.next_id(),\n-            ident: context_lifetime_ident,\n-            res: hir::LifetimeName::Static,\n-        });\n-        let context_path =\n-            hir::QPath::LangItem(hir::LangItem::Context, self.lower_span(span), None);\n-        let context_ty = hir::MutTy {\n-            ty: self.arena.alloc(hir::Ty {\n-                hir_id: self.next_id(),\n-                kind: hir::TyKind::Path(context_path),\n-                span: self.lower_span(span),\n-            }),\n-            mutbl: hir::Mutability::Mut,\n-        };\n+        // Resume argument type: `ResumeTy`\n+        let unstable_span =\n+            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n+        let resume_ty = hir::QPath::LangItem(hir::LangItem::ResumeTy, unstable_span, None);\n         let input_ty = hir::Ty {\n             hir_id: self.next_id(),\n-            kind: hir::TyKind::Rptr(context_lifetime, context_ty),\n-            span: self.lower_span(span),\n+            kind: hir::TyKind::Path(resume_ty),\n+            span: unstable_span,\n         };\n \n         // The closure/generator `FnDecl` takes a single (resume) argument of type `input_ty`.\n@@ -686,9 +662,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n \n         let hir_id = self.lower_node_id(closure_node_id);\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n         if track_caller {\n+            let unstable_span = self.mark_span_with_reason(\n+                DesugaringKind::Async,\n+                span,\n+                self.allow_gen_future.clone(),\n+            );\n             self.lower_attrs(\n                 hir_id,\n                 &[Attribute {\n@@ -731,7 +710,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ///     mut __awaitee => loop {\n     ///         match unsafe { ::std::future::Future::poll(\n     ///             <::std::pin::Pin>::new_unchecked(&mut __awaitee),\n-    ///             task_context,\n+    ///             ::std::future::get_context(task_context),\n     ///         ) } {\n     ///             ::std::task::Poll::Ready(result) => break result,\n     ///             ::std::task::Poll::Pending => {}\n@@ -772,7 +751,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // unsafe {\n         //     ::std::future::Future::poll(\n         //         ::std::pin::Pin::new_unchecked(&mut __awaitee),\n-        //         task_context,\n+        //         ::std::future::get_context(task_context),\n         //     )\n         // }\n         let poll_expr = {\n@@ -790,10 +769,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 arena_vec![self; ref_mut_awaitee],\n                 Some(expr_hir_id),\n             );\n+            let get_context = self.expr_call_lang_item_fn_mut(\n+                gen_future_span,\n+                hir::LangItem::GetContext,\n+                arena_vec![self; task_context],\n+                Some(expr_hir_id),\n+            );\n             let call = self.expr_call_lang_item_fn(\n                 span,\n                 hir::LangItem::FuturePoll,\n-                arena_vec![self; new_unchecked, task_context],\n+                arena_vec![self; new_unchecked, get_context],\n                 Some(expr_hir_id),\n             );\n             self.arena.alloc(self.expr_unsafe(call))"}, {"sha": "038509031b180a3cd42417a23846ff36c00ea7c0", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -286,9 +286,10 @@ language_item_table! {\n \n     // FIXME(swatinem): the following lang items are used for async lowering and\n     // should become obsolete eventually.\n+    ResumeTy,                sym::ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n     IdentityFuture,          sym::identity_future,     identity_future_fn,         Target::Fn,             GenericRequirement::None;\n+    GetContext,              sym::get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n \n-    Context,                 sym::Context,             context,                    Target::Struct,         GenericRequirement::None;\n     FuturePoll,              sym::poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n \n     FromFrom,                sym::from,                from_fn,                    Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;"}, {"sha": "9de6d9dc483c5720778dc5a1fbefb333d21a0632", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -164,7 +164,6 @@ symbols! {\n         Capture,\n         Center,\n         Clone,\n-        Context,\n         Continue,\n         Copy,\n         Count,\n@@ -264,6 +263,7 @@ symbols! {\n         Relaxed,\n         Release,\n         Result,\n+        ResumeTy,\n         Return,\n         Right,\n         Rust,\n@@ -753,6 +753,7 @@ symbols! {\n         generic_associated_types_extended,\n         generic_const_exprs,\n         generic_param_attrs,\n+        get_context,\n         global_allocator,\n         global_asm,\n         globs,"}, {"sha": "f2b961d62e00c8149750785c3792cdf94924ce1d", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -44,7 +44,7 @@ pub use poll_fn::{poll_fn, PollFn};\n ///    non-Send/Sync as well, and we don't want that.\n ///\n /// It also simplifies the HIR lowering of `.await`.\n-// FIXME(swatinem): This type can be removed when bumping the bootstrap compiler\n+#[cfg_attr(not(bootstrap), lang = \"ResumeTy\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[derive(Debug, Copy, Clone)]\n@@ -61,7 +61,6 @@ unsafe impl Sync for ResumeTy {}\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n // This is `const` to avoid extra errors after we recover from `const async fn`\n-// FIXME(swatinem): This fn can be removed when bumping the bootstrap compiler\n #[cfg_attr(bootstrap, lang = \"from_generator\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n@@ -103,8 +102,7 @@ where\n     GenFuture(gen)\n }\n \n-// FIXME(swatinem): This fn can be removed when bumping the bootstrap compiler\n-#[cfg_attr(bootstrap, lang = \"get_context\")]\n+#[lang = \"get_context\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[must_use]\n@@ -115,10 +113,6 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     unsafe { &mut *cx.0.as_ptr().cast() }\n }\n \n-// FIXME(swatinem): This fn is currently needed to work around shortcomings\n-// in type and lifetime inference.\n-// See the comment at the bottom of `LoweringContext::make_async_expr` and\n-// <https://github.com/rust-lang/rust/issues/104826>.\n #[cfg_attr(not(bootstrap), lang = \"identity_future\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]"}, {"sha": "0cff972df3a5a8d4e961fe5fca309ab69a62b827", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -174,7 +174,6 @@ impl RawWakerVTable {\n /// Currently, `Context` only serves to provide access to a [`&Waker`](Waker)\n /// which can be used to wake the current task.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-#[cfg_attr(not(bootstrap), lang = \"Context\")]\n pub struct Context<'a> {\n     waker: &'a Waker,\n     // Ensure we future-proof against variance changes by forcing"}, {"sha": "fb83ca90a37873dcbcb572a25e6ff5c676dc5f55", "filename": "src/test/ui/async-await/async-await-let-else.drop-tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -40,7 +40,7 @@ LL |   async fn bar2<T>(_: T) -> ! {\n LL | |     panic!()\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `&mut Context<'_>`, `Option<bool>`, `impl Future<Output = !>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `Option<bool>`, `impl Future<Output = !>`, `()`\n note: required because it's used within this `async fn` body\n   --> $DIR/async-await-let-else.rs:21:32\n    |"}, {"sha": "f2802698fd5b646fdd3e993df175ae58705b5abe", "filename": "src/test/ui/async-await/issue-68112.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -57,7 +57,7 @@ note: required because it appears within the type `impl Future<Output = Arc<RefC\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `Ready<i32>`\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `Ready<i32>`\n note: required because it's used within this `async` block\n   --> $DIR/issue-68112.rs:60:20\n    |"}, {"sha": "38eb85b302fd588abbeb8e8f4b82f84338fa21bb", "filename": "src/test/ui/async-await/issue-68112.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -57,7 +57,7 @@ note: required because it appears within the type `impl Future<Output = Arc<RefC\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n note: required because it's used within this `async` block\n   --> $DIR/issue-68112.rs:60:20\n    |"}, {"sha": "3d2b0402bc52c614564988f0e53b8705b0691acf", "filename": "src/test/ui/async-await/issue-69446-fnmut-capture.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-69446-fnmut-capture.stderr?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -14,9 +14,6 @@ LL | |     });\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = note: requirement occurs because of a mutable reference to `Context<'_>`\n-   = note: mutable references are invariant over their type parameter\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n error: aborting due to previous error\n "}, {"sha": "721234aa4a782875a2e90e32d4c2f5bea168c7f0", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -18,7 +18,7 @@ LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n    |  ___________________________________________________________________^\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `&mut Context<'_>`, `impl Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n   --> $DIR/issue-70935-complex-spans.rs:16:5\n    |"}, {"sha": "17b4ef7bdc671705abd27ca37e8423cb94878cc2", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.drop_tracking.stderr?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -11,7 +11,7 @@ LL | async fn foo() {\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n-   = note: required because it captures the following types: `&mut Context<'_>`, `(NotSend,)`, `()`, `impl Future<Output = ()>`\n+   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `()`, `impl Future<Output = ()>`\n note: required because it's used within this `async fn` body\n   --> $DIR/partial-drop-partial-reinit.rs:31:16\n    |"}, {"sha": "34d8a159f1064bf05c1e448b9be5303830be108f", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.no_drop_tracking.stderr?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -11,7 +11,7 @@ LL | async fn foo() {\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n-   = note: required because it captures the following types: `&mut Context<'_>`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async fn` body\n   --> $DIR/partial-drop-partial-reinit.rs:31:16\n    |"}, {"sha": "e567d5c2723f2c2b631730abe978dbaa380b09ac", "filename": "src/test/ui/regions/closure-in-projection-issue-97405.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.rs?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -22,11 +22,11 @@ fn good_generic_fn<T>() {\n // This should fail because `T` ends up in the upvars of the closure.\n fn bad_generic_fn<T: Copy>(t: T) {\n     assert_static(opaque(async move { t; }).next());\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n     assert_static(opaque(move || { t; }).next());\n     //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n     assert_static(opaque(opaque(async move { t; }).next()).next());\n-    //~^ ERROR the parameter type `T` may not live long enough\n+    //~^ ERROR the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n }\n \n fn main() {}"}, {"sha": "c08f1059ebf58278b7ce88edc8127f5e867f33da", "filename": "src/test/ui/regions/closure-in-projection-issue-97405.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8441ca5d818fa7c34eb77d523a2d28a3850b8ff8/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fclosure-in-projection-issue-97405.stderr?ref=8441ca5d818fa7c34eb77d523a2d28a3850b8ff8", "patch": "@@ -1,13 +1,11 @@\n-error[E0310]: the parameter type `T` may not live long enough\n+error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:24:5\n    |\n LL |     assert_static(opaque(async move { t; }).next());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |\n-help: consider adding an explicit lifetime bound...\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | fn bad_generic_fn<T: Copy + 'static>(t: T) {\n-   |                           +++++++++\n+   = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n+   = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n \n error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:26:5\n@@ -18,16 +16,14 @@ LL |     assert_static(opaque(move || { t; }).next());\n    = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n    = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n \n-error[E0310]: the parameter type `T` may not live long enough\n+error[E0310]: the associated type `<impl Iterator as Iterator>::Item` may not live long enough\n   --> $DIR/closure-in-projection-issue-97405.rs:28:5\n    |\n LL |     assert_static(opaque(opaque(async move { t; }).next()).next());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |\n-help: consider adding an explicit lifetime bound...\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | fn bad_generic_fn<T: Copy + 'static>(t: T) {\n-   |                           +++++++++\n+   = help: consider adding an explicit lifetime bound `<impl Iterator as Iterator>::Item: 'static`...\n+   = note: ...so that the type `<impl Iterator as Iterator>::Item` will meet its required lifetime bounds\n \n error: aborting due to 3 previous errors\n "}]}