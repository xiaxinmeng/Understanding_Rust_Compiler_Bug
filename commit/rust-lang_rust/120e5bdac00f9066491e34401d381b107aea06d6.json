{"sha": "120e5bdac00f9066491e34401d381b107aea06d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMGU1YmRhYzAwZjkwNjY0OTFlMzQ0MDFkMzgxYjEwN2FlYTA2ZDY=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-02-09T11:49:08Z"}, "committer": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-03-24T14:16:58Z"}, "message": "Pass HirId of expr in question instead of function body", "tree": {"sha": "754dc51e99eec720b54f39cefc0f06c8586fd416", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/754dc51e99eec720b54f39cefc0f06c8586fd416"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120e5bdac00f9066491e34401d381b107aea06d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJIBAABCAAyFiEEgbkHgdnD1idvtMJ0QJ1+7h56cWoFAmBbSdoUHHl1c3VrdGFu\nQG1hZ3Vyby5kZXYACgkQQJ1+7h56cWok0hAA32CKQDeiYqc3J57XgRA8/vNHrIxy\nDVlqygzUsvO8BkM0SN+rko/l8MP0y+/eAtIYmM+nmOLwsSIM+2WcSAKlr5U6kFAu\n+A/4n8E08W2HJiZ2s+gbLlCUU0AVCJIarirWNfm9KAw6HJ4ppflj8urV2SScIVII\nFK51Ypo6Wuyx1IyLX6pyNtKEuH7dmUgEEyeiHwFxyGJqeKL5mGn6q0IPtsrNIHUN\nYHC53pVYcXfBKRgCQJliYmOAB3Kawo1YTK4ZFGAORbNg/6l482ZKeEsF4qniiuAq\nhVHLhYm6BSrveB2xXZ2uflIx/BTVHrnq4mJo6MgsQfIGvolgmN9WGYo9VtWHmhML\n4RbYnNSnWhzBJBwdt6EqUqT3PoZeVUDeCHRmHtByro13zWwsKtFgcxD7yII6c9Xh\nFYnCKKGEh2TvikJA2cd2kwN6rCVUw3vql9tN+sAnsp8R7Gf2/A+MmknkgCl9uy0h\nOjs4f3J4norMto54gO/YZhT1raQMNTP68aw6IITGxRHzb7EsoSizEEEEQzwOHQc1\nP29WKNUliMi5odaVMjRReHtno7M13t+5uLlflGzs5JifbDowLsnfl+0dNhyYyAzi\nabqtmV+DWBbgVA4TFO7MvWCeaF2LEFu5qkYKxo7l/ui8Q+f8nAtwJx+DIk6CIleO\nSV8FLEHkP3AssD8=\n=jRmq\n-----END PGP SIGNATURE-----", "payload": "tree 754dc51e99eec720b54f39cefc0f06c8586fd416\nparent a421cfed74a10a46a082f747448992ea603559ce\nauthor Yusuke Tanaka <yusuktan@maguro.dev> 1612871348 +0900\ncommitter Yusuke Tanaka <yusuktan@maguro.dev> 1616595418 +0900\n\nPass HirId of expr in question instead of function body\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120e5bdac00f9066491e34401d381b107aea06d6", "html_url": "https://github.com/rust-lang/rust/commit/120e5bdac00f9066491e34401d381b107aea06d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120e5bdac00f9066491e34401d381b107aea06d6/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a421cfed74a10a46a082f747448992ea603559ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a421cfed74a10a46a082f747448992ea603559ce", "html_url": "https://github.com/rust-lang/rust/commit/a421cfed74a10a46a082f747448992ea603559ce"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "7142be9c09ed5aef729491216fd696f17f2595f0", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/120e5bdac00f9066491e34401d381b107aea06d6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120e5bdac00f9066491e34401d381b107aea06d6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=120e5bdac00f9066491e34401d381b107aea06d6", "patch": "@@ -83,6 +83,8 @@ struct ProbeContext<'a, 'tcx> {\n     unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n \n     is_suggestion: IsSuggestion,\n+\n+    scope_expr_id: hir::HirId,\n }\n \n impl<'a, 'tcx> Deref for ProbeContext<'a, 'tcx> {\n@@ -285,7 +287,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self_ty,\n                     scope_expr_id,\n                     ProbeScope::AllTraits,\n-                    |probe_cx| probe_cx.pick(),\n+                    |probe_cx| probe_cx.pick(scope_expr_id),\n                 )\n                 .ok()\n                 .map(|pick| pick.item)\n@@ -317,7 +319,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self_ty,\n             scope_expr_id,\n             scope,\n-            |probe_cx| probe_cx.pick(),\n+            |probe_cx| probe_cx.pick(scope_expr_id),\n         )\n     }\n \n@@ -448,6 +450,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 orig_values,\n                 steps.steps,\n                 is_suggestion,\n+                scope_expr_id,\n             );\n \n             probe_cx.assemble_inherent_candidates();\n@@ -547,6 +550,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         orig_steps_var_values: OriginalQueryValues<'tcx>,\n         steps: Lrc<Vec<CandidateStep<'tcx>>>,\n         is_suggestion: IsSuggestion,\n+        scope_expr_id: hir::HirId,\n     ) -> ProbeContext<'a, 'tcx> {\n         ProbeContext {\n             fcx,\n@@ -564,6 +568,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             private_candidate: None,\n             unsatisfied_predicates: Vec::new(),\n             is_suggestion,\n+            scope_expr_id,\n         }\n     }\n \n@@ -1031,7 +1036,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ///////////////////////////////////////////////////////////////////////////\n     // THE ACTUAL SEARCH\n \n-    fn pick(mut self) -> PickResult<'tcx> {\n+    fn pick(mut self, scope_expr_id: hir::HirId) -> PickResult<'tcx> {\n         assert!(self.method_name.is_some());\n \n         if let Some(r) = self.pick_core() {\n@@ -1077,7 +1082,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         if let Some((kind, def_id)) = private_candidate {\n             return Err(MethodError::PrivateMatch(kind, def_id, out_of_scope_traits));\n         }\n-        let lev_candidate = self.probe_for_lev_candidate()?;\n+        let lev_candidate = self.probe_for_lev_candidate(scope_expr_id)?;\n \n         Err(MethodError::NoMatch(NoMatchData::new(\n             static_candidates,\n@@ -1312,7 +1317,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) {\n         self.tcx.struct_span_lint_hir(\n             lint::builtin::UNSTABLE_NAME_COLLISIONS,\n-            self.fcx.body_id,\n+            self.scope_expr_id,\n             self.span,\n             |lint| {\n                 let def_kind = stable_pick.item.kind.as_def_kind();\n@@ -1580,7 +1585,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     /// Similarly to `probe_for_return_type`, this method attempts to find the best matching\n     /// candidate method where the method name may have been misspelt. Similarly to other\n     /// Levenshtein based suggestions, we provide at most one such suggestion.\n-    fn probe_for_lev_candidate(&mut self) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n+    fn probe_for_lev_candidate(\n+        &mut self,\n+        scope_expr_id: hir::HirId,\n+    ) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n         debug!(\"probing for method names similar to {:?}\", self.method_name);\n \n         let steps = self.steps.clone();\n@@ -1594,6 +1602,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.orig_steps_var_values.clone(),\n                 steps,\n                 IsSuggestion(true),\n+                scope_expr_id,\n             );\n             pcx.allow_similar_names = true;\n             pcx.assemble_inherent_candidates();"}]}