{"sha": "763f3c4d5b3c81c83a925b8384751004b6f52457", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2M2YzYzRkNWIzYzgxYzgzYTkyNWI4Mzg0NzUxMDA0YjZmNTI0NTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T06:47:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T09:07:42Z"}, "message": "rustdoc: Add regression tests for existing attr parsing behavior", "tree": {"sha": "c10db9d31de612d38563952b112549806a65ec0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c10db9d31de612d38563952b112549806a65ec0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/763f3c4d5b3c81c83a925b8384751004b6f52457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/763f3c4d5b3c81c83a925b8384751004b6f52457", "html_url": "https://github.com/rust-lang/rust/commit/763f3c4d5b3c81c83a925b8384751004b6f52457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/763f3c4d5b3c81c83a925b8384751004b6f52457/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01fedcad77c77898ff955db1f052721493e486e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/01fedcad77c77898ff955db1f052721493e486e2", "html_url": "https://github.com/rust-lang/rust/commit/01fedcad77c77898ff955db1f052721493e486e2"}], "stats": {"total": 95, "additions": 88, "deletions": 7}, "files": [{"sha": "bd98912eb4adc24ae3ad794fe68941c2ff7f0079", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 87, "deletions": 6, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/763f3c4d5b3c81c83a925b8384751004b6f52457/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763f3c4d5b3c81c83a925b8384751004b6f52457/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=763f3c4d5b3c81c83a925b8384751004b6f52457", "patch": "@@ -1,14 +1,14 @@\n export parse_fn;\n \n-fn parse_fn(attrs: [ast::attribute]) -> doc::fndoc {\n+fn parse_fn(name: str, attrs: [ast::attribute]) -> doc::fndoc {\n     let noargdocs = map::new_str_hash::<str>();\n     let _fndoc = none;\n     for attr: ast::attribute in attrs {\n         alt attr.node.value.node {\n             ast::meta_name_value(\n                 \"doc\", {node: ast::lit_str(value), span: _}) {\n                 _fndoc = some(~{\n-                    name: \"todo\",\n+                    name: name,\n                     brief: value,\n                     desc: none,\n                     return: none,\n@@ -17,7 +17,7 @@ fn parse_fn(attrs: [ast::attribute]) -> doc::fndoc {\n             }\n             ast::meta_list(\"doc\", docs) {\n                 _fndoc = some(\n-                    parse_fn_(docs));\n+                    parse_fn_(name, docs));\n             }\n         }\n     }\n@@ -26,7 +26,7 @@ fn parse_fn(attrs: [ast::attribute]) -> doc::fndoc {\n         some(_d) { _d }\n         none. {\n           ~{\n-              name: \"todo\",\n+              name: name,\n               brief: \"_undocumented_\",\n               desc: none,\n               return: none,\n@@ -50,7 +50,7 @@ fn parse_fn(attrs: [ast::attribute]) -> doc::fndoc {\n   args(items = \"Doc attribute contents\"),\n   return = \"Parsed function docs.\"\n )]\n-fn parse_fn_(items: [@ast::meta_item]) -> doc::fndoc {\n+fn parse_fn_(name: str, items: [@ast::meta_item]) -> doc::fndoc {\n     let brief = none;\n     let desc = none;\n     let return = none;\n@@ -97,9 +97,90 @@ fn parse_fn_(items: [@ast::meta_item]) -> doc::fndoc {\n     };\n \n     ~{\n-        name: \"todo\",\n+        name: name,\n         brief: _brief,\n         desc: desc,\n         return: return,\n         args: argdocs }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+\n+    fn parse_attributes(source: str) -> [ast::attribute] {\n+        import rustc::driver::diagnostic;\n+        import rustc::syntax::codemap;\n+        import rustc::syntax::parse::parser;\n+\n+        let cm = codemap::new_codemap();\n+        let parse_sess = @{\n+            cm: cm,\n+            mutable next_id: 0,\n+            diagnostic: diagnostic::mk_handler(cm, none)\n+        };\n+        let parser = parser::new_parser_from_source_str(\n+            parse_sess, [], \"-\", source);\n+\n+        parser::parse_outer_attributes(parser)\n+    }\n+\n+    #[test]\n+    fn parse_fn_should_handle_undocumented_functions() {\n+        let source = \"\";\n+        let attrs = parse_attributes(source);\n+        let doc = parse_fn(\"f\", attrs);\n+        assert doc.brief == \"_undocumented_\";\n+        assert doc.desc == none;\n+        assert doc.return == none;\n+        assert doc.args.size() == 0u;\n+    }\n+\n+    #[test]\n+    fn parse_fn_should_parse_simple_doc_attributes() {\n+        let source = \"#[doc = \\\"basic\\\"]\";\n+        let attrs = parse_attributes(source);\n+        let doc = parse_fn(\"f\", attrs);\n+        assert doc.brief == \"basic\";\n+    }\n+\n+    #[test]\n+    fn parse_fn_should_parse_the_brief_description() {\n+        let source = \"#[doc(brief = \\\"short\\\")]\";\n+        let attrs = parse_attributes(source);\n+        let doc = parse_fn(\"f\", attrs);\n+        assert doc.brief == \"short\";\n+    }\n+\n+    #[test]\n+    fn parse_fn_should_parse_the_long_description() {\n+        let source = \"#[doc(desc = \\\"description\\\")]\";\n+        let attrs = parse_attributes(source);\n+        let doc = parse_fn(\"f\", attrs);\n+        assert doc.desc == some(\"description\");\n+    }\n+\n+    #[test]\n+    fn parse_fn_should_parse_the_return_value_description() {\n+        let source = \"#[doc(return = \\\"return value\\\")]\";\n+        let attrs = parse_attributes(source);\n+        let doc = parse_fn(\"f\", attrs);\n+        assert doc.return == some(\"return value\");\n+    }\n+\n+    #[test]\n+    fn parse_fn_should_parse_the_argument_descriptions() {\n+        let source = \"#[doc(args(a = \\\"arg a\\\", b = \\\"arg b\\\"))]\";\n+        let attrs = parse_attributes(source);\n+        let doc = parse_fn(\"f\", attrs);\n+        assert doc.args.get(\"a\") == \"arg a\";\n+        assert doc.args.get(\"b\") == \"arg b\";\n+    }\n+\n+    #[test]\n+    fn parse_fn_should_set_brief_desc_to_undocumented_if_not_exists() {\n+        let source = \"#[doc(desc = \\\"long desc\\\")]\";\n+        let attrs = parse_attributes(source);\n+        let doc = parse_fn(\"f\", attrs);\n+        assert doc.brief == \"_undocumented_\";\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "b7eda49d9b6cc612ede03b7402a341ae3f62d36d", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/763f3c4d5b3c81c83a925b8384751004b6f52457/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763f3c4d5b3c81c83a925b8384751004b6f52457/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=763f3c4d5b3c81c83a925b8384751004b6f52457", "patch": "@@ -28,7 +28,7 @@ type rustdoc = {\n        item = \"AST item to document\")\n )]\n fn doc_item(rd: rustdoc, item: @ast::item) {\n-    let _fndoc0 = attr_parser::parse_fn(item.attrs);\n+    let _fndoc0 = attr_parser::parse_fn(item.ident, item.attrs);\n \n     alt item.node {\n         ast::item_const(ty, expr) { }"}]}