{"sha": "92a35d93dd54a105b7710793505fdf356b218e2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYTM1ZDkzZGQ1NGExMDViNzcxMDc5MzUwNWZkZjM1NmIyMThlMmY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-08T05:38:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-08T05:38:57Z"}, "message": "Rollup merge of #45018 - michaelwoerister:fix-dep-node-debug-recursion, r=eddyb\n\nincr.comp.: Fix infinite recursion in Debug implementation of DepNode\n\nSmall bug fix. Depends on #44901 to land first.", "tree": {"sha": "2cde4b39fad3f1a70c15d75f06e0b638923f2fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cde4b39fad3f1a70c15d75f06e0b638923f2fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92a35d93dd54a105b7710793505fdf356b218e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92a35d93dd54a105b7710793505fdf356b218e2f", "html_url": "https://github.com/rust-lang/rust/commit/92a35d93dd54a105b7710793505fdf356b218e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92a35d93dd54a105b7710793505fdf356b218e2f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f47f53c9f4f14fc276f3c83be1eefec057d5ec0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47f53c9f4f14fc276f3c83be1eefec057d5ec0b", "html_url": "https://github.com/rust-lang/rust/commit/f47f53c9f4f14fc276f3c83be1eefec057d5ec0b"}, {"sha": "b50e8ebbba2c9f9f87ea6bc1fb47a8856999223c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b50e8ebbba2c9f9f87ea6bc1fb47a8856999223c", "html_url": "https://github.com/rust-lang/rust/commit/b50e8ebbba2c9f9f87ea6bc1fb47a8856999223c"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "2b6c368a5b33bd560f856d92e8ccbf797792019e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=92a35d93dd54a105b7710793505fdf356b218e2f", "patch": "@@ -356,7 +356,7 @@ impl fmt::Debug for DepNode {\n         ::ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n                 if let Some(def_id) = self.extract_def_id(tcx) {\n-                    write!(f, \"{}\", tcx.def_path(def_id).to_string(tcx))?;\n+                    write!(f, \"{}\", tcx.def_path_debug_str(def_id))?;\n                 } else if let Some(ref s) = tcx.dep_graph.dep_node_debug_str(*self) {\n                     write!(f, \"{}\", s)?;\n                 } else {\n@@ -700,8 +700,8 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefId, De\n         let (def_id_0, def_id_1) = *self;\n \n         format!(\"({}, {})\",\n-                tcx.def_path(def_id_0).to_string(tcx),\n-                tcx.def_path(def_id_1).to_string(tcx))\n+                tcx.def_path_debug_str(def_id_0),\n+                tcx.def_path_debug_str(def_id_1))\n     }\n }\n "}, {"sha": "8aff042955c170f54f2dd28f1b1b900b2301797a", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=92a35d93dd54a105b7710793505fdf356b218e2f", "patch": "@@ -577,7 +577,7 @@ impl DepGraph {\n                       \"DepGraph::try_mark_green() - Duplicate DepNodeColor \\\n                       insertion for {:?}\", dep_node);\n \n-        debug!(\"try_mark_green({:?}) - END - successfully marked as green\", dep_node.kind);\n+        debug!(\"try_mark_green({:?}) - END - successfully marked as green\", dep_node);\n         Some(dep_node_index)\n     }\n "}, {"sha": "69d23504cdae00a818d855cc5ef5346c53c78ea7", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=92a35d93dd54a105b7710793505fdf356b218e2f", "patch": "@@ -197,12 +197,12 @@ pub struct DefId {\n \n impl fmt::Debug for DefId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"DefId {{ krate: {:?}, node: {:?}\",\n+        write!(f, \"DefId {{ krate: {:?}, index: {:?}\",\n                self.krate, self.index)?;\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n-                write!(f, \" => {}\", tcx.def_path(*self).to_string(tcx))?;\n+                write!(f, \" => {}\", tcx.def_path_debug_str(*self))?;\n             }\n             Ok(())\n         })?;"}, {"sha": "8bc7cf2faba0492e76fbd1f6286cd97941c70349", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=92a35d93dd54a105b7710793505fdf356b218e2f", "patch": "@@ -27,7 +27,6 @@ use std::hash::Hash;\n use syntax::ast;\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::{Symbol, InternedString};\n-use ty::TyCtxt;\n use util::nodemap::NodeMap;\n \n /// The DefPathTable maps DefIndexes to DefKeys and vice versa.\n@@ -296,26 +295,6 @@ impl DefPath {\n         DefPath { data: data, krate: krate }\n     }\n \n-    pub fn to_string(&self, tcx: TyCtxt) -> String {\n-        let mut s = String::with_capacity(self.data.len() * 16);\n-\n-        s.push_str(&tcx.original_crate_name(self.krate).as_str());\n-        s.push_str(\"/\");\n-        // Don't print the whole crate disambiguator. That's just annoying in\n-        // debug output.\n-        s.push_str(&tcx.crate_disambiguator(self.krate).as_str()[..7]);\n-\n-        for component in &self.data {\n-            write!(s,\n-                   \"::{}[{}]\",\n-                   component.data.as_interned_str(),\n-                   component.disambiguator)\n-                .unwrap();\n-        }\n-\n-        s\n-    }\n-\n     /// Returns a string representation of the DefPath without\n     /// the crate-prefix. This method is useful if you don't have\n     /// a TyCtxt available."}, {"sha": "740299b91f118d6b24810704a327928bab862c64", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=92a35d93dd54a105b7710793505fdf356b218e2f", "patch": "@@ -1252,6 +1252,27 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    pub fn def_path_debug_str(self, def_id: DefId) -> String {\n+        // We are explicitly not going through queries here in order to get\n+        // crate name and disambiguator since this code is called from debug!()\n+        // statements within the query system and we'd run into endless\n+        // recursion otherwise.\n+        let (crate_name, crate_disambiguator) = if def_id.is_local() {\n+            (self.crate_name.clone(),\n+             self.sess.local_crate_disambiguator())\n+        } else {\n+            (self.cstore.crate_name_untracked(def_id.krate),\n+             self.cstore.crate_disambiguator_untracked(def_id.krate))\n+        };\n+\n+        format!(\"{}[{}]{}\",\n+                crate_name,\n+                // Don't print the whole crate disambiguator. That's just\n+                // annoying in debug output.\n+                &(crate_disambiguator.as_str())[..4],\n+                self.def_path(def_id).to_string_no_crate())\n+    }\n+\n     pub fn metadata_encoding_version(self) -> Vec<u8> {\n         self.cstore.metadata_encoding_version().to_vec()\n     }"}, {"sha": "d2ca65775a44ea8a8e41d0bf6e95f76341db11f7", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=92a35d93dd54a105b7710793505fdf356b218e2f", "patch": "@@ -30,7 +30,7 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node12.EraseRegions.after.mir\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:5) => validate_1/8cd878b::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[8cd8]::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[8cd8]::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n //         return;\n //     }\n // END rustc.node12.EraseRegions.after.mir\n@@ -57,7 +57,7 @@ fn main() {\n // START rustc.node50.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_1/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:11) => validate_1/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}, {"sha": "d240b51e222e17ed603bcd308af47d81593ada5b", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=92a35d93dd54a105b7710793505fdf356b218e2f", "patch": "@@ -48,8 +48,8 @@ fn main() {\n // START rustc.node22.EraseRegions.after.mir\n // fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         (*_3) = const 23i32;\n@@ -61,8 +61,8 @@ fn main() {\n // START rustc.node31.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_4/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_4/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n //         _3 = const write_42(_4) -> bb1;\n //     }\n //     bb1: {\n@@ -74,8 +74,8 @@ fn main() {\n // START rustc.node60.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:10) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _0 = const write_42(_4) -> bb1;\n //     }"}, {"sha": "e1eeb2102d1a2535031c49aa54d1a66702d39426", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a35d93dd54a105b7710793505fdf356b218e2f/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=92a35d93dd54a105b7710793505fdf356b218e2f", "patch": "@@ -36,7 +36,7 @@ fn main() {\n // START rustc.node17.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(0:4) => validate_5/8cd878b::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_5[8cd8]::test[0] }, BrAnon(0)) mut i32]);\n //         Validate(Release, [_3: bool, _4: *mut i32]);\n //         _3 = const write_42(_4) -> bb1;\n //     }\n@@ -45,7 +45,7 @@ fn main() {\n // START rustc.node46.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_5/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(1:9) => validate_5/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}]}