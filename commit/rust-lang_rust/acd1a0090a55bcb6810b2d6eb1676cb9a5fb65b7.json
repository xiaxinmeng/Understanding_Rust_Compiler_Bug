{"sha": "acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZDFhMDA5MGE1NWJjYjY4MTBiMmQ2ZWIxNjc2Y2I5YTVmYjY1Yjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-11T10:59:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T18:02:37Z"}, "message": "Update metadata to reflect that predicates/schemes/trait-defs are now severed", "tree": {"sha": "b97ed63d1ed3d22a3db682e541a348e83f03ec21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b97ed63d1ed3d22a3db682e541a348e83f03ec21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "html_url": "https://github.com/rust-lang/rust/commit/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca1cf613b8e535ab274d6ce5aecadf4708990bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca1cf613b8e535ab274d6ce5aecadf4708990bf", "html_url": "https://github.com/rust-lang/rust/commit/cca1cf613b8e535ab274d6ce5aecadf4708990bf"}], "stats": {"total": 138, "additions": 82, "deletions": 56}, "files": [{"sha": "245b9ef66ad3ac5b84591a81143e43d0c4949abb", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "patch": "@@ -233,6 +233,14 @@ pub fn get_trait_def<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId) -> ty::TraitDe\n     decoder::get_trait_def(&*cdata, def.node, tcx)\n }\n \n+pub fn get_predicates<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId)\n+                                  -> ty::GenericPredicates<'tcx>\n+{\n+    let cstore = &tcx.sess.cstore;\n+    let cdata = cstore.get_crate_data(def.krate);\n+    decoder::get_predicates(&*cdata, def.node, tcx)\n+}\n+\n pub fn get_field_type<'tcx>(tcx: &ty::ctxt<'tcx>, class_id: ast::DefId,\n                             def: ast::DefId) -> ty::TypeScheme<'tcx> {\n     let cstore = &tcx.sess.cstore;"}, {"sha": "4924ebc576742b93a881e2e773b2ce33e8e39260", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "patch": "@@ -417,16 +417,22 @@ pub fn get_trait_def<'tcx>(cdata: Cmd,\n     }\n }\n \n-pub fn get_type<'tcx>(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt<'tcx>)\n-    -> ty::TypeScheme<'tcx> {\n-\n-    let item = lookup_item(id, cdata.data());\n+pub fn get_predicates<'tcx>(cdata: Cmd,\n+                                  item_id: ast::NodeId,\n+                                  tcx: &ty::ctxt<'tcx>)\n+                                  -> ty::GenericPredicates<'tcx>\n+{\n+    let item_doc = lookup_item(item_id, cdata.data());\n+    doc_predicates(item_doc, tcx, cdata, tag_item_generics)\n+}\n \n-    let t = item_type(ast::DefId { krate: cdata.cnum, node: id }, item, tcx,\n+pub fn get_type<'tcx>(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt<'tcx>)\n+                      -> ty::TypeScheme<'tcx>\n+{\n+    let item_doc = lookup_item(id, cdata.data());\n+    let t = item_type(ast::DefId { krate: cdata.cnum, node: id }, item_doc, tcx,\n                       cdata);\n-\n-    let generics = doc_generics(item, tcx, cdata, tag_item_generics);\n-\n+    let generics = doc_generics(item_doc, tcx, cdata, tag_item_generics);\n     ty::TypeScheme {\n         generics: generics,\n         ty: t\n@@ -882,14 +888,15 @@ pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,\n \n     match item_sort(method_doc) {\n         'r' | 'p' => {\n-            let generics = doc_generics(method_doc, tcx, cdata,\n-                                        tag_method_ty_generics);\n+            let generics = doc_generics(method_doc, tcx, cdata, tag_method_ty_generics);\n+            let predicates = doc_predicates(method_doc, tcx, cdata, tag_method_ty_generics);\n             let fty = doc_method_fty(method_doc, tcx, cdata);\n             let explicit_self = get_explicit_self(method_doc);\n             let provided_source = get_provided_source(method_doc, cdata);\n \n             ty::MethodTraitItem(Rc::new(ty::Method::new(name,\n                                                         generics,\n+                                                        predicates,\n                                                         fty,\n                                                         explicit_self,\n                                                         vis,\n@@ -1520,6 +1527,17 @@ fn doc_generics<'tcx>(base_doc: rbml::Doc,\n         true\n     });\n \n+    ty::Generics { types: types, regions: regions }\n+}\n+\n+fn doc_predicates<'tcx>(base_doc: rbml::Doc,\n+                        tcx: &ty::ctxt<'tcx>,\n+                        cdata: Cmd,\n+                        tag: uint)\n+                        -> ty::GenericPredicates<'tcx>\n+{\n+    let doc = reader::get_doc(base_doc, tag);\n+\n     let mut predicates = subst::VecPerParamSpace::empty();\n     reader::tagged_docs(doc, tag_predicate, |predicate_doc| {\n         let space_doc = reader::get_doc(predicate_doc, tag_predicate_space);\n@@ -1533,7 +1551,7 @@ fn doc_generics<'tcx>(base_doc: rbml::Doc,\n         true\n     });\n \n-    ty::Generics { types: types, regions: regions, predicates: predicates }\n+    ty::GenericPredicates { predicates: predicates }\n }\n \n pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {"}, {"sha": "3123fa31abdd1ed18a2dd5b360db452a49d0047c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "patch": "@@ -139,11 +139,21 @@ fn encode_item_variances(rbml_w: &mut Encoder,\n     rbml_w.end_tag();\n }\n \n+fn encode_bounds_and_type_for_item<'a, 'tcx>(rbml_w: &mut Encoder,\n+                                             ecx: &EncodeContext<'a, 'tcx>,\n+                                             id: ast::NodeId) {\n+    encode_bounds_and_type(rbml_w,\n+                           ecx,\n+                           &ty::lookup_item_type(ecx.tcx, local_def(id)),\n+                           &ty::lookup_predicates(ecx.tcx, local_def(id)));\n+}\n+\n fn encode_bounds_and_type<'a, 'tcx>(rbml_w: &mut Encoder,\n                                     ecx: &EncodeContext<'a, 'tcx>,\n-                                    pty: &ty::TypeScheme<'tcx>) {\n-    encode_generics(rbml_w, ecx, &pty.generics, tag_item_generics);\n-    encode_type(ecx, rbml_w, pty.ty);\n+                                    scheme: &ty::TypeScheme<'tcx>,\n+                                    predicates: &ty::GenericPredicates<'tcx>) {\n+    encode_generics(rbml_w, ecx, &scheme.generics, &predicates, tag_item_generics);\n+    encode_type(ecx, rbml_w, scheme.ty);\n }\n \n fn encode_variant_id(rbml_w: &mut Encoder, vid: DefId) {\n@@ -353,8 +363,7 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n             encode_disr_val(ecx, rbml_w, (*vi)[i].disr_val);\n             disr_val = (*vi)[i].disr_val;\n         }\n-        encode_bounds_and_type(rbml_w, ecx,\n-                               &lookup_item_type(ecx.tcx, def_id));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, def_id.local_id());\n \n         ecx.tcx.map.with_path(variant.node.id, |path| encode_path(rbml_w, path));\n         rbml_w.end_tag();\n@@ -698,8 +707,7 @@ fn encode_info_for_struct(ecx: &EncodeContext,\n                token::get_name(nm), id);\n         encode_struct_field_family(rbml_w, field.vis);\n         encode_name(rbml_w, nm);\n-        encode_bounds_and_type(rbml_w, ecx,\n-                               &lookup_item_type(ecx.tcx, local_def(id)));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, id);\n         encode_def_id(rbml_w, local_def(id));\n \n         let stab = stability::lookup(ecx.tcx, field.id);\n@@ -724,8 +732,7 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n     rbml_w.start_tag(tag_items_data_item);\n     encode_def_id(rbml_w, local_def(ctor_id));\n     encode_family(rbml_w, 'o');\n-    encode_bounds_and_type(rbml_w, ecx,\n-                           &lookup_item_type(ecx.tcx, local_def(ctor_id)));\n+    encode_bounds_and_type_for_item(rbml_w, ecx, ctor_id);\n     encode_name(rbml_w, name.name);\n     ecx.tcx.map.with_path(ctor_id, |path| encode_path(rbml_w, path));\n     encode_parent_item(rbml_w, local_def(struct_id));\n@@ -749,6 +756,7 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n fn encode_generics<'a, 'tcx>(rbml_w: &mut Encoder,\n                              ecx: &EncodeContext<'a, 'tcx>,\n                              generics: &ty::Generics<'tcx>,\n+                             predicates: &ty::GenericPredicates<'tcx>,\n                              tag: uint)\n {\n     rbml_w.start_tag(tag);\n@@ -790,7 +798,7 @@ fn encode_generics<'a, 'tcx>(rbml_w: &mut Encoder,\n         rbml_w.end_tag();\n     }\n \n-    for (space, _, predicate) in generics.predicates.iter_enumerated() {\n+    for (space, _, predicate) in predicates.predicates.iter_enumerated() {\n         rbml_w.start_tag(tag_predicate);\n \n         rbml_w.wr_tagged_u8(tag_predicate_space, space as u8);\n@@ -810,7 +818,7 @@ fn encode_method_ty_fields<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                                      method_ty: &ty::Method<'tcx>) {\n     encode_def_id(rbml_w, method_ty.def_id);\n     encode_name(rbml_w, method_ty.name);\n-    encode_generics(rbml_w, ecx, &method_ty.generics,\n+    encode_generics(rbml_w, ecx, &method_ty.generics, &method_ty.predicates,\n                     tag_method_ty_generics);\n     encode_method_fty(ecx, rbml_w, &method_ty.fty);\n     encode_visibility(rbml_w, method_ty.vis);\n@@ -844,15 +852,15 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     encode_stability(rbml_w, stab);\n \n     // The type for methods gets encoded twice, which is unfortunate.\n-    let pty = lookup_item_type(ecx.tcx, m.def_id);\n-    encode_bounds_and_type(rbml_w, ecx, &pty);\n+    encode_bounds_and_type_for_item(rbml_w, ecx, m.def_id.local_id());\n \n     let elem = ast_map::PathName(m.name);\n     encode_path(rbml_w, impl_path.chain(Some(elem).into_iter()));\n     match ast_item_opt {\n         Some(&ast::MethodImplItem(ref ast_method)) => {\n             encode_attributes(rbml_w, &ast_method.attrs[]);\n-            let any_types = !pty.generics.types.is_empty();\n+            let scheme = ty::lookup_item_type(ecx.tcx, m.def_id);\n+            let any_types = !scheme.generics.types.is_empty();\n             if any_types || is_default_impl || should_inline(&ast_method.attrs[]) {\n                 encode_inlined_item(ecx, rbml_w, IIImplItemRef(local_def(parent_id),\n                                                                ast_item_opt.unwrap()));\n@@ -887,8 +895,7 @@ fn encode_info_for_associated_type(ecx: &EncodeContext,\n     encode_parent_item(rbml_w, local_def(parent_id));\n     encode_item_sort(rbml_w, 't');\n \n-    let type_scheme = ty::lookup_item_type(ecx.tcx, associated_type.def_id);\n-    encode_bounds_and_type(rbml_w, ecx, &type_scheme);\n+    encode_bounds_and_type_for_item(rbml_w, ecx, associated_type.def_id.local_id());\n \n     let stab = stability::lookup(ecx.tcx, associated_type.def_id);\n     encode_stability(rbml_w, stab);\n@@ -1027,7 +1034,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         } else {\n             encode_family(rbml_w, 'c');\n         }\n-        encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, item.id);\n         encode_symbol(ecx, rbml_w, item.id);\n         encode_name(rbml_w, item.ident.name);\n         encode_path(rbml_w, path);\n@@ -1041,7 +1048,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id(rbml_w, def_id);\n         encode_family(rbml_w, 'C');\n-        encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, item.id);\n         encode_name(rbml_w, item.ident.name);\n         encode_path(rbml_w, path);\n         encode_attributes(rbml_w, &item.attrs);\n@@ -1056,7 +1063,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_def_id(rbml_w, def_id);\n         encode_family(rbml_w, FN_FAMILY);\n         let tps_len = generics.ty_params.len();\n-        encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, item.id);\n         encode_name(rbml_w, item.ident.name);\n         encode_path(rbml_w, path);\n         encode_attributes(rbml_w, &item.attrs[]);\n@@ -1105,7 +1112,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id(rbml_w, def_id);\n         encode_family(rbml_w, 'y');\n-        encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, item.id);\n         encode_name(rbml_w, item.ident.name);\n         encode_path(rbml_w, path);\n         encode_visibility(rbml_w, vis);\n@@ -1119,7 +1126,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_def_id(rbml_w, def_id);\n         encode_family(rbml_w, 't');\n         encode_item_variances(rbml_w, ecx, item.id);\n-        encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, item.id);\n         encode_name(rbml_w, item.ident.name);\n         encode_attributes(rbml_w, &item.attrs[]);\n         encode_repr_attrs(rbml_w, ecx, &item.attrs[]);\n@@ -1161,7 +1168,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id(rbml_w, def_id);\n         encode_family(rbml_w, 'S');\n-        encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, item.id);\n \n         encode_item_variances(rbml_w, ecx, item.id);\n         encode_name(rbml_w, item.ident.name);\n@@ -1204,7 +1211,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id(rbml_w, def_id);\n         encode_family(rbml_w, 'i');\n-        encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, item.id);\n         encode_name(rbml_w, item.ident.name);\n         encode_attributes(rbml_w, &item.attrs[]);\n         encode_unsafety(rbml_w, unsafety);\n@@ -1305,10 +1312,11 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_family(rbml_w, 'I');\n         encode_item_variances(rbml_w, ecx, item.id);\n         let trait_def = ty::lookup_trait_def(tcx, def_id);\n+        let trait_predicates = ty::lookup_predicates(tcx, def_id);\n         encode_unsafety(rbml_w, trait_def.unsafety);\n         encode_paren_sugar(rbml_w, trait_def.paren_sugar);\n         encode_associated_type_names(rbml_w, &trait_def.associated_type_names);\n-        encode_generics(rbml_w, ecx, &trait_def.generics, tag_item_generics);\n+        encode_generics(rbml_w, ecx, &trait_def.generics, &trait_predicates, tag_item_generics);\n         encode_trait_ref(rbml_w, ecx, &*trait_def.trait_ref, tag_item_trait_ref);\n         encode_name(rbml_w, item.ident.name);\n         encode_attributes(rbml_w, &item.attrs[]);\n@@ -1384,9 +1392,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                                           METHOD_FAMILY);\n                         }\n                     }\n-                    let pty = ty::lookup_item_type(tcx,\n-                                                   method_def_id);\n-                    encode_bounds_and_type(rbml_w, ecx, &pty);\n+                    encode_bounds_and_type_for_item(rbml_w, ecx, method_def_id.local_id());\n \n                     is_nonstatic_method = method_ty.explicit_self !=\n                         ty::StaticExplicitSelfCategory;\n@@ -1415,8 +1421,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                 if is_nonstatic_method {\n                     // FIXME: I feel like there is something funny\n                     // going on.\n-                    let pty = ty::lookup_item_type(tcx, item_def_id.def_id());\n-                    encode_bounds_and_type(rbml_w, ecx, &pty);\n+                    encode_bounds_and_type_for_item(rbml_w, ecx, item_def_id.def_id().local_id());\n                 }\n             };\n             match trait_item {\n@@ -1468,8 +1473,7 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n     match nitem.node {\n       ast::ForeignItemFn(ref fndecl, _) => {\n         encode_family(rbml_w, FN_FAMILY);\n-        encode_bounds_and_type(rbml_w, ecx,\n-                               &lookup_item_type(ecx.tcx,local_def(nitem.id)));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, nitem.id);\n         encode_name(rbml_w, nitem.ident.name);\n         if abi == abi::RustIntrinsic {\n             encode_inlined_item(ecx, rbml_w, IIForeignRef(nitem));\n@@ -1486,8 +1490,7 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n         } else {\n             encode_family(rbml_w, 'c');\n         }\n-        encode_bounds_and_type(rbml_w, ecx,\n-                               &lookup_item_type(ecx.tcx,local_def(nitem.id)));\n+        encode_bounds_and_type_for_item(rbml_w, ecx, nitem.id);\n         encode_attributes(rbml_w, &*nitem.attrs);\n         let stab = stability::lookup(ecx.tcx, ast_util::local_def(nitem.id));\n         encode_stability(rbml_w, stab);"}, {"sha": "423032d1287d7e994c8713525f5bb43b469c1fe3", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "patch": "@@ -951,11 +951,6 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                         Ok(encode_vec_per_param_space(\n                             this, &type_scheme.generics.regions,\n                             |this, def| def.encode(this).unwrap()))\n-                    });\n-                    this.emit_struct_field(\"predicates\", 2, |this| {\n-                        Ok(encode_vec_per_param_space(\n-                            this, &type_scheme.generics.predicates,\n-                            |this, def| this.emit_predicate(ecx, def)))\n                     })\n                 })\n             });\n@@ -1574,7 +1569,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n \n     fn read_type_scheme<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                 -> ty::TypeScheme<'tcx> {\n-        self.read_struct(\"TypeScheme\", 2, |this| {\n+        self.read_struct(\"TypeScheme\", 3, |this| {\n             Ok(ty::TypeScheme {\n                 generics: this.read_struct_field(\"generics\", 0, |this| {\n                     this.read_struct(\"Generics\", 2, |this| {\n@@ -1590,12 +1585,6 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                                 Ok(this.read_vec_per_param_space(\n                                     |this| Decodable::decode(this).unwrap()))\n                             }).unwrap(),\n-\n-                            predicates:\n-                            this.read_struct_field(\"predicates\", 2, |this| {\n-                                Ok(this.read_vec_per_param_space(\n-                                    |this| this.read_predicate(dcx)))\n-                            }).unwrap(),\n                         })\n                     })\n                 }).unwrap(),"}, {"sha": "d6778be553e8b2ec3655853a51a862bb3a0cfc25", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=acd1a0090a55bcb6810b2d6eb1676cb9a5fb65b7", "patch": "@@ -366,6 +366,14 @@ pub struct DefId {\n     pub node: NodeId,\n }\n \n+impl DefId {\n+    /// Read the node id, asserting that this def-id is krate-local.\n+    pub fn local_id(&self) -> NodeId {\n+        assert_eq!(self.krate, LOCAL_CRATE);\n+        self.node\n+    }\n+}\n+\n /// Item definitions in the currently-compiled crate would have the CrateNum\n /// LOCAL_CRATE in their DefId.\n pub const LOCAL_CRATE: CrateNum = 0;"}]}