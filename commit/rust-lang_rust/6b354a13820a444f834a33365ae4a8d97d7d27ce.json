{"sha": "6b354a13820a444f834a33365ae4a8d97d7d27ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzU0YTEzODIwYTQ0NGY4MzRhMzMzNjVhZTRhOGQ5N2Q3ZDI3Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-19T17:05:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-19T17:05:08Z"}, "message": "Auto merge of #86034 - nagisa:nagisa/rt-soundness, r=m-ou-se\n\nChange entry point to \ud83d\udee1\ufe0f against \ud83d\udca5 \ud83d\udca5-payloads\n\nGuard against panic payloads panicking within entrypoints, where it is\nUB to do so.\n\nNote that there are a number of tradeoffs to consider. For instance, I\nconsidered guarding against accidental panics inside the `rt::init` and\n`rt::cleanup` code as well, as it is not all that obvious these may not\npanic, but doing so would mean that we initialize certain thread-local\nslots unconditionally, which has its own problems.\n\nFixes #86030\nr? `@m-ou-se`", "tree": {"sha": "d214f382c147bd428359817863efec3056de32d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d214f382c147bd428359817863efec3056de32d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b354a13820a444f834a33365ae4a8d97d7d27ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b354a13820a444f834a33365ae4a8d97d7d27ce", "html_url": "https://github.com/rust-lang/rust/commit/6b354a13820a444f834a33365ae4a8d97d7d27ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b354a13820a444f834a33365ae4a8d97d7d27ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29cd70d40722930e66a8b726fe58a7bd1d64a22b", "url": "https://api.github.com/repos/rust-lang/rust/commits/29cd70d40722930e66a8b726fe58a7bd1d64a22b", "html_url": "https://github.com/rust-lang/rust/commit/29cd70d40722930e66a8b726fe58a7bd1d64a22b"}, {"sha": "9c9a0da132f9da505d741a733713e3ad5861d84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9a0da132f9da505d741a733713e3ad5861d84a", "html_url": "https://github.com/rust-lang/rust/commit/9c9a0da132f9da505d741a733713e3ad5861d84a"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "1c66dc3648f59af01ae0f79b00e23479d70e1283", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b354a13820a444f834a33365ae4a8d97d7d27ce/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b354a13820a444f834a33365ae4a8d97d7d27ce/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=6b354a13820a444f834a33365ae4a8d97d7d27ce", "patch": "@@ -225,13 +225,14 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n-#![feature(async_stream)]\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n+#![feature(async_stream)]\n #![feature(atomic_mut_ptr)]\n+#![feature(auto_traits)]\n #![feature(bench_black_box)]\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n@@ -244,14 +245,14 @@\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_floating_point_arithmetic)]\n-#![feature(const_fn_transmute)]\n #![feature(const_fn_fn_ptr_basics)]\n+#![feature(const_fn_transmute)]\n #![feature(const_io_structs)]\n #![feature(const_ip)]\n+#![feature(const_ipv4)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_socketaddr)]\n-#![feature(const_ipv4)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]\n #![feature(custom_test_frameworks)]\n@@ -298,7 +299,6 @@\n #![feature(nll)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(once_cell)]\n-#![feature(auto_traits)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n #![feature(panic_unwind)]\n@@ -330,6 +330,7 @@\n #![feature(unboxed_closures)]\n #![feature(unsafe_cell_raw_get)]\n #![feature(unwind_attributes)]\n+#![feature(unwrap_infallible)]\n #![feature(vec_into_raw_parts)]\n #![feature(vec_spare_capacity)]\n // NB: the above list is sorted to minimize merge conflicts."}, {"sha": "72e6c23ee49907a5b1b760577518ead2d7680ffb", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6b354a13820a444f834a33365ae4a8d97d7d27ce/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b354a13820a444f834a33365ae4a8d97d7d27ce/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=6b354a13820a444f834a33365ae4a8d97d7d27ce", "patch": "@@ -24,18 +24,32 @@ fn lang_start_internal(\n     main: &(dyn Fn() -> i32 + Sync + crate::panic::RefUnwindSafe),\n     argc: isize,\n     argv: *const *const u8,\n-) -> isize {\n-    use crate::panic;\n-    use crate::sys_common;\n-\n+) -> Result<isize, !> {\n+    use crate::{mem, panic, sys, sys_common};\n+    let rt_abort = move |e| {\n+        mem::forget(e);\n+        rtabort!(\"initialization or cleanup bug\");\n+    };\n+    // Guard against the code called by this function from unwinding outside of the Rust-controlled\n+    // code, which is UB. This is a requirement imposed by a combination of how the\n+    // `#[lang=\"start\"]` attribute is implemented as well as by the implementation of the panicking\n+    // mechanism itself.\n+    //\n+    // There are a couple of instances where unwinding can begin. First is inside of the\n+    // `rt::init`, `rt::cleanup` and similar functions controlled by libstd. In those instances a\n+    // panic is a libstd implementation bug. A quite likely one too, as there isn't any way to\n+    // prevent libstd from accidentally introducing a panic to these functions. Another is from\n+    // user code from `main` or, more nefariously, as described in e.g. issue #86030.\n     // SAFETY: Only called once during runtime initialization.\n-    unsafe { sys_common::rt::init(argc, argv) };\n-\n-    let exit_code = panic::catch_unwind(main);\n-\n-    sys_common::rt::cleanup();\n-\n-    exit_code.unwrap_or(101) as isize\n+    panic::catch_unwind(move || unsafe { sys_common::rt::init(argc, argv) }).map_err(rt_abort)?;\n+    let ret_code = panic::catch_unwind(move || panic::catch_unwind(main).unwrap_or(101) as isize)\n+        .map_err(move |e| {\n+            mem::forget(e);\n+            rtprintpanic!(\"drop of the panic payload panicked\");\n+            sys::abort_internal()\n+        });\n+    panic::catch_unwind(sys_common::rt::cleanup).map_err(rt_abort)?;\n+    ret_code\n }\n \n #[cfg(not(test))]\n@@ -50,4 +64,5 @@ fn lang_start<T: crate::process::Termination + 'static>(\n         argc,\n         argv,\n     )\n+    .into_ok()\n }"}, {"sha": "1d3a2ff82845ef74b6769045d765fc5e02b1c5e1", "filename": "src/test/ui/rt-explody-panic-payloads.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6b354a13820a444f834a33365ae4a8d97d7d27ce/src%2Ftest%2Fui%2Frt-explody-panic-payloads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b354a13820a444f834a33365ae4a8d97d7d27ce/src%2Ftest%2Fui%2Frt-explody-panic-payloads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frt-explody-panic-payloads.rs?ref=6b354a13820a444f834a33365ae4a8d97d7d27ce", "patch": "@@ -0,0 +1,30 @@\n+// run-pass\n+// ignore-emscripten no processes\n+// ignore-sgx no processes\n+// ignore-wasm32-bare no unwinding panic\n+// ignore-avr no unwinding panic\n+// ignore-nvptx64 no unwinding panic\n+\n+use std::env;\n+use std::process::Command;\n+\n+struct Bomb;\n+\n+impl Drop for Bomb {\n+    fn drop(&mut self) {\n+        std::panic::panic_any(Bomb);\n+    }\n+}\n+\n+fn main() {\n+    let args = env::args().collect::<Vec<_>>();\n+    let output = match &args[..] {\n+        [me] => Command::new(&me).arg(\"plant the\").output(),\n+        [..] => std::panic::panic_any(Bomb),\n+    }.expect(\"running the command should have succeeded\");\n+    println!(\"{:#?}\", output);\n+    let stderr = std::str::from_utf8(&output.stderr);\n+    assert!(stderr.map(|v| {\n+        v.ends_with(\"drop of the panic payload panicked\")\n+    }).unwrap_or(false));\n+}"}]}