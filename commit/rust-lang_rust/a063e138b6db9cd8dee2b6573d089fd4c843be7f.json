{"sha": "a063e138b6db9cd8dee2b6573d089fd4c843be7f", "node_id": "C_kwDOAAsO6NoAKGEwNjNlMTM4YjZkYjljZDhkZWUyYjY1NzNkMDg5ZmQ0Yzg0M2JlN2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-22T11:16:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-22T11:16:28Z"}, "message": "Rollup merge of #94169 - Amanieu:asm_stuff, r=nagisa\n\nFix several asm! related issues\n\nThis is a combination of several fixes, each split into a separate commit. Splitting these into PRs is not practical since they conflict with each other.\n\nFixes #92378\nFixes #85247\n\nr? ``@nagisa``", "tree": {"sha": "654342a9087480074448eb99ca2368a997fb362d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654342a9087480074448eb99ca2368a997fb362d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a063e138b6db9cd8dee2b6573d089fd4c843be7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a063e138b6db9cd8dee2b6573d089fd4c843be7f", "html_url": "https://github.com/rust-lang/rust/commit/a063e138b6db9cd8dee2b6573d089fd4c843be7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a063e138b6db9cd8dee2b6573d089fd4c843be7f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34bcdd49c1d584487bc69e9b44e8b3fd957f4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34bcdd49c1d584487bc69e9b44e8b3fd957f4a7", "html_url": "https://github.com/rust-lang/rust/commit/d34bcdd49c1d584487bc69e9b44e8b3fd957f4a7"}, {"sha": "73cf3aaa7892d2f5d19324111f79de87978459ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/73cf3aaa7892d2f5d19324111f79de87978459ee", "html_url": "https://github.com/rust-lang/rust/commit/73cf3aaa7892d2f5d19324111f79de87978459ee"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "deac5dfd3ec1adc43b8e2380446dba99a493eb6e", "filename": "src/inline_asm.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a063e138b6db9cd8dee2b6573d089fd4c843be7f/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a063e138b6db9cd8dee2b6573d089fd4c843be7f/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=a063e138b6db9cd8dee2b6573d089fd4c843be7f", "patch": "@@ -106,6 +106,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n     let mut asm_gen = InlineAssemblyGenerator {\n         tcx: fx.tcx,\n         arch: fx.tcx.sess.asm_arch.unwrap(),\n+        enclosing_def_id: fx.instance.def_id(),\n         template,\n         operands,\n         options,\n@@ -169,6 +170,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n struct InlineAssemblyGenerator<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     arch: InlineAsmArch,\n+    enclosing_def_id: DefId,\n     template: &'a [InlineAsmTemplatePiece],\n     operands: &'a [InlineAsmOperand<'tcx>],\n     options: InlineAsmOptions,\n@@ -182,7 +184,12 @@ struct InlineAssemblyGenerator<'a, 'tcx> {\n impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n     fn allocate_registers(&mut self) {\n         let sess = self.tcx.sess;\n-        let map = allocatable_registers(self.arch, &sess.target_features, &sess.target);\n+        let map = allocatable_registers(\n+            self.arch,\n+            sess.relocation_model(),\n+            self.tcx.asm_target_features(self.enclosing_def_id),\n+            &sess.target,\n+        );\n         let mut allocated = FxHashMap::<_, (bool, bool)>::default();\n         let mut regs = vec![None; self.operands.len()];\n \n@@ -313,14 +320,9 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         let mut new_slot = |x| new_slot_fn(&mut slot_size, x);\n \n         // Allocate stack slots for saving clobbered registers\n-        let abi_clobber = InlineAsmClobberAbi::parse(\n-            self.arch,\n-            &self.tcx.sess.target_features,\n-            &self.tcx.sess.target,\n-            sym::C,\n-        )\n-        .unwrap()\n-        .clobbered_regs();\n+        let abi_clobber = InlineAsmClobberAbi::parse(self.arch, &self.tcx.sess.target, sym::C)\n+            .unwrap()\n+            .clobbered_regs();\n         for (i, reg) in self.registers.iter().enumerate().filter_map(|(i, r)| r.map(|r| (i, r))) {\n             let mut need_save = true;\n             // If the register overlaps with a register clobbered by function call, then"}]}