{"sha": "1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzViMzFjMWM5ZjE4YjhmOTM0OGU5NmM5ZmE2NmFlNjcwYjFmMTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-16T10:45:18Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-16T11:08:00Z"}, "message": "Store type names in crate metadata\n\nImproves type error messages referring to external types.\n\nIssue #1507", "tree": {"sha": "84f2e1e709c27af6105d024cb0b86aec509755ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f2e1e709c27af6105d024cb0b86aec509755ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "html_url": "https://github.com/rust-lang/rust/commit/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2fe7b63985ce8ec0a85adfa47e3c2d8f5b6dc3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2fe7b63985ce8ec0a85adfa47e3c2d8f5b6dc3b", "html_url": "https://github.com/rust-lang/rust/commit/c2fe7b63985ce8ec0a85adfa47e3c2d8f5b6dc3b"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "812a33b8b7a8dffd1c68f676696e7a76ccb9ab3f", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "patch": "@@ -292,6 +292,13 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         assert (next(st) as char == ']');\n         ret ty::mk_constr(st.tcx, tt, tcs);\n       }\n+      '\"' {\n+        let name = \"\";\n+        while peek(st) as char != '\"' { str::push_byte(name, next(st)); }\n+        st.pos = st.pos + 1u;\n+        let inner = parse_ty(st, conv);\n+        ty::mk_named(st.tcx, inner, @name)\n+      }\n       c { #error(\"unexpected char in type string: %c\", c); fail;}\n     }\n }"}, {"sha": "75ecbdc283077d3891e90dbf3dff1761f5e0dd51", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "patch": "@@ -41,7 +41,8 @@ fn enc_ty(w: io::writer, cx: @ctxt, t: ty::t) {\n           some(s) { *s }\n           none. {\n             let buf = io::mk_mem_buffer();\n-            enc_sty(io::mem_buffer_writer(buf), cx, ty::struct(cx.tcx, t));\n+            enc_sty(io::mem_buffer_writer(buf), cx,\n+                    ty::struct_raw(cx.tcx, t));\n             cx.tcx.short_names_cache.insert(t, @io::mem_buffer_str(buf));\n             io::mem_buffer_str(buf)\n           }\n@@ -53,7 +54,7 @@ fn enc_ty(w: io::writer, cx: @ctxt, t: ty::t) {\n           some(a) { w.write_str(*a.s); ret; }\n           none. {\n             let pos = w.tell();\n-            enc_sty(w, cx, ty::struct(cx.tcx, t));\n+            enc_sty(w, cx, ty::struct_raw(cx.tcx, t));\n             let end = w.tell();\n             let len = end - pos;\n             fn estimate_sz(u: uint) -> uint {\n@@ -188,6 +189,12 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         for tc: @ty::type_constr in cs { enc_ty_constr(w, cx, tc); }\n         w.write_char(']');\n       }\n+      ty::ty_named(t, name) {\n+        w.write_char('\"');\n+        w.write_str(*name);\n+        w.write_char('\"');\n+        enc_ty(w, cx, t);\n+      }\n     }\n }\n fn enc_proto(w: io::writer, proto: proto) {"}, {"sha": "d44b0ee0072f5e2b5e33d773d04c354c2c29c98b", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "patch": "@@ -93,7 +93,7 @@ export node_type_table;\n export pat_ty;\n export ret_ty_of_fn;\n export sequence_element_type;\n-export struct;\n+export struct, struct_raw;\n export ty_name;\n export sort_methods;\n export stmt_node_id;\n@@ -641,6 +641,10 @@ pure fn struct(cx: ctxt, typ: t) -> sty {\n     }\n }\n \n+pure fn struct_raw(cx: ctxt, typ: t) -> sty {\n+    interner::get(*cx.ts, typ).struct\n+}\n+\n // Returns struact(cx, typ) but replaces all occurences of platform\n // dependent primitive types with their machine type equivalent\n pure fn mach_struct(cx: ctxt, cfg: @session::config, typ: t) -> sty {"}, {"sha": "c7736056a502fce2612c8a323c73cdc02353fab1", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "patch": "@@ -439,6 +439,7 @@ fn ty_of_native_item(tcx: ty::ctxt, mode: mode, it: @ast::native_item)\n           none. { }\n         }\n         let t = ty::mk_native(tcx, ast_util::local_def(it.id));\n+        let t = ty::mk_named(tcx, t, @it.ident);\n         let tpt = {bounds: @[], ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;"}, {"sha": "47e52863dda8686ff7ffa80996416ae9c87a1067", "filename": "src/test/compile-fail/native-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1375b31c1c9f18b8f9348e96c9fa66ae670b1f13/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs?ref=1375b31c1c9f18b8f9348e96c9fa66ae670b1f13", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected `*u8` but found `native`\n+// error-pattern:expected `sbuf` but found `FILE`\n use std;\n \n fn main() unsafe {"}]}