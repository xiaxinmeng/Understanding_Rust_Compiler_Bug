{"sha": "72ae42627b023a6f453316df7735fd9cb4e9283b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYWU0MjYyN2IwMjNhNmY0NTMzMTZkZjc3MzVmZDljYjRlOTI4M2I=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-01T18:32:02Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-01T22:12:09Z"}, "message": "Call 'new' instead of 'old' extfmt code, preparing for snapshot", "tree": {"sha": "ed93ac62bf74f5e3fdcd5650b790b5bc085d1737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed93ac62bf74f5e3fdcd5650b790b5bc085d1737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ae42627b023a6f453316df7735fd9cb4e9283b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ae42627b023a6f453316df7735fd9cb4e9283b", "html_url": "https://github.com/rust-lang/rust/commit/72ae42627b023a6f453316df7735fd9cb4e9283b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ae42627b023a6f453316df7735fd9cb4e9283b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4db176307e91e85361270b667fb22885a21b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4db176307e91e85361270b667fb22885a21b8b", "html_url": "https://github.com/rust-lang/rust/commit/9b4db176307e91e85361270b667fb22885a21b8b"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "25f92e6172608977673dd4c445850e162a4147f4", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/72ae42627b023a6f453316df7735fd9cb4e9283b/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae42627b023a6f453316df7735fd9cb4e9283b/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=72ae42627b023a6f453316df7735fd9cb4e9283b", "patch": "@@ -270,7 +270,10 @@ mod ct {\n     }\n }\n \n-// OLD CODE -- eventually remove\n+// Functions used by the fmt extension at runtime. For now there are a lot of\n+// decisions made a runtime. If it proves worthwhile then some of these\n+// conditions can be evaluated at compile-time. For now though it's cleaner to\n+// implement it 0this way, I think.\n mod rt {\n     #[legacy_exports];\n     const flag_none : u32 = 0u32;\n@@ -286,7 +289,7 @@ mod rt {\n     type Conv = {flags: u32, width: Count, precision: Count, ty: Ty};\n \n     pure fn conv_int(cv: Conv, i: int) -> ~str {\n-        let radix = 10u;\n+        let radix = 10;\n         let prec = get_int_precision(cv);\n         let mut s : ~str = int_to_str_prec(i, radix, prec);\n         if 0 <= i {\n@@ -320,13 +323,13 @@ mod rt {\n         let mut s = str::from_char(c);\n         return unsafe { pad(cv, s, PadNozero) };\n     }\n-    pure fn conv_str(cv: Conv, s: &str) -> ~str {\n+    pure fn conv_str(cv: Conv, +s: &str) -> ~str {\n         // For strings, precision is the maximum characters\n         // displayed\n         let mut unpadded = match cv.precision {\n           CountImplied => s.to_unique(),\n           CountIs(max) => if max as uint < str::char_len(s) {\n-            str::substr(s, 0, max as uint)\n+            str::substr(s, 0u, max as uint)\n           } else {\n             s.to_unique()\n           }\n@@ -336,7 +339,7 @@ mod rt {\n     pure fn conv_float(cv: Conv, f: float) -> ~str {\n         let (to_str, digits) = match cv.precision {\n               CountIs(c) => (float::to_str_exact, c as uint),\n-              CountImplied => (float::to_str, 6)\n+              CountImplied => (float::to_str, 6u)\n         };\n         let mut s = unsafe { to_str(f, digits) };\n         if 0.0 <= f {\n@@ -348,8 +351,8 @@ mod rt {\n         }\n         return unsafe { pad(cv, s, PadFloat) };\n     }\n-    pure fn conv_poly<T>(cv: Conv, v: T) -> ~str {\n-        let s = sys::log_str(&v);\n+    pure fn conv_poly<T>(cv: Conv, v: &T) -> ~str {\n+        let s = sys::log_str(v);\n         return conv_str(cv, s);\n     }\n \n@@ -460,7 +463,7 @@ mod rt {\n     }\n }\n \n-// NEW CODE\n+// Remove after snapshot\n \n // Functions used by the fmt extension at runtime. For now there are a lot of\n // decisions made a runtime. If it proves worthwhile then some of these"}, {"sha": "619511f045430364f71c3335a29c243075e59244", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72ae42627b023a6f453316df7735fd9cb4e9283b/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae42627b023a6f453316df7735fd9cb4e9283b/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=72ae42627b023a6f453316df7735fd9cb4e9283b", "patch": "@@ -39,7 +39,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n    -> @ast::expr {\n     fn make_path_vec(_cx: ext_ctxt, ident: @~str) -> ~[ast::ident] {\n         let intr = _cx.parse_sess().interner;\n-        return ~[intr.intern(@~\"extfmt\"), intr.intern(@~\"rt2\"),\n+        return ~[intr.intern(@~\"extfmt\"), intr.intern(@~\"rt\"),\n                  intr.intern(ident)];\n     }\n     fn make_rt_path_expr(cx: ext_ctxt, sp: span, nm: @~str) -> @ast::expr {"}]}