{"sha": "ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYzAzZjdjODBhN2FiOGNkZjk1YzBkZGMzMWI1N2UwNjU5MDZhMTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-22T04:39:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-22T04:39:15Z"}, "message": "Auto merge of #75772 - tmiasko:io-maybe-no, r=dtolnay\n\nRemove unused `Maybe` wrapper around raw standard streams\n\n* Remove result type from raw standard streams constructors\n* Make raw standard stream constructors const\n* Remove wrapper type handling absent raw standard streams\n\ncargo checked with:\n\n```shell\nenv CC=true ./x.py check library/std/ \\\n  --target i686-unknown-linux-gnu \\\n  --target wasm32-unknown-emscripten \\\n  --target wasm32-wasi \\\n  --target x86_64-fortanix-unknown-sgx \\\n  --target x86_64-pc-windows-gnu \\\n  --target x86_64-unknown-cloudabi \\\n  --target x86_64-unknown-hermit \\\n  --target x86_64-unknown-linux-gnu \\\n  --target x86_64-uwp-windows-gnu \\\n  --target x86_64-wrs-vxworks\n```\n\nNote: Last target doesn't compile currently.", "tree": {"sha": "3e724335bd63ab75a7060b825d63defa1928dcbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e724335bd63ab75a7060b825d63defa1928dcbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "html_url": "https://github.com/rust-lang/rust/commit/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3a4b16bd0eb633b3088c4c8a07f6f19d0be7ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a4b16bd0eb633b3088c4c8a07f6f19d0be7ae6", "html_url": "https://github.com/rust-lang/rust/commit/e3a4b16bd0eb633b3088c4c8a07f6f19d0be7ae6"}, {"sha": "78e094632ec6160c3d2cfaad777c16a27ce08609", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e094632ec6160c3d2cfaad777c16a27ce08609", "html_url": "https://github.com/rust-lang/rust/commit/78e094632ec6160c3d2cfaad777c16a27ce08609"}], "stats": {"total": 278, "additions": 103, "deletions": 175}, "files": [{"sha": "3943c66aad53a1ec9ecffd946c6c3401470bc7c7", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 42, "deletions": 114, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -50,8 +50,9 @@ struct StderrRaw(stdio::Stderr);\n /// handles is **not** available to raw handles returned from this function.\n ///\n /// The returned handle has no external synchronization or buffering.\n-fn stdin_raw() -> io::Result<StdinRaw> {\n-    stdio::Stdin::new().map(StdinRaw)\n+#[unstable(feature = \"libstd_sys_internals\", issue = \"none\")]\n+const fn stdin_raw() -> StdinRaw {\n+    StdinRaw(stdio::Stdin::new())\n }\n \n /// Constructs a new raw handle to the standard output stream of this process.\n@@ -63,8 +64,9 @@ fn stdin_raw() -> io::Result<StdinRaw> {\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-fn stdout_raw() -> io::Result<StdoutRaw> {\n-    stdio::Stdout::new().map(StdoutRaw)\n+#[unstable(feature = \"libstd_sys_internals\", issue = \"none\")]\n+const fn stdout_raw() -> StdoutRaw {\n+    StdoutRaw(stdio::Stdout::new())\n }\n \n /// Constructs a new raw handle to the standard error stream of this process.\n@@ -74,17 +76,18 @@ fn stdout_raw() -> io::Result<StdoutRaw> {\n ///\n /// The returned handle has no external synchronization or buffering layered on\n /// top.\n-fn stderr_raw() -> io::Result<StderrRaw> {\n-    stdio::Stderr::new().map(StderrRaw)\n+#[unstable(feature = \"libstd_sys_internals\", issue = \"none\")]\n+const fn stderr_raw() -> StderrRaw {\n+    StderrRaw(stdio::Stderr::new())\n }\n \n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.0.read(buf)\n+        handle_ebadf(self.0.read(buf), 0)\n     }\n \n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        self.0.read_vectored(bufs)\n+        handle_ebadf(self.0.read_vectored(bufs), 0)\n     }\n \n     #[inline]\n@@ -98,25 +101,22 @@ impl Read for StdinRaw {\n     }\n \n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n+        handle_ebadf(self.0.read_to_end(buf), 0)\n     }\n \n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n-        self.0.read_to_string(buf)\n-    }\n-\n-    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n-        self.0.read_exact(buf)\n+        handle_ebadf(self.0.read_to_string(buf), 0)\n     }\n }\n \n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        self.0.write(buf)\n+        handle_ebadf(self.0.write(buf), buf.len())\n     }\n \n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        self.0.write_vectored(bufs)\n+        let total = bufs.iter().map(|b| b.len()).sum();\n+        handle_ebadf(self.0.write_vectored(bufs), total)\n     }\n \n     #[inline]\n@@ -125,29 +125,30 @@ impl Write for StdoutRaw {\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n-        self.0.flush()\n+        handle_ebadf(self.0.flush(), ())\n     }\n \n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n-        self.0.write_all(buf)\n+        handle_ebadf(self.0.write_all(buf), ())\n     }\n \n     fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n-        self.0.write_all_vectored(bufs)\n+        handle_ebadf(self.0.write_all_vectored(bufs), ())\n     }\n \n     fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n-        self.0.write_fmt(fmt)\n+        handle_ebadf(self.0.write_fmt(fmt), ())\n     }\n }\n \n impl Write for StderrRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        self.0.write(buf)\n+        handle_ebadf(self.0.write(buf), buf.len())\n     }\n \n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        self.0.write_vectored(bufs)\n+        let total = bufs.iter().map(|b| b.len()).sum();\n+        handle_ebadf(self.0.write_vectored(bufs), total)\n     }\n \n     #[inline]\n@@ -156,80 +157,19 @@ impl Write for StderrRaw {\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n-        self.0.flush()\n+        handle_ebadf(self.0.flush(), ())\n     }\n \n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n-        self.0.write_all(buf)\n+        handle_ebadf(self.0.write_all(buf), ())\n     }\n \n     fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n-        self.0.write_all_vectored(bufs)\n+        handle_ebadf(self.0.write_all_vectored(bufs), ())\n     }\n \n     fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {\n-        self.0.write_fmt(fmt)\n-    }\n-}\n-\n-enum Maybe<T> {\n-    Real(T),\n-    Fake,\n-}\n-\n-impl<W: io::Write> io::Write for Maybe<W> {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        match *self {\n-            Maybe::Real(ref mut w) => handle_ebadf(w.write(buf), buf.len()),\n-            Maybe::Fake => Ok(buf.len()),\n-        }\n-    }\n-\n-    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        let total = bufs.iter().map(|b| b.len()).sum();\n-        match self {\n-            Maybe::Real(w) => handle_ebadf(w.write_vectored(bufs), total),\n-            Maybe::Fake => Ok(total),\n-        }\n-    }\n-\n-    #[inline]\n-    fn is_write_vectored(&self) -> bool {\n-        match self {\n-            Maybe::Real(w) => w.is_write_vectored(),\n-            Maybe::Fake => true,\n-        }\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        match *self {\n-            Maybe::Real(ref mut w) => handle_ebadf(w.flush(), ()),\n-            Maybe::Fake => Ok(()),\n-        }\n-    }\n-}\n-\n-impl<R: io::Read> io::Read for Maybe<R> {\n-    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        match *self {\n-            Maybe::Real(ref mut r) => handle_ebadf(r.read(buf), 0),\n-            Maybe::Fake => Ok(0),\n-        }\n-    }\n-\n-    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self {\n-            Maybe::Real(r) => handle_ebadf(r.read_vectored(bufs), 0),\n-            Maybe::Fake => Ok(0),\n-        }\n-    }\n-\n-    #[inline]\n-    fn is_read_vectored(&self) -> bool {\n-        match self {\n-            Maybe::Real(w) => w.is_read_vectored(),\n-            Maybe::Fake => true,\n-        }\n+        handle_ebadf(self.0.write_fmt(fmt), ())\n     }\n }\n \n@@ -274,7 +214,7 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdin {\n-    inner: Arc<Mutex<BufReader<Maybe<StdinRaw>>>>,\n+    inner: Arc<Mutex<BufReader<StdinRaw>>>,\n }\n \n /// A locked reference to the `Stdin` handle.\n@@ -305,7 +245,7 @@ pub struct Stdin {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdinLock<'a> {\n-    inner: MutexGuard<'a, BufReader<Maybe<StdinRaw>>>,\n+    inner: MutexGuard<'a, BufReader<StdinRaw>>,\n }\n \n /// Constructs a new handle to the standard input of the current process.\n@@ -349,18 +289,14 @@ pub struct StdinLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n-    static INSTANCE: Lazy<Mutex<BufReader<Maybe<StdinRaw>>>> = Lazy::new();\n+    static INSTANCE: Lazy<Mutex<BufReader<StdinRaw>>> = Lazy::new();\n     return Stdin {\n         inner: unsafe { INSTANCE.get(stdin_init).expect(\"cannot access stdin during shutdown\") },\n     };\n \n-    fn stdin_init() -> Arc<Mutex<BufReader<Maybe<StdinRaw>>>> {\n+    fn stdin_init() -> Arc<Mutex<BufReader<StdinRaw>>> {\n         // This must not reentrantly access `INSTANCE`\n-        let stdin = match stdin_raw() {\n-            Ok(stdin) => Maybe::Real(stdin),\n-            _ => Maybe::Fake,\n-        };\n-\n+        let stdin = stdin_raw();\n         Arc::new(Mutex::new(BufReader::with_capacity(stdio::STDIN_BUF_SIZE, stdin)))\n     }\n }\n@@ -537,7 +473,7 @@ pub struct Stdout {\n     // FIXME: this should be LineWriter or BufWriter depending on the state of\n     //        stdout (tty or not). Note that if this is not line buffered it\n     //        should also flush-on-panic or some form of flush-on-abort.\n-    inner: Arc<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>>,\n+    inner: Arc<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>>,\n }\n \n /// A locked reference to the `Stdout` handle.\n@@ -551,7 +487,7 @@ pub struct Stdout {\n /// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdoutLock<'a> {\n-    inner: ReentrantMutexGuard<'a, RefCell<LineWriter<Maybe<StdoutRaw>>>>,\n+    inner: ReentrantMutexGuard<'a, RefCell<LineWriter<StdoutRaw>>>,\n }\n \n /// Constructs a new handle to the standard output of the current process.\n@@ -595,17 +531,14 @@ pub struct StdoutLock<'a> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n-    static INSTANCE: Lazy<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>> = Lazy::new();\n+    static INSTANCE: Lazy<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>> = Lazy::new();\n     return Stdout {\n         inner: unsafe { INSTANCE.get(stdout_init).expect(\"cannot access stdout during shutdown\") },\n     };\n \n-    fn stdout_init() -> Arc<ReentrantMutex<RefCell<LineWriter<Maybe<StdoutRaw>>>>> {\n+    fn stdout_init() -> Arc<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>> {\n         // This must not reentrantly access `INSTANCE`\n-        let stdout = match stdout_raw() {\n-            Ok(stdout) => Maybe::Real(stdout),\n-            _ => Maybe::Fake,\n-        };\n+        let stdout = stdout_raw();\n         unsafe {\n             let ret = Arc::new(ReentrantMutex::new(RefCell::new(LineWriter::new(stdout))));\n             ret.init();\n@@ -715,7 +648,7 @@ impl fmt::Debug for StdoutLock<'_> {\n /// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stderr {\n-    inner: &'static ReentrantMutex<RefCell<Maybe<StderrRaw>>>,\n+    inner: &'static ReentrantMutex<RefCell<StderrRaw>>,\n }\n \n /// A locked reference to the `Stderr` handle.\n@@ -729,7 +662,7 @@ pub struct Stderr {\n /// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StderrLock<'a> {\n-    inner: ReentrantMutexGuard<'a, RefCell<Maybe<StderrRaw>>>,\n+    inner: ReentrantMutexGuard<'a, RefCell<StderrRaw>>,\n }\n \n /// Constructs a new handle to the standard error of the current process.\n@@ -778,19 +711,14 @@ pub fn stderr() -> Stderr {\n     //\n     // This has the added benefit of allowing `stderr` to be usable during\n     // process shutdown as well!\n-    static INSTANCE: ReentrantMutex<RefCell<Maybe<StderrRaw>>> =\n-        unsafe { ReentrantMutex::new(RefCell::new(Maybe::Fake)) };\n+    static INSTANCE: ReentrantMutex<RefCell<StderrRaw>> =\n+        unsafe { ReentrantMutex::new(RefCell::new(stderr_raw())) };\n \n     // When accessing stderr we need one-time initialization of the reentrant\n-    // mutex, followed by one-time detection of whether we actually have a\n-    // stderr handle or not. Afterwards we can just always use the now-filled-in\n-    // `INSTANCE` value.\n+    // mutex. Afterwards we can just always use the now-filled-in `INSTANCE` value.\n     static INIT: Once = Once::new();\n     INIT.call_once(|| unsafe {\n         INSTANCE.init();\n-        if let Ok(stderr) = stderr_raw() {\n-            *INSTANCE.lock().borrow_mut() = Maybe::Real(stderr);\n-        }\n     });\n     Stderr { inner: &INSTANCE }\n }"}, {"sha": "7fec4731a462c6b89cb580e43de7e33a2624bf67", "filename": "library/std/src/sys/cloudabi/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -6,8 +6,8 @@ pub struct Stdout(());\n pub struct Stderr(());\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin(()))\n+    pub const fn new() -> Stdin {\n+        Stdin(())\n     }\n }\n \n@@ -18,8 +18,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout(()))\n+    pub const fn new() -> Stdout {\n+        Stdout(())\n     }\n }\n \n@@ -37,8 +37,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr(()))\n+    pub const fn new() -> Stderr {\n+        Stderr(())\n     }\n }\n \n@@ -62,5 +62,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "82304dd6dc2931112c1dedb7913204445f52d0cb", "filename": "library/std/src/sys/hermit/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -7,8 +7,8 @@ pub struct Stdout;\n pub struct Stderr;\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin)\n+    pub const fn new() -> Stdin {\n+        Stdin\n     }\n }\n \n@@ -28,8 +28,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub const fn new() -> Stdout {\n+        Stdout\n     }\n }\n \n@@ -69,8 +69,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub const fn new() -> Stderr {\n+        Stderr\n     }\n }\n \n@@ -116,5 +116,5 @@ pub fn is_ebadf(_err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "49f44f9f498aca1f55eadc62d39122ee346abe71", "filename": "library/std/src/sys/sgx/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -19,8 +19,8 @@ fn with_std_fd<F: FnOnce(&FileDesc) -> R, R>(fd: abi::Fd, f: F) -> R {\n }\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin(()))\n+    pub const fn new() -> Stdin {\n+        Stdin(())\n     }\n }\n \n@@ -31,8 +31,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout(()))\n+    pub const fn new() -> Stdout {\n+        Stdout(())\n     }\n }\n \n@@ -47,8 +47,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr(()))\n+    pub const fn new() -> Stderr {\n+        Stderr(())\n     }\n }\n "}, {"sha": "a05fe8165cff2f2bc5a2cebe9eff9837427ea5c5", "filename": "library/std/src/sys/unix/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -7,8 +7,8 @@ pub struct Stdout(());\n pub struct Stderr(());\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin(()))\n+    pub const fn new() -> Stdin {\n+        Stdin(())\n     }\n }\n \n@@ -28,8 +28,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout(()))\n+    pub const fn new() -> Stdout {\n+        Stdout(())\n     }\n }\n \n@@ -53,8 +53,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr(()))\n+    pub const fn new() -> Stderr {\n+        Stderr(())\n     }\n }\n \n@@ -84,5 +84,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "b5e3f5be9885bc7197bb651111b833cc244a8870", "filename": "library/std/src/sys/unsupported/stdio.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -5,8 +5,8 @@ pub struct Stdout;\n pub struct Stderr;\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin)\n+    pub const fn new() -> Stdin {\n+        Stdin\n     }\n }\n \n@@ -17,8 +17,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub const fn new() -> Stdout {\n+        Stdout\n     }\n }\n \n@@ -33,8 +33,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub const fn new() -> Stderr {\n+        Stderr\n     }\n }\n "}, {"sha": "92e9f205b4e6e2edaf2c7ac85c31f6bed2e00f88", "filename": "library/std/src/sys/vxworks/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -6,8 +6,8 @@ pub struct Stdout(());\n pub struct Stderr(());\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin(()))\n+    pub const fn new() -> Stdin {\n+        Stdin(())\n     }\n }\n \n@@ -21,8 +21,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout(()))\n+    pub const fn new() -> Stdout {\n+        Stdout(())\n     }\n }\n \n@@ -40,8 +40,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr(()))\n+    pub const fn new() -> Stderr {\n+        Stderr(())\n     }\n }\n \n@@ -65,5 +65,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "23baafabf7933bd7ad116f0541a3466c687acb77", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -7,8 +7,8 @@ pub struct Stdout;\n pub struct Stderr;\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin)\n+    pub const fn new() -> Stdin {\n+        Stdin\n     }\n \n     #[inline]\n@@ -33,8 +33,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub const fn new() -> Stdout {\n+        Stdout\n     }\n \n     #[inline]\n@@ -62,8 +62,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub const fn new() -> Stderr {\n+        Stderr\n     }\n \n     #[inline]\n@@ -98,5 +98,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "ff214497166beb8ac953c890312a5f5e29cb689f", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -131,8 +131,8 @@ fn write_u16s(handle: c::HANDLE, data: &[u16]) -> io::Result<usize> {\n }\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin { surrogate: 0 })\n+    pub const fn new() -> Stdin {\n+        Stdin { surrogate: 0 }\n     }\n }\n \n@@ -255,8 +255,8 @@ fn utf16_to_utf8(utf16: &[u16], utf8: &mut [u8]) -> io::Result<usize> {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub const fn new() -> Stdout {\n+        Stdout\n     }\n }\n \n@@ -271,8 +271,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub const fn new() -> Stderr {\n+        Stderr\n     }\n }\n \n@@ -291,5 +291,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}, {"sha": "872511af862a72d47ce767a0975fba1083600617", "filename": "library/std/src/sys/windows/stdio_uwp.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio_uwp.rs?ref=ebc03f7c80a7ab8cdf95c0ddc31b57e065906a13", "patch": "@@ -30,8 +30,8 @@ fn write(handle_id: c::DWORD, data: &[u8]) -> io::Result<usize> {\n }\n \n impl Stdin {\n-    pub fn new() -> io::Result<Stdin> {\n-        Ok(Stdin {})\n+    pub const fn new() -> Stdin {\n+        Stdin {}\n     }\n }\n \n@@ -44,8 +44,8 @@ impl io::Read for Stdin {\n }\n \n impl Stdout {\n-    pub fn new() -> io::Result<Stdout> {\n-        Ok(Stdout)\n+    pub const fn new() -> Stdout {\n+        Stdout\n     }\n }\n \n@@ -60,8 +60,8 @@ impl io::Write for Stdout {\n }\n \n impl Stderr {\n-    pub fn new() -> io::Result<Stderr> {\n-        Ok(Stderr)\n+    pub const fn new() -> Stderr {\n+        Stderr\n     }\n }\n \n@@ -80,5 +80,5 @@ pub fn is_ebadf(err: &io::Error) -> bool {\n }\n \n pub fn panic_output() -> Option<impl io::Write> {\n-    Stderr::new().ok()\n+    Some(Stderr::new())\n }"}]}