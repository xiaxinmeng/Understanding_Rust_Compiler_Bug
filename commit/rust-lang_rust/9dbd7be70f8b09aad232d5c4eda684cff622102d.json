{"sha": "9dbd7be70f8b09aad232d5c4eda684cff622102d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYmQ3YmU3MGY4YjA5YWFkMjMyZDVjNGVkYTY4NGNmZjYyMjEwMmQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-10-09T14:41:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-10-09T14:58:10Z"}, "message": "Cache the DepNodeIndex of upstream crates in order to avoid multiple locks and table lookups on each access of crate metadata.", "tree": {"sha": "f371b6fa1ae51e6b5c7b4bf2892be599ae54312d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f371b6fa1ae51e6b5c7b4bf2892be599ae54312d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dbd7be70f8b09aad232d5c4eda684cff622102d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbd7be70f8b09aad232d5c4eda684cff622102d", "html_url": "https://github.com/rust-lang/rust/commit/9dbd7be70f8b09aad232d5c4eda684cff622102d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dbd7be70f8b09aad232d5c4eda684cff622102d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "275cf4bcacad3fbe5539ecd5840462793ae46eec", "url": "https://api.github.com/repos/rust-lang/rust/commits/275cf4bcacad3fbe5539ecd5840462793ae46eec", "html_url": "https://github.com/rust-lang/rust/commit/275cf4bcacad3fbe5539ecd5840462793ae46eec"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "7e506f6e1b7f9f69b0a2b7ba3f36de6e4a6b580d", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=9dbd7be70f8b09aad232d5c4eda684cff622102d", "patch": "@@ -30,7 +30,7 @@ rustc_index::newtype_index! {\n }\n \n impl DepNodeIndex {\n-    const INVALID: DepNodeIndex = DepNodeIndex::MAX;\n+    pub const INVALID: DepNodeIndex = DepNodeIndex::MAX;\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "cae4858c844c59c54810cc532c404a6f0c5e3014", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9dbd7be70f8b09aad232d5c4eda684cff622102d", "patch": "@@ -3,10 +3,11 @@\n use crate::cstore::{self, CStore, CrateSource, MetadataBlob};\n use crate::locator::{self, CratePaths};\n use crate::schema::{CrateRoot, CrateDep};\n-use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n+use rustc_data_structures::sync::{Lrc, RwLock, Lock, AtomicCell};\n \n use rustc::hir::def_id::CrateNum;\n use rustc_data_structures::svh::Svh;\n+use rustc::dep_graph::DepNodeIndex;\n use rustc::middle::cstore::DepKind;\n use rustc::mir::interpret::AllocDecodingState;\n use rustc::session::{Session, CrateDisambiguator};\n@@ -271,7 +272,8 @@ impl<'a> CrateLoader<'a> {\n             },\n             private_dep,\n             span,\n-            raw_proc_macros\n+            raw_proc_macros,\n+            dep_node_index: AtomicCell::new(DepNodeIndex::INVALID),\n         };\n \n         let cmeta = Lrc::new(cmeta);"}, {"sha": "98a08e501f14c2706bc97138eb571af2032e731f", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=9dbd7be70f8b09aad232d5c4eda684cff622102d", "patch": "@@ -2,14 +2,15 @@\n // crates and libraries\n \n use crate::schema;\n+use rustc::dep_graph::DepNodeIndex;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n use rustc::mir::interpret::AllocDecodingState;\n use rustc_index::vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, NodeMap};\n \n-use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n+use rustc_data_structures::sync::{Lrc, RwLock, Lock, AtomicCell};\n use syntax::ast;\n use syntax::ext::base::SyntaxExtension;\n use syntax_pos;\n@@ -83,6 +84,13 @@ pub struct CrateMetadata {\n     pub span: Span,\n \n     pub raw_proc_macros: Option<&'static [ProcMacro]>,\n+\n+    /// The `DepNodeIndex` of the `DepNode` representing this upstream crate.\n+    /// It is initialized on the first access in `get_crate_dep_node_index()`.\n+    /// Do not access the value directly, as it might not have been initialized\n+    /// yet.\n+    /// The field must always be initialized to `DepNodeIndex::INVALID`.\n+    pub(super) dep_node_index: AtomicCell<DepNodeIndex>,\n }\n \n pub struct CStore {"}, {"sha": "b9f1d5a0a920dbab2dd86ce9d8b707d7faedb659", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9dbd7be70f8b09aad232d5c4eda684cff622102d", "patch": "@@ -51,19 +51,15 @@ macro_rules! provide {\n                 let ($def_id, $other) = def_id_arg.into_args();\n                 assert!(!$def_id.is_local());\n \n-                let def_path_hash = $tcx.def_path_hash(DefId {\n-                    krate: $def_id.krate,\n-                    index: CRATE_DEF_INDEX\n-                });\n-                let dep_node = def_path_hash\n-                    .to_dep_node(rustc::dep_graph::DepKind::CrateMetadata);\n-                // The DepNodeIndex of the DepNode::CrateMetadata should be\n-                // cached somewhere, so that we can use read_index().\n-                $tcx.dep_graph.read(dep_node);\n-\n                 let $cdata = $tcx.crate_data_as_rc_any($def_id.krate);\n                 let $cdata = $cdata.downcast_ref::<cstore::CrateMetadata>()\n                     .expect(\"CrateStore created data is not a CrateMetadata\");\n+\n+                if $tcx.dep_graph.is_fully_enabled() {\n+                    let crate_dep_node_index = $cdata.get_crate_dep_node_index($tcx);\n+                    $tcx.dep_graph.read_index(crate_dep_node_index);\n+                }\n+\n                 $compute\n             })*\n "}, {"sha": "ce66534e5659f0c6e76f6dac8213e370df4dfa32", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbd7be70f8b09aad232d5c4eda684cff622102d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=9dbd7be70f8b09aad232d5c4eda684cff622102d", "patch": "@@ -13,6 +13,7 @@ use rustc::hir::def::{self, Res, DefKind, CtorOf, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc::dep_graph::{DepNodeIndex, DepKind};\n use rustc::middle::lang_items;\n use rustc::mir::{self, interpret};\n use rustc::mir::interpret::AllocDecodingSession;\n@@ -1365,6 +1366,30 @@ impl<'a, 'tcx> CrateMetadata {\n         // This shouldn't borrow twice, but there is no way to downgrade RefMut to Ref.\n         self.source_map_import_info.borrow()\n     }\n+\n+    /// Get the `DepNodeIndex` corresponding this crate. The result of this\n+    /// method is cached in the `dep_node_index` field.\n+    pub(super) fn get_crate_dep_node_index(&self, tcx: TyCtxt<'tcx>) -> DepNodeIndex {\n+        let mut dep_node_index = self.dep_node_index.load();\n+\n+        if dep_node_index == DepNodeIndex::INVALID {\n+            // We have not cached the DepNodeIndex for this upstream crate yet,\n+            // so use the dep-graph to find it out and cache it.\n+            // Note that multiple threads can enter this block concurrently.\n+            // That is fine because the DepNodeIndex remains constant\n+            // throughout the whole compilation session, and multiple stores\n+            // would always write the same value.\n+\n+            let def_path_hash = self.def_path_hash(CRATE_DEF_INDEX);\n+            let dep_node = def_path_hash.to_dep_node(DepKind::CrateMetadata);\n+\n+            dep_node_index = tcx.dep_graph.dep_node_index_of(&dep_node);\n+            assert!(dep_node_index != DepNodeIndex::INVALID);\n+            self.dep_node_index.store(dep_node_index);\n+        }\n+\n+        dep_node_index\n+    }\n }\n \n // Cannot be implemented on 'ProcMacro', as libproc_macro"}]}