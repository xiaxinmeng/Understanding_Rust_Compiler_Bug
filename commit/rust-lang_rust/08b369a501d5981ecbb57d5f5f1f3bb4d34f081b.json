{"sha": "08b369a501d5981ecbb57d5f5f1f3bb4d34f081b", "node_id": "C_kwDOAAsO6NoAKDA4YjM2OWE1MDFkNTk4MWVjYmI1N2Q1ZjVmMWYzYmI0ZDM0ZjA4MWI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-20T17:13:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-20T17:13:00Z"}, "message": "Rollup merge of #102013 - spastorino:rpitit-lower-fn-decl, r=compiler-errors\n\nSimplify rpitit handling on lower_fn_decl\n\nr? `````@compiler-errors`````", "tree": {"sha": "73ba50a91b0298229bd0ca9fccec5b55202f1fab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ba50a91b0298229bd0ca9fccec5b55202f1fab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08b369a501d5981ecbb57d5f5f1f3bb4d34f081b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjKfScCRBK7hj4Ov3rIwAAPr0IACMXxx/shyhwwZEW7qmust51\nju2T+eV4cSVudHVwUimcSFafjnJlGp5R+WVUkUnHYH3c5DBPmekeO4fA2FjuevuV\nxma34MYcsFXC5L9MGFGxmvz6hjvz+ND2AQ5+bnHyG19OHQ0z7+IncmRULf6IHuSf\nOxHf6ZtW+gFTeb9zJicCjUHVZQqKCjjFfRarVvYzv7Kfh903qG4977JF3ckjjy7g\nz6k0uInleTcCkWFC+2VL1TjzaogAd8D+dWj0xuyOqkcO490lvspi7GrjNUmJ46ky\n6Fz97cDJmEapTN850qlPxX2oE+Nlc/Xpa1iaBfbHcC6zQTj/yJ8gFH54t8Juwfw=\n=wZ8R\n-----END PGP SIGNATURE-----\n", "payload": "tree 73ba50a91b0298229bd0ca9fccec5b55202f1fab\nparent 09221722afe9ca37c1919255717f20ea2eaad388\nparent 550bd0945fd6b5228206aaf5e8fbf613a77ab16d\nauthor Michael Howell <michael@notriddle.com> 1663693980 -0700\ncommitter GitHub <noreply@github.com> 1663693980 -0700\n\nRollup merge of #102013 - spastorino:rpitit-lower-fn-decl, r=compiler-errors\n\nSimplify rpitit handling on lower_fn_decl\n\nr? `````@compiler-errors`````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08b369a501d5981ecbb57d5f5f1f3bb4d34f081b", "html_url": "https://github.com/rust-lang/rust/commit/08b369a501d5981ecbb57d5f5f1f3bb4d34f081b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08b369a501d5981ecbb57d5f5f1f3bb4d34f081b/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09221722afe9ca37c1919255717f20ea2eaad388", "url": "https://api.github.com/repos/rust-lang/rust/commits/09221722afe9ca37c1919255717f20ea2eaad388", "html_url": "https://github.com/rust-lang/rust/commit/09221722afe9ca37c1919255717f20ea2eaad388"}, {"sha": "550bd0945fd6b5228206aaf5e8fbf613a77ab16d", "url": "https://api.github.com/repos/rust-lang/rust/commits/550bd0945fd6b5228206aaf5e8fbf613a77ab16d", "html_url": "https://github.com/rust-lang/rust/commit/550bd0945fd6b5228206aaf5e8fbf613a77ab16d"}], "stats": {"total": 60, "additions": 15, "deletions": 45}, "files": [{"sha": "e9c05eb5f455fa79f0a454078e63a19e71235d25", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 45, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/08b369a501d5981ecbb57d5f5f1f3bb4d34f081b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08b369a501d5981ecbb57d5f5f1f3bb4d34f081b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=08b369a501d5981ecbb57d5f5f1f3bb4d34f081b", "patch": "@@ -324,16 +324,10 @@ enum FnDeclKind {\n }\n \n impl FnDeclKind {\n-    fn impl_trait_return_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n+    fn impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n         match self {\n             FnDeclKind::Fn | FnDeclKind::Inherent => true,\n             FnDeclKind::Impl if tcx.features().return_position_impl_trait_in_trait => true,\n-            _ => false,\n-        }\n-    }\n-\n-    fn impl_trait_in_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n-        match self {\n             FnDeclKind::Trait if tcx.features().return_position_impl_trait_in_trait => true,\n             _ => false,\n         }\n@@ -1698,9 +1692,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }));\n \n         let output = if let Some((ret_id, span)) = make_ret_async {\n-            match kind {\n-                FnDeclKind::Trait => {\n-                    if !kind.impl_trait_in_trait_allowed(self.tcx) {\n+            if !kind.impl_trait_allowed(self.tcx) {\n+                match kind {\n+                    FnDeclKind::Trait | FnDeclKind::Impl => {\n                         self.tcx\n                             .sess\n                             .create_feature_err(\n@@ -1709,51 +1703,27 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             )\n                             .emit();\n                     }\n-                    self.lower_async_fn_ret_ty(\n-                        &decl.output,\n-                        fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n-                        ret_id,\n-                        true,\n-                    )\n-                }\n-                _ => {\n-                    if !kind.impl_trait_return_allowed(self.tcx) {\n-                        if kind == FnDeclKind::Impl {\n-                            self.tcx\n-                                .sess\n-                                .create_feature_err(\n-                                    TraitFnAsync { fn_span, span },\n-                                    sym::return_position_impl_trait_in_trait,\n-                                )\n-                                .emit();\n-                        } else {\n-                            self.tcx.sess.emit_err(TraitFnAsync { fn_span, span });\n-                        }\n+                    _ => {\n+                        self.tcx.sess.emit_err(TraitFnAsync { fn_span, span });\n                     }\n-                    self.lower_async_fn_ret_ty(\n-                        &decl.output,\n-                        fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n-                        ret_id,\n-                        false,\n-                    )\n                 }\n             }\n+\n+            self.lower_async_fn_ret_ty(\n+                &decl.output,\n+                fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n+                ret_id,\n+                matches!(kind, FnDeclKind::Trait),\n+            )\n         } else {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n                     let mut context = match fn_node_id {\n-                        Some(fn_node_id) if kind.impl_trait_return_allowed(self.tcx) => {\n-                            let fn_def_id = self.local_def_id(fn_node_id);\n-                            ImplTraitContext::ReturnPositionOpaqueTy {\n-                                origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                                in_trait: false,\n-                            }\n-                        }\n-                        Some(fn_node_id) if kind.impl_trait_in_trait_allowed(self.tcx) => {\n+                        Some(fn_node_id) if kind.impl_trait_allowed(self.tcx) => {\n                             let fn_def_id = self.local_def_id(fn_node_id);\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n                                 origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                                in_trait: true,\n+                                in_trait: matches!(kind, FnDeclKind::Trait),\n                             }\n                         }\n                         _ => ImplTraitContext::Disallowed(match kind {"}]}