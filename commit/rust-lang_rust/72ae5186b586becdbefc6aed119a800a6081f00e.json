{"sha": "72ae5186b586becdbefc6aed119a800a6081f00e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYWU1MTg2YjU4NmJlY2RiZWZjNmFlZDExOWE4MDBhNjA4MWYwMGU=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-20T17:24:06Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-21T08:05:57Z"}, "message": "Remove compare_to_old().", "tree": {"sha": "a1b0096d4021064b1fcc91aaef4cc891e6f915e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1b0096d4021064b1fcc91aaef4cc891e6f915e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ae5186b586becdbefc6aed119a800a6081f00e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ae5186b586becdbefc6aed119a800a6081f00e", "html_url": "https://github.com/rust-lang/rust/commit/72ae5186b586becdbefc6aed119a800a6081f00e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ae5186b586becdbefc6aed119a800a6081f00e/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e093f504f6cba8976e84c272826545489532ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e093f504f6cba8976e84c272826545489532ae", "html_url": "https://github.com/rust-lang/rust/commit/f5e093f504f6cba8976e84c272826545489532ae"}], "stats": {"total": 67, "additions": 4, "deletions": 63}, "files": [{"sha": "24fbbd4d24c5c48be1626a44e0e8ce59c97d5293", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 4, "deletions": 63, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/72ae5186b586becdbefc6aed119a800a6081f00e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae5186b586becdbefc6aed119a800a6081f00e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=72ae5186b586becdbefc6aed119a800a6081f00e", "patch": "@@ -1145,51 +1145,6 @@ impl MetricMap {\n         write!(&mut file, \"{}\", json::as_json(map))\n     }\n \n-    /// Compare against another MetricMap. Optionally compare all\n-    /// measurements in the maps using the provided `noise_pct` as a\n-    /// percentage of each value to consider noise. If `None`, each\n-    /// measurement's noise threshold is independently chosen as the\n-    /// maximum of that measurement's recorded noise quantity in either\n-    /// map.\n-    pub fn compare_to_old(&self, old: &MetricMap,\n-                          noise_pct: Option<f64>) -> MetricDiff {\n-        let mut diff : MetricDiff = BTreeMap::new();\n-        let MetricMap(ref selfmap) = *self;\n-        let MetricMap(ref old) = *old;\n-        for (k, vold) in old.iter() {\n-            match selfmap.get(k) {\n-                None => (),\n-                Some(v) => {\n-                    let delta = v.value - vold.value;\n-                    let noise = match noise_pct {\n-                        None => vold.noise.abs().max(v.noise.abs()),\n-                        Some(pct) => vold.value * pct / 100.0\n-                    };\n-                    if delta.abs() <= noise {\n-                    } else {\n-                        if vold.noise < 0.0 {\n-                            // When 'noise' is negative, it means we want\n-                            // to see deltas that go up over time, and can\n-                            // only tolerate slight negative movement.\n-                            if delta < 0.0 {\n-                            } else {\n-                            }\n-                        } else {\n-                            // When 'noise' is positive, it means we want\n-                            // to see deltas that go down over time, and\n-                            // can only tolerate slight positive movements.\n-                            if delta < 0.0 {\n-                            } else {\n-                            }\n-                        }\n-                    }\n-                }\n-            };\n-            diff.insert((*k).clone(), MetricChange);\n-        }\n-        diff\n-    }\n-\n     /// Insert a named `value` (+/- `noise`) metric into the map. The value\n     /// must be non-negative. The `noise` indicates the uncertainty of the\n     /// metric, which doubles as the \"noise range\" of acceptable\n@@ -1218,14 +1173,8 @@ impl MetricMap {\n     /// file to contain the metrics in `self` if none of the\n     /// `MetricChange`s are `Regression`. Returns the diff as well\n     /// as a boolean indicating whether the ratchet succeeded.\n-    pub fn ratchet(&self, p: &Path, pct: Option<f64>) -> (MetricDiff, bool) {\n-        let old = if p.exists() {\n-            MetricMap::load(p)\n-        } else {\n-            MetricMap::new()\n-        };\n-\n-        let diff : MetricDiff = self.compare_to_old(&old, pct);\n+    pub fn ratchet(&self, p: &Path) -> (MetricDiff, bool) {\n+        let diff : MetricDiff = BTreeMap::new();\n         let ok = diff.iter().all(|(_, v)| {\n             match *v {\n                 _ => true\n@@ -1644,14 +1593,6 @@ mod tests {\n \n         m1.insert_metric(\"in-both-want-upwards-and-improved\", 1000.0, -10.0);\n         m2.insert_metric(\"in-both-want-upwards-and-improved\", 2000.0, -10.0);\n-\n-        let diff1 = m2.compare_to_old(&m1, None);\n-\n-        assert_eq!(diff1.len(), 7);\n-\n-        let diff2 = m2.compare_to_old(&m1, Some(200.0));\n-\n-        assert_eq!(diff2.len(), 7);\n     }\n \n     #[test]\n@@ -1671,7 +1612,7 @@ mod tests {\n         m1.save(&pth).unwrap();\n \n         // Ask for a ratchet that should fail to advance.\n-        let (diff1, ok1) = m2.ratchet(&pth, None);\n+        let (diff1, ok1) = m2.ratchet(&pth);\n         assert_eq!(ok1, false);\n         assert_eq!(diff1.len(), 2);\n \n@@ -1684,7 +1625,7 @@ mod tests {\n \n         // Ask for a ratchet with an explicit noise-percentage override,\n         // that should advance.\n-        let (diff2, ok2) = m2.ratchet(&pth, Some(10.0));\n+        let (diff2, ok2) = m2.ratchet(&pth);\n         assert_eq!(ok2, true);\n         assert_eq!(diff2.len(), 2);\n "}]}