{"sha": "f10af2e5fa505a217f7b22591b29953e9c75d835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMGFmMmU1ZmE1MDVhMjE3ZjdiMjI1OTFiMjk5NTNlOWM3NWQ4MzU=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2016-01-15T16:34:38Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2016-01-15T17:29:29Z"}, "message": "Translate zero-sized return types as void\n\nThe only way to get a value for a zero-sized type is `undef`, so\nthere's really no point in actually having a return type other than\nvoid for such types. Also, while the comment in return_type_is_void\nmentioned something about aiding C ABI support, @eddyb correctly\npointed out on IRC that there is no such thing as a zero-sized type in\nC. And even with clang, which allows empty structs, those get\ntranslated as void return types as well.\n\nFixes #28766", "tree": {"sha": "116fe8906c676f8fdf0d5edb6618d91df27d1ed2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/116fe8906c676f8fdf0d5edb6618d91df27d1ed2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f10af2e5fa505a217f7b22591b29953e9c75d835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f10af2e5fa505a217f7b22591b29953e9c75d835", "html_url": "https://github.com/rust-lang/rust/commit/f10af2e5fa505a217f7b22591b29953e9c75d835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f10af2e5fa505a217f7b22591b29953e9c75d835/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a70a60a02bca4c1fb75a0eb0ecf80acb73972f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70a60a02bca4c1fb75a0eb0ecf80acb73972f66", "html_url": "https://github.com/rust-lang/rust/commit/a70a60a02bca4c1fb75a0eb0ecf80acb73972f66"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "2154e33f1a67ae93b337230bafcb405b913f2e8e", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f10af2e5fa505a217f7b22591b29953e9c75d835/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10af2e5fa505a217f7b22591b29953e9c75d835/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=f10af2e5fa505a217f7b22591b29953e9c75d835", "patch": "@@ -119,11 +119,9 @@ pub fn type_is_zero_size<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -\n }\n \n /// Identifies types which we declare to be equivalent to `void` in C for the purpose of function\n-/// return types. These are `()`, bot, and uninhabited enums. Note that all such types are also\n-/// zero-size, but not all zero-size types use a `void` return type (in order to aid with C ABI\n-/// compatibility).\n-pub fn return_type_is_void(ccx: &CrateContext, ty: Ty) -> bool {\n-    ty.is_nil() || ty.is_empty(ccx.tcx())\n+/// return types. These are `()`, bot, uninhabited enums and all other zero-sized types.\n+pub fn return_type_is_void<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.is_nil() || ty.is_empty(ccx.tcx()) || type_is_zero_size(ccx, ty)\n }\n \n /// Generates a unique symbol based off the name given. This is used to create"}, {"sha": "1f47ef15b278caa7f53da8608699f9af2c2553db", "filename": "src/test/run-make/issue-28766/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f10af2e5fa505a217f7b22591b29953e9c75d835/src%2Ftest%2Frun-make%2Fissue-28766%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f10af2e5fa505a217f7b22591b29953e9c75d835/src%2Ftest%2Frun-make%2Fissue-28766%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-28766%2FMakefile?ref=f10af2e5fa505a217f7b22591b29953e9c75d835", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -O foo.rs\n+\t$(RUSTC) -O -L $(TMPDIR) main.rs"}, {"sha": "3ed0a6bfc7472c6ec77ff3fbb2dc0698d2311e63", "filename": "src/test/run-make/issue-28766/foo.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f10af2e5fa505a217f7b22591b29953e9c75d835/src%2Ftest%2Frun-make%2Fissue-28766%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10af2e5fa505a217f7b22591b29953e9c75d835/src%2Ftest%2Frun-make%2Fissue-28766%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-28766%2Ffoo.rs?ref=f10af2e5fa505a217f7b22591b29953e9c75d835", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+pub struct Foo(());\n+\n+impl Foo {\n+  pub fn new() -> Foo {\n+    Foo(())\n+  }\n+}"}, {"sha": "d1dadbdc7ad3ef25d3c4a92fdd410d43caa84872", "filename": "src/test/run-make/issue-28766/main.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f10af2e5fa505a217f7b22591b29953e9c75d835/src%2Ftest%2Frun-make%2Fissue-28766%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10af2e5fa505a217f7b22591b29953e9c75d835/src%2Ftest%2Frun-make%2Fissue-28766%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-28766%2Fmain.rs?ref=f10af2e5fa505a217f7b22591b29953e9c75d835", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+extern crate foo;\n+use foo::Foo;\n+\n+pub fn crash() -> Box<Foo> {\n+  Box::new(Foo::new())\n+}"}]}