{"sha": "b4dde363446e29005331b9ac295d07d12c89d458", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZGRlMzYzNDQ2ZTI5MDA1MzMxYjlhYzI5NWQwN2QxMmM4OWQ0NTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-04T11:28:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-04T11:28:13Z"}, "message": "let caller of check_ptr_access_align control the error message", "tree": {"sha": "f11b59c5ec59d8bf519c86999698367d30bfefd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11b59c5ec59d8bf519c86999698367d30bfefd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4dde363446e29005331b9ac295d07d12c89d458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4dde363446e29005331b9ac295d07d12c89d458", "html_url": "https://github.com/rust-lang/rust/commit/b4dde363446e29005331b9ac295d07d12c89d458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4dde363446e29005331b9ac295d07d12c89d458/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49f38871389041671cc710a044e8360091840a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49f38871389041671cc710a044e8360091840a3", "html_url": "https://github.com/rust-lang/rust/commit/f49f38871389041671cc710a044e8360091840a3"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "47b918248330abfcda020050b2628c0bbf5126ea", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4dde363446e29005331b9ac295d07d12c89d458/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4dde363446e29005331b9ac295d07d12c89d458/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b4dde363446e29005331b9ac295d07d12c89d458", "patch": "@@ -314,16 +314,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         align: Align,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n         let align = if M::CHECK_ALIGN { Some(align) } else { None };\n-        self.check_ptr_access_align(sptr, size, align)\n+        self.check_ptr_access_align(sptr, size, align, CheckInAllocMsg::MemoryAccessTest)\n     }\n \n     /// Like `check_ptr_access`, but *definitely* checks alignment when `align`\n-    /// is `Some` (overriding `M::CHECK_ALIGN`).\n-    pub(super) fn check_ptr_access_align(\n+    /// is `Some` (overriding `M::CHECK_ALIGN`). Also lets the caller control\n+    /// the error message for the out-of-bounds case.\n+    pub fn check_ptr_access_align(\n         &self,\n         sptr: Scalar<M::PointerTag>,\n         size: Size,\n         align: Option<Align>,\n+        msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n         fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {\n             if offset % align.bytes() == 0 {\n@@ -368,7 +370,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // It is sufficient to check this for the end pointer. The addition\n                 // checks for overflow.\n                 let end_ptr = ptr.offset(size, self)?;\n-                end_ptr.check_inbounds_alloc(allocation_size, CheckInAllocMsg::MemoryAccessTest)?;\n+                end_ptr.check_inbounds_alloc(allocation_size, msg)?;\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {"}, {"sha": "82b8b28d72b7b5aff22c8e6614ba1c65e70f81ae", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4dde363446e29005331b9ac295d07d12c89d458/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4dde363446e29005331b9ac295d07d12c89d458/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b4dde363446e29005331b9ac295d07d12c89d458", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::fx::FxHashSet;\n use std::hash::Hash;\n \n use super::{\n-    GlobalAlloc, InterpResult,\n+    GlobalAlloc, InterpResult, CheckInAllocMsg,\n     Scalar, OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n };\n \n@@ -424,7 +424,12 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // alignment should take attributes into account).\n                     .unwrap_or_else(|| (layout.size, layout.align.abi));\n                 let ptr: Option<_> = match\n-                    self.ecx.memory.check_ptr_access_align(ptr, size, Some(align))\n+                    self.ecx.memory.check_ptr_access_align(\n+                        ptr,\n+                        size,\n+                        Some(align),\n+                        CheckInAllocMsg::InboundsTest,\n+                    )\n                 {\n                     Ok(ptr) => ptr,\n                     Err(err) => {"}]}