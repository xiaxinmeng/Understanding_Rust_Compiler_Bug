{"sha": "0e021ad76cfb2fb4507e3713522707e109ee6ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMDIxYWQ3NmNmYjJmYjQ1MDdlMzcxMzUyMjcwN2UxMDllZTZkZGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T21:30:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T21:30:20Z"}, "message": "switch extern_statics map to symbols", "tree": {"sha": "b273e69fe56d165f69a15b365b86bb99bc69973d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b273e69fe56d165f69a15b365b86bb99bc69973d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e021ad76cfb2fb4507e3713522707e109ee6ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e021ad76cfb2fb4507e3713522707e109ee6ddd", "html_url": "https://github.com/rust-lang/rust/commit/0e021ad76cfb2fb4507e3713522707e109ee6ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e021ad76cfb2fb4507e3713522707e109ee6ddd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cdcdecb01dde41f3e7dd3e350778ef66f533f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdcdecb01dde41f3e7dd3e350778ef66f533f7b", "html_url": "https://github.com/rust-lang/rust/commit/7cdcdecb01dde41f3e7dd3e350778ef66f533f7b"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c8705eb29e8cf984e251a16297b539265e07dd01", "filename": "src/machine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e021ad76cfb2fb4507e3713522707e109ee6ddd/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e021ad76cfb2fb4507e3713522707e109ee6ddd/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=0e021ad76cfb2fb4507e3713522707e109ee6ddd", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::{\n     Ty,\n };\n use rustc_ast::attr;\n-use rustc_span::{source_map::Span, symbol::sym};\n+use rustc_span::{source_map::Span, symbol::{sym, Symbol}};\n \n use crate::*;\n \n@@ -75,7 +75,7 @@ pub struct MemoryExtra {\n     pub intptrcast: intptrcast::MemoryExtra,\n \n     /// Mapping extern static names to their canonical allocation.\n-    pub(crate) extern_statics: HashMap<&'static str, AllocId>,\n+    pub(crate) extern_statics: HashMap<Symbol, AllocId>,\n \n     /// The random number generator used for resolving non-determinism.\n     /// Needs to be queried by ptr_to_int, hence needs interior mutability.\n@@ -111,7 +111,7 @@ impl MemoryExtra {\n                 this.memory\n                     .extra\n                     .extern_statics\n-                    .insert(\"__cxa_thread_atexit_impl\", place.ptr.assert_ptr().alloc_id)\n+                    .insert(Symbol::intern(\"__cxa_thread_atexit_impl\"), place.ptr.assert_ptr().alloc_id)\n                     .unwrap_none();\n             }\n             _ => {} // No \"extern statics\" supported on this platform\n@@ -310,11 +310,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         };\n         let attrs = tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n-            Some(name) => name.as_str(),\n-            None => tcx.item_name(def_id).as_str(),\n+            Some(name) => name,\n+            None => tcx.item_name(def_id),\n         };\n         // Check if we know this one.\n-        if let Some(canonical_id) = mem.extra.extern_statics.get(&*link_name) {\n+        if let Some(canonical_id) = mem.extra.extern_statics.get(&link_name) {\n             trace!(\"canonical_alloc_id: {:?} ({}) -> {:?}\", id, link_name, canonical_id);\n             *canonical_id\n         } else {"}]}