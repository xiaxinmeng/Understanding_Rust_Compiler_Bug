{"sha": "25ec810921afed11435a56f41179590789eb94e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZWM4MTA5MjFhZmVkMTE0MzVhNTZmNDExNzk1OTA3ODllYjk0ZTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T16:55:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-24T16:55:36Z"}, "message": "Rollup merge of #47987 - Zoxc:rm-recursion-checking, r=eddyb\n\nRemove \"static item recursion checking\" in favor of relying on cycle checks in the query engine\n\nTests are changed to use the cycle check error message instead. Some duplicate tests are removed.\n\nr? @eddyb", "tree": {"sha": "8a7d0c995eff230f0771947be896c2cabdc2f370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a7d0c995eff230f0771947be896c2cabdc2f370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25ec810921afed11435a56f41179590789eb94e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakZkICRBK7hj4Ov3rIwAAdHIIAGEBKhx19qDrHdWlFQccw8Ob\n6mkBYlXBLu2QUdqMf+qEj+M2cXN2WWgkMmBOzMrm2JfUTn6jZ/gJfO8C3XufX5jc\n1swa9wCHO/9goHqOL/BNuhCST81++DMTlYcrFFgDsq0WxZmg+RlsJskvohkkVC3T\nrt6a35Y6cCaQcSM1etUqUS5/dAE7bki4wZ5R5ao9rpX0sWofxX0VAf7lj/AZDrQt\nyrdWtO3jGIslfgTSF+PtVN23IVpu7t6pr1C9D9oJTG+XqOCGSuCefECwNbrjc/5Y\nDeKT3+MbIy4FazXksyh5RVJBloc32m1Z+A+Q9qzhXeXLdoHIZJuF+lNTMhu18YY=\n=jX/k\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a7d0c995eff230f0771947be896c2cabdc2f370\nparent 6070d3e47e5e9f15575a3bd33583358b52bc6eda\nparent 46a3f2fa188a8b8c68a2941afb43182691662493\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519491336 -0800\ncommitter GitHub <noreply@github.com> 1519491336 -0800\n\nRollup merge of #47987 - Zoxc:rm-recursion-checking, r=eddyb\n\nRemove \"static item recursion checking\" in favor of relying on cycle checks in the query engine\n\nTests are changed to use the cycle check error message instead. Some duplicate tests are removed.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25ec810921afed11435a56f41179590789eb94e1", "html_url": "https://github.com/rust-lang/rust/commit/25ec810921afed11435a56f41179590789eb94e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25ec810921afed11435a56f41179590789eb94e1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6070d3e47e5e9f15575a3bd33583358b52bc6eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/6070d3e47e5e9f15575a3bd33583358b52bc6eda", "html_url": "https://github.com/rust-lang/rust/commit/6070d3e47e5e9f15575a3bd33583358b52bc6eda"}, {"sha": "46a3f2fa188a8b8c68a2941afb43182691662493", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a3f2fa188a8b8c68a2941afb43182691662493", "html_url": "https://github.com/rust-lang/rust/commit/46a3f2fa188a8b8c68a2941afb43182691662493"}], "stats": {"total": 512, "additions": 111, "deletions": 401}, "files": [{"sha": "ffa1081469f86fa1f375eb11900428e666be9640", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             let span = self.sess.codemap().def_span(span);\n             let mut err =\n                 struct_span_err!(self.sess, span, E0391,\n-                                 \"unsupported cyclic reference between types/traits detected\");\n+                                 \"cyclic dependency detected\");\n             err.span_label(span, \"cyclic reference\");\n \n             err.span_note(self.sess.codemap().def_span(stack[0].0),"}, {"sha": "c918f7ac62e6272b397be6afaa24f1b62f27159d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -36,7 +36,7 @@ use rustc_typeck as typeck;\n use rustc_privacy;\n use rustc_plugin::registry::Registry;\n use rustc_plugin as plugin;\n-use rustc_passes::{self, ast_validation, loops, consts, static_recursion, hir_stats};\n+use rustc_passes::{self, ast_validation, loops, consts, hir_stats};\n use rustc_const_eval::{self, check_match};\n use super::Compilation;\n \n@@ -990,10 +990,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n          \"loop checking\",\n          || loops::check_crate(sess, &hir_map));\n \n-    time(time_passes,\n-              \"static item recursion checking\",\n-              || static_recursion::check_crate(sess, &hir_map))?;\n-\n     let mut local_providers = ty::maps::Providers::default();\n     default_provide(&mut local_providers);\n     trans.provide(&mut local_providers);"}, {"sha": "8a19615c1adcb55a2510c4f07330b75abe0fe445", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -128,22 +128,6 @@ impl !Enterprise for Foo { }\n Please note that negative impls are only allowed for auto traits.\n \"##,\n \n-E0265: r##\"\n-This error indicates that a static or constant references itself.\n-All statics and constants need to resolve to a value in an acyclic manner.\n-\n-For example, neither of the following can be sensibly compiled:\n-\n-```compile_fail,E0265\n-const X: u32 = X;\n-```\n-\n-```compile_fail,E0265\n-const X: u32 = Y;\n-const Y: u32 = X;\n-```\n-\"##,\n-\n E0267: r##\"\n This error indicates the use of a loop keyword (`break` or `continue`) inside a\n closure but outside of any loop. Erroneous code example:"}, {"sha": "6b9f407cbdb4da742317383d34db0adff6c30d57", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -42,7 +42,6 @@ pub mod consts;\n pub mod hir_stats;\n pub mod loops;\n mod mir_stats;\n-pub mod static_recursion;\n \n __build_diagnostic_array! { librustc_passes, DIAGNOSTICS }\n "}, {"sha": "987243b523473054a966f0efca0d3724389e56c5", "filename": "src/librustc_passes/static_recursion.rs", "status": "removed", "additions": 0, "deletions": 280, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/6070d3e47e5e9f15575a3bd33583358b52bc6eda/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6070d3e47e5e9f15575a3bd33583358b52bc6eda/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=6070d3e47e5e9f15575a3bd33583358b52bc6eda", "patch": "@@ -1,280 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This compiler pass detects constants that refer to themselves\n-// recursively.\n-\n-use rustc::hir::map as hir_map;\n-use rustc::session::Session;\n-use rustc::hir::def::{Def, CtorKind};\n-use rustc::util::common::ErrorReported;\n-use rustc::util::nodemap::{NodeMap, NodeSet};\n-\n-use syntax::ast;\n-use syntax_pos::Span;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use rustc::hir;\n-\n-struct CheckCrateVisitor<'a, 'hir: 'a> {\n-    sess: &'a Session,\n-    hir_map: &'a hir_map::Map<'hir>,\n-    // `discriminant_map` is a cache that associates the `NodeId`s of local\n-    // variant definitions with the discriminant expression that applies to\n-    // each one. If the variant uses the default values (starting from `0`),\n-    // then `None` is stored.\n-    discriminant_map: NodeMap<Option<hir::BodyId>>,\n-    detected_recursive_ids: NodeSet,\n-}\n-\n-impl<'a, 'hir: 'a> Visitor<'hir> for CheckCrateVisitor<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n-        NestedVisitorMap::None\n-    }\n-\n-    fn visit_item(&mut self, it: &'hir hir::Item) {\n-        match it.node {\n-            hir::ItemStatic(..) |\n-            hir::ItemConst(..) => {\n-                let mut recursion_visitor = CheckItemRecursionVisitor::new(self);\n-                recursion_visitor.visit_item(it);\n-            }\n-            hir::ItemEnum(ref enum_def, ref generics) => {\n-                // We could process the whole enum, but handling the variants\n-                // with discriminant expressions one by one gives more specific,\n-                // less redundant output.\n-                for variant in &enum_def.variants {\n-                    if let Some(_) = variant.node.disr_expr {\n-                        let mut recursion_visitor = CheckItemRecursionVisitor::new(self);\n-                        recursion_visitor.populate_enum_discriminants(enum_def);\n-                        recursion_visitor.visit_variant(variant, generics, it.id);\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-        intravisit::walk_item(self, it)\n-    }\n-\n-    fn visit_trait_item(&mut self, ti: &'hir hir::TraitItem) {\n-        match ti.node {\n-            hir::TraitItemKind::Const(_, ref default) => {\n-                if let Some(_) = *default {\n-                    let mut recursion_visitor = CheckItemRecursionVisitor::new(self);\n-                    recursion_visitor.visit_trait_item(ti);\n-                }\n-            }\n-            _ => {}\n-        }\n-        intravisit::walk_trait_item(self, ti)\n-    }\n-\n-    fn visit_impl_item(&mut self, ii: &'hir hir::ImplItem) {\n-        match ii.node {\n-            hir::ImplItemKind::Const(..) => {\n-                let mut recursion_visitor = CheckItemRecursionVisitor::new(self);\n-                recursion_visitor.visit_impl_item(ii);\n-            }\n-            _ => {}\n-        }\n-        intravisit::walk_impl_item(self, ii)\n-    }\n-}\n-\n-pub fn check_crate<'hir>(sess: &Session, hir_map: &hir_map::Map<'hir>)\n-                         -> Result<(), ErrorReported>\n-{\n-    let mut visitor = CheckCrateVisitor {\n-        sess,\n-        hir_map,\n-        discriminant_map: NodeMap(),\n-        detected_recursive_ids: NodeSet(),\n-    };\n-    sess.track_errors(|| {\n-        // FIXME(#37712) could use ItemLikeVisitor if trait items were item-like\n-        hir_map.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n-    })\n-}\n-\n-struct CheckItemRecursionVisitor<'a, 'b: 'a, 'hir: 'b> {\n-    sess: &'b Session,\n-    hir_map: &'b hir_map::Map<'hir>,\n-    discriminant_map: &'a mut NodeMap<Option<hir::BodyId>>,\n-    idstack: Vec<ast::NodeId>,\n-    detected_recursive_ids: &'a mut NodeSet,\n-}\n-\n-impl<'a, 'b: 'a, 'hir: 'b> CheckItemRecursionVisitor<'a, 'b, 'hir> {\n-    fn new(v: &'a mut CheckCrateVisitor<'b, 'hir>) -> Self {\n-        CheckItemRecursionVisitor {\n-            sess: v.sess,\n-            hir_map: v.hir_map,\n-            discriminant_map: &mut v.discriminant_map,\n-            idstack: Vec::new(),\n-            detected_recursive_ids: &mut v.detected_recursive_ids,\n-        }\n-    }\n-    fn with_item_id_pushed<F>(&mut self, id: ast::NodeId, f: F, span: Span)\n-        where F: Fn(&mut Self)\n-    {\n-        if self.idstack.iter().any(|&x| x == id) {\n-            if self.detected_recursive_ids.contains(&id) {\n-                return;\n-            }\n-            self.detected_recursive_ids.insert(id);\n-            let any_static = self.idstack.iter().any(|&x| {\n-                if let hir_map::NodeItem(item) = self.hir_map.get(x) {\n-                    if let hir::ItemStatic(..) = item.node {\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                } else {\n-                    false\n-                }\n-            });\n-            if !any_static {\n-                struct_span_err!(self.sess, span, E0265, \"recursive constant\")\n-                    .span_label(span, \"recursion not allowed in constant\")\n-                    .emit();\n-            }\n-            return;\n-        }\n-        self.idstack.push(id);\n-        f(self);\n-        self.idstack.pop();\n-    }\n-    // If a variant has an expression specifying its discriminant, then it needs\n-    // to be checked just like a static or constant. However, if there are more\n-    // variants with no explicitly specified discriminant, those variants will\n-    // increment the same expression to get their values.\n-    //\n-    // So for every variant, we need to track whether there is an expression\n-    // somewhere in the enum definition that controls its discriminant. We do\n-    // this by starting from the end and searching backward.\n-    fn populate_enum_discriminants(&mut self, enum_definition: &'hir hir::EnumDef) {\n-        // Get the map, and return if we already processed this enum or if it\n-        // has no variants.\n-        match enum_definition.variants.first() {\n-            None => {\n-                return;\n-            }\n-            Some(variant) if self.discriminant_map.contains_key(&variant.node.data.id()) => {\n-                return;\n-            }\n-            _ => {}\n-        }\n-\n-        // Go through all the variants.\n-        let mut variant_stack: Vec<ast::NodeId> = Vec::new();\n-        for variant in enum_definition.variants.iter().rev() {\n-            variant_stack.push(variant.node.data.id());\n-            // When we find an expression, every variant currently on the stack\n-            // is affected by that expression.\n-            if let Some(expr) = variant.node.disr_expr {\n-                for id in &variant_stack {\n-                    self.discriminant_map.insert(*id, Some(expr));\n-                }\n-                variant_stack.clear()\n-            }\n-        }\n-        // If we are at the top, that always starts at 0, so any variant on the\n-        // stack has a default value and does not need to be checked.\n-        for id in &variant_stack {\n-            self.discriminant_map.insert(*id, None);\n-        }\n-    }\n-}\n-\n-impl<'a, 'b: 'a, 'hir: 'b> Visitor<'hir> for CheckItemRecursionVisitor<'a, 'b, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n-        NestedVisitorMap::OnlyBodies(&self.hir_map)\n-    }\n-    fn visit_item(&mut self, it: &'hir hir::Item) {\n-        self.with_item_id_pushed(it.id, |v| intravisit::walk_item(v, it), it.span);\n-    }\n-\n-    fn visit_enum_def(&mut self,\n-                      enum_definition: &'hir hir::EnumDef,\n-                      generics: &'hir hir::Generics,\n-                      item_id: ast::NodeId,\n-                      _: Span) {\n-        self.populate_enum_discriminants(enum_definition);\n-        intravisit::walk_enum_def(self, enum_definition, generics, item_id);\n-    }\n-\n-    fn visit_variant(&mut self,\n-                     variant: &'hir hir::Variant,\n-                     _: &'hir hir::Generics,\n-                     _: ast::NodeId) {\n-        let variant_id = variant.node.data.id();\n-        let maybe_expr = *self.discriminant_map.get(&variant_id).unwrap_or_else(|| {\n-            span_bug!(variant.span,\n-                      \"`check_static_recursion` attempted to visit \\\n-                      variant with unknown discriminant\")\n-        });\n-        // If `maybe_expr` is `None`, that's because no discriminant is\n-        // specified that affects this variant. Thus, no risk of recursion.\n-        if let Some(expr) = maybe_expr {\n-            let expr = &self.hir_map.body(expr).value;\n-            self.with_item_id_pushed(expr.id, |v| intravisit::walk_expr(v, expr), expr.span);\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, ti: &'hir hir::TraitItem) {\n-        self.with_item_id_pushed(ti.id, |v| intravisit::walk_trait_item(v, ti), ti.span);\n-    }\n-\n-    fn visit_impl_item(&mut self, ii: &'hir hir::ImplItem) {\n-        self.with_item_id_pushed(ii.id, |v| intravisit::walk_impl_item(v, ii), ii.span);\n-    }\n-\n-    fn visit_path(&mut self, path: &'hir hir::Path, _: ast::NodeId) {\n-        match path.def {\n-            Def::Static(def_id, _) |\n-            Def::AssociatedConst(def_id) |\n-            Def::Const(def_id) => {\n-                if let Some(node_id) = self.hir_map.as_local_node_id(def_id) {\n-                    match self.hir_map.get(node_id) {\n-                        hir_map::NodeItem(item) => self.visit_item(item),\n-                        hir_map::NodeTraitItem(item) => self.visit_trait_item(item),\n-                        hir_map::NodeImplItem(item) => self.visit_impl_item(item),\n-                        hir_map::NodeForeignItem(_) => {}\n-                        _ => {\n-                            span_bug!(path.span,\n-                                      \"expected item, found {}\",\n-                                      self.hir_map.node_to_string(node_id));\n-                        }\n-                    }\n-                }\n-            }\n-            // For variants, we only want to check expressions that\n-            // affect the specific variant used, but we need to check\n-            // the whole enum definition to see what expression that\n-            // might be (if any).\n-            Def::VariantCtor(variant_id, CtorKind::Const) => {\n-                if let Some(variant_id) = self.hir_map.as_local_node_id(variant_id) {\n-                    let variant = self.hir_map.expect_variant(variant_id);\n-                    let enum_id = self.hir_map.get_parent(variant_id);\n-                    let enum_item = self.hir_map.expect_item(enum_id);\n-                    if let hir::ItemEnum(ref enum_def, ref generics) = enum_item.node {\n-                        self.populate_enum_discriminants(enum_def);\n-                        self.visit_variant(variant, generics, enum_id);\n-                    } else {\n-                        span_bug!(path.span,\n-                                  \"`check_static_recursion` found \\\n-                                    non-enum in Def::VariantCtor\");\n-                    }\n-                }\n-            }\n-            _ => (),\n-        }\n-        intravisit::walk_path(self, path);\n-    }\n-}"}, {"sha": "2f4d82e2ef514a43868df734d9ebf23677f7d675", "filename": "src/test/compile-fail/coherence-inherited-assoc-ty-cycle-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fcoherence-inherited-assoc-ty-cycle-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-inherited-assoc-ty-cycle-err.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -17,7 +17,7 @@\n #![feature(specialization)]\n \n trait Trait<T> { type Assoc; }\n-//~^ unsupported cyclic reference between types/traits detected [E0391]\n+//~^ cyclic dependency detected [E0391]\n \n impl<T> Trait<T> for Vec<T> {\n     type Assoc = ();"}, {"sha": "6218dcbf5f2c54ec5f86e5cd27db7fd5c105a372", "filename": "src/test/compile-fail/const-size_of-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unsupported cyclic reference between types/traits detected\n+// error-pattern: cyclic dependency detected\n \n #![feature(const_fn)]\n "}, {"sha": "ee4722c010f1660fe8e01555649da6c38e99cfef", "filename": "src/test/compile-fail/cycle-projection-based-on-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fcycle-projection-based-on-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fcycle-projection-based-on-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcycle-projection-based-on-where-clause.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -25,7 +25,7 @@ trait Trait { type Item; }\n struct A<T>\n     where T : Trait,\n           T : Add<T::Item>\n-    //~^ ERROR unsupported cyclic reference between types/traits detected\n+    //~^ ERROR cyclic dependency detected\n     //~| ERROR associated type `Item` not found for `T`\n {\n     data: T"}, {"sha": "88672088bcb4c279eb412c6a77f9ed3c77ff7bb5", "filename": "src/test/compile-fail/cycle-trait-default-type-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fcycle-trait-default-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fcycle-trait-default-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcycle-trait-default-type-trait.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -12,7 +12,7 @@\n // again references the trait.\n \n trait Foo<X = Box<Foo>> {\n-    //~^ ERROR unsupported cyclic reference\n+    //~^ ERROR cyclic dependency detected\n }\n \n fn main() { }"}, {"sha": "626567ccc0ead54616644092ad8e295411cd9153", "filename": "src/test/compile-fail/cycle-trait-supertrait-direct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fcycle-trait-supertrait-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fcycle-trait-supertrait-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcycle-trait-supertrait-direct.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -11,7 +11,7 @@\n // Test a supertrait cycle where a trait extends itself.\n \n trait Chromosome: Chromosome {\n-    //~^ ERROR unsupported cyclic reference\n+    //~^ ERROR cyclic dependency detected\n }\n \n fn main() { }"}, {"sha": "25d0590db1b75dbd296bf1e91bf61692346a6639", "filename": "src/test/compile-fail/infinite-vec-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n type x = Vec<x>;\n-//~^ ERROR unsupported cyclic reference\n+//~^ ERROR cyclic dependency detected\n \n fn main() { let b: x = Vec::new(); }"}, {"sha": "1c3e6890c8e2e17ea112daa8dff4ea0f0be348fc", "filename": "src/test/compile-fail/issue-17252.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17252.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const FOO: usize = FOO; //~ ERROR recursive constant\n+const FOO: usize = FOO; //~ ERROR E0391\n \n fn main() {\n     let _x: [u8; FOO]; // caused stack overflow prior to fix\n     let _y: usize = 1 + {\n-        const BAR: usize = BAR; //~ ERROR recursive constant\n+        const BAR: usize = BAR;\n         let _z: [u8; BAR]; // caused stack overflow prior to fix\n         1\n     };"}, {"sha": "88395e5f1eafa1240f99b1bf099a20829fa82538", "filename": "src/test/compile-fail/issue-20772.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-20772.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-20772.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20772.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait T : Iterator<Item=Self::Item>\n-//~^ ERROR unsupported cyclic reference between types/traits detected\n+//~^ ERROR cyclic dependency detected\n //~| ERROR associated type `Item` not found for `Self`\n {}\n "}, {"sha": "aeb798b382875a5a740297723b9160282a405498", "filename": "src/test/compile-fail/issue-20825.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-20825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-20825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20825.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -13,7 +13,7 @@ pub trait Subscriber {\n }\n \n pub trait Processor: Subscriber<Input = Self::Input> {\n-    //~^ ERROR unsupported cyclic reference between types/traits detected [E0391]\n+    //~^ ERROR cyclic dependency detected [E0391]\n     type Input;\n }\n "}, {"sha": "40c95b98f1264d4f9311cf5364a414c8e8b72a89", "filename": "src/test/compile-fail/issue-21177.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-21177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-21177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21177.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -14,7 +14,7 @@ trait Trait {\n }\n \n fn foo<T: Trait<A = T::B>>() { }\n-//~^ ERROR unsupported cyclic reference between types/traits detected\n+//~^ ERROR cyclic dependency detected\n //~| ERROR associated type `B` not found for `T`\n \n fn main() { }"}, {"sha": "fde2d001542b84a1eda160b7fb62488440189fdb", "filename": "src/test/compile-fail/issue-22673.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-22673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-22673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22673.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n trait Expr : PartialEq<Self::Item> {\n-    //~^ ERROR: unsupported cyclic reference between types/traits detected\n+    //~^ ERROR: cyclic dependency detected\n     type Item;\n }\n "}, {"sha": "16a650cc6d88632ed57d1c809377e756036f8773", "filename": "src/test/compile-fail/issue-26548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26548.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: unsupported cyclic reference between types/traits detected\n+// error-pattern: cyclic dependency detected\n // note-pattern: the cycle begins when computing layout of\n // note-pattern: ...which then requires computing layout of\n // note-pattern: ...which then again requires computing layout of"}, {"sha": "b18e05af47c97266521065b5711c08e234b64aee", "filename": "src/test/compile-fail/issue-34373.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-34373.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-34373.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-34373.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -15,7 +15,7 @@ trait Trait<T> {\n }\n \n pub struct Foo<T = Box<Trait<DefaultFoo>>>;\n-type DefaultFoo = Foo; //~ ERROR unsupported cyclic reference\n+type DefaultFoo = Foo; //~ ERROR cyclic dependency detected\n \n fn main() {\n }"}, {"sha": "930a427e9a5e0ec7c58261bfb7516de5bb442b23", "filename": "src/test/compile-fail/issue-44415.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -15,7 +15,7 @@ use std::intrinsics;\n \n struct Foo {\n     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-    //~^ ERROR unsupported cyclic reference between types/traits detected\n+    //~^ ERROR cyclic dependency detected\n     x: usize,\n }\n "}, {"sha": "7210c857125d6d9e026acdc9273fed733dc26d95", "filename": "src/test/compile-fail/resolve-self-in-impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -21,10 +21,10 @@ impl Tr for S where Self: Copy {} // OK\n impl Tr for S where S<Self>: Copy {} // OK\n impl Tr for S where Self::A: Copy {} // OK\n \n-impl Tr for Self {} //~ ERROR unsupported cyclic reference between types/traits detected\n-impl Tr for S<Self> {} //~ ERROR unsupported cyclic reference between types/traits detected\n-impl Self {} //~ ERROR unsupported cyclic reference between types/traits detected\n-impl S<Self> {} //~ ERROR unsupported cyclic reference between types/traits detected\n-impl Tr<Self::A> for S {} //~ ERROR unsupported cyclic reference between types/traits detected\n+impl Tr for Self {} //~ ERROR cyclic dependency detected\n+impl Tr for S<Self> {} //~ ERROR cyclic dependency detected\n+impl Self {} //~ ERROR cyclic dependency detected\n+impl S<Self> {} //~ ERROR cyclic dependency detected\n+impl Tr<Self::A> for S {} //~ ERROR cyclic dependency detected\n \n fn main() {}"}, {"sha": "447505e886f81ef07a4684d351d78167fa6f9686", "filename": "src/test/ui/cycle-trait-supertrait-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -18,7 +18,7 @@ trait B: C {\n }\n \n trait C: B { }\n-    //~^ ERROR unsupported cyclic reference\n+    //~^ ERROR cyclic dependency detected\n     //~| cyclic reference\n \n fn main() { }"}, {"sha": "a01565546462d3463b106d8246ad4a97d3123fb3", "filename": "src/test/ui/cycle-trait-supertrait-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait-supertrait-indirect.stderr?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: unsupported cyclic reference between types/traits detected\n+error[E0391]: cyclic dependency detected\n   --> $DIR/cycle-trait-supertrait-indirect.rs:20:1\n    |\n 20 | trait C: B { }"}, {"sha": "5a6aac43ec770d26655b1c7e411f2ebf33cc433f", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -42,7 +42,7 @@ fn after() -> impl Fn(i32) {\n // independently resolved and only require the concrete\n // return type, which can't depend on the obligation.\n fn cycle1() -> impl Clone {\n-    //~^ ERROR unsupported cyclic reference between types/traits detected\n+    //~^ ERROR cyclic dependency detected\n     //~| cyclic reference\n     send(cycle2().clone());\n "}, {"sha": "d6e31ba1e1f9c67ee0a99b75625209250fda65bd", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -28,7 +28,7 @@ note: required by `send`\n 24 | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0391]: unsupported cyclic reference between types/traits detected\n+error[E0391]: cyclic dependency detected\n   --> $DIR/auto-trait-leak.rs:44:1\n    |\n 44 | fn cycle1() -> impl Clone {"}, {"sha": "e4d6076868717f0678b6b31924327cae4b2a0e50", "filename": "src/test/ui/issue-12511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-12511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-12511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12511.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -12,7 +12,7 @@ trait t1 : t2 {\n }\n \n trait t2 : t1 {\n-//~^ ERROR unsupported cyclic reference between types/traits detected\n+//~^ ERROR cyclic dependency detected\n //~| cyclic reference\n }\n "}, {"sha": "aec828a90d1a7c6958ef561656aaa24d7e225eb2", "filename": "src/test/ui/issue-12511.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-12511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-12511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-12511.stderr?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: unsupported cyclic reference between types/traits detected\n+error[E0391]: cyclic dependency detected\n   --> $DIR/issue-12511.rs:14:1\n    |\n 14 | trait t2 : t1 {"}, {"sha": "10a538301162c688ce60c4041838606db2848d69", "filename": "src/test/ui/issue-23302-1.rs", "status": "renamed", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-1.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -11,18 +11,7 @@\n // Check that an enum with recursion in the discriminant throws\n // the appropriate error (rather than, say, blowing the stack).\n enum X {\n-    A = X::A as isize, //~ ERROR E0265\n+    A = X::A as isize, //~ ERROR E0391\n }\n \n-// Since `Y::B` here defaults to `Y::A+1`, this is also a\n-// recursive definition.\n-enum Y {\n-    A = Y::B as isize, //~ ERROR E0265\n-    B,\n-}\n-\n-const A: i32 = B; //~ ERROR E0265\n-\n-const B: i32 = A; //~ ERROR E0265\n-\n fn main() { }", "previous_filename": "src/test/ui/issue-23302.rs"}, {"sha": "0658c07fb1dbe2e06947626d63a73ff4f8a49ed0", "filename": "src/test/ui/issue-23302-1.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-1.stderr?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -0,0 +1,15 @@\n+error[E0391]: cyclic dependency detected\n+  --> $DIR/issue-23302-1.rs:14:9\n+   |\n+14 |     A = X::A as isize, //~ ERROR E0391\n+   |         ^^^^^^^^^^^^^ cyclic reference\n+   |\n+note: the cycle begins when const-evaluating `X::A::{{initializer}}`...\n+  --> $DIR/issue-23302-1.rs:14:5\n+   |\n+14 |     A = X::A as isize, //~ ERROR E0391\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: ...which then again requires const-evaluating `X::A::{{initializer}}`, completing the cycle.\n+\n+error: aborting due to previous error\n+"}, {"sha": "d1af19eb579f524b6f42f2d98050ce5dcb718f47", "filename": "src/test/ui/issue-23302-2.rs", "status": "renamed", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-2.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const A: usize = B; //~ ERROR: recursive constant\n-const B: usize = A; //~ ERROR: recursive constant\n+// Since `Y::B` here defaults to `Y::A+1`, this is also a\n+// recursive definition.\n+enum Y {\n+    A = Y::B as isize, //~ ERROR E0391\n+    B,\n+}\n \n-fn main() {}\n+fn main() { }", "previous_filename": "src/test/compile-fail/issue-17718-recursive.rs"}, {"sha": "c4a1c4f80c82c4f52ec7d51a6e23556e1b56f5e4", "filename": "src/test/ui/issue-23302-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-2.stderr?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -0,0 +1,15 @@\n+error[E0391]: cyclic dependency detected\n+  --> $DIR/issue-23302-2.rs:14:9\n+   |\n+14 |     A = Y::B as isize, //~ ERROR E0391\n+   |         ^^^^^^^^^^^^^ cyclic reference\n+   |\n+note: the cycle begins when const-evaluating `Y::A::{{initializer}}`...\n+  --> $DIR/issue-23302-2.rs:14:5\n+   |\n+14 |     A = Y::B as isize, //~ ERROR E0391\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: ...which then again requires const-evaluating `Y::A::{{initializer}}`, completing the cycle.\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d750b09025b993b5d62bad43164b2129273ae4a", "filename": "src/test/ui/issue-23302-3.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-3.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const a: isize = b; //~ ERROR recursive constant\n-const b: isize = a; //~ ERROR recursive constant\n+const A: i32 = B; //~ ERROR E0391\n \n-fn main() {\n-}\n+const B: i32 = A;\n+\n+fn main() { }", "previous_filename": "src/test/compile-fail/const-recursive.rs"}, {"sha": "76f543cff791390c28365338f70c39c87520da86", "filename": "src/test/ui/issue-23302-3.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-3.stderr?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -0,0 +1,20 @@\n+error[E0391]: cyclic dependency detected\n+  --> $DIR/issue-23302-3.rs:11:16\n+   |\n+11 | const A: i32 = B; //~ ERROR E0391\n+   |                ^ cyclic reference\n+   |\n+note: the cycle begins when processing `B`...\n+  --> $DIR/issue-23302-3.rs:13:1\n+   |\n+13 | const B: i32 = A;\n+   | ^^^^^^^^^^^^^^^^^\n+note: ...which then requires processing `A`...\n+  --> $DIR/issue-23302-3.rs:13:16\n+   |\n+13 | const B: i32 = A;\n+   |                ^\n+   = note: ...which then again requires processing `B`, completing the cycle.\n+\n+error: aborting due to previous error\n+"}, {"sha": "4e93809fac3741cc925a8d46c914a0f095aaca65", "filename": "src/test/ui/issue-23302.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6070d3e47e5e9f15575a3bd33583358b52bc6eda/src%2Ftest%2Fui%2Fissue-23302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6070d3e47e5e9f15575a3bd33583358b52bc6eda/src%2Ftest%2Fui%2Fissue-23302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302.stderr?ref=6070d3e47e5e9f15575a3bd33583358b52bc6eda", "patch": "@@ -1,26 +0,0 @@\n-error[E0265]: recursive constant\n-  --> $DIR/issue-23302.rs:14:9\n-   |\n-14 |     A = X::A as isize, //~ ERROR E0265\n-   |         ^^^^^^^^^^^^^ recursion not allowed in constant\n-\n-error[E0265]: recursive constant\n-  --> $DIR/issue-23302.rs:20:9\n-   |\n-20 |     A = Y::B as isize, //~ ERROR E0265\n-   |         ^^^^^^^^^^^^^ recursion not allowed in constant\n-\n-error[E0265]: recursive constant\n-  --> $DIR/issue-23302.rs:24:1\n-   |\n-24 | const A: i32 = B; //~ ERROR E0265\n-   | ^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n-\n-error[E0265]: recursive constant\n-  --> $DIR/issue-23302.rs:26:1\n-   |\n-26 | const B: i32 = A; //~ ERROR E0265\n-   | ^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "4c74d9d9173d8c3e5906f7c4f2f082768928e052", "filename": "src/test/ui/issue-36163.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-36163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-36163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -8,16 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const A: i32 = Foo::B; //~ ERROR E0265\n+const A: isize = Foo::B as isize;\n \n enum Foo {\n-    B = A, //~ ERROR E0265\n+    B = A, //~ ERROR E0391\n }\n \n-enum Bar {\n-    C = Bar::C, //~ ERROR E0265\n-}\n-\n-const D: i32 = A;\n-\n fn main() {}"}, {"sha": "d0337fc32b03e1a2a64b41d9b8e690bd078fad50", "filename": "src/test/ui/issue-36163.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.stderr?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -1,20 +1,20 @@\n-error[E0265]: recursive constant\n-  --> $DIR/issue-36163.rs:11:1\n-   |\n-11 | const A: i32 = Foo::B; //~ ERROR E0265\n-   | ^^^^^^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n-\n-error[E0265]: recursive constant\n+error[E0391]: cyclic dependency detected\n   --> $DIR/issue-36163.rs:14:9\n    |\n-14 |     B = A, //~ ERROR E0265\n-   |         ^ recursion not allowed in constant\n-\n-error[E0265]: recursive constant\n-  --> $DIR/issue-36163.rs:18:9\n+14 |     B = A, //~ ERROR E0391\n+   |         ^ cyclic reference\n+   |\n+note: the cycle begins when const-evaluating `Foo::B::{{initializer}}`...\n+  --> $DIR/issue-36163.rs:14:5\n+   |\n+14 |     B = A, //~ ERROR E0391\n+   |     ^^^^^\n+note: ...which then requires const-evaluating `A`...\n+  --> $DIR/issue-36163.rs:14:9\n    |\n-18 |     C = Bar::C, //~ ERROR E0265\n-   |         ^^^^^^ recursion not allowed in constant\n+14 |     B = A, //~ ERROR E0391\n+   |         ^\n+   = note: ...which then again requires const-evaluating `Foo::B::{{initializer}}`, completing the cycle.\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n "}, {"sha": "34f8a0a48431c8f36d3205dcf617ad86e36d6973", "filename": "src/test/ui/resolve/issue-23305.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -13,6 +13,6 @@ pub trait ToNbt<T> {\n }\n \n impl ToNbt<Self> {}\n-//~^ ERROR unsupported cyclic reference\n+//~^ ERROR cyclic dependency detected\n \n fn main() {}"}, {"sha": "a0b4d424ec968b409d332c6273472d2248bf24ee", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25ec810921afed11435a56f41179590789eb94e1/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=25ec810921afed11435a56f41179590789eb94e1", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: unsupported cyclic reference between types/traits detected\n+error[E0391]: cyclic dependency detected\n   --> $DIR/issue-23305.rs:15:12\n    |\n 15 | impl ToNbt<Self> {}"}]}