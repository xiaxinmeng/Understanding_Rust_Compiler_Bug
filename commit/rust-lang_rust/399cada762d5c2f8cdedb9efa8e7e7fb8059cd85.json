{"sha": "399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OWNhZGE3NjJkNWMyZjhjZGVkYjllZmE4ZTdlN2ZiODA1OWNkODU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-24T11:40:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-24T11:43:20Z"}, "message": "Directly depend on cranelift_{codegen,frontend}\n\nFixes #838", "tree": {"sha": "95ec8732232eda9dd00bd90c8add250dd88a9bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ec8732232eda9dd00bd90c8add250dd88a9bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "html_url": "https://github.com/rust-lang/rust/commit/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "047eaf14ba7306511cf350d079c912ff840c566d", "url": "https://api.github.com/repos/rust-lang/rust/commits/047eaf14ba7306511cf350d079c912ff840c566d", "html_url": "https://github.com/rust-lang/rust/commit/047eaf14ba7306511cf350d079c912ff840c566d"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "a8432a186f38238d54750618a45cb811e19eb670", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -63,15 +63,6 @@ name = \"cfg-if\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"cranelift\"\n-version = \"0.52.0\"\n-source = \"git+https://github.com/bytecodealliance/cranelift/#722a345ff6ee00ade5de87eef0a605711a88e8ec\"\n-dependencies = [\n- \"cranelift-codegen 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n- \"cranelift-frontend 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n-]\n-\n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.52.0\"\n@@ -408,8 +399,9 @@ version = \"0.1.0\"\n dependencies = [\n  \"ar 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cranelift 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-codegen 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"cranelift-faerie 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n+ \"cranelift-frontend 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"cranelift-module 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"cranelift-object 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n  \"cranelift-simplejit 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\",\n@@ -568,7 +560,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \"checksum cc 1.0.48 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f52a465a666ca3d838ebbf08b241383421412fe7ebb463527bba275526d89f76\"\n \"checksum cfg-if 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n-\"checksum cranelift 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n \"checksum cranelift-bforest 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n \"checksum cranelift-codegen 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\"\n \"checksum cranelift-codegen-meta 0.52.0 (git+https://github.com/bytecodealliance/cranelift/)\" = \"<none>\""}, {"sha": "efe56bffdca7252232128a3ed5965a97875a5b47", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -13,7 +13,8 @@ backend_object = [\"object/write\", \"cranelift-object\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift = { git = \"https://github.com/bytecodealliance/cranelift/\", default-features = false, features = [\"std\"] }\n+cranelift-codegen = { git = \"https://github.com/bytecodealliance/cranelift/\", default-features = false, features = [\"std\"] }\n+cranelift-frontend = { git = \"https://github.com/bytecodealliance/cranelift/\", default-features = false, features = [\"std\"] }\n cranelift-module = { git = \"https://github.com/bytecodealliance/cranelift/\" }\n cranelift-faerie = { git = \"https://github.com/bytecodealliance/cranelift/\" }\n cranelift-object = { git = \"https://github.com/bytecodealliance/cranelift/\", optional = true }\n@@ -35,7 +36,8 @@ features = [\"compression\", \"read\", \"std\"] # We don't need WASM support\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/bytecodealliance/cranelift/\"]\n-#cranelift = { path = \"../cranelift/cranelift-umbrella\", default-features = false, features = [\"std\"] }\n+#cranelift-codegen = { path = \"../cranelift/cranelift-codegen\", default-features = false, features = [\"std\"] }\n+#cranelift-frontend = { path = \"../cranelift/cranelift-frontend\", default-features = false, features = [\"std\"] }\n #cranelift-module = { path = \"../cranelift/cranelift-module\" }\n #cranelift-simplejit = { path = \"../cranelift/cranelift-simplejit\" }\n #cranelift-faerie = { path = \"../cranelift/cranelift-faerie\" }"}, {"sha": "9911f20655cb4524541dfc52f6d25ced85b6998b", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -5,6 +5,8 @@ mod returning;\n \n use rustc_target::spec::abi::Abi;\n \n+use cranelift_codegen::ir::AbiParam;\n+\n use self::pass_mode::*;\n use crate::prelude::*;\n "}, {"sha": "8cb3c2d150e93ab757f6e648f8465b6477afd6b9", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -103,11 +103,11 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n fn verify_func(tcx: TyCtxt, writer: &crate::pretty_clif::CommentWriter, func: &Function) {\n     let flags = settings::Flags::new(settings::builder());\n-    match ::cranelift::codegen::verify_function(&func, &flags) {\n+    match ::cranelift_codegen::verify_function(&func, &flags) {\n         Ok(_) => {}\n         Err(err) => {\n             tcx.sess.err(&format!(\"{:?}\", err));\n-            let pretty_error = ::cranelift::codegen::print_errors::pretty_verifier_error(\n+            let pretty_error = ::cranelift_codegen::print_errors::pretty_verifier_error(\n                 &func,\n                 None,\n                 Some(Box::new(writer)),\n@@ -195,7 +195,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 targets,\n             } => {\n                 let discr = trans_operand(fx, discr).load_scalar(fx);\n-                let mut switch = ::cranelift::frontend::Switch::new();\n+                let mut switch = ::cranelift_frontend::Switch::new();\n                 for (i, value) in values.iter().enumerate() {\n                     let ebb = fx.get_ebb(targets[i]);\n                     switch.set_entry(*value as u64, ebb);"}, {"sha": "9506d4b5224d8aa925a7fd0f21f527c4dec44926", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::layout::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n \n-use cranelift::codegen::ir::{InstructionData, Opcode, ValueDef};\n+use cranelift_codegen::ir::{InstructionData, Opcode, ValueDef};\n \n use crate::prelude::*;\n "}, {"sha": "63acb3b4e8fceae4c7cf68c9ffd6612438f918cf", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -5,7 +5,7 @@ use crate::prelude::*;\n \n use syntax::source_map::FileName;\n \n-use cranelift::codegen::binemit::CodeOffset;\n+use cranelift_codegen::binemit::CodeOffset;\n \n use gimli::write::{\n     Address, AttributeValue, FileId, LineProgram, LineString, LineStringTable, UnitEntryId,\n@@ -104,7 +104,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     pub(crate) fn create_debug_lines(\n         &mut self,\n         context: &Context,\n-        isa: &dyn cranelift::codegen::isa::TargetIsa,\n+        isa: &dyn cranelift_codegen::isa::TargetIsa,\n         source_info_set: &indexmap::IndexSet<(Span, mir::SourceScope)>,\n     ) -> CodeOffset {\n         let tcx = self.debug_context.tcx;"}, {"sha": "3d4e200f00c9ed96f6441b8877b380abf214a5b8", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -3,9 +3,9 @@ mod line_info;\n \n use crate::prelude::*;\n \n-use cranelift::codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n-use cranelift::codegen::isa::RegUnit;\n-use cranelift::codegen::ValueLocRange;\n+use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n+use cranelift_codegen::isa::RegUnit;\n+use cranelift_codegen::ValueLocRange;\n \n use gimli::write::{\n     self, Address, AttributeValue, DwarfUnit, Expression, LineProgram, LineString, Location,\n@@ -253,7 +253,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     pub fn define(\n         &mut self,\n         context: &Context,\n-        isa: &dyn cranelift::codegen::isa::TargetIsa,\n+        isa: &dyn cranelift_codegen::isa::TargetIsa,\n         source_info_set: &indexmap::IndexSet<(Span, mir::SourceScope)>,\n         local_map: HashMap<mir::Local, CPlace<'tcx>>,\n     ) {\n@@ -312,7 +312,7 @@ fn place_location<'a, 'tcx>(\n \n     match cplace.inner() {\n         CPlaceInner::Var(local) => {\n-            let value_label = cranelift::codegen::ir::ValueLabel::from_u32(local.as_u32());\n+            let value_label = cranelift_codegen::ir::ValueLabel::from_u32(local.as_u32());\n             if let Some(value_loc_ranges) = value_labels_ranges.get(&value_label) {\n                 let loc_list = LocationList(\n                     value_loc_ranges"}, {"sha": "2e1584e3efa6ea134906f92ef4b15b5246ebf27f", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -633,7 +633,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                         }\n                         _ => panic!(\"clif_type returned {}\", clif_ty),\n                     };\n-                    fx.bcx.set_val_label(val, cranelift::codegen::ir::ValueLabel::from_u32(var.as_u32()));\n+                    fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n                     fx.bcx.def_var(mir_var(var), val);\n                 }\n                 _ => {\n@@ -670,7 +670,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                         }\n                         _ => panic!(\"clif_type returned {}\", clif_ty),\n                     };\n-                    fx.bcx.set_val_label(val, cranelift::codegen::ir::ValueLabel::from_u32(var.as_u32()));\n+                    fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n                     fx.bcx.def_var(mir_var(var), val);\n                 }\n                 CPlaceInner::Addr(_, _) => {"}, {"sha": "9337d07ffc798346a75be07e6c14e20e8f0628ec", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -25,7 +25,7 @@ use rustc::ty::query::Providers;\n use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n \n-use cranelift::codegen::settings;\n+use cranelift_codegen::settings;\n \n use crate::constant::ConstantCx;\n use crate::prelude::*;\n@@ -91,12 +91,15 @@ mod prelude {\n     pub use rustc_codegen_ssa::traits::*;\n     pub use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n \n-    pub use cranelift::codegen::ir::{\n-        condcodes::IntCC, function::Function, ExternalName, FuncRef, Inst, SourceLoc, StackSlot,\n-    };\n-    pub use cranelift::codegen::isa::CallConv;\n-    pub use cranelift::codegen::Context;\n-    pub use cranelift::prelude::*;\n+    pub use cranelift_codegen::Context;\n+    pub use cranelift_codegen::ir::{AbiParam, Ebb, ExternalName, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc, StackSlot, StackSlotData, StackSlotKind, TrapCode, Type, Value};\n+    pub use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n+    pub use cranelift_codegen::ir::function::Function;\n+    pub use cranelift_codegen::ir::immediates::{Ieee32, Ieee64};\n+    pub use cranelift_codegen::ir::types;\n+    pub use cranelift_codegen::isa::{self, CallConv};\n+    pub use cranelift_codegen::settings::{self, Configurable};\n+    pub use cranelift_frontend::{FunctionBuilder, FunctionBuilderContext, Variable};\n     pub use cranelift_module::{\n         self, Backend, DataContext, DataId, FuncId, FuncOrDataId, Linkage, Module,\n     };\n@@ -283,7 +286,7 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n \n     let target_triple = crate::target_triple(sess);\n     let flags = settings::Flags::new(flags_builder);\n-    cranelift::codegen::isa::lookup(target_triple)\n+    cranelift_codegen::isa::lookup(target_triple)\n         .unwrap()\n         .finish(flags)\n }"}, {"sha": "7483d4cc6a50ef5c38aab0e8c6a20aeebff60a2d", "filename": "src/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -1,6 +1,6 @@\n use crate::prelude::*;\n \n-use cranelift::codegen::ir::immediates::Offset32;\n+use cranelift_codegen::ir::immediates::Offset32;\n \n #[derive(Copy, Clone, Debug)]\n pub struct Pointer {"}, {"sha": "5f3ebfc4bef9edd9441d72e98334360c890f076a", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -2,7 +2,7 @@ use std::borrow::Cow;\n use std::collections::HashMap;\n use std::fmt;\n \n-use cranelift::codegen::{\n+use cranelift_codegen::{\n     entity::SecondaryMap,\n     ir::{self, entities::AnyEntity, function::DisplayFunctionAnnotations},\n     write::{FuncWriter, PlainWriter},\n@@ -221,7 +221,7 @@ pub fn write_clif_file<'tcx>(\n     );\n \n     let mut clif = String::new();\n-    cranelift::codegen::write::decorate_function(\n+    cranelift_codegen::write::decorate_function(\n         &mut clif_comments,\n         &mut clif,\n         &func,\n@@ -255,7 +255,7 @@ impl<'a, 'tcx, B: Backend + 'static> fmt::Debug for FunctionCx<'_, 'tcx, B> {\n         writeln!(f, \"{:?}\", self.local_map)?;\n \n         let mut clif = String::new();\n-        ::cranelift::codegen::write::decorate_function(\n+        ::cranelift_codegen::write::decorate_function(\n             &mut &self.clif_comments,\n             &mut clif,\n             &self.bcx.func,"}, {"sha": "df59fb8302c71f2b857b10ab93325b89a13447dd", "filename": "src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399cada762d5c2f8cdedb9efa8e7e7fb8059cd85/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=399cada762d5c2f8cdedb9efa8e7e7fb8059cd85", "patch": "@@ -1,6 +1,6 @@\n use crate::prelude::*;\n \n-use cranelift::codegen::ir::immediates::Offset32;\n+use cranelift_codegen::ir::immediates::Offset32;\n \n fn codegen_field<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n@@ -308,7 +308,7 @@ impl<'tcx> CPlace<'tcx> {\n         match self.inner {\n             CPlaceInner::Var(var) => {\n                 let val = fx.bcx.use_var(mir_var(var));\n-                fx.bcx.set_val_label(val, cranelift::codegen::ir::ValueLabel::from_u32(var.as_u32()));\n+                fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n                 CValue::by_val(val, layout)\n             }\n             CPlaceInner::Addr(ptr, extra) => {\n@@ -415,7 +415,7 @@ impl<'tcx> CPlace<'tcx> {\n         let to_ptr = match self.inner {\n             CPlaceInner::Var(var) => {\n                 let data = from.load_scalar(fx);\n-                fx.bcx.set_val_label(data, cranelift::codegen::ir::ValueLabel::from_u32(var.as_u32()));\n+                fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n                 fx.bcx.def_var(mir_var(var), data);\n                 return;\n             }"}]}