{"sha": "1b044da5bb87702a160537cf1137b8921b54ddd5", "node_id": "C_kwDOAAsO6NoAKDFiMDQ0ZGE1YmI4NzcwMmExNjA1MzdjZjExMzdiODkyMWI1NGRkZDU", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-08-25T12:49:09Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-08-25T12:49:09Z"}, "message": "Separate CountIsStar from CountIsParam in rustc_parse_format.", "tree": {"sha": "273e2bf000b57b7922f06b67dc9bfc39c1992e30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/273e2bf000b57b7922f06b67dc9bfc39c1992e30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b044da5bb87702a160537cf1137b8921b54ddd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b044da5bb87702a160537cf1137b8921b54ddd5", "html_url": "https://github.com/rust-lang/rust/commit/1b044da5bb87702a160537cf1137b8921b54ddd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b044da5bb87702a160537cf1137b8921b54ddd5/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d45b0745ab227feb9000bc15713ade4b99241ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d45b0745ab227feb9000bc15713ade4b99241ea", "html_url": "https://github.com/rust-lang/rust/commit/4d45b0745ab227feb9000bc15713ade4b99241ea"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "210048710751702a4c278b844536e16a85c97968", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b044da5bb87702a160537cf1137b8921b54ddd5/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b044da5bb87702a160537cf1137b8921b54ddd5/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=1b044da5bb87702a160537cf1137b8921b54ddd5", "patch": "@@ -541,7 +541,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     ) {\n         match c {\n             parse::CountImplied | parse::CountIs(..) => {}\n-            parse::CountIsParam(i) => {\n+            parse::CountIsParam(i) | parse::CountIsStar(i) => {\n                 self.unused_names_lint.maybe_add_positional_named_arg(\n                     self.args.get(i),\n                     named_arg_type,\n@@ -589,7 +589,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             + self\n                 .arg_with_formatting\n                 .iter()\n-                .filter(|fmt| matches!(fmt.precision, parse::CountIsParam(_)))\n+                .filter(|fmt| matches!(fmt.precision, parse::CountIsStar(_)))\n                 .count();\n         if self.names.is_empty() && !numbered_position_args && count != self.num_args() {\n             e = self.ecx.struct_span_err(\n@@ -639,7 +639,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             if let Some(span) = fmt.precision_span {\n                 let span = self.fmtsp.from_inner(InnerSpan::new(span.start, span.end));\n                 match fmt.precision {\n-                    parse::CountIsParam(pos) if pos > self.num_args() => {\n+                    parse::CountIsParam(pos) if pos >= self.num_args() => {\n                         e.span_label(\n                             span,\n                             &format!(\n@@ -651,12 +651,12 @@ impl<'a, 'b> Context<'a, 'b> {\n                         );\n                         zero_based_note = true;\n                     }\n-                    parse::CountIsParam(pos) => {\n+                    parse::CountIsStar(pos) => {\n                         let count = self.pieces.len()\n                             + self\n                                 .arg_with_formatting\n                                 .iter()\n-                                .filter(|fmt| matches!(fmt.precision, parse::CountIsParam(_)))\n+                                .filter(|fmt| matches!(fmt.precision, parse::CountIsStar(_)))\n                                 .count();\n                         e.span_label(\n                             span,\n@@ -837,7 +837,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         };\n         match c {\n             parse::CountIs(i) => count(sym::Is, Some(self.ecx.expr_usize(sp, i))),\n-            parse::CountIsParam(i) => {\n+            parse::CountIsParam(i) | parse::CountIsStar(i) => {\n                 // This needs mapping too, as `i` is referring to a macro\n                 // argument. If `i` is not found in `count_positions` then\n                 // the error had already been emitted elsewhere."}, {"sha": "a9e502016aa8d4ac2392a8ce4fada05db3d14563", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b044da5bb87702a160537cf1137b8921b54ddd5/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b044da5bb87702a160537cf1137b8921b54ddd5/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=1b044da5bb87702a160537cf1137b8921b54ddd5", "patch": "@@ -167,6 +167,8 @@ pub enum Count<'a> {\n     CountIsName(&'a str, InnerSpan),\n     /// The count is specified by the argument at the given index.\n     CountIsParam(usize),\n+    /// The count is specified by a star (like in `{:.*}`) that refers to the argument at the given index.\n+    CountIsStar(usize),\n     /// The count is implied and cannot be explicitly specified.\n     CountImplied,\n }\n@@ -618,7 +620,7 @@ impl<'a> Parser<'a> {\n                 // We can do this immediately as `position` is resolved later.\n                 let i = self.curarg;\n                 self.curarg += 1;\n-                spec.precision = CountIsParam(i);\n+                spec.precision = CountIsStar(i);\n             } else {\n                 spec.precision = self.count(start + 1);\n             }"}, {"sha": "2f8c229c68ffe1e7ab48eb5dd818b462782ca103", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b044da5bb87702a160537cf1137b8921b54ddd5/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b044da5bb87702a160537cf1137b8921b54ddd5/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=1b044da5bb87702a160537cf1137b8921b54ddd5", "patch": "@@ -244,7 +244,7 @@ fn format_counts() {\n                 fill: None,\n                 align: AlignUnknown,\n                 flags: 0,\n-                precision: CountIsParam(0),\n+                precision: CountIsStar(0),\n                 precision_span: Some(InnerSpan { start: 3, end: 5 }),\n                 width: CountImplied,\n                 width_span: None,"}]}