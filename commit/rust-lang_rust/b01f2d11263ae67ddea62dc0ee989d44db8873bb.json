{"sha": "b01f2d11263ae67ddea62dc0ee989d44db8873bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMWYyZDExMjYzYWU2N2RkZWE2MmRjMGVlOTg5ZDQ0ZGI4ODczYmI=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-08-31T18:25:28Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-03T15:37:38Z"}, "message": "lint against `MaybeUninit::uninit().assume_init()`", "tree": {"sha": "ccd2304f14433a44a2102a29bfdc6aa4200ac3f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd2304f14433a44a2102a29bfdc6aa4200ac3f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01f2d11263ae67ddea62dc0ee989d44db8873bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01f2d11263ae67ddea62dc0ee989d44db8873bb", "html_url": "https://github.com/rust-lang/rust/commit/b01f2d11263ae67ddea62dc0ee989d44db8873bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01f2d11263ae67ddea62dc0ee989d44db8873bb/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e7d075df7b3e11e61fa99b30e1ede26cee6afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e7d075df7b3e11e61fa99b30e1ede26cee6afd", "html_url": "https://github.com/rust-lang/rust/commit/70e7d075df7b3e11e61fa99b30e1ede26cee6afd"}], "stats": {"total": 120, "additions": 118, "deletions": 2}, "files": [{"sha": "5a550e8d84f329fdf58ac132c5f247b21fb2797b", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b01f2d11263ae67ddea62dc0ee989d44db8873bb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b01f2d11263ae67ddea62dc0ee989d44db8873bb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b01f2d11263ae67ddea62dc0ee989d44db8873bb", "patch": "@@ -1176,6 +1176,7 @@ Released 2018-09-13\n [`type_repetition_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds\n [`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented\n+[`uninit_assumed_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n [`unknown_clippy_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#unknown_clippy_lints"}, {"sha": "bd97910f5974d202d3d6f78a8cc530a1d9096627", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b01f2d11263ae67ddea62dc0ee989d44db8873bb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b01f2d11263ae67ddea62dc0ee989d44db8873bb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b01f2d11263ae67ddea62dc0ee989d44db8873bb", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 311 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 312 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "4383b8b733a5c0fffc57a882d2391c0cad81556d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b01f2d11263ae67ddea62dc0ee989d44db8873bb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01f2d11263ae67ddea62dc0ee989d44db8873bb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b01f2d11263ae67ddea62dc0ee989d44db8873bb", "patch": "@@ -804,6 +804,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         methods::STRING_EXTEND_CHARS,\n         methods::SUSPICIOUS_MAP,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n+        methods::UNINIT_ASSUMED_INIT,\n         methods::UNNECESSARY_FILTER_MAP,\n         methods::UNNECESSARY_FOLD,\n         methods::USELESS_ASREF,\n@@ -1116,6 +1117,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         methods::CLONE_DOUBLE_REF,\n         methods::INTO_ITER_ON_ARRAY,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n+        methods::UNINIT_ASSUMED_INIT,\n         minmax::MIN_MAX,\n         misc::CMP_NAN,\n         misc::FLOAT_CMP,"}, {"sha": "ea208953a40428a9b6b08553f96f19aaa410c261", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b01f2d11263ae67ddea62dc0ee989d44db8873bb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01f2d11263ae67ddea62dc0ee989d44db8873bb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b01f2d11263ae67ddea62dc0ee989d44db8873bb", "patch": "@@ -951,6 +951,38 @@ declare_clippy_lint! {\n     \"suspicious usage of map\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `MaybeUninit::uninit().assume_init()`.\n+    ///\n+    /// **Why is this bad?** For most types, this is undefined behavior.\n+    ///\n+    /// **Known problems:** For now, we accept empty tuples and tuples / arrays\n+    /// of `MaybeUninit`. There may be other types that allow uninitialized\n+    /// data, but those are not yet rigorously defined.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Beware the UB\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n+    /// ```\n+    ///\n+    /// Note that the following is OK:\n+    ///\n+    /// ```rust\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let _: [MaybeUninit<bool>; 5] = unsafe {\n+    ///     MaybeUninit::uninit().assume_init()\n+    /// };\n+    /// ```\n+    pub UNINIT_ASSUMED_INIT,\n+    correctness,\n+    \"`MaybeUninit::uninit().assume_init()`\"\n+}\n+\n declare_lint_pass!(Methods => [\n     OPTION_UNWRAP_USED,\n     RESULT_UNWRAP_USED,\n@@ -991,6 +1023,7 @@ declare_lint_pass!(Methods => [\n     INTO_ITER_ON_ARRAY,\n     INTO_ITER_ON_REF,\n     SUSPICIOUS_MAP,\n+    UNINIT_ASSUMED_INIT,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n@@ -1038,6 +1071,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0]),\n             [\"filter_map\", ..] => unnecessary_filter_map::lint(cx, expr, arg_lists[0]),\n             [\"count\", \"map\"] => lint_suspicious_map(cx, expr),\n+            [\"assume_init\"] => lint_maybe_uninit(cx, &arg_lists[0][0], expr),\n             _ => {},\n         }\n \n@@ -2662,6 +2696,37 @@ fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr, self_ref_ty: Ty<'_\n     }\n }\n \n+/// lint for `MaybeUninit::uninit().assume_init()` (we already have the latter)\n+fn lint_maybe_uninit(cx: &LateContext<'_, '_>, expr: &hir::Expr, outer: &hir::Expr) {\n+    if_chain! {\n+        if let hir::ExprKind::Call(ref callee, ref args) = expr.node;\n+        if args.is_empty();\n+        if let hir::ExprKind::Path(ref path) = callee.node;\n+        if match_qpath(path, &paths::MEM_MAYBEUNINIT_UNINIT);\n+        if !is_maybe_uninit_ty_valid(cx, cx.tables.expr_ty_adjusted(outer));\n+        then {\n+            span_lint(\n+                cx,\n+                UNINIT_ASSUMED_INIT,\n+                outer.span,\n+                \"this call for this type may be undefined behavior\"\n+            );\n+        }\n+    }\n+}\n+\n+fn is_maybe_uninit_ty_valid(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> bool {\n+    match ty.sty {\n+        ty::Array(ref component, _) => is_maybe_uninit_ty_valid(cx, component),\n+        ty::Tuple(ref types) => types.types().all(|ty| is_maybe_uninit_ty_valid(cx, ty)),\n+        ty::Adt(ref adt, _) => {\n+            // needs to be a MaybeUninit\n+            match_def_path(cx, adt.did, &paths::MEM_MAYBEUNINIT)\n+        },\n+        _ => false,\n+    }\n+}\n+\n fn lint_suspicious_map(cx: &LateContext<'_, '_>, expr: &hir::Expr) {\n     span_help_and_lint(\n         cx,"}, {"sha": "9b88a0d3089bbe5bec418e4f7cff1c8fbc198fd3", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b01f2d11263ae67ddea62dc0ee989d44db8873bb/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01f2d11263ae67ddea62dc0ee989d44db8873bb/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=b01f2d11263ae67ddea62dc0ee989d44db8873bb", "patch": "@@ -49,6 +49,8 @@ pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n pub const LINT_PASS: [&str; 3] = [\"rustc\", \"lint\", \"LintPass\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n+pub const MEM_MAYBEUNINIT: [&str; 4] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\"];\n+pub const MEM_MAYBEUNINIT_UNINIT: [&str; 5] = [\"core\", \"mem\", \"maybe_uninit\", \"MaybeUninit\", \"uninit\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];"}, {"sha": "8d23632382598891118c7e712483e563556ca352", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01f2d11263ae67ddea62dc0ee989d44db8873bb/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01f2d11263ae67ddea62dc0ee989d44db8873bb/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=b01f2d11263ae67ddea62dc0ee989d44db8873bb", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 311] = [\n+pub const ALL_LINTS: [Lint; 312] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1890,6 +1890,13 @@ pub const ALL_LINTS: [Lint; 311] = [\n         deprecation: None,\n         module: \"panic_unimplemented\",\n     },\n+    Lint {\n+        name: \"uninit_assumed_init\",\n+        group: \"correctness\",\n+        desc: \"`MaybeUninit::uninit().assume_init()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"unit_arg\",\n         group: \"complexity\","}, {"sha": "a4424c490e70e1a46da9189bead1cb1e05d05d24", "filename": "tests/ui/uninit.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b01f2d11263ae67ddea62dc0ee989d44db8873bb/tests%2Fui%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01f2d11263ae67ddea62dc0ee989d44db8873bb/tests%2Fui%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.rs?ref=b01f2d11263ae67ddea62dc0ee989d44db8873bb", "patch": "@@ -0,0 +1,23 @@\n+#![feature(stmt_expr_attributes)]\n+\n+use std::mem::MaybeUninit;\n+\n+#[allow(clippy::let_unit_value)]\n+fn main() {\n+    let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n+\n+    // edge case: For now we lint on empty arrays\n+    let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n+\n+    // edge case: For now we accept unit tuples\n+    let _: () = unsafe { MaybeUninit::uninit().assume_init() };\n+\n+    // This is OK, because `MaybeUninit` allows uninitialized data.\n+    let _: MaybeUninit<usize> = unsafe { MaybeUninit::uninit().assume_init() };\n+\n+    // This is OK, because all constitutent types are uninit-compatible.\n+    let _: (MaybeUninit<usize>, MaybeUninit<bool>) = unsafe { MaybeUninit::uninit().assume_init() };\n+\n+    // This is OK, because all constitutent types are uninit-compatible.\n+    let _: (MaybeUninit<usize>, [MaybeUninit<bool>; 2]) = unsafe { MaybeUninit::uninit().assume_init() };\n+}"}, {"sha": "f4c45354aefe8aecda3ceaf3956457814b825a23", "filename": "tests/ui/uninit.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b01f2d11263ae67ddea62dc0ee989d44db8873bb/tests%2Fui%2Funinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b01f2d11263ae67ddea62dc0ee989d44db8873bb/tests%2Fui%2Funinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.stderr?ref=b01f2d11263ae67ddea62dc0ee989d44db8873bb", "patch": "@@ -0,0 +1,16 @@\n+error: this call for this type may be undefined behavior\n+  --> $DIR/uninit.rs:7:29\n+   |\n+LL |     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(clippy::uninit_assumed_init)]` on by default\n+\n+error: this call for this type may be undefined behavior\n+  --> $DIR/uninit.rs:10:31\n+   |\n+LL |     let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}