{"sha": "e901c4caf30353f6adf12e6b10a46a4de517ec9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MDFjNGNhZjMwMzUzZjZhZGYxMmU2YjEwYTQ2YTRkZTUxN2VjOWQ=", "commit": {"author": {"name": "xales", "email": "xales@naveria.com", "date": "2014-01-27T14:24:01Z"}, "committer": {"name": "xales", "email": "xales@naveria.com", "date": "2014-01-28T01:59:15Z"}, "message": "Set SO_REUSEADDR by default in libnative.\n\nFixes std::net test error when re-running too quickly.", "tree": {"sha": "789f775806fcb9699a819e701b065290256693aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789f775806fcb9699a819e701b065290256693aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e901c4caf30353f6adf12e6b10a46a4de517ec9d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e901c4caf30353f6adf12e6b10a46a4de517ec9d", "html_url": "https://github.com/rust-lang/rust/commit/e901c4caf30353f6adf12e6b10a46a4de517ec9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e901c4caf30353f6adf12e6b10a46a4de517ec9d/comments", "author": {"login": "xales", "id": 341605, "node_id": "MDQ6VXNlcjM0MTYwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xales", "html_url": "https://github.com/xales", "followers_url": "https://api.github.com/users/xales/followers", "following_url": "https://api.github.com/users/xales/following{/other_user}", "gists_url": "https://api.github.com/users/xales/gists{/gist_id}", "starred_url": "https://api.github.com/users/xales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xales/subscriptions", "organizations_url": "https://api.github.com/users/xales/orgs", "repos_url": "https://api.github.com/users/xales/repos", "events_url": "https://api.github.com/users/xales/events{/privacy}", "received_events_url": "https://api.github.com/users/xales/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xales", "id": 341605, "node_id": "MDQ6VXNlcjM0MTYwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xales", "html_url": "https://github.com/xales", "followers_url": "https://api.github.com/users/xales/followers", "following_url": "https://api.github.com/users/xales/following{/other_user}", "gists_url": "https://api.github.com/users/xales/gists{/gist_id}", "starred_url": "https://api.github.com/users/xales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xales/subscriptions", "organizations_url": "https://api.github.com/users/xales/orgs", "repos_url": "https://api.github.com/users/xales/repos", "events_url": "https://api.github.com/users/xales/events{/privacy}", "received_events_url": "https://api.github.com/users/xales/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0280ac5385433bd663e825e24f6990a816a5f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0280ac5385433bd663e825e24f6990a816a5f40", "html_url": "https://github.com/rust-lang/rust/commit/b0280ac5385433bd663e825e24f6990a816a5f40"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "2f4bec22755f6621d0d26902b09eb727a6cccd59", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e901c4caf30353f6adf12e6b10a46a4de517ec9d/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e901c4caf30353f6adf12e6b10a46a4de517ec9d/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=e901c4caf30353f6adf12e6b10a46a4de517ec9d", "patch": "@@ -348,6 +348,17 @@ impl TcpListener {\n                 let (addr, len) = addr_to_sockaddr(addr);\n                 let addrp = &addr as *libc::sockaddr_storage;\n                 let ret = TcpListener { fd: fd };\n+                // On platforms with Berkeley-derived sockets, this allows\n+                // to quickly rebind a socket, without needing to wait for\n+                // the OS to clean up the previous one.\n+                if cfg!(unix) {\n+                    match setsockopt(fd, libc::SOL_SOCKET,\n+                                     libc::SO_REUSEADDR,\n+                                     1 as libc::c_int) {\n+                        Err(n) => { return Err(n); },\n+                        Ok(..) => { }\n+                    }\n+                }\n                 match libc::bind(fd, addrp as *libc::sockaddr,\n                                  len as libc::socklen_t) {\n                     -1 => Err(super::last_error()),"}, {"sha": "92efc4e9306f3cf102863f772f7899c99ae19d12", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e901c4caf30353f6adf12e6b10a46a4de517ec9d/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e901c4caf30353f6adf12e6b10a46a4de517ec9d/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=e901c4caf30353f6adf12e6b10a46a4de517ec9d", "patch": "@@ -609,4 +609,44 @@ mod test {\n         c.write([1]);\n         p.recv();\n     })\n+\n+    iotest!(fn double_bind() {\n+        let mut called = false;\n+        io_error::cond.trap(|e| {\n+            assert!(e.kind == ConnectionRefused || e.kind == OtherIoError);\n+            called = true;\n+        }).inside(|| {\n+            let addr = next_test_ip4();\n+            let listener = TcpListener::bind(addr).unwrap().listen();\n+            assert!(listener.is_some());\n+            let listener2 = TcpListener::bind(addr).and_then(|l|\n+                                                    l.listen());\n+            assert!(listener2.is_none());\n+        });\n+        assert!(called);\n+    })\n+\n+    iotest!(fn fast_rebind() {\n+        let addr = next_test_ip4();\n+        let (port, chan) = Chan::new();\n+\n+        do spawn {\n+            port.recv();\n+            let stream = TcpStream::connect(addr);\n+            // Close\n+            port.recv();\n+        }\n+\n+        {\n+            let mut acceptor = TcpListener::bind(addr).listen();\n+            chan.send(());\n+            {\n+                let stream = acceptor.accept();\n+                // Close client\n+                chan.send(());\n+            }\n+            // Close listener\n+        }\n+        let listener = TcpListener::bind(addr);\n+    })\n }"}, {"sha": "dccadf2e00b70c0ea9328cc0618dc90e3e3ab685", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e901c4caf30353f6adf12e6b10a46a4de517ec9d/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e901c4caf30353f6adf12e6b10a46a4de517ec9d/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=e901c4caf30353f6adf12e6b10a46a4de517ec9d", "patch": "@@ -1547,6 +1547,7 @@ pub mod consts {\n             pub static SOL_SOCKET: c_int = 0xffff;\n             pub static SO_KEEPALIVE: c_int = 8;\n             pub static SO_BROADCAST: c_int = 32;\n+            pub static SO_REUSEADDR: c_int = 4;\n         }\n         pub mod extra {\n             use libc::types::os::arch::c95::c_int;\n@@ -2266,6 +2267,7 @@ pub mod consts {\n             pub static SOL_SOCKET: c_int = 1;\n             pub static SO_KEEPALIVE: c_int = 9;\n             pub static SO_BROADCAST: c_int = 6;\n+            pub static SO_REUSEADDR: c_int = 2;\n         }\n         #[cfg(target_arch = \"x86\")]\n         #[cfg(target_arch = \"x86_64\")]\n@@ -2707,6 +2709,7 @@ pub mod consts {\n             pub static SOL_SOCKET: c_int = 0xffff;\n             pub static SO_KEEPALIVE: c_int = 0x0008;\n             pub static SO_BROADCAST: c_int = 0x0020;\n+            pub static SO_REUSEADDR: c_int = 0x0004;\n         }\n         pub mod extra {\n             use libc::types::os::arch::c95::c_int;\n@@ -3083,6 +3086,7 @@ pub mod consts {\n             pub static SOL_SOCKET: c_int = 0xffff;\n             pub static SO_KEEPALIVE: c_int = 0x0008;\n             pub static SO_BROADCAST: c_int = 0x0020;\n+            pub static SO_REUSEADDR: c_int = 0x0004;\n         }\n         pub mod extra {\n             use libc::types::os::arch::c95::c_int;"}]}