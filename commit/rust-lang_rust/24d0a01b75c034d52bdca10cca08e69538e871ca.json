{"sha": "24d0a01b75c034d52bdca10cca08e69538e871ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZDBhMDFiNzVjMDM0ZDUyYmRjYTEwY2NhMDhlNjk1MzhlODcxY2E=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-05T06:59:04Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-05T07:01:37Z"}, "message": "review comment", "tree": {"sha": "2124693ed42cc3b7edba5a2adaaf2884058b78d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2124693ed42cc3b7edba5a2adaaf2884058b78d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24d0a01b75c034d52bdca10cca08e69538e871ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24d0a01b75c034d52bdca10cca08e69538e871ca", "html_url": "https://github.com/rust-lang/rust/commit/24d0a01b75c034d52bdca10cca08e69538e871ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24d0a01b75c034d52bdca10cca08e69538e871ca/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e7e3f1e903f6d6f2e6eacbbe5848fcd894db9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/21e7e3f1e903f6d6f2e6eacbbe5848fcd894db9f", "html_url": "https://github.com/rust-lang/rust/commit/21e7e3f1e903f6d6f2e6eacbbe5848fcd894db9f"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "24d0659391b040146b17adaae5e67f9a3671f267", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/24d0a01b75c034d52bdca10cca08e69538e871ca/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24d0a01b75c034d52bdca10cca08e69538e871ca/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=24d0a01b75c034d52bdca10cca08e69538e871ca", "patch": "@@ -675,23 +675,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx.check_stability(variant.fields[i].did, Some(pat.hir_id), subpat.span);\n             }\n         } else {\n-            let subpats_ending = if subpats.len() == 1 { \"\" } else { \"s\" };\n-            let fields_ending = if variant.fields.len() == 1 { \"\" } else { \"s\" };\n-            let span = tcx.def_span(res.def_id());\n-            struct_span_err!(tcx.sess, pat.span, E0023,\n-                             \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n-                             subpats.len(), subpats_ending, res.descr(),\n-                             variant.fields.len(),  fields_ending)\n-                .span_label(pat.span, format!(\"expected {} field{}, found {}\",\n-                                              variant.fields.len(), fields_ending, subpats.len()))\n-                .span_label(span, format!(\"{} defined here\", res.descr()))\n-                .emit();\n+            // Pattern has wrong number of fields.\n+            self.e0023(pat.span, res, &subpats, &variant.fields);\n             on_error();\n             return tcx.types.err;\n         }\n         pat_ty\n     }\n \n+    fn e0023(&self, pat_span: Span, res: Res, subpats: &'tcx [P<Pat>], fields: &[ty::FieldDef]) {\n+        let subpats_ending = if subpats.len() == 1 { \"\" } else { \"s\" };\n+        let fields_ending = if fields.len() == 1 { \"\" } else { \"s\" };\n+        let res_span = self.tcx.def_span(res.def_id());\n+        struct_span_err!(\n+            self.tcx.sess,\n+            pat_span,\n+            E0023,\n+            \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n+            subpats.len(),\n+            subpats_ending,\n+            res.descr(),\n+            fields.len(),\n+            fields_ending,\n+        )\n+            .span_label(pat_span, format!(\n+                \"expected {} field{}, found {}\",\n+                fields.len(),\n+                fields_ending,\n+                subpats.len(),\n+            ))\n+            .span_label(res_span, format!(\"{} defined here\", res.descr()))\n+            .emit();\n+    }\n+\n     fn check_pat_tuple(\n         &self,\n         span: Span,"}]}