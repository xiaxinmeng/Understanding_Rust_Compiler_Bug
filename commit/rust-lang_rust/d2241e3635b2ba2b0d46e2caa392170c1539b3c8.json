{"sha": "d2241e3635b2ba2b0d46e2caa392170c1539b3c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMjQxZTM2MzViMmJhMmIwZDQ2ZTJjYWEzOTIxNzBjMTUzOWIzYzg=", "commit": {"author": {"name": "Erin Power", "email": "erin.power@embark-studios.com", "date": "2021-05-21T10:27:43Z"}, "committer": {"name": "Erin Power", "email": "erin.power@embark-studios.com", "date": "2021-05-21T10:34:07Z"}, "message": "Update RELEASES.md for 1.53.0", "tree": {"sha": "c71bfd10777591494e82bc5878b064db572a74ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71bfd10777591494e82bc5878b064db572a74ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2241e3635b2ba2b0d46e2caa392170c1539b3c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2241e3635b2ba2b0d46e2caa392170c1539b3c8", "html_url": "https://github.com/rust-lang/rust/commit/d2241e3635b2ba2b0d46e2caa392170c1539b3c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2241e3635b2ba2b0d46e2caa392170c1539b3c8/comments", "author": {"login": "XAMPPRocky", "id": 4464295, "node_id": "MDQ6VXNlcjQ0NjQyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4464295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XAMPPRocky", "html_url": "https://github.com/XAMPPRocky", "followers_url": "https://api.github.com/users/XAMPPRocky/followers", "following_url": "https://api.github.com/users/XAMPPRocky/following{/other_user}", "gists_url": "https://api.github.com/users/XAMPPRocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XAMPPRocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XAMPPRocky/subscriptions", "organizations_url": "https://api.github.com/users/XAMPPRocky/orgs", "repos_url": "https://api.github.com/users/XAMPPRocky/repos", "events_url": "https://api.github.com/users/XAMPPRocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XAMPPRocky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "XAMPPRocky", "id": 4464295, "node_id": "MDQ6VXNlcjQ0NjQyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4464295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XAMPPRocky", "html_url": "https://github.com/XAMPPRocky", "followers_url": "https://api.github.com/users/XAMPPRocky/followers", "following_url": "https://api.github.com/users/XAMPPRocky/following{/other_user}", "gists_url": "https://api.github.com/users/XAMPPRocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XAMPPRocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XAMPPRocky/subscriptions", "organizations_url": "https://api.github.com/users/XAMPPRocky/orgs", "repos_url": "https://api.github.com/users/XAMPPRocky/repos", "events_url": "https://api.github.com/users/XAMPPRocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XAMPPRocky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f36b137074407ce857e34337bc92f10e26bc3994", "url": "https://api.github.com/repos/rust-lang/rust/commits/f36b137074407ce857e34337bc92f10e26bc3994", "html_url": "https://github.com/rust-lang/rust/commit/f36b137074407ce857e34337bc92f10e26bc3994"}], "stats": {"total": 184, "additions": 184, "deletions": 0}, "files": [{"sha": "977b7f34f370edcf1cb519052a93ec98ebaf8359", "filename": "RELEASES.md", "status": "modified", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/d2241e3635b2ba2b0d46e2caa392170c1539b3c8/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2241e3635b2ba2b0d46e2caa392170c1539b3c8/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=d2241e3635b2ba2b0d46e2caa392170c1539b3c8", "patch": "@@ -1,3 +1,187 @@\n+Version 1.53.0 (2021-06-17)\n+============================\n+\n+Language\n+-----------------------\n+- [You can now use unicode for identifiers.][83799] This allows multilingual\n+  identifiers but still doesn't allow glyphs that not considered characters\n+  such as `\u25c6` or `\ud83e\udd80`. More specifically you can now use any identifier that\n+  matches the UAX #31 \"Unicode Identifier and Pattern Syntax\" standard. This\n+  is the same standard as languages like Python, however Rust uses NFC\n+  normalisation which may be different from other languages.\n+- [You can now specify \"or patterns\" inside pattern matches.][79278]\n+  Previously you could only use `|` (OR) on complete patterns. E.g.\n+  ```rust\n+  let x = Some(2u8);\n+  // Before\n+  matches!(x, Some(1) | Some(2));\n+  // Now\n+  matches!(x, Some(1 | 2));\n+  ```\n+- [Added the `:pat_param` `macro_rules!` matcher.][83386] This matcher\n+  has the same semantics as the `:pat` matcher. This is to allow `:pat`\n+  to change semantics to being a pattern fragment in a future edition.\n+\n+Compiler\n+-----------------------\n+- [Updated to build with LLVM 12 by , and enabled `mutable-noalias` when\n+  built LLVM 12 or greater.][82834]\n+- [Updated the minimum external LLVM version to LLVM 10.][83387]\n+- [Added Tier 3\\* support for the `wasm64-unknown-unknown` target.][80525]\n+- [Improved debuginfo for closures and async functions on Windows MSVC.][83941]\n+\n+Libraries\n+-----------------------\n+- [Abort messages will now forward to `android_set_abort_message` on\n+  Android platforms when available.][81469]\n+- [`slice::IterMut<'_, T>` now implements `AsRef<[T]>`][82771]\n+- [Arrays of any length now implement `IntoIterator`.][84147]\n+  Currently `.into_iter()` will return `slice::Iter` (`Item=&T`), but\n+  this may change in a future edition to return `Item=T`.\n+- [`NonZero<T>::{leading_zeros, trailing_zeros}` is now `const`.][84082]\n+- [`{f32, f64}::from_str` now parse and print special values\n+  (`NaN`, `-0`) according to IEEE RFC 754.][78618]\n+- [You can now index into slices using `(Bound<usize>, Bound<usize>)`.][77704]\n+- [Add the `BITS` associated constant to all numeric types.][82565]\n+\n+Stabilised APIs\n+---------------\n+- [`AtomicBool::fetch_update`]\n+- [`AtomicPtr::fetch_update`]\n+- [`BTreeMap::retain`]\n+- [`BTreeSet::retain`]\n+- [`BufReader::seek_relative`]\n+- [`DebugStruct::non_exhaustive`]\n+- [`Duration::MAX`]\n+- [`Duration::ZERO`]\n+- [`Duration::is_zero`]\n+- [`Duration::saturating_add`]\n+- [`Duration::saturating_mul`]\n+- [`Duration::saturating_sub`]\n+- [`ErrorKind::Unsupported`]\n+- [`Option::insert`]\n+- [`Ordering::is_eq`]\n+- [`Ordering::is_ge`]\n+- [`Ordering::is_gt`]\n+- [`Ordering::is_le`]\n+- [`Ordering::is_lt`]\n+- [`Ordering::is_ne`]\n+- [`OsStr::is_ascii`]\n+- [`OsStr::make_ascii_lowercase`]\n+- [`OsStr::make_ascii_uppercase`]\n+- [`OsStr::to_ascii_lowercase`]\n+- [`OsStr::to_ascii_uppercase`]\n+- [`Peekable::peek_mut`]\n+- [`Rc::decrement_strong_count`]\n+- [`Rc::increment_strong_count`]\n+- [`Vec::extend_from_within`]\n+- [`array::from_mut`]\n+- [`array::from_ref`]\n+- [`char::MAX`]\n+- [`char::REPLACEMENT_CHARACTER`]\n+- [`char::UNICODE_VERSION`]\n+- [`char::decode_utf16`]\n+- [`char::from_digit`]\n+- [`char::from_u32_unchecked`]\n+- [`char::from_u32`]\n+- [`cmp::max_by_key`]\n+- [`cmp::max_by`]\n+- [`cmp::min_by_key`]\n+- [`cmp::min_by`]\n+- [`f32::is_subnormal`]\n+- [`f64::is_subnormal`]\n+\n+Cargo\n+-----------------------\n+- [Expose build.target .cargo/config setting as packages.target in Cargo.toml][cargo/9030]\n+\n+Rustdoc\n+-----------------------\n+- [Added the `rustdoc::bare_urls` lint that warns when you have URLs\n+  without hyperlinks.][81764]\n+\n+Compatibility Notes\n+-------------------\n+- [Implement token-based handling of attributes during expansion][82608]\n+- [`Ipv4::from_str` will now reject octal format IP addresses.][83652] The octal format\n+  can lead confusion and potential security vulnerablities and is no longer recommended.\n+\n+Internal Only\n+-------------\n+- [Rework the `std::sys::windows::alloc` implementation.][83065]\n+- [rustdoc: Don't enter an infer_ctxt in get_blanket_impls for impls that aren't blanket impls.][82864]\n+- [rustdoc: Only look at blanket impls in `get_blanket_impls`][83681]\n+- [Rework rustdoc const type][82873]\n+\n+[83386]: https://github.com/rust-lang/rust/pull/83386\n+[82771]: https://github.com/rust-lang/rust/pull/82771\n+[84147]: https://github.com/rust-lang/rust/pull/84147\n+[84082]: https://github.com/rust-lang/rust/pull/84082\n+[83799]: https://github.com/rust-lang/rust/pull/83799\n+[83681]: https://github.com/rust-lang/rust/pull/83681\n+[83652]: https://github.com/rust-lang/rust/pull/83652\n+[83387]: https://github.com/rust-lang/rust/pull/83387\n+[82873]: https://github.com/rust-lang/rust/pull/82873\n+[82864]: https://github.com/rust-lang/rust/pull/82864\n+[82608]: https://github.com/rust-lang/rust/pull/82608\n+[82565]: https://github.com/rust-lang/rust/pull/82565\n+[80525]: https://github.com/rust-lang/rust/pull/80525\n+[79278]: https://github.com/rust-lang/rust/pull/79278\n+[78618]: https://github.com/rust-lang/rust/pull/78618\n+[77704]: https://github.com/rust-lang/rust/pull/77704\n+[83941]: https://github.com/rust-lang/rust/pull/83941\n+[83065]: https://github.com/rust-lang/rust/pull/83065\n+[82834]: https://github.com/rust-lang/rust/pull/82834\n+[81764]: https://github.com/rust-lang/rust/pull/81764\n+[81469]: https://github.com/rust-lang/rust/pull/81469\n+[cargo/9030]: https://github.com/rust-lang/cargo/pull/9030\n+[`char::MAX`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.MAX\n+[`char::REPLACEMENT_CHARACTER`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.REPLACEMENT_CHARACTER\n+[`char::UNICODE_VERSION`]: https://doc.rust-lang.org/std/primitive.char.html#associatedconstant.UNICODE_VERSION\n+[`char::decode_utf16`]: https://doc.rust-lang.org/std/primitive.char.html#method.decode_utf16\n+[`char::from_u32`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32\n+[`char::from_u32_unchecked`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_u32_unchecked\n+[`char::from_digit`]: https://doc.rust-lang.org/std/primitive.char.html#method.from_digit\n+[`AtomicBool::fetch_update`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html#method.fetch_update\n+[`AtomicPtr::fetch_update`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicPtr.html#method.fetch_update\n+[`BTreeMap::retain`]: https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.retain\n+[`BTreeSet::retain`]: https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.retain\n+[`BufReader::seek_relative`]: https://doc.rust-lang.org/std/io/struct.BufReader.html#method.seek_relative\n+[`DebugStruct::non_exhaustive`]: https://doc.rust-lang.org/std/fmt/struct.DebugStruct.html#method.finish_non_exhaustive\n+[`Duration::MAX`]: https://doc.rust-lang.org/std/time/struct.Duration.html#associatedconstant.MAX\n+[`Duration::ZERO`]: https://doc.rust-lang.org/std/time/struct.Duration.html#associatedconstant.ZERO\n+[`Duration::is_zero`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.is_zero\n+[`Duration::saturating_add`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_add\n+[`Duration::saturating_mul`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_mul\n+[`Duration::saturating_sub`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.saturating_sub\n+[`ErrorKind::Unsupported`]: https://doc.rust-lang.org/std/io/enum.ErrorKind.html#variant.Unsupported\n+[`Option::insert`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.insert\n+[`Ordering::is_eq`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_eq\n+[`Ordering::is_ge`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_ge\n+[`Ordering::is_gt`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_gt\n+[`Ordering::is_le`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_le\n+[`Ordering::is_lt`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_lt\n+[`Ordering::is_ne`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_ne\n+[`OsStr::eq_ignore_ascii_case`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.eq_ignore_ascii_case\n+[`OsStr::is_ascii`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.is_ascii\n+[`OsStr::make_ascii_lowercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.make_ascii_lowercase\n+[`OsStr::make_ascii_uppercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.make_ascii_uppercase\n+[`OsStr::to_ascii_lowercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.to_ascii_lowercase\n+[`OsStr::to_ascii_uppercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.to_ascii_uppercase\n+[`Peekable::peek_mut`]: https://doc.rust-lang.org/std/iter/struct.Peekable.html#method.peek_mut\n+[`Rc::decrement_strong_count`]: https://doc.rust-lang.org/std/rc/struct.Rc.html#method.increment_strong_count\n+[`Rc::increment_strong_count`]:  https://doc.rust-lang.org/std/rc/struct.Rc.html#method.increment_strong_count\n+[`Vec::extend_from_within`]: https://doc.rust-lang.org/beta/std/vec/struct.Vec.html#method.extend_from_within\n+[`array::from_mut`]: https://doc.rust-lang.org/beta/std/array/fn.from_mut.html\n+[`array::from_ref`]: https://doc.rust-lang.org/beta/std/array/fn.from_ref.html\n+[`cmp::max_by_key`]: https://doc.rust-lang.org/beta/std/cmp/fn.max_by_key.html\n+[`cmp::max_by`]: https://doc.rust-lang.org/beta/std/cmp/fn.max_by.html\n+[`cmp::min_by_key`]: https://doc.rust-lang.org/beta/std/cmp/fn.min_by_key.html\n+[`cmp::min_by`]: https://doc.rust-lang.org/beta/std/cmp/fn.min_by.html\n+[`f32::is_subnormal`]: https://doc.rust-lang.org/f32.html#method.is_subnormal\n+[`f64::is_subnormal`]: https://doc.rust-lang.org/f64.html#method.is_subnormal\n+\n+\n Version 1.52.1 (2021-05-10)\n ============================\n "}]}