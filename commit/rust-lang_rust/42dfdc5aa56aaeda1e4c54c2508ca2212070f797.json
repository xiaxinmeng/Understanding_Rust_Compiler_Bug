{"sha": "42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZGZkYzVhYTU2YWFlZGExZTRjNTRjMjUwOGNhMjIxMjA3MGY3OTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-03T11:12:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-03T11:12:04Z"}, "message": "Rollup merge of #63229 - RalfJung:miri-error, r=oli-obk\n\nA bit of Miri error cleanup\n\nSome cleanup after https://github.com/rust-lang/rust/pull/62969.\n\nr? @oli-obk\nCc @saleemjaffer", "tree": {"sha": "70f38ba9669b3e833ee0d63691b4340998d5ac80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f38ba9669b3e833ee0d63691b4340998d5ac80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRWwECRBK7hj4Ov3rIwAAdHIIAJUP9z6fmN9paoewFhMDBxdW\nQgc5QS+iU74Su+Lf2crIICoKtSkjDgpfY4n9yKM5Efad9lXul2TGMDbnG/zycY1j\nOVSIJsq9IsrWnULQVk0oYHONLno0b+TgZ02nbH9cQbWd8dWyNRy1K24sYdg8rnTL\nbDHFFxs/nGC93E0gQgpBeCLu1u3yzSMxi3MPxYyuKHw8gDfv7NzIYqGP2eNDqlyS\nbxauDOFXR9GhtoS1JCt+nt4U39HYEGryo8LN5O5I/CEvya8XmI33Inrbl6coIRTc\nIUM4dCYha8VHBksIvLzdXObQ1J3Vvhsdoi0VCEZaqgDho0CHq/NjCskPdnmLFhc=\n=HTsM\n-----END PGP SIGNATURE-----\n", "payload": "tree 70f38ba9669b3e833ee0d63691b4340998d5ac80\nparent 2fd954803983c19a8ba95f817caf080f2b521f20\nparent e5fc9572d9503d642cb94cf775e94c23dab67170\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564830724 +0200\ncommitter GitHub <noreply@github.com> 1564830724 +0200\n\nRollup merge of #63229 - RalfJung:miri-error, r=oli-obk\n\nA bit of Miri error cleanup\n\nSome cleanup after https://github.com/rust-lang/rust/pull/62969.\n\nr? @oli-obk\nCc @saleemjaffer\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "html_url": "https://github.com/rust-lang/rust/commit/42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd954803983c19a8ba95f817caf080f2b521f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd954803983c19a8ba95f817caf080f2b521f20", "html_url": "https://github.com/rust-lang/rust/commit/2fd954803983c19a8ba95f817caf080f2b521f20"}, {"sha": "e5fc9572d9503d642cb94cf775e94c23dab67170", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fc9572d9503d642cb94cf775e94c23dab67170", "html_url": "https://github.com/rust-lang/rust/commit/e5fc9572d9503d642cb94cf775e94c23dab67170"}], "stats": {"total": 188, "additions": 90, "deletions": 98}, "files": [{"sha": "6a8cd9b46ae4a1ed8e704281bd25bdcc3cd4ae01", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -341,16 +341,16 @@ impl fmt::Debug for InvalidProgramInfo<'tcx> {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum UndefinedBehaviourInfo {\n+pub enum UndefinedBehaviorInfo {\n     /// Handle cases which for which we do not have a fixed variant.\n     Ub(String),\n     /// Unreachable code was executed.\n     Unreachable,\n }\n \n-impl fmt::Debug for UndefinedBehaviourInfo {\n+impl fmt::Debug for UndefinedBehaviorInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use UndefinedBehaviourInfo::*;\n+        use UndefinedBehaviorInfo::*;\n         match self {\n             Ub(ref msg) =>\n                 write!(f, \"{}\", msg),\n@@ -363,7 +363,7 @@ impl fmt::Debug for UndefinedBehaviourInfo {\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UnsupportedOpInfo<'tcx> {\n     /// Handle cases which for which we do not have a fixed variant.\n-    Unimplemented(String),\n+    Unsupported(String),\n \n     // -- Everything below is not classified yet --\n     FunctionAbiMismatch(Abi, Abi),\n@@ -390,20 +390,14 @@ pub enum UnsupportedOpInfo<'tcx> {\n     ReadUndefBytes(Size),\n     DeadLocal,\n     InvalidBoolOp(mir::BinOp),\n-    InlineAsm,\n     UnimplementedTraitSelection,\n     CalledClosureAsFunction,\n     NoMirFor(String),\n-    /// This variant is used by machines to signal their own errors that do not\n-    /// match an existing variant.\n-    MachineError(String),\n     DerefFunctionPointer,\n     ExecuteMemory,\n-    Intrinsic(String),\n     InvalidChar(u128),\n     OutOfTls,\n     TlsOutOfBounds,\n-    AbiViolation(String),\n     AlignmentCheckFailed {\n         required: Align,\n         has: Align,\n@@ -513,8 +507,6 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                     initializer\"),\n             AssumptionNotHeld =>\n                 write!(f, \"`assume` argument was false\"),\n-            InlineAsm =>\n-                write!(f, \"miri does not support inline assembly\"),\n             ReallocateNonBasePtr =>\n                 write!(f, \"tried to reallocate with a pointer not to the beginning of an \\\n                     existing object\"),\n@@ -537,10 +529,7 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n             HeapAllocNonPowerOfTwoAlignment(_) =>\n                 write!(f, \"tried to re-, de-, or allocate heap memory with alignment that is \\\n                     not a power of two\"),\n-            MachineError(ref msg) |\n-            Unimplemented(ref msg) |\n-            AbiViolation(ref msg) |\n-            Intrinsic(ref msg) =>\n+            Unsupported(ref msg) =>\n                 write!(f, \"{}\", msg),\n         }\n     }\n@@ -572,7 +561,7 @@ pub enum InterpError<'tcx> {\n     /// The program panicked.\n     Panic(PanicInfo<u64>),\n     /// The program caused undefined behavior.\n-    UndefinedBehaviour(UndefinedBehaviourInfo),\n+    UndefinedBehavior(UndefinedBehaviorInfo),\n     /// The program did something the interpreter does not support (some of these *might* be UB\n     /// but the interpreter is not sure).\n     Unsupported(UnsupportedOpInfo<'tcx>),\n@@ -603,7 +592,7 @@ impl fmt::Debug for InterpError<'_> {\n                 write!(f, \"{:?}\", msg),\n             InvalidProgram(ref msg) =>\n                 write!(f, \"{:?}\", msg),\n-            UndefinedBehaviour(ref msg) =>\n+            UndefinedBehavior(ref msg) =>\n                 write!(f, \"{:?}\", msg),\n             ResourceExhaustion(ref msg) =>\n                 write!(f, \"{:?}\", msg),"}, {"sha": "65f4c9c47d0a94975e6ddd51296637d490ea9b04", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -21,8 +21,8 @@ macro_rules! err_inval {\n #[macro_export]\n macro_rules! err_ub {\n     ($($tt:tt)*) => {\n-        $crate::mir::interpret::InterpError::UndefinedBehaviour(\n-            $crate::mir::interpret::UndefinedBehaviourInfo::$($tt)*\n+        $crate::mir::interpret::InterpError::UndefinedBehavior(\n+            $crate::mir::interpret::UndefinedBehaviorInfo::$($tt)*\n         )\n     };\n }\n@@ -50,6 +50,11 @@ macro_rules! throw_unsup {\n     ($($tt:tt)*) => { return Err(err_unsup!($($tt)*).into()) };\n }\n \n+#[macro_export]\n+macro_rules! throw_unsup_format {\n+    ($($tt:tt)*) => { throw_unsup!(Unsupported(format!($($tt)*))) };\n+}\n+\n #[macro_export]\n macro_rules! throw_inval {\n     ($($tt:tt)*) => { return Err(err_inval!($($tt)*).into()) };\n@@ -60,6 +65,11 @@ macro_rules! throw_ub {\n     ($($tt:tt)*) => { return Err(err_ub!($($tt)*).into()) };\n }\n \n+#[macro_export]\n+macro_rules! throw_ub_format {\n+    ($($tt:tt)*) => { throw_ub!(Ub(format!($($tt)*))) };\n+}\n+\n #[macro_export]\n macro_rules! throw_panic {\n     ($($tt:tt)*) => { return Err(err_panic!($($tt)*).into()) };\n@@ -78,7 +88,7 @@ mod pointer;\n pub use self::error::{\n     InterpErrorInfo, InterpResult, InterpError, AssertMessage, ConstEvalErr, struct_error,\n     FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled, PanicInfo, UnsupportedOpInfo,\n-    InvalidProgramInfo, ResourceExhaustionInfo, UndefinedBehaviourInfo,\n+    InvalidProgramInfo, ResourceExhaustionInfo, UndefinedBehaviorInfo,\n };\n \n pub use self::value::{Scalar, ScalarMaybeUndef, RawConst, ConstValue};"}, {"sha": "0a3ac16c10966f4915f64d433b92f40000ede342", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -181,17 +181,17 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     Ok(ret)\n }\n \n-impl<'tcx> Into<InterpErrorInfo<'tcx>> for ConstEvalError {\n-    fn into(self) -> InterpErrorInfo<'tcx> {\n-        err_unsup!(MachineError(self.to_string())).into()\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n enum ConstEvalError {\n     NeedsRfc(String),\n }\n \n+impl<'tcx> Into<InterpErrorInfo<'tcx>> for ConstEvalError {\n+    fn into(self) -> InterpErrorInfo<'tcx> {\n+        err_unsup!(Unsupported(self.to_string())).into()\n+    }\n+}\n+\n impl fmt::Display for ConstEvalError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::ConstEvalError::*;\n@@ -341,7 +341,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         debug!(\"eval_fn_call: {:?}\", instance);\n         // Only check non-glue functions\n         if let ty::InstanceDef::Item(def_id) = instance.def {\n-            // Execution might have wandered off into other crates, so we cannot to a stability-\n+            // Execution might have wandered off into other crates, so we cannot do a stability-\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n             if !ecx.tcx.is_const_fn_raw(def_id) {\n@@ -352,7 +352,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     ecx.goto_block(ret)?; // fully evaluated and done\n                     Ok(None)\n                 } else {\n-                    throw_unsup!(MachineError(format!(\"calling non-const function `{}`\", instance)))\n+                    throw_unsup_format!(\"calling non-const function `{}`\", instance)\n                 };\n             }\n         }"}, {"sha": "ffb4da1b9b3a06a0bd3d8b3a41d83c68d70d17c9", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -199,7 +199,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             },\n \n             // Casts to bool are not permitted by rustc, no need to handle them here.\n-            _ => throw_unsup!(Unimplemented(format!(\"int to {:?} cast\", dest_layout.ty))),\n+            _ => bug!(\"invalid int to {:?} cast\", dest_layout.ty),\n         }\n     }\n "}, {"sha": "89c5be137a4e520a69fa218baf67fbecdfc479ee", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -98,11 +98,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let bits = self.read_scalar(args[0])?.to_bits(layout_of.size)?;\n                 let kind = match layout_of.abi {\n                     ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n-                    _ => Err(err_unsup!(TypeNotPrimitive(ty)))?,\n+                    _ => throw_unsup!(TypeNotPrimitive(ty)),\n                 };\n                 let out_val = if intrinsic_name.ends_with(\"_nonzero\") {\n                     if bits == 0 {\n-                        throw_unsup!(Intrinsic(format!(\"{} called on 0\", intrinsic_name)))\n+                        throw_ub_format!(\"`{}` called on 0\", intrinsic_name);\n                     }\n                     numeric_intrinsic(intrinsic_name.trim_end_matches(\"_nonzero\"), bits, kind)?\n                 } else {\n@@ -187,10 +187,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let (val, overflowed) = self.binary_op(bin_op, l, r)?;\n                 if overflowed {\n                     let layout = self.layout_of(substs.type_at(0))?;\n-                    let r_val =  r.to_scalar()?.to_bits(layout.size)?;\n-                    throw_unsup!(\n-                        Intrinsic(format!(\"Overflowing shift by {} in {}\", r_val, intrinsic_name))\n-                    )\n+                    let r_val = r.to_scalar()?.to_bits(layout.size)?;\n+                    throw_ub_format!(\"Overflowing shift by {} in `{}`\", r_val, intrinsic_name);\n                 }\n                 self.write_scalar(val, dest)?;\n             }"}, {"sha": "d1deb2e49bda3c70b607b1fab8b91cabf18c47ad", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -66,9 +66,9 @@ impl<'tcx, Other> FnVal<'tcx, Other> {\n         match self {\n             FnVal::Instance(instance) =>\n                 Ok(instance),\n-            FnVal::Other(_) => throw_unsup!(MachineError(format!(\n-                \"Expected instance function pointer, got 'other' pointer\"\n-            ))),\n+            FnVal::Other(_) => throw_unsup_format!(\n+                \"'foreign' function pointers are not supported in this context\"\n+            ),\n         }\n     }\n }\n@@ -834,9 +834,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     if (src.offset <= dest.offset && src.offset + size > dest.offset) ||\n                         (dest.offset <= src.offset && dest.offset + size > src.offset)\n                     {\n-                        throw_unsup!(Intrinsic(\n-                            \"copy_nonoverlapping called on overlapping ranges\".to_string(),\n-                        ))\n+                        throw_ub_format!(\n+                            \"copy_nonoverlapping called on overlapping ranges\"\n+                        )\n                     }\n                 }\n "}, {"sha": "141cab3e1b707fd1aacd53aec9b12cef700d14d9", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -147,15 +147,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // For the remaining ops, the types must be the same on both sides\n         if left_layout.ty != right_layout.ty {\n-            let msg = format!(\n-                \"unimplemented asymmetric binary op {:?}: {:?} ({:?}), {:?} ({:?})\",\n+            bug!(\n+                \"invalid asymmetric binary op {:?}: {:?} ({:?}), {:?} ({:?})\",\n                 bin_op,\n-                l,\n-                left_layout.ty,\n-                r,\n-                right_layout.ty\n-            );\n-            throw_unsup!(Unimplemented(msg))\n+                l, left_layout.ty,\n+                r, right_layout.ty,\n+            )\n         }\n \n         // Operations that need special treatment for signed integers\n@@ -243,14 +240,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             _ => {\n-                let msg = format!(\n-                    \"unimplemented binary op {:?}: {:?}, {:?} (both {:?})\",\n+                bug!(\n+                    \"invalid binary op {:?}: {:?}, {:?} (both {:?})\",\n                     bin_op,\n                     l,\n                     r,\n                     right_layout.ty,\n-                );\n-                throw_unsup!(Unimplemented(msg))\n+                )\n             }\n         };\n "}, {"sha": "d152e2b50fa1b05decd65da3e72211f7e176b115", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -121,7 +121,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // size of MIR constantly.\n             Nop => {}\n \n-            InlineAsm { .. } => throw_unsup!(InlineAsm),\n+            InlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n         }\n \n         self.stack[frame_idx].stmt += 1;"}, {"sha": "8e4d28ded88ce16d7333cb46df4a0bb79092493f", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -88,8 +88,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         (FnVal::Instance(self.resolve(def_id, substs)?), sig.abi())\n                     },\n                     _ => {\n-                        let msg = format!(\"can't handle callee of type {:?}\", func.layout.ty);\n-                        throw_unsup!(Unimplemented(msg))\n+                        bug!(\"invalid callee of type {:?}\", func.layout.ty)\n                     }\n                 };\n                 let args = self.eval_operands(args)?;"}, {"sha": "38d26d0ba50a483ee94f9699334f9b6b35d3bf42", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -260,7 +260,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 match diagnostic.error {\n                     Exit(_) => bug!(\"the CTFE program cannot exit\"),\n                     Unsupported(_)\n-                    | UndefinedBehaviour(_)\n+                    | UndefinedBehavior(_)\n                     | InvalidProgram(_)\n                     | ResourceExhaustion(_) => {\n                         // Ignore these errors."}, {"sha": "d569c6a201b2b5a756ca90655196b4b69371dd78", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42dfdc5aa56aaeda1e4c54c2508ca2212070f797/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=42dfdc5aa56aaeda1e4c54c2508ca2212070f797", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const SHL_U8: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             Overflowing shift by 8 in unchecked_shl\n+   |                             Overflowing shift by 8 in `unchecked_shl`\n    |\n    = note: `#[deny(const_err)]` on by default\n \n@@ -14,311 +14,311 @@ error: any use of this value will cause an error\n LL | const SHL_U16: u16 = unsafe { intrinsics::unchecked_shl(5_u16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 16 in unchecked_shl\n+   |                               Overflowing shift by 16 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:18:31\n    |\n LL | const SHL_U32: u32 = unsafe { intrinsics::unchecked_shl(5_u32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 32 in unchecked_shl\n+   |                               Overflowing shift by 32 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:20:31\n    |\n LL | const SHL_U64: u64 = unsafe { intrinsics::unchecked_shl(5_u64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 64 in unchecked_shl\n+   |                               Overflowing shift by 64 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:22:33\n    |\n LL | const SHL_U128: u128 = unsafe { intrinsics::unchecked_shl(5_u128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 128 in unchecked_shl\n+   |                                 Overflowing shift by 128 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:27:29\n    |\n LL | const SHL_I8: i8 = unsafe { intrinsics::unchecked_shl(5_i8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             Overflowing shift by 8 in unchecked_shl\n+   |                             Overflowing shift by 8 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:29:31\n    |\n LL | const SHL_I16: i16 = unsafe { intrinsics::unchecked_shl(5_16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 16 in unchecked_shl\n+   |                               Overflowing shift by 16 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:31:31\n    |\n LL | const SHL_I32: i32 = unsafe { intrinsics::unchecked_shl(5_i32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 32 in unchecked_shl\n+   |                               Overflowing shift by 32 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:33:31\n    |\n LL | const SHL_I64: i64 = unsafe { intrinsics::unchecked_shl(5_i64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 64 in unchecked_shl\n+   |                               Overflowing shift by 64 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:35:33\n    |\n LL | const SHL_I128: i128 = unsafe { intrinsics::unchecked_shl(5_i128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 128 in unchecked_shl\n+   |                                 Overflowing shift by 128 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:40:33\n    |\n LL | const SHL_I8_NEG: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -1) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 255 in unchecked_shl\n+   |                                 Overflowing shift by 255 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:42:35\n    |\n LL | const SHL_I16_NEG: i16 = unsafe { intrinsics::unchecked_shl(5_16, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 65535 in unchecked_shl\n+   |                                   Overflowing shift by 65535 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:44:35\n    |\n LL | const SHL_I32_NEG: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 4294967295 in unchecked_shl\n+   |                                   Overflowing shift by 4294967295 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:46:35\n    |\n LL | const SHL_I64_NEG: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 18446744073709551615 in unchecked_shl\n+   |                                   Overflowing shift by 18446744073709551615 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:48:37\n    |\n LL | const SHL_I128_NEG: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -1) };\n    | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n-   |                                     Overflowing shift by 340282366920938463463374607431768211455 in unchecked_shl\n+   |                                     Overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:54:40\n    |\n LL | const SHL_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shl(5_i8, -6) };\n    | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n-   |                                        Overflowing shift by 250 in unchecked_shl\n+   |                                        Overflowing shift by 250 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:56:42\n    |\n LL | const SHL_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shl(5_16, -13) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 65523 in unchecked_shl\n+   |                                          Overflowing shift by 65523 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:58:42\n    |\n LL | const SHL_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shl(5_i32, -25) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 4294967271 in unchecked_shl\n+   |                                          Overflowing shift by 4294967271 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:60:42\n    |\n LL | const SHL_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shl(5_i64, -30) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 18446744073709551586 in unchecked_shl\n+   |                                          Overflowing shift by 18446744073709551586 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:62:44\n    |\n LL | const SHL_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shl(5_i128, -93) };\n    | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n-   |                                            Overflowing shift by 340282366920938463463374607431768211363 in unchecked_shl\n+   |                                            Overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shl`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:69:29\n    |\n LL | const SHR_U8: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             Overflowing shift by 8 in unchecked_shr\n+   |                             Overflowing shift by 8 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:71:31\n    |\n LL | const SHR_U16: u16 = unsafe { intrinsics::unchecked_shr(5_u16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 16 in unchecked_shr\n+   |                               Overflowing shift by 16 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:73:31\n    |\n LL | const SHR_U32: u32 = unsafe { intrinsics::unchecked_shr(5_u32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 32 in unchecked_shr\n+   |                               Overflowing shift by 32 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:75:31\n    |\n LL | const SHR_U64: u64 = unsafe { intrinsics::unchecked_shr(5_u64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 64 in unchecked_shr\n+   |                               Overflowing shift by 64 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:77:33\n    |\n LL | const SHR_U128: u128 = unsafe { intrinsics::unchecked_shr(5_u128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 128 in unchecked_shr\n+   |                                 Overflowing shift by 128 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:82:29\n    |\n LL | const SHR_I8: i8 = unsafe { intrinsics::unchecked_shr(5_i8, 8) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             Overflowing shift by 8 in unchecked_shr\n+   |                             Overflowing shift by 8 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:84:31\n    |\n LL | const SHR_I16: i16 = unsafe { intrinsics::unchecked_shr(5_16, 16) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 16 in unchecked_shr\n+   |                               Overflowing shift by 16 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:86:31\n    |\n LL | const SHR_I32: i32 = unsafe { intrinsics::unchecked_shr(5_i32, 32) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 32 in unchecked_shr\n+   |                               Overflowing shift by 32 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:88:31\n    |\n LL | const SHR_I64: i64 = unsafe { intrinsics::unchecked_shr(5_i64, 64) };\n    | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                               |\n-   |                               Overflowing shift by 64 in unchecked_shr\n+   |                               Overflowing shift by 64 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:90:33\n    |\n LL | const SHR_I128: i128 = unsafe { intrinsics::unchecked_shr(5_i128, 128) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 128 in unchecked_shr\n+   |                                 Overflowing shift by 128 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:95:33\n    |\n LL | const SHR_I8_NEG: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -1) };\n    | --------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                 |\n-   |                                 Overflowing shift by 255 in unchecked_shr\n+   |                                 Overflowing shift by 255 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:97:35\n    |\n LL | const SHR_I16_NEG: i16 = unsafe { intrinsics::unchecked_shr(5_16, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 65535 in unchecked_shr\n+   |                                   Overflowing shift by 65535 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:99:35\n    |\n LL | const SHR_I32_NEG: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 4294967295 in unchecked_shr\n+   |                                   Overflowing shift by 4294967295 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:101:35\n    |\n LL | const SHR_I64_NEG: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -1) };\n    | ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                   |\n-   |                                   Overflowing shift by 18446744073709551615 in unchecked_shr\n+   |                                   Overflowing shift by 18446744073709551615 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:103:37\n    |\n LL | const SHR_I128_NEG: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -1) };\n    | ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                     |\n-   |                                     Overflowing shift by 340282366920938463463374607431768211455 in unchecked_shr\n+   |                                     Overflowing shift by 340282366920938463463374607431768211455 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:109:40\n    |\n LL | const SHR_I8_NEG_RANDOM: i8 = unsafe { intrinsics::unchecked_shr(5_i8, -6) };\n    | ---------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                        |\n-   |                                        Overflowing shift by 250 in unchecked_shr\n+   |                                        Overflowing shift by 250 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:111:42\n    |\n LL | const SHR_I16_NEG_RANDOM: i16 = unsafe { intrinsics::unchecked_shr(5_16, -13) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 65523 in unchecked_shr\n+   |                                          Overflowing shift by 65523 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:113:42\n    |\n LL | const SHR_I32_NEG_RANDOM: i32 = unsafe { intrinsics::unchecked_shr(5_i32, -25) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 4294967271 in unchecked_shr\n+   |                                          Overflowing shift by 4294967271 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:115:42\n    |\n LL | const SHR_I64_NEG_RANDOM: i64 = unsafe { intrinsics::unchecked_shr(5_i64, -30) };\n    | -----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                          |\n-   |                                          Overflowing shift by 18446744073709551586 in unchecked_shr\n+   |                                          Overflowing shift by 18446744073709551586 in `unchecked_shr`\n \n error: any use of this value will cause an error\n   --> $DIR/const-int-unchecked.rs:117:44\n    |\n LL | const SHR_I128_NEG_RANDOM: i128 = unsafe { intrinsics::unchecked_shr(5_i128, -93) };\n    | -------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                            |\n-   |                                            Overflowing shift by 340282366920938463463374607431768211363 in unchecked_shr\n+   |                                            Overflowing shift by 340282366920938463463374607431768211363 in `unchecked_shr`\n \n error: aborting due to 40 previous errors\n "}]}