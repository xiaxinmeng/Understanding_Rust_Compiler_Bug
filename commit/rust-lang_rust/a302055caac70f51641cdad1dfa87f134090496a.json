{"sha": "a302055caac70f51641cdad1dfa87f134090496a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDIwNTVjYWFjNzBmNTE2NDFjZGFkMWRmYTg3ZjEzNDA5MDQ5NmE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-25T19:53:28Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-09-28T14:06:52Z"}, "message": "Mask results from flow-sensitive resolver with `in_any_value_of_ty`\n\nWe relied previously on the caller (e.g. `Q::in_operand`) to ignore\n`Local`s that were indirectly mutable (and thus assumed to be\nqualified). However, it's much clearer (and more efficient) to do this\nin the resolver itself.\n\nThis does not yet remove the masking done in `Q::in_operand` and others\nfor safety's sake, although I believe that should now be possible.", "tree": {"sha": "0fb0a2f6c59f7b80041cd51670804f94e17838c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb0a2f6c59f7b80041cd51670804f94e17838c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a302055caac70f51641cdad1dfa87f134090496a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a302055caac70f51641cdad1dfa87f134090496a", "html_url": "https://github.com/rust-lang/rust/commit/a302055caac70f51641cdad1dfa87f134090496a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a302055caac70f51641cdad1dfa87f134090496a/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff6faabda7840db86b90663f239bac909bae3a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6faabda7840db86b90663f239bac909bae3a18", "html_url": "https://github.com/rust-lang/rust/commit/ff6faabda7840db86b90663f239bac909bae3a18"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "2789693ecb6ec25100988cb78b5b25475b036b54", "filename": "src/librustc_mir/transform/check_consts/resolver.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a302055caac70f51641cdad1dfa87f134090496a/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a302055caac70f51641cdad1dfa87f134090496a/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=a302055caac70f51641cdad1dfa87f134090496a", "patch": "@@ -188,6 +188,9 @@ where\n     indirectly_mutable_locals: &'a RefCell<IndirectlyMutableResults<'mir, 'tcx>>,\n     cursor: dataflow::ResultsCursor<'mir, 'tcx, FlowSensitiveAnalysis<'a, 'mir, 'tcx, Q>>,\n     qualifs_per_local: BitSet<Local>,\n+\n+    /// The value of `Q::in_any_value_of_ty` for each local.\n+    qualifs_in_any_value_of_ty: BitSet<Local>,\n }\n \n impl<Q> FlowSensitiveResolver<'a, 'mir, 'tcx, Q>\n@@ -208,10 +211,18 @@ where\n             dataflow::Engine::new(item.body, dead_unwinds, analysis).iterate_to_fixpoint();\n         let cursor = dataflow::ResultsCursor::new(item.body, results);\n \n+        let mut qualifs_in_any_value_of_ty = BitSet::new_empty(item.body.local_decls.len());\n+        for (local, decl) in item.body.local_decls.iter_enumerated() {\n+            if Q::in_any_value_of_ty(item, decl.ty) {\n+                qualifs_in_any_value_of_ty.insert(local);\n+            }\n+        }\n+\n         FlowSensitiveResolver {\n             cursor,\n             indirectly_mutable_locals,\n             qualifs_per_local: BitSet::new_empty(item.body.local_decls.len()),\n+            qualifs_in_any_value_of_ty,\n             location: Location { block: mir::START_BLOCK, statement_index: 0 },\n         }\n     }\n@@ -242,16 +253,23 @@ where\n \n         self.qualifs_per_local.overwrite(indirectly_mutable_locals.get());\n         self.qualifs_per_local.union(self.cursor.get());\n+        self.qualifs_per_local.intersect(&self.qualifs_in_any_value_of_ty);\n         &self.qualifs_per_local\n     }\n \n     fn contains(&mut self, local: Local) -> bool {\n+        // No need to update the cursor if we know that `Local` cannot possibly be qualified.\n+        if !self.qualifs_in_any_value_of_ty.contains(local) {\n+            return false;\n+        }\n+\n+        // Otherwise, return `true` if this local is qualified or was indirectly mutable at any\n+        // point before this statement.\n         self.cursor.seek_before(self.location);\n         if self.cursor.get().contains(local) {\n             return true;\n         }\n \n-\n         let mut indirectly_mutable_locals = self.indirectly_mutable_locals.borrow_mut();\n         indirectly_mutable_locals.seek(self.location);\n         indirectly_mutable_locals.get().contains(local)"}]}