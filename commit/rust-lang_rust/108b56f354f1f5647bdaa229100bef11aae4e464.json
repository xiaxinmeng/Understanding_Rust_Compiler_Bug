{"sha": "108b56f354f1f5647bdaa229100bef11aae4e464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOGI1NmYzNTRmMWY1NjQ3YmRhYTIyOTEwMGJlZjExYWFlNGU0NjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-04T09:57:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-04T09:57:11Z"}, "message": "Merge #9485\n\n9485: minor: style r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e927fa3180c0e299e6bf23bed6267d6d7f236640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e927fa3180c0e299e6bf23bed6267d6d7f236640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/108b56f354f1f5647bdaa229100bef11aae4e464", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg4YX3CRBK7hj4Ov3rIwAA8fsIAFP/y0DlkvdrtECHoQaJ5hUj\n13dz0O+90pSIFt8mn95I0Q/+epC09+GbOqiXY/LTEbKjGMHEmxrMGtPr9cBIN31f\n9NcIwG3RYqCsX5KOlraLRT7q473q4In4uBn+Ep7GXZ+n6jmCUU20kT0Gw4fxFaeb\ndORxQVwHbPMX9H5IuHDzwNgUBQ6Mx5VkIn7KNqdzVpWR/OjMVGygnqpfZuAZPSf/\n2fMq2xrPy6v9OvM9L/wn4vbxq2O43wm3y0DwySK9FnYx/G3sDOD3CiwczXw3VMcr\nvnDChQU9ML9sgtDfRS9ZsNEr7SW8yB+zPn65L3uattMIaQoYi6JYN0GMZRuy0as=\n=00nW\n-----END PGP SIGNATURE-----\n", "payload": "tree e927fa3180c0e299e6bf23bed6267d6d7f236640\nparent 775a85acb8e782d0afa90a18b389d14d578f2f0e\nparent 3be9ebe2c3726c7efc77ebdddb4445f7aff4260e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625392631 +0000\ncommitter GitHub <noreply@github.com> 1625392631 +0000\n\nMerge #9485\n\n9485: minor: style r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/108b56f354f1f5647bdaa229100bef11aae4e464", "html_url": "https://github.com/rust-lang/rust/commit/108b56f354f1f5647bdaa229100bef11aae4e464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/108b56f354f1f5647bdaa229100bef11aae4e464/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775a85acb8e782d0afa90a18b389d14d578f2f0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/775a85acb8e782d0afa90a18b389d14d578f2f0e", "html_url": "https://github.com/rust-lang/rust/commit/775a85acb8e782d0afa90a18b389d14d578f2f0e"}, {"sha": "3be9ebe2c3726c7efc77ebdddb4445f7aff4260e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3be9ebe2c3726c7efc77ebdddb4445f7aff4260e", "html_url": "https://github.com/rust-lang/rust/commit/3be9ebe2c3726c7efc77ebdddb4445f7aff4260e"}], "stats": {"total": 106, "additions": 70, "deletions": 36}, "files": [{"sha": "c6146a9ebb8803db19a1cf21e10a0a07e8079a3b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/108b56f354f1f5647bdaa229100bef11aae4e464/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/108b56f354f1f5647bdaa229100bef11aae4e464/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=108b56f354f1f5647bdaa229100bef11aae4e464", "patch": "@@ -203,30 +203,33 @@ pub(crate) fn completion_item(\n     item: CompletionItem,\n ) -> Vec<lsp_types::CompletionItem> {\n     let mut additional_text_edits = Vec::new();\n-    let mut text_edit = None;\n+\n     // LSP does not allow arbitrary edits in completion, so we have to do a\n     // non-trivial mapping here.\n-    let source_range = item.source_range();\n-    for indel in item.text_edit().iter() {\n-        if indel.delete.contains_range(source_range) {\n-            text_edit = Some(if indel.delete == source_range {\n-                self::completion_text_edit(line_index, insert_replace_support, indel.clone())\n+    let text_edit = {\n+        let mut text_edit = None;\n+        let source_range = item.source_range();\n+        for indel in item.text_edit().iter() {\n+            if indel.delete.contains_range(source_range) {\n+                text_edit = Some(if indel.delete == source_range {\n+                    self::completion_text_edit(line_index, insert_replace_support, indel.clone())\n+                } else {\n+                    assert!(source_range.end() == indel.delete.end());\n+                    let range1 = TextRange::new(indel.delete.start(), source_range.start());\n+                    let range2 = source_range;\n+                    let indel1 = Indel::replace(range1, String::new());\n+                    let indel2 = Indel::replace(range2, indel.insert.clone());\n+                    additional_text_edits.push(self::text_edit(line_index, indel1));\n+                    self::completion_text_edit(line_index, insert_replace_support, indel2)\n+                })\n             } else {\n-                assert!(source_range.end() == indel.delete.end());\n-                let range1 = TextRange::new(indel.delete.start(), source_range.start());\n-                let range2 = source_range;\n-                let indel1 = Indel::replace(range1, String::new());\n-                let indel2 = Indel::replace(range2, indel.insert.clone());\n-                additional_text_edits.push(self::text_edit(line_index, indel1));\n-                self::completion_text_edit(line_index, insert_replace_support, indel2)\n-            })\n-        } else {\n-            assert!(source_range.intersect(indel.delete).is_none());\n-            let text_edit = self::text_edit(line_index, indel.clone());\n-            additional_text_edits.push(text_edit);\n+                assert!(source_range.intersect(indel.delete).is_none());\n+                let text_edit = self::text_edit(line_index, indel.clone());\n+                additional_text_edits.push(text_edit);\n+            }\n         }\n-    }\n-    let text_edit = text_edit.unwrap();\n+        text_edit.unwrap()\n+    };\n \n     let mut lsp_item = lsp_types::CompletionItem {\n         label: item.label().to_string(),\n@@ -240,20 +243,6 @@ pub(crate) fn completion_item(\n         ..Default::default()\n     };\n \n-    fn set_score(res: &mut lsp_types::CompletionItem, relevance: CompletionRelevance) {\n-        if relevance.is_relevant() {\n-            res.preselect = Some(true);\n-        }\n-        // The relevance needs to be inverted to come up with a sort score\n-        // because the client will sort ascending.\n-        let sort_score = relevance.score() ^ 0xFF_FF_FF_FF;\n-        // Zero pad the string to ensure values can be properly sorted\n-        // by the client. Hex format is used because it is easier to\n-        // visually compare very large values, which the sort text\n-        // tends to be since it is the opposite of the score.\n-        res.sort_text = Some(format!(\"{:08x}\", sort_score));\n-    }\n-\n     set_score(&mut lsp_item, item.relevance());\n \n     if item.deprecated() {\n@@ -285,7 +274,22 @@ pub(crate) fn completion_item(\n     for lsp_item in res.iter_mut() {\n         lsp_item.insert_text_format = Some(insert_text_format(item.insert_text_format()));\n     }\n-    res\n+\n+    return res;\n+\n+    fn set_score(res: &mut lsp_types::CompletionItem, relevance: CompletionRelevance) {\n+        if relevance.is_relevant() {\n+            res.preselect = Some(true);\n+        }\n+        // The relevance needs to be inverted to come up with a sort score\n+        // because the client will sort ascending.\n+        let sort_score = relevance.score() ^ 0xFF_FF_FF_FF;\n+        // Zero pad the string to ensure values can be properly sorted\n+        // by the client. Hex format is used because it is easier to\n+        // visually compare very large values, which the sort text\n+        // tends to be since it is the opposite of the score.\n+        res.sort_text = Some(format!(\"{:08x}\", sort_score));\n+    }\n }\n \n pub(crate) fn signature_help("}, {"sha": "f56f36e71c934019bdc2ef28b40b467dfd2734ac", "filename": "docs/dev/style.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/108b56f354f1f5647bdaa229100bef11aae4e464/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/108b56f354f1f5647bdaa229100bef11aae4e464/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=108b56f354f1f5647bdaa229100bef11aae4e464", "patch": "@@ -891,7 +891,6 @@ let buf = {\n };\n \n // BAD\n-\n let buf = prepare_buf(&mut arena, item);\n \n ...\n@@ -909,6 +908,37 @@ Exception: if you want to make use of `return` or `?`.\n A block serves just as well to delineate a bit of logic, but has access to all the context.\n Re-using originally single-purpose function often leads to bad coupling.\n \n+## Local Helper Functions\n+\n+Put nested helper functions at the end of the enclosing functions\n+(this requires using return statement).\n+Don't nest more than one level deep.\n+\n+```rust\n+// GOOD\n+fn dfs(graph: &Graph, v: Vertex) -> usize {\n+    let mut visited = FxHashSet::default();\n+    return go(graph, &mut visited, v);\n+\n+    fn go(graph: &Graph, visited: &mut FxHashSet<Vertex>, v: usize) -> usize {\n+        ...\n+    }\n+}\n+\n+// BAD\n+fn dfs(graph: &Graph, v: Vertex) -> usize {\n+    fn go(graph: &Graph, visited: &mut FxHashSet<Vertex>, v: usize) -> usize {\n+        ...\n+    }\n+\n+    let mut visited = FxHashSet::default();\n+    go(graph, &mut visited, v)\n+}\n+\n+```\n+\n+**Rationale:** consistency, improved top-down readability.\n+\n ## Helper Variables\n \n Introduce helper variables freely, especially for multiline conditions:"}]}