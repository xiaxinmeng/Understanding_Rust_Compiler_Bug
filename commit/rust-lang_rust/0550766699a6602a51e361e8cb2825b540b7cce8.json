{"sha": "0550766699a6602a51e361e8cb2825b540b7cce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NTA3NjY2OTlhNjYwMmE1MWUzNjFlOGNiMjgyNWI1NDBiN2NjZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T00:44:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T00:44:58Z"}, "message": "Auto merge of #60140 - euclio:pulldown-cmark, r=GuillaumeGomez\n\nupgrade rustdoc's pulldown-cmark to 0.4.1\n\nFixes #59194.", "tree": {"sha": "5b4a93956163f26c6bbbd481b0e2915102df73ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b4a93956163f26c6bbbd481b0e2915102df73ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0550766699a6602a51e361e8cb2825b540b7cce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0550766699a6602a51e361e8cb2825b540b7cce8", "html_url": "https://github.com/rust-lang/rust/commit/0550766699a6602a51e361e8cb2825b540b7cce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0550766699a6602a51e361e8cb2825b540b7cce8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "004c549a73122a9867de4f64ac727deb95d426a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/004c549a73122a9867de4f64ac727deb95d426a5", "html_url": "https://github.com/rust-lang/rust/commit/004c549a73122a9867de4f64ac727deb95d426a5"}, {"sha": "303016485b63aeeaa4ad00a2102150badad3b289", "url": "https://api.github.com/repos/rust-lang/rust/commits/303016485b63aeeaa4ad00a2102150badad3b289", "html_url": "https://github.com/rust-lang/rust/commit/303016485b63aeeaa4ad00a2102150badad3b289"}], "stats": {"total": 237, "additions": 113, "deletions": 124}, "files": [{"sha": "b62c7ff90970e2614e1fc70a8773609ba4b6d465", "filename": "Cargo.lock", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0550766699a6602a51e361e8cb2825b540b7cce8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0550766699a6602a51e361e8cb2825b540b7cce8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0550766699a6602a51e361e8cb2825b540b7cce8", "patch": "@@ -10,7 +10,7 @@ name = \"aho-corasick\"\n version = \"0.6.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -972,7 +972,7 @@ name = \"fwdansi\"\n version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1027,7 +1027,7 @@ dependencies = [\n  \"aho-corasick 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1143,7 +1143,7 @@ dependencies = [\n  \"globset 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1441,7 +1441,7 @@ dependencies = [\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1469,7 +1469,7 @@ dependencies = [\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1494,13 +1494,8 @@ dependencies = [\n \n [[package]]\n name = \"memchr\"\n-version = \"2.1.1\"\n+version = \"2.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n \n [[package]]\n name = \"memmap\"\n@@ -2004,6 +1999,16 @@ dependencies = [\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"pulldown-cmark\"\n+version = \"0.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicase 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"quick-error\"\n version = \"1.2.2\"\n@@ -2169,7 +2174,7 @@ version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2181,7 +2186,7 @@ version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3015,7 +3020,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"minifier 0.0.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -3774,6 +3779,14 @@ name = \"ucd-util\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicase\"\n+version = \"2.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n@@ -4132,7 +4145,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum mdbook 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b5a8d7e341ceee5db3882a06078d42661ddcfa2b3687319cc5da76ec4e782f\"\n \"checksum mdbook 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ba0d44cb4089c741b9a91f3e5218298a40699c2f3a070a85014eed290c60819\"\n \"checksum measureme 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36bb2b263a6795d352035024d6b30ce465bb79a5e5280d74c3b5f8464c657bcc\"\n-\"checksum memchr 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a3eb002f0535929f1199681417029ebea04aadc0c7a4224b46be99c7f5d6a16\"\n+\"checksum memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2efc7bc57c883d4a4d6e3246905283d8dae951bb3bd32f49d6ef297f546e1c39\"\n \"checksum memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n \"checksum minifier 0.0.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f4950cb2617b1933e2da0446e864dfe0d6a22c22ff72297996c46e6a63b210b\"\n@@ -4184,6 +4197,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum proptest 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24f5844db2f839e97e3021980975f6ebf8691d9b9b2ca67ed3feb38dc3edb52c\"\n \"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\"\n \"checksum pulldown-cmark 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eef52fac62d0ea7b9b4dc7da092aa64ea7ec3d90af6679422d3d7e0e14b6ee15\"\n+\"checksum pulldown-cmark 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1b74cc784b038a9921fd1a48310cc2e238101aa8ae0b94201e2d85121dd68b5\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n@@ -4293,6 +4307,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"612d636f949607bdf9b123b4a6f6d966dedf3ff669f7f045890d3a4a73948169\"\n \"checksum ucd-trie 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71a9c5b1fe77426cf144cc30e49e955270f5086e31a6441dfa8b32efc09b9d77\"\n \"checksum ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"535c204ee4d8434478593480b8f86ab45ec9aae0e83c568ca81abf0fd0e88f86\"\n+\"checksum unicase 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41d17211f887da8e4a70a45b9536f26fc5de166b81e2d5d80de4a17fd22553bd\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a0180bc61fc5a987082bfa111f4cc95c4caff7f9799f3e46df09163a937aa25\"\n \"checksum unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1\""}, {"sha": "4941867d8dfcd48f812f53654c12935408c7b8cd", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=0550766699a6602a51e361e8cb2825b540b7cce8", "patch": "@@ -9,7 +9,7 @@ name = \"rustdoc\"\n path = \"lib.rs\"\n \n [dependencies]\n-pulldown-cmark = { version = \"0.1.2\", default-features = false }\n+pulldown-cmark = { version = \"0.4.1\", default-features = false }\n minifier = \"0.0.29\"\n tempfile = \"3\"\n parking_lot = \"0.7\""}, {"sha": "a3b041c6954c58b7c93eb524971652b1d7781952", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 37, "deletions": 80, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=0550766699a6602a51e361e8cb2825b540b7cce8", "patch": "@@ -33,8 +33,11 @@ use crate::html::toc::TocBuilder;\n use crate::html::highlight;\n use crate::test;\n \n-use pulldown_cmark::{html, Event, Tag, Parser};\n-use pulldown_cmark::{Options, OPTION_ENABLE_FOOTNOTES, OPTION_ENABLE_TABLES};\n+use pulldown_cmark::{html, CowStr, Event, Options, Parser, Tag};\n+\n+fn opts() -> Options {\n+    Options::ENABLE_TABLES | Options::ENABLE_FOOTNOTES\n+}\n \n /// A unit struct which has the `fmt::Display` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n@@ -297,12 +300,11 @@ impl<'a, 'b, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, 'b, I>\n \n     fn next(&mut self) -> Option<Self::Item> {\n         let event = self.inner.next();\n-        if let Some(Event::Start(Tag::Link(dest, text))) = event {\n-            if let Some(&(_, ref replace)) = self.links.into_iter().find(|link| &*link.0 == &*dest)\n-            {\n-                Some(Event::Start(Tag::Link(replace.to_owned().into(), text)))\n+        if let Some(Event::Start(Tag::Link(kind, dest, text))) = event {\n+            if let Some(&(_, ref replace)) = self.links.iter().find(|link| link.0 == *dest) {\n+                Some(Event::Start(Tag::Link(kind, replace.to_owned().into(), text)))\n             } else {\n-                Some(Event::Start(Tag::Link(dest, text)))\n+                Some(Event::Start(Tag::Link(kind, dest, text)))\n             }\n         } else {\n             event\n@@ -393,7 +395,7 @@ fn check_if_allowed_tag(t: &Tag<'_>) -> bool {\n         | Tag::Emphasis\n         | Tag::Strong\n         | Tag::Code\n-        | Tag::Link(_, _)\n+        | Tag::Link(..)\n         | Tag::BlockQuote => true,\n         _ => false,\n     }\n@@ -520,63 +522,39 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n     }\n }\n \n-pub struct TestableCodeError(());\n-\n-impl fmt::Display for TestableCodeError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"invalid start of a new code block\")\n-    }\n-}\n-\n-pub fn find_testable_code<T: test::Tester>(\n-    doc: &str,\n-    tests: &mut T,\n-    error_codes: ErrorCodes,\n-) -> Result<(), TestableCodeError> {\n+pub fn find_testable_code<T: test::Tester>(doc: &str, tests: &mut T, error_codes: ErrorCodes) {\n     let mut parser = Parser::new(doc);\n     let mut prev_offset = 0;\n     let mut nb_lines = 0;\n     let mut register_header = None;\n-    'main: while let Some(event) = parser.next() {\n+    while let Some(event) = parser.next() {\n         match event {\n             Event::Start(Tag::CodeBlock(s)) => {\n+                let offset = parser.get_offset();\n+\n                 let block_info = if s.is_empty() {\n                     LangString::all_false()\n                 } else {\n                     LangString::parse(&*s, error_codes)\n                 };\n                 if !block_info.rust {\n-                    continue\n+                    continue;\n                 }\n                 let mut test_s = String::new();\n-                let mut offset = None;\n-                loop {\n-                    let event = parser.next();\n-                    if let Some(event) = event {\n-                        match event {\n-                            Event::End(Tag::CodeBlock(_)) => break,\n-                            Event::Text(ref s) => {\n-                                test_s.push_str(s);\n-                                if offset.is_none() {\n-                                    offset = Some(parser.get_offset());\n-                                }\n-                            }\n-                            _ => {}\n-                        }\n-                    } else {\n-                        break 'main;\n-                    }\n-                }\n-                if let Some(offset) = offset {\n-                    let lines = test_s.lines().map(|l| map_line(l).for_code());\n-                    let text = lines.collect::<Vec<Cow<'_, str>>>().join(\"\\n\");\n-                    nb_lines += doc[prev_offset..offset].lines().count();\n-                    let line = tests.get_line() + (nb_lines - 1);\n-                    tests.add_test(text, block_info, line);\n-                    prev_offset = offset;\n-                } else {\n-                    return Err(TestableCodeError(()));\n+\n+                while let Some(Event::Text(s)) = parser.next() {\n+                    test_s.push_str(&s);\n                 }\n+\n+                let text = test_s\n+                    .lines()\n+                    .map(|l| map_line(l).for_code())\n+                    .collect::<Vec<Cow<'_, str>>>()\n+                    .join(\"\\n\");\n+                nb_lines += doc[prev_offset..offset].lines().count();\n+                let line = tests.get_line() + nb_lines;\n+                tests.add_test(text, block_info, line);\n+                prev_offset = offset;\n             }\n             Event::Start(Tag::Header(level)) => {\n                 register_header = Some(level as u32);\n@@ -593,7 +571,6 @@ pub fn find_testable_code<T: test::Tester>(\n             _ => {}\n         }\n     }\n-    Ok(())\n }\n \n #[derive(Eq, PartialEq, Clone, Debug)]\n@@ -687,10 +664,6 @@ impl<'a> fmt::Display for Markdown<'a> {\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n-        let mut opts = Options::empty();\n-        opts.insert(OPTION_ENABLE_TABLES);\n-        opts.insert(OPTION_ENABLE_FOOTNOTES);\n-\n         let replacer = |_: &str, s: &str| {\n             if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n                 Some((replace.clone(), s.to_owned()))\n@@ -699,7 +672,7 @@ impl<'a> fmt::Display for Markdown<'a> {\n             }\n         };\n \n-        let p = Parser::new_with_broken_link_callback(md, opts, Some(&replacer));\n+        let p = Parser::new_with_broken_link_callback(md, opts(), Some(&replacer));\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n@@ -718,11 +691,7 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n         let MarkdownWithToc(md, ref ids, codes) = *self;\n         let mut ids = ids.borrow_mut();\n \n-        let mut opts = Options::empty();\n-        opts.insert(OPTION_ENABLE_TABLES);\n-        opts.insert(OPTION_ENABLE_FOOTNOTES);\n-\n-        let p = Parser::new_ext(md, opts);\n+        let p = Parser::new_ext(md, opts());\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n@@ -748,11 +717,7 @@ impl<'a> fmt::Display for MarkdownHtml<'a> {\n \n         // This is actually common enough to special-case\n         if md.is_empty() { return Ok(()) }\n-        let mut opts = Options::empty();\n-        opts.insert(OPTION_ENABLE_TABLES);\n-        opts.insert(OPTION_ENABLE_FOOTNOTES);\n-\n-        let p = Parser::new_ext(md, opts);\n+        let p = Parser::new_ext(md, opts());\n \n         // Treat inline HTML as plain text.\n         let p = p.map(|event| match event {\n@@ -868,10 +833,6 @@ pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n         return vec![];\n     }\n \n-    let mut opts = Options::empty();\n-    opts.insert(OPTION_ENABLE_TABLES);\n-    opts.insert(OPTION_ENABLE_FOOTNOTES);\n-\n     let mut links = vec![];\n     let shortcut_links = RefCell::new(vec![]);\n \n@@ -894,20 +855,19 @@ pub fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n             shortcut_links.borrow_mut().push((s.to_owned(), locate(s)));\n             None\n         };\n-        let p = Parser::new_with_broken_link_callback(md, opts,\n-            Some(&push));\n+        let p = Parser::new_with_broken_link_callback(md, opts(), Some(&push));\n \n         // There's no need to thread an IdMap through to here because\n         // the IDs generated aren't going to be emitted anywhere.\n         let mut ids = IdMap::new();\n         let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids));\n \n         for ev in iter {\n-            if let Event::Start(Tag::Link(dest, _)) = ev {\n+            if let Event::Start(Tag::Link(_, dest, _)) = ev {\n                 debug!(\"found link: {}\", dest);\n                 links.push(match dest {\n-                    Cow::Borrowed(s) => (s.to_owned(), locate(s)),\n-                    Cow::Owned(s) => (s, None),\n+                    CowStr::Borrowed(s) => (s.to_owned(), locate(s)),\n+                    s @ CowStr::Boxed(..) | s @ CowStr::Inlined(..) => (s.into_string(), None),\n                 });\n             }\n         }\n@@ -939,10 +899,7 @@ crate fn rust_code_blocks(md: &str) -> Vec<RustCodeBlock> {\n         return code_blocks;\n     }\n \n-    let mut opts = Options::empty();\n-    opts.insert(OPTION_ENABLE_TABLES);\n-    opts.insert(OPTION_ENABLE_FOOTNOTES);\n-    let mut p = Parser::new_ext(md, opts);\n+    let mut p = Parser::new_ext(md, opts());\n \n     let mut code_block_start = 0;\n     let mut code_start = 0;\n@@ -1013,7 +970,7 @@ crate fn rust_code_blocks(md: &str) -> Vec<RustCodeBlock> {\n                         end: code_end,\n                     },\n                     syntax: if !syntax.is_empty() {\n-                        Some(syntax.into_owned())\n+                        Some(syntax.into_string())\n                     } else {\n                         None\n                     },"}, {"sha": "c496dde8426c0fd8ba84bf64b8b43e0e5954fbe6", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=0550766699a6602a51e361e8cb2825b540b7cce8", "patch": "@@ -143,10 +143,9 @@ pub fn test(mut options: Options, diag: &errors::Handler) -> i32 {\n                                        options.linker, options.edition, options.persist_doctests);\n     collector.set_position(DUMMY_SP);\n     let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n-    let res = find_testable_code(&input_str, &mut collector, codes);\n-    if let Err(err) = res {\n-        diag.span_warn(DUMMY_SP, &err.to_string());\n-    }\n+\n+    find_testable_code(&input_str, &mut collector, codes);\n+\n     options.test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&options.test_args, collector.tests,\n                        testing::Options::new().display_output(options.display_warnings));"}, {"sha": "99aca0634710fdc88ac688cf1ffb45bac9ce7cba", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=0550766699a6602a51e361e8cb2825b540b7cce8", "patch": "@@ -333,24 +333,24 @@ pub fn look_for_tests<'tcx>(\n         found_tests: 0,\n     };\n \n-    if find_testable_code(&dox, &mut tests, ErrorCodes::No).is_ok() {\n-        if check_missing_code == true && tests.found_tests == 0 {\n-            let mut diag = cx.tcx.struct_span_lint_hir(\n-                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n-                hir::CRATE_HIR_ID,\n-                span_of_attrs(&item.attrs),\n-                \"Missing code example in this documentation\");\n-            diag.emit();\n-        } else if check_missing_code == false &&\n-                  tests.found_tests > 0 &&\n-                  !cx.renderinfo.borrow().access_levels.is_doc_reachable(item.def_id) {\n-            let mut diag = cx.tcx.struct_span_lint_hir(\n-                lint::builtin::PRIVATE_DOC_TESTS,\n-                hir::CRATE_HIR_ID,\n-                span_of_attrs(&item.attrs),\n-                \"Documentation test in private item\");\n-            diag.emit();\n-        }\n+    find_testable_code(&dox, &mut tests, ErrorCodes::No);\n+\n+    if check_missing_code == true && tests.found_tests == 0 {\n+        let mut diag = cx.tcx.struct_span_lint_hir(\n+            lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n+            hir::CRATE_HIR_ID,\n+            span_of_attrs(&item.attrs),\n+            \"Missing code example in this documentation\");\n+        diag.emit();\n+    } else if check_missing_code == false &&\n+              tests.found_tests > 0 &&\n+              !cx.renderinfo.borrow().access_levels.is_doc_reachable(item.def_id) {\n+        let mut diag = cx.tcx.struct_span_lint_hir(\n+            lint::builtin::PRIVATE_DOC_TESTS,\n+            hir::CRATE_HIR_ID,\n+            span_of_attrs(&item.attrs),\n+            \"Documentation test in private item\");\n+        diag.emit();\n     }\n }\n "}, {"sha": "849298698af2cf371becef395c75568e43b696fb", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=0550766699a6602a51e361e8cb2825b540b7cce8", "patch": "@@ -796,11 +796,7 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         // anything else, this will combine them for us.\n         if let Some(doc) = attrs.collapsed_doc_value() {\n             self.collector.set_position(attrs.span.unwrap_or(DUMMY_SP));\n-            let res = markdown::find_testable_code(&doc, self.collector, self.codes);\n-            if let Err(err) = res {\n-                self.sess.diagnostic().span_warn(attrs.span.unwrap_or(DUMMY_SP),\n-                    &err.to_string());\n-            }\n+            markdown::find_testable_code(&doc, self.collector, self.codes);\n         }\n \n         nested(self);"}, {"sha": "c9d41f0ec3b780a1926990500d8c96819c49b70b", "filename": "src/test/run-make-fulldeps/rustdoc-error-lines/Makefile", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2FMakefile?ref=0550766699a6602a51e361e8cb2825b540b7cce8", "patch": "@@ -5,4 +5,9 @@\n \n all:\n \t$(RUSTDOC) --test input.rs > $(TMPDIR)/output || true\n+\t$(CGREP) 'input.rs - foo (line 5)' < $(TMPDIR)/output\n \t$(CGREP) 'input.rs:7:15' < $(TMPDIR)/output\n+\t$(CGREP) 'input.rs - bar (line 15)' < $(TMPDIR)/output\n+\t$(CGREP) 'input.rs:17:15' < $(TMPDIR)/output\n+\t$(CGREP) 'input.rs - bar (line 24)' < $(TMPDIR)/output\n+\t$(CGREP) 'input.rs:26:15' < $(TMPDIR)/output"}, {"sha": "2d29fa89110bb3f9906dd5dbfd2736b8e8a44cbb", "filename": "src/test/run-make-fulldeps/rustdoc-error-lines/input.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0550766699a6602a51e361e8cb2825b540b7cce8/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-error-lines%2Finput.rs?ref=0550766699a6602a51e361e8cb2825b540b7cce8", "patch": "@@ -9,3 +9,20 @@\n pub fn foo() {\n \n }\n+\n+/// Add some text around the test...\n+///\n+/// ```rust\n+/// #![feature(nll)]\n+/// let x: char = 1;\n+/// ```\n+///\n+/// ...to make sure that the line number is still correct.\n+///\n+/// Let's also add a second test in the same doc comment.\n+///\n+/// ```rust\n+/// #![feature(nll)]\n+/// let x: char = 1;\n+/// ```\n+pub fn bar() {}"}]}