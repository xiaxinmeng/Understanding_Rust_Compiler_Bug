{"sha": "ac4f69bea4d41dffe9d56fb4117bd244a6b6acbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNGY2OWJlYTRkNDFkZmZlOWQ1NmZiNDExN2JkMjQ0YTZiNmFjYmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-04-03T15:50:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-04-04T13:31:49Z"}, "message": "miri: add public alloc_kind accessor", "tree": {"sha": "4ce5238c3d3df568832e32f658b9104b59653358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ce5238c3d3df568832e32f658b9104b59653358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac4f69bea4d41dffe9d56fb4117bd244a6b6acbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4f69bea4d41dffe9d56fb4117bd244a6b6acbe", "html_url": "https://github.com/rust-lang/rust/commit/ac4f69bea4d41dffe9d56fb4117bd244a6b6acbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac4f69bea4d41dffe9d56fb4117bd244a6b6acbe/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bb8935136098dde90d6dcbf24237fd7e2fe569f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb8935136098dde90d6dcbf24237fd7e2fe569f", "html_url": "https://github.com/rust-lang/rust/commit/0bb8935136098dde90d6dcbf24237fd7e2fe569f"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "4823f654055f997b5fadea49f722fd1902bea494", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac4f69bea4d41dffe9d56fb4117bd244a6b6acbe/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4f69bea4d41dffe9d56fb4117bd244a6b6acbe/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=ac4f69bea4d41dffe9d56fb4117bd244a6b6acbe", "patch": "@@ -352,6 +352,10 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             .ok_or(EvalErrorKind::ExecuteMemory.into())\n     }\n \n+    pub fn get_alloc_kind(&self, id: AllocId) -> Option<MemoryKind<M::MemoryKinds>> {\n+        self.alloc_kind.get(&id).cloned()\n+    }\n+\n     /// For debugging, print an allocation and all allocations it points to, recursively.\n     pub fn dump_alloc(&self, id: AllocId) {\n         self.dump_allocs(vec![id]);"}]}