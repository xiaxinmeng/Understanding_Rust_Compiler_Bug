{"sha": "d5518802677d4701185b5cd3b9df4b263fc864b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NTE4ODAyNjc3ZDQ3MDExODViNWNkM2I5ZGY0YjI2M2ZjODY0YjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-16T23:18:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Inline visit_expr_with_let_maybe_allowed.", "tree": {"sha": "b2e5729a1dffe73a2e19a8ad846f655b8927892a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2e5729a1dffe73a2e19a8ad846f655b8927892a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5518802677d4701185b5cd3b9df4b263fc864b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5518802677d4701185b5cd3b9df4b263fc864b2", "html_url": "https://github.com/rust-lang/rust/commit/d5518802677d4701185b5cd3b9df4b263fc864b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5518802677d4701185b5cd3b9df4b263fc864b2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92587e41d9096bc9eb74f40b93422026a8a57d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92587e41d9096bc9eb74f40b93422026a8a57d4e", "html_url": "https://github.com/rust-lang/rust/commit/92587e41d9096bc9eb74f40b93422026a8a57d4e"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "2aa8d5113ff7df688cd33f3f56122f51b250990a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 25, "deletions": 37, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d5518802677d4701185b5cd3b9df4b263fc864b2/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5518802677d4701185b5cd3b9df4b263fc864b2/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d5518802677d4701185b5cd3b9df4b263fc864b2", "patch": "@@ -335,40 +335,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    /// Visits the `expr` and adjusts whether `let $pat = $expr` is allowed in decendants.\n-    /// Returns whether we walked into `expr` or not.\n-    /// If we did, walking should not happen again.\n-    fn visit_expr_with_let_maybe_allowed(&mut self, expr: &'a Expr, let_allowed: bool) -> bool {\n-        match &expr.node {\n-            // Assuming the context permits, `($expr)` does not impose additional constraints.\n-            ExprKind::Paren(_) => {\n-                self.with_let_allowed(let_allowed, |this, _| visit::walk_expr(this, expr));\n-            }\n-            // Assuming the context permits,\n-            // l && r` allows decendants in `l` and `r` to be `let` expressions.\n-            ExprKind::Binary(op, ..) if op.node == BinOpKind::And => {\n-                self.with_let_allowed(let_allowed, |this, _| visit::walk_expr(this, expr));\n-            }\n-            // However, we do allow it in the condition of the `if` expression.\n-            // We do not allow `let` in `then` and `opt_else` directly.\n-            ExprKind::If(cond, then, opt_else) => {\n-                self.visit_block(then);\n-                walk_list!(self, visit_expr, opt_else);\n-                self.with_let_allowed(true, |this, _| this.visit_expr(cond));\n-            }\n-            // The same logic applies to `While`.\n-            ExprKind::While(cond, then, opt_label) => {\n-                walk_list!(self, visit_label, opt_label);\n-                self.visit_block(then);\n-                self.with_let_allowed(true, |this, _| this.visit_expr(cond));\n-            }\n-            // Don't walk into `expr` and defer further checks to the caller.\n-            _ => return false,\n-        }\n-\n-        true\n-    }\n-\n     /// Emits an error banning the `let` expression provided.\n     fn ban_let_expr(&self, expr: &'a Expr) {\n         self.err_handler()\n@@ -509,9 +475,31 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 ExprKind::Let(_, _) if !let_allowed => {\n                     this.ban_let_expr(expr);\n                 }\n-                _ if this.visit_expr_with_let_maybe_allowed(&expr, let_allowed) => {\n-                    // Prevent `walk_expr` to happen since we've already done that.\n-                    return;\n+                // Assuming the context permits, `($expr)` does not impose additional constraints.\n+                ExprKind::Paren(_) => {\n+                    this.with_let_allowed(let_allowed, |this, _| visit::walk_expr(this, expr));\n+                    return; // We've already walked into `expr`.\n+                }\n+                // Assuming the context permits,\n+                // l && r` allows decendants in `l` and `r` to be `let` expressions.\n+                ExprKind::Binary(op, ..) if op.node == BinOpKind::And => {\n+                    this.with_let_allowed(let_allowed, |this, _| visit::walk_expr(this, expr));\n+                    return; // We've already walked into `expr`.\n+                }\n+                // However, we do allow it in the condition of the `if` expression.\n+                // We do not allow `let` in `then` and `opt_else` directly.\n+                ExprKind::If(cond, then, opt_else) => {\n+                    this.visit_block(then);\n+                    walk_list!(this, visit_expr, opt_else);\n+                    this.with_let_allowed(true, |this, _| this.visit_expr(cond));\n+                    return; // We've already walked into `expr`.\n+                }\n+                // The same logic applies to `While`.\n+                ExprKind::While(cond, then, opt_label) => {\n+                    walk_list!(this, visit_label, opt_label);\n+                    this.visit_block(then);\n+                    this.with_let_allowed(true, |this, _| this.visit_expr(cond));\n+                    return; // We've already walked into `expr`.\n                 }\n                 ExprKind::Closure(_, _, _, fn_decl, _, _) => {\n                     this.check_fn_decl(fn_decl);"}, {"sha": "ead5d543bec7d80368d762174b3c9bed7d3642d7", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5518802677d4701185b5cd3b9df4b263fc864b2/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5518802677d4701185b5cd3b9df4b263fc864b2/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=d5518802677d4701185b5cd3b9df4b263fc864b2", "patch": "@@ -1491,6 +1491,7 @@ mod tests {\n             edition: Edition::from_session(),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n             param_attr_spans: Lock::new(Vec::new()),\n+            let_chains_spans: Lock::new(Vec::new()),\n         }\n     }\n "}]}