{"sha": "6774e7aa92f5866657f778f08261c0fe219f01a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NzRlN2FhOTJmNTg2NjY1N2Y3NzhmMDgyNjFjMGZlMjE5ZjAxYTg=", "commit": {"author": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2016-12-03T17:58:21Z"}, "committer": {"name": "S\u00e9bastien Marie", "email": "semarie@users.noreply.github.com", "date": "2016-12-04T06:18:56Z"}, "message": "OpenBSD under x86 has particular ABI for returning a struct.\n\nIt is like OSX or Windows: small structs are returned as integers.", "tree": {"sha": "e72778745b73b836044becffcec466fa16bc9b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e72778745b73b836044becffcec466fa16bc9b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6774e7aa92f5866657f778f08261c0fe219f01a8", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6774e7aa92f5866657f778f08261c0fe219f01a8", "html_url": "https://github.com/rust-lang/rust/commit/6774e7aa92f5866657f778f08261c0fe219f01a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6774e7aa92f5866657f778f08261c0fe219f01a8/comments", "author": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semarie", "id": 8948701, "node_id": "MDQ6VXNlcjg5NDg3MDE=", "avatar_url": "https://avatars.githubusercontent.com/u/8948701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semarie", "html_url": "https://github.com/semarie", "followers_url": "https://api.github.com/users/semarie/followers", "following_url": "https://api.github.com/users/semarie/following{/other_user}", "gists_url": "https://api.github.com/users/semarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/semarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semarie/subscriptions", "organizations_url": "https://api.github.com/users/semarie/orgs", "repos_url": "https://api.github.com/users/semarie/repos", "events_url": "https://api.github.com/users/semarie/events{/privacy}", "received_events_url": "https://api.github.com/users/semarie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ebf5a0a7b08886d99c31bed7cf989f9af6c442", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ebf5a0a7b08886d99c31bed7cf989f9af6c442", "html_url": "https://github.com/rust-lang/rust/commit/53ebf5a0a7b08886d99c31bed7cf989f9af6c442"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "351d469ea2809c5914b837194fb3665344ad9301", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6774e7aa92f5866657f778f08261c0fe219f01a8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6774e7aa92f5866657f778f08261c0fe219f01a8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=6774e7aa92f5866657f778f08261c0fe219f01a8", "patch": "@@ -302,6 +302,9 @@ pub struct TargetOptions {\n     pub staticlib_suffix: String,\n     /// OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".\n     pub target_family: Option<String>,\n+    /// Whether the target toolchain is like OpenBSD's.\n+    /// Only useful for compiling against OpenBSD, for configuring abi when returning a struct.\n+    pub is_like_openbsd: bool,\n     /// Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\n     /// particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n     pub is_like_osx: bool,\n@@ -406,6 +409,7 @@ impl Default for TargetOptions {\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n             target_family: None,\n+            is_like_openbsd: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n             is_like_windows: false,\n@@ -572,6 +576,7 @@ impl Target {\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n         key!(target_family, optional);\n+        key!(is_like_openbsd, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n         key!(is_like_windows, bool);\n@@ -733,6 +738,7 @@ impl ToJson for Target {\n         target_option_val!(staticlib_prefix);\n         target_option_val!(staticlib_suffix);\n         target_option_val!(target_family);\n+        target_option_val!(is_like_openbsd);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);\n         target_option_val!(is_like_windows);"}, {"sha": "1f74170e399893da9efba1030b1f731a000cb2fc", "filename": "src/librustc_back/target/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6774e7aa92f5866657f778f08261c0fe219f01a8/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6774e7aa92f5866657f778f08261c0fe219f01a8/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fopenbsd_base.rs?ref=6774e7aa92f5866657f778f08261c0fe219f01a8", "patch": "@@ -17,6 +17,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         linker_is_gnu: true,\n         has_rpath: true,\n+        is_like_openbsd: true,\n         pre_link_args: vec![\n             // GNU-style linkers will use this to omit linking to libraries\n             // which don't actually fulfill any relocations, but only for"}, {"sha": "ce85234f2034af36cb720a14a387df6065a75544", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6774e7aa92f5866657f778f08261c0fe219f01a8/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6774e7aa92f5866657f778f08261c0fe219f01a8/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=6774e7aa92f5866657f778f08261c0fe219f01a8", "patch": "@@ -25,7 +25,8 @@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n             // http://www.angelcode.com/dev/callconv/callconv.html\n             // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp\n             let t = &ccx.sess().target.target;\n-            if t.options.is_like_osx || t.options.is_like_windows {\n+            if t.options.is_like_osx || t.options.is_like_windows\n+                || t.options.is_like_openbsd {\n                 match llsize_of_alloc(ccx, fty.ret.ty) {\n                     1 => fty.ret.cast = Some(Type::i8(ccx)),\n                     2 => fty.ret.cast = Some(Type::i16(ccx)),"}]}