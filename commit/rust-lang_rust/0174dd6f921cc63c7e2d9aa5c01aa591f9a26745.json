{"sha": "0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNzRkZDZmOTIxY2M2M2M3ZTJkOWFhNWMwMWFhNTkxZjlhMjY3NDU=", "commit": {"author": {"name": "James Addison", "email": "jay@jp-hosting.net", "date": "2021-04-12T22:29:09Z"}, "committer": {"name": "James Addison", "email": "jay@jp-hosting.net", "date": "2021-04-12T22:29:09Z"}, "message": "Compiler error messages: reduce assertiveness of message E0384\n\nThis message is emitted as guidance by the compiler when a developer attempts to reassign a value to an immutable variable.  Following the message will always currently work, but it may not always be the best course of action; following the 'consider ...' messaging pattern provides a hint to the developer that it could be wise to explore other alternatives.", "tree": {"sha": "32bbfc38d809d4f2911b9a922e69e899689d6a71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32bbfc38d809d4f2911b9a922e69e899689d6a71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "html_url": "https://github.com/rust-lang/rust/commit/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/comments", "author": {"login": "jayaddison", "id": 55152140, "node_id": "MDQ6VXNlcjU1MTUyMTQw", "avatar_url": "https://avatars.githubusercontent.com/u/55152140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayaddison", "html_url": "https://github.com/jayaddison", "followers_url": "https://api.github.com/users/jayaddison/followers", "following_url": "https://api.github.com/users/jayaddison/following{/other_user}", "gists_url": "https://api.github.com/users/jayaddison/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayaddison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayaddison/subscriptions", "organizations_url": "https://api.github.com/users/jayaddison/orgs", "repos_url": "https://api.github.com/users/jayaddison/repos", "events_url": "https://api.github.com/users/jayaddison/events{/privacy}", "received_events_url": "https://api.github.com/users/jayaddison/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayaddison", "id": 55152140, "node_id": "MDQ6VXNlcjU1MTUyMTQw", "avatar_url": "https://avatars.githubusercontent.com/u/55152140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayaddison", "html_url": "https://github.com/jayaddison", "followers_url": "https://api.github.com/users/jayaddison/followers", "following_url": "https://api.github.com/users/jayaddison/following{/other_user}", "gists_url": "https://api.github.com/users/jayaddison/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayaddison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayaddison/subscriptions", "organizations_url": "https://api.github.com/users/jayaddison/orgs", "repos_url": "https://api.github.com/users/jayaddison/repos", "events_url": "https://api.github.com/users/jayaddison/events{/privacy}", "received_events_url": "https://api.github.com/users/jayaddison/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0695c9081b16077d0aed368bccaf437d77ff497", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0695c9081b16077d0aed368bccaf437d77ff497", "html_url": "https://github.com/rust-lang/rust/commit/d0695c9081b16077d0aed368bccaf437d77ff497"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "df6f196392340d2e09fdb34248be1b1961d4769a", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -1681,7 +1681,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if decl.can_be_made_mutable() {\n                     err.span_suggestion(\n                         decl.source_info.span,\n-                        \"make this binding mutable\",\n+                        \"consider making this binding mutable\",\n                         format!(\"mut {}\", name),\n                         Applicability::MachineApplicable,\n                     );"}, {"sha": "b50f6ab5deb1569624f34c9bfddcb90e72be94be", "filename": "src/test/ui/assign-imm-local-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.rs?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize;\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider making this binding mutable\n     //~| SUGGESTION mut v\n     v = 1; //~ NOTE first assignment\n     println!(\"v={}\", v);"}, {"sha": "bba5d8dffe4bd8a2a26ec38245fb7f95ad33acc8", "filename": "src/test/ui/assign-imm-local-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-imm-local-twice.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/assign-imm-local-twice.rs:7:5\n    |\n LL |     let v: isize;\n-   |         - help: make this binding mutable: `mut v`\n+   |         - help: consider making this binding mutable: `mut v`\n ...\n LL |     v = 1;\n    |     ----- first assignment to `v`"}, {"sha": "f2dec87baf08b446f558e43945e66c5de6055514", "filename": "src/test/ui/async-await/issue-61452.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -13,7 +13,7 @@ LL | pub async fn g(x: usize) {\n    |                -\n    |                |\n    |                first assignment to `x`\n-   |                help: make this binding mutable: `mut x`\n+   |                help: consider making this binding mutable: `mut x`\n LL |     x += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "74cf5a55b70ab214e31672310555b0274cea22da", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -29,7 +29,7 @@ LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n-   |             help: make this binding mutable: `mut x`\n+   |             help: consider making this binding mutable: `mut x`\n LL |         unsafe {\n LL |             llvm_asm!(\"nop\" : \"=r\"(x));\n    |                                    ^ cannot assign twice to immutable variable\n@@ -41,7 +41,7 @@ LL |         let x = 3;\n    |             -\n    |             |\n    |             first assignment to `x`\n-   |             help: make this binding mutable: `mut x`\n+   |             help: consider making this binding mutable: `mut x`\n LL |         unsafe {\n LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n    |                                    ^ cannot assign twice to immutable variable"}, {"sha": "dd22d7e2e2ed2986cfa1d023a750d91abae1936d", "filename": "src/test/ui/borrowck/borrowck-match-binding-is-assignment.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-binding-is-assignment.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -5,7 +5,7 @@ LL |         x => {\n    |         -\n    |         |\n    |         first assignment to `x`\n-   |         help: make this binding mutable: `mut x`\n+   |         help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -16,7 +16,7 @@ LL |         E::Foo(x) => {\n    |                -\n    |                |\n    |                first assignment to `x`\n-   |                help: make this binding mutable: `mut x`\n+   |                help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -27,7 +27,7 @@ LL |         S { bar: x } => {\n    |                  -\n    |                  |\n    |                  first assignment to `x`\n-   |                  help: make this binding mutable: `mut x`\n+   |                  help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -38,7 +38,7 @@ LL |         (x,) => {\n    |          -\n    |          |\n    |          first assignment to `x`\n-   |          help: make this binding mutable: `mut x`\n+   |          help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n \n@@ -49,7 +49,7 @@ LL |         [x,_,_] => {\n    |          -\n    |          |\n    |          first assignment to `x`\n-   |          help: make this binding mutable: `mut x`\n+   |          help: consider making this binding mutable: `mut x`\n LL |             x += 1;\n    |             ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "bddb0633a0b86ea716b8e244b9d11b0fc46b86f4", "filename": "src/test/ui/borrowck/immutable-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign to immutable argument `_x`\n   --> $DIR/immutable-arg.rs:2:5\n    |\n LL | fn foo(_x: u32) {\n-   |        -- help: make this binding mutable: `mut _x`\n+   |        -- help: consider making this binding mutable: `mut _x`\n LL |     _x = 4;\n    |     ^^^^^^ cannot assign to immutable argument\n "}, {"sha": "ded46e56e34514c8d9010dff9e0c203370091ab1", "filename": "src/test/ui/borrowck/issue-45199.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.rs?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -1,6 +1,6 @@\n fn test_drop_replace() {\n     let b: Box<isize>;\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider making this binding mutable\n     //~| SUGGESTION mut b\n     b = Box::new(1);    //~ NOTE first assignment\n     b = Box::new(2);    //~ ERROR cannot assign twice to immutable variable `b`\n@@ -9,13 +9,13 @@ fn test_drop_replace() {\n \n fn test_call() {\n     let b = Box::new(1);    //~ NOTE first assignment\n-                            //~| HELP make this binding mutable\n+                            //~| HELP consider making this binding mutable\n                             //~| SUGGESTION mut b\n     b = Box::new(2);        //~ ERROR cannot assign twice to immutable variable `b`\n                             //~| NOTE cannot assign twice to immutable\n }\n \n-fn test_args(b: Box<i32>) {  //~ HELP make this binding mutable\n+fn test_args(b: Box<i32>) {  //~ HELP consider making this binding mutable\n                                 //~| SUGGESTION mut b\n     b = Box::new(2);            //~ ERROR cannot assign to immutable argument `b`\n                                 //~| NOTE cannot assign to immutable argument"}, {"sha": "47aa30908270d91b7ac9107dcf7318ea259b5e6a", "filename": "src/test/ui/borrowck/issue-45199.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45199.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `b`\n   --> $DIR/issue-45199.rs:6:5\n    |\n LL |     let b: Box<isize>;\n-   |         - help: make this binding mutable: `mut b`\n+   |         - help: consider making this binding mutable: `mut b`\n ...\n LL |     b = Box::new(1);\n    |     - first assignment to `b`\n@@ -16,7 +16,7 @@ LL |     let b = Box::new(1);\n    |         -\n    |         |\n    |         first assignment to `b`\n-   |         help: make this binding mutable: `mut b`\n+   |         help: consider making this binding mutable: `mut b`\n ...\n LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable\n@@ -25,7 +25,7 @@ error[E0384]: cannot assign to immutable argument `b`\n   --> $DIR/issue-45199.rs:20:5\n    |\n LL | fn test_args(b: Box<i32>) {\n-   |              - help: make this binding mutable: `mut b`\n+   |              - help: consider making this binding mutable: `mut b`\n LL |\n LL |     b = Box::new(2);\n    |     ^ cannot assign to immutable argument"}, {"sha": "6223ad880d695661d50d4338b2dccb7751a47960", "filename": "src/test/ui/command-line-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -5,7 +5,7 @@ LL |     let x = 42;\n    |         -\n    |         |\n    |         first assignment to `x`\n-   |         help: make this binding mutable: `mut x`\n+   |         help: consider making this binding mutable: `mut x`\n LL |     x = 43;\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "bbd62902d9f44c01a4d945863cfeff0532352000", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -12,7 +12,7 @@ error[E0384]: cannot assign to immutable argument `y`\n   --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:4:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n-   |                    - help: make this binding mutable: `mut y`\n+   |                    - help: consider making this binding mutable: `mut y`\n LL |     y = x.b;\n    |     ^^^^^^^ cannot assign to immutable argument\n "}, {"sha": "b47a47d631e5f35a7d7edee6c3a513c9a7d72c29", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:10:9\n    |\n LL |     let x;\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider making this binding mutable: `mut x`\n ...\n LL |         x = 2;\n    |         ----- first assignment to `x`\n@@ -13,7 +13,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:21:13\n    |\n LL |         let x;\n-   |             - help: make this binding mutable: `mut x`\n+   |             - help: consider making this binding mutable: `mut x`\n ...\n LL |             x = 2;\n    |             ----- first assignment to `x`\n@@ -24,7 +24,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:30:13\n    |\n LL |     let x;\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider making this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ^^^^^ cannot assign twice to immutable variable\n@@ -33,7 +33,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/liveness-assign-imm-local-notes.rs:32:13\n    |\n LL |     let x;\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider making this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ----- first assignment to `x`"}, {"sha": "08911c5bde781f2601e946698c16433b14de9569", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.rs?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize;\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider making this binding mutable\n     //~| SUGGESTION mut v\n     loop {\n         v = 1; //~ ERROR cannot assign twice to immutable variable `v`"}, {"sha": "66cdce7dacf834a4797c4f9290b2c09f5db18bcc", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-loop.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-in-loop.rs:6:9\n    |\n LL |     let v: isize;\n-   |         - help: make this binding mutable: `mut v`\n+   |         - help: consider making this binding mutable: `mut v`\n ...\n LL |         v = 1;\n    |         ^^^^^ cannot assign twice to immutable variable"}, {"sha": "1752d969086e897e6c0a41cf0c2f24ac84cc4558", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.rs?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize;\n-    //~^ HELP make this binding mutable\n+    //~^ HELP consider making this binding mutable\n     //~| SUGGESTION mut v\n     v = 2;  //~ NOTE first assignment\n     v += 1; //~ ERROR cannot assign twice to immutable variable `v`"}, {"sha": "5db9539cbf1e5d932de8efce614fa4fb38664c3f", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-in-op-eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-in-op-eq.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `v`\n   --> $DIR/liveness-assign-imm-local-in-op-eq.rs:6:5\n    |\n LL |     let v: isize;\n-   |         - help: make this binding mutable: `mut v`\n+   |         - help: consider making this binding mutable: `mut v`\n ...\n LL |     v = 2;\n    |     ----- first assignment to `v`"}, {"sha": "c9b16e43910e8e9f6215acc0ed4ed4b3ecca2c64", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.rs?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let b = Box::new(1); //~ NOTE first assignment\n-                         //~| HELP make this binding mutable\n+                         //~| HELP consider making this binding mutable\n                          //~| SUGGESTION mut b\n     drop(b);\n     b = Box::new(2); //~ ERROR cannot assign twice to immutable variable `b`"}, {"sha": "bb7e7e27a4ca004cae25829263f487619805562d", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-drop.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -5,7 +5,7 @@ LL |     let b = Box::new(1);\n    |         -\n    |         |\n    |         first assignment to `b`\n-   |         help: make this binding mutable: `mut b`\n+   |         help: consider making this binding mutable: `mut b`\n ...\n LL |     b = Box::new(2);\n    |     ^ cannot assign twice to immutable variable"}, {"sha": "4bb2db27a165254332a01d35049c52a060bb7aba", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.rs?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -1,6 +1,6 @@\n fn test() {\n     let v: isize = 1; //~ NOTE first assignment\n-                      //~| HELP make this binding mutable\n+                      //~| HELP consider making this binding mutable\n                       //~| SUGGESTION mut v\n     v.clone();\n     v = 2; //~ ERROR cannot assign twice to immutable variable `v`"}, {"sha": "80458a70a0107b0bba94e7eb1ff17c72411dc9db", "filename": "src/test/ui/liveness/liveness-assign/liveness-assign-imm-local-with-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-assign%2Fliveness-assign-imm-local-with-init.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -5,7 +5,7 @@ LL |     let v: isize = 1;\n    |         -\n    |         |\n    |         first assignment to `v`\n-   |         help: make this binding mutable: `mut v`\n+   |         help: consider making this binding mutable: `mut v`\n ...\n LL |     v = 2;\n    |     ^^^^^ cannot assign twice to immutable variable"}, {"sha": "3e5893f68b6c19219896a67a2a09eaa37d50a5ea", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -2,7 +2,7 @@ error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/llvm-asm-out-assign-imm.rs:25:39\n    |\n LL |     let x: isize;\n-   |         - help: make this binding mutable: `mut x`\n+   |         - help: consider making this binding mutable: `mut x`\n LL |     x = 1;\n    |     ----- first assignment to `x`\n ..."}, {"sha": "6583546aa5c1fe70bbecdb12f294372a20dcdd7c", "filename": "src/test/ui/mut/mut-pattern-internal-mutability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-internal-mutability.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -5,7 +5,7 @@ LL |     let &mut x = foo;\n    |              -\n    |              |\n    |              first assignment to `x`\n-   |              help: make this binding mutable: `mut x`\n+   |              help: consider making this binding mutable: `mut x`\n LL |     x += 1;\n    |     ^^^^^^ cannot assign twice to immutable variable\n "}, {"sha": "d0726f05cc3be01d2a48f2a667d86d52afdeacc5", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0174dd6f921cc63c7e2d9aa5c01aa591f9a26745/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=0174dd6f921cc63c7e2d9aa5c01aa591f9a26745", "patch": "@@ -16,7 +16,7 @@ LL |     let [ref _x0_hold, _x1, ref xs_hold @ ..] = arr;\n    |                        ---\n    |                        |\n    |                        first assignment to `_x1`\n-   |                        help: make this binding mutable: `mut _x1`\n+   |                        help: consider making this binding mutable: `mut _x1`\n LL |     _x1 = U;\n    |     ^^^^^^^ cannot assign twice to immutable variable\n \n@@ -74,7 +74,7 @@ LL |     let (ref _x0, _x1, ref _x2, ..) = tup;\n    |                   ---\n    |                   |\n    |                   first assignment to `_x1`\n-   |                   help: make this binding mutable: `mut _x1`\n+   |                   help: consider making this binding mutable: `mut _x1`\n LL |     _x1 = U;\n    |     ^^^^^^^ cannot assign twice to immutable variable\n "}]}