{"sha": "6c03efd8f3a031c286a4afe936de10a31f6a1204", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMDNlZmQ4ZjNhMDMxYzI4NmE0YWZlOTM2ZGUxMGEzMWY2YTEyMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-13T06:46:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-13T06:46:29Z"}, "message": "Auto merge of #41009 - scottmcm:toowned-clone-into, r=alexcrichton\n\nAdd a resource-reusing method to `ToOwned`\n\n`ToOwned::to_owned` generalizes `Clone::clone`, but `ToOwned` doesn't have an equivalent to `Clone::clone_from`.  This PR adds such a method as `clone_into` under a new unstable feature `toowned_clone_into`.\n\nAnalogous to `clone_from`, this has the obvious default implementation in terms of `to_owned`.  I've updated the `libcollections` impls: for `T:Clone` it uses `clone_from`, for `[T]` I moved the code from `Vec::clone_from` and implemented that in terms of this, and for `str` it's a predictable implementation in terms of `[u8]`.\n\nUsed it in `Cow::clone_from` to reuse resources when both are `Cow::Owned`, and added a test that `Cow<str>` thus keeps capacity in `clone_from` in that situation.\n\nThe obvious question: is this the right place for the method?\n- It's here so it lives next to `to_owned`, making the default implementation reasonable, and avoiding another trait.  But allowing method syntax forces a name like `clone_into`, rather than something more consistent like `owned_from`.\n- Another trait would allow `owned_from` and could support multiple owning types per borrow type.  But it'd be another single-method trait that generalizes `Clone`, and I don't know how to give it a default impl in terms of `ToOwned::to_owned`, since a blanket would mean overlapping impls problems.\n\nI did it this way as it's simpler and many of the `Borrow`s/`AsRef`s don't make sense with `owned_from` anyway (`[T;1]:Borrow<[T]>`, `Arc<T>:Borrow<T>`, `String:AsRef<OsStr>`...).  I'd be happy to re-do it the other way, though, if someone has a good solution for the default handling.\n\n(I can also update with `CStr`, `OsStr`, and `Path` once a direction is decided.)", "tree": {"sha": "48627808b8566ba7caa681f5f0c86b8b88216c60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48627808b8566ba7caa681f5f0c86b8b88216c60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c03efd8f3a031c286a4afe936de10a31f6a1204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c03efd8f3a031c286a4afe936de10a31f6a1204", "html_url": "https://github.com/rust-lang/rust/commit/6c03efd8f3a031c286a4afe936de10a31f6a1204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c03efd8f3a031c286a4afe936de10a31f6a1204/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e2ad559e28222f2333de4d2c1b2b12b9bd3646", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e2ad559e28222f2333de4d2c1b2b12b9bd3646", "html_url": "https://github.com/rust-lang/rust/commit/d2e2ad559e28222f2333de4d2c1b2b12b9bd3646"}, {"sha": "7ec27ae63d762234ad768fb605bd40bbbc52c7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec27ae63d762234ad768fb605bd40bbbc52c7a0", "html_url": "https://github.com/rust-lang/rust/commit/7ec27ae63d762234ad768fb605bd40bbbc52c7a0"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "14774e2d2293ce9ece91b24b99c69c8ceab0d163", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=6c03efd8f3a031c286a4afe936de10a31f6a1204", "patch": "@@ -198,6 +198,7 @@\n - [thread_local](thread-local.md)\n - [thread_local_internals](thread-local-internals.md)\n - [thread_local_state](thread-local-state.md)\n+- [toowned_clone_into](toowned-clone-into.md)\n - [trace_macros](trace-macros.md)\n - [trusted_len](trusted-len.md)\n - [try_from](try-from.md)"}, {"sha": "eccc7e0e4dda0146a2c9720cd61dc2a25e2948aa", "filename": "src/doc/unstable-book/src/toowned-clone-into.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Fdoc%2Funstable-book%2Fsrc%2Ftoowned-clone-into.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Fdoc%2Funstable-book%2Fsrc%2Ftoowned-clone-into.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Ftoowned-clone-into.md?ref=6c03efd8f3a031c286a4afe936de10a31f6a1204", "patch": "@@ -0,0 +1,7 @@\n+# `toowned_clone_into`\n+\n+The tracking issue for this feature is: [#41263]\n+\n+[#41263]: https://github.com/rust-lang/rust/issues/41263\n+\n+------------------------"}, {"sha": "0de52b6696fcf02febb16085c5eb2860edbb52c1", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=6c03efd8f3a031c286a4afe936de10a31f6a1204", "patch": "@@ -60,6 +60,29 @@ pub trait ToOwned {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_owned(&self) -> Self::Owned;\n+\n+    /// Uses borrowed data to replace owned data, usually by cloning.\n+    ///\n+    /// This is borrow-generalized version of `Clone::clone_from`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(toowned_clone_into)]\n+    /// let mut s: String = String::new();\n+    /// \"hello\".clone_into(&mut s);\n+    ///\n+    /// let mut v: Vec<i32> = Vec::new();\n+    /// [1, 2][..].clone_into(&mut v);\n+    /// ```\n+    #[unstable(feature = \"toowned_clone_into\",\n+               reason = \"recently added\",\n+               issue = \"41263\")]\n+    fn clone_into(&self, target: &mut Self::Owned) {\n+        *target = self.to_owned();\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -70,6 +93,10 @@ impl<T> ToOwned for T\n     fn to_owned(&self) -> T {\n         self.clone()\n     }\n+\n+    fn clone_into(&self, target: &mut T) {\n+        target.clone_from(self);\n+    }\n }\n \n /// A clone-on-write smart pointer.\n@@ -141,6 +168,17 @@ impl<'a, B: ?Sized> Clone for Cow<'a, B>\n             }\n         }\n     }\n+\n+    fn clone_from(&mut self, source: &Cow<'a, B>) {\n+        if let Owned(ref mut dest) = *self {\n+            if let Owned(ref o) = *source {\n+                o.borrow().clone_into(dest);\n+                return;\n+            }\n+        }\n+\n+        *self = source.clone();\n+    }\n }\n \n impl<'a, B: ?Sized> Cow<'a, B>"}, {"sha": "7c3c825cfd1f5dc309980514d74af6b7203b6b12", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=6c03efd8f3a031c286a4afe936de10a31f6a1204", "patch": "@@ -1527,6 +1527,19 @@ impl<T: Clone> ToOwned for [T] {\n     fn to_owned(&self) -> Vec<T> {\n         panic!(\"not available with cfg(test)\")\n     }\n+\n+    fn clone_into(&self, target: &mut Vec<T>) {\n+        // drop anything in target that will not be overwritten\n+        target.truncate(self.len());\n+        let len = target.len();\n+\n+        // reuse the contained values' allocations/resources.\n+        target.clone_from_slice(&self[..len]);\n+\n+        // target.len <= self.len due to the truncate above, so the\n+        // slice here is always in-bounds.\n+        target.extend_from_slice(&self[len..]);\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "8168e02bf8261828d8f8685000e43197fd4f189c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=6c03efd8f3a031c286a4afe936de10a31f6a1204", "patch": "@@ -199,6 +199,12 @@ impl ToOwned for str {\n     fn to_owned(&self) -> String {\n         unsafe { String::from_utf8_unchecked(self.as_bytes().to_owned()) }\n     }\n+\n+    fn clone_into(&self, target: &mut String) {\n+        let mut b = mem::replace(target, String::new()).into_bytes();\n+        self.as_bytes().clone_into(&mut b);\n+        *target = unsafe { String::from_utf8_unchecked(b) }\n+    }\n }\n \n /// Methods for string slices."}, {"sha": "aa87ee84b3e9769ea36625c20afc7ec77a3698f6", "filename": "src/libcollections/tests/cow_str.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Ftests%2Fcow_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Ftests%2Fcow_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fcow_str.rs?ref=6c03efd8f3a031c286a4afe936de10a31f6a1204", "patch": "@@ -139,3 +139,13 @@ fn check_cow_add_assign_str() {\n     assert_eq!(\"Hi, World!\", owned);\n     assert_eq!(\"Hello, World!\", borrowed);\n }\n+\n+#[test]\n+fn check_cow_clone_from() {\n+    let mut c1: Cow<str> = Cow::Owned(String::with_capacity(25));\n+    let s: String = \"hi\".to_string();\n+    assert!(s.capacity() < 25);\n+    let c2: Cow<str> = Cow::Owned(s);\n+    c1.clone_from(&c2);\n+    assert!(c1.into_owned().capacity() >= 25);\n+}\n\\ No newline at end of file"}, {"sha": "8824185d2809b1c5659fc2c7e98ebdcc898b6628", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c03efd8f3a031c286a4afe936de10a31f6a1204/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6c03efd8f3a031c286a4afe936de10a31f6a1204", "patch": "@@ -1396,16 +1396,7 @@ impl<T: Clone> Clone for Vec<T> {\n     }\n \n     fn clone_from(&mut self, other: &Vec<T>) {\n-        // drop anything in self that will not be overwritten\n-        self.truncate(other.len());\n-        let len = self.len();\n-\n-        // reuse the contained values' allocations/resources.\n-        self.clone_from_slice(&other[..len]);\n-\n-        // self.len <= other.len due to the truncate above, so the\n-        // slice here is always in-bounds.\n-        self.extend_from_slice(&other[len..]);\n+        other.as_slice().clone_into(self);\n     }\n }\n "}]}