{"sha": "383635a13e336c35c2c41d412e4452ecd86e5cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MzYzNWExM2UzMzZjMzVjMmM0MWQ0MTJlNDQ1MmVjZDg2ZTVjZjI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-19T17:05:03Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-19T17:05:03Z"}, "message": "Rewrite `resolve_imports` to use an iterator\n\nThis allows reusing the original vector's allocation", "tree": {"sha": "e5dd14404d5aee062561e7661f73d13fd087145f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5dd14404d5aee062561e7661f73d13fd087145f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/383635a13e336c35c2c41d412e4452ecd86e5cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/383635a13e336c35c2c41d412e4452ecd86e5cf2", "html_url": "https://github.com/rust-lang/rust/commit/383635a13e336c35c2c41d412e4452ecd86e5cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/383635a13e336c35c2c41d412e4452ecd86e5cf2/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aebb60de5c92c7a7be1c152c7294861a51212dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/aebb60de5c92c7a7be1c152c7294861a51212dcf", "html_url": "https://github.com/rust-lang/rust/commit/aebb60de5c92c7a7be1c152c7294861a51212dcf"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "66d9396aad45d0dd31f6d632430668a9d7e9b651", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/383635a13e336c35c2c41d412e4452ecd86e5cf2/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383635a13e336c35c2c41d412e4452ecd86e5cf2/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=383635a13e336c35c2c41d412e4452ecd86e5cf2", "patch": "@@ -561,26 +561,30 @@ impl DefCollector<'_> {\n     fn resolve_imports(&mut self) -> ReachedFixedPoint {\n         let mut res = ReachedFixedPoint::Yes;\n         let imports = std::mem::replace(&mut self.unresolved_imports, Vec::new());\n-        for mut directive in imports {\n-            directive.status = self.resolve_import(directive.module_id, &directive.import);\n-            match directive.status {\n-                PartialResolvedImport::Indeterminate(_) => {\n-                    self.record_resolved_import(&directive);\n-                    // FIXME: For avoid performance regression,\n-                    // we consider an imported resolved if it is indeterminate (i.e not all namespace resolved)\n-                    self.resolved_imports.push(directive);\n-                    res = ReachedFixedPoint::No;\n-                }\n-                PartialResolvedImport::Resolved(_) => {\n-                    self.record_resolved_import(&directive);\n-                    self.resolved_imports.push(directive);\n-                    res = ReachedFixedPoint::No;\n-                }\n-                PartialResolvedImport::Unresolved => {\n-                    self.unresolved_imports.push(directive);\n+        let imports = imports\n+            .into_iter()\n+            .filter_map(|mut directive| {\n+                directive.status = self.resolve_import(directive.module_id, &directive.import);\n+                match directive.status {\n+                    PartialResolvedImport::Indeterminate(_) => {\n+                        self.record_resolved_import(&directive);\n+                        // FIXME: For avoid performance regression,\n+                        // we consider an imported resolved if it is indeterminate (i.e not all namespace resolved)\n+                        self.resolved_imports.push(directive);\n+                        res = ReachedFixedPoint::No;\n+                        None\n+                    }\n+                    PartialResolvedImport::Resolved(_) => {\n+                        self.record_resolved_import(&directive);\n+                        self.resolved_imports.push(directive);\n+                        res = ReachedFixedPoint::No;\n+                        None\n+                    }\n+                    PartialResolvedImport::Unresolved => Some(directive),\n                 }\n-            }\n-        }\n+            })\n+            .collect();\n+        self.unresolved_imports = imports;\n         res\n     }\n "}]}