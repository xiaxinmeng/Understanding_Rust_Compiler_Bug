{"sha": "bcf45371ff19882e67300cc483b481450ee129fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjQ1MzcxZmYxOTg4MmU2NzMwMGNjNDgzYjQ4MTQ1MGVlMTI5ZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-04T15:01:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-04T15:01:43Z"}, "message": "make macro expansion into a proper query", "tree": {"sha": "616d3e4dd5fa15228ac2ea85a93d76df0c3b8581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/616d3e4dd5fa15228ac2ea85a93d76df0c3b8581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf45371ff19882e67300cc483b481450ee129fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf45371ff19882e67300cc483b481450ee129fb", "html_url": "https://github.com/rust-lang/rust/commit/bcf45371ff19882e67300cc483b481450ee129fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf45371ff19882e67300cc483b481450ee129fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a1e276d56a3cb5f9d9c59f8c52c5573e19982b", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a1e276d56a3cb5f9d9c59f8c52c5573e19982b", "html_url": "https://github.com/rust-lang/rust/commit/87a1e276d56a3cb5f9d9c59f8c52c5573e19982b"}], "stats": {"total": 63, "additions": 28, "deletions": 35}, "files": [{"sha": "398e00c42b4349f42fc5c64d9bd06b4bba2f6bb8", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcf45371ff19882e67300cc483b481450ee129fb/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf45371ff19882e67300cc483b481450ee129fb/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=bcf45371ff19882e67300cc483b481450ee129fb", "patch": "@@ -45,6 +45,9 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::ids::macro_arg_query)]\n     fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n \n+    #[salsa::invoke(crate::ids::macro_expand_query)]\n+    fn macro_expand(&self, macro_call: ids::MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n+\n     #[salsa::invoke(crate::ids::HirFileId::hir_parse_query)]\n     fn hir_parse(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n "}, {"sha": "692da28953966aa4e5ee35aea571e20e9badfcc8", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bcf45371ff19882e67300cc483b481450ee129fb/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf45371ff19882e67300cc483b481450ee129fb/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=bcf45371ff19882e67300cc483b481450ee129fb", "patch": "@@ -5,14 +5,13 @@ use rustc_hash::FxHashMap;\n \n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n-    SyntaxNodePtr, AstPtr, AstNode,TreeArc,\n+    SyntaxNodePtr, AstPtr, AstNode,\n     ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner}\n };\n \n use crate::{\n     Path, Name, HirDatabase, Resolver,DefWithBody, Either, HirFileId,\n     name::AsName,\n-    ids::{MacroCallId},\n     type_ref::{Mutability, TypeRef},\n };\n use crate::{path::GenericArgs, ty::primitive::{IntTy, UncertainIntTy, FloatTy, UncertainFloatTy}};\n@@ -826,8 +825,8 @@ where\n                     .with_file_id(self.current_file_id);\n \n                 if let Some(call_id) = self.resolver.resolve_macro_call(self.db, path, ast_id) {\n-                    if let Some(arg) = self.db.macro_arg(call_id) {\n-                        if let Some(expr) = expand_macro_to_expr(self.db, call_id, &arg) {\n+                    if let Some(tt) = self.db.macro_expand(call_id).ok() {\n+                        if let Some(expr) = mbe::token_tree_to_expr(&tt).ok() {\n                             log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n                             let old_file_id =\n                                 std::mem::replace(&mut self.current_file_id, call_id.into());\n@@ -998,16 +997,6 @@ where\n     }\n }\n \n-fn expand_macro_to_expr(\n-    db: &impl HirDatabase,\n-    macro_call: MacroCallId,\n-    arg: &tt::Subtree,\n-) -> Option<TreeArc<ast::Expr>> {\n-    let rules = db.macro_def(macro_call.loc(db).def)?;\n-    let expanded = rules.expand(&arg).ok()?;\n-    mbe::token_tree_to_expr(&expanded).ok()\n-}\n-\n pub(crate) fn body_with_source_map_query(\n     db: &impl HirDatabase,\n     def: DefWithBody,"}, {"sha": "4102951c95439ba038d2478f3c0d3491286f7279", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bcf45371ff19882e67300cc483b481450ee129fb/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf45371ff19882e67300cc483b481450ee129fb/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=bcf45371ff19882e67300cc483b481450ee129fb", "patch": "@@ -63,19 +63,22 @@ impl HirFileId {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => db.parse(file_id),\n             HirFileIdRepr::Macro(macro_call_id) => {\n-                parse_macro(db, macro_call_id).unwrap_or_else(|err| {\n-                    // Note:\n-                    // The final goal we would like to make all parse_macro success,\n-                    // such that the following log will not call anyway.\n-                    log::warn!(\n-                        \"fail on macro_parse: (reason: {}) {}\",\n-                        err,\n-                        macro_call_id.debug_dump(db)\n-                    );\n-\n-                    // returning an empty string looks fishy...\n-                    SourceFile::parse(\"\")\n-                })\n+                match db.macro_expand(macro_call_id) {\n+                    Ok(tt) => mbe::token_tree_to_ast_item_list(&tt),\n+                    Err(err) => {\n+                        // Note:\n+                        // The final goal we would like to make all parse_macro success,\n+                        // such that the following log will not call anyway.\n+                        log::warn!(\n+                            \"fail on macro_parse: (reason: {}) {}\",\n+                            err,\n+                            macro_call_id.debug_dump(db)\n+                        );\n+\n+                        // returning an empty string looks fishy...\n+                        SourceFile::parse(\"\")\n+                    }\n+                }\n             }\n         }\n     }\n@@ -124,23 +127,21 @@ pub(crate) fn macro_arg_query(db: &impl DefDatabase, id: MacroCallId) -> Option<\n     Some(Arc::new(tt))\n }\n \n-fn parse_macro(\n+pub(crate) fn macro_expand_query(\n     db: &impl DefDatabase,\n-    macro_call_id: MacroCallId,\n-) -> Result<TreeArc<SourceFile>, String> {\n-    let loc = macro_call_id.loc(db);\n-    let macro_arg = db.macro_arg(macro_call_id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n+    id: MacroCallId,\n+) -> Result<Arc<tt::Subtree>, String> {\n+    let loc = id.loc(db);\n+    let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n \n     let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n     let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n-\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n     if count > 65536 {\n         return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n     }\n-\n-    Ok(mbe::token_tree_to_ast_item_list(&tt))\n+    Ok(Arc::new(tt))\n }\n \n macro_rules! impl_intern_key {"}]}