{"sha": "116bb4dfb21085ec8e6c45551cc69ff59a3598cd", "node_id": "C_kwDOAAsO6NoAKDExNmJiNGRmYjIxMDg1ZWM4ZTZjNDU1NTFjYzY5ZmY1OWEzNTk4Y2Q", "commit": {"author": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2023-02-25T08:03:03Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2023-02-25T08:05:09Z"}, "message": "binary_heap: Unify Extend implementation.\n\nPreviously the bulk rebuild specialization was only available with Vec, and\nfor general iterators Extend only provided pre-allocation through reserve().\n\nBy using a drop guard, we can safely bulk rebuild even if the iterator may\npanic. This allows benefiting from the bulk rebuild optimization without\ncollecting iterator elements into a Vec beforehand, which would nullify any\nperformance gains from bulk rebuild.", "tree": {"sha": "f7aae0930d57f7c168cda0d4e8ce7a6d4e13b5a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7aae0930d57f7c168cda0d4e8ce7a6d4e13b5a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/116bb4dfb21085ec8e6c45551cc69ff59a3598cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/116bb4dfb21085ec8e6c45551cc69ff59a3598cd", "html_url": "https://github.com/rust-lang/rust/commit/116bb4dfb21085ec8e6c45551cc69ff59a3598cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/116bb4dfb21085ec8e6c45551cc69ff59a3598cd/comments", "author": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c589c04661bff6f4cd7df734d1ac7b97bbd9e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c589c04661bff6f4cd7df734d1ac7b97bbd9e0", "html_url": "https://github.com/rust-lang/rust/commit/11c589c04661bff6f4cd7df734d1ac7b97bbd9e0"}], "stats": {"total": 36, "additions": 2, "deletions": 34}, "files": [{"sha": "7c8cdf6ee3bdcadfe04078dc0dd8781ab6e1b258", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/116bb4dfb21085ec8e6c45551cc69ff59a3598cd/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116bb4dfb21085ec8e6c45551cc69ff59a3598cd/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=116bb4dfb21085ec8e6c45551cc69ff59a3598cd", "patch": "@@ -154,8 +154,6 @@ use crate::collections::TryReserveError;\n use crate::slice;\n use crate::vec::{self, AsVecIntoIter, Vec};\n \n-use super::SpecExtend;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -1715,7 +1713,8 @@ impl<'a, T> IntoIterator for &'a BinaryHeap<T> {\n impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        <Self as SpecExtend<I>>::spec_extend(self, iter);\n+        let guard = RebuildOnDrop { rebuild_from: self.len(), heap: self };\n+        guard.heap.data.extend(iter);\n     }\n \n     #[inline]\n@@ -1729,37 +1728,6 @@ impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     }\n }\n \n-impl<T: Ord, I: IntoIterator<Item = T>> SpecExtend<I> for BinaryHeap<T> {\n-    default fn spec_extend(&mut self, iter: I) {\n-        self.extend_desugared(iter.into_iter());\n-    }\n-}\n-\n-impl<T: Ord> SpecExtend<Vec<T>> for BinaryHeap<T> {\n-    fn spec_extend(&mut self, ref mut other: Vec<T>) {\n-        let start = self.data.len();\n-        self.data.append(other);\n-        self.rebuild_tail(start);\n-    }\n-}\n-\n-impl<T: Ord> SpecExtend<BinaryHeap<T>> for BinaryHeap<T> {\n-    fn spec_extend(&mut self, ref mut other: BinaryHeap<T>) {\n-        self.append(other);\n-    }\n-}\n-\n-impl<T: Ord> BinaryHeap<T> {\n-    fn extend_desugared<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        let iterator = iter.into_iter();\n-        let (lower, _) = iterator.size_hint();\n-\n-        self.reserve(lower);\n-\n-        iterator.for_each(move |elem| self.push(elem));\n-    }\n-}\n-\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BinaryHeap<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {"}]}