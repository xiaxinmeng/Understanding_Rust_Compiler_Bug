{"sha": "88c9759347dddb61cb9e9a1e9d524b365857cf67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4Yzk3NTkzNDdkZGRiNjFjYjllOWExZTlkNTI0YjM2NTg1N2NmNjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-08-27T18:45:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-08-27T18:46:59Z"}, "message": "Read definitions of tag types in the DWARF", "tree": {"sha": "8683305ed40cfe487d7d7351f33a3ae14780a6c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8683305ed40cfe487d7d7351f33a3ae14780a6c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c9759347dddb61cb9e9a1e9d524b365857cf67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c9759347dddb61cb9e9a1e9d524b365857cf67", "html_url": "https://github.com/rust-lang/rust/commit/88c9759347dddb61cb9e9a1e9d524b365857cf67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c9759347dddb61cb9e9a1e9d524b365857cf67/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0c242d0a7418ed4213c77b270e3f355b3cd484", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0c242d0a7418ed4213c77b270e3f355b3cd484", "html_url": "https://github.com/rust-lang/rust/commit/1c0c242d0a7418ed4213c77b270e3f355b3cd484"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "c97defdc480b82da96bf6ccba4eadc61bdb13839", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 52, "deletions": 32, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/88c9759347dddb61cb9e9a1e9d524b365857cf67/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/88c9759347dddb61cb9e9a1e9d524b365857cf67/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=88c9759347dddb61cb9e9a1e9d524b365857cf67", "patch": "@@ -2953,40 +2953,60 @@ let rec extract_mod_items\n \n         | DW_TAG_structure_type ->\n             begin\n-              let is_num_idx s =\n-                let len = String.length s in\n-                  if len >= 2 && s.[0] = '_'\n+              if Array.length die.die_children == 2 &&\n+                  die.die_children.(1).die_tag =\n+                  DW_TAG_variant_part then begin\n+                (* FIXME: will infinite loop on iso-recursive tags! *)\n+                let ty_tag = Hashtbl.create 0 in\n+                let variant_part = die.die_children.(1) in\n+                let parse_variant die =\n+                  assert (die.die_tag = DW_TAG_variant);\n+                  assert (Array.length die.die_children == 1);\n+                  let name = Ast.NAME_base (Ast.BASE_ident (get_name die)) in\n+                  let ty_tup =\n+                    match get_ty die.die_children.(0) with\n+                        Ast.TY_tup ty_tup -> ty_tup\n+                      | _ -> bug () \"tag variant of non-tuple type\"\n+                  in\n+                  Hashtbl.add ty_tag name ty_tup\n+                in\n+                Array.iter parse_variant variant_part.die_children;\n+                Ast.TY_tag ty_tag\n+              end else\n+                let is_num_idx s =\n+                  let len = String.length s in\n+                    if len >= 2 && s.[0] = '_'\n+                    then\n+                      let ok = ref true in\n+                        String.iter\n+                          (fun c -> ok := (!ok) && '0' <= c && c <= '9')\n+                          (String.sub s 1 (len-1));\n+                        !ok\n+                    else\n+                      false\n+                in\n+                let members = arr_map_partial\n+                  die.die_children\n+                  begin\n+                    fun child ->\n+                      if child.die_tag = DW_TAG_member\n+                      then Some child\n+                      else None\n+                  end\n+                in\n+                  if Array.length members == 0 ||\n+                    is_num_idx (get_name members.(0))\n                   then\n-                    let ok = ref true in\n-                      String.iter\n-                        (fun c -> ok := (!ok) && '0' <= c && c <= '9')\n-                        (String.sub s 1 (len-1));\n-                      !ok\n+                    let tys = Array.map get_referenced_ty members in\n+                      Ast.TY_tup tys\n                   else\n-                    false\n-              in\n-              let members = arr_map_partial\n-                die.die_children\n-                begin\n-                  fun child ->\n-                    if child.die_tag = DW_TAG_member\n-                    then Some child\n-                    else None\n-                end\n-              in\n-                if Array.length members == 0 ||\n-                    is_num_idx (get_name members.(0))\n-                then\n-                  let tys = Array.map get_referenced_ty members in\n-                    Ast.TY_tup tys\n-                else\n-                  let entries =\n-                    Array.map\n-                      (fun member_die -> ((get_name member_die),\n-                                          (get_referenced_ty member_die)))\n-                      members\n-                  in\n-                    Ast.TY_rec entries\n+                    let entries =\n+                      Array.map\n+                        (fun member_die -> ((get_name member_die),\n+                                            (get_referenced_ty member_die)))\n+                        members\n+                    in\n+                      Ast.TY_rec entries\n             end\n \n         | DW_TAG_interface_type ->"}]}