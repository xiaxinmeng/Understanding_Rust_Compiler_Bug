{"sha": "7055c23d2cb3baabbae6af7ab196e43035260856", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNTVjMjNkMmNiM2JhYWJiYWU2YWY3YWIxOTZlNDMwMzUyNjA4NTY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-24T14:45:08Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-27T20:33:18Z"}, "message": "ast_pretty: Pass some token streams and trees by reference", "tree": {"sha": "f4cc3e1dabbb11195804b5ec5e4b814f0fb14a14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4cc3e1dabbb11195804b5ec5e4b814f0fb14a14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7055c23d2cb3baabbae6af7ab196e43035260856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7055c23d2cb3baabbae6af7ab196e43035260856", "html_url": "https://github.com/rust-lang/rust/commit/7055c23d2cb3baabbae6af7ab196e43035260856", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7055c23d2cb3baabbae6af7ab196e43035260856/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "394e1b40d264aa6928811919c1124fa248e7d802", "url": "https://api.github.com/repos/rust-lang/rust/commits/394e1b40d264aa6928811919c1124fa248e7d802", "html_url": "https://github.com/rust-lang/rust/commit/394e1b40d264aa6928811919c1124fa248e7d802"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "501cd3748282b06b34288258b054b46dab0e65f2", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=7055c23d2cb3baabbae6af7ab196e43035260856", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n-use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n use rustc_ast::util::{classify, comments};\n use rustc_span::edition::Edition;\n@@ -293,7 +293,7 @@ pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n         token::NtIdent(e, is_raw) => IdentPrinter::for_ast_ident(e, is_raw).to_string(),\n         token::NtLifetime(e) => e.to_string(),\n         token::NtLiteral(ref e) => expr_to_string(e),\n-        token::NtTT(ref tree) => tt_to_string(tree.clone()),\n+        token::NtTT(ref tree) => tt_to_string(tree),\n         token::NtVis(ref e) => vis_to_string(e),\n     }\n }\n@@ -314,11 +314,11 @@ pub fn expr_to_string(e: &ast::Expr) -> String {\n     to_string(|s| s.print_expr(e))\n }\n \n-pub fn tt_to_string(tt: tokenstream::TokenTree) -> String {\n+pub fn tt_to_string(tt: &TokenTree) -> String {\n     to_string(|s| s.print_tt(tt, false))\n }\n \n-pub fn tts_to_string(tokens: TokenStream) -> String {\n+pub fn tts_to_string(tokens: &TokenStream) -> String {\n     to_string(|s| s.print_tts(tokens, false))\n }\n \n@@ -585,7 +585,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 false,\n                 None,\n                 delim.to_token(),\n-                tokens.clone(),\n+                tokens,\n                 true,\n                 span,\n             ),\n@@ -594,7 +594,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 if let MacArgs::Eq(_, tokens) = &item.args {\n                     self.space();\n                     self.word_space(\"=\");\n-                    self.print_tts(tokens.clone(), true);\n+                    self.print_tts(tokens, true);\n                 }\n             }\n         }\n@@ -635,9 +635,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     /// appropriate macro, transcribe back into the grammar we just parsed from,\n     /// and then pretty-print the resulting AST nodes (so, e.g., we print\n     /// expression arguments as expressions). It can be done! I think.\n-    fn print_tt(&mut self, tt: tokenstream::TokenTree, convert_dollar_crate: bool) {\n+    fn print_tt(&mut self, tt: &TokenTree, convert_dollar_crate: bool) {\n         match tt {\n-            TokenTree::Token(ref token) => {\n+            TokenTree::Token(token) => {\n                 self.word(token_to_string_ext(&token, convert_dollar_crate));\n                 if let token::DocComment(..) = token.kind {\n                     self.hardbreak()\n@@ -648,7 +648,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     None,\n                     false,\n                     None,\n-                    delim,\n+                    *delim,\n                     tts,\n                     convert_dollar_crate,\n                     dspan.entire(),\n@@ -657,14 +657,14 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n     }\n \n-    fn print_tts(&mut self, tts: tokenstream::TokenStream, convert_dollar_crate: bool) {\n-        let mut iter = tts.into_trees().peekable();\n+    fn print_tts(&mut self, tts: &TokenStream, convert_dollar_crate: bool) {\n+        let mut iter = tts.trees().peekable();\n         while let Some(tt) = iter.next() {\n-            let show_space =\n-                if let Some(next) = iter.peek() { tt_prepend_space(next, &tt) } else { false };\n-            self.print_tt(tt, convert_dollar_crate);\n-            if show_space {\n-                self.space();\n+            self.print_tt(&tt, convert_dollar_crate);\n+            if let Some(next) = iter.peek() {\n+                if tt_prepend_space(next, &tt) {\n+                    self.space();\n+                }\n             }\n         }\n     }\n@@ -675,7 +675,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         has_bang: bool,\n         ident: Option<Ident>,\n         delim: DelimToken,\n-        tts: TokenStream,\n+        tts: &TokenStream,\n         convert_dollar_crate: bool,\n         span: Span,\n     ) {\n@@ -1253,7 +1253,7 @@ impl<'a> State<'a> {\n                     has_bang,\n                     Some(item.ident),\n                     macro_def.body.delim(),\n-                    macro_def.body.inner_tokens(),\n+                    &macro_def.body.inner_tokens(),\n                     true,\n                     item.span,\n                 );\n@@ -1577,7 +1577,7 @@ impl<'a> State<'a> {\n             true,\n             None,\n             m.args.delim(),\n-            m.args.inner_tokens(),\n+            &m.args.inner_tokens(),\n             true,\n             m.span(),\n         );"}, {"sha": "ede34a7612589c531e051481460d82db3d740184", "filename": "src/librustc_builtin_macros/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_builtin_macros%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flog_syntax.rs?ref=7055c23d2cb3baabbae6af7ab196e43035260856", "patch": "@@ -7,7 +7,7 @@ pub fn expand_log_syntax<'cx>(\n     sp: rustc_span::Span,\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n-    println!(\"{}\", pprust::tts_to_string(tts));\n+    println!(\"{}\", pprust::tts_to_string(&tts));\n \n     // any so that `log_syntax` can be invoked as an expression and item.\n     base::DummyResult::any_valid(sp)"}, {"sha": "e46cf67e64d664326dde5cfee97bdc7b33d1392d", "filename": "src/librustc_builtin_macros/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_builtin_macros%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fsource_util.rs?ref=7055c23d2cb3baabbae6af7ab196e43035260856", "patch": "@@ -71,7 +71,7 @@ pub fn expand_stringify(\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n     let sp = cx.with_def_site_ctxt(sp);\n-    let s = pprust::tts_to_string(tts);\n+    let s = pprust::tts_to_string(&tts);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&s)))\n }\n "}, {"sha": "28a3970918ee6a4ef4d54fb04dadba455508244a", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=7055c23d2cb3baabbae6af7ab196e43035260856", "patch": "@@ -224,7 +224,7 @@ fn generic_extension<'cx>(\n     let sess = cx.parse_sess;\n \n     if cx.trace_macros() {\n-        let msg = format!(\"expanding `{}! {{ {} }}`\", name, pprust::tts_to_string(arg.clone()));\n+        let msg = format!(\"expanding `{}! {{ {} }}`\", name, pprust::tts_to_string(&arg));\n         trace_macros_note(&mut cx.expansions, sp, msg);\n     }\n \n@@ -300,7 +300,7 @@ fn generic_extension<'cx>(\n                 }\n \n                 if cx.trace_macros() {\n-                    let msg = format!(\"to `{}`\", pprust::tts_to_string(tts.clone()));\n+                    let msg = format!(\"to `{}`\", pprust::tts_to_string(&tts));\n                     trace_macros_note(&mut cx.expansions, sp, msg);\n                 }\n "}, {"sha": "e5e530227e43a73d080ca089c28907074a877646", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7055c23d2cb3baabbae6af7ab196e43035260856/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=7055c23d2cb3baabbae6af7ab196e43035260856", "patch": "@@ -413,7 +413,7 @@ impl server::TokenStream for Rustc<'_> {\n         )\n     }\n     fn to_string(&mut self, stream: &Self::TokenStream) -> String {\n-        pprust::tts_to_string(stream.clone())\n+        pprust::tts_to_string(stream)\n     }\n     fn from_token_tree(\n         &mut self,"}]}