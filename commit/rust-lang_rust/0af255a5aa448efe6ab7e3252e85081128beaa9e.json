{"sha": "0af255a5aa448efe6ab7e3252e85081128beaa9e", "node_id": "C_kwDOAAsO6NoAKDBhZjI1NWE1YWE0NDhlZmU2YWI3ZTMyNTJlODUwODExMjhiZWFhOWU", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-17T18:00:06Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-17T18:59:38Z"}, "message": "Fix the bug of next_point in span", "tree": {"sha": "0146f27c9650f7d955e506f323c1e71b48a7d741", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0146f27c9650f7d955e506f323c1e71b48a7d741"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af255a5aa448efe6ab7e3252e85081128beaa9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af255a5aa448efe6ab7e3252e85081128beaa9e", "html_url": "https://github.com/rust-lang/rust/commit/0af255a5aa448efe6ab7e3252e85081128beaa9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af255a5aa448efe6ab7e3252e85081128beaa9e/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11432fe952cdc531785bd1bf7dc4e8a15da6daab", "url": "https://api.github.com/repos/rust-lang/rust/commits/11432fe952cdc531785bd1bf7dc4e8a15da6daab", "html_url": "https://github.com/rust-lang/rust/commit/11432fe952cdc531785bd1bf7dc4e8a15da6daab"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "15e9a8db3c602490e02f88c619d9ae2ce46c56c5", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=0af255a5aa448efe6ab7e3252e85081128beaa9e", "patch": "@@ -937,13 +937,12 @@ pub fn ensure_complete_parse<'a>(\n             kind_name,\n         );\n         err.note(&msg);\n-        let semi_span = this.sess.source_map().next_point(span);\n \n-        let semi_full_span = semi_span.to(this.sess.source_map().next_point(semi_span));\n-        match this.sess.source_map().span_to_snippet(semi_full_span) {\n+        let semi_span = this.sess.source_map().next_point(span);\n+        match this.sess.source_map().span_to_snippet(semi_span) {\n             Ok(ref snippet) if &snippet[..] != \";\" && kind_name == \"expression\" => {\n                 err.span_suggestion(\n-                    semi_span,\n+                    span.shrink_to_hi(),\n                     \"you might be missing a semicolon here\",\n                     \";\",\n                     Applicability::MaybeIncorrect,"}, {"sha": "0aa2b44a0f87aed557c2dc0d42d3d969533a992c", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=0af255a5aa448efe6ab7e3252e85081128beaa9e", "patch": "@@ -82,7 +82,7 @@ fn emit_frag_parse_err(\n         );\n         if !e.span.is_dummy() {\n             // early end of macro arm (#52866)\n-            e.replace_span_with(parser.sess.source_map().next_point(parser.token.span));\n+            e.replace_span_with(parser.token.span.shrink_to_hi());\n         }\n     }\n     if e.span.is_dummy() {"}, {"sha": "40d85c833a7dd7376925a583e06c8cdbea80d712", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=0af255a5aa448efe6ab7e3252e85081128beaa9e", "patch": "@@ -1461,7 +1461,7 @@ impl<'a> Parser<'a> {\n         let (prev_sp, sp) = match (&self.token.kind, self.subparser_name) {\n             // Point at the end of the macro call when reaching end of macro arguments.\n             (token::Eof, Some(_)) => {\n-                let sp = self.sess.source_map().next_point(self.prev_token.span);\n+                let sp = self.prev_token.span.shrink_to_hi();\n                 (sp, sp)\n             }\n             // We don't want to point at the following span after DUMMY_SP.\n@@ -2039,7 +2039,7 @@ impl<'a> Parser<'a> {\n     pub(super) fn expected_expression_found(&self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let (span, msg) = match (&self.token.kind, self.subparser_name) {\n             (&token::Eof, Some(origin)) => {\n-                let sp = self.sess.source_map().next_point(self.prev_token.span);\n+                let sp = self.prev_token.span.shrink_to_hi();\n                 (sp, format!(\"expected expression, found end of {origin}\"))\n             }\n             _ => ("}, {"sha": "afa116ce1bccd1314063eed2ef24384c4058ac48", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=0af255a5aa448efe6ab7e3252e85081128beaa9e", "patch": "@@ -2172,7 +2172,7 @@ impl<'a> Parser<'a> {\n                     },\n                 ExprKind::Block(_, None) => {\n                     self.sess.emit_err(IfExpressionMissingCondition {\n-                        if_span: self.sess.source_map().next_point(lo),\n+                        if_span: lo.shrink_to_hi(),\n                         block_span: self.sess.source_map().start_point(cond_span),\n                     });\n                     std::mem::replace(&mut cond, this.mk_expr_err(cond_span.shrink_to_hi()))"}, {"sha": "bda301c52e9603061c215e18e8c5cb9df1acb5cc", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=0af255a5aa448efe6ab7e3252e85081128beaa9e", "patch": "@@ -1601,7 +1601,7 @@ impl<'a> Parser<'a> {\n                     self.sess.emit_err(err);\n                 } else {\n                     if !seen_comma {\n-                        let sp = self.sess.source_map().next_point(previous_span);\n+                        let sp = previous_span.shrink_to_hi();\n                         err.missing_comma = Some(sp);\n                     }\n                     return Err(err.into_diagnostic(&self.sess.span_diagnostic));"}, {"sha": "4fd5bc1d60a47a6f2184bda3be6944a458b4b2a5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=0af255a5aa448efe6ab7e3252e85081128beaa9e", "patch": "@@ -1731,7 +1731,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             for _ in 0..100 {\n                                 // Try to find an assignment\n                                 sp = sm.next_point(sp);\n-                                let snippet = sm.span_to_snippet(sp.to(sm.next_point(sp)));\n+                                let snippet = sm.span_to_snippet(sp);\n                                 match snippet {\n                                     Ok(ref x) if x.as_str() == \"=\" => {\n                                         err.span_suggestion("}, {"sha": "d3c2550aa2afb17ee11a537500ce0f30843085d7", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af255a5aa448efe6ab7e3252e85081128beaa9e/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=0af255a5aa448efe6ab7e3252e85081128beaa9e", "patch": "@@ -859,14 +859,15 @@ impl SourceMap {\n         }\n         let start_of_next_point = sp.hi().0;\n \n-        let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);\n+        let width = self.find_width_of_character_at_span(sp, true);\n+        debug_assert!(width > 0);\n         // If the width is 1, then the next span should point to the same `lo` and `hi`. However,\n         // in the case of a multibyte character, where the width != 1, the next span should\n         // span multiple bytes to include the whole character.\n         let end_of_next_point =\n-            start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);\n+            start_of_next_point.checked_add(width).unwrap_or(start_of_next_point);\n \n-        let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));\n+        let end_of_next_point = BytePos(cmp::max(start_of_next_point + 1, end_of_next_point));\n         Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)\n     }\n "}]}