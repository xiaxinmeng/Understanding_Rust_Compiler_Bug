{"sha": "75d937c49b79dcfb99895470c1fd63cc6f9343a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZDkzN2M0OWI3OWRjZmI5OTg5NTQ3MGMxZmQ2M2NjNmY5MzQzYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-26T22:20:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-26T22:20:20Z"}, "message": "Auto merge of #54668 - RalfJung:use-maybe-uninit, r=SimonSapin\n\nUse MaybeUninit in libcore\n\nAll code by @japaric. This re-submits the second half of https://github.com/rust-lang/rust/pull/53508 (the first half is at https://github.com/rust-lang/rust/pull/54667). This is likely the one containing the perf regression.", "tree": {"sha": "ad5bf81fc821ce207deb6eee1ec745ad0bbb30dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad5bf81fc821ce207deb6eee1ec745ad0bbb30dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d937c49b79dcfb99895470c1fd63cc6f9343a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d937c49b79dcfb99895470c1fd63cc6f9343a3", "html_url": "https://github.com/rust-lang/rust/commit/75d937c49b79dcfb99895470c1fd63cc6f9343a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d937c49b79dcfb99895470c1fd63cc6f9343a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfb46e4ac9a2704f06de1a2ff7a4612cd70c8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfb46e4ac9a2704f06de1a2ff7a4612cd70c8cb", "html_url": "https://github.com/rust-lang/rust/commit/6bfb46e4ac9a2704f06de1a2ff7a4612cd70c8cb"}, {"sha": "59786b020be2fa72829158fb02c58da537b294ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/59786b020be2fa72829158fb02c58da537b294ee", "html_url": "https://github.com/rust-lang/rust/commit/59786b020be2fa72829158fb02c58da537b294ee"}], "stats": {"total": 105, "additions": 53, "deletions": 52}, "files": [{"sha": "d01cd012031db45cbb99f4d51c008d8eba174fc1", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=75d937c49b79dcfb99895470c1fd63cc6f9343a3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n-use mem;\n+use mem::MaybeUninit;\n use num::flt2dec;\n \n // Don't inline this so callers don't use the stack space this function\n@@ -20,11 +20,11 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n-        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n-        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n-                                                    false, &mut buf, &mut parts);\n+                                                    false, buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -38,10 +38,11 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n {\n     unsafe {\n         // enough for f32 and f64\n-        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n-        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n         let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num,\n-                                                 sign, precision, false, &mut buf, &mut parts);\n+                                                 sign, precision, false, buf.get_mut(),\n+                                                 parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -75,11 +76,11 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n-        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n-        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n         let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n                                                   *num, sign, precision,\n-                                                  upper, &mut buf, &mut parts);\n+                                                  upper, buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -94,11 +95,11 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n {\n     unsafe {\n         // enough for f32 and f64\n-        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n-        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n         let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n                                                      *num, sign, (0, 0), upper,\n-                                                     &mut buf, &mut parts);\n+                                                     buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }"}, {"sha": "a5603ff6a62e7e28b0fd50c96749fd4c624bac70", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=75d937c49b79dcfb99895470c1fd63cc6f9343a3", "patch": "@@ -950,7 +950,7 @@ impl<T> ManuallyDrop<T> {\n     /// ManuallyDrop::new(Box::new(()));\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value }\n     }\n@@ -967,7 +967,7 @@ impl<T> ManuallyDrop<T> {\n     /// let _: Box<()> = ManuallyDrop::into_inner(x); // This drops the `Box`.\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn into_inner(slot: ManuallyDrop<T>) -> T {\n         slot.value\n     }\n@@ -1015,15 +1015,15 @@ impl<T: ?Sized> ManuallyDrop<T> {\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T: ?Sized> Deref for ManuallyDrop<T> {\n     type Target = T;\n-    #[inline]\n+    #[inline(always)]\n     fn deref(&self) -> &T {\n         &self.value\n     }\n }\n \n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n-    #[inline]\n+    #[inline(always)]\n     fn deref_mut(&mut self) -> &mut T {\n         &mut self.value\n     }\n@@ -1044,6 +1044,7 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub const fn new(val: T) -> MaybeUninit<T> {\n         MaybeUninit { value: ManuallyDrop::new(val) }\n     }\n@@ -1053,6 +1054,7 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub const fn uninitialized() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n@@ -1066,6 +1068,7 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline]\n     pub fn zeroed() -> MaybeUninit<T> {\n         let mut u = MaybeUninit::<T>::uninitialized();\n         unsafe {\n@@ -1076,6 +1079,7 @@ impl<T> MaybeUninit<T> {\n \n     /// Set the value of the `MaybeUninit`. This overwrites any previous value without dropping it.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub fn set(&mut self, val: T) {\n         unsafe {\n             self.value = ManuallyDrop::new(val);\n@@ -1091,6 +1095,7 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub unsafe fn into_inner(self) -> T {\n         ManuallyDrop::into_inner(self.value)\n     }\n@@ -1102,6 +1107,7 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n         &*self.value\n     }\n@@ -1113,20 +1119,23 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state, otherwise this will immediately cause undefined behavior.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {\n         &mut *self.value\n     }\n \n     /// Get a pointer to the contained value. Reading from this pointer will be undefined\n     /// behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub fn as_ptr(&self) -> *const T {\n         unsafe { &*self.value as *const T }\n     }\n \n     /// Get a mutable pointer to the contained value. Reading from this pointer will be undefined\n     /// behavior unless the `MaybeUninit` is initialized.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         unsafe { &mut *self.value as *mut T }\n     }"}, {"sha": "947b67e4e9af318eec28d439c05a9a87d871e795", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=75d937c49b79dcfb99895470c1fd63cc6f9343a3", "patch": "@@ -79,7 +79,7 @@ use ops::{CoerceUnsized, DispatchFromDyn};\n use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n-use mem;\n+use mem::{self, MaybeUninit};\n use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n@@ -295,17 +295,14 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n-    // Give ourselves some scratch space to work with\n-    let mut tmp: T = mem::uninitialized();\n+    // Give ourselves some scratch space to work with.\n+    // We do not have to worry about drops: `MaybeUninit` does nothing when dropped.\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n \n     // Perform the swap\n-    copy_nonoverlapping(x, &mut tmp, 1);\n+    copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);\n     copy(y, x, 1); // `x` and `y` may overlap\n-    copy_nonoverlapping(&tmp, y, 1);\n-\n-    // y and t now point to the same thing, but we need to completely forget `tmp`\n-    // because it's no longer relevant.\n-    mem::forget(tmp);\n+    copy_nonoverlapping(tmp.get_ref(), y, 1);\n }\n \n /// Swaps `count * size_of::<T>()` bytes between the two regions of memory\n@@ -392,8 +389,8 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     while i + block_size <= len {\n         // Create some uninitialized memory as scratch space\n         // Declaring `t` here avoids aligning the stack when this loop is unused\n-        let mut t: Block = mem::uninitialized();\n-        let t = &mut t as *mut _ as *mut u8;\n+        let mut t = mem::MaybeUninit::<Block>::uninitialized();\n+        let t = t.as_mut_ptr() as *mut u8;\n         let x = x.add(i);\n         let y = y.add(i);\n \n@@ -407,10 +404,10 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n \n     if i < len {\n         // Swap any remaining bytes\n-        let mut t: UnalignedBlock = mem::uninitialized();\n+        let mut t = mem::MaybeUninit::<UnalignedBlock>::uninitialized();\n         let rem = len - i;\n \n-        let t = &mut t as *mut _ as *mut u8;\n+        let t = t.as_mut_ptr() as *mut u8;\n         let x = x.add(i);\n         let y = y.add(i);\n \n@@ -575,9 +572,9 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n-    let mut tmp: T = mem::uninitialized();\n-    copy_nonoverlapping(src, &mut tmp, 1);\n-    tmp\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n+    copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+    tmp.into_inner()\n }\n \n /// Reads the value from `src` without moving it. This leaves the\n@@ -642,11 +639,11 @@ pub unsafe fn read<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n-    let mut tmp: T = mem::uninitialized();\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n     copy_nonoverlapping(src as *const u8,\n-                        &mut tmp as *mut T as *mut u8,\n+                        tmp.as_mut_ptr() as *mut u8,\n                         mem::size_of::<T>());\n-    tmp\n+    tmp.into_inner()\n }\n \n /// Overwrites a memory location with the given value without reading or"}, {"sha": "07153735300b89ccc376e472aac7f0bcbfb51f80", "filename": "src/libcore/slice/rotate.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Frotate.rs?ref=75d937c49b79dcfb99895470c1fd63cc6f9343a3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cmp;\n-use mem;\n+use mem::{self, MaybeUninit};\n use ptr;\n \n /// Rotation is much faster if it has access to a little bit of memory. This\n@@ -26,12 +26,6 @@ union RawArray<T> {\n }\n \n impl<T> RawArray<T> {\n-    fn new() -> Self {\n-        unsafe { mem::uninitialized() }\n-    }\n-    fn ptr(&self) -> *mut T {\n-        unsafe { &self.typed as *const T as *mut T }\n-    }\n     fn cap() -> usize {\n         if mem::size_of::<T>() == 0 {\n             usize::max_value()\n@@ -88,8 +82,8 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mid: *mut T, mut right: usize) {\n         }\n     }\n \n-    let rawarray = RawArray::new();\n-    let buf = rawarray.ptr();\n+    let mut rawarray = MaybeUninit::<RawArray<T>>::uninitialized();\n+    let buf = &mut (*rawarray.as_mut_ptr()).typed as *mut [T; 2] as *mut T;\n \n     let dim = mid.sub(left).add(right);\n     if left <= right {"}, {"sha": "affe84fbef91f2e6908385556b1e3b8d0d90c2dd", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d937c49b79dcfb99895470c1fd63cc6f9343a3/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=75d937c49b79dcfb99895470c1fd63cc6f9343a3", "patch": "@@ -17,7 +17,7 @@\n //! stable sorting implementation.\n \n use cmp;\n-use mem;\n+use mem::{self, MaybeUninit};\n use ptr;\n \n /// When dropped, copies from `src` into `dest`.\n@@ -226,14 +226,14 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n-    let mut offsets_l: [u8; BLOCK] = unsafe { mem::uninitialized() };\n+    let mut offsets_l = MaybeUninit::<[u8; BLOCK]>::uninitialized();\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n     let mut end_r = ptr::null_mut();\n-    let mut offsets_r: [u8; BLOCK] = unsafe { mem::uninitialized() };\n+    let mut offsets_r = MaybeUninit::<[u8; BLOCK]>::uninitialized();\n \n     // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n     // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient.\n@@ -272,8 +272,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_l == end_l {\n             // Trace `block_l` elements from the left side.\n-            start_l = offsets_l.as_mut_ptr();\n-            end_l = offsets_l.as_mut_ptr();\n+            start_l = offsets_l.as_mut_ptr() as *mut u8;\n+            end_l = offsets_l.as_mut_ptr() as *mut u8;\n             let mut elem = l;\n \n             for i in 0..block_l {\n@@ -288,8 +288,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_r == end_r {\n             // Trace `block_r` elements from the right side.\n-            start_r = offsets_r.as_mut_ptr();\n-            end_r = offsets_r.as_mut_ptr();\n+            start_r = offsets_r.as_mut_ptr() as *mut u8;\n+            end_r = offsets_r.as_mut_ptr() as *mut u8;\n             let mut elem = r;\n \n             for i in 0..block_r {"}]}