{"sha": "1a439d286530a020bbf7683011f07227e236bd7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDM5ZDI4NjUzMGEwMjBiYmY3NjgzMDExZjA3MjI3ZTIzNmJkN2Y=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-05-04T18:52:15Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-05-04T18:52:15Z"}, "message": "Simplify the error Registry methods a little", "tree": {"sha": "f8dc81ca78bef50d6cc047557ed4e03e5857f13c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8dc81ca78bef50d6cc047557ed4e03e5857f13c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a439d286530a020bbf7683011f07227e236bd7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a439d286530a020bbf7683011f07227e236bd7f", "html_url": "https://github.com/rust-lang/rust/commit/1a439d286530a020bbf7683011f07227e236bd7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a439d286530a020bbf7683011f07227e236bd7f/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6318d24ad8440fa30428b405be1174478e9536e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6318d24ad8440fa30428b405be1174478e9536e3", "html_url": "https://github.com/rust-lang/rust/commit/6318d24ad8440fa30428b405be1174478e9536e3"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "b1d770d5bd5237e12f3a571d510512c822dff184", "filename": "src/librustc_errors/registry.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a439d286530a020bbf7683011f07227e236bd7f/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a439d286530a020bbf7683011f07227e236bd7f/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=1a439d286530a020bbf7683011f07227e236bd7f", "patch": "@@ -10,12 +10,12 @@ pub struct Registry {\n \n impl Registry {\n     pub fn new(long_descriptions: &[(&'static str, Option<&'static str>)]) -> Registry {\n-        Registry { long_descriptions: long_descriptions.iter().cloned().collect() }\n+        Registry { long_descriptions: long_descriptions.iter().copied().collect() }\n     }\n \n     /// This will panic if an invalid error code is passed in\n     pub fn find_description(&self, code: &str) -> Option<&'static str> {\n-        self.try_find_description(code).unwrap()\n+        self.long_descriptions[code]\n     }\n     /// Returns `InvalidErrorCode` if the code requested does not exist in the\n     /// registry. Otherwise, returns an `Option` where `None` means the error\n@@ -24,9 +24,6 @@ impl Registry {\n         &self,\n         code: &str,\n     ) -> Result<Option<&'static str>, InvalidErrorCode> {\n-        if !self.long_descriptions.contains_key(code) {\n-            return Err(InvalidErrorCode);\n-        }\n-        Ok(*self.long_descriptions.get(code).unwrap())\n+        self.long_descriptions.get(code).copied().ok_or(InvalidErrorCode)\n     }\n }"}]}