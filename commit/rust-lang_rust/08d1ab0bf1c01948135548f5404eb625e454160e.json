{"sha": "08d1ab0bf1c01948135548f5404eb625e454160e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZDFhYjBiZjFjMDE5NDgxMzU1NDhmNTQwNGViNjI1ZTQ1NDE2MGU=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-10-02T01:06:16Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-10-11T07:32:35Z"}, "message": "Always return tupled_upvar_tys for Closure/Generator consituent tys\n\nDepending on if upvar_tys inferred or not, we were returning either an\ninference variable which later resolves to a tuple or else the upvar tys\nthemselves\n\nCo-authored-by: Roxane Fruytier <roxane.fruytier@hotmail.com>", "tree": {"sha": "4323316571eb460e12e350334466dee41a8e5867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4323316571eb460e12e350334466dee41a8e5867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08d1ab0bf1c01948135548f5404eb625e454160e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08d1ab0bf1c01948135548f5404eb625e454160e", "html_url": "https://github.com/rust-lang/rust/commit/08d1ab0bf1c01948135548f5404eb625e454160e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08d1ab0bf1c01948135548f5404eb625e454160e/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc183702da942f4a25bff99b2bb6073d1aa7c9f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc183702da942f4a25bff99b2bb6073d1aa7c9f9", "html_url": "https://github.com/rust-lang/rust/commit/dc183702da942f4a25bff99b2bb6073d1aa7c9f9"}], "stats": {"total": 29, "additions": 9, "deletions": 20}, "files": [{"sha": "c21012591b60986d32839011cecd0ca8b542b82e", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/08d1ab0bf1c01948135548f5404eb625e454160e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d1ab0bf1c01948135548f5404eb625e454160e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=08d1ab0bf1c01948135548f5404eb625e454160e", "patch": "@@ -1708,29 +1708,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             ty::Closure(_, ref substs) => {\n                 let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());\n-                if let ty::Infer(ty::TyVar(_)) = ty.kind() {\n-                    // The inference variable will be replaced by a tuple once capture analysis\n-                    // completes. If the tuple meets a bound, so do all the elements within it.\n-                    vec![ty]\n-                } else {\n-                    substs.as_closure().upvar_tys().collect()\n-                }\n+                vec![ty]\n             }\n \n             ty::Generator(_, ref substs, _) => {\n-                let upvar_tys_resolved =\n-                    self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());\n-\n-                if let ty::Infer(ty::TyVar(_)) = upvar_tys_resolved.kind() {\n-                    // The inference variable will be replaced by a tuple once capture analysis\n-                    // completes, if the tuple meets a bound, so do all the elements within it.\n-                    let witness_resolved =\n-                        self.infcx.shallow_resolve(substs.as_generator().witness());\n-                    vec![upvar_tys_resolved, witness_resolved]\n-                } else {\n-                    let witness = substs.as_generator().witness();\n-                    substs.as_generator().upvar_tys().chain(iter::once(witness)).collect()\n-                }\n+                let ty = self.infcx.shallow_resolve(substs.as_generator().tupled_upvars_ty());\n+                let witness = substs.as_generator().witness();\n+                vec![ty].into_iter().chain(iter::once(witness)).collect()\n             }\n \n             ty::GeneratorWitness(types) => {"}, {"sha": "a6c93e91a9eba30bc33ef19773e366a75fa7491c", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08d1ab0bf1c01948135548f5404eb625e454160e/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08d1ab0bf1c01948135548f5404eb625e454160e/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=08d1ab0bf1c01948135548f5404eb625e454160e", "patch": "@@ -41,6 +41,7 @@ LL |     require_send(send_fut);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required because it appears within the type `(Arc<RefCell<i32>>,)`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36 {}]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36 {}]>`\n    = note: required because it appears within the type `impl Future`"}, {"sha": "5793bbd950ec06221efc6d33a4391fd645504807", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08d1ab0bf1c01948135548f5404eb625e454160e/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08d1ab0bf1c01948135548f5404eb625e454160e/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=08d1ab0bf1c01948135548f5404eb625e454160e", "patch": "@@ -29,6 +29,7 @@ LL |     require_send(send_gen);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required because it appears within the type `(Arc<RefCell<i32>>,)`\n    = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:38:5: 41:6 {()}]`\n    = note: required because it appears within the type `impl Generator`\n    = note: required because it appears within the type `impl Generator`"}, {"sha": "9669f4d96b9d1c1c5a1d9c0b16f57ab9771e73d8", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08d1ab0bf1c01948135548f5404eb625e454160e/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08d1ab0bf1c01948135548f5404eb625e454160e/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=08d1ab0bf1c01948135548f5404eb625e454160e", "patch": "@@ -29,6 +29,7 @@ LL |     require_send(send_gen);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n+   = note: required because it appears within the type `(Arc<RefCell<i32>>,)`\n    = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n    = note: required because it appears within the type `Opaque(DefId(0:29 ~ generator_print_verbose_1[317d]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n    = note: required because it appears within the type `Opaque(DefId(0:32 ~ generator_print_verbose_1[317d]::make_non_send_generator2::{opaque#0}), [])`"}, {"sha": "fc2bc62f3a7885156d24697f4c82a170e1ccc430", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08d1ab0bf1c01948135548f5404eb625e454160e/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/08d1ab0bf1c01948135548f5404eb625e454160e/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=08d1ab0bf1c01948135548f5404eb625e454160e", "patch": "@@ -11,6 +11,7 @@ LL |     send(before());\n    |     ^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n+   = note: required because it appears within the type `(Rc<Cell<i32>>,)`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n    = note: required because it appears within the type `impl Fn<(i32,)>`\n \n@@ -27,6 +28,7 @@ LL | fn after() -> impl Fn(i32) {\n    |               ------------ within this `impl Fn<(i32,)>`\n    |\n    = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n+   = note: required because it appears within the type `(Rc<Cell<i32>>,)`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22]`\n    = note: required because it appears within the type `impl Fn<(i32,)>`\n "}]}