{"sha": "f801723dd2e4a518c1608909509f47f03d75fe1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MDE3MjNkZDJlNGE1MThjMTYwODkwOTUwOWY0N2YwM2Q3NWZlMWE=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-08T17:28:39Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-08T17:28:39Z"}, "message": "Got the magic completion working.", "tree": {"sha": "202cfd56356ebf4a776eee84a7ee22c739ededcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/202cfd56356ebf4a776eee84a7ee22c739ededcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f801723dd2e4a518c1608909509f47f03d75fe1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f801723dd2e4a518c1608909509f47f03d75fe1a", "html_url": "https://github.com/rust-lang/rust/commit/f801723dd2e4a518c1608909509f47f03d75fe1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f801723dd2e4a518c1608909509f47f03d75fe1a/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5216b09ed67b4d9ff57e3ffb7fec010e73832309", "url": "https://api.github.com/repos/rust-lang/rust/commits/5216b09ed67b4d9ff57e3ffb7fec010e73832309", "html_url": "https://github.com/rust-lang/rust/commit/5216b09ed67b4d9ff57e3ffb7fec010e73832309"}], "stats": {"total": 57, "additions": 16, "deletions": 41}, "files": [{"sha": "7af485cdd15e1f058423dac536cb5d10ab98a8aa", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 7, "deletions": 41, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f801723dd2e4a518c1608909509f47f03d75fe1a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f801723dd2e4a518c1608909509f47f03d75fe1a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=f801723dd2e4a518c1608909509f47f03d75fe1a", "patch": "@@ -6,13 +6,12 @@ use hir::{ self, db::HirDatabase };\n use ra_syntax::{ SyntaxKind, ast, ast::AstNode, TextRange };\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-    let item_list = ast::ItemList::cast(ctx.token.parent());\n-    let impl_block = item_list\n-        .clone()\n-        .and_then(|i| i.syntax().parent())\n-        .and_then(|p| ast::ImplBlock::cast(p));\n+    let impl_block = ctx.impl_block.as_ref();\n+    let item_list = impl_block.and_then(|i| i.item_list());\n \n-    if item_list.is_none() || impl_block.is_none() {\n+    if item_list.is_none() \n+    || impl_block.is_none() \n+    || ctx.function_syntax.is_some() {\n         return;\n     }\n \n@@ -166,7 +165,8 @@ pub(crate) fn add_function_impl(acc: &mut Completions, ctx: &CompletionContext,\n         format!(\"fn {}()\", func_name.to_string())\n     };\n \n-    let builder = CompletionItem::new(CompletionKind::Magic, start, label);\n+    let builder = CompletionItem::new(CompletionKind::Magic, start, label.clone())\n+        .lookup_by(label);\n \n     let completion_kind = if func.has_self_param(ctx.db) {\n         CompletionItemKind::Method\n@@ -183,7 +183,6 @@ pub(crate) fn add_function_impl(acc: &mut Completions, ctx: &CompletionContext,\n     builder\n         .insert_text(snippet)\n         .kind(completion_kind)\n-        .lookup_by(func_name.to_string())\n         .add_to(acc);\n }\n \n@@ -219,7 +218,6 @@ mod tests {\n                 delete: [138; 138),\n                 insert: \"fn foo() {}\",\n                 kind: Function,\n-                lookup: \"foo\",\n             },\n         ]\n         \"###);\n@@ -251,7 +249,6 @@ mod tests {\n                 delete: [193; 193),\n                 insert: \"fn bar() {}\",\n                 kind: Function,\n-                lookup: \"bar\",\n             },\n         ]\n         \"###);\n@@ -280,7 +277,6 @@ mod tests {\n                 delete: [141; 141),\n                 insert: \"fn foo<T>() {}\",\n                 kind: Function,\n-                lookup: \"foo\",\n             },\n         ]\n         \"###);\n@@ -309,36 +305,6 @@ mod tests {\n                 delete: [163; 163),\n                 insert: \"fn foo<T>()\\nwhere T: Into<String> {}\",\n                 kind: Function,\n-                lookup: \"foo\",\n-            },\n-        ]\n-        \"###);\n-    }\n-\n-    #[test]\n-    fn start_from_fn_kw() {\n-        let completions = complete(\n-            r\"\n-            trait Test {\n-                fn foo();\n-            }\n-\n-            struct T1;\n-\n-            impl Test for T1 {\n-                fn <|>\n-            }\n-            \",\n-        );\n-        assert_debug_snapshot!(completions, @r###\"\n-        [\n-            CompletionItem {\n-                label: \"fn foo()\",\n-                source_range: [138; 140),\n-                delete: [138; 140),\n-                insert: \"fn foo() {}\",\n-                kind: Function,\n-                lookup: \"foo\",\n             },\n         ]\n         \"###);"}, {"sha": "18c91a840752b024c1e2848f18746447b0a5f7a1", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f801723dd2e4a518c1608909509f47f03d75fe1a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f801723dd2e4a518c1608909509f47f03d75fe1a/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=f801723dd2e4a518c1608909509f47f03d75fe1a", "patch": "@@ -24,6 +24,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) use_item_syntax: Option<ast::UseItem>,\n     pub(super) record_lit_syntax: Option<ast::RecordLit>,\n     pub(super) record_lit_pat: Option<ast::RecordPat>,\n+    pub(super) impl_block: Option<ast::ImplBlock>,\n     pub(super) is_param: bool,\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n@@ -71,6 +72,7 @@ impl<'a> CompletionContext<'a> {\n             use_item_syntax: None,\n             record_lit_syntax: None,\n             record_lit_pat: None,\n+            impl_block: None,\n             is_param: false,\n             is_pat_binding: false,\n             is_trivial_path: false,\n@@ -147,6 +149,13 @@ impl<'a> CompletionContext<'a> {\n             self.record_lit_syntax = find_node_at_offset(original_file.syntax(), self.offset);\n         }\n \n+        self.impl_block = self\n+            .token\n+            .parent()\n+            .ancestors()\n+            .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n+            .find_map(ast::ImplBlock::cast);\n+\n         let top_node = name_ref\n             .syntax()\n             .ancestors()"}]}