{"sha": "d4bcc4ae6dcd6c01f05edf1888d4696e61a40288", "node_id": "C_kwDOAAsO6NoAKGQ0YmNjNGFlNmRjZDZjMDFmMDVlZGYxODg4ZDQ2OTZlNjFhNDAyODg", "commit": {"author": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2022-08-04T05:07:50Z"}, "committer": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2022-08-04T05:07:50Z"}, "message": "Remove self-referential intra-doc links.", "tree": {"sha": "3b7eec0bb7c47b20fab3572342f793af38ca9cbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b7eec0bb7c47b20fab3572342f793af38ca9cbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4bcc4ae6dcd6c01f05edf1888d4696e61a40288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bcc4ae6dcd6c01f05edf1888d4696e61a40288", "html_url": "https://github.com/rust-lang/rust/commit/d4bcc4ae6dcd6c01f05edf1888d4696e61a40288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4bcc4ae6dcd6c01f05edf1888d4696e61a40288/comments", "author": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b87306b98eceb60873ee20e9542f855ec90809f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b87306b98eceb60873ee20e9542f855ec90809f", "html_url": "https://github.com/rust-lang/rust/commit/1b87306b98eceb60873ee20e9542f855ec90809f"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "60ecc9c0bdb1cbdc5d395627eee4d9935d0c0ecf", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4bcc4ae6dcd6c01f05edf1888d4696e61a40288/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4bcc4ae6dcd6c01f05edf1888d4696e61a40288/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=d4bcc4ae6dcd6c01f05edf1888d4696e61a40288", "patch": "@@ -184,7 +184,7 @@ pub struct Context<'a> {\n }\n \n impl<'a> Context<'a> {\n-    /// Create a new [`Context`] from a [`&Waker`](Waker).\n+    /// Create a new `Context` from a [`&Waker`](Waker).\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[must_use]\n     #[inline]\n@@ -214,7 +214,7 @@ impl fmt::Debug for Context<'_> {\n /// This handle encapsulates a [`RawWaker`] instance, which defines the\n /// executor-specific wakeup behavior.\n ///\n-/// The typical life of a [`Waker`] is that it is constructed by an executor, wrapped in a\n+/// The typical life of a `Waker` is that it is constructed by an executor, wrapped in a\n /// [`Context`], then passed to [`Future::poll()`]. Then, if the future chooses to return\n /// [`Poll::Pending`], it must also store the waker somehow and call [`Waker::wake()`] when\n /// the future should be polled again.\n@@ -245,7 +245,7 @@ impl Waker {\n     /// As long as the executor keeps running and the task is not finished, it is\n     /// guaranteed that each invocation of [`wake()`](Self::wake) (or\n     /// [`wake_by_ref()`](Self::wake_by_ref)) will be followed by at least one\n-    /// [`poll()`] of the task to which this [`Waker`] belongs. This makes\n+    /// [`poll()`] of the task to which this `Waker` belongs. This makes\n     /// it possible to temporarily yield to other tasks while running potentially\n     /// unbounded processing loops.\n     ///\n@@ -289,7 +289,7 @@ impl Waker {\n         unsafe { (self.waker.vtable.wake_by_ref)(self.waker.data) }\n     }\n \n-    /// Returns `true` if this `Waker` and another [`Waker`] would awake the same task.\n+    /// Returns `true` if this `Waker` and another `Waker` would awake the same task.\n     ///\n     /// This function works on a best-effort basis, and may return false even\n     /// when the `Waker`s would awaken the same task. However, if this function"}]}