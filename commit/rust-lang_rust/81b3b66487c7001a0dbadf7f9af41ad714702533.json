{"sha": "81b3b66487c7001a0dbadf7f9af41ad714702533", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYjNiNjY0ODdjNzAwMWEwZGJhZGY3ZjlhZjQxYWQ3MTQ3MDI1MzM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-03T00:11:55Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-16T21:17:51Z"}, "message": "Error if an unstable const eval feature is used in a stable const fn", "tree": {"sha": "ffbe7204b93010d5ac18bd7376991a5bccd99bd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffbe7204b93010d5ac18bd7376991a5bccd99bd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81b3b66487c7001a0dbadf7f9af41ad714702533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81b3b66487c7001a0dbadf7f9af41ad714702533", "html_url": "https://github.com/rust-lang/rust/commit/81b3b66487c7001a0dbadf7f9af41ad714702533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81b3b66487c7001a0dbadf7f9af41ad714702533/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4edc161f20ccbc77fffb7ceb60ebb6102cbd747", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4edc161f20ccbc77fffb7ceb60ebb6102cbd747", "html_url": "https://github.com/rust-lang/rust/commit/e4edc161f20ccbc77fffb7ceb60ebb6102cbd747"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "032cbc23a3f52d8c552224d289443ca767011854", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81b3b66487c7001a0dbadf7f9af41ad714702533/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3b66487c7001a0dbadf7f9af41ad714702533/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=81b3b66487c7001a0dbadf7f9af41ad714702533", "patch": "@@ -1,6 +1,6 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::config::nightly_options;\n@@ -16,7 +16,29 @@ pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) {\n \n     let gate = match op.status_in_item(ccx) {\n         Status::Allowed => return,\n-        Status::Unstable(gate) if ccx.tcx.features().enabled(gate) => return,\n+\n+        Status::Unstable(gate) if ccx.tcx.features().enabled(gate) => {\n+            let unstable_in_stable = ccx.const_kind() == hir::ConstContext::ConstFn\n+                && ccx.tcx.features().enabled(sym::staged_api)\n+                && !ccx.tcx.has_attr(ccx.def_id.to_def_id(), sym::rustc_const_unstable)\n+                && !super::allow_internal_unstable(ccx.tcx, ccx.def_id.to_def_id(), gate);\n+\n+            if unstable_in_stable {\n+                ccx.tcx.sess\n+                    .struct_span_err(span, &format!(\"`#[feature({})]` cannot be depended on in a const-stable function\", gate.as_str()))\n+                    .span_suggestion(\n+                        ccx.body.span,\n+                        \"if it is not part of the public API, make this function unstably const\",\n+                        concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n').to_owned(),\n+                        Applicability::HasPlaceholders,\n+                    )\n+                    .help(\"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\")\n+                    .emit();\n+            }\n+\n+            return;\n+        }\n+\n         Status::Unstable(gate) => Some(gate),\n         Status::Forbidden => None,\n     };"}, {"sha": "0228f2d7de023f87f7eb440e4b8bc597344ac230", "filename": "compiler/rustc_mir/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81b3b66487c7001a0dbadf7f9af41ad714702533/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3b66487c7001a0dbadf7f9af41ad714702533/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=81b3b66487c7001a0dbadf7f9af41ad714702533", "patch": "@@ -2,7 +2,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{self, BasicBlock, Location};\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n use super::ops;\n use super::qualifs::{NeedsDrop, Qualif};\n@@ -11,7 +11,12 @@ use super::ConstCx;\n \n /// Returns `true` if we should use the more precise live drop checker that runs after drop\n /// elaboration.\n-pub fn checking_enabled(tcx: TyCtxt<'tcx>) -> bool {\n+pub fn checking_enabled(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n+    // Const-stable functions must always use the stable live drop checker.\n+    if tcx.features().staged_api && !tcx.has_attr(def_id.to_def_id(), sym::rustc_const_unstable) {\n+        return false;\n+    }\n+\n     tcx.features().const_precise_live_drops\n }\n \n@@ -25,7 +30,7 @@ pub fn check_live_drops(tcx: TyCtxt<'tcx>, def_id: LocalDefId, body: &mir::Body<\n         return;\n     }\n \n-    if !checking_enabled(tcx) {\n+    if !checking_enabled(tcx, def_id) {\n         return;\n     }\n "}, {"sha": "0501302b7610a089c0552f389b0f54895b1fd52b", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81b3b66487c7001a0dbadf7f9af41ad714702533/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81b3b66487c7001a0dbadf7f9af41ad714702533/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=81b3b66487c7001a0dbadf7f9af41ad714702533", "patch": "@@ -551,7 +551,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n             | TerminatorKind::DropAndReplace { place: dropped_place, .. } => {\n                 // If we are checking live drops after drop-elaboration, don't emit duplicate\n                 // errors here.\n-                if super::post_drop_elaboration::checking_enabled(self.tcx) {\n+                if super::post_drop_elaboration::checking_enabled(self.tcx, self.def_id) {\n                     return;\n                 }\n "}]}