{"sha": "4832f3fd5d471ec7a4bfe4a599d8a4378b6d248d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MzJmM2ZkNWQ0NzFlYzdhNGJmZTRhNTk5ZDhhNDM3OGI2ZDI0OGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-26T01:10:18Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-26T01:10:18Z"}, "message": "review comments", "tree": {"sha": "42008fd40f6627fe21523b074e8149fe474ea378", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42008fd40f6627fe21523b074e8149fe474ea378"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4832f3fd5d471ec7a4bfe4a599d8a4378b6d248d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4832f3fd5d471ec7a4bfe4a599d8a4378b6d248d", "html_url": "https://github.com/rust-lang/rust/commit/4832f3fd5d471ec7a4bfe4a599d8a4378b6d248d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4832f3fd5d471ec7a4bfe4a599d8a4378b6d248d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89571a1bbc25a03ac0195460c7ec463d3f089def", "url": "https://api.github.com/repos/rust-lang/rust/commits/89571a1bbc25a03ac0195460c7ec463d3f089def", "html_url": "https://github.com/rust-lang/rust/commit/89571a1bbc25a03ac0195460c7ec463d3f089def"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "c4546dedfcdd48db5d90770ad7271bc9b8687e34", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4832f3fd5d471ec7a4bfe4a599d8a4378b6d248d/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4832f3fd5d471ec7a4bfe4a599d8a4378b6d248d/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=4832f3fd5d471ec7a4bfe4a599d8a4378b6d248d", "patch": "@@ -17,7 +17,6 @@ use rustc_span::symbol::kw;\n use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n \n use log::{debug, trace};\n-use std::mem;\n \n const TURBOFISH: &str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n \n@@ -459,7 +458,7 @@ impl<'a> Parser<'a> {\n         err: &mut DiagnosticBuilder<'_>,\n         inner_op: &Expr,\n         outer_op: &Spanned<AssocOp>,\n-    ) -> bool /* recover */ {\n+    ) -> bool /* advanced the cursor */ {\n         if let ExprKind::Binary(op, ref l1, ref r1) = inner_op.kind {\n             if let ExprKind::Field(_, ident) = l1.kind {\n                 if ident.as_str().parse::<i32>().is_err() && !matches!(r1.kind, ExprKind::Lit(_)) {\n@@ -468,6 +467,16 @@ impl<'a> Parser<'a> {\n                     return false;\n                 }\n             }\n+            let mut enclose = |left: Span, right: Span| {\n+                err.multipart_suggestion(\n+                    \"parenthesize the comparison\",\n+                    vec![\n+                        (left.shrink_to_lo(), \"(\".to_string()),\n+                        (right.shrink_to_hi(), \")\".to_string()),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            };\n             return match (op.node, &outer_op.node) {\n                 // `x == y == z`\n                 (BinOpKind::Eq, AssocOp::Equal) |\n@@ -492,23 +501,18 @@ impl<'a> Parser<'a> {\n                 // `x == y < z`\n                 (BinOpKind::Eq, AssocOp::Less) | (BinOpKind::Eq, AssocOp::LessEqual) |\n                 (BinOpKind::Eq, AssocOp::Greater) | (BinOpKind::Eq, AssocOp::GreaterEqual) => {\n-                    // Consume `/`z`/outer-op-rhs.\n+                    // Consume `z`/outer-op-rhs.\n                     let snapshot = self.clone();\n                     match self.parse_expr() {\n                         Ok(r2) => {\n-                            err.multipart_suggestion(\n-                                \"parenthesize the comparison\",\n-                                vec![\n-                                    (r1.span.shrink_to_lo(), \"(\".to_string()),\n-                                    (r2.span.shrink_to_hi(), \")\".to_string()),\n-                                ],\n-                                Applicability::MaybeIncorrect,\n-                            );\n+                            // We are sure that outer-op-rhs could be consumed, the suggestion is\n+                            // likely correct.\n+                            enclose(r1.span, r2.span);\n                             true\n                         }\n                         Err(mut expr_err) => {\n                             expr_err.cancel();\n-                            mem::replace(self, snapshot);\n+                            *self = snapshot;\n                             false\n                         }\n                     }\n@@ -517,21 +521,16 @@ impl<'a> Parser<'a> {\n                 (BinOpKind::Lt, AssocOp::Equal) | (BinOpKind::Le, AssocOp::Equal) |\n                 (BinOpKind::Gt, AssocOp::Equal) | (BinOpKind::Ge, AssocOp::Equal) => {\n                     let snapshot = self.clone();\n-                    err.multipart_suggestion(\n-                        \"parenthesize the comparison\",\n-                        vec![\n-                            (l1.span.shrink_to_lo(), \"(\".to_string()),\n-                            (r1.span.shrink_to_hi(), \")\".to_string()),\n-                        ],\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    // At this point it is always valid to enclose the lhs in parentheses, no\n+                    // further checks are necessary.\n                     match self.parse_expr() {\n                         Ok(_) => {\n+                            enclose(l1.span, r1.span);\n                             true\n                         }\n                         Err(mut expr_err) => {\n                             expr_err.cancel();\n-                            mem::replace(self, snapshot);\n+                            *self = snapshot;\n                             false\n                         }\n                     }\n@@ -588,11 +587,11 @@ impl<'a> Parser<'a> {\n                     );\n                 };\n \n+                // Include `<` to provide this recommendation even in a case like\n+                // `Foo<Bar<Baz<Qux, ()>>>`\n                 if op.node == BinOpKind::Lt && outer_op.node == AssocOp::Less\n                     || outer_op.node == AssocOp::Greater\n                 {\n-                    // Include `<` to provide this recommendation\n-                    // even in a case like `Foo<Bar<Baz<Qux, ()>>>`\n                     if outer_op.node == AssocOp::Less {\n                         let snapshot = self.clone();\n                         self.bump();\n@@ -606,7 +605,7 @@ impl<'a> Parser<'a> {\n                         {\n                             // We don't have `foo< bar >(` or `foo< bar >::`, so we rewind the\n                             // parser and bail out.\n-                            mem::replace(self, snapshot.clone());\n+                            *self = snapshot.clone();\n                         }\n                     }\n                     return if token::ModSep == self.token.kind {\n@@ -631,7 +630,7 @@ impl<'a> Parser<'a> {\n                                 expr_err.cancel();\n                                 // Not entirely sure now, but we bubble the error up with the\n                                 // suggestion.\n-                                mem::replace(self, snapshot);\n+                                *self = snapshot;\n                                 Err(err)\n                             }\n                         }\n@@ -695,7 +694,7 @@ impl<'a> Parser<'a> {\n \n         if self.token.kind == token::Eof {\n             // Not entirely sure that what we consumed were fn arguments, rollback.\n-            mem::replace(self, snapshot);\n+            *self = snapshot;\n             Err(())\n         } else {\n             // 99% certain that the suggestion is correct, continue parsing."}]}