{"sha": "fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNmFkMDk3YzY1NGQyNjU1YWQxMTYxMGIyYzk2ZDU3N2EzZmNjMmI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-09-24T16:58:00Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-09-26T18:13:31Z"}, "message": "deduplicate trait errors before they are displayed\n\nBecause of type inference, duplicate obligations exist and cause duplicate\nerrors. To avoid this, only display the first error for each (predicate,span).\n\nThe inclusion of the span is somewhat bikesheddy, but *is* the more\nconservative option (it does not remove some instability, as duplicate\nobligations are ignored by `duplicate_set` under some inference conditions).\n\nFixes #28098\ncc #21528 (is it a dupe?)", "tree": {"sha": "2ddfebf00b6466e70f9560418dff3aee961188f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ddfebf00b6466e70f9560418dff3aee961188f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "html_url": "https://github.com/rust-lang/rust/commit/fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9169e6c53c53999d0ca176067a36c57aef84757b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9169e6c53c53999d0ca176067a36c57aef84757b", "html_url": "https://github.com/rust-lang/rust/commit/9169e6c53c53999d0ca176067a36c57aef84757b"}], "stats": {"total": 117, "additions": 77, "deletions": 40}, "files": [{"sha": "3def56f94a1818b62cc631f80782500b21e4a4ec", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -43,7 +43,7 @@ use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::{Span, DUMMY_SP};\n-use util::nodemap::{FnvHashMap, NodeMap};\n+use util::nodemap::{FnvHashMap, FnvHashSet, NodeMap};\n \n use self::combine::CombineFields;\n use self::region_inference::{RegionVarBindings, RegionSnapshot};\n@@ -92,6 +92,10 @@ pub struct InferCtxt<'a, 'tcx: 'a> {\n \n     pub fulfillment_cx: RefCell<traits::FulfillmentContext<'tcx>>,\n \n+    // the set of predicates on which errors have been reported, to\n+    // avoid reporting the same error twice.\n+    pub reported_trait_errors: RefCell<FnvHashSet<traits::TraitErrorKey<'tcx>>>,\n+\n     // This is a temporary field used for toggling on normalization in the inference context,\n     // as we move towards the approach described here:\n     // https://internals.rust-lang.org/t/flattening-the-contexts-for-fun-and-profit/2293\n@@ -374,6 +378,7 @@ pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n         region_vars: RegionVarBindings::new(tcx),\n         parameter_environment: param_env.unwrap_or(tcx.empty_parameter_environment()),\n         fulfillment_cx: RefCell::new(traits::FulfillmentContext::new(errors_will_be_reported)),\n+        reported_trait_errors: RefCell::new(FnvHashSet()),\n         normalize: false,\n         err_count_on_creation: tcx.sess.err_count()\n     }"}, {"sha": "c6c438f1d83c479a01487616535f260c9301d96f", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -33,6 +33,26 @@ use std::fmt;\n use syntax::codemap::Span;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n \n+#[derive(Debug, PartialEq, Eq, Hash)]\n+pub struct TraitErrorKey<'tcx> {\n+    is_warning: bool,\n+    span: Span,\n+    predicate: ty::Predicate<'tcx>\n+}\n+\n+impl<'tcx> TraitErrorKey<'tcx> {\n+    fn from_error<'a>(infcx: &InferCtxt<'a, 'tcx>,\n+                      e: &FulfillmentError<'tcx>) -> Self {\n+        let predicate =\n+            infcx.resolve_type_vars_if_possible(&e.obligation.predicate);\n+        TraitErrorKey {\n+            is_warning: is_warning(&e.obligation),\n+            span: e.obligation.cause.span,\n+            predicate: infcx.tcx.erase_regions(&predicate)\n+        }\n+    }\n+}\n+\n pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                            errors: &Vec<FulfillmentError<'tcx>>) {\n     for error in errors {\n@@ -42,6 +62,13 @@ pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n \n fn report_fulfillment_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                       error: &FulfillmentError<'tcx>) {\n+    let error_key = TraitErrorKey::from_error(infcx, error);\n+    debug!(\"report_fulfillment_errors({:?}) - key={:?}\",\n+           error, error_key);\n+    if !infcx.reported_trait_errors.borrow_mut().insert(error_key) {\n+        debug!(\"report_fulfillment_errors: skipping duplicate\");\n+        return;\n+    }\n     match error.code {\n         FulfillmentErrorCode::CodeSelectionError(ref e) => {\n             report_selection_error(infcx, &error.obligation, e);"}, {"sha": "d4e6f693d965d79c7e008948975e912924bdaca1", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -49,6 +49,12 @@ pub struct FulfillmentContext<'tcx> {\n     // than the `SelectionCache`: it avoids duplicate errors and\n     // permits recursive obligations, which are often generated from\n     // traits like `Send` et al.\n+    //\n+    // Note that because of type inference, a predicate can still\n+    // occur twice in the predicates list, for example when 2\n+    // initially-distinct type variables are unified after being\n+    // inserted. Deduplicating the predicate set on selection had a\n+    // significant performance cost the last time I checked.\n     duplicate_set: FulfilledPredicates<'tcx>,\n \n     // A list of all obligations that have been registered with this"}, {"sha": "a037621f5c02545265b5fc7ae4a87845083dbe9a", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -21,10 +21,12 @@ use middle::subst;\n use middle::ty::{self, HasTypeFlags, Ty};\n use middle::ty::fold::TypeFoldable;\n use middle::infer::{self, fixup_err_to_string, InferCtxt};\n+\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::{Span, DUMMY_SP};\n \n+pub use self::error_reporting::TraitErrorKey;\n pub use self::error_reporting::report_fulfillment_errors;\n pub use self::error_reporting::report_overflow_error;\n pub use self::error_reporting::report_selection_error;"}, {"sha": "c5a47f3e5358f1440330edbfc7427c32d4bf7f10", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -32,5 +32,4 @@ fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }"}, {"sha": "c9374d42938002979a871480b1e1b94987ea567b", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -39,7 +39,6 @@ pub fn f1_int_uint() {\n pub fn f1_uint_uint() {\n     f1(2u32, 4u32);\n     //~^ ERROR the trait `Foo` is not implemented\n-    //~| ERROR the trait `Foo` is not implemented\n }\n \n pub fn f1_uint_int() {"}, {"sha": "90cbbf242aad4b2b07ac0cb751444cb1cda22943", "filename": "src/test/compile-fail/coerce-unsafe-to-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n }"}, {"sha": "a8f47ab92e52950040606ebc5174b7e47d8373c0", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -23,7 +23,6 @@ const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR mismatched types\n     //~| the trait `core::ops::Add<u8>` is not implemented for the type `i8`\n-    //~| the trait `core::ops::Add<u8>` is not implemented for the type `i8`\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {\n@@ -33,4 +32,3 @@ fn main() {\n fn foo<T:fmt::Debug>(x: T) {\n     println!(\"{:?}\", x);\n }\n-"}, {"sha": "e9dd1cb719dbcc88455cab8a61d517fa6e37e77d", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -20,10 +20,8 @@ fn main() {\n     apply(&3, takes_imm);\n     apply(&3, takes_mut);\n     //~^ ERROR (values differ in mutability)\n-    //~| ERROR (values differ in mutability)\n \n     apply(&mut 3, takes_mut);\n     apply(&mut 3, takes_imm);\n     //~^ ERROR (values differ in mutability)\n-    //~| ERROR (values differ in mutability)\n }"}, {"sha": "c77683045170e11675cf029c64b20f169c16f346", "filename": "src/test/compile-fail/for-loop-bogosity.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -25,9 +25,6 @@ pub fn main() {\n         y: 2,\n     };\n     for x in bogus { //~ ERROR `core::iter::Iterator` is not implemented for the type `MyStruct`\n-    //~^ ERROR\n-    //~^^ ERROR\n-    // FIXME(#21528) not fulfilled obligation error should be reported once, not thrice\n         drop(x);\n     }\n }"}, {"sha": "3d3b7bc1bcb430b30416e4f77ac0a2c656a220c8", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -14,7 +14,6 @@\n fn main() {\n     fn bar<T>(_: T) {}\n     [0][0u8]; //~ ERROR: the trait `core::ops::Index<u8>` is not implemented\n-    //~^ ERROR: the trait `core::ops::Index<u8>` is not implemented\n \n     [0][0]; // should infer to be a usize\n "}, {"sha": "f78d677679bc88ed9d4cd75b31b91901c704c98d", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -14,21 +14,13 @@ pub fn main() {\n     v[3_usize];\n     v[3];\n     v[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<u8>` is not implemented\n     v[3i8];  //~ERROR the trait `core::ops::Index<i8>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<i8>` is not implemented\n     v[3u32]; //~ERROR the trait `core::ops::Index<u32>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<u32>` is not implemented\n     v[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<i32>` is not implemented\n     s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n     s.as_bytes()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<u8>` is not implemented\n     s.as_bytes()[3i8];  //~ERROR the trait `core::ops::Index<i8>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<i8>` is not implemented\n     s.as_bytes()[3u32]; //~ERROR the trait `core::ops::Index<u32>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<u32>` is not implemented\n     s.as_bytes()[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<i32>` is not implemented\n }"}, {"sha": "69899105bc3178720a9c880b5f7efc61c1b0724f", "filename": "src/test/compile-fail/issue-11771.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -12,12 +12,10 @@ fn main() {\n     let x = ();\n     1 +\n     x //~^ ERROR E0277\n-      //~| ERROR E0277\n     ;\n \n     let x: () = ();\n     1 +\n     x //~^ ERROR E0277\n-      //~| ERROR E0277\n     ;\n }"}, {"sha": "13e677d72bc1e35c0cef924ac7ba63c0dd789a61", "filename": "src/test/compile-fail/issue-13352.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -18,5 +18,4 @@ fn main() {\n     });\n     2_usize + (loop {});\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n }"}, {"sha": "6b19cb0b68f10e6c294d9fe30d4c226df3b37b3b", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -14,5 +14,4 @@\n fn main() {\n     in () { 0 };\n     //~^ ERROR: the trait `core::ops::Placer<_>` is not implemented\n-    //~| ERROR: the trait `core::ops::Placer<_>` is not implemented\n }"}, {"sha": "f2d65af9cdfc80276be064f05092f903f8be64d3", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -11,9 +11,6 @@\n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `core::iter::Iterator\n-//~^^ ERROR\n-//~^^^ ERROR\n-// FIXME(#21528) error should be reported once, not thrice\n }\n \n fn main() {}"}, {"sha": "256c5d8e6f72cc08d375e1e45caba593528c0e77", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -17,7 +17,6 @@ impl<A> vec_monad<A> for Vec<A> {\n         let mut r = panic!();\n         for elt in self { r = r + f(*elt); }\n         //~^ ERROR E0277\n-        //~| ERROR E0277\n    }\n }\n fn main() {"}, {"sha": "aa7fa82fa29ba843654586c2f5ad14681770ddfd", "filename": "src/test/compile-fail/issue-22645.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -23,7 +23,5 @@ impl<RHS: Scalar> Add <RHS> for Bob {\n fn main() {\n   let b = Bob + 3.5;\n   b + 3 //~ ERROR: is not implemented\n-  //~^ ERROR: is not implemented\n-  //~^^ ERROR: is not implemented\n-  //~^^^ ERROR: mismatched types\n+  //~^ ERROR: mismatched types\n }"}, {"sha": "9936f67b3af3c8e0908bfff2d03376c0d7725c77", "filename": "src/test/compile-fail/issue-24352.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     1.0f64 - 1.0;\n     1.0f64 - 1 //~ ERROR: is not implemented\n-    //~^ ERROR: is not implemented\n }"}, {"sha": "f565d24e1fd082809170801f889a335d0cee5a45", "filename": "src/test/compile-fail/issue-28098.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _ = Iterator::next(&mut ());\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    for _ in false {}\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    let _ = Iterator::next(&mut ());\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    other()\n+}\n+\n+pub fn other() {\n+    // check errors are still reported globally\n+\n+    let _ = Iterator::next(&mut ());\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    let _ = Iterator::next(&mut ());\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    for _ in false {}\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+}"}, {"sha": "c980572fa152f595693a2e5132be769fb85f23c6", "filename": "src/test/compile-fail/shift-various-bad-types.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -18,15 +18,12 @@ struct Panolpy {\n fn foo(p: &Panolpy) {\n     22 >> p.char;\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n \n     22 >> p.str;\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n \n     22 >> p;\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n \n     let x;\n     22 >> x; // ambiguity error winds up being suppressed"}, {"sha": "6e48ae20d09f3ab1ebe47f1f91fa81b89bd1db5b", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -11,5 +11,4 @@\n pub fn main() {\n     let s: &str = \"hello\";\n     let c: u8 = s[4]; //~ ERROR the trait `core::ops::Index<_>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<_>` is not implemented\n }"}, {"sha": "ec6a14778a463f22f266b9f6aa66654b52935d5f", "filename": "src/test/compile-fail/str-mut-idx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -17,7 +17,6 @@ fn mutate(s: &mut str) {\n     s[1usize] = bot();\n     //~^ ERROR `core::ops::Index<usize>` is not implemented for the type `str`\n     //~| ERROR `core::ops::IndexMut<usize>` is not implemented for the type `str`\n-    //~| ERROR `core::ops::Index<usize>` is not implemented for the type `str`\n }\n \n pub fn main() {}"}, {"sha": "361df93a71669ed3ccdb7a22e27415efb587a9dd", "filename": "src/test/compile-fail/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -35,7 +35,6 @@ fn b() {\n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "ca15d1bb5eefc83f11278776d3d9ba9bbab47784", "filename": "src/test/compile-fail/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -35,7 +35,6 @@ fn b() {\n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "b960362aad7cd36c3f0d97bafa4507b9087ad2cd", "filename": "src/test/compile-fail/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6ad097c654d2655ad11610b2c96d577a3fcc2b/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=fe6ad097c654d2655ad11610b2c96d577a3fcc2b", "patch": "@@ -36,7 +36,6 @@ fn b() {\n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }\n \n fn main() { }"}]}