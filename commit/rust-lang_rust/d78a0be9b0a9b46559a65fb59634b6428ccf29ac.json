{"sha": "d78a0be9b0a9b46559a65fb59634b6428ccf29ac", "node_id": "C_kwDOAAsO6NoAKGQ3OGEwYmU5YjBhOWI0NjU1OWE2NWZiNTk2MzRiNjQyOGNjZjI5YWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-11T15:30:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-11T15:30:46Z"}, "message": "Auto merge of #14125 - Veykril:inlay-fix, r=Veykril\n\nfix: Fix bind pat inlay hints rendering for constant patterns\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/14124", "tree": {"sha": "226bd21fb128f8751e562bb3de419c72504fe4b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226bd21fb128f8751e562bb3de419c72504fe4b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d78a0be9b0a9b46559a65fb59634b6428ccf29ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d78a0be9b0a9b46559a65fb59634b6428ccf29ac", "html_url": "https://github.com/rust-lang/rust/commit/d78a0be9b0a9b46559a65fb59634b6428ccf29ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d78a0be9b0a9b46559a65fb59634b6428ccf29ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8011029d3a0f4014217e1ade75688c0f3c5305db", "url": "https://api.github.com/repos/rust-lang/rust/commits/8011029d3a0f4014217e1ade75688c0f3c5305db", "html_url": "https://github.com/rust-lang/rust/commit/8011029d3a0f4014217e1ade75688c0f3c5305db"}, {"sha": "5fdf640fb3cf207531629bff7372fb4caf296e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdf640fb3cf207531629bff7372fb4caf296e94", "html_url": "https://github.com/rust-lang/rust/commit/5fdf640fb3cf207531629bff7372fb4caf296e94"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "4af7f9bdb73b5eb0453f227c59d77cc3724c7140", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d78a0be9b0a9b46559a65fb59634b6428ccf29ac/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78a0be9b0a9b46559a65fb59634b6428ccf29ac/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=d78a0be9b0a9b46559a65fb59634b6428ccf29ac", "patch": "@@ -67,28 +67,23 @@ fn should_not_display_type_hint(\n         return true;\n     }\n \n-    if let Some(hir::Adt::Struct(s)) = pat_ty.as_adt() {\n-        if s.fields(db).is_empty() && s.name(db).to_smol_str() == bind_pat.to_string() {\n-            return true;\n-        }\n-    }\n-\n-    if config.hide_closure_initialization_hints {\n-        if let Some(parent) = bind_pat.syntax().parent() {\n-            if let Some(it) = ast::LetStmt::cast(parent) {\n-                if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n-                    if closure_has_block_body(&closure) {\n-                        return true;\n-                    }\n-                }\n-            }\n-        }\n+    if sema.resolve_bind_pat_to_const(bind_pat).is_some() {\n+        return true;\n     }\n \n     for node in bind_pat.syntax().ancestors() {\n         match_ast! {\n             match node {\n-                ast::LetStmt(it) => return it.ty().is_some(),\n+                ast::LetStmt(it) => {\n+                    if config.hide_closure_initialization_hints {\n+                        if let Some(ast::Expr::ClosureExpr(closure)) = it.initializer() {\n+                            if closure_has_block_body(&closure) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                    return it.ty().is_some()\n+                },\n                 // FIXME: We might wanna show type hints in parameters for non-top level patterns as well\n                 ast::Param(it) => return it.ty().is_some(),\n                 ast::MatchArm(_) => return pat_is_enum_variant(db, bind_pat, pat_ty),\n@@ -567,6 +562,21 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn const_pats_have_no_type_hints() {\n+        check_types(\n+            r#\"\n+const FOO: usize = 0;\n+\n+fn main() {\n+    match 0 {\n+        FOO => (),\n+        _ => ()\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn let_statement() {\n         check_types("}]}