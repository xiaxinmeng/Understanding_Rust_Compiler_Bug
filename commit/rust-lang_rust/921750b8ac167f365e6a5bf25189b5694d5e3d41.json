{"sha": "921750b8ac167f365e6a5bf25189b5694d5e3d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMTc1MGI4YWMxNjdmMzY1ZTZhNWJmMjUxODliNTY5NGQ1ZTNkNDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-07T20:21:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-13T04:14:06Z"}, "message": "rustc: Make `CrateStore` private to `TyCtxt`\n\nThis commit removes the `cstore_untracked` method, making the `CrateStore` trait\nobject entirely private to the `ty/context.rs` module.", "tree": {"sha": "4ec40e1cf21ff4b1b59b4d89c837df69c8b7f473", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ec40e1cf21ff4b1b59b4d89c837df69c8b7f473"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/921750b8ac167f365e6a5bf25189b5694d5e3d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/921750b8ac167f365e6a5bf25189b5694d5e3d41", "html_url": "https://github.com/rust-lang/rust/commit/921750b8ac167f365e6a5bf25189b5694d5e3d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/921750b8ac167f365e6a5bf25189b5694d5e3d41/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54fa047d92fc46bae454defaec8d254f7af6746b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54fa047d92fc46bae454defaec8d254f7af6746b", "html_url": "https://github.com/rust-lang/rust/commit/54fa047d92fc46bae454defaec8d254f7af6746b"}], "stats": {"total": 153, "additions": 81, "deletions": 72}, "files": [{"sha": "1bbe8ca7575f11b6b9110ec415b1dd504296cfda", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -1336,7 +1336,7 @@ dependencies = [\n  \"racer 2.0.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-analysis 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-rustc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-rustc 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-nightly 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1371,7 +1371,7 @@ dependencies = [\n \n [[package]]\n name = \"rls-rustc\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -2544,7 +2544,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n \"checksum rls-analysis 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d2cb40c0371765897ae428b5706bb17135705ad4f6d1b8b6afbaabcf8c9b5cff\"\n \"checksum rls-data 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11d339f1888e33e74d8032de0f83c40b2bdaaaf04a8cfc03b32186c3481fb534\"\n-\"checksum rls-rustc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5fa757c9d547d460427ceff01875f9cac5f5acd8fc6543946e9b0335ba29d537\"\n+\"checksum rls-rustc 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b21ea952e9bf1569929abf1bb920262cde04b7b1b26d8e0260286302807299d2\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd34691a510938bb67fe0444fb363103c73ffb31c121d1e16bc92d8945ea8ff\"\n \"checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e\""}, {"sha": "fb0cdab0b6a0fa6f3e47e4200412418ce638af8d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 63, "deletions": 8, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -21,11 +21,9 @@ use hir::map as hir_map;\n use hir::map::DefPathHash;\n use lint::{self, Lint};\n use ich::{self, StableHashingContext, NodeIdHashingMode};\n-<<<<<<< 817e1b81e230d599585f860cdcad96c5ed83b93e\n use middle::const_val::ConstVal;\n-=======\n-use middle::cstore::CrateStore;\n->>>>>>> Remove the `cstore` reference from Session in order to prepare encapsulating CrateStore access in tcx.\n+use middle::cstore::{CrateStore, LinkMeta, EncodedMetadataHashes};\n+use middle::cstore::EncodedMetadata;\n use middle::free_region::FreeRegionMap;\n use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n@@ -56,6 +54,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n use arena::{TypedArena, DroplessArena};\n use rustc_const_math::{ConstInt, ConstUsize};\n use rustc_data_structures::indexed_vec::IndexVec;\n+use std::any::Any;\n use std::borrow::Borrow;\n use std::cell::{Cell, RefCell};\n use std::cmp::Ordering;\n@@ -915,10 +914,6 @@ impl<'tcx> GlobalCtxt<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    pub fn cstore_untracked(&self) -> &CrateStore {\n-        &*self.cstore\n-    }\n-\n     pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n         self.global_arenas.generics.alloc(generics)\n     }\n@@ -1183,6 +1178,54 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn crates(self) -> Rc<Vec<CrateNum>> {\n         self.all_crate_nums(LOCAL_CRATE)\n     }\n+\n+    pub fn def_key(self, id: DefId) -> hir_map::DefKey {\n+        if id.is_local() {\n+            self.hir.def_key(id)\n+        } else {\n+            self.cstore.def_key(id)\n+        }\n+    }\n+\n+    /// Convert a `DefId` into its fully expanded `DefPath` (every\n+    /// `DefId` is really just an interned def-path).\n+    ///\n+    /// Note that if `id` is not local to this crate, the result will\n+    ///  be a non-local `DefPath`.\n+    pub fn def_path(self, id: DefId) -> hir_map::DefPath {\n+        if id.is_local() {\n+            self.hir.def_path(id)\n+        } else {\n+            self.cstore.def_path(id)\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn def_path_hash(self, def_id: DefId) -> hir_map::DefPathHash {\n+        if def_id.is_local() {\n+            self.hir.definitions().def_path_hash(def_id.index)\n+        } else {\n+            self.cstore.def_path_hash(def_id)\n+        }\n+    }\n+\n+    pub fn metadata_encoding_version(self) -> Vec<u8> {\n+        self.cstore.metadata_encoding_version().to_vec()\n+    }\n+\n+    // Note that this is *untracked* and should only be used within the query\n+    // system if the result is otherwise tracked through queries\n+    pub fn crate_data_as_rc_any(self, cnum: CrateNum) -> Rc<Any> {\n+        self.cstore.crate_data_as_rc_any(cnum)\n+    }\n+}\n+\n+impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n+    pub fn encode_metadata(self, link_meta: &LinkMeta, reachable: &NodeSet)\n+        -> (EncodedMetadata, EncodedMetadataHashes)\n+    {\n+        self.cstore.encode_metadata(self, link_meta, reachable)\n+    }\n }\n \n impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n@@ -2163,4 +2206,16 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         let id = tcx.hir.definitions().def_index_to_hir_id(id.index);\n         tcx.stability().local_deprecation_entry(id)\n     };\n+    providers.extern_mod_stmt_cnum = |tcx, id| {\n+        let id = tcx.hir.as_local_node_id(id).unwrap();\n+        tcx.cstore.extern_mod_stmt_cnum_untracked(id)\n+    };\n+    providers.all_crate_nums = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        Rc::new(tcx.cstore.crates_untracked())\n+    };\n+    providers.postorder_cnums = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        Rc::new(tcx.cstore.postorder_cnums_untracked())\n+    };\n }"}, {"sha": "a8ccb3e269ffcc00ef8bf2f493add0bb188b0b13", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            cur_path.push(self.cstore_untracked().def_key(cur_def)\n+            cur_path.push(self.def_key(cur_def)\n                               .disambiguated_data.data.get_opt_name().unwrap_or_else(||\n                 Symbol::intern(\"<unnamed>\").as_str()));\n             match visible_parent_map.get(&cur_def) {"}, {"sha": "2d5b0ce0954fcba6fd4892cc0f1ff51ace3d4a26", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -2170,43 +2170,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn def_key(self, id: DefId) -> hir_map::DefKey {\n-        if id.is_local() {\n-            self.hir.def_key(id)\n-        } else {\n-            self.cstore_untracked().def_key(id)\n-        }\n-    }\n-\n-    /// Convert a `DefId` into its fully expanded `DefPath` (every\n-    /// `DefId` is really just an interned def-path).\n-    ///\n-    /// Note that if `id` is not local to this crate, the result will\n-    ///  be a non-local `DefPath`.\n-    pub fn def_path(self, id: DefId) -> hir_map::DefPath {\n-        if id.is_local() {\n-            self.hir.def_path(id)\n-        } else {\n-            self.cstore_untracked().def_path(id)\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn def_path_hash(self, def_id: DefId) -> hir_map::DefPathHash {\n-        if def_id.is_local() {\n-            self.hir.definitions().def_path_hash(def_id.index)\n-        } else {\n-            self.cstore_untracked().def_path_hash(def_id)\n-        }\n-    }\n-\n     pub fn item_name(self, id: DefId) -> InternedString {\n         if let Some(id) = self.hir.as_local_node_id(id) {\n             self.hir.name(id).as_str()\n         } else if id.index == CRATE_DEF_INDEX {\n             self.original_crate_name(id.krate).as_str()\n         } else {\n-            let def_key = self.cstore_untracked().def_key(id);\n+            let def_key = self.def_key(id);\n             // The name of a StructCtor is that of its struct parent.\n             if let hir_map::DefPathData::StructCtor = def_key.disambiguated_data.data {\n                 self.item_name(DefId {"}, {"sha": "c41d5beec6877ab61570ae2f6fcfa17601e1b080", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -274,7 +274,7 @@ pub fn compile_input(sess: &Session,\n                                 phase5_result);\n         phase5_result?;\n \n-        phase_6_link_output(sess, cstore, &trans, &outputs);\n+        phase_6_link_output(sess, &trans, &outputs);\n \n         // Now that we won't touch anything in the incremental compilation directory\n         // any more, we can finalize it (which involves renaming it)\n@@ -1153,12 +1153,10 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n /// This should produce either a finished executable or library.\n #[cfg(feature=\"llvm\")]\n pub fn phase_6_link_output(sess: &Session,\n-                           cstore: &CrateStore,\n                            trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n     time(sess.time_passes(), \"linking\", || {\n         ::rustc_trans::back::link::link_binary(sess,\n-                                               cstore,\n                                                trans,\n                                                outputs,\n                                                &trans.crate_name.as_str())"}, {"sha": "74e4ffcdfffdc2a1adf023b014e7b9b1adc84edc", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -60,7 +60,7 @@ macro_rules! provide {\n \n                 $tcx.dep_graph.read(dep_node);\n \n-                let $cdata = $tcx.cstore_untracked().crate_data_as_rc_any($def_id.krate);\n+                let $cdata = $tcx.crate_data_as_rc_any($def_id.krate);\n                 let $cdata = $cdata.downcast_ref::<cstore::CrateMetadata>()\n                     .expect(\"CrateStore crated ata is not a CrateMetadata\");\n                 $compute\n@@ -275,15 +275,6 @@ pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n             assert_eq!(cnum, LOCAL_CRATE);\n             Rc::new(link_args::collect(tcx))\n         },\n-        extern_mod_stmt_cnum: |tcx, id| {\n-            let id = tcx.hir.as_local_node_id(id).unwrap();\n-            tcx.cstore_untracked().extern_mod_stmt_cnum_untracked(id)\n-        },\n-\n-        all_crate_nums: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            Rc::new(tcx.cstore_untracked().crates_untracked())\n-        },\n \n         // Returns a map from a sufficiently visible external item (i.e. an\n         // external item that is visible from at least one local module) to a\n@@ -342,11 +333,6 @@ pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n             Rc::new(visible_parent_map)\n         },\n \n-        postorder_cnums: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            Rc::new(tcx.cstore_untracked().postorder_cnums_untracked())\n-        },\n-\n         ..*providers\n     };\n }"}, {"sha": "026417682cc74221809d7c1bda153a60ae346c10", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -777,16 +777,13 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                 EncodedMetadataHashes::new());\n     }\n \n-    let cstore = tcx.cstore_untracked();\n-    let (metadata, hashes) = cstore.encode_metadata(tcx,\n-                                                    &link_meta,\n-                                                    exported_symbols);\n+    let (metadata, hashes) = tcx.encode_metadata(link_meta, exported_symbols);\n     if kind == MetadataKind::Uncompressed {\n         return (metadata_llcx, metadata_llmod, metadata, hashes);\n     }\n \n     assert!(kind == MetadataKind::Compressed);\n-    let mut compressed = cstore.metadata_encoding_version().to_vec();\n+    let mut compressed = tcx.metadata_encoding_version();\n     DeflateEncoder::new(&mut compressed, Compression::Fast)\n         .write_all(&metadata.raw_data).unwrap();\n "}, {"sha": "830492dec9482f0c7857529d5583f727231116a0", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -26,6 +26,7 @@ fn main() {\n        .file(\"../rt/hoedown/src/version.c\")\n        .warnings(false)\n        .include(src_dir)\n+       .warnings(false)\n        .compile(\"libhoedown.a\");\n }\n "}, {"sha": "d7ce5e262ce381b07cd0f412da0dff4b4ad80704", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -215,7 +215,7 @@ pub fn run_core(search_paths: SearchPaths,\n         debug!(\"crate: {:?}\", tcx.hir.krate());\n \n         let krate = {\n-            let mut v = RustdocVisitor::new(&ctxt);\n+            let mut v = RustdocVisitor::new(&*cstore, &ctxt);\n             v.visit(tcx.hir.krate());\n             v.clean(&ctxt)\n         };"}, {"sha": "327a330c2a2e5dba7a181a28a556a459f94828aa", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921750b8ac167f365e6a5bf25189b5694d5e3d41/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -21,7 +21,7 @@ use syntax_pos::Span;\n use rustc::hir::map as hir_map;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::middle::cstore::LoadedMacro;\n+use rustc::middle::cstore::{LoadedMacro, CrateStore};\n use rustc::middle::privacy::AccessLevel;\n use rustc::util::nodemap::FxHashSet;\n \n@@ -40,6 +40,7 @@ use doctree::*;\n // framework from syntax?\n \n pub struct RustdocVisitor<'a, 'tcx: 'a> {\n+    cstore: &'tcx CrateStore,\n     pub module: Module,\n     pub attrs: hir::HirVec<ast::Attribute>,\n     pub cx: &'a core::DocContext<'a, 'tcx>,\n@@ -51,7 +52,8 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n-    pub fn new(cx: &'a core::DocContext<'a, 'tcx>) -> RustdocVisitor<'a, 'tcx> {\n+    pub fn new(cstore: &'tcx CrateStore,\n+               cx: &'a core::DocContext<'a, 'tcx>) -> RustdocVisitor<'a, 'tcx> {\n         // If the root is reexported, terminate all recursion.\n         let mut stack = FxHashSet();\n         stack.insert(ast::CRATE_NODE_ID);\n@@ -63,6 +65,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             inlining: false,\n             inside_public_path: true,\n             reexported_macros: FxHashSet(),\n+            cstore,\n         }\n     }\n \n@@ -208,8 +211,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     }\n \n                     let imported_from = self.cx.tcx.original_crate_name(def_id.krate);\n-                    let cstore = &self.cx.sess().cstore;\n-                    let def = match cstore.load_macro_untracked(def_id, self.cx.sess()) {\n+                    let def = match self.cstore.load_macro_untracked(def_id, self.cx.sess()) {\n                         LoadedMacro::MacroDef(macro_def) => macro_def,\n                         // FIXME(jseyfried): document proc macro reexports\n                         LoadedMacro::ProcMacro(..) => continue,"}, {"sha": "8dd70945fb049df3f9dc7685cdc58d94e05e8ffc", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=921750b8ac167f365e6a5bf25189b5694d5e3d41", "patch": "@@ -1 +1 @@\n-Subproject commit 303671ea8103cbc39575a1f47a204159546a04d0\n+Subproject commit 8dd70945fb049df3f9dc7685cdc58d94e05e8ffc"}]}