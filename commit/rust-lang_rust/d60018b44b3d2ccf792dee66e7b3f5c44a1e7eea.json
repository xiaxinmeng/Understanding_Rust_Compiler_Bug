{"sha": "d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "node_id": "C_kwDOAAsO6NoAKGQ2MDAxOGI0NGIzZDJjY2Y3OTJkZWU2NmU3YjNmNWM0NGExZTdlZWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-01-03T22:07:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-01-04T10:13:08Z"}, "message": "rename StackPopClean::None to Root", "tree": {"sha": "98be56bee2a139c5ac2908678b81667be1be1fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98be56bee2a139c5ac2908678b81667be1be1fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "html_url": "https://github.com/rust-lang/rust/commit/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "html_url": "https://github.com/rust-lang/rust/commit/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "3ec9f3ca3b8c2172277ca75f3758670855df9bd3", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "patch": "@@ -63,7 +63,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n         cid.instance,\n         body,\n         Some(&ret.into()),\n-        StackPopCleanup::None { cleanup: false },\n+        StackPopCleanup::Root { cleanup: false },\n     )?;\n \n     // The main interpreter loop."}, {"sha": "0a8112da2aba8fbe4ccd596e05a14da16e970773", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "patch": "@@ -156,11 +156,11 @@ pub enum StackPopCleanup {\n     /// `ret` stores the block we jump to on a normal return, while `unwind`\n     /// stores the block used for cleanup during unwinding.\n     Goto { ret: Option<mir::BasicBlock>, unwind: StackPopUnwind },\n-    /// Just do nothing: Used by Main and for TLS hooks in miri.\n+    /// The root frame of the stack: nowhere else to jump to.\n     /// `cleanup` says whether locals are deallocated. Static computation\n     /// wants them leaked to intern what they need (and just throw away\n     /// the entire `ecx` when it is done).\n-    None { cleanup: bool },\n+    Root { cleanup: bool },\n }\n \n /// State of a local variable including a memoized layout\n@@ -849,7 +849,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // because this is CTFE and the final value will be thoroughly validated anyway.\n         let cleanup = match return_to_block {\n             StackPopCleanup::Goto { .. } => true,\n-            StackPopCleanup::None { cleanup, .. } => cleanup,\n+            StackPopCleanup::Root { cleanup, .. } => cleanup,\n         };\n \n         if !cleanup {\n@@ -874,16 +874,22 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // Follow the unwind edge.\n             let unwind = match return_to_block {\n                 StackPopCleanup::Goto { unwind, .. } => unwind,\n-                StackPopCleanup::None { .. } => {\n-                    panic!(\"Encountered StackPopCleanup::None when unwinding!\")\n+                StackPopCleanup::Root { .. } => {\n+                    panic!(\"encountered StackPopCleanup::Root when unwinding!\")\n                 }\n             };\n             self.unwind_to_block(unwind)\n         } else {\n             // Follow the normal return edge.\n             match return_to_block {\n                 StackPopCleanup::Goto { ret, .. } => self.return_to_block(ret),\n-                StackPopCleanup::None { .. } => Ok(()),\n+                StackPopCleanup::Root { .. } => {\n+                    assert!(\n+                        self.stack().is_empty(),\n+                        \"only the topmost frame can have StackPopCleanup::Root\"\n+                    );\n+                    Ok(())\n+                }\n             }\n         }\n     }"}, {"sha": "e3ff6ad45490d4074f420a721ffc9fb95b8a1b7a", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=d60018b44b3d2ccf792dee66e7b3f5c44a1e7eea", "patch": "@@ -406,7 +406,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Instance::new(def_id, substs),\n             dummy_body,\n             ret.as_ref(),\n-            StackPopCleanup::None { cleanup: false },\n+            StackPopCleanup::Root { cleanup: false },\n         )\n         .expect(\"failed to push initial stack frame\");\n "}]}