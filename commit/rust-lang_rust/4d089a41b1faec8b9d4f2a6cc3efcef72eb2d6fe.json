{"sha": "4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMDg5YTQxYjFmYWVjOGI5ZDRmMmE2Y2MzZWZjZWY3MmViMmQ2ZmU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-04-14T19:05:24Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-04-16T18:12:01Z"}, "message": "Test array into_iter with more wrapper types", "tree": {"sha": "f4fd1ba488168064f7d344fec032684109cd0199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4fd1ba488168064f7d344fec032684109cd0199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "html_url": "https://github.com/rust-lang/rust/commit/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25f02b276f9fb290318beb364c4d0c9e7079071f", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f02b276f9fb290318beb364c4d0c9e7079071f", "html_url": "https://github.com/rust-lang/rust/commit/25f02b276f9fb290318beb364c4d0c9e7079071f"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "5661397b3c17b2e151b71340de63bfca23bfdef0", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs?ref=4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "patch": "@@ -2,6 +2,8 @@\n // edition:2018\n \n use std::array::IntoIter;\n+use std::ops::Deref;\n+use std::rc::Rc;\n use std::slice::Iter;\n \n fn main() {\n@@ -17,6 +19,21 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n+    // The `array_into_iter` lint doesn't cover other wrappers that deref to an array.\n+    let _: Iter<'_, i32> = Rc::new(array).into_iter();\n+    let _: Iter<'_, i32> = Array(array).into_iter();\n+\n     // But you can always use the trait method explicitly as an array.\n     let _: IntoIter<i32, 10> = IntoIterator::into_iter(array);\n }\n+\n+/// User type that dereferences to an array.\n+struct Array([i32; 10]);\n+\n+impl Deref for Array {\n+    type Target = [i32; 10];\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}"}, {"sha": "b43338382f20c25c547c8c62f863d71ca4f68990", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "patch": "@@ -1,5 +1,5 @@\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-2018.rs:12:34\n+  --> $DIR/into-iter-on-arrays-2018.rs:14:34\n    |\n LL |     let _: Iter<'_, i32> = array.into_iter();\n    |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -9,7 +9,7 @@ LL |     let _: Iter<'_, i32> = array.into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-2018.rs:16:44\n+  --> $DIR/into-iter-on-arrays-2018.rs:18:44\n    |\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n    |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -21,7 +21,7 @@ warning: 2 warnings emitted\n \n Future incompatibility report: Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-2018.rs:12:34\n+  --> $DIR/into-iter-on-arrays-2018.rs:14:34\n    |\n LL |     let _: Iter<'_, i32> = array.into_iter();\n    |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -32,7 +32,7 @@ LL |     let _: Iter<'_, i32> = array.into_iter();\n \n Future breakage date: None, diagnostic:\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-2018.rs:16:44\n+  --> $DIR/into-iter-on-arrays-2018.rs:18:44\n    |\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n    |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`"}, {"sha": "ec54ed005173b148fc37bbe146e4e7736caad086", "filename": "src/test/ui/iterators/into-iter-on-arrays-2021.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs?ref=4d089a41b1faec8b9d4f2a6cc3efcef72eb2d6fe", "patch": "@@ -3,6 +3,8 @@\n // compile-flags: -Zunstable-options\n \n use std::array::IntoIter;\n+use std::ops::Deref;\n+use std::rc::Rc;\n \n fn main() {\n     let array = [0; 10];\n@@ -11,6 +13,21 @@ fn main() {\n     let _: IntoIter<i32, 10> = array.into_iter();\n     let _: IntoIter<i32, 10> = Box::new(array).into_iter();\n \n-    // And you can always use the trait method explicitly as an array.\n+    // The `array_into_iter` lint doesn't cover other wrappers that deref to an array.\n+    let _: IntoIter<i32, 10> = Rc::new(array).into_iter();\n+    let _: IntoIter<i32, 10> = Array(array).into_iter();\n+\n+    // You can always use the trait method explicitly as an array.\n     let _: IntoIter<i32, 10> = IntoIterator::into_iter(array);\n }\n+\n+/// User type that dereferences to an array.\n+struct Array([i32; 10]);\n+\n+impl Deref for Array {\n+    type Target = [i32; 10];\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}"}]}