{"sha": "5afeed05e84afc5ee9bec6a8cc1003e0b97aa7fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZmVlZDA1ZTg0YWZjNWVlOWJlYzZhOGNjMTAwM2UwYjk3YWE3ZmI=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-10T11:28:54Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-20T14:15:36Z"}, "message": "Use tracing debugging in `fold_opaque_ty`", "tree": {"sha": "81bb558e52423ddca1c13983bad7b295cb9cb729", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81bb558e52423ddca1c13983bad7b295cb9cb729"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5afeed05e84afc5ee9bec6a8cc1003e0b97aa7fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5afeed05e84afc5ee9bec6a8cc1003e0b97aa7fb", "html_url": "https://github.com/rust-lang/rust/commit/5afeed05e84afc5ee9bec6a8cc1003e0b97aa7fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5afeed05e84afc5ee9bec6a8cc1003e0b97aa7fb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb11a8a265d967e55c5515e78e741dfdba4db4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb11a8a265d967e55c5515e78e741dfdba4db4d", "html_url": "https://github.com/rust-lang/rust/commit/dfb11a8a265d967e55c5515e78e741dfdba4db4d"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "221ce0062a6fe051b233a8b88ab5405ab8aa08c1", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5afeed05e84afc5ee9bec6a8cc1003e0b97aa7fb/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5afeed05e84afc5ee9bec6a8cc1003e0b97aa7fb/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=5afeed05e84afc5ee9bec6a8cc1003e0b97aa7fb", "patch": "@@ -863,7 +863,6 @@ struct Instantiator<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n-    #[instrument(level = \"debug\", skip(self))]\n     fn instantiate_opaque_types_in_map<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {\n         let tcx = self.infcx.tcx;\n         value.fold_with(&mut BottomUpFolder {\n@@ -954,35 +953,28 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         })\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn fold_opaque_ty(\n         &mut self,\n         ty: Ty<'tcx>,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         origin: hir::OpaqueTyOrigin,\n     ) -> Ty<'tcx> {\n         let infcx = self.infcx;\n-        let tcx = infcx.tcx;\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n-        debug!(\"instantiate_opaque_types: Opaque(def_id={:?}, substs={:?})\", def_id, substs);\n-\n         // Use the same type variable if the exact same opaque type appears more\n         // than once in the return type (e.g., if it's passed to a type alias).\n         if let Some(opaque_defn) = infcx.inner.borrow().opaque_types.get(&opaque_type_key) {\n-            debug!(\"instantiate_opaque_types: returning concrete ty {:?}\", opaque_defn.concrete_ty);\n+            debug!(\"re-using cached concrete type {:?}\", opaque_defn.concrete_ty.kind());\n             return opaque_defn.concrete_ty;\n         }\n+\n         let ty_var = infcx.next_ty_var(TypeVariableOrigin {\n             kind: TypeVariableOriginKind::TypeInference,\n             span: self.value_span,\n         });\n \n-        // Make sure that we are in fact defining the *entire* type\n-        // (e.g., `type Foo<T: Bound> = impl Bar;` needs to be\n-        // defined by a function like `fn foo<T: Bound>() -> Foo<T>`).\n-        debug!(\"instantiate_opaque_types: param_env={:#?}\", self.param_env,);\n-        debug!(\"instantiate_opaque_types: generics={:#?}\", tcx.generics_of(def_id),);\n-\n         // Ideally, we'd get the span where *this specific `ty` came\n         // from*, but right now we just use the span from the overall\n         // value being folded. In simple cases like `-> impl Foo`,\n@@ -999,7 +991,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             infcx.opaque_types_vars.insert(ty_var, ty);\n         }\n \n-        debug!(\"instantiate_opaque_types: ty_var={:?}\", ty_var);\n+        debug!(\"generated new type inference var {:?}\", ty_var.kind());\n         self.compute_opaque_type_obligations(opaque_type_key);\n \n         ty_var\n@@ -1011,7 +1003,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n         let item_bounds = tcx.explicit_item_bounds(def_id);\n-        debug!(\"instantiate_opaque_types: bounds={:#?}\", item_bounds);\n+        debug!(?item_bounds);\n         let bounds: Vec<_> =\n             item_bounds.iter().map(|(bound, _)| bound.subst(tcx, substs)).collect();\n \n@@ -1023,7 +1015,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         );\n         self.obligations.extend(obligations);\n \n-        debug!(\"instantiate_opaque_types: bounds={:?}\", bounds);\n+        debug!(?bounds);\n \n         for predicate in &bounds {\n             if let ty::PredicateKind::Projection(projection) = predicate.kind().skip_binder() {"}]}