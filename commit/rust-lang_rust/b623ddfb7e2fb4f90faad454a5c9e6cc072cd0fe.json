{"sha": "b623ddfb7e2fb4f90faad454a5c9e6cc072cd0fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MjNkZGZiN2UyZmI0ZjkwZmFhZDQ1NGE1YzllNmNjMDcyY2QwZmU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-29T21:20:28Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-29T21:46:58Z"}, "message": "Warn for exports that refer to non-existent items\n\nCloses #865", "tree": {"sha": "0bc698d0e7c497a97e424438048f283d425ba22e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bc698d0e7c497a97e424438048f283d425ba22e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b623ddfb7e2fb4f90faad454a5c9e6cc072cd0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b623ddfb7e2fb4f90faad454a5c9e6cc072cd0fe", "html_url": "https://github.com/rust-lang/rust/commit/b623ddfb7e2fb4f90faad454a5c9e6cc072cd0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b623ddfb7e2fb4f90faad454a5c9e6cc072cd0fe/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4db388ea6c3ae6049d0684a4d3b7d7d428b35b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/4db388ea6c3ae6049d0684a4d3b7d7d428b35b95", "html_url": "https://github.com/rust-lang/rust/commit/4db388ea6c3ae6049d0684a4d3b7d7d428b35b95"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "c23d1f375d82a1214b1a300e10b4508e15356cfa", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b623ddfb7e2fb4f90faad454a5c9e6cc072cd0fe/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b623ddfb7e2fb4f90faad454a5c9e6cc072cd0fe/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=b623ddfb7e2fb4f90faad454a5c9e6cc072cd0fe", "patch": "@@ -153,6 +153,7 @@ fn resolve_crate(sess: session, amap: &ast_map::map, crate: @ast::crate) ->\n     map_crate(e, crate);\n     resolve_imports(*e);\n     check_for_collisions(e, *crate);\n+    check_bad_exports(e);\n     resolve_names(e, crate);\n     ret {def_map: e.def_map, ext_map: e.ext_map};\n }\n@@ -960,9 +961,7 @@ fn lookup_in_local_mod(e: &env, node_id: node_id, sp: &span, id: &ident,\n     let info = e.mod_map.get(node_id);\n     if dr == outside && !ast_util::is_exported(id, option::get(info.m)) {\n         // if we're in a native mod, then dr==inside, so info.m is some _mod\n-\n         ret none::<def>; // name is not visible\n-\n     }\n     alt info.index.find(id) {\n       none. { }\n@@ -1430,6 +1429,40 @@ fn ensure_unique<T>(e: &env, sp: &span, elts: &[T], id: fn(&T) -> ident,\n     for elt: T in elts { add_name(ch, sp, id(elt)); }\n }\n \n+fn check_bad_exports(e: &@env) {\n+    fn lookup_glob_any(e: &env, info: &@indexed_mod, sp: &span,\n+                       ident: &ident) -> bool {\n+        ret !option::is_none(lookup_glob_in_mod(e, info, sp, ident,\n+                                                ns_module, inside)) ||\n+            !option::is_none(lookup_glob_in_mod(e, info, sp, ident,\n+                                                ns_value, inside)) ||\n+            !option::is_none(lookup_glob_in_mod(e, info, sp, ident,\n+                                                ns_type, inside));\n+    }\n+\n+    for each @{val, _} in e.mod_map.items() {\n+        alt val.m {\n+          some(m) {\n+            for vi in m.view_items {\n+                alt vi.node {\n+                  ast::view_item_export(idents, _) {\n+                    for ident in idents {\n+                        if !val.index.contains_key(ident) &&\n+                           !lookup_glob_any(*e, val, vi.span, ident) {\n+                            e.sess.span_warn(vi.span, ~\"exported item \" +\n+                                             ident + ~\" is not defined\");\n+                        }\n+                    }\n+                  }\n+                  _ {}\n+                }\n+            }\n+          }\n+          none. {}\n+        }\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}]}