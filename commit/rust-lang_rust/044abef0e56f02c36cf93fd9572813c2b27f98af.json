{"sha": "044abef0e56f02c36cf93fd9572813c2b27f98af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NGFiZWYwZTU2ZjAyYzM2Y2Y5M2ZkOTU3MjgxM2MyYjI3Zjk4YWY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-08T19:03:39Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-08T20:00:49Z"}, "message": "fix incorrect region code based on the old 'self\n\nalso removes unnecessary casts from the RcMut implementation", "tree": {"sha": "b804895f5d40c57f3ea707368773cbc0e230c5a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b804895f5d40c57f3ea707368773cbc0e230c5a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/044abef0e56f02c36cf93fd9572813c2b27f98af", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/044abef0e56f02c36cf93fd9572813c2b27f98af", "html_url": "https://github.com/rust-lang/rust/commit/044abef0e56f02c36cf93fd9572813c2b27f98af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/044abef0e56f02c36cf93fd9572813c2b27f98af/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21f37c81804293168424697518d306542cdd798", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21f37c81804293168424697518d306542cdd798", "html_url": "https://github.com/rust-lang/rust/commit/b21f37c81804293168424697518d306542cdd798"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "2a3d8dc14817c32ae64766c71796621f4aeac5a9", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/044abef0e56f02c36cf93fd9572813c2b27f98af/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/044abef0e56f02c36cf93fd9572813c2b27f98af/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=044abef0e56f02c36cf93fd9572813c2b27f98af", "patch": "@@ -157,7 +157,7 @@ pub struct Unique<T> {\n     priv ptr: *mut T\n }\n \n-pub impl<'self, T: Owned> Unique<T> {\n+pub impl<T: Owned> Unique<T> {\n     fn new(value: T) -> Unique<T> {\n         unsafe {\n             let ptr = malloc(core::sys::size_of::<T>() as size_t) as *mut T;\n@@ -168,14 +168,14 @@ pub impl<'self, T: Owned> Unique<T> {\n         }\n     }\n \n-    // the 'self lifetime results in the same semantics as `&*x` with ~T\n-    fn borrow(&self) -> &'self T {\n-        unsafe { cast::transmute(self.ptr) }\n+    // the 'r lifetime results in the same semantics as `&*x` with ~T\n+    fn borrow<'r>(&'r self) -> &'r T {\n+        unsafe { cast::copy_lifetime(self, &*self.ptr) }\n     }\n \n-    // the 'self lifetime results in the same semantics as `&mut *x` with ~T\n-    fn borrow_mut(&mut self) -> &'self mut T {\n-        unsafe { cast::transmute(self.ptr) }\n+    // the 'r lifetime results in the same semantics as `&mut *x` with ~T\n+    fn borrow_mut<'r>(&'r mut self) -> &'r mut T {\n+        unsafe { cast::copy_mut_lifetime(self, &mut *self.ptr) }\n     }\n }\n "}, {"sha": "c648ec198e1f7df23aed53cc930adac7aec41fc5", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/044abef0e56f02c36cf93fd9572813c2b27f98af/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044abef0e56f02c36cf93fd9572813c2b27f98af/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=044abef0e56f02c36cf93fd9572813c2b27f98af", "patch": "@@ -108,6 +108,12 @@ pub unsafe fn copy_lifetime<'a,S,T>(_ptr: &'a S, ptr: &T) -> &'a T {\n     transmute_region(ptr)\n }\n \n+/// Transforms lifetime of the second pointer to match the first.\n+#[inline(always)]\n+pub unsafe fn copy_mut_lifetime<'a,S,T>(_ptr: &'a mut S, ptr: &mut T) -> &'a mut T {\n+    transmute_mut_region(ptr)\n+}\n+\n /// Transforms lifetime of the second pointer to match the first.\n #[inline(always)]\n pub unsafe fn copy_lifetime_vec<'a,S,T>(_ptr: &'a [S], ptr: &T) -> &'a T {"}, {"sha": "815f03f4269137bda92809826be41806de02cbc2", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/044abef0e56f02c36cf93fd9572813c2b27f98af/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/044abef0e56f02c36cf93fd9572813c2b27f98af/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=044abef0e56f02c36cf93fd9572813c2b27f98af", "patch": "@@ -29,7 +29,7 @@ pub struct Rc<T> {\n     priv ptr: *mut RcBox<T>,\n }\n \n-pub impl<'self, T: Owned> Rc<T> {\n+pub impl<T: Owned> Rc<T> {\n     fn new(value: T) -> Rc<T> {\n         unsafe {\n             let ptr = malloc(sys::size_of::<RcBox<T>>() as size_t) as *mut RcBox<T>;\n@@ -40,8 +40,8 @@ pub impl<'self, T: Owned> Rc<T> {\n     }\n \n     #[inline(always)]\n-    fn borrow(&self) -> &'self T {\n-        unsafe { cast::transmute_region(&(*self.ptr).value) }\n+    fn borrow<'r>(&'r self) -> &'r T {\n+        unsafe { cast::copy_lifetime(self, &(*self.ptr).value) }\n     }\n }\n \n@@ -119,7 +119,7 @@ pub struct RcMut<T> {\n     priv ptr: *mut RcMutBox<T>,\n }\n \n-pub impl<'self, T: Owned> RcMut<T> {\n+pub impl<T: Owned> RcMut<T> {\n     fn new(value: T) -> RcMut<T> {\n         unsafe {\n             let ptr = malloc(sys::size_of::<RcMutBox<T>>() as size_t) as *mut RcMutBox<T>;\n@@ -136,7 +136,7 @@ pub impl<'self, T: Owned> RcMut<T> {\n             assert!((*self.ptr).borrow != Mutable);\n             let previous = (*self.ptr).borrow;\n             (*self.ptr).borrow = Immutable;\n-            f(cast::transmute_region(&(*self.ptr).value));\n+            f(&(*self.ptr).value);\n             (*self.ptr).borrow = previous;\n         }\n     }\n@@ -147,7 +147,7 @@ pub impl<'self, T: Owned> RcMut<T> {\n         unsafe {\n             assert!((*self.ptr).borrow == Nothing);\n             (*self.ptr).borrow = Mutable;\n-            f(cast::transmute_mut_region(&mut (*self.ptr).value));\n+            f(&mut (*self.ptr).value);\n             (*self.ptr).borrow = Nothing;\n         }\n     }"}]}