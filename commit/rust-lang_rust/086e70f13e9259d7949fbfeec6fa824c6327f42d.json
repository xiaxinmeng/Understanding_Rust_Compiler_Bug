{"sha": "086e70f13e9259d7949fbfeec6fa824c6327f42d", "node_id": "C_kwDOAAsO6NoAKDA4NmU3MGYxM2U5MjU5ZDc5NDlmYmZlZWM2ZmE4MjRjNjMyN2Y0MmQ", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-07T14:03:45Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-07T14:03:45Z"}, "message": "UPDATE - migrate linker.rs to new diagnostics infra", "tree": {"sha": "50eb74a2598e819156fb95d9dabb919bfcce3f9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50eb74a2598e819156fb95d9dabb919bfcce3f9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086e70f13e9259d7949fbfeec6fa824c6327f42d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086e70f13e9259d7949fbfeec6fa824c6327f42d", "html_url": "https://github.com/rust-lang/rust/commit/086e70f13e9259d7949fbfeec6fa824c6327f42d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086e70f13e9259d7949fbfeec6fa824c6327f42d/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a2d7f83cb3aea0556ef7cfd7662a028ac974d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2d7f83cb3aea0556ef7cfd7662a028ac974d87", "html_url": "https://github.com/rust-lang/rust/commit/0a2d7f83cb3aea0556ef7cfd7662a028ac974d87"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "debcffcd326f670861b8c210bc29654e04c15ec5", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/086e70f13e9259d7949fbfeec6fa824c6327f42d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086e70f13e9259d7949fbfeec6fa824c6327f42d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=086e70f13e9259d7949fbfeec6fa824c6327f42d", "patch": "@@ -1,6 +1,6 @@\n use super::command::Command;\n use super::symbol_export;\n-use crate::errors::LibDefWriteFailure;\n+use crate::errors;\n use rustc_span::symbol::sym;\n \n use std::ffi::{OsStr, OsString};\n@@ -91,13 +91,13 @@ pub fn get_linker<'a>(\n                     arg.push(format!(\"{}\\\\lib\\\\{}\\\\store\", root_lib_path.display(), a));\n                     cmd.arg(&arg);\n                 } else {\n-                    warn!(\"arch is not supported\");\n+                    sess.emit_warning(errors::UnsupportedArch);\n                 }\n             } else {\n-                warn!(\"MSVC root path lib location not found\");\n+                sess.emit_warning(errors::MsvcPathNotFound);\n             }\n         } else {\n-            warn!(\"link.exe not found\");\n+            sess.emit_warning(errors::LinkExeNotFound);\n         }\n     }\n \n@@ -435,11 +435,11 @@ impl<'a> Linker for GccLinker<'a> {\n                 // FIXME(81490): ld64 doesn't support these flags but macOS 11\n                 // has -needed-l{} / -needed_library {}\n                 // but we have no way to detect that here.\n-                self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n+                self.sess.emit_warning(errors::Ld64UnimplementedModifier);\n             } else if self.is_gnu && !self.sess.target.is_like_windows {\n                 self.linker_arg(\"--no-as-needed\");\n             } else {\n-                self.sess.warn(\"`as-needed` modifier not supported for current linker\");\n+                self.sess.emit_warning(errors::LinkerUnsupportedModifier);\n             }\n         }\n         self.hint_dynamic();\n@@ -493,7 +493,7 @@ impl<'a> Linker for GccLinker<'a> {\n             // FIXME(81490): ld64 as of macOS 11 supports the -needed_framework\n             // flag but we have no way to detect that here.\n             // self.cmd.arg(\"-needed_framework\").arg(framework);\n-            self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n+            self.sess.emit_warning(errors::Ld64UnimplementedModifier);\n         }\n         self.cmd.arg(\"-framework\").arg(framework);\n     }\n@@ -667,7 +667,7 @@ impl<'a> Linker for GccLinker<'a> {\n                 }\n             };\n             if let Err(error) = res {\n-                self.sess.emit_fatal(LibDefWriteFailure { error });\n+                self.sess.emit_fatal(errors::LibDefWriteFailure { error });\n             }\n         } else if is_windows {\n             let res: io::Result<()> = try {\n@@ -682,7 +682,7 @@ impl<'a> Linker for GccLinker<'a> {\n                 }\n             };\n             if let Err(error) = res {\n-                self.sess.emit_fatal(LibDefWriteFailure { error });\n+                self.sess.emit_fatal(errors::LibDefWriteFailure { error });\n             }\n         } else {\n             // Write an LD version script\n@@ -698,8 +698,8 @@ impl<'a> Linker for GccLinker<'a> {\n                 }\n                 writeln!(f, \"\\n  local:\\n    *;\\n}};\")?;\n             };\n-            if let Err(e) = res {\n-                self.sess.fatal(&format!(\"failed to write version script: {}\", e));\n+            if let Err(error) = res {\n+                self.sess.emit_fatal(errors::VersionScriptWriteFailure { error });\n             }\n         }\n \n@@ -916,9 +916,8 @@ impl<'a> Linker for MsvcLinker<'a> {\n                                     self.cmd.arg(arg);\n                                 }\n                             }\n-                            Err(err) => {\n-                                self.sess\n-                                    .warn(&format!(\"error enumerating natvis directory: {}\", err));\n+                            Err(error) => {\n+                                self.sess.emit_warning(errors::NoNatvisDirectory { error });\n                             }\n                         }\n                     }\n@@ -973,7 +972,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n             }\n         };\n         if let Err(error) = res {\n-            self.sess.emit_fatal(LibDefWriteFailure { error });\n+            self.sess.emit_fatal(errors::LibDefWriteFailure { error });\n         }\n         let mut arg = OsString::from(\"/DEF:\");\n         arg.push(path);\n@@ -1436,7 +1435,7 @@ impl<'a> Linker for L4Bender<'a> {\n \n     fn export_symbols(&mut self, _: &Path, _: CrateType, _: &[String]) {\n         // ToDo, not implemented, copy from GCC\n-        self.sess.warn(\"exporting symbols not implemented yet for L4Bender\");\n+        self.sess.emit_warning(errors::L4BenderExportingSymbolsUnimplemented);\n         return;\n     }\n \n@@ -1728,8 +1727,8 @@ impl<'a> Linker for BpfLinker<'a> {\n                 writeln!(f, \"{}\", sym)?;\n             }\n         };\n-        if let Err(e) = res {\n-            self.sess.fatal(&format!(\"failed to write symbols file: {}\", e));\n+        if let Err(error) = res {\n+            self.sess.emit_fatal(errors::SymbolFileWriteFailure { error });\n         } else {\n             self.cmd.arg(\"--export-symbols\").arg(&path);\n         }"}, {"sha": "05d89b32618e79afd2e7ed20aa89c45715000185", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/086e70f13e9259d7949fbfeec6fa824c6327f42d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086e70f13e9259d7949fbfeec6fa824c6327f42d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=086e70f13e9259d7949fbfeec6fa824c6327f42d", "patch": "@@ -14,3 +14,45 @@ pub struct MissingNativeStaticLibrary<'a> {\n pub struct LibDefWriteFailure {\n     pub error: Error,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::version_script_write_failure)]\n+pub struct VersionScriptWriteFailure {\n+    pub error: Error,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::symbol_file_write_failure)]\n+pub struct SymbolFileWriteFailure {\n+    pub error: Error,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::unsupported_arch)]\n+pub struct UnsupportedArch;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::msvc_path_not_found)]\n+pub struct MsvcPathNotFound;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::link_exe_not_found)]\n+pub struct LinkExeNotFound;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::ld64_unimplemented_modifier)]\n+pub struct Ld64UnimplementedModifier;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::linker_unsupported_modifier)]\n+pub struct LinkerUnsupportedModifier;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::L4Bender_exporting_symbols_unimplemented)]\n+pub struct L4BenderExportingSymbolsUnimplemented;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(codegen_ssa::no_natvis_directory)]\n+pub struct NoNatvisDirectory {\n+    pub error: Error,\n+}"}, {"sha": "090a4dc9510b63407479e59963c27b858abac69a", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/086e70f13e9259d7949fbfeec6fa824c6327f42d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/086e70f13e9259d7949fbfeec6fa824c6327f42d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=086e70f13e9259d7949fbfeec6fa824c6327f42d", "patch": "@@ -1,3 +1,21 @@\n codegen_ssa_missing_native_static_library = could not find native static library `{$library_name}`, perhaps an -L flag is missing?\n \n codegen_ssa_lib_def_write_failure = failed to write lib.def file: {$error}\n+\n+codegen_ssa_version_script_write_failure = failed to write version script: {$error}\n+\n+codegen_ssa_symbol_file_write_failure = failed to write symbols file: {$error}\n+\n+codegen_ssa_unsupported_arch = arch is not supported\n+\n+codegen_ssa_msvc_path_not_found = MSVC root path lib location not found\n+\n+codegen_ssa_link_exe_not_found = link.exe not found\n+\n+codegen_ssa_ld64_unimplemented_modifier = `as-needed` modifier not implemented yet for ld64\n+\n+codegen_ssa_linker_unsupported_modifier = `as-needed` modifier not supported for current linker\n+\n+codegen_ssa_L4Bender_exporting_symbols_unimplemented = exporting symbols not implemented yet for L4Bender\n+\n+codegen_ssa_no_natvis_directory = error enumerating natvis directory: {$error}"}]}