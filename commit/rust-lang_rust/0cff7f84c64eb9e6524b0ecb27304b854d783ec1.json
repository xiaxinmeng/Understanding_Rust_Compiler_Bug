{"sha": "0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZmY3Zjg0YzY0ZWI5ZTY1MjRiMGVjYjI3MzA0Yjg1NGQ3ODNlYzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-26T11:41:30Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-06-26T11:41:30Z"}, "message": "Merge #1446\n\n1446: Initial Visual Studio Code unit tests r=matklad a=etaoins\n\nAs promised in #1439 this is an initial attempt at unit testing the VSCode extension. There are two separate parts to this: getting the test framework working and unit testing the code in #1439.\r\n\r\nThe test framework nearly intact from the VSCode extension generator. The main thing missing was `test/index.ts` which acts as an entry point for Mocha. This was simply copied back in. I also needed to open the test VSCode instance inside a workspace as our file URI generation depends on a workspace being open.\r\n\r\nThere are two ways to run the test framework:\r\n\r\n1. Opening the extension's source in VSCode, pressing F5 and selecting the \"Extensions Test\" debug target.\r\n\r\n2. Closing all copies of VSCode and running `npm test`. This is started from the command line but actually opens a temporary VSCode window to host the tests.\r\n\r\nThis doesn't attempt to wire this up to CI. That requires running a headless X11 server which is a bit daunting. I'll assess the difficulty of that in a follow-up branch. This PR is at least helpful for local development without having to induce errors on a Rust project.\r\n\r\nFor the actual tests this uses snapshots of `rustc` output from [a real Rust project](https://github.com/etaoins/arret) captured from the command line. Except for extracting the\r\n`message` object and reformatting they're copied verbatim into fixture JSON files.\r\n\r\nOnly four different types of diagnostics are tested but they represent the main combinations of code actions and related information possible. They can be considered the happy path tests; as we encounter corner-cases we can introduce new tests fixtures.\n\nCo-authored-by: Ryan Cumming <etaoins@gmail.com>", "tree": {"sha": "9139681d87c2c5f09532d47337f7cbd5c0742249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9139681d87c2c5f09532d47337f7cbd5c0742249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "html_url": "https://github.com/rust-lang/rust/commit/0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "afd18dbcb8147cb83de408b7da310ee187faf3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd18dbcb8147cb83de408b7da310ee187faf3df", "html_url": "https://github.com/rust-lang/rust/commit/afd18dbcb8147cb83de408b7da310ee187faf3df"}, {"sha": "98ac62c9d78ff5ec323c7d9aeae8845e1df20b19", "url": "https://api.github.com/repos/rust-lang/rust/commits/98ac62c9d78ff5ec323c7d9aeae8845e1df20b19", "html_url": "https://github.com/rust-lang/rust/commit/98ac62c9d78ff5ec323c7d9aeae8845e1df20b19"}], "stats": {"total": 845, "additions": 784, "deletions": 61}, "files": [{"sha": "0a148ed3239c1c182d0493ef4d51cbe099675095", "filename": "docs/dev/README.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -97,6 +97,25 @@ To work on the VS Code extension, launch code inside `editors/code` and use `F5`\n to launch/debug. To automatically apply formatter and linter suggestions, use\n `npm run fix`.\n \n+Tests are located inside `src/test` and are named `*.test.ts`. They use the\n+[Mocha](https://mochajs.org) test framework and the builtin Node\n+[assert](https://nodejs.org/api/assert.html) module. Unlike normal Node tests\n+they must be hosted inside a VS Code instance. This can be done in one of two\n+ways:\n+\n+1. When `F5` debugging in VS Code select the `Extension Tests` configuration\n+   from the drop-down at the top of the Debug View. This will launch a temporary\n+   instance of VS Code. The test results will appear in the \"Debug Console\" tab\n+   of the primary VS Code instance.\n+\n+2. Run `npm test` from the command line. Although this is initiated from the\n+   command line it is not headless; it will also launch a temporary instance of\n+   VS Code. \n+\n+Due to the requirements of running the tests inside VS Code they are **not run\n+on CI**. When making changes to the extension please ensure the tests are not\n+broken locally before opening a Pull Request.\n+\n # Logging\n \n Logging is done by both rust-analyzer and VS Code, so it might be tricky to"}, {"sha": "c3578f476fcdb31c107feb86710bd2a8e40fa4ce", "filename": "editors/code/.vscode/launch.json", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2F.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2F.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.vscode%2Flaunch.json?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -20,6 +20,7 @@\n             \"request\": \"launch\",\n             \"runtimeExecutable\": \"${execPath}\",\n             \"args\": [\n+                \"${workspaceFolder}/src/test/\",\n                 \"--extensionDevelopmentPath=${workspaceFolder}\",\n                 \"--extensionTestsPath=${workspaceFolder}/out/test\"\n             ],"}, {"sha": "6e2dd04944b6a61948b2f6835c64b384d2b4842e", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -23,6 +23,7 @@\n         \"postinstall\": \"node ./node_modules/vscode/bin/install\",\n         \"fix\": \"prettier **/*.{json,ts} --write && tslint --project . --fix\",\n         \"lint\": \"tslint --project .\",\n+        \"test\": \"node node_modules/vscode/bin/test\",\n         \"prettier\": \"prettier **/*.{json,ts}\",\n         \"travis\": \"npm run compile && npm run lint && npm run prettier -- --list-different\"\n     },"}, {"sha": "1ec5f8d5f0c9caf7fd4eefd4000398c5203d310c", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 5, "deletions": 61, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -2,12 +2,17 @@ import * as child_process from 'child_process';\n import * as fs from 'fs';\n import * as path from 'path';\n import * as vscode from 'vscode';\n+\n import { Server } from '../server';\n import { terminate } from '../utils/processes';\n import {\n     mapRustDiagnosticToVsCode,\n     RustDiagnostic\n } from '../utils/rust_diagnostics';\n+import {\n+    areCodeActionsEqual,\n+    areDiagnosticsEqual\n+} from '../utils/vscode_diagnostics';\n import { LineBuffer } from './line_buffer';\n import { StatusDisplay } from './watch_status';\n \n@@ -184,67 +189,6 @@ export class CargoWatchProvider\n             this.statusDisplay.hide();\n         }\n \n-        function areDiagnosticsEqual(\n-            left: vscode.Diagnostic,\n-            right: vscode.Diagnostic\n-        ): boolean {\n-            return (\n-                left.source === right.source &&\n-                left.severity === right.severity &&\n-                left.range.isEqual(right.range) &&\n-                left.message === right.message\n-            );\n-        }\n-\n-        function areCodeActionsEqual(\n-            left: vscode.CodeAction,\n-            right: vscode.CodeAction\n-        ): boolean {\n-            if (\n-                left.kind !== right.kind ||\n-                left.title !== right.title ||\n-                !left.edit ||\n-                !right.edit\n-            ) {\n-                return false;\n-            }\n-\n-            const leftEditEntries = left.edit.entries();\n-            const rightEditEntries = right.edit.entries();\n-\n-            if (leftEditEntries.length !== rightEditEntries.length) {\n-                return false;\n-            }\n-\n-            for (let i = 0; i < leftEditEntries.length; i++) {\n-                const [leftUri, leftEdits] = leftEditEntries[i];\n-                const [rightUri, rightEdits] = rightEditEntries[i];\n-\n-                if (leftUri.toString() !== rightUri.toString()) {\n-                    return false;\n-                }\n-\n-                if (leftEdits.length !== rightEdits.length) {\n-                    return false;\n-                }\n-\n-                for (let j = 0; j < leftEdits.length; j++) {\n-                    const leftEdit = leftEdits[j];\n-                    const rightEdit = rightEdits[j];\n-\n-                    if (!leftEdit.range.isEqual(rightEdit.range)) {\n-                        return false;\n-                    }\n-\n-                    if (leftEdit.newText !== rightEdit.newText) {\n-                        return false;\n-                    }\n-                }\n-            }\n-\n-            return true;\n-        }\n-\n         interface CargoArtifact {\n             reason: string;\n             package_id: string;"}, {"sha": "d874e99bc556dc198bc44ff0fd494c66c1d44caf", "filename": "editors/code/src/test/fixtures/rust-diagnostics/clippy/trivially_copy_pass_by_ref.json", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fclippy%2Ftrivially_copy_pass_by_ref.json", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fclippy%2Ftrivially_copy_pass_by_ref.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fclippy%2Ftrivially_copy_pass_by_ref.json?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -0,0 +1,110 @@\n+{\n+    \"message\": \"this argument is passed by reference, but would be more efficient if passed by value\",\n+    \"code\": {\n+        \"code\": \"clippy::trivially_copy_pass_by_ref\",\n+        \"explanation\": null\n+    },\n+    \"level\": \"warning\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"compiler/mir/tagset.rs\",\n+            \"byte_start\": 941,\n+            \"byte_end\": 946,\n+            \"line_start\": 42,\n+            \"line_end\": 42,\n+            \"column_start\": 24,\n+            \"column_end\": 29,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n+                    \"highlight_start\": 24,\n+                    \"highlight_end\": 29\n+                }\n+            ],\n+            \"label\": null,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"lint level defined here\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"compiler/lib.rs\",\n+                    \"byte_start\": 8,\n+                    \"byte_end\": 19,\n+                    \"line_start\": 1,\n+                    \"line_end\": 1,\n+                    \"column_start\": 9,\n+                    \"column_end\": 20,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"#![warn(clippy::all)]\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 20\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": null,\n+                    \"suggestion_applicability\": null,\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider passing by value instead\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"compiler/mir/tagset.rs\",\n+                    \"byte_start\": 941,\n+                    \"byte_end\": 946,\n+                    \"line_start\": 42,\n+                    \"line_end\": 42,\n+                    \"column_start\": 24,\n+                    \"column_end\": 29,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n+                            \"highlight_start\": 24,\n+                            \"highlight_end\": 29\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"self\",\n+                    \"suggestion_applicability\": \"Unspecified\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"warning: this argument is passed by reference, but would be more efficient if passed by value\\n  --> compiler/mir/tagset.rs:42:24\\n   |\\n42 |     pub fn is_disjoint(&self, other: Self) -> bool {\\n   |                        ^^^^^ help: consider passing by value instead: `self`\\n   |\\nnote: lint level defined here\\n  --> compiler/lib.rs:1:9\\n   |\\n1  | #![warn(clippy::all)]\\n   |         ^^^^^^^^^^^\\n   = note: #[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\\n\\n\"\n+}"}, {"sha": "ea5c976d1d4198f68a3cb07947625357884791cc", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0053.json", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0053.json", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0053.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0053.json?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -0,0 +1,42 @@\n+{\n+    \"message\": \"method `next` has an incompatible type for trait\",\n+    \"code\": {\n+        \"code\": \"E0053\",\n+        \"explanation\": \"\\nThe parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nHere are a couple examples of this error:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"\n+    },\n+    \"level\": \"error\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"compiler/ty/list_iter.rs\",\n+            \"byte_start\": 1307,\n+            \"byte_end\": 1350,\n+            \"line_start\": 52,\n+            \"line_end\": 52,\n+            \"column_start\": 5,\n+            \"column_end\": 48,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    fn next(&self) -> Option<&'list ty::Ref<M>> {\",\n+                    \"highlight_start\": 5,\n+                    \"highlight_end\": 48\n+                }\n+            ],\n+            \"label\": \"types differ in mutability\",\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"error[E0053]: method `next` has an incompatible type for trait\\n  --> compiler/ty/list_iter.rs:52:5\\n   |\\n52 |     fn next(&self) -> Option<&'list ty::Ref<M>> {\\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\\n   |\\n   = note: expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n              found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\\n\\n\"\n+}"}, {"sha": "3154d1098cdccd54ce706625cfa0191ffe284556", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0061.json", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0061.json", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0061.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0061.json?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -0,0 +1,114 @@\n+{\n+    \"message\": \"this function takes 2 parameters but 3 parameters were supplied\",\n+    \"code\": {\n+        \"code\": \"E0061\",\n+        \"explanation\": \"\\nThe number of arguments passed to a function must match the number of arguments\\nspecified in the function signature.\\n\\nFor example, a function like:\\n\\n```\\nfn f(a: u16, b: &str) {}\\n```\\n\\nMust always be called with exactly two arguments, e.g., `f(2, \\\"test\\\")`.\\n\\nNote that Rust does not have a notion of optional function arguments or\\nvariadic functions (except for its C-FFI).\\n\"\n+    },\n+    \"level\": \"error\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"compiler/ty/select.rs\",\n+            \"byte_start\": 8787,\n+            \"byte_end\": 9241,\n+            \"line_start\": 219,\n+            \"line_end\": 231,\n+            \"column_start\": 5,\n+            \"column_end\": 6,\n+            \"is_primary\": false,\n+            \"text\": [\n+                {\n+                    \"text\": \"    pub fn add_evidence(\",\n+                    \"highlight_start\": 5,\n+                    \"highlight_end\": 25\n+                },\n+                {\n+                    \"text\": \"        &mut self,\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 19\n+                },\n+                {\n+                    \"text\": \"        target_poly: &ty::Ref<ty::Poly>,\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 41\n+                },\n+                {\n+                    \"text\": \"        evidence_poly: &ty::Ref<ty::Poly>,\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 43\n+                },\n+                {\n+                    \"text\": \"    ) {\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 8\n+                },\n+                {\n+                    \"text\": \"        match target_poly {\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 28\n+                },\n+                {\n+                    \"text\": \"            ty::Ref::Var(tvar, _) => self.add_var_evidence(tvar, evidence_poly),\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 81\n+                },\n+                {\n+                    \"text\": \"            ty::Ref::Fixed(target_ty) => {\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 43\n+                },\n+                {\n+                    \"text\": \"                let evidence_ty = evidence_poly.resolve_to_ty();\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 65\n+                },\n+                {\n+                    \"text\": \"                self.add_evidence_ty(target_ty, evidence_poly, evidence_ty)\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 76\n+                },\n+                {\n+                    \"text\": \"            }\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 14\n+                },\n+                {\n+                    \"text\": \"        }\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 10\n+                },\n+                {\n+                    \"text\": \"    }\",\n+                    \"highlight_start\": 1,\n+                    \"highlight_end\": 6\n+                }\n+            ],\n+            \"label\": \"defined here\",\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        },\n+        {\n+            \"file_name\": \"compiler/ty/select.rs\",\n+            \"byte_start\": 4045,\n+            \"byte_end\": 4057,\n+            \"line_start\": 104,\n+            \"line_end\": 104,\n+            \"column_start\": 18,\n+            \"column_end\": 30,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"            self.add_evidence(target_fixed, evidence_fixed, false);\",\n+                    \"highlight_start\": 18,\n+                    \"highlight_end\": 30\n+                }\n+            ],\n+            \"label\": \"expected 2 parameters\",\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [],\n+    \"rendered\": \"error[E0061]: this function takes 2 parameters but 3 parameters were supplied\\n   --> compiler/ty/select.rs:104:18\\n    |\\n104 |               self.add_evidence(target_fixed, evidence_fixed, false);\\n    |                    ^^^^^^^^^^^^ expected 2 parameters\\n...\\n219 | /     pub fn add_evidence(\\n220 | |         &mut self,\\n221 | |         target_poly: &ty::Ref<ty::Poly>,\\n222 | |         evidence_poly: &ty::Ref<ty::Poly>,\\n...   |\\n230 | |         }\\n231 | |     }\\n    | |_____- defined here\\n\\n\"\n+}"}, {"sha": "d1e2be722147045a184d14fe1c1cc5864b730059", "filename": "editors/code/src/test/fixtures/rust-diagnostics/warning/unused_variables.json", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fwarning%2Funused_variables.json", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fwarning%2Funused_variables.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fwarning%2Funused_variables.json?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -0,0 +1,72 @@\n+{\n+    \"message\": \"unused variable: `foo`\",\n+    \"code\": {\n+        \"code\": \"unused_variables\",\n+        \"explanation\": null\n+    },\n+    \"level\": \"warning\",\n+    \"spans\": [\n+        {\n+            \"file_name\": \"driver/subcommand/repl.rs\",\n+            \"byte_start\": 9228,\n+            \"byte_end\": 9231,\n+            \"line_start\": 291,\n+            \"line_end\": 291,\n+            \"column_start\": 9,\n+            \"column_end\": 12,\n+            \"is_primary\": true,\n+            \"text\": [\n+                {\n+                    \"text\": \"    let foo = 42;\",\n+                    \"highlight_start\": 9,\n+                    \"highlight_end\": 12\n+                }\n+            ],\n+            \"label\": null,\n+            \"suggested_replacement\": null,\n+            \"suggestion_applicability\": null,\n+            \"expansion\": null\n+        }\n+    ],\n+    \"children\": [\n+        {\n+            \"message\": \"#[warn(unused_variables)] on by default\",\n+            \"code\": null,\n+            \"level\": \"note\",\n+            \"spans\": [],\n+            \"children\": [],\n+            \"rendered\": null\n+        },\n+        {\n+            \"message\": \"consider prefixing with an underscore\",\n+            \"code\": null,\n+            \"level\": \"help\",\n+            \"spans\": [\n+                {\n+                    \"file_name\": \"driver/subcommand/repl.rs\",\n+                    \"byte_start\": 9228,\n+                    \"byte_end\": 9231,\n+                    \"line_start\": 291,\n+                    \"line_end\": 291,\n+                    \"column_start\": 9,\n+                    \"column_end\": 12,\n+                    \"is_primary\": true,\n+                    \"text\": [\n+                        {\n+                            \"text\": \"    let foo = 42;\",\n+                            \"highlight_start\": 9,\n+                            \"highlight_end\": 12\n+                        }\n+                    ],\n+                    \"label\": null,\n+                    \"suggested_replacement\": \"_foo\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"expansion\": null\n+                }\n+            ],\n+            \"children\": [],\n+            \"rendered\": null\n+        }\n+    ],\n+    \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n+}"}, {"sha": "6e565c254a1f9fa732a5bb9cd2280db5095170dc", "filename": "editors/code/src/test/index.ts", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Findex.ts?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -0,0 +1,22 @@\n+//\n+// PLEASE DO NOT MODIFY / DELETE UNLESS YOU KNOW WHAT YOU ARE DOING\n+//\n+// This file is providing the test runner to use when running extension tests.\n+// By default the test runner in use is Mocha based.\n+//\n+// You can provide your own test runner if you want to override it by exporting\n+// a function run(testRoot: string, clb: (error:Error) => void) that the extension\n+// host can call to run the tests. The test runner is expected to use console.log\n+// to report the results back to the caller. When the tests are finished, return\n+// a possible error to the callback or null if none.\n+\n+import * as testRunner from 'vscode/lib/testrunner';\n+\n+// You can directly control Mocha options by uncommenting the following lines\n+// See https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically#set-options for more info\n+testRunner.configure({\n+    ui: 'bdd', // the TDD UI is being used in extension.test.ts (suite, test, etc.)\n+    useColors: true // colored output from test results\n+});\n+\n+module.exports = testRunner;"}, {"sha": "5eb064b979a2097058041770b43e49b9f227d5f1", "filename": "editors/code/src/test/rust_diagnostics.test.ts", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Frust_diagnostics.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Frust_diagnostics.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Frust_diagnostics.test.ts?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -0,0 +1,161 @@\n+import * as assert from 'assert';\n+import * as fs from 'fs';\n+import * as vscode from 'vscode';\n+\n+import {\n+    MappedRustDiagnostic,\n+    mapRustDiagnosticToVsCode,\n+    RustDiagnostic\n+} from '../utils/rust_diagnostics';\n+\n+function loadDiagnosticFixture(name: string): RustDiagnostic {\n+    const jsonText = fs\n+        .readFileSync(\n+            // We're actually in our JavaScript output directory, climb out\n+            `${__dirname}/../../src/test/fixtures/rust-diagnostics/${name}.json`\n+        )\n+        .toString();\n+\n+    return JSON.parse(jsonText);\n+}\n+\n+function mapFixtureToVsCode(name: string): MappedRustDiagnostic {\n+    const rd = loadDiagnosticFixture(name);\n+    const mapResult = mapRustDiagnosticToVsCode(rd);\n+\n+    if (!mapResult) {\n+        return assert.fail('Mapping unexpectedly failed');\n+    }\n+    return mapResult;\n+}\n+\n+describe('mapRustDiagnosticToVsCode', () => {\n+    it('should map an incompatible type for trait error', () => {\n+        const { diagnostic, codeActions } = mapFixtureToVsCode('error/E0053');\n+\n+        assert.strictEqual(\n+            diagnostic.severity,\n+            vscode.DiagnosticSeverity.Error\n+        );\n+        assert.strictEqual(\n+            diagnostic.message,\n+            [\n+                `method \\`next\\` has an incompatible type for trait`,\n+                `expected type \\`fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>\\``,\n+                `   found type \\`fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>\\``\n+            ].join('\\n')\n+        );\n+        assert.strictEqual(diagnostic.code, 'E0053');\n+        assert.strictEqual(diagnostic.tags, undefined);\n+\n+        // No related information\n+        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n+\n+        // There are no code actions available\n+        assert.strictEqual(codeActions.length, 0);\n+    });\n+\n+    it('should map an unused variable warning', () => {\n+        const { diagnostic, codeActions } = mapFixtureToVsCode(\n+            'warning/unused_variables'\n+        );\n+\n+        assert.strictEqual(\n+            diagnostic.severity,\n+            vscode.DiagnosticSeverity.Warning\n+        );\n+        assert.strictEqual(\n+            diagnostic.message,\n+            [\n+                'unused variable: `foo`',\n+                '#[warn(unused_variables)] on by default'\n+            ].join('\\n')\n+        );\n+        assert.strictEqual(diagnostic.code, 'unused_variables');\n+        assert.deepStrictEqual(diagnostic.tags, [\n+            vscode.DiagnosticTag.Unnecessary\n+        ]);\n+\n+        // No related information\n+        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n+\n+        // One code action available to prefix the variable\n+        assert.strictEqual(codeActions.length, 1);\n+        const [codeAction] = codeActions;\n+        assert.strictEqual(\n+            codeAction.title,\n+            'consider prefixing with an underscore: `_foo`'\n+        );\n+        assert(codeAction.isPreferred);\n+    });\n+\n+    it('should map a wrong number of parameters error', () => {\n+        const { diagnostic, codeActions } = mapFixtureToVsCode('error/E0061');\n+\n+        assert.strictEqual(\n+            diagnostic.severity,\n+            vscode.DiagnosticSeverity.Error\n+        );\n+        assert.strictEqual(\n+            diagnostic.message,\n+            'this function takes 2 parameters but 3 parameters were supplied'\n+        );\n+        assert.strictEqual(diagnostic.code, 'E0061');\n+        assert.strictEqual(diagnostic.tags, undefined);\n+\n+        // One related information for the original definition\n+        const relatedInformation = diagnostic.relatedInformation;\n+        if (!relatedInformation) {\n+            return assert.fail('Related information unexpectedly undefined');\n+        }\n+        assert.strictEqual(relatedInformation.length, 1);\n+        const [related] = relatedInformation;\n+        assert.strictEqual(related.message, 'defined here');\n+\n+        // There are no actions available\n+        assert.strictEqual(codeActions.length, 0);\n+    });\n+\n+    it('should map a Clippy copy pass by ref warning', () => {\n+        const { diagnostic, codeActions } = mapFixtureToVsCode(\n+            'clippy/trivially_copy_pass_by_ref'\n+        );\n+\n+        assert.strictEqual(\n+            diagnostic.severity,\n+            vscode.DiagnosticSeverity.Warning\n+        );\n+        assert.strictEqual(\n+            diagnostic.message,\n+            [\n+                'this argument is passed by reference, but would be more efficient if passed by value',\n+                '#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]',\n+                'for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref'\n+            ].join('\\n')\n+        );\n+        assert.strictEqual(\n+            diagnostic.code,\n+            'clippy::trivially_copy_pass_by_ref'\n+        );\n+        assert.strictEqual(diagnostic.tags, undefined);\n+\n+        // One related information for the lint definition\n+        const relatedInformation = diagnostic.relatedInformation;\n+        if (!relatedInformation) {\n+            return assert.fail('Related information unexpectedly undefined');\n+        }\n+        assert.strictEqual(relatedInformation.length, 1);\n+        const [related] = relatedInformation;\n+        assert.strictEqual(related.message, 'lint level defined here');\n+\n+        // One code action available to pass by value\n+        assert.strictEqual(codeActions.length, 1);\n+        const [codeAction] = codeActions;\n+        assert.strictEqual(\n+            codeAction.title,\n+            'consider passing by value instead: `self`'\n+        );\n+        // Clippy does not mark this as machine applicable\n+        assert.strictEqual(codeAction.isPreferred, false);\n+    });\n+});"}, {"sha": "ca43456269e46f38a98bd0fa1dfc63c43f72b880", "filename": "editors/code/src/test/vscode_diagnostics.test.ts", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Fvscode_diagnostics.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Ftest%2Fvscode_diagnostics.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Fvscode_diagnostics.test.ts?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -0,0 +1,164 @@\n+import * as assert from 'assert';\n+import * as vscode from 'vscode';\n+\n+import {\n+    areCodeActionsEqual,\n+    areDiagnosticsEqual\n+} from '../utils/vscode_diagnostics';\n+\n+const uri = vscode.Uri.file('/file/1');\n+\n+const range1 = new vscode.Range(\n+    new vscode.Position(1, 2),\n+    new vscode.Position(3, 4)\n+);\n+\n+const range2 = new vscode.Range(\n+    new vscode.Position(5, 6),\n+    new vscode.Position(7, 8)\n+);\n+\n+describe('areDiagnosticsEqual', () => {\n+    it('should treat identical diagnostics as equal', () => {\n+        const diagnostic1 = new vscode.Diagnostic(\n+            range1,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+\n+        const diagnostic2 = new vscode.Diagnostic(\n+            range1,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+\n+        assert(areDiagnosticsEqual(diagnostic1, diagnostic2));\n+    });\n+\n+    it('should treat diagnostics with different ranges as inequal', () => {\n+        const diagnostic1 = new vscode.Diagnostic(\n+            range1,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+\n+        const diagnostic2 = new vscode.Diagnostic(\n+            range2,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+\n+        assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n+    });\n+\n+    it('should treat diagnostics with different messages as inequal', () => {\n+        const diagnostic1 = new vscode.Diagnostic(\n+            range1,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+\n+        const diagnostic2 = new vscode.Diagnostic(\n+            range1,\n+            'Goodbye!, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+\n+        assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n+    });\n+\n+    it('should treat diagnostics with different severities as inequal', () => {\n+        const diagnostic1 = new vscode.Diagnostic(\n+            range1,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Warning\n+        );\n+\n+        const diagnostic2 = new vscode.Diagnostic(\n+            range1,\n+            'Hello, world!',\n+            vscode.DiagnosticSeverity.Error\n+        );\n+\n+        assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n+    });\n+});\n+\n+describe('areCodeActionsEqual', () => {\n+    it('should treat identical actions as equal', () => {\n+        const codeAction1 = new vscode.CodeAction(\n+            'Fix me!',\n+            vscode.CodeActionKind.QuickFix\n+        );\n+\n+        const codeAction2 = new vscode.CodeAction(\n+            'Fix me!',\n+            vscode.CodeActionKind.QuickFix\n+        );\n+\n+        const edit = new vscode.WorkspaceEdit();\n+        edit.replace(uri, range1, 'Replace with this');\n+        codeAction1.edit = edit;\n+        codeAction2.edit = edit;\n+\n+        assert(areCodeActionsEqual(codeAction1, codeAction2));\n+    });\n+\n+    it('should treat actions with different types as inequal', () => {\n+        const codeAction1 = new vscode.CodeAction(\n+            'Fix me!',\n+            vscode.CodeActionKind.Refactor\n+        );\n+\n+        const codeAction2 = new vscode.CodeAction(\n+            'Fix me!',\n+            vscode.CodeActionKind.QuickFix\n+        );\n+\n+        const edit = new vscode.WorkspaceEdit();\n+        edit.replace(uri, range1, 'Replace with this');\n+        codeAction1.edit = edit;\n+        codeAction2.edit = edit;\n+\n+        assert(!areCodeActionsEqual(codeAction1, codeAction2));\n+    });\n+\n+    it('should treat actions with different titles as inequal', () => {\n+        const codeAction1 = new vscode.CodeAction(\n+            'Fix me!',\n+            vscode.CodeActionKind.Refactor\n+        );\n+\n+        const codeAction2 = new vscode.CodeAction(\n+            'Do something different!',\n+            vscode.CodeActionKind.Refactor\n+        );\n+\n+        const edit = new vscode.WorkspaceEdit();\n+        edit.replace(uri, range1, 'Replace with this');\n+        codeAction1.edit = edit;\n+        codeAction2.edit = edit;\n+\n+        assert(!areCodeActionsEqual(codeAction1, codeAction2));\n+    });\n+\n+    it('should treat actions with different edits as inequal', () => {\n+        const codeAction1 = new vscode.CodeAction(\n+            'Fix me!',\n+            vscode.CodeActionKind.Refactor\n+        );\n+        const edit1 = new vscode.WorkspaceEdit();\n+        edit1.replace(uri, range1, 'Replace with this');\n+        codeAction1.edit = edit1;\n+\n+        const codeAction2 = new vscode.CodeAction(\n+            'Fix me!',\n+            vscode.CodeActionKind.Refactor\n+        );\n+        const edit2 = new vscode.WorkspaceEdit();\n+        edit2.replace(uri, range1, 'Replace with this other thing');\n+        codeAction2.edit = edit2;\n+\n+        assert(!areCodeActionsEqual(codeAction1, codeAction2));\n+    });\n+});"}, {"sha": "9d763c8d64a8bd7de699cf57ba1d31ae3d7fa9e9", "filename": "editors/code/src/utils/vscode_diagnostics.ts", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Futils%2Fvscode_diagnostics.ts", "raw_url": "https://github.com/rust-lang/rust/raw/0cff7f84c64eb9e6524b0ecb27304b854d783ec1/editors%2Fcode%2Fsrc%2Futils%2Fvscode_diagnostics.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fvscode_diagnostics.ts?ref=0cff7f84c64eb9e6524b0ecb27304b854d783ec1", "patch": "@@ -0,0 +1,73 @@\n+import * as vscode from 'vscode';\n+\n+/** Compares two `vscode.Diagnostic`s for equality */\n+export function areDiagnosticsEqual(\n+    left: vscode.Diagnostic,\n+    right: vscode.Diagnostic\n+): boolean {\n+    return (\n+        left.source === right.source &&\n+        left.severity === right.severity &&\n+        left.range.isEqual(right.range) &&\n+        left.message === right.message\n+    );\n+}\n+\n+/** Compares two `vscode.TextEdit`s for equality */\n+function areTextEditsEqual(\n+    left: vscode.TextEdit,\n+    right: vscode.TextEdit\n+): boolean {\n+    if (!left.range.isEqual(right.range)) {\n+        return false;\n+    }\n+\n+    if (left.newText !== right.newText) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+/** Compares two `vscode.CodeAction`s for equality */\n+export function areCodeActionsEqual(\n+    left: vscode.CodeAction,\n+    right: vscode.CodeAction\n+): boolean {\n+    if (\n+        left.kind !== right.kind ||\n+        left.title !== right.title ||\n+        !left.edit ||\n+        !right.edit\n+    ) {\n+        return false;\n+    }\n+\n+    const leftEditEntries = left.edit.entries();\n+    const rightEditEntries = right.edit.entries();\n+\n+    if (leftEditEntries.length !== rightEditEntries.length) {\n+        return false;\n+    }\n+\n+    for (let i = 0; i < leftEditEntries.length; i++) {\n+        const [leftUri, leftEdits] = leftEditEntries[i];\n+        const [rightUri, rightEdits] = rightEditEntries[i];\n+\n+        if (leftUri.toString() !== rightUri.toString()) {\n+            return false;\n+        }\n+\n+        if (leftEdits.length !== rightEdits.length) {\n+            return false;\n+        }\n+\n+        for (let j = 0; j < leftEdits.length; j++) {\n+            if (!areTextEditsEqual(leftEdits[j], rightEdits[j])) {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}"}]}