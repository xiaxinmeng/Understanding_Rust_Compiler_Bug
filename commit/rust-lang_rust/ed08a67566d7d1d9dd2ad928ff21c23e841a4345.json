{"sha": "ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "node_id": "C_kwDOAAsO6NoAKGVkMDhhNjc1NjZkN2QxZDlkZDJhZDkyOGZmMjFjMjNlODQxYTQzNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-24T11:04:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-24T11:04:54Z"}, "message": "Auto merge of #85254 - cjgillot:reveal-mir, r=lcnr\n\nNormalize MIR with RevealAll before optimizations.\n\nFixes #78442", "tree": {"sha": "77cfd5feefb1bc1fb4baa297902a02dcb6439de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77cfd5feefb1bc1fb4baa297902a02dcb6439de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "html_url": "https://github.com/rust-lang/rust/commit/ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdcb52851231dc14bc6a7915dc62528cae7b8137", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcb52851231dc14bc6a7915dc62528cae7b8137", "html_url": "https://github.com/rust-lang/rust/commit/bdcb52851231dc14bc6a7915dc62528cae7b8137"}, {"sha": "70aeced757d8e6a3b7eaa8bc182e3cb3bdaa55e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/70aeced757d8e6a3b7eaa8bc182e3cb3bdaa55e6", "html_url": "https://github.com/rust-lang/rust/commit/70aeced757d8e6a3b7eaa8bc182e3cb3bdaa55e6"}], "stats": {"total": 212, "additions": 207, "deletions": 5}, "files": [{"sha": "d6bf2de1668c2903111ded0ad5085c3b5c9c5345", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "patch": "@@ -66,6 +66,7 @@ mod remove_storage_markers;\n mod remove_unneeded_drops;\n mod remove_zsts;\n mod required_consts;\n+mod reveal_all;\n mod separate_const_switch;\n mod shim;\n mod simplify;\n@@ -490,6 +491,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     // to them. We run some optimizations before that, because they may be harder to do on the state\n     // machine than on MIR with async primitives.\n     let optimizations_with_generators: &[&dyn MirPass<'tcx>] = &[\n+        &reveal_all::RevealAll, // has to be done before inlining, since inlined code is in RevealAll mode.\n         &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n         &normalize_array_len::NormalizeArrayLen, // has to run after `slice::len` lowering\n         &unreachable_prop::UnreachablePropagation,"}, {"sha": "c71bc512c31b5e8403eb59e59d5702ecec8d4813", "filename": "compiler/rustc_mir_transform/src/remove_unneeded_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_unneeded_drops.rs?ref=ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "patch": "@@ -13,7 +13,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUnneededDrops {\n         trace!(\"Running RemoveUnneededDrops on {:?}\", body.source);\n \n         let did = body.source.def_id();\n-        let param_env = tcx.param_env(did);\n+        let param_env = tcx.param_env_reveal_all_normalized(did);\n         let mut should_simplify = false;\n \n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();"}, {"sha": "7b4eb4912cb366a99319ceb5a309131cad6db06f", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "patch": "@@ -0,0 +1,58 @@\n+//! Normalizes MIR in RevealAll mode.\n+\n+use crate::MirPass;\n+use rustc_middle::mir::visit::*;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+\n+pub struct RevealAll;\n+\n+impl<'tcx> MirPass<'tcx> for RevealAll {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        // This pass must run before inlining, since we insert callee bodies in RevealAll mode.\n+        // Do not apply this transformation to generators.\n+        if (tcx.sess.mir_opt_level() >= 3 || !super::inline::is_enabled(tcx))\n+            && body.generator.is_none()\n+        {\n+            let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n+            RevealAllVisitor { tcx, param_env }.visit_body(body);\n+        }\n+    }\n+}\n+\n+struct RevealAllVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for RevealAllVisitor<'tcx> {\n+    #[inline]\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    #[inline]\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n+        *ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n+    }\n+\n+    #[inline]\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: PlaceElem<'tcx>,\n+        _: Location,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        match elem {\n+            PlaceElem::Field(field, ty) => {\n+                let new_ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n+                if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n+            }\n+            // None of those contain a Ty.\n+            PlaceElem::Index(..)\n+            | PlaceElem::Deref\n+            | PlaceElem::ConstantIndex { .. }\n+            | PlaceElem::Subslice { .. }\n+            | PlaceElem::Downcast(..) => None,\n+        }\n+    }\n+}"}, {"sha": "29243c9aa75d28758233d49d40294c68eec4f298", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "patch": "@@ -3,10 +3,10 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-generator.rs:8:11: 8:11\n-      let _1: std::ops::GeneratorState<<impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Yield, <impl std::ops::Generator<bool> as std::ops::Generator<bool>>::Return>; // in scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n-      let mut _2: std::pin::Pin<&mut impl std::ops::Generator<bool>>; // in scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n-      let mut _3: &mut impl std::ops::Generator<bool>; // in scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n-      let mut _4: impl std::ops::Generator<bool>; // in scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n+      let _1: std::ops::GeneratorState<i32, bool>; // in scope 0 at $DIR/inline-generator.rs:9:9: 9:11\n+      let mut _2: std::pin::Pin<&mut [generator@$DIR/inline-generator.rs:15:5: 15:41]>; // in scope 0 at $DIR/inline-generator.rs:9:14: 9:32\n+      let mut _3: &mut [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 0 at $DIR/inline-generator.rs:9:23: 9:31\n+      let mut _4: [generator@$DIR/inline-generator.rs:15:5: 15:41]; // in scope 0 at $DIR/inline-generator.rs:9:28: 9:31\n +     let mut _7: bool;                    // in scope 0 at $DIR/inline-generator.rs:9:14: 9:46\n       scope 1 {\n           debug _r => _1;                  // in scope 1 at $DIR/inline-generator.rs:9:9: 9:11"}, {"sha": "aa8ede2df9e9c126cdea02da120f450fbd003ddd", "filename": "src/test/mir-opt/inline/issue-78442.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/src%2Ftest%2Fmir-opt%2Finline%2Fissue-78442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/src%2Ftest%2Fmir-opt%2Finline%2Fissue-78442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-78442.rs?ref=ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Z mir-opt-level=3 -Z inline-mir\n+// ignore-wasm32-bare compiled with panic=abort by default\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR issue_78442.bar.RevealAll.diff\n+// EMIT_MIR issue_78442.bar.Inline.diff\n+pub fn bar<P>(\n+    // Error won't happen if \"bar\" is not generic\n+    _baz: P,\n+) {\n+    hide_foo()();\n+}\n+\n+fn hide_foo() -> impl Fn() {\n+    // Error won't happen if \"iterate\" hasn't impl Trait or has generics\n+    foo\n+}\n+\n+fn foo() { // Error won't happen if \"foo\" isn't used in \"iterate\" or has generics\n+}"}, {"sha": "4d9e022d825559f69e6d7e4472a98da4412dbdbd", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "patch": "@@ -0,0 +1,67 @@\n+- // MIR for `bar` before Inline\n++ // MIR for `bar` after Inline\n+  \n+  fn bar(_1: P) -> () {\n+      debug _baz => _1;                    // in scope 0 at $DIR/issue-78442.rs:9:5: 9:9\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-78442.rs:10:3: 10:3\n+      let _2: ();                          // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+      let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+      let _4: fn() {foo};                  // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+      let mut _5: ();                      // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n++     scope 1 (inlined <fn() {foo} as Fn<()>>::call - shim(fn() {foo})) { // at $DIR/issue-78442.rs:11:5: 11:17\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+-         _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n++         _4 = hide_foo() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-78442.rs:11:5: 11:13\n+                                           // + literal: Const { ty: fn() -> impl std::ops::Fn<()> {hide_foo}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+          StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-         _2 = <impl Fn<()> as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl std::ops::Fn<()>, ()) -> <impl std::ops::Fn<()> as std::ops::FnOnce<()>>::Output {<impl std::ops::Fn<()> as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n++         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $DIR/issue-78442.rs:11:5: 11:17\n+      }\n+  \n+      bb2: {\n+-         StorageDead(_5);                 // scope 0 at $DIR/issue-78442.rs:11:16: 11:17\n+-         StorageDead(_3);                 // scope 0 at $DIR/issue-78442.rs:11:16: 11:17\n+-         StorageDead(_4);                 // scope 0 at $DIR/issue-78442.rs:11:17: 11:18\n+-         StorageDead(_2);                 // scope 0 at $DIR/issue-78442.rs:11:17: 11:18\n+-         _0 = const ();                   // scope 0 at $DIR/issue-78442.rs:10:3: 12:2\n+-         drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue-78442.rs:12:1: 12:2\n++         return;                          // scope 0 at $DIR/issue-78442.rs:12:2: 12:2\n+      }\n+  \n+-     bb3: {\n+-         return;                          // scope 0 at $DIR/issue-78442.rs:12:2: 12:2\n++     bb3 (cleanup): {\n++         drop(_1) -> bb4;                 // scope 0 at $DIR/issue-78442.rs:12:1: 12:2\n+      }\n+  \n+      bb4 (cleanup): {\n+-         drop(_1) -> bb5;                 // scope 0 at $DIR/issue-78442.rs:12:1: 12:2\n++         resume;                          // scope 0 at $DIR/issue-78442.rs:7:1: 12:2\n+      }\n+  \n+-     bb5 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/issue-78442.rs:7:1: 12:2\n++     bb5: {\n++         StorageDead(_5);                 // scope 0 at $DIR/issue-78442.rs:11:16: 11:17\n++         StorageDead(_3);                 // scope 0 at $DIR/issue-78442.rs:11:16: 11:17\n++         StorageDead(_4);                 // scope 0 at $DIR/issue-78442.rs:11:17: 11:18\n++         StorageDead(_2);                 // scope 0 at $DIR/issue-78442.rs:11:17: 11:18\n++         _0 = const ();                   // scope 0 at $DIR/issue-78442.rs:10:3: 12:2\n++         drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:12:1: 12:2\n+      }\n+  }\n+  "}, {"sha": "45b552cc6340a06d8d40c3545f4227cc57b2609d", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ed08a67566d7d1d9dd2ad928ff21c23e841a4345/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `bar` before RevealAll\n++ // MIR for `bar` after RevealAll\n+  \n+  fn bar(_1: P) -> () {\n+      debug _baz => _1;                    // in scope 0 at $DIR/issue-78442.rs:9:5: 9:9\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-78442.rs:10:3: 10:3\n+      let _2: ();                          // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-     let mut _3: &impl std::ops::Fn<()>;  // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+-     let _4: impl std::ops::Fn<()>;       // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n++     let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n++     let _4: fn() {foo};                  // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+      let mut _5: ();                      // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+          _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-78442.rs:11:5: 11:13\n+                                           // + literal: Const { ty: fn() -> impl std::ops::Fn<()> {hide_foo}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+          StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          nop;                             // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          _2 = <impl Fn<()> as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-78442.rs:11:5: 11:15\n+                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl std::ops::Fn<()>, ()) -> <impl std::ops::Fn<()> as std::ops::FnOnce<()>>::Output {<impl std::ops::Fn<()> as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_5);                 // scope 0 at $DIR/issue-78442.rs:11:16: 11:17\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-78442.rs:11:16: 11:17\n+          StorageDead(_4);                 // scope 0 at $DIR/issue-78442.rs:11:17: 11:18\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-78442.rs:11:17: 11:18\n+          _0 = const ();                   // scope 0 at $DIR/issue-78442.rs:10:3: 12:2\n+          drop(_1) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/issue-78442.rs:12:1: 12:2\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/issue-78442.rs:12:2: 12:2\n+      }\n+  \n+      bb4 (cleanup): {\n+          drop(_1) -> bb5;                 // scope 0 at $DIR/issue-78442.rs:12:1: 12:2\n+      }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/issue-78442.rs:7:1: 12:2\n+      }\n+  }\n+  "}]}