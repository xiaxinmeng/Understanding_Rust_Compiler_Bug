{"sha": "64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0Y2U4OTVlZjBiZWVhNzVlOWVjZmNkZjViNGUyMjZhOGE2MzM2ZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T18:37:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T18:37:40Z"}, "message": "extract fixture parsing", "tree": {"sha": "af07f03610a2ef1f8a49d773170146d0c1774750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af07f03610a2ef1f8a49d773170146d0c1774750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8", "html_url": "https://github.com/rust-lang/rust/commit/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b58ca6b1a68471f6944893b94f09cd56dc28f837", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58ca6b1a68471f6944893b94f09cd56dc28f837", "html_url": "https://github.com/rust-lang/rust/commit/b58ca6b1a68471f6944893b94f09cd56dc28f837"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "bf937d2050676f839084276135884aa5a447bc2f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8", "patch": "@@ -661,6 +661,7 @@ dependencies = [\n  \"serde_json 1.0.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"test_utils 0.1.0\",\n  \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.2.6 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "f29dafc17cdafc116a5d10c6842729048ccad3a5", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8", "patch": "@@ -32,3 +32,4 @@ gen_lsp_server = { path = \"../gen_lsp_server\" }\n \n [dev-dependencies]\n tempdir = \"0.3.7\"\n+test_utils = { path = \"../test_utils\" }"}, {"sha": "b90d211357052b66c4c22d86b3e374430afdad61", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8", "patch": "@@ -17,6 +17,7 @@ use languageserver_types::{\n use serde::Serialize;\n use serde_json::{from_str, to_string_pretty, Value};\n use tempdir::TempDir;\n+use test_utils::parse_fixture;\n \n use ra_lsp_server::{\n     main_loop, req,\n@@ -28,30 +29,14 @@ pub fn project(fixture: &str) -> Server {\n     INIT.call_once(|| Logger::with_env_or_str(crate::LOG).start().unwrap());\n \n     let tmp_dir = TempDir::new(\"test-project\").unwrap();\n-    let mut buf = String::new();\n-    let mut file_name = None;\n     let mut paths = vec![];\n-    macro_rules! flush {\n-        () => {\n-            if let Some(file_name) = file_name {\n-                let path = tmp_dir.path().join(file_name);\n-                fs::create_dir_all(path.parent().unwrap()).unwrap();\n-                fs::write(path.as_path(), buf.as_bytes()).unwrap();\n-                paths.push((path, buf.clone()));\n-            }\n-        };\n-    };\n-    for line in fixture.lines() {\n-        if line.starts_with(\"//-\") {\n-            flush!();\n-            buf.clear();\n-            file_name = Some(line[\"//-\".len()..].trim());\n-            continue;\n-        }\n-        buf.push_str(line);\n-        buf.push('\\n');\n+\n+    for entry in parse_fixture(fixture) {\n+        let path = tmp_dir.path().join(entry.meta);\n+        fs::create_dir_all(path.parent().unwrap()).unwrap();\n+        fs::write(path.as_path(), entry.text.as_bytes()).unwrap();\n+        paths.push((path, entry.text));\n     }\n-    flush!();\n     Server::new(tmp_dir, paths)\n }\n "}, {"sha": "562dbcbb3ed195359911c600a3712b40b9d6502f", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=64ce895ef0beea75e9ecfcdf5b4e226a8a6336d8", "patch": "@@ -87,3 +87,45 @@ pub fn add_cursor(text: &str, offset: TextUnit) -> String {\n     res.push_str(&text[offset..]);\n     res\n }\n+\n+\n+#[derive(Debug)]\n+pub struct FixtureEntry {\n+    pub meta: String,\n+    pub text: String,\n+}\n+\n+/// Parses text wich looks like this:\n+///\n+///  ```notrust\n+///  //- some meta\n+///  line 1\n+///  line 2\n+///  // - other meta\n+///  ```\n+pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n+    let mut res = Vec::new();\n+    let mut buf = String::new();\n+    let mut meta: Option<&str> = None;\n+\n+    macro_rules! flush {\n+        () => {\n+            if let Some(meta) = meta {\n+                res.push(FixtureEntry { meta: meta.to_string(), text: buf.clone() });\n+                buf.clear();\n+            }\n+        };\n+    };\n+    for line in fixture.lines() {\n+        if line.starts_with(\"//-\") {\n+            flush!();\n+            buf.clear();\n+            meta = Some(line[\"//-\".len()..].trim());\n+            continue;\n+        }\n+        buf.push_str(line);\n+        buf.push('\\n');\n+    }\n+    flush!();\n+    res\n+}"}]}