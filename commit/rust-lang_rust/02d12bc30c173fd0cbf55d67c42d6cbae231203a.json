{"sha": "02d12bc30c173fd0cbf55d67c42d6cbae231203a", "node_id": "C_kwDOAAsO6NoAKDAyZDEyYmMzMGMxNzNmZDBjYmY1NWQ2N2M0MmQ2Y2JhZTIzMTIwM2E", "commit": {"author": {"name": "niluxv", "email": "niluxv.opensource.C-h2ty6xl@yandex.com", "date": "2022-04-16T08:05:33Z"}, "committer": {"name": "niluxv", "email": "niluxv.opensource.C-h2ty6xl@yandex.com", "date": "2022-04-16T08:32:37Z"}, "message": "Improve `lossy_provenance_casts` lint diagnostics\n\nUse `multipart_suggestion` and don't suggested unnecessary parenthesis.", "tree": {"sha": "c3433d6a54133e83b84456e8c9fffcfda6c55797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3433d6a54133e83b84456e8c9fffcfda6c55797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02d12bc30c173fd0cbf55d67c42d6cbae231203a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02d12bc30c173fd0cbf55d67c42d6cbae231203a", "html_url": "https://github.com/rust-lang/rust/commit/02d12bc30c173fd0cbf55d67c42d6cbae231203a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02d12bc30c173fd0cbf55d67c42d6cbae231203a/comments", "author": {"login": "niluxv", "id": 34834616, "node_id": "MDQ6VXNlcjM0ODM0NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/34834616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niluxv", "html_url": "https://github.com/niluxv", "followers_url": "https://api.github.com/users/niluxv/followers", "following_url": "https://api.github.com/users/niluxv/following{/other_user}", "gists_url": "https://api.github.com/users/niluxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/niluxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niluxv/subscriptions", "organizations_url": "https://api.github.com/users/niluxv/orgs", "repos_url": "https://api.github.com/users/niluxv/repos", "events_url": "https://api.github.com/users/niluxv/events{/privacy}", "received_events_url": "https://api.github.com/users/niluxv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "niluxv", "id": 34834616, "node_id": "MDQ6VXNlcjM0ODM0NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/34834616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niluxv", "html_url": "https://github.com/niluxv", "followers_url": "https://api.github.com/users/niluxv/followers", "following_url": "https://api.github.com/users/niluxv/following{/other_user}", "gists_url": "https://api.github.com/users/niluxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/niluxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niluxv/subscriptions", "organizations_url": "https://api.github.com/users/niluxv/orgs", "repos_url": "https://api.github.com/users/niluxv/repos", "events_url": "https://api.github.com/users/niluxv/events{/privacy}", "received_events_url": "https://api.github.com/users/niluxv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b", "html_url": "https://github.com/rust-lang/rust/commit/080d5452e1bb6e18e12a073d4d0283fd9b6dac0b"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "da054077376c3531cfc352289e94ad1852d25979", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/02d12bc30c173fd0cbf55d67c42d6cbae231203a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d12bc30c173fd0cbf55d67c42d6cbae231203a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=02d12bc30c173fd0cbf55d67c42d6cbae231203a", "patch": "@@ -993,20 +993,33 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 ));\n \n                 let msg = \"use `.addr()` to obtain the address of a pointer\";\n-                if let Ok(snippet) = fcx.tcx.sess.source_map().span_to_snippet(self.expr_span) {\n-                    let scalar_cast = match t_c {\n-                        ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n-                        _ => format!(\" as {}\", self.cast_ty),\n-                    };\n+\n+                let expr_prec = self.expr.precedence().order();\n+                let needs_parens = expr_prec < rustc_ast::util::parser::PREC_POSTFIX;\n+\n+                let scalar_cast = match t_c {\n+                    ty::cast::IntTy::U(ty::UintTy::Usize) => String::new(),\n+                    _ => format!(\" as {}\", self.cast_ty),\n+                };\n+\n+                let cast_span = self.expr_span.shrink_to_hi().to(self.cast_span);\n+\n+                if needs_parens {\n+                    let suggestions = vec![\n+                        (self.expr_span.shrink_to_lo(), String::from(\"(\")),\n+                        (cast_span, format!(\").addr(){scalar_cast}\")),\n+                    ];\n+\n+                    err.multipart_suggestion(msg, suggestions, Applicability::MaybeIncorrect);\n+                } else {\n                     err.span_suggestion(\n-                        self.span,\n+                        cast_span,\n                         msg,\n-                        format!(\"({snippet}).addr(){scalar_cast}\"),\n-                        Applicability::MaybeIncorrect\n+                        format!(\".addr(){scalar_cast}\"),\n+                        Applicability::MaybeIncorrect,\n                     );\n-                } else {\n-                    err.help(msg);\n                 }\n+\n                 err.help(\n                     \"if you can't comply with strict provenance and need to expose the pointer \\\n                     provenance you can use `.expose_addr()` instead\""}, {"sha": "9799a05375682729832a496ced23d7957a0800a6", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02d12bc30c173fd0cbf55d67c42d6cbae231203a/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d12bc30c173fd0cbf55d67c42d6cbae231203a/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.rs?ref=02d12bc30c173fd0cbf55d67c42d6cbae231203a", "patch": "@@ -8,4 +8,11 @@ fn main() {\n \n     let addr_32bit = &x as *const u8 as u32;\n     //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+\n+    // don't add unnecessary parens in the suggestion\n+    let ptr = &x as *const u8;\n+    let ptr_addr = ptr as usize;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+    let ptr_addr_32bit = ptr as u32;\n+    //~^ ERROR under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n }"}, {"sha": "05178b34b11462738b2df489f468f90d683f0b32", "filename": "src/test/ui/lint/lint-strict-provenance-lossy-casts.stderr", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/02d12bc30c173fd0cbf55d67c42d6cbae231203a/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02d12bc30c173fd0cbf55d67c42d6cbae231203a/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-strict-provenance-lossy-casts.stderr?ref=02d12bc30c173fd0cbf55d67c42d6cbae231203a", "patch": "@@ -2,22 +2,50 @@ error: under strict provenance it is considered bad style to cast pointer `*cons\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:6:23\n    |\n LL |     let addr: usize = &x as *const u8 as usize;\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:2:9\n    |\n LL | #![deny(lossy_provenance_casts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+help: use `.addr()` to obtain the address of a pointer\n+   |\n+LL |     let addr: usize = (&x as *const u8).addr();\n+   |                       +               ~~~~~~~~\n \n error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n   --> $DIR/lint-strict-provenance-lossy-casts.rs:9:22\n    |\n LL |     let addr_32bit = &x as *const u8 as u32;\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use `.addr()` to obtain the address of a pointer: `(&x as *const u8).addr() as u32`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+help: use `.addr()` to obtain the address of a pointer\n+   |\n+LL |     let addr_32bit = (&x as *const u8).addr() as u32;\n+   |                      +               ~~~~~~~~~~~~~~~\n+\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `usize`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:14:20\n+   |\n+LL |     let ptr_addr = ptr as usize;\n+   |                    ^^^---------\n+   |                       |\n+   |                       help: use `.addr()` to obtain the address of a pointer: `.addr()`\n+   |\n+   = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n+\n+error: under strict provenance it is considered bad style to cast pointer `*const u8` to integer `u32`\n+  --> $DIR/lint-strict-provenance-lossy-casts.rs:16:26\n+   |\n+LL |     let ptr_addr_32bit = ptr as u32;\n+   |                          ^^^-------\n+   |                             |\n+   |                             help: use `.addr()` to obtain the address of a pointer: `.addr() as u32`\n    |\n    = help: if you can't comply with strict provenance and need to expose the pointer provenance you can use `.expose_addr()` instead\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}]}