{"sha": "08a7fa6dd8418ce6876bdd83fb3dd605950d56fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YTdmYTZkZDg0MThjZTY4NzZiZGQ4M2ZiM2RkNjA1OTUwZDU2ZmE=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-03-13T13:25:35Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-03-13T13:25:35Z"}, "message": "update stable-since version for const_int_conversion", "tree": {"sha": "82086586d4e891e95abd22f2f8e0863a3f59096a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82086586d4e891e95abd22f2f8e0863a3f59096a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08a7fa6dd8418ce6876bdd83fb3dd605950d56fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08a7fa6dd8418ce6876bdd83fb3dd605950d56fa", "html_url": "https://github.com/rust-lang/rust/commit/08a7fa6dd8418ce6876bdd83fb3dd605950d56fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08a7fa6dd8418ce6876bdd83fb3dd605950d56fa/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b7d21f59a363e53eb1c31d76b40af2ff99321c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b7d21f59a363e53eb1c31d76b40af2ff99321c", "html_url": "https://github.com/rust-lang/rust/commit/54b7d21f59a363e53eb1c31d76b40af2ff99321c"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "853092dd85ee94436fb3433c35ce4b4b181aa71b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/08a7fa6dd8418ce6876bdd83fb3dd605950d56fa/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08a7fa6dd8418ce6876bdd83fb3dd605950d56fa/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=08a7fa6dd8418ce6876bdd83fb3dd605950d56fa", "patch": "@@ -2154,7 +2154,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -2174,7 +2174,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -2209,7 +2209,7 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n             #[allow_internal_unstable(const_fn_union)]\n@@ -2251,7 +2251,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2284,7 +2284,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2327,7 +2327,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n             #[allow_internal_unstable(const_fn_union)]\n@@ -4115,7 +4115,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -4135,7 +4135,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -4170,7 +4170,7 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n             #[allow_internal_unstable(const_fn_union)]\n@@ -4212,7 +4212,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -4245,7 +4245,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -4288,7 +4288,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n             #[allow_internal_unstable(const_fn_union)]"}]}