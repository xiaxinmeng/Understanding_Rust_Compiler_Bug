{"sha": "eb49f7fd74b46f4646f0268c378b28a07433d4de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNDlmN2ZkNzRiNDZmNDY0NmYwMjY4YzM3OGIyOGEwNzQzM2Q0ZGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-13T18:23:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-13T18:23:32Z"}, "message": "Rollup merge of #71097 - pickfire:pattern-docs, r=Dylan-DPC\n\nPattern docs\n\nhttps://doc.rust-lang.org/std/str/pattern/trait.Pattern.html#implementors", "tree": {"sha": "de8e974183a871e29e55f9ef43b5083da980fcd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de8e974183a871e29e55f9ef43b5083da980fcd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb49f7fd74b46f4646f0268c378b28a07433d4de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelK4kCRBK7hj4Ov3rIwAAdHIIAIyiLndFNlohDMs/8aRlfPjM\nE1LEE8bMG+su+wiH+F8dO8yRPOZ5aZshWSOKPOxz/qtmfpOqYlF3IPaKmKcJ0rAA\nH4yo4UrdM0W/bWJ5k54lzlUTlgHHRqpgPRbgny9REbvfhWVb69MjK4UC3OIWHESS\nml5WCegj2WMVoGvLuvB+Ce6Hf+EH+Qi9HvYHr+TY+EVETWVAI02w2JBbf4GqUXMp\nTqByC0H90Px1V7ZraC8rNr3FeRP3O9vTbJXBY9+MF5QaoYBWkjN8+Uh3d2atDLBA\nN9MvMr8lEFcUOMtK+1FNVFXygxokkfAxNzuVXAEnwGc5eISYGzCixQdR3MjuNlY=\n=KWPx\n-----END PGP SIGNATURE-----\n", "payload": "tree de8e974183a871e29e55f9ef43b5083da980fcd5\nparent fd1b057004301be32a915ac8d924f7eb59ed1a9c\nparent 7a22cf6415b75388448156708c07dd6cf5eb116a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586802212 +0200\ncommitter GitHub <noreply@github.com> 1586802212 +0200\n\nRollup merge of #71097 - pickfire:pattern-docs, r=Dylan-DPC\n\nPattern docs\n\nhttps://doc.rust-lang.org/std/str/pattern/trait.Pattern.html#implementors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb49f7fd74b46f4646f0268c378b28a07433d4de", "html_url": "https://github.com/rust-lang/rust/commit/eb49f7fd74b46f4646f0268c378b28a07433d4de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb49f7fd74b46f4646f0268c378b28a07433d4de/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd1b057004301be32a915ac8d924f7eb59ed1a9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1b057004301be32a915ac8d924f7eb59ed1a9c", "html_url": "https://github.com/rust-lang/rust/commit/fd1b057004301be32a915ac8d924f7eb59ed1a9c"}, {"sha": "7a22cf6415b75388448156708c07dd6cf5eb116a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a22cf6415b75388448156708c07dd6cf5eb116a", "html_url": "https://github.com/rust-lang/rust/commit/7a22cf6415b75388448156708c07dd6cf5eb116a"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "86e09b7be2d2d6233ddee6ee2efe759b08cae1b4", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb49f7fd74b46f4646f0268c378b28a07433d4de/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb49f7fd74b46f4646f0268c378b28a07433d4de/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=eb49f7fd74b46f4646f0268c378b28a07433d4de", "patch": "@@ -1827,7 +1827,13 @@ impl<'a> Extend<Cow<'a, str>> for String {\n     }\n }\n \n-/// A convenience impl that delegates to the impl for `&str`\n+/// A convenience impl that delegates to the impl for `&str`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(String::from(\"Hello world\").find(\"world\"), Some(6));\n+/// ```\n #[unstable(\n     feature = \"pattern\",\n     reason = \"API not fully fleshed out and ready to be stabilized\","}, {"sha": "708e4e5560ecd34106736aec2d166bb3fdd57b7b", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eb49f7fd74b46f4646f0268c378b28a07433d4de/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb49f7fd74b46f4646f0268c378b28a07433d4de/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=eb49f7fd74b46f4646f0268c378b28a07433d4de", "patch": "@@ -451,7 +451,13 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n \n impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n-/// Searches for chars that are equal to a given char\n+/// Searches for chars that are equal to a given `char`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find('o'), Some(4));\n+/// ```\n impl<'a> Pattern<'a> for char {\n     type Searcher = CharSearcher<'a>;\n \n@@ -696,7 +702,14 @@ unsafe impl<'a, 'b> ReverseSearcher<'a> for CharSliceSearcher<'a, 'b> {\n \n impl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b> {}\n \n-/// Searches for chars that are equal to any of the chars in the array\n+/// Searches for chars that are equal to any of the chars in the array.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(&['l', 'l'] as &[_]), Some(2));\n+/// assert_eq!(\"Hello world\".find(&['l', 'l'][..]), Some(2));\n+/// ```\n impl<'a, 'b> Pattern<'a> for &'b [char] {\n     pattern_methods!(CharSliceSearcher<'a, 'b>, MultiCharEqPattern, CharSliceSearcher);\n }\n@@ -738,7 +751,14 @@ where\n \n impl<'a, F> DoubleEndedSearcher<'a> for CharPredicateSearcher<'a, F> where F: FnMut(char) -> bool {}\n \n-/// Searches for chars that match the given predicate\n+/// Searches for chars that match the given predicate.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(char::is_uppercase), Some(0));\n+/// assert_eq!(\"Hello world\".find(|c| \"aeiou\".contains(c)), Some(1));\n+/// ```\n impl<'a, F> Pattern<'a> for F\n where\n     F: FnMut(char) -> bool,\n@@ -763,6 +783,12 @@ impl<'a, 'b, 'c> Pattern<'a> for &'c &'b str {\n ///\n /// Will handle the pattern `\"\"` as returning empty matches at each character\n /// boundary.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(\"world\"), Some(6));\n+/// ```\n impl<'a, 'b> Pattern<'a> for &'b str {\n     type Searcher = StrSearcher<'a, 'b>;\n \n@@ -771,7 +797,7 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n         StrSearcher::new(haystack, self)\n     }\n \n-    /// Checks whether the pattern matches at the front of the haystack\n+    /// Checks whether the pattern matches at the front of the haystack.\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n         haystack.as_bytes().starts_with(self.as_bytes())\n@@ -788,7 +814,7 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n         }\n     }\n \n-    /// Checks whether the pattern matches at the back of the haystack\n+    /// Checks whether the pattern matches at the back of the haystack.\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool {\n         haystack.as_bytes().ends_with(self.as_bytes())"}]}