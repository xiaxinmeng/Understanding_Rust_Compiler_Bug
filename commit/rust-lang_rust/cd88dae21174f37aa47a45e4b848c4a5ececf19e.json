{"sha": "cd88dae21174f37aa47a45e4b848c4a5ececf19e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkODhkYWUyMTE3NGYzN2FhNDdhNDVlNGI4NDhjNGE1ZWNlY2YxOWU=", "commit": {"author": {"name": "n-salim", "email": "53019816+n-salim@users.noreply.github.com", "date": "2019-09-23T21:12:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-23T21:12:26Z"}, "message": "Merge pull request #26 from rust-lang/master\n\nSync to rust-lang/rust master", "tree": {"sha": "196ef2334e2f7787737af02f2e78ed53c10fb5a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/196ef2334e2f7787737af02f2e78ed53c10fb5a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd88dae21174f37aa47a45e4b848c4a5ececf19e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdiTU6CRBK7hj4Ov3rIwAAdHIIAEqD5T1hhF1PXhXMmyA7k/Xs\nSlmeWv4QWsBqSFKcE67GiwEr1u+P9+sEfnrEV0ZAVl6vWnKskX+98eKdvEu/Yd94\nBv1QPik8nC/tW09QluHjTkgp3NZObFLRub3xmBOfzdB7ZFCZUE6PdsMC/SLUfs87\nrizOwSq68jsD+zkmn8ePUWYVSe1bUWaiVkjZQ3H4MXFVMAO3rGTel//4I23u8WJ3\n/Q+tx0pp4KZXr05S5qhVpXaxikcoMOK8ErMxurC26pEQBkTccctaBgOrcw6hWWjj\ndQXg8gXNP76c4EahRmfr+ti0vBhlrHr26VVgo7dqVIw+2Sm8TXbDOc/OM03CcYM=\n=0G+A\n-----END PGP SIGNATURE-----\n", "payload": "tree 196ef2334e2f7787737af02f2e78ed53c10fb5a8\nparent 494d83c89279a955dfb559ded5d5ac2ac06fc255\nparent 66bf391c3aabfc77f5f7139fc9e6944f995d574e\nauthor n-salim <53019816+n-salim@users.noreply.github.com> 1569273146 -0700\ncommitter GitHub <noreply@github.com> 1569273146 -0700\n\nMerge pull request #26 from rust-lang/master\n\nSync to rust-lang/rust master"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd88dae21174f37aa47a45e4b848c4a5ececf19e", "html_url": "https://github.com/rust-lang/rust/commit/cd88dae21174f37aa47a45e4b848c4a5ececf19e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd88dae21174f37aa47a45e4b848c4a5ececf19e/comments", "author": {"login": "n-salim", "id": 53019816, "node_id": "MDQ6VXNlcjUzMDE5ODE2", "avatar_url": "https://avatars.githubusercontent.com/u/53019816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n-salim", "html_url": "https://github.com/n-salim", "followers_url": "https://api.github.com/users/n-salim/followers", "following_url": "https://api.github.com/users/n-salim/following{/other_user}", "gists_url": "https://api.github.com/users/n-salim/gists{/gist_id}", "starred_url": "https://api.github.com/users/n-salim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n-salim/subscriptions", "organizations_url": "https://api.github.com/users/n-salim/orgs", "repos_url": "https://api.github.com/users/n-salim/repos", "events_url": "https://api.github.com/users/n-salim/events{/privacy}", "received_events_url": "https://api.github.com/users/n-salim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "494d83c89279a955dfb559ded5d5ac2ac06fc255", "url": "https://api.github.com/repos/rust-lang/rust/commits/494d83c89279a955dfb559ded5d5ac2ac06fc255", "html_url": "https://github.com/rust-lang/rust/commit/494d83c89279a955dfb559ded5d5ac2ac06fc255"}, {"sha": "66bf391c3aabfc77f5f7139fc9e6944f995d574e", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bf391c3aabfc77f5f7139fc9e6944f995d574e", "html_url": "https://github.com/rust-lang/rust/commit/66bf391c3aabfc77f5f7139fc9e6944f995d574e"}], "stats": {"total": 5137, "additions": 2912, "deletions": 2225}, "files": [{"sha": "3ff5af78097fabfe271d45b0924177dcecdacd12", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -43,7 +43,7 @@\n [submodule \"src/llvm-project\"]\n \tpath = src/llvm-project\n \turl = https://github.com/rust-lang/llvm-project.git\n-\tbranch = rustc/9.0-2019-07-12\n+\tbranch = rustc/9.0-2019-09-19\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git"}, {"sha": "fa749e5e3aebe059c9b8aaa6cb4bde6df2ca0430", "filename": "Cargo.lock", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -455,7 +455,7 @@ dependencies = [\n  \"itertools 0.8.0\",\n  \"lazy_static 1.3.0\",\n  \"matches\",\n- \"pulldown-cmark\",\n+ \"pulldown-cmark 0.6.0\",\n  \"quine-mc_cluskey\",\n  \"regex-syntax\",\n  \"semver\",\n@@ -1637,7 +1637,7 @@ dependencies = [\n  \"num_cpus\",\n  \"tokio\",\n  \"tokio-codec\",\n- \"unicase 2.4.0\",\n+ \"unicase 2.5.1\",\n ]\n \n [[package]]\n@@ -1875,7 +1875,7 @@ dependencies = [\n  \"log\",\n  \"memchr\",\n  \"open\",\n- \"pulldown-cmark\",\n+ \"pulldown-cmark 0.5.3\",\n  \"regex\",\n  \"serde\",\n  \"serde_derive\",\n@@ -1897,7 +1897,7 @@ dependencies = [\n  \"log\",\n  \"mdbook\",\n  \"memchr\",\n- \"pulldown-cmark\",\n+ \"pulldown-cmark 0.5.3\",\n  \"rayon\",\n  \"regex\",\n  \"reqwest\",\n@@ -1957,7 +1957,7 @@ version = \"0.3.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3e27ca21f40a310bd06d9031785f4801710d566c184a6e15bad4f1d9b65f9425\"\n dependencies = [\n- \"unicase 2.4.0\",\n+ \"unicase 2.5.1\",\n ]\n \n [[package]]\n@@ -2561,7 +2561,19 @@ dependencies = [\n  \"bitflags\",\n  \"getopts\",\n  \"memchr\",\n- \"unicase 2.4.0\",\n+ \"unicase 2.5.1\",\n+]\n+\n+[[package]]\n+name = \"pulldown-cmark\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"85b0ad0d4c1702965ee6bb5b4ff5e71f83850b497d497e9444302987bf9e26a4\"\n+dependencies = [\n+ \"bitflags\",\n+ \"getopts\",\n+ \"memchr\",\n+ \"unicase 2.5.1\",\n ]\n \n [[package]]\n@@ -3732,7 +3744,7 @@ name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n  \"minifier\",\n- \"pulldown-cmark\",\n+ \"pulldown-cmark 0.5.3\",\n  \"rustc-rayon\",\n  \"tempfile\",\n ]\n@@ -4739,9 +4751,9 @@ dependencies = [\n \n [[package]]\n name = \"unicase\"\n-version = \"2.4.0\"\n+version = \"2.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a84e5511b2a947f3ae965dcb29b13b7b1691b6e7332cf5dbc1744138d5acb7f6\"\n+checksum = \"2e2e6bd1e59e56598518beb94fd6db628ded570326f0a98c679a304bd9f00150\"\n dependencies = [\n  \"version_check\",\n ]"}, {"sha": "ecf49278f4b521d9779ffd4e5a7b3242457f6a31", "filename": "RELEASES.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -68,6 +68,13 @@ Misc\n - [`rustc` will now warn about some incorrect uses of\n   `mem::{uninitialized, zeroed}` that are known to cause undefined behaviour.][63346]\n \n+Compatibility Notes\n+-------------------\n+- Unfortunately the [`x86_64-unknown-uefi` platform can not be built][62785]\n+  with rustc 1.39.0.\n+- The [`armv7-unknown-linux-gnueabihf` platform is also known to have\n+  issues][62896] for certain crates such as libc.\n+\n [60260]: https://github.com/rust-lang/rust/pull/60260/\n [61457]: https://github.com/rust-lang/rust/pull/61457/\n [61491]: https://github.com/rust-lang/rust/pull/61491/\n@@ -79,7 +86,9 @@ Misc\n [62735]: https://github.com/rust-lang/rust/pull/62735/\n [62766]: https://github.com/rust-lang/rust/pull/62766/\n [62784]: https://github.com/rust-lang/rust/pull/62784/\n+[62785]: https://github.com/rust-lang/rust/issues/62785/\n [62814]: https://github.com/rust-lang/rust/pull/62814/\n+[62896]: https://github.com/rust-lang/rust/issues/62896/\n [63000]: https://github.com/rust-lang/rust/pull/63000/\n [63056]: https://github.com/rust-lang/rust/pull/63056/\n [63107]: https://github.com/rust-lang/rust/pull/63107/"}, {"sha": "d9dff77a30e6bd0fdd9c5951ffab3e5ca1bb43ac", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -18,7 +18,7 @@ use build_helper::{output, t};\n \n use crate::{Compiler, Mode, LLVM_TOOLS};\n use crate::channel;\n-use crate::util::{is_dylib, exe};\n+use crate::util::{is_dylib, exe, timeit};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::compile;\n use crate::tool::{self, Tool};\n@@ -91,14 +91,15 @@ impl Step for Docs {\n \n         let name = pkgname(builder, \"rust-docs\");\n \n-        builder.info(&format!(\"Dist docs ({})\", host));\n         if !builder.config.docs {\n-            builder.info(\"\\tskipping - docs disabled\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n         builder.default_doc(None);\n \n+        builder.info(&format!(\"Dist docs ({})\", host));\n+        let _time = timeit(builder);\n+\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n \n@@ -151,9 +152,7 @@ impl Step for RustcDocs {\n \n         let name = pkgname(builder, \"rustc-docs\");\n \n-        builder.info(&format!(\"Dist compiler docs ({})\", host));\n         if !builder.config.compiler_docs {\n-            builder.info(\"\\tskipping - compiler docs disabled\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host));\n         }\n \n@@ -179,6 +178,9 @@ impl Step for RustcDocs {\n            .arg(\"--component-name=rustc-docs\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--bulk-dirs=share/doc/rust/html\");\n+\n+        builder.info(&format!(\"Dist compiler docs ({})\", host));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n \n@@ -350,6 +352,7 @@ impl Step for Mingw {\n         }\n \n         builder.info(&format!(\"Dist mingw ({})\", host));\n+        let _time = timeit(builder);\n         let name = pkgname(builder, \"rust-mingw\");\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n@@ -403,7 +406,6 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let host = self.compiler.host;\n \n-        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host));\n         let name = pkgname(builder, \"rustc\");\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n@@ -460,6 +462,9 @@ impl Step for Rustc {\n            .arg(format!(\"--package-name={}-{}\", name, host))\n            .arg(\"--component-name=rustc\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n         builder.remove_dir(&overlay);\n@@ -662,8 +667,6 @@ impl Step for Std {\n         let target = self.target;\n \n         let name = pkgname(builder, \"rust-std\");\n-        builder.info(&format!(\"Dist std stage{} ({} -> {})\",\n-            compiler.stage, &compiler.host, target));\n \n         // The only true set of target libraries came from the build triple, so\n         // let's reduce redundant work by only producing archives from that host.\n@@ -714,6 +717,10 @@ impl Step for Std {\n            .arg(format!(\"--package-name={}-{}\", name, target))\n            .arg(format!(\"--component-name=rust-std-{}\", target))\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist std stage{} ({} -> {})\",\n+            compiler.stage, &compiler.host, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n         distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n@@ -754,11 +761,9 @@ impl Step for Analysis {\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n-        builder.info(\"Dist analysis\");\n         let name = pkgname(builder, \"rust-analysis\");\n \n         if &compiler.host != builder.config.build {\n-            builder.info(\"\\tskipping, not a build host\");\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n@@ -786,6 +791,9 @@ impl Step for Analysis {\n            .arg(format!(\"--package-name={}-{}\", name, target))\n            .arg(format!(\"--component-name=rust-analysis-{}\", target))\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(\"Dist analysis\");\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         builder.remove_dir(&image);\n         distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n@@ -874,8 +882,6 @@ impl Step for Src {\n \n     /// Creates the `rust-src` installer component\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        builder.info(\"Dist src\");\n-\n         let name = pkgname(builder, \"rust-src\");\n         let image = tmpdir(builder).join(format!(\"{}-image\", name));\n         let _ = fs::remove_dir_all(&image);\n@@ -930,6 +936,9 @@ impl Step for Src {\n            .arg(format!(\"--package-name={}\", name))\n            .arg(\"--component-name=rust-src\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(\"Dist src\");\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n \n         builder.remove_dir(&image);\n@@ -957,8 +966,6 @@ impl Step for PlainSourceTarball {\n \n     /// Creates the plain source tarball\n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        builder.info(\"Create plain source tarball\");\n-\n         // Make sure that the root folder of tarball has the correct name\n         let plain_name = format!(\"{}-src\", pkgname(builder, \"rustc\"));\n         let plain_dst_src = tmpdir(builder).join(&plain_name);\n@@ -1020,6 +1027,9 @@ impl Step for PlainSourceTarball {\n            .arg(\"--output\").arg(&tarball)\n            .arg(\"--work-dir=.\")\n            .current_dir(tmpdir(builder));\n+\n+        builder.info(\"Create plain source tarball\");\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         distdir(builder).join(&format!(\"{}.tar.gz\", plain_name))\n     }\n@@ -1073,7 +1083,6 @@ impl Step for Cargo {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        builder.info(&format!(\"Dist cargo stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/cargo\");\n         let etc = src.join(\"src/etc\");\n         let release_num = builder.release_num(\"cargo\");\n@@ -1126,6 +1135,9 @@ impl Step for Cargo {\n            .arg(format!(\"--package-name={}-{}\", name, target))\n            .arg(\"--component-name=cargo\")\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist cargo stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n     }\n@@ -1161,7 +1173,6 @@ impl Step for Rls {\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist RLS stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/rls\");\n         let release_num = builder.release_num(\"rls\");\n         let name = pkgname(builder, \"rls\");\n@@ -1210,6 +1221,8 @@ impl Step for Rls {\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--component-name=rls-preview\");\n \n+        builder.info(&format!(\"Dist RLS stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n@@ -1245,7 +1258,6 @@ impl Step for Clippy {\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist clippy stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/clippy\");\n         let release_num = builder.release_num(\"clippy\");\n         let name = pkgname(builder, \"clippy\");\n@@ -1299,6 +1311,8 @@ impl Step for Clippy {\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--component-name=clippy-preview\");\n \n+        builder.info(&format!(\"Dist clippy stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n@@ -1334,7 +1348,6 @@ impl Step for Miri {\n         let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist miri stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/miri\");\n         let release_num = builder.release_num(\"miri\");\n         let name = pkgname(builder, \"miri\");\n@@ -1389,6 +1402,8 @@ impl Step for Miri {\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--component-name=miri-preview\");\n \n+        builder.info(&format!(\"Dist miri stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n@@ -1423,7 +1438,6 @@ impl Step for Rustfmt {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        builder.info(&format!(\"Dist Rustfmt stage{} ({})\", compiler.stage, target));\n         let src = builder.src.join(\"src/tools/rustfmt\");\n         let release_num = builder.release_num(\"rustfmt\");\n         let name = pkgname(builder, \"rustfmt\");\n@@ -1476,6 +1490,8 @@ impl Step for Rustfmt {\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n            .arg(\"--component-name=rustfmt-preview\");\n \n+        builder.info(&format!(\"Dist Rustfmt stage{} ({})\", compiler.stage, target));\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n         Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n@@ -1576,6 +1592,7 @@ impl Step for Extended {\n             input_tarballs.push(tarball);\n         }\n \n+        builder.info(\"building combined installer\");\n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"combine\")\n             .arg(\"--product-name=Rust\")\n@@ -1587,7 +1604,9 @@ impl Step for Extended {\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--input-tarballs\").arg(input_tarballs)\n             .arg(\"--non-installed-overlay\").arg(&overlay);\n+        let time = timeit(&builder);\n         builder.run(&mut cmd);\n+        drop(time);\n \n         let mut license = String::new();\n         license += &builder.read(&builder.src.join(\"COPYRIGHT\"));\n@@ -1643,6 +1662,7 @@ impl Step for Extended {\n         };\n \n         if target.contains(\"apple-darwin\") {\n+            builder.info(\"building pkg installer\");\n             let pkg = tmp.join(\"pkg\");\n             let _ = fs::remove_dir_all(&pkg);\n \n@@ -1692,6 +1712,7 @@ impl Step for Extended {\n                                                     pkgname(builder, \"rust\"),\n                                                     target)))\n                 .arg(\"--package-path\").arg(&pkg);\n+            let _time = timeit(builder);\n             builder.run(&mut cmd);\n         }\n \n@@ -1742,14 +1763,18 @@ impl Step for Extended {\n             builder.create(&exe.join(\"LICENSE.txt\"), &license);\n \n             // Generate exe installer\n+            builder.info(\"building `exe` installer with `iscc`\");\n             let mut cmd = Command::new(\"iscc\");\n             cmd.arg(\"rust.iss\")\n+                .arg(\"/Q\")\n                 .current_dir(&exe);\n             if target.contains(\"windows-gnu\") {\n                 cmd.arg(\"/dMINGW\");\n             }\n             add_env(builder, &mut cmd, target);\n+            let time = timeit(builder);\n             builder.run(&mut cmd);\n+            drop(time);\n             builder.install(&exe.join(format!(\"{}-{}.exe\", pkgname(builder, \"rust\"), target)),\n                     &distdir(builder),\n                     0o755);\n@@ -1914,6 +1939,7 @@ impl Step for Extended {\n             builder.install(&etc.join(\"gfx/banner.bmp\"), &exe, 0o644);\n             builder.install(&etc.join(\"gfx/dialogbg.bmp\"), &exe, 0o644);\n \n+            builder.info(&format!(\"building `msi` installer with {:?}\", light));\n             let filename = format!(\"{}-{}.msi\", pkgname(builder, \"rust\"), target);\n             let mut cmd = Command::new(&light);\n             cmd.arg(\"-nologo\")\n@@ -1946,6 +1972,7 @@ impl Step for Extended {\n             // ICE57 wrongly complains about the shortcuts\n             cmd.arg(\"-sice:ICE57\");\n \n+            let _time = timeit(builder);\n             builder.run(&mut cmd);\n \n             if !builder.config.dry_run {\n@@ -2114,6 +2141,7 @@ impl Step for LlvmTools {\n         }\n \n         builder.info(&format!(\"Dist LlvmTools ({})\", target));\n+        let _time = timeit(builder);\n         let src = builder.src.join(\"src/llvm-project/llvm\");\n         let name = pkgname(builder, \"llvm-tools\");\n "}, {"sha": "4b83c204ba10579d2152672578834232bd4d1984", "filename": "src/doc/unstable-book/src/language-features/param-attrs.md", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/494d83c89279a955dfb559ded5d5ac2ac06fc255/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/494d83c89279a955dfb559ded5d5ac2ac06fc255/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md?ref=494d83c89279a955dfb559ded5d5ac2ac06fc255", "patch": "@@ -1,27 +0,0 @@\n-# `param_attrs`\n-\n-The tracking issue for this feature is: [#60406]\n-\n-[#60406]: https://github.com/rust-lang/rust/issues/60406\n-\n-Allow attributes in formal function parameter position so external tools and compiler internals can\n-take advantage of the additional information that the parameters provide.\n-\n-Enables finer conditional compilation with `#[cfg(..)]` and linting control of variables. Moreover,\n-opens the path to richer DSLs created by users.\n-\n-------------------------\n-\n-Example:\n-\n-```rust\n-#![feature(param_attrs)]\n-\n-fn len(\n-  #[cfg(windows)] slice: &[u16],\n-  #[cfg(not(windows))] slice: &[u8],\n-) -> usize\n-{\n-  slice.len()\n-}\n-```"}, {"sha": "66a3c8e555405966fae917a6ccfe9f7aa1a6fdf1", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -14,6 +14,8 @@\n     os.path.join(os.path.dirname(__file__), '../test/ui/derives/'))\n \n TEMPLATE = \"\"\"\\\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n {error_deriving}"}, {"sha": "70648beac38b03565f77547f23542998dcce10b0", "filename": "src/etc/installer/exe/rust.iss", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fetc%2Finstaller%2Fexe%2Frust.iss", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fetc%2Finstaller%2Fexe%2Frust.iss", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fexe%2Frust.iss?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -25,9 +25,9 @@ SourceDir=.\\\n OutputBaseFilename={#CFG_PACKAGE_NAME}-{#CFG_BUILD}\n DefaultDirName={sd}\\Rust\n \n-Compression=lzma2/ultra\n-InternalCompressLevel=ultra\n-SolidCompression=true\n+Compression=lzma2/normal\n+InternalCompressLevel=normal\n+SolidCompression=no\n \n ChangesEnvironment=true\n ChangesAssociations=no"}, {"sha": "a2e378f7b1db4e1017b23e5e8aed68d99a7f9695", "filename": "src/etc/installer/msi/rust.wxs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstaller%2Fmsi%2Frust.wxs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -152,7 +152,7 @@\n         </Upgrade>\n \n         <!-- Specifies a single cab file to be embedded in the installer's .msi. -->\n-        <MediaTemplate EmbedCab=\"yes\" CompressionLevel=\"high\" />\n+        <MediaTemplate EmbedCab=\"yes\" CompressionLevel=\"mszip\" />\n \n         <!-- Send a WM_SETTINGCHANGE message to tell processes like explorer to update their\n              environments so any new command prompts get the updated %PATH% -->"}, {"sha": "a39fcd5ad4c580fef0c96d466dc3d9c05728249d", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -240,7 +240,7 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[rustc_allocator_nounwind]\n pub fn handle_alloc_error(layout: Layout) -> ! {\n-    #[allow(improper_ctypes)]\n+    #[cfg_attr(bootstrap, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"oom\"]\n         fn oom_impl(layout: Layout) -> !;"}, {"sha": "4e2b1627e15ef17d9d24161dfcf8b5cc121392af", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 88, "deletions": 2, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -570,7 +570,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     #[inline]\n     fn max(self, other: Self) -> Self\n     where Self: Sized {\n-        if other >= self { other } else { self }\n+        max_by(self, other, Ord::cmp)\n     }\n \n     /// Compares and returns the minimum of two values.\n@@ -587,7 +587,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     #[inline]\n     fn min(self, other: Self) -> Self\n     where Self: Sized {\n-        if self <= other { self } else { other }\n+        min_by(self, other, Ord::cmp)\n     }\n \n     /// Restrict a value to a certain interval.\n@@ -898,6 +898,49 @@ pub fn min<T: Ord>(v1: T, v2: T) -> T {\n     v1.min(v2)\n }\n \n+/// Returns the minimum of two values with respect to the specified comparison function.\n+///\n+/// Returns the first argument if the comparison determines them to be equal.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cmp_min_max_by)]\n+///\n+/// use std::cmp;\n+///\n+/// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);\n+/// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n+pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n+    match compare(&v1, &v2) {\n+        Ordering::Less | Ordering::Equal => v1,\n+        Ordering::Greater => v2,\n+    }\n+}\n+\n+/// Returns the element that gives the minimum value from the specified function.\n+///\n+/// Returns the first argument if the comparison determines them to be equal.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cmp_min_max_by)]\n+///\n+/// use std::cmp;\n+///\n+/// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);\n+/// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n+pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n+    min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n+}\n+\n /// Compares and returns the maximum of two values.\n ///\n /// Returns the second argument if the comparison determines them to be equal.\n@@ -918,6 +961,49 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n     v1.max(v2)\n }\n \n+/// Returns the maximum of two values with respect to the specified comparison function.\n+///\n+/// Returns the second argument if the comparison determines them to be equal.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cmp_min_max_by)]\n+///\n+/// use std::cmp;\n+///\n+/// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n+/// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n+pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n+    match compare(&v1, &v2) {\n+        Ordering::Less | Ordering::Equal => v2,\n+        Ordering::Greater => v1,\n+    }\n+}\n+\n+/// Returns the element that gives the maximum value from the specified function.\n+///\n+/// Returns the second argument if the comparison determines them to be equal.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(cmp_min_max_by)]\n+///\n+/// use std::cmp;\n+///\n+/// assert_eq!(cmp::max_by_key(-2, 1, |x: &i32| x.abs()), -2);\n+/// assert_eq!(cmp::max_by_key(-2, 2, |x: &i32| x.abs()), 2);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n+pub fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n+    max_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n+}\n+\n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n     use crate::cmp::Ordering::{self, Less, Greater, Equal};"}, {"sha": "da49223dfb28510cf950f644540b0ecc56625322", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,4 +1,4 @@\n-use crate::cmp::Ordering;\n+use crate::cmp::{self, Ordering};\n use crate::ops::{Add, Try};\n \n use super::super::LoopState;\n@@ -2223,13 +2223,12 @@ pub trait Iterator {\n             move |x| (f(&x), x)\n         }\n \n-        // switch to y even if it is only equal, to preserve stability.\n         #[inline]\n-        fn select<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> bool {\n-            x_p <= y_p\n+        fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {\n+            x_p.cmp(y_p)\n         }\n \n-        let (_, x) = select_fold1(self.map(key(f)), select)?;\n+        let (_, x) = self.map(key(f)).max_by(compare)?;\n         Some(x)\n     }\n \n@@ -2252,13 +2251,12 @@ pub trait Iterator {\n     fn max_by<F>(self, compare: F) -> Option<Self::Item>\n         where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n     {\n-        // switch to y even if it is only equal, to preserve stability.\n         #[inline]\n-        fn select<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(&T, &T) -> bool {\n-            move |x, y| compare(x, y) != Ordering::Greater\n+        fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {\n+            move |x, y| cmp::max_by(x, y, &mut compare)\n         }\n \n-        select_fold1(self, select(compare))\n+        fold1(self, fold(compare))\n     }\n \n     /// Returns the element that gives the minimum value from the\n@@ -2285,13 +2283,12 @@ pub trait Iterator {\n             move |x| (f(&x), x)\n         }\n \n-        // only switch to y if it is strictly smaller, to preserve stability.\n         #[inline]\n-        fn select<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> bool {\n-            x_p > y_p\n+        fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {\n+            x_p.cmp(y_p)\n         }\n \n-        let (_, x) = select_fold1(self.map(key(f)), select)?;\n+        let (_, x) = self.map(key(f)).min_by(compare)?;\n         Some(x)\n     }\n \n@@ -2314,13 +2311,12 @@ pub trait Iterator {\n     fn min_by<F>(self, compare: F) -> Option<Self::Item>\n         where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n     {\n-        // only switch to y if it is strictly smaller, to preserve stability.\n         #[inline]\n-        fn select<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(&T, &T) -> bool {\n-            move |x, y| compare(x, y) == Ordering::Greater\n+        fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {\n+            move |x, y| cmp::min_by(x, y, &mut compare)\n         }\n \n-        select_fold1(self, select(compare))\n+        fold1(self, fold(compare))\n     }\n \n \n@@ -2958,28 +2954,18 @@ pub trait Iterator {\n     }\n }\n \n-/// Select an element from an iterator based on the given \"comparison\"\n-/// function.\n-///\n-/// This is an idiosyncratic helper to try to factor out the\n-/// commonalities of {max,min}{,_by}. In particular, this avoids\n-/// having to implement optimizations several times.\n+/// Fold an iterator without having to provide an initial value.\n #[inline]\n-fn select_fold1<I, F>(mut it: I, f: F) -> Option<I::Item>\n+fn fold1<I, F>(mut it: I, f: F) -> Option<I::Item>\n     where\n         I: Iterator,\n-        F: FnMut(&I::Item, &I::Item) -> bool,\n+        F: FnMut(I::Item, I::Item) -> I::Item,\n {\n-    #[inline]\n-    fn select<T>(mut f: impl FnMut(&T, &T) -> bool) -> impl FnMut(T, T) -> T {\n-        move |sel, x| if f(&sel, &x) { x } else { sel }\n-    }\n-\n     // start with the first element as our selection. This avoids\n     // having to use `Option`s inside the loop, translating to a\n     // sizeable performance gain (6x in one case).\n     let first = it.next()?;\n-    Some(it.fold(first, select(f)))\n+    Some(it.fold(first, f))\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3d2bc24bf24a5dc35e54f9e58ec1eae895e415f7", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -71,7 +71,7 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u3\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n-    #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n+    #[cfg_attr(boostrap_stdarch_ignore_this, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;"}, {"sha": "5e6778e222a291a3f17843aaede8c12e23902fa6", "filename": "src/libcore/tests/cmp.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcmp.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,4 +1,4 @@\n-use core::cmp::Ordering::{Less, Greater, Equal};\n+use core::cmp::{self, Ordering::*};\n \n #[test]\n fn test_int_totalord() {\n@@ -28,6 +28,28 @@ fn test_ord_max_min() {\n     assert_eq!(1.min(1), 1);\n }\n \n+#[test]\n+fn test_ord_min_max_by() {\n+    let f = |x: &i32, y: &i32| x.abs().cmp(&y.abs());\n+    assert_eq!(cmp::min_by(1, -1, f), 1);\n+    assert_eq!(cmp::min_by(1, -2, f), 1);\n+    assert_eq!(cmp::min_by(2, -1, f), -1);\n+    assert_eq!(cmp::max_by(1, -1, f), -1);\n+    assert_eq!(cmp::max_by(1, -2, f), -2);\n+    assert_eq!(cmp::max_by(2, -1, f), 2);\n+}\n+\n+#[test]\n+fn test_ord_min_max_by_key() {\n+    let f = |x: &i32| x.abs();\n+    assert_eq!(cmp::min_by_key(1, -1, f), 1);\n+    assert_eq!(cmp::min_by_key(1, -2, f), 1);\n+    assert_eq!(cmp::min_by_key(2, -1, f), -1);\n+    assert_eq!(cmp::max_by_key(1, -1, f), -1);\n+    assert_eq!(cmp::max_by_key(1, -2, f), -2);\n+    assert_eq!(cmp::max_by_key(2, -1, f), 2);\n+}\n+\n #[test]\n fn test_ordering_reverse() {\n     assert_eq!(Less.reverse(), Greater);"}, {"sha": "35661356028cbf2b861c0cdeac28dd2253e5ffdd", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -34,6 +34,7 @@\n #![feature(iter_partition_in_place)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]\n+#![feature(cmp_min_max_by)]\n \n extern crate test;\n "}, {"sha": "e76a70350b33eb4b4c80c590e07a6d866f6dc202", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,4 +1,4 @@\n-use errors::{Diagnostic, DiagnosticBuilder};\n+use errors::Diagnostic;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -819,7 +819,7 @@ impl DepGraph {\n             let handle = tcx.sess.diagnostic();\n \n             for diagnostic in diagnostics {\n-                DiagnosticBuilder::new_diagnostic(handle, diagnostic).emit();\n+                handle.emit_diagnostic(&diagnostic);\n             }\n \n             // Mark the node as green now that diagnostics are emitted"}, {"sha": "f6564f1fcd4c19bff0b41716bbdf5204801e4ad7", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1347,6 +1347,39 @@ struct Foo<T: 'static> {\n ```\n \"##,\n \n+E0312: r##\"\n+Reference's lifetime of borrowed content doesn't match the expected lifetime.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0312\n+pub fn opt_str<'a>(maybestr: &'a Option<String>) -> &'static str {\n+    if maybestr.is_none() {\n+        \"(none)\"\n+    } else {\n+        let s: &'a str = maybestr.as_ref().unwrap();\n+        s  // Invalid lifetime!\n+    }\n+}\n+```\n+\n+To fix this error, either lessen the expected lifetime or find a way to not have\n+to use this reference outside of its current scope (by running the code directly\n+in the same block for example?):\n+\n+```\n+// In this case, we can fix the issue by switching from \"static\" lifetime to 'a\n+pub fn opt_str<'a>(maybestr: &'a Option<String>) -> &'a str {\n+    if maybestr.is_none() {\n+        \"(none)\"\n+    } else {\n+        let s: &'a str = maybestr.as_ref().unwrap();\n+        s  // Ok!\n+    }\n+}\n+```\n+\"##,\n+\n E0317: r##\"\n This error occurs when an `if` expression without an `else` block is used in a\n context where a type other than `()` is expected, for example a `let`\n@@ -2202,7 +2235,6 @@ static X: u32 = 42;\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n     E0311, // thing may not live long enough\n-    E0312, // lifetime of reference outlives lifetime of borrowed content\n     E0313, // lifetime of borrowed pointer outlives lifetime of captured\n            // variable\n     E0314, // closure outlives stack frame"}, {"sha": "f6b872623d78976722bc659dbd399de8bf63bcde", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1893,10 +1893,13 @@ impl<'a> LoweringContext<'a> {\n                         if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n                             // Do not suggest going from `Trait()` to `Trait<>`\n                             if data.inputs.len() > 0 {\n+                                let split = snippet.find('(').unwrap();\n+                                let trait_name = &snippet[0..split];\n+                                let args = &snippet[split + 1 .. snippet.len() - 1];\n                                 err.span_suggestion(\n                                     data.span,\n                                     \"use angle brackets instead\",\n-                                    format!(\"<{}>\", &snippet[1..snippet.len() - 1]),\n+                                    format!(\"{}<{}>\", trait_name, args),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }"}, {"sha": "92a8c008047333b2394b7b0c232032835669a93d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2750,3 +2750,15 @@ pub enum Node<'hir> {\n \n     Crate,\n }\n+\n+impl Node<'_> {\n+    pub fn ident(&self) -> Option<Ident> {\n+        match self {\n+            Node::TraitItem(TraitItem { ident, .. }) |\n+            Node::ImplItem(ImplItem { ident, .. }) |\n+            Node::ForeignItem(ForeignItem { ident, .. }) |\n+            Node::Item(Item { ident, .. }) => Some(*ident),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "966c5810171af34535fbe00e289ae9486bf45b05", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -30,6 +30,7 @@ use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n use super::unify_key::{ConstVarValue, ConstVariableValue};\n use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n+use super::unify_key::replace_if_possible;\n \n use crate::hir::def_id::DefId;\n use crate::mir::interpret::ConstValue;\n@@ -127,6 +128,12 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n     where\n         R: TypeRelation<'tcx>,\n     {\n+        debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n+        if a == b { return Ok(a); }\n+\n+        let a = replace_if_possible(self.const_unification_table.borrow_mut(), a);\n+        let b = replace_if_possible(self.const_unification_table.borrow_mut(), b);\n+\n         let a_is_expected = relation.a_is_expected();\n \n         match (a.val, b.val) {"}, {"sha": "6065387647fa758ae3a7f9b5c0e25245c0f29395", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,14 +1,12 @@\n-use super::combine::{CombineFields, RelationDir, const_unification_error};\n+use super::combine::{CombineFields, RelationDir};\n use super::Subtype;\n \n use crate::hir::def_id::DefId;\n \n-use crate::ty::{self, Ty, TyCtxt, InferConst};\n+use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::TyVar;\n use crate::ty::subst::SubstsRef;\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use crate::mir::interpret::ConstValue;\n-use crate::infer::unify_key::replace_if_possible;\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n pub struct Equate<'combine, 'infcx, 'tcx> {\n@@ -108,39 +106,7 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n-        if a == b { return Ok(a); }\n-\n-        let infcx = self.fields.infcx;\n-        let a = replace_if_possible(infcx.const_unification_table.borrow_mut(), a);\n-        let b = replace_if_possible(infcx.const_unification_table.borrow_mut(), b);\n-        let a_is_expected = self.a_is_expected();\n-\n-        match (a.val, b.val) {\n-            (ConstValue::Infer(InferConst::Var(a_vid)),\n-                ConstValue::Infer(InferConst::Var(b_vid))) => {\n-                infcx.const_unification_table\n-                    .borrow_mut()\n-                    .unify_var_var(a_vid, b_vid)\n-                    .map_err(|e| const_unification_error(a_is_expected, e))?;\n-                return Ok(a);\n-            }\n-\n-            (ConstValue::Infer(InferConst::Var(a_id)), _) => {\n-                self.fields.infcx.unify_const_variable(a_is_expected, a_id, b)?;\n-                return Ok(a);\n-            }\n-\n-            (_, ConstValue::Infer(InferConst::Var(b_id))) => {\n-                self.fields.infcx.unify_const_variable(!a_is_expected, b_id, a)?;\n-                return Ok(a);\n-            }\n-\n-            _ => {}\n-        }\n-\n-        self.fields.infcx.super_combine_consts(self, a, b)?;\n-        Ok(a)\n+        self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)"}, {"sha": "0b6740d7bbbc88ee3234d0e756c3b278f0f9a968", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1119,7 +1119,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     Some((expected, found)) => Some((expected, found)),\n                     None => {\n                         // Derived error. Cancel the emitter.\n-                        self.tcx.sess.diagnostic().cancel(diag);\n+                        diag.cancel();\n                         return;\n                     }\n                 };"}, {"sha": "37de54a7e8558c520983e904a636fb46e360cfee", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -66,11 +66,6 @@ impl TypeRelation<'tcx> for Glb<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n-        if a == b {\n-            return Ok(a);\n-        }\n-\n         self.fields.infcx.super_combine_consts(self, a, b)\n     }\n "}, {"sha": "a1a94865e74e3fd680b435839c4597a2473280ce", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -66,11 +66,6 @@ impl TypeRelation<'tcx> for Lub<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n-        if a == b {\n-            return Ok(a);\n-        }\n-\n         self.fields.infcx.super_combine_consts(self, a, b)\n     }\n "}, {"sha": "67c97ef5d8b295d68650eaf40c4440e7baf02ea6", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,13 +1,11 @@\n use super::SubregionOrigin;\n-use super::combine::{CombineFields, RelationDir, const_unification_error};\n+use super::combine::{CombineFields, RelationDir};\n \n use crate::traits::Obligation;\n-use crate::ty::{self, Ty, TyCtxt, InferConst};\n+use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::TyVar;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n-use crate::infer::unify_key::replace_if_possible;\n-use crate::mir::interpret::ConstValue;\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n@@ -142,41 +140,7 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n         a: &'tcx ty::Const<'tcx>,\n         b: &'tcx ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n-        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n-        if a == b { return Ok(a); }\n-\n-        let infcx = self.fields.infcx;\n-        let a = replace_if_possible(infcx.const_unification_table.borrow_mut(), a);\n-        let b = replace_if_possible(infcx.const_unification_table.borrow_mut(), b);\n-\n-        // Consts can only be equal or unequal to each other: there's no subtyping\n-        // relation, so we're just going to perform equating here instead.\n-        let a_is_expected = self.a_is_expected();\n-        match (a.val, b.val) {\n-            (ConstValue::Infer(InferConst::Var(a_vid)),\n-                ConstValue::Infer(InferConst::Var(b_vid))) => {\n-                infcx.const_unification_table\n-                    .borrow_mut()\n-                    .unify_var_var(a_vid, b_vid)\n-                    .map_err(|e| const_unification_error(a_is_expected, e))?;\n-                return Ok(a);\n-            }\n-\n-            (ConstValue::Infer(InferConst::Var(a_id)), _) => {\n-                self.fields.infcx.unify_const_variable(a_is_expected, a_id, b)?;\n-                return Ok(a);\n-            }\n-\n-            (_, ConstValue::Infer(InferConst::Var(b_id))) => {\n-                self.fields.infcx.unify_const_variable(!a_is_expected, b_id, a)?;\n-                return Ok(a);\n-            }\n-\n-            _ => {}\n-        }\n-\n-        self.fields.infcx.super_combine_consts(self, a, b)?;\n-        Ok(a)\n+        self.fields.infcx.super_combine_consts(self, a, b)\n     }\n \n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)"}, {"sha": "5906a6388a8bd5209ed84ebb67323ce065d37129", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -7,7 +7,7 @@\n use crate::lint::{LintPass, LateLintPass, LintArray};\n use crate::middle::stability;\n use crate::session::Session;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use syntax::ast;\n use syntax::source_map::Span;\n use syntax::symbol::Symbol;\n@@ -524,7 +524,7 @@ pub(crate) fn add_elided_lifetime_in_path_suggestion(\n     };\n     db.span_suggestion(\n         replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", if n >= 2 { \"s\" } else { \"\" }),\n+        &format!(\"indicate the anonymous lifetime{}\", pluralise!(n)),\n         suggestion,\n         Applicability::MachineApplicable\n     );"}, {"sha": "d833a34385b2d8400f0830c87d339250d915376d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -17,7 +17,7 @@ use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use crate::rustc::lint;\n use crate::session::Session;\n use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc_macros::HashStable;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -3047,7 +3047,7 @@ pub fn report_missing_lifetime_specifiers(\n         span,\n         E0106,\n         \"missing lifetime specifier{}\",\n-        if count > 1 { \"s\" } else { \"\" }\n+        pluralise!(count)\n     )\n }\n "}, {"sha": "92efcf44dea3636ce1fcad46d89d0f48322056fc", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1917,6 +1917,15 @@ impl<'tcx> Place<'tcx> {\n         }\n     }\n \n+    /// If this place represents a local variable like `_X` with no\n+    /// projections, return `Some(_X)`.\n+    pub fn as_local(&self) -> Option<Local> {\n+        match self {\n+            Place { projection: box [], base: PlaceBase::Local(l) } => Some(*l),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn as_ref(&self) -> PlaceRef<'_, 'tcx> {\n         PlaceRef {\n             base: &self.base,"}, {"sha": "5eda3df378126dd3215e6a51baedce568382c27c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1855,7 +1855,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n struct NullEmitter;\n \n impl errors::emitter::Emitter for NullEmitter {\n-    fn emit_diagnostic(&mut self, _: &errors::DiagnosticBuilder<'_>) {}\n+    fn emit_diagnostic(&mut self, _: &errors::Diagnostic) {}\n }\n \n // Converts strings provided as `--cfg [cfgspec]` into a `crate_cfg`."}, {"sha": "9eb68056bfd97f0c09afc8bf7f33df30ef9627ec", "filename": "src/librustc/session/config/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig%2Ftests.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -87,7 +87,7 @@ fn test_can_print_warnings() {\n         let registry = errors::registry::Registry::new(&[]);\n         let (sessopts, _) = build_session_options_and_crate_config(&matches);\n         let sess = build_session(sessopts, None, registry);\n-        assert!(!sess.diagnostic().flags.can_emit_warnings);\n+        assert!(!sess.diagnostic().can_emit_warnings());\n     });\n \n     syntax::with_default_globals(|| {\n@@ -97,15 +97,15 @@ fn test_can_print_warnings() {\n         let registry = errors::registry::Registry::new(&[]);\n         let (sessopts, _) = build_session_options_and_crate_config(&matches);\n         let sess = build_session(sessopts, None, registry);\n-        assert!(sess.diagnostic().flags.can_emit_warnings);\n+        assert!(sess.diagnostic().can_emit_warnings());\n     });\n \n     syntax::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n         let registry = errors::registry::Registry::new(&[]);\n         let (sessopts, _) = build_session_options_and_crate_config(&matches);\n         let sess = build_session(sessopts, None, registry);\n-        assert!(sess.diagnostic().flags.can_emit_warnings);\n+        assert!(sess.diagnostic().can_emit_warnings());\n     });\n }\n "}, {"sha": "a24fed8f21c5a1edcb2d25eb911d02f54be20ac2", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -365,12 +365,6 @@ impl Session {\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n-    pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.diagnostic().span_unimpl(sp, msg)\n-    }\n-    pub fn unimpl(&self, msg: &str) -> ! {\n-        self.diagnostic().unimpl(msg)\n-    }\n \n     pub fn buffer_lint<S: Into<MultiSpan>>(\n         &self,\n@@ -1040,6 +1034,7 @@ fn default_emitter(\n     source_map: &Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n+    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n     match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(kind), dst) => {\n             let (short, color_config) = kind.unzip();\n@@ -1048,6 +1043,7 @@ fn default_emitter(\n                 let emitter = AnnotateSnippetEmitterWriter::new(\n                     Some(source_map.clone()),\n                     short,\n+                    external_macro_backtrace,\n                 );\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n             } else {\n@@ -1058,6 +1054,7 @@ fn default_emitter(\n                         short,\n                         sopts.debugging_opts.teach,\n                         sopts.debugging_opts.terminal_width,\n+                        external_macro_backtrace,\n                     ),\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n@@ -1066,6 +1063,7 @@ fn default_emitter(\n                         false, // no teach messages when writing to a buffer\n                         false, // no colors when writing to a buffer\n                         None,  // no terminal width\n+                        external_macro_backtrace,\n                     ),\n                 };\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n@@ -1077,6 +1075,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n+                external_macro_backtrace,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n@@ -1086,6 +1085,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n+                external_macro_backtrace,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n     }\n@@ -1382,27 +1382,27 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false, None))\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false, None, false))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n-            Box::new(JsonEmitter::basic(pretty, json_rendered)),\n+            Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n-    handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n+    handler.struct_fatal(msg).emit();\n     errors::FatalError.raise();\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false, None))\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false, None, false))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n-            Box::new(JsonEmitter::basic(pretty, json_rendered)),\n+            Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n-    handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n+    handler.struct_warn(msg).emit();\n }\n \n pub type CompileResult = Result<(), ErrorReported>;"}, {"sha": "aff866fa76d5f4ccd275638fd2a3ea154814c136", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -33,17 +33,19 @@ use crate::ty::subst::Subst;\n use crate::ty::SubtypePredicate;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n use syntax_pos::{DUMMY_SP, Span, ExpnKind};\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    pub fn report_fulfillment_errors(&self,\n-                                     errors: &[FulfillmentError<'tcx>],\n-                                     body_id: Option<hir::BodyId>,\n-                                     fallback_has_occurred: bool) {\n+    pub fn report_fulfillment_errors(\n+        &self,\n+        errors: &[FulfillmentError<'tcx>],\n+        body_id: Option<hir::BodyId>,\n+        fallback_has_occurred: bool,\n+    ) {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -1053,6 +1055,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 .filter(|c| !c.is_whitespace())\n                 .take_while(|c| *c == '&')\n                 .count();\n+            if let Some('\\'') = snippet.chars()\n+                .filter(|c| !c.is_whitespace())\n+                .skip(refs_number)\n+                .next()\n+            { // Do not suggest removal of borrow from type arguments.\n+                return;\n+            }\n \n             let mut trait_type = trait_ref.self_ty();\n \n@@ -1214,7 +1223,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 _ => format!(\"{} {}argument{}\",\n                              arg_length,\n                              if distinct && arg_length > 1 { \"distinct \" } else { \"\" },\n-                             if arg_length == 1 { \"\" } else { \"s\" }),\n+                             pluralise!(arg_length))\n             }\n         };\n \n@@ -1651,6 +1660,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     err.note(&msg);\n                 }\n             }\n+            ObligationCauseCode::BindingObligation(item_def_id, span) => {\n+                let item_name = tcx.def_path_str(item_def_id);\n+                let msg = format!(\"required by this bound in `{}`\", item_name);\n+                if let Some(ident) = tcx.opt_item_name(item_def_id) {\n+                    err.span_label(ident.span, \"\");\n+                }\n+                if span != DUMMY_SP {\n+                    err.span_label(span, &msg);\n+                } else {\n+                    err.note(&msg);\n+                }\n+            }\n             ObligationCauseCode::ObjectCastObligation(object_ty) => {\n                 err.note(&format!(\"required for the cast to the object type `{}`\",\n                                   self.ty_to_string(object_ty)));"}, {"sha": "1123422ad6008244666bad70a1d8ee24ea7380a6", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -176,6 +176,9 @@ pub enum ObligationCauseCode<'tcx> {\n     /// also implement all supertraits of `X`.\n     ItemObligation(DefId),\n \n+    /// Like `ItemObligation`, but with extra detail on the source of the obligation.\n+    BindingObligation(DefId, Span),\n+\n     /// A type like `&'a T` is WF only if `T: 'a`.\n     ReferenceOutlivesReferent(Ty<'tcx>),\n \n@@ -659,11 +662,11 @@ pub struct VtableTraitAliasData<'tcx, N> {\n }\n \n /// Creates predicate obligations from the generic bounds.\n-pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n-                                     param_env: ty::ParamEnv<'tcx>,\n-                                     generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n-                                     -> PredicateObligations<'tcx>\n-{\n+pub fn predicates_for_generics<'tcx>(\n+    cause: ObligationCause<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    generic_bounds: &ty::InstantiatedPredicates<'tcx>,\n+) -> PredicateObligations<'tcx> {\n     util::predicates_for_generics(cause, 0, param_env, generic_bounds)\n }\n "}, {"sha": "68c97226f89cfd7fb156669108a8c7cb85e5d83e", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -472,6 +472,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::TupleElem => Some(super::TupleElem),\n             super::ProjectionWf(proj) => tcx.lift(&proj).map(super::ProjectionWf),\n             super::ItemObligation(def_id) => Some(super::ItemObligation(def_id)),\n+            super::BindingObligation(def_id, span) => Some(super::BindingObligation(def_id, span)),\n             super::ReferenceOutlivesReferent(ty) => {\n                 tcx.lift(&ty).map(super::ReferenceOutlivesReferent)\n             }"}, {"sha": "3e5520dd46557af9c9112fca61b3f4b81135e632", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -513,20 +513,19 @@ pub fn impl_trait_ref_and_oblig<'a, 'tcx>(\n }\n \n /// See [`super::obligations_for_generics`].\n-pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n-                                     recursion_depth: usize,\n-                                     param_env: ty::ParamEnv<'tcx>,\n-                                     generic_bounds: &ty::InstantiatedPredicates<'tcx>)\n-                                     -> Vec<PredicateObligation<'tcx>>\n-{\n-    debug!(\"predicates_for_generics(generic_bounds={:?})\",\n-           generic_bounds);\n-\n-    generic_bounds.predicates.iter().map(|predicate| {\n-        Obligation { cause: cause.clone(),\n-                     recursion_depth,\n-                     param_env,\n-                     predicate: predicate.clone() }\n+pub fn predicates_for_generics<'tcx>(\n+    cause: ObligationCause<'tcx>,\n+    recursion_depth: usize,\n+    param_env: ty::ParamEnv<'tcx>,\n+    generic_bounds: &ty::InstantiatedPredicates<'tcx>,\n+) -> Vec<PredicateObligation<'tcx>> {\n+    debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n+\n+    generic_bounds.predicates.iter().map(|predicate| Obligation {\n+        cause: cause.clone(),\n+        recursion_depth,\n+        param_env,\n+        predicate: predicate.clone(),\n     }).collect()\n }\n "}, {"sha": "125c48f5f31d738baad7209eceda2cdaae924773", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 93, "deletions": 5, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -196,7 +196,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 let n = tcx.lift_to_global(&n).unwrap();\n                 match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n                     Some(n) => {\n-                        format!(\"array of {} element{}\", n, if n != 1 { \"s\" } else { \"\" }).into()\n+                        format!(\"array of {} element{}\", n, pluralise!(n)).into()\n                     }\n                     None => \"array\".into(),\n                 }\n@@ -275,10 +275,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                                  `.await`ing on both of them\");\n                     }\n                 }\n-                if let (ty::Infer(ty::IntVar(_)), ty::Float(_)) =\n-                       (&values.found.sty, &values.expected.sty) // Issue #53280\n-                {\n-                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(sp) {\n+                match (&values.expected.sty, &values.found.sty) {\n+                    (ty::Float(_), ty::Infer(ty::IntVar(_))) => if let Ok( // Issue #53280\n+                        snippet,\n+                    ) = self.sess.source_map().span_to_snippet(sp) {\n                         if snippet.chars().all(|c| c.is_digit(10) || c == '-' || c == '_') {\n                             db.span_suggestion(\n                                 sp,\n@@ -287,8 +287,96 @@ impl<'tcx> TyCtxt<'tcx> {\n                                 Applicability::MachineApplicable\n                             );\n                         }\n+                    },\n+                    (ty::Param(_), ty::Param(_)) => {\n+                        db.note(\"a type parameter was expected, but a different one was found; \\\n+                                 you might be missing a type parameter or trait bound\");\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                                 #traits-as-parameters\");\n+                    }\n+                    (ty::Projection(_), ty::Projection(_)) => {\n+                        db.note(\"an associated type was expected, but a different one was found\");\n+                    }\n+                    (ty::Param(_), ty::Projection(_)) | (ty::Projection(_), ty::Param(_)) => {\n+                        db.note(\"you might be missing a type parameter or trait bound\");\n+                    }\n+                    (ty::Param(_), _) | (_, ty::Param(_)) => {\n+                        db.help(\"type parameters must be constrained to match other types\");\n+                        if self.sess.teach(&db.get_code().unwrap()) {\n+                            db.help(\"given a type parameter `T` and a method `foo`:\n+```\n+trait Trait<T> { fn foo(&self) -> T; }\n+```\n+the only ways to implement method `foo` are:\n+- constrain `T` with an explicit type:\n+```\n+impl Trait<String> for X {\n+    fn foo(&self) -> String { String::new() }\n+}\n+```\n+- add a trait bound to `T` and call a method on that trait that returns `Self`:\n+```\n+impl<T: std::default::Default> Trait<T> for X {\n+    fn foo(&self) -> T { <T as std::default::Default>::default() }\n+}\n+```\n+- change `foo` to return an argument of type `T`:\n+```\n+impl<T> Trait<T> for X {\n+    fn foo(&self, x: T) -> T { x }\n+}\n+```\");\n+                        }\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch10-02-traits.html\\\n+                                 #traits-as-parameters\");\n+                    }\n+                    (ty::Projection(_), _) => {\n+                        db.note(&format!(\n+                            \"consider constraining the associated type `{}` to `{}` or calling a \\\n+                             method that returns `{}`\",\n+                            values.expected,\n+                            values.found,\n+                            values.expected,\n+                        ));\n+                        if self.sess.teach(&db.get_code().unwrap()) {\n+                            db.help(\"given an associated type `T` and a method `foo`:\n+```\n+trait Trait {\n+    type T;\n+    fn foo(&self) -> Self::T;\n+}\n+```\n+the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n+```\n+impl Trait for X {\n+    type T = String;\n+    fn foo(&self) -> Self::T { String::new() }\n+}\n+```\");\n+                        }\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\");\n+                    }\n+                    (_, ty::Projection(_)) => {\n+                        db.note(&format!(\n+                            \"consider constraining the associated type `{}` to `{}`\",\n+                            values.found,\n+                            values.expected,\n+                        ));\n+                        db.note(\"for more information, visit \\\n+                                 https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\");\n                     }\n+                    _ => {}\n                 }\n+                debug!(\n+                    \"note_and_explain_type_err expected={:?} ({:?}) found={:?} ({:?})\",\n+                    values.expected,\n+                    values.expected.sty,\n+                    values.found,\n+                    values.found.sty,\n+                );\n             },\n             CyclicTy(ty) => {\n                 // Watch out for various cases of cyclic types and try to explain."}, {"sha": "8bb9648e031ef5e98c4979fd8c234ded1303939d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2797,6 +2797,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {\n+        self.hir().as_local_hir_id(def_id).and_then(|hir_id| self.hir().get(hir_id).ident())\n+    }\n+\n     pub fn opt_associated_item(self, def_id: DefId) -> Option<AssocItem> {\n         let is_associated_item = if let Some(hir_id) = self.hir().as_local_hir_id(def_id) {\n             match self.hir().get(hir_id) {"}, {"sha": "a1828bb5ab7a7cacbf6fb1692deb2e2da7bd8d21", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -330,14 +330,13 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let mut i = 0;\n \n                 while let Some(query) = current_query {\n-                    let mut db = DiagnosticBuilder::new(icx.tcx.sess.diagnostic(),\n-                        Level::FailureNote,\n+                    let mut diag = Diagnostic::new(Level::FailureNote,\n                         &format!(\"#{} [{}] {}\",\n                                  i,\n                                  query.info.query.name(),\n                                  query.info.query.describe(icx.tcx)));\n-                    db.set_span(icx.tcx.sess.source_map().def_span(query.info.span));\n-                    icx.tcx.sess.diagnostic().force_print_db(db);\n+                    diag.span = icx.tcx.sess.source_map().def_span(query.info.span).into();\n+                    icx.tcx.sess.diagnostic().force_print_diagnostic(diag);\n \n                     current_query = query.parent.clone();\n                     i += 1;"}, {"sha": "1bba479c1fd5db7f0dc37aaf3fff25308c605e22", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -22,12 +22,11 @@ use rustc::util::common::{time_depth, set_time_depth, print_time_passes_entry};\n use rustc::util::profiling::SelfProfiler;\n use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n-use rustc_errors::{Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n+use rustc_errors::{Handler, Level, FatalError, DiagnosticId};\n use rustc_errors::emitter::{Emitter};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n use syntax::ext::hygiene::ExpnId;\n-use syntax_pos::MultiSpan;\n use syntax_pos::symbol::{Symbol, sym};\n use jobserver::{Client, Acquired};\n \n@@ -1725,7 +1724,7 @@ impl SharedEmitter {\n }\n \n impl Emitter for SharedEmitter {\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &rustc_errors::Diagnostic) {\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n             msg: db.message(),\n             code: db.code.clone(),\n@@ -1760,19 +1759,12 @@ impl SharedEmitterMain {\n             match message {\n                 Ok(SharedEmitterMessage::Diagnostic(diag)) => {\n                     let handler = sess.diagnostic();\n-                    match diag.code {\n-                        Some(ref code) => {\n-                            handler.emit_with_code(&MultiSpan::new(),\n-                                                   &diag.msg,\n-                                                   code.clone(),\n-                                                   diag.lvl);\n-                        }\n-                        None => {\n-                            handler.emit(&MultiSpan::new(),\n-                                         &diag.msg,\n-                                         diag.lvl);\n-                        }\n+                    let mut d = rustc_errors::Diagnostic::new(diag.lvl, &diag.msg);\n+                    if let Some(code) = diag.code {\n+                        d.code(code);\n                     }\n+                    handler.emit_diagnostic(&d);\n+                    handler.abort_if_errors_and_should_abort();\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg)) => {\n                     sess.span_err(ExpnId::from_u32(cookie).expn_data().call_site, &msg)"}, {"sha": "f99e65b4494a7f136c7eb91c7994573cb1d8d66d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -66,7 +66,7 @@ use syntax::source_map::FileLoader;\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n use syntax::symbol::sym;\n-use syntax_pos::{DUMMY_SP, MultiSpan, FileName};\n+use syntax_pos::{DUMMY_SP, FileName};\n \n pub mod pretty;\n mod args;\n@@ -1196,15 +1196,16 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         false,\n         false,\n         None,\n+        false,\n     ));\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n \n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n     if !info.payload().is::<errors::ExplicitBug>() {\n-        handler.emit(&MultiSpan::new(),\n-                     \"unexpected panic\",\n-                     errors::Level::Bug);\n+        let d = errors::Diagnostic::new(errors::Level::Bug, \"unexpected panic\");\n+        handler.emit_diagnostic(&d);\n+        handler.abort_if_errors_and_should_abort();\n     }\n \n     let mut xs: Vec<Cow<'static, str>> = vec![\n@@ -1224,9 +1225,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     }\n \n     for note in &xs {\n-        handler.emit(&MultiSpan::new(),\n-                     note,\n-                     errors::Level::Note);\n+        handler.note_without_error(&note);\n     }\n \n     // If backtraces are enabled, also print the query stack"}, {"sha": "0281d10fd930ee1ac290f77a5848176e0201b52c", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -7,7 +7,7 @@\n \n use syntax_pos::{SourceFile, MultiSpan, Loc};\n use crate::{\n-    Level, CodeSuggestion, DiagnosticBuilder, Emitter,\n+    Level, CodeSuggestion, Diagnostic, Emitter,\n     SourceMapperDyn, SubDiagnostic, DiagnosticId\n };\n use crate::emitter::FileWithAnnotatedLines;\n@@ -25,19 +25,21 @@ pub struct AnnotateSnippetEmitterWriter {\n     short_message: bool,\n     /// If true, will normalize line numbers with `LL` to prevent noise in UI test diffs.\n     ui_testing: bool,\n+\n+    external_macro_backtrace: bool,\n }\n \n impl Emitter for AnnotateSnippetEmitterWriter {\n     /// The entry point for the diagnostics generation\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &Diagnostic) {\n         let mut children = db.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n \n         self.fix_multispans_in_std_macros(&self.source_map,\n                                           &mut primary_span,\n                                           &mut children,\n                                           &db.level,\n-                                          db.handler().flags.external_macro_backtrace);\n+                                          self.external_macro_backtrace);\n \n         self.emit_messages_default(&db.level,\n                                    db.message(),\n@@ -163,12 +165,14 @@ impl<'a>  DiagnosticConverter<'a> {\n impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n         source_map: Option<Lrc<SourceMapperDyn>>,\n-        short_message: bool\n+        short_message: bool,\n+        external_macro_backtrace: bool,\n     ) -> Self {\n         Self {\n             source_map,\n             short_message,\n             ui_testing: false,\n+            external_macro_backtrace,\n         }\n     }\n "}, {"sha": "e85388bfea29c51aa60ecc282f756093fc7e6af7", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -99,17 +99,9 @@ impl<'a> DerefMut for DiagnosticBuilder<'a> {\n }\n \n impl<'a> DiagnosticBuilder<'a> {\n-    pub fn handler(&self) -> &'a Handler{\n-        self.0.handler\n-    }\n-\n     /// Emit the diagnostic.\n     pub fn emit(&mut self) {\n-        if self.cancelled() {\n-            return;\n-        }\n-\n-        self.0.handler.emit_db(&self);\n+        self.0.handler.emit_diagnostic(&self);\n         self.cancel();\n     }\n \n@@ -354,7 +346,7 @@ impl<'a> DiagnosticBuilder<'a> {\n \n     /// Convenience function for internal use, clients should use one of the\n     /// struct_* methods on Handler.\n-    pub fn new(handler: &'a Handler, level: Level, message: &str) -> DiagnosticBuilder<'a> {\n+    crate fn new(handler: &'a Handler, level: Level, message: &str) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new_with_code(handler, level, None, message)\n     }\n \n@@ -371,7 +363,8 @@ impl<'a> DiagnosticBuilder<'a> {\n \n     /// Creates a new `DiagnosticBuilder` with an already constructed\n     /// diagnostic.\n-    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> DiagnosticBuilder<'a> {\n+    crate fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic)\n+                         -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder(Box::new(DiagnosticBuilderInner {\n             handler,\n             diagnostic,"}, {"sha": "fc441320e003919df9eef990995a6b4f3d0e4da6", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -12,7 +12,7 @@ use Destination::*;\n use syntax_pos::{SourceFile, Span, MultiSpan};\n \n use crate::{\n-    Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic,\n+    Level, CodeSuggestion, Diagnostic, SubDiagnostic,\n     SuggestionStyle, SourceMapperDyn, DiagnosticId,\n };\n use crate::Level::Error;\n@@ -52,10 +52,12 @@ impl HumanReadableErrorType {\n         source_map: Option<Lrc<SourceMapperDyn>>,\n         teach: bool,\n         terminal_width: Option<usize>,\n+        external_macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n-        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width)\n+        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width,\n+            external_macro_backtrace)\n     }\n }\n \n@@ -180,7 +182,7 @@ const ANONYMIZED_LINE_NUM: &str = \"LL\";\n /// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>);\n+    fn emit_diagnostic(&mut self, db: &Diagnostic);\n \n     /// Emit a notification that an artifact has been output.\n     /// This is currently only supported for the JSON format,\n@@ -204,7 +206,7 @@ pub trait Emitter {\n     ///   we return the original `primary_span` and the original suggestions.\n     fn primary_span_formatted<'a>(\n         &mut self,\n-        db: &'a DiagnosticBuilder<'_>\n+        db: &'a Diagnostic\n     ) -> (MultiSpan, &'a [CodeSuggestion]) {\n         let mut primary_span = db.span.clone();\n         if let Some((sugg, rest)) = db.suggestions.split_first() {\n@@ -377,15 +379,15 @@ pub trait Emitter {\n }\n \n impl Emitter for EmitterWriter {\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &Diagnostic) {\n         let mut children = db.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n \n         self.fix_multispans_in_std_macros(&self.sm,\n                                           &mut primary_span,\n                                           &mut children,\n                                           &db.level,\n-                                          db.handler().flags.external_macro_backtrace);\n+                                          self.external_macro_backtrace);\n \n         self.emit_messages_default(&db.level,\n                                    &db.styled_message(),\n@@ -449,6 +451,8 @@ pub struct EmitterWriter {\n     teach: bool,\n     ui_testing: bool,\n     terminal_width: Option<usize>,\n+\n+    external_macro_backtrace: bool,\n }\n \n #[derive(Debug)]\n@@ -465,6 +469,7 @@ impl EmitterWriter {\n         short_message: bool,\n         teach: bool,\n         terminal_width: Option<usize>,\n+        external_macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -474,6 +479,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n+            external_macro_backtrace,\n         }\n     }\n \n@@ -484,6 +490,7 @@ impl EmitterWriter {\n         teach: bool,\n         colored: bool,\n         terminal_width: Option<usize>,\n+        external_macro_backtrace: bool,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -492,6 +499,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n+            external_macro_backtrace,\n         }\n     }\n "}, {"sha": "1fe5b71d7b1cf51691f636ca7f2d1cdd59c662cd", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 225, "deletions": 164, "changes": 389, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -16,7 +16,7 @@ use Level::*;\n use emitter::{Emitter, EmitterWriter};\n use registry::Registry;\n \n-use rustc_data_structures::sync::{self, Lrc, Lock, AtomicUsize, AtomicBool, SeqCst};\n+use rustc_data_structures::sync::{self, Lrc, Lock};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::StableHasher;\n \n@@ -298,38 +298,42 @@ pub use diagnostic_builder::DiagnosticBuilder;\n /// Certain errors (fatal, bug, unimpl) may cause immediate exit,\n /// others log errors for later reporting.\n pub struct Handler {\n-    pub flags: HandlerFlags,\n+    flags: HandlerFlags,\n+    inner: Lock<HandlerInner>,\n+}\n \n+struct HandlerInner {\n+    flags: HandlerFlags,\n     /// The number of errors that have been emitted, including duplicates.\n     ///\n     /// This is not necessarily the count that's reported to the user once\n     /// compilation ends.\n-    err_count: AtomicUsize,\n-    deduplicated_err_count: AtomicUsize,\n-    emitter: Lock<Box<dyn Emitter + sync::Send>>,\n-    continue_after_error: AtomicBool,\n-    delayed_span_bugs: Lock<Vec<Diagnostic>>,\n+    err_count: usize,\n+    deduplicated_err_count: usize,\n+    emitter: Box<dyn Emitter + sync::Send>,\n+    continue_after_error: bool,\n+    delayed_span_bugs: Vec<Diagnostic>,\n \n     /// This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     /// emitting the same diagnostic with extended help (`--teach`) twice, which\n     /// would be uneccessary repetition.\n-    taught_diagnostics: Lock<FxHashSet<DiagnosticId>>,\n+    taught_diagnostics: FxHashSet<DiagnosticId>,\n \n     /// Used to suggest rustc --explain <error code>\n-    emitted_diagnostic_codes: Lock<FxHashSet<DiagnosticId>>,\n+    emitted_diagnostic_codes: FxHashSet<DiagnosticId>,\n \n     /// This set contains a hash of every diagnostic that has been emitted by\n     /// this handler. These hashes is used to avoid emitting the same error\n     /// twice.\n-    emitted_diagnostics: Lock<FxHashSet<u128>>,\n+    emitted_diagnostics: FxHashSet<u128>,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}\n \n thread_local!(pub static TRACK_DIAGNOSTICS: Cell<fn(&Diagnostic)> =\n                 Cell::new(default_track_diagnostic));\n \n-#[derive(Default)]\n+#[derive(Copy, Clone, Default)]\n pub struct HandlerFlags {\n     /// If false, warning-level lints are suppressed.\n     /// (rustc: see `--allow warnings` and `--cap-lints`)\n@@ -348,13 +352,13 @@ pub struct HandlerFlags {\n     pub external_macro_backtrace: bool,\n }\n \n-impl Drop for Handler {\n+impl Drop for HandlerInner {\n     fn drop(&mut self) {\n-        if !self.has_errors() {\n-            let mut bugs = self.delayed_span_bugs.borrow_mut();\n+        if self.err_count == 0 {\n+            let bugs = std::mem::replace(&mut self.delayed_span_bugs, Vec::new());\n             let has_bugs = !bugs.is_empty();\n-            for bug in bugs.drain(..) {\n-                DiagnosticBuilder::new_diagnostic(self, bug).emit();\n+            for bug in bugs {\n+                self.emit_diagnostic(&bug);\n             }\n             if has_bugs {\n                 panic!(\"no errors encountered even though `delay_span_bug` issued\");\n@@ -383,7 +387,8 @@ impl Handler {\n                                       cm: Option<Lrc<SourceMapperDyn>>,\n                                       flags: HandlerFlags)\n                                       -> Handler {\n-        let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false, false, None));\n+        let emitter = Box::new(EmitterWriter::stderr(\n+            color_config, cm, false, false, None, flags.external_macro_backtrace));\n         Handler::with_emitter_and_flags(emitter, flags)\n     }\n \n@@ -404,31 +409,42 @@ impl Handler {\n     {\n         Handler {\n             flags,\n-            err_count: AtomicUsize::new(0),\n-            deduplicated_err_count: AtomicUsize::new(0),\n-            emitter: Lock::new(e),\n-            continue_after_error: AtomicBool::new(true),\n-            delayed_span_bugs: Lock::new(Vec::new()),\n-            taught_diagnostics: Default::default(),\n-            emitted_diagnostic_codes: Default::default(),\n-            emitted_diagnostics: Default::default(),\n+            inner: Lock::new(HandlerInner {\n+                flags,\n+                err_count: 0,\n+                deduplicated_err_count: 0,\n+                emitter: e,\n+                continue_after_error: true,\n+                delayed_span_bugs: Vec::new(),\n+                taught_diagnostics: Default::default(),\n+                emitted_diagnostic_codes: Default::default(),\n+                emitted_diagnostics: Default::default(),\n+            }),\n         }\n     }\n \n     pub fn set_continue_after_error(&self, continue_after_error: bool) {\n-        self.continue_after_error.store(continue_after_error, SeqCst);\n+        self.inner.borrow_mut().continue_after_error = continue_after_error;\n+    }\n+\n+    // This is here to not allow mutation of flags;\n+    // as of this writing it's only used in tests in librustc.\n+    pub fn can_emit_warnings(&self) -> bool {\n+        self.flags.can_emit_warnings\n     }\n \n     /// Resets the diagnostic error count as well as the cached emitted diagnostics.\n     ///\n     /// NOTE: *do not* call this function from rustc. It is only meant to be called from external\n     /// tools that want to reuse a `Parser` cleaning the previously emitted diagnostics as well as\n     /// the overall count of emitted error diagnostics.\n+    // FIXME: this does not clear inner entirely\n     pub fn reset_err_count(&self) {\n+        let mut inner = self.inner.borrow_mut();\n         // actually frees the underlying memory (which `clear` would not do)\n-        *self.emitted_diagnostics.borrow_mut() = Default::default();\n-        self.deduplicated_err_count.store(0, SeqCst);\n-        self.err_count.store(0, SeqCst);\n+        inner.emitted_diagnostics = Default::default();\n+        inner.deduplicated_err_count = 0;\n+        inner.err_count = 0;\n     }\n \n     pub fn struct_dummy(&self) -> DiagnosticBuilder<'_> {\n@@ -519,42 +535,23 @@ impl Handler {\n         DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n-    pub fn cancel(&self, err: &mut DiagnosticBuilder<'_>) {\n-        err.cancel();\n-    }\n-\n-    fn panic_if_treat_err_as_bug(&self) {\n-        if self.treat_err_as_bug() {\n-            let s = match (self.err_count(), self.flags.treat_err_as_bug.unwrap_or(0)) {\n-                (0, _) => return,\n-                (1, 1) => \"aborting due to `-Z treat-err-as-bug=1`\".to_string(),\n-                (1, _) => return,\n-                (count, as_bug) => {\n-                    format!(\n-                        \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n-                        count,\n-                        as_bug,\n-                    )\n-                }\n-            };\n-            panic!(s);\n-        }\n-    }\n-\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> FatalError {\n-        self.emit(&sp.into(), msg, Fatal);\n+        self.emit_diagnostic(Diagnostic::new(Fatal, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n         FatalError\n     }\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self,\n                                                     sp: S,\n                                                     msg: &str,\n                                                     code: DiagnosticId)\n                                                     -> FatalError {\n-        self.emit_with_code(&sp.into(), msg, code, Fatal);\n+        self.emit_diagnostic(Diagnostic::new_with_code(Fatal, Some(code), msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n         FatalError\n     }\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit(&sp.into(), msg, Error);\n+        self.emit_diagnostic(Diagnostic::new(Error, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn mut_span_err<S: Into<MultiSpan>>(&self,\n                                             sp: S,\n@@ -565,38 +562,30 @@ impl Handler {\n         result\n     }\n     pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n-        self.emit_with_code(&sp.into(), msg, code, Error);\n+        self.emit_diagnostic(Diagnostic::new_with_code(Error, Some(code), msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit(&sp.into(), msg, Warning);\n+        self.emit_diagnostic(Diagnostic::new(Warning, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n-        self.emit_with_code(&sp.into(), msg, code, Warning);\n+        self.emit_diagnostic(Diagnostic::new_with_code(Warning, Some(code), msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.emit(&sp.into(), msg, Bug);\n-        panic!(ExplicitBug);\n+        self.inner.borrow_mut().span_bug(sp, msg)\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        if self.treat_err_as_bug() {\n-            // FIXME: don't abort here if report_delayed_bugs is off\n-            self.span_bug(sp, msg);\n-        }\n-        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n-        diagnostic.set_span(sp.into());\n-        self.delay_as_bug(diagnostic);\n-    }\n-    fn delay_as_bug(&self, diagnostic: Diagnostic) {\n-        if self.flags.report_delayed_bugs {\n-            DiagnosticBuilder::new_diagnostic(self, diagnostic.clone()).emit();\n-        }\n-        self.delayed_span_bugs.borrow_mut().push(diagnostic);\n+        self.inner.borrow_mut().delay_span_bug(sp, msg)\n     }\n     pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit(&sp.into(), msg, Bug);\n+        self.emit_diagnostic(Diagnostic::new(Bug, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit(&sp.into(), msg, Note);\n+        self.emit_diagnostic(Diagnostic::new(Note, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_note_diag(&self,\n                           sp: Span,\n@@ -606,61 +595,129 @@ impl Handler {\n         db.set_span(sp);\n         db\n     }\n-    pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.span_bug(sp, &format!(\"unimplemented {}\", msg));\n-    }\n     pub fn failure(&self, msg: &str) {\n-        DiagnosticBuilder::new(self, FailureNote, msg).emit()\n+        self.inner.borrow_mut().failure(msg);\n     }\n     pub fn fatal(&self, msg: &str) -> FatalError {\n-        if self.treat_err_as_bug() {\n-            self.bug(msg);\n-        }\n-        DiagnosticBuilder::new(self, Fatal, msg).emit();\n-        FatalError\n+        self.inner.borrow_mut().fatal(msg)\n     }\n     pub fn err(&self, msg: &str) {\n-        if self.treat_err_as_bug() {\n-            self.bug(msg);\n-        }\n-        let mut db = DiagnosticBuilder::new(self, Error, msg);\n-        db.emit();\n+        self.inner.borrow_mut().err(msg);\n     }\n     pub fn warn(&self, msg: &str) {\n         let mut db = DiagnosticBuilder::new(self, Warning, msg);\n         db.emit();\n     }\n-    fn treat_err_as_bug(&self) -> bool {\n-        self.flags.treat_err_as_bug.map(|c| self.err_count() >= c).unwrap_or(false)\n-    }\n     pub fn note_without_error(&self, msg: &str) {\n         let mut db = DiagnosticBuilder::new(self, Note, msg);\n         db.emit();\n     }\n     pub fn bug(&self, msg: &str) -> ! {\n-        let mut db = DiagnosticBuilder::new(self, Bug, msg);\n-        db.emit();\n-        panic!(ExplicitBug);\n-    }\n-    pub fn unimpl(&self, msg: &str) -> ! {\n-        self.bug(&format!(\"unimplemented {}\", msg));\n-    }\n-\n-    fn bump_err_count(&self) {\n-        self.err_count.fetch_add(1, SeqCst);\n-        self.panic_if_treat_err_as_bug();\n+        self.inner.borrow_mut().bug(msg)\n     }\n \n     pub fn err_count(&self) -> usize {\n-        self.err_count.load(SeqCst)\n+        self.inner.borrow().err_count\n     }\n \n     pub fn has_errors(&self) -> bool {\n         self.err_count() > 0\n     }\n \n     pub fn print_error_count(&self, registry: &Registry) {\n-        let s = match self.deduplicated_err_count.load(SeqCst) {\n+        self.inner.borrow_mut().print_error_count(registry)\n+    }\n+\n+    pub fn abort_if_errors(&self) {\n+        self.inner.borrow().abort_if_errors()\n+    }\n+\n+    pub fn abort_if_errors_and_should_abort(&self) {\n+        self.inner.borrow().abort_if_errors_and_should_abort()\n+    }\n+\n+    pub fn must_teach(&self, code: &DiagnosticId) -> bool {\n+        self.inner.borrow_mut().must_teach(code)\n+    }\n+\n+    pub fn force_print_diagnostic(&self, db: Diagnostic) {\n+        self.inner.borrow_mut().force_print_diagnostic(db)\n+    }\n+\n+    pub fn emit_diagnostic(&self, diagnostic: &Diagnostic) {\n+        self.inner.borrow_mut().emit_diagnostic(diagnostic)\n+    }\n+\n+    pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {\n+        self.inner.borrow_mut().emit_artifact_notification(path, artifact_type)\n+    }\n+\n+    pub fn delay_as_bug(&self, diagnostic: Diagnostic) {\n+        self.inner.borrow_mut().delay_as_bug(diagnostic)\n+    }\n+}\n+\n+impl HandlerInner {\n+    /// `true` if we haven't taught a diagnostic with this code already.\n+    /// The caller must then teach the user about such a diagnostic.\n+    ///\n+    /// Used to suppress emitting the same error multiple times with extended explanation when\n+    /// calling `-Zteach`.\n+    fn must_teach(&mut self, code: &DiagnosticId) -> bool {\n+        self.taught_diagnostics.insert(code.clone())\n+    }\n+\n+    fn force_print_diagnostic(&mut self, db: Diagnostic) {\n+        self.emitter.emit_diagnostic(&db);\n+    }\n+\n+    fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) {\n+        if diagnostic.cancelled() {\n+            return;\n+        }\n+\n+        if diagnostic.level == Warning && !self.flags.can_emit_warnings {\n+            return;\n+        }\n+\n+        TRACK_DIAGNOSTICS.with(|track_diagnostics| {\n+            track_diagnostics.get()(diagnostic);\n+        });\n+\n+        if let Some(ref code) = diagnostic.code {\n+            self.emitted_diagnostic_codes.insert(code.clone());\n+        }\n+\n+        let diagnostic_hash = {\n+            use std::hash::Hash;\n+            let mut hasher = StableHasher::new();\n+            diagnostic.hash(&mut hasher);\n+            hasher.finish()\n+        };\n+\n+        // Only emit the diagnostic if we haven't already emitted an equivalent\n+        // one:\n+        if self.emitted_diagnostics.insert(diagnostic_hash) {\n+            self.emitter.emit_diagnostic(diagnostic);\n+            if diagnostic.is_error() {\n+                self.deduplicated_err_count += 1;\n+            }\n+        }\n+        if diagnostic.is_error() {\n+            self.bump_err_count();\n+        }\n+    }\n+\n+    fn emit_artifact_notification(&mut self, path: &Path, artifact_type: &str) {\n+        self.emitter.emit_artifact_notification(path, artifact_type);\n+    }\n+\n+    fn treat_err_as_bug(&self) -> bool {\n+        self.flags.treat_err_as_bug.map(|c| self.err_count >= c).unwrap_or(false)\n+    }\n+\n+    fn print_error_count(&mut self, registry: &Registry) {\n+        let s = match self.deduplicated_err_count {\n             0 => return,\n             1 => \"aborting due to previous error\".to_string(),\n             count => format!(\"aborting due to {} previous errors\", count)\n@@ -671,12 +728,11 @@ impl Handler {\n \n         let _ = self.fatal(&s);\n \n-        let can_show_explain = self.emitter.borrow().should_show_explain();\n-        let are_there_diagnostics = !self.emitted_diagnostic_codes.borrow().is_empty();\n+        let can_show_explain = self.emitter.should_show_explain();\n+        let are_there_diagnostics = !self.emitted_diagnostic_codes.is_empty();\n         if can_show_explain && are_there_diagnostics {\n             let mut error_codes = self\n                 .emitted_diagnostic_codes\n-                .borrow()\n                 .iter()\n                 .filter_map(|x| match &x {\n                     DiagnosticId::Error(s) if registry.find_description(s).is_some() => {\n@@ -704,81 +760,86 @@ impl Handler {\n         }\n     }\n \n-    pub fn abort_if_errors(&self) {\n-        if self.has_errors() {\n+    fn abort_if_errors_and_should_abort(&self) {\n+        if self.err_count > 0 && !self.continue_after_error {\n             FatalError.raise();\n         }\n     }\n-    pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) {\n-        if lvl == Warning && !self.flags.can_emit_warnings {\n-            return;\n-        }\n-        let mut db = DiagnosticBuilder::new(self, lvl, msg);\n-        db.set_span(msp.clone());\n-        db.emit();\n-        if !self.continue_after_error.load(SeqCst) {\n-            self.abort_if_errors();\n-        }\n-    }\n-    pub fn emit_with_code(&self, msp: &MultiSpan, msg: &str, code: DiagnosticId, lvl: Level) {\n-        if lvl == Warning && !self.flags.can_emit_warnings {\n-            return;\n-        }\n-        let mut db = DiagnosticBuilder::new_with_code(self, lvl, Some(code), msg);\n-        db.set_span(msp.clone());\n-        db.emit();\n-        if !self.continue_after_error.load(SeqCst) {\n-            self.abort_if_errors();\n+\n+    fn abort_if_errors(&self) {\n+        if self.err_count > 0 {\n+            FatalError.raise();\n         }\n     }\n \n-    /// `true` if we haven't taught a diagnostic with this code already.\n-    /// The caller must then teach the user about such a diagnostic.\n-    ///\n-    /// Used to suppress emitting the same error multiple times with extended explanation when\n-    /// calling `-Zteach`.\n-    pub fn must_teach(&self, code: &DiagnosticId) -> bool {\n-        self.taught_diagnostics.borrow_mut().insert(code.clone())\n+    fn span_bug<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> ! {\n+        self.emit_diagnostic(Diagnostic::new(Bug, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n+        panic!(ExplicitBug);\n     }\n \n-    pub fn force_print_db(&self, mut db: DiagnosticBuilder<'_>) {\n-        self.emitter.borrow_mut().emit_diagnostic(&db);\n-        db.cancel();\n+    fn delay_span_bug<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) {\n+        if self.treat_err_as_bug() {\n+            // FIXME: don't abort here if report_delayed_bugs is off\n+            self.span_bug(sp, msg);\n+        }\n+        let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n+        diagnostic.set_span(sp.into());\n+        self.delay_as_bug(diagnostic)\n     }\n \n-    fn emit_db(&self, db: &DiagnosticBuilder<'_>) {\n-        let diagnostic = &**db;\n+    fn failure(&mut self, msg: &str) {\n+        self.emit_diagnostic(&Diagnostic::new(FailureNote, msg));\n+    }\n \n-        TRACK_DIAGNOSTICS.with(|track_diagnostics| {\n-            track_diagnostics.get()(diagnostic);\n-        });\n+    fn fatal(&mut self, msg: &str) -> FatalError {\n+        if self.treat_err_as_bug() {\n+            self.bug(msg);\n+        }\n+        self.emit_diagnostic(&Diagnostic::new(Fatal, msg));\n+        FatalError\n+    }\n \n-        if let Some(ref code) = diagnostic.code {\n-            self.emitted_diagnostic_codes.borrow_mut().insert(code.clone());\n+    fn err(&mut self, msg: &str) {\n+        if self.treat_err_as_bug() {\n+            self.bug(msg);\n         }\n+        self.emit_diagnostic(&Diagnostic::new(Error, msg));\n+    }\n \n-        let diagnostic_hash = {\n-            use std::hash::Hash;\n-            let mut hasher = StableHasher::new();\n-            diagnostic.hash(&mut hasher);\n-            hasher.finish()\n-        };\n+    fn bug(&mut self, msg: &str) -> ! {\n+        self.emit_diagnostic(&Diagnostic::new(Bug, msg));\n+        panic!(ExplicitBug);\n+    }\n \n-        // Only emit the diagnostic if we haven't already emitted an equivalent\n-        // one:\n-        if self.emitted_diagnostics.borrow_mut().insert(diagnostic_hash) {\n-            self.emitter.borrow_mut().emit_diagnostic(db);\n-            if db.is_error() {\n-                self.deduplicated_err_count.fetch_add(1, SeqCst);\n-            }\n-        }\n-        if db.is_error() {\n-            self.bump_err_count();\n+    fn delay_as_bug(&mut self, diagnostic: Diagnostic) {\n+        if self.flags.report_delayed_bugs {\n+            self.emit_diagnostic(&diagnostic);\n         }\n+        self.delayed_span_bugs.push(diagnostic);\n     }\n \n-    pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {\n-        self.emitter.borrow_mut().emit_artifact_notification(path, artifact_type);\n+    fn bump_err_count(&mut self) {\n+        self.err_count += 1;\n+        self.panic_if_treat_err_as_bug();\n+    }\n+\n+    fn panic_if_treat_err_as_bug(&self) {\n+        if self.treat_err_as_bug() {\n+            let s = match (self.err_count, self.flags.treat_err_as_bug.unwrap_or(0)) {\n+                (0, _) => return,\n+                (1, 1) => \"aborting due to `-Z treat-err-as-bug=1`\".to_string(),\n+                (1, _) => return,\n+                (count, as_bug) => {\n+                    format!(\n+                        \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n+                        count,\n+                        as_bug,\n+                    )\n+                }\n+            };\n+            panic!(s);\n+        }\n     }\n }\n "}, {"sha": "40261f6d13739d0b04668b35cd0dc2f7dbfca596", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -975,7 +975,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n         let mut vis = ImproperCTypesVisitor { cx };\n         let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n-        if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n+        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n+            // Don't worry about types in internal ABIs.\n+        } else {\n             match it.node {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n                     vis.check_foreign_fn(it.hir_id, decl);"}, {"sha": "2d4af2f606a2cc997f276861d254935e20fd237a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -9,7 +9,7 @@ use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::Applicability;\n+use syntax::errors::{Applicability, pluralise};\n use syntax::feature_gate::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", false);\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", 1);\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -135,21 +135,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             span: Span,\n             descr_pre: &str,\n             descr_post: &str,\n-            plural: bool,\n+            plural_len: usize,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n                 cx.tcx.hir().get_module_parent(expr.hir_id), ty)\n             {\n                 return true;\n             }\n \n-            let plural_suffix = if plural { \"s\" } else { \"\" };\n+            let plural_suffix = pluralise!(plural_len);\n \n             match ty.sty {\n                 ty::Adt(..) if ty.is_box() => {\n                     let boxed_ty = ty.boxed_ty();\n                     let descr_pre = &format!(\"{}boxed \", descr_pre);\n-                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre, descr_post, plural)\n+                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre, descr_post, plural_len)\n                 }\n                 ty::Adt(def, _) => {\n                     check_must_use_def(cx, def.did, span, descr_pre, descr_post)\n@@ -202,7 +202,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n                         let descr_post = &format!(\" in tuple element {}\", i);\n                         let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, plural) {\n+                        if check_must_use_ty(\n+                            cx,\n+                            ty,\n+                            expr,\n+                            span,\n+                            descr_pre,\n+                            descr_post,\n+                            plural_len\n+                        ) {\n                             has_emitted = true;\n                         }\n                     }\n@@ -216,7 +224,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                             descr_pre,\n                             plural_suffix,\n                         );\n-                        check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, true)\n+                        check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, n as usize + 1)\n                     }\n                     // Otherwise, we don't lint, to avoid false positives.\n                     _ => false,"}, {"sha": "599a0ad0d0c52641d2daeee4d6575aca42bb614c", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -180,7 +180,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     );\n                 }\n                 if Some(DesugaringKind::ForLoop) == move_span.desugaring_kind() {\n-                    if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n+                    let sess = self.infcx.tcx.sess;\n+                    if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n                         err.span_suggestion(\n                             move_span,\n                             \"consider borrowing to avoid moving into the for loop\","}, {"sha": "1f17ab69f6660b722e613a46586df945aeb9a044", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -23,7 +23,6 @@ use std::rc::Rc;\n \n crate type PoloniusOutput = Output<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>;\n \n-// (forced to be `pub` due to its use as an associated type below.)\n crate struct Flows<'b, 'tcx> {\n     borrows: FlowAtLocation<'tcx, Borrows<'b, 'tcx>>,\n     pub uninits: FlowAtLocation<'tcx, MaybeUninitializedPlaces<'b, 'tcx>>,"}, {"sha": "32c6dd67a4b5af42a6c6b58828b0d6d7e7da26a6", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -402,7 +402,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         }\n \n         for diag in mbcx.errors_buffer.drain(..) {\n-            DiagnosticBuilder::new_diagnostic(mbcx.infcx.tcx.sess.diagnostic(), diag).emit();\n+            mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);\n         }\n     }\n "}, {"sha": "30d53502b11ff1667a39db8a0858887b7c13e0ff", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -244,6 +244,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let success = this.cfg.start_new_block();\n                     let cleanup = this.diverge_cleanup();\n+\n+                    this.record_operands_moved(&args);\n+\n                     this.cfg.terminate(\n                         block,\n                         source_info,"}, {"sha": "a26ec72584bda72b86ef4d814094e81ca40ce6e4", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 110, "deletions": 25, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -104,25 +104,14 @@ struct Scope {\n     /// the span of that region_scope\n     region_scope_span: Span,\n \n-    /// Whether there's anything to do for the cleanup path, that is,\n-    /// when unwinding through this scope. This includes destructors,\n-    /// but not StorageDead statements, which don't get emitted at all\n-    /// for unwinding, for several reasons:\n-    ///  * clang doesn't emit llvm.lifetime.end for C++ unwinding\n-    ///  * LLVM's memory dependency analysis can't handle it atm\n-    ///  * polluting the cleanup MIR with StorageDead creates\n-    ///    landing pads even though there's no actual destructors\n-    ///  * freeing up stack space has no effect during unwinding\n-    /// Note that for generators we do emit StorageDeads, for the\n-    /// use of optimizations in the MIR generator transform.\n-    needs_cleanup: bool,\n-\n     /// set of places to drop when exiting this scope. This starts\n     /// out empty but grows as variables are declared during the\n     /// building process. This is a stack, so we always drop from the\n     /// end of the vector (top of the stack) first.\n     drops: Vec<DropData>,\n \n+    moved_locals: Vec<Local>,\n+\n     /// The cache for drop chain on \u201cnormal\u201d exit into a particular BasicBlock.\n     cached_exits: FxHashMap<(BasicBlock, region::Scope), BasicBlock>,\n \n@@ -172,7 +161,7 @@ struct CachedBlock {\n     generator_drop: Option<BasicBlock>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n pub(crate) enum DropKind {\n     Value,\n     Storage,\n@@ -202,8 +191,7 @@ pub enum BreakableTarget {\n \n impl CachedBlock {\n     fn invalidate(&mut self) {\n-        self.generator_drop = None;\n-        self.unwind = None;\n+        *self = CachedBlock::default();\n     }\n \n     fn get(&self, generator_drop: bool) -> Option<BasicBlock> {\n@@ -261,6 +249,25 @@ impl Scope {\n             scope: self.source_scope\n         }\n     }\n+\n+\n+    /// Whether there's anything to do for the cleanup path, that is,\n+    /// when unwinding through this scope. This includes destructors,\n+    /// but not StorageDead statements, which don't get emitted at all\n+    /// for unwinding, for several reasons:\n+    ///  * clang doesn't emit llvm.lifetime.end for C++ unwinding\n+    ///  * LLVM's memory dependency analysis can't handle it atm\n+    ///  * polluting the cleanup MIR with StorageDead creates\n+    ///    landing pads even though there's no actual destructors\n+    ///  * freeing up stack space has no effect during unwinding\n+    /// Note that for generators we do emit StorageDeads, for the\n+    /// use of optimizations in the MIR generator transform.\n+    fn needs_cleanup(&self) -> bool {\n+        self.drops.iter().any(|drop| match drop.kind {\n+            DropKind::Value => true,\n+            DropKind::Storage => false,\n+        })\n+    }\n }\n \n impl<'tcx> Scopes<'tcx> {\n@@ -274,8 +281,8 @@ impl<'tcx> Scopes<'tcx> {\n             source_scope: vis_scope,\n             region_scope: region_scope.0,\n             region_scope_span: region_scope.1.span,\n-            needs_cleanup: false,\n             drops: vec![],\n+            moved_locals: vec![],\n             cached_generator_drop: None,\n             cached_exits: Default::default(),\n             cached_unwind: CachedBlock::default(),\n@@ -295,7 +302,7 @@ impl<'tcx> Scopes<'tcx> {\n \n     fn may_panic(&self, scope_count: usize) -> bool {\n         let len = self.len();\n-        self.scopes[(len - scope_count)..].iter().any(|s| s.needs_cleanup)\n+        self.scopes[(len - scope_count)..].iter().any(|s| s.needs_cleanup())\n     }\n \n     /// Finds the breakable scope for a given label. This is used for\n@@ -480,7 +487,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             block,\n             unwind_to,\n             self.arg_count,\n-            false,\n+            false, // not generator\n+            false, // not unwind path\n         ));\n \n         block.unit()\n@@ -572,7 +580,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block,\n                 unwind_to,\n                 self.arg_count,\n-                false,\n+                false, // not generator\n+                false, // not unwind path\n             ));\n \n             scope = next_scope;\n@@ -622,7 +631,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block,\n                 unwind_to,\n                 self.arg_count,\n-                true,\n+                true, // is generator\n+                true, // is cached path\n             ));\n         }\n \n@@ -801,10 +811,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // cache of outer scope stays intact.\n             scope.invalidate_cache(!needs_drop, self.is_generator, this_scope);\n             if this_scope {\n-                if let DropKind::Value = drop_kind {\n-                    scope.needs_cleanup = true;\n-                }\n-\n                 let region_scope_span = region_scope.span(self.hir.tcx(),\n                                                           &self.hir.region_scope_tree);\n                 // Attribute scope exit drops to scope's closing brace.\n@@ -822,6 +828,75 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         span_bug!(span, \"region scope {:?} not in scope to drop {:?}\", region_scope, local);\n     }\n \n+    /// Indicates that the \"local operand\" stored in `local` is\n+    /// *moved* at some point during execution (see `local_scope` for\n+    /// more information about what a \"local operand\" is -- in short,\n+    /// it's an intermediate operand created as part of preparing some\n+    /// MIR instruction). We use this information to suppress\n+    /// redundant drops on the non-unwind paths. This results in less\n+    /// MIR, but also avoids spurious borrow check errors\n+    /// (c.f. #64391).\n+    ///\n+    /// Example: when compiling the call to `foo` here:\n+    ///\n+    /// ```rust\n+    /// foo(bar(), ...)\n+    /// ```\n+    ///\n+    /// we would evaluate `bar()` to an operand `_X`. We would also\n+    /// schedule `_X` to be dropped when the expression scope for\n+    /// `foo(bar())` is exited. This is relevant, for example, if the\n+    /// later arguments should unwind (it would ensure that `_X` gets\n+    /// dropped). However, if no unwind occurs, then `_X` will be\n+    /// unconditionally consumed by the `call`:\n+    ///\n+    /// ```\n+    /// bb {\n+    ///   ...\n+    ///   _R = CALL(foo, _X, ...)\n+    /// }\n+    /// ```\n+    ///\n+    /// However, `_X` is still registered to be dropped, and so if we\n+    /// do nothing else, we would generate a `DROP(_X)` that occurs\n+    /// after the call. This will later be optimized out by the\n+    /// drop-elaboation code, but in the meantime it can lead to\n+    /// spurious borrow-check errors -- the problem, ironically, is\n+    /// not the `DROP(_X)` itself, but the (spurious) unwind pathways\n+    /// that it creates. See #64391 for an example.\n+    pub fn record_operands_moved(\n+        &mut self,\n+        operands: &[Operand<'tcx>],\n+    ) {\n+        let scope = match self.local_scope() {\n+            None => {\n+                // if there is no local scope, operands won't be dropped anyway\n+                return;\n+            }\n+\n+            Some(local_scope) => {\n+                self.scopes.iter_mut().find(|scope| scope.region_scope == local_scope)\n+                    .unwrap_or_else(|| bug!(\"scope {:?} not found in scope list!\", local_scope))\n+            }\n+        };\n+\n+        // look for moves of a local variable, like `MOVE(_X)`\n+        let locals_moved = operands.iter().flat_map(|operand| match operand {\n+            Operand::Copy(_) | Operand::Constant(_) => None,\n+            Operand::Move(place) => place.as_local(),\n+        });\n+\n+        for local in locals_moved {\n+            // check if we have a Drop for this operand and -- if so\n+            // -- add it to the list of moved operands. Note that this\n+            // local might not have been an operand created for this\n+            // call, it could come from other places too.\n+            if scope.drops.iter().any(|drop| drop.local == local && drop.kind == DropKind::Value) {\n+                scope.moved_locals.push(local);\n+            }\n+        }\n+    }\n+\n     // Other\n     // =====\n     /// Branch based on a boolean condition.\n@@ -1020,6 +1095,7 @@ fn build_scope_drops<'tcx>(\n     last_unwind_to: BasicBlock,\n     arg_count: usize,\n     generator_drop: bool,\n+    is_cached_path: bool,\n ) -> BlockAnd<()> {\n     debug!(\"build_scope_drops({:?} -> {:?})\", block, scope);\n \n@@ -1046,8 +1122,17 @@ fn build_scope_drops<'tcx>(\n         let drop_data = &scope.drops[drop_idx];\n         let source_info = scope.source_info(drop_data.span);\n         let local = drop_data.local;\n+\n         match drop_data.kind {\n             DropKind::Value => {\n+                // If the operand has been moved, and we are not on an unwind\n+                // path, then don't generate the drop. (We only take this into\n+                // account for non-unwind paths so as not to disturb the\n+                // caching mechanism.)\n+                if !is_cached_path && scope.moved_locals.iter().any(|&o| o == local) {\n+                    continue;\n+                }\n+\n                 let unwind_to = get_unwind_to(scope, is_generator, drop_idx, generator_drop)\n                     .unwrap_or(last_unwind_to);\n "}, {"sha": "795721f3b3f28637a1fd308ca3f6503ead91764a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1407,10 +1407,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     }\n                 }\n                 ty::FnPtr(_) => {\n-                    if self.mode.requires_const_checking() {\n+                    let unleash_miri = self\n+                        .tcx\n+                        .sess\n+                        .opts\n+                        .debugging_opts\n+                        .unleash_the_miri_inside_of_you;\n+                    if self.mode.requires_const_checking() && !unleash_miri {\n                         let mut err = self.tcx.sess.struct_span_err(\n                             self.span,\n-                            &format!(\"function pointers are not allowed in const fn\"));\n+                            \"function pointers are not allowed in const fn\"\n+                        );\n                         err.emit();\n                     }\n                 }"}, {"sha": "0d85be83e12e04d437889a85fdf594ddd81fae87", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -26,6 +26,8 @@\n use crate::Resolver;\n use crate::resolve_imports::ImportDirectiveSubclass;\n \n+use errors::pluralise;\n+\n use rustc::util::nodemap::NodeMap;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n@@ -295,7 +297,7 @@ impl Resolver<'_> {\n                 }).collect::<Vec<String>>();\n             span_snippets.sort();\n             let msg = format!(\"unused import{}{}\",\n-                            if len > 1 { \"s\" } else { \"\" },\n+                            pluralise!(len),\n                             if !span_snippets.is_empty() {\n                                 format!(\": {}\", span_snippets.join(\", \"))\n                             } else {"}, {"sha": "cd1689f21cc6e3d650089de0acf4d953cd8b17a6", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -424,7 +424,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                 } else {\n                     err.note(\"did you mean to use one of the enum's variants?\");\n                 }\n-            },\n+            }\n             (Res::Def(DefKind::Struct, def_id), _) if ns == ValueNS => {\n                 if let Some((ctor_def, ctor_vis))\n                         = self.r.struct_constructors.get(&def_id).cloned() {\n@@ -445,6 +445,12 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _), _) if ns == ValueNS => {\n                 bad_struct_syntax_suggestion();\n             }\n+            (Res::Def(DefKind::Ctor(_, CtorKind::Fn), _), _) if ns == ValueNS => {\n+                err.span_label(\n+                    span,\n+                    format!(\"did you mean `{} ( /* fields */ )`?\", path_str),\n+                );\n+            }\n             (Res::SelfTy(..), _) if ns == ValueNS => {\n                 err.span_label(span, fallback_label);\n                 err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");"}, {"sha": "360343169bc3d83dc0b09e1e815f46b050fb79be", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -11,7 +11,7 @@ use crate::{Resolver, ResolutionError, Segment, ModuleKind};\n use crate::{names_to_string, module_to_string};\n use crate::diagnostics::Suggestion;\n \n-use errors::Applicability;\n+use errors::{Applicability, pluralise};\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n@@ -728,7 +728,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n             let msg = format!(\n                 \"unresolved import{} {}\",\n-                if paths.len() > 1 { \"s\" } else { \"\" },\n+                pluralise!(paths.len()),\n                 paths.join(\", \"),\n             );\n "}, {"sha": "718d12484f741bf9cc5e78c3d059be0d677a2f57", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1346,7 +1346,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 span,\n                 E0191,\n                 \"the value of the associated type{} {} must be specified\",\n-                if associated_types.len() == 1 { \"\" } else { \"s\" },\n+                pluralise!(associated_types.len()),\n                 names,\n             );\n             let (suggest, potential_assoc_types_spans) ="}, {"sha": "710d847384e6cb28fcc5f295b820a4311bf4bed1", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_builtin_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         callee_ty: Ty<'tcx>,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n@@ -425,7 +425,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         self.check_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             inputs,\n             &expected_arg_tys[..],\n             arg_exprs,\n@@ -439,7 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_deferred_closure_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n         fn_sig: ty::FnSig<'tcx>,\n@@ -458,7 +458,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.check_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             fn_sig.inputs(),\n             &expected_arg_tys,\n             arg_exprs,\n@@ -472,14 +472,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_overloaded_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n         method_callee: MethodCallee<'tcx>,\n     ) -> Ty<'tcx> {\n         let output_type = self.check_method_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             Ok(method_callee),\n             arg_exprs,\n             TupleArgumentsFlag::TupleArguments,"}, {"sha": "d98e1f3e1283fa3306bbd4492109846e971e504e", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -163,7 +163,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         // Just ignore error types.\n         if a.references_error() || b.references_error() {\n-            return success(vec![], b, vec![]);\n+            return success(vec![], self.fcx.tcx.types.err, vec![]);\n         }\n \n         if a.is_never() {\n@@ -821,7 +821,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (adjustments, _) = self.register_infer_ok_obligations(ok);\n         self.apply_adjustments(expr, adjustments);\n-        Ok(target)\n+        Ok(if expr_ty.references_error() {\n+            self.tcx.types.err\n+        } else {\n+            target\n+        })\n     }\n \n     /// Same as `try_coerce()`, but without side-effects."}, {"sha": "e34a2c6f61c24dd5139f45258dc5907658bd2281", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -17,7 +17,7 @@ use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n use crate::astconv::AstConv as _;\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use syntax::ast;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::source_map::Span;\n@@ -796,7 +796,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Call the generic checker.\n         self.check_method_argument_types(\n             span,\n-            expr.span,\n+            expr,\n             method,\n             &args[1..],\n             DontTupleArguments,\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             struct_span_err!(tcx.sess, span, E0063,\n                              \"missing field{} {}{} in initializer of `{}`\",\n-                             if remaining_fields.len() == 1 { \"\" } else { \"s\" },\n+                             pluralise!(remaining_fields.len()),\n                              remaining_fields_names,\n                              truncated_fields_error,\n                              adt_ty)"}, {"sha": "a7c307fdf894f760cf042eed69c04cf8434dc152", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -181,13 +181,34 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n         let scope = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n \n-        // Record the unadjusted type\n+        // If there are adjustments, then record the final type --\n+        // this is the actual value that is being produced.\n+        if let Some(adjusted_ty) = self.fcx.tables.borrow().expr_ty_adjusted_opt(expr) {\n+            self.record(adjusted_ty, scope, Some(expr), expr.span);\n+        }\n+\n+        // Also record the unadjusted type (which is the only type if\n+        // there are no adjustments). The reason for this is that the\n+        // unadjusted value is sometimes a \"temporary\" that would wind\n+        // up in a MIR temporary.\n+        //\n+        // As an example, consider an expression like `vec![].push()`.\n+        // Here, the `vec![]` would wind up MIR stored into a\n+        // temporary variable `t` which we can borrow to invoke\n+        // `<Vec<_>>::push(&mut t)`.\n+        //\n+        // Note that an expression can have many adjustments, and we\n+        // are just ignoring those intermediate types. This is because\n+        // those intermediate values are always linearly \"consumed\" by\n+        // the other adjustments, and hence would never be directly\n+        // captured in the MIR.\n+        //\n+        // (Note that this partly relies on the fact that the `Deref`\n+        // traits always return references, which means their content\n+        // can be reborrowed without needing to spill to a temporary.\n+        // If this were not the case, then we could conceivably have\n+        // to create intermediate temporaries.)\n         let ty = self.fcx.tables.borrow().expr_ty(expr);\n         self.record(ty, scope, Some(expr), expr.span);\n-\n-        // Also include the adjusted types, since these can result in MIR locals\n-        for adjustment in self.fcx.tables.borrow().expr_adjustments(expr) {\n-            self.record(adjustment.target, scope, Some(expr), expr.span);\n-        }\n     }\n }"}, {"sha": "74e4f28255b162cb510845aa7cfbbc6446daf0fa", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -5,7 +5,7 @@ use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n use crate::util::nodemap::FxHashSet;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n@@ -560,7 +560,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let help = format!(\"{an}other candidate{s} {were} found in the following \\\n                                         trait{s}, perhaps add a `use` for {one_of_them}:\",\n                                     an = if candidates.len() == 1 {\"an\" } else { \"\" },\n-                                    s = if candidates.len() == 1 { \"\" } else { \"s\" },\n+                                    s = pluralise!(candidates.len()),\n                                     were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n                                     one_of_them = if candidates.len() == 1 {\n                                         \"it\""}, {"sha": "6c8c5ae5123582cbccd9c6b6d0b80231edea73c3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 131, "deletions": 35, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -88,7 +88,7 @@ pub mod intrinsic;\n mod op;\n \n use crate::astconv::{AstConv, PathSeg};\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n use rustc::hir::def::{CtorOf, Res, DefKind};\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -153,7 +153,7 @@ use self::method::{MethodCallee, SelfSource};\n use self::TupleArgumentsFlag::*;\n \n /// The type of a local binding, including the revealed type for anon types.\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub struct LocalTy<'tcx> {\n     decl_ty: Ty<'tcx>,\n     revealed_ty: Ty<'tcx>\n@@ -2340,16 +2340,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // If span arose from a desugaring of `if` or `while`, then it is the condition itself,\n             // which diverges, that we are about to lint on. This gives suboptimal diagnostics.\n             // Instead, stop here so that the `if`- or `while`-expression's block is linted instead.\n-            if !span.is_desugaring(DesugaringKind::CondTemporary) {\n+            if !span.is_desugaring(DesugaringKind::CondTemporary) &&\n+                !span.is_desugaring(DesugaringKind::Async)\n+            {\n                 self.diverges.set(Diverges::WarnedAlways);\n \n                 debug!(\"warn_if_unreachable: id={:?} span={:?} kind={}\", id, span, kind);\n \n                 let msg = format!(\"unreachable {}\", kind);\n                 self.tcx().struct_span_lint_hir(lint::builtin::UNREACHABLE_CODE, id, span, &msg)\n-                    .span_note(\n+                    .span_label(span, &msg)\n+                    .span_label(\n                         orig_span,\n-                        custom_note.unwrap_or(\"any code following this expression is unreachable\")\n+                        custom_note.unwrap_or(\"any code following this expression is unreachable\"),\n                     )\n                     .emit();\n             }\n@@ -2614,16 +2617,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// As `instantiate_type_scheme`, but for the bounds found in a\n     /// generic type scheme.\n-    fn instantiate_bounds(&self, span: Span, def_id: DefId, substs: SubstsRef<'tcx>)\n-                          -> ty::InstantiatedPredicates<'tcx> {\n+    fn instantiate_bounds(\n+        &self,\n+        span: Span,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> (ty::InstantiatedPredicates<'tcx>, Vec<Span>) {\n         let bounds = self.tcx.predicates_of(def_id);\n+        let spans: Vec<Span> = bounds.predicates.iter().map(|(_, span)| *span).collect();\n         let result = bounds.instantiate(self.tcx, substs);\n         let result = self.normalize_associated_types_in(span, &result);\n-        debug!(\"instantiate_bounds(bounds={:?}, substs={:?}) = {:?}\",\n+        debug!(\n+            \"instantiate_bounds(bounds={:?}, substs={:?}) = {:?}, {:?}\",\n                bounds,\n                substs,\n-               result);\n-        result\n+            result,\n+            spans,\n+        );\n+        (result, spans)\n     }\n \n     /// Replaces the opaque types from the given value with type variables,\n@@ -3059,12 +3070,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_method_argument_types(\n         &self,\n         sp: Span,\n-        expr_sp: Span,\n+        expr: &'tcx hir::Expr,\n         method: Result<MethodCallee<'tcx>, ()>,\n         args_no_rcvr: &'tcx [hir::Expr],\n         tuple_arguments: TupleArgumentsFlag,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n+\n         let has_error = match method {\n             Ok(method) => {\n                 method.substs.references_error() || method.sig.references_error()\n@@ -3079,8 +3091,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..])],\n             };\n \n-            self.check_argument_types(sp, expr_sp, &err_inputs[..], &[], args_no_rcvr,\n-                                      false, tuple_arguments, None);\n+            self.check_argument_types(\n+                sp,\n+                expr,\n+                &err_inputs[..],\n+                &[],\n+                args_no_rcvr,\n+                false,\n+                tuple_arguments,\n+                None,\n+            );\n             return self.tcx.types.err;\n         }\n \n@@ -3092,9 +3112,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             method.sig.output(),\n             &method.sig.inputs()[1..]\n         );\n-        self.check_argument_types(sp, expr_sp, &method.sig.inputs()[1..], &expected_arg_tys[..],\n-                                  args_no_rcvr, method.sig.c_variadic, tuple_arguments,\n-                                  self.tcx.hir().span_if_local(method.def_id));\n+        self.check_argument_types(\n+            sp,\n+            expr,\n+            &method.sig.inputs()[1..],\n+            &expected_arg_tys[..],\n+            args_no_rcvr,\n+            method.sig.c_variadic,\n+            tuple_arguments,\n+            self.tcx.hir().span_if_local(method.def_id),\n+        );\n         method.sig.output()\n     }\n \n@@ -3171,7 +3198,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_argument_types(\n         &self,\n         sp: Span,\n-        expr_sp: Span,\n+        expr: &'tcx hir::Expr,\n         fn_inputs: &[Ty<'tcx>],\n         expected_arg_tys: &[Ty<'tcx>],\n         args: &'tcx [hir::Expr],\n@@ -3180,7 +3207,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         def_span: Option<Span>,\n     ) {\n         let tcx = self.tcx;\n-\n         // Grab the argument types, supplying fresh type variables\n         // if the wrong number of arguments were supplied\n         let supplied_arg_count = if tuple_arguments == DontTupleArguments {\n@@ -3191,8 +3217,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // All the input types from the fn signature must outlive the call\n         // so as to validate implied bounds.\n-        for &fn_input_ty in fn_inputs {\n-            self.register_wf_obligation(fn_input_ty, sp, traits::MiscObligation);\n+        for (fn_input_ty, arg_expr) in fn_inputs.iter().zip(args.iter()) {\n+            self.register_wf_obligation(fn_input_ty, arg_expr.span, traits::MiscObligation);\n         }\n \n         let expected_arg_count = fn_inputs.len();\n@@ -3214,7 +3240,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_label(def_s, \"defined here\");\n             }\n             if sugg_unit {\n-                let sugg_span = tcx.sess.source_map().end_point(expr_sp);\n+                let sugg_span = tcx.sess.source_map().end_point(expr.span);\n                 // remove closing `)` from the span\n                 let sugg_span = sugg_span.shrink_to_lo();\n                 err.span_suggestion(\n@@ -3308,6 +3334,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // the call. This helps coercions.\n             if check_closures {\n                 self.select_obligations_where_possible(false, |errors| {\n+                    self.point_at_type_arg_instead_of_call_if_possible(errors, expr);\n                     self.point_at_arg_instead_of_call_if_possible(\n                         errors,\n                         &final_arg_types[..],\n@@ -3445,6 +3472,50 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Given a vec of evaluated `FullfillmentError`s and an `fn` call expression, we walk the\n+    /// `PathSegment`s and resolve their type parameters to see if any of the `FullfillmentError`s\n+    /// were caused by them. If they were, we point at the corresponding type argument's span\n+    /// instead of the `fn` call path span.\n+    fn point_at_type_arg_instead_of_call_if_possible(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'_>>,\n+        call_expr: &'tcx hir::Expr,\n+    ) {\n+        if let hir::ExprKind::Call(path, _) = &call_expr.node {\n+            if let hir::ExprKind::Path(qpath) = &path.node {\n+                if let hir::QPath::Resolved(_, path) = &qpath {\n+                    for error in errors {\n+                        if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+                            // If any of the type arguments in this path segment caused the\n+                            // `FullfillmentError`, point at its span (#61860).\n+                            for arg in path.segments.iter()\n+                                .filter_map(|seg| seg.args.as_ref())\n+                                .flat_map(|a| a.args.iter())\n+                            {\n+                                if let hir::GenericArg::Type(hir_ty) = &arg {\n+                                    if let hir::TyKind::Path(\n+                                        hir::QPath::TypeRelative(..),\n+                                    ) = &hir_ty.node {\n+                                        // Avoid ICE with associated types. As this is best\n+                                        // effort only, it's ok to ignore the case. It\n+                                        // would trigger in `is_send::<T::AssocType>();`\n+                                        // from `typeck-default-trait-impl-assoc-type.rs`.\n+                                    } else {\n+                                        let ty = AstConv::ast_ty_to_ty(self, hir_ty);\n+                                        let ty = self.resolve_vars_if_possible(&ty);\n+                                        if ty == predicate.skip_binder().self_ty() {\n+                                            error.obligation.cause.span = hir_ty.span;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // AST fragment checking\n     fn check_lit(&self,\n                  lit: &hir::Lit,\n@@ -3601,7 +3672,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.write_user_type_annotation_from_substs(hir_id, did, substs, None);\n \n             // Check bounds on type arguments used in the path.\n-            let bounds = self.instantiate_bounds(path_span, did, substs);\n+            let (bounds, _) = self.instantiate_bounds(path_span, did, substs);\n             let cause = traits::ObligationCause::new(\n                 path_span,\n                 self.body_id,\n@@ -3751,15 +3822,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let Some(ref init) = local.init {\n             let init_ty = self.check_decl_initializer(local, &init);\n-            if init_ty.references_error() {\n-                self.write_ty(local.hir_id, init_ty);\n-            }\n+            self.overwrite_local_ty_if_err(local, t, init_ty);\n         }\n \n         self.check_pat_top(&local.pat, t, None);\n         let pat_ty = self.node_ty(local.pat.hir_id);\n-        if pat_ty.references_error() {\n-            self.write_ty(local.hir_id, pat_ty);\n+        self.overwrite_local_ty_if_err(local, t, pat_ty);\n+    }\n+\n+    fn overwrite_local_ty_if_err(&self, local: &'tcx hir::Local, decl_ty: Ty<'tcx>, ty: Ty<'tcx>) {\n+        if ty.references_error() {\n+            // Override the types everywhere with `types.err` to avoid knock down errors.\n+            self.write_ty(local.hir_id, ty);\n+            self.write_ty(local.pat.hir_id, ty);\n+            let local_ty = LocalTy {\n+                decl_ty,\n+                revealed_ty: ty,\n+            };\n+            self.locals.borrow_mut().insert(local.hir_id, local_ty);\n+            self.locals.borrow_mut().insert(local.pat.hir_id, local_ty);\n         }\n     }\n \n@@ -4725,13 +4806,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // First, store the \"user substs\" for later.\n         self.write_user_type_annotation_from_substs(hir_id, def_id, substs, user_self_ty);\n \n-        // Add all the obligations that are required, substituting and\n-        // normalized appropriately.\n-        let bounds = self.instantiate_bounds(span, def_id, &substs);\n-        self.add_obligations_for_parameters(\n-            traits::ObligationCause::new(span, self.body_id, traits::ItemObligation(def_id)),\n-            &bounds,\n-        );\n+        self.add_required_obligations(span, def_id, &substs);\n \n         // Substitute the values for the type parameters into the type of\n         // the referenced item.\n@@ -4768,6 +4843,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         (ty_substituted, res)\n     }\n \n+    /// Add all the obligations that are required, substituting and normalized appropriately.\n+    fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {\n+        let (bounds, spans) = self.instantiate_bounds(span, def_id, &substs);\n+\n+        for (i, mut obligation) in traits::predicates_for_generics(\n+            traits::ObligationCause::new(\n+                span,\n+                self.body_id,\n+                traits::ItemObligation(def_id),\n+            ),\n+            self.param_env,\n+            &bounds,\n+        ).into_iter().enumerate() {\n+            // This makes the error point at the bound, but we want to point at the argument\n+            if let Some(span) = spans.get(i) {\n+                obligation.cause.code = traits::BindingObligation(def_id, *span);\n+            }\n+            self.register_predicate(obligation);\n+        }\n+    }\n+\n     fn check_rustc_args_require_const(&self,\n                                       def_id: DefId,\n                                       hir_id: hir::HirId,\n@@ -4935,5 +5031,5 @@ fn fatally_break_rust(sess: &Session) {\n }\n \n fn potentially_plural_count(count: usize, word: &str) -> String {\n-    format!(\"{} {}{}\", count, word, if count == 1 { \"\" } else { \"s\" })\n+    format!(\"{} {}{}\", count, word, pluralise!(count))\n }"}, {"sha": "d687a5084e23103351ccab218f10ce190f9c1f2b", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,6 +1,6 @@\n use crate::check::FnCtxt;\n use crate::util::nodemap::FxHashMap;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc::hir::{self, PatKind, Pat, HirId};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -676,18 +676,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         } else {\n             // Pattern has wrong number of fields.\n-            self.e0023(pat.span, res, &subpats, &variant.fields);\n+            self.e0023(pat.span, res, &subpats, &variant.fields, expected);\n             on_error();\n             return tcx.types.err;\n         }\n         pat_ty\n     }\n \n-    fn e0023(&self, pat_span: Span, res: Res, subpats: &'tcx [P<Pat>], fields: &[ty::FieldDef]) {\n-        let subpats_ending = if subpats.len() == 1 { \"\" } else { \"s\" };\n-        let fields_ending = if fields.len() == 1 { \"\" } else { \"s\" };\n+    fn e0023(\n+        &self,\n+        pat_span: Span,\n+        res: Res,\n+        subpats: &'tcx [P<Pat>],\n+        fields: &[ty::FieldDef],\n+        expected: Ty<'tcx>\n+    ) {\n+        let subpats_ending = pluralise!(subpats.len());\n+        let fields_ending = pluralise!(fields.len());\n+        let missing_parenthesis = match expected.sty {\n+            ty::Adt(_, substs) if fields.len() == 1 => {\n+                let field_ty = fields[0].ty(self.tcx, substs);\n+                match field_ty.sty {\n+                    ty::Tuple(_) => field_ty.tuple_fields().count() == subpats.len(),\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        };\n         let res_span = self.tcx.def_span(res.def_id());\n-        struct_span_err!(\n+        let mut err = struct_span_err!(\n             self.tcx.sess,\n             pat_span,\n             E0023,\n@@ -697,15 +714,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             res.descr(),\n             fields.len(),\n             fields_ending,\n-        )\n-            .span_label(pat_span, format!(\n+        );\n+        err.span_label(pat_span, format!(\n                 \"expected {} field{}, found {}\",\n                 fields.len(),\n                 fields_ending,\n                 subpats.len(),\n             ))\n-            .span_label(res_span, format!(\"{} defined here\", res.descr()))\n-            .emit();\n+            .span_label(res_span, format!(\"{} defined here\", res.descr()));\n+\n+        if missing_parenthesis {\n+            err.multipart_suggestion(\n+                \"missing parenthesis\",\n+                vec![(subpats[0].span.shrink_to_lo(), \"(\".to_string()),\n+                    (subpats[subpats.len()-1].span.shrink_to_hi(), \")\".to_string())],\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+\n+        err.emit();\n     }\n \n     fn check_pat_tuple(\n@@ -1103,10 +1130,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0527,\n             \"pattern requires {} element{} but array has {}\",\n             min_len,\n-            if min_len != 1 { \"s\" } else { \"\" },\n+            pluralise!(min_len),\n             size,\n         )\n-        .span_label(span, format!(\"expected {} element{}\", size, if size != 1 { \"s\" } else { \"\" }))\n+        .span_label(span, format!(\"expected {} element{}\", size, pluralise!(size)))\n         .emit();\n     }\n \n@@ -1117,14 +1144,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0528,\n             \"pattern requires at least {} element{} but array has {}\",\n             min_len,\n-            if min_len != 1 { \"s\" } else { \"\" },\n+            pluralise!(min_len),\n             size,\n         ).span_label(\n             span,\n             format!(\n                 \"pattern cannot match array of {} element{}\",\n                 size,\n-                if size != 1 { \"s\" } else { \"\" },\n+                pluralise!(size),\n             ),\n         ).emit();\n     }"}, {"sha": "1cc71ea5649de23e056dc3a559a7643702e79149", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -3,7 +3,6 @@\n // substitutions.\n \n use crate::check::FnCtxt;\n-use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -407,7 +406,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         if !errors_buffer.is_empty() {\n             errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n             for diag in errors_buffer.drain(..) {\n-                DiagnosticBuilder::new_diagnostic(self.tcx().sess.diagnostic(), diag).emit();\n+                self.tcx().sess.diagnostic().emit_diagnostic(&diag);\n             }\n         }\n     }"}, {"sha": "010e4cf6cd0d53c8bee7bc78224a6dedb63d7799", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -193,6 +193,7 @@ pub fn new_handler(error_format: ErrorOutputType,\n                     short,\n                     sessopts.debugging_opts.teach,\n                     sessopts.debugging_opts.terminal_width,\n+                    false,\n                 ).ui_testing(ui_testing)\n             )\n         },\n@@ -205,6 +206,7 @@ pub fn new_handler(error_format: ErrorOutputType,\n                     source_map,\n                     pretty,\n                     json_rendered,\n+                    false,\n                 ).ui_testing(ui_testing)\n             )\n         },"}, {"sha": "424239c9982373b25a4981f800dd8a07b8ff1992", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -401,7 +401,7 @@ pub fn make_test(s: &str,\n         // Any errors in parsing should also appear when the doctest is compiled for real, so just\n         // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None);\n+        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n         // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n         let handler = Handler::with_emitter(false, None, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);"}, {"sha": "da136ca6bf68dcbf6d9ff30fa607c0bcb2806d3e", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -940,7 +940,7 @@ impl Stdio {\n     /// }\n     ///\n     /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n-    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\\n\");\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\");\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn piped() -> Stdio { Stdio(imp::Stdio::MakePipe) }"}, {"sha": "a6be5b101788e36b2e343213083478793e0b71e2", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1048,9 +1048,6 @@ impl<'a> ExtCtxt<'a> {\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }\n-    pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.parse_sess.span_diagnostic.span_unimpl(sp, msg);\n-    }\n     pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }"}, {"sha": "f903b66e2961d4e2487bd58ae634b195b283b739", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 9, "deletions": 319, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,33 +1,28 @@\n-use crate::ast::{self, Ident, Generics, Expr, BlockCheckMode, UnOp, PatKind};\n+use crate::ast::{self, Ident, Expr, BlockCheckMode, UnOp, PatKind};\n use crate::attr;\n-use crate::source_map::{dummy_spanned, respan, Spanned};\n+use crate::source_map::{respan, Spanned};\n use crate::ext::base::ExtCtxt;\n use crate::ptr::P;\n use crate::symbol::{kw, sym, Symbol};\n use crate::ThinVec;\n \n-use rustc_target::spec::abi::Abi;\n use syntax_pos::{Pos, Span};\n \n-// Left so that Cargo tests don't break, this can be removed once those no longer use it\n-pub trait AstBuilder {}\n-\n impl<'a> ExtCtxt<'a> {\n     pub fn path(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, false, strs, vec![], vec![])\n+        self.path_all(span, false, strs, vec![])\n     }\n     pub fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path {\n         self.path(span, vec![id])\n     }\n     pub fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, true, strs, vec![], vec![])\n+        self.path_all(span, true, strs, vec![])\n     }\n     pub fn path_all(&self,\n                 span: Span,\n                 global: bool,\n                 mut idents: Vec<ast::Ident> ,\n-                args: Vec<ast::GenericArg>,\n-                constraints: Vec<ast::AssocTyConstraint> )\n+                args: Vec<ast::GenericArg>)\n                 -> ast::Path {\n         assert!(!idents.is_empty());\n         let add_root = global && !idents[0].is_path_segment_keyword();\n@@ -39,8 +34,8 @@ impl<'a> ExtCtxt<'a> {\n         segments.extend(idents.into_iter().map(|ident| {\n             ast::PathSegment::from_ident(ident.with_span_pos(span))\n         }));\n-        let args = if !args.is_empty() || !constraints.is_empty() {\n-            ast::AngleBracketedArgs { args, constraints, span }.into()\n+        let args = if !args.is_empty() {\n+            ast::AngleBracketedArgs { args, constraints: Vec::new(), span }.into()\n         } else {\n             None\n         };\n@@ -52,42 +47,6 @@ impl<'a> ExtCtxt<'a> {\n         ast::Path { span, segments }\n     }\n \n-    /// Constructs a qualified path.\n-    ///\n-    /// Constructs a path like `<self_type as trait_path>::ident`.\n-    pub fn qpath(&self,\n-             self_type: P<ast::Ty>,\n-             trait_path: ast::Path,\n-             ident: ast::Ident)\n-             -> (ast::QSelf, ast::Path) {\n-        self.qpath_all(self_type, trait_path, ident, vec![], vec![])\n-    }\n-\n-    /// Constructs a qualified path.\n-    ///\n-    /// Constructs a path like `<self_type as trait_path>::ident<'a, T, A = Bar>`.\n-    pub fn qpath_all(&self,\n-                 self_type: P<ast::Ty>,\n-                 trait_path: ast::Path,\n-                 ident: ast::Ident,\n-                 args: Vec<ast::GenericArg>,\n-                 constraints: Vec<ast::AssocTyConstraint>)\n-                 -> (ast::QSelf, ast::Path) {\n-        let mut path = trait_path;\n-        let args = if !args.is_empty() || !constraints.is_empty() {\n-            ast::AngleBracketedArgs { args, constraints, span: ident.span }.into()\n-        } else {\n-            None\n-        };\n-        path.segments.push(ast::PathSegment { ident, id: ast::DUMMY_NODE_ID, args });\n-\n-        (ast::QSelf {\n-            ty: self_type,\n-            path_span: path.span,\n-            position: path.segments.len() - 1\n-        }, path)\n-    }\n-\n     pub fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy {\n         ast::MutTy {\n             ty,\n@@ -149,10 +108,6 @@ impl<'a> ExtCtxt<'a> {\n                 ast::TyKind::Ptr(self.ty_mt(ty, mutbl)))\n     }\n \n-    pub fn ty_infer(&self, span: Span) -> P<ast::Ty> {\n-        self.ty(span, ast::TyKind::Infer)\n-    }\n-\n     pub fn typaram(&self,\n                span: Span,\n                ident: ast::Ident,\n@@ -220,14 +175,6 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n-    pub fn stmt_semi(&self, expr: P<ast::Expr>) -> ast::Stmt {\n-        ast::Stmt {\n-            id: ast::DUMMY_NODE_ID,\n-            span: expr.span,\n-            node: ast::StmtKind::Semi(expr),\n-        }\n-    }\n-\n     pub fn stmt_let(&self, sp: Span, mutbl: bool, ident: ast::Ident,\n                 ex: P<ast::Expr>) -> ast::Stmt {\n         let pat = if mutbl {\n@@ -251,34 +198,6 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n-    pub fn stmt_let_typed(&self,\n-                      sp: Span,\n-                      mutbl: bool,\n-                      ident: ast::Ident,\n-                      typ: P<ast::Ty>,\n-                      ex: P<ast::Expr>)\n-                      -> ast::Stmt {\n-        let pat = if mutbl {\n-            let binding_mode = ast::BindingMode::ByValue(ast::Mutability::Mutable);\n-            self.pat_ident_binding_mode(sp, ident, binding_mode)\n-        } else {\n-            self.pat_ident(sp, ident)\n-        };\n-        let local = P(ast::Local {\n-            pat,\n-            ty: Some(typ),\n-            init: Some(ex),\n-            id: ast::DUMMY_NODE_ID,\n-            span: sp,\n-            attrs: ThinVec::new(),\n-        });\n-        ast::Stmt {\n-            id: ast::DUMMY_NODE_ID,\n-            node: ast::StmtKind::Local(local),\n-            span: sp,\n-        }\n-    }\n-\n     // Generates `let _: Type;`, which is usually used for type assertions.\n     pub fn stmt_let_type_only(&self, span: Span, ty: P<ast::Ty>) -> ast::Stmt {\n         let local = P(ast::Local {\n@@ -333,11 +252,6 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(path.span, ast::ExprKind::Path(None, path))\n     }\n \n-    /// Constructs a `QPath` expression.\n-    pub fn expr_qpath(&self, span: Span, qself: ast::QSelf, path: ast::Path) -> P<ast::Expr> {\n-        self.expr(span, ast::ExprKind::Path(Some(qself), path))\n-    }\n-\n     pub fn expr_ident(&self, span: Span, id: ast::Ident) -> P<ast::Expr> {\n         self.expr_path(self.path_ident(span, id))\n     }\n@@ -351,27 +265,12 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn expr_deref(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n-        self.expr_unary(sp, UnOp::Deref, e)\n-    }\n-    pub fn expr_unary(&self, sp: Span, op: ast::UnOp, e: P<ast::Expr>) -> P<ast::Expr> {\n-        self.expr(sp, ast::ExprKind::Unary(op, e))\n+        self.expr(sp, ast::ExprKind::Unary(UnOp::Deref, e))\n     }\n \n-    pub fn expr_field_access(\n-        &self, sp: Span, expr: P<ast::Expr>, ident: ast::Ident,\n-    ) -> P<ast::Expr> {\n-        self.expr(sp, ast::ExprKind::Field(expr, ident.with_span_pos(sp)))\n-    }\n-    pub fn expr_tup_field_access(&self, sp: Span, expr: P<ast::Expr>, idx: usize) -> P<ast::Expr> {\n-        let ident = Ident::new(sym::integer(idx), sp);\n-        self.expr(sp, ast::ExprKind::Field(expr, ident))\n-    }\n     pub fn expr_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::AddrOf(ast::Mutability::Immutable, e))\n     }\n-    pub fn expr_mut_addr_of(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n-        self.expr(sp, ast::ExprKind::AddrOf(ast::Mutability::Mutable, e))\n-    }\n \n     pub fn expr_call(\n         &self, span: Span, expr: P<ast::Expr>, args: Vec<P<ast::Expr>>,\n@@ -427,39 +326,17 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_lit(span, ast::LitKind::Int(i as u128,\n                                               ast::LitIntType::Unsigned(ast::UintTy::Usize)))\n     }\n-    pub fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n-        if i < 0 {\n-            let i = (-i) as u128;\n-            let lit_ty = ast::LitIntType::Signed(ast::IntTy::Isize);\n-            let lit = self.expr_lit(sp, ast::LitKind::Int(i, lit_ty));\n-            self.expr_unary(sp, ast::UnOp::Neg, lit)\n-        } else {\n-            self.expr_lit(sp, ast::LitKind::Int(i as u128,\n-                                                ast::LitIntType::Signed(ast::IntTy::Isize)))\n-        }\n-    }\n     pub fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Int(u as u128,\n                                             ast::LitIntType::Unsigned(ast::UintTy::U32)))\n     }\n-    pub fn expr_u16(&self, sp: Span, u: u16) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::Int(u as u128,\n-                                            ast::LitIntType::Unsigned(ast::UintTy::U16)))\n-    }\n-    pub fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::Int(u as u128, ast::LitIntType::Unsigned(ast::UintTy::U8)))\n-    }\n     pub fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Bool(value))\n     }\n \n     pub fn expr_vec(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Array(exprs))\n     }\n-    pub fn expr_vec_ng(&self, sp: Span) -> P<ast::Expr> {\n-        self.expr_call_global(sp, self.std_path(&[sym::vec, sym::Vec, sym::new]),\n-                              Vec::new())\n-    }\n     pub fn expr_vec_slice(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr_addr_of(sp, self.expr_vec(sp, exprs))\n     }\n@@ -476,16 +353,6 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_call_global(sp, some, vec![expr])\n     }\n \n-    pub fn expr_none(&self, sp: Span) -> P<ast::Expr> {\n-        let none = self.std_path(&[sym::option, sym::Option, sym::None]);\n-        let none = self.path_global(sp, none);\n-        self.expr_path(none)\n-    }\n-\n-    pub fn expr_break(&self, sp: Span) -> P<ast::Expr> {\n-        self.expr(sp, ast::ExprKind::Break(None, None))\n-    }\n-\n     pub fn expr_tuple(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Tup(exprs))\n     }\n@@ -514,11 +381,6 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_call_global(sp, ok, vec![expr])\n     }\n \n-    pub fn expr_err(&self, sp: Span, expr: P<ast::Expr>) -> P<ast::Expr> {\n-        let err = self.std_path(&[sym::result, sym::Result, sym::Err]);\n-        self.expr_call_global(sp, err, vec![expr])\n-    }\n-\n     pub fn expr_try(&self, sp: Span, head: P<ast::Expr>) -> P<ast::Expr> {\n         let ok = self.std_path(&[sym::result, sym::Result, sym::Ok]);\n         let ok_path = self.path_global(sp, ok);\n@@ -635,10 +497,6 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(span, ast::ExprKind::If(cond, self.block_expr(then), els))\n     }\n \n-    pub fn expr_loop(&self, span: Span, block: P<ast::Block>) -> P<ast::Expr> {\n-        self.expr(span, ast::ExprKind::Loop(block, None))\n-    }\n-\n     pub fn lambda_fn_decl(&self,\n                       span: Span,\n                       fn_decl: P<ast::FnDecl>,\n@@ -659,7 +517,7 @@ impl<'a> ExtCtxt<'a> {\n               body: P<ast::Expr>)\n               -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n-            ids.iter().map(|id| self.param(span, *id, self.ty_infer(span))).collect(),\n+            ids.iter().map(|id| self.param(span, *id, self.ty(span, ast::TyKind::Infer))).collect(),\n             ast::FunctionRetTy::Default(span));\n \n         // FIXME -- We are using `span` as the span of the `|...|`\n@@ -682,16 +540,6 @@ impl<'a> ExtCtxt<'a> {\n         self.lambda(span, vec![ident], body)\n     }\n \n-    pub fn lambda_stmts(&self,\n-                    span: Span,\n-                    ids: Vec<ast::Ident>,\n-                    stmts: Vec<ast::Stmt>)\n-                    -> P<ast::Expr> {\n-        self.lambda(span, ids, self.expr_block(self.block(span, stmts)))\n-    }\n-    pub fn lambda_stmts_0(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Expr> {\n-        self.lambda0(span, self.expr_block(self.block(span, stmts)))\n-    }\n     pub fn lambda_stmts_1(&self, span: Span, stmts: Vec<ast::Stmt>,\n                       ident: ast::Ident) -> P<ast::Expr> {\n         self.lambda1(span, self.expr_block(self.block(span, stmts)), ident)\n@@ -733,43 +581,6 @@ impl<'a> ExtCtxt<'a> {\n         })\n     }\n \n-    pub fn item_fn_poly(&self,\n-                    span: Span,\n-                    name: Ident,\n-                    inputs: Vec<ast::Param> ,\n-                    output: P<ast::Ty>,\n-                    generics: Generics,\n-                    body: P<ast::Block>) -> P<ast::Item> {\n-        self.item(span,\n-                  name,\n-                  Vec::new(),\n-                  ast::ItemKind::Fn(self.fn_decl(inputs, ast::FunctionRetTy::Ty(output)),\n-                              ast::FnHeader {\n-                                  unsafety: ast::Unsafety::Normal,\n-                                  asyncness: dummy_spanned(ast::IsAsync::NotAsync),\n-                                  constness: dummy_spanned(ast::Constness::NotConst),\n-                                  abi: Abi::Rust,\n-                              },\n-                              generics,\n-                              body))\n-    }\n-\n-    pub fn item_fn(&self,\n-               span: Span,\n-               name: Ident,\n-               inputs: Vec<ast::Param> ,\n-               output: P<ast::Ty>,\n-               body: P<ast::Block>\n-              ) -> P<ast::Item> {\n-        self.item_fn_poly(\n-            span,\n-            name,\n-            inputs,\n-            output,\n-            Generics::default(),\n-            body)\n-    }\n-\n     pub fn variant(&self, span: Span, ident: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant {\n         let fields: Vec<_> = tys.into_iter().map(|ty| {\n             ast::StructField {\n@@ -800,52 +611,6 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n-    pub fn item_enum_poly(&self, span: Span, name: Ident,\n-                      enum_definition: ast::EnumDef,\n-                      generics: Generics) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::Enum(enum_definition, generics))\n-    }\n-\n-    pub fn item_enum(&self, span: Span, name: Ident,\n-                 enum_definition: ast::EnumDef) -> P<ast::Item> {\n-        self.item_enum_poly(span, name, enum_definition,\n-                            Generics::default())\n-    }\n-\n-    pub fn item_struct(&self, span: Span, name: Ident,\n-                   struct_def: ast::VariantData) -> P<ast::Item> {\n-        self.item_struct_poly(\n-            span,\n-            name,\n-            struct_def,\n-            Generics::default()\n-        )\n-    }\n-\n-    pub fn item_struct_poly(&self, span: Span, name: Ident,\n-        struct_def: ast::VariantData, generics: Generics) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::Struct(struct_def, generics))\n-    }\n-\n-    pub fn item_mod(&self, span: Span, inner_span: Span, name: Ident,\n-                attrs: Vec<ast::Attribute>,\n-                items: Vec<P<ast::Item>>) -> P<ast::Item> {\n-        self.item(\n-            span,\n-            name,\n-            attrs,\n-            ast::ItemKind::Mod(ast::Mod {\n-                inner: inner_span,\n-                items,\n-                inline: true\n-            })\n-        )\n-    }\n-\n-    pub fn item_extern_crate(&self, span: Span, name: Ident) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::ExternCrate(None))\n-    }\n-\n     pub fn item_static(&self,\n                    span: Span,\n                    name: Ident,\n@@ -865,86 +630,11 @@ impl<'a> ExtCtxt<'a> {\n         self.item(span, name, Vec::new(), ast::ItemKind::Const(ty, expr))\n     }\n \n-    pub fn item_ty_poly(&self, span: Span, name: Ident, ty: P<ast::Ty>,\n-                    generics: Generics) -> P<ast::Item> {\n-        self.item(span, name, Vec::new(), ast::ItemKind::TyAlias(ty, generics))\n-    }\n-\n-    pub fn item_ty(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> P<ast::Item> {\n-        self.item_ty_poly(span, name, ty, Generics::default())\n-    }\n-\n     pub fn attribute(&self, mi: ast::MetaItem) -> ast::Attribute {\n         attr::mk_attr_outer(mi)\n     }\n \n     pub fn meta_word(&self, sp: Span, w: ast::Name) -> ast::MetaItem {\n         attr::mk_word_item(Ident::new(w, sp))\n     }\n-\n-    pub fn meta_list_item_word(&self, sp: Span, w: ast::Name) -> ast::NestedMetaItem {\n-        attr::mk_nested_word_item(Ident::new(w, sp))\n-    }\n-\n-    pub fn meta_list(&self, sp: Span, name: ast::Name, mis: Vec<ast::NestedMetaItem>)\n-                 -> ast::MetaItem {\n-        attr::mk_list_item(Ident::new(name, sp), mis)\n-    }\n-\n-    pub fn meta_name_value(&self, span: Span, name: ast::Name, lit_kind: ast::LitKind)\n-                       -> ast::MetaItem {\n-        attr::mk_name_value_item(Ident::new(name, span), lit_kind, span)\n-    }\n-\n-    pub fn item_use(&self, sp: Span,\n-                vis: ast::Visibility, vp: P<ast::UseTree>) -> P<ast::Item> {\n-        P(ast::Item {\n-            id: ast::DUMMY_NODE_ID,\n-            ident: Ident::invalid(),\n-            attrs: vec![],\n-            node: ast::ItemKind::Use(vp),\n-            vis,\n-            span: sp,\n-            tokens: None,\n-        })\n-    }\n-\n-    pub fn item_use_simple(&self, sp: Span, vis: ast::Visibility, path: ast::Path) -> P<ast::Item> {\n-        self.item_use_simple_(sp, vis, None, path)\n-    }\n-\n-    pub fn item_use_simple_(&self, sp: Span, vis: ast::Visibility,\n-                        rename: Option<ast::Ident>, path: ast::Path) -> P<ast::Item> {\n-        self.item_use(sp, vis, P(ast::UseTree {\n-            span: sp,\n-            prefix: path,\n-            kind: ast::UseTreeKind::Simple(rename, ast::DUMMY_NODE_ID, ast::DUMMY_NODE_ID),\n-        }))\n-    }\n-\n-    pub fn item_use_list(&self, sp: Span, vis: ast::Visibility,\n-                     path: Vec<ast::Ident>, imports: &[ast::Ident]) -> P<ast::Item> {\n-        let imports = imports.iter().map(|id| {\n-            (ast::UseTree {\n-                span: sp,\n-                prefix: self.path(sp, vec![*id]),\n-                kind: ast::UseTreeKind::Simple(None, ast::DUMMY_NODE_ID, ast::DUMMY_NODE_ID),\n-            }, ast::DUMMY_NODE_ID)\n-        }).collect();\n-\n-        self.item_use(sp, vis, P(ast::UseTree {\n-            span: sp,\n-            prefix: self.path(sp, path),\n-            kind: ast::UseTreeKind::Nested(imports),\n-        }))\n-    }\n-\n-    pub fn item_use_glob(&self, sp: Span,\n-                     vis: ast::Visibility, path: Vec<ast::Ident>) -> P<ast::Item> {\n-        self.item_use(sp, vis, P(ast::UseTree {\n-            span: sp,\n-            prefix: self.path(sp, path),\n-            kind: ast::UseTreeKind::Glob,\n-        }))\n-    }\n }"}, {"sha": "dfec9ee28809a098d38d9a2459c077758e856052", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -4,7 +4,7 @@ use crate::parse::{self, token, ParseSess};\n use crate::parse::lexer::comments;\n use crate::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n \n-use errors::{Diagnostic, DiagnosticBuilder};\n+use errors::Diagnostic;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n use syntax_pos::symbol::{kw, sym, Symbol};\n@@ -650,7 +650,7 @@ impl server::Diagnostic for Rustc<'_> {\n         diag.sub(level.to_internal(), msg, MultiSpan::from_spans(spans), None);\n     }\n     fn emit(&mut self, diag: Self::Diagnostic) {\n-        DiagnosticBuilder::new_diagnostic(&self.sess.span_diagnostic, diag).emit()\n+        self.sess.span_diagnostic.emit_diagnostic(&diag);\n     }\n }\n "}, {"sha": "f9c07e3a2e4ff43e2449edea8cec164dcf82a270", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -8,6 +8,7 @@ use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n \n+use errors::pluralise;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::hygiene::{ExpnId, Transparency};\n@@ -348,10 +349,10 @@ impl LockstepIterSize {\n                         \"meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}\",\n                         l_id,\n                         l_len,\n-                        if l_len != 1 { \"s\" } else { \"\" },\n+                        pluralise!(l_len),\n                         r_id,\n                         r_len,\n-                        if r_len != 1 { \"s\" } else { \"\" },\n+                        pluralise!(r_len),\n                     );\n                     LockstepIterSize::Contradiction(msg)\n                 }"}, {"sha": "5538daf388e2f046e38a5c841be431ab0b4a6bc1", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -243,6 +243,8 @@ declare_features! (\n     (accepted, async_await, \"1.39.0\", Some(50547), None),\n     /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n     (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n+    /// Allows attributes in formal function parameters.\n+    (accepted, param_attrs, \"1.39.0\", Some(60406), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "38c16dbac6ab7730265fa7d8655e177b30ce92f8", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -489,9 +489,6 @@ declare_features! (\n     /// Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n-    /// Attributes on formal function params.\n-    (active, param_attrs, \"1.36.0\", Some(60406), None),\n-\n     /// Allows calling constructor functions in `const fn`.\n     (active, const_constructor, \"1.37.0\", Some(61456), None),\n "}, {"sha": "b50ca1ad1cf2b4ed15418362b443b0fb7932f914", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -812,7 +812,6 @@ pub fn check_crate(krate: &ast::Crate,\n         }\n     }\n \n-    gate_all!(param_attrs, \"attributes on function parameters are unstable\");\n     gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n     gate_all!(async_closure, \"async closures are unstable\");\n     gate_all!(yields, generators, \"yield syntax is experimental\");"}, {"sha": "5cdea3aabbe11f7552ae0d5e17f40347272ac3b9", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -12,7 +12,7 @@\n use crate::source_map::{SourceMap, FilePathMapping};\n \n use errors::registry::Registry;\n-use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, SourceMapper};\n+use errors::{SubDiagnostic, CodeSuggestion, SourceMapper};\n use errors::{DiagnosticId, Applicability};\n use errors::emitter::{Emitter, HumanReadableErrorType};\n \n@@ -32,6 +32,7 @@ pub struct JsonEmitter {\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n+    external_macro_backtrace: bool,\n }\n \n impl JsonEmitter {\n@@ -40,6 +41,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n+        external_macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n@@ -48,13 +50,18 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n+            external_macro_backtrace,\n         }\n     }\n \n-    pub fn basic(pretty: bool, json_rendered: HumanReadableErrorType) -> JsonEmitter {\n+    pub fn basic(\n+        pretty: bool,\n+        json_rendered: HumanReadableErrorType,\n+        external_macro_backtrace: bool,\n+    ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(None, Lrc::new(SourceMap::new(file_path_mapping)),\n-                            pretty, json_rendered)\n+                            pretty, json_rendered, external_macro_backtrace)\n     }\n \n     pub fn new(\n@@ -63,6 +70,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n+        external_macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -71,6 +79,7 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n+            external_macro_backtrace,\n         }\n     }\n \n@@ -80,8 +89,8 @@ impl JsonEmitter {\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n-        let data = Diagnostic::from_diagnostic_builder(db, self);\n+    fn emit_diagnostic(&mut self, db: &errors::Diagnostic) {\n+        let data = Diagnostic::from_errors_diagnostic(db, self);\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n         } else {\n@@ -189,7 +198,7 @@ struct ArtifactNotification<'a> {\n }\n \n impl Diagnostic {\n-    fn from_diagnostic_builder(db: &DiagnosticBuilder<'_>,\n+    fn from_errors_diagnostic(db: &errors::Diagnostic,\n                                je: &JsonEmitter)\n                                -> Diagnostic {\n         let sugg = db.suggestions.iter().map(|sugg| {\n@@ -219,8 +228,9 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false, None)\n-            .ui_testing(je.ui_testing).emit_diagnostic(db);\n+        je.json_rendered.new_emitter(\n+            Box::new(buf), Some(je.sm.clone()), false, None, je.external_macro_backtrace\n+        ).ui_testing(je.ui_testing).emit_diagnostic(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();\n "}, {"sha": "b4ae1e87bca28fb65e63b525742a2c132bb198a8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -60,12 +60,12 @@ macro_rules! panictry {\n macro_rules! panictry_buffer {\n     ($handler:expr, $e:expr) => ({\n         use std::result::Result::{Ok, Err};\n-        use errors::{FatalError, DiagnosticBuilder};\n+        use errors::FatalError;\n         match $e {\n             Ok(e) => e,\n             Err(errs) => {\n                 for e in errs {\n-                    DiagnosticBuilder::new_diagnostic($handler, e).emit();\n+                    $handler.emit_diagnostic(&e);\n                 }\n                 FatalError.raise()\n             }"}, {"sha": "cf6151d17b1bd3810a620c7d03f0917055045734", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -19,13 +19,6 @@ const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n                                                      permitted in this context\";\n \n impl<'a> Parser<'a> {\n-    crate fn parse_param_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n-        let attrs = self.parse_outer_attributes()?;\n-        self.sess.gated_spans.param_attrs.borrow_mut()\n-            .extend(attrs.iter().map(|a| a.span));\n-        Ok(attrs)\n-    }\n-\n     /// Parses attributes that appear before an item.\n     crate fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();\n@@ -309,14 +302,14 @@ impl<'a> Parser<'a> {\n             Ok(lit) => {\n                 return Ok(ast::NestedMetaItem::Literal(lit))\n             }\n-            Err(ref mut err) => self.diagnostic().cancel(err)\n+            Err(ref mut err) => err.cancel(),\n         }\n \n         match self.parse_meta_item() {\n             Ok(mi) => {\n                 return Ok(ast::NestedMetaItem::MetaItem(mi))\n             }\n-            Err(ref mut err) => self.diagnostic().cancel(err)\n+            Err(ref mut err) => err.cancel(),\n         }\n \n         let found = self.this_token_to_string();"}, {"sha": "59de5f1412358fce2e10e8b31746b02b230f09cd", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -11,7 +11,7 @@ use crate::ptr::P;\n use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n@@ -197,10 +197,6 @@ impl<'a> Parser<'a> {\n         self.sess.span_diagnostic.span_bug(sp, m)\n     }\n \n-    crate fn cancel(&self, err: &mut DiagnosticBuilder<'_>) {\n-        self.sess.span_diagnostic.cancel(err)\n-    }\n-\n     crate fn diagnostic(&self) -> &'a errors::Handler {\n         &self.sess.span_diagnostic\n     }\n@@ -426,15 +422,13 @@ impl<'a> Parser<'a> {\n     /// Eats and discards tokens until one of `kets` is encountered. Respects token trees,\n     /// passes through any errors encountered. Used for error recovery.\n     crate fn eat_to_tokens(&mut self, kets: &[&TokenKind]) {\n-        let handler = self.diagnostic();\n-\n         if let Err(ref mut err) = self.parse_seq_to_before_tokens(\n             kets,\n             SeqSep::none(),\n             TokenExpectType::Expect,\n             |p| Ok(p.parse_token_tree()),\n         ) {\n-            handler.cancel(err);\n+            err.cancel();\n         }\n     }\n \n@@ -532,15 +526,15 @@ impl<'a> Parser<'a> {\n             self.eat_to_tokens(&[&end]);\n             let span = lo.until(self.token.span);\n \n-            let plural = number_of_gt > 1 || number_of_shr >= 1;\n+            let total_num_of_gt = number_of_gt + number_of_shr * 2;\n             self.diagnostic()\n                 .struct_span_err(\n                     span,\n-                    &format!(\"unmatched angle bracket{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"unmatched angle bracket{}\", pluralise!(total_num_of_gt)),\n                 )\n                 .span_suggestion(\n                     span,\n-                    &format!(\"remove extra angle bracket{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"remove extra angle bracket{}\", pluralise!(total_num_of_gt)),\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 )"}, {"sha": "de301b1fc499d9aa43048174657fc88cbdacc67d", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -18,6 +18,7 @@ fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n         false,\n         false,\n         None,\n+        false,\n     );\n     ParseSess::with_span_handler(Handler::with_emitter(true, None, Box::new(emitter)), sm)\n }"}, {"sha": "fa4c10431228ade0ce645b5c270031a585f64592", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -49,8 +49,6 @@ static_assert_size!(PResult<'_, bool>, 16);\n /// used and should be feature gated accordingly in `check_crate`.\n #[derive(Default)]\n pub struct GatedSpans {\n-    /// Spans collected for gating `param_attrs`, e.g. `fn foo(#[attr] x: u8) {}`.\n-    pub param_attrs: Lock<Vec<Span>>,\n     /// Spans collected for gating `let_chains`, e.g. `if a && let b = c {}`.\n     pub let_chains: Lock<Vec<Span>>,\n     /// Spans collected for gating `async_closure`, e.g. `async || ..`.\n@@ -306,7 +304,7 @@ fn file_to_source_file(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n     match try_file_to_source_file(sess, path, spanopt) {\n         Ok(source_file) => source_file,\n         Err(d) => {\n-            DiagnosticBuilder::new_diagnostic(&sess.span_diagnostic, d).emit();\n+            sess.span_diagnostic.emit_diagnostic(&d);\n             FatalError.raise();\n         }\n     }"}, {"sha": "b2b6504919e96b152a6c7789d1122a387ff09c21", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -979,7 +979,7 @@ impl<'a> Parser<'a> {\n         is_name_required: impl Fn(&token::Token) -> bool,\n     ) -> PResult<'a, Param> {\n         let lo = self.token.span;\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         if let Some(mut param) = self.parse_self_param()? {\n             param.attrs = attrs.into();\n             return self.recover_bad_self_param(param, is_trait_item);\n@@ -1362,7 +1362,7 @@ impl<'a> Parser<'a> {\n     /// Returns the parsed optional self parameter with attributes and whether a self\n     /// shortcut was used.\n     fn parse_self_parameter_with_attrs(&mut self) -> PResult<'a, Option<Param>> {\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         let param_opt = self.parse_self_param()?;\n         Ok(param_opt.map(|mut param| {\n             param.attrs = attrs.into();"}, {"sha": "d0c865a7b8e83b5d13e6b8ca3608d6c9b96b3be7", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -66,6 +66,10 @@ pub(super) enum LhsExpr {\n }\n \n impl From<Option<ThinVec<Attribute>>> for LhsExpr {\n+    /// Converts `Some(attrs)` into `LhsExpr::AttributesParsed(attrs)`\n+    /// and `None` into `LhsExpr::NotYetParsed`.\n+    ///\n+    /// This conversion does not allocate.\n     fn from(o: Option<ThinVec<Attribute>>) -> Self {\n         if let Some(attrs) = o {\n             LhsExpr::AttributesParsed(attrs)\n@@ -76,6 +80,9 @@ impl From<Option<ThinVec<Attribute>>> for LhsExpr {\n }\n \n impl From<P<Expr>> for LhsExpr {\n+    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.\n+    ///\n+    /// This conversion does not allocate.\n     fn from(expr: P<Expr>) -> Self {\n         LhsExpr::AlreadyParsed(expr)\n     }\n@@ -770,7 +777,7 @@ impl<'a> Parser<'a> {\n                         ex = ExprKind::Lit(literal);\n                     }\n                     Err(mut err) => {\n-                        self.cancel(&mut err);\n+                        err.cancel();\n                         return Err(self.expected_expression_found());\n                     }\n                 }\n@@ -1176,7 +1183,7 @@ impl<'a> Parser<'a> {\n     /// Parses a parameter in a closure header (e.g., `|arg, arg|`).\n     fn parse_fn_block_param(&mut self) -> PResult<'a, Param> {\n         let lo = self.token.span;\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         let pat = self.parse_pat(PARAM_EXPECTED)?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?"}, {"sha": "2ecd9cca3c64b532553645e7ca5407652e463f33", "filename": "src/libsyntax/parse/parser/generics.rs", "status": "modified", "additions": 61, "deletions": 38, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -100,13 +100,31 @@ impl<'a> Parser<'a> {\n             } else if self.check_ident() {\n                 // Parse type parameter.\n                 params.push(self.parse_ty_param(attrs)?);\n+            } else if self.token.can_begin_type() {\n+                // Trying to write an associated type bound? (#26271)\n+                let snapshot = self.clone();\n+                match self.parse_ty_where_predicate() {\n+                    Ok(where_predicate) => {\n+                        self.struct_span_err(\n+                            where_predicate.span(),\n+                            \"bounds on associated types do not belong here\",\n+                        )\n+                        .span_label(where_predicate.span(), \"belongs in `where` clause\")\n+                        .emit();\n+                    }\n+                    Err(mut err) => {\n+                        err.cancel();\n+                        std::mem::replace(self, snapshot);\n+                        break\n+                    }\n+                }\n             } else {\n                 // Check for trailing attributes and stop parsing.\n                 if !attrs.is_empty() {\n                     if !params.is_empty() {\n                         self.struct_span_err(\n                             attrs[0].span,\n-                            &format!(\"trailing attribute after generic parameter\"),\n+                            \"trailing attribute after generic parameter\",\n                         )\n                         .span_label(attrs[0].span, \"attributes must go before parameters\")\n                         .emit();\n@@ -202,43 +220,7 @@ impl<'a> Parser<'a> {\n                     }\n                 ));\n             } else if self.check_type() {\n-                // Parse optional `for<'a, 'b>`.\n-                // This `for` is parsed greedily and applies to the whole predicate,\n-                // the bounded type can have its own `for` applying only to it.\n-                // Examples:\n-                // * `for<'a> Trait1<'a>: Trait2<'a /* ok */>`\n-                // * `(for<'a> Trait1<'a>): Trait2<'a /* not ok */>`\n-                // * `for<'a> for<'b> Trait1<'a, 'b>: Trait2<'a /* ok */, 'b /* not ok */>`\n-                let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-\n-                // Parse type with mandatory colon and (possibly empty) bounds,\n-                // or with mandatory equality sign and the second type.\n-                let ty = self.parse_ty()?;\n-                if self.eat(&token::Colon) {\n-                    let bounds = self.parse_generic_bounds(Some(self.prev_span))?;\n-                    where_clause.predicates.push(ast::WherePredicate::BoundPredicate(\n-                        ast::WhereBoundPredicate {\n-                            span: lo.to(self.prev_span),\n-                            bound_generic_params: lifetime_defs,\n-                            bounded_ty: ty,\n-                            bounds,\n-                        }\n-                    ));\n-                // FIXME: Decide what should be used here, `=` or `==`.\n-                // FIXME: We are just dropping the binders in lifetime_defs on the floor here.\n-                } else if self.eat(&token::Eq) || self.eat(&token::EqEq) {\n-                    let rhs_ty = self.parse_ty()?;\n-                    where_clause.predicates.push(ast::WherePredicate::EqPredicate(\n-                        ast::WhereEqPredicate {\n-                            span: lo.to(self.prev_span),\n-                            lhs_ty: ty,\n-                            rhs_ty,\n-                            id: ast::DUMMY_NODE_ID,\n-                        }\n-                    ));\n-                } else {\n-                    return self.unexpected();\n-                }\n+                where_clause.predicates.push(self.parse_ty_where_predicate()?);\n             } else {\n                 break\n             }\n@@ -252,6 +234,47 @@ impl<'a> Parser<'a> {\n         Ok(where_clause)\n     }\n \n+    fn parse_ty_where_predicate(&mut self) -> PResult<'a, ast::WherePredicate> {\n+        let lo = self.token.span;\n+        // Parse optional `for<'a, 'b>`.\n+        // This `for` is parsed greedily and applies to the whole predicate,\n+        // the bounded type can have its own `for` applying only to it.\n+        // Examples:\n+        // * `for<'a> Trait1<'a>: Trait2<'a /* ok */>`\n+        // * `(for<'a> Trait1<'a>): Trait2<'a /* not ok */>`\n+        // * `for<'a> for<'b> Trait1<'a, 'b>: Trait2<'a /* ok */, 'b /* not ok */>`\n+        let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+\n+        // Parse type with mandatory colon and (possibly empty) bounds,\n+        // or with mandatory equality sign and the second type.\n+        let ty = self.parse_ty()?;\n+        if self.eat(&token::Colon) {\n+            let bounds = self.parse_generic_bounds(Some(self.prev_span))?;\n+            Ok(ast::WherePredicate::BoundPredicate(\n+                ast::WhereBoundPredicate {\n+                    span: lo.to(self.prev_span),\n+                    bound_generic_params: lifetime_defs,\n+                    bounded_ty: ty,\n+                    bounds,\n+                }\n+            ))\n+        // FIXME: Decide what should be used here, `=` or `==`.\n+        // FIXME: We are just dropping the binders in lifetime_defs on the floor here.\n+        } else if self.eat(&token::Eq) || self.eat(&token::EqEq) {\n+            let rhs_ty = self.parse_ty()?;\n+            Ok(ast::WherePredicate::EqPredicate(\n+                ast::WhereEqPredicate {\n+                    span: lo.to(self.prev_span),\n+                    lhs_ty: ty,\n+                    rhs_ty,\n+                    id: ast::DUMMY_NODE_ID,\n+                }\n+            ))\n+        } else {\n+            self.unexpected()\n+        }\n+    }\n+\n     pub(super) fn choose_generics_over_qpath(&self) -> bool {\n         // There's an ambiguity between generic parameters and qualified paths in impls.\n         // If we see `<` it may start both, so we have to inspect some following tokens."}, {"sha": "3c624959eadb100eff7e5891d7a8a2bcc8af30e8", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -537,7 +537,7 @@ impl<'a> Parser<'a> {\n         mut err: DiagnosticBuilder<'a>,\n         expected: Expected,\n     ) -> PResult<'a, P<Pat>> {\n-        self.cancel(&mut err);\n+        err.cancel();\n \n         let expected = expected.unwrap_or(\"pattern\");\n         let msg = format!(\"expected {}, found {}\", expected, self.this_token_descr());"}, {"sha": "87839f8c70ee83641254b6e28c4c4ce3c723d72e", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -9,7 +9,7 @@ use crate::symbol::kw;\n \n use std::mem;\n use log::debug;\n-use errors::{Applicability};\n+use errors::{Applicability, pluralise};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n@@ -129,10 +129,11 @@ impl<'a> Parser<'a> {\n         self.parse_path(style)\n     }\n \n-    crate fn parse_path_segments(&mut self,\n-                           segments: &mut Vec<PathSegment>,\n-                           style: PathStyle)\n-                           -> PResult<'a, ()> {\n+    crate fn parse_path_segments(\n+        &mut self,\n+        segments: &mut Vec<PathSegment>,\n+        style: PathStyle,\n+    ) -> PResult<'a, ()> {\n         loop {\n             let segment = self.parse_path_segment(style)?;\n             if style == PathStyle::Expr {\n@@ -201,7 +202,7 @@ impl<'a> Parser<'a> {\n             } else {\n                 // `(T, U) -> R`\n                 let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n-                let span = lo.to(self.prev_span);\n+                let span = ident.span.to(self.prev_span);\n                 let output = if self.eat(&token::RArrow) {\n                     Some(self.parse_ty_common(false, false, false)?)\n                 } else {\n@@ -347,20 +348,19 @@ impl<'a> Parser<'a> {\n                 let span = lo.with_hi(\n                     lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count)\n                 );\n-                let plural = snapshot.unmatched_angle_bracket_count > 1;\n                 self.diagnostic()\n                     .struct_span_err(\n                         span,\n                         &format!(\n                             \"unmatched angle bracket{}\",\n-                            if plural { \"s\" } else { \"\" }\n+                            pluralise!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                     )\n                     .span_suggestion(\n                         span,\n                         &format!(\n                             \"remove extra angle bracket{}\",\n-                            if plural { \"s\" } else { \"\" }\n+                            pluralise!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                         String::new(),\n                         Applicability::MachineApplicable,"}, {"sha": "02da56f6e35a7b36b0b9689ed7e4a655dddd7de1", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -361,7 +361,7 @@ impl<'a> Parser<'a> {\n                 }\n                 Err(mut e) => {\n                     self.recover_stmt_(SemiColonMode::Break, BlockMode::Ignore);\n-                    self.cancel(&mut e);\n+                    e.cancel();\n                 }\n                 _ => ()\n             }"}, {"sha": "5697edd8e4867a5972ba23d743171b75b5f746bc", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -11,7 +11,7 @@ use crate::symbol::{kw};\n \n use rustc_target::spec::abi::Abi;\n \n-use errors::{Applicability};\n+use errors::{Applicability, pluralise};\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n@@ -397,7 +397,7 @@ impl<'a> Parser<'a> {\n         }\n \n         if !negative_bounds.is_empty() || was_negative {\n-            let plural = negative_bounds.len() > 1;\n+            let negative_bounds_len = negative_bounds.len();\n             let last_span = negative_bounds.last().map(|sp| *sp);\n             let mut err = self.struct_span_err(\n                 negative_bounds,\n@@ -420,7 +420,7 @@ impl<'a> Parser<'a> {\n                 }\n                 err.span_suggestion_hidden(\n                     bound_list,\n-                    &format!(\"remove the trait bound{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"remove the trait bound{}\", pluralise!(negative_bounds_len)),\n                     new_bound_list,\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "f510ac9273d097ab45ff6f6220b61ce899c781fb", "filename": "src/libsyntax/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftests.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -147,6 +147,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             false,\n             false,\n             None,\n+            false,\n         );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");"}, {"sha": "9a4c540dc6f1f349ea7600e655c24edb145f31d4", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -115,7 +115,7 @@ fn cs_clone_shallow(name: &str,\n         let span = cx.with_def_site_ctxt(span);\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[sym::clone, Symbol::intern(helper_name)]),\n-                                        vec![GenericArg::Type(ty)], vec![]);\n+                                        vec![GenericArg::Type(ty)]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt<'_>, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {"}, {"sha": "c92339dd2fbd5c2141900258d1340a013a063ff4", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ use crate::deriving::path_std;\n use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n \n-use syntax::ast::{self, Expr, MetaItem, GenericArg};\n+use syntax::ast::{self, Ident, Expr, MetaItem, GenericArg};\n use syntax::ext::base::{Annotatable, ExtCtxt, SpecialDerives};\n use syntax::ptr::P;\n use syntax::symbol::{sym, Symbol};\n@@ -16,8 +16,8 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt<'_>,\n     cx.resolver.add_derives(cx.current_expansion.id.expn_data().parent, SpecialDerives::EQ);\n \n     let inline = cx.meta_word(span, sym::inline);\n-    let hidden = cx.meta_list_item_word(span, sym::hidden);\n-    let doc = cx.meta_list(span, sym::doc, vec![hidden]);\n+    let hidden = syntax::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n+    let doc = syntax::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n     let attrs = vec![cx.attribute(inline), cx.attribute(doc)];\n     let trait_def = TraitDef {\n         span,\n@@ -56,7 +56,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt<'_>,\n         let span = cx.with_def_site_ctxt(span);\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[sym::cmp, Symbol::intern(helper_name)]),\n-                                        vec![GenericArg::Type(ty)], vec![]);\n+                                        vec![GenericArg::Type(ty)]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt<'_>,"}, {"sha": "fec035d331dc564ee535990383c9ee1ec0de9149", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -664,16 +664,19 @@ impl<'a> TraitDef<'a> {\n         }).collect();\n \n         // Create the type of `self`.\n-        let path = cx.path_all(self.span, false, vec![type_ident], self_params, vec![]);\n+        let path = cx.path_all(self.span, false, vec![type_ident], self_params);\n         let self_type = cx.ty_path(path);\n \n         let attr = cx.attribute(cx.meta_word(self.span, sym::automatically_derived));\n         // Just mark it now since we know that it'll end up used downstream\n         attr::mark_used(&attr);\n         let opt_trait_ref = Some(trait_ref);\n         let unused_qual = {\n-            let word = cx.meta_list_item_word(self.span, Symbol::intern(\"unused_qualifications\"));\n-            cx.attribute(cx.meta_list(self.span, sym::allow, vec![word]))\n+            let word = syntax::attr::mk_nested_word_item(\n+                Ident::new(Symbol::intern(\"unused_qualifications\"), self.span));\n+            let list = syntax::attr::mk_list_item(\n+                Ident::new(sym::allow, self.span), vec![word]);\n+            cx.attribute(list)\n         };\n \n         let mut a = vec![attr, unused_qual];"}, {"sha": "6ae02a5cab199e8cc857370c6d5d4dd8a527d292", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -82,12 +82,12 @@ impl<'a> Path<'a> {\n                        .collect();\n \n         match self.kind {\n-            PathKind::Global => cx.path_all(span, true, idents, params, Vec::new()),\n-            PathKind::Local => cx.path_all(span, false, idents, params, Vec::new()),\n+            PathKind::Global => cx.path_all(span, true, idents, params),\n+            PathKind::Local => cx.path_all(span, false, idents, params),\n             PathKind::Std => {\n                 let def_site = cx.with_def_site_ctxt(DUMMY_SP);\n                 idents.insert(0, Ident::new(kw::DollarCrate, def_site));\n-                cx.path_all(span, false, idents, params, Vec::new())\n+                cx.path_all(span, false, idents, params)\n             }\n         }\n \n@@ -183,7 +183,7 @@ impl<'a> Ty<'a> {\n                     }\n                 }).collect();\n \n-                cx.path_all(span, false, vec![self_ty], params, vec![])\n+                cx.path_all(span, false, vec![self_ty], params)\n             }\n             Literal(ref p) => p.to_path(cx, span, self_ty, generics),\n             Ptr(..) => cx.span_bug(span, \"pointer in a path in generic `derive`\"),"}, {"sha": "02757bf6b1689f730aa63aaea8a747f2870093a0", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -32,7 +32,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                                                                  Ident::new(sym::str, sp)),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable))],\n-                                     vec![]))\n+                                     ))\n         }\n         Ok(s) => {\n             cx.expr_call_global(sp,"}, {"sha": "26455df17b896421a6e27b079c331fb809768c72", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -5,6 +5,7 @@ use fmt_macros as parse;\n \n use errors::DiagnosticBuilder;\n use errors::Applicability;\n+use errors::pluralise;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n@@ -299,7 +300,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 &format!(\n                     \"{} positional argument{} in format string, but {}\",\n                     count,\n-                    if count != 1 { \"s\" } else { \"\" },\n+                    pluralise!(count),\n                     self.describe_num_args(),\n                 ),\n             );"}, {"sha": "6c7e3e3eb98759185ab381a10d89eeec1a99c347", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -145,8 +145,8 @@ pub fn expand_test_or_bench(\n     let mut test_const = cx.item(sp, ast::Ident::new(item.ident.name, sp),\n         vec![\n             // #[cfg(test)]\n-            cx.attribute(cx.meta_list(attr_sp, sym::cfg, vec![\n-                cx.meta_list_item_word(attr_sp, sym::test)\n+            cx.attribute(attr::mk_list_item(ast::Ident::new(sym::cfg, attr_sp), vec![\n+                attr::mk_nested_word_item(ast::Ident::new(sym::test, attr_sp))\n             ])),\n             // #[rustc_test_marker]\n             cx.attribute(cx.meta_word(attr_sp, sym::rustc_test_marker)),"}, {"sha": "8adf9bdccfefb8d03f0e8db3b012fb41da1580a4", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1 +1 @@\n-Subproject commit 71fe7ec06b85f612fc0e4eb4134c7a7d0f23fac5\n+Subproject commit 8adf9bdccfefb8d03f0e8db3b012fb41da1580a4"}, {"sha": "8dc6b73edf6d473ecd804cdd314597fbdb86dcd9", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -57,25 +57,18 @@ impl Drop for S {\n //     }\n //\n //     bb5: {\n-//         drop(_4) -> [return: bb8, unwind: bb6];\n+//         StorageDead(_4);\n+//         StorageDead(_3);\n+//         _0 = ();\n+//         drop(_1) -> bb8;\n //     }\n-//\n //     bb6 (cleanup): {\n //         drop(_1) -> bb1;\n //     }\n-//\n //     bb7 (cleanup): {\n //         drop(_4) -> bb6;\n //     }\n-//\n //     bb8: {\n-//         StorageDead(_4);\n-//         StorageDead(_3);\n-//         _0 = ();\n-//         drop(_1) -> bb9;\n-//     }\n-//\n-//     bb9: {\n //         StorageDead(_1);\n //         return;\n //     }"}, {"sha": "109304d6d22ccdd4cb9368c12bbea673702e2f76", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -57,7 +57,7 @@ fn main() {\n //     StorageLive(_6);\n //     StorageLive(_7);\n //     _7 = move _2;\n-//     _6 = const take::<Foo>(move _7) -> [return: bb9, unwind: bb8];\n+//     _6 = const take::<Foo>(move _7) -> [return: bb7, unwind: bb9];\n // }\n // bb3 (cleanup): {\n //     StorageDead(_2);\n@@ -75,24 +75,24 @@ fn main() {\n // bb6: {\n //     generator_drop;\n // }\n-// bb7 (cleanup): {\n-//     StorageDead(_3);\n-//     StorageDead(_2);\n-//     drop(_1) -> bb1;\n-// }\n-// bb8 (cleanup): {\n-//     StorageDead(_7);\n-//     StorageDead(_6);\n-//     goto -> bb7;\n-// }\n-// bb9: {\n+// bb7: {\n //     StorageDead(_7);\n //     StorageDead(_6);\n //     StorageLive(_8);\n //     StorageLive(_9);\n //     _9 = move _3;\n //     _8 = const take::<Bar>(move _9) -> [return: bb10, unwind: bb11];\n // }\n+// bb8 (cleanup): {\n+//     StorageDead(_3);\n+//     StorageDead(_2);\n+//     drop(_1) -> bb1;\n+// }\n+// bb9 (cleanup): {\n+//     StorageDead(_7);\n+//     StorageDead(_6);\n+//     goto -> bb8;\n+// }\n // bb10: {\n //     StorageDead(_9);\n //     StorageDead(_8);\n@@ -104,7 +104,7 @@ fn main() {\n // bb11 (cleanup): {\n //     StorageDead(_9);\n //     StorageDead(_8);\n-//     goto -> bb7;\n+//     goto -> bb8;\n // }\n // bb12: {\n //     return;"}, {"sha": "782bc31186ca5fb8eb8a4931bc077d8579e4d351", "filename": "src/test/mir-opt/no-spurious-drop-after-call.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,24 @@\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+// Test that after the call to `std::mem::drop` we do not generate a\n+// MIR drop of the argument. (We used to have a `DROP(_2)` in the code\n+// below, as part of bb3.)\n+\n+fn main() {\n+    std::mem::drop(\"\".to_string());\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ElaborateDrops.before.mir\n+//    bb2: {\n+//        StorageDead(_3);\n+//        _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4];\n+//    }\n+//    bb3: {\n+//        StorageDead(_2);\n+//        StorageDead(_4);\n+//        StorageDead(_1);\n+//        _0 = ();\n+//        return;\n+//    }\n+// END rustc.main.ElaborateDrops.before.mir"}, {"sha": "fbe2d192d0cce3584b84e39c13605f5ec253b0c6", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -7,7 +7,7 @@ LL |     f1(|_: (), _: ()| {});\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n ...\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   | ------------------------------------ required by `f1`\n+   |    --                   ------------ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n@@ -18,7 +18,7 @@ LL |     f1(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &()) -> _`\n ...\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   | ------------------------------------ required by `f1`\n+   |    --                   ------------ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -29,7 +29,7 @@ LL |     f2(|_: (), _: ()| {});\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n ...\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   | ----------------------------------------------- required by `f2`\n+   |    --                   ----------------------- required by this bound in `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -40,7 +40,7 @@ LL |     f2(|_: (), _: ()| {});\n    |     expected signature of `fn(&'a (), &()) -> _`\n ...\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   | ----------------------------------------------- required by `f2`\n+   |    --                           --------------- required by this bound in `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -51,7 +51,7 @@ LL |     f3(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n ...\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   | ------------------------------------------- required by `f3`\n+   |    --                       --------------- required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -62,7 +62,7 @@ LL |     f3(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &()) -> _`\n ...\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   | ------------------------------------------- required by `f3`\n+   |    --                       --------------- required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -73,7 +73,7 @@ LL |     f4(|_: (), _: ()| {});\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n ...\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   | ----------------------------------------------- required by `f4`\n+   |    --                   ----------------------- required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -84,7 +84,7 @@ LL |     f4(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), &'r ()) -> _`\n ...\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   | ----------------------------------------------- required by `f4`\n+   |    --                           --------------- required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -95,7 +95,7 @@ LL |     f5(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n ...\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   | -------------------------------------------------- required by `f5`\n+   |    --                   -------------------------- required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -106,7 +106,7 @@ LL |     f5(|_: (), _: ()| {});\n    |     expected signature of `fn(&'r (), &'r ()) -> _`\n ...\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   | -------------------------------------------------- required by `f5`\n+   |    --                           ------------------ required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -117,7 +117,7 @@ LL |     g1(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n ...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   | ------------------------------------------------- required by `g1`\n+   |    --                   ------------------------- required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -128,7 +128,7 @@ LL |     g1(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   | ------------------------------------------------- required by `g1`\n+   |    --                   ------------------------- required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -139,7 +139,7 @@ LL |     g2(|_: (), _: ()| {});\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n ...\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   | ---------------------------------------- required by `g2`\n+   |    --                   ---------------- required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -150,7 +150,7 @@ LL |     g2(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   | ---------------------------------------- required by `g2`\n+   |    --                   ---------------- required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -161,7 +161,7 @@ LL |     g3(|_: (), _: ()| {});\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   | ------------------------------------------------------------ required by `g3`\n+   |    --                   ------------------------------------ required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -172,7 +172,7 @@ LL |     g3(|_: (), _: ()| {});\n    |     expected signature of `fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n ...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   | ------------------------------------------------------------ required by `g3`\n+   |    --                           ---------------------------- required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -183,7 +183,7 @@ LL |     g4(|_: (), _: ()| {});\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   | --------------------------------------------------- required by `g4`\n+   |    --                   --------------------------- required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -194,7 +194,7 @@ LL |     g4(|_: (), _: ()| {});\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n ...\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   | --------------------------------------------------- required by `g4`\n+   |    --                   --------------------------- required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -205,7 +205,7 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n ...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   | -------------------------------------------------------------------- required by `h1`\n+   |    --                   -------------------------------------------- required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -216,7 +216,7 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &(), for<'r, 's> fn(&'r (), &'s ())) -> _`\n ...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   | -------------------------------------------------------------------- required by `h1`\n+   |    --                   -------------------------------------------- required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -227,7 +227,7 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n ...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | --------------------------------------------------------------------------------- required by `h2`\n+   |    --                   --------------------------------------------------------- required by this bound in `h2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -238,7 +238,7 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n ...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | --------------------------------------------------------------------------------- required by `h2`\n+   |    --                            ------------------------------------------------ required by this bound in `h2`\n \n error: aborting due to 22 previous errors\n "}, {"sha": "ca6118cb3ba985ccdddc905886186ed8c969727b", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -9,6 +9,8 @@ LL |     const FROM: &'static str = \"foo\";\n    |\n    = note: expected type `<T as Foo>::Out`\n               found type `&'static str`\n+   = note: consider constraining the associated type `<T as Foo>::Out` to `&'static str` or calling a method that returns `<T as Foo>::Out`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "6a2135ca46445bceacffd8e7627cfcc74ff0cf2a", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n    |\n LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n-   | ------------------------------------ required by `blue_car`\n+   |    --------       ---------- required by this bound in `blue_car`\n ...\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n@@ -14,7 +14,7 @@ error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n    |\n LL | fn black_car<C:Car<Color=Black>>(c: C) {\n-   | -------------------------------------- required by `black_car`\n+   |    ---------       ----------- required by this bound in `black_car`\n ...\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`"}, {"sha": "83d89924944ab9202b8b4c1d15ef39e86fd1c628", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -6,12 +6,14 @@ LL |     let _: Bar = x.boo();\n    |\n    = note: expected type `Bar`\n               found type `<I as Foo>::A`\n+   = note: consider constraining the associated type `<I as Foo>::A` to `Bar`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5\n    |\n LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n-   | ---------------------------- required by `foo1`\n+   |    ----        ----- required by this bound in `foo1`\n ...\n LL |     foo1(a);\n    |     ^^^^ expected usize, found struct `Bar`"}, {"sha": "45b6cc9ba5f982761c276dc5c26148064aa5ed72", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 45, "deletions": 59, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,105 +1,91 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:82:5\n    |\n-LL | / fn foo<T>()\n-LL | |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n-LL | | {\n-LL | |     // ok for IntStruct, but not UintStruct\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<T>()\n+   |    ---\n+LL |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n+   |                                           ------------- required by this bound in `foo`\n ...\n-LL |       foo::<UintStruct>();\n-   |       ^^^^^^^^^^^^^^^^^ expected usize, found isize\n+LL |     foo::<UintStruct>();\n+   |     ^^^^^^^^^^^^^^^^^ expected usize, found isize\n    |\n    = note: expected type `&usize`\n               found type `&isize`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:86:5\n    |\n-LL | / fn bar<T>()\n-LL | |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n-LL | | {\n-LL | |     // ok for UintStruct, but not IntStruct\n-LL | | }\n-   | |_- required by `bar`\n+LL | fn bar<T>()\n+   |    ---\n+LL |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n+   |                                           ------------- required by this bound in `bar`\n ...\n-LL |       bar::<IntStruct>();\n-   |       ^^^^^^^^^^^^^^^^ expected isize, found usize\n+LL |     bar::<IntStruct>();\n+   |     ^^^^^^^^^^^^^^^^ expected isize, found usize\n    |\n    = note: expected type `&isize`\n               found type `&usize`\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:91:17\n    |\n-LL | / fn tuple_one<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick first\n-LL | | }\n-   | |_- required by `tuple_one`\n+LL | fn tuple_one<T>()\n+   |    ---------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+   |               ---------------------------------------------------------- required by this bound in `tuple_one`\n ...\n-LL |       tuple_one::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+LL |     tuple_one::<Tuple>();\n+   |                 ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>\n \n error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n-LL | / fn tuple_one<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick first\n-LL | | }\n-   | |_- required by `tuple_one`\n+LL | fn tuple_one<T>()\n+   |    ---------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n+   |                                                           ------------- required by this bound in `tuple_one`\n ...\n-LL |       tuple_one::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+LL |     tuple_one::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:97:5\n+  --> $DIR/associated-types-eq-hr.rs:97:17\n    |\n-LL | / fn tuple_two<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick second\n-LL | | }\n-   | |_- required by `tuple_two`\n+LL | fn tuple_two<T>()\n+   |    ---------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+   |               ---------------------------------------------------------- required by this bound in `tuple_two`\n ...\n-LL |       tuple_two::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+LL |     tuple_two::<Tuple>();\n+   |                 ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>\n \n error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'y isize`\n   --> $DIR/associated-types-eq-hr.rs:97:5\n    |\n-LL | / fn tuple_two<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes and we pick second\n-LL | | }\n-   | |_- required by `tuple_two`\n+LL | fn tuple_two<T>()\n+   |    ---------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n+   |                                                           ------------- required by this bound in `tuple_two`\n ...\n-LL |       tuple_two::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n+LL |     tuple_two::<Tuple>();\n+   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:107:5\n+  --> $DIR/associated-types-eq-hr.rs:107:18\n    |\n-LL | / fn tuple_four<T>()\n-LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n-LL | | {\n-LL | |     // not ok for tuple, two lifetimes, and lifetime matching is invariant\n-LL | | }\n-   | |_- required by `tuple_four`\n+LL | fn tuple_four<T>()\n+   |    ----------\n+LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n+   |               ------------------------------------------- required by this bound in `tuple_four`\n ...\n-LL |       tuple_four::<Tuple>();\n-   |       ^^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+LL |     tuple_four::<Tuple>();\n+   |                  ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>"}, {"sha": "c8f8725afc45cd9ec7465fbc9abb89f58f53bd7b", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,13 +2,15 @@ error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::op\n   --> $DIR/associated-types-issue-20346.rs:34:5\n    |\n LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n-   | ------------------------------------------------ required by `is_iterator_of`\n+   |    --------------                ------ required by this bound in `is_iterator_of`\n ...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found enum `std::option::Option`\n    |\n    = note: expected type `T`\n               found type `std::option::Option<T>`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "c7de186c1d3e072a680c085793a542e1f585b3fc", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -5,10 +5,12 @@ LL |     want_y(t);\n    |     ^^^^^^ expected associated type, found i32\n ...\n LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n-   | ------------------------------ required by `want_y`\n+   |    ------       ----- required by this bound in `want_y`\n    |\n    = note: expected type `<T as Foo>::Y`\n               found type `i32`\n+   = note: consider constraining the associated type `<T as Foo>::Y` to `i32` or calling a method that returns `<T as Foo>::Y`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n@@ -17,10 +19,12 @@ LL |     want_x(t);\n    |     ^^^^^^ expected associated type, found u32\n ...\n LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n-   | ------------------------------ required by `want_x`\n+   |    ------       ----- required by this bound in `want_x`\n    |\n    = note: expected type `<T as Foo>::X`\n               found type `u32`\n+   = note: consider constraining the associated type `<T as Foo>::X` to `u32` or calling a method that returns `<T as Foo>::X`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bb2e7251849d3e7720c5a6dfd1f28d64d2f70900", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -12,7 +12,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   | -------------------------------- required by `f1`\n+   |        --    --- required by this bound in `f1`\n ...\n LL |     f1(2u32, 4u32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n@@ -27,7 +27,7 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:5\n    |\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   | -------------------------------- required by `f1`\n+   |        --    --- required by this bound in `f1`\n ...\n LL |     f1(2u32, 4i32);\n    |     ^^ the trait `Foo` is not implemented for `u32`"}, {"sha": "74c9ad2c39e67f36f37334d19aa6ebb729425812", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,13 +1,13 @@\n error[E0271]: type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n-LL | / fn foo<U, T>(_t: T)\n-LL | |     where for<'a> &'a T: Mirror<Image=U>\n-LL | | {}\n-   | |__- required by `foo`\n+LL | fn foo<U, T>(_t: T)\n+   |    ---\n+LL |     where for<'a> &'a T: Mirror<Image=U>\n+   |                                 ------- required by this bound in `foo`\n ...\n-LL |       foo(());\n-   |       ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+LL |     foo(());\n+   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n \n error: aborting due to previous error\n "}, {"sha": "001e0b1cad305879d094bff49f2c6c93ffd4d272", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:50:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   | ---------------------------- required by `assert_send`\n+   |    -----------         ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n@@ -19,7 +19,7 @@ error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:52:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   | ---------------------------- required by `assert_send`\n+   |    -----------         ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n@@ -36,7 +36,7 @@ error[E0277]: `dyn std::fmt::Write` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   | ---------------------------- required by `assert_send`\n+   |    -----------         ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `dyn std::fmt::Write` cannot be sent between threads safely\n@@ -55,7 +55,7 @@ error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between thr\n   --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL | fn assert_send(_: impl Send) {}\n-   | ---------------------------- required by `assert_send`\n+   |    -----------         ---- required by this bound in `assert_send`\n ...\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely"}, {"sha": "788474365c9e5aaaf1ad537f54d0a4f27f595e58", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,4 +1,6 @@\n // edition:2018\n+// ignore-x86\n+// ^ due to stderr output differences\n \n async fn print_dur() {}\n "}, {"sha": "f63eaa4c48a97ea5100937f4d48e1f8852fb2ea8", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:6:5\n+  --> $DIR/issue-62009-1.rs:8:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:10:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,21 +19,24 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:12:5\n+  --> $DIR/issue-62009-1.rs:14:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:12:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:14:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n+   | \n+  ::: $SRC_DIR/libstd/future.rs:LL:COL\n    |\n-   = note: required by `std::future::poll_with_tls_context`\n+LL |     F: Future\n+   |        ------ required by this bound in `std::future::poll_with_tls_context`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "eef2c1fb20ab4ea97c8442829e5c2b59c11aa580", "filename": "src/test/ui/async-await/issues/issue-64391-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64391-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64391-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64391-2.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #64391\n+//\n+// As described on the issue, the (spurious) `DROP` inserted for the\n+// `\"\".to_string()` value was causing a (spurious) unwind path that\n+// led us to believe that the future might be dropped after `config`\n+// had been dropped. This cannot, in fact, happen.\n+//\n+// check-pass\n+// edition:2018\n+\n+async fn connect() {\n+    let config = 666;\n+    connect2(&config, \"\".to_string()).await\n+}\n+\n+async fn connect2(_config: &u32, _tls: String) {\n+    unimplemented!()\n+}\n+\n+fn main() { }"}, {"sha": "802e09c8a1f00dc8db97cd7fdddcdcc0fbe8a8f0", "filename": "src/test/ui/async-await/issues/issue-64433.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,30 @@\n+// Regression test for issue #64433.\n+//\n+// See issue-64391-2.rs for more details, as that was fixed by the\n+// same PR.\n+//\n+// check-pass\n+// edition:2018\n+\n+#[derive(Debug)]\n+struct A<'a> {\n+    inner: Vec<&'a str>,\n+}\n+\n+struct B {}\n+\n+impl B {\n+    async fn something_with_a(&mut self, a: A<'_>) -> Result<(), String> {\n+        println!(\"{:?}\", a);\n+        Ok(())\n+    }\n+}\n+\n+async fn can_error(some_string: &str) -> Result<(), String> {\n+    let a = A { inner: vec![some_string, \"foo\"] };\n+    let mut b = B {};\n+    Ok(b.something_with_a(a).await.map(|_| ())?)\n+}\n+\n+fn main() {\n+}"}, {"sha": "5bd52d44a58279948b225db287ab4e1c772b31ad", "filename": "src/test/ui/async-await/issues/issue-64477.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64477.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #64477.\n+//\n+// We were incorrectly claiming that the `f(x).await` future captured\n+// a value of type `T`, and hence that `T: Send` would have to hold.\n+//\n+// check-pass\n+// edition:2018\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+fn f<T>(_: &T) -> Pin<Box<dyn Future<Output = ()> + Send>> {\n+    unimplemented!()\n+}\n+\n+pub fn g<T: Sync>(x: &'static T) -> impl Future<Output = ()> + Send {\n+    async move { f(x).await }\n+}\n+\n+fn main() { }"}, {"sha": "c6bc306e45a1c2274d80a8147eaebeb8791fe633", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:25:5\n    |\n LL | fn only_bar<T: Bar>(_x: T) { }\n-   | -------------------------- required by `only_bar`\n+   |    --------    --- required by this bound in `only_bar`\n ...\n LL |     only_bar(x);\n    |     ^^^^^^^^ the trait `Bar` is not implemented for `{float}`"}, {"sha": "a6b52b258f005084002c61dcb366e41f9164a98f", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,44 +1,41 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n-LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_free_region`\n+LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n+   |    ------------------------------------------\n+LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n ...\n-LL |       with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(fn(&'a u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    -------------------------------------------\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n-LL |       with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    -------------------------------------------\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n-LL |       with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ac4666fe36de6c92e2266e08fc327de84a39d06a", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -39,44 +39,41 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n-LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_free_region`\n+LL | fn with_closure_expecting_fn_with_free_region<F>(_: F)\n+   |    ------------------------------------------\n+LL |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n+   |                      ------------------------- required by this bound in `with_closure_expecting_fn_with_free_region`\n ...\n-LL |       with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(fn(&'a u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    -------------------------------------------\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n-LL |       with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+LL | fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n+   |    -------------------------------------------\n+LL |     where F: FnOnce(fn(&u32), &i32)\n+   |              ---------------------- required by this bound in `with_closure_expecting_fn_with_bound_region`\n ...\n-LL |       with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |       |\n-   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n+LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |     |\n+   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9fbe95a9c39451edc207498bb60e653575b65fbf", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,16 +1,15 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-infer-var-appearing-twice.rs:14:5\n    |\n-LL | / fn with_closure<F, A>(_: F)\n-LL | |     where F: FnOnce(A, A)\n-LL | | {\n-LL | | }\n-   | |_- required by `with_closure`\n+LL | fn with_closure<F, A>(_: F)\n+   |    ------------\n+LL |     where F: FnOnce(A, A)\n+   |              ------------ required by this bound in `with_closure`\n ...\n-LL |       with_closure(|x: u32, y: i32| {\n-   |       ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n-   |       |\n-   |       expected signature of `fn(_, _) -> _`\n+LL |     with_closure(|x: u32, y: i32| {\n+   |     ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n+   |     |\n+   |     expected signature of `fn(_, _) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "4b703eded69c361b1b81b5a80f6625c0cff11c90", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `F` cannot be shared between threads safely\n   --> $DIR/closure-bounds-subtype.rs:13:22\n    |\n LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n-   | ------------------------------------------------------------ required by `take_const_owned`\n+   |    ----------------                              ---- required by this bound in `take_const_owned`\n ...\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely"}, {"sha": "951a3bcb5f4233d73a9086d3cc2469983367b9ff", "filename": "src/test/ui/closures/closure-move-sync.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n use std::thread;\n use std::sync::mpsc::channel;\n "}, {"sha": "f676df9c559ebc67e3d889b4d0ca3287181e5b61", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,24 +1,32 @@\n error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:6:13\n+  --> $DIR/closure-move-sync.rs:8:13\n    |\n LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n+   | \n+  ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n+   |\n+LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+   |                          ---- required by this bound in `std::thread::spawn`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6 recv:&std::sync::mpsc::Receiver<()>]`\n-   = note: required by `std::thread::spawn`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:8:27: 11:6 recv:&std::sync::mpsc::Receiver<()>]`\n \n error[E0277]: `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:18:5\n+  --> $DIR/closure-move-sync.rs:20:5\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `std::sync::mpsc::Sender<()>` cannot be shared between threads safely\n+   | \n+  ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n+   |\n+LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+   |                          ---- required by this bound in `std::thread::spawn`\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<()>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::sync::mpsc::Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42 tx:&std::sync::mpsc::Sender<()>]`\n-   = note: required by `std::thread::spawn`\n+   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:20:19: 20:42 tx:&std::sync::mpsc::Sender<()>]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8176e96d6de1fac14702dc224ce5b9c26d12d7c7", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -9,6 +9,8 @@ LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |\n    = note: expected type `fn(&E, F) -> F`\n               found type `fn(&E, G) -> G`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "72cce9b4843d77547446467016555fa124f9f384", "filename": "src/test/ui/const-generics/issue-64519.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Foo<const D: usize> {\n+    state: Option<[u8; D]>,\n+}\n+\n+impl<const D: usize> Iterator for Foo<{D}> {\n+    type Item = [u8; D];\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if true {\n+            return Some(self.state.unwrap().clone());\n+        } else {\n+            return Some(self.state.unwrap().clone());\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d368f39d903a0107d78caa05b437a723763a43b7", "filename": "src/test/ui/const-generics/issue-64519.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-64519.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-64519.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "498f801db81b88ad7e65e326c3bb29ed6798adb3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,37 @@\n+// run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const fn double_const(x: usize) -> usize { x * 2 }\n+\n+const X: fn(usize) -> usize = double;\n+const X_const: fn(usize) -> usize = double_const;\n+\n+const fn bar(x: usize) -> usize {\n+    X(x)\n+}\n+\n+const fn bar_const(x: usize) -> usize {\n+    X_const(x)\n+}\n+\n+const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n+    x(y)\n+}\n+\n+fn main() {\n+    const Y: usize = bar_const(2);\n+    assert_eq!(Y, 4);\n+    let y = bar_const(2);\n+    assert_eq!(y, 4);\n+    let y = bar(2);\n+    assert_eq!(y, 4);\n+\n+    const Z: usize = foo(double_const, 2);\n+    assert_eq!(Z, 4);\n+    let z = foo(double_const, 2);\n+    assert_eq!(z, 4);\n+    let z = foo(double, 2);\n+    assert_eq!(z, 4);\n+}"}, {"sha": "41452ee59eb941ae700203a96e62b54f0fc2d0b4", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,152 @@\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:25:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:27:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:29:5\n+   |\n+LL |     assert_eq!(y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:32:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:34:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr.rs:36:5\n+   |\n+LL |     assert_eq!(z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: constant `X_const` should have an upper case name\n+  --> $DIR/const_fn_ptr.rs:9:7\n+   |\n+LL | const X_const: fn(usize) -> usize = double_const;\n+   |       ^^^^^^^ help: convert the identifier to upper case: `X_CONST`\n+   |\n+   = note: `#[warn(non_upper_case_globals)]` on by default\n+"}, {"sha": "14bd6558e7f898fb4d575ccdc7319c3db0ee9b24", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+#![allow(unused)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const X: fn(usize) -> usize = double;\n+\n+const fn bar(x: usize) -> usize {\n+    X(x) // FIXME: this should error someday\n+}\n+\n+fn main() {}"}, {"sha": "74c60f9a2a58dd20f96899bfb12e55d6be17f917", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+#![feature(const_fn)]\n+#![allow(const_err)]\n+\n+fn double(x: usize) -> usize { x * 2 }\n+const X: fn(usize) -> usize = double;\n+\n+const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n+    x(y)\n+}\n+\n+const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n+const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n+\n+fn main() {\n+    assert_eq!(Y, 4);\n+    //~^ ERROR evaluation of constant expression failed\n+    //~^^ WARN skipping const checks\n+    //~^^^ WARN skipping const checks\n+    //~^^^^ WARN skipping const checks\n+    assert_eq!(Z, 4);\n+    //~^ ERROR evaluation of constant expression failed\n+    //~^^ WARN skipping const checks\n+    //~^^^ WARN skipping const checks\n+    //~^^^^ WARN skipping const checks\n+}"}, {"sha": "611cc5313c0574bebc5098909cc88d459f6f283a", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,71 @@\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+warning: skipping const checks\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+   |\n+LL |     assert_eq!(Y, 4);\n+   |     ^^^^^^^^^^^-^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const_fn_ptr_fail2.rs:21:5\n+   |\n+LL |     assert_eq!(Z, 4);\n+   |     ^^^^^^^^^^^-^^^^^\n+   |                |\n+   |                referenced constant has errors\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "83841131599b27908ffc6b05b52cf0d82eda50f8", "filename": "src/test/ui/dead-code-ret.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fdead-code-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fdead-code-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdead-code-ret.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,19 +1,16 @@\n error: unreachable statement\n   --> $DIR/dead-code-ret.rs:7:5\n    |\n+LL |     return;\n+   |     ------ any code following this expression is unreachable\n LL |     println!(\"Paul is dead\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/dead-code-ret.rs:3:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/dead-code-ret.rs:6:5\n-   |\n-LL |     return;\n-   |     ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "d3fb8a09414ce1351f8f347ffb626320ac82c4a1", "filename": "src/test/ui/defaulted-never-note.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefaulted-never-note.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -19,7 +19,8 @@ trait ImplementedForUnitButNotNever {}\n impl ImplementedForUnitButNotNever for () {}\n \n fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-//~^ NOTE required by `foo`\n+//~^ NOTE required by this bound in `foo`\n+//~| NOTE\n \n fn smeg() {\n     let _x = return;"}, {"sha": "28c9da059edaaa47d760948a20dedc08195f9ef6", "filename": "src/test/ui/defaulted-never-note.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n-  --> $DIR/defaulted-never-note.rs:26:5\n+  --> $DIR/defaulted-never-note.rs:27:5\n    |\n LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-   | ----------------------------------------------- required by `foo`\n+   |    ---    ----------------------------- required by this bound in `foo`\n ...\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`"}, {"sha": "ed87360a0be9fec5aefd7da2bb8b2aeb613b19e5", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "708ebca9fb15306c14d4a1699255bce345035e88", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum-struct-variant.rs:9:6\n+  --> $DIR/derives-span-Hash-enum-struct-variant.rs:11:6\n    |\n LL |      x: Error\n    |      ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "5b3649c9826e6160447b470ab658f7d2096ac0e1", "filename": "src/test/ui/derives/derives-span-Hash-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "dc171cbe5dd1374e92a1d02a33b9f0f50a19fdc1", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-enum.rs:9:6\n+  --> $DIR/derives-span-Hash-enum.rs:11:6\n    |\n LL |      Error\n    |      ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "ead70861a0ad6854622063947f914cb5beb0f44e", "filename": "src/test/ui/derives/derives-span-Hash-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "429449b82bf64a9e3aef7985bd6cc4bb9eeb6c1c", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-struct.rs:8:5\n+  --> $DIR/derives-span-Hash-struct.rs:10:5\n    |\n LL |     x: Error\n    |     ^^^^^^^^ the trait `std::hash::Hash` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "820f13ed18ef28106e2eb0ed6627cca7b36cfa06", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n "}, {"sha": "a6c4c479b24d71d4cadae2f5ac199fe77a600017", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Error: std::hash::Hash` is not satisfied\n-  --> $DIR/derives-span-Hash-tuple-struct.rs:8:5\n+  --> $DIR/derives-span-Hash-tuple-struct.rs:10:5\n    |\n LL |     Error\n    |     ^^^^^ the trait `std::hash::Hash` is not implemented for `Error`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "4cca14ae089e940dda218083f83585b3ee081505", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `C: std::marker::Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n LL | fn is_copy<T: Copy>(_: T) {}\n-   | ------------------------- required by `is_copy`\n+   |    -------    ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: C });\n    |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `C`\n@@ -13,7 +13,7 @@ error[E0277]: the trait bound `C: std::clone::Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n LL | fn is_clone<T: Clone>(_: T) {}\n-   | --------------------------- required by `is_clone`\n+   |    --------    ----- required by this bound in `is_clone`\n ...\n LL |     is_clone(B { a: 1, b: C });\n    |              ^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `C`\n@@ -24,7 +24,7 @@ error[E0277]: the trait bound `D: std::marker::Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n LL | fn is_copy<T: Copy>(_: T) {}\n-   | ------------------------- required by `is_copy`\n+   |    -------    ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: D });\n    |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `D`"}, {"sha": "b05b92bf1e94b915a7b0b99f776adbff39013b24", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0275]: overflow evaluating the requirement `J: std::marker::Send`\n   --> $DIR/recursion_limit.rs:34:5\n    |\n LL | fn is_send<T:Send>() { }\n-   | -------------------- required by `is_send`\n+   |    -------   ---- required by this bound in `is_send`\n ...\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^"}, {"sha": "6c15e7bf282cee4ad085c198d2bc0e225fcab59e", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -20,15 +20,16 @@ error[E0532]: expected unit struct/variant or constant, found tuple variant `E::\n   --> $DIR/empty-struct-tuple-pat.rs:29:9\n    |\n LL |         E::Empty4 => ()\n-   |         ^^^^^^^^^ not a unit struct/variant or constant\n+   |         ^^^^^^^^^ did you mean `E::Empty4 ( /* fields */ )`?\n \n error[E0532]: expected unit struct/variant or constant, found tuple variant `XE::XEmpty5`\n   --> $DIR/empty-struct-tuple-pat.rs:33:9\n    |\n LL |         XE::XEmpty5 => (),\n    |         ^^^^-------\n-   |             |\n-   |             help: a unit variant with a similar name exists: `XEmpty4`\n+   |         |   |\n+   |         |   help: a unit variant with a similar name exists: `XEmpty4`\n+   |         did you mean `XE::XEmpty5 ( /* fields */ )`?\n \n error: aborting due to 4 previous errors\n "}, {"sha": "dc421e060e86f9ac5f53cf850edcf03942a54897", "filename": "src/test/ui/error-codes/E0023.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,6 +1,7 @@\n enum Fruit {\n     Apple(String, String),\n     Pear(u32),\n+    Orange((String, String)),\n }\n \n \n@@ -10,5 +11,6 @@ fn main() {\n         Fruit::Apple(a) => {}, //~ ERROR E0023\n         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n         Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n+        Fruit::Orange(a, b) => {}, //~ ERROR E0023\n     }\n }"}, {"sha": "8ae7d01ed5f7e91d29c6c103a2f46cb31f765c71", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,5 +1,5 @@\n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n-  --> $DIR/E0023.rs:10:9\n+  --> $DIR/E0023.rs:11:9\n    |\n LL |     Apple(String, String),\n    |     --------------------- tuple variant defined here\n@@ -8,7 +8,7 @@ LL |         Fruit::Apple(a) => {},\n    |         ^^^^^^^^^^^^^^^ expected 2 fields, found 1\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n-  --> $DIR/E0023.rs:11:9\n+  --> $DIR/E0023.rs:12:9\n    |\n LL |     Apple(String, String),\n    |     --------------------- tuple variant defined here\n@@ -17,14 +17,27 @@ LL |         Fruit::Apple(a, b, c) => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n \n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 1 field\n-  --> $DIR/E0023.rs:12:9\n+  --> $DIR/E0023.rs:13:9\n    |\n LL |     Pear(u32),\n    |     --------- tuple variant defined here\n ...\n LL |         Fruit::Pear(1, 2) => {},\n    |         ^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n \n-error: aborting due to 3 previous errors\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 1 field\n+  --> $DIR/E0023.rs:14:9\n+   |\n+LL |     Orange((String, String)),\n+   |     ------------------------ tuple variant defined here\n+...\n+LL |         Fruit::Orange(a, b) => {},\n+   |         ^^^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n+help: missing parenthesis\n+   |\n+LL |         Fruit::Orange((a, b)) => {},\n+   |                       ^    ^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0023`."}, {"sha": "bcbd3a91cb951e1326fff0573e5aec028f2faec2", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/E0214.rs:2:15\n+  --> $DIR/E0214.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec![\"foo\"];\n-   |               ^^^^^^\n-   |               |\n-   |               only `Fn` traits may use parentheses\n-   |               help: use angle brackets instead: `<&str>`\n+   |            ^^^^^^^^^\n+   |            |\n+   |            only `Fn` traits may use parentheses\n+   |            help: use angle brackets instead: `Vec<&str>`\n \n error: aborting due to previous error\n "}, {"sha": "c56853f45a0b0150112d32d1a33a38e1ec8b7f4f", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n   --> $DIR/E0271.rs:10:5\n    |\n LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n-   | -------------------------------------------------- required by `foo`\n+   |    ---                         ------------------ required by this bound in `foo`\n ...\n LL |     foo(3_i8);\n    |     ^^^ expected reference, found u32"}, {"sha": "407e51e4f5f9c5a08a7be211ffe596d61ce0aae3", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*const u8` cannot be sent between threads safely\n   --> $DIR/E0277-2.rs:16:5\n    |\n LL | fn is_send<T: Send>() { }\n-   | --------------------- required by `is_send`\n+   |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send::<Foo>();\n    |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely"}, {"sha": "a069d048c88621060e5ebd1840522572362f25a5", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -14,7 +14,7 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:17:15\n    |\n LL | fn some_func<T: Foo>(foo: T) {\n-   | ---------------------------- required by `some_func`\n+   |    ---------    --- required by this bound in `some_func`\n ...\n LL |     some_func(5i32);\n    |               ^^^^ the trait `Foo` is not implemented for `i32`"}, {"sha": "d0148f418e33b709cdb43231bb600a65cedfe26d", "filename": "src/test/ui/error-should-say-copy-not-pod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not sa\n   --> $DIR/error-should-say-copy-not-pod.rs:6:17\n    |\n LL | fn check_bound<T:Copy>(_: T) {}\n-   | ---------------------------- required by `check_bound`\n+   |    -----------   ---- required by this bound in `check_bound`\n ...\n LL |     check_bound(\"nocopy\".to_string());\n    |                 ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`"}, {"sha": "c395f3875ea0e0419912ab8d2b5dabc55fe08ecc", "filename": "src/test/ui/extern/extern-types-not-sync-send.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,22 +1,22 @@\n error[E0277]: `A` cannot be shared between threads safely\n-  --> $DIR/extern-types-not-sync-send.rs:13:5\n+  --> $DIR/extern-types-not-sync-send.rs:13:19\n    |\n LL | fn assert_sync<T: ?Sized + Sync>() { }\n-   | ---------------------------------- required by `assert_sync`\n+   |    -----------             ---- required by this bound in `assert_sync`\n ...\n LL |     assert_sync::<A>();\n-   |     ^^^^^^^^^^^^^^^^ `A` cannot be shared between threads safely\n+   |                   ^ `A` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `A`\n \n error[E0277]: `A` cannot be sent between threads safely\n-  --> $DIR/extern-types-not-sync-send.rs:16:5\n+  --> $DIR/extern-types-not-sync-send.rs:16:19\n    |\n LL | fn assert_send<T: ?Sized + Send>() { }\n-   | ---------------------------------- required by `assert_send`\n+   |    -----------             ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<A>();\n-   |     ^^^^^^^^^^^^^^^^ `A` cannot be sent between threads safely\n+   |                   ^ `A` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `A`\n "}, {"sha": "0417186eed346c4c91d17203654f62e5a21b0a08", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:22:5\n+  --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n-   | -------------------- required by `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n-   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:25:5\n    |\n LL | fn assert_sized<T>() { }\n-   | -------------------- required by `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -27,7 +27,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:28:5\n    |\n LL | fn assert_sized<T>() { }\n-   | -------------------- required by `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -40,7 +40,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:31:5\n    |\n LL | fn assert_sized<T>() { }\n-   | -------------------- required by `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "9a6af8119a8c596a267b856b5e8571b85030e203", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: expected a `std::ops::Fn<()>` closure, found `extern \"C\" fn() {f}`\n   --> $DIR/extern-wrong-value-type.rs:9:11\n    |\n LL | fn is_fn<F>(_: F) where F: Fn() {}\n-   | ------------------------------- required by `is_fn`\n+   |    -----                   ---- required by this bound in `is_fn`\n ...\n LL |     is_fn(f);\n    |           ^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`"}, {"sha": "c05379c71eeaf3d81e0b15c5bb1c4edd902ca9d3", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -44,10 +44,10 @@ LL | impl Fn<()> for Foo {\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:12\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:15:6\n    |\n LL | impl FnOnce() for Foo1 {\n-   |            ^^ associated type not allowed here\n+   |      ^^^^^^^^ associated type not allowed here\n \n error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -> Baz) instead\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:21:6"}, {"sha": "be6e41afaf81169788ad66b7aae26c18d739c36a", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between thr\n   --> $DIR/send-sync.rs:8:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   | ---------------------- required by `send`\n+   |    ----    ---- required by this bound in `send`\n ...\n LL |     send(format_args!(\"{:?}\", c));\n    |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n@@ -20,7 +20,7 @@ error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between thr\n   --> $DIR/send-sync.rs:9:5\n    |\n LL | fn sync<T: Sync>(_: T) {}\n-   | ---------------------- required by `sync`\n+   |    ----    ---- required by this bound in `sync`\n ...\n LL |     sync(format_args!(\"{:?}\", c));\n    |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely"}, {"sha": "f891b9c6439bee12a81ef898e11d6a40c26c83ca", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -29,7 +29,7 @@ error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:14\n    |\n LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n-   | ------------------------------------------------ required by `needs_fn`\n+   |    --------                   ------------------ required by this bound in `needs_fn`\n ...\n LL |     needs_fn(1);\n    |              ^ expected an `Fn<(isize,)>` closure, found `{integer}`"}, {"sha": "c9a71e03858f144dc66f8aaf0b4b4493cb3ad1a8", "filename": "src/test/ui/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -16,14 +16,13 @@ LL | |     })\n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _] as std::ops::Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n    |\n-LL | / pub fn want_cyclic_generator_yield<T>(_: T)\n-LL | |     where T: Generator<Yield = T, Return = ()>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_cyclic_generator_yield`\n+LL | pub fn want_cyclic_generator_yield<T>(_: T)\n+   |        ---------------------------\n+LL |     where T: Generator<Yield = T, Return = ()>\n+   |                        --------- required by this bound in `want_cyclic_generator_yield`\n ...\n-LL |       want_cyclic_generator_yield(|| {\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+LL |     want_cyclic_generator_yield(|| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,"}, {"sha": "620db245d3e57d5b8f599c6b990af827b5980f18", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:16:5\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n-   |     ----------------------------- required by `main::assert_send`\n+   |        -----------    ---- required by this bound in `main::assert_send`\n ...\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n@@ -15,7 +15,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:9:5\n    |\n LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |     ----------------------------- required by `main::assert_sync`\n+   |        -----------    ---- required by this bound in `main::assert_sync`\n ...\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely"}, {"sha": "f2b1078e2b532eb541c4b3179c646bac515d5961", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `[static generator@$DIR/static-not-unpin.rs:11:25:\n   --> $DIR/static-not-unpin.rs:14:18\n    |\n LL | fn assert_unpin<T: Unpin>(_: T) {\n-   | ------------------------------- required by `assert_unpin`\n+   |    ------------    ----- required by this bound in `assert_unpin`\n ...\n LL |     assert_unpin(generator);\n    |                  ^^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]`"}, {"sha": "9fef1e33543991eca162da09704ec55a6143c11d", "filename": "src/test/ui/hrtb/due-to-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,15 +2,12 @@ error: implementation of `Foo` is not general enough\n   --> $DIR/due-to-where-clause.rs:5:5\n    |\n LL |     test::<FooS>(&mut 42);\n-   |     ^^^^^^^^^^^^ doesn't satisfy where-clause\n+   |     ^^^^^^^^^^^^ implementation of `Foo` is not general enough\n ...\n LL | trait Foo<'a> {}\n    | ---------------- trait `Foo` defined here\n-...\n-LL | fn test<'a, F>(data: &'a mut u32) where F: for<'b> Foo<'b> {}\n-   | ------------------------------------------------------------- due to a where-clause on `test`...\n    |\n-   = note: ...`FooS<'_>` must implement `Foo<'0>`, for any lifetime `'0`...\n+   = note: `FooS<'_>` must implement `Foo<'0>`, for any lifetime `'0`...\n    = note: ...but `FooS<'_>` actually implements `Foo<'1>`, for some specific lifetime `'1`\n \n error: aborting due to previous error"}, {"sha": "9822b48f4f48fe4412697e1690b82c3c6684fe6a", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:27:22\n    |\n-LL | / fn want_foo2<T>()\n-LL | |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_foo2`\n+LL | fn want_foo2<T>()\n+   |    ---------\n+LL |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n+   |               -------------------------------------- required by this bound in `want_foo2`\n ...\n-LL |   fn b() { want_foo2::<SomeStruct>(); }\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n+LL | fn b() { want_foo2::<SomeStruct>(); }\n+   |                      ^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n    |\n    = help: the following implementations were found:\n              <SomeStruct as Foo<(&'a isize, &'a isize)>>"}, {"sha": "969d9eda7351970b8541e4d039b5d9ca469a2ed6", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,15 +1,14 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:11\n    |\n-LL | / fn foo<T>()\n-LL | | where\n-LL | |     T: Trait<for<'b> fn(&'b u32)>,\n-LL | | {\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<T>()\n+   |    ---\n+LL | where\n+LL |     T: Trait<for<'b> fn(&'b u32)>,\n+   |        -------------------------- required by this bound in `foo`\n ...\n-LL |       foo::<()>();\n-   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n+LL |     foo::<()>();\n+   |           ^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(&'a u32)>>"}, {"sha": "dddc2bcce49e5d06b2466d2324c62415530c9a72", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,15 +1,14 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(fn(&'b u32))>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:5\n+  --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:11\n    |\n-LL | / fn foo<T>()\n-LL | | where\n-LL | |     T: Trait<for<'b> fn(fn(&'b u32))>,\n-LL | | {\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<T>()\n+   |    ---\n+LL | where\n+LL |     T: Trait<for<'b> fn(fn(&'b u32))>,\n+   |        ------------------------------ required by this bound in `foo`\n ...\n-LL |       foo::<()>();\n-   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n+LL |     foo::<()>();\n+   |           ^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(fn(&'a u32))>>"}, {"sha": "23ef75944d317bc0c352d5efe08af8ef384d11f5", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,15 +1,14 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:11\n    |\n-LL | / fn foo<T>()\n-LL | | where\n-LL | |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n-LL | | {\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<T>()\n+   |    ---\n+LL | where\n+LL |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n+   |        -------------------------------- required by this bound in `foo`\n ...\n-LL |       foo::<()>();\n-   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n+LL |     foo::<()>();\n+   |           ^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(std::cell::Cell<&'a u32>)>>"}, {"sha": "c2cc8ebad272658a2f8f2bbb3ad8397f052467be", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,14 +1,13 @@\n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:26\n    |\n-LL | / fn want_bar_for_any_ccx<B>(b: &B)\n-LL | |     where B : for<'ccx> Bar<'ccx>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_bar_for_any_ccx`\n+LL | fn want_bar_for_any_ccx<B>(b: &B)\n+   |    --------------------\n+LL |     where B : for<'ccx> Bar<'ccx>\n+   |               ------------------- required by this bound in `want_bar_for_any_ccx`\n ...\n-LL |       want_bar_for_any_ccx(b);\n-   |                            ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+LL |     want_bar_for_any_ccx(b);\n+   |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n    |\n    = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n "}, {"sha": "a93814ad4c25e8f8912c492a4c49154e5b9e9476", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,33 +1,26 @@\n error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:26\n    |\n-LL |       want_foo_for_any_tcx(f);\n-   |                            ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n+LL |     want_foo_for_any_tcx(f);\n+   |                          ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n ...\n-LL | / fn want_foo_for_any_tcx<F>(f: &F)\n-LL | |     where F : for<'tcx> Foo<'tcx>\n-LL | | {\n-LL | |     want_foo_for_some_tcx(f);\n-LL | |     want_foo_for_any_tcx(f);\n-LL | | }\n-   | |_- required by `want_foo_for_any_tcx`\n+LL | fn want_foo_for_any_tcx<F>(f: &F)\n+   |    --------------------\n+LL |     where F : for<'tcx> Foo<'tcx>\n+   |               ------------------- required by this bound in `want_foo_for_any_tcx`\n    |\n    = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:26\n    |\n-LL |       want_bar_for_any_ccx(b);\n-   |                            ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+LL |     want_bar_for_any_ccx(b);\n+   |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n ...\n-LL | / fn want_bar_for_any_ccx<B>(b: &B)\n-LL | |     where B : for<'ccx> Bar<'ccx>\n-LL | | {\n-LL | |     want_foo_for_some_tcx(b);\n-...  |\n-LL | |     want_bar_for_any_ccx(b);\n-LL | | }\n-   | |_- required by `want_bar_for_any_ccx`\n+LL | fn want_bar_for_any_ccx<B>(b: &B)\n+   |    --------------------\n+LL |     where B : for<'ccx> Bar<'ccx>\n+   |               ------------------- required by this bound in `want_bar_for_any_ccx`\n    |\n    = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n "}, {"sha": "6ec0beefd60e39f900989e54ba590dbefde98788", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,29 +1,27 @@\n error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:24:5\n+  --> $DIR/hrtb-just-for-static.rs:24:17\n    |\n-LL | / fn want_hrtb<T>()\n-LL | |     where T : for<'a> Foo<&'a isize>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_hrtb`\n+LL | fn want_hrtb<T>()\n+   |    ---------\n+LL |     where T : for<'a> Foo<&'a isize>\n+   |               ---------------------- required by this bound in `want_hrtb`\n ...\n-LL |       want_hrtb::<StaticInt>()\n-   |       ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n+LL |     want_hrtb::<StaticInt>()\n+   |                 ^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n    |\n    = help: the following implementations were found:\n              <StaticInt as Foo<&'static isize>>\n \n error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:30:17\n    |\n-LL | / fn want_hrtb<T>()\n-LL | |     where T : for<'a> Foo<&'a isize>\n-LL | | {\n-LL | | }\n-   | |_- required by `want_hrtb`\n+LL | fn want_hrtb<T>()\n+   |    ---------\n+LL |     where T : for<'a> Foo<&'a isize>\n+   |               ---------------------- required by this bound in `want_hrtb`\n ...\n-LL |       want_hrtb::<&'a u32>()\n-   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n+LL |     want_hrtb::<&'a u32>()\n+   |                 ^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n    |\n    = help: the following implementations were found:\n              <&'a u32 as Foo<&'a isize>>"}, {"sha": "c818041e596321a53f88ab251889a450c3a675a9", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n-  --> $DIR/issue-46989.rs:40:5\n+  --> $DIR/issue-46989.rs:40:18\n    |\n LL | fn assert_foo<T: Foo>() {}\n-   | ----------------------- required by `assert_foo`\n+   |    ----------    --- required by this bound in `assert_foo`\n ...\n LL |     assert_foo::<fn(&i32)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n+   |                  ^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n    |\n    = help: the following implementations were found:\n              <fn(A) as Foo>"}, {"sha": "fd6fce938b2c77bc1c56d8212c34fdf2dc0d782a", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -6,6 +6,8 @@ LL |     let v = Unit2.m(\n    |\n    = note: expected type `Unit4`\n               found type `<_ as Ty<'_>>::V`\n+   = note: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39] as std::ops::FnOnce<((&u8,),)>>::Output == Unit3`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19"}, {"sha": "58cc7076054235c38aab26b27f4724a4459225c4", "filename": "src/test/ui/if-ret.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fif-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fif-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-ret.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,12 +2,9 @@ warning: unreachable block in `if` expression\n   --> $DIR/if-ret.rs:6:24\n    |\n LL | fn foo() { if (return) { } }\n-   |                        ^^^\n+   |               -------- ^^^ unreachable block in `if` expression\n+   |               |\n+   |               any code following this expression is unreachable\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n-note: any code following this expression is unreachable\n-  --> $DIR/if-ret.rs:6:15\n-   |\n-LL | fn foo() { if (return) { } }\n-   |               ^^^^^^^^\n "}, {"sha": "d11941fee18249cf74ee46113ad55b96df3a7176", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -73,7 +73,7 @@ error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads\n   --> $DIR/auto-trait-leak.rs:15:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   | ---------------------- required by `send`\n+   |    ----    ---- required by this bound in `send`\n ...\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely"}, {"sha": "d163e1dff7ac981cd284aa37c16ef1f20506ace6", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads\n   --> $DIR/auto-trait-leak2.rs:13:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   | ---------------------- required by `send`\n+   |    ----    ---- required by this bound in `send`\n ...\n LL |     send(before());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n@@ -15,7 +15,7 @@ error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads\n   --> $DIR/auto-trait-leak2.rs:16:5\n    |\n LL | fn send<T: Send>(_: T) {}\n-   | ---------------------- required by `send`\n+   |    ----    ---- required by this bound in `send`\n ...\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely"}, {"sha": "99c6a8cdd6daf2c2ebe303f9f8cd6002ca3209ad", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -14,6 +14,8 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note: expected type `()`\n               found type `<T as impl_trait::Trait>::Assoc`\n+   = note: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n@@ -30,6 +32,8 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |\n    = note: expected type `()`\n               found type `<T as lifetimes::Trait<'static>>::Assoc`\n+   = note: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to 3 previous errors"}, {"sha": "e30e2626e9f34c46de7862449e954628e206b94e", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -15,6 +15,8 @@ LL |     let _: i32 = Leak::leak(hide(0_i32));\n    |\n    = note: expected type `i32`\n               found type `<impl Foo as Leak>::T`\n+   = note: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10"}, {"sha": "e4d0a731ebfe55cf425c8f5b90398b4b9282be5d", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -9,6 +9,8 @@ LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n    |\n    = note: expected type `fn(&(), &B, &impl Debug)`\n               found type `fn(&(), &impl Debug, &B)`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "d92c3f034e5a2f0a0d5cadacd3250f56c7e5e350", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -8,6 +8,8 @@ LL |     x\n    |\n    = note: expected type `std::string::String`\n               found type `impl Debug`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "98a70f268cf72ffa9387b3ad3ad5f01d5662ae61", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -6,6 +6,8 @@ LL |     a = y;\n    |\n    = note: expected type `impl Debug` (type parameter)\n               found type `impl Debug` (type parameter)\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "6968e3669caec844d795ae9418d0485cd66faff5", "filename": "src/test/ui/interior-mutability/interior-mutability.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n use std::cell::Cell;\n use std::panic::catch_unwind;\n fn main() {"}, {"sha": "b76fce288055263c6485af758cbcd6441f6d5c42", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,14 +1,18 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/interior-mutability.rs:5:5\n+  --> $DIR/interior-mutability.rs:7:5\n    |\n LL |     catch_unwind(|| { x.set(23); });\n    |     ^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   | \n+  ::: $SRC_DIR/libstd/panic.rs:LL:COL\n+   |\n+LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n+   |                                        ---------- required by this bound in `std::panic::catch_unwind`\n    |\n    = help: within `std::cell::Cell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35 x:&std::cell::Cell<i32>]`\n-   = note: required by `std::panic::catch_unwind`\n+   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:7:18: 7:35 x:&std::cell::Cell<i32>]`\n \n error: aborting due to previous error\n "}, {"sha": "a836593e0da108defd40295c7c1fe6efabcb5433", "filename": "src/test/ui/issues/issue-10291.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -20,3 +20,4 @@ LL | fn test<'x>(x: &'x isize) {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "3f2d0aa87adc1174522da52aa655e2baeb14c974", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -9,6 +9,8 @@ LL |         self.iter()\n    |\n    = note: expected type `I`\n               found type `std::slice::Iter<'_, N>`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0599]: no method named `iter` found for type `&G` in the current scope\n   --> $DIR/issue-13853.rs:27:23"}, {"sha": "089968ede7d0ff4453e5b6a41f80aa53c1dcb4ee", "filename": "src/test/ui/issues/issue-1920-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `foo::issue_1920::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-1.rs:12:5\n+  --> $DIR/issue-1920-1.rs:12:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   | ------------------------------------ required by `assert_clone`\n+   |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<foo::issue_1920::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `foo::issue_1920::S`\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `foo::issue_1920::S`\n \n error: aborting due to previous error\n "}, {"sha": "eaf34e076c088b88e32d0550754aacf932f17e60", "filename": "src/test/ui/issues/issue-1920-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `bar::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-2.rs:10:5\n+  --> $DIR/issue-1920-2.rs:10:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   | ------------------------------------ required by `assert_clone`\n+   |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<bar::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `bar::S`\n+   |                    ^^^^^^ the trait `std::clone::Clone` is not implemented for `bar::S`\n \n error: aborting due to previous error\n "}, {"sha": "0550f5feba5bee6677f82e438de6b0e498148f63", "filename": "src/test/ui/issues/issue-1920-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `issue_1920::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-3.rs:14:5\n+  --> $DIR/issue-1920-3.rs:14:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n-   | ------------------------------------ required by `assert_clone`\n+   |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<foo::issue_1920::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `issue_1920::S`\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `issue_1920::S`\n \n error: aborting due to previous error\n "}, {"sha": "4c464e6d4f685d6c0f9daa4a012cf82f9626c545", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -6,6 +6,8 @@ LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(&Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:12:3\n@@ -15,6 +17,8 @@ LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(&mut Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n   --> $DIR/issue-20225.rs:20:3\n@@ -24,6 +28,8 @@ LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |\n    = note: expected type `extern \"rust-call\" fn(Foo, (&'a T,))`\n               found type `extern \"rust-call\" fn(Foo, (T,))`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to 3 previous errors\n "}, {"sha": "dfb39743352fce1893413c96260f6cbe3c8cfe79", "filename": "src/test/ui/issues/issue-21160.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n struct Bar;\n \n impl Bar {"}, {"sha": "9f88fa2fadd4cc68143b7213aced019efbf95896", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,10 +1,13 @@\n error[E0277]: the trait bound `Bar: std::hash::Hash` is not satisfied\n-  --> $DIR/issue-21160.rs:8:12\n+  --> $DIR/issue-21160.rs:10:12\n    |\n LL | struct Foo(Bar);\n    |            ^^^ the trait `std::hash::Hash` is not implemented for `Bar`\n+   | \n+  ::: $SRC_DIR/libcore/hash/mod.rs:LL:COL\n    |\n-   = note: required by `std::hash::Hash::hash`\n+LL |     fn hash<H: Hasher>(&self, state: &mut H);\n+   |             - required by this bound in `std::hash::Hash::hash`\n \n error: aborting due to previous error\n "}, {"sha": "6e102ecb62fff85232fab17794d665327a5a2a92", "filename": "src/test/ui/issues/issue-2150.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,19 +1,16 @@\n error: unreachable statement\n   --> $DIR/issue-2150.rs:8:5\n    |\n+LL |     panic!();\n+   |     --------- any code following this expression is unreachable\n LL |     for x in &v { i += 1; }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/issue-2150.rs:1:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/issue-2150.rs:7:5\n-   |\n-LL |     panic!();\n-   |     ^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "2bede9120cf1d1673a72f73da8a587f4ae776e81", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/issue-21763.rs:9:5\n    |\n LL | fn foo<T: Send>() {}\n-   | ----------------- required by `foo`\n+   |    ---    ---- required by this bound in `foo`\n ...\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely"}, {"sha": "c3b419fe939cb0b10092678db0987531d736d457", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-23589.rs:2:15\n+  --> $DIR/issue-23589.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |               ^^^^^^\n-   |               |\n-   |               only `Fn` traits may use parentheses\n-   |               help: use angle brackets instead: `<&str>`\n+   |            ^^^^^^^^^\n+   |            |\n+   |            only `Fn` traits may use parentheses\n+   |            help: use angle brackets instead: `Vec<&str>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-23589.rs:2:29"}, {"sha": "9658f6980be2f82dea31255fc4d392b5347be572", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -9,6 +9,7 @@ LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::n\n    |\n    = note: expected type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n               found type `T`\n+   = note: you might be missing a type parameter or trait bound\n \n error: aborting due to previous error\n "}, {"sha": "0a13a2bc33023c24aca7c0281b362b3658157025", "filename": "src/test/ui/issues/issue-25076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `(): InOut<_>` is not satisfied\n   --> $DIR/issue-25076.rs:10:20\n    |\n LL | fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n-   | ------------------------------------------------ required by `do_fold`\n+   |    -------       --------------- required by this bound in `do_fold`\n ...\n LL |     do_fold(bot(), ());\n    |                    ^^ the trait `InOut<_>` is not implemented for `()`"}, {"sha": "a6ccc4835fa682eae1b728c7bc60f71a367ab4ce", "filename": "src/test/ui/issues/issue-2951.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -6,6 +6,8 @@ LL |     xx = y;\n    |\n    = note: expected type `T`\n               found type `U`\n+   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "b56fa949acb7e0a1671b32221be30a87b1a09d2c", "filename": "src/test/ui/issues/issue-32004.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -3,8 +3,9 @@ error[E0532]: expected unit struct/variant or constant, found tuple variant `Foo\n    |\n LL |         Foo::Bar => {}\n    |         ^^^^^---\n-   |              |\n-   |              help: a unit variant with a similar name exists: `Baz`\n+   |         |    |\n+   |         |    help: a unit variant with a similar name exists: `Baz`\n+   |         did you mean `Foo::Bar ( /* fields */ )`?\n \n error[E0532]: expected tuple struct/variant, found unit struct `S`\n   --> $DIR/issue-32004.rs:16:9"}, {"sha": "9c11a02923c8c2a9d68e728d389c3da247dbb258", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -8,6 +8,8 @@ LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`\n+   = note: consider constraining the associated type `<T as Tr<'a>>::Out` to `()` or calling a method that returns `<T as Tr<'a>>::Out`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error: aborting due to previous error\n "}, {"sha": "e3564e867017451ced460d043bc06eaa556c40e9", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -13,7 +13,7 @@ error[E0277]: the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5\n    |\n LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n-   | ------------------------------------------ required by `size_of_copy`\n+   |    ------------    ---- required by this bound in `size_of_copy`\n ...\n LL |     size_of_copy::<dyn Misc + Copy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `dyn Misc`"}, {"sha": "976e3064db64b7f9532e5bb2a40ed2339a27cfda", "filename": "src/test/ui/issues/issue-32995-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995-2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,27 +1,27 @@\n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:4:28\n+  --> $DIR/issue-32995-2.rs:4:22\n    |\n LL |     { fn f<X: ::std::marker()::Send>() {} }\n-   |                            ^^\n+   |                      ^^^^^^^^\n    |\n    = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:8:35\n+  --> $DIR/issue-32995-2.rs:8:29\n    |\n LL |     { fn f() -> impl ::std::marker()::Send { } }\n-   |                                   ^^\n+   |                             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995-2.rs:16:19\n+  --> $DIR/issue-32995-2.rs:16:13\n    |\n LL | impl ::std::marker()::Copy for X {}\n-   |                   ^^\n+   |             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>"}, {"sha": "724e82a59dc3519ae984ab7b7812490c0fa81947", "filename": "src/test/ui/issues/issue-32995.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32995.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,63 +1,63 @@\n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:4:17\n+  --> $DIR/issue-32995.rs:4:12\n    |\n LL |     let x: usize() = 1;\n-   |                 ^^\n+   |            ^^^^^^^\n    |\n    = note: `#[deny(parenthesized_params_in_types_and_modules)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:8:24\n+  --> $DIR/issue-32995.rs:8:19\n    |\n LL |     let b: ::std::boxed()::Box<_> = Box::new(1);\n-   |                        ^^\n+   |                   ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:12:25\n+  --> $DIR/issue-32995.rs:12:20\n    |\n LL |     let p = ::std::str::()::from_utf8(b\"foo\").unwrap();\n-   |                         ^^\n+   |                    ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:16:36\n+  --> $DIR/issue-32995.rs:16:25\n    |\n LL |     let p = ::std::str::from_utf8::()(b\"foo\").unwrap();\n-   |                                    ^^\n+   |                         ^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:20:35\n+  --> $DIR/issue-32995.rs:20:29\n    |\n LL |     let o : Box<dyn (::std::marker()::Send)> = Box::new(1);\n-   |                                   ^^\n+   |                             ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:24:41\n+  --> $DIR/issue-32995.rs:24:35\n    |\n LL |     let o : Box<dyn Send + ::std::marker()::Sync> = Box::new(1);\n-   |                                         ^^\n+   |                                   ^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n error: parenthesized type parameters may only be used with a `Fn` trait\n-  --> $DIR/issue-32995.rs:30:14\n+  --> $DIR/issue-32995.rs:30:13\n    |\n LL |     let d : X() = Default::default();\n-   |              ^^\n+   |             ^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>"}, {"sha": "09c499452adb687b737843c63ed5c2d4bc8c33e8", "filename": "src/test/ui/issues/issue-33575.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let baz = ().foo(); //~ ERROR no method named `foo` found for type `()` in the current scope\n+    <i32 as std::str::FromStr>::from_str(&baz); // No complaints about `str` being unsized\n+}"}, {"sha": "e6b74d262c340d4f04985e24d1206579378e8296", "filename": "src/test/ui/issues/issue-33575.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,9 @@\n+error[E0599]: no method named `foo` found for type `()` in the current scope\n+  --> $DIR/issue-33575.rs:2:18\n+   |\n+LL |     let baz = ().foo();\n+   |                  ^^^ method not found in `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "b1b3041ea027508317937e36332d9f0636986af6", "filename": "src/test/ui/issues/issue-39687.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39687.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,8 +1,8 @@\n error[E0229]: associated type bindings are not allowed here\n-  --> $DIR/issue-39687.rs:4:16\n+  --> $DIR/issue-39687.rs:4:14\n    |\n LL |     <fn() as Fn()>::call;\n-   |                ^^ associated type not allowed here\n+   |              ^^^^ associated type not allowed here\n \n error: aborting due to previous error\n "}, {"sha": "3fe47e249f10c0447bd407cc7b5e33a43a95f13c", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<Foo>` cannot be sent between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n LL | fn f<T: Send>(_: T) {}\n-   | ------------------- required by `f`\n+   |    -    ---- required by this bound in `f`\n ...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `std::rc::Rc<Foo>` cannot be sent between threads safely\n@@ -16,7 +16,7 @@ error[E0277]: `std::rc::Rc<Foo>` cannot be shared between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n LL | fn f<T: Send>(_: T) {}\n-   | ------------------- required by `f`\n+   |    -    ---- required by this bound in `f`\n ...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `std::rc::Rc<Foo>` cannot be shared between threads safely"}, {"sha": "2c57b8585d92400a0eae4b899a836bfc0a659521", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,31 +1,27 @@\n error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-43623.rs:14:5\n    |\n-LL | / pub fn break_me<T, F>(f: F)\n-LL | | where T: for<'b> Trait<'b>,\n-LL | |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n-LL | |     break_me::<Type, fn(_)>;\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   | |     |\n-   | |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n-   | |     found signature of `fn(_) -> _`\n-LL | |\n-LL | |\n-LL | | }\n-   | |_- required by `break_me`\n+LL | pub fn break_me<T, F>(f: F)\n+   |        --------\n+LL | where T: for<'b> Trait<'b>,\n+LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n+   |          -------------------------------------- required by this bound in `break_me`\n+LL |     break_me::<Type, fn(_)>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n+   |     found signature of `fn(_) -> _`\n \n error[E0271]: type mismatch resolving `for<'b> <fn(_) as std::ops::FnOnce<(<Type as Trait<'b>>::Assoc,)>>::Output == ()`\n   --> $DIR/issue-43623.rs:14:5\n    |\n-LL | / pub fn break_me<T, F>(f: F)\n-LL | | where T: for<'b> Trait<'b>,\n-LL | |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n-LL | |     break_me::<Type, fn(_)>;\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'b, found concrete lifetime\n-LL | |\n-LL | |\n-LL | | }\n-   | |_- required by `break_me`\n+LL | pub fn break_me<T, F>(f: F)\n+   |        --------\n+LL | where T: for<'b> Trait<'b>,\n+LL |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n+   |                  ------------------------------ required by this bound in `break_me`\n+LL |     break_me::<Type, fn(_)>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'b, found concrete lifetime\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6cde93734667fca1fba59aca6b65f9274ee65428", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -10,18 +10,17 @@ LL |         self.foo.map(Foo::new)\n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:9\n    |\n-LL |       Bar(i32),\n-   |       -------- takes 1 argument\n+LL |     Bar(i32),\n+   |     -------- takes 1 argument\n ...\n-LL | / fn foo<F>(f: F)\n-LL | | where\n-LL | |     F: Fn(),\n-LL | | {\n-LL | | }\n-   | |_- required by `foo`\n+LL | fn foo<F>(f: F)\n+   |    ---\n+LL | where\n+LL |     F: Fn(),\n+   |        ---- required by this bound in `foo`\n ...\n-LL |       foo(Qux::Bar);\n-   |           ^^^^^^^^ expected function that takes 0 arguments\n+LL |     foo(Qux::Bar);\n+   |         ^^^^^^^^ expected function that takes 0 arguments\n \n error: aborting due to 2 previous errors\n "}, {"sha": "586548002072ed201e1a4fb44de50acfaf2a38da", "filename": "src/test/ui/issues/issue-52533.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -17,3 +17,4 @@ LL |     foo(|a, b| b)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "69c1d85e4e12d031e249e235834a7a950ba94091", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,27 +1,29 @@\n error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-60283.rs:14:13\n    |\n-LL | / pub fn foo<T, F>(_: T, _: F)\n-LL | | where T: for<'a> Trait<'a>,\n-LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   | |_________________________________________________- required by `foo`\n+LL | pub fn foo<T, F>(_: T, _: F)\n+   |        ---\n+LL | where T: for<'a> Trait<'a>,\n+LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n+   |          ------------------------------------- required by this bound in `foo`\n ...\n-LL |       foo((), drop)\n-   |               ^^^^\n-   |               |\n-   |               expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n-   |               found signature of `fn(_) -> _`\n+LL |     foo((), drop)\n+   |             ^^^^\n+   |             |\n+   |             expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n+   |             found signature of `fn(_) -> _`\n \n error[E0271]: type mismatch resolving `for<'a> <fn(_) {std::mem::drop::<_>} as std::ops::FnOnce<(<() as Trait<'a>>::Item,)>>::Output == ()`\n   --> $DIR/issue-60283.rs:14:5\n    |\n-LL | / pub fn foo<T, F>(_: T, _: F)\n-LL | | where T: for<'a> Trait<'a>,\n-LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   | |_________________________________________________- required by `foo`\n+LL | pub fn foo<T, F>(_: T, _: F)\n+   |        ---\n+LL | where T: for<'a> Trait<'a>,\n+LL |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n+   |                  ----------------------------- required by this bound in `foo`\n ...\n-LL |       foo((), drop)\n-   |       ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+LL |     foo((), drop)\n+   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c1c79091fc802b3b86f1148142adb3913e31544e", "filename": "src/test/ui/issues/issue-63983.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,15 @@\n+enum MyEnum {\n+    Tuple(i32),\n+    Struct{ s: i32 },\n+}\n+\n+fn foo(en: MyEnum) {\n+    match en {\n+        MyEnum::Tuple => \"\",\n+        //~^ ERROR expected unit struct/variant or constant, found tuple variant `MyEnum::Tuple`\n+        MyEnum::Struct => \"\",\n+        //~^ ERROR expected unit struct/variant or constant, found struct variant `MyEnum::Struct`\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "67acd1d57c27aabdc9b136836222a113181c5ac9", "filename": "src/test/ui/issues/issue-63983.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,15 @@\n+error[E0532]: expected unit struct/variant or constant, found tuple variant `MyEnum::Tuple`\n+  --> $DIR/issue-63983.rs:8:9\n+   |\n+LL |         MyEnum::Tuple => \"\",\n+   |         ^^^^^^^^^^^^^ did you mean `MyEnum::Tuple ( /* fields */ )`?\n+\n+error[E0532]: expected unit struct/variant or constant, found struct variant `MyEnum::Struct`\n+  --> $DIR/issue-63983.rs:10:9\n+   |\n+LL |         MyEnum::Struct => \"\",\n+   |         ^^^^^^^^^^^^^^ did you mean `MyEnum::Struct { /* fields */ }`?\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0532`."}, {"sha": "71e054b5d9876a47f9ffeebc720ee43a31dac3a5", "filename": "src/test/ui/issues/issue-64559.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-64559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-64559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let orig = vec![true];\n+    for _val in orig {}\n+    let _closure = || orig;\n+    //~^ ERROR use of moved value: `orig`\n+}"}, {"sha": "3c685dc8d089a145dc8ce0bd95ba2941905eab0a", "filename": "src/test/ui/issues/issue-64559.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,18 @@\n+error[E0382]: use of moved value: `orig`\n+  --> $DIR/issue-64559.rs:4:20\n+   |\n+LL |     let orig = vec![true];\n+   |         ---- move occurs because `orig` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+LL |     for _val in orig {}\n+   |                 ----\n+   |                 |\n+   |                 value moved here\n+   |                 help: consider borrowing to avoid moving into the for loop: `&orig`\n+LL |     let _closure = || orig;\n+   |                    ^^ ---- use occurs due to use in closure\n+   |                    |\n+   |                    value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "9e787f638a9989d7827d58bf6e4845847f8c458f", "filename": "src/test/ui/issues/issue-64593.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#![deny(improper_ctypes)]\n+\n+pub struct Error(std::num::NonZeroU32);\n+\n+extern \"Rust\" {\n+    fn foo(dest: &mut [u8]) -> Result<(), Error>;\n+}\n+\n+fn main() {\n+    let _ = unsafe { foo(&mut []) };\n+}"}, {"sha": "a11ce1654cad8de51e8a37432d78c93307d87dad", "filename": "src/test/ui/issues/issue-7246.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7246.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,19 +1,16 @@\n error: unreachable statement\n   --> $DIR/issue-7246.rs:7:5\n    |\n+LL |     return;\n+   |     ------ any code following this expression is unreachable\n LL |     if *ptr::null() {};\n-   |     ^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/issue-7246.rs:1:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/issue-7246.rs:6:5\n-   |\n-LL |     return;\n-   |     ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3ca9cf7e973dbddb0f13d0d0a58a433453d2af42", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,68 +1,68 @@\n error[E0277]: the trait bound `&'static mut isize: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:27:5\n+  --> $DIR/kindck-copy.rs:27:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'static mut isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'static mut isize`\n+   |                   ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'static mut isize`\n    |\n    = help: the following implementations were found:\n              <isize as std::marker::Copy>\n \n error[E0277]: the trait bound `&'a mut isize: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:28:5\n+  --> $DIR/kindck-copy.rs:28:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'a mut isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut isize`\n+   |                   ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut isize`\n    |\n    = help: the following implementations were found:\n              <isize as std::marker::Copy>\n \n error[E0277]: the trait bound `std::boxed::Box<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:31:5\n+  --> $DIR/kindck-copy.rs:31:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<isize>`\n+   |                   ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<isize>`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:32:5\n+  --> $DIR/kindck-copy.rs:32:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<String>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   |                   ^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n \n error[E0277]: the trait bound `std::vec::Vec<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:33:5\n+  --> $DIR/kindck-copy.rs:33:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Vec<isize> >();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::vec::Vec<isize>`\n+   |                   ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::vec::Vec<isize>`\n \n error[E0277]: the trait bound `std::boxed::Box<&'a mut isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:34:5\n+  --> $DIR/kindck-copy.rs:34:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<&'a mut isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<&'a mut isize>`\n+   |                   ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<&'a mut isize>`\n \n error[E0277]: the trait bound `std::boxed::Box<dyn Dummy>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:42:5\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy>`\n@@ -71,37 +71,37 @@ error[E0277]: the trait bound `std::boxed::Box<dyn Dummy + std::marker::Send>: s\n   --> $DIR/kindck-copy.rs:43:5\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<dyn Dummy + Send>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy + std::marker::Send>`\n \n error[E0277]: the trait bound `&'a mut (dyn Dummy + std::marker::Send + 'a): std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:46:5\n+  --> $DIR/kindck-copy.rs:46:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n \n error[E0277]: the trait bound `MyNoncopyStruct: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:64:5\n+  --> $DIR/kindck-copy.rs:64:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<MyNoncopyStruct>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `MyNoncopyStruct`\n+   |                   ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `MyNoncopyStruct`\n \n error[E0277]: the trait bound `std::rc::Rc<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:67:5\n+  --> $DIR/kindck-copy.rs:67:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n-   | ------------------------ required by `assert_copy`\n+   |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Rc<isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<isize>`\n+   |                   ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<isize>`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "8e98911324411c2439b4ee928f7bd94eeea874c4", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n-   | ----------------------------- required by `take_param`\n+   |    ----------   --- required by this bound in `take_param`\n ...\n LL |     take_param(&x);\n    |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`"}, {"sha": "27901d069279950282da9542c63b5ec4ca140dc5", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is\n   --> $DIR/kindck-inherited-copy-bound.rs:18:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }\n-   | ----------------------------- required by `take_param`\n+   |    ----------   --- required by this bound in `take_param`\n ...\n LL |     take_param(&x);\n    |                ^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`"}, {"sha": "40b67f8fe8cd70145a710dd180cf7f334678f3fe", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<usize>` cannot be sent between threads safely\n   --> $DIR/kindck-nonsendable-1.rs:9:5\n    |\n LL | fn bar<F:FnOnce() + Send>(_: F) { }\n-   | ------------------------------- required by `bar`\n+   |    ---              ---- required by this bound in `bar`\n ...\n LL |     bar(move|| foo(x));\n    |     ^^^ `std::rc::Rc<usize>` cannot be sent between threads safely"}, {"sha": "8708537f8630f69ba326feeab9518c3c25c9672e", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object.rs:17:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely"}, {"sha": "f882e06ed222aae51777fab677b5f37bfd491d5a", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   | -------------------------------- required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   | -------------------------------- required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely"}, {"sha": "436b92637aaad1d6918573c5edced8ef346c21b6", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   | -------------------------------- required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n@@ -22,7 +22,7 @@ error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n LL | fn assert_send<T:Send+'static>() { }\n-   | -------------------------------- required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely"}, {"sha": "6cb82edf263b1083a3b4dd44ec12ae4798f53b1b", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object2.rs:7:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<&'static dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n@@ -14,7 +14,7 @@ error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object2.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely"}, {"sha": "c74034954245837de0222061790baff66786f7bd", "filename": "src/test/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `*mut u8` cannot be sent between threads safely\n   --> $DIR/kindck-send-owned.rs:12:5\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<Box<*mut u8>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely"}, {"sha": "05ed51d0f117597bbb99ff5f1d9ae8b34a2b7072", "filename": "src/test/ui/kindck/kindck-send-unsafe.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n-  --> $DIR/kindck-send-unsafe.rs:6:5\n+  --> $DIR/kindck-send-unsafe.rs:6:19\n    |\n LL | fn assert_send<T:Send>() { }\n-   | ------------------------ required by `assert_send`\n+   |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<*mut &'a isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `*mut &'a isize`\n "}, {"sha": "0d428c256e7bc5eafb7f503eeb779acd7596ae6c", "filename": "src/test/ui/lint/lint-attr-non-item-node.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-attr-non-item-node.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,19 +1,16 @@\n error: unreachable statement\n   --> $DIR/lint-attr-non-item-node.rs:7:9\n    |\n+LL |         break;\n+   |         ----- any code following this expression is unreachable\n LL |         \"unreachable\";\n-   |         ^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/lint-attr-non-item-node.rs:4:12\n    |\n LL |     #[deny(unreachable_code)]\n    |            ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/lint-attr-non-item-node.rs:6:9\n-   |\n-LL |         break;\n-   |         ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1af44ecf362bf50158bd94f9972aaa8a0398fc1e", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -3,7 +3,7 @@\n // Exercise the unused_mut attribute in some positive and negative cases\n \n #![deny(unused_mut)]\n-#![feature(async_closure, param_attrs)]\n+#![feature(async_closure)]\n \n async fn baz_async(\n     mut a: i32,"}, {"sha": "1a6b5183f0fae48b735084c400a0b84a951ea3da", "filename": "src/test/ui/lint/lint-unused-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_closure, param_attrs)]\n+#![feature(async_closure)]\n #![deny(unused_variables)]\n \n async fn foo_async("}, {"sha": "eedd877fe7841f71bcb17fe0291c9318a7cd3a08", "filename": "src/test/ui/lint/unreachable-async-fn.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flint%2Funreachable-async-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flint%2Funreachable-async-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable-async-fn.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+// edition:2018\n+\n+#[allow(dead_code)]\n+async fn foo () { // unreachable lint doesn't trigger\n+   unimplemented!()\n+}\n+\n+fn main() {}"}, {"sha": "6ea20081e50184e7fc2d3c49004f21a426ab4107", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,20 +1,17 @@\n warning: unreachable statement\n   --> $DIR/liveness-unused.rs:92:9\n    |\n+LL |         continue;\n+   |         -------- any code following this expression is unreachable\n LL |         drop(*x as i32);\n-   |         ^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/liveness-unused.rs:1:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n-note: any code following this expression is unreachable\n-  --> $DIR/liveness-unused.rs:91:9\n-   |\n-LL |         continue;\n-   |         ^^^^^^^^\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:8:7"}, {"sha": "26f756c91833bf7ba4e46f5bf60a12fb8d94a36d", "filename": "src/test/ui/lub-if.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flub-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flub-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -26,3 +26,4 @@ LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "0cb0a23c6f2df30339960f73eed818cd76a247cf", "filename": "src/test/ui/lub-match.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flub-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Flub-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -26,3 +26,4 @@ LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "4508870746bcbd2ffc932aeaa864b759e2a86a04", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n-  --> $DIR/overlap-marker-trait.rs:27:5\n+  --> $DIR/overlap-marker-trait.rs:27:17\n    |\n LL | fn is_marker<T: Marker>() { }\n-   | ------------------------- required by `is_marker`\n+   |    ---------    ------ required by this bound in `is_marker`\n ...\n LL |     is_marker::<NotDebugOrDisplay>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n \n error: aborting due to previous error\n "}, {"sha": "66e5c91ad2054280591102ca6b60554d3aa29298", "filename": "src/test/ui/match/match-no-arms-unreachable-after.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-no-arms-unreachable-after.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,19 +1,16 @@\n error: unreachable statement\n   --> $DIR/match-no-arms-unreachable-after.rs:8:5\n    |\n+LL |     match v { }\n+   |     ----------- any code following this expression is unreachable\n LL |     let x = 2;\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/match-no-arms-unreachable-after.rs:2:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/match-no-arms-unreachable-after.rs:7:5\n-   |\n-LL |     match v { }\n-   |     ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "88c1efdbb90f4d64620e50981cabfef5c1f325ec", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:7:5\n    |\n LL | fn foo<F: Fn(usize)>(_: F) {}\n-   | -------------------------- required by `foo`\n+   |    ---    --------- required by this bound in `foo`\n ...\n LL |     foo(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n@@ -13,7 +13,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:8:5\n    |\n LL | fn bar<F: Fn<usize>>(_: F) {}\n-   | -------------------------- required by `bar`\n+   |    ---    --------- required by this bound in `bar`\n ...\n LL |     bar(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n@@ -24,7 +24,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:9:9\n    |\n LL | fn foo<F: Fn(usize)>(_: F) {}\n-   | -------------------------- required by `foo`\n+   |    ---    --------- required by this bound in `foo`\n ...\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n@@ -36,7 +36,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:10:9\n    |\n LL | fn bar<F: Fn<usize>>(_: F) {}\n-   | -------------------------- required by `bar`\n+   |    ---    --------- required by this bound in `bar`\n LL | fn main() {\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`"}, {"sha": "ed2b3f0c3ce6c4e81fb6971cf31b11353efe6263", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -46,7 +46,7 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:13:5\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n-   | ------------------------ required by `f`\n+   |    -    --------- required by this bound in `f`\n ...\n LL |     f(|| panic!());\n    |     ^ -- takes 0 arguments\n@@ -61,7 +61,7 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:15:5\n    |\n LL | fn f<F: Fn<usize>>(_: F) {}\n-   | ------------------------ required by `f`\n+   |    -    --------- required by this bound in `f`\n ...\n LL |     f(  move    || panic!());\n    |     ^   ---------- takes 0 arguments\n@@ -143,7 +143,7 @@ LL |     call(Foo);\n    |          ^^^ expected function that takes 0 arguments\n ...\n LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n-   | ------------------------------------------ required by `call`\n+   |    ----                      ------------- required by this bound in `call`\n LL | struct Foo(u8);\n    | --------------- takes 1 argument\n "}, {"sha": "85cad61210ebf7734fe37073611d859ac27808a0", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -26,7 +26,7 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/closure-arg-type-mismatch.rs:10:9\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ------------------------------ required by `baz`\n+   |    ---    ------------- required by this bound in `baz`\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |         ^\n@@ -38,7 +38,7 @@ error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::Fn\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ------------------------------ required by `baz`\n+   |    ---    ------------- required by this bound in `baz`\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime"}, {"sha": "fd2b9f3c66b0451346c313cbbb0c236fa945e545", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL | fn baz<T: Foo>(_: T) {}\n-   | -------------------- required by `baz`\n+   |    ---    --- required by this bound in `baz`\n ...\n LL |     baz(|_| ());\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n@@ -13,7 +13,7 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n LL | fn baz<T: Foo>(_: T) {}\n-   | -------------------- required by `baz`\n+   |    ---    --- required by this bound in `baz`\n ...\n LL |     baz(|_| ());\n    |     ^^^ ------ found signature of `fn(_) -> _`"}, {"sha": "1a82dd53edc702964396823b5e4dad154b1b7353", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -5,7 +5,7 @@ LL | fn takes_mut(x: &mut isize) { }\n    | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n LL | \n LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   | --------------------------------------------- required by `apply`\n+   |    -----                            --------- required by this bound in `apply`\n ...\n LL |     apply(&3, takes_mut);\n    |               ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n@@ -17,7 +17,7 @@ LL | fn takes_imm(x: &isize) { }\n    | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n ...\n LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   | --------------------------------------------- required by `apply`\n+   |    -----                            --------- required by this bound in `apply`\n ...\n LL |     apply(&mut 3, takes_imm);\n    |                   ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`"}, {"sha": "4a9afb9d2494e615b440d64df730b3b1dc64553c", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -6,6 +6,8 @@ LL |         Some(true)\n    |\n    = note: expected type `bool` (type parameter)\n               found type `bool` (bool)\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error: aborting due to previous error\n "}, {"sha": "2bd4d3384469ff8d81b1b59315d6600654022caa", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -5,7 +5,8 @@ use std::ops::FnMut;\n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n \n fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-//~^ NOTE required by `call_it`\n+//~^ NOTE required by this bound in `call_it`\n+//~| NOTE\n     f(2, y)\n }\n "}, {"sha": "2daf4781c7e6f3e4ef83182288a60c97809fbb36", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,8 +1,8 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:15:24\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:16:24\n    |\n LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-   | -------------------------------------------------------------------- required by `call_it`\n+   |    -------   ------------------------- required by this bound in `call_it`\n ...\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`"}, {"sha": "0290efc3d9679ab451c92ac6a9a1dd7e1c091b35", "filename": "src/test/ui/mut/mutable-enum-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/mutable-enum-indirect.rs:17:5\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(&x);\n    |     ^^^ `NoSync` cannot be shared between threads safely"}, {"sha": "71a06fce4b9e15ba90be86b0eb95faccc993da83", "filename": "src/test/ui/mutexguard-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutexguard-sync.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/mutexguard-sync.rs:11:15\n    |\n LL | fn test_sync<T: Sync>(_t: T) {}\n-   | ---------------------------- required by `test_sync`\n+   |    ---------    ---- required by this bound in `test_sync`\n ...\n LL |     test_sync(guard);\n    |               ^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely"}, {"sha": "aa21928aaeff28e0d30d93238581e35577e64988", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -70,7 +70,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m1::S{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -79,7 +79,7 @@ error[E0277]: the trait bound `c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:35:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m2::S{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::S`\n@@ -88,7 +88,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:36:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m2::S);\n    |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -97,7 +97,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:39:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm1::S{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -106,7 +106,7 @@ error[E0277]: the trait bound `namespace_mix::c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:41:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm2::S{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n@@ -115,7 +115,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:42:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm2::S);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -124,7 +124,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:55:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m3::TS{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -133,7 +133,7 @@ error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfi\n   --> $DIR/namespace-mix.rs:56:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m3::TS);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n@@ -142,7 +142,7 @@ error[E0277]: the trait bound `c::TS: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:57:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m4::TS{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::TS`\n@@ -151,7 +151,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:58:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m4::TS);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -160,7 +160,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:61:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm3::TS{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -169,7 +169,7 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::T\n   --> $DIR/namespace-mix.rs:62:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm3::TS);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n@@ -178,7 +178,7 @@ error[E0277]: the trait bound `namespace_mix::c::TS: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:63:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm4::TS{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n@@ -187,7 +187,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:64:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm4::TS);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -196,7 +196,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:77:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m5::US{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -205,7 +205,7 @@ error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:78:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m5::US);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::US`\n@@ -214,7 +214,7 @@ error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:79:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m6::US{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::US`\n@@ -223,7 +223,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:80:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m6::US);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -232,7 +232,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:83:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm5::US{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -241,7 +241,7 @@ error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:84:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm5::US);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n@@ -250,7 +250,7 @@ error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfie\n   --> $DIR/namespace-mix.rs:85:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm6::US{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n@@ -259,7 +259,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:86:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm6::US);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -268,7 +268,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:99:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m7::V{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -277,7 +277,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:101:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m8::V{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -286,7 +286,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:102:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m8::V);\n    |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -295,7 +295,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:105:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm7::V{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -304,7 +304,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:107:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm8::V{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -313,7 +313,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:108:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm8::V);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -322,7 +322,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:121:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m9::TV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -331,7 +331,7 @@ error[E0277]: the trait bound `fn() -> c::E {c::E::TV}: Impossible` is not satis\n   --> $DIR/namespace-mix.rs:122:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(m9::TV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n@@ -340,7 +340,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:123:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mA::TV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -349,7 +349,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:124:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mA::TV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -358,7 +358,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:127:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm9::TV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -367,7 +367,7 @@ error[E0277]: the trait bound `fn() -> namespace_mix::c::E {namespace_mix::xm7::\n   --> $DIR/namespace-mix.rs:128:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xm9::TV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n@@ -376,7 +376,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:129:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmA::TV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -385,7 +385,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:130:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmA::TV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -394,7 +394,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:143:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mB::UV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -403,7 +403,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:144:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mB::UV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -412,7 +412,7 @@ error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:145:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mC::UV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n@@ -421,7 +421,7 @@ error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:146:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(mC::UV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n@@ -430,7 +430,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:149:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmB::UV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n@@ -439,7 +439,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:150:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmB::UV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -448,7 +448,7 @@ error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:151:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmC::UV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n@@ -457,7 +457,7 @@ error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisf\n   --> $DIR/namespace-mix.rs:152:11\n    |\n LL | fn check<T: Impossible>(_: T) {}\n-   | ----------------------------- required by `check`\n+   |    -----    ---------- required by this bound in `check`\n ...\n LL |     check(xmC::UV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`"}, {"sha": "b887d580e68a9b38c6f8204d040bfaac6d28a454", "filename": "src/test/ui/never-assign-dead-code.stderr", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,33 +1,26 @@\n warning: unreachable statement\n   --> $DIR/never-assign-dead-code.rs:10:5\n    |\n+LL |     let x: ! = panic!(\"aah\");\n+   |                ------------- any code following this expression is unreachable\n LL |     drop(x);\n-   |     ^^^^^^^^\n+   |     ^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/never-assign-dead-code.rs:5:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n-note: any code following this expression is unreachable\n-  --> $DIR/never-assign-dead-code.rs:9:16\n-   |\n-LL |     let x: ! = panic!(\"aah\");\n-   |                ^^^^^^^^^^^^^\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n warning: unreachable call\n   --> $DIR/never-assign-dead-code.rs:10:5\n    |\n LL |     drop(x);\n-   |     ^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/never-assign-dead-code.rs:10:10\n-   |\n-LL |     drop(x);\n-   |          ^\n+   |     ^^^^ - any code following this expression is unreachable\n+   |     |\n+   |     unreachable call\n \n warning: unused variable: `x`\n   --> $DIR/never-assign-dead-code.rs:9:9"}, {"sha": "90a35177f4c3bae75e75119c11f75ec8eb77430e", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -20,3 +20,4 @@ LL | |     }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "4ec16ba055a4c48a4edd34379ce63a8cb173b391", "filename": "src/test/ui/nll/issue-55401.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -13,3 +13,4 @@ LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "0a8ad4221c986ed509e1018b9a779cb5176e20cc", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -13,3 +13,4 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "d596aaf098f7709db1a58a8268d1c5e2191413f3", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -13,3 +13,4 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "80ff9a043d4d5004fe06283c1ec474fd3545796f", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -13,3 +13,4 @@ LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "01fc29713a45dd2e27c970cdb7c4698cc11eb7ce", "filename": "src/test/ui/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,3 +1,5 @@\n+// ignore-x86\n+// ^ due to stderr output differences\n use std::thread;\n use std::rc::Rc;\n "}, {"sha": "dc186f7c85e94725728d917c131b5815b1fc2f02", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,14 +1,18 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/no-send-res-ports.rs:25:5\n+  --> $DIR/no-send-res-ports.rs:27:5\n    |\n LL |     thread::spawn(move|| {\n    |     ^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n+   | \n+  ::: $SRC_DIR/libstd/thread/mod.rs:LL:COL\n    |\n-   = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n+LL |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n+   |                          ---- required by this bound in `std::thread::spawn`\n+   |\n+   = help: within `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `Port<()>`\n    = note: required because it appears within the type `main::Foo`\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6 x:main::Foo]`\n-   = note: required by `std::thread::spawn`\n+   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:27:19: 31:6 x:main::Foo]`\n \n error: aborting due to previous error\n "}, {"sha": "8a4b2e9c7a7c14267fb50b210859e6cc5a373216", "filename": "src/test/ui/no_send-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_send-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_send-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSend` cannot be sent between threads safely\n   --> $DIR/no_send-enum.rs:16:5\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |     ^^^ `NoSend` cannot be sent between threads safely"}, {"sha": "bd646d0509daf487465ac857813d7f9847fbf307", "filename": "src/test/ui/no_send-rc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_send-rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_send-rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-rc.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `std::rc::Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/no_send-rc.rs:7:9\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `std::rc::Rc<{integer}>` cannot be sent between threads safely"}, {"sha": "4823852c2ff8061484dada19553f69526e520d7c", "filename": "src/test/ui/no_send-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_send-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_send-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `Foo` cannot be sent between threads safely\n   --> $DIR/no_send-struct.rs:15:9\n    |\n LL | fn bar<T: Send>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `Foo` cannot be sent between threads safely"}, {"sha": "f42228ef6ab42088acba038f4bd51eaf1bd9e1cb", "filename": "src/test/ui/no_share-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_share-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_share-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/no_share-enum.rs:14:5\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |     ^^^ `NoSync` cannot be shared between threads safely"}, {"sha": "620b5427b9aec7eeb22c4075a17b143cef764a44", "filename": "src/test/ui/no_share-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_share-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fno_share-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `Foo` cannot be shared between threads safely\n   --> $DIR/no_share-struct.rs:12:9\n    |\n LL | fn bar<T: Sync>(_: T) {}\n-   | --------------------- required by `bar`\n+   |    ---    ---- required by this bound in `bar`\n ...\n LL |     bar(x);\n    |         ^ `Foo` cannot be shared between threads safely"}, {"sha": "6668d2d0db1916edb8f8db33993cb444876a0267", "filename": "src/test/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "c23b08fc9eda97fdd27e28d3cac000265b4511ba", "filename": "src/test/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "916804a834f58d5b351a0a2723fe13b68f8211da", "filename": "src/test/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "d5c189723f402809c5cbb25f76fd34299e65f138", "filename": "src/test/ui/not-panic/not-panic-safe-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-5.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<*const UnsafeCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "c8013a836a177ae1e993bc2a2a45c7e97ab72788", "filename": "src/test/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutabil\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n@@ -15,7 +15,7 @@ error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutab\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary"}, {"sha": "aa18b923044c6a52d8db6ad3d1b082eb9755b28b", "filename": "src/test/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the type `&mut i32` may not be safely transferred across an unwind\n   --> $DIR/not-panic-safe.rs:9:5\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ----------------------------------- required by `assert`\n+   |    ------    ---------- required by this bound in `assert`\n ...\n LL |     assert::<&mut i32>();\n    |     ^^^^^^^^^^^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary"}, {"sha": "8bb4ce2e2c77340904ff5a0d95759e38c469f552", "filename": "src/test/ui/not-sync.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fnot-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-sync.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,66 +1,66 @@\n error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:8:5\n+  --> $DIR/not-sync.rs:8:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Cell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n \n error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:10:5\n+  --> $DIR/not-sync.rs:10:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n \n error[E0277]: `std::rc::Rc<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:13:5\n+  --> $DIR/not-sync.rs:13:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Rc<i32>>();\n-   |     ^^^^^^^^^^^^^^^ `std::rc::Rc<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^ `std::rc::Rc<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Rc<i32>`\n \n error[E0277]: `std::rc::Weak<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:15:5\n+  --> $DIR/not-sync.rs:15:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Weak<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Weak<i32>`\n \n error[E0277]: `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:18:5\n+  --> $DIR/not-sync.rs:18:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Receiver<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<i32>`\n \n error[E0277]: `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:20:5\n+  --> $DIR/not-sync.rs:20:12\n    |\n LL | fn test<T: Sync>() {}\n-   | ------------------ required by `test`\n+   |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Sender<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^ `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<i32>`\n "}, {"sha": "7ac199d0943839f134790d1f017443141f935049", "filename": "src/test/ui/object-does-not-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::boxed::Box<dyn Foo>: Foo` is not satisfied\n   --> $DIR/object-does-not-impl-trait.rs:6:44\n    |\n LL | fn take_foo<F:Foo>(f: F) {}\n-   | ------------------------ required by `take_foo`\n+   |    --------   --- required by this bound in `take_foo`\n LL | fn take_object(f: Box<dyn Foo>) { take_foo(f); }\n    |                                            ^ the trait `Foo` is not implemented for `std::boxed::Box<dyn Foo>`\n "}, {"sha": "8fe7ed4a20443757c2f2a659947628c31aa282cc", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIte\n   --> $DIR/on-trait.rs:28:30\n    |\n LL | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n-   | -------------------------------------------------------------------- required by `collect`\n+   |    -------                            ----------------- required by this bound in `collect`\n ...\n LL |     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n    |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n@@ -13,7 +13,7 @@ error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not\n   --> $DIR/on-trait.rs:31:21\n    |\n LL | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n-   | ---------------------------------------------- required by `foobar`\n+   |    ------              --------------- required by this bound in `foobar`\n ...\n LL |     let x: String = foobar();\n    |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`"}, {"sha": "15ebcd17b0dbc7d37170d79bf40d99846a13d8fd", "filename": "src/test/ui/overlap-marker-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n-  --> $DIR/overlap-marker-trait.rs:30:5\n+  --> $DIR/overlap-marker-trait.rs:30:17\n    |\n LL | fn is_marker<T: Marker>() { }\n-   | ------------------------- required by `is_marker`\n+   |    ---------    ------ required by this bound in `is_marker`\n ...\n LL |     is_marker::<NotDebugOrDisplay>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n \n error: aborting due to previous error\n "}, {"sha": "000956ea24fadb5c14d1dd352d6756464fcf276f", "filename": "src/test/ui/parser/assoc-type-in-type-arg.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Fassoc-type-in-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Fassoc-type-in-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-type-in-type-arg.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,11 @@\n+trait Tr {\n+    type TrSubtype;\n+}\n+\n+struct Bar<'a, Item: Tr, <Item as Tr>::TrSubtype: 'a> {\n+    //~^ ERROR bounds on associated types do not belong here\n+    item: Item,\n+    item_sub: &'a <Item as Tr>::TrSubtype,\n+}\n+\n+fn main() {}"}, {"sha": "b637702f21e90d3452fc5cf1864df81132747180", "filename": "src/test/ui/parser/assoc-type-in-type-arg.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Fassoc-type-in-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Fassoc-type-in-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-type-in-type-arg.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -0,0 +1,8 @@\n+error: bounds on associated types do not belong here\n+  --> $DIR/assoc-type-in-type-arg.rs:5:26\n+   |\n+LL | struct Bar<'a, Item: Tr, <Item as Tr>::TrSubtype: 'a> {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ belongs in `where` clause\n+\n+error: aborting due to previous error\n+"}, {"sha": "995eb62d0bb59b191b9b58e76c28b5e9911e9750", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,14 +2,10 @@ pub fn f(\n     /// Comment\n     //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n-    //~| ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n     id: u8,\n     /// Other\n     //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n-    //~| ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n     a: u8,\n ) {}\n "}, {"sha": "669785af45f9323d9d9e3aa3d3793b3d951259fb", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,5 +1,5 @@\n error: attributes cannot be applied to a function parameter's type\n-  --> $DIR/fn-arg-doc-comment.rs:16:12\n+  --> $DIR/fn-arg-doc-comment.rs:12:12\n    |\n LL | fn bar(id: #[allow(dead_code)] i32) {}\n    |            ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n@@ -11,31 +11,13 @@ LL |     /// Comment\n    |     ^^^^^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/fn-arg-doc-comment.rs:8:5\n+  --> $DIR/fn-arg-doc-comment.rs:6:5\n    |\n LL |     /// Other\n    |     ^^^^^^^^^ doc comments are not allowed here\n \n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/fn-arg-doc-comment.rs:2:5\n-   |\n-LL |     /// Comment\n-   |     ^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/fn-arg-doc-comment.rs:8:5\n-   |\n-LL |     /// Other\n-   |     ^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:22:7\n+  --> $DIR/fn-arg-doc-comment.rs:18:7\n    |\n LL |     f(\"\", \"\");\n    |       ^^ expected u8, found reference\n@@ -44,7 +26,7 @@ LL |     f(\"\", \"\");\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:22:11\n+  --> $DIR/fn-arg-doc-comment.rs:18:11\n    |\n LL |     f(\"\", \"\");\n    |           ^^ expected u8, found reference\n@@ -53,15 +35,14 @@ LL |     f(\"\", \"\");\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:29:9\n+  --> $DIR/fn-arg-doc-comment.rs:25:9\n    |\n LL |     bar(\"\");\n    |         ^^ expected i32, found reference\n    |\n    = note: expected type `i32`\n               found type `&'static str`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8f32fb0eca106c595b2667726b01cd286511a714", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -11,10 +11,10 @@ LL |     f.x::<>;\n    |          ^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:17:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:17:7\n    |\n LL |     f.x::();\n-   |          ^^\n+   |       ^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ac48ee0cb0fe37696a571ef6db264762a7ec11e0", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:21:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n-   | ----------------------- required by `is_zen`\n+   |    ------    --- required by this bound in `is_zen`\n ...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n@@ -17,7 +17,7 @@ error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:26:12\n    |\n LL | fn is_zen<T: Zen>(_: T) {}\n-   | ----------------------- required by `is_zen`\n+   |    ------    --- required by this bound in `is_zen`\n ...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely"}, {"sha": "880dea1cc3516fa5210f76a0a5559359f89c291e", "filename": "src/test/ui/reachable/expr_add.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_add.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,18 +2,16 @@ error: unreachable expression\n   --> $DIR/expr_add.rs:17:13\n    |\n LL |     let x = Foo + return;\n-   |             ^^^^^^^^^^^^\n+   |             ^^^^^^------\n+   |             |     |\n+   |             |     any code following this expression is unreachable\n+   |             unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_add.rs:3:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_add.rs:17:19\n-   |\n-LL |     let x = Foo + return;\n-   |                   ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "95006884242f925412414c742fdf8e527b9432e7", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,19 +1,16 @@\n error: unreachable statement\n   --> $DIR/expr_again.rs:8:9\n    |\n+LL |         continue;\n+   |         -------- any code following this expression is unreachable\n LL |         println!(\"hi\");\n-   |         ^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/expr_again.rs:3:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_again.rs:7:9\n-   |\n-LL |         continue;\n-   |         ^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "b3138d3c33fc08a73e26a38fb6d24ed72d91c2dc", "filename": "src/test/ui/reachable/expr_array.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_array.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,30 +2,24 @@ error: unreachable expression\n   --> $DIR/expr_array.rs:9:34\n    |\n LL |     let x: [usize; 2] = [return, 22];\n-   |                                  ^^\n+   |                          ------  ^^ unreachable expression\n+   |                          |\n+   |                          any code following this expression is unreachable\n    |\n note: lint level defined here\n   --> $DIR/expr_array.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_array.rs:9:26\n-   |\n-LL |     let x: [usize; 2] = [return, 22];\n-   |                          ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_array.rs:14:25\n    |\n LL |     let x: [usize; 2] = [22, return];\n-   |                         ^^^^^^^^^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_array.rs:14:30\n-   |\n-LL |     let x: [usize; 2] = [22, return];\n-   |                              ^^^^^^\n+   |                         ^^^^^------^\n+   |                         |    |\n+   |                         |    any code following this expression is unreachable\n+   |                         unreachable expression\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3004da040632867b4cd64100107c80f367ab6956", "filename": "src/test/ui/reachable/expr_assign.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_assign.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,42 +2,32 @@ error: unreachable expression\n   --> $DIR/expr_assign.rs:10:5\n    |\n LL |     x = return;\n-   |     ^^^^^^^^^^\n+   |     ^^^^------\n+   |     |   |\n+   |     |   any code following this expression is unreachable\n+   |     unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_assign.rs:5:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_assign.rs:10:9\n-   |\n-LL |     x = return;\n-   |         ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_assign.rs:20:14\n    |\n LL |         *p = return;\n-   |              ^^^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_assign.rs:20:9\n-   |\n-LL |         *p = return;\n-   |         ^^\n+   |         --   ^^^^^^ unreachable expression\n+   |         |\n+   |         any code following this expression is unreachable\n \n error: unreachable expression\n   --> $DIR/expr_assign.rs:26:15\n    |\n LL |     *{return; &mut i} = 22;\n-   |               ^^^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_assign.rs:26:7\n-   |\n-LL |     *{return; &mut i} = 22;\n-   |       ^^^^^^\n+   |       ------  ^^^^^^ unreachable expression\n+   |       |\n+   |       any code following this expression is unreachable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "44baddd1e5503bbcc7892240614087420697b4ed", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,31 +1,25 @@\n error: unreachable expression\n   --> $DIR/expr_block.rs:10:9\n    |\n+LL |         return;\n+   |         ------ any code following this expression is unreachable\n LL |         22\n-   |         ^^\n+   |         ^^ unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_block.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_block.rs:9:9\n-   |\n-LL |         return;\n-   |         ^^^^^^\n \n error: unreachable statement\n   --> $DIR/expr_block.rs:25:9\n    |\n+LL |         return;\n+   |         ------ any code following this expression is unreachable\n LL |         println!(\"foo\");\n-   |         ^^^^^^^^^^^^^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_block.rs:24:9\n+   |         ^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-LL |         return;\n-   |         ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "b01a13e9df29a0b6216f46401d9460d18a94ee6c", "filename": "src/test/ui/reachable/expr_box.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_box.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,18 +2,16 @@ error: unreachable expression\n   --> $DIR/expr_box.rs:6:13\n    |\n LL |     let x = box return;\n-   |             ^^^^^^^^^^\n+   |             ^^^^------\n+   |             |   |\n+   |             |   any code following this expression is unreachable\n+   |             unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_box.rs:3:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_box.rs:6:17\n-   |\n-LL |     let x = box return;\n-   |                 ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ae8b4dd87b5b9a5d55f2a328cdafe3a2edeb97f6", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,30 +2,23 @@ error: unreachable expression\n   --> $DIR/expr_call.rs:13:17\n    |\n LL |     foo(return, 22);\n-   |                 ^^\n+   |         ------  ^^ unreachable expression\n+   |         |\n+   |         any code following this expression is unreachable\n    |\n note: lint level defined here\n   --> $DIR/expr_call.rs:5:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_call.rs:13:9\n-   |\n-LL |     foo(return, 22);\n-   |         ^^^^^^\n \n error: unreachable call\n   --> $DIR/expr_call.rs:18:5\n    |\n LL |     bar(return);\n-   |     ^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_call.rs:18:9\n-   |\n-LL |     bar(return);\n-   |         ^^^^^^\n+   |     ^^^ ------ any code following this expression is unreachable\n+   |     |\n+   |     unreachable call\n \n error: aborting due to 2 previous errors\n "}, {"sha": "81813d1d71c3f01a79bc0d92eccaf83c68e1a8c7", "filename": "src/test/ui/reachable/expr_cast.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_cast.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,18 +2,16 @@ error: unreachable expression\n   --> $DIR/expr_cast.rs:9:13\n    |\n LL |     let x = {return} as !;\n-   |             ^^^^^^^^^^^^^\n+   |             ^------^^^^^^\n+   |             ||\n+   |             |any code following this expression is unreachable\n+   |             unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_cast.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_cast.rs:9:14\n-   |\n-LL |     let x = {return} as !;\n-   |              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ccd45ccec62c7acfcb4f58bd54f5183e3c6bf732", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,33 +2,28 @@ error: unreachable block in `if` expression\n   --> $DIR/expr_if.rs:7:17\n    |\n LL |       if {return} {\n-   |  _________________^\n+   |  _________------__^\n+   | |         |\n+   | |         any code following this expression is unreachable\n LL | |         println!(\"Hello, world!\");\n LL | |     }\n-   | |_____^\n+   | |_____^ unreachable block in `if` expression\n    |\n note: lint level defined here\n   --> $DIR/expr_if.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_if.rs:7:9\n-   |\n-LL |     if {return} {\n-   |         ^^^^^^\n \n error: unreachable statement\n   --> $DIR/expr_if.rs:27:5\n    |\n+LL |         return;\n+   |         ------ any code following this expression is unreachable\n+...\n LL |     println!(\"But I am.\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_if.rs:21:9\n-   |\n-LL |         return;\n-   |         ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "5f279c9630d309d18ef07b52fb9e4e81bb58dd23", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,45 +1,36 @@\n error: unreachable statement\n   --> $DIR/expr_loop.rs:8:5\n    |\n+LL |     loop { return; }\n+   |            ------ any code following this expression is unreachable\n LL |     println!(\"I am dead.\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/expr_loop.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_loop.rs:7:12\n-   |\n-LL |     loop { return; }\n-   |            ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:21:5\n    |\n+LL |     loop { return; }\n+   |            ------ any code following this expression is unreachable\n LL |     println!(\"I am dead.\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_loop.rs:20:12\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-LL |     loop { return; }\n-   |            ^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:32:5\n    |\n+LL |     loop { 'middle: loop { loop { break 'middle; } } }\n+   |     -------------------------------------------------- any code following this expression is unreachable\n LL |     println!(\"I am dead.\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_loop.rs:31:5\n-   |\n-LL |     loop { 'middle: loop { loop { break 'middle; } } }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "d39acdc290926e8dbb99ca216af815ec1abbcffa", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,32 +1,26 @@\n error: unreachable statement\n   --> $DIR/expr_match.rs:8:5\n    |\n+LL |     match () { () => return }\n+   |     ------------------------- any code following this `match` expression is unreachable, as all arms diverge\n LL |     println!(\"I am dead\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n note: lint level defined here\n   --> $DIR/expr_match.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this `match` expression is unreachable, as all arms diverge\n-  --> $DIR/expr_match.rs:7:5\n-   |\n-LL |     match () { () => return }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_match.rs:19:5\n    |\n+LL |     match () { () if false => return, () => return }\n+   |     ------------------------------------------------ any code following this `match` expression is unreachable, as all arms diverge\n LL |     println!(\"I am dead\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: any code following this `match` expression is unreachable, as all arms diverge\n-  --> $DIR/expr_match.rs:18:5\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-LL |     match () { () if false => return, () => return }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 2 previous errors"}, {"sha": "82a0745f0629f3ac9f1557e94dfa0d6d354c22f7", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,30 +2,23 @@ error: unreachable expression\n   --> $DIR/expr_method.rs:16:21\n    |\n LL |     Foo.foo(return, 22);\n-   |                     ^^\n+   |             ------  ^^ unreachable expression\n+   |             |\n+   |             any code following this expression is unreachable\n    |\n note: lint level defined here\n   --> $DIR/expr_method.rs:5:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_method.rs:16:13\n-   |\n-LL |     Foo.foo(return, 22);\n-   |             ^^^^^^\n \n error: unreachable call\n   --> $DIR/expr_method.rs:21:9\n    |\n LL |     Foo.bar(return);\n-   |         ^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_method.rs:21:13\n-   |\n-LL |     Foo.bar(return);\n-   |             ^^^^^^\n+   |         ^^^ ------ any code following this expression is unreachable\n+   |         |\n+   |         unreachable call\n \n error: aborting due to 2 previous errors\n "}, {"sha": "34129936fd7624fbe814fc3915731b158edb7519", "filename": "src/test/ui/reachable/expr_repeat.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_repeat.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,18 +2,16 @@ error: unreachable expression\n   --> $DIR/expr_repeat.rs:9:25\n    |\n LL |     let x: [usize; 2] = [return; 2];\n-   |                         ^^^^^^^^^^^\n+   |                         ^------^^^^\n+   |                         ||\n+   |                         |any code following this expression is unreachable\n+   |                         unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_repeat.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_repeat.rs:9:26\n-   |\n-LL |     let x: [usize; 2] = [return; 2];\n-   |                          ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c0a94746d08ebf97e1cc22f565a7feb9b8a5753c", "filename": "src/test/ui/reachable/expr_return.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,18 +2,16 @@ error: unreachable expression\n   --> $DIR/expr_return.rs:10:22\n    |\n LL |     let x = {return {return {return;}}};\n-   |                      ^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^------^^\n+   |                      |       |\n+   |                      |       any code following this expression is unreachable\n+   |                      unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_return.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_return.rs:10:30\n-   |\n-LL |     let x = {return {return {return;}}};\n-   |                              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2bc6a763cfaea60e77ea4437090e5d595ade69ca", "filename": "src/test/ui/reachable/expr_return_in_macro.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_return_in_macro.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,22 +1,17 @@\n error: unreachable expression\n   --> $DIR/expr_return_in_macro.rs:13:5\n    |\n+LL |         return ()\n+   |         --------- any code following this expression is unreachable\n+...\n LL |     return early_return!();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_return_in_macro.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_return_in_macro.rs:8:9\n-   |\n-LL |         return ()\n-   |         ^^^^^^^^^\n-...\n-LL |     return early_return!();\n-   |            --------------- in this macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "b3ca06eada3d5ba72bf6c5391d1b9bca39c961ac", "filename": "src/test/ui/reachable/expr_struct.stderr", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_struct.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,54 +2,41 @@ error: unreachable expression\n   --> $DIR/expr_struct.rs:14:13\n    |\n LL |     let x = Foo { a: 22, b: 33, ..return };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^------^^\n+   |             |                     |\n+   |             |                     any code following this expression is unreachable\n+   |             unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_struct.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_struct.rs:14:35\n-   |\n-LL |     let x = Foo { a: 22, b: 33, ..return };\n-   |                                   ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:19:33\n    |\n LL |     let x = Foo { a: return, b: 33, ..return };\n-   |                                 ^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_struct.rs:19:22\n-   |\n-LL |     let x = Foo { a: return, b: 33, ..return };\n-   |                      ^^^^^^\n+   |                      ------     ^^ unreachable expression\n+   |                      |\n+   |                      any code following this expression is unreachable\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:24:39\n    |\n LL |     let x = Foo { a: 22, b: return, ..return };\n-   |                                       ^^^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_struct.rs:24:29\n-   |\n-LL |     let x = Foo { a: 22, b: return, ..return };\n-   |                             ^^^^^^\n+   |                             ------    ^^^^^^ unreachable expression\n+   |                             |\n+   |                             any code following this expression is unreachable\n \n error: unreachable expression\n   --> $DIR/expr_struct.rs:29:13\n    |\n LL |     let x = Foo { a: 22, b: return };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_struct.rs:29:29\n-   |\n-LL |     let x = Foo { a: 22, b: return };\n-   |                             ^^^^^^\n+   |             ^^^^^^^^^^^^^^^^------^^\n+   |             |               |\n+   |             |               any code following this expression is unreachable\n+   |             unreachable expression\n \n error: aborting due to 4 previous errors\n "}, {"sha": "aaaf6462da895d37c6475f4faafc6ee158c8b114", "filename": "src/test/ui/reachable/expr_tup.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_tup.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,30 +2,24 @@ error: unreachable expression\n   --> $DIR/expr_tup.rs:9:38\n    |\n LL |     let x: (usize, usize) = (return, 2);\n-   |                                      ^\n+   |                              ------  ^ unreachable expression\n+   |                              |\n+   |                              any code following this expression is unreachable\n    |\n note: lint level defined here\n   --> $DIR/expr_tup.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_tup.rs:9:30\n-   |\n-LL |     let x: (usize, usize) = (return, 2);\n-   |                              ^^^^^^\n \n error: unreachable expression\n   --> $DIR/expr_tup.rs:14:29\n    |\n LL |     let x: (usize, usize) = (2, return);\n-   |                             ^^^^^^^^^^^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_tup.rs:14:33\n-   |\n-LL |     let x: (usize, usize) = (2, return);\n-   |                                 ^^^^^^\n+   |                             ^^^^------^\n+   |                             |   |\n+   |                             |   any code following this expression is unreachable\n+   |                             unreachable expression\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cb6e8d7039f2cd5200599088c9b4caada28d120d", "filename": "src/test/ui/reachable/expr_type.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_type.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,18 +2,16 @@ error: unreachable expression\n   --> $DIR/expr_type.rs:9:13\n    |\n LL |     let x = {return}: !;\n-   |             ^^^^^^^^^^^\n+   |             ^------^^^^\n+   |             ||\n+   |             |any code following this expression is unreachable\n+   |             unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_type.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_type.rs:9:14\n-   |\n-LL |     let x = {return}: !;\n-   |              ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f5c3564217bbab51b8a573460a960d4fdd378081", "filename": "src/test/ui/reachable/expr_unary.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_unary.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -8,18 +8,16 @@ error: unreachable expression\n   --> $DIR/expr_unary.rs:8:16\n    |\n LL |     let x: ! = ! { return; };\n-   |                ^^^^^^^^^^^^^\n+   |                ^^^^------^^^\n+   |                |   |\n+   |                |   any code following this expression is unreachable\n+   |                unreachable expression\n    |\n note: lint level defined here\n   --> $DIR/expr_unary.rs:5:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_unary.rs:8:20\n-   |\n-LL |     let x: ! = ! { return; };\n-   |                    ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "edb1dd2b9bc7042862a153c09e6b6e3f85fa0440", "filename": "src/test/ui/reachable/expr_while.stderr", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_while.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,38 +2,31 @@ error: unreachable block in `while` expression\n   --> $DIR/expr_while.rs:7:20\n    |\n LL |       while {return} {\n-   |  ____________________^\n+   |  ____________------__^\n+   | |            |\n+   | |            any code following this expression is unreachable\n LL | |\n LL | |         println!(\"Hello, world!\");\n LL | |     }\n-   | |_____^\n+   | |_____^ unreachable block in `while` expression\n    |\n note: lint level defined here\n   --> $DIR/expr_while.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_while.rs:7:12\n-   |\n-LL |     while {return} {\n-   |            ^^^^^^\n \n error: unreachable block in `while` expression\n   --> $DIR/expr_while.rs:22:20\n    |\n LL |       while {return} {\n-   |  ____________________^\n+   |  ____________------__^\n+   | |            |\n+   | |            any code following this expression is unreachable\n LL | |\n LL | |         println!(\"I am dead.\");\n LL | |     }\n-   | |_____^\n-   |\n-note: any code following this expression is unreachable\n-  --> $DIR/expr_while.rs:22:12\n-   |\n-LL |     while {return} {\n-   |            ^^^^^^\n+   | |_____^ unreachable block in `while` expression\n \n error: aborting due to 2 previous errors\n "}, {"sha": "01975d40fdf1f4b0c3b292deb99aa8209a87223f", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -52,26 +52,26 @@ LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n    |         ^^^^^^\n    |\n-note: ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n+note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n    |\n LL |     box B(&*v) as Box<X>\n    |         ^^^^^^\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n+  --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n    |          - help: consider adding an explicit lifetime bound `T: 'static`...\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^\n+   |           ^^^\n    |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-close-object-into-object-5.rs:17:9\n+note: ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n+  --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^\n+   |           ^^^\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11"}, {"sha": "7b9f2c9503b2fdbfa1e604f56ef99952ebf1541f", "filename": "src/test/ui/regions/regions-early-bound-error-method.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -17,3 +17,4 @@ LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "a68355b78f54ca2a82f8bf8b1f443451a74c8080", "filename": "src/test/ui/regions/regions-early-bound-error.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -17,3 +17,4 @@ LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "904dee6998c9bbe7c720c044edaa3c63aff4aa48", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -57,3 +57,4 @@ LL | fn nested<'x>(x: &'x isize) {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "21ead8b768f475db682079524370a9a75460cfb0", "filename": "src/test/ui/regions/regions-static-bound.migrate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -30,4 +30,5 @@ LL |     static_id_indirect(&v);\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+Some errors have detailed explanations: E0312, E0621.\n+For more information about an error, try `rustc --explain E0312`."}, {"sha": "c27cea302fc408672b31bb360edd1c6c41ef3bc8", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,4 +1,6 @@\n // compile-flags: --test\n+// ignore-x86\n+// ^ due to stderr output differences\n \n use std::num::ParseFloatError;\n "}, {"sha": "6aa95c308f24814a4f53e37d2db51f7f50724c17", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,13 +1,17 @@\n error[E0277]: `main` has invalid return type `std::result::Result<f32, std::num::ParseFloatError>`\n-  --> $DIR/termination-trait-test-wrong-type.rs:6:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:8:1\n    |\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseFloatError> {\n LL | |     \"0\".parse()\n LL | | }\n    | |_^ `main` can only return types that implement `std::process::Termination`\n+   | \n+  ::: $SRC_DIR/libtest/lib.rs:LL:COL\n+   |\n+LL |   pub fn assert_test_result<T: Termination>(result: T) {\n+   |                                ----------- required by this bound in `test::assert_test_result`\n    |\n    = help: the trait `std::process::Termination` is not implemented for `std::result::Result<f32, std::num::ParseFloatError>`\n-   = note: required by `test::assert_test_result`\n \n error: aborting due to previous error\n "}, {"sha": "cf8f0e98305eaec383c19a3b0de36890591a0b5d", "filename": "src/test/ui/rfc-2497-if-let-chains/protect-precedences.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -2,12 +2,9 @@ warning: unreachable block in `if` expression\n   --> $DIR/protect-precedences.rs:13:41\n    |\n LL |         if let _ = return true && false {};\n-   |                                         ^^\n+   |                    -------------------- ^^ unreachable block in `if` expression\n+   |                    |\n+   |                    any code following this expression is unreachable\n    |\n    = note: `#[warn(unreachable_code)]` on by default\n-note: any code following this expression is unreachable\n-  --> $DIR/protect-precedences.rs:13:20\n-   |\n-LL |         if let _ = return true && false {};\n-   |                    ^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "a6f693bd5b5f43c833d354d7f6e57dc09dfb2871", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(param_attrs)]\n-\n trait Trait2015 { fn foo(#[allow(C)] i32); }\n //~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n "}, {"sha": "9860e9805b2ed832bae742167a12cabfbae071ee", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd88dae21174f37aa47a45e4b848c4a5ececf19e/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=cd88dae21174f37aa47a45e4b848c4a5ececf19e", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `:`, `@`, or `|`, found `)`\n-  --> $DIR/param-attrs-2018.rs:5:41\n+  --> $DIR/param-attrs-2018.rs:3:41\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n    |                                         ^ expected one of `:`, `@`, or `|` here"}]}