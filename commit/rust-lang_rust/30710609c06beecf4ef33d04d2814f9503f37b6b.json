{"sha": "30710609c06beecf4ef33d04d2814f9503f37b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNzEwNjA5YzA2YmVlY2Y0ZWYzM2QwNGQyODE0Zjk1MDNmMzdiNmI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-13T20:18:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:14:29Z"}, "message": "rustc_trans: treat General enums like unions.", "tree": {"sha": "0613fa5dadb3d692b5c2efd1efd985fd82d8d3ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0613fa5dadb3d692b5c2efd1efd985fd82d8d3ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30710609c06beecf4ef33d04d2814f9503f37b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30710609c06beecf4ef33d04d2814f9503f37b6b", "html_url": "https://github.com/rust-lang/rust/commit/30710609c06beecf4ef33d04d2814f9503f37b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30710609c06beecf4ef33d04d2814f9503f37b6b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0efea4c2ddab7214c7305dd470049e3240ad6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0efea4c2ddab7214c7305dd470049e3240ad6a", "html_url": "https://github.com/rust-lang/rust/commit/9a0efea4c2ddab7214c7305dd470049e3240ad6a"}], "stats": {"total": 37, "additions": 10, "deletions": 27}, "files": [{"sha": "7f64019550634136367e1d80800cbdb84ae2c1d1", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/30710609c06beecf4ef33d04d2814f9503f37b6b/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30710609c06beecf4ef33d04d2814f9503f37b6b/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=30710609c06beecf4ef33d04d2814f9503f37b6b", "patch": "@@ -148,36 +148,15 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        layout::General { discr, size, align, primitive_align, .. } => {\n-            // We need a representation that has:\n-            // * The alignment of the most-aligned field\n-            // * The size of the largest variant (rounded up to that alignment)\n-            // * No alignment padding anywhere any variant has actual data\n-            //   (currently matters only for enums small enough to be immediate)\n-            // * The discriminant in an obvious place.\n-            //\n-            // So we start with the discriminant, pad it up to the alignment with\n-            // more of its own type, then use alignment-sized ints to get the rest\n-            // of the size.\n-            let discr_ty = Type::from_integer(cx, discr);\n-            let discr_size = discr.size().bytes();\n-            let padded_discr_size = discr.size().abi_align(align);\n-            let variant_part_size = size - padded_discr_size;\n-\n-            // Ensure discr_ty can fill pad evenly\n-            assert_eq!(padded_discr_size.bytes() % discr_size, 0);\n-            let fields = [\n-                discr_ty,\n-                Type::array(&discr_ty, padded_discr_size.bytes() / discr_size - 1),\n-                union_fill(cx, variant_part_size, primitive_align)\n-            ];\n+        layout::General { size, align, .. } => {\n+            let fill = union_fill(cx, size, align);\n             match name {\n                 None => {\n-                    Type::struct_(cx, &fields, false)\n+                    Type::struct_(cx, &[fill], false)\n                 }\n                 Some(name) => {\n                     let mut llty = Type::named_struct(cx, name);\n-                    llty.set_struct_body(&fields, false);\n+                    llty.set_struct_body(&[fill], false);\n                     llty\n                 }\n             }"}, {"sha": "40515743af04c4c1dc137bf6adf2aa7fa420c33f", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30710609c06beecf4ef33d04d2814f9503f37b6b/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30710609c06beecf4ef33d04d2814f9503f37b6b/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=30710609c06beecf4ef33d04d2814f9503f37b6b", "patch": "@@ -216,6 +216,11 @@ impl<'a, 'tcx> LvalueRef<'tcx> {\n                 return LvalueRef::new_sized(\n                     bcx.pointercast(self.llval, ty.ptr_to()), fty, alignment);\n             }\n+            layout::General { .. } if l.variant_index.is_none() => {\n+                let ty = ccx.llvm_type_of(fty);\n+                return LvalueRef::new_sized(\n+                    bcx.pointercast(self.llval, ty.ptr_to()), fty, alignment);\n+            }\n             layout::RawNullablePointer { nndiscr, .. } |\n             layout::StructWrappedNullablePointer { nndiscr,  .. }\n                 if l.variant_index.unwrap() as u64 != nndiscr => {"}, {"sha": "06a82bb2de4765a3d4e3827df5a55d585529e9c4", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30710609c06beecf4ef33d04d2814f9503f37b6b/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30710609c06beecf4ef33d04d2814f9503f37b6b/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=30710609c06beecf4ef33d04d2814f9503f37b6b", "patch": "@@ -262,8 +262,7 @@ impl<'tcx> LayoutLlvmExt for FullLayout<'tcx> {\n                 if let Some(v) = self.variant_index {\n                     adt::memory_index_to_gep(variants[v].memory_index[index] as u64)\n                 } else {\n-                    assert_eq!(index, 0);\n-                    index as u64\n+                    bug!(\"FullLayout::llvm_field_index({:?}): not applicable\", self)\n                 }\n             }\n "}]}