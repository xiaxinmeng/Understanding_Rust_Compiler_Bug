{"sha": "87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZDlkMzdjMDdjOTZlZDJmZTgxNmU5Y2RhNmUzZDFlMTRjZGEyZmM=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-10T13:38:00Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-26T23:25:53Z"}, "message": "Add a Default trait.", "tree": {"sha": "759e815c2d5fad538dc91fbacb3f3a096b1b5586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/759e815c2d5fad538dc91fbacb3f3a096b1b5586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "html_url": "https://github.com/rust-lang/rust/commit/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b511558595a49b8c091937915d7616c2d62f14", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b511558595a49b8c091937915d7616c2d62f14", "html_url": "https://github.com/rust-lang/rust/commit/36b511558595a49b8c091937915d7616c2d62f14"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "fbc60ffd01b3aab5a784d652d5d2d7f821db54eb", "filename": "src/libstd/default.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdefault.rs?ref=87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! The Default trait\n+\n+/// A trait that types which have a useful default value should implement.\n+pub trait Default {\n+    /// Return the \"default value\" for a type.\n+    fn default() -> Self;\n+}"}, {"sha": "bfe5b498f8f1327e2edbb455bbb9f2f852e9767a", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "patch": "@@ -81,6 +81,7 @@ pub use vec::{Vector, VectorVector, CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableTotalOrdVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector,OwnedEqVector, MutableVector};\n pub use io::{Reader, ReaderUtil, Writer, WriterUtil};\n+pub use default::Default;\n \n // Reexported runtime types\n pub use comm::{stream, Port, Chan, GenericChan, GenericSmartChan, GenericPort, Peekable};"}, {"sha": "ad3e4368daa5298c3e4f07e3b9a7c9316d0810ac", "filename": "src/libstd/std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "patch": "@@ -148,7 +148,7 @@ pub mod clone;\n pub mod io;\n pub mod hash;\n pub mod container;\n-\n+pub mod default;\n \n /* Common data structures */\n "}, {"sha": "e6cadd04a5b6ea9eb82068df94d20f53336fccd8", "filename": "src/libstd/str.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "patch": "@@ -26,7 +26,7 @@ use iterator::{Iterator, FromIterator, Extendable};\n use iterator::{Filter, AdditiveIterator, Map};\n use iterator::{Invert, DoubleEndedIterator};\n use libc;\n-use num::{Saturating, Zero};\n+use num::{Saturating};\n use option::{None, Option, Some};\n use ptr;\n use ptr::RawPtr;\n@@ -35,6 +35,7 @@ use uint;\n use unstable::raw::{Repr, Slice};\n use vec;\n use vec::{OwnedVector, OwnedCopyableVector, ImmutableVector, MutableVector};\n+use default::Default;\n \n /*\n Section: Conditions\n@@ -2467,19 +2468,16 @@ impl Extendable<char> for ~str {\n }\n \n // This works because every lifetime is a sub-lifetime of 'static\n-impl<'self> Zero for &'self str {\n-    fn zero() -> &'self str { \"\" }\n-    fn is_zero(&self) -> bool { self.is_empty() }\n+impl<'self> Default for &'self str {\n+    fn default() -> &'self str { \"\" }\n }\n \n-impl Zero for ~str {\n-    fn zero() -> ~str { ~\"\" }\n-    fn is_zero(&self) -> bool { self.len() == 0 }\n+impl Default for ~str {\n+    fn default() -> ~str { ~\"\" }\n }\n \n-impl Zero for @str {\n-    fn zero() -> @str { @\"\" }\n-    fn is_zero(&self) -> bool { self.len() == 0 }\n+impl Default for @str {\n+    fn default() -> @str { @\"\" }\n }\n \n #[cfg(test)]\n@@ -3660,12 +3658,11 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_str_zero() {\n-        use num::Zero;\n-        fn t<S: Zero + Str>() {\n-            let s: S = Zero::zero();\n+    fn test_str_default() {\n+        use default::Default;\n+        fn t<S: Default + Str>() {\n+            let s: S = Default::default();\n             assert_eq!(s.as_slice(), \"\");\n-            assert!(s.is_zero());\n         }\n \n         t::<&str>();"}, {"sha": "3af0322df56da0a951d90a50fdbe7ef970a49695", "filename": "src/libstd/unit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc/src%2Flibstd%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funit.rs?ref=87d9d37c07c96ed2fe816e9cda6e3d1e14cda2fc", "patch": "@@ -52,3 +52,8 @@ impl Zero for () {\n     #[inline]\n     fn is_zero(&self) -> bool { true }\n }\n+\n+#[cfg(not(test))]\n+impl Default for () {\n+    fn default() -> () { () }\n+}"}]}