{"sha": "1d93a6cce0119dfb1248643c7fb701ff1f8d4a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOTNhNmNjZTAxMTlkZmIxMjQ4NjQzYzdmYjcwMWZmMWY4ZDRhNTA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-16T21:23:40Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-16T21:23:40Z"}, "message": "Fix handlebars failure by using the `rustbuild` feature less indiscriminately.", "tree": {"sha": "6b0dea764ed83df070052e12875d6a0fdd00f4f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b0dea764ed83df070052e12875d6a0fdd00f4f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d93a6cce0119dfb1248643c7fb701ff1f8d4a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d93a6cce0119dfb1248643c7fb701ff1f8d4a50", "html_url": "https://github.com/rust-lang/rust/commit/1d93a6cce0119dfb1248643c7fb701ff1f8d4a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d93a6cce0119dfb1248643c7fb701ff1f8d4a50/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc63eff86c7ab75848c7cd6a5114111eb11683f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc63eff86c7ab75848c7cd6a5114111eb11683f9", "html_url": "https://github.com/rust-lang/rust/commit/dc63eff86c7ab75848c7cd6a5114111eb11683f9"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "82be4e3361eb67ed5568c4d13c914433cd2c3a57", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d93a6cce0119dfb1248643c7fb701ff1f8d4a50/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d93a6cce0119dfb1248643c7fb701ff1f8d4a50/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=1d93a6cce0119dfb1248643c7fb701ff1f8d4a50", "patch": "@@ -79,7 +79,6 @@ fn main() {\n     cmd.args(&args)\n         .arg(\"--cfg\")\n         .arg(format!(\"stage{}\", stage))\n-        .arg(\"--cfg\").arg(\"rustbuild\")\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n \n@@ -95,6 +94,13 @@ fn main() {\n             cmd.arg(\"-Cprefer-dynamic\");\n         }\n \n+        // Pass the `rustbuild` feature flag to crates which rustbuild is\n+        // building. See the comment in bootstrap/lib.rs where this env var is\n+        // set for more details.\n+        if env::var_os(\"RUSTBUILD_UNSTABLE\").is_some() {\n+            cmd.arg(\"--cfg\").arg(\"rustbuild\");\n+        }\n+\n         // Help the libc crate compile by assisting it in finding the MUSL\n         // native libraries.\n         if let Some(s) = env::var_os(\"MUSL_ROOT\") {"}, {"sha": "fbee0cb0563aa637a97d7a3d133e04516ad33c2c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d93a6cce0119dfb1248643c7fb701ff1f8d4a50/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d93a6cce0119dfb1248643c7fb701ff1f8d4a50/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1d93a6cce0119dfb1248643c7fb701ff1f8d4a50", "patch": "@@ -180,7 +180,7 @@ struct Crate {\n ///\n /// These entries currently correspond to the various output directories of the\n /// build system, with each mod generating output in a different directory.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub enum Mode {\n     /// This cargo is going to build the standard library, placing output in the\n     /// \"stageN-std\" directory.\n@@ -491,14 +491,35 @@ impl Build {\n         // For other crates, however, we know that we've already got a standard\n         // library up and running, so we can use the normal compiler to compile\n         // build scripts in that situation.\n-        if let Mode::Libstd = mode {\n+        if mode == Mode::Libstd {\n             cargo.env(\"RUSTC_SNAPSHOT\", &self.rustc)\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());\n         } else {\n             cargo.env(\"RUSTC_SNAPSHOT\", self.compiler_path(compiler))\n                  .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n+        // There are two invariants we try must maintain:\n+        // * stable crates cannot depend on unstable crates (general Rust rule),\n+        // * crates that end up in the sysroot must be unstable (rustbuild rule).\n+        //\n+        // In order to do enforce the latter, we pass the env var\n+        // `RUSTBUILD_UNSTABLE` down the line for any crates which will end up\n+        // in the sysroot. We read this in bootstrap/bin/rustc.rs and if it is\n+        // set, then we pass the `rustbuild` feature to rustc when building the\n+        // the crate.\n+        //\n+        // In turn, crates that can be used here should recognise the `rustbuild`\n+        // feature and opt-in to `rustc_private`.\n+        //\n+        // We can't always pass `rustbuild` because crates which are outside of\n+        // the comipiler, libs, and tests are stable and we don't want to make\n+        // their deps unstable (since this would break the first invariant\n+        // above).\n+        if mode != Mode::Tool {\n+            cargo.env(\"RUSTBUILD_UNSTABLE\", \"1\");\n+        }\n+\n         // Ignore incremental modes except for stage0, since we're\n         // not guaranteeing correctness acros builds if the compiler\n         // is changing under your feet.`"}]}