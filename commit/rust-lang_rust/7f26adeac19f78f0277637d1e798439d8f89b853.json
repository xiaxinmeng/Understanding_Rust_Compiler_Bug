{"sha": "7f26adeac19f78f0277637d1e798439d8f89b853", "node_id": "C_kwDOAAsO6NoAKDdmMjZhZGVhYzE5Zjc4ZjAyNzc2MzdkMWU3OTg0MzlkOGY4OWI4NTM", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-17T11:29:07Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-23T13:58:44Z"}, "message": "Replace Linux Mutex and Condvar with futex based ones.", "tree": {"sha": "697bbce1e056a1734cbb271f44622a7c0e44dc02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697bbce1e056a1734cbb271f44622a7c0e44dc02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f26adeac19f78f0277637d1e798439d8f89b853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f26adeac19f78f0277637d1e798439d8f89b853", "html_url": "https://github.com/rust-lang/rust/commit/7f26adeac19f78f0277637d1e798439d8f89b853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f26adeac19f78f0277637d1e798439d8f89b853/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d63488e4a23de46a6312525ccb7b4d04a7c55f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d63488e4a23de46a6312525ccb7b4d04a7c55f", "html_url": "https://github.com/rust-lang/rust/commit/73d63488e4a23de46a6312525ccb7b4d04a7c55f"}], "stats": {"total": 157, "additions": 149, "deletions": 8}, "files": [{"sha": "48d800341a37839f7ca954ef73b8c1b5470c649f", "filename": "library/std/src/sys/unix/locks/futex.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/7f26adeac19f78f0277637d1e798439d8f89b853/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f26adeac19f78f0277637d1e798439d8f89b853/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs?ref=7f26adeac19f78f0277637d1e798439d8f89b853", "patch": "@@ -0,0 +1,125 @@\n+use crate::sync::atomic::{\n+    AtomicI32,\n+    Ordering::{Acquire, Relaxed, Release},\n+};\n+use crate::sys::futex::{futex_wait, futex_wake, futex_wake_all};\n+use crate::time::Duration;\n+\n+pub type MovableMutex = Mutex;\n+pub type MovableCondvar = Condvar;\n+\n+pub struct Mutex {\n+    /// 0: unlocked\n+    /// 1: locked, no other threads waiting\n+    /// 2: locked, and other threads waiting (contended)\n+    futex: AtomicI32,\n+}\n+\n+impl Mutex {\n+    pub const fn new() -> Self {\n+        Self { futex: AtomicI32::new(0) }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn init(&mut self) {}\n+\n+    #[inline]\n+    pub unsafe fn destroy(&self) {}\n+\n+    #[inline]\n+    pub unsafe fn try_lock(&self) -> bool {\n+        self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_ok()\n+    }\n+\n+    #[inline]\n+    pub unsafe fn lock(&self) {\n+        if self.futex.compare_exchange(0, 1, Acquire, Relaxed).is_err() {\n+            self.lock_contended();\n+        }\n+    }\n+\n+    fn lock_contended(&self) {\n+        loop {\n+            // Put the lock in contended state, if it wasn't already.\n+            if self.futex.swap(2, Acquire) == 0 {\n+                // It was unlocked, so we just locked it.\n+                return;\n+            }\n+            // Wait for the futex to change state.\n+            futex_wait(&self.futex, 2, None);\n+        }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn unlock(&self) {\n+        if self.futex.swap(0, Release) == 2 {\n+            // We only wake up one thread. When that thread locks the mutex, it\n+            // will mark the mutex as contended (2) (see lock_contended above),\n+            // which makes sure that any other waiting threads will also be\n+            // woken up eventually.\n+            futex_wake(&self.futex);\n+        }\n+    }\n+}\n+\n+pub struct Condvar {\n+    // The value of this atomic is simply incremented on every notification.\n+    // This is used by `.wait()` to not miss any notifications after\n+    // unlocking the mutex and before waiting for notifications.\n+    futex: AtomicI32,\n+}\n+\n+impl Condvar {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { futex: AtomicI32::new(0) }\n+    }\n+\n+    #[inline]\n+    pub unsafe fn init(&mut self) {}\n+\n+    #[inline]\n+    pub unsafe fn destroy(&self) {}\n+\n+    // All the memory orderings here are `Relaxed`,\n+    // because synchronization is done by unlocking and locking the mutex.\n+\n+    #[inline]\n+    pub unsafe fn notify_one(&self) {\n+        self.futex.fetch_add(1, Relaxed);\n+        futex_wake(&self.futex);\n+    }\n+\n+    #[inline]\n+    pub unsafe fn notify_all(&self) {\n+        self.futex.fetch_add(1, Relaxed);\n+        futex_wake_all(&self.futex);\n+    }\n+\n+    #[inline]\n+    pub unsafe fn wait(&self, mutex: &Mutex) {\n+        self.wait_optional_timeout(mutex, None);\n+    }\n+\n+    #[inline]\n+    pub unsafe fn wait_timeout(&self, mutex: &Mutex, timeout: Duration) -> bool {\n+        self.wait_optional_timeout(mutex, Some(timeout))\n+    }\n+\n+    unsafe fn wait_optional_timeout(&self, mutex: &Mutex, timeout: Option<Duration>) -> bool {\n+        // Check the notification counter before we unlock the mutex.\n+        let futex_value = self.futex.load(Relaxed);\n+\n+        // Unlock the mutex before going to sleep.\n+        mutex.unlock();\n+\n+        // Wait, but only if there hasn't been any\n+        // notification since we unlocked the mutex.\n+        let r = futex_wait(&self.futex, futex_value, timeout);\n+\n+        // Lock the mutex again.\n+        mutex.lock();\n+\n+        r\n+    }\n+}"}, {"sha": "30e9f407eec4cecaa73b77ca164d48bd3b580ea4", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7f26adeac19f78f0277637d1e798439d8f89b853/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f26adeac19f78f0277637d1e798439d8f89b853/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=7f26adeac19f78f0277637d1e798439d8f89b853", "patch": "@@ -1,8 +1,24 @@\n-mod pthread_condvar;\n-mod pthread_mutex;\n-mod pthread_remutex;\n-mod pthread_rwlock;\n-pub use pthread_condvar::{Condvar, MovableCondvar};\n-pub use pthread_mutex::{MovableMutex, Mutex};\n-pub use pthread_remutex::ReentrantMutex;\n-pub use pthread_rwlock::{MovableRWLock, RWLock};\n+cfg_if::cfg_if! {\n+    if #[cfg(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+    ))] {\n+        mod futex;\n+        #[allow(dead_code)]\n+        mod pthread_mutex; // Only used for PthreadMutexAttr, needed by pthread_remutex.\n+        mod pthread_remutex; // FIXME: Implement this using a futex\n+        mod pthread_rwlock; // FIXME: Implement this using a futex\n+        pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n+        pub use pthread_remutex::ReentrantMutex;\n+        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+    } else {\n+        mod pthread_mutex;\n+        mod pthread_remutex;\n+        mod pthread_rwlock;\n+        mod pthread_condvar;\n+        pub use pthread_mutex::{Mutex, MovableMutex};\n+        pub use pthread_remutex::ReentrantMutex;\n+        pub use pthread_rwlock::{RWLock, MovableRWLock};\n+        pub use pthread_condvar::{Condvar, MovableCondvar};\n+    }\n+}"}]}