{"sha": "a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MmMyNDQ1YmU1ZmJkOWVmNmZmOGE2MDMyNmQ2MGFlOTdjMTIyYmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-23T19:50:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-23T19:50:04Z"}, "message": "Merge #7020\n\n7020: Implement const pat and expr inference r=flodiebold a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8877d4fd3916b28a801a6fa247640138636f72d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8877d4fd3916b28a801a6fa247640138636f72d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf459sCRBK7hj4Ov3rIwAAdHIIAFvAHCndsxQ8EBFrn9DSMELW\nRVTqWGBsUpIplpFxujeKGDQ7oDCrWj/ten6lGjufvWxPGs4FCfdCX6RCDqsJ+jqc\nIdfv8dcvkfUQRpsKrBhcVI5B/S+LWXLkBjnNL/+kHp3gRh4B14UJufn2IKRRTAQh\nlKMt+j8HtZvyBrEHhyjHdUd0cgeAtrFF+wDOyfnx3P23Z31EMGWo8cPNDOAYQ5jv\nMniiXZWmkwycgp84V1hgYsEGfuheNcmTEiJ+LpuEYQ5YhXt6kiXe/DxMOXvvcoXr\nc+P10W3OgHCncU3Xv3q+h8hFnXkonrdUL8w9iYRHycGf3bsnJ0JCGhtzmXHydPg=\n=i8HG\n-----END PGP SIGNATURE-----\n", "payload": "tree 8877d4fd3916b28a801a6fa247640138636f72d9\nparent 01a3fd960089d562dac328221c93875cabad1d51\nparent a142beaf013a016a48eb9f193b55e0cbcb80b6a9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608753004 +0000\ncommitter GitHub <noreply@github.com> 1608753004 +0000\n\nMerge #7020\n\n7020: Implement const pat and expr inference r=flodiebold a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "html_url": "https://github.com/rust-lang/rust/commit/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a3fd960089d562dac328221c93875cabad1d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a3fd960089d562dac328221c93875cabad1d51", "html_url": "https://github.com/rust-lang/rust/commit/01a3fd960089d562dac328221c93875cabad1d51"}, {"sha": "a142beaf013a016a48eb9f193b55e0cbcb80b6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a142beaf013a016a48eb9f193b55e0cbcb80b6a9", "html_url": "https://github.com/rust-lang/rust/commit/a142beaf013a016a48eb9f193b55e0cbcb80b6a9"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "1b98504bb36b7e6c0945277e5bf5a8c9a1d2e70a", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "patch": "@@ -246,6 +246,10 @@ impl ExprCollector<'_> {\n                     let body = self.collect_block_opt(e.block_expr());\n                     self.alloc_expr(Expr::Async { body }, syntax_ptr)\n                 }\n+                ast::Effect::Const(_) => {\n+                    let body = self.collect_block_opt(e.block_expr());\n+                    self.alloc_expr(Expr::Const { body }, syntax_ptr)\n+                }\n             },\n             ast::Expr::BlockExpr(e) => self.collect_block(e),\n             ast::Expr::LoopExpr(e) => {\n@@ -932,10 +936,16 @@ impl ExprCollector<'_> {\n                 let inner = self.collect_pat_opt(boxpat.pat());\n                 Pat::Box { inner }\n             }\n-            // FIXME: implement\n-            ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) | ast::Pat::ConstBlockPat(_) => {\n-                Pat::Missing\n+            ast::Pat::ConstBlockPat(const_block_pat) => {\n+                if let Some(expr) = const_block_pat.block_expr() {\n+                    let expr_id = self.collect_block(expr);\n+                    Pat::ConstBlock(expr_id)\n+                } else {\n+                    Pat::Missing\n+                }\n             }\n+            // FIXME: implement\n+            ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "3bba30397ee7714c75bc0af70b3d8de9fa5da902", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "patch": "@@ -114,6 +114,9 @@ pub enum Expr {\n     Async {\n         body: ExprId,\n     },\n+    Const {\n+        body: ExprId,\n+    },\n     Cast {\n         expr: ExprId,\n         type_ref: TypeRef,\n@@ -253,7 +256,10 @@ impl Expr {\n                     f(*expr);\n                 }\n             }\n-            Expr::TryBlock { body } | Expr::Unsafe { body } | Expr::Async { body } => f(*body),\n+            Expr::TryBlock { body }\n+            | Expr::Unsafe { body }\n+            | Expr::Async { body }\n+            | Expr::Const { body } => f(*body),\n             Expr::Loop { body, .. } => f(*body),\n             Expr::While { condition, body, .. } => {\n                 f(*condition);\n@@ -399,12 +405,18 @@ pub enum Pat {\n     TupleStruct { path: Option<Path>, args: Vec<PatId>, ellipsis: Option<usize> },\n     Ref { pat: PatId, mutability: Mutability },\n     Box { inner: PatId },\n+    ConstBlock(ExprId),\n }\n \n impl Pat {\n     pub fn walk_child_pats(&self, mut f: impl FnMut(PatId)) {\n         match self {\n-            Pat::Range { .. } | Pat::Lit(..) | Pat::Path(..) | Pat::Wild | Pat::Missing => {}\n+            Pat::Range { .. }\n+            | Pat::Lit(..)\n+            | Pat::Path(..)\n+            | Pat::ConstBlock(..)\n+            | Pat::Wild\n+            | Pat::Missing => {}\n             Pat::Bind { subpat, .. } => {\n                 subpat.iter().copied().for_each(f);\n             }"}, {"sha": "744569e6ef260ae2b1bae9e3dea5819609eb2474", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "patch": "@@ -155,7 +155,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 None => self.infer_block(statements, *tail, expected),\n             },\n-            Expr::Unsafe { body } => self.infer_expr(*body, expected),\n+            Expr::Unsafe { body } | Expr::Const { body } => self.infer_expr(*body, expected),\n             Expr::TryBlock { body } => {\n                 let _inner = self.infer_expr(*body, expected);\n                 // FIXME should be std::result::Result<{inner}, _>"}, {"sha": "d974f805b5ba82ac3a7f8ae45d63fea52713d956", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "patch": "@@ -243,6 +243,9 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 None => Ty::Unknown,\n             },\n+            Pat::ConstBlock(expr) => {\n+                self.infer_expr(*expr, &Expectation::has_type(expected.clone()))\n+            }\n             Pat::Missing => Ty::Unknown,\n         };\n         // use a new type variable if we got Ty::Unknown here\n@@ -264,8 +267,9 @@ fn is_non_ref_pat(body: &hir_def::body::Body, pat: PatId) -> bool {\n         | Pat::Range { .. }\n         | Pat::Slice { .. } => true,\n         Pat::Or(pats) => pats.iter().all(|p| is_non_ref_pat(body, *p)),\n-        // FIXME: Path/Lit might actually evaluate to ref, but inference is unimplemented.\n+        // FIXME: ConstBlock/Path/Lit might actually evaluate to ref, but inference is unimplemented.\n         Pat::Path(..) => true,\n+        Pat::ConstBlock(..) => true,\n         Pat::Lit(expr) => match body[*expr] {\n             Expr::Literal(Literal::String(..)) => false,\n             _ => true,"}, {"sha": "2053d8f56ee085bc933f16249c634a64ad8dc0d3", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "patch": "@@ -774,3 +774,33 @@ fn foo(tuple: Tuple) {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn const_block_pattern() {\n+    check_infer(\n+        r#\"\n+struct Foo(usize);\n+fn foo(foo: Foo) {\n+    match foo {\n+        const { Foo(15 + 32) } => {},\n+        _ => {}\n+    }\n+}\"#,\n+        expect![[r#\"\n+            26..29 'foo': Foo\n+            36..115 '{     ...   } }': ()\n+            42..113 'match ...     }': ()\n+            48..51 'foo': Foo\n+            62..84 'const ... 32) }': Foo\n+            68..84 '{ Foo(... 32) }': Foo\n+            70..73 'Foo': Foo(usize) -> Foo\n+            70..82 'Foo(15 + 32)': Foo\n+            74..76 '15': usize\n+            74..81 '15 + 32': usize\n+            79..81 '32': usize\n+            88..90 '{}': ()\n+            100..101 '_': Foo\n+            105..107 '{}': ()\n+        \"#]],\n+    );\n+}"}, {"sha": "a61282d5a744222e63a27e374768d50490f0d69a", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "patch": "@@ -1894,6 +1894,7 @@ fn effects_smoke_test() {\n             let x = unsafe { 92 };\n             let y = async { async { () }.await };\n             let z = try { () };\n+            let w = const { 92 };\n             let t = 'a: { 92 };\n         }\n \n@@ -1905,7 +1906,7 @@ fn effects_smoke_test() {\n         }\n         \"#,\n         expect![[r#\"\n-            16..136 '{     ...2 }; }': ()\n+            16..162 '{     ...2 }; }': ()\n             26..27 'x': i32\n             30..43 'unsafe { 92 }': i32\n             37..43 '{ 92 }': i32\n@@ -1921,9 +1922,13 @@ fn effects_smoke_test() {\n             99..109 'try { () }': {unknown}\n             103..109 '{ () }': ()\n             105..107 '()': ()\n-            119..120 't': i32\n-            127..133 '{ 92 }': i32\n-            129..131 '92': i32\n+            119..120 'w': i32\n+            123..135 'const { 92 }': i32\n+            129..135 '{ 92 }': i32\n+            131..133 '92': i32\n+            145..146 't': i32\n+            153..159 '{ 92 }': i32\n+            155..157 '92': i32\n         \"#]],\n     )\n }"}, {"sha": "636ce166d74a363c7468014dcf755921f136c1a7", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82c2445be5fbd9ef6ff8a60326d60ae97c122bb/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=a82c2445be5fbd9ef6ff8a60326d60ae97c122bb", "patch": "@@ -358,6 +358,7 @@ pub enum Effect {\n     Async(SyntaxToken),\n     Unsafe(SyntaxToken),\n     Try(SyntaxToken),\n+    Const(SyntaxToken),\n     // Very much not an effect, but we stuff it into this node anyway\n     Label(ast::Label),\n }\n@@ -373,6 +374,9 @@ impl ast::EffectExpr {\n         if let Some(token) = self.try_token() {\n             return Effect::Try(token);\n         }\n+        if let Some(token) = self.const_token() {\n+            return Effect::Const(token);\n+        }\n         if let Some(label) = self.label() {\n             return Effect::Label(label);\n         }"}]}