{"sha": "f77c74414256bf487bd9e912d668e3cf63127250", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3N2M3NDQxNDI1NmJmNDg3YmQ5ZTkxMmQ2NjhlM2NmNjMxMjcyNTA=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-09T12:24:58Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-17T07:53:07Z"}, "message": "De-@ filesearch.", "tree": {"sha": "cc8b4d46740fdb390d232481633f7e2f4e52a727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc8b4d46740fdb390d232481633f7e2f4e52a727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77c74414256bf487bd9e912d668e3cf63127250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77c74414256bf487bd9e912d668e3cf63127250", "html_url": "https://github.com/rust-lang/rust/commit/f77c74414256bf487bd9e912d668e3cf63127250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77c74414256bf487bd9e912d668e3cf63127250/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb37b76afd33be8cb13bc02ce472fa46945c80f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb37b76afd33be8cb13bc02ce472fa46945c80f", "html_url": "https://github.com/rust-lang/rust/commit/eeb37b76afd33be8cb13bc02ce472fa46945c80f"}], "stats": {"total": 107, "additions": 53, "deletions": 54}, "files": [{"sha": "863b91f9b32dd4fdc6289f5e84380bfebb793eab", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -206,7 +206,7 @@ impl<'a> Archive<'a> {\n         let unixlibname = format!(\"lib{}.a\", name);\n \n         let mut rustpath = filesearch::rust_path();\n-        rustpath.push(self.sess.filesearch.get_target_lib_path());\n+        rustpath.push(self.sess.filesearch().get_target_lib_path());\n         let addl_lib_search_paths = self.sess\n                                         .opts\n                                         .addl_lib_search_paths"}, {"sha": "6830acc19601ad1d22f223b151c2d67e30c0a6bb", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -1075,7 +1075,7 @@ fn link_args(sess: &Session,\n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n     // FIXME (#9639): This needs to handle non-utf8 paths\n-    let lib_path = sess.filesearch.get_target_lib_path();\n+    let lib_path = sess.filesearch().get_target_lib_path();\n     let stage: ~str = ~\"-L\" + lib_path.as_str().unwrap();\n \n     let mut args = vec!(stage);"}, {"sha": "d8feb0a47b3b934f80818149a0b3fe17dd3d07ee", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -40,7 +40,7 @@ pub fn get_rpath_flags(sess: &Session, out_filename: &Path) -> Vec<~str> {\n \n     debug!(\"preparing the RPATH!\");\n \n-    let sysroot = sess.filesearch.sysroot;\n+    let sysroot = sess.filesearch().sysroot;\n     let output = out_filename;\n     let libs = sess.cstore.get_used_crates(cstore::RequireDynamic);\n     let libs = libs.move_iter().filter_map(|(_, l)| l.map(|p| p.clone())).collect();\n@@ -56,7 +56,7 @@ pub fn get_rpath_flags(sess: &Session, out_filename: &Path) -> Vec<~str> {\n \n fn get_sysroot_absolute_rt_lib(sess: &Session) -> Path {\n     let r = filesearch::relative_target_lib_path(sess.opts.target_triple);\n-    let mut p = sess.filesearch.sysroot.join(&r);\n+    let mut p = sess.filesearch().sysroot.join(&r);\n     p.push(os::dll_filename(\"rustrt\"));\n     p\n }"}, {"sha": "9eeb5bb7ad7427a26f52adc114f5d317d538585f", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -871,7 +871,7 @@ pub fn build_session_options(matches: &getopts::Matches)\n         output_types.push(link::OutputTypeExe);\n     }\n \n-    let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| @Path::new(m));\n+    let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| Path::new(m));\n     let target = matches.opt_str(\"target\").unwrap_or(host_triple());\n     let opt_level = {\n         if (debugging_opts & session::NO_OPT) != 0 {\n@@ -932,14 +932,14 @@ pub fn build_session_options(matches: &getopts::Matches)\n                        matches.opt_present(\"crate-file-name\"));\n     let cg = build_codegen_options(matches);\n \n-    let sopts = @session::Options {\n+    @session::Options {\n         crate_types: crate_types,\n         gc: gc,\n         optimize: opt_level,\n         debuginfo: debuginfo,\n         lint_opts: lint_opts,\n         output_types: output_types,\n-        addl_lib_search_paths: @RefCell::new(addl_lib_search_paths),\n+        addl_lib_search_paths: RefCell::new(addl_lib_search_paths),\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n         cfg: cfg,\n@@ -951,8 +951,7 @@ pub fn build_session_options(matches: &getopts::Matches)\n         write_dependency_info: write_dependency_info,\n         print_metas: print_metas,\n         cg: cg,\n-    };\n-    return sopts;\n+    }\n }\n \n pub fn build_codegen_options(matches: &getopts::Matches)\n@@ -1006,10 +1005,10 @@ pub fn build_session_(sopts: @session::Options,\n     let target_cfg = build_target_config(sopts);\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler, codemap);\n     let cstore = @CStore::new(token::get_ident_interner());\n-    let filesearch = @filesearch::FileSearch::new(\n-        &sopts.maybe_sysroot,\n-        sopts.target_triple,\n-        sopts.addl_lib_search_paths);\n+    let default_sysroot = match sopts.maybe_sysroot {\n+        Some(_) => None,\n+        None => Some(filesearch::get_or_default_sysroot())\n+    };\n \n     // Make the path absolute, if necessary\n     let local_crate_source_file = local_crate_source_file.map(|path|\n@@ -1031,7 +1030,7 @@ pub fn build_session_(sopts: @session::Options,\n         entry_type: Cell::new(None),\n         macro_registrar_fn: RefCell::new(None),\n         span_diagnostic: span_diagnostic_handler,\n-        filesearch: filesearch,\n+        default_sysroot: default_sysroot,\n         building_library: Cell::new(false),\n         local_crate_source_file: local_crate_source_file,\n         working_dir: os::getcwd(),"}, {"sha": "20bbab27434201c0508729e6e08fa85d764bd5e6", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -134,8 +134,8 @@ pub struct Options {\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n     // this.\n-    addl_lib_search_paths: @RefCell<HashSet<Path>>,\n-    maybe_sysroot: Option<@Path>,\n+    addl_lib_search_paths: RefCell<HashSet<Path>>,\n+    maybe_sysroot: Option<Path>,\n     target_triple: ~str,\n     // User-specified cfg meta items. The compiler itself will add additional\n     // items to the crate config, and during parsing the entire crate config\n@@ -184,7 +184,7 @@ pub struct Session {\n     entry_type: Cell<Option<EntryFnType>>,\n     span_diagnostic: @diagnostic::SpanHandler,\n     macro_registrar_fn: RefCell<Option<ast::DefId>>,\n-    filesearch: @filesearch::FileSearch,\n+    default_sysroot: Option<Path>,\n     building_library: Cell<bool>,\n     // The name of the root source file of the crate, in the local file system. The path is always\n     // expected to be absolute. `None` means that there is no source file.\n@@ -314,6 +314,17 @@ impl Session {\n     pub fn show_span(&self) -> bool {\n         self.debugging_opt(SHOW_SPAN)\n     }\n+    pub fn filesearch<'a>(&'a self) -> filesearch::FileSearch<'a> {\n+        let sysroot = match self.opts.maybe_sysroot {\n+            Some(ref sysroot) => sysroot,\n+            None => self.default_sysroot.as_ref()\n+                        .expect(\"missing sysroot and default_sysroot in Session\")\n+        };\n+        filesearch::FileSearch::new(\n+            sysroot,\n+            self.opts.target_triple,\n+            &self.opts.addl_lib_search_paths)\n+    }\n }\n \n /// Some reasonable defaults\n@@ -325,7 +336,7 @@ pub fn basic_options() -> @Options {\n         debuginfo: NoDebugInfo,\n         lint_opts: Vec::new(),\n         output_types: Vec::new(),\n-        addl_lib_search_paths: @RefCell::new(HashSet::new()),\n+        addl_lib_search_paths: RefCell::new(HashSet::new()),\n         maybe_sysroot: None,\n         target_triple: host_triple(),\n         cfg: Vec::new(),"}, {"sha": "f73a3f35c2b6a86591e915701c98350826e22502", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -11,7 +11,6 @@\n #[allow(non_camel_case_types)];\n \n use std::cell::RefCell;\n-use std::option;\n use std::os;\n use std::io::fs;\n use std::vec_ng::Vec;\n@@ -27,13 +26,13 @@ pub enum FileMatch { FileMatches, FileDoesntMatch }\n /// a file found in that directory.\n pub type pick<'a> = 'a |path: &Path| -> FileMatch;\n \n-pub struct FileSearch {\n-    sysroot: @Path,\n-    addl_lib_search_paths: @RefCell<HashSet<Path>>,\n-    target_triple: ~str\n+pub struct FileSearch<'a> {\n+    sysroot: &'a Path,\n+    addl_lib_search_paths: &'a RefCell<HashSet<Path>>,\n+    target_triple: &'a str\n }\n \n-impl FileSearch {\n+impl<'a> FileSearch<'a> {\n     pub fn for_each_lib_search_path(&self, f: |&Path| -> FileMatch) {\n         let mut visited_dirs = HashSet::new();\n         let mut found = false;\n@@ -127,15 +126,14 @@ impl FileSearch {\n         });\n     }\n \n-    pub fn new(maybe_sysroot: &Option<@Path>,\n-               target_triple: &str,\n-               addl_lib_search_paths: @RefCell<HashSet<Path>>) -> FileSearch {\n-        let sysroot = get_sysroot(maybe_sysroot);\n+    pub fn new(sysroot: &'a Path,\n+               target_triple: &'a str,\n+               addl_lib_search_paths: &'a RefCell<HashSet<Path>>) -> FileSearch<'a> {\n         debug!(\"using sysroot = {}\", sysroot.display());\n-        FileSearch{\n+        FileSearch {\n             sysroot: sysroot,\n             addl_lib_search_paths: addl_lib_search_paths,\n-            target_triple: target_triple.to_owned()\n+            target_triple: target_triple\n         }\n     }\n }\n@@ -179,15 +177,8 @@ pub fn get_or_default_sysroot() -> Path {\n     }\n \n     match canonicalize(os::self_exe_name()) {\n-      option::Some(p) => { let mut p = p; p.pop(); p.pop(); p }\n-      option::None => fail!(\"can't determine value for sysroot\")\n-    }\n-}\n-\n-fn get_sysroot(maybe_sysroot: &Option<@Path>) -> @Path {\n-    match *maybe_sysroot {\n-      option::Some(sr) => sr,\n-      option::None => @get_or_default_sysroot()\n+        Some(mut p) => { p.pop(); p.pop(); p }\n+        None => fail!(\"can't determine value for sysroot\")\n     }\n }\n "}, {"sha": "5c4945a81408442a28d14ede470b989ba9f22354", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -110,7 +110,7 @@ impl<'a> Context<'a> {\n     }\n \n     fn find_library_crate(&mut self) -> Option<Library> {\n-        let filesearch = self.sess.filesearch;\n+        let filesearch = self.sess.filesearch();\n         let (dyprefix, dysuffix) = self.dylibname();\n \n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\""}, {"sha": "f8fa43c7050630182cd337597008132be9f203d2", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -64,8 +64,8 @@ fn get_ast_and_resolve(cpath: &Path,\n     let input = FileInput(cpath.clone());\n \n     let sessopts = @driver::session::Options {\n-        maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n-        addl_lib_search_paths: @RefCell::new(libs),\n+        maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n+        addl_lib_search_paths: RefCell::new(libs),\n         crate_types: vec!(driver::session::CrateTypeDylib),\n         .. (*rustc::driver::session::basic_options()).clone()\n     };"}, {"sha": "b3d6bfbc054309b514a554ca05d7a161e7dcf639", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -155,8 +155,7 @@ pub fn main_args(args: &[~str]) -> int {\n     }\n     let input = matches.free[0].as_slice();\n \n-    let libs = matches.opt_strs(\"L\").map(|s| Path::new(s.as_slice()));\n-    let libs = @RefCell::new(libs.move_iter().collect());\n+    let libs = matches.opt_strs(\"L\").map(|s| Path::new(s.as_slice())).move_iter().collect();\n \n     let test_args = matches.opt_strs(\"test-args\");\n     let test_args = test_args.iter().flat_map(|s| s.words()).map(|s| s.to_owned()).to_owned_vec();"}, {"sha": "657bfaaf6609806a5073986746ddd24f804e8247", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -160,7 +160,7 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n }\n \n /// Run any tests/code examples in the markdown file `input`.\n-pub fn test(input: &str, libs: @RefCell<HashSet<Path>>, mut test_args: ~[~str]) -> int {\n+pub fn test(input: &str, libs: HashSet<Path>, mut test_args: ~[~str]) -> int {\n     let input_str = load_or_return!(input, 1, 2);\n \n     let mut collector = Collector::new(input.to_owned(), libs, true, true);"}, {"sha": "e8cf246decb84ab889ebde16bc0e428d42d6ea93", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77c74414256bf487bd9e912d668e3cf63127250/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f77c74414256bf487bd9e912d668e3cf63127250", "patch": "@@ -34,13 +34,13 @@ use html::markdown;\n use passes;\n use visit_ast::RustdocVisitor;\n \n-pub fn run(input: &str, libs: @RefCell<HashSet<Path>>, mut test_args: ~[~str]) -> int {\n+pub fn run(input: &str, libs: HashSet<Path>, mut test_args: ~[~str]) -> int {\n     let input_path = Path::new(input);\n     let input = driver::FileInput(input_path.clone());\n \n     let sessopts = @session::Options {\n-        maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n-        addl_lib_search_paths: libs,\n+        maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n+        addl_lib_search_paths: RefCell::new(libs.clone()),\n         crate_types: vec!(session::CrateTypeDylib),\n         .. (*session::basic_options()).clone()\n     };\n@@ -92,8 +92,8 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n     let input = driver::StrInput(test);\n \n     let sessopts = @session::Options {\n-        maybe_sysroot: Some(@os::self_exe_path().unwrap().dir_path()),\n-        addl_lib_search_paths: @RefCell::new(libs),\n+        maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n+        addl_lib_search_paths: RefCell::new(libs),\n         crate_types: vec!(session::CrateTypeExecutable),\n         output_types: vec!(link::OutputTypeExe),\n         cg: session::CodegenOptions {\n@@ -194,7 +194,7 @@ fn maketest(s: &str, cratename: &str, loose_feature_gating: bool) -> ~str {\n pub struct Collector {\n     tests: ~[testing::TestDescAndFn],\n     priv names: ~[~str],\n-    priv libs: @RefCell<HashSet<Path>>,\n+    priv libs: HashSet<Path>,\n     priv cnt: uint,\n     priv use_headers: bool,\n     priv current_header: Option<~str>,\n@@ -204,7 +204,7 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn new(cratename: ~str, libs: @RefCell<HashSet<Path>>,\n+    pub fn new(cratename: ~str, libs: HashSet<Path>,\n                use_headers: bool, loose_feature_gating: bool) -> Collector {\n         Collector {\n             tests: ~[],\n@@ -227,8 +227,7 @@ impl Collector {\n             format!(\"{}_{}\", self.names.connect(\"::\"), self.cnt)\n         };\n         self.cnt += 1;\n-        let libs = self.libs.borrow();\n-        let libs = (*libs.get()).clone();\n+        let libs = self.libs.clone();\n         let cratename = self.cratename.to_owned();\n         let loose_feature_gating = self.loose_feature_gating;\n         debug!(\"Creating test {}: {}\", name, test);"}]}