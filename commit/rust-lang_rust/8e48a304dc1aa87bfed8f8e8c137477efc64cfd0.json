{"sha": "8e48a304dc1aa87bfed8f8e8c137477efc64cfd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNDhhMzA0ZGMxYWE4N2JmZWQ4ZjhlOGMxMzc0NzdlZmM2NGNmZDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-29T08:14:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-10T09:45:48Z"}, "message": "remove some dead code, and assert we do not swallow allocating errors", "tree": {"sha": "55031a433e1bef5499d2c276622abd868054d3f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55031a433e1bef5499d2c276622abd868054d3f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e48a304dc1aa87bfed8f8e8c137477efc64cfd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e48a304dc1aa87bfed8f8e8c137477efc64cfd0", "html_url": "https://github.com/rust-lang/rust/commit/8e48a304dc1aa87bfed8f8e8c137477efc64cfd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e48a304dc1aa87bfed8f8e8c137477efc64cfd0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c400f758e5cda9c2617f6d8dec87a6f24ddb291e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c400f758e5cda9c2617f6d8dec87a6f24ddb291e", "html_url": "https://github.com/rust-lang/rust/commit/c400f758e5cda9c2617f6d8dec87a6f24ddb291e"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "7b42d7ab6e81ee35ebc109611039a28eba29ea93", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8e48a304dc1aa87bfed8f8e8c137477efc64cfd0/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e48a304dc1aa87bfed8f8e8c137477efc64cfd0/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=8e48a304dc1aa87bfed8f8e8c137477efc64cfd0", "patch": "@@ -343,7 +343,7 @@ where\n     ref_tracking.track((ret, base_intern_mode), || ());\n \n     while let Some(((mplace, mode), _)) = ref_tracking.todo.pop() {\n-        let interned = InternVisitor {\n+        let res = InternVisitor {\n             ref_tracking: &mut ref_tracking,\n             ecx,\n             mode,\n@@ -352,23 +352,24 @@ where\n             inside_unsafe_cell: false,\n         }\n         .visit_value(mplace);\n-        if let Err(error) = interned {\n-            // This can happen when e.g. the tag of an enum is not a valid discriminant. We do have\n-            // to read enum discriminants in order to find references in enum variant fields.\n-            if let err_ub!(ValidationFailure(_)) = error.kind {\n-                let err = crate::const_eval::error_to_const_error(&ecx, error);\n-                match err.struct_error(\n-                    ecx.tcx,\n-                    \"it is undefined behavior to use this value\",\n-                    |mut diag| {\n-                        diag.note(crate::const_eval::note_on_undefined_behavior_error());\n-                        diag.emit();\n-                    },\n-                ) {\n-                    ErrorHandled::TooGeneric\n-                    | ErrorHandled::Reported(ErrorReported)\n-                    | ErrorHandled::Linted => {}\n-                }\n+        // We deliberately *ignore* interpreter errors here.  When there is a problem, the remaining\n+        // references are \"leftover\"-interned, and later validation will show a proper error\n+        // and point at the right part of the value causing the problem.\n+        match res {\n+            Ok(()) => {},\n+            Err(error) => {\n+                ecx.tcx.sess.delay_span_bug(\n+                    ecx.tcx.span,\n+                    \"error during interning should later cause validation failure\",\n+                );\n+                // Some errors shouldn't come up because creating them causes\n+                // an allocation, which we should avoid. When that happens,\n+                // dedicated error variants should be introduced instead.\n+                assert!(\n+                    !error.kind.allocates(),\n+                    \"interning encountered allocating error: {}\",\n+                    error\n+                );\n             }\n         }\n     }"}]}