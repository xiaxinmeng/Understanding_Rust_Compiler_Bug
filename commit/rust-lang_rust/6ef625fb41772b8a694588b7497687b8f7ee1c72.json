{"sha": "6ef625fb41772b8a694588b7497687b8f7ee1c72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZjYyNWZiNDE3NzJiOGE2OTQ1ODhiNzQ5NzY4N2I4ZjdlZTFjNzI=", "commit": {"author": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-26T00:30:07Z"}, "committer": {"name": "David Haig", "email": "david@ninjasource.com", "date": "2019-11-28T07:43:53Z"}, "message": "Remove duplication using single variant for error", "tree": {"sha": "85f1816723e530d55cf4a58ac7191a309b2aa5cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85f1816723e530d55cf4a58ac7191a309b2aa5cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ef625fb41772b8a694588b7497687b8f7ee1c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef625fb41772b8a694588b7497687b8f7ee1c72", "html_url": "https://github.com/rust-lang/rust/commit/6ef625fb41772b8a694588b7497687b8f7ee1c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ef625fb41772b8a694588b7497687b8f7ee1c72/comments", "author": null, "committer": null, "parents": [{"sha": "88821ed54d2eacc35ccbf6ab056b6677f23c3e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/88821ed54d2eacc35ccbf6ab056b6677f23c3e1a", "html_url": "https://github.com/rust-lang/rust/commit/88821ed54d2eacc35ccbf6ab056b6677f23c3e1a"}], "stats": {"total": 60, "additions": 22, "deletions": 38}, "files": [{"sha": "6ff1eee593b59e2e6271fb402e120c5d4d550ba0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=6ef625fb41772b8a694588b7497687b8f7ee1c72", "patch": "@@ -13,7 +13,7 @@ use rustc_macros::HashStable;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Pos, Span};\n use syntax::symbol::Symbol;\n-\n+use hir::GeneratorKind;\n use std::{fmt, env};\n \n use rustc_error_codes::*;\n@@ -264,10 +264,8 @@ pub enum PanicInfo<O> {\n     OverflowNeg,\n     DivisionByZero,\n     RemainderByZero,\n-    GeneratorResumedAfterReturn,\n-    GeneratorResumedAfterPanic,\n-    AsyncResumedAfterReturn,\n-    AsyncResumedAfterPanic,\n+    ResumedAfterReturn(GeneratorKind),\n+    ResumedAfterPanic(GeneratorKind),\n }\n \n /// Type for MIR `Assert` terminator error messages.\n@@ -302,14 +300,16 @@ impl<O> PanicInfo<O> {\n                 \"attempt to divide by zero\",\n             RemainderByZero =>\n                 \"attempt to calculate the remainder with a divisor of zero\",\n-            GeneratorResumedAfterReturn =>\n+            ResumedAfterReturn(GeneratorKind::Gen) =>\n                 \"generator resumed after completion\",\n-            GeneratorResumedAfterPanic =>\n-                \"generator resumed after panicking\",\n-            AsyncResumedAfterReturn =>\n+            // FIXME: Do we want a separate message for each Async variant (Block, Closure, Fn)?\n+            ResumedAfterReturn(GeneratorKind::Async(_)) =>\n                 \"`async fn` resumed after completion\",\n-            AsyncResumedAfterPanic =>\n-                \"`async fn` resumed after panic\",\n+            ResumedAfterPanic(GeneratorKind::Gen) =>\n+                \"generator resumed after panicking\",\n+            // FIXME: Do we want a separate message for each Async variant (Block, Closure, Fn)?\n+            ResumedAfterPanic(GeneratorKind::Async(_)) =>\n+                \"`async fn` resumed after panicking\",\n             Panic { .. } | BoundsCheck { .. } =>\n                 bug!(\"Unexpected PanicInfo\"),\n         }"}, {"sha": "8c1690a177bde150b5bec4ea5845159e1be66b75", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6ef625fb41772b8a694588b7497687b8f7ee1c72", "patch": "@@ -2981,8 +2981,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                             index: index.fold_with(folder),\n                         },\n                     Panic { .. } | Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n-                    GeneratorResumedAfterReturn | GeneratorResumedAfterPanic |\n-                    AsyncResumedAfterReturn | AsyncResumedAfterPanic =>\n+                    ResumedAfterReturn(_) | ResumedAfterPanic(_)  =>\n                         msg.clone(),\n                 };\n                 Assert { cond: cond.fold_with(folder), expected, msg, target, cleanup }\n@@ -3028,8 +3027,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                             len.visit_with(visitor) || index.visit_with(visitor),\n                         Panic { .. } | Overflow(_) | OverflowNeg |\n                         DivisionByZero | RemainderByZero |\n-                        GeneratorResumedAfterReturn | GeneratorResumedAfterPanic |\n-                        AsyncResumedAfterReturn | AsyncResumedAfterPanic =>\n+                        ResumedAfterReturn(_) | ResumedAfterPanic(_) =>\n                             false\n                     }\n                 } else {"}, {"sha": "58c12ef2501559ed514b44a90fd5d6547c75aab3", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=6ef625fb41772b8a694588b7497687b8f7ee1c72", "patch": "@@ -517,8 +517,7 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(index, location);\n                     }\n                     Panic { .. } | Overflow(_) | OverflowNeg | DivisionByZero | RemainderByZero |\n-                    GeneratorResumedAfterReturn | GeneratorResumedAfterPanic |\n-                    AsyncResumedAfterReturn | AsyncResumedAfterPanic => {\n+                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => {\n                         // Nothing to visit\n                     }\n                 }"}, {"sha": "e5a62fc6c86c37a1d8ffd5f203e7d41440b70770", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=6ef625fb41772b8a694588b7497687b8f7ee1c72", "patch": "@@ -142,10 +142,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         OverflowNeg => err_panic!(OverflowNeg),\n                         DivisionByZero => err_panic!(DivisionByZero),\n                         RemainderByZero => err_panic!(RemainderByZero),\n-                        GeneratorResumedAfterReturn => err_panic!(GeneratorResumedAfterReturn),\n-                        GeneratorResumedAfterPanic => err_panic!(GeneratorResumedAfterPanic),\n-                        AsyncResumedAfterReturn => err_panic!(AsyncResumedAfterReturn),\n-                        AsyncResumedAfterPanic => err_panic!(AsyncResumedAfterPanic),\n+                        ResumedAfterReturn(generator_kind) => err_panic!(ResumedAfterReturn(*generator_kind)),\n+                        ResumedAfterPanic(generator_kind) => err_panic!(ResumedAfterPanic(*generator_kind)),\n                         Panic { .. } => bug!(\"`Panic` variant cannot occur in MIR\"),\n                     }\n                     .into());"}, {"sha": "799d5d3d05517619a7cd31080d734430592e6cfa", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef625fb41772b8a694588b7497687b8f7ee1c72/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=6ef625fb41772b8a694588b7497687b8f7ee1c72", "patch": "@@ -50,7 +50,7 @@\n //! Otherwise it drops all the values in scope at the last suspension point.\n \n use rustc::hir;\n-use rustc::hir::{def_id::DefId, GeneratorKind};\n+use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutVisitor};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty};\n@@ -1056,28 +1056,17 @@ fn create_generator_resume_function<'tcx>(\n     let mut cases = create_cases(body, &transform, |point| Some(point.resume));\n \n     use rustc::mir::interpret::PanicInfo::{\n-        GeneratorResumedAfterPanic,\n-        GeneratorResumedAfterReturn,\n-        AsyncResumedAfterReturn,\n-        AsyncResumedAfterPanic,\n+        ResumedAfterPanic,\n+        ResumedAfterReturn,\n     };\n \n     // Jump to the entry point on the unresumed\n     cases.insert(0, (UNRESUMED, BasicBlock::new(0)));\n \n     // Panic when resumed on the returned or poisoned state\n-    match body.generator_kind {\n-        Some(GeneratorKind::Async(_)) => {\n-            cases.insert(1, (RETURNED, insert_panic_block(tcx, body, AsyncResumedAfterReturn)));\n-            cases.insert(2, (POISONED, insert_panic_block(tcx, body, AsyncResumedAfterPanic)));\n-        },\n-        Some(GeneratorKind::Gen) => {\n-            cases.insert(1, (RETURNED, insert_panic_block(tcx, body, GeneratorResumedAfterReturn)));\n-            cases.insert(2, (POISONED, insert_panic_block(tcx, body, GeneratorResumedAfterPanic)));\n-        },\n-        None => {\n-            // N/A because we would never create a resume function if there was no generator_kind\n-        }\n+    if let Some(generator_kind) = body.generator_kind {\n+        cases.insert(1, (RETURNED, insert_panic_block(tcx, body, ResumedAfterReturn(generator_kind))));\n+        cases.insert(2, (POISONED, insert_panic_block(tcx, body, ResumedAfterPanic(generator_kind))));\n     };\n \n     insert_switch(body, cases, &transform, TerminatorKind::Unreachable);"}]}