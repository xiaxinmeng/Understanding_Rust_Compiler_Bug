{"sha": "c09defa070391cb4e674574ea262b4a1e4d903f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOWRlZmEwNzAzOTFjYjRlNjc0NTc0ZWEyNjJiNGExZTRkOTAzZjg=", "commit": {"author": {"name": "jbranchaud", "email": "jbranchaud@gmail.com", "date": "2014-12-09T05:28:07Z"}, "committer": {"name": "jbranchaud", "email": "jbranchaud@gmail.com", "date": "2014-12-09T05:28:07Z"}, "message": "Change 'Example' to 'Examples' throughout collections' rustdocs.", "tree": {"sha": "95136dc6be9274fd14f501172e062dbc91d8d241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95136dc6be9274fd14f501172e062dbc91d8d241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09defa070391cb4e674574ea262b4a1e4d903f8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09defa070391cb4e674574ea262b4a1e4d903f8", "html_url": "https://github.com/rust-lang/rust/commit/c09defa070391cb4e674574ea262b4a1e4d903f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09defa070391cb4e674574ea262b4a1e4d903f8/comments", "author": {"login": "jbranchaud", "id": 694063, "node_id": "MDQ6VXNlcjY5NDA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbranchaud", "html_url": "https://github.com/jbranchaud", "followers_url": "https://api.github.com/users/jbranchaud/followers", "following_url": "https://api.github.com/users/jbranchaud/following{/other_user}", "gists_url": "https://api.github.com/users/jbranchaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbranchaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbranchaud/subscriptions", "organizations_url": "https://api.github.com/users/jbranchaud/orgs", "repos_url": "https://api.github.com/users/jbranchaud/repos", "events_url": "https://api.github.com/users/jbranchaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jbranchaud/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbranchaud", "id": 694063, "node_id": "MDQ6VXNlcjY5NDA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbranchaud", "html_url": "https://github.com/jbranchaud", "followers_url": "https://api.github.com/users/jbranchaud/followers", "following_url": "https://api.github.com/users/jbranchaud/following{/other_user}", "gists_url": "https://api.github.com/users/jbranchaud/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbranchaud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbranchaud/subscriptions", "organizations_url": "https://api.github.com/users/jbranchaud/orgs", "repos_url": "https://api.github.com/users/jbranchaud/repos", "events_url": "https://api.github.com/users/jbranchaud/events{/privacy}", "received_events_url": "https://api.github.com/users/jbranchaud/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eacbd296fa153f809038a27898290638bd0b2b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/eacbd296fa153f809038a27898290638bd0b2b35", "html_url": "https://github.com/rust-lang/rust/commit/eacbd296fa153f809038a27898290638bd0b2b35"}], "stats": {"total": 569, "additions": 286, "deletions": 283}, "files": [{"sha": "347300e25aded37d74b990f60f13ba8992b3405a", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -15,7 +15,7 @@\n //! complexity. A priority queue can also be converted to a sorted vector in-place, allowing it to\n //! be used for an `O(n log n)` in-place heapsort.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! This is a larger example which implements [Dijkstra's algorithm][dijkstra]\n //! to solve the [shortest path problem][sssp] on a [directed graph][dir_graph].\n@@ -178,7 +178,7 @@ impl<T: Ord> Default for BinaryHeap<T> {\n impl<T: Ord> BinaryHeap<T> {\n     /// Creates an empty `BinaryHeap` as a max-heap.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -192,7 +192,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// so that the `BinaryHeap` does not have to be reallocated\n     /// until it contains at least that many values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -206,7 +206,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// Creates a `BinaryHeap` from a vector. This is sometimes called\n     /// `heapifying` the vector.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -225,7 +225,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// An iterator visiting all values in underlying vector, in\n     /// arbitrary order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -245,7 +245,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// the binary heap in arbitrary order.  The binary heap cannot be used\n     /// after calling this.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -264,7 +264,7 @@ impl<T: Ord> BinaryHeap<T> {\n \n     /// Returns the greatest item in a queue, or `None` if it is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -284,7 +284,7 @@ impl<T: Ord> BinaryHeap<T> {\n \n     /// Returns the number of elements the queue can hold without reallocating.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -306,7 +306,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// Panics if the new capacity overflows `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -325,7 +325,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// Panics if the new capacity overflows `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -348,7 +348,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// Removes the greatest item from a queue and returns it, or `None` if it\n     /// is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -375,7 +375,7 @@ impl<T: Ord> BinaryHeap<T> {\n \n     /// Pushes an item onto the queue.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -398,7 +398,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// Pushes an item onto a queue then pops the greatest item off the queue in\n     /// an optimized fashion.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -424,7 +424,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// an optimized fashion. The push is done regardless of whether the queue\n     /// was empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -450,7 +450,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// Consumes the `BinaryHeap` and returns the underlying vector\n     /// in arbitrary order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n@@ -468,7 +468,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// Consumes the `BinaryHeap` and returns a vector in sorted\n     /// (ascending) order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BinaryHeap;"}, {"sha": "b401978c9c9cd1bd25fae1949e50e89b55561f06", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -13,7 +13,7 @@\n \n //! Collections implemented with bit vectors.\n //!\n-//! # Example\n+//! # Examples\n //!\n //! This is a simple example of the [Sieve of Eratosthenes][sieve]\n //! which calculates prime numbers up to a given limit.\n@@ -101,7 +101,7 @@ static FALSE: bool = false;\n \n /// The bitvector type.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use collections::Bitv;\n@@ -214,7 +214,7 @@ impl Bitv {\n \n     /// Creates an empty `Bitv`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -228,7 +228,7 @@ impl Bitv {\n     /// Creates a `Bitv` that holds `nbits` elements, setting each element\n     /// to `init`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -262,7 +262,7 @@ impl Bitv {\n     ///\n     /// Panics if `i` is out of bounds.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -289,7 +289,7 @@ impl Bitv {\n     ///\n     /// Panics if `i` is out of bounds.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -311,7 +311,7 @@ impl Bitv {\n \n     /// Sets all bits to 1.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -330,7 +330,7 @@ impl Bitv {\n \n     /// Flips all bits.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -357,7 +357,7 @@ impl Bitv {\n     ///\n     /// Panics if the bitvectors are of different lengths.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -387,7 +387,7 @@ impl Bitv {\n     ///\n     /// Panics if the bitvectors are of different lengths.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -417,7 +417,7 @@ impl Bitv {\n     ///\n     /// Panics if the bitvectors are of different length.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -446,7 +446,7 @@ impl Bitv {\n \n     /// Returns `true` if all bits are 1.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -469,7 +469,7 @@ impl Bitv {\n \n     /// Returns an iterator over the elements of the vector in order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -484,7 +484,7 @@ impl Bitv {\n \n     /// Returns `true` if all bits are 0.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -501,7 +501,7 @@ impl Bitv {\n \n     /// Returns `true` if any bit is 1.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -522,7 +522,7 @@ impl Bitv {\n     /// size of the `Bitv` is not a multiple of eight then trailing bits\n     /// will be filled-in with `false`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -564,7 +564,7 @@ impl Bitv {\n \n     /// Transforms `self` into a `Vec<bool>` by turning each bit into a `bool`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -584,7 +584,7 @@ impl Bitv {\n     ///\n     /// Panics if the `Bitv` and slice are of different length.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -609,7 +609,7 @@ impl Bitv {\n     /// If `len` is greater than the vector's current length, this has no\n     /// effect.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -633,7 +633,7 @@ impl Bitv {\n \n     /// Grows the vector to be able to store `size` bits without resizing.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -654,7 +654,7 @@ impl Bitv {\n     /// Returns the capacity in bits for this bit vector. Inserting any\n     /// element less than this amount will not trigger a resizing.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -670,7 +670,7 @@ impl Bitv {\n \n     /// Grows the `Bitv` in-place, adding `n` copies of `value` to the `Bitv`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -722,7 +722,7 @@ impl Bitv {\n     ///\n     /// Assert if empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::bitv;\n@@ -745,7 +745,7 @@ impl Bitv {\n \n     /// Pushes a `bool` onto the end.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::Bitv;\n@@ -786,7 +786,7 @@ impl Bitv {\n /// with the most significant bits of each byte coming first. Each\n /// bit becomes `true` if equal to 1 or `false` if equal to 0.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::bitv;\n@@ -808,7 +808,7 @@ pub fn from_bytes(bytes: &[u8]) -> Bitv {\n /// Creates a `Bitv` of the specified length where the value at each\n /// index is `f(index)`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::bitv::from_fn;\n@@ -968,7 +968,7 @@ impl<'a> RandomAccessIterator<bool> for Bits<'a> {\n /// set of objects is proportional to the maximum of the objects when viewed\n /// as a `uint`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::{BitvSet, Bitv};\n@@ -1053,7 +1053,7 @@ impl cmp::Eq for BitvSet {}\n impl BitvSet {\n     /// Creates a new bit vector set with initially no contents.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1068,7 +1068,7 @@ impl BitvSet {\n     /// Creates a new bit vector set with initially no contents, able to\n     /// hold `nbits` elements without resizing.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1084,7 +1084,7 @@ impl BitvSet {\n \n     /// Creates a new bit vector set from the given bit vector.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::{bitv, BitvSet};\n@@ -1107,7 +1107,7 @@ impl BitvSet {\n     /// Returns the capacity in bits for this bit vector. Inserting any\n     /// element less than this amount will not trigger a resizing.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1124,7 +1124,7 @@ impl BitvSet {\n \n     /// Grows the underlying vector to be able to store `size` bits.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1143,7 +1143,7 @@ impl BitvSet {\n \n     /// Consumes this set to return the underlying bit vector.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1164,7 +1164,7 @@ impl BitvSet {\n \n     /// Returns a reference to the underlying bit vector.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1206,7 +1206,7 @@ impl BitvSet {\n \n     /// Truncates the underlying vector to the least length required.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1238,7 +1238,7 @@ impl BitvSet {\n \n     /// Iterator over each u32 stored in the `BitvSet`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1260,7 +1260,7 @@ impl BitvSet {\n     /// Iterator over each u32 stored in `self` union `other`.\n     /// See [union_with](#method.union_with) for an efficient in-place version.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1289,7 +1289,7 @@ impl BitvSet {\n     /// Iterator over each uint stored in `self` intersect `other`.\n     /// See [intersect_with](#method.intersect_with) for an efficient in-place version.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1319,7 +1319,7 @@ impl BitvSet {\n     /// Iterator over each uint stored in the `self` setminus `other`.\n     /// See [difference_with](#method.difference_with) for an efficient in-place version.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1356,7 +1356,7 @@ impl BitvSet {\n     /// See [symmetric_difference_with](#method.symmetric_difference_with) for\n     /// an efficient in-place version.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1384,7 +1384,7 @@ impl BitvSet {\n \n     /// Unions in-place with the specified other bit vector.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1408,7 +1408,7 @@ impl BitvSet {\n \n     /// Intersects in-place with the specified other bit vector.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1433,7 +1433,7 @@ impl BitvSet {\n     /// Makes this bit vector the difference with the specified other bit vector\n     /// in-place.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;\n@@ -1466,7 +1466,7 @@ impl BitvSet {\n     /// Makes this bit vector the symmetric difference with the specified other\n     /// bit vector in-place.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BitvSet;"}, {"sha": "9d2b3f3bb709783d473efdcddde95d3ce3653833", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -152,7 +152,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n     /// Clears the map, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -188,7 +188,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -220,7 +220,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -246,7 +246,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -314,7 +314,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// Inserts a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise, `None` is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -423,7 +423,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -1069,7 +1069,7 @@ impl<K, V> BTreeMap<K, V> {\n \n     /// Gets an iterator over the keys of the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -1088,7 +1088,7 @@ impl<K, V> BTreeMap<K, V> {\n \n     /// Gets an iterator over the values of the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -1107,7 +1107,7 @@ impl<K, V> BTreeMap<K, V> {\n \n     /// Return the number of elements in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;\n@@ -1122,7 +1122,7 @@ impl<K, V> BTreeMap<K, V> {\n \n     /// Return true if the map contains no elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeMap;"}, {"sha": "2f9c383660441a8d7fc47b4b09ad8b1da2b81105", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -95,7 +95,7 @@ impl<T> BTreeSet<T> {\n impl<T: Ord> BTreeSet<T> {\n     /// Visits the values representing the difference, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -118,7 +118,7 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Visits the values representing the symmetric difference, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -142,7 +142,7 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Visits the values representing the intersection, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -166,7 +166,7 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Visits the values representing the union, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -187,7 +187,7 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Return the number of elements in the set\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -202,7 +202,7 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Returns true if the set contains no elements\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -217,7 +217,7 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Clears the set, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -238,7 +238,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -255,7 +255,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// Returns `true` if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -276,7 +276,7 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Returns `true` if the set is a subset of another.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -318,7 +318,7 @@ impl<T: Ord> BTreeSet<T> {\n \n     /// Returns `true` if the set is a superset of another.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -343,7 +343,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// Adds a value to the set. Returns `true` if the value was not already\n     /// present in the set.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;\n@@ -366,7 +366,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::BTreeSet;"}, {"sha": "f8492f493d19b08b0e8f88f66eed125044d7165d", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -204,7 +204,7 @@ impl<T> DList<T> {\n     ///\n     /// If the list is empty, does nothing.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::DList;\n@@ -231,7 +231,7 @@ impl<T> DList<T> {\n     ///\n     /// If the list is empty, does nothing.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::DList;\n@@ -258,7 +258,7 @@ impl<T> DList<T> {\n     ///\n     /// This operation should compute in O(1) time.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::DList;\n@@ -299,7 +299,7 @@ impl<T> DList<T> {\n     ///\n     /// This operation should compute in O(1) time.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::DList;\n@@ -328,7 +328,7 @@ impl<T> DList<T> {\n     ///\n     /// This operation should compute in O(N) time.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::DList;\n@@ -500,7 +500,7 @@ impl<T> DList<T> {\n \n     /// Appends an element to the back of a list\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::DList;\n@@ -524,7 +524,7 @@ impl<T> DList<T> {\n     /// Removes the last element from a list and returns it, or `None` if\n     /// it is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::DList;"}, {"sha": "637541a8fd654a5d56e0bd2983ffb159079e4373", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -13,7 +13,7 @@\n //! This module provides a generic way to compute the hash of a value. The\n //! simplest way to make a type hashable is to use `#[deriving(Hash)]`:\n //!\n-//! # Example\n+//! # Examples\n //!\n //! ```rust\n //! use std::hash;"}, {"sha": "95207cbf205e0ad9501beacf0ad2955678f41caa", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -137,7 +137,7 @@ impl<T> RingBuf<T> {\n \n     /// Retrieves an element in the `RingBuf` by index.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::RingBuf;\n@@ -160,7 +160,7 @@ impl<T> RingBuf<T> {\n \n     /// Retrieves an element in the `RingBuf` mutably by index.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::RingBuf;\n@@ -194,7 +194,7 @@ impl<T> RingBuf<T> {\n     ///\n     /// Fails if there is no element with either index.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::RingBuf;\n@@ -220,7 +220,7 @@ impl<T> RingBuf<T> {\n     /// Returns the number of elements the `RingBuf` can hold without\n     /// reallocating.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -243,7 +243,7 @@ impl<T> RingBuf<T> {\n     ///\n     /// Panics if the new capacity overflows `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -264,7 +264,7 @@ impl<T> RingBuf<T> {\n     ///\n     /// Panics if the new capacity overflows `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -342,7 +342,7 @@ impl<T> RingBuf<T> {\n \n     /// Returns a front-to-back iterator.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::RingBuf;\n@@ -365,7 +365,7 @@ impl<T> RingBuf<T> {\n \n     /// Returns a front-to-back iterator which returns mutable references.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::RingBuf;\n@@ -402,7 +402,7 @@ impl<T> RingBuf<T> {\n \n     /// Returns the number of elements in the `RingBuf`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -417,7 +417,7 @@ impl<T> RingBuf<T> {\n \n     /// Returns true if the buffer contains no elements\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -432,7 +432,7 @@ impl<T> RingBuf<T> {\n \n     /// Clears the buffer, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -452,7 +452,7 @@ impl<T> RingBuf<T> {\n     /// Provides a reference to the front element, or `None` if the sequence is\n     /// empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -472,7 +472,7 @@ impl<T> RingBuf<T> {\n     /// Provides a mutable reference to the front element, or `None` if the\n     /// sequence is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -496,7 +496,7 @@ impl<T> RingBuf<T> {\n     /// Provides a reference to the back element, or `None` if the sequence is\n     /// empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -516,7 +516,7 @@ impl<T> RingBuf<T> {\n     /// Provides a mutable reference to the back element, or `None` if the\n     /// sequence is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -541,7 +541,7 @@ impl<T> RingBuf<T> {\n     /// Removes the first element and returns it, or `None` if the sequence is\n     /// empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -567,7 +567,7 @@ impl<T> RingBuf<T> {\n \n     /// Inserts an element first in the sequence.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::RingBuf;\n@@ -597,7 +597,7 @@ impl<T> RingBuf<T> {\n \n     /// Appends an element to the back of a buffer\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::RingBuf;\n@@ -628,7 +628,7 @@ impl<T> RingBuf<T> {\n     /// Removes the last element from a buffer and returns it, or `None` if\n     /// it is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// use std::collections::RingBuf;"}, {"sha": "96d3ecb4d679d33cf96fa5702129fcb93cc269cc", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -297,7 +297,7 @@ pub trait CloneSliceAllocPrelude<T> for Sized? {\n     /// Creates an iterator that yields every possible permutation of the\n     /// vector in succession.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let v = [1i, 2, 3];\n@@ -308,7 +308,7 @@ pub trait CloneSliceAllocPrelude<T> for Sized? {\n     /// }\n     /// ```\n     ///\n-    /// # Example 2: iterating through permutations one by one.\n+    /// Iterating through permutations one by one.\n     ///\n     /// ```rust\n     /// let v = [1i, 2, 3];\n@@ -567,7 +567,7 @@ pub trait OrdSliceAllocPrelude<T> for Sized? {\n     ///\n     /// This is equivalent to `self.sort_by(|a, b| a.cmp(b))`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [-5i, 4, 1, -3, 2];\n@@ -596,7 +596,7 @@ pub trait SliceAllocPrelude<T> for Sized? {\n     /// This sort is `O(n log n)` worst-case and stable, but allocates\n     /// approximately `2 * n`, where `n` is the length of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [5i, 4, 1, 3, 2];\n@@ -621,7 +621,7 @@ pub trait SliceAllocPrelude<T> for Sized? {\n     /// * start - The index into `src` to start copying from\n     /// * end - The index into `src` to stop copying from\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut a = [1i, 2, 3, 4, 5];"}, {"sha": "3195d76d98899986a7c53cc2b3c4d02233719feb", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -93,7 +93,7 @@ Section: Creating a string\n pub trait StrVector for Sized? {\n     /// Concatenates a vector of strings.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let first = \"Restaurant at the End of the\".to_string();\n@@ -105,7 +105,7 @@ pub trait StrVector for Sized? {\n \n     /// Concatenates a vector of strings, placing a given separator between each.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let first = \"Roast\".to_string();\n@@ -382,7 +382,7 @@ impl<'a> Iterator<char> for Recompositions<'a> {\n ///\n /// The original string with all occurrences of `from` replaced with `to`.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```rust\n /// use std::str;\n@@ -440,7 +440,7 @@ pub type SendStr = CowString<'static>;\n impl<'a> MaybeOwned<'a> {\n     /// Returns `true` if this `MaybeOwned` wraps an owned string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ``` ignore\n     /// let string = String::from_str(\"orange\");\n@@ -457,7 +457,7 @@ impl<'a> MaybeOwned<'a> {\n \n     /// Returns `true` if this `MaybeOwned` wraps a borrowed string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ``` ignore\n     /// let string = \"orange\";\n@@ -492,7 +492,7 @@ pub trait IntoMaybeOwned<'a> {\n #[deprecated = \"use std::borrow::IntoCow\"]\n #[allow(deprecated)]\n impl<'a> IntoMaybeOwned<'a> for String {\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ``` ignore\n     /// let owned_string = String::from_str(\"orange\");\n@@ -509,7 +509,7 @@ impl<'a> IntoMaybeOwned<'a> for String {\n #[deprecated = \"use std::borrow::IntoCow\"]\n #[allow(deprecated)]\n impl<'a> IntoMaybeOwned<'a> for &'a str {\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ``` ignore\n     /// let string = \"orange\";\n@@ -524,7 +524,7 @@ impl<'a> IntoMaybeOwned<'a> for &'a str {\n #[allow(deprecated)]\n #[deprecated = \"use std::borrow::IntoCow\"]\n impl<'a> IntoMaybeOwned<'a> for MaybeOwned<'a> {\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ``` ignore\n     /// let str = \"orange\";\n@@ -708,7 +708,7 @@ pub trait StrAllocating: Str {\n     ///\n     /// The original string with all occurrences of `from` replaced with `to`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let s = \"Do you know the muffin man,"}, {"sha": "bad7b069df22a11e859dfe90f40d44921ac64bbb", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -39,7 +39,7 @@ pub struct String {\n impl String {\n     /// Creates a new string buffer initialized with the empty string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::new();\n@@ -56,7 +56,7 @@ impl String {\n     /// The string will be able to hold exactly `capacity` bytes without\n     /// reallocating. If `capacity` is 0, the string will not allocate.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::with_capacity(10);\n@@ -71,7 +71,7 @@ impl String {\n \n     /// Creates a new string buffer from the given string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let s = String::from_str(\"hello\");\n@@ -89,7 +89,7 @@ impl String {\n     /// Returns `Err` with the original vector if the vector contains invalid\n     /// UTF-8.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let hello_vec = vec![104, 101, 108, 108, 111];\n@@ -113,7 +113,7 @@ impl String {\n     /// Converts a vector of bytes to a new UTF-8 string.\n     /// Any invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let input = b\"Hello \\xF0\\x90\\x80World\";\n@@ -240,7 +240,7 @@ impl String {\n     /// Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\n     /// if `v` contains any invalid data.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// // \ud834\udd1emusic\n@@ -267,7 +267,8 @@ impl String {\n     /// Decode a UTF-16 encoded vector `v` into a string, replacing\n     /// invalid data with the replacement character (U+FFFD).\n     ///\n-    /// # Example\n+    /// # Examples\n+    ///\n     /// ```rust\n     /// // \ud834\udd1emus<invalid>ic<invalid>\n     /// let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n@@ -284,7 +285,7 @@ impl String {\n \n     /// Convert a vector of `char`s to a `String`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let chars = &['h', 'e', 'l', 'l', 'o'];\n@@ -345,7 +346,7 @@ impl String {\n \n     /// Return the underlying byte buffer, encoded as UTF-8.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let s = String::from_str(\"hello\");\n@@ -360,7 +361,7 @@ impl String {\n \n     /// Creates a string buffer by repeating a character `length` times.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let s = String::from_char(5, 'a');\n@@ -386,7 +387,7 @@ impl String {\n \n     /// Pushes the given string onto this string buffer.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::from_str(\"foo\");\n@@ -401,7 +402,7 @@ impl String {\n \n     /// Pushes `ch` onto the given string `count` times.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::from_str(\"foo\");\n@@ -418,7 +419,7 @@ impl String {\n \n     /// Returns the number of bytes that this string buffer can hold without reallocating.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let s = String::with_capacity(10);\n@@ -443,7 +444,7 @@ impl String {\n     ///\n     /// Panics if the new capacity overflows `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::new();\n@@ -467,7 +468,7 @@ impl String {\n     ///\n     /// Panics if the new capacity overflows `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::new();\n@@ -482,7 +483,7 @@ impl String {\n \n     /// Shrinks the capacity of this string buffer to match its length.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::from_str(\"foo\");\n@@ -499,7 +500,7 @@ impl String {\n \n     /// Adds the given character to the end of the string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::from_str(\"abc\");\n@@ -529,7 +530,7 @@ impl String {\n \n     /// Works with the underlying buffer as a byte slice.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let s = String::from_str(\"hello\");\n@@ -549,7 +550,7 @@ impl String {\n     /// Panics if `new_len` > current length,\n     /// or if `new_len` is not a character boundary.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::from_str(\"hello\");\n@@ -566,7 +567,7 @@ impl String {\n     /// Removes the last character from the string buffer and returns it.\n     /// Returns `None` if this string buffer is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::from_str(\"foo\");\n@@ -603,7 +604,7 @@ impl String {\n     /// If `idx` does not lie on a character boundary, then this function will\n     /// panic.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::from_str(\"foo\");\n@@ -664,7 +665,7 @@ impl String {\n     /// This is unsafe because it does not check\n     /// to ensure that the resulting string will be valid UTF-8.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = String::from_str(\"hello\");\n@@ -682,7 +683,7 @@ impl String {\n \n     /// Return the number of bytes in this string.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = \"foo\".to_string();\n@@ -694,7 +695,7 @@ impl String {\n \n     /// Returns true if the string contains no bytes\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut v = String::new();\n@@ -706,7 +707,7 @@ impl String {\n \n     /// Truncates the string, returning it to 0 length.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut s = \"foo\".to_string();"}, {"sha": "24395ca64939cfa180651c5d30fb1877ecfe97e7", "filename": "src/libcollections/tree/map.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Ftree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Ftree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fmap.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -31,7 +31,7 @@ use vec::Vec;\n /// as a right child. The time complexity is the same, and re-balancing\n /// operations are more frequent but also cheaper.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::TreeMap;\n@@ -207,7 +207,7 @@ impl<K: Ord, Sized? Q, V> IndexMut<Q, V> for TreeMap<K, V> where Q: BorrowFrom<K\n impl<K: Ord, V> TreeMap<K, V> {\n     /// Creates an empty `TreeMap`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -218,7 +218,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n \n     /// Gets a lazy iterator over the keys in the map, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -240,7 +240,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// Gets a lazy iterator over the values in the map, in ascending order\n     /// with respect to the corresponding keys.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -261,7 +261,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n \n     /// Gets a lazy iterator over the key-value pairs in the map, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -287,7 +287,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n \n     /// Gets a lazy reverse iterator over the key-value pairs in the map, in descending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -308,7 +308,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// Gets a lazy forward iterator over the key-value pairs in the\n     /// map, with the values being mutable.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -340,7 +340,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// Gets a lazy reverse iterator over the key-value pairs in the\n     /// map, with the values being mutable.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -365,7 +365,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n \n     /// Gets a lazy iterator that consumes the treemap.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -393,7 +393,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n \n     /// Return the number of elements in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -408,7 +408,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n \n     /// Return true if the map contains no elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -424,7 +424,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n \n     /// Clears the map, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -451,7 +451,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -474,7 +474,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -503,7 +503,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -533,7 +533,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// Inserts a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise, `None` is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -565,7 +565,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -590,7 +590,7 @@ impl<K, V> TreeMap<K, V> {\n     /// with current key and guides tree navigation. That means `f` should\n     /// be aware of natural ordering of the tree.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use collections::tree_map::TreeMap;\n@@ -620,7 +620,7 @@ impl<K, V> TreeMap<K, V> {\n     /// with current key and guides tree navigation. That means `f` should\n     /// be aware of natural ordering of the tree.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut t = collections::tree_map::TreeMap::new();\n@@ -691,7 +691,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// Returns a lazy iterator to the first key-value pair whose key is not less than `k`\n     /// If all keys in map are less than `k` an empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -713,7 +713,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// Returns a lazy iterator to the first key-value pair whose key is greater than `k`\n     /// If all keys in map are less than or equal to `k` an empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -749,7 +749,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// If all keys in map are less than `k` an empty iterator is\n     /// returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;\n@@ -783,7 +783,7 @@ impl<K: Ord, V> TreeMap<K, V> {\n     /// If all keys in map are less than or equal to `k` an empty iterator\n     /// is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeMap;"}, {"sha": "ea9aff564483fd94a3fc6932b2a766471b91d17b", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -27,7 +27,7 @@ use tree_map::{TreeMap, Entries, RevEntries, MoveEntries};\n /// only requirement is that the type of the elements contained ascribes to the\n /// `Ord` trait.\n ///\n-/// ## Example\n+/// ## Examples\n ///\n /// ```{rust}\n /// use std::collections::TreeSet;\n@@ -142,7 +142,7 @@ impl<T: Ord> Default for TreeSet<T> {\n impl<T: Ord> TreeSet<T> {\n     /// Creates an empty `TreeSet`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -154,7 +154,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Gets a lazy iterator over the values in the set, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -173,7 +173,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Gets a lazy iterator over the values in the set, in descending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -192,7 +192,7 @@ impl<T: Ord> TreeSet<T> {\n     /// Creates a consuming iterator, that is, one that moves each value out of the\n     /// set in ascending order. The set cannot be used after calling this.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -211,7 +211,7 @@ impl<T: Ord> TreeSet<T> {\n     /// Gets a lazy iterator pointing to the first value not less than `v` (greater or equal).\n     /// If all elements in the set are less than `v` empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -230,7 +230,7 @@ impl<T: Ord> TreeSet<T> {\n     /// If all elements in the set are less than or equal to `v` an\n     /// empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -247,7 +247,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Visits the values representing the difference, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -275,7 +275,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Visits the values representing the symmetric difference, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -302,7 +302,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Visits the values representing the intersection, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -326,7 +326,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Visits the values representing the union, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -349,7 +349,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Return the number of elements in the set\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -365,7 +365,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Returns true if the set contains no elements\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -380,7 +380,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Clears the set, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -400,7 +400,7 @@ impl<T: Ord> TreeSet<T> {\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -420,7 +420,7 @@ impl<T: Ord> TreeSet<T> {\n     /// Returns `true` if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -441,7 +441,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Returns `true` if the set is a subset of another.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -482,7 +482,7 @@ impl<T: Ord> TreeSet<T> {\n \n     /// Returns `true` if the set is a superset of another.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -507,7 +507,7 @@ impl<T: Ord> TreeSet<T> {\n     /// Adds a value to the set. Returns `true` if the value was not already\n     /// present in the set.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -529,7 +529,7 @@ impl<T: Ord> TreeSet<T> {\n     /// but the ordering on the borrowed form *must* match the\n     /// ordering on the value type.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -669,7 +669,7 @@ impl<'a, T: Ord> Iterator<&'a T> for UnionItems<'a, T> {\n impl<T: Ord + Clone> BitOr<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     /// Returns the union of `self` and `rhs` as a new `TreeSet<T>`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -690,7 +690,7 @@ impl<T: Ord + Clone> BitOr<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n impl<T: Ord + Clone> BitAnd<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     /// Returns the intersection of `self` and `rhs` as a new `TreeSet<T>`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -711,7 +711,7 @@ impl<T: Ord + Clone> BitAnd<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n impl<T: Ord + Clone> BitXor<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     /// Returns the symmetric difference of `self` and `rhs` as a new `TreeSet<T>`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;\n@@ -732,7 +732,7 @@ impl<T: Ord + Clone> BitXor<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n impl<T: Ord + Clone> Sub<TreeSet<T>, TreeSet<T>> for TreeSet<T> {\n     /// Returns the difference of `self` and `rhs` as a new `TreeSet<T>`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TreeSet;"}, {"sha": "1b087d2e63dd5dfcd175e8e9115f3d57fec81e89", "filename": "src/libcollections/trie/map.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Ftrie%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Ftrie%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fmap.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -53,7 +53,7 @@ const MAX_DEPTH: uint = uint::BITS / SHIFT;\n /// 4 bits. If both numbers are used as keys, a chain of maximum length will be created to\n /// differentiate them.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::TrieMap;\n@@ -158,7 +158,7 @@ impl<T> Default for TrieMap<T> {\n impl<T> TrieMap<T> {\n     /// Creates an empty `TrieMap`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -173,7 +173,7 @@ impl<T> TrieMap<T> {\n     /// Visits all key-value pairs in reverse order. Aborts traversal when `f` returns `false`.\n     /// Returns `true` if `f` returns `true` for all elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -209,7 +209,7 @@ impl<T> TrieMap<T> {\n \n     /// Gets an iterator over the key-value pairs in the map, ordered by keys.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -233,7 +233,7 @@ impl<T> TrieMap<T> {\n     /// Gets an iterator over the key-value pairs in the map, with the\n     /// ability to mutate the values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -260,7 +260,7 @@ impl<T> TrieMap<T> {\n \n     /// Return the number of elements in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -276,7 +276,7 @@ impl<T> TrieMap<T> {\n \n     /// Return true if the map contains no elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -292,7 +292,7 @@ impl<T> TrieMap<T> {\n \n     /// Clears the map, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -317,7 +317,7 @@ impl<T> TrieMap<T> {\n \n     /// Returns a reference to the value corresponding to the key.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -350,7 +350,7 @@ impl<T> TrieMap<T> {\n \n     /// Returns true if the map contains a value for the specified key.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -374,7 +374,7 @@ impl<T> TrieMap<T> {\n \n     /// Returns a mutable reference to the value corresponding to the key.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -402,7 +402,7 @@ impl<T> TrieMap<T> {\n     /// Inserts a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise, `None` is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -433,7 +433,7 @@ impl<T> TrieMap<T> {\n     /// Removes a key from the map, returning the value at the key if the key\n     /// was previously in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -551,7 +551,7 @@ impl<T> TrieMap<T> {\n     /// Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\n     /// If all keys in the map are less than `key` an empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -568,7 +568,7 @@ impl<T> TrieMap<T> {\n     /// Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\n     /// If all keys in the map are not greater than `key` an empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -593,7 +593,7 @@ impl<T> TrieMap<T> {\n     /// Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\n     /// If all keys in the map are less than `key` an empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;\n@@ -618,7 +618,7 @@ impl<T> TrieMap<T> {\n     /// Gets an iterator pointing to the first key-value pair whose key is greater than `key`.\n     /// If all keys in the map are not greater than `key` an empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieMap;"}, {"sha": "46052ff2f5080c2e488317c097a703dfc782a86b", "filename": "src/libcollections/trie/set.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Ftrie%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Ftrie%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fset.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -24,7 +24,7 @@ use trie_map::{TrieMap, Entries};\n \n /// A set implemented as a radix trie.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::TrieSet;\n@@ -77,7 +77,7 @@ impl Default for TrieSet {\n impl TrieSet {\n     /// Creates an empty TrieSet.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -92,7 +92,7 @@ impl TrieSet {\n     /// Visits all values in reverse order. Aborts traversal when `f` returns `false`.\n     /// Returns `true` if `f` returns `true` for all elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -115,7 +115,7 @@ impl TrieSet {\n \n     /// Gets an iterator over the values in the set, in sorted order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -140,7 +140,7 @@ impl TrieSet {\n     /// Gets an iterator pointing to the first value that is not less than `val`.\n     /// If all values in the set are less than `val` an empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -157,7 +157,7 @@ impl TrieSet {\n     /// Gets an iterator pointing to the first value that key is greater than `val`.\n     /// If all values in the set are less than or equal to `val` an empty iterator is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -173,7 +173,7 @@ impl TrieSet {\n \n     /// Visits the values representing the difference, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -201,7 +201,7 @@ impl TrieSet {\n \n     /// Visits the values representing the symmetric difference, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -227,7 +227,7 @@ impl TrieSet {\n \n     /// Visits the values representing the intersection, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -250,7 +250,7 @@ impl TrieSet {\n \n     /// Visits the values representing the union, in ascending order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -273,7 +273,7 @@ impl TrieSet {\n \n     /// Return the number of elements in the set\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -289,7 +289,7 @@ impl TrieSet {\n \n     /// Returns true if the set contains no elements\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -304,7 +304,7 @@ impl TrieSet {\n \n     /// Clears the set, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -320,7 +320,7 @@ impl TrieSet {\n \n     /// Returns `true` if the set contains a value.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -338,7 +338,7 @@ impl TrieSet {\n     /// Returns `true` if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -360,7 +360,7 @@ impl TrieSet {\n \n     /// Returns `true` if the set is a subset of another.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -382,7 +382,7 @@ impl TrieSet {\n \n     /// Returns `true` if the set is a superset of another.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -408,7 +408,7 @@ impl TrieSet {\n     /// Adds a value to the set. Returns `true` if the value was not already\n     /// present in the set.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -428,7 +428,7 @@ impl TrieSet {\n     /// Removes a value from the set. Returns `true` if the value was\n     /// present in the set.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -466,7 +466,7 @@ impl Extend<uint> for TrieSet {\n impl BitOr<TrieSet, TrieSet> for TrieSet {\n     /// Returns the union of `self` and `rhs` as a new `TrieSet`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -487,7 +487,7 @@ impl BitOr<TrieSet, TrieSet> for TrieSet {\n impl BitAnd<TrieSet, TrieSet> for TrieSet {\n     /// Returns the intersection of `self` and `rhs` as a new `TrieSet`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -508,7 +508,7 @@ impl BitAnd<TrieSet, TrieSet> for TrieSet {\n impl BitXor<TrieSet, TrieSet> for TrieSet {\n     /// Returns the symmetric difference of `self` and `rhs` as a new `TrieSet`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;\n@@ -529,7 +529,7 @@ impl BitXor<TrieSet, TrieSet> for TrieSet {\n impl Sub<TrieSet, TrieSet> for TrieSet {\n     /// Returns the difference of `self` and `rhs` as a new `TrieSet`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::TrieSet;"}, {"sha": "a575d1f4bd294dd8202ee7f56376a41d9a34a94a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -134,7 +134,7 @@ impl<T> Vec<T> {\n     ///\n     /// The vector will not allocate until elements are pushed onto it.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec: Vec<int> = Vec::new();\n@@ -160,7 +160,7 @@ impl<T> Vec<T> {\n     /// the main `Vec` docs above, 'Capacity and reallocation'.) To create\n     /// a vector of a given length, use `Vec::from_elem` or `Vec::from_fn`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec: Vec<int> = Vec::with_capacity(10);\n@@ -197,7 +197,7 @@ impl<T> Vec<T> {\n     /// Creates a `Vec` of size `length` and initializes the elements to the\n     /// value returned by the closure `op`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let vec = Vec::from_fn(3, |idx| idx * 2);\n@@ -222,7 +222,7 @@ impl<T> Vec<T> {\n     ///\n     /// This is highly unsafe, due to the number of invariants that aren't checked.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::ptr;\n@@ -279,7 +279,7 @@ impl<T> Vec<T> {\n     /// satisfy `f` and all elements of `B` do not. The order of elements is\n     /// preserved.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let vec = vec![1i, 2i, 3i, 4i];\n@@ -310,7 +310,8 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// Creates a `Vec` with `length` copies of `value`.\n     ///\n-    /// # Example\n+    /// # Examples\n+    ///\n     /// ```\n     /// let vec = Vec::from_elem(3, \"hi\");\n     /// println!(\"{}\", vec); // prints [hi, hi, hi]\n@@ -335,7 +336,7 @@ impl<T: Clone> Vec<T> {\n     /// Iterates over the slice `other`, clones each element, and then appends\n     /// it to this `Vec`. The `other` vector is traversed in-order.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec = vec![1i];\n@@ -366,7 +367,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// Adds `n` copies of `value` to the `Vec`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec = vec![\"hello\"];\n@@ -390,7 +391,7 @@ impl<T: Clone> Vec<T> {\n     /// `(a, b)`, where all elements of `a` satisfy `f` and all elements of `b`\n     /// do not. The order of elements is preserved.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let vec = vec![1i, 2, 3, 4];\n@@ -641,7 +642,7 @@ impl<T> Vec<T> {\n     /// Returns the number of elements the vector can hold without\n     /// reallocating.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let vec: Vec<int> = Vec::with_capacity(10);\n@@ -666,7 +667,7 @@ impl<T> Vec<T> {\n     ///\n     /// Panics if the new capacity overflows `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec: Vec<int> = vec![1];\n@@ -704,7 +705,7 @@ impl<T> Vec<T> {\n     ///\n     /// Panics if the new capacity overflows `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec: Vec<int> = vec![1];\n@@ -725,7 +726,7 @@ impl<T> Vec<T> {\n     /// down as close as possible to the length but the allocator may still\n     /// inform the vector that there is space for a few more elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec: Vec<int> = Vec::with_capacity(10);\n@@ -778,7 +779,7 @@ impl<T> Vec<T> {\n     /// If `len` is greater than the vector's current length, this has no\n     /// effect.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec = vec![1i, 2, 3, 4];\n@@ -800,7 +801,7 @@ impl<T> Vec<T> {\n \n     /// Returns a mutable slice of the elements of `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// fn foo(slice: &mut [int]) {}\n@@ -823,7 +824,7 @@ impl<T> Vec<T> {\n     /// value out of the vector (from start to end). The vector cannot\n     /// be used after calling this.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n@@ -855,7 +856,7 @@ impl<T> Vec<T> {\n     /// modifying its buffers, so it is up to the caller to ensure that the\n     /// vector is actually the specified size.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut v = vec![1u, 2, 3, 4];\n@@ -874,7 +875,8 @@ impl<T> Vec<T> {\n     ///\n     /// Returns `None` if `index` is out of bounds.\n     ///\n-    /// # Example\n+    /// # Examples\n+    ///\n     /// ```\n     /// let mut v = vec![\"foo\", \"bar\", \"baz\", \"qux\"];\n     ///\n@@ -906,7 +908,7 @@ impl<T> Vec<T> {\n     /// Panics if `index` is not between `0` and the vector's length (both\n     /// bounds inclusive).\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec = vec![1i, 2, 3];\n@@ -941,7 +943,7 @@ impl<T> Vec<T> {\n     /// shifting all elements after position `index` one position to the left.\n     /// Returns `None` if `i` is out of bounds.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut v = vec![1i, 2, 3];\n@@ -981,7 +983,7 @@ impl<T> Vec<T> {\n     /// In other words, remove all elements `e` such that `f(&e)` returns false.\n     /// This method operates in place and preserves the order of the retained elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec = vec![1i, 2, 3, 4];\n@@ -1013,7 +1015,7 @@ impl<T> Vec<T> {\n     /// The vector is grown by `n` elements. The i-th new element are initialized to the value\n     /// returned by `f(i)` where `i` is in the range [0, n).\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec = vec![0u, 1];\n@@ -1034,7 +1036,7 @@ impl<T> Vec<T> {\n     ///\n     /// Panics if the number of elements in the vector overflows a `uint`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut vec = vec!(1i, 2);\n@@ -1071,7 +1073,7 @@ impl<T> Vec<T> {\n     /// Removes the last element from a vector and returns it, or `None` if\n     /// it is empty.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut vec = vec![1i, 2, 3];\n@@ -1093,7 +1095,7 @@ impl<T> Vec<T> {\n \n     /// Clears the vector, removing all values.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut v = vec![1i, 2, 3];\n@@ -1108,7 +1110,7 @@ impl<T> Vec<T> {\n \n     /// Return the number of elements in the vector\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let a = vec![1i, 2, 3];\n@@ -1120,7 +1122,7 @@ impl<T> Vec<T> {\n \n     /// Returns true if the vector contains no elements\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut v = Vec::new();\n@@ -1155,7 +1157,7 @@ impl<T: PartialEq> Vec<T> {\n     ///\n     /// If the vector is sorted, this removes all duplicates.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let mut vec = vec![1i, 2, 2, 3, 2];\n@@ -1251,7 +1253,7 @@ impl<T: PartialEq> Vec<T> {\n impl<T> AsSlice<T> for Vec<T> {\n     /// Returns a slice into `self`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// fn foo(slice: &[int]) {}\n@@ -1555,7 +1557,7 @@ impl<T> Vec<T> {\n     /// Panics if `T` and `U` have differing sizes or are not zero-sized and\n     /// have differing minimal alignments.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// let v = vec![0u, 1, 2];"}, {"sha": "968be982be4da9f322c5948dbbfbeaa762eeb7ec", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09defa070391cb4e674574ea262b4a1e4d903f8/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=c09defa070391cb4e674574ea262b4a1e4d903f8", "patch": "@@ -30,7 +30,7 @@ use hash::Hash;\n \n /// A map optimized for small integer keys.\n ///\n-/// # Example\n+/// # Examples\n ///\n /// ```\n /// use std::collections::VecMap;\n@@ -92,7 +92,7 @@ impl <S: hash::Writer, T: Hash<S>> Hash<S> for VecMap<T> {\n impl<V> VecMap<V> {\n     /// Creates an empty `VecMap`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -104,7 +104,7 @@ impl<V> VecMap<V> {\n     /// Creates an empty `VecMap` with space for at least `capacity`\n     /// elements before resizing.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -118,7 +118,7 @@ impl<V> VecMap<V> {\n     /// Returns the number of elements the `VecMap` can hold without\n     /// reallocating.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -148,7 +148,7 @@ impl<V> VecMap<V> {\n     /// Returns an iterator visiting all key-value pairs in ascending order by the keys.\n     /// The iterator's element type is `(uint, &'r V)`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -176,7 +176,7 @@ impl<V> VecMap<V> {\n     /// with mutable references to the values.\n     /// The iterator's element type is `(uint, &'r mut V)`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -207,7 +207,7 @@ impl<V> VecMap<V> {\n     /// the keys, emptying (but not consuming) the original `VecMap`.\n     /// The iterator's element type is `(uint, &'r V)`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -235,7 +235,7 @@ impl<V> VecMap<V> {\n \n     /// Return the number of elements in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -252,7 +252,7 @@ impl<V> VecMap<V> {\n \n     /// Return true if the map contains no elements.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -269,7 +269,7 @@ impl<V> VecMap<V> {\n \n     /// Clears the map, removing all key-value pairs.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -290,7 +290,7 @@ impl<V> VecMap<V> {\n \n     /// Returns a reference to the value corresponding to the key.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -314,7 +314,7 @@ impl<V> VecMap<V> {\n \n     /// Returns true if the map contains a value for the specified key.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -338,7 +338,7 @@ impl<V> VecMap<V> {\n \n     /// Returns a mutable reference to the value corresponding to the key.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -372,7 +372,7 @@ impl<V> VecMap<V> {\n     /// Inserts a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise, `None` is returned.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -403,7 +403,7 @@ impl<V> VecMap<V> {\n     /// Removes a key from the map, returning the value at the key if the key\n     /// was previously in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -428,7 +428,7 @@ impl<V:Clone> VecMap<V> {\n     /// Otherwise, sets the value to `newval`.\n     /// Returns `true` if the key did not already exist in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;\n@@ -452,7 +452,7 @@ impl<V:Clone> VecMap<V> {\n     /// Otherwise, sets the value to `newval`.\n     /// Returns `true` if the key did not already exist in the map.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```\n     /// use std::collections::VecMap;"}]}