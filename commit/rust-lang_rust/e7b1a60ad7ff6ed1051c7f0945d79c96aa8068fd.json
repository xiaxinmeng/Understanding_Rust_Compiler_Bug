{"sha": "e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YjFhNjBhZDdmZjZlZDEwNTFjN2YwOTQ1ZDc5Yzk2YWE4MDY4ZmQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-13T17:12:57Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:24:00Z"}, "message": "Remove core_intrinsics feature gate", "tree": {"sha": "d93d3c6ce94883e6ffa8ee9acc7e1a01580bb2ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93d3c6ce94883e6ffa8ee9acc7e1a01580bb2ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "html_url": "https://github.com/rust-lang/rust/commit/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a85193149cca28b18a7110ce187c69130f1e3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a85193149cca28b18a7110ce187c69130f1e3d4", "html_url": "https://github.com/rust-lang/rust/commit/6a85193149cca28b18a7110ce187c69130f1e3d4"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "72736c761114845b0285f567ccb886c21ef8ff36", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -56,6 +56,9 @@ pub trait Step<'a>: Serialize + Sized {\n     /// somewhat harder.\n     type Output: Serialize + Deserialize<'a> + 'a;\n \n+    /// This type, but with a 'static bound. Used for caching the step.\n+    type Id: 'static;\n+\n     const DEFAULT: bool = false;\n \n     /// Run this rule for all hosts without cross compiling.\n@@ -190,6 +193,7 @@ impl<'a> Builder<'a> {\n             target: &'a str,\n         }\n         impl<'a> Step<'a> for Libdir<'a> {\n+            type Id = Libdir<'static>;\n             type Output = PathBuf;\n             fn run(self, builder: &Builder) -> PathBuf {\n                 let compiler = self.compiler;"}, {"sha": "475e3abfd4097add110796fb9fc6ee5d2fa324f0", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -10,10 +10,11 @@\n \n use serde_json;\n use serde::{Serialize, Deserialize};\n+use std::any::TypeId;\n+use builder::Step;\n \n use std::fmt;\n use std::mem;\n-use std::intrinsics;\n use std::collections::HashMap;\n use std::cell::RefCell;\n \n@@ -29,31 +30,20 @@ use std::cell::RefCell;\n pub struct Cache(RefCell<HashMap<Key, Box<str>>>);\n \n fn to_json<T: Serialize>(element: &T) -> String {\n-    let type_id = unsafe {\n-        intrinsics::type_name::<T>()\n-    };\n-\n-    t!(serde_json::to_string(&(type_id, element)))\n+    t!(serde_json::to_string(element))\n }\n \n fn from_json<'a, O: Deserialize<'a>>(data: &'a str) -> O {\n-    let type_id = unsafe {\n-        intrinsics::type_name::<O>()\n-    };\n-\n-    let (de_type_id, element): (&'a str, O)  = t!(serde_json::from_str(data));\n-\n-    assert_eq!(type_id, de_type_id);\n-\n-    element\n+    t!(serde_json::from_str(data))\n }\n \n #[derive(Clone, PartialEq, Eq, Hash)]\n-pub struct Key(String);\n+pub struct Key(TypeId, String);\n \n impl fmt::Debug for Key {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt.write_str(&self.0)\n+        fmt.write_str(&format!(\"{:?}; \", self.0))?;\n+        fmt.write_str(&self.1)\n     }\n }\n \n@@ -62,8 +52,8 @@ impl Cache {\n         Cache(RefCell::new(HashMap::new()))\n     }\n \n-    pub fn to_key<K: Serialize>(key: &K) -> Key {\n-        Key(to_json(key))\n+    pub fn to_key<'a, K: Step<'a>>(key: &K) -> Key {\n+        Key(TypeId::of::<K::Id>(), to_json(key))\n     }\n \n     /// Puts a value into the cache. Will panic if called more than once with"}, {"sha": "8adfed44f0187420ded9ac458e9b90d5201b1278", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -99,6 +99,7 @@ pub struct Linkcheck<'a> {\n }\n \n impl<'a> Step<'a> for Linkcheck<'a> {\n+    type Id = Linkcheck<'static>;\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n@@ -148,6 +149,7 @@ pub struct Cargotest<'a> {\n }\n \n impl<'a> Step<'a> for Cargotest<'a> {\n+    type Id = Cargotest<'static>;\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n@@ -198,6 +200,7 @@ pub struct Cargo<'a> {\n }\n \n impl<'a> Step<'a> for Cargo<'a> {\n+    type Id = Cargo<'static>;\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n@@ -307,6 +310,7 @@ pub struct Tidy<'a> {\n }\n \n impl<'a> Step<'a> for Tidy<'a> {\n+    type Id = Tidy<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -509,6 +513,7 @@ static COMPILETESTS: &[Test] = &[\n ];\n \n impl<'a> Step<'a> for Compiletest<'a> {\n+    type Id = Compiletest<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n \n@@ -775,6 +780,7 @@ pub struct Docs<'a> {\n //     .host(true)\n //     .run(move |s| check::docs(build, &s.compiler()));\n impl<'a> Step<'a> for Docs<'a> {\n+    type Id = Docs<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -840,6 +846,7 @@ pub struct ErrorIndex<'a> {\n }\n \n impl<'a> Step<'a> for ErrorIndex<'a> {\n+    type Id = ErrorIndex<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -935,6 +942,7 @@ pub struct KrateLibrustc<'a> {\n }\n \n impl<'a> Step<'a> for KrateLibrustc<'a> {\n+    type Id = KrateLibrustc<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -1045,6 +1053,7 @@ pub struct Krate<'a> {\n }\n \n impl<'a> Step<'a> for Krate<'a> {\n+    type Id = Krate<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n \n@@ -1311,6 +1320,7 @@ pub struct RemoteCopyLibs<'a> {\n }\n \n impl<'a> Step<'a> for RemoteCopyLibs<'a> {\n+    type Id = RemoteCopyLibs<'static>;\n     type Output = ();\n \n     fn run(self, builder: &Builder) {\n@@ -1362,6 +1372,7 @@ impl<'a> Step<'a> for RemoteCopyLibs<'a> {\n pub struct Distcheck;\n \n impl<'a> Step<'a> for Distcheck {\n+    type Id = Distcheck;\n     type Output = ();\n \n     /// Run \"distcheck\", a 'make check' from a tarball\n@@ -1429,6 +1440,7 @@ impl<'a> Step<'a> for Distcheck {\n pub struct Bootstrap;\n \n impl<'a> Step<'a> for Bootstrap {\n+    type Id = Bootstrap;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;"}, {"sha": "ec08bb9db2b98728b0646cd18d0d1b8aa4cc4301", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -147,6 +147,7 @@ pub struct Std<'a> {\n }\n \n impl<'a> Step<'a> for Std<'a> {\n+    type Id = Std<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n \n@@ -268,6 +269,7 @@ struct StdLink<'a> {\n }\n \n impl<'a> Step<'a> for StdLink<'a> {\n+    type Id = StdLink<'static>;\n     type Output = ();\n \n     /// Link all libstd rlibs/dylibs into the sysroot location.\n@@ -337,6 +339,7 @@ pub struct StartupObjects<'a> {\n }\n \n impl<'a> Step<'a> for StartupObjects<'a> {\n+    type Id = StartupObjects<'static>;\n     type Output = ();\n \n     fn should_run(_builder: &Builder, path: &Path) -> bool {\n@@ -403,6 +406,7 @@ pub struct Test<'a> {\n }\n \n impl<'a> Step<'a> for Test<'a> {\n+    type Id = Test<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n \n@@ -485,6 +489,7 @@ pub struct TestLink<'a> {\n }\n \n impl<'a> Step<'a> for TestLink<'a> {\n+    type Id = TestLink<'static>;\n     type Output = ();\n \n     /// Same as `std_link`, only for libtest\n@@ -519,6 +524,7 @@ pub struct Rustc<'a> {\n }\n \n impl<'a> Step<'a> for Rustc<'a> {\n+    type Id = Rustc<'static>;\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n@@ -668,6 +674,7 @@ struct RustcLink<'a> {\n }\n \n impl<'a> Step<'a> for RustcLink<'a> {\n+    type Id = RustcLink<'static>;\n     type Output = ();\n \n     /// Same as `std_link`, only for librustc\n@@ -720,6 +727,7 @@ pub struct Sysroot<'a> {\n }\n \n impl<'a> Step<'a> for Sysroot<'a> {\n+    type Id = Sysroot<'static>;\n     type Output = PathBuf;\n \n     /// Returns the sysroot for the `compiler` specified that *this build system\n@@ -766,6 +774,7 @@ pub struct Assemble<'a> {\n }\n \n impl<'a> Step<'a> for Assemble<'a> {\n+    type Id = Assemble<'static>;\n     type Output = Compiler<'a>;\n \n     /// Prepare a new compiler from the artifacts in `stage`"}, {"sha": "f19536e2f490b75fdb0f3930b8504494a7f1cd74", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -78,6 +78,7 @@ pub struct Docs<'a> {\n }\n \n impl<'a> Step<'a> for Docs<'a> {\n+    type Id = Docs<'static>;\n     type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n@@ -287,6 +288,7 @@ pub struct Mingw<'a> {\n }\n \n impl<'a> Step<'a> for Mingw<'a> {\n+    type Id = Mingw<'static>;\n     type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n@@ -355,6 +357,7 @@ pub struct Rustc<'a> {\n }\n \n impl<'a> Step<'a> for Rustc<'a> {\n+    type Id = Rustc<'static>;\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -495,6 +498,7 @@ pub struct DebuggerScripts<'a> {\n }\n \n impl<'a> Step<'a> for DebuggerScripts<'a> {\n+    type Id = DebuggerScripts<'static>;\n     type Output = ();\n \n     fn should_run(_builder: &Builder, path: &Path) -> bool {\n@@ -567,6 +571,7 @@ pub struct Std<'a> {\n }\n \n impl<'a> Step<'a> for Std<'a> {\n+    type Id = Std<'static>;\n     type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n@@ -647,6 +652,7 @@ pub struct Analysis<'a> {\n }\n \n impl<'a> Step<'a> for Analysis<'a> {\n+    type Id = Analysis<'static>;\n     type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n@@ -767,6 +773,7 @@ fn copy_src_dirs(build: &Build, src_dirs: &[&str], exclude_dirs: &[&str], dst_di\n pub struct Src;\n \n impl<'a> Step<'a> for Src {\n+    type Id = Src;\n     /// The output path of the src installer tarball\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n@@ -864,6 +871,7 @@ const CARGO_VENDOR_VERSION: &str = \"0.1.4\";\n pub struct PlainSourceTarball;\n \n impl<'a> Step<'a> for PlainSourceTarball {\n+    type Id = PlainSourceTarball;\n     /// Produces the location of the tarball generated\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n@@ -1018,6 +1026,7 @@ pub struct Cargo<'a> {\n }\n \n impl<'a> Step<'a> for Cargo<'a> {\n+    type Id = Cargo<'static>;\n     type Output = PathBuf;\n     const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -1114,6 +1123,7 @@ pub struct Rls<'a> {\n }\n \n impl<'a> Step<'a> for Rls<'a> {\n+    type Id = Rls<'static>;\n     type Output = PathBuf;\n     const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -1207,6 +1217,7 @@ pub struct Extended<'a> {\n }\n \n impl<'a> Step<'a> for Extended<'a> {\n+    type Id = Extended<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_BUILD_TARGETS: bool = true;\n@@ -1613,6 +1624,7 @@ fn add_env(build: &Build, cmd: &mut Command, target: &str) {\n pub struct HashSign;\n \n impl<'a> Step<'a> for HashSign {\n+    type Id = HashSign;\n     type Output = ();\n     const ONLY_BUILD_TARGETS: bool = true;\n     const ONLY_HOSTS: bool = true;"}, {"sha": "56715d284a6cdfb3fe08a02a58e66292f0892cbb", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -40,6 +40,7 @@ macro_rules! book {\n         }\n \n         impl<'a> Step<'a> for $name<'a> {\n+            type Id = $name<'static>;\n             type Output = ();\n             const DEFAULT: bool = true;\n \n@@ -99,6 +100,7 @@ pub struct Rustbook<'a> {\n }\n \n impl<'a> Step<'a> for Rustbook<'a> {\n+    type Id = Rustbook<'static>;\n     type Output = ();\n \n     /// Invoke `rustbook` for `target` for the doc book `name`.\n@@ -134,6 +136,7 @@ pub struct UnstableBook<'a> {\n }\n \n impl<'a> Step<'a> for UnstableBook<'a> {\n+    type Id = UnstableBook<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n \n@@ -172,6 +175,7 @@ pub struct RustbookSrc<'a> {\n }\n \n impl<'a> Step<'a> for RustbookSrc<'a> {\n+    type Id = UnstableBook<'static>;\n     type Output = ();\n \n     /// Invoke `rustbook` for `target` for the doc book `name` from the `src` path.\n@@ -220,6 +224,7 @@ pub struct TheBook<'a> {\n }\n \n impl<'a> Step<'a> for TheBook<'a> {\n+    type Id = TheBook<'static>;\n     type Output = ();\n \n     fn should_run(_builder: &Builder, path: &Path) -> bool {\n@@ -341,6 +346,7 @@ pub struct Standalone<'a> {\n }\n \n impl<'a> Step<'a> for Standalone<'a> {\n+    type Id = Standalone<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n \n@@ -448,6 +454,7 @@ pub struct Std<'a> {\n }\n \n impl<'a> Step<'a> for Std<'a> {\n+    type Id = Std<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n \n@@ -559,6 +566,7 @@ pub struct Test<'a> {\n }\n \n impl<'a> Step<'a> for Test<'a> {\n+    type Id = Test<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n \n@@ -646,6 +654,7 @@ pub struct Rustc<'a> {\n }\n \n impl<'a> Step<'a> for Rustc<'a> {\n+    type Id = Rustc<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -746,6 +755,7 @@ pub struct ErrorIndex<'a> {\n }\n \n impl<'a> Step<'a> for ErrorIndex<'a> {\n+    type Id = ErrorIndex<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -808,6 +818,7 @@ pub struct UnstableBookGen<'a> {\n }\n \n impl<'a> Step<'a> for UnstableBookGen<'a> {\n+    type Id = UnstableBookGen<'static>;\n     type Output = ();\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;"}, {"sha": "a7d36bfa70c411bc397eed9153037e46f7f73ae8", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -135,6 +135,7 @@ macro_rules! install {\n         }\n \n         impl<'a> Step<'a> for $name<'a> {\n+            type Id = $name<'static>;\n             type Output = ();\n             const DEFAULT: bool = true;\n             const ONLY_BUILD_TARGETS: bool = true;"}, {"sha": "68465604db6c9f60b710427e861c3d8bf6b8f8c1", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -116,7 +116,6 @@\n #![deny(warnings)]\n #![allow(stable_features)]\n #![feature(associated_consts)]\n-#![feature(core_intrinsics)]\n \n #[macro_use]\n extern crate build_helper;"}, {"sha": "d8dc9f7670292801c2b1925e01b2346007a4db00", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -51,6 +51,7 @@ pub struct Llvm<'a> {\n }\n \n impl<'a> Step<'a> for Llvm<'a> {\n+    type Id = Llvm<'static>;\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n \n@@ -250,6 +251,7 @@ pub struct TestHelpers<'a> {\n }\n \n impl<'a> Step<'a> for TestHelpers<'a> {\n+    type Id = TestHelpers<'static>;\n     type Output = ();\n \n     fn should_run(_builder: &Builder, path: &Path) -> bool {\n@@ -310,6 +312,7 @@ pub struct Openssl<'a> {\n }\n \n impl<'a> Step<'a> for Openssl<'a> {\n+    type Id = Openssl<'static>;\n     type Output = ();\n \n     fn should_run(_builder: &Builder, _path: &Path) -> bool {"}, {"sha": "27785506eaeb06f0bf0672be31ef7d852de5f01d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=e7b1a60ad7ff6ed1051c7f0945d79c96aa8068fd", "patch": "@@ -52,6 +52,7 @@ pub struct CleanTools<'a> {\n }\n \n impl<'a> Step<'a> for CleanTools<'a> {\n+    type Id = CleanTools<'static>;\n     type Output = ();\n \n     /// Build a tool in `src/tools`\n@@ -86,6 +87,7 @@ pub struct ToolBuild<'a> {\n }\n \n impl<'a> Step<'a> for ToolBuild<'a> {\n+    type Id = ToolBuild<'static>;\n     type Output = PathBuf;\n \n     /// Build a tool in `src/tools`\n@@ -172,6 +174,7 @@ macro_rules! tool {\n         }\n \n         impl<'a> Step<'a> for $name<'a> {\n+            type Id = $name<'static>;\n             type Output = PathBuf;\n \n             fn should_run(_builder: &Builder, path: &Path) -> bool {\n@@ -258,6 +261,7 @@ pub struct RemoteTestServer<'a> {\n }\n \n impl<'a> Step<'a> for RemoteTestServer<'a> {\n+    type Id = RemoteTestServer<'static>;\n     type Output = PathBuf;\n \n     fn should_run(_builder: &Builder, path: &Path) -> bool {\n@@ -302,6 +306,7 @@ pub struct Cargo<'a> {\n }\n \n impl<'a> Step<'a> for Cargo<'a> {\n+    type Id = Cargo<'static>;\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n@@ -359,6 +364,7 @@ pub struct Rls<'a> {\n }\n \n impl<'a> Step<'a> for Rls<'a> {\n+    type Id = Rls<'static>;\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;"}]}